void BBUZipDataSource::~BBUZipDataSource(void **this)
{
  *this = &unk_26CECBB38;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  BBUZipDataSource *v1;
  uint64_t vars8;

  v1 = (BBUZipDataSource *)this;
  *this = &unk_26CECBB38;
  if (*((char *)this + 47) < 0)
  {
    operator delete(this[3]);
    this = (void **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

uint64_t BBUZipDataSource::init(uint64_t a1, void *a2, int a3)
{
  v5 = (const void **)(a1 + 24);
  if ((void *)(a1 + 24) == a2) {
    goto LABEL_10;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    size_t v7 = a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void *)*a2;
      size_t v8 = v7;
    }
    std::string::__assign_no_alias<false>((void **)(a1 + 24), a2, v8);
LABEL_10:
    if ((BBUZipFile::containsFile(*(void *)(a1 + 8), v5) & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>((void *)(a1 + 24), (void *)*a2, a2[1]);
    if ((BBUZipFile::containsFile(*(void *)(a1 + 8), v5) & 1) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    int FileSize = BBUZipFile::getFileSize(*(pthread_mutex_t **)(a1 + 8), v5);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 16) = FileSize;
    *(_DWORD *)(a1 + 48) = a3;
    return result;
  }
  long long v6 = *(_OWORD *)a2;
  *(void *)(a1 + 40) = a2[2];
  *(_OWORD *)v5 = v6;
  if (BBUZipFile::containsFile(*(void *)(a1 + 8), v5)) {
    goto LABEL_11;
  }
LABEL_14:
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 35;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 35;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v11 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if (*(char *)(a1 + 47) < 0) {
      v5 = (const void **)*v5;
    }
    _BBULog(15, 0, v11, (const char *)&str_4_3, "File %s does not exist\n", v12, v13, v14, (char)v5);
    return 35;
  }
  return result;
}

uint64_t BBUZipDataSource::copyData(BBUZipDataSource *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4, unsigned int a5)
{
  *a4 = a3;
  return 0;
}

uint64_t BBUZipDataSource::getSize(BBUZipDataSource *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t BBUZipDataSource::getBaseAddress(BBUZipDataSource *this)
{
  return *((unsigned int *)this + 12);
}

void *BBUZipDataSource::getNameAsString@<X0>(void *this@<X0>, void *a2@<X8>)
{
  int v3 = *((char *)this + 47);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 47);
  }
  else {
    size_t v4 = this[4];
  }
  unint64_t v5 = v4 + 4;
  memset(a2, 170, 24);
  if (v4 + 4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (uint64_t)this;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    a2[1] = v5;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    _DWORD *v10 = 544237914;
    size_t v7 = v10 + 1;
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((unsigned char *)a2 + 23) = v5;
    size_t v7 = (char *)a2 + 4;
    *(_DWORD *)a2 = 544237914;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    v11 = (const void *)(v6 + 24);
  }
  else {
    v11 = *(const void **)(v6 + 24);
  }
  this = memmove(v7, v11, v4);
LABEL_15:
  *((unsigned char *)v7 + v4) = 0;
  return this;
}

void BBUZipFile::getFileList(BBUZipFile *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  v2 = (void *)*((void *)this + 11);
  int v3 = (char *)this + 96;
  if (v2 != (void *)((char *)this + 96))
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    do
    {
      size_t v7 = operator new(0x28uLL);
      uint64_t v8 = (std::string *)(v7 + 2);
      *size_t v7 = 0;
      v7[1] = 0;
      if (*((char *)v2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v2[4], v2[5]);
        uint64_t v6 = (void *)*a2;
        uint64_t v5 = a2[2];
      }
      else
      {
        long long v9 = *((_OWORD *)v2 + 2);
        v7[4] = v2[6];
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      *size_t v7 = v6;
      v7[1] = a2;
      v6[1] = v7;
      *a2 = v7;
      a2[2] = ++v5;
      v10 = (char *)v2[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)v2[2];
          BOOL v12 = *(void *)v11 == (void)v2;
          v2 = v11;
        }
        while (!v12);
      }
      uint64_t v6 = v7;
      v2 = v11;
    }
    while (v11 != v3);
  }
}

void sub_21DF0A004(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_21DF0A020(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

const char *BBUZipDataSource::getDebugName(BBUZipDataSource *this)
{
  return "BBUFileDataSource";
}

void std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy(a1, *(void *)(a2 + 8));
    if (*(char *)(a2 + 103) < 0)
    {
      operator delete(*(void **)(a2 + 80));
      if ((*(char *)(a2 + 79) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_11;
      }
    }
    else if ((*(char *)(a2 + 79) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 56));
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_5:
      size_t v4 = (void *)a2;
LABEL_7:
      operator delete(v4);
      return;
    }
LABEL_11:
    operator delete(*(void **)(a2 + 32));
    size_t v4 = (void *)a2;
    goto LABEL_7;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>(uint64_t a1, const void **a2)
{
  v2 = (uint64_t *)(a1 + 8);
  int v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v3 + 55);
      long long v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v11 = v6 >= v10 ? v10 : v6;
      int v12 = memcmp(v9, v5, v11);
      if (v12) {
        break;
      }
      if (v10 >= v6) {
        goto LABEL_23;
      }
LABEL_9:
      int v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v12 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    size_t v7 = v3;
    int v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2) {
    return v2;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    uint64_t v14 = v7 + 4;
  }
  else {
    uint64_t v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= v6) {
    size_t v16 = v6;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return v7;
    }
    return v2;
  }
  else
  {
    if (v6 < v15) {
      return v2;
    }
    return v7;
  }
}

uint64_t __cxx_global_var_init_8()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t BBUEURCommunication::setTransportCreationTimeout(BBUEURCommunication *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
    {
LABEL_7:
      *((double *)this + 2) = a2;
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_7;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_7;
  }
  _BBULog(2, 0, "BBUEURCommunication", "", "Transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  uint64_t v11 = gBBULogMaskGet(void)::once;
  *((double *)this + 2) = a2;
  if (v11 != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
LABEL_8:
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0 && (gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(2, 0, "BBUEURCommunication", "", "Boot-up transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  }
  *((double *)this + 3) = a2;
  return 0;
}

uint64_t BBUEURCommunication::freeTransport(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 >= 1)
  {
    close(v2);
    *(_DWORD *)(a1 + 56) = -1;
  }

  return TelephonyUtilTransportFree();
}

uint64_t BBUEUR4Programmer::EUR4Item::EUR4Item(uint64_t a1, int a2, void *lpsrc)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &unk_26CECBC08;
  *(void *)(a1 + 16) = 0;
  switch(a2)
  {
    case 16385:
      if (!lpsrc) {
        goto LABEL_12;
      }
      break;
    case 16386:
      if (!lpsrc) {
        goto LABEL_12;
      }
      break;
    case 16387:
      if (!lpsrc) {
        goto LABEL_12;
      }
      break;
    case 16388:
    case 16389:
    case 16390:
      if (!lpsrc) {
        goto LABEL_12;
      }
      break;
    default:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 85, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR4Programmer.cpp", 0x3Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU Programmer item type.\")", v11, v12, v13, v14);
      goto LABEL_13;
  }
  *(void *)(a1 + 16) = v5;
  if (!v5)
  {
LABEL_12:
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR4Programmer.cpp", 0x3Eu, (ctu::LogMessageBuffer *)"Assertion failure(fImage && \"BBU Programmer item creation failed.\")", v8, v9, v10, v14);
LABEL_13:
  }
  return a1;
}

void sub_21DF0A550(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF0A564(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR4Programmer::gatherPersonalizationParameters(BBUFeedback **this, int a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  if (a3)
  {
    int v32 = -1431655766;
    BBUFeedback::handleBeginPhase(this[1], "Gathering Personalization parameters...");
    if ((*((unsigned int (**)(BBUFeedback **, int *))*this + 23))(this, &v32))
    {
      uint64_t Nonce_nl = 48;
    }
    else if (v32 == 2)
    {
      uint64_t Nonce_nl = 28;
    }
    else if (v32 == 256)
    {
      uint64_t v11 = (UInt8 *)operator new(0x40uLL);
      uint64_t Nonce_nl = BBUEUR4Programmer::handleMaverickGetNonce_nl((uint64_t)this, a2);
      if (!Nonce_nl)
      {
        uint64_t v12 = operator new(0x10uLL);
        *uint64_t v12 = &unk_26CECE7E8;
        v12[1] = 0;
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        v12[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v11 + 4, 20);
        char v14 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)*((unsigned int *)v11 + 7));
        size_t v15 = BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber((BBUEURPersonalizationParameters::EURSerialNumber *)(v11 + 24), (const unsigned __int8 *)0x20);
        size_t v16 = operator new(0x10uLL);
        *size_t v16 = &unk_26CECE908;
        v16[1] = 0;
        v16[1] = CFDataCreate(v13, v11 + 32, 32);
        *a4 = *(_DWORD *)v11;
        operator delete(v11);
        uint64_t v17 = *((void *)a5 + 1);
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        *((void *)a5 + 1) = v12;
        uint64_t v18 = *((void *)a5 + 2);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        *((void *)a5 + 2) = v14;
        (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 16))(a5, v15);
        (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 24))(a5, v16);
        if (v15 && v14)
        {
          v19 = this[1];
          (*(void (**)(void **__return_ptr, void *))(*v15 + 24))(__p, v15);
          v21 = v31 >= 0 ? (BBUpdaterCommon *)__p : (BBUpdaterCommon *)__p[0];
          v22 = BBUpdaterCommon::redactedString(v21, v20);
          int v23 = (*(uint64_t (**)(void *))(*v14 + 24))(v14);
          BBUFeedback::handleComment(v19, "   SNUM: 0x%s / CHIPID: 0x%08x", v22, v23);
          if (v31 < 0) {
            operator delete(__p[0]);
          }
        }
        v24 = this[1];
        (*(void (**)(void **__return_ptr, void *))(*v12 + 24))(__p, v12);
        if (v31 >= 0) {
          v25 = __p;
        }
        else {
          v25 = (void **)__p[0];
        }
        BBUFeedback::handleComment(v24, "   NONCE: %s", (const char *)v25);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        v26 = this[1];
        (*(void (**)(void **__return_ptr, void *))(*v16 + 24))(__p, v16);
        if (v31 >= 0) {
          v27 = __p;
        }
        else {
          v27 = (void **)__p[0];
        }
        BBUFeedback::handleComment(v26, "   PUBLIC_KEY_HASH: %s", (const char *)v27);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        v28 = this[1];
        int v29 = (*(uint64_t (**)(void))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3));
        BBUFeedback::handleComment(v28, "   CertID: %u", v29);
        uint64_t Nonce_nl = 0;
      }
    }
    else
    {
      uint64_t Nonce_nl = 12;
    }
    (*(void (**)(BBUFeedback *, uint64_t))(*(void *)this[1] + 16))(this[1], Nonce_nl);
  }
  else
  {
    BBUFeedback::handleComment(this[1], "Not in restore mode - skipping gathering Personalization parameters...");
    return 0;
  }
  return Nonce_nl;
}

void sub_21DF0A9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR4Programmer::handleMaverickGetNonce_nl(uint64_t a1, int a2)
{
  int v4 = operator new[](0x400uLL);
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Starting Maverick Protocol (%s)", "handleMaverickGetNonce_nl");
  if (ETLSAHCommandReceive() && ETLSAHCommandParseMaverickEraseQuery())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Setting HSIC cookie? %d", *(unsigned __int8 *)(a1 + 64));
    if (a2) {
      *(unsigned char *)(a1 + 4300) = 1;
    }
    if (ETLSAHCommandCreateMaverickEraseResponse())
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending Erase Response: Length %u Type %u  Erase EFS %u", v4[1], *v4, a2);
      ETLSAHCommandSend();
    }
  }
  uint64_t v5 = 3;
  if (ETLSAHCommandReceive())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Checking Manifest Request: Length %u Type %u", v4[1], *v4);
    if (ETLSAHCommandParseMaverickRootManifestQuery()) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = 3;
    }
  }
  operator delete[](v4);
  return v5;
}

uint64_t BBUEUR4Programmer::sendImage_nl(BBUFeedback **a1, void *lpsrc, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v38 = -1431655766;
  if (!lpsrc)
  {
    size_t v15 = 0;
    (*(void (**)(void))(*MEMORY[0x10] + 16))(MEMORY[0x10]);
    if (a5) {
      goto LABEL_3;
    }
    while (1)
    {
LABEL_9:
      uint64_t v22 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v38);
      if (v22) {
        return v22;
      }
      if (v38 == 256) {
        break;
      }
      if (v38 == 2) {
        return 28;
      }
      unsigned int v23 = v15[2] - 16385;
      if (v23 <= 5)
      {
        v24 = a1[1];
        if (*((unsigned char *)v24 + 44)) {
          *((_DWORD *)v24 + 10) = dword_21DFAC2CC[v23];
        }
      }
      uint64_t v20 = (*((uint64_t (**)(BBUFeedback **, void, BOOL))*a1 + 22))(a1, *((void *)v15 + 2), v23 < 6);
      if (v23 <= 5) {
        BBUFeedback::endProgressBarItem(a1[1]);
      }
      int v25 = 1;
      if (v20) {
        return v20;
      }
LABEL_36:
      uint64_t v22 = BBUEUR2Programmer::disconnectForImage_nl(a1);
      if (v22) {
        int v34 = 1;
      }
      else {
        int v34 = v25;
      }
      if (v34 == 1) {
        return v22;
      }
    }
    *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v41 = v26;
    long long v42 = v26;
    long long v39 = v26;
    long long v40 = v26;
    uint64_t Nonce_nl = BBUEUR4Programmer::handleMaverickGetNonce_nl((uint64_t)a1, a7);
    if (Nonce_nl)
    {
      uint64_t v20 = Nonce_nl;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          goto LABEL_35;
        }
        goto LABEL_22;
      }
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
      {
LABEL_22:
        if (gBBULogVerbosity < 0) {
          goto LABEL_35;
        }
        int v31 = 5;
        int v32 = "failed getting nonce\n";
LABEL_34:
        _BBULog(v31, 0, "BBUProgrammer", "", v32, v28, v29, v30, v37);
      }
LABEL_35:
      int v25 = 0;
      if (v20) {
        return v20;
      }
      goto LABEL_36;
    }
    uint64_t v33 = (*((uint64_t (**)(BBUFeedback **, uint64_t, void, uint64_t, uint64_t, void, uint64_t))*a1 + 24))(a1, a3, v39, a6, a7, 0, a8);
    if (v33)
    {
      uint64_t v20 = v33;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          goto LABEL_35;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          goto LABEL_35;
        }
      }
      if (gBBULogVerbosity < 0) {
        goto LABEL_35;
      }
      int v31 = 1;
      int v32 = "failed handling sahara send hashes command\n";
      goto LABEL_34;
    }
    uint64_t v20 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
    if (!v20) {
      goto LABEL_35;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_35;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_35;
      }
    }
    if (gBBULogVerbosity < 0) {
      goto LABEL_35;
    }
    int v31 = 1;
    int v32 = "failed handling maverick end\n";
    goto LABEL_34;
  }
  (*(void (**)(void))(**((void **)v15 + 2) + 16))(*((void *)v15 + 2));
  if ((a5 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v16 = (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*a1 + 24))(a1, a3, a4, a6, a7, 1, a8);
  if (v16)
  {
    uint64_t v20 = v16;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v20;
      }
      goto LABEL_6;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
    {
LABEL_6:
      if (gBBULogVerbosity < 0) {
        return v20;
      }
      v21 = "failed handling sahara send hashes command\n";
LABEL_53:
      _BBULog(5, 0, "BBUProgrammer", "", v21, v17, v18, v19, v37);
      return v20;
    }
    return v20;
  }
  uint64_t v35 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
  if (v35)
  {
    uint64_t v20 = v35;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v20;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v20;
      }
    }
    if (gBBULogVerbosity < 0) {
      return v20;
    }
    v21 = "failed handling maverick end\n";
    goto LABEL_53;
  }

  return BBUEUR2Programmer::disconnectForImage_nl(a1);
}

uint64_t BBUEUR4Programmer::getEFSEraseIndicated(BBUEUR4Programmer *this)
{
  return *((unsigned __int8 *)this + 4301);
}

uint64_t support::parsers::getCoredumpCrashReport(const void **a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v200 = *MEMORY[0x263EF8340];
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v8 = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  xpc_object_t v188 = 0;
  memset(v186, 170, 24);
  int v9 = *((char *)a1 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  unint64_t v11 = v10 + 1;
  memset(&__dst, 170, 24);
  if (v10 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v176 = a3;
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (stat *)operator new(v13 + 1);
    __dst.st_ino = v10 + 1;
    *(void *)&__dst.st_uid = v14 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
  }
  else
  {
    memset(&__dst, 0, 24);
    p_dst = &__dst;
    HIBYTE(__dst.st_gid) = v10 + 1;
    if (!v10) {
      goto LABEL_15;
    }
  }
  if (v9 >= 0) {
    size_t v15 = a1;
  }
  else {
    size_t v15 = *a1;
  }
  memmove(p_dst, v15, v10);
LABEL_15:
  *(_WORD *)((char *)&p_dst->st_dev + v10) = 47;
  uint64_t v16 = std::string::append((std::string *)&__dst, "report.json", 0xBuLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v186[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v186 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.st_gid) < 0) {
    operator delete(*(void **)&__dst.st_dev);
  }
  v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v18.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v18;
  *(timespec *)__dst.st_qspare = v18;
  __dst.st_birthtimespec = v18;
  *(timespec *)&__dst.st_size = v18;
  __dst.st_mtimespec = v18;
  __dst.st_ctimespec = v18;
  *(timespec *)&__dst.st_uid = v18;
  __dst.st_atimespec = v18;
  *(timespec *)&__dst.st_dev = v18;
  if (SHIBYTE(v186[2]) >= 0) {
    uint64_t v19 = v186;
  }
  else {
    uint64_t v19 = (void **)v186[0];
  }
  uint64_t v20 = (_anonymous_namespace_ *)stat((const char *)v19, &__dst);
  if (v20)
  {
    v166 = *(NSObject **)qword_26AA8EF78;
    if (!os_log_type_enabled(*(os_log_t *)qword_26AA8EF78, OS_LOG_TYPE_ERROR)) {
      goto LABEL_356;
    }
    LOWORD(__dst.st_dev) = 0;
    v167 = "error: file not found";
    goto LABEL_349;
  }
  memset(&__dst, 0, 24);
  BOOL File = support::fs::loadFile((uint64_t)v186, (uint64_t)&__dst);
  BOOL v22 = File;
  if (File)
  {
    unsigned int v23 = *(const void **)&__dst.st_dev;
    size_t v24 = __dst.st_ino - *(void *)&__dst.st_dev;
    if (__dst.st_ino - *(void *)&__dst.st_dev > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v34 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v34 = v24 | 7;
      }
      uint64_t v35 = v34 + 1;
      int v25 = operator new(v34 + 1);
      *(void *)&buf[8] = v24;
      *(void *)&buf[16] = v35 | 0x8000000000000000;
      *(void *)buf = v25;
    }
    else
    {
      buf[23] = LOBYTE(__dst.st_ino) - LOBYTE(__dst.st_dev);
      int v25 = buf;
      if (__dst.st_ino == *(void *)&__dst.st_dev)
      {
        buf[v24] = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_26:
          *(_OWORD *)a2 = *(_OWORD *)buf;
          *(void *)(a2 + 16) = *(void *)&buf[16];
          goto LABEL_27;
        }
LABEL_42:
        operator delete(*(void **)a2);
        goto LABEL_26;
      }
    }
    memmove(v25, v23, v24);
    *((unsigned char *)v25 + v24) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
  v168 = *(NSObject **)qword_26AA8EF78;
  if (os_log_type_enabled(*(os_log_t *)qword_26AA8EF78, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_21DE8A000, v168, OS_LOG_TYPE_ERROR, "error: failed to load file", buf, 2u);
  }
LABEL_27:
  if (*(void *)&__dst.st_dev)
  {
    __dst.st_ino = *(void *)&__dst.st_dev;
    operator delete(*(void **)&__dst.st_dev);
  }
  if (!v22) {
    goto LABEL_356;
  }
  *(void *)buf = 0;
  if (SHIBYTE(v186[2]) >= 0) {
    long long v26 = v186;
  }
  else {
    long long v26 = (void **)v186[0];
  }
  v27 = [MEMORY[0x263EFF950] inputStreamWithFileAtPath:[NSString stringWithUTF8String:v26]];
  uint64_t v28 = v27;
  if (!v27)
  {
    v166 = *(NSObject **)qword_26AA8EF78;
    if (!os_log_type_enabled(*(os_log_t *)qword_26AA8EF78, OS_LOG_TYPE_ERROR)) {
      goto LABEL_356;
    }
    LOWORD(__dst.st_dev) = 0;
    v167 = "error: failed to read file";
LABEL_349:
    _os_log_error_impl(&dword_21DE8A000, v166, OS_LOG_TYPE_ERROR, v167, (uint8_t *)&__dst, 2u);
    uint64_t v165 = 0;
    xpc_object_t v32 = v7;
    if ((SHIBYTE(v186[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_357;
  }
  [v27 open];
  uint64_t v29 = (ctu *)[MEMORY[0x263F08900] JSONObjectWithStream:v28 options:0 error:buf];
  uint64_t v30 = (_anonymous_namespace_ *)[v28 close];
  if (!v29)
  {
    v169 = *(NSObject **)qword_26AA8EF78;
    if (os_log_type_enabled(*(os_log_t *)qword_26AA8EF78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v170 = [objc_msgSend(*(id *)buf, "localizedDescription") UTF8String];
      __dst.st_dev = 136315138;
      *(void *)&__dst.st_mode = v170;
      _os_log_error_impl(&dword_21DE8A000, v169, OS_LOG_TYPE_ERROR, "error: failed to create json object (%s)", (uint8_t *)&__dst, 0xCu);
      uint64_t v165 = 0;
      xpc_object_t v32 = v7;
      if ((SHIBYTE(v186[2]) & 0x80000000) == 0) {
        goto LABEL_358;
      }
      goto LABEL_357;
    }
LABEL_356:
    uint64_t v165 = 0;
    xpc_object_t v32 = v7;
    if ((SHIBYTE(v186[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_357;
  }
  ctu::cf_to_xpc((uint64_t *)&__dst.st_dev, v29, v31);
  xpc_object_t v32 = *(xpc_object_t *)&__dst.st_dev;
  uint64_t v33 = (_anonymous_namespace_ *)MEMORY[0x263EF8708];
  if (*(void *)&__dst.st_dev && (_anonymous_namespace_ *)MEMORY[0x223C1E700](*(void *)&__dst.st_dev) == v33) {
    xpc_retain(v32);
  }
  else {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v36);
  xpc_release(*(xpc_object_t *)&__dst.st_dev);
  char v37 = (_anonymous_namespace_ *)MEMORY[0x223C1E700](v32);
  if (v37 == v33)
  {
    xpc_object_t v38 = xpc_null_create();
    xpc_object_t v39 = xpc_null_create();
    unint64_t v199 = 0xAAAAAAAAAAAAAAAALL;
    v40.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v40.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    timespec v197 = v40;
    timespec v198 = v40;
    timespec v195 = v40;
    timespec v196 = v40;
    timespec v193 = v40;
    timespec v194 = v40;
    timespec v191 = v40;
    timespec v192 = v40;
    *(timespec *)&__dst.st_blksize = v40;
    *(timespec *)__dst.st_qspare = v40;
    __dst.st_birthtimespec = v40;
    *(timespec *)&__dst.st_size = v40;
    __dst.st_mtimespec = v40;
    __dst.st_ctimespec = v40;
    *(timespec *)&__dst.st_uid = v40;
    __dst.st_atimespec = v40;
    *(timespec *)&__dst.st_dev = v40;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
    memset(v185, 0, 24);
    memset(v184, 0, 24);
    xpc_object_t value = xpc_dictionary_get_value(v32, "crash_details");
    xpc_object_t v42 = value;
    uint64_t v43 = MEMORY[0x263EF86D8];
    if (value)
    {
      xpc_retain(value);
    }
    else
    {
      xpc_object_t v42 = xpc_null_create();
      if (!v42)
      {
        xpc_object_t xarray = xpc_null_create();
        xpc_object_t v42 = 0;
        goto LABEL_52;
      }
    }
    if (MEMORY[0x223C1E700](v42) == v43)
    {
      xpc_retain(v42);
      xpc_object_t xarray = v42;
    }
    else
    {
      xpc_object_t xarray = xpc_null_create();
    }
LABEL_52:
    xpc_release(v42);
    xpc_object_t v44 = xpc_null_create();
    xpc_release(v39);
    xpc_release(v44);
    if (MEMORY[0x223C1E700](xarray) != v43)
    {
      if (v8)
      {
        xpc_retain(v8);
        xpc_object_t v45 = v8;
      }
      else
      {
        xpc_object_t v45 = xpc_null_create();
      }
LABEL_64:
      xpc_object_t v48 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v48);
      v49 = (_anonymous_namespace_ *)MEMORY[0x223C1E700](v45);
      v50 = v49;
      if (v49 != v33)
      {
        v173 = *(NSObject **)qword_26AA8EF78;
        if (os_log_type_enabled(*(os_log_t *)qword_26AA8EF78, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_21DE8A000, v173, OS_LOG_TYPE_INFO, "unexpected coredump format, skip parsing coredump report any further", buf, 2u);
        }
        xpc_object_t v53 = v38;
        if (SHIBYTE(v184[2]) < 0) {
          goto LABEL_207;
        }
        goto LABEL_200;
      }
      xpc_object_t v51 = xpc_dictionary_get_value(v32, "title");
      xpc_object_t v52 = v51;
      if (v51)
      {
        xpc_retain(v51);
      }
      else
      {
        xpc_object_t v52 = xpc_null_create();
        if (!v52)
        {
          xpc_object_t v53 = xpc_null_create();
          xpc_object_t v52 = 0;
          goto LABEL_72;
        }
      }
      if ((_anonymous_namespace_ *)MEMORY[0x223C1E700](v52) == v33)
      {
        xpc_retain(v52);
        xpc_object_t v53 = v52;
      }
      else
      {
        xpc_object_t v53 = xpc_null_create();
      }
LABEL_72:
      xpc_release(v52);
      xpc_object_t v54 = xpc_null_create();
      xpc_release(v38);
      xpc_release(v54);
      uint64_t v55 = MEMORY[0x223C1E700](v53);
      if ((_anonymous_namespace_ *)v55 != v33)
      {
        HIBYTE(v183[2]) = 7;
        strcpy((char *)v183, "unknown");
        if ((SHIBYTE(v188) & 0x80000000) == 0) {
          goto LABEL_80;
        }
        goto LABEL_74;
      }
      xpc_object_t v56 = xpc_dictionary_get_value(v53, "name");
      xpc_object_t object = v56;
      if (v56) {
        xpc_retain(v56);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      memset(buf, 0, 24);
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0)
      {
        operator delete(*(void **)buf);
        if ((SHIBYTE(v188) & 0x80000000) == 0)
        {
LABEL_80:
          *(_OWORD *)__p = *(_OWORD *)v183;
          xpc_object_t v188 = v183[2];
          HIBYTE(v183[2]) = 0;
          LOBYTE(v183[0]) = 0;
          if ((_anonymous_namespace_ *)v55 == v33) {
            xpc_release(object);
          }
          xpc_object_t v57 = xpc_dictionary_get_value(v45, "log_data");
          v183[0] = v57;
          if (v57) {
            xpc_retain(v57);
          }
          else {
            v183[0] = xpc_null_create();
          }
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v185[2]) < 0) {
            operator delete(v185[0]);
          }
          *(_OWORD *)v185 = *(_OWORD *)buf;
          v185[2] = *(void **)&buf[16];
          buf[23] = 0;
          buf[0] = 0;
          xpc_release(v183[0]);
          v58 = (void *)HIBYTE(v185[2]);
          if (SHIBYTE(v185[2]) < 0) {
            v58 = v185[1];
          }
          v59 = (char **)MEMORY[0x263F8BDC0];
          if (!v58)
          {
LABEL_120:
            xpc_object_t v75 = xpc_dictionary_get_value(v45, "ucs_crash_id");
            v183[0] = v75;
            if (v75) {
              xpc_retain(v75);
            }
            else {
              v183[0] = xpc_null_create();
            }
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v184[2]) < 0) {
              operator delete(v184[0]);
            }
            *(_OWORD *)v184 = *(_OWORD *)buf;
            v184[2] = *(void **)&buf[16];
            buf[23] = 0;
            buf[0] = 0;
            xpc_release(v183[0]);
            v76 = (void *)HIBYTE(v184[2]);
            if (SHIBYTE(v184[2]) < 0) {
              v76 = v184[1];
            }
            if (!v76) {
              goto LABEL_176;
            }
            if ((__dst.st_gen & 0x10) != 0)
            {
              uint64_t tv_nsec = *(void *)&__dst.st_blksize;
              if (*(void *)&__dst.st_blksize < __dst.st_ctimespec.tv_nsec)
              {
                *(void *)&__dst.st_blksize = __dst.st_ctimespec.tv_nsec;
                uint64_t tv_nsec = __dst.st_ctimespec.tv_nsec;
              }
              tv_sec = (const void *)__dst.st_ctimespec.tv_sec;
              size_t v77 = tv_nsec - __dst.st_ctimespec.tv_sec;
              if ((unint64_t)(tv_nsec - __dst.st_ctimespec.tv_sec) > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_210;
              }
            }
            else
            {
              if ((__dst.st_gen & 8) == 0)
              {
                size_t v77 = 0;
                buf[23] = 0;
                v78 = buf;
                goto LABEL_141;
              }
              tv_sec = (const void *)__dst.st_atimespec.tv_nsec;
              size_t v77 = __dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec;
              if (__dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_210:
              }
                std::string::__throw_length_error[abi:ne180100]();
            }
            if (v77 >= 0x17)
            {
              uint64_t v81 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v77 | 7) != 0x17) {
                uint64_t v81 = v77 | 7;
              }
              uint64_t v82 = v81 + 1;
              v78 = operator new(v81 + 1);
              *(void *)&buf[8] = v77;
              *(void *)&buf[16] = v82 | 0x8000000000000000;
              *(void *)buf = v78;
            }
            else
            {
              buf[23] = v77;
              v78 = buf;
              if (!v77)
              {
LABEL_141:
                v78[v77] = 0;
                if ((char)buf[23] < 0)
                {
                  uint64_t v83 = *(void *)&buf[8];
                  operator delete(*(void **)buf);
                  if (!v83) {
                    goto LABEL_146;
                  }
                }
                else if (!buf[23])
                {
LABEL_146:
                  v84 = (void *)HIBYTE(v184[2]);
                  v85 = v184;
                  if (SHIBYTE(v184[2]) < 0)
                  {
                    v85 = (void **)v184[0];
                    v84 = v184[1];
                  }
                  v183[0] = v85;
                  v183[1] = v84;
                  xpc_object_t first_not_of = (xpc_object_t)ctu::llvm::StringRef::find_first_not_of();
                  if (first_not_of >= v183[1]) {
                    xpc_object_t v87 = v183[1];
                  }
                  else {
                    xpc_object_t v87 = first_not_of;
                  }
                  if (*v59 >= (char *)((char *)v183[1] - (char *)v87)) {
                    v88 = (char *)((char *)v183[1] - (char *)v87);
                  }
                  else {
                    v88 = *v59;
                  }
                  *(void *)buf = (char *)v183[0] + (unint64_t)v87;
                  *(void *)&buf[8] = v88;
                  uint64_t last_not_of = ctu::llvm::StringRef::find_last_not_of();
                  v91 = *(const void **)buf;
                  size_t v90 = *(void *)&buf[8];
                  if ((unint64_t)(last_not_of + 1) < *(void *)&buf[8]) {
                    uint64_t v92 = last_not_of + 1;
                  }
                  else {
                    uint64_t v92 = *(void *)&buf[8];
                  }
                  size_t v93 = *(void *)&buf[8] - (void)v88 + v92;
                  *(void *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
                  *(void *)&buf[16] = 0xAAAAAAAAAAAAAAAALL;
                  if (v93 >= v90) {
                    size_t v94 = v90;
                  }
                  else {
                    size_t v94 = v93;
                  }
                  *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
                  if (v94 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  if (v94 >= 0x17)
                  {
                    uint64_t v96 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v94 | 7) != 0x17) {
                      uint64_t v96 = v94 | 7;
                    }
                    uint64_t v97 = v96 + 1;
                    v95 = operator new(v96 + 1);
                    *(void *)&buf[8] = v94;
                    *(void *)&buf[16] = v97 | 0x8000000000000000;
                    *(void *)buf = v95;
                  }
                  else
                  {
                    buf[23] = v94;
                    v95 = buf;
                    if (!v94) {
                      goto LABEL_168;
                    }
                  }
                  memmove(v95, v91, v94);
LABEL_168:
                  *((unsigned char *)v95 + v94) = 0;
                  HIBYTE(v183[2]) = 2;
                  strcpy((char *)v183, "c:");
                  v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)v183, 2);
                  if ((buf[23] & 0x80u) == 0) {
                    v99 = buf;
                  }
                  else {
                    v99 = *(uint8_t **)buf;
                  }
                  if ((buf[23] & 0x80u) == 0) {
                    uint64_t v100 = buf[23];
                  }
                  else {
                    uint64_t v100 = *(void *)&buf[8];
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
                  if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
                  {
                    if (((char)buf[23] & 0x80000000) == 0) {
                      goto LABEL_176;
                    }
LABEL_181:
                    operator delete(*(void **)buf);
                    char st_gen = __dst.st_gen;
                    if ((__dst.st_gen & 0x10) == 0) {
                      goto LABEL_177;
                    }
                    goto LABEL_182;
                  }
                  operator delete(v183[0]);
                  if ((char)buf[23] < 0) {
                    goto LABEL_181;
                  }
LABEL_176:
                  char st_gen = __dst.st_gen;
                  if ((__dst.st_gen & 0x10) == 0)
                  {
LABEL_177:
                    if ((st_gen & 8) == 0)
                    {
                      size_t v102 = 0;
                      buf[23] = 0;
                      v103 = buf;
                      goto LABEL_193;
                    }
                    p_uint64_t tv_nsec = (timespec *)&__dst.st_atimespec.tv_nsec;
                    uint64_t v105 = __dst.st_mtimespec.tv_nsec;
LABEL_185:
                    v106 = (const void *)p_tv_nsec->tv_sec;
                    size_t v102 = v105 - p_tv_nsec->tv_sec;
                    if (v102 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    if (v102 >= 0x17)
                    {
                      uint64_t v107 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v102 | 7) != 0x17) {
                        uint64_t v107 = v102 | 7;
                      }
                      uint64_t v108 = v107 + 1;
                      v103 = operator new(v107 + 1);
                      *(void *)&buf[8] = v102;
                      *(void *)&buf[16] = v108 | 0x8000000000000000;
                      *(void *)buf = v103;
                    }
                    else
                    {
                      buf[23] = v105 - LOBYTE(p_tv_nsec->tv_sec);
                      v103 = buf;
                      if (!v102) {
                        goto LABEL_193;
                      }
                    }
                    memmove(v103, v106, v102);
LABEL_193:
                    *((unsigned char *)v103 + v102) = 0;
                    if ((buf[23] & 0x80u) == 0) {
                      v109 = buf;
                    }
                    else {
                      v109 = *(uint8_t **)buf;
                    }
                    xpc_object_t v110 = xpc_string_create((const char *)v109);
                    if (!v110) {
                      xpc_object_t v110 = xpc_null_create();
                    }
                    xpc_dictionary_set_value(v45, "log_data", v110);
                    xpc_object_t v111 = xpc_null_create();
                    xpc_release(v110);
                    xpc_release(v111);
                    if (((char)buf[23] & 0x80000000) == 0)
                    {
                      if ((SHIBYTE(v184[2]) & 0x80000000) == 0) {
                        goto LABEL_200;
                      }
LABEL_207:
                      operator delete(v184[0]);
                      if ((SHIBYTE(v185[2]) & 0x80000000) == 0) {
                        goto LABEL_201;
                      }
                      goto LABEL_208;
                    }
                    operator delete(*(void **)buf);
                    if (SHIBYTE(v184[2]) < 0) {
                      goto LABEL_207;
                    }
LABEL_200:
                    if ((SHIBYTE(v185[2]) & 0x80000000) == 0) {
                      goto LABEL_201;
                    }
LABEL_208:
                    operator delete(v185[0]);
LABEL_201:
                    *(void *)&__dst.st_dev = *MEMORY[0x263F8C2B8];
                    uint64_t v112 = *(void *)&__dst.st_dev;
                    uint64_t v113 = *(void *)(MEMORY[0x263F8C2B8] + 72);
                    uint64_t v114 = *(void *)(MEMORY[0x263F8C2B8] + 64);
                    *(void *)((char *)&__dst.st_dev + *(void *)(*(void *)&__dst.st_dev - 24)) = v114;
                    uint64_t v174 = v113;
                    uint64_t v175 = v114;
                    *(void *)&__dst.st_uid = v113;
                    *(void *)&__dst.st_rdev = MEMORY[0x263F8C318] + 16;
                    if (SHIBYTE(__dst.st_blocks) < 0) {
                      operator delete((void *)__dst.st_birthtimespec.tv_nsec);
                    }
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x223C1DDF0](__dst.st_qspare);
                    xpc_release(xarray);
                    xpc_release(v53);
                    if (v50 != v33) {
                      goto LABEL_335;
                    }
                    memset(buf, 170, 24);
                    xpc_object_t v115 = xpc_dictionary_get_value(v45, "host_taskname");
                    *(void *)&__dst.st_dev = v115;
                    if (v115) {
                      xpc_retain(v115);
                    }
                    else {
                      *(void *)&__dst.st_dev = xpc_null_create();
                    }
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v185, 170, 24);
                    xpc_object_t v116 = xpc_dictionary_get_value(v45, "host_filename");
                    *(void *)&__dst.st_dev = v116;
                    if (v116) {
                      xpc_retain(v116);
                    }
                    else {
                      *(void *)&__dst.st_dev = xpc_null_create();
                    }
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v184, 170, 24);
                    xpc_object_t v117 = xpc_dictionary_get_value(v45, "host_line");
                    *(void *)&__dst.st_dev = v117;
                    if (v117) {
                      xpc_retain(v117);
                    }
                    else {
                      *(void *)&__dst.st_dev = xpc_null_create();
                    }
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v183, 170, sizeof(v183));
                    xpc_object_t v118 = xpc_dictionary_get_value(v45, "subsystem");
                    *(void *)&__dst.st_dev = v118;
                    if (v118) {
                      xpc_retain(v118);
                    }
                    else {
                      *(void *)&__dst.st_dev = xpc_null_create();
                    }
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v181, 170, sizeof(v181));
                    xpc_object_t v119 = xpc_dictionary_get_value(v45, "log_data");
                    *(void *)&__dst.st_dev = v119;
                    if (v119) {
                      xpc_retain(v119);
                    }
                    else {
                      *(void *)&__dst.st_dev = xpc_null_create();
                    }
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    unint64_t v199 = 0xAAAAAAAAAAAAAAAALL;
                    v120.tv_sec = 0xAAAAAAAAAAAAAAAALL;
                    v120.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
                    timespec v197 = v120;
                    timespec v198 = v120;
                    timespec v195 = v120;
                    timespec v196 = v120;
                    timespec v193 = v120;
                    timespec v194 = v120;
                    timespec v191 = v120;
                    timespec v192 = v120;
                    *(timespec *)&__dst.st_blksize = v120;
                    *(timespec *)__dst.st_qspare = v120;
                    __dst.st_birthtimespec = v120;
                    *(timespec *)&__dst.st_size = v120;
                    __dst.st_mtimespec = v120;
                    __dst.st_ctimespec = v120;
                    *(timespec *)&__dst.st_uid = v120;
                    __dst.st_atimespec = v120;
                    *(timespec *)&__dst.st_dev = v120;
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
                    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)"TASK=", 5);
                    if ((buf[23] & 0x80u) == 0) {
                      v122 = buf;
                    }
                    else {
                      v122 = *(uint8_t **)buf;
                    }
                    if ((buf[23] & 0x80u) == 0) {
                      uint64_t v123 = buf[23];
                    }
                    else {
                      uint64_t v123 = *(void *)&buf[8];
                    }
                    v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)v122, v123);
                    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"@", 1);
                    if (SHIBYTE(v185[2]) >= 0) {
                      v126 = v185;
                    }
                    else {
                      v126 = (void **)v185[0];
                    }
                    if (SHIBYTE(v185[2]) >= 0) {
                      uint64_t v127 = HIBYTE(v185[2]);
                    }
                    else {
                      uint64_t v127 = (uint64_t)v185[1];
                    }
                    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)v126, v127);
                    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)":", 1);
                    if (SHIBYTE(v184[2]) >= 0) {
                      v130 = v184;
                    }
                    else {
                      v130 = (void **)v184[0];
                    }
                    if (SHIBYTE(v184[2]) >= 0) {
                      uint64_t v131 = HIBYTE(v184[2]);
                    }
                    else {
                      uint64_t v131 = (uint64_t)v184[1];
                    }
                    v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v130, v131);
                    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)",CPU=", 5);
                    if (SHIBYTE(v183[2]) >= 0) {
                      v134 = v183;
                    }
                    else {
                      v134 = (xpc_object_t *)v183[0];
                    }
                    if (SHIBYTE(v183[2]) >= 0) {
                      uint64_t v135 = HIBYTE(v183[2]);
                    }
                    else {
                      uint64_t v135 = (uint64_t)v183[1];
                    }
                    v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v134, v135);
                    v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)",LOG=", 5);
                    if (SHIBYTE(v181[2]) >= 0) {
                      v138 = v181;
                    }
                    else {
                      v138 = (void **)v181[0];
                    }
                    if (SHIBYTE(v181[2]) >= 0) {
                      uint64_t v139 = HIBYTE(v181[2]);
                    }
                    else {
                      uint64_t v139 = (uint64_t)v181[1];
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v138, v139);
                    if ((__dst.st_gen & 0x10) != 0)
                    {
                      uint64_t v142 = *(void *)&__dst.st_blksize;
                      if (*(void *)&__dst.st_blksize < __dst.st_ctimespec.tv_nsec)
                      {
                        *(void *)&__dst.st_blksize = __dst.st_ctimespec.tv_nsec;
                        uint64_t v142 = __dst.st_ctimespec.tv_nsec;
                      }
                      v143 = (const void *)__dst.st_ctimespec.tv_sec;
                      size_t v140 = v142 - __dst.st_ctimespec.tv_sec;
                      if ((unint64_t)(v142 - __dst.st_ctimespec.tv_sec) > 0x7FFFFFFFFFFFFFF7) {
                        goto LABEL_288;
                      }
                    }
                    else
                    {
                      if ((__dst.st_gen & 8) == 0)
                      {
                        size_t v140 = 0;
                        HIBYTE(v180) = 0;
                        v141 = &v179;
                        goto LABEL_267;
                      }
                      v143 = (const void *)__dst.st_atimespec.tv_nsec;
                      size_t v140 = __dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec;
                      if (__dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_288:
                      }
                        std::string::__throw_length_error[abi:ne180100]();
                    }
                    if (v140 >= 0x17)
                    {
                      uint64_t v144 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v140 | 7) != 0x17) {
                        uint64_t v144 = v140 | 7;
                      }
                      uint64_t v145 = v144 + 1;
                      v141 = (long long *)operator new(v144 + 1);
                      *((void *)&v179 + 1) = v140;
                      unint64_t v180 = v145 | 0x8000000000000000;
                      *(void *)&long long v179 = v141;
                    }
                    else
                    {
                      HIBYTE(v180) = v140;
                      v141 = &v179;
                      if (!v140)
                      {
LABEL_267:
                        *((unsigned char *)v141 + v140) = 0;
                        if (*(char *)(v176 + 23) < 0) {
                          operator delete(*(void **)v176);
                        }
                        *(_OWORD *)uint64_t v176 = v179;
                        *(void *)(v176 + 16) = v180;
                        if (a4)
                        {
                          if (SHIBYTE(v181[2]) >= 0) {
                            uint64_t v146 = HIBYTE(v181[2]);
                          }
                          else {
                            uint64_t v146 = (uint64_t)v181[1];
                          }
                          if (SHIBYTE(v181[2]) >= 0) {
                            v147 = v181;
                          }
                          else {
                            v147 = (void **)v181[0];
                          }
                          if (v146 > 9)
                          {
                            v148 = (char *)v147 + v146;
                            uint64_t v149 = v146;
                            v150 = v147;
                            do
                            {
                              v151 = (char *)memchr(v150, 54, v149 - 9);
                              if (!v151) {
                                break;
                              }
                              if (*(void *)v151 == 0x4646304344303036 && *((_WORD *)v151 + 4) == 17733)
                              {
                                if (v151 != v148 && v151 - (char *)v147 != -1)
                                {
LABEL_308:
                                  int v158 = 3;
                                  goto LABEL_327;
                                }
                                break;
                              }
                              v150 = (void **)(v151 + 1);
                              uint64_t v149 = v148 - (char *)v150;
                            }
                            while (v148 - (char *)v150 >= 10);
                            if (v146 >= 27)
                            {
                              v153 = v147;
                              do
                              {
                                v154 = (char *)memchr(v153, 65, v146 - 26);
                                if (!v154) {
                                  break;
                                }
                                if (*(void *)v154 == 0x6563726F66205041
                                  && *((void *)v154 + 1) == 0x756465726F632064
                                  && *((void *)v154 + 2) == 0x532061697620706DLL
                                  && *(void *)(v154 + 19) == 0x494D505320616976)
                                {
                                  if (v154 == v148 || v154 - (char *)v147 == -1) {
                                    break;
                                  }
                                  goto LABEL_308;
                                }
                                v153 = (void **)(v154 + 1);
                                uint64_t v146 = v148 - (char *)v153;
                              }
                              while (v148 - (char *)v153 >= 27);
                            }
                          }
                          if (SHIBYTE(v188) >= 0) {
                            v159 = __p;
                          }
                          else {
                            v159 = (void **)__p[0];
                          }
                          uint64_t v160 = HIBYTE(v188);
                          if (SHIBYTE(v188) < 0) {
                            uint64_t v160 = (uint64_t)__p[1];
                          }
                          if (v160 >= 9)
                          {
                            v161 = (char *)v159 + v160;
                            v162 = v159;
                            do
                            {
                              v163 = (char *)memchr(v162, 101, v160 - 8);
                              if (!v163) {
                                break;
                              }
                              if (*(void *)v163 == 0x636E656772656D65 && v163[8] == 121)
                              {
                                if (v163 != v161 && v163 - (char *)v159 != -1)
                                {
                                  int v158 = 1;
                                  goto LABEL_327;
                                }
                                break;
                              }
                              v162 = (void **)(v163 + 1);
                              uint64_t v160 = v161 - (char *)v162;
                            }
                            while (v161 - (char *)v162 >= 9);
                          }
                          int v158 = 2;
LABEL_327:
                          *a4 = v158;
                        }
                        *(void *)&__dst.st_dev = v112;
                        *(void *)((char *)&__dst.st_dev + *(void *)(v112 - 24)) = v175;
                        *(void *)&__dst.st_uid = v174;
                        *(void *)&__dst.st_rdev = MEMORY[0x263F8C318] + 16;
                        if (SHIBYTE(__dst.st_blocks) < 0) {
                          operator delete((void *)__dst.st_birthtimespec.tv_nsec);
                        }
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x223C1DDF0](__dst.st_qspare);
                        if (SHIBYTE(v181[2]) < 0)
                        {
                          operator delete(v181[0]);
                          if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
                          {
LABEL_332:
                            if ((SHIBYTE(v184[2]) & 0x80000000) == 0) {
                              goto LABEL_333;
                            }
                            goto LABEL_339;
                          }
                        }
                        else if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_332;
                        }
                        operator delete(v183[0]);
                        if ((SHIBYTE(v184[2]) & 0x80000000) == 0)
                        {
LABEL_333:
                          if ((SHIBYTE(v185[2]) & 0x80000000) == 0) {
                            goto LABEL_334;
                          }
LABEL_340:
                          operator delete(v185[0]);
                          if ((char)buf[23] < 0) {
                            goto LABEL_341;
                          }
LABEL_335:
                          uint64_t v165 = 1;
                          xpc_object_t v8 = v45;
                          if ((SHIBYTE(v186[2]) & 0x80000000) == 0) {
                            goto LABEL_358;
                          }
                          goto LABEL_357;
                        }
LABEL_339:
                        operator delete(v184[0]);
                        if ((SHIBYTE(v185[2]) & 0x80000000) == 0)
                        {
LABEL_334:
                          if (((char)buf[23] & 0x80000000) == 0) {
                            goto LABEL_335;
                          }
LABEL_341:
                          operator delete(*(void **)buf);
                          uint64_t v165 = 1;
                          xpc_object_t v8 = v45;
                          if ((SHIBYTE(v186[2]) & 0x80000000) == 0) {
                            goto LABEL_358;
                          }
                          goto LABEL_357;
                        }
                        goto LABEL_340;
                      }
                    }
                    memmove(v141, v143, v140);
                    goto LABEL_267;
                  }
LABEL_182:
                  uint64_t v105 = *(void *)&__dst.st_blksize;
                  if (*(void *)&__dst.st_blksize < __dst.st_ctimespec.tv_nsec)
                  {
                    *(void *)&__dst.st_blksize = __dst.st_ctimespec.tv_nsec;
                    uint64_t v105 = __dst.st_ctimespec.tv_nsec;
                  }
                  p_uint64_t tv_nsec = &__dst.st_ctimespec;
                  goto LABEL_185;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)", ", 2);
                goto LABEL_146;
              }
            }
            memmove(v78, tv_sec, v77);
            goto LABEL_141;
          }
          v60 = v185;
          if (SHIBYTE(v185[2]) < 0) {
            v60 = (void **)v185[0];
          }
          v183[0] = v60;
          v183[1] = v58;
          xpc_object_t v61 = (xpc_object_t)ctu::llvm::StringRef::find_first_not_of();
          if (v61 >= v183[1]) {
            xpc_object_t v62 = v183[1];
          }
          else {
            xpc_object_t v62 = v61;
          }
          if (*v59 >= (char *)((char *)v183[1] - (char *)v62)) {
            v63 = (char *)((char *)v183[1] - (char *)v62);
          }
          else {
            v63 = *v59;
          }
          *(void *)buf = (char *)v183[0] + (unint64_t)v62;
          *(void *)&buf[8] = v63;
          uint64_t v64 = ctu::llvm::StringRef::find_last_not_of();
          v66 = *(const void **)buf;
          size_t v65 = *(void *)&buf[8];
          if ((unint64_t)(v64 + 1) < *(void *)&buf[8]) {
            uint64_t v67 = v64 + 1;
          }
          else {
            uint64_t v67 = *(void *)&buf[8];
          }
          size_t v68 = *(void *)&buf[8] - (void)v63 + v67;
          *(void *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&buf[16] = 0xAAAAAAAAAAAAAAAALL;
          if (v68 >= v65) {
            size_t v69 = v65;
          }
          else {
            size_t v69 = v68;
          }
          *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
          if (v69 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v69 >= 0x17)
          {
            uint64_t v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v69 | 7) != 0x17) {
              uint64_t v71 = v69 | 7;
            }
            uint64_t v72 = v71 + 1;
            v70 = operator new(v71 + 1);
            *(void *)&buf[8] = v69;
            *(void *)&buf[16] = v72 | 0x8000000000000000;
            *(void *)buf = v70;
          }
          else
          {
            buf[23] = v69;
            v70 = buf;
            if (!v69)
            {
LABEL_112:
              v70[v69] = 0;
              if ((buf[23] & 0x80u) == 0) {
                v73 = buf;
              }
              else {
                v73 = *(uint8_t **)buf;
              }
              if ((buf[23] & 0x80u) == 0) {
                uint64_t v74 = buf[23];
              }
              else {
                uint64_t v74 = *(void *)&buf[8];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)v73, v74);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              goto LABEL_120;
            }
          }
          memmove(v70, v66, v69);
          goto LABEL_112;
        }
      }
      else if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
        goto LABEL_80;
      }
LABEL_74:
      operator delete(__p[0]);
      goto LABEL_80;
    }
    xpc_object_t v46 = xpc_array_get_value(xarray, 0);
    xpc_object_t v47 = v46;
    if (v46)
    {
      xpc_retain(v46);
    }
    else
    {
      xpc_object_t v47 = xpc_null_create();
      if (!v47)
      {
        xpc_object_t v45 = xpc_null_create();
        xpc_object_t v47 = 0;
LABEL_63:
        xpc_release(v47);
        goto LABEL_64;
      }
    }
    if ((_anonymous_namespace_ *)MEMORY[0x223C1E700](v47) == v33)
    {
      xpc_retain(v47);
      xpc_object_t v45 = v47;
    }
    else
    {
      xpc_object_t v45 = xpc_null_create();
    }
    goto LABEL_63;
  }
  v171 = *(NSObject **)qword_26AA8EF78;
  if (!os_log_type_enabled(*(os_log_t *)qword_26AA8EF78, OS_LOG_TYPE_ERROR))
  {
    xpc_object_t v7 = v32;
    goto LABEL_356;
  }
  LOWORD(__dst.st_dev) = 0;
  _os_log_error_impl(&dword_21DE8A000, v171, OS_LOG_TYPE_ERROR, "error: failed to convert json object to xpc dictionary", (uint8_t *)&__dst, 2u);
  uint64_t v165 = 0;
  if (SHIBYTE(v186[2]) < 0) {
LABEL_357:
  }
    operator delete(v186[0]);
LABEL_358:
  if (SHIBYTE(v188) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v8);
  xpc_release(v32);
  return v165;
}

void sub_21DF0C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,xpc_object_t a21,xpc_object_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,xpc_object_t a57)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a57);
  xpc_release(object);
  xpc_release(v59);
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  xpc_release(v58);
  xpc_release(v57);
  _Unwind_Resume(a1);
}

void anonymous namespace'::getLogClient(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_2, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v2, "com.apple.telephony.basebandservices.support");
    std::string::basic_string[abi:ne180100]<0>(&__p, "coredump");
    support::log::client::client(qword_26AA8EF48, &v2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v2.__r_.__value_.__l.__data_);
    }
    __cxa_guard_release(&_MergedGlobals_2);
  }
}

void sub_21DF0CE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&_MergedGlobals_2);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

void sub_21DF0CEB8(_Unwind_Exception *a1)
{
}

uint64_t __cxx_global_var_init_9()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t INTStateMachineStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 368))
  {
    _BBUFSDebugPrint("INTStateMachineStart", "BBUFSServer already running\n", a3, a4, a5, a6, a7, a8, v10);
  }
  else
  {
    _BBUFSDebugPrint("INTStateMachineStart", "BBUFSServer started successfully\n", a3, a4, a5, a6, a7, a8, v10);
    *(unsigned char *)(a1 + 368) = 1;
  }
  return 1;
}

uint64_t INTStateMachineStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 368))
  {
    _BBUFSDebugPrint("INTStateMachineStop", "BBUFSServer stopped successfully\n", a3, a4, a5, a6, a7, a8, v10);
    *(unsigned char *)(a1 + 368) = 0;
  }
  else
  {
    _BBUFSDebugPrint("INTStateMachineStop", "BBUFSServer not running\n", a3, a4, a5, a6, a7, a8, v10);
  }
  return 1;
}

void INTStateMachinePerformSnapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 368))
  {
    _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer failed to perform snapshot: server not running\n", a3, a4, a5, a6, a7, a8, v175);
    return;
  }
  memset(&v180, 0, sizeof(v180));
  __s = (char *)(a1 + 104);
  unsigned int v9 = 1;
  while (1)
  {
LABEL_3:
    int v10 = *(_DWORD *)(a1 + 376);
    unint64_t v11 = "Unknown";
    if (v10 == 1) {
      unint64_t v11 = "TransferFile";
    }
    BOOL v12 = v10 == 0;
    uint64_t v13 = "Snapshot";
    if (!v12) {
      LOBYTE(v13) = (_BYTE)v11;
    }
    _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "---------------------%s---------------------\n", a3, a4, a5, a6, a7, a8, (char)v13);
    int v14 = *(_DWORD *)(a1 + 376);
    if (v14 != 1) {
      break;
    }
    uint64_t v205 = 0;
    v206 = &v205;
    uint64_t v207 = 0x2020000000;
    char v208 = 0;
    v181[0] = 0;
    v181[1] = v181;
    *(void *)&long long v182 = 0x3812000000;
    *((void *)&v182 + 1) = __Block_byref_object_copy__0;
    *(void *)&long long v183 = __Block_byref_object_dispose__0;
    *((void *)&v183 + 1) = "";
    object[0] = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    object[0] = dispatch_semaphore_create(0);
    timespec v198 = 0;
    unint64_t v199 = &v198;
    uint64_t v200 = 0x3812000000;
    v201 = __Block_byref_object_copy__0;
    v202 = __Block_byref_object_dispose__0;
    v203 = "";
    dispatch_semaphore_t v204 = (dispatch_semaphore_t)0xAAAAAAAAAAAAAAAALL;
    dispatch_semaphore_t v204 = dispatch_semaphore_create(0);
    unint64_t v196 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v197 = 0xAAAAAAAAAAAAAAAALL;
    size_t v15 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)dispatch_queue_create("BBUFSServer", v15);
    __p[0] = 0;
    __p[1] = 0;
    HSFilerReadSession::create();
    BOOL v22 = (std::__shared_weak_count *)__p[1];
    if (!__p[1] || atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      unsigned int v23 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_12;
      }
LABEL_11:
      dispatch_release(v23);
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    unsigned int v23 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0]) {
      goto LABEL_11;
    }
LABEL_12:
    if (v196)
    {
      char v24 = (*(uint64_t (**)(unint64_t))(*(void *)v196 + 16))(v196);
      _BBUFSDebugPrint("sCreateFilerSession", "BBUFSServer successfully created filer read session with ID (%llu)\n", v25, v26, v27, v28, v29, v30, v24);
      *(void *)(a1 + 384) = (*(uint64_t (**)(unint64_t))(*(void *)v196 + 16))(v196);
    }
    else
    {
      _BBUFSDebugPrint("sCreateFilerSession", "BBUFSServer failed to create filer read session\n", v16, v17, v18, v19, v20, v21, v176);
    }
    if (!v196)
    {
      BOOL v31 = 0;
      goto LABEL_44;
    }
    memset(__p, 170, sizeof(__p));
    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__dst, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v180;
    }
    std::vector<std::string>::vector[abi:ne180100](__p, (uint64_t)&__dst, 1uLL);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    xpc_object_t v32 = (uint64_t (***)(void, void **, void **, uint64_t))v196;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3254779904;
    aBlock[2] = ___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    aBlock[3] = &__block_descriptor_48_e8_32r40r_e11_v20__0Q8i16l;
    aBlock[4] = &v205;
    aBlock[5] = v181;
    timespec v194 = _Block_copy(aBlock);
    int v33 = (**v32)(v32, __p, &v194, 5);
    *((unsigned char *)v206 + 24) = v33;
    if (v194)
    {
      _Block_release(v194);
      int v33 = *((unsigned __int8 *)v206 + 24);
    }
    if (!v33)
    {
      uint64_t v43 = "BBUFSServer failed to queue filer read session (%llu)\n";
LABEL_34:
      _BBUFSDebugPrint("sTransferFile", v43, v34, v35, v36, v37, v38, v39, *(void *)(a1 + 384));
      goto LABEL_35;
    }
    timespec v40 = (dispatch_semaphore_t *)v181[1];
    dispatch_time_t v41 = dispatch_time(0, 10005000000000);
    intptr_t v42 = dispatch_semaphore_wait(v40[6], v41);
    uint64_t v43 = "BBUFSServer timeout waiting for filer read session (%llu) start\n";
    if (v42) {
      goto LABEL_34;
    }
    if (!*((unsigned char *)v206 + 24))
    {
      uint64_t v43 = "BBUFSServer failed to start filer read session (%llu)\n";
      goto LABEL_34;
    }
    size_t v44 = strlen(__s);
    if (v44 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v45 = v44;
    if (v44 >= 0x17)
    {
      uint64_t v92 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v92 = v44 | 7;
      }
      uint64_t v93 = v92 + 1;
      p_dst = operator new(v92 + 1);
      __dst.__r_.__value_.__l.__size_ = v45;
      __dst.__r_.__value_.__r.__words[2] = v93 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44;
      p_dst = &__dst;
      if (!v44) {
        goto LABEL_93;
      }
    }
    memcpy(p_dst, __s, v45);
LABEL_93:
    *((unsigned char *)p_dst + v45) = 0;
    char BackupDir = bbufs::createBackupDir((uint64_t)&__dst);
    char v101 = BackupDir;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v101)
      {
LABEL_95:
        size_t v102 = strlen(__s);
        if (v102 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v103 = v102;
        if (v102 >= 0x17)
        {
          uint64_t v105 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v102 | 7) != 0x17) {
            uint64_t v105 = v102 | 7;
          }
          uint64_t v106 = v105 + 1;
          v104 = operator new(v105 + 1);
          __dst.__r_.__value_.__l.__size_ = v103;
          __dst.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v102;
          v104 = &__dst;
          if (!v102)
          {
LABEL_105:
            v104[v103] = 0;
            s4ccToFileName(&v192, (uint64_t)&v180);
            char v113 = bbufs::backupFile((uint64_t)&__dst);
            if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_107;
              }
LABEL_110:
              operator delete(__dst.__r_.__value_.__l.__data_);
              uint64_t v114 = "BBUFSServer failed to backup file (%s)\n";
              if (v113) {
                goto LABEL_111;
              }
LABEL_130:
              v128 = &v180;
              if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                LOBYTE(v128) = v180.__r_.__value_.__s.__data_[0];
              }
              _BBUFSDebugPrint("sTransferFile", v114, v107, v108, v109, v110, v111, v112, (char)v128);
              goto LABEL_35;
            }
            operator delete(v192.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_110;
            }
LABEL_107:
            uint64_t v114 = "BBUFSServer failed to backup file (%s)\n";
            if ((v113 & 1) == 0) {
              goto LABEL_130;
            }
LABEL_111:
            size_t v115 = strlen(__s);
            if (v115 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v116 = v115;
            if (v115 >= 0x17)
            {
              uint64_t v118 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v115 | 7) != 0x17) {
                uint64_t v118 = v115 | 7;
              }
              uint64_t v119 = v118 + 1;
              xpc_object_t v117 = operator new(v118 + 1);
              __dst.__r_.__value_.__l.__size_ = v116;
              __dst.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
            }
            else
            {
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v115;
              xpc_object_t v117 = &__dst;
              if (!v115)
              {
LABEL_119:
                v117[v116] = 0;
                s4ccToFileName(&v192, (uint64_t)&v180);
                char File = bbufs::createFile((uint64_t)&__dst);
                if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v192.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_121:
                    uint64_t v114 = "BBUFSServer failed to create file (%s) and/or set owner\n";
                    if (File) {
                      goto LABEL_122;
                    }
                    goto LABEL_130;
                  }
                }
                else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_121;
                }
                operator delete(__dst.__r_.__value_.__l.__data_);
                uint64_t v114 = "BBUFSServer failed to create file (%s) and/or set owner\n";
                if (File)
                {
LABEL_122:
                  memset(&__dst, 170, sizeof(__dst));
                  s4ccToFileName(&v192, (uint64_t)&v180);
                  ctu::path_join<char (&)[256],std::string>(&__dst, __s);
                  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v192.__r_.__value_.__l.__data_);
                  }
                  uint64_t v127 = &v180;
                  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    LOBYTE(v127) = v180.__r_.__value_.__s.__data_[0];
                  }
                  _BBUFSDebugPrint("sTransferFile", "BBUFSServer transferring file (%s) to path (%s)\n", v121, v122, v123, v124, v125, v126, (char)v127);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v192, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v192 = __dst;
                  }
                  v190[0] = MEMORY[0x263EF8330];
                  v190[1] = 3254779904;
                  v190[2] = ___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke_60;
                  v190[3] = &__block_descriptor_48_e8_32r40r_e16_v28__0Q8i16r_v20l;
                  v190[4] = &v205;
                  v190[5] = &v198;
                  timespec v191 = _Block_copy(v190);
                  *((unsigned char *)v206 + 24) = HSFilerReadSession::readWithFile();
                  if (v191) {
                    _Block_release(v191);
                  }
                  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v192.__r_.__value_.__l.__data_);
                  }
                  if (*((unsigned char *)v206 + 24))
                  {
                    uint64_t v142 = v199;
                    dispatch_time_t v143 = dispatch_time(0, 10005000000000);
                    if (dispatch_semaphore_wait((dispatch_semaphore_t)v142[6], v143))
                    {
                      v150 = &v180;
                      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        LOBYTE(v150) = v180.__r_.__value_.__s.__data_[0];
                      }
                      _BBUFSDebugPrint("sTransferFile", "BBUFSServer timeout waiting for file (%s) transfer to complete\n", v144, v145, v146, v147, v148, v149, (char)v150);
                      *((unsigned char *)v206 + 24) = 0;
                    }
                    else if (!*((unsigned char *)v206 + 24))
                    {
                      v152 = &v180;
                      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        LOBYTE(v152) = v180.__r_.__value_.__s.__data_[0];
                      }
                      _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to transfer file (%s)\n", v144, v145, v146, v147, v148, v149, (char)v152);
                    }
                    v153 = (dispatch_semaphore_t *)v181[1];
                    dispatch_time_t v154 = dispatch_time(0, 10005000000000);
                    if (dispatch_semaphore_wait(v153[6], v154))
                    {
                      _BBUFSDebugPrint("sTransferFile", "BBUFSServer timeout waiting for filer read session (%llu) to end\n", v155, v156, v157, v158, v159, v160, *(void *)(a1 + 384));
                      *((unsigned char *)v206 + 24) = 0;
                      goto LABEL_164;
                    }
                    if (*((unsigned char *)v206 + 24)
                      || (_BBUFSDebugPrint("sTransferFile", "BBUFSServer filer read session (%llu) end failed\n", v155, v156, v157, v158, v159, v160, *(void *)(a1 + 384)), *((unsigned char *)v206 + 24)))
                    {
                      std::string::basic_string[abi:ne180100]<0>(v188, __s);
                      s4ccToFileName(&v187, (uint64_t)&v180);
                      char v167 = bbufs::clearBackupFile((uint64_t)v188);
                      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v187.__r_.__value_.__l.__data_);
                        if (v189 < 0) {
                          goto LABEL_175;
                        }
LABEL_172:
                        if ((v167 & 1) == 0)
                        {
LABEL_176:
                          _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to clear file backup\n", v161, v162, v163, v164, v165, v166, v177);
                          *((unsigned char *)v206 + 24) = 0;
                        }
                      }
                      else
                      {
                        if ((v189 & 0x80000000) == 0) {
                          goto LABEL_172;
                        }
LABEL_175:
                        operator delete(v188[0]);
                        if ((v167 & 1) == 0) {
                          goto LABEL_176;
                        }
                      }
                    }
                    else
                    {
LABEL_164:
                      std::string::basic_string[abi:ne180100]<0>(v188, __s);
                      s4ccToFileName(&v187, (uint64_t)&v180);
                      bbufs::restoreBackupFile((uint64_t)v188);
                      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v187.__r_.__value_.__l.__data_);
                      }
                      if (v189 < 0) {
                        operator delete(v188[0]);
                      }
                    }
                    BOOL v31 = *((unsigned char *)v206 + 24) != 0;
                  }
                  else
                  {
                    v151 = &v180;
                    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      LOBYTE(v151) = v180.__r_.__value_.__s.__data_[0];
                    }
                    _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to read file (%s)\n", v136, v137, v138, v139, v140, v141, (char)v151);
                    std::string::basic_string[abi:ne180100]<0>(v188, __s);
                    s4ccToFileName(&v187, (uint64_t)&v180);
                    bbufs::restoreBackupFile((uint64_t)v188);
                    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v187.__r_.__value_.__l.__data_);
                    }
                    if (v189 < 0) {
                      operator delete(v188[0]);
                    }
                    BOOL v31 = 0;
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_36;
                }
                goto LABEL_130;
              }
            }
            memcpy(v117, __s, v116);
            goto LABEL_119;
          }
        }
        memcpy(v104, __s, v103);
        goto LABEL_105;
      }
    }
    else if (BackupDir)
    {
      goto LABEL_95;
    }
    _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to create backup directory\n", v95, v96, v97, v98, v99, v100, v177);
LABEL_35:
    BOOL v31 = 0;
LABEL_36:
    xpc_object_t v47 = (void **)__p[0];
    if (__p[0])
    {
      xpc_object_t v48 = (void **)__p[1];
      v49 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v48 - 1) < 0) {
            operator delete(*(v48 - 3));
          }
          v48 -= 3;
        }
        while (v48 != v47);
        v49 = __p[0];
      }
      __p[1] = v47;
      operator delete(v49);
    }
LABEL_44:
    v50 = (std::__shared_weak_count *)v197;
    if (!v197 || atomic_fetch_add((atomic_ullong *volatile)(v197 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      _Block_object_dispose(&v198, 8);
      xpc_object_t v51 = v204;
      if (!v204) {
        goto LABEL_48;
      }
LABEL_47:
      dispatch_release(v51);
      goto LABEL_48;
    }
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    _Block_object_dispose(&v198, 8);
    xpc_object_t v51 = v204;
    if (v204) {
      goto LABEL_47;
    }
LABEL_48:
    _Block_object_dispose(v181, 8);
    if (object[0]) {
      dispatch_release(object[0]);
    }
    _Block_object_dispose(&v205, 8);
    *(void *)(a1 + 384) = 0;
    if (!v31)
    {
      _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer failed to perform snapshot: sTransferFile failed\n", a3, a4, a5, a6, a7, a8, v177);
      goto LABEL_193;
    }
    *(_DWORD *)(a1 + 376) = 0;
  }
  if (v14)
  {
    _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer failed to perform snapshot: unrecognized INT state. This should never happen\n", a3, a4, a5, a6, a7, a8, v176);
    goto LABEL_193;
  }
  if (v9 > 0x10) {
    goto LABEL_183;
  }
  while (2)
  {
    if ((*(_DWORD *)(a1 + 380) & v9) == 0)
    {
LABEL_57:
      BOOL v52 = v9 >= 9;
      v9 *= 2;
      if (v52) {
        goto LABEL_183;
      }
      continue;
    }
    break;
  }
  xpc_object_t v53 = "bbst";
  switch(v9)
  {
    case 2u:
      xpc_object_t v53 = "bbdy";
      goto LABEL_64;
    case 3u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      __break(1u);
      return;
    case 4u:
      xpc_object_t v53 = "bbcl";
      goto LABEL_64;
    case 8u:
      xpc_object_t v53 = "bbpc";
      goto LABEL_64;
    case 0x10u:
      xpc_object_t v53 = "bbpv";
      goto LABEL_64;
    default:
LABEL_64:
      std::string::__assign_external(&v180, v53);
      timespec v198 = (char *)0xAAAAAAAAAAAAAAAALL;
      support::transport::ARI::create((support::transport::ARI *)"BBUFSServer", (dispatch_queue_s *)0x2710, 1, 0, &v198);
      v60 = v198;
      if (!v198)
      {
        _BBUFSDebugPrint("sSnapshot", "Failed to create ARI transport\n", v54, v55, v56, v57, v58, v59, v176);
LABEL_186:
        uint64_t v174 = "bbst";
        switch(v9)
        {
          case 1u:
            break;
          case 2u:
            uint64_t v174 = "bbdy";
            break;
          case 4u:
            uint64_t v174 = "bbcl";
            break;
          case 8u:
            uint64_t v174 = "bbpc";
            break;
          case 0x10u:
            uint64_t v174 = "bbpv";
            break;
          default:
            LOBYTE(v174) = 0;
            break;
        }
        _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer failed to perform snapshot: sSnapshot(%s) failed\n", v79, v80, v81, v82, v83, v84, (char)v174);
LABEL_193:
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
LABEL_194:
        }
          operator delete(v180.__r_.__value_.__l.__data_);
        return;
      }
      aBlock[0] = 0xAAAAAAAAAAAAAAAALL;
      nvm::ARICommandDriver::ARICommandDriver();
      v186 = (void *)0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v61 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)xpc_object_t object = v61;
      *(_OWORD *)v185 = v61;
      long long v182 = v61;
      long long v183 = v61;
      *(_OWORD *)v181 = v61;
      AriSdk::ARI_IBINvmSnapshotReq_SDK::ARI_IBINvmSnapshotReq_SDK((AriSdk::ARI_IBINvmSnapshotReq_SDK *)v181);
      v190[0] = 0;
      xpc_object_t v62 = operator new(4uLL);
      *xpc_object_t v62 = v9;
      v63 = v185[0];
      v185[0] = v62;
      if (v63) {
        operator delete(v63);
      }
      int v64 = *(unsigned __int8 *)(a1 + 393);
      size_t v65 = operator new(4uLL);
      *size_t v65 = v64;
      v66 = v185[1];
      v185[1] = v65;
      if (v66) {
        operator delete(v66);
      }
      uint64_t v67 = operator new(4uLL);
      *uint64_t v67 = *(unsigned __int8 *)(a1 + 392);
      size_t v68 = v186;
      v186 = v67;
      if (v68) {
        operator delete(v68);
      }
      char v75 = nvm::ARICommandDriver::NVMSnapshot();
      uint64_t v76 = v190[0];
      if (!v190[0]) {
        char v75 = 0;
      }
      if (v75)
      {
        if (!**(_DWORD **)(v190[0] + 64))
        {
          BOOL v77 = (**(_DWORD **)(v190[0] + 72) & v9) != 0;
          char v78 = 1;
          goto LABEL_80;
        }
        _BBUFSDebugPrint("sSnapshot", "Failed NVMSnapshot ARI cmd: result %d\n", v69, v70, v71, v72, v73, v74, **(_DWORD **)(v190[0] + 64));
      }
      else
      {
        _BBUFSDebugPrint("sSnapshot", "Failed NVMSnapshot ARI cmd\n", v69, v70, v71, v72, v73, v74, v176);
      }
      BOOL v77 = 0;
      char v78 = 0;
      uint64_t v76 = v190[0];
      if (!v190[0]) {
        goto LABEL_81;
      }
LABEL_80:
      (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
LABEL_81:
      MEMORY[0x223C1D580](v181);
      nvm::ARICommandDriver::~ARICommandDriver((nvm::ARICommandDriver *)aBlock);
      (*(void (**)(char *))(*(void *)v60 + 8))(v60);
      if ((v78 & 1) == 0) {
        goto LABEL_186;
      }
      if (!v77)
      {
        s4ccToFileName((std::string *)v181, (uint64_t)&v180);
        if ((SBYTE7(v182) & 0x80u) == 0) {
          v91 = v181;
        }
        else {
          LOBYTE(v91) = v181[0];
        }
        _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "Device has no pending updates for file %s\n", v85, v86, v87, v88, v89, v90, (char)v91);
        if (SBYTE7(v182) < 0) {
          operator delete(v181[0]);
        }
        goto LABEL_57;
      }
      *(_DWORD *)(a1 + 376) = 1;
      *(unsigned char *)(a1 + 394) = 1;
      s4ccToFileName((std::string *)v181, (uint64_t)&v180);
      if ((SBYTE7(v182) & 0x80u) == 0) {
        uint64_t v135 = v181;
      }
      else {
        LOBYTE(v135) = v181[0];
      }
      _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "Device has pending updates for file %s\n", v129, v130, v131, v132, v133, v134, (char)v135);
      if (SBYTE7(v182) < 0) {
        operator delete(v181[0]);
      }
      BOOL v52 = v9 >= 9;
      v9 *= 2;
      if (!v52) {
        goto LABEL_3;
      }
LABEL_183:
      _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "Device has no (further) updates\n", a3, a4, a5, a6, a7, a8, v176);
      _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer peformed snapshot successfully\n", v168, v169, v170, v171, v172, v173, v178);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_194;
      }
      return;
  }
}

void sub_21DF0DFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *aBlock,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,void *a62,uint64_t a63)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (*(char *)(v65 - 137) < 0) {
    operator delete(*(void **)(v65 - 160));
  }
  std::vector<std::string>::~vector[abi:ne180100](&a62);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  _Block_object_dispose((const void *)(v65 - 248), 8);
  size_t v68 = *(NSObject **)(v65 - 200);
  if (v68)
  {
    dispatch_release(v68);
    _Block_object_dispose(&a22, 8);
    uint64_t v67 = object;
    if (!object)
    {
LABEL_10:
      _Block_object_dispose((const void *)(v65 - 192), 8);
      if (a21 < 0) {
        operator delete(a16);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    _Block_object_dispose(&a22, 8);
    uint64_t v67 = object;
    if (!object) {
      goto LABEL_10;
    }
  }
  dispatch_release(v67);
  goto LABEL_10;
}

void s4ccToFileName(std::string *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 != 4) {
    goto LABEL_12;
  }
  if (v4 >= 0) {
    size_t v6 = (_DWORD *)a2;
  }
  else {
    size_t v6 = *(_DWORD **)a2;
  }
  if (*v6 == 1953718882 || *v6 == 2036621922)
  {
    GetBasebandNVM4ccToFileNameMap(v9);
    xpc_object_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a2, a2);
    if ((*((char *)v7 + 79) & 0x80000000) == 0)
    {
LABEL_16:
      long long v8 = *(_OWORD *)(v7 + 7);
      a1->__r_.__value_.__r.__words[2] = (std::string::size_type)v7[9];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v8;
      goto LABEL_17;
    }
  }
  else
  {
    if (*v6 != 1818452578 && *v6 != 1668309602 && *v6 != 1987076706)
    {
LABEL_12:
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      return;
    }
    GetBasebandFDR4ccToFileNameMap(v9);
    xpc_object_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a2, a2);
    if ((*((char *)v7 + 79) & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v7[7], (std::string::size_type)v7[8]);
LABEL_17:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, (uint64_t)v9[1]);
}

void sub_21DF0E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
}

void sub_21DF0E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
}

BOOL INTStateMachineSnapshotInProgress(uint64_t a1)
{
  return *(_DWORD *)(a1 + 376) > 0;
}

uint64_t INTStateMachineSetConfig(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t)a2;
  if (!a2)
  {
    uint64_t v36 = "BBUFSServer failed to set config: NULL configName param\n";
    goto LABEL_13;
  }
  int v9 = a3;
  if (!strcasecmp("ForceSync", a2))
  {
    *(unsigned char *)(a1 + 392) = v9 != 0;
    uint64_t v37 = "false";
    if (v9) {
      uint64_t v37 = "true";
    }
    _BBUFSDebugPrint("INTStateMachineSetConfig", "Set forceSync config to %s\n", v11, v12, v13, v14, v15, v16, (char)v37);
  }
  else if (!strcasecmp("ShutdownSync", (const char *)v8))
  {
    *(unsigned char *)(a1 + 393) = v9 != 0;
    uint64_t v38 = "false";
    if (v9) {
      uint64_t v38 = "true";
    }
    _BBUFSDebugPrint("INTStateMachineSetConfig", "Set shutdownSync config to %s\n", v17, v18, v19, v20, v21, v22, (char)v38);
  }
  else
  {
    if (strcasecmp("ARICtxId", (const char *)v8))
    {
      if (strcasecmp("SyncStatic", (const char *)v8))
      {
        if (!strcasecmp("SyncDynamic", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 2;
          uint64_t v39 = "Requested to sync dynamic\n";
        }
        else if (!strcasecmp("SyncCalibration", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 4;
          uint64_t v39 = "Requested to sync calibration\n";
        }
        else if (!strcasecmp("SyncFATPCalibration", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 8;
          uint64_t v39 = "Requested to sync FATP-calibration\n";
        }
        else if (!strcasecmp("SyncStaticDynamicCalibration", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 7;
          uint64_t v39 = "Requested to sync static + dynamic + calibration\n";
        }
        else
        {
          if (strcasecmp("SyncStaticDynamic", (const char *)v8))
          {
            _BBUFSDebugPrint("INTStateMachineSetConfig", "BBUFSServer failed to set config, unrecognized config name '%s'\n", v29, v30, v31, v32, v33, v34, v8);
            return 0;
          }
          *(_DWORD *)(a1 + 380) = 3;
          uint64_t v39 = "Requested to sync static + dynamic\n";
        }
        _BBUFSDebugPrint("INTStateMachineSetConfig", v39, v29, v30, v31, v32, v33, v34, v40);
        return 1;
      }
      uint64_t v8 = 1;
      *(_DWORD *)(a1 + 380) = 1;
      uint64_t v36 = "Requested to sync static\n";
LABEL_13:
      _BBUFSDebugPrint("INTStateMachineSetConfig", v36, a3, a4, a5, a6, a7, a8, v40);
      return v8;
    }
    _BBUFSDebugPrint("INTStateMachineSetConfig", "Set ARI context ID to %d\n", v23, v24, v25, v26, v27, v28, v9);
  }
  return 1;
}

uint64_t INTStateMachineSetConfigDefaults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (MEMORY[0x263F8BB08])
  {
    *(_WORD *)(a1 + 392) = 0;
    *(_DWORD *)(a1 + 380) = 3;
    *(unsigned char *)(a1 + 394) = 0;
    *(void *)(a1 + 384) = 0;
    return 1;
  }
  else
  {
    _BBUFSDebugPrint("INTStateMachineSetConfigDefaults", "HSFilerDynamic library is not available for INT case. It should always be\n", a3, a4, a5, a6, a7, a8, v9);
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  size_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      int v10 = (uint64_t **)v5;
      uint64_t v13 = (const void *)v5[4];
      uint64_t v11 = v5 + 4;
      uint64_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        uint64_t v5 = v10[1];
        if (!v5)
        {
          size_t v6 = v10 + 1;
LABEL_28:
          uint64_t v20 = operator new(0x50uLL);
          uint64_t v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0) {
            goto LABEL_31;
          }
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v5 = *v10;
        size_t v6 = v10;
        if (!*v10) {
          goto LABEL_28;
        }
      }
    }
  }
  int v10 = a1 + 1;
  uint64_t v20 = operator new(0x50uLL);
  uint64_t v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_32:
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  void *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *size_t v6 = v20;
  uint64_t v22 = (uint64_t *)**a1;
  uint64_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    uint64_t v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_21DF0E918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  v1 = *(NSObject **)(a1 + 48);
  if (v1) {
    dispatch_release(v1);
  }
}

intptr_t ___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, char a2, int a3)
{
  hsfiler::support::to_string();
  _BBUFSDebugPrint("sTransferFile_block_invoke", "BBUFSServer filer read session (%llu) status: %s\n", v6, v7, v8, v9, v10, v11, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3 >= 0;
  uint64_t v12 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 48);

  return dispatch_semaphore_signal(v12);
}

uint64_t ctu::path_join<char (&)[256],std::string>(void *a1, char *__s)
{
  memset(a1, 170, 24);
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memcpy(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return ctu::path_join_impl();
}

void sub_21DF0EAA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

intptr_t ___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke_60(uint64_t a1, char a2, int a3)
{
  hsfiler::support::to_string();
  _BBUFSDebugPrint("sTransferFile_block_invoke", "BBUFSServer filer read session (%llu) file (%s) transfer status: %s\n", v6, v7, v8, v9, v10, v11, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3 >= 0;
  uint64_t v12 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 48);

  return dispatch_semaphore_signal(v12);
}

uint64_t __cxx_global_var_init_10()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t BBUEURProvisioner::BBUEURProvisioner(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 20) = 1;
  *(void *)a1 = &unk_26CECBD10;
  *(void *)(a1 + 8) = a2;
  uint64_t v4 = capabilities::updater::provisioningCommandTimeout((capabilities::updater *)a1);
  if (v4 >= 0x100000000)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUEURProvisioner.cpp", 0xFu, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::updater::provisioningCommandTimeout().count() <= std::numeric_limits<UInt32>::max() && \"capabilities::updater::provisioningCommandTimeout().count() exceeds maximum allowable value\")", v7, v8, v9, v10);
  }
  *(_DWORD *)(a1 + 24) = capabilities::updater::provisioningCommandTimeout((capabilities::updater *)v4);
  return a1;
}

void sub_21DF0EC44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURProvisioner::getProvisioningCommandTimeoutMilliseconds(BBUEURProvisioner *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t BBUEURProvisioner::determineSupport(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Determining support");
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int Status = ETLProvisionGetStatus();
  *(_DWORD *)(a1 + 16) = Status;
  if (Status) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = 70;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v1);
  if (!Status) {
    return v1;
  }
  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = "???";
  if (v5 == 1) {
    uint64_t v6 = "Mature";
  }
  if (v5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = "Unknown";
  }
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Determined support as %s", v7);
  return v1;
}

uint64_t BBUEURProvisioner::handleBeginMature(BBUFeedback **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(const void **)(a2 + 8);
  uint64_t v34 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 56, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUEURProvisioner.cpp", 0x4Eu, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Unable to extract public key to start mature provisioning.\")", v25, v26, v27, v28);
  }
  CFRetain(v3);
  unsigned int Length = CFDataGetLength((CFDataRef)v3);
  unint64_t v33 = Length | 0xAAAAAAAA00000000;
  uint64_t v7 = (UInt8 *)operator new[](Length);
  v40.length = CFDataGetLength((CFDataRef)v3);
  v40.location = 0;
  CFDataGetBytes((CFDataRef)v3, v40, v7);
  uint64_t v32 = v7;
  int v38 = -1431655766;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __sz[14] = v8;
  __sz[15] = v8;
  __sz[12] = v8;
  __sz[13] = v8;
  __sz[10] = v8;
  __sz[11] = v8;
  __sz[8] = v8;
  __sz[9] = v8;
  __sz[6] = v8;
  __sz[7] = v8;
  __sz[4] = v8;
  __sz[5] = v8;
  __sz[2] = v8;
  __sz[3] = v8;
  __sz[0] = v8;
  __sz[1] = v8;
  long long v36 = v8;
  (*((void (**)(BBUFeedback **))*a1 + 8))(a1);
  int v9 = ETLProvisionStart();
  operator delete[](v7);
  if (!v9)
  {
    BBUFeedback::handleComment(a1[1], "Failed to retrieve mature provisioning parameters");
    uint64_t v14 = 3;
LABEL_27:
    CFRelease(v3);
    return v14;
  }
  *(_DWORD *)((char *)v31 + 3) = -1431655766;
  v31[0] = -1431655766;
  if (ETLCDMAMakeMEID() && ETLCDMAIsValidMEID())
  {
    memset(__b, 170, sizeof(__b));
    ETLCDMAMakeStringFromMEID();
    char v10 = (std::string *)operator new(0x18uLL);
    size_t v11 = strlen(__b);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v15 = v11 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (long long *)operator new(v15 + 1);
      *((void *)&__dst + 1) = v12;
      unint64_t v30 = v16 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v30) = v11;
      p_dst = &__dst;
      if (!v11)
      {
LABEL_14:
        *((unsigned char *)p_dst + v12) = 0;
        if (SHIBYTE(v30) < 0)
        {
          int v18 = (void *)__dst;
          std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
          operator delete(v18);
          uint64_t v17 = *(void *)(a3 + 16);
          if (!v17)
          {
LABEL_21:
            *(void *)(a3 + 16) = v10;
            goto LABEL_22;
          }
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = __dst;
          v10->__r_.__value_.__r.__words[2] = v30;
          uint64_t v17 = *(void *)(a3 + 16);
          if (!v17) {
            goto LABEL_21;
          }
        }
        if (*(char *)(v17 + 23) < 0) {
          operator delete(*(void **)v17);
        }
        operator delete((void *)v17);
        goto LABEL_21;
      }
    }
    memcpy(p_dst, __b, v12);
    goto LABEL_14;
  }
LABEL_22:
  int v19 = operator new(0x10uLL);
  size_t v20 = LODWORD(__sz[0]);
  v19[2] = __sz[0];
  uint64_t v21 = operator new[](v20);
  *(void *)int v19 = v21;
  memcpy(v21, (char *)__sz + 4, v20);
  uint64_t v22 = *(void ***)(a3 + 32);
  if (v22)
  {
    if (*v22) {
      operator delete(*v22);
    }
    operator delete(v22);
  }
  uint64_t v14 = 0;
  uint64_t result = 0;
  *(void *)(a3 + 32) = v19;
  uint64_t v3 = v34;
  if (v34) {
    goto LABEL_27;
  }
  return result;
}

void sub_21DF0F0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16)
{
  operator delete(v17);
  operator delete(v16);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  _Unwind_Resume(a1);
}

uint64_t BBUEURProvisioner::handleFinishMature(uint64_t a1, uint64_t a2)
{
  std::string v2 = *(const void **)(a2 + 16);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 56, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUEURProvisioner.cpp", 0x7Bu, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Unable to extract public key to finish mature provisioning.\")", v9, v10, v11, v12);
  }
  CFRetain(v2);
  unsigned int Length = CFDataGetLength((CFDataRef)v2);
  int v5 = (UInt8 *)operator new[](Length);
  v13.length = CFDataGetLength((CFDataRef)v2);
  v13.location = 0;
  CFDataGetBytes((CFDataRef)v2, v13, v5);
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v6 = ETLProvisionFinish();
  operator delete[](v5);
  CFRelease(v2);
  if (v6) {
    return 0;
  }
  else {
    return 3;
  }
}

void sub_21DF0F294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF0F2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  __cxa_free_exception(v12);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void sub_21DF0F2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF0F2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF0F2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t BBUProvisioner::overrideSupport(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void BBUEUR10LoaderVersion::~BBUEUR10LoaderVersion(void **this)
{
  *this = &unk_26CECE448;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  BBUEUR10LoaderVersion *v1;
  uint64_t vars8;

  uint64_t v1 = (BBUEUR10LoaderVersion *)this;
  *this = &unk_26CECE448;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    this = (void **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void BBUEUR10LoaderVersion::getAsString(BBUEUR10LoaderVersion *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 4);
  }
}

void BBUEUR10LoaderVersion::getAsFilename(unsigned char *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

uint64_t BBUEUR10LoaderVersion::parseVersionString(uint64_t a1, void **a2)
{
  uint64_t v3 = (void **)(a1 + 16);
  if (v3 == a2) {
    goto LABEL_5;
  }
  if (*(char *)(a1 + 39) < 0)
  {
    size_t v6 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v7 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      size_t v7 = v6;
    }
    std::string::__assign_no_alias<false>(v3, a2, v7);
    *(_DWORD *)(a1 + 8) = 2;
    return 0;
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x80) == 0)
    {
      long long v4 = *(_OWORD *)a2;
      v3[2] = a2[2];
      *(_OWORD *)uint64_t v3 = v4;
LABEL_5:
      *(_DWORD *)(a1 + 8) = 2;
      return 0;
    }
    std::string::__assign_no_alias<true>(v3, *a2, (size_t)a2[1]);
    *(_DWORD *)(a1 + 8) = 2;
    return 0;
  }
}

BOOL BBUEUR10LoaderVersion::isNewerThan(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v8, (long long *)(a1 + 16));
  MEMORY[0x223C1DB50](v8, (char *)&v13 + 4);
  v8[0] = *MEMORY[0x263F8C2C0];
  uint64_t v3 = v8[0];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C0] + 24);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = v4;
  uint64_t v9 = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223C1DDF0](v12);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(v6, a2);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v8, (long long *)v6);
  MEMORY[0x223C1DB50](v8, &v13);
  v8[0] = v3;
  *(void *)((char *)v8 + *(void *)(v3 - 24)) = v4;
  uint64_t v9 = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223C1DDF0](v12);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return SHIDWORD(v13) > (int)v13;
}

void sub_21DF0F704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21DF0F730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::basic_istringstream[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v4 = MEMORY[0x263F8C338] + 64;
  *(void *)(a1 + 120) = MEMORY[0x263F8C338] + 64;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  long long v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 16));
  uint64_t v9 = MEMORY[0x263F8C338] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(void *)a1 = v9;
  *(void *)(a1 + 120) = v4;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  if ((long long *)(a1 + 80) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__assign_no_alias<true>((void *)(a1 + 80), *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v11 = *a2;
      *(void *)(a1 + 96) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 80) = v11;
    }
  }
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v5);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  long long v10;

  uint64_t v4 = MEMORY[0x263F8C338] + 64;
  *(void *)(a1 + 120) = MEMORY[0x263F8C338] + 64;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  long long v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 16));
  uint64_t v9 = MEMORY[0x263F8C338] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(void *)a1 = v9;
  *(void *)(a1 + 120) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  uint64_t v10 = *a2;
  *(void *)(a1 + 96) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 80) = v10;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 8;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v5);
  return a1;
}

void sub_21DF0F900(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x223C1DDF0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223C1DDF0](a1 + 120);
  return a1;
}

void sub_21DF0FBF4(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*v3);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223C1DDF0](v1);
  _Unwind_Resume(a1);
}

BOOL BBUEUR10LoaderVersion::isEqualTo(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v8, (long long *)(a1 + 16));
  MEMORY[0x223C1DB50](v8, (char *)&v13 + 4);
  v8[0] = *MEMORY[0x263F8C2C0];
  uint64_t v3 = v8[0];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C0] + 24);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = v4;
  uint64_t v9 = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223C1DDF0](v12);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(v6, a2);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v8, (long long *)v6);
  MEMORY[0x223C1DB50](v8, &v13);
  v8[0] = v3;
  *(void *)((char *)v8 + *(void *)(v3 - 24)) = v4;
  uint64_t v9 = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223C1DDF0](v12);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return HIDWORD(v13) == v13;
}

void sub_21DF0FE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21DF0FEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(void *a1, const char *a2, dispatch_qos_class_t qos_class, NSObject **a4)
{
  char v7 = dispatch_queue_attr_make_with_qos_class(0, qos_class, 0);
  long long v8 = *a4;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_retain(v8);
    uint64_t v9 = dispatch_queue_create_with_target_V2(a2, v7, v8);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = v9;
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v9 = dispatch_queue_create(a2, v7);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v9;
  if (v9) {
LABEL_3:
  }
    dispatch_retain(v9);
LABEL_4:
  a1[3] = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v8)
  {
    dispatch_release(v8);
    dispatch_release(v8);
  }
  return a1;
}

void BBUError::BBUError(BBUError *this)
{
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(this, "BBUError", QOS_CLASS_UTILITY, &object);
  if (object) {
    dispatch_release(object);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
}

void sub_21DF0FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void BBUError::getCFError(BBUError *this, __CFError **a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUError.cpp", 0x11u, (ctu::LogMessageBuffer *)"Assertion failure(error)", v5, v6, v7, v8);
  }
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN8BBUError10getCFErrorEPP9__CFError_block_invoke;
  v9[3] = &__block_descriptor_tmp_4;
  v9[4] = this;
  v9[5] = a2;
  uint64_t v10 = v9;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_13_0;
  block[4] = this;
  block[5] = &v10;
  uint64_t v3 = (char *)this + 16;
  uint64_t v2 = *((void *)this + 2);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void sub_21DF10124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ___ZN8BBUError10getCFErrorEPP9__CFError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(long long **)(v8 + 32);
  uint64_t v10 = *(long long **)(v8 + 40);
  if (v9 != v10)
  {
    CFErrorRef v12 = 0;
    uint64_t v13 = *(CFErrorRef **)(a1 + 40);
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v14 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      BBUpdaterCommon::BBUCreateCFError(v13, (uint64_t)&__p, *((_DWORD *)v9 + 6), v12, a5, a6, a7, a8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = *(CFErrorRef **)(a1 + 40);
      CFErrorRef v12 = *v13;
      v9 += 2;
    }
    while (v9 != v10);
  }
}

void sub_21DF101F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUError::getErrorCode(BBUError *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  v5[2] = ___ZN8BBUError12getErrorCodeEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_4_0;
  v5[4] = &v6;
  v5[5] = this;
  uint64_t v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_13_0;
  block[4] = this;
  block[5] = &v10;
  uint64_t v2 = (char *)this + 16;
  uint64_t v1 = *((void *)this + 2);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN8BBUError12getErrorCodeEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  if (v3 != v2) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v2 - 8);
  }
  return result;
}

void BBUError::getErrorString(BBUError *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x4002000000;
  char v11 = __Block_byref_object_copy__1;
  CFErrorRef v12 = __Block_byref_object_dispose__1;
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = ___ZN8BBUError14getErrorStringEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_7;
  v7[4] = &v8;
  v7[5] = this;
  uint64_t v16 = v7;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_13_0;
  block[4] = this;
  block[5] = &v16;
  uint64_t v4 = (char *)this + 16;
  uint64_t v3 = *((void *)this + 2);
  if (*((void *)v4 + 1))
  {
    dispatch_async_and_wait(v3, block);
    uint64_t v5 = v9;
    if ((*((char *)v9 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(v5 + 5);
      a2->__r_.__value_.__r.__words[2] = v5[7];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_sync(v3, block);
    uint64_t v5 = v9;
    if ((*((char *)v9 + 63) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[5], v5[6]);
LABEL_6:
  _Block_object_dispose(&v8, 8);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
}

void sub_21DF104A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void **___ZN8BBUError14getErrorStringEv_block_invoke(void **result)
{
  uint64_t v1 = result[5];
  uint64_t v3 = v1[4];
  uint64_t v2 = v1[5];
  if (v3 != v2)
  {
    uint64_t v4 = (long long *)(v2 - 32);
    uint64_t v5 = *((void *)result[4] + 1);
    __n128 result = (void **)(v5 + 40);
    if (v5 + 40 != v2 - 32)
    {
      int v6 = *(char *)(v5 + 63);
      size_t v7 = *(unsigned __int8 *)(v2 - 9);
      if (v6 < 0)
      {
        uint64_t v10 = *(long long **)(v2 - 32);
        size_t v9 = *(void *)(v2 - 24);
        if ((v7 & 0x80u) == 0) {
          char v11 = v4;
        }
        else {
          char v11 = v10;
        }
        if ((v7 & 0x80u) == 0) {
          size_t v12 = v7;
        }
        else {
          size_t v12 = v9;
        }
        return std::string::__assign_no_alias<false>(result, v11, v12);
      }
      else if ((v7 & 0x80) != 0)
      {
        return (void **)std::string::__assign_no_alias<true>(result, *(void **)(v2 - 32), *(void *)(v2 - 24));
      }
      else
      {
        long long v8 = *v4;
        result[2] = *(void **)(v2 - 16);
        *(_OWORD *)__n128 result = v8;
      }
    }
  }
  return result;
}

void BBUError::addError(uint64_t a1, uint64_t a2, int a3)
{
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  v5[3] = &__block_descriptor_tmp_8;
  v5[4] = a1;
  v5[5] = a2;
  int v6 = a3;
  size_t v7 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_13_0;
  block[4] = a1;
  block[5] = &v7;
  uint64_t v4 = a1 + 16;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(long long **)(a1 + 40);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((void *)v2 + 1));
    int v5 = *(_DWORD *)(a1 + 48);
    int v22 = v5;
    size_t v7 = (void **)v3[5];
    unint64_t v6 = v3[6];
    if ((unint64_t)v7 < v6) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *v2;
    __p.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    int v5 = *(_DWORD *)(a1 + 48);
    int v22 = v5;
    size_t v7 = (void **)v3[5];
    unint64_t v6 = v3[6];
    if ((unint64_t)v7 < v6)
    {
LABEL_3:
      long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v7[2] = (void *)__p.__r_.__value_.__r.__words[2];
      *(_OWORD *)size_t v7 = v8;
      *((_DWORD *)v7 + 6) = v22;
      v3[5] = v7 + 4;
      return;
    }
  }
  size_t v9 = (void **)v3[4];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 5;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 59) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 4 > v11) {
    unint64_t v11 = v12 >> 4;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v14 = (char *)operator new(32 * v13);
  uint64_t v15 = &v14[32 * v10];
  *(std::string *)uint64_t v15 = __p;
  uint64_t v16 = &v14[32 * v13];
  memset(&__p, 0, sizeof(__p));
  *((_DWORD *)v15 + 6) = v5;
  uint64_t v17 = v15 + 32;
  if (v7 == v9)
  {
    v3[4] = v15;
    v3[5] = v17;
    v3[6] = v16;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v7 - 2);
      *((void *)v15 - 2) = *(v7 - 2);
      *((_OWORD *)v15 - 2) = v18;
      *(v7 - 3) = 0;
      *(v7 - 2) = 0;
      *(v7 - 4) = 0;
      *((_DWORD *)v15 - 2) = *((_DWORD *)v7 - 2);
      v15 -= 32;
      v7 -= 4;
    }
    while (v7 != v9);
    size_t v7 = (void **)v3[4];
    int v19 = (void **)v3[5];
    v3[4] = v15;
    v3[5] = v17;
    v3[6] = v16;
    while (v19 != v7)
    {
      if (*((char *)v19 - 9) < 0) {
        operator delete(*(v19 - 4));
      }
      v19 -= 4;
    }
  }
  if (v7) {
    operator delete(v7);
  }
  int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v3[5] = v17;
  if (v20 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21DF1080C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8BBUError11clearErrorsEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 32);
  for (uint64_t i = *(void *)(v1 + 40); i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  *(void *)(v1 + 40) = v2;
}

void *___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void BBUEUR16FirmwareVersion::BBUEUR16FirmwareVersion(BBUEUR16FirmwareVersion *this)
{
  uint64_t v2 = (const void *)BBUEUR16FirmwareVersion::kFirmwarePrefix;
  size_t v3 = strlen((const char *)BBUEUR16FirmwareVersion::kFirmwarePrefix);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (long long *)operator new(v6 + 1);
    *((void *)&__dst + 1) = v4;
    unint64_t v11 = v7 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v2, v4);
  *((unsigned char *)p_dst + v4) = 0;
  *(void *)this = &unk_26CECB2B8;
  *((_DWORD *)this + 5) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  long long v8 = (std::string *)((char *)this + 72);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (SHIBYTE(v11) < 0)
  {
    size_t v9 = (void *)__dst;
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    *((_DWORD *)this + 4) = 0;
    *((void *)this + 1) = 0;
    operator delete(v9);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = __dst;
    *((void *)this + 11) = v11;
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
  *(void *)this = &unk_26CECBE40;
}

void sub_21DF109E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void BBUEUR16FirmwareVersion::~BBUEUR16FirmwareVersion(void **this)
{
  *this = &unk_26CECB2B8;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(this[3]);
      return;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if (*((char *)this + 47) < 0) {
    goto LABEL_7;
  }
}

{
  BBUEUR16FirmwareVersion *v2;
  uint64_t vars8;

  *this = &unk_26CECB2B8;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v2 = (BBUEUR16FirmwareVersion *)this;
    goto LABEL_6;
  }
LABEL_9:
  operator delete(this[3]);
  uint64_t v2 = (BBUEUR16FirmwareVersion *)this;

LABEL_6:
  operator delete(v2);
}

unint64_t BBUEUR16FirmwareVersion::getFirmwarePrefix@<X0>(void *a1@<X8>)
{
  size_t v3 = (const void *)BBUEUR16FirmwareVersion::kFirmwarePrefix;
  unint64_t result = strlen((const char *)BBUEUR16FirmwareVersion::kFirmwarePrefix);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a1 = 0;
      return result;
    }
  }
  unint64_t result = (unint64_t)memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
  return result;
}

void *BBUICE16HashData::BBUICE16HashData(void *a1, unsigned int a2, char *__s)
{
  *a1 = &unk_26CECBEB0;
  a1[2] = 0;
  a1[1] = a1 + 2;
  size_t v3 = (uint64_t **)(a1 + 1);
  a1[3] = 0;
  if (a2)
  {
    uint64_t v5 = a2;
    while (1)
    {
      memset(__p, 170, sizeof(__p));
      size_t v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v7 = (unsigned char *)v6;
      if (v6 >= 0x17) {
        break;
      }
      HIBYTE(__p[2]) = v6;
      long long v8 = __p;
      if (v6) {
        goto LABEL_12;
      }
LABEL_13:
      v7[(void)v8] = 0;
      unint64_t v11 = operator new(0x20uLL);
      long long v12 = *((_OWORD *)__s + 5);
      _OWORD *v11 = *((_OWORD *)__s + 4);
      v11[1] = v12;
      unint64_t v30 = __p;
      unint64_t v13 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v30);
      uint64_t v14 = v13;
      uint64_t v16 = v13 + 7;
      uint64_t v15 = v13[7];
      unint64_t v17 = (unint64_t)v13[9];
      if (v17 - (unint64_t)v15 >= 0x20)
      {
        int v22 = v13[8];
        int64_t v23 = (char *)v22 - (char *)v15;
        if ((unint64_t)((char *)v22 - (char *)v15) > 0x1F)
        {
          long long v26 = v11[1];
          *(_OWORD *)uint64_t v15 = *v11;
          *((_OWORD *)v15 + 1) = v26;
          v13[8] = v15 + 4;
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
        else
        {
          if (v22 != v15)
          {
            memmove(v13[7], v11, (char *)v22 - (char *)v15);
            uint64_t v15 = v14[8];
          }
          uint64_t v24 = (char *)v11 + v23;
          size_t v25 = 32 - v23;
          memmove(v15, v24, v25);
          v14[8] = (uint64_t *)((char *)v15 + v25);
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        if (v15)
        {
          v13[8] = v15;
          operator delete(v15);
          unint64_t v17 = 0;
          *uint64_t v16 = 0;
          v16[1] = 0;
          v16[2] = 0;
        }
        uint64_t v18 = 2 * v17;
        if (2 * v17 <= 0x20) {
          uint64_t v18 = 32;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v19 = v18;
        }
        int v20 = (uint64_t *)operator new(v19);
        v14[7] = v20;
        v14[8] = v20;
        v14[9] = (uint64_t *)((char *)v20 + v19);
        long long v21 = v11[1];
        *(_OWORD *)int v20 = *v11;
        *((_OWORD *)v20 + 1) = v21;
        v14[8] = v20 + 4;
        operator delete(v11);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      operator delete(__p[0]);
LABEL_4:
      __s += 96;
      if (!--v5) {
        return a1;
      }
    }
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    long long v8 = operator new(v9 + 1);
    __p[1] = v7;
    __p[2] = (void *)(v10 | 0x8000000000000000);
    __p[0] = v8;
LABEL_12:
    memcpy(v8, __s, (size_t)v7);
    goto LABEL_13;
  }
  return a1;
}

void sub_21DF10EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v17, *a10);
  _Unwind_Resume(a1);
}

void sub_21DF10ED0()
{
  operator delete(v0);
  JUMPOUT(0x21DF10EDCLL);
}

void BBUICE16HashData::~BBUICE16HashData(char **this)
{
  *this = (char *)&unk_26CECBEB0;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  uint64_t vars8;

  *this = (char *)&unk_26CECBEB0;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);

  operator delete(this);
}

BOOL BBUICE16HashData::compare(BBUICE16HashData *this, BBUFeedback *a2, const BBUHashData *lpsrc)
{
  if (!lpsrc)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = (long long *)*((void *)this + 1);
    long long v8 = (char *)this + 16;
    if (v7 == (long long *)((char *)this + 16)) {
      return v6;
    }
LABEL_7:
    while (1)
    {
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v19[16] = v9;
      long long v20 = v9;
      *(_OWORD *)size_t v19 = v9;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v19, v7 + 2);
      uint64_t v10 = *(const unsigned __int8 **)&v19[24];
      unint64_t v11 = (const unsigned __int8 *)(*(uint64_t (**)(void *, unsigned char *))(*(void *)v5 + 40))(v5, v19);
      if (!v11) {
        break;
      }
      if (!v6) {
        goto LABEL_18;
      }
      if (v19[23] >= 0) {
        long long v12 = v19;
      }
      else {
        long long v12 = *(const char **)v19;
      }
      BOOL v6 = BBUHashData::compareHash(this, a2, v10, v11, v12);
      unint64_t v13 = *(void **)&v19[24];
      if (*(void *)&v19[24]) {
        goto LABEL_19;
      }
LABEL_20:
      if ((v19[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v19);
        uint64_t v15 = (long long *)*((void *)v7 + 1);
        if (v15)
        {
          do
          {
LABEL_24:
            uint64_t v16 = v15;
            uint64_t v15 = *(long long **)v15;
          }
          while (v15);
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v15 = (long long *)*((void *)v7 + 1);
        if (v15) {
          goto LABEL_24;
        }
      }
      do
      {
        uint64_t v16 = (long long *)*((void *)v7 + 2);
        BOOL v17 = *(void *)v16 == (void)v7;
        uint64_t v7 = v16;
      }
      while (!v17);
LABEL_6:
      uint64_t v7 = v16;
      if (v16 == (long long *)v8) {
        return v6;
      }
    }
    if (v19[23] >= 0) {
      uint64_t v14 = v19;
    }
    else {
      uint64_t v14 = *(const char **)v19;
    }
    BBUFeedback::handleComment(a2, "Hash missing in BBFW: %s", v14);
LABEL_18:
    BOOL v6 = 0;
    unint64_t v13 = *(void **)&v19[24];
    if (!*(void *)&v19[24]) {
      goto LABEL_20;
    }
LABEL_19:
    *(void *)&long long v20 = v13;
    operator delete(v13);
    goto LABEL_20;
  }
  BOOL v6 = v5 != 0;
  uint64_t v7 = (long long *)*((void *)this + 1);
  long long v8 = (char *)this + 16;
  if (v7 != (long long *)((char *)this + 16)) {
    goto LABEL_7;
  }
  return v6;
}

void sub_21DF1119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<unsigned char>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void BBUICE16HashData::showHashes(BBUICE16HashData *this, BBUFeedback *a2)
{
  uint64_t v2 = (long long *)*((void *)this + 1);
  size_t v3 = (char *)this + 16;
  if (v2 != (long long *)((char *)this + 16))
  {
    while (1)
    {
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v13[16] = v6;
      long long v14 = v6;
      *(_OWORD *)unint64_t v13 = v6;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v13, v2 + 2);
      uint64_t v7 = v13[23] >= 0 ? v13 : *(const char **)v13;
      v15[0] = 0;
      v15[1] = 0;
      uint64_t v16 = 0;
      (*(void (**)(BBUICE16HashData *))(*(void *)this + 32))(this);
      ctu::assign();
      long long v8 = v16 >= 0 ? (const char *)v15 : (const char *)v15[0];
      BBUFeedback::handleComment(a2, "\t %s:  %s", v7, v8);
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        break;
      }
      operator delete(v15[0]);
      long long v9 = *(void **)&v13[24];
      if (*(void *)&v13[24]) {
        goto LABEL_12;
      }
LABEL_13:
      if ((v13[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v13);
        uint64_t v10 = (long long *)*((void *)v2 + 1);
        if (v10)
        {
          do
          {
LABEL_19:
            unint64_t v11 = v10;
            uint64_t v10 = *(long long **)v10;
          }
          while (v10);
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v10 = (long long *)*((void *)v2 + 1);
        if (v10) {
          goto LABEL_19;
        }
      }
      do
      {
        unint64_t v11 = (long long *)*((void *)v2 + 2);
        BOOL v12 = *(void *)v11 == (void)v2;
        uint64_t v2 = v11;
      }
      while (!v12);
LABEL_3:
      uint64_t v2 = v11;
      if (v11 == (long long *)v3) {
        return;
      }
    }
    long long v9 = *(void **)&v13[24];
    if (!*(void *)&v13[24]) {
      goto LABEL_13;
    }
LABEL_12:
    *(void *)&long long v14 = v9;
    operator delete(v9);
    goto LABEL_13;
  }
}

void sub_21DF1138C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16HashData::getFileHash(uint64_t a1, const void **a2)
{
  size_t v3 = std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>(a1 + 8, a2);
  if ((uint64_t *)(a1 + 16) == v3) {
    return 0;
  }
  else {
    return v3[7];
  }
}

uint64_t BBUICE16HashData::getHashSize(BBUICE16HashData *this)
{
  return 32;
}

std::string *std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    long long v6 = (unsigned char *)*((void *)a2 + 3);
    long long v9 = (unsigned char *)*((void *)a2 + 4);
    size_t v7 = v9 - v6;
    if (v9 == v6) {
      return this;
    }
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    long long v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    size_t v7 = v5 - v6;
    if (v5 == v6) {
      return this;
    }
  }
  if ((v7 & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  std::string::size_type v11 = (std::string::size_type)v10 + v7;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10 + v7;
  memcpy(v10, v6, v7);
  this[1].__r_.__value_.__l.__size_ = v11;
  return this;
}

void sub_21DF114CC(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<unsigned char>>,std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *> *,long>>(uint64_t a1, long long *a2, long long *a3)
{
  long long v4 = a2;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_52;
  }
  long long v6 = *(uint64_t **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(v7 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = v6[1] ? v6[1] : (uint64_t)v6;
  uint64_t v28 = v8;
  if (!v8) {
    goto LABEL_52;
  }
  long long v9 = *(char **)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = *(char **)v9;
    if (*(void *)v9 == v8)
    {
      *(void *)long long v9 = 0;
      while (1)
      {
        size_t v25 = (char *)*((void *)v9 + 1);
        if (!v25) {
          break;
        }
        do
        {
          long long v9 = v25;
          size_t v25 = *(char **)v25;
        }
        while (v25);
      }
    }
    else
    {
      for (*((void *)v9 + 1) = 0; v10; uint64_t v10 = (char *)*((void *)v9 + 1))
      {
        do
        {
          long long v9 = v10;
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v27 = (uint64_t)v9;
  if (a2 == a3)
  {
    uint64_t v21 = a1;
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(a1, (char *)v8);
    if (!v9) {
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  std::string::size_type v11 = a2;
  do
  {
    if ((long long *)v8 != v11)
    {
      BOOL v12 = (void **)(v8 + 32);
      char v13 = *((unsigned char *)v11 + 55);
      if (*(char *)(v8 + 55) < 0)
      {
        if (v13 >= 0) {
          uint64_t v15 = v11 + 2;
        }
        else {
          uint64_t v15 = (void *)*((void *)v11 + 4);
        }
        if (v13 >= 0) {
          size_t v16 = *((unsigned __int8 *)v11 + 55);
        }
        else {
          size_t v16 = *((void *)v11 + 5);
        }
        std::string::__assign_no_alias<false>(v12, v15, v16);
      }
      else if ((*((unsigned char *)v11 + 55) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *((void **)v11 + 4), *((void *)v11 + 5));
      }
      else
      {
        long long v14 = v11[2];
        *(void *)(v8 + 48) = *((void *)v11 + 6);
        *(_OWORD *)BOOL v12 = v14;
      }
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v8 + 56), *((char **)v11 + 7), *((char **)v11 + 8), *((void *)v11 + 8) - *((void *)v11 + 7));
      uint64_t v8 = v28;
    }
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__node_insert_multi((uint64_t **)a1, v8);
    uint64_t v8 = v27;
    uint64_t v28 = v27;
    if (v27)
    {
      long long v9 = *(char **)(v27 + 16);
      if (v9)
      {
        BOOL v17 = *(char **)v9;
        if (*(void *)v9 == v27)
        {
          *(void *)long long v9 = 0;
          while (1)
          {
            long long v20 = (char *)*((void *)v9 + 1);
            if (!v20) {
              break;
            }
            do
            {
              long long v9 = v20;
              long long v20 = *(char **)v20;
            }
            while (v20);
          }
        }
        else
        {
          for (*((void *)v9 + 1) = 0; v17; BOOL v17 = (char *)*((void *)v9 + 1))
          {
            do
            {
              long long v9 = v17;
              BOOL v17 = *(char **)v17;
            }
            while (v17);
          }
        }
      }
      uint64_t v27 = (uint64_t)v9;
      uint64_t v18 = (long long *)*((void *)v11 + 1);
      if (!v18)
      {
        do
        {
LABEL_37:
          long long v4 = (long long *)*((void *)v11 + 2);
          BOOL v19 = *(void *)v4 == (void)v11;
          std::string::size_type v11 = v4;
        }
        while (!v19);
        goto LABEL_39;
      }
    }
    else
    {
      long long v9 = 0;
      uint64_t v18 = (long long *)*((void *)v11 + 1);
      if (!v18) {
        goto LABEL_37;
      }
    }
    do
    {
      long long v4 = v18;
      uint64_t v18 = *(long long **)v18;
    }
    while (v18);
LABEL_39:
    if (!v8) {
      break;
    }
    std::string::size_type v11 = v4;
  }
  while (v4 != a3);
  uint64_t v21 = a1;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(a1, (char *)v8);
  if (!v9) {
    goto LABEL_52;
  }
LABEL_49:
  for (uint64_t i = (char *)*((void *)v9 + 2); i; uint64_t i = (char *)*((void *)i + 2))
    long long v9 = i;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v21, v9);
LABEL_52:
  if (v4 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_multi<std::pair<std::string const,std::vector<unsigned char>> const&>((uint64_t **)a1, v4 + 2);
      int64_t v23 = (long long *)*((void *)v4 + 1);
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          int64_t v23 = *(long long **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (long long *)*((void *)v4 + 2);
          BOOL v19 = *(void *)v24 == (void)v4;
          long long v4 = v24;
        }
        while (!v19);
      }
      long long v4 = v24;
    }
    while (v24 != a3);
  }
}

void sub_21DF117A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  long long v4 = a1[1];
  if (v4)
  {
    int v6 = *(char *)(a2 + 55);
    if (v6 >= 0) {
      uint64_t v7 = (const void *)(a2 + 32);
    }
    else {
      uint64_t v7 = *(const void **)(a2 + 32);
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 55);
    }
    else {
      size_t v8 = *(void *)(a2 + 40);
    }
    while (1)
    {
      uint64_t v5 = (uint64_t **)v4;
      BOOL v12 = (const void *)v4[4];
      uint64_t v10 = v4 + 4;
      std::string::size_type v11 = v12;
      int v13 = *((char *)v10 + 23);
      if (v13 >= 0) {
        long long v14 = v10;
      }
      else {
        long long v14 = v11;
      }
      if (v13 >= 0) {
        size_t v15 = *((unsigned __int8 *)v10 + 23);
      }
      else {
        size_t v15 = v10[1];
      }
      if (v15 >= v8) {
        size_t v16 = v8;
      }
      else {
        size_t v16 = v15;
      }
      int v17 = memcmp(v7, v14, v16);
      if (v17)
      {
        if (v17 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        long long v4 = v5[1];
        if (!v4)
        {
          long long v9 = v5 + 1;
          goto LABEL_25;
        }
      }
      else
      {
        if (v8 >= v15) {
          goto LABEL_22;
        }
LABEL_8:
        long long v4 = *v5;
        long long v9 = v5;
        if (!*v5) {
          goto LABEL_25;
        }
      }
    }
  }
  long long v9 = a1 + 1;
LABEL_25:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v5;
  *long long v9 = (uint64_t *)a2;
  uint64_t v18 = (uint64_t *)**a1;
  BOOL v19 = (uint64_t *)a2;
  if (v18)
  {
    *a1 = v18;
    BOOL v19 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return a2;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

char *std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_multi<std::pair<std::string const,std::vector<unsigned char>> const&>(uint64_t **a1, long long *a2)
{
  long long v4 = (char **)(a1 + 1);
  uint64_t v5 = (char *)operator new(0x50uLL);
  int v22 = v5;
  int v6 = std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)(v5 + 32), a2);
  uint64_t v7 = *v4;
  size_t v8 = v4;
  if (*v4)
  {
    int v9 = v5[55];
    if (v9 >= 0) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = (std::string *)*((void *)v5 + 4);
    }
    if (v9 >= 0) {
      size_t v11 = v5[55];
    }
    else {
      size_t v11 = *((void *)v5 + 5);
    }
    while (1)
    {
      long long v4 = (char **)v7;
      long long v14 = (const void *)*((void *)v7 + 4);
      BOOL v12 = v7 + 32;
      int v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        size_t v16 = v12;
      }
      else {
        size_t v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v11) {
        size_t v18 = v11;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v10, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        uint64_t v7 = v4[1];
        if (!v7)
        {
          size_t v8 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v11 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v7 = *v4;
        size_t v8 = v4;
        if (!*v4) {
          break;
        }
      }
    }
  }
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = v4;
  *size_t v8 = v5;
  long long v20 = (uint64_t *)**a1;
  if (v20)
  {
    *a1 = v20;
    uint64_t v5 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_21DF11A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 56);
      if (v3)
      {
        *(void *)(v2 + 64) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t createETLStructures(uint64_t *a1, void **a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2)
  {
    _BBUFSDebugPrint("createETLStructures", "bad arguments header = %p, ringBuffer = %p\n", (uint64_t)a3, a4, a5, a6, a7, a8, (char)a2);
    return 0;
  }
  size_t v11 = malloc(0x4000uLL);
  *a2 = v11;
  if (!v11)
  {
    _BBUFSDebugPrint("createETLStructures", "failed allocating memory for header\n", v12, v13, v14, v15, v16, v17, v36);
    uint64_t v34 = *a2;
    if (!*a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (a3) {
    *a3 = 0x4000;
  }
  size_t v18 = malloc(0x1000uLL);
  if (!v18)
  {
    _BBUFSDebugPrint("createETLStructures", "failed allocating memory for scratch buffer\n", v19, v20, v21, v22, v23, v24, v36);
    uint64_t v34 = *a2;
    if (!*a2) {
      goto LABEL_20;
    }
LABEL_19:
    free(v34);
    *a2 = 0;
    goto LABEL_20;
  }
  size_t v25 = v18;
  long long v26 = malloc(0x18uLL);
  *a1 = (uint64_t)v26;
  if (v26)
  {
    if (TelephonyUtilRingBufferInitialize()) {
      return 1;
    }
    uint64_t v35 = "failed initializing ring buffer\n";
  }
  else
  {
    uint64_t v35 = "failed allocating TelephonyUtilRingBuffer\n";
  }
  _BBUFSDebugPrint("createETLStructures", v35, v27, v28, v29, v30, v31, v32, v36);
  free(v25);
  uint64_t v34 = *a2;
  if (*a2) {
    goto LABEL_19;
  }
LABEL_20:
  uint64_t result = *a1;
  if (*a1)
  {
    free((void *)result);
    uint64_t result = 0;
    *a1 = 0;
  }
  return result;
}

void *BBUInitializer::create(BBUInitializer *this, BBUFeedback *a2)
{
  switch(capabilities::updater::getInitializerVersion(this))
  {
    case 0u:
    case 3u:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Initialization/Common/BBUInitializer.cpp", 0x38u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type!\")", v16, v17, v18, v19);
    case 1u:
      long long v4 = operator new(0x1E0uLL);
      *long long v4 = &unk_26CECBF08;
      v4[1] = this;
      v4[2] = 0;
      *((unsigned char *)v4 + 24) = 0;
      *((unsigned char *)v4 + 28) = 0;
      *((unsigned char *)v4 + 32) = 0;
      *((_DWORD *)v4 + 9) = 0;
      *((unsigned char *)v4 + 40) = 1;
      v4[6] = 0;
      uint64_t v5 = (capabilities::updater *)capabilities::updater::pingAttemptCount((capabilities::updater *)v4);
      *((_DWORD *)v4 + 114) = v5;
      int v6 = (capabilities::updater *)capabilities::updater::resetDelay(v5);
      *((_DWORD *)v4 + 115) = v6;
      uint64_t v7 = (capabilities::updater *)capabilities::updater::NVRestoreTimeout(v6);
      *((_DWORD *)v4 + 116) = v7;
      size_t v8 = (capabilities::updater *)capabilities::updater::personalizationCommandTimeout(v7);
      *((_DWORD *)v4 + 117) = v8;
      *((_DWORD *)v4 + 118) = capabilities::updater::pingTimeout(v8);
      *long long v4 = &unk_26CECF140;
      uint64_t result = v4;
      break;
    case 2u:
      uint64_t v10 = operator new(0x1E0uLL);
      void *v10 = &unk_26CECBF08;
      v10[1] = this;
      v10[2] = 0;
      *((unsigned char *)v10 + 24) = 0;
      *((unsigned char *)v10 + 28) = 0;
      *((unsigned char *)v10 + 32) = 0;
      *((_DWORD *)v10 + 9) = 0;
      *((unsigned char *)v10 + 40) = 1;
      v10[6] = 0;
      size_t v11 = (capabilities::updater *)capabilities::updater::pingAttemptCount((capabilities::updater *)v10);
      *((_DWORD *)v10 + 114) = v11;
      uint64_t v12 = (capabilities::updater *)capabilities::updater::resetDelay(v11);
      *((_DWORD *)v10 + 115) = v12;
      uint64_t v13 = (capabilities::updater *)capabilities::updater::NVRestoreTimeout(v12);
      *((_DWORD *)v10 + 116) = v13;
      uint64_t v14 = (capabilities::updater *)capabilities::updater::personalizationCommandTimeout(v13);
      *((_DWORD *)v10 + 117) = v14;
      *((_DWORD *)v10 + 118) = capabilities::updater::pingTimeout(v14);
      void *v10 = &unk_26CECFCC0;
      uint64_t result = v10;
      break;
    default:
      uint64_t result = (void *)v2;
      break;
  }
  return result;
}

void sub_21DF11DEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF11E00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF11E14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUInitializer::pingBlocking(BBUFeedback **a1, uint64_t a2)
{
  int v4 = (*((uint64_t (**)(BBUFeedback **))*a1 + 14))(a1);
  if (!v4) {
    return 2863311530;
  }
  uint64_t v5 = 0;
  int v6 = v4 - 1;
  while (1)
  {
    uint64_t v7 = (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t))*a1 + 27))(a1, a2, v5);
    if (!v7) {
      break;
    }
    BBUFeedback::handleComment(a1[1], "Ping failed, %u tries left", v6);
    uint64_t v5 = (v5 + 1);
    if (--v6 == -1) {
      return v7;
    }
  }
  BBUFeedback::handleComment(a1[1], "Ping success");
  return v7;
}

uint64_t BBUInitializer::powercycle()
{
  uint64_t result = TelephonyBasebandPowercycleModem();
  if (result)
  {
    return TelephonyBasebandPowerOnModem();
  }
  return result;
}

uint64_t BBUInitializer::getPingAttempts(BBUInitializer *this)
{
  if (*((unsigned char *)this + 28)) {
    return *((unsigned int *)this + 6);
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)this + 272))();
  }
}

uint64_t BBUInitializer::setPingAttempts(BBUInitializer *this, int a2)
{
  if ((*(unsigned int (**)(BBUInitializer *))(*(void *)this + 272))(this) != a2)
  {
    int v4 = (BBUFeedback *)*((void *)this + 1);
    int v5 = (*(uint64_t (**)(BBUInitializer *))(*(void *)this + 272))(this);
    BBUFeedback::handleComment(v4, "Ping attempts set to %u from %u", a2, v5);
  }
  *((_DWORD *)this + 6) = a2;
  *((unsigned char *)this + 28) = 1;
  return 0;
}

uint64_t BBUInitializer::getBootMode(BBUInitializer *this)
{
  return *((unsigned int *)this + 9);
}

void BBUInitializer::setBootMode(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 36) = a2;
  uint64_t v2 = *(BBUFeedback **)(a1 + 8);
  if (a2 > 2) {
    uint64_t v3 = "Unknown";
  }
  else {
    uint64_t v3 = off_264489F50[a2];
  }
  BBUFeedback::handleComment(v2, "Requested boot mode:  %s", v3);
}

uint64_t BBUInitializer::getIgnoreManifestStatus(BBUInitializer *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t BBUInitializer::setIgnoreManifestStatus(uint64_t this, char a2)
{
  *(unsigned char *)(this + 32) = a2;
  return this;
}

uint64_t BBUInitializer::getResetDelayMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 115);
}

void BBUInitializer::setResetDelayMilliseconds(BBUInitializer *this, int a2)
{
  if ((*(unsigned int (**)(BBUInitializer *))(*(void *)this + 168))(this) != a2)
  {
    int v4 = (BBUFeedback *)*((void *)this + 1);
    int v5 = (*(uint64_t (**)(BBUInitializer *))(*(void *)this + 168))(this);
    BBUFeedback::handleComment(v4, "Setting reset delay to %u from %u", a2, v5);
    *((_DWORD *)this + 115) = a2;
  }
}

uint64_t BBUInitializer::getNVRestoreTimeoutMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 116);
}

uint64_t BBUInitializer::getPersonalizationCommandTimeoutMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 117);
}

uint64_t BBUInitializer::getPingTimeoutMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 118);
}

uint64_t BBUInitializer::getDefaultPingAttempts(BBUInitializer *this)
{
  return *((unsigned int *)this + 114);
}

void BBUpdaterFusingProgram::BBUpdaterFusingProgram(BBUpdaterFusingProgram *this, BBUDataSource *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 7) = -1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0) {
      goto LABEL_5;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(19, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Loading fusing program\n", a6, a7, a8, v73);
  }
LABEL_5:
  if (a2)
  {
    unsigned int v10 = (*(uint64_t (**)(BBUDataSource *))(*(void *)a2 + 24))(a2);
    if (v10 >= 0x4000) {
      size_t v11 = 0x4000;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t v12 = (UInt8 *)operator new[](v11);
    int v82 = -1431655766;
    if ((*(unsigned int (**)(BBUDataSource *, UInt8 *, size_t, int *, void))(*(void *)a2 + 16))(a2, v12, v11, &v82, 0))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x2Cu, (ctu::LogMessageBuffer *)"Assertion failure(ret == kBBUReturnSuccess)", v58, v59, v60, v73);
    }
    else if (v82 == v11)
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDataRef v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v12, v11);
      if (v14)
      {
        CFDataRef v15 = v14;
        CFPropertyListFormat format = kCFPropertyListXMLFormat_v1_0;
        CFDictionaryRef v16 = (const __CFDictionary *)CFPropertyListCreateWithData(v13, v14, 2uLL, &format, 0);
        Value = CFDictionaryGetValue(v16, @"Instructions");
        if (Value)
        {
          uint64_t v18 = Value;
          CFRetain(Value);
          CFTypeID v19 = CFGetTypeID(v18);
          if (v19 == CFArrayGetTypeID())
          {
            *((void *)this + 2) = v18;
            CFRelease(v16);
            CFRelease(v15);
            operator delete[](v12);
            BBUpdaterFusingProgram::createFuseDictionary(this);
            CFArrayRef v20 = (const __CFArray *)*((void *)this + 2);
            if (v20) {
              LODWORD(v20) = CFArrayGetCount(v20);
            }
            CFIndex v21 = 0;
            *((_DWORD *)this + 7) = v20;
            while (1)
            {
              CFArrayRef v22 = (const __CFArray *)*((void *)this + 2);
              if (v22) {
                LODWORD(v22) = CFArrayGetCount(v22);
              }
              if (v21 >= v22) {
                return;
              }
              v79[0] = 0;
              v79[1] = 0;
              uint64_t v80 = 0;
              memset(v78, 170, sizeof(v78));
              if ((BBUpdaterFusingProgram::getFuseItem((CFArrayRef *)this, v21, (const __CFString **)&v78[3], (const void **)&v78[1], v78) & 1) == 0)
              {
                dispatch_time_t v41 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v41, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x4Fu, (ctu::LogMessageBuffer *)"Assertion failure(success)", v42, v43, v44, v73);
              }
              int v77 = 0;
              int v23 = BBUpdaterFusingProgram::mapFuseNameToID((CFDictionaryRef *)this, *(const __CFString **)&v78[3], (ctu::cf *)&v77);
              if (v77 == 65534) {
                int v24 = v23;
              }
              else {
                int v24 = 0;
              }
              if (v24 == 1) {
                *((_DWORD *)this + 7) = v21;
              }
              if ((ctu::cf::assign() & 1) == 0)
              {
                uint64_t v37 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v37, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x5Du, (ctu::LogMessageBuffer *)"Assertion failure(success)", v38, v39, v40, v73);
              }
              size_t v25 = *(const void **)&v78[1];
              CFTypeID v26 = CFGetTypeID(*(CFTypeRef *)&v78[1]);
              if (v26 == CFStringGetTypeID()) {
                break;
              }
              CFTypeID v31 = CFGetTypeID(v25);
              if (v31 != CFNumberGetTypeID()) {
                goto LABEL_17;
              }
              CFNumberType Type = CFNumberGetType((CFNumberRef)v25);
              __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
              if (Type == kCFNumberSInt32Type)
              {
                int valuePtr = -1431655766;
                if (!CFNumberGetValue((CFNumberRef)v25, kCFNumberIntType, &valuePtr))
                {
                  xpc_object_t v53 = __cxa_allocate_exception(0x210uLL);
                  _BBUException::_BBUException((uint64_t)v53, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x73u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v54, v55, v56, v73);
                }
                __p[0] = (void *)valuePtr;
              }
              else if (!CFNumberGetValue((CFNumberRef)v25, kCFNumberSInt64Type, __p))
              {
                v49 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v49, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x7Au, (ctu::LogMessageBuffer *)"Assertion failure(success)", v50, v51, v52, v73);
              }
              if (gBBULogMaskGet(void)::once == -1)
              {
                if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
                  goto LABEL_17;
                }
              }
              else
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
                  goto LABEL_17;
                }
              }
              if ((gBBULogVerbosity & 0x80000000) == 0)
              {
                char v36 = v79;
                if (v80 < 0) {
                  LOBYTE(v36) = v79[0];
                }
                _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Fuse %s:0x%016llx(%llu) 0x%08x\n", v33, v34, v35, (char)v36);
              }
LABEL_17:
              if (SHIBYTE(v80) < 0) {
                operator delete(v79[0]);
              }
              CFIndex v21 = (v21 + 1);
            }
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v76 = 0;
            if ((ctu::cf::assign() & 1) == 0)
            {
              std::string::size_type v45 = __cxa_allocate_exception(0x210uLL);
              _BBUException::_BBUException((uint64_t)v45, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x64u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v46, v47, v48, v73);
            }
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0) {
                goto LABEL_34;
              }
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
              {
LABEL_34:
                if ((gBBULogVerbosity & 0x80000000) == 0)
                {
                  uint64_t v30 = v79;
                  if (v80 < 0) {
                    LOBYTE(v30) = v79[0];
                  }
                  _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Fuse %s: %s 0x%08x\n", v27, v28, v29, (char)v30);
                }
              }
            }
            if (SHIBYTE(v76) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_17;
          }
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x3Au, (ctu::LogMessageBuffer *)"Assertion failure(CFGetTypeID( v) == CFArrayGetTypeID())", v70, v71, v72, v73);
        }
        else
        {
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x37u, (ctu::LogMessageBuffer *)"Assertion failure(v)", v67, v68, v69, v73);
        }
      }
      else
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x30u, (ctu::LogMessageBuffer *)"Assertion failure(data)", v64, v65, v66, v73);
      }
    }
    else
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x2Du, (ctu::LogMessageBuffer *)"Assertion failure(copied == length)", v61, v62, v63, v73);
    }
  }
}

void sub_21DF128D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF128E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF128F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1290C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF12920(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF12934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BBUpdaterFusingProgram::createFuseDictionary(BBUpdaterFusingProgram *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  FusingProgramCFNumberType Type = capabilities::updater::getFusingProgramType(this);
  switch(FusingProgramType)
  {
    case 0:
      uint64_t v3 = &_MergedGlobals;
LABEL_7:
      *((unsigned char *)this + 24) = 1;
      unsigned int v4 = 58;
      goto LABEL_8;
    case 1:
      uint64_t v3 = &unk_26AA89F50;
      goto LABEL_7;
    case 2:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x215u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type.\")", v25, v26, v27, v28[0]);
  }
  uint64_t v3 = (void *)0xAAAAAAAAAAAAAAAALL;
  unsigned int v4 = -1431655766;
LABEL_8:
  CFIndex v5 = v4;
  uint64_t v6 = 8 * v4;
  MEMORY[0x270FA5388](FusingProgramType);
  uint64_t v7 = &v28[-((v6 + 15) & 0xFFFFFFFF0)];
  size_t v8 = ((v6 + 0x7FFFFFFF8) & 0x5555555C8) + 8;
  int v9 = memset(v7, 170, v8);
  MEMORY[0x270FA5388](v9);
  unsigned int v10 = (CFTypeRef *)v7;
  memset(v7, 170, v8);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0) {
      goto LABEL_12;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(19, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Number of entries in dictionary: %d\n", v11, v12, v13, v5);
  }
LABEL_12:
  uint64_t v14 = 0;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v16 = 8 * v5;
  uint64_t v17 = v3;
  do
  {
    *(void *)&v7[v14] = v17[1];
    *(void *)&v7[v14] = CFNumberCreate(v15, kCFNumberIntType, v17);
    v14 += 8;
    v17 += 2;
  }
  while (v16 != v14);
  uint64_t v18 = 0;
  *(void *)this = CFDictionaryCreate(v15, (const void **)v7, (const void **)v7, v5, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  do
  {
    CFRelease(*(CFTypeRef *)&v7[v18]);
    v18 += 8;
  }
  while (v16 != v18);
  uint64_t v19 = 0;
  CFArrayRef v20 = (char *)v3 + 4;
  do
  {
    *(void *)&v7[v19] = *(void *)(v20 + 4);
    *(void *)&v7[v19] = CFNumberCreate(v15, kCFNumberIntType, v20);
    v19 += 8;
    v20 += 16;
  }
  while (v16 != v19);
  *((void *)this + 1) = CFDictionaryCreate(v15, (const void **)v7, (const void **)v7, v5, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  do
  {
    CFRelease(*v10++);
    --v5;
  }
  while (v5);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Created Fuse Dictionaries\n", v21, v22, v23, v28[0]);
  }
}

void sub_21DF12D64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterFusingProgram::getFuseItem(CFArrayRef *this, CFIndex idx, const __CFString **a3, const void **a4, unsigned int *a5)
{
  uint64_t result = (uint64_t)CFArrayGetValueAtIndex(this[2], idx);
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  if (!result) {
    return result;
  }
  CFArrayRef v9 = (const __CFArray *)result;
  CFTypeID v10 = CFGetTypeID((CFTypeRef)result);
  if (v10 != CFArrayGetTypeID())
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t result = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return result;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t result = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return result;
      }
    }
    if (gBBULogVerbosity < 0) {
      return result;
    }
    CFAllocatorRef v15 = "Item is not an array\n";
    goto LABEL_36;
  }
  unint64_t Count = CFArrayGetCount(v9);
  if (Count > 1)
  {
    unint64_t v16 = Count;
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, 0);
    CFTypeID v18 = CFGetTypeID(ValueAtIndex);
    if (v18 != CFStringGetTypeID())
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        uint64_t result = 0;
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          return result;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t result = 0;
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          return result;
        }
      }
      if (gBBULogVerbosity < 0) {
        return result;
      }
      CFAllocatorRef v15 = "key needs to be of type CFString\n";
      goto LABEL_36;
    }
    uint64_t v19 = CFArrayGetValueAtIndex(v9, 1);
    CFTypeID v20 = CFGetTypeID(v19);
    if (v20 != CFStringGetTypeID())
    {
      CFTypeID v21 = CFGetTypeID(v19);
      if (v21 != CFNumberGetTypeID())
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t result = 0;
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            return result;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t result = 0;
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            return result;
          }
        }
        if (gBBULogVerbosity < 0) {
          return result;
        }
        CFAllocatorRef v15 = "Value needs to be of type CFString or CFNumber\n";
        goto LABEL_36;
      }
    }
    unsigned int v22 = 0;
    unsigned int v27 = 0;
    if (v16 >= 3)
    {
      uint64_t v23 = (void *)CFArrayGetValueAtIndex(v9, 2);
      CFTypeID v24 = CFGetTypeID(v23);
      if (v24 != CFNumberGetTypeID())
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t result = 0;
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            return result;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t result = 0;
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            return result;
          }
        }
        if (gBBULogVerbosity < 0) {
          return result;
        }
        CFAllocatorRef v15 = "Flags needs to be of type CFNumber\n";
        goto LABEL_36;
      }
      if (!ctu::cf::assign((ctu::cf *)&v27, (int *)v23, v25))
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t result = 0;
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            return result;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t result = 0;
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            return result;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          CFAllocatorRef v15 = "Cannot retrieve the flags value\n";
LABEL_36:
          _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, v15, v11, v12, v13, v26);
          return 0;
        }
        return result;
      }
      unsigned int v22 = v27;
    }
    *a3 = ValueAtIndex;
    *a4 = v19;
    uint64_t result = 1;
    *a5 = v22;
    return result;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 0;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return result;
    }
    goto LABEL_6;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  uint64_t result = 0;
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
  {
LABEL_6:
    if (gBBULogVerbosity < 0) {
      return result;
    }
    CFAllocatorRef v15 = "Expected at least 2 parameters, key value [flags]\n";
    goto LABEL_36;
  }
  return result;
}

uint64_t BBUpdaterFusingProgram::mapFuseNameToID(CFDictionaryRef *this, const __CFString *a2, ctu::cf *a3)
{
  Value = (int *)CFDictionaryGetValue(*this, a2);
  if (!Value)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      {
LABEL_10:
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Got unexpected key\n", v6, v7, v8, v13);
        }
      }
    }
    uint64_t result = 0;
    *(_DWORD *)a3 = -1;
    return result;
  }
  uint64_t result = ctu::cf::assign(a3, Value, v5);
  if (!result) {
    return result;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 1;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 1;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "FuseID %d\n", v10, v11, v12, *(_DWORD *)a3);
    return 1;
  }
  return result;
}

uint64_t BBUpdaterFusingProgram::copyStringFuseItem(BBUpdaterFusingProgram *this, CFStringRef theString, unsigned __int8 *a3, int a4, unsigned int *a5)
{
  if (CFStringGetLength(theString) > (2 * a4)) {
    return 0;
  }
  uint64_t v6 = ctu::cf::assign();
  if (v6)
  {
    unsigned int v7 = TelephonyUtilHexToBin();
    unsigned int v8 = *a5;
    if (v7 < *a5) {
      unsigned int v8 = v7;
    }
    *a5 = v8;
  }
  return v6;
}

void sub_21DF133E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUpdaterFusingProgram::copyFuseItem(CFArrayRef *this, CFIndex a2, ctu::cf *a3, unsigned int *a4, const __CFString **a5, unsigned __int8 *a6, unsigned int a7, ctu::cf *a8)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)a8 = 0;
  *a5 = 0;
  int FuseItem = BBUpdaterFusingProgram::getFuseItem(this, a2, a5, &cf, a4);
  uint64_t result = 0;
  if (FuseItem)
  {
    uint64_t result = BBUpdaterFusingProgram::mapFuseNameToID(this, *a5, a3);
    if (result)
    {
      uint64_t result = BBUpdaterFusingProgram::mapFuseNameToLength(this, *a5, a8);
      if (result)
      {
        CFStringRef v16 = (const __CFString *)cf;
        CFTypeID v17 = CFGetTypeID(cf);
        TypeID = (BBUpdaterFusingProgram *)CFStringGetTypeID();
        if ((BBUpdaterFusingProgram *)v17 == TypeID)
        {
          return BBUpdaterFusingProgram::copyStringFuseItem(TypeID, v16, a6, a7, (unsigned int *)a8);
        }
        else
        {
          CFTypeID v19 = CFGetTypeID(v16);
          if (v19 != CFNumberGetTypeID()) {
            return 0;
          }
          CFNumberType Type = CFNumberGetType((CFNumberRef)v16);
          if (*(_DWORD *)a8 > a7) {
            return 0;
          }
          int32x2_t __src = (int32x2_t)0xAAAAAAAAAAAAAAAALL;
          if (Type == kCFNumberSInt32Type)
          {
            int valuePtr = -1431655766;
            uint64_t result = CFNumberGetValue((CFNumberRef)v16, kCFNumberSInt32Type, &valuePtr);
            int32x2_t __src = (int32x2_t)valuePtr;
            if (!result) {
              return result;
            }
          }
          else
          {
            uint64_t result = CFNumberGetValue((CFNumberRef)v16, kCFNumberSInt64Type, &__src);
            if (!result) {
              return result;
            }
          }
          size_t v21 = *(unsigned int *)a8;
          if (*((unsigned char *)this + 24) || v21 < 5) {
            memcpy(a6, &__src, v21);
          }
          else {
            *(int32x2_t *)a6 = vrev64_s32(__src);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t BBUpdaterFusingProgram::mapFuseNameToLength(CFDictionaryRef *this, const __CFString *a2, ctu::cf *a3)
{
  Value = (unsigned int *)CFDictionaryGetValue(this[1], a2);
  if (!Value)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      {
LABEL_10:
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Got unexpected key\n", v6, v7, v8, v13);
        }
      }
    }
    uint64_t result = 0;
    *(_DWORD *)a3 = 0;
    return result;
  }
  uint64_t result = ctu::cf::assign(a3, Value, v5);
  if (!result) {
    return result;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 1;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 1;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_9, "Fuse length %d\n", v10, v11, v12, *(_DWORD *)a3);
    return 1;
  }
  return result;
}

uint64_t BBUEURFusing::getSetModeTimeout(BBUEURFusing *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t BBUEURFusing::getCommandTimeout(BBUEURFusing *this)
{
  return *((unsigned int *)this + 22);
}

const char *BBUEURFusing::getDebugName(BBUEURFusing *this)
{
  return "BBUEURFusing";
}

uint64_t eUICC::logEUICCData(int *a1)
{
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  int v2 = *a1;
  ctu::hex((ctu *)((char *)a1 + 7), (const void *)0x10);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "status 0x%x sw1_sw2 0x%x eid 0x%s op_mode 0x%hhx\n", v3, v4, v5, v2);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  uint64_t v6 = v30;
  ctu::hex((ctu *)(a1 + 6), (const void *)0x20);
  if (v31 < 0) {
    LOBYTE(v6) = v30[0];
  }
  ctu::hex((ctu *)(a1 + 14), (const void *)8);
  ctu::hex((ctu *)(a1 + 16), (const void *)8);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "current_fw_version %s main_fw_nonce 0x%s gold_fw_nonce 0x%s\n", v7, v8, v9, (char)v6);
  if (v27 < 0)
  {
    operator delete(__p);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_28:
      operator delete(v30[0]);
      if (gBBULogMaskGet(void)::once == -1) {
        goto LABEL_13;
      }
      goto LABEL_29;
    }
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v28);
  if (v31 < 0) {
    goto LABEL_28;
  }
LABEL_12:
  if (gBBULogMaskGet(void)::once == -1) {
    goto LABEL_13;
  }
LABEL_29:
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_13:
  ctu::hex((ctu *)(a1 + 18), (const void *)0x10);
  int v10 = v31;
  char v11 = (char)v30[0];
  ctu::hex((ctu *)((char *)a1 + 147), (const void *)0x10);
  if (v10 >= 0) {
    CFAllocatorRef v15 = v30;
  }
  else {
    LOBYTE(v15) = v11;
  }
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "main_fw_pcf_mac 0x%s gold_fw_pcf_mac 0x%s pcf_version 0x%x\n", v12, v13, v14, (char)v15);
  if ((v29 & 0x80000000) == 0)
  {
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_31:
    operator delete(v30[0]);
    if (gBBULogMaskGet(void)::once == -1) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
  operator delete(v28);
  if (v31 < 0) {
    goto LABEL_31;
  }
LABEL_18:
  if (gBBULogMaskGet(void)::once == -1) {
    goto LABEL_19;
  }
LABEL_32:
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_19:
  ctu::hex((ctu *)(a1 + 60), (const void *)3);
  int v16 = v31;
  char v17 = (char)v30[0];
  ctu::hex((ctu *)((char *)a1 + 243), (const void *)0x20);
  if (v16 >= 0) {
    size_t v21 = v30;
  }
  else {
    LOBYTE(v21) = v17;
  }
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "loader_version 0x%s key_id 0x%s perso %d\n", v18, v19, v20, (char)v21);
  if ((v29 & 0x80000000) == 0)
  {
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_34:
    operator delete(v30[0]);
    if (gBBULogMaskGet(void)::once == -1) {
      return _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "chip_id 0x%x stream_apdu_max_apdus 0x%x isAbsentOk: %s\n", v22, v23, v24, *((unsigned char *)a1 + 275));
    }
LABEL_35:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    return _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "chip_id 0x%x stream_apdu_max_apdus 0x%x isAbsentOk: %s\n", v22, v23, v24, *((unsigned char *)a1 + 275));
  }
  operator delete(v28);
  if (v31 < 0) {
    goto LABEL_34;
  }
LABEL_24:
  if (gBBULogMaskGet(void)::once != -1) {
    goto LABEL_35;
  }
  return _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "chip_id 0x%x stream_apdu_max_apdus 0x%x isAbsentOk: %s\n", v22, v23, v24, *((unsigned char *)a1 + 275));
}

void sub_21DF13B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if (*(char *)(v25 - 49) < 0)
    {
LABEL_6:
      operator delete(*(void **)(v25 - 72));
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v25 - 49) < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *BBUEUR20Programmer::addProgressBarTimes(uint64_t *this, BBUFeedback *a2)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v4 = (uint64_t **)(this + 2);
  uint64_t v3 = (int *)this[2];
  uint64_t v5 = (uint64_t **)(this + 2);
  uint64_t v6 = this + 2;
  if (v3)
  {
    uint64_t v7 = (int *)this[2];
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v7;
        int v8 = v7[8];
        if (v8 < 2) {
          break;
        }
        uint64_t v7 = (int *)*v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v8 == 1) {
        break;
      }
      uint64_t v7 = (int *)v6[1];
      if (!v7)
      {
        uint64_t v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v9 = v6;
    uint64_t v6 = operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = 1;
    v6[5] = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *uint64_t v5 = v6;
    uint64_t v10 = **(void **)(v2 + 8);
    char v11 = v6;
    if (v10)
    {
      *(void *)(v2 + 8) = v10;
      char v11 = *v5;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v11);
    uint64_t v3 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v6[5] = 0x408F400000000000;
  uint64_t v12 = v4;
  uint64_t v13 = v4;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v13 = v3;
        int v14 = v3[8];
        if (v14 < 13) {
          break;
        }
        uint64_t v3 = (int *)*v13;
        uint64_t v12 = (uint64_t **)v13;
        if (!*v13) {
          goto LABEL_18;
        }
      }
      if (v14 == 12) {
        break;
      }
      uint64_t v3 = (int *)v13[1];
      if (!v3)
      {
        uint64_t v12 = (uint64_t **)(v13 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    CFAllocatorRef v15 = v13;
    uint64_t v13 = operator new(0x30uLL);
    *((_DWORD *)v13 + 8) = 12;
    v13[5] = 0;
    *uint64_t v13 = 0;
    v13[1] = 0;
    v13[2] = v15;
    *uint64_t v12 = v13;
    uint64_t v16 = **(void **)(v2 + 8);
    char v17 = v13;
    if (v16)
    {
      *(void *)(v2 + 8) = v16;
      char v17 = *v12;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v17);
    ++*(void *)(v2 + 24);
  }
  v13[5] = 0x4103880000000000;
  uint64_t v18 = (int *)*v4;
  uint64_t v19 = v4;
  uint64_t v20 = v4;
  if (*v4)
  {
    size_t v21 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v20 = v21;
        int v22 = v21[8];
        if (v22 < 10) {
          break;
        }
        size_t v21 = (int *)*v20;
        uint64_t v19 = (uint64_t **)v20;
        if (!*v20) {
          goto LABEL_28;
        }
      }
      if (v22 == 9) {
        break;
      }
      size_t v21 = (int *)v20[1];
      if (!v21)
      {
        uint64_t v19 = (uint64_t **)(v20 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    uint64_t v23 = v20;
    uint64_t v20 = operator new(0x30uLL);
    *((_DWORD *)v20 + 8) = 9;
    v20[5] = 0;
    void *v20 = 0;
    v20[1] = 0;
    v20[2] = v23;
    const void *v19 = v20;
    uint64_t v24 = **(void **)(v2 + 8);
    uint64_t v25 = v20;
    if (v24)
    {
      *(void *)(v2 + 8) = v24;
      uint64_t v25 = *v19;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v25);
    uint64_t v18 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v20[5] = 0x40B3880000000000;
  char v26 = v4;
  char v27 = v4;
  if (v18)
  {
    while (1)
    {
      while (1)
      {
        char v27 = v18;
        int v28 = v18[8];
        if (v28 < 14) {
          break;
        }
        uint64_t v18 = (int *)*v27;
        char v26 = (uint64_t **)v27;
        if (!*v27) {
          goto LABEL_38;
        }
      }
      if (v28 == 13) {
        break;
      }
      uint64_t v18 = (int *)v27[1];
      if (!v18)
      {
        char v26 = (uint64_t **)(v27 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    char v29 = v27;
    char v27 = operator new(0x30uLL);
    *((_DWORD *)v27 + 8) = 13;
    v27[5] = 0;
    void *v27 = 0;
    v27[1] = 0;
    v27[2] = v29;
    void *v26 = v27;
    uint64_t v30 = **(void **)(v2 + 8);
    char v31 = v27;
    if (v30)
    {
      *(void *)(v2 + 8) = v30;
      char v31 = *v26;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v31);
    ++*(void *)(v2 + 24);
  }
  v27[5] = 0x409F400000000000;
  uint64_t v32 = (int *)*v4;
  uint64_t v33 = v4;
  uint64_t v34 = v4;
  if (*v4)
  {
    uint64_t v35 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v34 = v35;
        int v36 = v35[8];
        if (v36 < 29) {
          break;
        }
        uint64_t v35 = (int *)*v34;
        uint64_t v33 = (uint64_t **)v34;
        if (!*v34) {
          goto LABEL_48;
        }
      }
      if (v36 == 28) {
        break;
      }
      uint64_t v35 = (int *)v34[1];
      if (!v35)
      {
        uint64_t v33 = (uint64_t **)(v34 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    uint64_t v37 = v34;
    uint64_t v34 = operator new(0x30uLL);
    *((_DWORD *)v34 + 8) = 28;
    v34[5] = 0;
    *uint64_t v34 = 0;
    v34[1] = 0;
    v34[2] = v37;
    *uint64_t v33 = v34;
    uint64_t v38 = **(void **)(v2 + 8);
    uint64_t v39 = v34;
    if (v38)
    {
      *(void *)(v2 + 8) = v38;
      uint64_t v39 = *v33;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v39);
    uint64_t v32 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v34[5] = 0x40A7700000000000;
  uint64_t v40 = v4;
  dispatch_time_t v41 = v4;
  if (v32)
  {
    while (1)
    {
      while (1)
      {
        dispatch_time_t v41 = v32;
        int v42 = v32[8];
        if (v42 < 28) {
          break;
        }
        uint64_t v32 = (int *)*v41;
        uint64_t v40 = (uint64_t **)v41;
        if (!*v41) {
          goto LABEL_58;
        }
      }
      if (v42 == 27) {
        break;
      }
      uint64_t v32 = (int *)v41[1];
      if (!v32)
      {
        uint64_t v40 = (uint64_t **)(v41 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    uint64_t v43 = v41;
    dispatch_time_t v41 = operator new(0x30uLL);
    *((_DWORD *)v41 + 8) = 27;
    v41[5] = 0;
    *dispatch_time_t v41 = 0;
    v41[1] = 0;
    v41[2] = v43;
    *uint64_t v40 = v41;
    uint64_t v44 = **(void **)(v2 + 8);
    std::string::size_type v45 = v41;
    if (v44)
    {
      *(void *)(v2 + 8) = v44;
      std::string::size_type v45 = *v40;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v45);
    ++*(void *)(v2 + 24);
  }
  v41[5] = 0x4071D00000000000;
  uint64_t v46 = (int *)*v4;
  uint64_t v47 = v4;
  uint64_t v48 = v4;
  if (*v4)
  {
    v49 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v48 = v49;
        int v50 = v49[8];
        if (v50 < 23) {
          break;
        }
        v49 = (int *)*v48;
        uint64_t v47 = (uint64_t **)v48;
        if (!*v48) {
          goto LABEL_68;
        }
      }
      if (v50 == 22) {
        break;
      }
      v49 = (int *)v48[1];
      if (!v49)
      {
        uint64_t v47 = (uint64_t **)(v48 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    uint64_t v51 = v48;
    uint64_t v48 = operator new(0x30uLL);
    *((_DWORD *)v48 + 8) = 22;
    v48[5] = 0;
    *uint64_t v48 = 0;
    v48[1] = 0;
    v48[2] = v51;
    *uint64_t v47 = v48;
    uint64_t v52 = **(void **)(v2 + 8);
    xpc_object_t v53 = v48;
    if (v52)
    {
      *(void *)(v2 + 8) = v52;
      xpc_object_t v53 = *v47;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v53);
    uint64_t v46 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v48[5] = 0x4072200000000000;
  uint64_t v54 = v4;
  uint64_t v55 = v4;
  if (v46)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v55 = v46;
        int v56 = v46[8];
        if (v56 < 11) {
          break;
        }
        uint64_t v46 = (int *)*v55;
        uint64_t v54 = (uint64_t **)v55;
        if (!*v55) {
          goto LABEL_78;
        }
      }
      if (v56 == 10) {
        break;
      }
      uint64_t v46 = (int *)v55[1];
      if (!v46)
      {
        uint64_t v54 = (uint64_t **)(v55 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    uint64_t v57 = v55;
    uint64_t v55 = operator new(0x30uLL);
    *((_DWORD *)v55 + 8) = 10;
    v55[5] = 0;
    *uint64_t v55 = 0;
    v55[1] = 0;
    v55[2] = v57;
    *uint64_t v54 = v55;
    uint64_t v58 = **(void **)(v2 + 8);
    uint64_t v59 = v55;
    if (v58)
    {
      *(void *)(v2 + 8) = v58;
      uint64_t v59 = *v54;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v59);
    ++*(void *)(v2 + 24);
  }
  v55[5] = 0x406F400000000000;
  uint64_t v60 = (int *)*v4;
  uint64_t v61 = v4;
  uint64_t v62 = v4;
  if (*v4)
  {
    uint64_t v63 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v62 = v63;
        int v64 = v63[8];
        if (v64 < 27) {
          break;
        }
        uint64_t v63 = (int *)*v62;
        uint64_t v61 = (uint64_t **)v62;
        if (!*v62) {
          goto LABEL_88;
        }
      }
      if (v64 == 26) {
        break;
      }
      uint64_t v63 = (int *)v62[1];
      if (!v63)
      {
        uint64_t v61 = (uint64_t **)(v62 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    uint64_t v65 = v62;
    uint64_t v62 = operator new(0x30uLL);
    *((_DWORD *)v62 + 8) = 26;
    v62[5] = 0;
    *uint64_t v62 = 0;
    v62[1] = 0;
    v62[2] = v65;
    *uint64_t v61 = v62;
    uint64_t v66 = **(void **)(v2 + 8);
    uint64_t v67 = v62;
    if (v66)
    {
      *(void *)(v2 + 8) = v66;
      uint64_t v67 = *v61;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v67);
    uint64_t v60 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v62[5] = 0x4062C00000000000;
  uint64_t v68 = v4;
  uint64_t v69 = v4;
  if (v60)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v69 = v60;
        int v70 = v60[8];
        if (v70 < 25) {
          break;
        }
        uint64_t v60 = (int *)*v69;
        uint64_t v68 = (uint64_t **)v69;
        if (!*v69) {
          goto LABEL_98;
        }
      }
      if (v70 == 24) {
        break;
      }
      uint64_t v60 = (int *)v69[1];
      if (!v60)
      {
        uint64_t v68 = (uint64_t **)(v69 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    uint64_t v71 = v69;
    uint64_t v69 = operator new(0x30uLL);
    *((_DWORD *)v69 + 8) = 24;
    v69[5] = 0;
    *uint64_t v69 = 0;
    v69[1] = 0;
    v69[2] = v71;
    *uint64_t v68 = v69;
    uint64_t v72 = **(void **)(v2 + 8);
    char v73 = v69;
    if (v72)
    {
      *(void *)(v2 + 8) = v72;
      char v73 = *v68;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v73);
    ++*(void *)(v2 + 24);
  }
  v69[5] = 0x4051800000000000;
  uint64_t v74 = (int *)*v4;
  char v75 = v4;
  uint64_t v76 = v4;
  if (*v4)
  {
    int v77 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v76 = v77;
        int v78 = v77[8];
        if (v78 < 30) {
          break;
        }
        int v77 = (int *)*v76;
        char v75 = (uint64_t **)v76;
        if (!*v76) {
          goto LABEL_108;
        }
      }
      if (v78 == 29) {
        break;
      }
      int v77 = (int *)v76[1];
      if (!v77)
      {
        char v75 = (uint64_t **)(v76 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    uint64_t v79 = v76;
    uint64_t v76 = operator new(0x30uLL);
    *((_DWORD *)v76 + 8) = 29;
    v76[5] = 0;
    void *v76 = 0;
    v76[1] = 0;
    v76[2] = v79;
    *char v75 = v76;
    uint64_t v80 = **(void **)(v2 + 8);
    uint64_t v81 = v76;
    if (v80)
    {
      *(void *)(v2 + 8) = v80;
      uint64_t v81 = *v75;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v81);
    uint64_t v74 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v76[5] = 0x4039000000000000;
  int v82 = v4;
  uint64_t v83 = v4;
  if (v74)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v83 = v74;
        int v84 = v74[8];
        if (v84 < 31) {
          break;
        }
        uint64_t v74 = (int *)*v83;
        int v82 = (uint64_t **)v83;
        if (!*v83) {
          goto LABEL_118;
        }
      }
      if (v84 == 30) {
        break;
      }
      uint64_t v74 = (int *)v83[1];
      if (!v74)
      {
        int v82 = (uint64_t **)(v83 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    uint64_t v85 = v83;
    uint64_t v83 = operator new(0x30uLL);
    *((_DWORD *)v83 + 8) = 30;
    v83[5] = 0;
    *uint64_t v83 = 0;
    v83[1] = 0;
    v83[2] = v85;
    *int v82 = v83;
    uint64_t v86 = **(void **)(v2 + 8);
    uint64_t v87 = v83;
    if (v86)
    {
      *(void *)(v2 + 8) = v86;
      uint64_t v87 = *v82;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v87);
    ++*(void *)(v2 + 24);
  }
  v83[5] = 0x4039000000000000;
  uint64_t v88 = (int *)*v4;
  uint64_t v89 = v4;
  uint64_t v90 = v4;
  if (*v4)
  {
    v91 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v90 = v91;
        int v92 = v91[8];
        if (v92 < 24) {
          break;
        }
        v91 = (int *)*v90;
        uint64_t v89 = (uint64_t **)v90;
        if (!*v90) {
          goto LABEL_128;
        }
      }
      if (v92 == 23) {
        break;
      }
      v91 = (int *)v90[1];
      if (!v91)
      {
        uint64_t v89 = (uint64_t **)(v90 + 1);
        goto LABEL_128;
      }
    }
  }
  else
  {
LABEL_128:
    uint64_t v93 = v90;
    uint64_t v90 = operator new(0x30uLL);
    *((_DWORD *)v90 + 8) = 23;
    v90[5] = 0;
    *uint64_t v90 = 0;
    v90[1] = 0;
    v90[2] = v93;
    *uint64_t v89 = v90;
    uint64_t v94 = **(void **)(v2 + 8);
    uint64_t v95 = v90;
    if (v94)
    {
      *(void *)(v2 + 8) = v94;
      uint64_t v95 = *v89;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v95);
    uint64_t v88 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v90[5] = 0x4039000000000000;
  uint64_t v96 = v4;
  uint64_t v97 = v4;
  if (v88)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v97 = v88;
        int v98 = v88[8];
        if (v98 < 26) {
          break;
        }
        uint64_t v88 = (int *)*v97;
        uint64_t v96 = (uint64_t **)v97;
        if (!*v97) {
          goto LABEL_138;
        }
      }
      if (v98 == 25) {
        break;
      }
      uint64_t v88 = (int *)v97[1];
      if (!v88)
      {
        uint64_t v96 = (uint64_t **)(v97 + 1);
        goto LABEL_138;
      }
    }
  }
  else
  {
LABEL_138:
    uint64_t v99 = v97;
    uint64_t v97 = operator new(0x30uLL);
    *((_DWORD *)v97 + 8) = 25;
    v97[5] = 0;
    *uint64_t v97 = 0;
    v97[1] = 0;
    v97[2] = v99;
    *uint64_t v96 = v97;
    uint64_t v100 = **(void **)(v2 + 8);
    char v101 = v97;
    if (v100)
    {
      *(void *)(v2 + 8) = v100;
      char v101 = *v96;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v101);
    ++*(void *)(v2 + 24);
  }
  v97[5] = 0x4039000000000000;
  size_t v102 = (int *)*v4;
  std::string::size_type v103 = v4;
  v104 = v4;
  if (*v4)
  {
    uint64_t v105 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v104 = v105;
        int v106 = v105[8];
        if (v106 < 32) {
          break;
        }
        uint64_t v105 = (int *)*v104;
        std::string::size_type v103 = (uint64_t **)v104;
        if (!*v104) {
          goto LABEL_148;
        }
      }
      if (v106 == 31) {
        break;
      }
      uint64_t v105 = (int *)v104[1];
      if (!v105)
      {
        std::string::size_type v103 = (uint64_t **)(v104 + 1);
        goto LABEL_148;
      }
    }
  }
  else
  {
LABEL_148:
    uint64_t v107 = v104;
    v104 = operator new(0x30uLL);
    *((_DWORD *)v104 + 8) = 31;
    v104[5] = 0;
    void *v104 = 0;
    v104[1] = 0;
    v104[2] = v107;
    void *v103 = v104;
    uint64_t v108 = **(void **)(v2 + 8);
    uint64_t v109 = v104;
    if (v108)
    {
      *(void *)(v2 + 8) = v108;
      uint64_t v109 = *v103;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v109);
    size_t v102 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v104[5] = 0x4039000000000000;
  uint64_t v110 = v4;
  uint64_t v111 = v4;
  if (v102)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v111 = v102;
        int v112 = v102[8];
        if (v112 < 33) {
          break;
        }
        size_t v102 = (int *)*v111;
        uint64_t v110 = (uint64_t **)v111;
        if (!*v111) {
          goto LABEL_158;
        }
      }
      if (v112 == 32) {
        break;
      }
      size_t v102 = (int *)v111[1];
      if (!v102)
      {
        uint64_t v110 = (uint64_t **)(v111 + 1);
        goto LABEL_158;
      }
    }
  }
  else
  {
LABEL_158:
    char v113 = v111;
    uint64_t v111 = operator new(0x30uLL);
    *((_DWORD *)v111 + 8) = 32;
    v111[5] = 0;
    *uint64_t v111 = 0;
    v111[1] = 0;
    v111[2] = v113;
    *uint64_t v110 = v111;
    uint64_t v114 = **(void **)(v2 + 8);
    size_t v115 = v111;
    if (v114)
    {
      *(void *)(v2 + 8) = v114;
      size_t v115 = *v110;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v115);
    ++*(void *)(v2 + 24);
  }
  v111[5] = 0x4039000000000000;
  std::string::size_type v116 = (int *)*v4;
  xpc_object_t v117 = v4;
  uint64_t v118 = v4;
  if (*v4)
  {
    uint64_t v119 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v118 = v119;
        int v120 = v119[8];
        if (v120 < 34) {
          break;
        }
        uint64_t v119 = (int *)*v118;
        xpc_object_t v117 = (uint64_t **)v118;
        if (!*v118) {
          goto LABEL_168;
        }
      }
      if (v120 == 33) {
        break;
      }
      uint64_t v119 = (int *)v118[1];
      if (!v119)
      {
        xpc_object_t v117 = (uint64_t **)(v118 + 1);
        goto LABEL_168;
      }
    }
  }
  else
  {
LABEL_168:
    uint64_t v121 = v118;
    uint64_t v118 = operator new(0x30uLL);
    *((_DWORD *)v118 + 8) = 33;
    v118[5] = 0;
    *uint64_t v118 = 0;
    v118[1] = 0;
    v118[2] = v121;
    *xpc_object_t v117 = v118;
    uint64_t v122 = **(void **)(v2 + 8);
    uint64_t v123 = v118;
    if (v122)
    {
      *(void *)(v2 + 8) = v122;
      uint64_t v123 = *v117;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v123);
    std::string::size_type v116 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v118[5] = 0x4039000000000000;
  uint64_t v124 = v4;
  uint64_t v125 = v4;
  if (v116)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v125 = v116;
        int v126 = v116[8];
        if (v126 < 16) {
          break;
        }
        std::string::size_type v116 = (int *)*v125;
        uint64_t v124 = (uint64_t **)v125;
        if (!*v125) {
          goto LABEL_178;
        }
      }
      if (v126 == 15) {
        break;
      }
      std::string::size_type v116 = (int *)v125[1];
      if (!v116)
      {
        uint64_t v124 = (uint64_t **)(v125 + 1);
        goto LABEL_178;
      }
    }
  }
  else
  {
LABEL_178:
    uint64_t v127 = v125;
    uint64_t v125 = operator new(0x30uLL);
    *((_DWORD *)v125 + 8) = 15;
    v125[5] = 0;
    void *v125 = 0;
    v125[1] = 0;
    v125[2] = v127;
    void *v124 = v125;
    uint64_t v128 = **(void **)(v2 + 8);
    uint64_t v129 = v125;
    if (v128)
    {
      *(void *)(v2 + 8) = v128;
      uint64_t v129 = *v124;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v129);
    ++*(void *)(v2 + 24);
  }
  v125[5] = 0x3FF0000000000000;
  uint64_t v130 = (int *)*v4;
  uint64_t v131 = v4;
  uint64_t v132 = v4;
  if (*v4)
  {
    uint64_t v133 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v132 = v133;
        int v134 = v133[8];
        if (v134 < 17) {
          break;
        }
        uint64_t v133 = (int *)*v132;
        uint64_t v131 = (uint64_t **)v132;
        if (!*v132) {
          goto LABEL_188;
        }
      }
      if (v134 == 16) {
        break;
      }
      uint64_t v133 = (int *)v132[1];
      if (!v133)
      {
        uint64_t v131 = (uint64_t **)(v132 + 1);
        goto LABEL_188;
      }
    }
  }
  else
  {
LABEL_188:
    uint64_t v135 = v132;
    uint64_t v132 = operator new(0x30uLL);
    *((_DWORD *)v132 + 8) = 16;
    v132[5] = 0;
    void *v132 = 0;
    v132[1] = 0;
    v132[2] = v135;
    *uint64_t v131 = v132;
    uint64_t v136 = **(void **)(v2 + 8);
    uint64_t v137 = v132;
    if (v136)
    {
      *(void *)(v2 + 8) = v136;
      uint64_t v137 = *v131;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v137);
    uint64_t v130 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v132[5] = 0x3FF0000000000000;
  uint64_t v138 = v4;
  uint64_t v139 = v4;
  if (v130)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v139 = v130;
        int v140 = v130[8];
        if (v140 < 18) {
          break;
        }
        uint64_t v130 = (int *)*v139;
        uint64_t v138 = (uint64_t **)v139;
        if (!*v139) {
          goto LABEL_198;
        }
      }
      if (v140 == 17) {
        break;
      }
      uint64_t v130 = (int *)v139[1];
      if (!v130)
      {
        uint64_t v138 = (uint64_t **)(v139 + 1);
        goto LABEL_198;
      }
    }
  }
  else
  {
LABEL_198:
    uint64_t v141 = v139;
    uint64_t v139 = operator new(0x30uLL);
    *((_DWORD *)v139 + 8) = 17;
    v139[5] = 0;
    *uint64_t v139 = 0;
    v139[1] = 0;
    v139[2] = v141;
    *uint64_t v138 = v139;
    uint64_t v142 = **(void **)(v2 + 8);
    dispatch_time_t v143 = v139;
    if (v142)
    {
      *(void *)(v2 + 8) = v142;
      dispatch_time_t v143 = *v138;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v143);
    ++*(void *)(v2 + 24);
  }
  v139[5] = 0x3FF0000000000000;
  uint64_t v144 = (int *)*v4;
  uint64_t v145 = v4;
  uint64_t v146 = v4;
  if (*v4)
  {
    uint64_t v147 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v146 = v147;
        int v148 = v147[8];
        if (v148 < 19) {
          break;
        }
        uint64_t v147 = (int *)*v146;
        uint64_t v145 = (uint64_t **)v146;
        if (!*v146) {
          goto LABEL_208;
        }
      }
      if (v148 == 18) {
        break;
      }
      uint64_t v147 = (int *)v146[1];
      if (!v147)
      {
        uint64_t v145 = (uint64_t **)(v146 + 1);
        goto LABEL_208;
      }
    }
  }
  else
  {
LABEL_208:
    uint64_t v149 = v146;
    uint64_t v146 = operator new(0x30uLL);
    *((_DWORD *)v146 + 8) = 18;
    v146[5] = 0;
    *uint64_t v146 = 0;
    v146[1] = 0;
    v146[2] = v149;
    *uint64_t v145 = v146;
    uint64_t v150 = **(void **)(v2 + 8);
    v151 = v146;
    if (v150)
    {
      *(void *)(v2 + 8) = v150;
      v151 = *v145;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v151);
    uint64_t v144 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v146[5] = 0x3FF0000000000000;
  v152 = v4;
  v153 = v4;
  if (v144)
  {
    while (1)
    {
      while (1)
      {
        v153 = v144;
        int v154 = v144[8];
        if (v154 < 20) {
          break;
        }
        uint64_t v144 = (int *)*v153;
        v152 = (uint64_t **)v153;
        if (!*v153) {
          goto LABEL_218;
        }
      }
      if (v154 == 19) {
        break;
      }
      uint64_t v144 = (int *)v153[1];
      if (!v144)
      {
        v152 = (uint64_t **)(v153 + 1);
        goto LABEL_218;
      }
    }
  }
  else
  {
LABEL_218:
    uint64_t v155 = v153;
    v153 = operator new(0x30uLL);
    *((_DWORD *)v153 + 8) = 19;
    v153[5] = 0;
    void *v153 = 0;
    v153[1] = 0;
    v153[2] = v155;
    std::string *v152 = v153;
    uint64_t v156 = **(void **)(v2 + 8);
    uint64_t v157 = v153;
    if (v156)
    {
      *(void *)(v2 + 8) = v156;
      uint64_t v157 = *v152;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v157);
    ++*(void *)(v2 + 24);
  }
  v153[5] = 0x3FF0000000000000;
  uint64_t v158 = (int *)*v4;
  uint64_t v159 = v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v159 = v158;
        int v160 = v158[8];
        if (v160 < 21) {
          break;
        }
        uint64_t v158 = (int *)*v159;
        uint64_t v4 = (uint64_t **)v159;
        if (!*v159) {
          goto LABEL_228;
        }
      }
      if (v160 == 20) {
        break;
      }
      uint64_t v158 = (int *)v159[1];
      if (!v158)
      {
        uint64_t v4 = (uint64_t **)(v159 + 1);
        goto LABEL_228;
      }
    }
  }
  else
  {
LABEL_228:
    uint64_t v161 = v159;
    uint64_t v159 = operator new(0x30uLL);
    *((_DWORD *)v159 + 8) = 20;
    v159[5] = 0;
    *uint64_t v159 = 0;
    v159[1] = 0;
    v159[2] = v161;
    *uint64_t v4 = v159;
    uint64_t v162 = **(void **)(v2 + 8);
    uint64_t v163 = v159;
    if (v162)
    {
      *(void *)(v2 + 8) = v162;
      uint64_t v163 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v163);
    ++*(void *)(v2 + 24);
  }
  v159[5] = 0x3FF0000000000000;
  return this;
}

uint64_t BBUEUR20Programmer::handleMaverickGetNonce_nl(uint64_t a1, int a2)
{
  bzero(*(void **)(a1 + 4352), 0x400uLL);
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Starting Maverick Protocol (%s)", "handleMaverickGetNonce_nl");
  if (ETLSAHCommandReceive() && ETLSAHCommandParseMaverickEraseQuery())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Setting HSIC cookie? %d", *(unsigned __int8 *)(a1 + 64));
    if (a2) {
      *(unsigned char *)(a1 + 4300) = 1;
    }
    if (ETLSAHCommandCreateMaverickEraseResponse())
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending Erase Response: Length %u Type %u  Erase EFS %u", *(_DWORD *)(*(void *)(a1 + 4352) + 4), **(_DWORD **)(a1 + 4352), a2);
      ETLSAHCommandSend();
    }
  }
  uint64_t v4 = 3;
  if (ETLSAHCommandReceive())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Checking Manifest Request: Length %u Type %u", *(_DWORD *)(*(void *)(a1 + 4352) + 4), **(_DWORD **)(a1 + 4352));
    if (ETLSAHCommandParseMaverickRootManifestQuery()) {
      return 0;
    }
    else {
      return 3;
    }
  }
  return v4;
}

uint64_t BBUEUR20Programmer::gatherPersonalizationParameters(BBUEUR20Programmer *this, int a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  int v30 = 256;
  uint64_t v6 = (BBUFeedback *)*((void *)this + 1);
  if (a3)
  {
    BBUFeedback::handleBeginPhase(v6, "Gathering Personalization parameters...");
    if ((*(unsigned int (**)(BBUEUR20Programmer *, int *))(*(void *)this + 184))(this, &v30))
    {
      uint64_t Nonce_nl = 48;
    }
    else if (v30 == 2)
    {
      uint64_t Nonce_nl = 28;
    }
    else if (v30 == 256)
    {
      uint64_t v12 = (UInt8 *)operator new(0x50uLL);
      uint64_t Nonce_nl = BBUEUR20Programmer::handleMaverickGetNonce_nl((uint64_t)this, a2);
      if (!Nonce_nl)
      {
        uint64_t v13 = operator new(0x10uLL);
        *uint64_t v13 = &unk_26CECE7E8;
        v13[1] = 0;
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        v13[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v12 + 4, 20);
        CFAllocatorRef v15 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)*((unsigned int *)v12 + 7));
        uint64_t v16 = BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber((BBUEURPersonalizationParameters::EURSerialNumber *)(v12 + 24), (const unsigned __int8 *)0x20);
        char v17 = operator new(0x10uLL);
        *char v17 = &unk_26CECE908;
        v17[1] = 0;
        v17[1] = CFDataCreate(v14, v12 + 32, 48);
        *a4 = *(_DWORD *)v12;
        operator delete(v12);
        uint64_t v18 = *((void *)a5 + 1);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        *((void *)a5 + 1) = v13;
        uint64_t v19 = *((void *)a5 + 2);
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        *((void *)a5 + 2) = v15;
        (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 16))(a5, v16);
        (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 24))(a5, v17);
        if (v16 && v15)
        {
          uint64_t v20 = (BBUFeedback *)*((void *)this + 1);
          int v21 = (*(uint64_t (**)(void *))(*v15 + 24))(v15);
          BBUFeedback::handleComment(v20, "   SNUM: %s / CHIPID: 0x%08x", "<< SNUM >>", v21);
        }
        int v22 = (BBUFeedback *)*((void *)this + 1);
        (*(void (**)(void **__return_ptr, void *))(*v13 + 24))(__p, v13);
        if (v29 >= 0) {
          uint64_t v23 = __p;
        }
        else {
          uint64_t v23 = (void **)__p[0];
        }
        BBUFeedback::handleComment(v22, "   NONCE: %s", (const char *)v23);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v24 = (BBUFeedback *)*((void *)this + 1);
        (*(void (**)(void **__return_ptr, void *))(*v17 + 24))(__p, v17);
        if (v29 >= 0) {
          uint64_t v25 = __p;
        }
        else {
          uint64_t v25 = (void **)__p[0];
        }
        BBUFeedback::handleComment(v24, "   PUBLIC_KEY_HASH: %s", (const char *)v25);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        char v26 = (BBUFeedback *)*((void *)this + 1);
        int v27 = (*(uint64_t (**)(void))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3));
        BBUFeedback::handleComment(v26, "   CertID: %u", v27);
        uint64_t Nonce_nl = 0;
      }
    }
    else
    {
      uint64_t Nonce_nl = 12;
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), Nonce_nl);
  }
  else
  {
    BBUFeedback::handleComment(v6, "Not in restore mode - skipping gathering Personalization parameters...");
    return 0;
  }
  return Nonce_nl;
}

void sub_21DF1507C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR20Programmer::handleSaharaMode_nl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11 = a2;
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (a4)
  {
    BOOL v13 = a2 >= 2;
    if (a2 <= 2) {
      goto LABEL_3;
    }
LABEL_10:
    if (a2 == 3)
    {
      uint64_t Nonce_nl = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 256))(a1, 9);
      if (Nonce_nl)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            return Nonce_nl;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            return Nonce_nl;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          uint64_t v18 = "failed handling command mode\n";
          goto LABEL_29;
        }
      }
      return Nonce_nl;
    }
    if (a2 != 256)
    {
LABEL_25:
      if (gBBULogMaskGet(void)::once == -1)
      {
        uint64_t Nonce_nl = 12;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t Nonce_nl = 12;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        ETLSAHModeAsString();
        uint64_t v18 = "unexpected start mode %u, %s\n";
        char v37 = v11;
        goto LABEL_29;
      }
      return Nonce_nl;
    }
    if ((a5 & 1) == 0)
    {
      uint64_t Nonce_nl = BBUEUR20Programmer::handleMaverickGetNonce_nl(a1, 0);
      if (Nonce_nl)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            return Nonce_nl;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            return Nonce_nl;
          }
        }
        if (gBBULogVerbosity < 0) {
          return Nonce_nl;
        }
        int v22 = "failed getting nonce\n";
LABEL_68:
        _BBULog(1, 0, "BBUProgrammer", "", v22, v19, v20, v21, v37);
        return Nonce_nl;
      }
      a4 = 0;
    }
    uint64_t Nonce_nl = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, a3, a4, a6, 0, a5, a7);
    if (Nonce_nl)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      if (gBBULogVerbosity < 0) {
        return Nonce_nl;
      }
      int v22 = "failed handling sahara send hashes command\n";
      goto LABEL_68;
    }
    if (a5)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Skipping sahara config command");
LABEL_38:
      uint64_t Nonce_nl = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      if (!Nonce_nl) {
        return Nonce_nl;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      if (gBBULogVerbosity < 0) {
        return Nonce_nl;
      }
      int v22 = "failed handling maverick end\n";
      goto LABEL_68;
    }
    uint64_t v23 = operator new[](0x400uLL);
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v39[14] = v24;
    v39[15] = v24;
    v39[12] = v24;
    v39[13] = v24;
    v39[10] = v24;
    v39[11] = v24;
    v39[8] = v24;
    v39[9] = v24;
    v39[6] = v24;
    v39[7] = v24;
    v39[4] = v24;
    v39[5] = v24;
    v39[2] = v24;
    v39[3] = v24;
    v39[0] = v24;
    v39[1] = v24;
    long long v38 = v24;
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Receiving baseband config...");
    if ((ETLSAHCommandReceive() & 1) == 0)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed receiving baseband config");
LABEL_52:
      uint64_t Nonce_nl = 3;
LABEL_64:
      operator delete[](v23);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          return Nonce_nl;
        }
      }
      if (gBBULogVerbosity < 0) {
        return Nonce_nl;
      }
      int v22 = "failed handling sahara config command\n";
      goto LABEL_68;
    }
    char v25 = ETLSAHCommandParseMaverickConfigQuery();
    char v26 = *(BBUFeedback **)(a1 + 8);
    if (v25)
    {
      BBUFeedback::handleComment(v26, "Baseband config:");
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    send_info_ver:        0x%04x", v38);
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    sbl_sec_version:      0x%04x", DWORD1(v38));
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    power_sequence_index: 0x%04x", DWORD2(v38));
      if (HIDWORD(v38)) {
        int v27 = "true";
      }
      else {
        int v27 = "false";
      }
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    coredump_supported:   %s", v27);
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    bb_version_string:    %s", (const char *)v39);
      if (TelephonyBasebandSetBasebandProperty())
      {
        if (TelephonyBasebandSetBasebandProperty())
        {
          StageContext = (capabilities::pci *)BBUFeedback::getStageContext(*(BBUFeedback **)(a1 + 8));
          unsigned int v34 = capabilities::pci::supportsPCIAudio(StageContext);
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending flag to BB: 0x%llx", v34);
          bzero(v23, 0x400uLL);
          char MaverickConfigResponse = ETLSAHCommandCreateMaverickConfigResponse();
          int v36 = *(BBUFeedback **)(a1 + 8);
          if (MaverickConfigResponse)
          {
            BBUFeedback::handleComment(v36, "Sending config response...");
            if (ETLSAHCommandSend())
            {
              operator delete[](v23);
              goto LABEL_38;
            }
            BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed sending maverick config response");
            goto LABEL_52;
          }
          BBUFeedback::handleComment(v36, "failed creating maverick config response");
LABEL_54:
          uint64_t Nonce_nl = 11;
          goto LABEL_64;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t Nonce_nl = 11;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            goto LABEL_64;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t Nonce_nl = 11;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            goto LABEL_64;
          }
        }
        if (gBBULogVerbosity < 0) {
          goto LABEL_64;
        }
        uint64_t v32 = "Failed to send PowerSequenceIndex property to AppleBaseband Driver\n";
      }
      else
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t Nonce_nl = 11;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            goto LABEL_64;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t Nonce_nl = 11;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
            goto LABEL_64;
          }
        }
        if (gBBULogVerbosity < 0) {
          goto LABEL_64;
        }
        uint64_t v32 = "Failed to send CoredumpSupported property to AppleBaseband Driver\n";
      }
      _BBULog(1, 0, "BBUProgrammer", "", v32, v28, v29, v30, v37);
      goto LABEL_64;
    }
    BBUFeedback::handleComment(v26, "failed parsing baseband config");
    goto LABEL_54;
  }
  a4 = (*(_DWORD *)(a1 + 4280) - 8);
  BOOL v13 = a2 >= 2;
  if (a2 > 2) {
    goto LABEL_10;
  }
LABEL_3:
  if (v13)
  {
    if (a2 == 2) {
      return 28;
    }
    goto LABEL_25;
  }
  uint64_t Nonce_nl = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a1 + 40);
  if (Nonce_nl)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return Nonce_nl;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return Nonce_nl;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      uint64_t v18 = "failed sending image\n";
LABEL_29:
      _BBULog(1, 0, "BBUProgrammer", "", v18, v14, v15, v16, v37);
    }
  }
  return Nonce_nl;
}

uint64_t BBUEUR20Programmer::switchSaharaMode(uint64_t a1)
{
  bzero(*(void **)(a1 + 4352), 0x400uLL);
  if (ETLSAHCommandCreateSwitchMode())
  {
    if (ETLSAHCommandSend()) {
      return 0;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t result = 11;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
        return result;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t result = 11;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
        return result;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(9, 1, "BBUProgrammer", "", "failed sending mode switch command", v4, v5, v6, v8);
      return 11;
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t result = 11;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return result;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t result = 11;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return result;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(1, 1, "BBUProgrammer", "", "failed creating mode switch command", v1, v2, v3, v8);
      return 11;
    }
  }
  return result;
}

uint64_t BBUEUR20Programmer::handleCommandMode(uint64_t a1, int a2)
{
  bzero(*(void **)(a1 + 4352), 0x400uLL);
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v7 = 3;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v7;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v7 = 3;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v7;
      }
    }
    if (gBBULogVerbosity < 1) {
      return v7;
    }
    char v8 = "no response from baseband when trying to receive next action\n";
LABEL_14:
    _BBULog(1, 1, "BBUProgrammer", "", v8, v4, v5, v6, v25);
    return v7;
  }
  if ((ETLSAHCommandParseCommandReady() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v7 = 11;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v7;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v7 = 11;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v7;
      }
    }
    if (gBBULogVerbosity < 1) {
      return v7;
    }
    char v8 = "failed to parse CommandReady\n";
    goto LABEL_14;
  }
  if (ETLSAHCommandExecute())
  {
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    if (((gBBULogVerbosity > 0) & (*(unsigned __int8 *)gBBULogMaskGet(void)::sBBULogMask >> 1)) != 0)
    {
      char v10 = ETLSAHReturnAsString();
      uint64_t v7 = 1;
      _BBULog(1, 1, "BBUProgrammer", "", "failed getting command ID with %s\n", v11, v12, v13, v10);
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v7 = 1;
    }
    goto LABEL_24;
  }
  if (a2 != -1431655766)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      int v9 = 0;
      uint64_t v7 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_24;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      int v9 = 0;
      uint64_t v7 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_24;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      char v14 = ETLSAHExecutionCommandIDAsString();
      ETLSAHExecutionCommandIDAsString();
      _BBULog(1, 1, "BBUProgrammer", "", "received unexpected command ID(expected: %s, received: %s\n", v15, v16, v17, v14);
      int v9 = 0;
      uint64_t v7 = 12;
    }
    goto LABEL_24;
  }
  uint64_t v7 = 0;
  int v9 = 1;
LABEL_24:
  uint64_t v18 = *(BBUFeedback **)(a1 + 8);
  uint64_t v19 = (const char *)ETLSAHExecutionCommandIDAsString();
  BBUFeedback::handleComment(v18, "Done executing kETLSAHGetCommandsID, received: %s", v19);
  if (!v9) {
    return v7;
  }
  if (a2 == 9)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
    if (!v7) {
      return v7;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v7;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v7;
      }
    }
    if (gBBULogVerbosity < 1) {
      return v7;
    }
    char v8 = "failed to handle kETLSAHGetDDRCalData\n";
    goto LABEL_14;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v7 = 12;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
      return v7;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v7 = 12;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
      return v7;
    }
  }
  if (gBBULogVerbosity >= 1)
  {
    char v20 = ETLSAHExecutionCommandIDAsString();
    _BBULog(1, 1, "BBUProgrammer", "", "received unexpected command: %s\n", v21, v22, v23, v20);
  }
  return v7;
}

uint64_t BBUEUR20Programmer::handleGetDDRCalData(BBUEUR20Programmer *this)
{
  CFIndex v38 = 0;
  uint64_t v2 = operator new(0x800uLL);
  bzero(v2, 0x800uLL);
  bzero(*((void **)this + 544), 0x400uLL);
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Receiving DDR Cal Data...\n");
  if (ETLSAHCommandExecute())
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v14 = 1;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v14 = 1;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_38;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      char v15 = ETLSAHReturnAsString();
      _BBULog(1, 1, "BBUProgrammer", "", "failed getting getting DDR training data with %s\n", v16, v17, v18, v15);
    }
    goto LABEL_38;
  }
  CFDataRef v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v2, v38);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR20Programmer.cpp", 0x225u, (ctu::LogMessageBuffer *)"Assertion failure(ddrDataRef)", v25, v26, v27, 232);
  }
  uint64_t v4 = operator new(0x18uLL);
  v4[4] = 0;
  *(void *)uint64_t v4 = &unk_26CECE780;
  *((void *)v4 + 1) = v3;
  CFRetain(v3);
  memset(v37, 170, sizeof(v37));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v5 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v6 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v6);
    uint64_t v7 = operator new(0x20uLL);
    *uint64_t v7 = &unk_26CECF498;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v6;
    char v8 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v6;
    off_26AA89B58 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v5 = (BBUPartitionManager *)off_26AA89B50;
  }
  int v9 = (std::__shared_weak_count *)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v5, &v35);
  char v10 = std::string::append(&v35, "/", 1uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v36, "mdmddr.mbn", 0xAuLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v37[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)char v37 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if (!v9) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (!v9) {
    goto LABEL_22;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_22:
  if ((*(unsigned int (**)(_DWORD *, unsigned char *, uint64_t))(*(void *)v4 + 48))(v4, v37, 1))
  {
    uint64_t v28 = __cxa_allocate_exception(0x210uLL);
    uint64_t v32 = v28;
    uint64_t v33 = v37;
    if (v37[23] < 0) {
      LOBYTE(v33) = v37[0];
    }
    _BBUException::_BBUException((uint64_t)v28, 104, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR20Programmer.cpp", 0x22Au, (ctu::LogMessageBuffer *)"failed to save %s(%d)", v29, v30, v31, (char)v33);
  }
  (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  uint64_t v19 = v37;
  if (v37[23] < 0) {
    uint64_t v19 = *(const char **)v37;
  }
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Saved MDMDDR data to: %s\n", v19);
  if ((v37[23] & 0x80000000) != 0) {
    operator delete(*(void **)v37);
  }
  uint64_t v14 = (*(uint64_t (**)(BBUEUR20Programmer *, void))(*(void *)this + 264))(this, 0);
  if (v14)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_38;
      }
    }
    if (gBBULogVerbosity >= 1) {
      _BBULog(1, 1, "BBUProgrammer", "", "failed to switch mode\n", v20, v21, v22, v34);
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v14 = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v14 = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
        goto LABEL_38;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(9, 1, "BBUProgrammer", "", "successfully switched Sahara mode to ETLSAHModePending\n", v20, v21, v22, v34);
      uint64_t v14 = 0;
    }
  }
LABEL_38:
  operator delete(v2);
  return v14;
}

void sub_21DF165D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v26, v26[1]);
  operator delete(v26);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR20Programmer::handleHashesQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[1] = v11;
  v30[2] = v11;
  v29[2] = v11;
  v30[0] = v11;
  v29[0] = v11;
  v29[1] = v11;
  v28[1] = v11;
  v28[2] = v11;
  v27[2] = v11;
  v28[0] = v11;
  v27[0] = v11;
  v27[1] = v11;
  if (!a2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_9;
      }
    }
    if (gBBULogVerbosity >= 1) {
      _BBULog(1, 1, "BBUProgrammer", "", "bad arguments: header is NULL\n", a6, a7, a8, v27[0]);
    }
LABEL_9:
    uint64_t v15 = 2;
    if (!a3) {
      return v15;
    }
    goto LABEL_10;
  }
  if ((ETLSAHCommandParseMaverickSendHashesQuery() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v15 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v15;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v15 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v15;
      }
    }
    if (gBBULogVerbosity >= 1) {
      _BBULog(1, 1, "BBUProgrammer", "", "Failed parsing maverick hash query results\n", v12, v13, v14, v27[0]);
    }
    return v15;
  }
  uint64_t v15 = 0;
  if (!a3) {
    return v15;
  }
LABEL_10:
  if (a4)
  {
    uint64_t v16 = (char *)operator new(0xC8uLL);
    *(void *)uint64_t v16 = &unk_26CECA4B0;
    size_t v17 = off_26CECA4D0((BBUEURHashData *)v16);
    memcpy(v16 + 8, v27, v17);
    size_t v18 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 56, v28, v18);
    size_t v19 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 104, v29, v19);
    size_t v20 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 152, v30, v20);
    uint64_t v22 = *(BBUFeedback **)(a1 + 8);
    uint64_t v21 = (BBUFeedback **)(a1 + 8);
    BBUFeedback::handleComment(v22, "rootManifestHashData:");
    (*(void (**)(char *, BBUFeedback *))(*(void *)v16 + 24))(v16, *v21);
    BBUFeedback::handleComment(*v21, "\nupdateSourceHashData:");
    (*(void (**)(uint64_t, BBUFeedback *))(*(void *)a4 + 24))(a4, *v21);
    if (((*(uint64_t (**)(uint64_t, BBUFeedback *, char *))(*(void *)a4 + 16))(a4, *v21, v16) & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        uint64_t v15 = 33;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
          goto LABEL_14;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t v15 = 33;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_14:
          if (gBBULogVerbosity >= 1) {
            _BBULog(1, 1, "BBUProgrammer", "", "root manifest hash data mismatches baseband hash query\n", v23, v24, v25, v27[0]);
          }
        }
      }
    }
    (*(void (**)(char *))(*(void *)v16 + 8))(v16);
  }
  return v15;
}

void sub_21DF16AF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR20Programmer::collectCoreDump(BBUFeedback **a1, uint64_t a2, uint64_t a3)
{
  int v20 = 0;
  *((_DWORD *)a1 + 1071) = 0;
  BBUFeedback::handleBeginPhase(a1[1], "Sending images for CoreDump...");
  do
  {
    uint64_t v5 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v20);
    if (v5)
    {
      uint64_t v11 = v5;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          goto LABEL_20;
        }
      }
      if (gBBULogVerbosity < 0) {
        goto LABEL_20;
      }
      uint64_t v12 = "failed connecting to sahara in CoreDump\n";
      goto LABEL_19;
    }
    if (v20)
    {
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    uint64_t v9 = (*((uint64_t (**)(BBUFeedback **, BBUFeedback **))*a1 + 28))(a1, a1 + 5);
    if (v9)
    {
      uint64_t v11 = v9;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          goto LABEL_20;
        }
LABEL_17:
        if (gBBULogVerbosity < 0) {
          goto LABEL_20;
        }
        uint64_t v12 = "failed sending image in CoreDump\n";
LABEL_19:
        _BBULog(1, 0, "BBUProgrammer", "", v12, v6, v7, v8, v18);
        goto LABEL_20;
      }
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
    uint64_t v10 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 31))(a1, &v20);
  }
  while (!v10);
  uint64_t v11 = v10;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_8;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
  {
LABEL_8:
    if (gBBULogVerbosity < 0) {
      goto LABEL_20;
    }
    uint64_t v12 = "failed disconnecting for image in CoreDump\n";
    goto LABEL_19;
  }
LABEL_20:
  (*(void (**)(BBUFeedback *, uint64_t))(*(void *)a1[1] + 16))(a1[1], v11);
  if (v11) {
    return v11;
  }
  if (v20 != 2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v11 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v11;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v11 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return v11;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      char v14 = ETLSAHModeAsString();
      _BBULog(1, 0, "BBUProgrammer", "", "unexpected mode: %s\n", v15, v16, v17, v14);
      return 12;
    }
    return v11;
  }
  *((_DWORD *)a1 + 1071) = 2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v19 = *(std::string *)a3;
  }
  uint64_t v11 = BBUEUR2Programmer::collectCoreDump(a1, (uint64_t)&v19);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v11;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21DF16E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BBUEUR20Programmer::postCrashReason(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  int v3 = ETLEFSearchBasebandCrashReasonM20();
  int v4 = v3;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v3) {
      goto LABEL_6;
    }
LABEL_10:
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "\tFailed: Looking for CoreDump reason");
    goto LABEL_11;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  uint64_t v8 = ___ZN18BBUEUR20Programmer15postCrashReasonENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  uint64_t v9 = &__block_descriptor_tmp_5;
  for (uint64_t i = a1; v5 != v6; v5 += 388)
    v8((uint64_t)v7, (uint64_t)v5);
LABEL_11:
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
}

void sub_21DF16FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 48) = v22;
    operator delete(v22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18BBUEUR20Programmer15postCrashReasonENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
}

void BBUEUR20Programmer::~BBUEUR20Programmer(BBUEUR20Programmer *this)
{
  *(void *)this = &unk_26CECC0A0;
  uint64_t v2 = (void *)*((void *)this + 541);
  if (v2)
  {
    *((void *)this + 542) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26CECE0F8;
  if (*((char *)this + 4327) < 0) {
    operator delete(*((void **)this + 538));
  }
  *(void *)this = &unk_26CECD638;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));

  BBUProgrammer::~BBUProgrammer(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CECC0A0;
  uint64_t v2 = (void *)*((void *)this + 541);
  if (v2)
  {
    *((void *)this + 542) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26CECE0F8;
  if (*((char *)this + 4327) < 0) {
    operator delete(*((void **)this + 538));
  }
  *(void *)this = &unk_26CECD638;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  BBUProgrammer::~BBUProgrammer(this);

  operator delete(v3);
}

uint64_t __cxx_global_var_init_11()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void BBUEUR10FirmwareVersion::BBUEUR10FirmwareVersion(BBUEUR10FirmwareVersion *this)
{
  uint64_t v2 = (const void *)BBUEUR10FirmwareVersion::kFirmwarePrefix;
  size_t v3 = strlen((const char *)BBUEUR10FirmwareVersion::kFirmwarePrefix);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (long long *)operator new(v6 + 1);
    *((void *)&__dst + 1) = v4;
    unint64_t v11 = v7 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v2, v4);
  *((unsigned char *)p_dst + v4) = 0;
  *(void *)this = &unk_26CECB2B8;
  *((_DWORD *)this + 5) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v8 = (std::string *)((char *)this + 72);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (SHIBYTE(v11) < 0)
  {
    uint64_t v9 = (void *)__dst;
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    *((_DWORD *)this + 4) = 0;
    *((void *)this + 1) = 0;
    operator delete(v9);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = __dst;
    *((void *)this + 11) = v11;
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
  *(void *)this = &unk_26CECC1E0;
}

void sub_21DF17370(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void BBUEUR10FirmwareVersion::~BBUEUR10FirmwareVersion(void **this)
{
  *this = &unk_26CECB2B8;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(this[3]);
      return;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if (*((char *)this + 47) < 0) {
    goto LABEL_7;
  }
}

{
  BBUEUR10FirmwareVersion *v2;
  uint64_t vars8;

  *this = &unk_26CECB2B8;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v2 = (BBUEUR10FirmwareVersion *)this;
    goto LABEL_6;
  }
LABEL_9:
  operator delete(this[3]);
  uint64_t v2 = (BBUEUR10FirmwareVersion *)this;

LABEL_6:
  operator delete(v2);
}

unint64_t BBUEUR10FirmwareVersion::getFirmwarePrefix@<X0>(void *a1@<X8>)
{
  size_t v3 = (const void *)BBUEUR10FirmwareVersion::kFirmwarePrefix;
  unint64_t result = strlen((const char *)BBUEUR10FirmwareVersion::kFirmwarePrefix);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a1 = 0;
      return result;
    }
  }
  unint64_t result = (unint64_t)memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
  return result;
}

void BBUEUR10Loader::BBUEUR10Loader(BBUEUR10Loader *this, BBUFeedback *a2)
{
  BBULoader::BBULoader(this, a2);
  *(void *)size_t v3 = &unk_26CEC92D8;
  *((unsigned char *)v3 + 24) = 0;
  size_t v4 = (capabilities::updater *)capabilities::radio::chipID(v3);
  *((_DWORD *)this + 7) = v4;
  size_t v5 = (capabilities::updater *)capabilities::updater::loaderConnectAttempts(v4);
  *((_DWORD *)this + 8) = v5;
  *((_DWORD *)this + 9) = capabilities::updater::loaderCommandTimeout(v5);
  *((unsigned char *)this + 40) = 0;
  *(void *)this = &unk_26CECC250;
  *(void *)((char *)this + 44) = 0x100000000080;
  *((_DWORD *)this + 13) = 1000;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v6 = (char *)operator new(0x1000uLL);
  *((void *)this + 10) = v6;
  uint64_t v7 = v6 + 4096;
  *((void *)this + 12) = v6 + 4096;
  bzero(v6, 0x1000uLL);
  *((void *)this + 11) = v7;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  uint64_t v8 = operator new(0x80uLL);
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  void v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  *(_OWORD *)((char *)this + 136) = constinit;
  *((void *)this + 13) = v8;
  *((void *)this + 14) = v8 + 8;
  *((void *)this + 15) = v8 + 8;
  *((void *)this + 16) = v8;
  *(_OWORD *)((char *)this + 152) = unk_21DFAC3E8;
  if ((TelephonyUtilRingBufferInitialize() & 1) == 0) {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "failed initializing ring buffer");
  }
}

void sub_21DF176EC(_Unwind_Exception *exception_object)
{
  size_t v4 = *v2;
  if (!*v2) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 88) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR10Loader::connect(uint64_t a1)
{
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Connecting to Sahara Loader");
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed reading hello packet");
    uint64_t v2 = 3;
    goto LABEL_12;
  }
  if ((ETLSAHCommandParseHello() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed parsing hello packet");
LABEL_11:
    uint64_t v2 = 11;
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  if ((ETLSAHCommandCreateHelloResponse() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed creating hello response");
    goto LABEL_11;
  }
  if ((ETLSAHCommandSend() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed sending hello response");
LABEL_15:
    uint64_t v2 = 3;
    goto LABEL_12;
  }
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed receiving command ready packet");
    goto LABEL_15;
  }
  if ((ETLSAHCommandParseCommandReady() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed parsing command ready packet");
    goto LABEL_11;
  }
  uint64_t v2 = 0;
LABEL_12:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v2);
  return v2;
}

uint64_t BBUEUR10Loader::getVersion(uint64_t a1, uint64_t a2, void *a3)
{
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Getting Version");
  if (!a3)
  {
    uint64_t v8 = 2;
    goto LABEL_21;
  }
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[7] = v5;
  v25[8] = v5;
  v25[5] = v5;
  v25[6] = v5;
  v25[3] = v5;
  v25[4] = v5;
  v25[1] = v5;
  v25[2] = v5;
  long long v24 = v5;
  v25[0] = v5;
  *(_OWORD *)std::string __p = v5;
  long long v23 = v5;
  long long v20 = v5;
  long long v21 = v5;
  long long v18 = v5;
  long long v19 = v5;
  long long v17 = v5;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v17);
  std::ostream::operator<<();
  if ((BYTE8(v24) & 0x10) != 0)
  {
    uint64_t v9 = v24;
    if ((unint64_t)v24 < *((void *)&v21 + 1))
    {
      *(void *)&long long v24 = *((void *)&v21 + 1);
      uint64_t v9 = *((void *)&v21 + 1);
    }
    uint64_t v10 = (const void *)v21;
    size_t v6 = v9 - v21;
    if ((unint64_t)(v9 - v21) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_23;
    }
  }
  else
  {
    if ((BYTE8(v24) & 8) == 0)
    {
      size_t v6 = 0;
      HIBYTE(v16) = 0;
      uint64_t v7 = __dst;
      goto LABEL_16;
    }
    uint64_t v10 = (const void *)*((void *)&v19 + 1);
    size_t v6 = *((void *)&v20 + 1) - *((void *)&v19 + 1);
    if (*((void *)&v20 + 1) - *((void *)&v19 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_23:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v11 = v6 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    unint64_t v16 = v12 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v16) = v6;
    uint64_t v7 = __dst;
    if (!v6) {
      goto LABEL_16;
    }
  }
  memmove(v7, v10, v6);
LABEL_16:
  *((unsigned char *)v7 + v6) = 0;
  *a3 = BBULoaderVersion::createFromVersionString((uint64_t)__dst);
  if (SHIBYTE(v16) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v17 = *MEMORY[0x263F8C2B8];
  uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v17 + *(void *)(v17 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v18 = v13;
  *((void *)&v18 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C1DDF0](v25);
  uint64_t v8 = 0;
LABEL_21:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v8);
  return v8;
}

void sub_21DF17BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Loader::queryChipInfo(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  char v4 = a2;
  if (a2 && a3)
  {
    size_t v6 = (unsigned int *)operator new(0x100uLL);
    *(_OWORD *)size_t v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 15) = 0u;
    int v39 = a1[13];
    if (ETLSAHCommandExecute())
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        uint64_t v7 = 1;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
          goto LABEL_6;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t v7 = 1;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_6:
          if (gBBULogVerbosity >= 1)
          {
            uint64_t v8 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
            char v9 = ETLSAHReturnAsString();
            _BBULog(1, 1, v8, "", "failed getting chip id with %s\n", v10, v11, v12, v9);
          }
        }
      }
LABEL_29:
      operator delete(v6);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
          return v7;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
          return v7;
        }
      }
      if (gBBULogVerbosity >= 1)
      {
        uint64_t v25 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
        uint64_t v29 = "failed querying chip id\n";
        goto LABEL_33;
      }
      return v7;
    }
    if (ETLSAHCommandParseChipID())
    {
      long long v17 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)v6[1]);
      uint64_t v18 = *(void *)(a3 + 16);
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      *(void *)(a3 + 16) = v17;
      operator delete(v6);
      long long v19 = operator new(0x100uLL);
      _OWORD *v19 = 0u;
      v19[1] = 0u;
      v19[2] = 0u;
      v19[3] = 0u;
      v19[4] = 0u;
      v19[5] = 0u;
      v19[6] = 0u;
      v19[7] = 0u;
      v19[8] = 0u;
      v19[9] = 0u;
      v19[10] = 0u;
      v19[11] = 0u;
      v19[12] = 0u;
      v19[13] = 0u;
      v19[14] = 0u;
      v19[15] = 0u;
      int v39 = a1[13];
      if (ETLSAHCommandExecute())
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t v7 = 1;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
            goto LABEL_18;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t v7 = 1;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_18:
            if (gBBULogVerbosity >= 1)
            {
              long long v20 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
              char v21 = ETLSAHReturnAsString();
              _BBULog(1, 1, v20, "", "failed getting serial number with %s\n", v22, v23, v24, v21);
            }
          }
        }
LABEL_20:
        operator delete(v19);
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
            return v7;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
            return v7;
          }
        }
        if (gBBULogVerbosity >= 1)
        {
          uint64_t v25 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
          uint64_t v29 = "failed querying SNUM\n";
LABEL_33:
          _BBULog(9, 1, v25, "", v29, v26, v27, v28, v39);
          return v7;
        }
        return v7;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        uint64_t v7 = 11;
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t v7 = 11;
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
          goto LABEL_20;
        }
      }
      if (gBBULogVerbosity >= 1)
      {
        std::string v35 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
        _BBULog(9, 1, v35, "", "failed generating serial number from buffer\n", v36, v37, v38, v39);
      }
      goto LABEL_20;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
      {
LABEL_26:
        if (gBBULogVerbosity >= 1)
        {
          uint64_t v30 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
          _BBULog(9, 1, v30, "", "failed generating chip id from buffer\n", v31, v32, v33, v39);
        }
      }
    }
    uint64_t v7 = 11;
    goto LABEL_29;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v7 = 2;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
      return v7;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v7 = 2;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
      return v7;
    }
  }
  if (gBBULogVerbosity >= 1)
  {
    uint64_t v13 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
    _BBULog(9, 1, v13, "", "bad arguments:  transport = %p, parameters = %p\n", v14, v15, v16, v4);
  }
  return v7;
}

void sub_21DF186B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF186C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF186D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF186EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF18700(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF18714(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF18728(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1873C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Loader::load(BBUFeedback **a1, const void *a2, BBUDataSource *a3, char a4)
{
  uint64_t v7 = a1[1];
  if (!a2 || !a3)
  {
    BBUFeedback::handleComment(v7, "invalid arguments transport: %p updateSource: %p", a2, a3);
    uint64_t v12 = 2;
    BBUFeedback::handleComment(a1[1], "Loading second stage bootloader");
LABEL_14:
    Controller = (const void *)TelephonyBasebandCreateController();
    uint64_t v38 = Controller;
    goto LABEL_15;
  }
  BBUFeedback::handleComment(v7, "Loading second stage bootloader");
  if (!ETLSAHCommandCreateSwitchMode())
  {
    uint64_t v12 = 11;
    BBUFeedback::handleComment(a1[1], "failed creating mode switch command");
    goto LABEL_14;
  }
  if ((ETLSAHCommandSend() & 1) == 0)
  {
    uint64_t v12 = 3;
    BBUFeedback::handleComment(a1[1], "failed sending mode switch command");
    goto LABEL_14;
  }
  Controller = (const void *)TelephonyBasebandCreateController();
  uint64_t v38 = Controller;
  uint64_t v10 = BBUProgrammer::create(a1[1], (uint64_t)a2, (uint64_t)Controller);
  uint64_t v11 = v10;
  if (v10)
  {
    if (!(*(unsigned int (**)(char *))(*(void *)v10 + 16))(v10))
    {
      uint64_t v22 = (uint64_t *)operator new(0x18uLL);
      uint64_t *v22 = (uint64_t)v22;
      v22[1] = (uint64_t)v22;
      v22[2] = 0;
      BBUDataSource::createData(a3, (CFDataRef *)&cf);
      CFTypeRef v23 = cf;
      int v24 = (*(uint64_t (**)(BBUDataSource *))(*(void *)a3 + 32))(a3);
      uint64_t v25 = operator new(0x18uLL);
      v25[4] = v24;
      *(void *)uint64_t v25 = &unk_26CECE780;
      *((void *)v25 + 1) = v23;
      if (v23) {
        CFRetain(v23);
      }
      if (cf) {
        CFRelease(cf);
      }
      uint64_t v26 = operator new(0x58uLL);
      BBUEURMIImage::BBUEURMIImage((BBUEURMIImage *)v26, (BBUDataSource *)v25, 0);
      *(void *)uint64_t v26 = &unk_26CECC2D0;
      *((void *)v26 + 8) = 0;
      uint64_t v27 = v26 + 32;
      *((void *)v26 + 9) = 0;
      *((void *)v26 + 10) = 0;
      if (a4)
      {
        *((unsigned char *)v26 + 66) = 76;
        _WORD *v27 = 16979;
        char v28 = 3;
      }
      else
      {
        v26[36] = 19522;
        *(void *)uint64_t v27 = *(void *)"restoreSBL";
        char v28 = 10;
      }
      *((unsigned char *)v26 + 87) = v28;
      uint64_t v29 = BBUProgrammer::Item::createFromImage(16391, (uint64_t *)v26);
      if (v29)
      {
        uint64_t v30 = operator new(0x18uLL);
        v30[1] = v22;
        v30[2] = v29;
        uint64_t v31 = *v22;
        *uint64_t v30 = *v22;
        *(void *)(v31 + 8) = v30;
        uint64_t *v22 = (uint64_t)v30;
        ++v22[2];
        uint64_t v12 = (*(uint64_t (**)(char *, uint64_t *))(*(void *)v11 + 48))(v11, v22);
        if (v12) {
          BBUFeedback::handleComment(a1[1], "failed programming secondary loader");
        }
      }
      else
      {
        BBUFeedback::handleComment(a1[1], "could not create programmer list");
        uint64_t v12 = 19;
      }
      (*(void (**)(_WORD *))(*(void *)v26 + 8))(v26);
      if (v22[2])
      {
        uint64_t v33 = *v22;
        uint64_t v32 = (uint64_t *)v22[1];
        uint64_t v34 = *v32;
        *(void *)(v34 + 8) = *(void *)(*v22 + 8);
        **(void **)(v33 + 8) = v34;
        v22[2] = 0;
        if (v32 != v22)
        {
          do
          {
            std::string v35 = (uint64_t *)v32[1];
            operator delete(v32);
            uint64_t v32 = v35;
          }
          while (v35 != v22);
        }
      }
      operator delete(v22);
      goto LABEL_37;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v12 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0) {
        goto LABEL_9;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v12 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
      {
LABEL_9:
        if (gBBULogVerbosity >= 1)
        {
          uint64_t v13 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 9))(a1);
          _BBULog(9, 1, v13, "", "failed connecting to programmer\n", v14, v15, v16, v36);
        }
      }
    }
LABEL_37:
    (*(void (**)(char *))(*(void *)v11 + 8))(v11);
    goto LABEL_15;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v12 = 19;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v12 = 19;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
      goto LABEL_15;
    }
  }
  if (gBBULogVerbosity >= 1)
  {
    uint64_t v18 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 9))(a1);
    _BBULog(9, 1, v18, "", "failed creating programmer instance\n", v19, v20, v21, v36);
  }
LABEL_15:
  if (Controller) {
    CFRelease(Controller);
  }
  return v12;
}

void sub_21DF18C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF18C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  operator delete(v12);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void sub_21DF18C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF18C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF18CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF18CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF18CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF18CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF18CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  char v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_21DF18D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Loader::go()
{
  return 0;
}

void BBUEUR10Loader::~BBUEUR10Loader(BBUEUR10Loader *this)
{
  *(void *)this = &unk_26CECC250;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  size_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CECC250;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  size_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }

  operator delete(this);
}

const char *BBUEUR10Loader::getDebugName(BBUEUR10Loader *this)
{
  return "BBUEUR10Loader";
}

void BBUEURSBLImage::~BBUEURSBLImage(void **this)
{
  *this = &unk_26CECC2D0;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = &unk_26CECEAE8;
    uint64_t v2 = this[1];
    if (!v2) {
      return;
    }
  }
  else
  {
    *this = &unk_26CECEAE8;
    uint64_t v2 = this[1];
    if (!v2) {
      return;
    }
  }
  (*(void (**)(void *))(*(void *)v2 + 8))(v2);
}

void BBUEURSBLImage::~BBUEURSBLImage(BBUEURSBLImage *this)
{
  *(void *)this = &unk_26CECC2D0;
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    *(void *)this = &unk_26CECEAE8;
    uint64_t v2 = *((void *)this + 1);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*((void **)this + 8));
  *(void *)this = &unk_26CECEAE8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
LABEL_4:

  operator delete(this);
}

uint64_t BBUEURSBLImage::getName(BBUEURSBLImage *this)
{
  uint64_t result = (uint64_t)this + 64;
  if (*((char *)this + 87) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    size_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        size_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::~manager(support::log::manager *this)
{
  *(void *)this = &unk_26CECC348;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_26CECC348;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

uint64_t support::log::buffer::borrow(support::log::buffer *this)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_267D23E88)
  {
    uint64_t v1 = (char *)operator new(0xA8uLL);
    *((void *)v1 + 1) = 0;
    *((void *)v1 + 2) = 0;
    *(void *)uint64_t v1 = &unk_26CECC470;
    uint64_t v2 = (uint64_t)(v1 + 24);
    *((void *)v1 + 3) = &unk_26CECC4C0;
    *((void *)v1 + 4) = 850045863;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *((void *)v1 + 14) = 0;
    *((void *)v1 + 13) = 0;
    *((void *)v1 + 11) = 0;
    *((void *)v1 + 12) = v1 + 104;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    uint64_t v3 = (std::__shared_weak_count *)off_267D23E90;
    qword_267D23E88 = (uint64_t)(v1 + 24);
    off_267D23E90 = v1;
    if (!v3)
    {
      uint64_t v18 = (std::__shared_weak_count *)v1;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v2 = qword_267D23E88;
  uint64_t v1 = (char *)off_267D23E90;
  uint64_t v18 = (std::__shared_weak_count *)off_267D23E90;
  if (off_267D23E90) {
LABEL_8:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v1 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 136);
  if (v4)
  {
    uint64_t v5 = (void *)(v2 + 128);
    uint64_t v6 = *(void ***)(v2 + 104);
    uint64_t v7 = (*(void **)((char *)v6 + ((*(void *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)(v2 + 128) & 0x1FFLL];
    unint64_t v8 = *(void *)(v2 + 128) + 1;
    *(void *)(v2 + 128) = v8;
    *(void *)(v2 + 136) = v4 - 1;
    if (v8 >= 0x400)
    {
      operator delete(*v6);
      *(void *)(v2 + 104) += 8;
      uint64_t v9 = -512;
LABEL_23:
      *v5 += v9;
    }
  }
  else
  {
    uint64_t v10 = malloc(0x400uLL);
    uint64_t v7 = (uint64_t)v10;
    if (v10)
    {
      uint64_t v12 = (uint64_t **)(v2 + 80);
      uint64_t v11 = *(uint64_t **)(v2 + 80);
      if (!v11)
      {
        uint64_t v13 = (uint64_t **)(v2 + 80);
LABEL_20:
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        v15[4] = v7;
        *uint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v13;
        *uint64_t v12 = v15;
        uint64_t v16 = **(void **)(v2 + 72);
        if (v16)
        {
          *(void *)(v2 + 72) = v16;
          uint64_t v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v15);
        uint64_t v5 = (void *)(v2 + 88);
        uint64_t v9 = 1;
        goto LABEL_23;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v11;
          unint64_t v14 = v11[4];
          if ((unint64_t)v10 >= v14) {
            break;
          }
          uint64_t v11 = *v13;
          uint64_t v12 = v13;
          if (!*v13) {
            goto LABEL_20;
          }
        }
        if (v14 >= (unint64_t)v10) {
          break;
        }
        uint64_t v11 = v13[1];
        if (!v11)
        {
          uint64_t v12 = v13 + 1;
          goto LABEL_20;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return v7;
}

void sub_21DF193E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21DF193FC(_Unwind_Exception *a1)
{
}

void sub_21DF19418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_267D23E88) {
    goto LABEL_2;
  }
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_26CECC470;
  uint64_t v4 = (uint64_t)(v3 + 24);
  *((void *)v3 + 3) = &unk_26CECC4C0;
  *((void *)v3 + 4) = 850045863;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = v3 + 104;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  uint64_t v5 = (std::__shared_weak_count *)off_267D23E90;
  qword_267D23E88 = (uint64_t)(v3 + 24);
  off_267D23E90 = v3;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_2:
    uint64_t v4 = qword_267D23E88;
    uint64_t v3 = (char *)off_267D23E90;
    if (!off_267D23E90) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  unint64_t v8 = *(void **)(v4 + 80);
  uint64_t v7 = v4 + 80;
  uint64_t v6 = v8;
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == (void *)v7 || v9[4] > (unint64_t)a2) {
LABEL_19:
  }
    uint64_t v9 = (void *)v7;
  if (!v3 || atomic_fetch_add((atomic_ullong *volatile)v3 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v9 != (void *)v7) {
      goto LABEL_23;
    }
LABEL_27:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(void *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v9 == (void *)v7) {
    goto LABEL_27;
  }
LABEL_23:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_267D23E88)
  {
    uint64_t v13 = (char *)operator new(0xA8uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)uint64_t v13 = &unk_26CECC470;
    *((void *)v13 + 3) = &unk_26CECC4C0;
    *((void *)v13 + 4) = 850045863;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 14) = 0;
    *((void *)v13 + 13) = 0;
    *((void *)v13 + 11) = 0;
    *((void *)v13 + 12) = v13 + 104;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    unint64_t v14 = (std::__shared_weak_count *)off_267D23E90;
    qword_267D23E88 = (uint64_t)(v13 + 24);
    off_267D23E90 = v13;
    if (!v14)
    {
      uint64_t v135 = (std::__shared_weak_count *)v13;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v13 = (char *)off_267D23E90;
  uint64_t v135 = (std::__shared_weak_count *)off_267D23E90;
  if (off_267D23E90) {
LABEL_34:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_267D23E88) {
    goto LABEL_36;
  }
  uint64_t v15 = (char *)operator new(0xA8uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_26CECC470;
  uint64_t v16 = (uint64_t)(v15 + 24);
  *((void *)v15 + 3) = &unk_26CECC4C0;
  *((void *)v15 + 4) = 850045863;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((void *)v15 + 14) = 0;
  *((void *)v15 + 13) = 0;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = v15 + 104;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  long long v17 = (std::__shared_weak_count *)off_267D23E90;
  qword_267D23E88 = (uint64_t)(v15 + 24);
  off_267D23E90 = v15;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_36:
    uint64_t v16 = qword_267D23E88;
    uint64_t v15 = (char *)off_267D23E90;
    uint64_t v136 = (std::__shared_weak_count *)off_267D23E90;
    if (!off_267D23E90) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v136 = (std::__shared_weak_count *)v15;
LABEL_42:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
LABEL_43:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  uint64_t v18 = (std::mutex *)(v16 + 8);
  std::mutex::lock((std::mutex *)(v16 + 8));
  uint64_t v19 = *(void **)(v16 + 80);
  if (!v19) {
    goto LABEL_175;
  }
  uint64_t v20 = v16 + 80;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= (unint64_t)a2;
    if (v21 >= (unint64_t)a2) {
      CFTypeRef v23 = v19;
    }
    else {
      CFTypeRef v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    uint64_t v19 = (void *)*v23;
  }
  while (*v23);
  if (v20 == v16 + 80 || *(void *)(v20 + 32) > (unint64_t)a2)
  {
LABEL_175:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v24 = *(char **)(v16 + 112);
  uint64_t v25 = *(char **)(v16 + 104);
  uint64_t v26 = v24 - v25;
  if (v24 == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = ((v24 - v25) << 6) - 1;
  }
  unint64_t v29 = *(void *)(v16 + 128);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = v28 + v29;
  if (v27 != v28 + v29) {
    goto LABEL_151;
  }
  if (v29 >= 0x200)
  {
    *(void *)(v16 + 128) = v29 - 512;
    uint64_t v31 = v25 + 8;
    uint64_t v32 = *(void *)v25;
    *(void *)(v16 + 104) = v25 + 8;
    if (v24 != *(char **)(v16 + 120))
    {
LABEL_148:
      *(void *)int v24 = v32;
      goto LABEL_149;
    }
    uint64_t v33 = *(char **)(v16 + 96);
    if (v31 > v33)
    {
      uint64_t v34 = (v31 - v33) >> 3;
      if (v34 >= -1) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = v34 + 2;
      }
      uint64_t v36 = v35 >> 1;
      uint64_t v37 = -v36;
      uint64_t v38 = &v31[-8 * v36];
      int64_t v39 = v24 - v31;
      if (v24 != v31)
      {
        memmove(&v31[-8 * v36], v31, v24 - v31);
        int v24 = *(char **)(v16 + 104);
      }
      uint64_t v40 = &v24[8 * v37];
      int v24 = &v38[v39];
      *(void *)(v16 + 104) = v40;
      *(void *)(v16 + 112) = &v38[v39];
      goto LABEL_148;
    }
    if (v24 == v33) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = (v24 - v33) >> 2;
    }
    if (!(v52 >> 61))
    {
      xpc_object_t v53 = (char *)operator new(8 * v52);
      uint64_t v54 = &v53[8 * (v52 >> 2)];
      int64_t v56 = v24 - v31;
      BOOL v55 = v24 == v31;
      int v24 = v54;
      if (v55) {
        goto LABEL_146;
      }
      int v24 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38)
      {
        uint64_t v109 = &v53[8 * (v52 >> 2)];
        uint64_t v58 = v109;
        if ((unint64_t)(v109 - v31) >= 0x20)
        {
          uint64_t v110 = (v57 >> 3) + 1;
          uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v58 = &v54[v111];
          v31 += v111;
          int v112 = (long long *)(v25 + 24);
          char v113 = v109 + 16;
          uint64_t v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v115 = *v112;
            *(v113 - 1) = *(v112 - 1);
            *char v113 = v115;
            v112 += 2;
            v113 += 2;
            v114 -= 4;
          }
          while (v114);
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_146:
            *(void *)(v16 + 96) = v53;
            *(void *)(v16 + 104) = v54;
            *(void *)(v16 + 112) = v24;
            *(void *)(v16 + 120) = &v53[8 * v52];
            if (v33)
            {
              operator delete(v33);
              int v24 = *(char **)(v16 + 112);
            }
            goto LABEL_148;
          }
        }
      }
      else
      {
        uint64_t v58 = &v53[8 * (v52 >> 2)];
      }
      do
      {
        uint64_t v116 = *(void *)v31;
        v31 += 8;
        *(void *)uint64_t v58 = v116;
        v58 += 8;
      }
      while (v58 != v24);
      goto LABEL_146;
    }
LABEL_177:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v41 = v26 >> 3;
  int v42 = *(char **)(v16 + 120);
  uint64_t v43 = *(char **)(v16 + 96);
  if (v26 >> 3 >= (unint64_t)((v42 - v43) >> 3))
  {
    if (v42 == v43) {
      unint64_t v46 = 1;
    }
    else {
      unint64_t v46 = (v42 - v43) >> 2;
    }
    if (!(v46 >> 61))
    {
      uint64_t v47 = (char *)operator new(8 * v46);
      uint64_t v48 = operator new(0x1000uLL);
      v49 = &v47[8 * v41];
      int v50 = &v47[8 * v46];
      if (v41 == v46)
      {
        int v134 = v48;
        if (v26 < 1)
        {
          if (v24 == v25) {
            unint64_t v60 = 1;
          }
          else {
            unint64_t v60 = v26 >> 2;
          }
          if (v60 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v49 = (char *)operator new(8 * v60);
          int v50 = &v49[8 * v60];
          operator delete(v47);
          uint64_t v25 = *(char **)(v16 + 104);
          int v24 = *(char **)(v16 + 112);
          uint64_t v47 = v49;
        }
        else
        {
          unint64_t v51 = v41 + 2;
          if (v41 >= -1) {
            unint64_t v51 = v41 + 1;
          }
          v49 -= 8 * (v51 >> 1);
        }
        uint64_t v48 = v134;
      }
      *(void *)v49 = v48;
      uint64_t v61 = v49 + 8;
      if (v24 != v25)
      {
        do
        {
          if (v49 == v47)
          {
            if (v61 >= v50)
            {
              if (v50 == v47) {
                unint64_t v68 = 1;
              }
              else {
                unint64_t v68 = (v50 - v47) >> 2;
              }
              if (v68 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v69 = (char *)operator new(8 * v68);
              int v70 = v69;
              unint64_t v71 = (v68 + 3) >> 2;
              v49 = &v69[8 * v71];
              int64_t v72 = v61 - v47;
              BOOL v55 = v61 == v47;
              uint64_t v61 = v49;
              if (!v55)
              {
                uint64_t v61 = &v49[v72 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v73 = v72 - 8;
                uint64_t v74 = &v69[8 * v71];
                char v75 = v47;
                if (v73 < 0x38) {
                  goto LABEL_181;
                }
                uint64_t v76 = 8 * v71;
                uint64_t v74 = &v69[8 * v71];
                char v75 = v47;
                if ((unint64_t)(v74 - v47) < 0x20) {
                  goto LABEL_181;
                }
                uint64_t v77 = (v73 >> 3) + 1;
                uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v74 = &v49[v78];
                char v75 = &v47[v78];
                uint64_t v79 = (long long *)(v47 + 16);
                uint64_t v80 = &v69[v76 + 16];
                uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v82 = *v79;
                  *((_OWORD *)v80 - 1) = *(v79 - 1);
                  *(_OWORD *)uint64_t v80 = v82;
                  v79 += 2;
                  v80 += 32;
                  v81 -= 4;
                }
                while (v81);
                if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_181:
                  do
                  {
                    uint64_t v83 = *(void *)v75;
                    v75 += 8;
                    *(void *)uint64_t v74 = v83;
                    v74 += 8;
                  }
                  while (v74 != v61);
                }
              }
              int v50 = &v69[8 * v68];
              operator delete(v47);
              uint64_t v47 = v70;
            }
            else
            {
              uint64_t v64 = (v50 - v61) >> 3;
              if (v64 >= -1) {
                uint64_t v65 = v64 + 1;
              }
              else {
                uint64_t v65 = v64 + 2;
              }
              uint64_t v66 = v65 >> 1;
              v49 = &v47[8 * (v65 >> 1)];
              uint64_t v67 = v47;
              if (v61 != v47)
              {
                memmove(v49, v47, v61 - v47);
                uint64_t v67 = v61;
              }
              uint64_t v61 = (char *)v67 + 8 * v66;
            }
          }
          uint64_t v63 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v49 - 1) = v63;
          v49 -= 8;
        }
        while (v24 != *(char **)(v16 + 104));
      }
      uint64_t v62 = *(void **)(v16 + 96);
      *(void *)(v16 + 96) = v47;
      *(void *)(v16 + 104) = v49;
      *(void *)(v16 + 112) = v61;
      *(void *)(v16 + 120) = v50;
      uint64_t v18 = (std::mutex *)(v16 + 8);
      if (v62) {
        operator delete(v62);
      }
      goto LABEL_150;
    }
    goto LABEL_177;
  }
  uint64_t v44 = operator new(0x1000uLL);
  std::string::size_type v45 = v44;
  if (v42 == v24)
  {
    if (v25 == v43)
    {
      if (v24 == v25) {
        unint64_t v84 = 1;
      }
      else {
        unint64_t v84 = (v42 - v25) >> 2;
      }
      if (v84 >> 61) {
        goto LABEL_177;
      }
      uint64_t v85 = (char *)operator new(8 * v84);
      unint64_t v86 = (v84 + 3) >> 2;
      uint64_t v59 = &v85[8 * v86];
      uint64_t v87 = v59;
      if (v24 != v25)
      {
        uint64_t v87 = &v59[8 * v41];
        uint64_t v88 = &v85[8 * v86];
        uint64_t v89 = v25;
        if ((unint64_t)(v26 - 8) < 0x38) {
          goto LABEL_182;
        }
        uint64_t v90 = &v85[8 * v86];
        uint64_t v88 = v90;
        uint64_t v89 = v25;
        if ((unint64_t)(v90 - v25) < 0x20) {
          goto LABEL_182;
        }
        unint64_t v91 = ((unint64_t)(v26 - 8) >> 3) + 1;
        uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v88 = &v59[v92];
        uint64_t v89 = &v25[v92];
        uint64_t v93 = (long long *)(v25 + 16);
        uint64_t v94 = v90 + 16;
        uint64_t v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v96 = *v93;
          *(v94 - 1) = *(v93 - 1);
          *uint64_t v94 = v96;
          v93 += 2;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_182:
          do
          {
            uint64_t v97 = *(void *)v89;
            v89 += 8;
            *(void *)uint64_t v88 = v97;
            v88 += 8;
          }
          while (v88 != v87);
        }
      }
      *(void *)(v16 + 96) = v85;
      *(void *)(v16 + 104) = v59;
      *(void *)(v16 + 112) = v87;
      *(void *)(v16 + 120) = &v85[8 * v84];
      if (v25)
      {
        operator delete(v25);
        uint64_t v59 = *(char **)(v16 + 104);
      }
    }
    else
    {
      uint64_t v59 = v25;
    }
    *((void *)v59 - 1) = v45;
    int v98 = *(char **)(v16 + 104);
    uint64_t v99 = *(char **)(v16 + 112);
    *(void *)(v16 + 104) = v98 - 8;
    uint64_t v100 = *((void *)v98 - 1);
    *(void *)(v16 + 104) = v98;
    if (v99 != *(char **)(v16 + 120)) {
      goto LABEL_133;
    }
    char v101 = *(char **)(v16 + 96);
    if (v98 > v101)
    {
      uint64_t v102 = (v98 - v101) >> 3;
      if (v102 >= -1) {
        uint64_t v103 = v102 + 1;
      }
      else {
        uint64_t v103 = v102 + 2;
      }
      uint64_t v104 = v103 >> 1;
      uint64_t v105 = -v104;
      int v106 = &v98[-8 * v104];
      size_t v107 = v99 - v98;
      if (v107)
      {
        memmove(&v98[-8 * v104], v98, v107);
        int v98 = *(char **)(v16 + 104);
      }
      uint64_t v108 = &v106[v107];
      *(void *)(v16 + 104) = &v98[8 * v105];
      *(void *)(v16 + 112) = v108;
      *(void *)uint64_t v108 = v100;
      goto LABEL_149;
    }
    if (v99 == v101) {
      unint64_t v118 = 1;
    }
    else {
      unint64_t v118 = (v99 - v101) >> 2;
    }
    if (v118 >> 61) {
      goto LABEL_177;
    }
    uint64_t v119 = (char *)operator new(8 * v118);
    int v120 = &v119[8 * (v118 >> 2)];
    int64_t v121 = v99 - v98;
    BOOL v55 = v99 == v98;
    uint64_t v99 = v120;
    if (!v55)
    {
      uint64_t v99 = &v120[v121 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v122 = v121 - 8;
      if (v122 < 0x38)
      {
        uint64_t v123 = &v119[8 * (v118 >> 2)];
        do
        {
LABEL_172:
          uint64_t v132 = *(void *)v98;
          v98 += 8;
          *(void *)uint64_t v123 = v132;
          v123 += 8;
        }
        while (v123 != v99);
        goto LABEL_173;
      }
      uint64_t v124 = &v119[8 * (v118 >> 2)];
      uint64_t v123 = v124;
      if ((unint64_t)(v124 - v98) < 0x20) {
        goto LABEL_172;
      }
      uint64_t v125 = (v122 >> 3) + 1;
      uint64_t v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v123 = &v120[v126];
      uint64_t v127 = &v98[v126];
      uint64_t v128 = (long long *)(v98 + 16);
      uint64_t v129 = v124 + 16;
      uint64_t v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *v128;
        *(v129 - 1) = *(v128 - 1);
        _OWORD *v129 = v131;
        v128 += 2;
        v129 += 2;
        v130 -= 4;
      }
      while (v130);
      int v98 = v127;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_172;
      }
    }
LABEL_173:
    *(void *)(v16 + 96) = v119;
    *(void *)(v16 + 104) = v120;
    *(void *)(v16 + 112) = v99;
    *(void *)(v16 + 120) = &v119[8 * v118];
    if (v101)
    {
      operator delete(v101);
      uint64_t v99 = *(char **)(v16 + 112);
    }
LABEL_133:
    *(void *)uint64_t v99 = v100;
    goto LABEL_149;
  }
  *(void *)int v24 = v44;
LABEL_149:
  *(void *)(v16 + 112) += 8;
LABEL_150:
  uint64_t v25 = *(char **)(v16 + 104);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = *(void *)(v16 + 128) + v28;
LABEL_151:
  *(void *)(*(void *)&v25[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = a2;
  *(void *)(v16 + 136) = v28 + 1;
  std::mutex::unlock(v18);
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    xpc_object_t v117 = v135;
    if (!v135) {
      return;
    }
  }
  else
  {
    xpc_object_t v117 = v135;
    if (!v135) {
      return;
    }
  }
  if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
}

void sub_21DF1A028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 112) = 3;
  if (*((void *)this + 17))
  {
    uint64_t v3 = (char *)this + 120;
    uint64_t v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        unint64_t v8 = (char *)*((void *)v5 + 1);
        uint64_t v7 = *((void *)v5 + 2);
        *((void *)v5 + 2) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
    }
  }

  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *this, const support::log::details *a2, char *a3)
{
  uint64_t v4 = (char *)this + 120;
  uint64_t v5 = *((void *)this + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)this + 120))
  {
    do
    {
      this = (support::log::manager *)(***(uint64_t (****)(void, const support::log::details *, char *))(v5 + 16))(*(void *)(v5 + 16), a2, a3);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }

  support::log::manager::release_log_buffer(this, a3);
}

void *support::log::client::client(void *a1, std::string *a2, std::string *a3, uint64_t a4)
{
  *a1 = &unk_26CEC92A8;
  std::string v85 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::string v84 = *a3;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a1[1] = &unk_26CECC3A8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_4, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_4))
  {
    *(_OWORD *)&qword_267D242B0 = 0u;
    *(_OWORD *)&qword_267D242A0 = 0u;
    dword_267D242C0 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_4);
  }
  std::mutex::lock(&_MergedGlobals_0);
  memset(__p, 170, 24);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v85.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = size + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (size + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size) {
      goto LABEL_16;
    }
  }
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v11 = &v85;
  }
  else {
    BOOL v11 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  memmove(p_dst, v11, size);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 44;
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v84;
  }
  else {
    uint64_t v12 = (std::string *)v84.__r_.__value_.__r.__words[0];
  }
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v84.__r_.__value_.__l.__size_;
  }
  unint64_t v14 = std::string::append(&__dst, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p)) {
      goto LABEL_156;
    }
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  uint64_t v16 = (char *)operator new(0x40uLL);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v87, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  }
  else {
    std::string v87 = v85;
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v86, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v86 = v84;
  }
  *(void *)uint64_t v16 = &unk_26CECC440;
  long long v17 = v16 + 8;
  *(std::string *)(v16 + 8) = v87;
  memset(&v87, 0, sizeof(v87));
  *(std::string *)(v16 + 32) = v86;
  memset(&v86, 0, sizeof(v86));
  if (v16[31] < 0)
  {
    long long v17 = *(const char **)v17;
    uint64_t v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  uint64_t v18 = *(const char **)v18;
LABEL_34:
  *((void *)v16 + 7) = os_log_create(v17, v18);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = (uint64_t *)__p;
  }
  else {
    uint64_t v19 = (uint64_t *)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = HIBYTE(__p[2]);
  }
  else {
    unint64_t v20 = (unint64_t)__p[1];
  }
  unint64_t v21 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v19, v20);
  unint64_t v22 = v21;
  unint64_t v23 = qword_267D242A8;
  if (qword_267D242A8)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)qword_267D242A8);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = v21;
      if (v21 >= qword_267D242A8) {
        unint64_t v25 = v21 % qword_267D242A8;
      }
    }
    else
    {
      unint64_t v25 = (qword_267D242A8 - 1) & v21;
    }
    uint64_t v26 = *(uint64_t ***)(qword_267D242A0 + 8 * v25);
    if (v26)
    {
      uint64_t v27 = *v26;
      if (*v26)
      {
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v28 = (void *)HIBYTE(__p[2]);
        }
        else {
          uint64_t v28 = __p[1];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          unint64_t v29 = __p;
        }
        else {
          unint64_t v29 = (void **)__p[0];
        }
        if (v24.u32[0] < 2uLL)
        {
          uint64_t v30 = qword_267D242A8 - 1;
          while (1)
          {
            uint64_t v36 = v27[1];
            if (v36 == v22)
            {
              uint64_t v37 = *((unsigned __int8 *)v27 + 39);
              if ((v37 & 0x80u) == 0) {
                uint64_t v38 = (void *)*((unsigned __int8 *)v27 + 39);
              }
              else {
                uint64_t v38 = (void *)v27[3];
              }
              if (v38 == v28)
              {
                int64_t v39 = (const void **)(v27 + 2);
                if ((v37 & 0x80) != 0)
                {
                  uint64_t v83 = v28;
                  uint64_t v41 = v30;
                  int v42 = memcmp(*v39, v29, v27[3]);
                  uint64_t v30 = v41;
                  uint64_t v28 = v83;
                  if (!v42) {
                    goto LABEL_154;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v27 + 39)) {
                    goto LABEL_154;
                  }
                  uint64_t v40 = v29;
                  while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v40)
                  {
                    int64_t v39 = (const void **)((char *)v39 + 1);
                    uint64_t v40 = (void **)((char *)v40 + 1);
                    if (!--v37) {
                      goto LABEL_154;
                    }
                  }
                }
              }
            }
            else if ((v36 & v30) != v25)
            {
              goto LABEL_90;
            }
            uint64_t v27 = (uint64_t *)*v27;
            if (!v27) {
              goto LABEL_90;
            }
          }
        }
        do
        {
          unint64_t v31 = v27[1];
          if (v31 == v22)
          {
            uint64_t v32 = *((unsigned __int8 *)v27 + 39);
            if ((v32 & 0x80u) == 0) {
              uint64_t v33 = (void *)*((unsigned __int8 *)v27 + 39);
            }
            else {
              uint64_t v33 = (void *)v27[3];
            }
            if (v33 == v28)
            {
              uint64_t v34 = (const void **)(v27 + 2);
              if ((v32 & 0x80) != 0)
              {
                if (!memcmp(*v34, v29, v27[3])) {
                  goto LABEL_154;
                }
              }
              else
              {
                if (!*((unsigned char *)v27 + 39)) {
                  goto LABEL_154;
                }
                uint64_t v35 = v29;
                while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v35)
                {
                  uint64_t v34 = (const void **)((char *)v34 + 1);
                  uint64_t v35 = (void **)((char *)v35 + 1);
                  if (!--v32) {
                    goto LABEL_154;
                  }
                }
              }
            }
          }
          else
          {
            if (v31 >= v23) {
              v31 %= v23;
            }
            if (v31 != v25) {
              break;
            }
          }
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
  else
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  uint64_t v43 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_267D242B0;
  *(void *)uint64_t v43 = 0;
  *((void *)v43 + 1) = v22;
  uint64_t v44 = (std::string *)(v43 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v44, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v43 + 4) = __p[2];
  }
  *((void *)v43 + 5) = v16;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  float v45 = (float)(unint64_t)(qword_267D242B8 + 1);
  if (!v23 || (float)(*(float *)&dword_267D242C0 * (float)v23) < v45)
  {
    BOOL v48 = 1;
    if (v23 >= 3) {
      BOOL v48 = (v23 & (v23 - 1)) != 0;
    }
    unint64_t v49 = v48 | (2 * v23);
    unint64_t v50 = vcvtps_u32_f32(v45 / *(float *)&dword_267D242C0);
    if (v49 <= v50) {
      unint64_t prime = v50;
    }
    else {
      unint64_t prime = v49;
    }
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    unint64_t v23 = qword_267D242A8;
    if (prime > qword_267D242A8) {
      goto LABEL_107;
    }
    if (prime >= qword_267D242A8) {
      goto LABEL_140;
    }
    unint64_t v62 = vcvtps_u32_f32((float)(unint64_t)qword_267D242B8 / *(float *)&dword_267D242C0);
    if ((unint64_t)qword_267D242A8 < 3
      || (uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)qword_267D242A8), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
    {
      unint64_t v62 = std::__next_prime(v62);
    }
    else
    {
      uint64_t v64 = 1 << -(char)__clz(v62 - 1);
      if (v62 >= 2) {
        unint64_t v62 = v64;
      }
    }
    if (prime <= v62) {
      unint64_t prime = v62;
    }
    if (prime >= v23)
    {
      unint64_t v23 = qword_267D242A8;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v52 = operator new(8 * prime);
        xpc_object_t v53 = (void *)qword_267D242A0;
        qword_267D242A0 = (uint64_t)v52;
        if (v53) {
          operator delete(v53);
        }
        uint64_t v54 = 0;
        qword_267D242A8 = prime;
        do
          *(void *)(qword_267D242A0 + 8 * v54++) = 0;
        while (prime != v54);
        BOOL v55 = (void **)qword_267D242B0;
        if (!qword_267D242B0) {
          goto LABEL_139;
        }
        unint64_t v56 = *(void *)(qword_267D242B0 + 8);
        unint64_t v57 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          unint64_t v58 = v56 & v57;
          *(void *)(qword_267D242A0 + 8 * v58) = &qword_267D242B0;
          for (uint64_t i = *v55; *v55; uint64_t i = *v55)
          {
            unint64_t v60 = i[1] & v57;
            if (v60 == v58)
            {
              BOOL v55 = (void **)i;
            }
            else if (*(void *)(qword_267D242A0 + 8 * v60))
            {
              *BOOL v55 = (void *)*i;
              uint64_t v61 = 8 * v60;
              *uint64_t i = **(void **)(qword_267D242A0 + v61);
              **(void **)(qword_267D242A0 + v61) = i;
            }
            else
            {
              *(void *)(qword_267D242A0 + 8 * v60) = v55;
              BOOL v55 = (void **)i;
              unint64_t v58 = v60;
            }
          }
LABEL_139:
          unint64_t v23 = prime;
          goto LABEL_140;
        }
        if (v56 >= prime) {
          v56 %= prime;
        }
        *(void *)(qword_267D242A0 + 8 * v56) = &qword_267D242B0;
        uint64_t v65 = *v55;
        if (!*v55) {
          goto LABEL_139;
        }
        while (1)
        {
          unint64_t v67 = v65[1];
          if (v67 >= prime) {
            v67 %= prime;
          }
          if (v67 == v56) {
            goto LABEL_133;
          }
          if (*(void *)(qword_267D242A0 + 8 * v67))
          {
            *BOOL v55 = (void *)*v65;
            uint64_t v66 = 8 * v67;
            *uint64_t v65 = **(void **)(qword_267D242A0 + v66);
            **(void **)(qword_267D242A0 + v66) = v65;
            uint64_t v65 = v55;
LABEL_133:
            BOOL v55 = (void **)v65;
            uint64_t v65 = (void *)*v65;
            if (!v65) {
              goto LABEL_139;
            }
          }
          else
          {
            *(void *)(qword_267D242A0 + 8 * v67) = v55;
            BOOL v55 = (void **)v65;
            uint64_t v65 = (void *)*v65;
            unint64_t v56 = v67;
            if (!v65) {
              goto LABEL_139;
            }
          }
        }
      }
      long long v82 = (void *)qword_267D242A0;
      qword_267D242A0 = 0;
      if (v82) {
        operator delete(v82);
      }
      unint64_t v23 = 0;
      qword_267D242A8 = 0;
    }
LABEL_140:
    unint64_t v68 = v23 - 1;
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23)
      {
        unint64_t v25 = v22 % v23;
        unint64_t v46 = *(void **)(qword_267D242A0 + 8 * (v22 % v23));
        uint64_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v46) {
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v25 = v22;
        unint64_t v46 = *(void **)(qword_267D242A0 + 8 * v22);
        uint64_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v46) {
          goto LABEL_96;
        }
      }
    }
    else
    {
      unint64_t v25 = v68 & v22;
      unint64_t v46 = *(void **)(qword_267D242A0 + 8 * (v68 & v22));
      uint64_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (v46) {
        goto LABEL_96;
      }
    }
LABEL_142:
    *uint64_t v47 = qword_267D242B0;
    qword_267D242B0 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(qword_267D242A0 + 8 * v25) = &qword_267D242B0;
    if (*(void *)__dst.__r_.__value_.__l.__data_)
    {
      unint64_t v69 = *(void *)(*(void *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v23 & (v23 - 1)) != 0)
      {
        if (v69 >= v23) {
          v69 %= v23;
        }
      }
      else
      {
        v69 &= v23 - 1;
      }
      *(void *)(qword_267D242A0 + 8 * v69) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  unint64_t v46 = *(void **)(qword_267D242A0 + 8 * v25);
  uint64_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!v46) {
    goto LABEL_142;
  }
LABEL_96:
  *uint64_t v47 = *v46;
  *unint64_t v46 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_267D242B8;
LABEL_154:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v86.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      int v70 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v70) {
        goto LABEL_157;
      }
LABEL_181:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v87.__r_.__value_.__l.__data_);
  int v70 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v70) {
    goto LABEL_181;
  }
LABEL_157:
  uint64_t v71 = v70[5];
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::mutex::unlock(&_MergedGlobals_0);
  a1[2] = v71;
  a1[3] = v71;
  a1[4] = v71 + 8;
  a1[5] = v71 + 32;
  a1[6] = v71 + 56;
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_161;
    }
LABEL_164:
    operator delete(v85.__r_.__value_.__l.__data_);
    if (a4) {
      goto LABEL_162;
    }
LABEL_165:
    pthread_mutex_lock(&stru_26AA8A330);
    if (qword_26AA8A370) {
      goto LABEL_166;
    }
    int64_t v72 = (char *)operator new(0xA8uLL);
    *((void *)v72 + 1) = 0;
    *((void *)v72 + 2) = 0;
    *(void *)int64_t v72 = &unk_26CECC508;
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CECC330;
    v86.__r_.__value_.__s.__data_[8] = 3;
    *((void *)v72 + 4) = 850045863;
    a4 = (uint64_t)(v72 + 24);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    *(_OWORD *)&v87.__r_.__value_.__r.__words[1] = (unint64_t)&v87;
    *((void *)v72 + 3) = &unk_26CECC348;
    *(_OWORD *)(v72 + 40) = 0u;
    *(_OWORD *)(v72 + 56) = 0u;
    *(_OWORD *)(v72 + 72) = 0u;
    *((void *)v72 + 11) = 0;
    __dst.__r_.__value_.__r.__words[0] = 0x6C61626F6C67;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 6;
    HIBYTE(__p[2]) = 12;
    strcpy((char *)__p, ".log_manager");
    unint64_t v73 = std::string::append(&__dst, (const std::string::value_type *)__p, 0xCuLL);
    uint64_t v74 = v72 + 96;
    long long v75 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    *((void *)v72 + 14) = *((void *)&v73->__r_.__value_.__l + 2);
    *((_OWORD *)v72 + 6) = v75;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_170:
        if ((v72[119] & 0x80000000) == 0)
        {
LABEL_171:
          *((void *)v72 + 15) = os_log_create("com.apple.telephony.basebandservices", v74);
          *((void *)v72 + 16) = &unk_26CECC330;
          v72[136] = v86.__r_.__value_.__s.__data_[8];
          *((void *)v72 + 18) = v72 + 144;
          *((void *)v72 + 19) = v72 + 144;
          *((void *)v72 + 20) = 0;
          std::string::size_type v76 = v87.__r_.__value_.__r.__words[2];
          if (v87.__r_.__value_.__r.__words[2])
          {
            long long v77 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
            uint64_t v78 = *(void *)v87.__r_.__value_.__l.__size_;
            *(void *)(v78 + 8) = *(void *)(v87.__r_.__value_.__r.__words[0] + 8);
            **(void **)(v77 + 8) = v78;
            uint64_t v79 = *((void *)v72 + 18);
            *(void *)(v79 + 8) = *((void *)&v77 + 1);
            **((void **)&v77 + 1) = v79;
            *((void *)v72 + 18) = v77;
            *(void *)(v77 + 8) = v72 + 144;
            *((void *)v72 + 20) = v76;
          }
          *((void *)v72 + 3) = &unk_26CECC378;
          uint64_t v80 = (std::__shared_weak_count *)off_26AA8A378;
          qword_26AA8A370 = (uint64_t)(v72 + 24);
          off_26AA8A378 = v72;
          if (!v80)
          {
LABEL_176:
            atomic_fetch_add_explicit((atomic_ullong *volatile)v72 + 1, 1uLL, memory_order_relaxed);
LABEL_177:
            pthread_mutex_unlock(&stru_26AA8A330);
            a1[7] = a4;
            a1[8] = v72;
            goto LABEL_178;
          }
          if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
LABEL_166:
          a4 = qword_26AA8A370;
          int64_t v72 = (char *)off_26AA8A378;
          if (!off_26AA8A378) {
            goto LABEL_177;
          }
          goto LABEL_176;
        }
LABEL_184:
        uint64_t v74 = *(const char **)v74;
        goto LABEL_171;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_170;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v72[119] & 0x80000000) == 0) {
      goto LABEL_171;
    }
    goto LABEL_184;
  }
  operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_164;
  }
LABEL_161:
  if (!a4) {
    goto LABEL_165;
  }
LABEL_162:
  a1[7] = 0;
  a1[8] = 0;
LABEL_178:
  a1[9] = a4;
  return a1;
}

void sub_21DF1AE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)(v44 - 112));
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&_MergedGlobals_0);
      if (a16 < 0) {
        operator delete(a11);
      }
      if (a23 < 0) {
        operator delete(a18);
      }
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a39);
    goto LABEL_8;
  }
  operator delete(a32);
  if ((a44 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void *support::log::client::client(void *a1, std::string *a2, std::string *a3)
{
  std::string v6 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::string __p = *a3;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  support::log::client::client(a1, &v6, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21DF1B08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  *(void *)this = &unk_26CECC348;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        unint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_26CECC348;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        unint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(void *a1)
{
  uint64_t v1 = a1;
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  unint64_t v6 = qword_267D242A8;
  if (!qword_267D242A8) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_267D242A8);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= qword_267D242A8) {
      unint64_t v9 = v5 % qword_267D242A8;
    }
  }
  else
  {
    unint64_t v9 = (qword_267D242A8 - 1) & v5;
  }
  BOOL v11 = *(uint64_t ***)(qword_267D242A0 + 8 * v9);
  if (v11)
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      char v13 = v1[23];
      if (v13 >= 0) {
        uint64_t v14 = v1[23];
      }
      else {
        uint64_t v14 = *((void *)v1 + 1);
      }
      if (v13 < 0) {
        uint64_t v1 = *(unsigned char **)v1;
      }
      if (v8.u32[0] < 2uLL)
      {
        uint64_t v15 = qword_267D242A8 - 1;
        while (1)
        {
          uint64_t v20 = v12[1];
          if (v20 == v7)
          {
            uint64_t v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0) {
              uint64_t v22 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v22 = v12[3];
            }
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23) {
                    return v12;
                  }
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v16 = v12[1];
        if (v16 == v7)
        {
          uint64_t v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = *((unsigned __int8 *)v12 + 39);
          }
          else {
            uint64_t v18 = v12[3];
          }
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3])) {
                return v12;
              }
            }
            else
            {
              if (!*((unsigned char *)v12 + 39)) {
                return v12;
              }
              uint64_t v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19) {
                  return v12;
                }
              }
            }
          }
        }
        else
        {
          if (v16 >= v6) {
            v16 %= v6;
          }
          if (v16 != v9) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v12 = (uint64_t *)*v12;
        if (!v12) {
          return result;
        }
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v23 + v26 + v27 + a3;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v25 + v28 + v36;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      uint64_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v49 + v47 + v58 + v48;
        uint64_t v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = &unk_26CECC440;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

{
  support::log::global_client_descriptor *v2;
  uint64_t vars8;

  *this = &unk_26CECC440;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (support::log::global_client_descriptor *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
  uint64_t v2 = (support::log::global_client_descriptor *)this;

LABEL_5:
  operator delete(v2);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECC470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECC470;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  *(void *)this = &unk_26CECC4C0;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      uint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t vars8;

  *(void *)this = &unk_26CECC4C0;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      uint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<char *>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<char *>::destroy(*a1);
    std::__tree<char *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECC508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECC508;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t __cxx_global_var_init_12()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

const char *BBUStageAsString(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = "initial";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "first";
      break;
    case 3:
      uint64_t result = "second";
      break;
    case 7:
      uint64_t result = "booted";
      break;
    case 15:
      uint64_t result = "provisioning";
      break;
    case 31:
      uint64_t result = "eUICC";
      break;
    default:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Common/BBUStages.cpp", 0xFu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU stage.\")", v4, v5, v6, v7);
  }
  return result;
}

void sub_21DF1C2B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BasebandCoredump::BasebandCoredump(BasebandCoredump *this)
{
  *(void *)this = &unk_26CECC558;
}

void BasebandCoredump::create(BasebandCoredump *this@<X0>, void *a2@<X8>)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v3 = 0u;
  uint64_t v2 = &unk_26CECC590;
  BYTE8(v6) = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  *a2 = 0;
  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  BasebandCoredumpParams::~BasebandCoredumpParams((BasebandCoredumpParams *)&v2);
}

void sub_21DF1C410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *long long v4 = 0;
  BasebandCoredumpParams::~BasebandCoredumpParams((BasebandCoredumpParams *)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandCoredump::create@<X0>(ACFULogging *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  ACFULogging::getLogInstance(a1);
  return ACFULogging::handleMessage();
}

void sub_21DF1C47C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void BasebandCoredumpParams::~BasebandCoredumpParams(BasebandCoredumpParams *this)
{
  *(void *)this = &unk_26CECC590;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  long long v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*((unsigned char *)this + 96)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)this + 96))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
LABEL_13:
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if (!*((unsigned char *)this + 32)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 32))
  {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  __b[89] = *MEMORY[0x263EF8340];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), unint64_t v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)))
  {
    BOOL v4 = 0;
    goto LABEL_5;
  }
  long long v7 = *(char **)a2;
  long long v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  unint64_t v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      *(void *)(a2 + 8) = &v7[v3];
    }
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v3) {
      uint64_t v12 = v3;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    uint64_t v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    uint64_t v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7) {
      goto LABEL_34;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v18 = v6 - 16;
      unint64_t v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)unint64_t v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_33;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v22 = &v6[-v17 - 8];
        uint64_t v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    uint64_t v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    long long v6 = v7;
    uint64_t v15 = v14;
LABEL_34:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(void *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  BOOL v4 = __b[1] == (int)v3;
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
LABEL_5:
  __b[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)__b + *(void *)(__b[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x223C1DAE0](&__b[2]);
  std::istream::~istream();
  MEMORY[0x223C1DDF0](&__b[53]);
  return v4;
}

void sub_21DF1C9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  unint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  long long v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x223C1DAD0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_21DF1CB64(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x223C1DDF0](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x223C1DAE0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x223C1DDF0](a1 + 53);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  unint64_t v17 = v10;
  uint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    unint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      size_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    unint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  size_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_21DF1CED4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x223C1DD80]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  size_t v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != &a2[v7]) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  return a1;
}

void sub_21DF1CF88(_Unwind_Exception *a1)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1CFA4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1CFFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *unint64_t v6 = &unk_26CECC718;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      uint64_t v10 = v3;
      unint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      size_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      uint64_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *uint64_t v14 = &unk_26CECC760;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1)) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    *int v12 = &unk_26CECCBE0;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    uint64_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_26CECCC28;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    long long v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26CECCBE0;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26CECCC28;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = v22 + 1;
    }
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    long long v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26CECCBE0;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26CECCC28;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1D770(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFAC6E4) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFAC6E4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFAC6E4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFAC6E4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x223C1DD80]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_21DF1DB14(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)uint64_t v8 = &unk_26CECC7F0;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1DC2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC7A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC7A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC7F0;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC7F0;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    uint64_t v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_21DF1E4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1E5C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1E61C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  char v9 = &v7[96 * v3];
  *(_OWORD *)char v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  uint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  int v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      long long v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      int v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    std::vector<std::csub_match>::size_type v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_21DF1EB84(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  long long v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  size_t v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    size_t v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        size_t v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1ED78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1F020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        long long v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        long long v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        unint64_t v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        long long v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        long long v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        unint64_t v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_21DF1F210(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1F224(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1F238(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1F24C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1F260(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF1F274(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_81;
      }
      std::basic_regex<char>::value_type v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v9;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_38;
            }
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_43;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_81;
      }
      char v13 = -87;
LABEL_43:
      if (v4 + 2 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_81:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::basic_regex<char>::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v16;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_81;
      }
      if (!a4) {
        goto LABEL_65;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_26CECC880;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    int v10 = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_26CECC8C8;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_26CECC910;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_21DF1FA90(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF1FB3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_26CECC958;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_26CECC9A0;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_26CECC9E8;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC880;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC880;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC8C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC8C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC958;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC958;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3, v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC9A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CECC9A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    std::basic_regex<char>::value_type v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::vector<std::csub_match>::size_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          char v13 = &v12[v18];
          unsigned __int8 v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          char v13 = &v5[-*v6];
          unsigned __int8 v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *uint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        uint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    long long v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      char v13 = &v12[v24];
      unsigned __int8 v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      char v13 = &v5[-*v6];
      unsigned __int8 v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        uint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *uint64_t v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unsigned int v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    char v13 = &v12[v8];
    unsigned __int8 v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    char v13 = (char *)(v5 - v7);
    unsigned __int8 v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  unint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *unint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    unint64_t v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    uint64_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    char v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_21DF20C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  uint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::string v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::string v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[11].__locale_;
  if (v6)
  {
    uint64_t v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      uint64_t v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  size_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)std::string __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *uint64_t v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    int v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              std::string v17 = __dst;
            }
            else {
              std::string v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      int v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_21DF2119C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    uint64_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)uint64_t v9 = 0;
  memset(a4, 170, 24);
  int v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    int v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_21DF2138C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF213EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  unint64_t v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      unint64_t v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    uint64_t v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      uint64_t v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v9 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  uint64_t v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(void)v10], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v11 = *(void *)(a4 + 144);
      if (v11 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)unint64_t v11 = v12;
        }
        *(void *)(a4 + 144) = v11 + 24;
        *(void *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  unint64_t v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    unint64_t v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    int v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      int v15 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    uint64_t v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      uint64_t v14 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0) {
      goto LABEL_38;
    }
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0) {
LABEL_38:
  }
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_21DF2163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      uint64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    uint64_t v34 = a2;
    if ((v16 & 0x80) != 0) {
      uint64_t v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      unint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      unint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        *uint64_t v38 = v37;
        goto LABEL_67;
      }
    }
    unint64_t v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    size_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      size_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    unint64_t v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_21DF224E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21DF224F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          size_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          uint64_t v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *uint64_t v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          size_t v18 = &v16[2 * v15];
          *uint64_t v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      size_t v18 = &v28[2 * v27];
      *uint64_t v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      size_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    unint64_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    size_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    uint64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  size_t v18 = &v45[2 * v44];
  *uint64_t v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  uint64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    char v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    unint64_t v60 = &v45[2 * v41 - 16];
    uint64_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      _OWORD *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF22974(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  memset(a4, 170, 24);
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_21DF22B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF22BF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    char v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v4);
    char v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  char v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)char v9 = 0;
  uint64_t v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    uint64_t v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, &v12[(void)v13]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v14 = (const char *)__dst;
  }
  else {
    unint64_t v14 = (const char *)__dst[0];
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  return classname;
}

void sub_21DF22D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *unint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      uint64_t v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unint64_t v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  __int16 v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    uint64_t v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      _OWORD *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *unint64_t v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21DF233A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF23408(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF23838(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF23890(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CECCB68;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CECCB68;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      long long v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        *long long v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CECCB68;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CECCB68;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CECCB68;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C1DA10](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21DF23D70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  uint64_t v7 = v6;
  if (v6 != (char *)a2 || v6 == a3) {
    return v7;
  }
  if ((char *)(a2 + 1) == a3) {
    return (char *)a2;
  }
  if (*(unsigned char *)a2 != 92) {
    return (char *)a2;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_26CECCA78;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_25;
      }
      long long v15 = v9;
      char v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v17 = *(_DWORD *)(a1 + 28);
      unint64_t v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      unint64_t v19 = operator new(0x18uLL);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(v20 + 8);
      void *v19 = &unk_26CECCAC0;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(void *)(v20 + 8) = v19;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return (char *)a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  uint64_t v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  uint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    uint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      uint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  long long v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      unint64_t v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    long long v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      long long v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  unint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 == a3 || v5 != 92)
      {
        if (v5 == 46)
        {
          int v10 = (std::__node<char> *)operator new(0x10uLL);
          std::vector<std::csub_match>::pointer end = this->__end_;
          first = end->__first_;
          v10->__vftable = (std::__node<char>_vtbl *)&unk_26CECCC70;
          v10[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v10;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return a2 + 1;
        }
      }
      else
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 != a2
    || (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 != a2))
  {
    if (v8 != a2) {
      goto LABEL_25;
    }
LABEL_4:
    if (v8 != a3)
    {
      int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
      if (locale_low == 36)
      {
        int v10 = operator new(0x18uLL);
        BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        uint64_t v12 = *(void *)(a1 + 56);
        v10[1] = *(void *)(v12 + 8);
        int v13 = &unk_26CECC760;
        goto LABEL_13;
      }
      if (locale_low != 40)
      {
        if (locale_low == 94)
        {
          int v10 = operator new(0x18uLL);
          BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
          uint64_t v12 = *(void *)(a1 + 56);
          v10[1] = *(void *)(v12 + 8);
          int v13 = &unk_26CECC718;
LABEL_13:
          void *v10 = v13;
          *((unsigned char *)v10 + 16) = v11;
          *(void *)(v12 + 8) = v10;
          goto LABEL_14;
        }
        return a2;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) != 0)
      {
        int v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v17 = operator new(0x18uLL);
        int v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(v19 + 8);
        *int v17 = &unk_26CECCA78;
        v17[1] = v20;
        *((_DWORD *)v17 + 4) = v18;
        *(void *)(v19 + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v21 == a3 || (unint64_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
        uint64_t v23 = operator new(0x18uLL);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = *(void *)(v24 + 8);
        *uint64_t v23 = &unk_26CECCAC0;
        v23[1] = v25;
        *((_DWORD *)v23 + 4) = v18;
        *(void *)(v24 + 8) = v23;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
LABEL_25:
    if (v8 != a2) {
      goto LABEL_26;
    }
    return a2;
  }
  if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2) {
      goto LABEL_25;
    }
    goto LABEL_4;
  }
  long long v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  *long long v14 = &unk_26CECCC70;
  v14[1] = v16;
  *(void *)(v15 + 8) = v14;
LABEL_14:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_26:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  int v3 = this;
  if (this == a3) {
    return (std::basic_regex<char>::value_type *)v3;
  }
  int v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::vector<std::csub_match>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        uint64_t v21 = a4 + 3;
      }
      else {
        uint64_t v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  size_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    std::string v85 = (void **)*((void *)&v99 + 1);
    std::string v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      std::string v86 = (void **)v100;
      std::string v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)int v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  uint64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          unint64_t v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            unint64_t v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            int v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                int64_t v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                unint64_t v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  uint64_t v74 = (void *)v69[1];
                  ++v69;
                  int v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              unint64_t v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                unint64_t v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        uint64_t v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        std::string v85 = (void **)*((void *)&v99 + 1);
        std::string v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            uint64_t v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        uint64_t v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        uint64_t v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)int v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_21DF256D8(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_21DF256EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_21DF25734(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_21DF25748(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  unint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    uint64_t v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_21DF25D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            unint64_t v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *unint64_t v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              std::string v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *std::string v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_21DF26528(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      _OWORD *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }

  operator delete(v46);
}

void sub_21DF26BF8(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  int i = (int)p_match[-1].__position_start_.__i_;
  unsigned __int32 flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin) {
    p_unmatched = &p_match->__unmatched_;
  }
  else {
    p_unmatched = begin;
  }
  unint64_t v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    unint64_t v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v18 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v20 = 0xAAAAAAAAAAAAAA00;
    long long v22 = v10;
    uint64_t v19 = 0;
    long long v21 = 0uLL;
    LOBYTE(v22) = 0;
    BYTE8(v22) = 0;
    uint64_t v23 = 0;
    memset(__p, 0, sizeof(__p));
    char v11 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, (std::vector<std::csub_match> *)__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if ((v11 & 1) == 0)
    {
      std::vector<std::ssub_match>::pointer begin = p_match->__matches_.__begin_;
      if (!p_match->__matches_.__begin_)
      {
LABEL_10:
        this->__match_.__ready_ = 0;
        *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
        *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
        *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                     + 1) = 0u;
        this->__match_.__prefix_.first.__i_ = 0;
        this->__match_.__prefix_.second.__i_ = 0;
        this->__match_.__prefix_.matched = 0;
        this->__match_.__suffix_.first.__i_ = 0;
        this->__match_.__suffix_.second.__i_ = 0;
        this->__match_.__suffix_.matched = 0;
        this->__match_.__position_start_.__i_ = 0;
        return this;
      }
LABEL_9:
      this->__match_.__matches_.__end_ = begin;
      operator delete(begin);
      p_match->__matches_.__begin_ = 0;
      p_match->__matches_.__end_ = 0;
      p_match->__matches_.__end_cap_.__value_ = 0;
      goto LABEL_10;
    }
    return this;
  }
  uint64_t v13 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v13 == v7)
  {
    if (!begin) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  std::vector<std::ssub_match>::size_type v14 = this->__pregex_;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAA00;
  long long v22 = v15;
  uint64_t v19 = 0;
  long long v21 = 0uLL;
  LOBYTE(v22) = 0;
  BYTE8(v22) = 0;
  uint64_t v23 = 0;
  memset(__p, 0, sizeof(__p));
  char v16 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v14, v7, v13, (std::vector<std::csub_match> *)__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v13, (uint64_t *)__p, 1);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if ((v16 & 1) == 0)
  {
    unint64_t v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    unsigned __int32 flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_21DF2747C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x223C1DD80]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    unint64_t v8 = (char *)a2;
  }
  else {
    unint64_t v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_21DF27548(_Unwind_Exception *a1)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_21DF27564(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  *unint64_t v6 = &unk_26CECC5C8;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  unint64_t v8 = operator new(0x20uLL);
  *unint64_t v8 = &unk_26CECC620;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = v7;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_21DF277B8(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    unint64_t v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  unint64_t v9 = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  char v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    std::vector<std::ssub_match>::size_type v12 = (std::__node<char> *)operator new(0x10uLL);
    uint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    long long v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    char v16 = a1->__end_;
    uint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    long long v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      unint64_t v8 = (std::basic_regex<char> *)v18;
      long long v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        uint64_t v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        long long v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            long long v22 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v23 = a1->__end_;
            uint64_t v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          uint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
          unint64_t v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_26CECCBE0;
          end->__first_ = v25;
          v16->__first_ = 0;
          unint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
          long long v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          unint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
          BOOL v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_26CECCC28;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          long long v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        long long v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *unint64_t v6 = &unk_26CECC718;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    BOOL v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      char v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (unsigned char *)v3) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::vector<std::ssub_match>::size_type v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *std::vector<std::ssub_match>::size_type v14 = &unk_26CECC760;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    char v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      char v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    *int v12 = &unk_26CECCBE0;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    std::vector<std::ssub_match>::size_type v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_26CECCC28;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      char v11 = v8;
    }
    else {
      char v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      char v11 = v8;
    }
    else {
      char v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    long long v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21) {
      long long v22 = v21;
    }
    else {
      long long v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26CECCBE0;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26CECCC28;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      char v11 = v22;
    }
    else {
      char v11 = v22 + 1;
    }
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      char v11 = v8;
    }
    else {
      char v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      char v11 = v8;
    }
    else {
      char v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    long long v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      long long v22 = v21;
    }
    else {
      long long v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26CECCBE0;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26CECCC28;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      char v11 = v22;
    }
    else {
      char v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_26CECC7A8;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_26CECC7A8;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    char v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_26CECC718;
LABEL_17:
    void *v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    char v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_26CECC760;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    unsigned int marked_count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_21DF284A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_21DF284BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_21DF284D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_21DF284E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        unsigned int marked_count = this->__marked_count_;
      }
      else
      {
        char v11 = (std::__node<char> *)operator new(0x18uLL);
        unsigned int marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_26CECCA78;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_26CECCAC0;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      uint64_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_26CECC838;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      uint64_t v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    unint64_t v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    unint64_t v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      unint64_t v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        unint64_t v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    int64_t v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      uint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  unint64_t v4 = a2;
  if (*a2 == 92)
  {
    int v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      unint64_t v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        unint64_t v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            unint64_t v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    unint64_t v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_21DF28F0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  BOOL v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_21DF292E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF292F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF29308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF2931C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF29330(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF29344(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65) {
        goto LABEL_85;
      }
      unsigned int v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_85;
      }
      std::basic_regex<char>::value_type v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v10;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_85;
      }
      char v14 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_85:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::basic_regex<char>::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v17;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_85;
      }
      if (!a4) {
        goto LABEL_68;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  int v7 = a2;
  if (v6 == 93) {
    return v7;
  }
  unsigned int v8 = (char *)a4;
  int v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  int v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      uint64_t v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2) {
        goto LABEL_91;
      }
      uint64_t v15 = 0;
      int64_t v16 = v5 + 4;
      std::basic_regex<char>::value_type v17 = (unsigned __int8 *)v4;
      uint64_t v18 = v16;
      if (v4[2] == 58) {
        goto LABEL_15;
      }
      do
      {
        do
        {
          if (!v18) {
            goto LABEL_91;
          }
          std::basic_regex<char>::value_type v17 = (unsigned __int8 *)&v4[++v15];
          uint64_t v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      uint64_t v19 = &v4[v15 + 2];
      if (v19 == a3) {
LABEL_91:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      int v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      }
      char v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      unsigned int v8 = &v4[v15 + 4];
      int v7 = v4;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      char v13 = 0;
      int v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    int v11 = 0;
    goto LABEL_36;
  }
  BOOL v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_92;
  }
  std::basic_regex<char> v22 = (unsigned __int8 *)(v4 + 2);
  BOOL v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46) {
    goto LABEL_24;
  }
  do
  {
    do
    {
      if (a3 - 4 == v4) {
        goto LABEL_92;
      }
      ++v4;
      std::basic_regex<char> v22 = v23;
      int v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3) {
LABEL_92:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = v44;
  *(_OWORD *)std::vector<std::csub_match> __p = v43;
  size_t v25 = (char *)HIBYTE(v44);
  int v11 = SHIBYTE(v44);
  uint64_t v26 = *((void *)&v43 + 1);
  if (v44 < 0) {
    size_t v25 = (char *)__p[1];
  }
  if ((unint64_t)(v25 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = (char *)(v22 + 2);
  int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0) {
    uint64_t v26 = HIBYTE(v44);
  }
  if (v26)
  {
    if (v4 == a3) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      int64_t v31 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  int v28 = *v4;
  if (v28 != 92) {
    goto LABEL_44;
  }
  unint64_t v29 = v4 + 1;
  if (v27) {
    int v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  }
  else {
    int v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  }
  unint64_t v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1]) {
        goto LABEL_69;
      }
      if (__p[1] != (void *)1)
      {
        uint64_t v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        char v13 = 1;
        int v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      uint64_t v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42)) {
        goto LABEL_69;
      }
      uint64_t v33 = __p;
      if (HIBYTE(v42) != 1) {
        goto LABEL_68;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  int v32 = *v4;
  if (v32 == 93) {
    goto LABEL_52;
  }
  unint64_t v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93) {
    goto LABEL_52;
  }
  long long v43 = 0uLL;
  int64_t v44 = 0;
  int v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if (v34 == 92)
      {
        if (v27) {
          unint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        }
        else {
          unint64_t v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        }
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  unint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  int v7 = v35;
LABEL_82:
  *(_OWORD *)BOOL v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1] = 0;
  uint64_t v42 = 0;
  __p[0] = 0;
  *(_OWORD *)BOOL v37 = v43;
  uint64_t v38 = v44;
  long long v43 = 0uLL;
  int64_t v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete((void *)v43);
      char v13 = 1;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_89;
  }
LABEL_85:
  char v13 = 1;
  if (SHIBYTE(v42) < 0) {
LABEL_70:
  }
    operator delete(__p[0]);
LABEL_71:
  if (v13) {
    return v7;
  }
  return v8;
}

void sub_21DF29F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  int v7 = a2;
  unsigned int v8 = a2;
  unsigned int v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unsigned int v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    std::basic_regex<char>::value_type v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      std::basic_regex<char>::value_type v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    int64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_21DF2A254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  int v7 = a2;
  unsigned int v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      int v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unsigned int v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unsigned int v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unsigned int v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unsigned int v8 = a2 + 3;
      }
      else {
        unsigned int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    std::basic_regex<char>::value_type v9 = __s;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  std::basic_regex<char>::value_type v9 = (char *)operator new(v16 + 1);
  *(void *)&__s[8] = v5;
  *(void *)&__s[16] = v17 | 0x8000000000000000;
  *(void *)__s = v9;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  int v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  std::basic_regex<char>::value_type v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  int v12 = (long long *)(a2 + 16);
  long long v13 = v9 + 16;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *long long v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  char *v10 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (!*(void *)&__s[8]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!__s[23]) {
      return;
    }
    uint64_t v19 = __s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (*(void *)&__s[8] >= 3uLL) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (__s[23] < 3u)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v26);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v26;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0) {
            int v24 = __s;
          }
          else {
            int v24 = *(char **)__s;
          }
          if (__s[23] >= 0) {
            size_t v25 = __s[23];
          }
          else {
            size_t v25 = *(void *)&__s[8];
          }
          std::string::__assign_no_alias<false>((void **)a4, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((void *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(void *)(a4 + 16) = *(void *)&__s[16];
          }
        }
      }
      else
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_21DF2AE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    std::basic_regex<char>::value_type v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  std::basic_regex<char>::value_type v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
  }
  else
  {
    int v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    std::basic_regex<char>::value_type v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    int v12 = (long long *)(a2 + 16);
    long long v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *long long v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_21DF2B06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(unsigned char *)a2 != 92) {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_26CECCA78;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      unint64_t v14 = v9;
      long long v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      std::basic_regex<char>::value_type v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    int v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      char v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      *char v18 = &unk_26CECCAC0;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  std::basic_regex<char>::value_type v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  int v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      long long v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      long long v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    long long v15 = a3;
    std::basic_regex<char>::value_type v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15;
  }
  else
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        int v10 = (std::__node<char> *)operator new(0x10uLL);
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_26CECCC70;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        *int v9 = &unk_26CECCC70;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_26CECC760;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      *int v17 = &unk_26CECCA78;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    unint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (int v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      *uint64_t v23 = &unk_26CECCAC0;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_26CECC718;
LABEL_14:
  *uint64_t v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  unint64_t v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = -86;
  MEMORY[0x223C1DB20](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    BOOL v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_21DF2BF28(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x21DF2BEE8);
  }
  __cxa_rethrow();
}

void sub_21DF2BFA4(_Unwind_Exception *a1)
{
}

uint64_t BBUEURProgrammer::enableStepThroughImages(uint64_t this)
{
  *(unsigned char *)(this + 80) = 1;
  return this;
}

uint64_t BBUEURProgrammer::getConnectTries(BBUEURProgrammer *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t BBUEURProgrammer::getConnectTimeout(BBUEURProgrammer *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t BBUEURProgrammer::getCommandTimeout(BBUEURProgrammer *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t BBUEURProgrammer::getEFSErasePollTimeUSec(BBUEURProgrammer *this)
{
  return 50000;
}

uint64_t BBUEURProgrammer::getEFSEraseIndicated(BBUEURProgrammer *this)
{
  return 0;
}

uint64_t BBUFusing::BBUFusing(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_26CECCD78;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(unsigned char *)(result + 24) = 0;
  *(_WORD *)(result + 55) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(_WORD *)(result + 79) = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUFusing.cpp", 0x15u, (ctu::LogMessageBuffer *)"Failed to get feedback", v4, v5, v6, v7);
  }
  return result;
}

void sub_21DF2C09C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*(void **)(v1 + 56));
    if ((*(char *)(v1 + 55) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 32));
  _Unwind_Resume(exception_object);
}

_DWORD *BBUFusing::create(capabilities::updater *a1, uint64_t a2)
{
  FusingCFNumberType Type = capabilities::updater::getFusingType(a1);
  if (FusingType)
  {
    if (FusingType == 1)
    {
      int v9 = operator new(0x60uLL);
      uint64_t v10 = (capabilities::fusing *)BBUFusing::BBUFusing((uint64_t)v9, (uint64_t)a1, a2);
      *(void *)int v9 = &unk_26CECC040;
      char v11 = (capabilities::fusing *)capabilities::fusing::modeSetTimeout(v10);
      v9[21] = v11;
      v9[22] = capabilities::fusing::commandTimeout(v11);
      *(void *)int v9 = &unk_26CED0070;
      return v9;
    }
    else
    {
      if (FusingType == 2)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUFusing.cpp", 0x2Au, (ctu::LogMessageBuffer *)"Unrecognized radio type!", v13, v14, v15, v16);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v6 = operator new(0x60uLL);
    char v7 = (capabilities::fusing *)BBUFusing::BBUFusing((uint64_t)v6, (uint64_t)a1, a2);
    *(void *)uint64_t v6 = &unk_26CECC040;
    uint64_t v8 = (capabilities::fusing *)capabilities::fusing::modeSetTimeout(v7);
    v6[21] = v8;
    v6[22] = capabilities::fusing::commandTimeout(v8);
    *(void *)uint64_t v6 = &unk_26CECD440;
    return v6;
  }
}

void sub_21DF2C26C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF2C280(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_26CECCD78;
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*(void **)(v1 + 56));
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      operator delete((void *)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 32));
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_21DF2C308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BBUMatureProvisioningData::BBUMatureProvisioningData(BBUMatureProvisioningData *this, BBUDataSource *a2, BBUDataSource *a3)
{
  *(void *)this = &unk_26CECCDC0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v5 = (const void **)((char *)this + 16);
  if (a2) {
    BBUMatureProvisioningData::loadDataSourceToData((uint64_t)this, (const void **)this + 1, (uint64_t)a2);
  }
  if (a3) {
    BBUMatureProvisioningData::loadDataSourceToData((uint64_t)this, v5, (uint64_t)a3);
  }
}

void sub_21DF2C3A0(_Unwind_Exception *exception_object)
{
  if (*v2) {
    CFRelease(*v2);
  }
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void BBUMatureProvisioningData::~BBUMatureProvisioningData(BBUMatureProvisioningData *this)
{
  *(void *)this = &unk_26CECCDC0;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  BOOL v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
}

{
  const void *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CECCDC0;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  BOOL v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }

  operator delete(this);
}

uint64_t BBUMatureProvisioningData::loadDataSourceToData(uint64_t a1, const void **a2, uint64_t a3)
{
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x10) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x10) == 0) {
      goto LABEL_5;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    _BBULog(20, 0, v6, "", "\n", v7, v8, v9, v23);
  }
LABEL_5:
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  char v11 = (UInt8 *)operator new[](v10);
  int v24 = -1431655766;
  (*(void (**)(uint64_t, UInt8 *, uint64_t, int *, void))(*(void *)a3 + 16))(a3, v11, v10, &v24, 0);
  if (v24 != v10)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 57, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUMatureProvisioningData.cpp", 0x30u, (ctu::LogMessageBuffer *)"Assertion failure(amountCopied == dataSize && \"Unable to copy manifest data to finish provisioning.\")", v17, v18, v19, v23);
    goto LABEL_14;
  }
  CFDataRef v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v11, v10);
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 57, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUMatureProvisioningData.cpp", 0x33u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Unable to copy manifest data to finish provisioning.\")", v20, v21, v22, v23);
LABEL_14:
  }
  CFDataRef v13 = v12;
  uint64_t v14 = *a2;
  *a2 = v13;
  if (v14) {
    CFRelease(v14);
  }
  operator delete[](v11);
  return 0;
}

void sub_21DF2C6B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF2C6C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *BBUMatureProvisioningData::getDebugName(BBUMatureProvisioningData *this)
{
  return "BBUMatureProvisioningData";
}

void *BBUProvisioner::create(BBUProvisioner *this, BBUFeedback *a2)
{
  ProvisionerCFNumberType Type = capabilities::updater::getProvisionerType(this);
  if (ProvisionerType)
  {
    if (ProvisionerType == 1)
    {
      uint64_t result = operator new(0x18uLL);
      result[1] = this;
      *((_DWORD *)result + 4) = 0;
      *((unsigned char *)result + 20) = 1;
      *uint64_t result = &unk_26CECD4D0;
    }
    else
    {
      if (ProvisionerType == 2)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioner.cpp", 0x1Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v8, v9, v10, v11);
      }
      return (void *)v2;
    }
  }
  else
  {
    uint64_t v6 = operator new(0x20uLL);
    BBUEURProvisioner::BBUEURProvisioner((uint64_t)v6, (uint64_t)this, 0);
    *uint64_t v6 = &unk_26CECCE00;
    return v6;
  }
  return result;
}

void sub_21DF2C7F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF2C808(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProvisioner::begin(uint64_t a1, void *lpsrc, uint64_t a3, capabilities::euicc *a4)
{
  if (lpsrc)
  {
    uint64_t result = eUICC::getEID(a4, a3, *(BBUFeedback **)(a1 + 8));
    if (result == 126) {
      return result;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = eUICC::getEID(a4, a3, *(BBUFeedback **)(a1 + 8));
    if (result == 126) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 16) != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioner.cpp", 0x3Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid BBU provisionin support type.\")", v11, v12, v13, v14);
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, void *, uint64_t, capabilities::euicc *))(*(void *)a1 + 48);

  return v9(a1, v7, a3, a4);
}

void sub_21DF2C974(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProvisioner::finish(_DWORD *a1, void *lpsrc, uint64_t a3)
{
  if (lpsrc) {
  if (a1[4] != 1)
  }
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioner.cpp", 0x4Fu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid BBU provisionin support type.\")", v8, v9, v10, v11);
  }
  uint64_t v5 = *(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)a1 + 56);

  return v5(a1, lpsrc, a3);
}

void sub_21DF2CA88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_13()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t eUICC::ClearMetadata::GetListOfIccids(int a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_11, "VinylClearMetadata::GetListOfIccids: Requesting Profile List\n", a6, a7, a8, v37);
  char v11 = operator new(7uLL);
  unint64_t v57 = (char *)v11 + 7;
  uint64_t v58 = (char *)v11 + 7;
  *(_DWORD *)char v11 = 1543777727;
  v11[2] = 23042;
  *((unsigned char *)v11 + 6) = -107;
  uint64_t v55 = 0;
  uint64_t v56 = v11;
  BOOL v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  __int16 v51 = 0;
  (*(void (**)(void, void **, unsigned char **, __int16 *))(*(void *)*a3 + 48))(*a3, &v56, &v53, &v51);
  uint64_t v48 = 0;
  unint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v12 = v53;
  size_t v13 = v54 - v53;
  if (v54 != v53)
  {
    if ((v13 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v48 = (char *)operator new(v54 - v53);
    unint64_t v50 = &v48[v13];
    memcpy(v48, v12, v13);
    unint64_t v49 = &v48[v13];
  }
  *(void *)&long long v42 = 0;
  if (ctu::cf::convert_copy())
  {
    CFDataRef v17 = (const __CFData *)v42;
    uint64_t v52 = v42;
    uint64_t v18 = v48;
    if (!v48) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CFDataRef v17 = 0;
  uint64_t v18 = v48;
  if (v48)
  {
LABEL_10:
    unint64_t v49 = v18;
    operator delete(v18);
  }
LABEL_11:
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_11, "VinylClearMetadata::GetListOfIccids: Extracting Profile List\n", v14, v15, v16, v38);
  memset(v47, 170, sizeof(v47));
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  CFIndex Length = CFDataGetLength(v17);
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], Length, v17);
  v45[2] = (unint64_t)MutableCopy;
  v45[0] = (unint64_t)CFDataGetMutableBytePtr(MutableCopy);
  v45[1] = CFDataGetLength(MutableCopy);
  if (DERDecodeSeqContentInit(v45, &v47[2]))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_15:
      uint64_t v25 = "DR_Success == der_ret";
LABEL_16:
      _BBULog(25, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_11, "Condition <<%s>> failed %s %s/%d\n", v22, v23, v24, (char)v25);
      uint64_t v26 = 1;
      goto LABEL_17;
    }
LABEL_69:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_15;
  }
  if (DERDecodeSeqNext(&v47[2], &v46) || v46 != 0xA00000000000002DLL)
  {
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    uint64_t v25 = "DR_Success == der_ret && TAG_PILR == dec.tag";
    goto LABEL_16;
  }
  if (DERDecodeSeqContentInit(v47, &v47[2]))
  {
    if (gBBULogMaskGet(void)::once == -1) {
      goto LABEL_15;
    }
    goto LABEL_69;
  }
  if (DERDecodeSeqNext(&v47[2], &v46) || v46 != 0xA000000000000000)
  {
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    uint64_t v25 = "DR_Success == der_ret && TAG_PILR_OK == dec.tag";
    goto LABEL_16;
  }
  if (DERDecodeSeqContentInit(v47, &v47[2]))
  {
    if (gBBULogMaskGet(void)::once == -1) {
      goto LABEL_15;
    }
    goto LABEL_69;
  }
  uint64_t v26 = 0;
  while (DERDecodeSeqNext(&v47[2], &v46) != 1)
  {
    memset(v44, 170, sizeof(v44));
    *(void *)&long long v31 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v31;
    long long v43 = v31;
    CFTypeRef cf = 0;
    if (!DERDecodeSeqContentInit(v47, (unint64_t *)&v44[1]))
    {
      if (v46 != 0xE000000000000003)
      {
        if (gBBULogMaskGet(void)::once != -1) {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        }
        unint64_t v35 = "DR_Success == der_ret && TAG_PI == dec.tag";
        goto LABEL_45;
      }
      {
        if (gBBULogMaskGet(void)::once == -1) {
          goto LABEL_44;
        }
      }
      else
      {
        CFDataRef v40 = CFDataCreate(v20, (const UInt8 *)v42, *((CFIndex *)&v42 + 1));
        ctu::cf::CFSharedRef<__CFData const>::operator=(&cf, (const void **)&v40);
        if (!DERParseInteger((char **)&v43, v44))
        {
          if (!a1 || v44[0] == 1)
          {
            std::vector<ctu::cf::CFSharedRef<__CFData const>>::push_back[abi:ne180100](a2, cf);
            int v36 = 0;
          }
          else
          {
            int v36 = 3;
          }
          goto LABEL_46;
        }
        if (gBBULogMaskGet(void)::once == -1) {
          goto LABEL_44;
        }
      }
LABEL_65:
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      goto LABEL_44;
    }
    if (gBBULogMaskGet(void)::once != -1) {
      goto LABEL_65;
    }
LABEL_44:
    unint64_t v35 = "DR_Success == der_ret";
LABEL_45:
    _BBULog(25, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_11, "Condition <<%s>> failed %s %s/%d\n", v32, v33, v34, (char)v35);
    int v36 = 2;
    uint64_t v26 = 1;
LABEL_46:
    if (cf) {
      CFRelease(cf);
    }
    if (v36 && v36 != 3) {
      goto LABEL_17;
    }
  }
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_11, "VinylClearMetadata::GetListOfIccids: Successfully populated ICCID list!\n", v28, v29, v30, v39);
LABEL_17:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v56)
  {
    unint64_t v57 = v56;
    operator delete(v56);
  }
  return v26;
}

void sub_21DF2D124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v27 - 144));
  uint64_t v30 = *(void **)(v27 - 136);
  if (v30)
  {
    *(void *)(v27 - 128) = v30;
    operator delete(v30);
    uint64_t v29 = *(void **)(v27 - 112);
    if (v29)
    {
LABEL_6:
      *(void *)(v27 - 104) = v29;
      operator delete(v29);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v29 = *(void **)(v27 - 112);
    if (v29) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData const>::operator=(const void **a1, const void **a2)
{
  BOOL v3 = *a1;
  *a1 = *a2;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void std::vector<ctu::cf::CFSharedRef<__CFData const>>::push_back[abi:ne180100](uint64_t a1, CFTypeRef cf)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v6 = v5 + 8;
    goto LABEL_22;
  }
  uint64_t v7 = *(char **)a1;
  uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
  uint64_t v9 = v8 >> 3;
  unint64_t v10 = (v8 >> 3) + 1;
  if (v10 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v7;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v13 = (char *)operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    *(void *)uint64_t v14 = cf;
    if (!cf)
    {
LABEL_14:
      uint64_t v15 = &v13[8 * v12];
      uint64_t v6 = v14 + 8;
      uint64_t v16 = (char *)(v5 - v7);
      if (v5 != v7) {
        goto LABEL_15;
      }
LABEL_19:
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v15;
      goto LABEL_20;
    }
  }
  else
  {
    size_t v13 = 0;
    uint64_t v14 = (char *)(8 * v9);
    *(void *)(8 * v9) = cf;
    if (!cf) {
      goto LABEL_14;
    }
  }
  CFRetain(cf);
  uint64_t v7 = *(char **)a1;
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v15 = &v13[8 * v12];
  uint64_t v6 = v14 + 8;
  uint64_t v16 = &v5[-*(void *)a1];
  if (v5 == *(char **)a1) {
    goto LABEL_19;
  }
LABEL_15:
  unint64_t v17 = (unint64_t)(v16 - 8);
  if (v17 < 0x78)
  {
    uint64_t v18 = v5;
    goto LABEL_29;
  }
  if (&v13[v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v14)
  {
    uint64_t v18 = v5;
    do
    {
LABEL_29:
      uint64_t v25 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v14 - 1) = v25;
      v14 -= 8;
      *(void *)uint64_t v18 = 0;
    }
    while (v18 != v7);
    goto LABEL_30;
  }
  uint64_t v19 = (v17 >> 3) + 1;
  uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v14 -= v20;
  uint64_t v18 = &v5[-v20];
  uint64_t v21 = v5 - 16;
  uint64_t v22 = &v13[8 * v9 - 16];
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *(_OWORD *)v21;
    *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
    *(_OWORD *)uint64_t v22 = v24;
    *((_OWORD *)v21 - 1) = 0uLL;
    *(_OWORD *)uint64_t v21 = 0uLL;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v7 = *(char **)a1;
  uint64_t v26 = *(char **)(a1 + 8);
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v15;
  while (v26 != v7)
  {
    uint64_t v28 = (const void *)*((void *)v26 - 1);
    v26 -= 8;
    uint64_t v27 = v28;
    if (v28) {
      CFRelease(v27);
    }
  }
LABEL_20:
  if (v7) {
    operator delete(v7);
  }
LABEL_22:
  *(void *)(a1 + 8) = v6;
}

uint64_t eUICC::ClearMetadata::ClearMetadataForIccids(CFDataRef **a1, void *a2)
{
  uint64_t v2 = *a1;
  BOOL v3 = a1[1];
  if (*a1 != v3)
  {
    long long v13 = xmmword_21DFACB28;
    do
    {
      uint64_t v5 = (char *)operator new(0x15uLL);
      uint64_t v19 = v5 + 21;
      uint64_t v20 = v5 + 21;
      *(_OWORD *)uint64_t v5 = v13;
      *(void *)(v5 + 13) = 0x8002E100000000;
      uint64_t v18 = v5;
      BytePtr = CFDataGetBytePtr(*v2);
      uint64_t v7 = (char *)v18;
      uint64_t v8 = *(void *)BytePtr;
      *(_DWORD *)((char *)v18 + 13) = *((_DWORD *)BytePtr + 2);
      *(void *)(v7 + 5) = v8;
      std::vector<std::csub_match> __p = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      __int16 v14 = 0;
      (*(void (**)(void, void **, void **, __int16 *))(*(void *)*a2 + 48))(*a2, &v18, &__p, &v14);
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_11, "VinylClearMetadata::ClearMetadataForIccids: Attempted metadata clear for ICCID\n", v9, v10, v11, v13);
      if (__p)
      {
        uint64_t v16 = __p;
        operator delete(__p);
      }
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return 0;
}

void sub_21DF2D5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::ClearMetadata::Perform(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_11, "VinylClearMetadata::Perform: onlyBootstrap=%d\n", a6, a7, a8, a1);
  std::vector<std::csub_match> __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  eUICC::ClearMetadata::GetListOfIccids(a1, (uint64_t)&__p, a2, v10, v11, v12, v13, v14);
  eUICC::ClearMetadata::ClearMetadataForIccids((CFDataRef **)&__p, a2);
  uint64_t v15 = (char *)__p;
  if (__p)
  {
    for (int i = v21; i != v15; i -= 8)
    {
      uint64_t v18 = (const void *)*((void *)i - 1);
      uint64_t v17 = v18;
      if (v18) {
        CFRelease(v17);
      }
    }
    operator delete(v15);
  }
  return 0;
}

void sub_21DF2D6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<ctu::cf::CFSharedRef<__CFData const>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<ctu::cf::CFSharedRef<__CFData const>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    BOOL v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void BasebandRestore::create(BasebandRestore *this@<X0>, ACFULogging **a2@<X8>)
{
  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  *a2 = (ACFULogging *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (ACFULogging *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (char *)operator new(0x1E8uLL);
  ACFURestore::ACFURestore((ACFURestore *)v5);
  *((void *)v5 + 42) = 0;
  *((void *)v5 + 43) = 0;
  *(void *)uint64_t v5 = &unk_26CECCE80;
  *((_DWORD *)v5 + 93) = 0;
  *((_WORD *)v5 + 188) = 0;
  v5[384] = 0;
  v5[392] = 0;
  *((_DWORD *)v5 + 100) = 0;
  v5[404] = 0;
  *((void *)v5 + 59) = 0;
  v5[480] = 0;
  *((void *)v5 + 44) = 0;
  *((void *)v5 + 45) = 0;
  v5[368] = 0;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 450) = 0u;
  *a2 = (ACFULogging *)v5;
  uint64_t v6 = (atomic_ullong *)operator new(0x20uLL);
  uint64_t v7 = (std::__shared_weak_count *)v6;
  v6[2] = 0;
  v6[1] = 0;
  *uint64_t v6 = (atomic_ullong)&unk_26CECCF50;
  v6[3] = (atomic_ullong)v5;
  a2[1] = (ACFULogging *)v6;
  atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(v6 + 2, 1uLL, memory_order_relaxed);
  *((void *)v5 + 42) = v5;
  *((void *)v5 + 43) = v6;
  if (!atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v6 + 16))(v6);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = *a2;
    if (*a2) {
      goto LABEL_3;
    }
LABEL_10:
    ACFULogging::getLogInstance(v8);
    ACFULogging::handleMessage();
    return;
  }
  uint64_t v8 = *a2;
  if (!*a2) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v9 = (ACFULogging *)(*(uint64_t (**)(ACFULogging *, BasebandRestore *, __CFString *))(*(void *)v8 + 40))(v8, this, @"Cellular1,Ticket");
  if (v9)
  {
    ACFULogging::getLogInstance(v9);
    ACFULogging::handleMessage();
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (v10)
    {
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_21DF2D9B8(_Unwind_Exception *a1)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_21DF2D9CC(_Unwind_Exception *a1)
{
  BasebandRestore::~BasebandRestore(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_21DF2D9E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF2D9F8(_Unwind_Exception *a1)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BasebandRestore::~BasebandRestore(BasebandRestore *this)
{
  *(void *)this = &unk_26CECCE80;
  uint64_t v2 = (const void *)*((void *)this + 59);
  if (v2) {
    CFRelease(v2);
  }
  BOOL v3 = (const void *)*((void *)this + 57);
  if (v3) {
    CFRelease(v3);
  }
  unint64_t v4 = (const void *)*((void *)this + 56);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 55);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }

  MEMORY[0x270F0D300](this);
}

{
  void *v1;
  uint64_t vars8;

  BasebandRestore::~BasebandRestore(this);

  operator delete(v1);
}

uint64_t BasebandRestore::init(BasebandRestore *this, const __CFDictionary *a2, const void *a3)
{
  uint64_t v225 = *MEMORY[0x263EF8340];
  CFTypeRef v219 = 0;
  uint64_t valuePtr = 0;
  uint64_t v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26CECCFA0;
  uint64_t v7 = (ACFULogging *)MEMORY[0x223C1D890](v6 + 3, @"BasebandRestore");
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v7;
  *((void *)this + 45) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ACFULogging::getLogInstance(v7);
  uint64_t v9 = (ACFULogging *)ACFULogging::handleMessage();
  if (!a2)
  {
    ACFULogging::getLogInstance(v9);
LABEL_375:
    ACFULogging::handleMessage();
    uint64_t v36 = 1;
    goto LABEL_354;
  }
  if (CFDictionaryGetValue(a2, @"Options"))
  {
    CFMutableDictionaryRef v198 = 0;
    CFMutableDictionaryRef MutableCopy = a2;
    goto LABEL_10;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, a2);
  if (!MutableCopy)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_375;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage();
    uint64_t v36 = 1;
    CFRelease(MutableCopy);
    goto LABEL_354;
  }
  CFDictionaryAddValue(MutableCopy, @"Options", Mutable);
  CFRelease(Mutable);
  CFMutableDictionaryRef v198 = MutableCopy;
LABEL_10:
  uint64_t v13 = (ACFULogging *)ACFURestore::init(this, MutableCopy, a3);
  if (!v13)
  {
    ParseUpdaterDebugArgs(MutableCopy, (BasebandRestore *)((char *)this + 368));
    UpdaterDebugArgs::print((BasebandRestore *)((char *)this + 368));
    uint64_t v13 = (ACFULogging *)(*(uint64_t (**)(BasebandRestore *))(*(void *)this + 104))(this);
    if (!v13)
    {
      Value = CFDictionaryGetValue(a2, @"BootMode");
      if (!Value) {
        goto LABEL_15;
      }
      AMSupportSafeRetain();
      CFTypeID v15 = CFGetTypeID(Value);
      TypeID = (ACFULogging *)CFNumberGetTypeID();
      if ((ACFULogging *)v15 == TypeID)
      {
        uint64_t v17 = (ACFULogging *)CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, (char *)&valuePtr + 4);
        if (v17)
        {
LABEL_15:
          if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 15), @"skipCoredump"))
          {
            CFBooleanRef v18 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 15), @"skipCoredump");
            CFBooleanRef v19 = v18;
            if (!v18) {
              goto LABEL_363;
            }
            CFTypeID v20 = CFGetTypeID(v18);
            uint64_t v21 = (ACFULogging *)CFBooleanGetTypeID();
            if ((ACFULogging *)v20 != v21) {
              goto LABEL_364;
            }
            BOOL v22 = CFBooleanGetValue(v19) == 0;
          }
          else
          {
            BOOL v22 = 1;
          }
          if (ACFURestore::isInternalBuild(this))
          {
            if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 15), @"noTimeout"))
            {
              CFBooleanRef v23 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 15), @"noTimeout");
              CFBooleanRef v24 = v23;
              if (v23)
              {
                CFTypeID v25 = CFGetTypeID(v23);
                uint64_t v21 = (ACFULogging *)CFBooleanGetTypeID();
                if ((ACFULogging *)v25 == v21)
                {
                  uint64_t v26 = (ACFULogging *)CFBooleanGetValue(v24);
                  int v27 = (int)v26;
                  ACFULogging::getLogInstance(v26);
                  BOOL v195 = v27 != 0;
                  ACFULogging::handleMessage();
                  unint64_t v197 = Value;
                  if (!v22) {
                    goto LABEL_35;
                  }
                  goto LABEL_29;
                }
LABEL_364:
                ACFULogging::getLogInstance(v21);
                ACFULogging::handleMessage();
LABEL_383:
                uint64_t v82 = 0;
                uint64_t v65 = 0;
                CFTypeRef cf = 0;
                uint64_t v36 = 4002;
                goto LABEL_344;
              }
LABEL_363:
              ACFULogging::getLogInstance(0);
              ACFULogging::handleMessage();
LABEL_381:
              uint64_t v82 = 0;
              uint64_t v65 = 0;
              CFTypeRef cf = 0;
              uint64_t v36 = 1005;
              goto LABEL_344;
            }
            BOOL v195 = *((unsigned char *)this + 368) != 0;
            unint64_t v197 = Value;
            if (!v22) {
              goto LABEL_35;
            }
          }
          else
          {
            BOOL v195 = 0;
            unint64_t v197 = Value;
            if (!v22) {
              goto LABEL_35;
            }
          }
LABEL_29:
          if ((HIDWORD(valuePtr) - 1) <= 1)
          {
            v216.__r_.__value_.__r.__words[0] = 0;
            int v28 = CFDictionaryContainsKey(*((CFDictionaryRef *)this + 15), @"coreDumpPath");
            CFDictionaryRef v29 = (const __CFDictionary *)*((void *)this + 15);
            if (v28)
            {
              uint64_t v30 = CFDictionaryGetValue(v29, @"coreDumpPath");
              long long v31 = v30;
              if (!v30) {
                goto LABEL_386;
              }
              CFTypeID v32 = CFGetTypeID(v30);
              uint64_t v33 = (ACFULogging *)CFStringGetTypeID();
              if ((ACFULogging *)v32 != v33) {
                goto LABEL_388;
              }
              CFTypeID v34 = CFGetTypeID(v31);
              unint64_t v35 = (ACFULogging *)CFStringGetTypeID();
              if ((ACFULogging *)v34 == v35) {
                unint64_t v35 = (ACFULogging *)CFRetain(v31);
              }
              else {
                long long v31 = 0;
              }
              v216.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              if (v31) {
                uint64_t v88 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
              }
              else {
                uint64_t v88 = 0;
              }
              if (!v88)
              {
                ACFULogging::getLogInstance(v35);
                ACFULogging::handleMessage();
                goto LABEL_390;
              }
              CFDictionaryRef v29 = (const __CFDictionary *)*((void *)this + 15);
            }
            else
            {
              long long v31 = 0;
            }
            if (!CFDictionaryContainsKey(v29, @"coreDumpPathNoTimestamp"))
            {
              if (v31) {
                uint64_t v94 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
              }
              else {
                uint64_t v94 = 0;
              }
              if (v94)
              {
LABEL_129:
                *(void *)&long long v95 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v95 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&v223[12] = v95;
                long long v222 = v95;
                *(_OWORD *)v223 = v95;
                *(_OWORD *)v221 = v95;
                v224.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                v224.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
                v218.__r_.__value_.__r.__words[0] = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v224);
                int64_t v96 = v224.__r_.__value_.__r.__words[0];
                uint64_t v97 = localtime((const time_t *)&v218);
                strftime(v221, 0x3CuLL, "%Y-%m-%d-%H-%M-%S", v97);
                CFStringRef v98 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@/log-bb-%s-%u-cd/", v31, v221, ((int)(v96 / 1000) % 1000));
                std::string::size_type v92 = v216.__r_.__value_.__r.__words[0];
                v216.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
                if (v92) {
                  CFRelease((CFTypeRef)v92);
                }
LABEL_131:
                ACFULogging::getLogInstance((ACFULogging *)v92);
                *((unsigned char *)&v218.__r_.__value_.__s + 23) = 15;
                strcpy((char *)&v218, "BasebandRestore");
                long long v99 = std::string::append(&v218, "::", 2uLL);
                long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                v224.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v100;
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                long long v101 = std::string::append(&v224, "init", 4uLL);
                long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                *(void *)&long long v222 = *((void *)&v101->__r_.__value_.__l + 2);
                *(_OWORD *)v221 = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                uint64_t v103 = (ACFULogging *)ACFULogging::handleMessageCFType();
                if (SBYTE7(v222) < 0)
                {
                  operator delete(*(void **)v221);
                  if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_133:
                    if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_134;
                    }
LABEL_139:
                    operator delete(v218.__r_.__value_.__l.__data_);
LABEL_134:
                    ACFULogging::getLogInstance(v103);
                    ACFULogging::handleMessage();
                    ACFUDiagnostics::create((ACFUDiagnostics *)v216.__r_.__value_.__l.__data_, 0);
                    uint64_t v106 = *(void *)v221;
                    if (*(void *)v221)
                    {
                      size_t v107 = operator new(0x20uLL);
                      *size_t v107 = &unk_26CECCFF0;
                      v107[1] = 0;
                      v107[2] = 0;
                      v107[3] = v106;
                      *(void *)v221 = 0;
                      uint64_t v108 = (std::__shared_weak_count *)*((void *)this + 24);
                      *((void *)this + 23) = v106;
                      *((void *)this + 24) = v107;
                      if (!v108) {
                        goto LABEL_143;
                      }
                    }
                    else
                    {
                      *(void *)v221 = 0;
                      uint64_t v108 = (std::__shared_weak_count *)*((void *)this + 24);
                      *((void *)this + 23) = 0;
                      *((void *)this + 24) = 0;
                      if (!v108)
                      {
LABEL_143:
                        uint64_t v109 = *(ACFULogging **)v221;
                        *(void *)v221 = 0;
                        if (v109)
                        {
                          uint64_t v110 = (void *)MEMORY[0x223C1CEA0](v109, v104, v105);
                          operator delete(v110);
                        }
                        if (*((void *)this + 23)) {
                          goto LABEL_146;
                        }
                        ACFULogging::getLogInstance(v109);
                        ACFULogging::handleMessage();
LABEL_390:
                        char v111 = 0;
                        uint64_t v36 = 4008;
                        goto LABEL_147;
                      }
                    }
                    if (!atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                      std::__shared_weak_count::__release_weak(v108);
                    }
                    goto LABEL_143;
                  }
                }
                else if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_133;
                }
                operator delete(v224.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_134;
                }
                goto LABEL_139;
              }
LABEL_146:
              uint64_t v36 = 0;
              char v111 = 1;
LABEL_147:
              if (v216.__r_.__value_.__r.__words[0]) {
                CFRelease(v216.__r_.__value_.__l.__data_);
              }
              if ((v111 & 1) == 0)
              {
                uint64_t v82 = 0;
                uint64_t v65 = 0;
                CFTypeRef cf = 0;
                Value = v197;
                goto LABEL_344;
              }
              Value = v197;
LABEL_36:
              if (ACFURestore::isInternalBuild(this)
                && CFDictionaryContainsKey(*((CFDictionaryRef *)this + 15), @"askToReset"))
              {
                CFBooleanRef v37 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 15), @"askToReset");
                CFBooleanRef v38 = v37;
                if (!v37)
                {
LABEL_380:
                  ACFULogging::getLogInstance(0);
                  ACFULogging::handleMessage();
                  goto LABEL_381;
                }
                CFTypeID v39 = CFGetTypeID(v37);
                CFDataRef v40 = (ACFULogging *)CFBooleanGetTypeID();
                if ((ACFULogging *)v39 != v40)
                {
LABEL_382:
                  ACFULogging::getLogInstance(v40);
                  ACFULogging::handleMessage();
                  goto LABEL_383;
                }
                BOOL v41 = CFBooleanGetValue(v38) != 0;
              }
              else
              {
                BOOL v41 = 0;
              }
              if (!CFDictionaryContainsKey(*((CFDictionaryRef *)this + 15), @"skipReset"))
              {
                BOOL v45 = 0;
LABEL_47:
                CFTypeRef cf = CFDictionaryGetValue(a2, @"ImageTransferSegmentSizeBytes");
                if (cf)
                {
                  AMSupportSafeRetain();
                  CFTypeID v46 = CFGetTypeID(cf);
                  CFTypeID v47 = CFNumberGetTypeID();
                  if (v46 != v47) {
                    goto LABEL_371;
                  }
                  CFTypeID v47 = CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
                  if (!v47) {
                    goto LABEL_371;
                  }
                  ACFULogging::getLogInstance((ACFULogging *)v47);
                  ACFULogging::handleMessage();
                }
                if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 15), @"BBUtilCmd"))
                {
                  CFBooleanRef v48 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 15), @"BBUtilCmd");
                  CFBooleanRef v49 = v48;
                  if (!v48) {
                    goto LABEL_368;
                  }
                  CFTypeID v50 = CFGetTypeID(v48);
                  CFTypeID v47 = CFBooleanGetTypeID();
                  if (v50 != v47) {
                    goto LABEL_371;
                  }
                  *((unsigned char *)this + 464) = CFBooleanGetValue(v49) != 0;
                }
                if (!CFDictionaryContainsKey(*((CFDictionaryRef *)this + 15), @"ccBoot"))
                {
LABEL_59:
                  if (*((unsigned char *)this + 404))
                  {
                    KTLDebugRegisterDelegate();
                    KTLDebugSetFlags();
                  }
                  isPreflight = (ACFULogging *)ACFURestore::isPreflight(this);
                  if (isPreflight)
                  {
                    ACFULogging::getLogInstance(isPreflight);
                    ACFULogging::handleMessage();
                    unsigned int isInternalBuild = ACFURestore::isInternalBuild(this);
                    uint64_t v56 = valuePtr;
                    if (v41) {
                      int v57 = 256;
                    }
                    else {
                      int v57 = 0;
                    }
                    if (v195) {
                      int v58 = 0x1000000;
                    }
                    else {
                      int v58 = 0;
                    }
                    uint64_t v59 = (std::__shared_weak_count *)*((void *)this + 24);
                    v202 = (void *)*((void *)this + 23);
                    v203 = v59;
                    if (v59) {
                      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    unint64_t v60 = (std::__shared_weak_count *)*((void *)this + 43);
                    uint64_t v200 = *((void *)this + 42);
                    v201 = v60;
                    if (v60) {
                      atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    }
                    BasebandUpdaterTransport::create(&v202, &v200, isInternalBuild | (unint64_t)(v56 << 32) | 0xAAAAAA00, v58 | v57 | v22, (uint64_t *)v221);
                    uint64_t v61 = *(void *)v221;
                    if (*(void *)v221)
                    {
                      float64x2x2_t v62 = operator new(0x20uLL);
                      *float64x2x2_t v62 = &unk_26CECD090;
                      v62[1] = 0;
                      v62[2] = 0;
                      v62[3] = v61;
                      *(void *)v221 = 0;
                      float64x2x2_t v63 = (std::__shared_weak_count *)*((void *)this + 22);
                      *((void *)this + 21) = v61;
                      *((void *)this + 22) = v62;
                      if (!v63) {
                        goto LABEL_93;
                      }
                    }
                    else
                    {
                      *(void *)v221 = 0;
                      float64x2x2_t v63 = (std::__shared_weak_count *)*((void *)this + 22);
                      *((void *)this + 21) = 0;
                      *((void *)this + 22) = 0;
                      if (!v63) {
                        goto LABEL_93;
                      }
                    }
                    if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
LABEL_93:
                    uint64_t v79 = *(void *)v221;
                    *(void *)v221 = 0;
                    if (v79) {
                      (*(void (**)(uint64_t))(*(void *)v79 + 64))(v79);
                    }
                    uint64_t v80 = v201;
                    if (v201) {
                      std::__shared_weak_count::__release_weak(v201);
                    }
                    long long v81 = v203;
                    if (v203 && !atomic_fetch_add(&v203->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                    if (!*((void *)this + 21))
                    {
                      ACFULogging::getLogInstance((ACFULogging *)v80);
                      ACFULogging::handleMessage();
                      uint64_t v82 = 0;
                      uint64_t v65 = 0;
                      uint64_t v36 = 4008;
                      goto LABEL_344;
                    }
                    uint64_t v82 = 0;
                    uint64_t v65 = 0;
                    std::string::size_type v83 = *((void *)this + 51);
                    std::string::size_type v84 = *((void *)this + 52);
                    v224.__r_.__value_.__r.__words[0] = v83;
                    v224.__r_.__value_.__l.__size_ = v84;
                    if (!v84) {
                      goto LABEL_102;
                    }
LABEL_258:
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
                    LOWORD(v224.__r_.__value_.__r.__words[2]) = 0;
                    v224.__r_.__value_.__s.__data_[18] = 1;
                    *(void *)&v221[8] = v83;
                    *(void *)&long long v222 = v84;
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
                    std::string::size_type v83 = *((void *)this + 51);
                    std::string::size_type v157 = *((void *)this + 52);
                    *(_DWORD *)v221 = 0;
                    WORD4(v222) = v224.__r_.__value_.__r.__words[2];
                    BYTE10(v222) = v224.__r_.__value_.__s.__data_[18];
                    v218.__r_.__value_.__r.__words[0] = v83;
                    v218.__r_.__value_.__l.__size_ = v157;
                    if (v157)
                    {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v157 + 8), 1uLL, memory_order_relaxed);
                      LOWORD(v218.__r_.__value_.__r.__words[2]) = 0;
                      v218.__r_.__value_.__s.__data_[18] = 0;
                      *(_DWORD *)v223 = 3;
                      *(void *)&v223[8] = v83;
                      *(void *)&v223[16] = v157;
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v157 + 8), 1uLL, memory_order_relaxed);
                      goto LABEL_261;
                    }
LABEL_260:
                    LOWORD(v218.__r_.__value_.__r.__words[2]) = 0;
                    v218.__r_.__value_.__s.__data_[18] = 0;
                    *(_DWORD *)v223 = 3;
                    *(void *)&v223[8] = v83;
                    *(void *)&v223[16] = 0;
LABEL_261:
                    *(_WORD *)&v223[24] = v218.__r_.__value_.__r.__words[2];
                    v223[26] = v218.__r_.__value_.__s.__data_[18];
                    unint64_t v196 = v65;
                    if (*((void *)this + 5))
                    {
                      uint64_t v159 = (uint64_t *)((char *)this + 32);
                      uint64_t v158 = *((void *)this + 4);
                      uint64_t v160 = *((void *)this + 3);
                      *((void *)this + 3) = (char *)this + 32;
                      *(void *)(v158 + 16) = 0;
                      *((void *)this + 4) = 0;
                      *((void *)this + 5) = 0;
                      uint64_t v161 = *(void *)(v160 + 8) ? *(void **)(v160 + 8) : (void *)v160;
                      if (v161)
                      {
                        uint64_t v162 = (void *)v161[2];
                        if (v162)
                        {
                          uint64_t v163 = (void *)*v162;
                          uint64_t v164 = v82;
                          if ((void *)*v162 == v161)
                          {
                            *uint64_t v162 = 0;
                            while (1)
                            {
                              xpc_object_t v188 = (void *)v162[1];
                              if (!v188) {
                                break;
                              }
                              do
                              {
                                uint64_t v162 = v188;
                                xpc_object_t v188 = (void *)*v188;
                              }
                              while (v188);
                            }
                          }
                          else
                          {
                            for (v162[1] = 0; v163; uint64_t v163 = (void *)v162[1])
                            {
                              do
                              {
                                uint64_t v162 = v163;
                                uint64_t v163 = (void *)*v163;
                              }
                              while (v163);
                            }
                          }
                        }
                        else
                        {
                          uint64_t v164 = v82;
                        }
                        int v177 = 0;
                        uint64_t v178 = 0;
                        while (1)
                        {
                          uint64_t v179 = *v159;
                          std::string v180 = (void *)((char *)this + 32);
                          v181 = (void *)((char *)this + 32);
                          if (*v159)
                          {
                            while (1)
                            {
                              while (1)
                              {
                                v181 = (void *)v179;
                                int v182 = *(_DWORD *)(v179 + 32);
                                if (v177 >= v182) {
                                  break;
                                }
                                uint64_t v179 = *v181;
                                std::string v180 = v181;
                                if (!*v181) {
                                  goto LABEL_298;
                                }
                              }
                              if (v182 >= v177) {
                                break;
                              }
                              uint64_t v179 = v181[1];
                              if (!v179)
                              {
                                std::string v180 = v181 + 1;
                                goto LABEL_298;
                              }
                            }
                            v184 = v162;
                            if (++v178 == 2)
                            {
LABEL_317:
                              std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(v161);
                              if (!v184) {
                                goto LABEL_331;
                              }
                              for (int i = (void *)v184[2]; i; int i = (void *)i[2])
                                v184 = i;
                              goto LABEL_330;
                            }
                          }
                          else
                          {
LABEL_298:
                            *((_DWORD *)v161 + 8) = v177;
                            RestoreStep::operator=();
                            void *v161 = 0;
                            v161[1] = 0;
                            v161[2] = v181;
                            *std::string v180 = v161;
                            uint64_t v183 = **((void **)this + 3);
                            if (v183)
                            {
                              *((void *)this + 3) = v183;
                              uint64_t v161 = (void *)*v180;
                            }
                            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 4), v161);
                            ++*((void *)this + 5);
                            if (!v162)
                            {
                              uint64_t v165 = v178 + 1;
                              if (v178 != 1) {
                                goto LABEL_273;
                              }
                              goto LABEL_331;
                            }
                            v184 = (void *)v162[2];
                            if (v184)
                            {
                              v185 = (void *)*v184;
                              if ((void *)*v184 == v162)
                              {
                                void *v184 = 0;
                                while (1)
                                {
                                  v186 = (void *)v184[1];
                                  if (!v186) {
                                    break;
                                  }
                                  do
                                  {
                                    v184 = v186;
                                    v186 = (void *)*v186;
                                  }
                                  while (v186);
                                }
                              }
                              else
                              {
                                for (v184[1] = 0; v185; v185 = (void *)v184[1])
                                {
                                  do
                                  {
                                    v184 = v185;
                                    v185 = (void *)*v185;
                                  }
                                  while (v185);
                                }
                              }
                              uint64_t v161 = v162;
                              if (++v178 == 2) {
                                goto LABEL_317;
                              }
                            }
                            else
                            {
                              if (++v178 == 2)
                              {
                                v184 = v162;
LABEL_330:
                                std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(v184);
                                goto LABEL_331;
                              }
                              v184 = 0;
                              uint64_t v161 = v162;
                            }
                          }
                          int v177 = *(_DWORD *)&v221[32 * v178];
                          uint64_t v162 = v184;
                        }
                      }
                    }
                    uint64_t v164 = v82;
                    uint64_t v165 = 0;
LABEL_273:
                    uint64_t v166 = (uint64_t **)((char *)this + 32);
                    do
                    {
                      char v167 = *v166;
                      int v168 = *(_DWORD *)&v221[32 * v165];
                      uint64_t v169 = (uint64_t **)((char *)this + 32);
                      uint64_t v170 = (uint64_t **)((char *)this + 32);
                      if (*v166)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            uint64_t v170 = (uint64_t **)v167;
                            int v171 = *((_DWORD *)v167 + 8);
                            if (v168 >= v171) {
                              break;
                            }
                            char v167 = *v170;
                            uint64_t v169 = v170;
                            if (!*v170) {
                              goto LABEL_283;
                            }
                          }
                          if (v171 >= v168) {
                            break;
                          }
                          char v167 = v170[1];
                          if (!v167)
                          {
                            uint64_t v169 = v170 + 1;
                            goto LABEL_283;
                          }
                        }
                      }
                      else
                      {
LABEL_283:
                        uint64_t v172 = (uint64_t *)operator new(0x40uLL);
                        uint64_t v173 = v172;
                        *((_DWORD *)v172 + 8) = v168;
                        uint64_t v174 = &v221[32 * v165];
                        uint64_t v175 = *((void *)v174 + 2);
                        v172[5] = *((void *)v174 + 1);
                        v172[6] = v175;
                        if (v175) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 8), 1uLL, memory_order_relaxed);
                        }
                        *((_WORD *)v172 + 28) = *((_WORD *)v174 + 12);
                        *((unsigned char *)v172 + 58) = v174[26];
                        *uint64_t v172 = 0;
                        v172[1] = 0;
                        v172[2] = (uint64_t)v170;
                        NSObject *v169 = v172;
                        uint64_t v176 = **((void **)this + 3);
                        if (v176)
                        {
                          *((void *)this + 3) = v176;
                          uint64_t v173 = *v169;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 4), v173);
                        ++*((void *)this + 5);
                      }
                      ++v165;
                    }
                    while (v165 != 2);
LABEL_331:
                    char v189 = *(std::__shared_weak_count **)&v223[16];
                    if (*(void *)&v223[16]
                      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v223[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                      std::__shared_weak_count::__release_weak(v189);
                    }
                    v190 = (std::__shared_weak_count *)v222;
                    Value = v197;
                    uint64_t v82 = v164;
                    if ((void)v222 && !atomic_fetch_add((atomic_ullong *volatile)(v222 + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                      std::__shared_weak_count::__release_weak(v190);
                    }
                    std::string::size_type size = (std::__shared_weak_count *)v218.__r_.__value_.__l.__size_;
                    uint64_t v65 = v196;
                    if (v218.__r_.__value_.__l.__size_
                      && !atomic_fetch_add((atomic_ullong *volatile)(v218.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                    std::string v192 = (std::__shared_weak_count *)v224.__r_.__value_.__l.__size_;
                    if (v224.__r_.__value_.__l.__size_
                      && !atomic_fetch_add((atomic_ullong *volatile)(v224.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                      std::__shared_weak_count::__release_weak(v192);
                    }
                    ACFUError::createAppendedDomain(*((ACFUError **)this + 13), @"BasebandRestore");
                    uint64_t v36 = 0;
LABEL_344:
                    if (!Value) {
                      goto LABEL_346;
                    }
                    goto LABEL_345;
                  }
                  if ((HIDWORD(valuePtr) - 1) < 2)
                  {
                    uint64_t v65 = CFDictionaryGetValue(a2, @"firmwareDataFolder");
                    if (v65)
                    {
                      AMSupportSafeRetain();
                      CFTypeID v66 = CFGetTypeID(v65);
                      uint64_t v67 = (ACFULogging *)CFStringGetTypeID();
                      if ((ACFULogging *)v66 != v67)
                      {
                        ACFULogging::getLogInstance(v67);
                        ACFULogging::handleMessage();
                        uint64_t v82 = 0;
                        uint64_t v36 = 4002;
                        goto LABEL_344;
                      }
                      GetBasebandTatsuTagToFileNameMap(v215);
                      RTKitFirmware::create();
                      uint64_t v68 = *(void *)v221;
                      if (*(void *)v221)
                      {
                        unint64_t v69 = operator new(0x20uLL);
                        *unint64_t v69 = &unk_26CECD040;
                        v69[1] = 0;
                        v69[2] = 0;
                        v69[3] = v68;
                        *(void *)v221 = 0;
                        uint64_t v70 = (std::__shared_weak_count *)*((void *)this + 20);
                        *((void *)this + 19) = v68;
                        *((void *)this + 20) = v69;
                        if (!v70) {
                          goto LABEL_159;
                        }
                      }
                      else
                      {
                        *(void *)v221 = 0;
                        uint64_t v70 = (std::__shared_weak_count *)*((void *)this + 20);
                        *((void *)this + 19) = 0;
                        *((void *)this + 20) = 0;
                        if (!v70)
                        {
LABEL_159:
                          uint64_t v117 = *(void *)v221;
                          *(void *)v221 = 0;
                          if (v117) {
                            (*(void (**)(uint64_t))(*(void *)v117 + 56))(v117);
                          }
                          std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v215, (char *)v215[1]);
                          if (!*((void *)this + 19))
                          {
                            ACFULogging::getLogInstance(v118);
                            ACFULogging::handleMessage();
                            uint64_t v82 = 0;
                            uint64_t v36 = 1000;
                            goto LABEL_344;
                          }
                          uint64_t v82 = 0;
LABEL_206:
                          unsigned int v134 = ACFURestore::isInternalBuild(this);
                          uint64_t v135 = valuePtr;
                          int v136 = 256;
                          if (!v41) {
                            int v136 = 0;
                          }
                          int v137 = 0x10000;
                          if (!v45) {
                            int v137 = 0;
                          }
                          int v138 = 0x1000000;
                          if (!v195) {
                            int v138 = 0;
                          }
                          uint64_t v139 = (std::__shared_weak_count *)*((void *)this + 24);
                          v212 = (void *)*((void *)this + 23);
                          v213 = v139;
                          if (v139) {
                            atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          int v140 = (std::__shared_weak_count *)*((void *)this + 43);
                          uint64_t v210 = *((void *)this + 42);
                          v211 = v140;
                          if (v140) {
                            atomic_fetch_add_explicit(&v140->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                          }
                          BasebandUpdaterTransport::create(&v212, &v210, v134 | (unint64_t)(v135 << 32) | 0xAAAAAA00, v138 | v136 | v22 | v137, (uint64_t *)v221);
                          uint64_t v141 = *(void *)v221;
                          if (*(void *)v221)
                          {
                            uint64_t v142 = operator new(0x20uLL);
                            *uint64_t v142 = &unk_26CECD090;
                            v142[1] = 0;
                            v142[2] = 0;
                            v142[3] = v141;
                            *(void *)v221 = 0;
                            dispatch_time_t v143 = (std::__shared_weak_count *)*((void *)this + 22);
                            *((void *)this + 21) = v141;
                            *((void *)this + 22) = v142;
                            if (!v143) {
                              goto LABEL_222;
                            }
                          }
                          else
                          {
                            *(void *)v221 = 0;
                            dispatch_time_t v143 = (std::__shared_weak_count *)*((void *)this + 22);
                            *((void *)this + 21) = 0;
                            *((void *)this + 22) = 0;
                            if (!v143) {
                              goto LABEL_222;
                            }
                          }
                          if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                            std::__shared_weak_count::__release_weak(v143);
                          }
LABEL_222:
                          uint64_t v144 = *(void *)v221;
                          *(void *)v221 = 0;
                          if (v144) {
                            (*(void (**)(uint64_t))(*(void *)v144 + 64))(v144);
                          }
                          uint64_t v145 = (ACFULogging *)v211;
                          if (v211) {
                            std::__shared_weak_count::__release_weak(v211);
                          }
                          uint64_t v146 = v213;
                          if (v213 && !atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                            std::__shared_weak_count::__release_weak(v146);
                          }
                          uint64_t v147 = *((void *)this + 21);
                          if (!v147) {
                            goto LABEL_377;
                          }
                          LOWORD(v218.__r_.__value_.__l.__data_) = 256;
                          int v148 = (std::__shared_weak_count *)*((void *)this + 22);
                          uint64_t v208 = v147;
                          v209 = v148;
                          if (v148) {
                            atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v149 = (std::__shared_weak_count *)*((void *)this + 20);
                          uint64_t v206 = *((void *)this + 19);
                          uint64_t v207 = v149;
                          if (v149) {
                            atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v150 = (std::__shared_weak_count *)*((void *)this + 24);
                          uint64_t v204 = *((void *)this + 23);
                          uint64_t v205 = v150;
                          if (v150) {
                            atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v145 = (ACFULogging *)ACFURTKitROM::create();
                          long long v151 = *(_OWORD *)v221;
                          memset(v221, 0, sizeof(v221));
                          v152 = (std::__shared_weak_count *)*((void *)this + 52);
                          *(_OWORD *)((char *)this + 408) = v151;
                          if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                            std::__shared_weak_count::__release_weak(v152);
                          }
                          v153 = *(std::__shared_weak_count **)&v221[8];
                          if (*(void *)&v221[8]
                            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v221[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                            std::__shared_weak_count::__release_weak(v153);
                          }
                          if (v205 && !atomic_fetch_add(&v205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                            std::__shared_weak_count::__release_weak(v205);
                          }
                          if (v207 && !atomic_fetch_add(&v207->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                            std::__shared_weak_count::__release_weak(v207);
                          }
                          if (v209 && !atomic_fetch_add(&v209->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                            std::__shared_weak_count::__release_weak(v209);
                          }
                          if (!*((void *)this + 51))
                          {
LABEL_377:
                            ACFULogging::getLogInstance(v145);
                            ACFULogging::handleMessage();
                            uint64_t v36 = 4008;
                            goto LABEL_344;
                          }
                          int v154 = (char *)this + 264;
                          uint64_t v155 = (void (**)(char *))&unk_26CECD0E0;
                          *(void *)v221 = &unk_26CECD0E0;
                          *(void *)&v221[8] = this;
                          *((void *)&v222 + 1) = v221;
                          if (v221 != (char *)this + 264)
                          {
                            uint64_t v156 = (char *)*((void *)this + 36);
                            if (v156 == v154)
                            {
                              v224.__r_.__value_.__l.__size_ = (std::string::size_type)this;
                              v224.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
                              v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CECD0E0;
                              *((void *)&v222 + 1) = 0;
                              (*(void (**)(char *, char *))(*((void *)this + 33) + 24))((char *)this + 264, v221);
                              (*(void (**)(void))(**((void **)this + 36) + 32))(*((void *)this + 36));
                              *((void *)this + 36) = 0;
                              *((void *)&v222 + 1) = v221;
                              (*(void (**)(std::string *, char *))(v224.__r_.__value_.__r.__words[0] + 24))(&v224, (char *)this + 264);
                              (*(void (**)(std::string *))(v224.__r_.__value_.__r.__words[0] + 32))(&v224);
                              *((void *)this + 36) = v154;
                              uint64_t v156 = (char *)*((void *)&v222 + 1);
                              if (*((char **)&v222 + 1) != v221)
                              {
LABEL_255:
                                if (v156) {
                                  (*(void (**)(char *))(*(void *)v156 + 40))(v156);
                                }
                                std::string::size_type v83 = *((void *)this + 51);
                                std::string::size_type v84 = *((void *)this + 52);
                                v224.__r_.__value_.__r.__words[0] = v83;
                                v224.__r_.__value_.__l.__size_ = v84;
                                if (v84) {
                                  goto LABEL_258;
                                }
LABEL_102:
                                LOWORD(v224.__r_.__value_.__r.__words[2]) = 0;
                                v224.__r_.__value_.__s.__data_[18] = 1;
                                *(void *)&v221[8] = v83;
                                *(void *)&long long v222 = 0;
                                *(_DWORD *)v221 = 0;
                                WORD4(v222) = 0;
                                BYTE10(v222) = 1;
                                *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v83;
                                goto LABEL_260;
                              }
                            }
                            else
                            {
                              *((void *)this + 33) = &unk_26CECD0E0;
                              *((void *)this + 34) = this;
                              *((void *)&v222 + 1) = v156;
                              *((void *)this + 36) = v154;
                              if (v156 != v221) {
                                goto LABEL_255;
                              }
                            }
                            uint64_t v155 = *(void (***)(char *))v221;
                          }
                          v155[4](v221);
                          std::string::size_type v83 = *((void *)this + 51);
                          std::string::size_type v84 = *((void *)this + 52);
                          v224.__r_.__value_.__r.__words[0] = v83;
                          v224.__r_.__value_.__l.__size_ = v84;
                          if (v84) {
                            goto LABEL_258;
                          }
                          goto LABEL_102;
                        }
                      }
                      if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                      goto LABEL_159;
                    }
                    *(void *)v221 = 0xAAAAAAAAAAAAAAAALL;
                    *(void *)v221 = ACFUDataAccess::createPersonalizedFirmwarePath((ACFUDataAccess *)@"Baseband", v64);
                    if (!*(void *)v221)
                    {
                      ACFULogging::getLogInstance(0);
                      ACFULogging::handleMessage();
                      timespec v194 = (std::string *)v221;
                      goto LABEL_399;
                    }
                    GetBasebandTatsuTagToFileNameMap(v214);
                    RTKitFirmware::create();
                    std::string::size_type v85 = v224.__r_.__value_.__r.__words[0];
                    if (v224.__r_.__value_.__r.__words[0])
                    {
                      uint64_t v86 = operator new(0x20uLL);
                      *uint64_t v86 = &unk_26CECD040;
                      v86[1] = 0;
                      v86[2] = 0;
                      v86[3] = v85;
                      v224.__r_.__value_.__r.__words[0] = 0;
                      long long v87 = (std::__shared_weak_count *)*((void *)this + 20);
                      *((void *)this + 19) = v85;
                      *((void *)this + 20) = v86;
                      if (!v87) {
                        goto LABEL_166;
                      }
                    }
                    else
                    {
                      v224.__r_.__value_.__r.__words[0] = 0;
                      long long v87 = (std::__shared_weak_count *)*((void *)this + 20);
                      *((void *)this + 19) = 0;
                      *((void *)this + 20) = 0;
                      if (!v87)
                      {
LABEL_166:
                        std::string::size_type v119 = v224.__r_.__value_.__r.__words[0];
                        v224.__r_.__value_.__r.__words[0] = 0;
                        if (v119) {
                          (*(void (**)(std::string::size_type))(*(void *)v119 + 56))(v119);
                        }
                        std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v214, (char *)v214[1]);
                        if (*((void *)this + 19))
                        {
                          if (*(void *)v221) {
                            CFRelease(*(CFTypeRef *)v221);
                          }
LABEL_194:
                          uint64_t v82 = 0;
LABEL_205:
                          uint64_t v65 = 0;
                          goto LABEL_206;
                        }
                        ACFULogging::getLogInstance(v120);
                        ACFULogging::handleMessage();
                        uint64_t v36 = 1000;
                        timespec v194 = (std::string *)v221;
LABEL_399:
                        ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)&v194->__r_.__value_.__l.__data_);
                        uint64_t v82 = 0;
                        uint64_t v65 = 0;
                        goto LABEL_344;
                      }
                    }
                    if (!atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                    goto LABEL_166;
                  }
                  if (!HIDWORD(valuePtr))
                  {
                    if (ACFURestore::isPostSealing(this))
                    {
                      v216.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                      long long v71 = (ACFULogging *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@/%@/", *((void *)this + 41), @"/usr/standalone/firmware/Baseband/");
                      v216.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
                      if (!v71)
                      {
                        ACFULogging::getLogInstance(0);
                        ACFULogging::handleMessage();
LABEL_398:
                        timespec v194 = &v216;
                        goto LABEL_399;
                      }
                      ACFULogging::getLogInstance(v71);
                      *((unsigned char *)&v218.__r_.__value_.__s + 23) = 15;
                      strcpy((char *)&v218, "BasebandRestore");
                      uint64_t v72 = std::string::append(&v218, "::", 2uLL);
                      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
                      v224.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v73;
                      v72->__r_.__value_.__l.__size_ = 0;
                      v72->__r_.__value_.__r.__words[2] = 0;
                      v72->__r_.__value_.__r.__words[0] = 0;
                      uint64_t v74 = std::string::append(&v224, "init", 4uLL);
                      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
                      *(void *)&long long v222 = *((void *)&v74->__r_.__value_.__l + 2);
                      *(_OWORD *)v221 = v75;
                      v74->__r_.__value_.__l.__size_ = 0;
                      v74->__r_.__value_.__r.__words[2] = 0;
                      v74->__r_.__value_.__r.__words[0] = 0;
                      ACFULogging::handleMessageCFType();
                      if (SBYTE7(v222) < 0)
                      {
                        operator delete(*(void **)v221);
                        if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_86:
                          if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_87;
                          }
LABEL_185:
                          operator delete(v218.__r_.__value_.__l.__data_);
LABEL_87:
                          GetBasebandTatsuTagToFileNameMap(v217);
                          RTKitFirmware::create();
                          uint64_t v76 = *(void *)v221;
                          if (*(void *)v221)
                          {
                            unint64_t v77 = operator new(0x20uLL);
                            *unint64_t v77 = &unk_26CECD040;
                            v77[1] = 0;
                            v77[2] = 0;
                            v77[3] = v76;
                            *(void *)v221 = 0;
                            uint64_t v78 = (std::__shared_weak_count *)*((void *)this + 20);
                            *((void *)this + 19) = v76;
                            *((void *)this + 20) = v77;
                            if (!v78) {
                              goto LABEL_189;
                            }
                          }
                          else
                          {
                            *(void *)v221 = 0;
                            uint64_t v78 = (std::__shared_weak_count *)*((void *)this + 20);
                            *((void *)this + 19) = 0;
                            *((void *)this + 20) = 0;
                            if (!v78)
                            {
LABEL_189:
                              uint64_t v131 = *(void *)v221;
                              *(void *)v221 = 0;
                              if (v131) {
                                (*(void (**)(uint64_t))(*(void *)v131 + 56))(v131);
                              }
                              std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v217, (char *)v217[1]);
                              if (*((void *)this + 19))
                              {
                                if (v216.__r_.__value_.__r.__words[0]) {
                                  CFRelease(v216.__r_.__value_.__l.__data_);
                                }
                                goto LABEL_194;
                              }
                              ACFULogging::getLogInstance(v132);
                              ACFULogging::handleMessage();
                              uint64_t v36 = 1000;
                              goto LABEL_398;
                            }
                          }
                          if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                            std::__shared_weak_count::__release_weak(v78);
                          }
                          goto LABEL_189;
                        }
                      }
                      else if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_86;
                      }
                      operator delete(v224.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_87;
                      }
                      goto LABEL_185;
                    }
                    uint64_t v82 = CFDictionaryGetValue(a2, @"firmwareSaveFolder");
                    if (!v82)
                    {
                      URLByAppendingStrings = (const void *)ACFUCommon::createURLByAppendingStrings(*((ACFUCommon **)this + 41), @"/usr/standalone/firmware/Baseband/", v112);
                      uint64_t v116 = (void *)v219;
                      CFTypeRef v219 = URLByAppendingStrings;
                      if (!v116) {
                        goto LABEL_173;
                      }
                      goto LABEL_172;
                    }
                    AMSupportSafeRetain();
                    CFTypeID v113 = CFGetTypeID(v82);
                    uint64_t v114 = (ACFULogging *)CFStringGetTypeID();
                    if ((ACFULogging *)v113 == v114)
                    {
                      URLByAppendingStrings = (const void *)AMSupportCreateURLFromString();
                      uint64_t v116 = (void *)v219;
                      CFTypeRef v219 = URLByAppendingStrings;
                      if (!v116) {
                        goto LABEL_173;
                      }
LABEL_172:
                      CFRelease(v116);
LABEL_173:
                      if (URLByAppendingStrings) {
                        int64_t v121 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
                      }
                      else {
                        int64_t v121 = 0;
                      }
                      if (!v121)
                      {
                        ACFULogging::getLogInstance((ACFULogging *)v116);
                        ACFULogging::handleMessage();
                        uint64_t v65 = 0;
                        uint64_t v36 = 4000;
                        goto LABEL_344;
                      }
                      *(void *)&long long v122 = 0xAAAAAAAAAAAAAAAALL;
                      *((void *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      *(_DWORD *)&v221[4] = -1431655766;
                      *((void *)&v222 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      *(_OWORD *)v223 = v122;
                      *(_DWORD *)v221 = 1;
                      *(void *)&v221[8] = @"Cellular1,Ticket";
                      *(void *)&long long v222 = URLByAppendingStrings;
                      GetBasebandTatsuTagToFileNameMap((uint64_t *)&v222 + 1);
                      ACFULogging::getLogInstance(v123);
                      *((unsigned char *)&v216.__r_.__value_.__s + 23) = 15;
                      strcpy((char *)&v216, "BasebandRestore");
                      uint64_t v124 = std::string::append(&v216, "::", 2uLL);
                      long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
                      v218.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v125;
                      v124->__r_.__value_.__l.__size_ = 0;
                      v124->__r_.__value_.__r.__words[2] = 0;
                      v124->__r_.__value_.__r.__words[0] = 0;
                      uint64_t v126 = std::string::append(&v218, "init", 4uLL);
                      long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
                      v224.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v127;
                      v126->__r_.__value_.__l.__size_ = 0;
                      v126->__r_.__value_.__r.__words[2] = 0;
                      v126->__r_.__value_.__r.__words[0] = 0;
                      ACFULogging::handleMessageCFType();
                      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v224.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_179:
                          if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_180;
                          }
LABEL_197:
                          operator delete(v216.__r_.__value_.__l.__data_);
LABEL_180:
                          RTKitFirmware::create();
                          std::string::size_type v128 = v224.__r_.__value_.__r.__words[0];
                          if (v224.__r_.__value_.__r.__words[0])
                          {
                            uint64_t v129 = operator new(0x20uLL);
                            void *v129 = &unk_26CECD040;
                            v129[1] = 0;
                            v129[2] = 0;
                            v129[3] = v128;
                            v224.__r_.__value_.__r.__words[0] = 0;
                            uint64_t v130 = (std::__shared_weak_count *)*((void *)this + 20);
                            *((void *)this + 19) = v128;
                            *((void *)this + 20) = v129;
                            if (!v130) {
                              goto LABEL_201;
                            }
                          }
                          else
                          {
                            v224.__r_.__value_.__r.__words[0] = 0;
                            uint64_t v130 = (std::__shared_weak_count *)*((void *)this + 20);
                            *((void *)this + 19) = 0;
                            *((void *)this + 20) = 0;
                            if (!v130)
                            {
LABEL_201:
                              uint64_t v133 = (ACFULogging *)v224.__r_.__value_.__r.__words[0];
                              v224.__r_.__value_.__r.__words[0] = 0;
                              if (v133) {
                                uint64_t v133 = (ACFULogging *)(*(uint64_t (**)(ACFULogging *))(*(void *)v133 + 56))(v133);
                              }
                              if (!*((void *)this + 19))
                              {
                                ACFULogging::getLogInstance(v133);
                                ACFULogging::handleMessage();
                                std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v222 + 8, *(char **)v223);
                                uint64_t v65 = 0;
                                uint64_t v36 = 1000;
                                goto LABEL_344;
                              }
                              std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v222 + 8, *(char **)v223);
                              goto LABEL_205;
                            }
                          }
                          if (!atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                            std::__shared_weak_count::__release_weak(v130);
                          }
                          goto LABEL_201;
                        }
                      }
                      else if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_179;
                      }
                      operator delete(v218.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_180;
                      }
                      goto LABEL_197;
                    }
                    ACFULogging::getLogInstance(v114);
                    ACFULogging::handleMessage();
LABEL_372:
                    uint64_t v65 = 0;
                    uint64_t v36 = 4002;
                    goto LABEL_344;
                  }
                  ACFULogging::getLogInstance(isPreflight);
                  ACFULogging::handleMessage();
LABEL_104:
                  uint64_t v82 = 0;
                  uint64_t v65 = 0;
                  uint64_t v36 = 1005;
                  goto LABEL_344;
                }
                CFBooleanRef v51 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 15), @"ccBoot");
                CFBooleanRef v52 = v51;
                if (v51)
                {
                  CFTypeID v53 = CFGetTypeID(v51);
                  CFTypeID v47 = CFBooleanGetTypeID();
                  if (v53 == v47)
                  {
                    *((unsigned char *)this + 465) = CFBooleanGetValue(v52) != 0;
                    goto LABEL_59;
                  }
LABEL_371:
                  ACFULogging::getLogInstance((ACFULogging *)v47);
                  ACFULogging::handleMessage();
                  uint64_t v82 = 0;
                  goto LABEL_372;
                }
LABEL_368:
                ACFULogging::getLogInstance(0);
                ACFULogging::handleMessage();
                goto LABEL_104;
              }
              CFBooleanRef v42 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 15), @"skipReset");
              CFBooleanRef v43 = v42;
              if (v42)
              {
                CFTypeID v44 = CFGetTypeID(v42);
                CFDataRef v40 = (ACFULogging *)CFBooleanGetTypeID();
                if ((ACFULogging *)v44 == v40)
                {
                  BOOL v45 = CFBooleanGetValue(v43) != 0;
                  goto LABEL_47;
                }
                goto LABEL_382;
              }
              goto LABEL_380;
            }
            CFBooleanRef v89 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 15), @"coreDumpPathNoTimestamp");
            CFBooleanRef v90 = v89;
            if (v89)
            {
              CFTypeID v91 = CFGetTypeID(v89);
              uint64_t v33 = (ACFULogging *)CFBooleanGetTypeID();
              if ((ACFULogging *)v91 == v33)
              {
                std::string::size_type v92 = CFBooleanGetValue(v90);
                if (v31) {
                  uint64_t v93 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
                }
                else {
                  uint64_t v93 = 0;
                }
                if (v93)
                {
                  if (v92) {
                    goto LABEL_131;
                  }
                  goto LABEL_129;
                }
                goto LABEL_146;
              }
LABEL_388:
              ACFULogging::getLogInstance(v33);
              ACFULogging::handleMessage();
              char v111 = 0;
              uint64_t v36 = 4002;
              goto LABEL_147;
            }
LABEL_386:
            ACFULogging::getLogInstance(0);
            ACFULogging::handleMessage();
            char v111 = 0;
            uint64_t v36 = 1005;
            goto LABEL_147;
          }
LABEL_35:
          uint64_t v36 = 0;
          goto LABEL_36;
        }
        ACFULogging::getLogInstance(v17);
      }
      else
      {
        ACFULogging::getLogInstance(TypeID);
      }
      ACFULogging::handleMessage();
      CFTypeRef cf = 0;
      uint64_t v65 = 0;
      uint64_t v82 = 0;
      uint64_t v36 = 4002;
LABEL_345:
      CFRelease(Value);
LABEL_346:
      if (v65) {
        CFRelease(v65);
      }
      if (v82) {
        CFRelease(v82);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v198) {
        goto LABEL_353;
      }
      goto LABEL_354;
    }
  }
  ACFULogging::getLogInstance(v13);
  ACFULogging::handleMessage();
  uint64_t v36 = 4000;
  if (v198) {
LABEL_353:
  }
    CFRelease(v198);
LABEL_354:
  if (v219) {
    CFRelease(v219);
  }
  return v36;
}

void sub_21DF3007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v44 - 192));
  ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef((const void **)(v44 - 208));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ACFUDiagnostics>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    BOOL v3 = (void *)MEMORY[0x223C1CEA0]();
    operator delete(v3);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t std::pair<ACFURestore::UpdateSteps const,RestoreStep>::~pair(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t BasebandRestore::initBBUCapabilities(BasebandRestore *this)
{
  CFDictionaryRef v1 = (const __CFDictionary *)*((void *)this + 16);
  if (v1)
  {
    v16[0] = 0xAAAAAAAAAAAAAAAALL;
    v16[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v16, v1);
    memset(v15, 170, sizeof(v15));
    std::vector<std::csub_match> __p = (char *)operator new(0x28uLL);
    strcpy(__p, "/private/var/wireless/baseband_data");
    ctu::cf::map_adapter::getString();
    operator delete(__p);
    ACFULogging::getLogInstance(v2);
    ACFULogging::handleMessage();
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    BOOL v3 = off_26AA89B50;
    if (!off_26AA89B50)
    {
      unint64_t v4 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v4);
      uint64_t v5 = operator new(0x20uLL);
      *uint64_t v5 = &unk_26CECF498;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = v4;
      uint64_t v6 = (std::__shared_weak_count *)off_26AA89B58;
      off_26AA89B50 = v4;
      off_26AA89B58 = v5;
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      BOOL v3 = off_26AA89B50;
    }
    uint64_t v7 = (std::__shared_weak_count *)off_26AA89B58;
    if (off_26AA89B58) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    uint64_t v8 = (uint64_t *)v3[1];
    if (!v8) {
LABEL_15:
    }
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    while (1)
    {
      while (1)
      {
        int v9 = *((_DWORD *)v8 + 8);
        if (v9 < 3) {
          break;
        }
        uint64_t v8 = (uint64_t *)*v8;
        if (!v8) {
          goto LABEL_15;
        }
      }
      if (v9 == 2) {
        break;
      }
      uint64_t v8 = (uint64_t *)v8[1];
      if (!v8) {
        goto LABEL_15;
      }
    }
    uint64_t v10 = (void **)(v8 + 5);
    if (v8 + 5 != (uint64_t *)v15)
    {
      if (*((char *)v8 + 63) < 0)
      {
        if (SHIBYTE(v15[2]) >= 0) {
          CFAllocatorRef v11 = v15;
        }
        else {
          CFAllocatorRef v11 = (void **)v15[0];
        }
        if (SHIBYTE(v15[2]) >= 0) {
          size_t v12 = HIBYTE(v15[2]);
        }
        else {
          size_t v12 = (size_t)v15[1];
        }
        std::string::__assign_no_alias<false>(v10, v11, v12);
      }
      else if ((HIBYTE(v15[2]) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v10, v15[0], (size_t)v15[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v15;
        v8[7] = (uint64_t)v15[2];
      }
    }
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((SHIBYTE(v15[2]) & 0x80000000) == 0) {
        goto LABEL_32;
      }
    }
    else if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
    {
LABEL_32:
      MEMORY[0x223C1D170](v16);
      return 0;
    }
    operator delete(v15[0]);
    goto LABEL_32;
  }
  return 0;
}

void sub_21DF307E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v24, v24[1]);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  if (a24 < 0) {
    operator delete(__p);
  }
  MEMORY[0x223C1D170](v25 - 48);
  _Unwind_Resume(a1);
}

CFComparisonResult BasebandRestore::basebandRestoreCommand(CFStringRef theString2, const __CFString *a2)
{
  CFComparisonResult result = CFStringCompare(@"performBootup", theString2, 0);
  if (result)
  {
    if (CFStringCompare(@"performCoreDump", theString2, 0))
    {
      if (CFStringCompare(@"requireSystemPartitionMount", theString2, 0)
        && CFStringCompare(@"requirePartitionMount", theString2, 0))
      {
        if (CFStringCompare(@"copyBasebandMigrationData", theString2, 0))
        {
          if (CFStringCompare(@"restoreBasebandMigrationData", theString2, 0))
          {
            if (CFStringCompare(@"CopyIdentifier", theString2, 0))
            {
              if (CFStringCompare(@"ping", theString2, 0))
              {
                if (CFStringCompare(@"performManifestCheck", theString2, 0))
                {
                  if (CFStringCompare(@"provision", theString2, 0))
                  {
                    if (CFStringCompare(@"performFusing", theString2, 0))
                    {
                      if (CFStringCompare(@"verifyFusing", theString2, 0))
                      {
                        if (CFStringCompare(@"downloadFusingProgram", theString2, 0)) {
                          return 0xFFFFFFFFLL;
                        }
                        else {
                          return 11;
                        }
                      }
                      else
                      {
                        return 10;
                      }
                    }
                    else
                    {
                      return 9;
                    }
                  }
                  else
                  {
                    return 8;
                  }
                }
                else
                {
                  return 7;
                }
              }
              else
              {
                return 5;
              }
            }
            else
            {
              return 6;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BasebandRestore *BasebandRestore::gatherPreflightParameters(BasebandRestore *this)
{
  void *(***v1)(ACFUCommon::PersonalizeParams **__return_ptr);
  ACFULogging *v2;
  ACFUCommon::PersonalizeParams *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  uint64_t (*v7)(__CFString *, void);
  BasebandRestore *v8;
  CFTypeID v9;
  ACFULogging *TypeID;
  ACFUCommon::PersonalizeParams *v11;
  std::__shared_weak_count *v12;
  ACFULogging *ParametersDictionary;
  std::__shared_weak_count *v14;
  void *__p;
  char v17;
  ACFUCommon::PersonalizeParams *v18;
  std::__shared_weak_count *v19;
  int v20;
  ACFUCommon::PersonalizeParams *v21;
  std::__shared_weak_count *v22;
  unint64_t v23;

  BOOL v22 = 0;
  CFBooleanRef v23 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v21 = 0;
  if (*((unsigned char *)this + 464))
  {
    CFDictionaryRef v1 = (void *(***)(ACFUCommon::PersonalizeParams **__return_ptr))*((void *)this + 21);
    if (v1)
    {
      uint64_t v2 = (ACFULogging *)(**v1)(&v18);
      BOOL v3 = v18;
      unint64_t v4 = v19;
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v5 = v19;
        uint64_t v21 = v3;
        BOOL v22 = v4;
        uint64_t v6 = v20;
        LODWORD(v23) = v20;
        if (v19)
        {
          if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          uint64_t v6 = v23;
        }
      }
      else
      {
        uint64_t v21 = v18;
        BOOL v22 = 0;
        uint64_t v6 = v20;
        LODWORD(v23) = v20;
      }
      if (v6)
      {
        ACFULogging::getLogInstance(v2);
        ACFULogging::handleMessage();
      }
      else
      {
        ACFULogging::getLogInstance(v2);
        ACFULogging::handleMessage();
        CFAllocatorRef v11 = v21;
        size_t v12 = v22;
        CFBooleanRef v18 = v21;
        CFBooleanRef v19 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        ParametersDictionary = (ACFULogging *)ACFUCommon::PersonalizeParams::getParametersDictionary(v11);
        uint64_t v8 = ParametersDictionary;
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        if (v8) {
          goto LABEL_21;
        }
        ACFULogging::getLogInstance(ParametersDictionary);
        ACFULogging::handleMessage();
        std::string::basic_string[abi:ne180100]<0>(&__p, "Failed to create personalization parameters dictionary");
        ACFUError::addError();
        if (v17 < 0)
        {
          operator delete(__p);
          uint64_t v8 = 0;
          goto LABEL_21;
        }
      }
LABEL_32:
      uint64_t v8 = 0;
      goto LABEL_21;
    }
    ACFULogging::getLogInstance(0);
LABEL_31:
    ACFULogging::handleMessage();
    goto LABEL_32;
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    uint64_t v7 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_30:
      ACFULogging::getLogInstance(this);
      goto LABEL_31;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    uint64_t v7 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer) {
      goto LABEL_30;
    }
  }
  this = (BasebandRestore *)v7(@"FirmwarePreflightInfo", 0);
  uint64_t v8 = this;
  if (!this) {
    goto LABEL_30;
  }
  int v9 = CFGetTypeID(this);
  TypeID = (ACFULogging *)CFDictionaryGetTypeID();
  if ((ACFULogging *)v9 != TypeID)
  {
    ACFULogging::getLogInstance(TypeID);
    ACFULogging::handleMessage();
  }
LABEL_21:
  uint64_t v14 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return v8;
}

void sub_21DF30DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::performCmd(BasebandRestore *this)
{
  ACFULogging::getLogInstance(this);
  ACFURestore::getCurrentUpdateStep(this);
  ACFURestore::getCurrentUpdateStep(this);
  ACFURestore::getStepName();
  ACFULogging::handleMessage();
  if ((v5 & 0x80000000) == 0)
  {
    int CurrentUpdateStep = ACFURestore::getCurrentUpdateStep(this);
    if (CurrentUpdateStep) {
      goto LABEL_3;
    }
    return (*(uint64_t (**)(BasebandRestore *))(*(void *)this + 112))(this);
  }
  operator delete(__p);
  int CurrentUpdateStep = ACFURestore::getCurrentUpdateStep(this);
  if (!CurrentUpdateStep) {
    return (*(uint64_t (**)(BasebandRestore *))(*(void *)this + 112))(this);
  }
LABEL_3:
  if (CurrentUpdateStep == 3) {
    return 1;
  }
  else {
    return ACFURestore::performCmd(this);
  }
}

void sub_21DF30F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandRestore::FWUpdatePerform(BasebandRestore *this)
{
  uint64_t v237 = *MEMORY[0x263EF8340];
  uint64_t result = ACFURestore::performCmd(this);
  if (result)
  {
    uint64_t isInternalBuild = ACFURestore::isInternalBuild(this);
    if (isInternalBuild)
    {
      if (*((unsigned char *)this + 377)
        || (uint64_t isInternalBuild = *((void *)this + 16)) != 0
        && (uint64_t isInternalBuild = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)isInternalBuild, @"BypassNVMSync")) != 0
        && (CFBooleanRef v4 = (const __CFBoolean *)isInternalBuild,
            CFTypeID v5 = CFGetTypeID((CFTypeRef)isInternalBuild),
            uint64_t isInternalBuild = CFBooleanGetTypeID(),
            v5 == isInternalBuild)
        && (uint64_t isInternalBuild = CFBooleanGetValue(v4), isInternalBuild == 1))
      {
        ACFULogging::getLogInstance((ACFULogging *)isInternalBuild);
        ACFULogging::handleMessage();
        goto LABEL_114;
      }
    }
    ACFULogging::getLogInstance((ACFULogging *)isInternalBuild);
    ACFULogging::handleMessage();
    memset(&v197, 170, sizeof(v197));
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    uint64_t v6 = (BBUPartitionManager *)off_26AA89B50;
    if (!off_26AA89B50)
    {
      uint64_t v7 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v7);
      uint64_t v8 = operator new(0x20uLL);
      *uint64_t v8 = &unk_26CECF498;
      v8[1] = 0;
      void v8[2] = 0;
      v8[3] = v7;
      int v9 = (std::__shared_weak_count *)off_26AA89B58;
      off_26AA89B50 = v7;
      off_26AA89B58 = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      uint64_t v6 = (BBUPartitionManager *)off_26AA89B50;
    }
    uint64_t v10 = (std::__shared_weak_count *)off_26AA89B58;
    *(void *)&long long value = v6;
    *((void *)&value + 1) = off_26AA89B58;
    if (off_26AA89B58) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    BBUPartitionManager::getBBUFSPath(v6, &v197);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    ACFULogging::getLogInstance(v11);
    ACFULogging::handleMessage();
    if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFBooleanRef v19 = (bbufs *)&v197;
    }
    else {
      CFBooleanRef v19 = (bbufs *)v197.__r_.__value_.__r.__words[0];
    }
    if (!v19)
    {
      HardwareConfig = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v13, v14, v15, v16, v17, v18, 0);
      goto LABEL_256;
    }
    if ((bbufs::prepareDestination(v19, v12) & 1) == 0)
    {
      HardwareConfig = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v20, v21, v22, v23, v24, v25, (char)"BasebandRestore");
      goto LABEL_256;
    }
    uint64_t ValueIfPresent = *((void *)this + 16);
    *(void *)&long long value = 0;
    if (ValueIfPresent
      && (ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)ValueIfPresent, @"NVRestoreSetting", (const void **)&value), ValueIfPresent)&& (LODWORD(__src[0]) = -1431655766, (v27 = (int *)value) != 0)&& (CFTypeID v28 = CFGetTypeID((CFTypeRef)value), ValueIfPresent = CFNumberGetTypeID(), v28 == ValueIfPresent)&& (ValueIfPresent = ctu::cf::assign((ctu::cf *)__src, v27, v29), (ValueIfPresent & 1) != 0)&& (v196 = __src[0], (LODWORD(__src[0]) - 6) > 0xFFFFFFFA))
    {
      ACFULogging::getLogInstance((ACFULogging *)ValueIfPresent);
      switch(v196)
      {
        case 1:
        case 2:
        case 4:
        case 5:
          break;
        case 3:
          goto LABEL_31;
        default:
          int v196 = 5;
          break;
      }
    }
    else
    {
      ACFULogging::getLogInstance((ACFULogging *)ValueIfPresent);
LABEL_31:
      int v196 = 3;
    }
    ACFULogging::handleMessage();
    *(void *)&long long value = 0xAAAAAAAAAAAAAAAALL;
    support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)&value);
    uint64_t v31 = value;
    if (!(void)value)
    {
      ACFULogging::getLogInstance(v30);
      HardwareConfig = (ACFULogging *)ACFULogging::handleMessage();
      goto LABEL_256;
    }
    switch(v196)
    {
      case 1:
      case 2:
      case 4:
      case 5:
        ACFULogging::getLogInstance(v30);
        ACFULogging::handleMessage();
        uint64_t v30 = (ACFULogging *)KTLBspSetNvItemsToState();
        if (v30) {
          goto LABEL_36;
        }
        ACFULogging::getLogInstance(v30);
        ACFULogging::handleMessage();
        HardwareConfig = (ACFULogging *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 8))(v31);
        goto LABEL_256;
      default:
LABEL_36:
        ACFULogging::getLogInstance(v30);
        ACFULogging::handleMessage();
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        int v33 = -1;
        LODWORD(__src[0]) = -1;
        uint64_t TypeID = *((void *)this + 16);
        if (TypeID)
        {
          *(void *)&long long value = 0xAAAAAAAAAAAAAAAALL;
          uint64_t TypeID = CFDictionaryGetValueIfPresent((CFDictionaryRef)TypeID, @"IMEISwVersion", (const void **)&value);
          if (TypeID
            && (unint64_t v35 = (int *)value) != 0
            && (CFTypeID v36 = CFGetTypeID((CFTypeRef)value), TypeID = CFNumberGetTypeID(), v36 == TypeID))
          {
            uint64_t TypeID = ctu::cf::assign((ctu::cf *)__src, v35, v37);
            if (TypeID) {
              int v33 = __src[0];
            }
            else {
              int v33 = -1;
            }
          }
          else
          {
            int v33 = -1;
          }
        }
        ACFULogging::getLogInstance((ACFULogging *)TypeID);
        CFBooleanRef v38 = (ACFULogging *)ACFULogging::handleMessage();
        ACFULogging::getLogInstance(v38);
        CFTypeID v39 = (ACFULogging *)ACFULogging::handleMessage();
        if (v33 == -1
          || (v33 - 99) <= 0xFFFFFF9D
          || (LOBYTE(__src[0]) = -86,
              __dst[0] = v33,
              ACFULogging::getLogInstance(v39),
              ACFULogging::handleMessage(),
              support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)&value), (uint64_t v40 = value) == 0))
        {
          ACFULogging::getLogInstance(v39);
          ACFULogging::handleMessage();
LABEL_54:
          HardwareConfig = (ACFULogging *)TelephonyRadiosGetHardwareConfig();
          if (HardwareConfig == 2 && !*((unsigned char *)this + 400)) {
            goto LABEL_256;
          }
          ACFULogging::getLogInstance(HardwareConfig);
          ACFULogging::handleMessage();
LABEL_57:
          *(void *)&long long v233 = 0;
          long long v231 = 0u;
          long long v232 = 0u;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v227 = 0u;
          long long v228 = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v223 = 0u;
          long long v224 = 0u;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long v217 = 0u;
          long long v218 = 0u;
          long long v215 = 0u;
          long long v216 = 0u;
          long long v213 = 0u;
          long long v214 = 0u;
          long long v211 = 0u;
          long long v212 = 0u;
          long long v209 = 0u;
          long long v210 = 0u;
          long long value = 0u;
          memset(__src, 0, sizeof(__src));
          memset(&v198, 170, sizeof(v198));
          pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
          CFBooleanRef v43 = (BBUPartitionManager *)off_26AA89B50;
          if (!off_26AA89B50)
          {
            uint64_t v44 = (BBUPartitionManager *)operator new(0x18uLL);
            BBUPartitionManager::BBUPartitionManager(v44);
            BOOL v45 = operator new(0x20uLL);
            *BOOL v45 = &unk_26CECF498;
            v45[1] = 0;
            v45[2] = 0;
            unint64_t v45[3] = v44;
            CFTypeID v46 = (std::__shared_weak_count *)off_26AA89B58;
            off_26AA89B50 = v44;
            off_26AA89B58 = v45;
            if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
            CFBooleanRef v43 = (BBUPartitionManager *)off_26AA89B50;
          }
          CFTypeID v47 = (std::__shared_weak_count *)off_26AA89B58;
          *(void *)std::string __dst = v43;
          *(void *)&__dst[8] = off_26AA89B58;
          if (off_26AA89B58) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
          BBUPartitionManager::getBBUFSPath(v43, &v198);
          if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
          ACFULogging::getLogInstance(v48);
          CFBooleanRef v49 = &v198;
          ACFULogging::handleMessage();
          if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            CFBooleanRef v49 = (std::string *)v198.__r_.__value_.__r.__words[0];
          }
          if (v49)
          {
            memset(__src, 0, sizeof(__src));
            size_t v56 = strnlen((const char *)v49, 0x100uLL);
            uint64_t v57 = TelephonyUtilStrlcpy();
            if (v57 == v56 && (unint64_t)(v57 + 1) < 0x101)
            {
              *((void *)&__src[22] + 1) = 0;
              memcpy(__dst, __src, sizeof(__dst));
              uint64_t v70 = BBUFSServerCreate(&value, (uint64_t (**)(const char *, const char *, char *))__dst, v64, v65, v66, v67, v68, v69);
              if (v70)
              {
                if (sBBUFSServerSetConfig)
                {
                  uint64_t v70 = ((uint64_t (*)(long long *, const char *, unint64_t))sBBUFSServerSetConfig)(&value, "ForceSync", 0xAAAAAAAA00000000);
                  if (v70)
                  {
                    if (sBBUFSServerSetConfig)
                    {
                      uint64_t v70 = ((uint64_t (*)(long long *, const char *, unint64_t))sBBUFSServerSetConfig)(&value, "ShutdownSync", 0xAAAAAAAA00000000);
                      if (v70)
                      {
                        if (sBBUFSServerStart)
                        {
                          uint64_t v70 = ((uint64_t (*)(long long *))sBBUFSServerStart)(&value);
                          if (v70)
                          {
                            if (sBBUFSServerFlush)
                            {
                              uint64_t v70 = ((uint64_t (*)(long long *))sBBUFSServerFlush)(&value);
                              if (_BYTE)v231 && (v70)
                              {
                                ACFULogging::getLogInstance((ACFULogging *)v70);
                                BOOL v195 = "BasebandRestore";
                                ACFULogging::handleMessage();
                                char v101 = 1;
                                long long v102 = (void *)&unk_267D24000;
                                if (!(_BYTE)v231) {
                                  goto LABEL_92;
                                }
LABEL_87:
                                uint64_t v103 = (uint64_t (*)(long long *))v102[217];
                                if (v103)
                                {
                                  uint64_t v104 = (ACFULogging *)v103(&value);
                                  if (v104)
                                  {
LABEL_92:
                                    if (*((void *)&v230 + 1))
                                    {
                                      _BBUFSDebugPrint("BBUFSServerRelease", "BBUFSServer releasing registry\n", v95, v96, v97, v98, v99, v100, (char)"BasebandRestore");
                                      uint64_t v105 = (void *)*((void *)&v230 + 1);
                                      if (*((void *)&v230 + 1))
                                      {
                                        uint64_t v106 = *(std::__shared_weak_count **)(*((void *)&v230 + 1) + 8);
                                        if (v106) {
                                          std::__shared_weak_count::__release_weak(v106);
                                        }
                                        operator delete(v105);
                                      }
                                      *((void *)&v230 + 1) = 0;
                                    }
                                    sBBUFSServerStart = 0;
                                    v102[217] = 0;
                                    sBBUFSServerFlush = 0;
                                    sBBUFSServerFlushInProgress = 0;
                                    sBBUFSServerSetConfig = 0;
                                    sBBUFSServerSetConfigDefaults = 0;
                                    HardwareConfig = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerRelease", "BBUFSServer destroyed\n", v95, v96, v97, v98, v99, v100, (char)v195);
                                    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
                                      operator delete(v198.__r_.__value_.__l.__data_);
                                    }
                                    if (v101)
                                    {
                                      *(void *)&__src[0] = 0xAAAAAAAAAAAAAAAALL;
                                      support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)__src);
                                      uint64_t v108 = *(void *)&__src[0];
                                      if (!*(void *)&__src[0])
                                      {
                                        ACFULogging::getLogInstance(v107);
                                        HardwareConfig = (ACFULogging *)ACFULogging::handleMessage();
                                        goto LABEL_256;
                                      }
                                      *(void *)std::string __dst = 0xAAAAAAAAAAAAAAAALL;
                                      Bsp::ARICommandDriver::ARICommandDriver();
                                      *(void *)&long long v109 = 0xAAAAAAAAAAAAAAAALL;
                                      *((void *)&v109 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                      long long v210 = v109;
                                      long long v211 = v109;
                                      long long value = v109;
                                      long long v209 = v109;
                                      AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::ARI_FactoryGetNvItemsSettingReq_SDK((AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *)&value);
                                      v198.__r_.__value_.__r.__words[0] = 0;
                                      char NvItemsSetting = Bsp::ARICommandDriver::GetNvItemsSetting();
                                      std::string::size_type v111 = v198.__r_.__value_.__r.__words[0];
                                      if (v198.__r_.__value_.__r.__words[0]) {
                                        char v112 = NvItemsSetting;
                                      }
                                      else {
                                        char v112 = 0;
                                      }
                                      if (v112)
                                      {
                                        if (!**(_DWORD **)(v198.__r_.__value_.__r.__words[0] + 64)
                                          && **(int **)(v198.__r_.__value_.__r.__words[0] + 72) < 4)
                                        {
                                          char NvItemsSetting = 1;
                                          goto LABEL_109;
                                        }
                                        ACFULogging::getLogInstance((ACFULogging *)v198.__r_.__value_.__l.__data_);
                                        ACFULogging::handleMessage();
                                        char NvItemsSetting = 0;
                                      }
                                      else
                                      {
                                        ACFULogging::getLogInstance((ACFULogging *)v198.__r_.__value_.__l.__data_);
                                        ACFULogging::handleMessage();
                                      }
                                      std::string::size_type v111 = v198.__r_.__value_.__r.__words[0];
                                      if (!v198.__r_.__value_.__r.__words[0])
                                      {
LABEL_110:
                                        MEMORY[0x223C1D760](&value);
                                        Bsp::ARICommandDriver::~ARICommandDriver((Bsp::ARICommandDriver *)__dst);
                                        HardwareConfig = (ACFULogging *)(*(uint64_t (**)(uint64_t))(*(void *)v108 + 8))(v108);
                                        if ((NvItemsSetting & 1) == 0) {
                                          goto LABEL_256;
                                        }
                                        ACFULogging::getLogInstance(HardwareConfig);
                                        CFTypeID v113 = (ACFULogging *)ACFULogging::handleMessage();
                                        ACFULogging::getLogInstance(v113);
                                        uint64_t v114 = (ACFULogging *)ACFULogging::handleMessage();
                                        int v115 = 1;
                                        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
                                          goto LABEL_112;
                                        }
                                        goto LABEL_113;
                                      }
LABEL_109:
                                      (*(void (**)(std::string::size_type))(*(void *)v111 + 16))(v111);
                                      goto LABEL_110;
                                    }
LABEL_256:
                                    ACFULogging::getLogInstance(HardwareConfig);
                                    uint64_t v114 = (ACFULogging *)ACFULogging::handleMessage();
                                    int v115 = 0;
                                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
LABEL_112:
                                    }
                                      operator delete(v197.__r_.__value_.__l.__data_);
LABEL_113:
                                    if (!v115) {
                                      goto LABEL_294;
                                    }
LABEL_114:
                                    v197.__r_.__value_.__r.__words[0] = 0;
                                    if (!*((void *)this + 18)) {
                                      goto LABEL_137;
                                    }
                                    unint64_t v236 = 0xAAAAAAAAAAAAAAAALL;
                                    *(void *)&long long v116 = 0xAAAAAAAAAAAAAAAALL;
                                    *((void *)&v116 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                    long long v234 = v116;
                                    long long v235 = v116;
                                    long long v232 = v116;
                                    long long v233 = v116;
                                    long long v230 = v116;
                                    long long v231 = v116;
                                    long long v228 = v116;
                                    long long v229 = v116;
                                    long long v226 = v116;
                                    long long v227 = v116;
                                    long long v224 = v116;
                                    long long v225 = v116;
                                    long long v222 = v116;
                                    long long v223 = v116;
                                    long long v220 = v116;
                                    long long v221 = v116;
                                    long long v218 = v116;
                                    long long v219 = v116;
                                    long long v216 = v116;
                                    long long v217 = v116;
                                    long long v214 = v116;
                                    long long v215 = v116;
                                    long long v212 = v116;
                                    long long v213 = v116;
                                    long long v210 = v116;
                                    long long v211 = v116;
                                    long long value = v116;
                                    long long v209 = v116;
                                    isPostSealing = (ACFULogging *)ACFURestore::isPostSealing(this);
                                    if (isPostSealing) {
                                      goto LABEL_137;
                                    }
                                    ACFULogging::getLogInstance(isPostSealing);
                                    unint64_t v118 = (ACFULogging *)ACFULogging::handleMessage();
                                    *((void *)this + 25) = 0;
                                    uint64_t v119 = *((void *)this + 18);
                                    *((void *)this + 26) = v119;
                                    *((void *)this + 27) = @"Baseband";
                                    *((void *)this + 28) = @"scrt";
                                    *((_DWORD *)this + 58) = 2;
                                    *((void *)this + 31) = 0;
                                    *((void *)this + 32) = 0;
                                    *((void *)this + 30) = 0;
                                    if (!v119) {
                                      goto LABEL_269;
                                    }
                                    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
                                    {
                                      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
                                        goto LABEL_119;
                                      }
                                    }
                                    else
                                    {
                                      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
                                      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
                                      {
LABEL_119:
                                        if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
                                        {
LABEL_120:
                                          CFDataRef Manifest = (const __CFData *)ACFUFirmware::getManifest(*((ACFUFirmware **)this
                                                                                                 + 19));
                                          CFDataRef v121 = Manifest;
                                          if (Manifest)
                                          {
                                            CFIndex Length = (ACFULogging *)CFDataGetLength(Manifest);
                                            if ((uint64_t)Length <= 0)
                                            {
                                              ACFULogging::getLogInstance(Length);
                                              CFDataGetLength(v121);
                                              uint64_t v114 = (ACFULogging *)ACFULogging::handleMessage();
                                              goto LABEL_294;
                                            }
                                            ACFULogging::getLogInstance(Length);
                                            uint64_t v123 = (ACFULogging *)ACFULogging::handleMessage();
                                            ACFULogging::getLogInstance(v123);
                                            *((unsigned char *)&v198.__r_.__value_.__s + 23) = 15;
                                            strcpy((char *)&v198, "BasebandRestore");
                                            uint64_t v124 = std::string::append(&v198, "::", 2uLL);
                                            long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
                                            *(void *)&__dst[16] = *((void *)&v124->__r_.__value_.__l + 2);
                                            *(_OWORD *)std::string __dst = v125;
                                            v124->__r_.__value_.__l.__size_ = 0;
                                            v124->__r_.__value_.__r.__words[2] = 0;
                                            v124->__r_.__value_.__r.__words[0] = 0;
                                            uint64_t v126 = std::string::append((std::string *)__dst, "handleCertification", 0x13uLL);
                                            long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
                                            *(void *)&__src[1] = *((void *)&v126->__r_.__value_.__l + 2);
                                            __src[0] = v127;
                                            v126->__r_.__value_.__l.__size_ = 0;
                                            v126->__r_.__value_.__r.__words[2] = 0;
                                            v126->__r_.__value_.__r.__words[0] = 0;
                                            CFDataGetBytePtr(v121);
                                            CFDataGetLength(v121);
                                            ACFULogging::handleMessageBinary();
                                            if (SBYTE7(__src[1]) < 0)
                                            {
                                              operator delete(*(void **)&__src[0]);
                                              if ((__dst[23] & 0x80000000) == 0)
                                              {
LABEL_124:
                                                if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                  goto LABEL_125;
                                                }
LABEL_194:
                                                operator delete(v198.__r_.__value_.__l.__data_);
LABEL_125:
                                                BytePtr = CFDataGetBytePtr(v121);
                                                CFIndex v129 = CFDataGetLength(v121);
                                                inited = (ACFULogging *)Img4DecodeInitManifest((uint64_t)BytePtr, v129, (uint64_t)&value);
                                                if (inited)
                                                {
                                                  ACFULogging::getLogInstance(inited);
                                                  uint64_t v114 = (ACFULogging *)ACFULogging::handleMessage();
                                                  goto LABEL_294;
                                                }
                                                uint64_t v131 = (ACFULogging *)CFDataGetLength(v121);
                                                ACFULogging::getLogInstance(v131);
                                                ACFULogging::handleMessage();
                                                uint64_t v132 = (ACFULogging *)CFDataGetBytePtr(v121);
                                                uint64_t v133 = *((void *)&v224 + 1);
                                                uint64_t v134 = v225;
                                                ACFULogging::getLogInstance(v132);
                                                uint64_t v135 = (const UInt8 *)(v133 + v134);
                                                CFIndex v136 = (CFIndex)v131 + v132 - (ACFULogging *)v135;
                                                int v137 = (ACFULogging *)ACFULogging::handleMessage();
                                                ACFULogging::getLogInstance(v137);
                                                int v138 = (ACFULogging *)ACFULogging::handleMessage();
                                                ACFULogging::getLogInstance(v138);
                                                *((unsigned char *)&v198.__r_.__value_.__s + 23) = 15;
                                                strcpy((char *)&v198, "BasebandRestore");
                                                uint64_t v139 = std::string::append(&v198, "::", 2uLL);
                                                long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
                                                *(void *)&__dst[16] = *((void *)&v139->__r_.__value_.__l + 2);
                                                *(_OWORD *)std::string __dst = v140;
                                                v139->__r_.__value_.__l.__size_ = 0;
                                                v139->__r_.__value_.__r.__words[2] = 0;
                                                v139->__r_.__value_.__r.__words[0] = 0;
                                                uint64_t v141 = std::string::append((std::string *)__dst, "handleCertification", 0x13uLL);
                                                long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
                                                *(void *)&__src[1] = *((void *)&v141->__r_.__value_.__l + 2);
                                                __src[0] = v142;
                                                v141->__r_.__value_.__l.__size_ = 0;
                                                v141->__r_.__value_.__r.__words[2] = 0;
                                                v141->__r_.__value_.__r.__words[0] = 0;
                                                ACFULogging::handleMessageBinary();
                                                if (SBYTE7(__src[1]) < 0)
                                                {
                                                  operator delete(*(void **)&__src[0]);
                                                  if ((__dst[23] & 0x80000000) == 0)
                                                  {
LABEL_128:
                                                    if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                      goto LABEL_129;
                                                    }
LABEL_197:
                                                    operator delete(v198.__r_.__value_.__l.__data_);
LABEL_129:
                                                    uint64_t v114 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v135, v136);
                                                    dispatch_time_t v143 = v114;
                                                    v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
                                                    if (v114) {
                                                      uint64_t v144 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
                                                    }
                                                    else {
                                                      uint64_t v144 = 0;
                                                    }
                                                    if (!v144
                                                      || (*((void *)this + 32) = v114,
                                                          uint64_t v114 = (ACFULogging *)(*(uint64_t (**)(void, char *, void, void, uint64_t))(**((void **)this + 51) + 32))(*((void *)this + 51), (char *)this + 200, *((void *)this + 17), *((void *)this + 15), 1), v114))
                                                    {
                                                      ACFULogging::getLogInstance(v114);
                                                      uint64_t v114 = (ACFULogging *)ACFULogging::handleMessage();
                                                      int v145 = 0;
                                                      if (!v143)
                                                      {
LABEL_136:
                                                        if (!v145) {
                                                          goto LABEL_294;
                                                        }
LABEL_137:
                                                        CFTypeRef v204 = 0;
                                                        CFTypeRef v205 = 0;
                                                        CFTypeRef cf = 0;
                                                        v203 = 0;
                                                        long long v223 = 0u;
                                                        long long v224 = 0u;
                                                        long long v221 = 0u;
                                                        long long v222 = 0u;
                                                        long long v219 = 0u;
                                                        long long v220 = 0u;
                                                        long long v217 = 0u;
                                                        long long v218 = 0u;
                                                        long long v215 = 0u;
                                                        long long v216 = 0u;
                                                        long long v213 = 0u;
                                                        long long v214 = 0u;
                                                        long long v211 = 0u;
                                                        long long v212 = 0u;
                                                        long long v209 = 0u;
                                                        long long v210 = 0u;
                                                        long long value = 0u;
                                                        BOOL v201 = 0;
                                                        CFDictionaryRef v146 = (const __CFDictionary *)*((void *)this + 17);
                                                        if (v146)
                                                        {
                                                          CFDictionaryRef v146 = (const __CFDictionary *)CFDictionaryGetValue(v146, @"BasebandEnableProvisioning");
                                                          uint64_t v147 = v146;
                                                          if (v146)
                                                          {
                                                            CFTypeID v148 = CFGetTypeID(v146);
                                                            uint64_t v149 = (ACFULogging *)CFBooleanGetTypeID();
                                                            if ((ACFULogging *)v148 != v149) {
                                                              goto LABEL_209;
                                                            }
                                                            CFRetain(v147);
                                                            CFTypeRef v205 = v147;
                                                            CFDictionaryRef v146 = (const __CFDictionary *)CFBooleanGetValue((CFBooleanRef)v147);
                                                            LODWORD(v147) = v146 != 0;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          LODWORD(v147) = 0;
                                                        }
                                                        ACFULogging::getLogInstance(v146);
                                                        ACFULogging::handleMessage();
                                                        if (!v147) {
                                                          goto LABEL_278;
                                                        }
                                                        CFTypeID v150 = (CFTypeID)CFDictionaryGetValue(*((CFDictionaryRef *)this + 17), @"ForceServerProvisioning");
                                                        long long v151 = (const void *)v150;
                                                        if (v150)
                                                        {
                                                          CFTypeID v152 = CFGetTypeID((CFTypeRef)v150);
                                                          CFTypeID v150 = CFBooleanGetTypeID();
                                                          if (v152 != v150)
                                                          {
                                                            CFTypeRef v204 = 0;
                                                            goto LABEL_152;
                                                          }
                                                          CFTypeID v150 = (CFTypeID)CFRetain(v151);
                                                        }
                                                        CFTypeRef v204 = v151;
                                                        if (v151) {
                                                          v153 = ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get;
                                                        }
                                                        else {
                                                          v153 = 0;
                                                        }
                                                        if (v153)
                                                        {
                                                          CFTypeID v150 = CFBooleanGetValue((CFBooleanRef)v151);
                                                          BOOL v154 = v150 != 0;
LABEL_153:
                                                          ACFULogging::getLogInstance((ACFULogging *)v150);
                                                          ACFULogging::handleMessage();
                                                          *(void *)&__src[0] = 0xAAAAAAAAAAAAAAAALL;
                                                          support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)__src);
                                                          uint64_t v156 = *(void *)&__src[0];
                                                          if (!*(void *)&__src[0]
                                                            || (uint64_t v155 = KTLGetManifestStatus(), (v155 & 1) == 0))
                                                          {
                                                            ACFULogging::getLogInstance((ACFULogging *)v155);
                                                            ACFULogging::handleMessage();
                                                            if (v156) {
                                                              (*(void (**)(uint64_t))(*(void *)v156 + 8))(v156);
                                                            }
LABEL_285:
                                                            char v193 = 0;
                                                            CFTypeRef v194 = cf;
                                                            if (!cf) {
                                                              goto LABEL_287;
                                                            }
                                                            goto LABEL_286;
                                                          }
                                                          logManifestStatus((unsigned __int16 *)&value);
                                                          std::string::size_type v157 = (ACFULogging *)(*(uint64_t (**)(uint64_t))(*(void *)v156 + 8))(v156);
                                                          int v158 = WORD2(value);
                                                          ACFULogging::getLogInstance(v157);
                                                          uint64_t v159 = (ACFULogging *)ACFULogging::handleMessage();
                                                          if (v158) {
                                                            int v160 = 1;
                                                          }
                                                          else {
                                                            int v160 = v154;
                                                          }
                                                          if (v160 == 1)
                                                          {
                                                            ACFULogging::getLogInstance(v159);
                                                            ACFULogging::handleMessage();
                                                            uint64_t v161 = (ACFULogging *)*((void *)this + 17);
                                                            uint64_t v162 = *((void *)this + 52);
                                                            *(void *)&__src[0] = *((void *)this + 51);
                                                            *((void *)&__src[0] + 1) = v162;
                                                            if (v162) {
                                                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v162 + 8), 1uLL, memory_order_relaxed);
                                                            }
                                                            uint64_t v163 = *((void *)this + 20);
                                                            *(void *)std::string __dst = *((void *)this + 19);
                                                            *(void *)&__dst[8] = v163;
                                                            if (v163) {
                                                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v163 + 8), 1uLL, memory_order_relaxed);
                                                            }
                                                            uint64_t v149 = (ACFULogging *)provisionBaseband(v161, (uint64_t *)__src, (ACFUFirmware **)__dst, &v203);
                                                            char v164 = (char)v149;
                                                            uint64_t v165 = *(std::__shared_weak_count **)&__dst[8];
                                                            if (*(void *)&__dst[8]
                                                              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                                                              std::__shared_weak_count::__release_weak(v165);
                                                            }
                                                            uint64_t v166 = (std::__shared_weak_count *)*((void *)&__src[0] + 1);
                                                            if (*((void *)&__src[0] + 1)
                                                              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__src[0] + 1)+ 8), 0xFFFFFFFFFFFFFFFFLL))
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                                              std::__shared_weak_count::__release_weak(v166);
                                                            }
                                                            if (v164)
                                                            {
LABEL_170:
                                                              if (v203)
                                                              {
                                                                char v167 = (const void *)*((void *)this + 59);
                                                                *((void *)this + 59) = v203;
                                                                if (!v167)
                                                                {
LABEL_223:
                                                                  std::string v187 = (uint64_t **)((char *)this + 32);
                                                                  v186 = (uint64_t *)*((void *)this + 4);
                                                                  if (v186)
                                                                  {
                                                                    while (1)
                                                                    {
                                                                      while (1)
                                                                      {
                                                                        xpc_object_t v188 = (uint64_t **)v186;
                                                                        int v189 = *((_DWORD *)v186 + 8);
                                                                        if (v189 < 4) {
                                                                          break;
                                                                        }
                                                                        v186 = *v188;
                                                                        std::string v187 = v188;
                                                                        if (!*v188) {
                                                                          goto LABEL_230;
                                                                        }
                                                                      }
                                                                      if (v189 == 3) {
                                                                        break;
                                                                      }
                                                                      v186 = v188[1];
                                                                      if (!v186)
                                                                      {
                                                                        std::string v187 = v188 + 1;
                                                                        goto LABEL_230;
                                                                      }
                                                                    }
                                                                    v190 = v188;
                                                                  }
                                                                  else
                                                                  {
                                                                    xpc_object_t v188 = (uint64_t **)((char *)this + 32);
LABEL_230:
                                                                    v190 = operator new(0x40uLL);
                                                                    v190[8] = 3;
                                                                    *((void *)v190 + 6) = 0;
                                                                    *((void *)v190 + 7) = 0;
                                                                    *((void *)v190 + 5) = 0;
                                                                    *(void *)v190 = 0;
                                                                    *((void *)v190 + 1) = 0;
                                                                    *((void *)v190 + 2) = v188;
                                                                    *std::string v187 = (uint64_t *)v190;
                                                                    uint64_t v191 = **((void **)this + 3);
                                                                    std::string v192 = (uint64_t *)v190;
                                                                    if (v191)
                                                                    {
                                                                      *((void *)this + 3) = v191;
                                                                      std::string v192 = *v187;
                                                                    }
                                                                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 4), v192);
                                                                    ++*((void *)this + 5);
                                                                  }
                                                                  char v193 = 1;
                                                                  *((unsigned char *)v190 + 58) = 1;
                                                                  CFTypeRef v194 = cf;
                                                                  if (!cf)
                                                                  {
LABEL_287:
                                                                    if (v204) {
                                                                      CFRelease(v204);
                                                                    }
                                                                    uint64_t v114 = (ACFULogging *)v205;
                                                                    if (v205) {
                                                                      CFRelease(v205);
                                                                    }
                                                                    if (v193) {
                                                                      return 1;
                                                                    }
LABEL_294:
                                                                    ACFULogging::getLogInstance(v114);
                                                                    ACFULogging::handleMessage();
                                                                    return 0;
                                                                  }
LABEL_286:
                                                                  CFRelease(v194);
                                                                  goto LABEL_287;
                                                                }
LABEL_222:
                                                                CFRelease(v167);
                                                                goto LABEL_223;
                                                              }
                                                              ACFULogging::getLogInstance(v149);
                                                              ACFULogging::handleMessage();
LABEL_278:
                                                              char v193 = 1;
                                                              CFTypeRef v194 = cf;
                                                              if (!cf) {
                                                                goto LABEL_287;
                                                              }
                                                              goto LABEL_286;
                                                            }
                                                            goto LABEL_209;
                                                          }
                                                          ACFULogging::getLogInstance(v159);
                                                          ACFULogging::handleMessage();
                                                          int v168 = (ACFULogging *)*((void *)this + 17);
                                                          uint64_t v169 = *((void *)this + 52);
                                                          *(void *)&__src[0] = *((void *)this + 51);
                                                          *((void *)&__src[0] + 1) = v169;
                                                          if (v169) {
                                                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v169 + 8), 1uLL, memory_order_relaxed);
                                                          }
                                                          uint64_t v170 = *((void *)this + 20);
                                                          *(void *)std::string __dst = *((void *)this + 19);
                                                          *(void *)&__dst[8] = v170;
                                                          if (v170) {
                                                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v170 + 8), 1uLL, memory_order_relaxed);
                                                          }
                                                          uint64_t v149 = (ACFULogging *)sendProvisionPing(v168, (uint64_t *)__src, (ACFUFirmware **)__dst, &v201);
                                                          char v171 = (char)v149;
                                                          uint64_t v172 = *(std::__shared_weak_count **)&__dst[8];
                                                          if (*(void *)&__dst[8]
                                                            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                                                            std::__shared_weak_count::__release_weak(v172);
                                                          }
                                                          uint64_t v173 = (std::__shared_weak_count *)*((void *)&__src[0] + 1);
                                                          if (*((void *)&__src[0] + 1)
                                                            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__src[0] + 1)+ 8), 0xFFFFFFFFFFFFFFFFLL))
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                                                            std::__shared_weak_count::__release_weak(v173);
                                                          }
                                                          if ((v171 & 1) == 0)
                                                          {
LABEL_209:
                                                            ACFULogging::getLogInstance(v149);
LABEL_284:
                                                            ACFULogging::handleMessage();
                                                            goto LABEL_285;
                                                          }
                                                          if (!v201)
                                                          {
                                                            ACFULogging::getLogInstance(v149);
                                                            ACFULogging::handleMessage();
                                                            int v177 = (ACFULogging *)*((void *)this + 17);
                                                            std::string::size_type v178 = *((void *)this + 52);
                                                            v198.__r_.__value_.__r.__words[0] = *((void *)this + 51);
                                                            v198.__r_.__value_.__l.__size_ = v178;
                                                            if (v178) {
                                                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v178 + 8), 1uLL, memory_order_relaxed);
                                                            }
                                                            std::string::size_type v179 = *((void *)this + 20);
                                                            v197.__r_.__value_.__r.__words[0] = *((void *)this + 19);
                                                            v197.__r_.__value_.__l.__size_ = v179;
                                                            if (v179) {
                                                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v179 + 8), 1uLL, memory_order_relaxed);
                                                            }
                                                            uint64_t v149 = (ACFULogging *)provisionBaseband(v177, (uint64_t *)&v198, (ACFUFirmware **)&v197, &v203);
                                                            char v180 = (char)v149;
                                                            std::string::size_type size = (std::__shared_weak_count *)v197.__r_.__value_.__l.__size_;
                                                            if (v197.__r_.__value_.__l.__size_
                                                              && !atomic_fetch_add((atomic_ullong *volatile)(v197.__r_.__value_.__l.__size_+ 8), 0xFFFFFFFFFFFFFFFFLL))
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                                                              std::__shared_weak_count::__release_weak(size);
                                                            }
                                                            int v182 = (std::__shared_weak_count *)v198.__r_.__value_.__l.__size_;
                                                            if (v198.__r_.__value_.__l.__size_
                                                              && !atomic_fetch_add((atomic_ullong *volatile)(v198.__r_.__value_.__l.__size_+ 8), 0xFFFFFFFFFFFFFFFFLL))
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                                                              std::__shared_weak_count::__release_weak(v182);
                                                            }
                                                            if (v180) {
                                                              goto LABEL_170;
                                                            }
                                                            goto LABEL_209;
                                                          }
                                                          std::string::size_type v174 = *((void *)this + 52);
                                                          v198.__r_.__value_.__r.__words[0] = *((void *)this + 51);
                                                          v198.__r_.__value_.__l.__size_ = v174;
                                                          if (v174) {
                                                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v174 + 8), 1uLL, memory_order_relaxed);
                                                          }
                                                          std::string::size_type v175 = *((void *)this + 20);
                                                          v197.__r_.__value_.__r.__words[0] = *((void *)this + 19);
                                                          v197.__r_.__value_.__l.__size_ = v175;
                                                          if (v175) {
                                                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 8), 1uLL, memory_order_relaxed);
                                                          }
                                                          unint64_t v199 = 0;
                                                          p_CFTypeRef cf = &cf;
                                                          char v176 = createBasebandProvInfo(0, &v198, (ACFUFirmware **)&v197, &v199);
                                                          uint64_t v149 = (ACFULogging *)*p_cf;
                                                          if (v199)
                                                          {
                                                            *p_CFTypeRef cf = v199;
                                                            if (v149) {
                                                              goto LABEL_211;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            *p_CFTypeRef cf = 0;
                                                            if (v149) {
LABEL_211:
                                                            }
                                                              CFRelease(v149);
                                                          }
                                                          uint64_t v183 = (std::__shared_weak_count *)v197.__r_.__value_.__l.__size_;
                                                          if (v197.__r_.__value_.__l.__size_
                                                            && !atomic_fetch_add((atomic_ullong *volatile)(v197.__r_.__value_.__l.__size_+ 8), 0xFFFFFFFFFFFFFFFFLL))
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                                                            std::__shared_weak_count::__release_weak(v183);
                                                          }
                                                          v184 = (std::__shared_weak_count *)v198.__r_.__value_.__l.__size_;
                                                          if (v198.__r_.__value_.__l.__size_
                                                            && !atomic_fetch_add((atomic_ullong *volatile)(v198.__r_.__value_.__l.__size_+ 8), 0xFFFFFFFFFFFFFFFFLL))
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                                                            std::__shared_weak_count::__release_weak(v184);
                                                          }
                                                          if ((v176 & 1) != 0 && cf)
                                                          {
                                                            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                                                            v203 = Mutable;
                                                            if (Mutable)
                                                            {
                                                              CFDictionaryAddValue(Mutable, @"BasebandProvInfo", cf);
                                                              char v167 = (const void *)*((void *)this + 59);
                                                              *((void *)this + 59) = v203;
                                                              if (!v167) {
                                                                goto LABEL_223;
                                                              }
                                                              goto LABEL_222;
                                                            }
                                                            ACFULogging::getLogInstance(0);
                                                            goto LABEL_284;
                                                          }
                                                          goto LABEL_209;
                                                        }
LABEL_152:
                                                        BOOL v154 = 0;
                                                        goto LABEL_153;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      int v145 = 1;
                                                      if (!v143) {
                                                        goto LABEL_136;
                                                      }
                                                    }
                                                    CFRelease(v143);
                                                    goto LABEL_136;
                                                  }
                                                }
                                                else if ((__dst[23] & 0x80000000) == 0)
                                                {
                                                  goto LABEL_128;
                                                }
                                                operator delete(*(void **)__dst);
                                                if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                  goto LABEL_129;
                                                }
                                                goto LABEL_197;
                                              }
                                            }
                                            else if ((__dst[23] & 0x80000000) == 0)
                                            {
                                              goto LABEL_124;
                                            }
                                            operator delete(*(void **)__dst);
                                            if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                              goto LABEL_125;
                                            }
                                            goto LABEL_194;
                                          }
                                          ACFULogging::getLogInstance(0);
LABEL_271:
                                          uint64_t v114 = (ACFULogging *)ACFULogging::handleMessage();
                                          goto LABEL_294;
                                        }
LABEL_269:
                                        ACFULogging::getLogInstance(v118);
                                        goto LABEL_271;
                                      }
                                    }
                                    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
                                    if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) {
                                      goto LABEL_120;
                                    }
                                    goto LABEL_269;
                                  }
                                }
                                else
                                {
                                  uint64_t v104 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerStop", "sBBUFSServerStop function not initialized\n", v95, v96, v97, v98, v99, v100, (char)"BasebandRestore");
                                }
                                ACFULogging::getLogInstance(v104);
                                BOOL v195 = "BasebandRestore";
                                ACFULogging::handleMessage();
                                goto LABEL_92;
                              }
                            }
                            else
                            {
                              uint64_t v70 = (uint64_t)_BBUFSDebugPrint("BBUFSServerFlush", "sBBUFSServerFlush function not initialized\n", v89, v90, v91, v92, v93, v94, (char)"BasebandRestore");
                            }
                          }
                        }
                        else
                        {
                          uint64_t v70 = (uint64_t)_BBUFSDebugPrint("BBUFSServerStart", "sBBUFSServerStart function not initialized\n", v83, v84, v85, v86, v87, v88, (char)"BasebandRestore");
                        }
                      }
                    }
                    else
                    {
                      uint64_t v70 = (uint64_t)_BBUFSDebugPrint("BBUFSServerSetConfig", "sBBUFSServerSetConfig function not initialized\n", v77, v78, v79, v80, v81, v82, (char)"BasebandRestore");
                    }
                  }
                }
                else
                {
                  uint64_t v70 = (uint64_t)_BBUFSDebugPrint("BBUFSServerSetConfig", "sBBUFSServerSetConfig function not initialized\n", v71, v72, v73, v74, v75, v76, (char)"BasebandRestore");
                }
              }
            }
            else
            {
              uint64_t v70 = (uint64_t)_BBUFSDebugPrint("BBUFSServerParametersInit", "required path length = %zu, copied = %zu, max length = %zu\n", v58, v59, v60, v61, v62, v63, v56 + 1);
              *((void *)&__src[22] + 1) = 0;
            }
          }
          else
          {
            uint64_t v70 = (uint64_t)_BBUFSDebugPrint("BBUFSServerParametersInit", "invalid parameters specified: parameters = %p, destination = %s\n", v50, v51, v52, v53, v54, v55, (char)__src);
          }
          ACFULogging::getLogInstance((ACFULogging *)v70);
          BOOL v195 = "BasebandRestore";
          ACFULogging::handleMessage();
          char v101 = 0;
          long long v102 = &unk_267D24000;
          if (!(_BYTE)v231) {
            goto LABEL_92;
          }
          goto LABEL_87;
        }
        Svn = (ACFULogging *)KTLCpsGetSvn();
        if (Svn)
        {
          ACFULogging::getLogInstance(Svn);
          CFBooleanRef v42 = (ACFULogging *)ACFULogging::handleMessage();
          if (v33 != LOBYTE(__src[0]))
          {
            ACFULogging::getLogInstance(v42);
            ACFULogging::handleMessage();
            CFBooleanRef v42 = (ACFULogging *)KTLCpsSetSvn();
            if (!v42) {
              goto LABEL_53;
            }
          }
        }
        else
        {
          ACFULogging::getLogInstance(Svn);
          ACFULogging::handleMessage();
          CFBooleanRef v42 = (ACFULogging *)KTLCpsSetSvn();
          if (!v42)
          {
LABEL_53:
            ACFULogging::getLogInstance(v42);
            ACFULogging::handleMessage();
            (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
            goto LABEL_54;
          }
        }
        ACFULogging::getLogInstance(v42);
        ACFULogging::handleMessage();
        (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        goto LABEL_57;
    }
  }
  return result;
}

void sub_21DF32F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const void *a23,uint64_t a24,const void *a25,const void *a26)
{
}

void sub_21DF33244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::addEntitlements(CFDictionaryRef *this, __CFDictionary *a2)
{
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(this[17], @"BasebandEnableCalibration");
  if (Value)
  {
    CFBooleanRef v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,BbCalibrationEnable", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  CFBooleanRef v7 = (const __CFBoolean *)CFDictionaryGetValue(this[17], @"BasebandEnableFactoryDebug");
  if (v7)
  {
    CFBooleanRef v8 = v7;
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == CFBooleanGetTypeID() && CFBooleanGetValue(v8) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,BbFactoryDebugEnable", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  CFBooleanRef v10 = (const __CFBoolean *)CFDictionaryGetValue(this[17], @"BasebandEnableActivationBypass");
  if (v10)
  {
    CFBooleanRef v11 = v10;
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 == CFBooleanGetTypeID() && CFBooleanGetValue(v11) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,BbActivationBypassEnable", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  CFBooleanRef v13 = (const __CFBoolean *)CFDictionaryGetValue(this[16], @"BasebandHardwareConfigLockOverride");
  if (v13)
  {
    CFBooleanRef v14 = v13;
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 == CFBooleanGetTypeID() && CFBooleanGetValue(v14) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,HardwareConfigLockOverride", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  uint64_t v16 = (ACFULogging *)CFDictionaryGetValue(this[17], @"BasebandFactoryActivationKeyID");
  if (v16)
  {
    uint64_t v17 = v16;
    ACFULogging::getLogInstance(v16);
    ACFULogging::handleMessage();
    CFTypeID v18 = CFGetTypeID(v17);
    if (v18 == CFStringGetTypeID())
    {
      v42.isa = 0;
      v42.info = (uint64_t)&v42.data;
      v42.data = 0;
      int v20 = support::cf::copyDataFromHexString(v17, &v42, v19);
      uint64_t v21 = *(const void **)v42.info;
      if (v42.isa)
      {
        *(void *)v42.info = v42.isa;
        if (!v21) {
          goto LABEL_24;
        }
      }
      else
      {
        *(void *)v42.info = 0;
        if (!v21) {
          goto LABEL_24;
        }
      }
      CFRelease(v21);
LABEL_24:
      data = v42.data;
      if (v20)
      {
        if (v42.data
           ? ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get
           : 0)
        {
          ACFULogging::getLogInstance((ACFULogging *)v42.data);
          ACFULogging::handleMessage();
          CFDictionarySetValue(a2, @"Cellular1,BbFactoryActivationManifestKeyHash", v42.data);
          data = v42.data;
        }
      }
      if (data) {
        CFRelease(data);
      }
    }
  }
  CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue(this[17], @"FDRAllowUnsealedData");
  if (v24)
  {
    CFBooleanRef v25 = v24;
    CFTypeID v26 = CFGetTypeID(v24);
    if (v26 == CFBooleanGetTypeID() && CFBooleanGetValue(v25) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,FDRAllowUnsealed", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  CFBooleanRef v27 = (const __CFBoolean *)CFDictionaryGetValue(this[17], @"FDRSkipSealing");
  if (v27)
  {
    CFBooleanRef v28 = v27;
    CFTypeID v29 = CFGetTypeID(v27);
    if (v29 == CFBooleanGetTypeID() && CFBooleanGetValue(v28) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,FDRAllowUnsealed", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  uint64_t v30 = CFDictionaryGetValue(this[17], @"BbRequestEntries");
  if (!v30)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_54;
  }
  uint64_t v31 = v30;
  CFTypeID v32 = CFGetTypeID(v30);
  if (v32 != CFDictionaryGetTypeID())
  {
    CFTypeID v39 = CFGetTypeID(v31);
    uint64_t TypeID = (ACFULogging *)CFDictionaryGetTypeID();
    if ((ACFULogging *)v39 == TypeID) {
      goto LABEL_55;
    }
    ACFULogging::getLogInstance(TypeID);
LABEL_54:
    ACFULogging::handleMessage();
    goto LABEL_55;
  }
  AMSupportSafeRetain();
  CFBooleanRef v33 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v31, @"BbFATPCalibrationEnable");
  if (v33)
  {
    CFBooleanRef v34 = v33;
    CFTypeID v35 = CFGetTypeID(v33);
    if (v35 == CFBooleanGetTypeID() && CFBooleanGetValue(v34) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,BbFATPCalibrationEnable", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  CFBooleanRef v36 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v31, @"BbProvisioningEnable");
  if (v36)
  {
    CFBooleanRef v37 = v36;
    CFTypeID v38 = CFGetTypeID(v36);
    if (v38 == CFBooleanGetTypeID() && CFBooleanGetValue(v37) == 1) {
      CFDictionarySetValue(a2, @"Cellular1,BbProvisioningEnable", (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  CFRelease(v31);
LABEL_55:
  CFDictionarySetValue(a2, @"LocalSigningID", (const void *)*MEMORY[0x263EFFB38]);
  return 1;
}

void sub_21DF33760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF33774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  CFBooleanRef v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  ctu::cf::detail::TakeOwnershipProxy<__CFData const>::~TakeOwnershipProxy((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void BasebandRestore::queryCmd(const __CFDictionary **this@<X0>, uint64_t a2@<X8>)
{
  ACFULogging::getLogInstance((ACFULogging *)this);
  uint64_t CurrentUpdateStep = ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
  ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
  ACFURestore::getStepName();
  if ((SBYTE7(v42[1]) & 0x80u) == 0) {
    CFBooleanRef v5 = v42;
  }
  else {
    CFBooleanRef v5 = *(_OWORD **)&v42[0];
  }
  CFTypeID v38 = v5;
  ACFULogging::handleMessage();
  if (SBYTE7(v42[1]) < 0)
  {
    operator delete(*(void **)&v42[0]);
    CFTypeID v6 = (ACFULogging *)ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
    if (!v6)
    {
LABEL_20:
      if (ACFURestore::isNeRDOS((ACFURestore *)this))
      {
        isPreflighted = (ACFULogging *)ACFURestore::isPreflighted((ACFURestore *)this);
        if (isPreflighted)
        {
          ACFULogging::getLogInstance(isPreflighted);
          ACFULogging::handleMessage();
          CFDictionaryRef v18 = this[21];
          if (!v18)
          {
            ACFULogging::getLogInstance(0);
            ACFULogging::handleMessage();
            goto LABEL_54;
          }
          memset(v42, 170, 24);
          CFBooleanRef v19 = (ACFULogging *)(**(void *(***)(_OWORD *__return_ptr))v18)(v42);
          if (LODWORD(v42[1]))
          {
            ACFULogging::getLogInstance(v19);
            ACFULogging::handleMessage();
          }
          else
          {
            ACFULogging::getLogInstance(v19);
            ACFULogging::handleMessage();
            long long v20 = v42[0];
            *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v42[0];
            if (*((void *)&v42[0] + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42[0] + 1) + 8), 1uLL, memory_order_relaxed);
            }
            ParametersDictionary = (ACFULogging *)ACFUCommon::PersonalizeParams::getParametersDictionary((ACFUCommon::PersonalizeParams *)v20);
            uint64_t v22 = ParametersDictionary;
            if (*((void *)&v20 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(void))(**((void **)&v20 + 1) + 16))(*((void *)&v20 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
            }
            if (v22)
            {
              ACFULogging::getLogInstance(ParametersDictionary);
              *((unsigned char *)&v39.__r_.__value_.__s + 23) = 15;
              strcpy((char *)&v39, "BasebandRestore");
              uint64_t v23 = std::string::append(&v39, "::", 2uLL);
              long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
              v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
              v23->__r_.__value_.__l.__size_ = 0;
              v23->__r_.__value_.__r.__words[2] = 0;
              v23->__r_.__value_.__r.__words[0] = 0;
              CFBooleanRef v25 = std::string::append(&v40, "FWUpdateQuery", 0xDuLL);
              long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
              v41.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v26;
              v25->__r_.__value_.__l.__size_ = 0;
              v25->__r_.__value_.__r.__words[2] = 0;
              v25->__r_.__value_.__r.__words[0] = 0;
              ACFULogging::handleMessageCFType();
              if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v41.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_32:
                  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_33;
                  }
                  goto LABEL_65;
                }
              }
              else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_32;
              }
              operator delete(v40.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_33:
                char v27 = 1;
                CFBooleanRef v28 = (std::__shared_weak_count *)*((void *)&v42[0] + 1);
                if (!*((void *)&v42[0] + 1)) {
                  goto LABEL_51;
                }
                goto LABEL_66;
              }
LABEL_65:
              operator delete(v39.__r_.__value_.__l.__data_);
              char v27 = 1;
              CFBooleanRef v28 = (std::__shared_weak_count *)*((void *)&v42[0] + 1);
              if (!*((void *)&v42[0] + 1)) {
                goto LABEL_51;
              }
              goto LABEL_66;
            }
            ACFULogging::getLogInstance(ParametersDictionary);
            ACFULogging::handleMessage();
            std::string::basic_string[abi:ne180100]<0>(&v41, "Failed to create personalization parameters dictionary");
            ACFUError::addError();
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v41.__r_.__value_.__l.__data_);
            }
          }
          char v27 = 0;
          uint64_t v22 = 0;
          CFBooleanRef v28 = (std::__shared_weak_count *)*((void *)&v42[0] + 1);
          if (!*((void *)&v42[0] + 1))
          {
LABEL_51:
            if ((v27 & 1) != 0 || !v22) {
              goto LABEL_55;
            }
            CFRelease(v22);
LABEL_54:
            char v27 = 0;
            uint64_t v22 = 0;
LABEL_55:
            *(void *)a2 = v22;
            *(unsigned char *)(a2 + 8) = v27;
            return;
          }
LABEL_66:
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          goto LABEL_51;
        }
      }
      v39.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      v39.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      ACFURestore::queryCmd((uint64_t *)&v39, (ACFURestore *)this);
      if (!v39.__r_.__value_.__s.__data_[8])
      {
        uint64_t v22 = 0;
        char v27 = 0;
        goto LABEL_51;
      }
      uint64_t v22 = (ACFULogging *)v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__r.__words[0])
      {
        CFStringRef v29 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@.%@", @"BundleOverrides", @"BasebandFirmware", CurrentUpdateStep, v38);
        if (v29)
        {
          uint64_t ValueForKeyPathInDict = AMSupportGetValueForKeyPathInDict();
          uint64_t v31 = (const void *)ValueForKeyPathInDict;
          if (ValueForKeyPathInDict)
          {
            CFTypeID TypeID = CFStringGetTypeID();
            CFBooleanRef v33 = (ACFULogging *)CFGetTypeID(v31);
            if ((ACFULogging *)TypeID != v33)
            {
              ACFULogging::getLogInstance(v33);
              CFGetTypeID(v31);
              ACFULogging::handleMessage();
              goto LABEL_78;
            }
            CFDictionarySetValue(v22, @"ACFUFirmware", v31);
          }
          if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
          {
            if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
              goto LABEL_43;
            }
          }
          else
          {
            dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
            if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
            {
LABEL_43:
              if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)) {
                goto LABEL_46;
              }
LABEL_44:
              if (this[17])
              {
                uint64_t ValueForKeyPathInDict = (*((uint64_t (**)(const __CFDictionary **, ACFULogging *))*this + 12))(this, v22);
                if (ValueForKeyPathInDict)
                {
LABEL_46:
                  ACFULogging::getLogInstance((ACFULogging *)ValueForKeyPathInDict);
                  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 15;
                  strcpy((char *)&v40, "BasebandRestore");
                  CFBooleanRef v34 = std::string::append(&v40, "::", 2uLL);
                  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
                  v41.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v35;
                  v34->__r_.__value_.__l.__size_ = 0;
                  v34->__r_.__value_.__r.__words[2] = 0;
                  v34->__r_.__value_.__r.__words[0] = 0;
                  CFBooleanRef v36 = std::string::append(&v41, "FWUpdateQuery", 0xDuLL);
                  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
                  *(void *)&v42[1] = *((void *)&v36->__r_.__value_.__l + 2);
                  v42[0] = v37;
                  v36->__r_.__value_.__l.__size_ = 0;
                  v36->__r_.__value_.__r.__words[2] = 0;
                  v36->__r_.__value_.__r.__words[0] = 0;
                  ACFULogging::handleMessageCFType();
                  if (SBYTE7(v42[1]) < 0)
                  {
                    operator delete(*(void **)&v42[0]);
                    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_48:
                      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_49:
                        char v27 = 1;
LABEL_50:
                        CFRelease(v29);
                        goto LABEL_51;
                      }
LABEL_59:
                      operator delete(v40.__r_.__value_.__l.__data_);
                      goto LABEL_49;
                    }
                  }
                  else if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_48;
                  }
                  operator delete(v41.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_49;
                  }
                  goto LABEL_59;
                }
              }
              ACFULogging::getLogInstance((ACFULogging *)ValueForKeyPathInDict);
              ACFULogging::handleMessage();
LABEL_78:
              char v27 = 0;
              goto LABEL_50;
            }
          }
          dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
          if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)) {
            goto LABEL_46;
          }
          goto LABEL_44;
        }
        ACFULogging::getLogInstance(0);
        ACFULogging::handleMessage();
      }
      char v27 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    CFTypeID v6 = (ACFULogging *)ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
    if (!v6) {
      goto LABEL_20;
    }
  }
  if (v6 == 2) {
    goto LABEL_20;
  }
  if (v6 == 3)
  {
    CFDictionaryRef v7 = this[59];
    if (v7) {
      CFBooleanRef v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      CFBooleanRef v8 = 0;
    }
    if (!v8)
    {
      ACFULogging::getLogInstance(v6);
      ACFULogging::handleMessage();
      CFBooleanRef v10 = 0;
      char v16 = 0;
      goto LABEL_19;
    }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v7);
    CFBooleanRef v10 = MutableCopy;
    if (!MutableCopy)
    {
      ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage();
      char v16 = 0;
      goto LABEL_19;
    }
    CFDictionaryAddValue(MutableCopy, @"LocalSigningID", (const void *)*MEMORY[0x263EFFB40]);
    ACFULogging::getLogInstance(v11);
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v40, "BasebandRestore");
    CFTypeID v12 = std::string::append(&v40, "::", 2uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    CFBooleanRef v14 = std::string::append(&v41, "ProvisionQuery", 0xEuLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)&v42[1] = *((void *)&v14->__r_.__value_.__l + 2);
    v42[0] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    ACFULogging::handleMessageCFType();
    if (SBYTE7(v42[1]) < 0)
    {
      operator delete(*(void **)&v42[0]);
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_18:
          char v16 = 1;
LABEL_19:
          *(void *)a2 = v10;
          *(unsigned char *)(a2 + 8) = v16;
          return;
        }
LABEL_62:
        operator delete(v40.__r_.__value_.__l.__data_);
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_62;
  }
  ACFURestore::queryCmd((uint64_t *)a2, (ACFURestore *)this);
}

void sub_21DF34018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v32 - 96);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v32 - 96);
  _Unwind_Resume(a1);
}

void sub_21DF34170()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x21DF34180);
  }
  JUMPOUT(0x21DF34184);
}

uint64_t BasebandRestore::bootInternal(ACFURTKitROM **this)
{
  __s1.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __s1.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __s1.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  ACFULogging::getLogInstance((ACFULogging *)this);
  ACFULogging::handleMessage();
  uint64_t v2 = this[19];
  if (!v2)
  {
    ACFULogging::getLogInstance(0);
LABEL_211:
    ACFULogging::handleMessage();
LABEL_212:
    uint64_t v75 = 0;
    if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v75;
    }
    goto LABEL_200;
  }
  if (!this[21] || !this[51])
  {
    ACFULogging::getLogInstance(v2);
    goto LABEL_211;
  }
  if (!*((unsigned char *)this + 465)) {
    goto LABEL_185;
  }
  memset(&v92, 0, sizeof(v92));
  v90.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v90.__r_.__value_.__r.__words[2] = 0x5AAAAAAAAAAAAAALL;
  v90.__r_.__value_.__r.__words[0] = 0xAAAA003A57464242;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "bver");
  CFDataRef Length = (const __CFData *)ACFUFirmware::copyFWDataByFileName();
  CFDataRef v4 = Length;
  CFTypeRef cf = Length;
  if (Length) {
    CFBooleanRef v5 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    CFBooleanRef v5 = 0;
  }
  if (!v5) {
    goto LABEL_9;
  }
  BytePtr = (const std::string::value_type *)CFDataGetBytePtr(Length);
  if (!BytePtr)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_33;
  }
  CFDataRef Length = (const __CFData *)CFDataGetLength(v4);
  if ((uint64_t)Length <= 0)
  {
LABEL_9:
    ACFULogging::getLogInstance(Length);
    goto LABEL_33;
  }
  CFDictionaryRef v7 = (unsigned __int8 *)std::string::__assign_external(&v92, BytePtr);
  std::string::size_type size = v92.__r_.__value_.__l.__size_;
  CFTypeID v9 = (std::string *)v92.__r_.__value_.__r.__words[0];
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFBooleanRef v10 = &v92;
  }
  else {
    CFBooleanRef v10 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v11 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v12 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v12 = v92.__r_.__value_.__l.__size_;
  }
  if (v12 < 5) {
    goto LABEL_32;
  }
  long long v13 = (unsigned __int8 *)v10 + v12;
  CFDictionaryRef v7 = (unsigned __int8 *)v10;
  while (1)
  {
    CFDictionaryRef v7 = (unsigned __int8 *)memchr(v7, v90.__r_.__value_.__s.__data_[0], v12 - 4);
    if (!v7) {
      goto LABEL_32;
    }
    if (*(_DWORD *)v7 == LODWORD(v90.__r_.__value_.__l.__data_)
      && v7[4] == v90.__r_.__value_.__s.__data_[4])
    {
      break;
    }
    ++v7;
    int64_t v12 = v13 - v7;
    if (v13 - v7 < 5) {
      goto LABEL_32;
    }
  }
  if (v7 == v13 || v7 - (unsigned __int8 *)v10 == -1)
  {
LABEL_32:
    ACFULogging::getLogInstance((ACFULogging *)v7);
    goto LABEL_33;
  }
  unint64_t v15 = v7 - (unsigned __int8 *)v10 + 5;
  if ((v11 & 0x80) == 0)
  {
    if (v15 <= v11)
    {
      CFTypeID v9 = &v92;
      std::string::size_type size = v11;
      goto LABEL_38;
    }
LABEL_217:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (size < v15) {
    goto LABEL_217;
  }
LABEL_38:
  std::string::size_type v18 = size - v15;
  if (size - v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    uint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v20 = v18 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_p = (std::string *)operator new(v20 + 1);
    __p.__r_.__value_.__l.__size_ = v18;
    __p.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = size - v15;
    p_p = &__p;
    if (size == v15) {
      goto LABEL_46;
    }
  }
  CFDictionaryRef v7 = (unsigned __int8 *)memmove(p_p, (char *)v9 + v15, v18);
LABEL_46:
  p_p->__r_.__value_.__s.__data_[v18] = 0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  std::string v92 = __p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t v22 = v92.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v92;
  }
  else {
    uint64_t v23 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  if ((uint64_t)v22 >= 1)
  {
    long long v24 = (unsigned __int8 *)v23 + v22;
    size_t v25 = v22;
    CFDictionaryRef v7 = (unsigned __int8 *)v23;
    while (1)
    {
      CFDictionaryRef v7 = (unsigned __int8 *)memchr(v7, 124, v25);
      if (!v7) {
        goto LABEL_68;
      }
      if (*v7 == 124) {
        break;
      }
      ++v7;
      size_t v25 = v24 - v7;
      if (v24 - v7 < 1) {
        goto LABEL_68;
      }
    }
    if (v7 == v24 || v7 - (unsigned __int8 *)v23 == -1) {
      goto LABEL_68;
    }
    if (v22 >= v7 - (unsigned __int8 *)v23) {
      unint64_t v22 = v7 - (unsigned __int8 *)v23;
    }
    if (v22 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v22 >= 0x17)
    {
      uint64_t v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v27 = v22 | 7;
      }
      uint64_t v28 = v27 + 1;
      long long v26 = (std::string *)operator new(v27 + 1);
      __p.__r_.__value_.__l.__size_ = v22;
      __p.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v22;
      long long v26 = &__p;
      if (!v22)
      {
LABEL_73:
        v26->__r_.__value_.__s.__data_[v22] = 0;
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        std::string __s1 = __p;
        char v16 = 1;
        if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_76;
      }
    }
    memmove(v26, v23, v22);
    goto LABEL_73;
  }
LABEL_68:
  ACFULogging::getLogInstance((ACFULogging *)v7);
LABEL_33:
  ACFULogging::handleMessage();
  char v16 = 0;
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_77:
    operator delete(v92.__r_.__value_.__l.__data_);
    uint64_t v17 = (void *)cf;
    if (!cf) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
LABEL_76:
  operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_77;
  }
LABEL_35:
  uint64_t v17 = (void *)cf;
  if (cf) {
LABEL_78:
  }
    CFRelease(v17);
LABEL_79:
  if ((v16 & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)v17);
    goto LABEL_211;
  }
  v92.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v92.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  v92.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  std::string::size_type v29 = off_267D23ED8;
  if (!off_267D23ED8)
  {
    SharedData::create_default_global((SharedData *)&v90);
    long long v30 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v31 = (std::__shared_weak_count *)*(&off_267D23ED8 + 1);
    off_267D23ED8 = v30;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    uint64_t v32 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
    if (v90.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v90.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    std::string::size_type v29 = off_267D23ED8;
  }
  __p.__r_.__value_.__r.__words[0] = v29;
  __p.__r_.__value_.__l.__size_ = *(&off_267D23ED8 + 1);
  if (*(&off_267D23ED8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_267D23ED8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  long long v78 = xmmword_21DFACB40;
  *(_OWORD *)&v90.__r_.__value_.__r.__words[1] = xmmword_21DFACB40;
  strcpy(v90.__r_.__value_.__l.__data_, "Baseband firmware version");
  qmemcpy(v77, "firmware versionBaseband firmwar", sizeof(v77));
  CFBooleanRef v33 = (os_unfair_lock_s *)(v29 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFBooleanRef v34 = &v90;
  }
  else {
    CFBooleanRef v34 = (std::string *)v90.__r_.__value_.__r.__words[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&cf, (const char *)v34);
  long long v35 = (const void *)(**(uint64_t (***)(std::string::size_type, CFTypeRef))v29)(v29, cf);
  if (v35)
  {
    ctu::cf::assign();
    CFRelease(v35);
  }
  MEMORY[0x223C1D120](&cf);
  os_unfair_lock_unlock(v33);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  CFBooleanRef v36 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v38 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  int v39 = SHIBYTE(v92.__r_.__value_.__r.__words[2]);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v38 = v92.__r_.__value_.__l.__size_;
  }
  if (v37 != v38)
  {
    BOOL v46 = 1;
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
    goto LABEL_121;
  }
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v40 = &v92;
  }
  else {
    std::string v40 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v46 = memcmp(__s1.__r_.__value_.__l.__data_, v40, __s1.__r_.__value_.__l.__size_) != 0;
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_118;
    }
    goto LABEL_121;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    BOOL v46 = 0;
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
LABEL_121:
    operator delete(v92.__r_.__value_.__l.__data_);
    if (!v46) {
      goto LABEL_185;
    }
    goto LABEL_122;
  }
  uint64_t v41 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
  p_s1 = &__s1;
  do
  {
    int v44 = p_s1->__r_.__value_.__s.__data_[0];
    p_s1 = (std::string *)((char *)p_s1 + 1);
    int v43 = v44;
    int v45 = v40->__r_.__value_.__s.__data_[0];
    std::string v40 = (std::string *)((char *)v40 + 1);
    BOOL v46 = v43 != v45;
  }
  while (v43 == v45 && v41-- != 0);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_121;
  }
LABEL_118:
  if (!v46) {
    goto LABEL_185;
  }
LABEL_122:
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  std::string::size_type v48 = off_267D23ED8;
  if (!off_267D23ED8)
  {
    SharedData::create_default_global((SharedData *)&v92);
    long long v49 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v50 = (std::__shared_weak_count *)*(&off_267D23ED8 + 1);
    off_267D23ED8 = v49;
    if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    uint64_t v51 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
    if (v92.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v92.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    std::string::size_type v48 = off_267D23ED8;
  }
  v90.__r_.__value_.__r.__words[0] = v48;
  v90.__r_.__value_.__l.__size_ = *(&off_267D23ED8 + 1);
  if (*(&off_267D23ED8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_267D23ED8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v92.__r_.__value_.__r.__words[1] = xmmword_21DFACB50;
  strcpy(v92.__r_.__value_.__l.__data_, "Firmware version changed since last commcenter launch");
  os_unfair_lock_lock((os_unfair_lock_t)(v48 + 40));
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v92;
  }
  else {
    uint64_t v52 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&cf, (const char *)v52);
  uint64_t v53 = (const void *)*MEMORY[0x263EFFB40];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
  uint64_t v54 = (CFStringRef *)MEMORY[0x263EFFE68];
  if (v53)
  {
    CFStringRef v55 = (const __CFString *)*MEMORY[0x263EFFE68];
    CFPreferencesSetValue((CFStringRef)cf, v53, *(CFStringRef *)(v48 + 8), *(CFStringRef *)(v48 + 16), (CFStringRef)*MEMORY[0x263EFFE68]);
    CFPreferencesSynchronize(*(CFStringRef *)(v48 + 8), *(CFStringRef *)(v48 + 16), v55);
    CFRelease(v53);
  }
  MEMORY[0x223C1D120](&cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v48 + 40));
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  size_t v56 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
  if (v90.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v90.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v57 = off_267D23ED8;
  if (!off_267D23ED8)
  {
    SharedData::create_default_global((SharedData *)&v92);
    long long v58 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v59 = (std::__shared_weak_count *)*(&off_267D23ED8 + 1);
    off_267D23ED8 = v58;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
    uint64_t v60 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
    if (v92.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v92.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
    uint64_t v57 = off_267D23ED8;
  }
  uint64_t v86 = v57;
  uint64_t v87 = (std::__shared_weak_count *)*(&off_267D23ED8 + 1);
  if (*(&off_267D23ED8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_267D23ED8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v61 = operator new(0x20uLL);
  CFTypeRef cf = v61;
  long long v85 = v78;
  *uint64_t v61 = v77[1];
  *(_OWORD *)((char *)v61 + 9) = v77[0];
  *((unsigned char *)v61 + 25) = 0;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v83, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
  }
  else {
    std::string v83 = __s1;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v57 + 40));
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v83;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v90, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v90 = __p;
  }
  if (v85 >= 0) {
    p_CFTypeRef cf = (const char *)&cf;
  }
  else {
    p_CFTypeRef cf = (const char *)cf;
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v92, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v92 = v90;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v91, p_cf);
  CFStringRef v63 = v91;
  CFPropertyListRef v94 = 0;
  ctu::cf::convert_copy();
  CFPropertyListRef v64 = v94;
  CFPropertyListRef v93 = v94;
  if (v94)
  {
    CFStringRef v65 = *v54;
    CFPreferencesSetValue(v63, v94, *(CFStringRef *)(v57 + 8), *(CFStringRef *)(v57 + 16), *v54);
    CFPreferencesSynchronize(*(CFStringRef *)(v57 + 8), *(CFStringRef *)(v57 + 16), v65);
    CFRelease(v64);
  }
  MEMORY[0x223C1D120](&v91);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_173:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_174;
      }
      goto LABEL_180;
    }
  }
  else if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_173;
  }
  operator delete(v90.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_174:
    os_unfair_lock_unlock((os_unfair_lock_t)(v57 + 40));
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_175;
    }
    goto LABEL_181;
  }
LABEL_180:
  operator delete(__p.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock((os_unfair_lock_t)(v57 + 40));
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_175:
    if ((SHIBYTE(v85) & 0x80000000) == 0) {
      goto LABEL_176;
    }
    goto LABEL_182;
  }
LABEL_181:
  operator delete(v83.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85) & 0x80000000) == 0)
  {
LABEL_176:
    uint64_t v66 = v87;
    if (!v87) {
      goto LABEL_185;
    }
    goto LABEL_183;
  }
LABEL_182:
  operator delete((void *)cf);
  uint64_t v66 = v87;
  if (!v87) {
    goto LABEL_185;
  }
LABEL_183:
  if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
LABEL_185:
  uint64_t v67 = (ACFULogging *)(*(uint64_t (**)(ACFURTKitROM *))(*(void *)this[21] + 32))(this[21]);
  if (v67)
  {
    ACFULogging::getLogInstance(v67);
LABEL_209:
    ACFULogging::handleMessage();
    goto LABEL_212;
  }
  uint64_t v68 = this[22];
  uint64_t v81 = this[21];
  uint64_t v82 = (std::__shared_weak_count *)v68;
  if (v68) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v68 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v69 = this[20];
  uint64_t v79 = this[19];
  uint64_t v80 = (std::__shared_weak_count *)v69;
  if (v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v69 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v70 = this[36];
  if (!v70) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v71 = (ACFULogging *)(*(uint64_t (**)(ACFURTKitROM *, ACFURTKitROM **, ACFURTKitROM **))(*(void *)v70 + 48))(v70, &v81, &v79);
  int v72 = (int)v71;
  uint64_t v73 = v80;
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  uint64_t v74 = v82;
  if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  if (v72 || (uint64_t v71 = (ACFULogging *)ACFURTKitROM::bootFirmware(this[51]), v71))
  {
    ACFULogging::getLogInstance(v71);
    goto LABEL_209;
  }
  ACFULogging::getLogInstance(v71);
  ACFULogging::handleMessage();
  uint64_t v75 = 1;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
LABEL_200:
  }
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v75;
}

void sub_21DF35010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 153) < 0)
  {
    operator delete(*(void **)(v46 - 176));
    if ((*(char *)(v46 - 121) & 0x80000000) == 0)
    {
LABEL_7:
      ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)&a26);
      if (a39 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v46 - 121) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v46 - 144));
  goto LABEL_7;
}

ACFULogging *BasebandRestore::bootCmd(BasebandRestore *this)
{
  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  uint64_t v2 = (ACFULogging *)BasebandRestore::bootInternal((ACFURTKitROM **)this);
  ACFULogging::getLogInstance(v2);
  ACFULogging::handleMessage();
  if (!v2) {
    BasebandRestore::coredumpInternal((CFDictionaryRef *)this);
  }
  return v2;
}

uint64_t BasebandRestore::coredumpInternal(CFDictionaryRef *this)
{
  std::string::size_type v37 = 0;
  ACFULogging::getLogInstance((ACFULogging *)this);
  uint64_t v2 = (ACFULogging *)ACFULogging::handleMessage();
  if (!this[19] || !this[21])
  {
    ACFULogging::getLogInstance(v2);
LABEL_62:
    ACFULogging::handleMessage();
    goto LABEL_66;
  }
  if (!CFDictionaryContainsKey(this[15], @"coreDumpReason")) {
    goto LABEL_48;
  }
  CFBooleanRef Value = (void *)CFDictionaryGetValue(this[15], @"coreDumpReason");
  CFDataRef v4 = Value;
  if (!Value)
  {
    ACFULogging::getLogInstance(0);
LABEL_65:
    ACFULogging::handleMessage();
LABEL_66:
    uint64_t v28 = 0;
    std::string::size_type v29 = v37;
    if (!v37) {
      return v28;
    }
    goto LABEL_55;
  }
  CFTypeID v5 = CFGetTypeID(Value);
  CFTypeID TypeID = (ACFULogging *)CFStringGetTypeID();
  if ((ACFULogging *)v5 != TypeID
    || ((CFTypeID v7 = CFGetTypeID(v4), TypeID = (ACFULogging *)CFStringGetTypeID(), (ACFULogging *)v7 != TypeID)
      ? (CFDataRef v4 = 0)
      : (CFTypeID TypeID = (ACFULogging *)CFRetain(v4)),
        (std::string::size_type v37 = v4) != 0
      ? (CFBooleanRef v8 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get)
      : (CFBooleanRef v8 = 0),
        !v8))
  {
    ACFULogging::getLogInstance(TypeID);
    goto LABEL_65;
  }
  memset(&__dst, 170, sizeof(__dst));
  CFTypeID v9 = (const char *)[v4 UTF8String:@"BasebandRestore" @"coredumpInternal"];
  size_t v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
    p_dst = &__dst;
    if (!v10)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      CFDictionaryRef v13 = this[21];
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_22;
    }
  }
  memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  CFDictionaryRef v13 = this[21];
  if (!v13) {
    goto LABEL_27;
  }
LABEL_22:
  if (v16)
  {
    uint64_t v17 = v16;
    std::string::size_type v18 = (std::__shared_weak_count *)this[22];
    CFBooleanRef v34 = v16;
    long long v35 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
LABEL_27:
  std::string::size_type v18 = 0;
  uint64_t v17 = 0;
  CFBooleanRef v34 = 0;
  long long v35 = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_28:
    std::string::__init_copy_ctor_external(&v33, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_29;
  }
LABEL_26:
  std::string v33 = __dst;
LABEL_29:
  CFBooleanRef v19 = (void **)(v17 + 192);
  if (v17 + 192 != (char *)&v33)
  {
    if (v17[215] < 0)
    {
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v33;
      }
      else {
        uint64_t v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>(v19, v20, size);
    }
    else if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v19, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)CFBooleanRef v19 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      *((void *)v17 + 26) = *((void *)&v33.__r_.__value_.__l + 2);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if (!v18) {
      goto LABEL_46;
    }
  }
  else if (!v18)
  {
LABEL_46:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_47:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_48:
  CFDictionaryRef v23 = this[20];
  CFDictionaryRef v22 = this[21];
  CFDictionaryRef v31 = this[19];
  uint64_t v32 = (std::__shared_weak_count *)v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v23 + 1, 1uLL, memory_order_relaxed);
  }
  long long v24 = (ACFULogging *)(*(uint64_t (**)(CFDictionaryRef, CFDictionaryRef *, uint64_t))(*(void *)v22 + 40))(v22, &v31, 1);
  int v25 = (int)v24;
  long long v26 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v25)
  {
    ACFULogging::getLogInstance(v24);
    goto LABEL_62;
  }
  uint64_t v27 = (ACFULogging *)ACFUDiagnostics::perform(this[23]);
  ACFULogging::getLogInstance(v27);
  ACFULogging::handleMessage();
  uint64_t v28 = 1;
  std::string::size_type v29 = v37;
  if (v37) {
LABEL_55:
  }
    CFRelease(v29);
  return v28;
}

void sub_21DF35774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v9);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v10 - 72));
  _Unwind_Resume(a1);
}

void sub_21DF35798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22)
{
  if (a18 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_3:
      ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v23 - 72));
      _Unwind_Resume(a1);
    }
  }
  operator delete(a22);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v23 - 72));
  _Unwind_Resume(a1);
}

void sub_21DF357F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_21DF35814(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21DF35828(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21DF3583C(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_21DF35850(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v1 - 72));
  _Unwind_Resume(a1);
}

ACFULogging *BasebandRestore::coredumpCmd(BasebandRestore *this)
{
  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  uint64_t v2 = (ACFULogging *)BasebandRestore::coredumpInternal((CFDictionaryRef *)this);
  ACFULogging::getLogInstance(v2);
  ACFULogging::handleMessage();
  return v2;
}

uint64_t BasebandRestore::performFusingCmd(BasebandRestore *this)
{
  ACFULogging::getLogInstance(this);
  uint64_t v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  ACFULogging::handleMessage();
  return 0;
}

uint64_t BasebandRestore::verifyFusingCmd(BasebandRestore *this)
{
  ACFULogging::getLogInstance(this);
  uint64_t v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  ACFULogging::handleMessage();
  return 0;
}

uint64_t BasebandRestore::downloadFusingProgramCmd(BasebandRestore *this)
{
  ACFULogging::getLogInstance(this);
  uint64_t v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  ACFULogging::handleMessage();
  return 0;
}

BOOL BasebandRestore::requirePartitionMountsCmd(BasebandRestore *this, const __CFDictionary **a2)
{
  uint64_t v3 = (ACFULogging *)capabilities::updater::BBUFSPartitionSizeMB(this);
  ACFULogging::getLogInstance(v3);
  CFDataRef v4 = (ACFULogging *)ACFULogging::handleMessage();
  if (a2)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFTypeID v7 = (ACFULogging *)ctu::cf::insert<__CFString const*,BOOL>(Mutable, @"requireSystemPartitionMount", 1);
    ACFULogging::getLogInstance(v7);
    CFStringGetCStringPtr(@"requireSystemPartitionMount", 0x8000100u);
    CFBooleanRef v8 = (ACFULogging *)ACFULogging::handleMessage();
    ACFULogging::getLogInstance(v8);
    ACFULogging::handleMessage();
    CFTypeID v9 = (ACFULogging *)ctu::cf::insert<__CFString const*,BOOL>(Mutable, @"requireUserPartitionMount", 1);
    ACFULogging::getLogInstance(v9);
    CFStringGetCStringPtr(@"requireUserPartitionMount", 0x8000100u);
    ACFULogging::handleMessage();
    CFRetain(@"requestedBasebandFSPartitionMountSize");
    uint64_t valuePtr = v3;
    CFNumberRef v10 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
    if (v10)
    {
      CFDictionaryAddValue(Mutable, @"requestedBasebandFSPartitionMountSize", v10);
      CFRelease(v10);
    }
    CFRelease(@"requestedBasebandFSPartitionMountSize");
    ACFULogging::getLogInstance(v11);
    CFStringGetCStringPtr(@"requestedBasebandFSPartitionMountSize", 0x8000100u);
    int64_t v12 = (ACFULogging *)ACFULogging::handleMessage();
    *a2 = Mutable;
    ACFULogging::getLogInstance(v12);
  }
  else
  {
    ACFULogging::getLogInstance(v4);
  }
  ACFULogging::handleMessage();
  return a2 != 0;
}

void sub_21DF35C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  CFTypeID v7 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_21DF35C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::copyBasebandMigrationDataCmd(BasebandRestore *this, const __CFDictionary **a2)
{
  memset(&v75, 170, sizeof(v75));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v3 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    CFDataRef v4 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v4);
    CFAllocatorRef v5 = operator new(0x20uLL);
    *CFAllocatorRef v5 = &unk_26CECF498;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    CFTypeID v6 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v4;
    off_26AA89B58 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = (BBUPartitionManager *)off_26AA89B50;
  }
  CFTypeID v7 = (std::__shared_weak_count *)off_26AA89B58;
  *(void *)&__p.st_dev = v3;
  __p.st_ino = (__darwin_ino64_t)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v3, &v75);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ACFULogging::getLogInstance(v8);
  CFTypeID v9 = "copyBasebandMigrationDataCmd";
  uint64_t v10 = ACFULogging::handleMessage();
  if (!a2) {
    goto LABEL_103;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  std::string::size_type v11 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    int64_t v12 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v12);
    CFDictionaryRef v13 = operator new(0x20uLL);
    *CFDictionaryRef v13 = &unk_26CECF498;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v12;
    uint64_t v14 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v12;
    off_26AA89B58 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    std::string::size_type v11 = (BBUPartitionManager *)off_26AA89B50;
  }
  uint64_t v15 = (std::__shared_weak_count *)off_26AA89B58;
  uint64_t v73 = (uint64_t *)v11;
  v74[0] = (uint64_t)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v11, (std::string *)&__p);
  if ((__p.st_gid & 0x80000000) == 0) {
    p_p = (bbufs *)&__p;
  }
  else {
    p_p = *(bbufs **)&__p.st_dev;
  }
  if (!p_p)
  {
    uint64_t v10 = (uint64_t)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v17, v18, v19, v20, v21, v22, 0);
    goto LABEL_28;
  }
  uint64_t v10 = bbufs::prepareDestination(p_p, v16);
  if ((v10 & 1) == 0)
  {
    uint64_t v10 = (uint64_t)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v24, v25, v26, v27, v28, v29, (char)"BasebandRestore");
LABEL_28:
    int v30 = 0;
    if (SHIBYTE(__p.st_gid) < 0) {
      goto LABEL_31;
    }
LABEL_29:
    if (!v15) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  int v30 = 1;
  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_31:
  operator delete(*(void **)&__p.st_dev);
  if (!v15) {
    goto LABEL_33;
  }
LABEL_32:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v30) {
      goto LABEL_34;
    }
LABEL_103:
    ACFULogging::getLogInstance((ACFULogging *)v10);
    goto LABEL_105;
  }
LABEL_33:
  if (!v30) {
    goto LABEL_103;
  }
LABEL_34:
  CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v67 = a2;
    uint64_t v68 = (uint64_t)Mutable;
    GetBasebandNVM4ccToFileNameMap(&v73);
    std::string v33 = v73;
    CFBooleanRef v34 = v74;
    if (v73 != v74)
    {
      while (1)
      {
        memset(&__dst, 170, sizeof(__dst));
        pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
        long long v35 = (BBUPartitionManager *)off_26AA89B50;
        if (off_26AA89B50) {
          break;
        }
        size_t v56 = (BBUPartitionManager *)operator new(0x18uLL);
        BBUPartitionManager::BBUPartitionManager(v56);
        uint64_t v57 = operator new(0x20uLL);
        *uint64_t v57 = &unk_26CECF498;
        v57[1] = 0;
        v57[2] = 0;
        v57[3] = v56;
        long long v58 = (std::__shared_weak_count *)off_26AA89B58;
        off_26AA89B50 = v56;
        off_26AA89B58 = v57;
        if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
          long long v35 = (BBUPartitionManager *)off_26AA89B50;
          CFBooleanRef v36 = (atomic_ullong *)off_26AA89B58;
          uint64_t v70 = (ACFUCommon *)off_26AA89B50;
          uint64_t v71 = (std::__shared_weak_count *)off_26AA89B58;
          if (off_26AA89B58) {
            goto LABEL_40;
          }
        }
        else
        {
          long long v35 = (BBUPartitionManager *)off_26AA89B50;
          CFBooleanRef v36 = (atomic_ullong *)off_26AA89B58;
          uint64_t v70 = (ACFUCommon *)off_26AA89B50;
          uint64_t v71 = (std::__shared_weak_count *)off_26AA89B58;
          if (off_26AA89B58) {
            goto LABEL_40;
          }
        }
LABEL_41:
        pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
        BBUPartitionManager::getBBUFSPath(v35, (std::string *)&__p);
        if ((__p.st_gid & 0x80000000) == 0) {
          std::string::size_type v37 = (const char *)&__p;
        }
        else {
          std::string::size_type v37 = *(const char **)&__p.st_dev;
        }
        size_t v38 = strlen(v37);
        if (v38 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v39 = v38;
        if (v38 >= 0x17)
        {
          __CFString v42 = v34;
          CFAllocatorRef v43 = v31;
          int v44 = v9;
          uint64_t v45 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17) {
            uint64_t v45 = v38 | 7;
          }
          uint64_t v46 = v45 + 1;
          p_dst = (std::string *)operator new(v45 + 1);
          __dst.__r_.__value_.__l.__size_ = v39;
          __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          CFTypeID v9 = v44;
          CFAllocatorRef v31 = v43;
          CFBooleanRef v34 = v42;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v38;
          p_dst = &__dst;
          if (!v38)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
              goto LABEL_48;
            }
            goto LABEL_54;
          }
        }
        memmove(p_dst, v37, v39);
        p_dst->__r_.__value_.__s.__data_[v39] = 0;
        if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
        {
LABEL_48:
          uint64_t v41 = v71;
          if (!v71) {
            goto LABEL_57;
          }
          goto LABEL_55;
        }
LABEL_54:
        operator delete(*(void **)&__p.st_dev);
        uint64_t v41 = v71;
        if (!v71) {
          goto LABEL_57;
        }
LABEL_55:
        if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
LABEL_57:
        int v47 = *((char *)v33 + 79);
        if (v47 >= 0) {
          std::string::size_type v48 = (const std::string::value_type *)(v33 + 7);
        }
        else {
          std::string::size_type v48 = (const std::string::value_type *)v33[7];
        }
        if (v47 >= 0) {
          std::string::size_type v49 = *((unsigned __int8 *)v33 + 79);
        }
        else {
          std::string::size_type v49 = v33[8];
        }
        std::string::append(&__dst, v48, v49);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v50 = &__dst;
        }
        else {
          uint64_t v50 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        uint64_t v51 = (ACFUCommon *)CFStringCreateWithCString(v31, (const char *)v50, 0x8000100u);
        uint64_t v70 = v51;
        v52.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v52.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&__p.st_blkstd::string::size_type size = v52;
        *(timespec *)__p.st_qspare = v52;
        __p.st_birthtimespec = v52;
        *(timespec *)&__p.st_std::string::size_type size = v52;
        __p.st_mtimespec = v52;
        __p.st_ctimespec = v52;
        *(timespec *)&__p.st_uid = v52;
        __p.st_atimespec = v52;
        *(timespec *)&__p.st_dev = v52;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v53 = &__dst;
        }
        else {
          uint64_t v53 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        uint64_t v54 = (ACFULogging *)stat((const char *)v53, &__p);
        if (v54)
        {
          ACFULogging::getLogInstance(v54);
LABEL_71:
          ACFULogging::handleMessage();
          goto LABEL_89;
        }
        FileDatafromFilePath = (const void *)ACFUCommon::createFileDatafromFilePath(v51, v55);
        *(void *)&__p.st_dev = FileDatafromFilePath;
        if (!FileDatafromFilePath)
        {
          ACFULogging::getLogInstance(0);
          goto LABEL_71;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v69, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v69 = __dst;
        }
        uint64_t v60 = ctu::cf::insert<std::string,__CFData const*>(v68, (uint64_t)&v69, FileDatafromFilePath);
        char v61 = v60;
        if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (v60) {
            goto LABEL_88;
          }
LABEL_87:
          ACFULogging::getLogInstance((ACFULogging *)v60);
          ACFULogging::handleMessage();
          goto LABEL_88;
        }
        operator delete(v69.__r_.__value_.__l.__data_);
        if ((v61 & 1) == 0) {
          goto LABEL_87;
        }
LABEL_88:
        CFRelease(FileDatafromFilePath);
LABEL_89:
        if (v51) {
          CFRelease(v51);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          uint64_t v62 = (uint64_t *)v33[1];
          if (v62)
          {
            do
            {
LABEL_95:
              CFStringRef v63 = v62;
              uint64_t v62 = (uint64_t *)*v62;
            }
            while (v62);
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v62 = (uint64_t *)v33[1];
          if (v62) {
            goto LABEL_95;
          }
        }
        do
        {
          CFStringRef v63 = (uint64_t *)v33[2];
          BOOL v64 = *v63 == (void)v33;
          std::string v33 = v63;
        }
        while (!v64);
LABEL_37:
        std::string v33 = v63;
        if (v63 == v34) {
          goto LABEL_100;
        }
      }
      CFBooleanRef v36 = (atomic_ullong *)off_26AA89B58;
      uint64_t v70 = (ACFUCommon *)off_26AA89B50;
      uint64_t v71 = (std::__shared_weak_count *)off_26AA89B58;
      if (!off_26AA89B58) {
        goto LABEL_41;
      }
LABEL_40:
      atomic_fetch_add_explicit(v36 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_41;
    }
LABEL_100:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73, v74[0]);
    uint64_t v65 = 1;
    *uint64_t v67 = (const __CFDictionary *)v68;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_106;
    }
    return v65;
  }
  ACFULogging::getLogInstance(0);
LABEL_105:
  ACFULogging::handleMessage();
  uint64_t v65 = 0;
  *a2 = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
LABEL_106:
  }
    operator delete(v75.__r_.__value_.__l.__data_);
  return v65;
}

void sub_21DF364B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandRestore::restoreBasebandMigrationDataCmd(BasebandRestore *this, const __CFDictionary **a2)
{
  *((void *)&v45 + 1) = 0;
  std::string::size_type v46 = 0;
  *(void *)&long long v45 = (char *)&v45 + 8;
  ACFULogging::getLogInstance(this);
  uint64_t v3 = (ACFULogging *)ACFULogging::handleMessage();
  if (!a2)
  {
    ACFULogging::getLogInstance(v3);
    ACFULogging::handleMessage();
    char v24 = 0;
    goto LABEL_74;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  CFDataRef v4 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    CFAllocatorRef v5 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v5);
    CFTypeID v6 = operator new(0x20uLL);
    *CFTypeID v6 = &unk_26CECF498;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    CFTypeID v7 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v5;
    off_26AA89B58 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    CFDataRef v4 = (BBUPartitionManager *)off_26AA89B50;
  }
  CFBooleanRef v8 = (std::__shared_weak_count *)off_26AA89B58;
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  context.__r_.__value_.__l.__size_ = (std::string::size_type)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v4, &v49);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v16 = &v49;
  }
  else {
    char v16 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    uint64_t v17 = (ACFULogging *)bbufs::prepareDestination((bbufs *)v16, v9);
    if (v17)
    {
      char v24 = 1;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_20;
      }
      goto LABEL_21;
    }
    uint64_t v17 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v18, v19, v20, v21, v22, v23, (char)"BasebandRestore");
  }
  else
  {
    uint64_t v17 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v10, v11, v12, v13, v14, v15, 0);
  }
  char v24 = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_20:
  }
    operator delete(v49.__r_.__value_.__l.__data_);
LABEL_21:
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v24) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if ((v24 & 1) == 0)
  {
LABEL_24:
    ACFULogging::getLogInstance(v17);
    ACFULogging::handleMessage();
  }
LABEL_25:
  v44[0] = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v44, *a2);
  uint64_t v25 = (ACFULogging *)(*(uint64_t (**)(void *, __CFString *))v44[0])(v44, @"MigrationData");
  uint64_t v26 = v25;
  if (v25
    && ((v27 = CFGetTypeID(v25), v27 != CFDictionaryGetTypeID()) ? (CFDictionaryRef v28 = 0) : (CFDictionaryRef v28 = v26), CFRelease(v26), v28))
  {
    *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49.__r_.__value_.__l.__size_;
    context.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    context.__r_.__value_.__l.__size_ = (std::string::size_type)&v49.__r_.__value_.__l.__size_;
    CFDictionaryApplyFunction(v28, (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,__CFData const*,std::insert_iterator<std::map<std::string,__CFData const*>>>, &context);
    long long v29 = v45;
    long long v45 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
    std::string::size_type v30 = v46;
    std::string::size_type v46 = v49.__r_.__value_.__r.__words[2];
    std::string::size_type v31 = v49.__r_.__value_.__r.__words[2];
    v49.__r_.__value_.__r.__words[2] = v30;
    BOOL v32 = v31 == 0;
    std::string v33 = &v45;
    if (!v32) {
      std::string v33 = (long long *)(*((void *)&v45 + 1) + 16);
    }
    *(void *)std::string v33 = (char *)&v45 + 8;
    if (v30) {
      CFBooleanRef v34 = (std::string *)(*((void *)&v29 + 1) + 16);
    }
    else {
      CFBooleanRef v34 = &v49;
    }
    v34->__r_.__value_.__r.__words[0] = (std::string::size_type)&v49.__r_.__value_.__l.__size_;
    std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&v49, *((char **)&v29 + 1));
    long long v35 = (_OWORD *)v45;
    if ((long long *)v45 != (long long *)((char *)&v45 + 8))
    {
      do
      {
        if (*((char *)v35 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)v35 + 4), *((void *)v35 + 5));
        }
        else {
          std::string v42 = *(std::string *)(v35 + 2);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&context, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
        }
        else {
          std::string context = v42;
        }
        uint64_t v47 = 0;
        if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v49, context.__r_.__value_.__l.__data_, context.__r_.__value_.__l.__size_);
        }
        else {
          std::string v49 = context;
        }
        uint64_t v50 = 0;
        if (ctu::cf::convert_copy()) {
          CFBooleanRef v36 = v50;
        }
        else {
          CFBooleanRef v36 = 0;
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v49.__r_.__value_.__l.__data_);
          CFTypeRef cf = v36;
          if ((SHIBYTE(context.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_52:
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_71;
            }
            goto LABEL_53;
          }
        }
        else
        {
          CFTypeRef cf = v36;
          if ((SHIBYTE(context.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_52;
          }
        }
        operator delete(context.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
LABEL_71:
        }
          operator delete(v42.__r_.__value_.__l.__data_);
LABEL_53:
        URLFromString = (ACFULogging *)AMSupportCreateURLFromString();
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)URLFromString;
        if (URLFromString) {
          size_t v38 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
        }
        else {
          size_t v38 = 0;
        }
        if (!v38 || (URLFromString = (ACFULogging *)AMSupportWriteDataToFileURL(), URLFromString))
        {
          ACFULogging::getLogInstance(URLFromString);
          ACFULogging::handleMessage();
          char v24 = 0;
        }
        if (v49.__r_.__value_.__r.__words[0]) {
          CFRelease(v49.__r_.__value_.__l.__data_);
        }
        if (cf) {
          CFRelease(cf);
        }
        std::string::size_type v39 = (void *)*((void *)v35 + 1);
        if (v39)
        {
          do
          {
            std::string v40 = v39;
            std::string::size_type v39 = (void *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            std::string v40 = (_OWORD *)*((void *)v35 + 2);
            BOOL v32 = *(void *)v40 == (void)v35;
            long long v35 = v40;
          }
          while (!v32);
        }
        long long v35 = v40;
      }
      while (v40 != (long long *)((char *)&v45 + 8));
    }
  }
  else
  {
    ACFULogging::getLogInstance(v25);
    ACFULogging::handleMessage();
    char v24 = 1;
  }
  MEMORY[0x223C1D170](v44);
LABEL_74:
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&v45, *((char **)&v45 + 1));
  return v24 & 1;
}

void sub_21DF36BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,char *a26,uint64_t a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy(v34 - 128, *(char **)(v34 - 120));
  MEMORY[0x223C1D170](&a21);
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::pingCmd(std::__shared_weak_count **this, const __CFDictionary **a2)
{
  ACFULogging::getLogInstance((ACFULogging *)this);
  ACFULogging::handleMessage();
  CFDataRef v4 = this[21];
  if (!v4)
  {
    ACFULogging::getLogInstance(0);
LABEL_10:
    ACFULogging::handleMessage();
    return 0;
  }
  if (v5)
  {
    CFTypeID v6 = this[22];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    CFTypeID v6 = 0;
  }
  FWVersion = (ACFULogging *)BasebandUpdaterTransport::pingAndGetFWVersion(v5, a2);
  int v8 = (int)FWVersion;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    ACFULogging::getLogInstance(v10);
    if (v8) {
      goto LABEL_10;
    }
  }
  else
  {
    ACFULogging::getLogInstance(FWVersion);
    if (v8) {
      goto LABEL_10;
    }
  }
  ACFULogging::handleMessage();
  return 1;
}

void sub_21DF36F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::performManifestCheckCmd(BasebandRestore *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  memset(v9, 0, sizeof(v9));
  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  uint64_t v2 = (ACFULogging *)BasebandRestore::bootInternal((ACFURTKitROM **)this);
  if (!v2
    || (support::transport::ARI::create((support::transport::ARI *)"BasebandUpdaterTransport", (dispatch_queue_s *)0x2710, 0, 0, &v8), (uint64_t v3 = v8) == 0))
  {
    ACFULogging::getLogInstance(v2);
    ACFULogging::handleMessage();
    uint64_t v3 = 0;
LABEL_11:
    BasebandRestore::coredumpInternal((CFDictionaryRef *)this);
    uint64_t v6 = 0;
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    goto LABEL_12;
  }
  uint64_t v4 = KTLGetManifestStatus();
  if ((v4 & 1) == 0
    || (logManifestStatus((unsigned __int16 *)v9), WORD2(v9[0]) | WORD4(v9[0]))
    || ((uint64_t v4 = capabilities::updater::supportsFATPCalibrationManifestStatus((capabilities::updater *)v4), WORD3(v9[0]))
      ? (int v5 = v4)
      : (int v5 = 0),
        v5 == 1))
  {
    ACFULogging::getLogInstance((ACFULogging *)v4);
    ACFULogging::handleMessage();
    goto LABEL_11;
  }
  uint64_t v6 = 1;
LABEL_12:
  (*(void (**)(char *))(*(void *)v3 + 8))(v3);
  return v6;
}

void sub_21DF370E0(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void logManifestStatus(unsigned __int16 *a1)
{
  ACFULogging::getLogInstance((ACFULogging *)a1);
  if (a1)
  {
    uint64_t v2 = (ACFULogging *)ACFULogging::handleMessage();
    LODWORD(v3) = a1[5];
    if (a1[5])
    {
      int v4 = 0;
      unint64_t v5 = 0;
      do
      {
        unsigned int v6 = v4 + v3;
        if (v6 >= 0x10) {
          uint64_t v7 = 16;
        }
        else {
          uint64_t v7 = v6;
        }
        ACFULogging::getLogInstance(v2);
        ctu::hex((ctu *)&a1[v5 / 2 + 6], (const void *)v7);
        uint64_t v2 = (ACFULogging *)ACFULogging::handleMessage();
        if (v14 < 0) {
          operator delete(__p);
        }
        v5 += 16;
        unint64_t v3 = a1[5];
        v4 -= 16;
      }
      while (v5 < v3);
    }
    LODWORD(v8) = a1[70];
    if (a1[70])
    {
      int v9 = 0;
      unint64_t v10 = 0;
      do
      {
        unsigned int v11 = v9 + v8;
        if (v11 >= 0x10) {
          uint64_t v12 = 16;
        }
        else {
          uint64_t v12 = v11;
        }
        ACFULogging::getLogInstance(v2);
        ctu::hex((ctu *)&a1[v10 / 2 + 71], (const void *)v12);
        uint64_t v2 = (ACFULogging *)ACFULogging::handleMessage();
        if (v14 < 0) {
          operator delete(__p);
        }
        v10 += 16;
        unint64_t v8 = a1[70];
        v9 -= 16;
      }
      while (v10 < v8);
    }
  }
  else
  {
    ACFULogging::handleMessage();
  }
}

void sub_21DF37330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandRestore::copyIdentifierCmd(std::__shared_weak_count **this, const __CFDictionary **a2)
{
  std::string v49 = 0;
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v47 = 0;
  std::string::size_type v48 = 0;
  CFTypeRef v45 = 0;
  CFDataRef v46 = 0;
  int v44 = 0;
  std::string v42 = 0;
  CFAllocatorRef v43 = 0;
  char v41 = 1;
  ACFULogging::getLogInstance((ACFULogging *)this);
  uint64_t Controller = ACFULogging::handleMessage();
  if (a2)
  {
    unint64_t v5 = this[21];
    if (!v5)
    {
      ACFULogging::getLogInstance(0);
      goto LABEL_18;
    }
    if (!v6)
    {
      std::string v42 = 0;
      CFAllocatorRef v43 = 0;
      ACFULogging::getLogInstance(0);
      goto LABEL_18;
    }
    uint64_t v7 = this[22];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v42 = v6;
    CFAllocatorRef v43 = v7;
    uint64_t Reset = TelephonyBasebandGetReset();
    if ((Reset & 1) == 0)
    {
      ACFULogging::getLogInstance((ACFULogging *)Reset);
      CFBooleanRef v36 = (ACFULogging *)ACFULogging::handleMessage();
      ACFULogging::getLogInstance(v36);
      goto LABEL_18;
    }
    uint64_t Controller = TelephonyBasebandCreateController();
    CFTypeRef v45 = (CFTypeRef)Controller;
    if (Controller
       ? ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get
       : 0)
    {
      ACFULogging::getLogInstance((ACFULogging *)Controller);
      ACFULogging::handleMessage();
      uint64_t Controller = TelephonyBasebandPowercycleModem();
      if (Controller)
      {
        uint64_t TypeID = (uint64_t)((uint64_t (*)(void **__return_ptr))this[21]->~__shared_weak_count)(__p);
        unsigned int v11 = (uint64_t (***)(void))__p[0];
        uint64_t v12 = (atomic_ullong *)__p[1];
        if (__p[1])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
          uint64_t v13 = (std::__shared_weak_count *)__p[1];
          std::string::size_type v48 = v11;
          std::string v49 = v12;
          int v14 = v40;
          LODWORD(v50) = v40;
          if (__p[1])
          {
            if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
            int v14 = v50;
          }
        }
        else
        {
          std::string::size_type v48 = (uint64_t (***)(void))__p[0];
          std::string v49 = 0;
          int v14 = v40;
          LODWORD(v50) = v40;
        }
        if (!v14)
        {
          ACFULogging::getLogInstance((ACFULogging *)TypeID);
          ACFULogging::handleMessage();
          uint64_t v17 = v48;
          uint64_t v18 = (std::__shared_weak_count *)v49;
          __p[0] = v48;
          __p[1] = v49;
          if (v49) {
            atomic_fetch_add_explicit(v49 + 1, 1uLL, memory_order_relaxed);
          }
          uint64_t TypeID = (**v17)(v17);
          CFDictionaryRef v19 = (const __CFDictionary *)TypeID;
          if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          if (v19)
          {
            CFBooleanRef Value = (ACFULogging *)CFDictionaryGetValue(v19, @"Cellular1,ChipID");
            uint64_t v21 = Value;
            if (!Value) {
              goto LABEL_65;
            }
            CFTypeID v22 = CFGetTypeID(Value);
            uint64_t TypeID = CFDataGetTypeID();
            if (v22 == TypeID)
            {
              uint64_t TypeID = support::cf::createNum64Num32FromData(v21, &v47);
              if (TypeID)
              {
                CFDictionaryAddValue(v19, @"ChipID", v47);
                CFDataRef v23 = (const __CFData *)CFDictionaryGetValue(v19, @"Cellular1,ECID");
                CFDataRef v24 = v23;
                if (v23)
                {
                  CFTypeID v25 = CFGetTypeID(v23);
                  uint64_t TypeID = CFDataGetTypeID();
                  if (v25 == TypeID)
                  {
                    uint64_t TypeID = support::cf::createByteSwappedData(v24, &v46);
                    if (TypeID)
                    {
                      CFDictionaryAddValue(v19, @"ChipSerialNo", v46);
                      if (v44) {
                        CFTypeID v27 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
                      }
                      else {
                        CFTypeID v27 = 0;
                      }
                      if (v27) {
                        CFDictionaryAddValue(v19, @"CertificationPublicKey", v44);
                      }
                      ACFULogging::getLogInstance(v26);
                      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 15;
                      strcpy((char *)&v37, "BasebandRestore");
                      CFDictionaryRef v28 = std::string::append(&v37, "::", 2uLL);
                      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
                      v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
                      v28->__r_.__value_.__l.__size_ = 0;
                      v28->__r_.__value_.__r.__words[2] = 0;
                      v28->__r_.__value_.__r.__words[0] = 0;
                      std::string::size_type v30 = std::string::append(&v38, "copyIdentifierCmd", 0x11uLL);
                      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
                      std::string::size_type v40 = v30->__r_.__value_.__r.__words[2];
                      *(_OWORD *)stat __p = v31;
                      v30->__r_.__value_.__l.__size_ = 0;
                      v30->__r_.__value_.__r.__words[2] = 0;
                      v30->__r_.__value_.__r.__words[0] = 0;
                      BOOL v32 = (ACFULogging *)ACFULogging::handleMessageCFType();
                      if (SHIBYTE(v40) < 0)
                      {
                        operator delete(__p[0]);
                        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_41:
                          if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_42;
                          }
LABEL_60:
                          operator delete(v37.__r_.__value_.__l.__data_);
LABEL_42:
                          *a2 = v19;
                          ACFULogging::getLogInstance(v32);
                          ACFULogging::handleMessage();
                          uint64_t v15 = 1;
                          char v16 = v43;
                          if (!v43) {
                            goto LABEL_44;
                          }
                          goto LABEL_43;
                        }
                      }
                      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_41;
                      }
                      operator delete(v38.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_42;
                      }
                      goto LABEL_60;
                    }
                  }
                  goto LABEL_66;
                }
LABEL_65:
                ACFULogging::getLogInstance(0);
                goto LABEL_18;
              }
            }
          }
        }
LABEL_66:
        ACFULogging::getLogInstance((ACFULogging *)TypeID);
        goto LABEL_18;
      }
    }
  }
  ACFULogging::getLogInstance((ACFULogging *)Controller);
LABEL_18:
  ACFULogging::handleMessage();
  uint64_t v15 = 0;
  char v16 = v43;
  if (!v43)
  {
LABEL_44:
    std::string v33 = v44;
    if (!v44) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_43:
  if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  std::string v33 = v44;
  if (v44) {
LABEL_45:
  }
    CFRelease(v33);
LABEL_46:
  if (v45) {
    CFRelease(v45);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v47) {
    CFRelease(v47);
  }
  uint64_t v34 = (std::__shared_weak_count *)v49;
  if (v49 && !atomic_fetch_add(v49 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  return v15;
}

void sub_21DF37B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v35 - 120));
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)(v35 - 112));
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v35 - 104));
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)(v35 - 96));
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v35 - 88);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::provisionCmd(const __CFDictionary **this, const __CFDictionary **a2)
{
  BOOL v40 = 0;
  ACFULogging::getLogInstance((ACFULogging *)this);
  ACFULogging::handleMessage();
  CFDictionaryRef v4 = this[17];
  if (!v4)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_36;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, @"EnablePing");
  if (!Value || (CFBooleanRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFBooleanGetTypeID()))
  {
    char v16 = this[17];
    uint64_t v17 = (std::__shared_weak_count *)this[52];
    CFDictionaryRef v34 = this[51];
    uint64_t v35 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)this[20];
    BOOL v32 = this[19];
    std::string v33 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CFDictionaryRef v19 = (ACFULogging *)provisionBaseband(v16, (uint64_t *)&v34, &v32, a2);
    char v20 = (char)v19;
    uint64_t v21 = v33;
    if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    CFTypeID v22 = v35;
    if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    ACFULogging::getLogInstance(v19);
    if ((v20 & 1) == 0) {
      goto LABEL_36;
    }
    *((unsigned char *)&v28.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v28, "BasebandRestore");
    CFDataRef v23 = std::string::append(&v28, "::", 2uLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    CFTypeID v25 = std::string::append(&v29, "provisionCmd", 0xCuLL);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)stat __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    ACFULogging::handleMessageCFType();
    if (SHIBYTE(v31) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 1;
        }
LABEL_34:
        operator delete(v28.__r_.__value_.__l.__data_);
        return 1;
      }
    }
    else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    goto LABEL_34;
  }
  unint64_t v8 = (ACFULogging *)CFBooleanGetValue(v6);
  if (v8 != 1) {
    return 1;
  }
  ACFULogging::getLogInstance(v8);
  ACFULogging::handleMessage();
  int v9 = this[17];
  unint64_t v10 = (std::__shared_weak_count *)this[52];
  CFDictionaryRef v38 = this[51];
  std::string::size_type v39 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v11 = (std::__shared_weak_count *)this[20];
  CFBooleanRef v36 = this[19];
  std::string v37 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (ACFULogging *)sendProvisionPing(v9, (uint64_t *)&v38, &v36, &v40);
  char v13 = (char)v12;
  int v14 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v39;
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  ACFULogging::getLogInstance(v12);
  if (v13)
  {
    ACFULogging::handleMessage();
    return 1;
  }
LABEL_36:
  ACFULogging::handleMessage();
  return 0;
}

void sub_21DF38044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v31 - 88);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v31 - 72);
  _Unwind_Resume(a1);
}

void BasebandRestore::handleRTIClientImage(ACFULogging *a1@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X8>)
{
  ACFULogging::getLogInstance(a1);
  CFBooleanRef v6 = (ACFULogging *)ACFULogging::handleMessage();
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7 != 4) {
    goto LABEL_13;
  }
  if (v8 >= 0) {
    int v9 = (_DWORD *)a2;
  }
  else {
    int v9 = *(_DWORD **)a2;
  }
  switch(*v9)
  {
    case 0x6D72766E:
      BasebandRestore::handleRTIClientNVRAMFile(a1, a3);
      break;
    case 0x74736262:
    case 0x79646262:
      BasebandRestore::handleRTIClientNVMFile((uint64_t)a1, (const void **)a2, a3);
      break;
    case 0x6C636262:
    case 0x63706262:
    case 0x76706262:
      BasebandRestore::handleRTIClientFDRFile(a1, a2, a3);
      break;
    default:
LABEL_13:
      ACFULogging::getLogInstance(v6);
      ACFULogging::handleMessage();
      BasebandRestore::createZeroSizeContainer(a3);
      return;
  }
}

void BasebandRestore::handleRTIClientNVRAMFile(BasebandRestore *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (ACFURTKitNVRMGenerator *)*((void *)this + 53);
  if (v3)
  {
    CFDictionaryRef v4 = (ACFUDataContainer *)ACFURTKitNVRMGenerator::copy(v3);
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    CFBooleanRef v6 = (ACFULogging *)ACFUDataContainer::create(v4, v5);
    ACFULogging::getLogInstance(v6);
    ACFULogging::handleMessage();
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage();
    *a2 = 0;
  }
}

void sub_21DF383D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF383EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void BasebandRestore::handleRTIClientNVMFile(uint64_t a1@<X0>, const void **a2@<X1>, std::string::size_type *a3@<X8>)
{
  CFStringRef v91 = 0;
  memset(v90, 170, sizeof(v90));
  GetBasebandNVM4ccToFileNameMap(v90);
  uint64_t v7 = v90[1];
  if (!v90[1]) {
    goto LABEL_100;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unsigned int v11 = &v90[1];
  do
  {
    while (1)
    {
      int v12 = *(char *)(v7 + 55);
      char v13 = v12 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
      size_t v14 = v12 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(void *)(v7 + 40);
      size_t v15 = v10 >= v14 ? v14 : v10;
      CFBooleanRef v6 = (ACFULogging *)memcmp(v13, v9, v15);
      if (v6) {
        break;
      }
      if (v14 >= v10) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        goto LABEL_24;
      }
    }
    if ((v6 & 0x80000000) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    unsigned int v11 = (uint64_t *)v7;
    uint64_t v7 = *(void *)v7;
  }
  while (v7);
LABEL_24:
  if (v11 == &v90[1]) {
    goto LABEL_100;
  }
  uint64_t v18 = v11[4];
  uint64_t v17 = v11 + 4;
  char v16 = (uint64_t *)v18;
  int v19 = *((char *)v17 + 23);
  if (v19 >= 0) {
    char v20 = v17;
  }
  else {
    char v20 = v16;
  }
  if (v19 >= 0) {
    size_t v21 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    size_t v21 = v17[1];
  }
  if (v21 >= v10) {
    size_t v22 = v10;
  }
  else {
    size_t v22 = v21;
  }
  CFBooleanRef v6 = (ACFULogging *)memcmp(v9, v20, v22);
  if (!v6)
  {
    if (v10 >= v21) {
      goto LABEL_36;
    }
    goto LABEL_100;
  }
  if ((v6 & 0x80000000) != 0)
  {
LABEL_100:
    ACFULogging::getLogInstance(v6);
    ACFULogging::handleMessage();
    *a3 = 0;
    goto LABEL_101;
  }
LABEL_36:
  CFDictionaryRef v23 = *(const __CFDictionary **)(a1 + 128);
  if (v23)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v23, @"BypassNVMDownload");
    CFBooleanRef v25 = Value;
    if (Value)
    {
      CFTypeID v26 = CFGetTypeID(Value);
      if (v26 == CFBooleanGetTypeID())
      {
        CFTypeID v27 = (ACFULogging *)CFBooleanGetValue(v25);
        if (v27 == 1)
        {
          ACFULogging::getLogInstance(v27);
          ACFULogging::handleMessage();
          BasebandRestore::createZeroSizeContainer(a3);
LABEL_101:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v90, v90[1]);
          return;
        }
      }
    }
  }
  memset(&__p, 170, sizeof(__p));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  std::string v28 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    std::string v29 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v29);
    std::string::size_type v30 = operator new(0x20uLL);
    *std::string::size_type v30 = &unk_26CECF498;
    v30[1] = 0;
    v30[2] = 0;
    _OWORD v30[3] = v29;
    uint64_t v31 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v29;
    off_26AA89B58 = v30;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    std::string v28 = (BBUPartitionManager *)off_26AA89B50;
  }
  BOOL v32 = (std::__shared_weak_count *)off_26AA89B58;
  v88.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v88.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v28, &__p);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (*(unsigned char *)(a1 + 480))
  {
    memset(&v88, 170, sizeof(v88));
    uint64_t v34 = v90[1];
    if (v90[1]) {
      goto LABEL_53;
    }
LABEL_78:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  ACFULogging::getLogInstance(v33);
  ACFULogging::handleMessage();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = (bbufs *)&__p;
  }
  else {
    p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
  }
  if (!p_p)
  {
    uint64_t v84 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v54, v55, v56, v57, v58, v59, 0);
    goto LABEL_143;
  }
  if ((bbufs::prepareDestination(p_p, v53) & 1) == 0)
  {
    uint64_t v84 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v61, v62, v63, v64, v65, v66, (char)"BasebandRestore");
LABEL_143:
    ACFULogging::getLogInstance(v84);
    ACFULogging::handleMessage();
    *a3 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_139;
    }
    goto LABEL_140;
  }
  *(unsigned char *)(a1 + 480) = 1;
  memset(&v88, 170, sizeof(v88));
  uint64_t v34 = v90[1];
  if (!v90[1]) {
    goto LABEL_78;
  }
LABEL_53:
  int v35 = *((char *)a2 + 23);
  if (v35 >= 0) {
    CFBooleanRef v36 = a2;
  }
  else {
    CFBooleanRef v36 = *a2;
  }
  if (v35 >= 0) {
    size_t v37 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v37 = (size_t)a2[1];
  }
  while (2)
  {
    while (2)
    {
      int v38 = *(char *)(v34 + 55);
      if (v38 >= 0) {
        std::string::size_type v39 = (const void *)(v34 + 32);
      }
      else {
        std::string::size_type v39 = *(const void **)(v34 + 32);
      }
      if (v38 >= 0) {
        size_t v40 = *(unsigned __int8 *)(v34 + 55);
      }
      else {
        size_t v40 = *(void *)(v34 + 40);
      }
      if (v40 >= v37) {
        size_t v41 = v37;
      }
      else {
        size_t v41 = v40;
      }
      int v42 = memcmp(v36, v39, v41);
      if (v42)
      {
        if (v42 < 0) {
          goto LABEL_59;
        }
      }
      else if (v37 < v40)
      {
LABEL_59:
        uint64_t v34 = *(void *)v34;
        if (!v34) {
          goto LABEL_78;
        }
        continue;
      }
      break;
    }
    int v43 = memcmp(v39, v36, v41);
    if (v43)
    {
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_79;
      }
LABEL_77:
      uint64_t v34 = *(void *)(v34 + 8);
      if (!v34) {
        goto LABEL_78;
      }
      continue;
    }
    break;
  }
  if (v40 < v37) {
    goto LABEL_77;
  }
LABEL_79:
  int v44 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v46 = *(char *)(v34 + 79);
  if (v46 >= 0) {
    size_t v47 = *(unsigned __int8 *)(v34 + 79);
  }
  else {
    size_t v47 = *(void *)(v34 + 64);
  }
  unint64_t v48 = v47 + size;
  memset(&__dst, 170, sizeof(__dst));
  if (v47 + size >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v48 > 0x16)
  {
    uint64_t v67 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17) {
      uint64_t v67 = v48 | 7;
    }
    uint64_t v68 = v67 + 1;
    p_dst = (std::string *)operator new(v67 + 1);
    __dst.__r_.__value_.__l.__size_ = v47 + size;
    __dst.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    if (size)
    {
LABEL_88:
      if (v44 >= 0) {
        unint64_t v50 = &__p;
      }
      else {
        unint64_t v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(p_dst, v50, size);
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v47 + size;
    if (size) {
      goto LABEL_88;
    }
  }
  uint64_t v51 = (char *)p_dst + size;
  if (v47)
  {
    if (v46 >= 0) {
      timespec v52 = (const void *)(v34 + 56);
    }
    else {
      timespec v52 = *(const void **)(v34 + 56);
    }
    memmove(v51, v52, v47);
  }
  v51[v47] = 0;
  v88.__pn_ = __dst;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, v88.__pn_.__r_.__value_.__l.__data_, v88.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v88.__pn_;
  }
  std::string v69 = (ACFULogging *)ctu::fs::file_exists();
  int v70 = (int)v69;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v70) {
      goto LABEL_128;
    }
LABEL_117:
    CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    std::__fs::filesystem::path::lexically_normal((std::__fs::filesystem::path *)&__dst, &v88);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v72 = &__dst;
    }
    else {
      int v72 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    CFStringAppendCString(Mutable, (const char *)v72, 0x8000100u);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    ACFUDataContainer::create((ACFUDataContainer *)Mutable, (const __CFString *)1);
    std::string::size_type v75 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    uint64_t v76 = v91;
    CFStringRef v91 = (ACFULogging *)v75;
    if (v76)
    {
      uint64_t v77 = (void *)MEMORY[0x223C1CEF0](v76, v73, v74);
      operator delete(v77);
      uint64_t v76 = (ACFULogging *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v76)
      {
        uint64_t v80 = (void *)MEMORY[0x223C1CEF0](v76, v78, v79);
        operator delete(v80);
      }
    }
    if (v75)
    {
      ACFULogging::getLogInstance(v76);
      ACFULogging::handleMessage();
    }
    else
    {
      ACFULogging::getLogInstance(v76);
      std::__fs::filesystem::path::lexically_normal((std::__fs::filesystem::path *)&__dst, &v88);
      ACFULogging::handleMessage();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    if (v69) {
      goto LABEL_117;
    }
LABEL_128:
    ACFULogging::getLogInstance(v69);
    ACFULogging::handleMessage();
    BasebandRestore::createZeroSizeContainer(&__dst);
    std::string::size_type v75 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v91)
    {
      uint64_t v81 = (void *)MEMORY[0x223C1CEF0]();
      operator delete(v81);
      std::string::size_type v82 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v82)
      {
        std::string v83 = (void *)MEMORY[0x223C1CEF0]();
        operator delete(v83);
      }
    }
  }
  CFStringRef v91 = 0;
  *a3 = v75;
  if (SHIBYTE(v88.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_139:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_140:
  long long v85 = v91;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v90, v90[1]);
  if (v85)
  {
    uint64_t v86 = (void *)MEMORY[0x223C1CEF0](v85);
    operator delete(v86);
  }
}

void sub_21DF38C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFString>::~CFSharedRef(&a14);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_8:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v34 - 120, *(void *)(v34 - 112));
      std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100]((uint64_t *)(v34 - 96));
      _Unwind_Resume(a1);
    }
  }
  else if ((a34 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(a29);
  goto LABEL_8;
}

void BasebandRestore::handleRTIClientFDRFile(ACFUDataContainer *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4 != 4) {
    goto LABEL_15;
  }
  if (v5 >= 0) {
    CFBooleanRef v6 = (_DWORD *)a2;
  }
  else {
    CFBooleanRef v6 = *(_DWORD **)a2;
  }
  switch(*v6)
  {
    case 0x6C636262:
      a1 = (ACFUDataContainer *)*((void *)a1 + 55);
      if (a1) {
        goto LABEL_13;
      }
      break;
    case 0x63706262:
      a1 = (ACFUDataContainer *)*((void *)a1 + 56);
      if (a1) {
        goto LABEL_13;
      }
      break;
    case 0x76706262:
      a1 = (ACFUDataContainer *)*((void *)a1 + 57);
      if (!a1) {
        break;
      }
LABEL_13:
      uint64_t v7 = (ACFULogging *)ACFUDataContainer::create(&v8, a1, (const __CFData *)a2);
      *a3 = v8;
      ACFULogging::getLogInstance(v7);
      ACFULogging::handleMessage();
      return;
    default:
      break;
  }
LABEL_15:
  ACFULogging::getLogInstance(a1);
  ACFULogging::handleMessage();
  BasebandRestore::createZeroSizeContainer(&v8);
  *a3 = v8;
}

void sub_21DF38F00(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_21DF38F14(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_21DF38F28(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BasebandRestore::createZeroSizeContainer(void *a1@<X8>)
{
  unint64_t v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  int v5 = (ACFULogging *)ACFUDataContainer::create(v3, v4);
  if (!*a1)
  {
    ACFULogging::getLogInstance(v5);
    ACFULogging::handleMessage();
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_21DF38FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF38FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (void *)MEMORY[0x223C1CEF0]();
    operator delete(v3);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFString>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFDictionary>::~TakeOwnershipProxy(const void **a1)
{
  unint64_t v3 = *a1;
  uint64_t v2 = (const void **)a1[1];
  CFDataRef v4 = *v2;
  if (v3)
  {
    const void *v2 = v3;
    if (v4) {
      goto LABEL_5;
    }
  }
  else
  {
    const void *v2 = 0;
    if (v4) {
LABEL_5:
    }
      CFRelease(v4);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFBoolean const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t BasebandRestore::getBasebandCrashReason(uint64_t a1, uint64_t a2, BOOL *a3)
{
  int v22 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  memset(&v16, 0, sizeof(v16));
  int v5 = (__CFString *)ACFUDiagnostics::copyDiagnosticsPath(*(ACFUDiagnostics **)(a1 + 184));
  CFBooleanRef v6 = v5;
  if (v5) {
    uint64_t v7 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    CStringPtr = CFStringGetCStringPtr(v5, 0x8000100u);
    std::string::__assign_external(&v16, CStringPtr);
    uint64_t CoredumpCrashReport = support::parsers::getCoredumpCrashReport((const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)&v19, (uint64_t)__p, &v22);
    if (CoredumpCrashReport)
    {
      uint64_t v10 = HIBYTE(v21);
      if (v21 < 0) {
        uint64_t v10 = v20;
      }
      if (v10)
      {
        ACFULogging::getLogInstance((ACFULogging *)CoredumpCrashReport);
        uint64_t CoredumpCrashReport = ACFULogging::handleMessage();
        int v11 = v22;
        *a3 = v22 == 1;
        if (v11 == 1)
        {
          ACFULogging::getLogInstance((ACFULogging *)CoredumpCrashReport);
          ACFULogging::handleMessage();
          goto LABEL_25;
        }
        if (v11 == 2)
        {
          size_t v12 = HIBYTE(v18);
          if (v18 < 0) {
            size_t v12 = (size_t)__p[1];
          }
          if (v12)
          {
            if (__p != (void **)a2)
            {
              if (*(char *)(a2 + 23) < 0)
              {
                if (v18 >= 0) {
                  size_t v14 = __p;
                }
                else {
                  size_t v14 = (void **)__p[0];
                }
                std::string::__assign_no_alias<false>((void **)a2, v14, v12);
              }
              else
              {
                if ((SHIBYTE(v18) & 0x80000000) == 0)
                {
                  *(_OWORD *)a2 = *(_OWORD *)__p;
                  *(void *)(a2 + 16) = v18;
                  uint64_t v13 = 1;
                  if (!v6) {
                    goto LABEL_27;
                  }
LABEL_26:
                  CFRelease(v6);
                  goto LABEL_27;
                }
                std::string::__assign_no_alias<true>((void *)a2, __p[0], (size_t)__p[1]);
              }
            }
LABEL_25:
            uint64_t v13 = 1;
            if (!v6) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
        }
      }
    }
    ACFULogging::getLogInstance((ACFULogging *)CoredumpCrashReport);
  }
  else
  {
    ACFULogging::getLogInstance((ACFULogging *)v5);
  }
  ACFULogging::handleMessage();
  uint64_t v13 = 0;
  if (v6) {
    goto LABEL_26;
  }
LABEL_27:
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__p[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return v13;
    }
LABEL_33:
    operator delete(v19);
    return v13;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  if (SHIBYTE(v21) < 0) {
    goto LABEL_33;
  }
  return v13;
}

void sub_21DF393A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 57) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v26 - 57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<BasebandRestore *,std::shared_ptr<BasebandRestore>::__shared_ptr_default_delete<BasebandRestore,BasebandRestore>,std::allocator<BasebandRestore>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BasebandRestore *,std::shared_ptr<BasebandRestore>::__shared_ptr_default_delete<BasebandRestore,BasebandRestore>,std::allocator<BasebandRestore>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<BasebandRestore *,std::shared_ptr<BasebandRestore>::__shared_ptr_default_delete<BasebandRestore,BasebandRestore>,std::allocator<BasebandRestore>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFACC72) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFACC72 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFACC72)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFACC72 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<ACFUError>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECCFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ACFUError>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECCFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ACFUError>::__on_zero_shared()
{
}

void std::__shared_ptr_pointer<ACFUDiagnostics  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ACFUDiagnostics  *>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x223C1CEA0]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ACFUDiagnostics  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFACD5CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFACD5CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFACD5CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFACD5CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<RTKitFirmware  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<RTKitFirmware  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<RTKitFirmware  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFACDE5) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFACDE5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFACDE5)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFACDE5 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<BasebandUpdaterTransport  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BasebandUpdaterTransport  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<BasebandUpdaterTransport  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFACE77) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFACE77 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFACE77)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFACE77 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CECD0E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CECD0E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::operator()(ACFULogging *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v253 = *MEMORY[0x263EF8340];
  CFDataRef v4 = *(const void **)a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  int v5 = *(ACFUFirmware **)a3;
  long long v223 = *(std::__shared_weak_count **)(a3 + 8);
  long long v224 = v3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v6 = *((void *)a1 + 1);
  unsigned __int8 v227 = -1;
  if (!v4)
  {
    ACFULogging::getLogInstance(a1);
    ACFULogging::handleMessage();
    uint64_t v31 = 1005;
    goto LABEL_472;
  }
  long long v225 = 0;
  if (v7 && v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v225 = v3;
  }
  uint64_t v8 = (ACFULogging *)BasebandUpdaterTransport::retrieveChipRev(v7, &v227);
  if (v8)
  {
    ACFULogging::getLogInstance(v8);
    ACFULogging::handleMessage();
    goto LABEL_57;
  }
  CFDataRef v9 = (const __CFData *)ACFUFirmware::copyFWDataByTag(v5, @"Cellular1,Recipe");
  CFDataRef v10 = v9;
  if (!v9)
  {
    ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage();
    goto LABEL_57;
  }
  __s2.__r_.__value_.__r.__words[2] = 0x200000000000000;
  *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v227 & 0xF | 0x30u;
  *(_DWORD *)((char *)&__s2.__r_.__value_.__l.__data_ + 1) = ((v227 >> 4) + 65);
  v240[1] = 0;
  uint64_t v241 = 0x200000000000000;
  v240[0] = (void *)((v227 >> 4) + 65);
  *(_DWORD *)((char *)v240 + 1) = v227 & 0xF | 0x30;
  BytePtr = CFDataGetBytePtr(v9);
  CFIndex Length = CFDataGetLength(v10);
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v248 = 2863311530;
  v249[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  long long v251 = 0xAAAAAAAAAAAAAAAALL;
  v252[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v245 = v13;
  v246[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&value[16] = v13;
  long long v244 = v13;
  *(void *)long long value = BytePtr;
  *(void *)&value[8] = Length;
  v246[1] = 0;
  uint64_t v247 = 0;
  v249[1] = 0;
  v250[1] = 0;
  v250[0] = 0;
  v252[0] = 0;
  LODWORD(BytePtr) = RecipeUtil::_parseVariables((RecipeUtil *)value);
  CFRelease(v10);
  if (BytePtr)
  {
    ACFULogging::getLogInstance(v14);
    ACFULogging::handleMessage();
    int v30 = 7;
    uint64_t v31 = 1;
    goto LABEL_37;
  }
  size_t v15 = v250[1];
  if (!v250[1] || (unint64_t v16 = v251) == 0)
  {
LABEL_13:
    ACFULogging::getLogInstance(v14);
    ACFULogging::handleMessage();
    uint64_t v20 = *(std::__shared_weak_count **)(v6 + 360);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = SHIBYTE(v241);
    if (v241 >= 0) {
      size_t v22 = HIBYTE(v241);
    }
    else {
      size_t v22 = (size_t)v240[1];
    }
    size_t v23 = v22 + 23;
    memset(&v239, 170, sizeof(v239));
    if (v22 + 23 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v22 < 0xFFFFFFFFFFFFFFE9)
    {
      uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v25 = v23 | 7;
      }
      uint64_t v26 = v25 + 1;
      CFTypeID v27 = (char *)operator new(v25 + 1);
      v239.__r_.__value_.__l.__size_ = v22 + 23;
      v239.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      v239.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      qmemcpy(v27, "Baseband chip revision ", 23);
      long long v24 = v27 + 23;
      if (!v22)
      {
LABEL_28:
        v24[v22] = 0;
        std::string v29 = std::string::append(&v239, " is not supported by the baseband firmware", 0x2AuLL);
        std::string __p = *v29;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        ACFUError::addError();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_30:
            if (!v20) {
              goto LABEL_36;
            }
            goto LABEL_34;
          }
        }
        else if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_30;
        }
        operator delete(v239.__r_.__value_.__l.__data_);
        if (!v20)
        {
LABEL_36:
          int v30 = 4;
          uint64_t v31 = 3006;
          goto LABEL_37;
        }
LABEL_34:
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        goto LABEL_36;
      }
    }
    else
    {
      long long v24 = (char *)&v239.__r_.__value_.__r.__words[2] + 7;
      *((unsigned char *)&v239.__r_.__value_.__s + 23) = v22 + 23;
      qmemcpy(&v239, "Baseband chip revision ", 23);
    }
    if (v21 >= 0) {
      std::string v28 = v240;
    }
    else {
      std::string v28 = (void **)v240[0];
    }
    memmove(v24, v28, v22);
    goto LABEL_28;
  }
  unint64_t v17 = 0;
  unsigned int v18 = 1;
  while (1)
  {
    int v19 = (const char *)v15[v17];
    size_t v14 = (ACFULogging *)strncmp(v19, (const char *)&__s2, 4uLL);
    if (!v14) {
      break;
    }
    unint64_t v17 = v18++;
    if (v16 <= v17) {
      goto LABEL_13;
    }
  }
  *((void *)&v251 + 1) = v19;
  ACFULogging::getLogInstance(v14);
  ACFULogging::handleMessage();
  int v30 = 0;
  uint64_t v31 = 1;
LABEL_37:
  BOOL v32 = (void **)v246[1];
  if (v246[1])
  {
    do
    {
      size_t v37 = (void **)v32[1];
      if (*v32) {
        free(*v32);
      }
      operator delete(v32);
      BOOL v32 = v37;
    }
    while (v37);
  }
  if (v249[1]) {
    operator delete[](v249[1]);
  }
  std::string v33 = (void **)v250[1];
  if (v250[1])
  {
    unint64_t v34 = v251;
    if ((void)v251)
    {
      unint64_t v35 = 0;
      unsigned int v36 = 1;
      do
      {
        free(v33[v35]);
        unint64_t v35 = v36++;
      }
      while (v34 > v35);
    }
    operator delete[](v33);
  }
  if (v252[0]) {
    operator delete[](v252[0]);
  }
  if ((SHIBYTE(v241) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_55:
    operator delete(__s2.__r_.__value_.__l.__data_);
    if (v30 == 7) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  operator delete(v240[0]);
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_55;
  }
LABEL_49:
  if (v30 == 7) {
    goto LABEL_57;
  }
LABEL_56:
  if (v30) {
    goto LABEL_469;
  }
LABEL_57:
  if (ACFURestore::isPreflighted((ACFURestore *)v6)
    && (ACFURestore::isNeRDOS((ACFURestore *)v6) & 1) == 0)
  {
    if (!v80)
    {
      ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage();
      uint64_t v31 = 1005;
      goto LABEL_469;
    }
    if (v224) {
      atomic_fetch_add_explicit(&v224->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v81 = (ACFULogging *)BasebandUpdaterTransport::setPreflightMode(v80);
    uint64_t v31 = (uint64_t)v81;
    if (v81)
    {
      ACFULogging::getLogInstance(v81);
      ACFULogging::handleMessage();
    }
    if (v224 && !atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
    if (v31) {
      goto LABEL_469;
    }
  }
  uint64_t ValueIfPresent = *(void *)(v6 + 128);
  *(void *)long long value = 0;
  __s2.__r_.__value_.__s.__data_[0] = 0;
  if (ValueIfPresent)
  {
    uint64_t ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)ValueIfPresent, @"EraseEFS", (const void **)value);
    if (ValueIfPresent)
    {
      std::string::size_type v39 = *(BOOL **)value;
      if (*(void *)value)
      {
        CFTypeID v40 = CFGetTypeID(*(CFTypeRef *)value);
        uint64_t ValueIfPresent = CFBooleanGetTypeID();
        if (v40 == ValueIfPresent) {
          uint64_t ValueIfPresent = ctu::cf::assign((ctu::cf *)&__s2, v39, v41);
        }
      }
    }
  }
  ACFULogging::getLogInstance((ACFULogging *)ValueIfPresent);
  ACFULogging::handleMessage();
  if (__s2.__r_.__value_.__s.__data_[0])
  {
    memset(value, 170, 24);
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    int v42 = (BBUPartitionManager *)off_26AA89B50;
    if (!off_26AA89B50)
    {
      int v43 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v43);
      int v44 = operator new(0x20uLL);
      *int v44 = &unk_26CECF498;
      v44[1] = 0;
      void v44[2] = 0;
      v44[3] = v43;
      CFTypeRef v45 = (std::__shared_weak_count *)off_26AA89B58;
      off_26AA89B50 = v43;
      off_26AA89B58 = v44;
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
      int v42 = (BBUPartitionManager *)off_26AA89B50;
    }
    int v46 = (std::__shared_weak_count *)off_26AA89B58;
    __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    __s2.__r_.__value_.__l.__size_ = (std::string::size_type)off_26AA89B58;
    if (off_26AA89B58) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    BBUPartitionManager::getBBUFSPath(v42, (std::string *)value);
    if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    ACFULogging::getLogInstance(v47);
    ACFULogging::handleMessage();
    uint64_t v48 = ctu::fs::file_exists();
    if (v48)
    {
      uint64_t is_directory = ctu::fs::is_directory();
      if ((is_directory & 1) == 0 || (uint64_t is_directory = ctu::fs::remove_directory_contents(), !is_directory))
      {
        ACFULogging::getLogInstance((ACFULogging *)is_directory);
        uint64_t v59 = ACFULogging::handleMessage();
        char v67 = 0;
        uint64_t v31 = 1004;
        if ((value[23] & 0x80000000) != 0) {
LABEL_87:
        }
          operator delete(*(void **)value);
LABEL_88:
        if ((v67 & 1) == 0) {
          goto LABEL_468;
        }
        goto LABEL_89;
      }
      ACFULogging::getLogInstance((ACFULogging *)is_directory);
      unint64_t v50 = (ACFULogging *)ACFULogging::handleMessage();
      ACFULogging::getLogInstance(v50);
      ACFULogging::handleMessage();
      if (value[23] >= 0) {
        uint64_t v58 = (bbufs *)value;
      }
      else {
        uint64_t v58 = *(bbufs **)value;
      }
      if (!v58)
      {
        uint64_t v66 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v52, v53, v54, v55, v56, v57, 0);
LABEL_132:
        ACFULogging::getLogInstance(v66);
        uint64_t v59 = ACFULogging::handleMessage();
        char v67 = 0;
        uint64_t v31 = 1;
        if ((value[23] & 0x80000000) != 0) {
          goto LABEL_87;
        }
        goto LABEL_88;
      }
      uint64_t v59 = bbufs::prepareDestination(v58, v51);
      if ((v59 & 1) == 0)
      {
        uint64_t v66 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v60, v61, v62, v63, v64, v65, (char)"BasebandRestore");
        goto LABEL_132;
      }
    }
    else
    {
      ACFULogging::getLogInstance((ACFULogging *)v48);
      uint64_t v59 = ACFULogging::handleMessage();
    }
    uint64_t v31 = 0;
    char v67 = 1;
    if ((value[23] & 0x80000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
LABEL_89:
  *(void *)&value[8] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&value[16] = 0xAAAAAAAAAAAAAALL;
  *(void *)long long value = 0xAAAAAAAAAAAAAA00;
  __s2.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __s2.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __s2.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  v240[1] = (void *)0xAAAAAAAAAA00736DLL;
  uint64_t v241 = 0xAAAAAAAAAAAAAAALL;
  CFTypeRef cf = 0;
  CFTypeRef v237 = 0;
  long long v231 = 0;
  long long v232 = 0;
  v240[0] = *(void **)"NvramItems";
  v239.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v239.__r_.__value_.__r.__words[1] = xmmword_21DFACB60;
  strcpy(v239.__r_.__value_.__l.__data_, "auto-boot='1', bootdelay='0', sdd-vers='20015'");
  v238.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&v238.__r_.__value_.__r.__words[1] = xmmword_21DFACB70;
  strcpy(v238.__r_.__value_.__l.__data_, "auto-boot='1', bootdelay='0', host-env='1', sdd-vers='20015'");
  v234.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&v234.__r_.__value_.__r.__words[1] = xmmword_21DFACB70;
  strcpy(v234.__r_.__value_.__l.__data_, "auto-boot='1', bootdelay='0', host-env='0', sdd-vers='20015'");
  CFDictionaryRef v68 = *(const __CFDictionary **)(v6 + 128);
  if (!v68)
  {
    ACFULogging::getLogInstance(0);
LABEL_492:
    ACFULogging::handleMessage();
    uint64_t v31 = 1;
    goto LABEL_186;
  }
  std::string v69 = (__CFString *)CFDictionaryGetValue(v68, @"NVRAMItems");
  CFStringRef v70 = v69;
  if (v69)
  {
    CFRetain(v69);
    CFTypeRef v237 = v70;
    CFTypeID v71 = CFGetTypeID(v70);
    uint64_t TypeID = (ACFULogging *)CFStringGetTypeID();
    if ((ACFULogging *)v71 != TypeID)
    {
LABEL_491:
      ACFULogging::getLogInstance(TypeID);
      goto LABEL_492;
    }
    CStringPtr = CFStringGetCStringPtr(v70, 0x8000100u);
    uint64_t v74 = std::string::__assign_external((std::string *)value, CStringPtr);
    ACFULogging::getLogInstance((ACFULogging *)v74);
    std::string v69 = (__CFString *)ACFULogging::handleMessage();
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
      goto LABEL_95;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
      goto LABEL_95;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
LABEL_95:
  int v75 = BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS;
  BOOL v76 = v75 != 0;
  if (!v75)
  {
    if (*(unsigned char *)(v6 + 464))
    {
      ACFULogging::getLogInstance((ACFULogging *)v69);
      uint64_t v78 = (ACFULogging *)ACFULogging::handleMessage();
      uint64_t v79 = value[23];
      if (value[23] < 0) {
        uint64_t v79 = *(void *)&value[8];
      }
      if (v79)
      {
        ACFULogging::getLogInstance(v78);
        ACFULogging::handleMessage();
      }
      else
      {
        ACFULogging::getLogInstance(v78);
        ACFULogging::handleMessage();
        uint64_t TypeID = (ACFULogging *)readStickyNvramItems((uint64_t *)value);
        uint64_t v31 = (uint64_t)TypeID;
        if (TypeID) {
          goto LABEL_205;
        }
      }
      size_t v84 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v238.__r_.__value_.__l.__size_;
        std::string::size_type v86 = v238.__r_.__value_.__r.__words[0];
        BOOL v88 = (v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        uint64_t v89 = &v238;
        goto LABEL_158;
      }
      long long v85 = &v238;
      if ((*((unsigned char *)&v238.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_117;
      }
LABEL_123:
      std::string::__assign_no_alias<true>(&__s2, v85->__r_.__value_.__l.__data_, v85->__r_.__value_.__l.__size_);
      goto LABEL_165;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!(void)xmmword_267D23F28)
    {
      std::string v83 = (uint64_t (***)(void *, std::string::size_type))operator new(0x18uLL);
      MEMORY[0x223C1D180](v83, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
      std::string::size_type v82 = operator new(0x20uLL);
      *std::string::size_type v82 = &unk_26CECD1C0;
      v82[1] = 0;
      v82[2] = 0;
      v82[3] = v83;
      std::string v90 = (std::__shared_weak_count *)*((void *)&xmmword_267D23F28 + 1);
      *(void *)&xmmword_267D23F28 = v83;
      *((void *)&xmmword_267D23F28 + 1) = v82;
      if (!v90)
      {
        v233.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
        v233.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
        goto LABEL_135;
      }
      if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    std::string::size_type v82 = (void *)*((void *)&xmmword_267D23F28 + 1);
    std::string v83 = (uint64_t (***)(void *, std::string::size_type))xmmword_267D23F28;
    *(_OWORD *)&v233.__r_.__value_.__l.__data_ = xmmword_267D23F28;
    if (!*((void *)&xmmword_267D23F28 + 1))
    {
LABEL_136:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (v241 >= 0) {
        CFStringRef v91 = v240;
      }
      else {
        CFStringRef v91 = (void **)v240[0];
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v230, (const char *)v91);
      CFStringRef v92 = (const __CFString *)(**v83)(v83, v230.__r_.__value_.__r.__words[0]);
      CFStringRef v93 = v92;
      if (v92)
      {
        CFTypeID v94 = CFGetTypeID(v92);
        if (v94 == CFStringGetTypeID()) {
          CFStringRef v95 = v93;
        }
        else {
          CFStringRef v95 = 0;
        }
        CFRelease(v93);
        uint64_t v96 = (std::string *)MEMORY[0x223C1D120](&v230);
        uint64_t v97 = (std::__shared_weak_count *)v233.__r_.__value_.__l.__size_;
        if (!v233.__r_.__value_.__l.__size_) {
          goto LABEL_148;
        }
      }
      else
      {
        CFStringRef v95 = 0;
        uint64_t v96 = (std::string *)MEMORY[0x223C1D120](&v230);
        uint64_t v97 = (std::__shared_weak_count *)v233.__r_.__value_.__l.__size_;
        if (!v233.__r_.__value_.__l.__size_)
        {
LABEL_148:
          if (v95)
          {
            CFRetain(v95);
            CFTypeRef v98 = cf;
            CFTypeRef cf = v95;
            if (v98) {
              CFRelease(v98);
            }
            CFTypeID v99 = CFGetTypeID(v95);
            uint64_t TypeID = (ACFULogging *)CFStringGetTypeID();
            if ((ACFULogging *)v99 != TypeID) {
              goto LABEL_491;
            }
            ACFULogging::getLogInstance(TypeID);
            ACFULogging::handleMessage();
            uint64_t v100 = CFStringGetCStringPtr(v95, 0x8000100u);
            uint64_t v96 = std::string::__assign_external(&v234, v100);
          }
          ACFULogging::getLogInstance((ACFULogging *)v96);
          char v101 = (ACFULogging *)ACFULogging::handleMessage();
          ACFULogging::getLogInstance(v101);
          ACFULogging::handleMessage();
          uint64_t TypeID = (ACFULogging *)readStickyNvramItems((uint64_t *)value);
          uint64_t v31 = (uint64_t)TypeID;
          if (TypeID) {
            goto LABEL_205;
          }
          size_t v84 = HIBYTE(v234.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type size = v234.__r_.__value_.__l.__size_;
            std::string::size_type v86 = v234.__r_.__value_.__r.__words[0];
            BOOL v88 = (v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            uint64_t v89 = &v234;
            goto LABEL_158;
          }
          long long v85 = &v234;
          if ((*((unsigned char *)&v234.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_117;
          }
          goto LABEL_123;
        }
      }
      if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
      goto LABEL_148;
    }
LABEL_135:
    atomic_fetch_add_explicit(v82 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_136;
  }
  ACFULogging::getLogInstance((ACFULogging *)v69);
  uint64_t v77 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v77);
  ACFULogging::handleMessage();
  size_t v84 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    long long v85 = &v239;
    if ((*((unsigned char *)&v239.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_117:
      std::string __s2 = *v85;
      goto LABEL_165;
    }
    goto LABEL_123;
  }
  std::string::size_type size = v239.__r_.__value_.__l.__size_;
  std::string::size_type v86 = v239.__r_.__value_.__r.__words[0];
  BOOL v88 = (v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  uint64_t v89 = &v239;
LABEL_158:
  if (v88) {
    long long v102 = (void *)v86;
  }
  else {
    long long v102 = v89;
  }
  if (v88) {
    size_t v103 = size;
  }
  else {
    size_t v103 = v84;
  }
  std::string::__assign_no_alias<false>((void **)&__s2.__r_.__value_.__l.__data_, v102, v103);
LABEL_165:
  if ((value[23] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)value, *(std::string::size_type *)&value[8]);
  }
  else {
    std::string v233 = *(std::string *)value;
  }
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v230, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_);
  }
  else {
    std::string v230 = __s2;
  }
  uint64_t TypeID = (ACFULogging *)createNVData((uint64_t)&v233, (uint64_t)&v230, v76, &v231);
  uint64_t v31 = (uint64_t)TypeID;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v230.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v233.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_173:
      if (!v31) {
        goto LABEL_174;
      }
LABEL_205:
      ACFULogging::getLogInstance(TypeID);
      ACFULogging::handleMessage();
      goto LABEL_186;
    }
  }
  else if ((SHIBYTE(v233.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_173;
  }
  operator delete(v233.__r_.__value_.__l.__data_);
  if (v31) {
    goto LABEL_205;
  }
LABEL_174:
  if (!v231) {
    goto LABEL_491;
  }
  CFDictionaryRef v104 = *(const __CFDictionary **)(v6 + 128);
  CFTypeRef v228 = v231;
  long long v229 = v232;
  if (v232) {
    atomic_fetch_add_explicit(&v232->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  saveNVRAMFile(v104, (ACFURTKitNVRMGenerator **)&v228);
  uint64_t v105 = v229;
  if (v229 && !atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  size_t v107 = v231;
  uint64_t v106 = v232;
  if (v232) {
    atomic_fetch_add_explicit(&v232->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v108 = *(std::__shared_weak_count **)(v6 + 432);
  *(void *)(v6 + 424) = v107;
  *(void *)(v6 + 432) = v106;
  if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
  uint64_t v31 = 0;
LABEL_186:
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v234.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_188:
      if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_189;
      }
      goto LABEL_194;
    }
  }
  else if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_188;
  }
  operator delete(v238.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_189:
    if ((SHIBYTE(v241) & 0x80000000) == 0) {
      goto LABEL_190;
    }
    goto LABEL_195;
  }
LABEL_194:
  operator delete(v239.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v241) & 0x80000000) == 0)
  {
LABEL_190:
    CFTypeRef v109 = cf;
    if (!cf) {
      goto LABEL_197;
    }
    goto LABEL_196;
  }
LABEL_195:
  operator delete(v240[0]);
  CFTypeRef v109 = cf;
  if (cf) {
LABEL_196:
  }
    CFRelease(v109);
LABEL_197:
  uint64_t v110 = v232;
  if (v232 && !atomic_fetch_add(&v232->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
    if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_200:
      if ((value[23] & 0x80000000) == 0) {
        goto LABEL_201;
      }
LABEL_208:
      operator delete(*(void **)value);
      uint64_t v59 = (uint64_t)v237;
      if (!v237) {
        goto LABEL_210;
      }
      goto LABEL_209;
    }
  }
  else if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_200;
  }
  operator delete(__s2.__r_.__value_.__l.__data_);
  if ((value[23] & 0x80000000) != 0) {
    goto LABEL_208;
  }
LABEL_201:
  uint64_t v59 = (uint64_t)v237;
  if (v237) {
LABEL_209:
  }
    CFRelease((CFTypeRef)v59);
LABEL_210:
  if (v31) {
    goto LABEL_468;
  }
  CFTypeRef v228 = 0;
  __s2.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = 0uLL;
  v240[0] = 0;
  v240[1] = 0;
  uint64_t v241 = 0;
  memset(&v239, 0, sizeof(v239));
  memset(&v238, 0, sizeof(v238));
  CFTypeRef cf = 0;
  CFTypeRef v237 = 0;
  v234.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA01;
  uint64_t __dst = 0;
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = 0xAAAAAAAAAAAA0100;
  memset(&v233, 170, sizeof(v233));
  value[23] = 4;
  strcpy(value, "bbcl");
  HIBYTE(v244) = 4;
  strcpy(&value[24], "bbpc");
  HIBYTE(v246[0]) = 4;
  strcpy((char *)v245, "bbpv");
  std::vector<std::string>::vector[abi:ne180100](&v233, (uint64_t)value, 3uLL);
  if ((SHIBYTE(v246[0]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v244) & 0x80000000) == 0) {
      goto LABEL_213;
    }
LABEL_240:
    operator delete(*(void **)&value[24]);
    if ((value[23] & 0x80000000) == 0) {
      goto LABEL_214;
    }
    goto LABEL_241;
  }
  operator delete(v245[0]);
  if (SHIBYTE(v244) < 0) {
    goto LABEL_240;
  }
LABEL_213:
  if ((value[23] & 0x80000000) == 0) {
    goto LABEL_214;
  }
LABEL_241:
  operator delete(*(void **)value);
LABEL_214:
  long long v231 = 0;
  long long v232 = 0;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  std::string::size_type v111 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    char v112 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v112);
    CFTypeID v113 = operator new(0x20uLL);
    *CFTypeID v113 = &unk_26CECF498;
    v113[1] = 0;
    v113[2] = 0;
    v113[3] = v112;
    uint64_t v114 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v112;
    off_26AA89B58 = v113;
    if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
    std::string::size_type v111 = (BBUPartitionManager *)off_26AA89B50;
  }
  int v115 = (std::__shared_weak_count *)off_26AA89B58;
  v230.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  v230.__r_.__value_.__l.__size_ = (std::string::size_type)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v111, (std::string *)value);
  if (SHIBYTE(v241) < 0) {
    operator delete(v240[0]);
  }
  *(_OWORD *)v240 = *(_OWORD *)value;
  uint64_t v241 = *(void *)&value[16];
  value[23] = 0;
  value[0] = 0;
  if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  ACFULogging::getLogInstance(v116);
  ACFULogging::handleMessage();
  if (v241 >= 0) {
    uint64_t v124 = v240;
  }
  else {
    uint64_t v124 = (void **)v240[0];
  }
  if (v124)
  {
    if (bbufs::prepareDestination((bbufs *)v124, v117))
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
      {
        if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
          goto LABEL_233;
        }
      }
      else
      {
        dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
        if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        {
LABEL_233:
          if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
          {
LABEL_234:
            CFDictionaryRef v131 = *(const __CFDictionary **)(v6 + 128);
            if (!v131 || (uint64_t v132 = (ACFULogging *)CFDictionaryGetValue(v131, @"APTicket"), (v133 = v132) == 0))
            {
              ACFULogging::getLogInstance(0);
              ACFULogging::handleMessage();
              uint64_t v31 = 1;
              int v138 = v232;
              if (v232) {
                goto LABEL_442;
              }
              goto LABEL_444;
            }
            ACFULogging::getLogInstance(v132);
            ACFULogging::handleMessage();
            AMSupportSafeRetain();
            CFTypeID v134 = CFGetTypeID(v133);
            uint64_t v135 = (ACFULogging *)CFDataGetTypeID();
            if ((ACFULogging *)v134 != v135)
            {
              ACFULogging::getLogInstance(v135);
              ACFULogging::handleMessage();
              uint64_t v31 = 1;
              goto LABEL_440;
            }
            v234.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
            CFIndex v136 = *(void **)(v6 + 168);
            if (!v136) {
              goto LABEL_262;
            }
            goto LABEL_257;
          }
LABEL_256:
          uint64_t v133 = 0;
          CFIndex v136 = *(void **)(v6 + 168);
          if (!v136) {
            goto LABEL_262;
          }
LABEL_257:
          if (v136)
          {
            uint64_t v139 = *(std::__shared_weak_count **)(v6 + 176);
            if (v139) {
              atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v140 = v232;
            long long v231 = (ACFULogging *)v136;
            long long v232 = v139;
            if (!v140)
            {
LABEL_266:
              if (v136)
              {
                uint64_t v141 = (ACFULogging *)(**(void *(***)(unsigned char *__return_ptr))v136)(value);
                std::string::size_type v143 = *(void *)value;
                std::string::size_type v142 = *(void *)&value[8];
                if (*(void *)&value[8]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&value[8] + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v144 = (std::__shared_weak_count *)__s2.__r_.__value_.__l.__size_;
                __s2.__r_.__value_.__r.__words[0] = v143;
                __s2.__r_.__value_.__l.__size_ = v142;
                if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
                int v145 = *(_DWORD *)&value[16];
                LODWORD(__s2.__r_.__value_.__r.__words[2]) = *(_DWORD *)&value[16];
                CFDictionaryRef v146 = *(std::__shared_weak_count **)&value[8];
                if (*(void *)&value[8])
                {
                  if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&value[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                  int v145 = __s2.__r_.__value_.__r.__words[2];
                }
                if (v145)
                {
                  ACFULogging::getLogInstance(v141);
                  ACFULogging::handleMessage();
LABEL_488:
                  uint64_t v31 = 1;
                  if (!v133) {
                    goto LABEL_441;
                  }
                  goto LABEL_440;
                }
                long long v147 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
                if (__s2.__r_.__value_.__l.__size_)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(__s2.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  int v148 = *(unsigned __int8 *)(v147 + 48);
                  if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v147 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    (*(void (**)(void))(**((void **)&v147 + 1) + 16))(*((void *)&v147 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v147 + 1));
                  }
                  if (v148) {
                    goto LABEL_281;
                  }
                }
                else if (*(unsigned char *)(__s2.__r_.__value_.__r.__words[0] + 48))
                {
LABEL_281:
                  ACFULogging::getLogInstance(v141);
                  CFDataRef v149 = (const __CFData *)ACFULogging::handleMessage();
                  long long v150 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
                  *(_OWORD *)long long value = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
                  if (__s2.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(__s2.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  if (*(unsigned char *)(v150 + 48))
                  {
                    CFDataRef v149 = *(const __CFData **)(v150 + 40);
                    if (v149)
                    {
                      long long v151 = CFDataGetBytePtr(v149);
                      CFDataRef v149 = (const __CFData *)CFDataGetLength(*(CFDataRef *)(v150 + 40));
                      if ((unint64_t)v149 <= 8)
                      {
                        uint64_t __dst = 0;
                        CFDataRef v149 = (const __CFData *)memcpy(&__dst, v151, (size_t)v149);
                      }
                    }
                  }
                  if (*((void *)&v150 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v150 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    (*(void (**)(void))(**((void **)&v150 + 1) + 16))(*((void *)&v150 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v150 + 1));
                  }
                  LogInstance = (capabilities::radio *)ACFULogging::getLogInstance(v149);
                  capabilities::radio::chipID(LogInstance);
                  v153 = (ACFULogging *)ACFULogging::handleMessage();
                  std::string::size_type v221 = v233.__r_.__value_.__l.__size_;
                  std::string::size_type v154 = v233.__r_.__value_.__r.__words[0];
                  if (v233.__r_.__value_.__r.__words[0] == v233.__r_.__value_.__l.__size_)
                  {
LABEL_439:
                    uint64_t v31 = 0;
                    if (!v133) {
                      goto LABEL_441;
                    }
                    goto LABEL_440;
                  }
                  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
                  long long v218 = (CFTypeRef *)(v6 + 448);
                  long long v219 = (CFTypeRef *)(v6 + 440);
                  long long v220 = (CFTypeRef *)(v6 + 456);
LABEL_294:
                  ACFULogging::getLogInstance(v153);
                  uint64_t v155 = (capabilities::radio *)ACFULogging::handleMessage();
                  if (*(char *)(v154 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)value, *(const std::string::value_type **)v154, *(void *)(v154 + 8));
                  }
                  else
                  {
                    long long v156 = *(_OWORD *)v154;
                    *(void *)&value[16] = *(void *)(v154 + 16);
                    *(_OWORD *)long long value = v156;
                  }
                  HIBYTE(v244) = 0;
                  value[24] = 0;
                  capabilities::radio::chipID(v155);
                  DataLocalCopy = (ACFULogging *)ACFUFDR::getDataLocalCopy();
                  CFTypeRef v158 = (CFTypeRef)v230.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v244) < 0)
                  {
                    operator delete(*(void **)&value[24]);
                    if ((value[23] & 0x80000000) == 0) {
                      goto LABEL_299;
                    }
                  }
                  else if ((value[23] & 0x80000000) == 0)
                  {
LABEL_299:
                    ACFULogging::getLogInstance(DataLocalCopy);
                    ACFULogging::handleMessage();
                    v153 = (ACFULogging *)v228;
                    CFTypeRef v228 = v158;
                    if (v153)
                    {
                      CFRelease(v153);
                      CFTypeRef v158 = v228;
                    }
                    if (v158) {
                      uint64_t v159 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
                    }
                    else {
                      uint64_t v159 = 0;
                    }
                    if (!v159) {
                      goto LABEL_293;
                    }
                    int v160 = v133;
                    memset(value, 170, 24);
                    GetBasebandFDR4ccToFileNameMap(value);
                    uint64_t v162 = *(uint64_t **)&value[8];
                    if (!*(void *)&value[8])
                    {
LABEL_435:
                      ACFULogging::getLogInstance(v161);
                      uint64_t v133 = v160;
                      ACFULogging::handleMessage();
                      goto LABEL_436;
                    }
                    char v163 = *(unsigned char *)(v154 + 23);
                    if (v163 >= 0) {
                      char v164 = (const std::string::value_type *)v154;
                    }
                    else {
                      char v164 = *(const std::string::value_type **)v154;
                    }
                    if (v163 >= 0) {
                      size_t v165 = *(unsigned __int8 *)(v154 + 23);
                    }
                    else {
                      size_t v165 = *(void *)(v154 + 8);
                    }
                    uint64_t v166 = &value[8];
                    char v167 = *(uint64_t **)&value[8];
                    while (1)
                    {
                      int v168 = *((char *)v167 + 55);
                      if (v168 >= 0) {
                        uint64_t v169 = v167 + 4;
                      }
                      else {
                        uint64_t v169 = (const void *)v167[4];
                      }
                      if (v168 >= 0) {
                        size_t v170 = *((unsigned __int8 *)v167 + 55);
                      }
                      else {
                        size_t v170 = v167[5];
                      }
                      if (v165 >= v170) {
                        size_t v171 = v170;
                      }
                      else {
                        size_t v171 = v165;
                      }
                      uint64_t v161 = (ACFULogging *)memcmp(v169, v164, v171);
                      if (v161)
                      {
                        if ((v161 & 0x80000000) != 0) {
                          goto LABEL_313;
                        }
LABEL_327:
                        uint64_t v166 = v167;
                        char v167 = (uint64_t *)*v167;
                        if (!v167)
                        {
LABEL_328:
                          if (v166 == &value[8]) {
                            goto LABEL_435;
                          }
                          std::string::size_type v174 = (size_t *)*((void *)v166 + 4);
                          uint64_t v173 = (size_t *)(v166 + 32);
                          uint64_t v172 = v174;
                          int v175 = *((char *)v173 + 23);
                          if (v175 >= 0) {
                            char v176 = v173;
                          }
                          else {
                            char v176 = v172;
                          }
                          if (v175 >= 0) {
                            size_t v177 = *((unsigned __int8 *)v173 + 23);
                          }
                          else {
                            size_t v177 = v173[1];
                          }
                          if (v177 >= v165) {
                            size_t v178 = v165;
                          }
                          else {
                            size_t v178 = v177;
                          }
                          uint64_t v161 = (ACFULogging *)memcmp(v164, v176, v178);
                          if (v161)
                          {
                            if ((v161 & 0x80000000) == 0) {
                              goto LABEL_346;
                            }
                            goto LABEL_435;
                          }
                          if (v165 < v177) {
                            goto LABEL_435;
                          }
LABEL_346:
                          while (2)
                          {
                            while (2)
                            {
                              int v179 = *((char *)v162 + 55);
                              if (v179 >= 0) {
                                char v180 = v162 + 4;
                              }
                              else {
                                char v180 = (const void *)v162[4];
                              }
                              if (v179 >= 0) {
                                size_t v181 = *((unsigned __int8 *)v162 + 55);
                              }
                              else {
                                size_t v181 = v162[5];
                              }
                              if (v181 >= v165) {
                                size_t v182 = v165;
                              }
                              else {
                                size_t v182 = v181;
                              }
                              int v183 = memcmp(v164, v180, v182);
                              if (v183)
                              {
                                if (v183 < 0) {
                                  goto LABEL_345;
                                }
                              }
                              else if (v165 < v181)
                              {
LABEL_345:
                                uint64_t v162 = (uint64_t *)*v162;
                                if (!v162) {
                                  goto LABEL_501;
                                }
                                continue;
                              }
                              break;
                            }
                            v184 = (ACFULogging *)memcmp(v180, v164, v182);
                            if (v184)
                            {
                              if ((v184 & 0x80000000) == 0) {
                                break;
                              }
                              goto LABEL_363;
                            }
                            if (v181 < v165)
                            {
LABEL_363:
                              uint64_t v162 = (uint64_t *)v162[1];
                              if (!v162) {
LABEL_501:
                              }
                                std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                              continue;
                            }
                            break;
                          }
                          if (&v239 != (std::string *)(v162 + 7))
                          {
                            char v185 = *((unsigned char *)v162 + 79);
                            if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                            {
                              if (v185 >= 0) {
                                v186 = v162 + 7;
                              }
                              else {
                                v186 = (void *)v162[7];
                              }
                              if (v185 >= 0) {
                                size_t v187 = *((unsigned __int8 *)v162 + 79);
                              }
                              else {
                                size_t v187 = v162[8];
                              }
                              v184 = (ACFULogging *)std::string::__assign_no_alias<false>((void **)&v239.__r_.__value_.__l.__data_, v186, v187);
                            }
                            else if ((*((unsigned char *)v162 + 79) & 0x80) != 0)
                            {
                              v184 = (ACFULogging *)std::string::__assign_no_alias<true>(&v239, (void *)v162[7], v162[8]);
                            }
                            else
                            {
                              std::string v239 = *(std::string *)(v162 + 7);
                            }
                          }
                          ACFULogging::getLogInstance(v184);
                          xpc_object_t v188 = (ACFULogging *)ACFULogging::handleMessage();
                          int v189 = SHIBYTE(v241);
                          if (v241 >= 0) {
                            size_t v190 = HIBYTE(v241);
                          }
                          else {
                            size_t v190 = (size_t)v240[1];
                          }
                          int v191 = SHIBYTE(v239.__r_.__value_.__r.__words[2]);
                          if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            std::string::size_type v192 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            std::string::size_type v192 = v239.__r_.__value_.__l.__size_;
                          }
                          unint64_t v193 = v192 + v190;
                          memset(&v230, 170, sizeof(v230));
                          if (v192 + v190 > 0x7FFFFFFFFFFFFFF7) {
                            std::string::__throw_length_error[abi:ne180100]();
                          }
                          if (v193 > 0x16)
                          {
                            uint64_t v209 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v193 | 7) != 0x17) {
                              uint64_t v209 = v193 | 7;
                            }
                            uint64_t v210 = v209 + 1;
                            xpc_object_t v188 = (ACFULogging *)operator new(v209 + 1);
                            CFTypeRef v194 = (std::string *)v188;
                            v230.__r_.__value_.__l.__size_ = v192 + v190;
                            v230.__r_.__value_.__r.__words[2] = v210 | 0x8000000000000000;
                            v230.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
                            if (v190)
                            {
LABEL_386:
                              if (v189 >= 0) {
                                BOOL v195 = v240;
                              }
                              else {
                                BOOL v195 = (void **)v240[0];
                              }
                              xpc_object_t v188 = (ACFULogging *)memmove(v194, v195, v190);
                            }
                          }
                          else
                          {
                            memset(&v230, 0, sizeof(v230));
                            CFTypeRef v194 = &v230;
                            *((unsigned char *)&v230.__r_.__value_.__s + 23) = v192 + v190;
                            if (v190) {
                              goto LABEL_386;
                            }
                          }
                          int v196 = (char *)v194 + v190;
                          if (v192)
                          {
                            if (v191 >= 0) {
                              std::string v197 = &v239;
                            }
                            else {
                              std::string v197 = (std::string *)v239.__r_.__value_.__r.__words[0];
                            }
                            xpc_object_t v188 = (ACFULogging *)memmove(v196, v197, v192);
                          }
                          v196[v192] = 0;
                          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v238.__r_.__value_.__l.__data_);
                          }
                          std::string v238 = v230;
                          ACFULogging::getLogInstance(v188);
                          uint64_t v133 = v160;
                          ACFULogging::handleMessage();
                          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            std::string v198 = &v238;
                          }
                          else {
                            std::string v198 = (std::string *)v238.__r_.__value_.__r.__words[0];
                          }
                          CFStringRef v199 = CFStringCreateWithCString(alloc, (const char *)v198, 0x8000100u);
                          uint64_t v200 = (void *)v237;
                          CFTypeRef v237 = v199;
                          if (v200) {
                            CFRelease(v200);
                          }
                          if (!v199) {
                            goto LABEL_493;
                          }
                          CFURLRef v201 = CFURLCreateWithString(alloc, v199, 0);
                          uint64_t v200 = (void *)cf;
                          CFTypeRef cf = v201;
                          if (v200) {
                            CFRelease(v200);
                          }
                          if (!v201)
                          {
LABEL_493:
                            ACFULogging::getLogInstance((ACFULogging *)v200);
                            ACFULogging::handleMessage();
                            uint64_t v31 = 4000;
                            goto LABEL_437;
                          }
                          v202 = (ACFULogging *)AMSupportWriteDataToFileURL();
                          if (!v202)
                          {
                            ACFULogging::getLogInstance(v202);
                            v203 = (ACFULogging *)ACFULogging::handleMessage();
                            uint64_t v204 = *(unsigned __int8 *)(v154 + 23);
                            int v205 = (char)v204;
                            if ((v204 & 0x80u) != 0) {
                              uint64_t v204 = *(void *)(v154 + 8);
                            }
                            if (v204 == 4)
                            {
                              if (v205 >= 0) {
                                uint64_t v206 = (const std::string::value_type *)v154;
                              }
                              else {
                                uint64_t v206 = *(const std::string::value_type **)v154;
                              }
                              switch(*(_DWORD *)v206)
                              {
                                case 0x6C636262:
                                  if (v219 == &v228) {
                                    goto LABEL_292;
                                  }
                                  CFTypeRef v211 = v228;
                                  if (v228) {
                                    CFRetain(v228);
                                  }
                                  CFTypeRef v208 = *v219;
                                  *long long v219 = v211;
                                  if (!v208) {
                                    goto LABEL_292;
                                  }
                                  break;
                                case 0x63706262:
                                  if (v218 == &v228) {
                                    goto LABEL_292;
                                  }
                                  CFTypeRef v212 = v228;
                                  if (v228) {
                                    CFRetain(v228);
                                  }
                                  CFTypeRef v208 = *v218;
                                  *long long v218 = v212;
                                  if (!v208) {
                                    goto LABEL_292;
                                  }
                                  break;
                                case 0x76706262:
                                  if (v220 != &v228)
                                  {
                                    CFTypeRef v207 = v228;
                                    if (v228) {
                                      CFRetain(v228);
                                    }
                                    CFTypeRef v208 = *v220;
                                    *long long v220 = v207;
                                    if (v208) {
                                      break;
                                    }
                                  }
LABEL_292:
                                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)value, *(uint64_t *)&value[8]);
LABEL_293:
                                  v154 += 24;
                                  if (v154 == v221) {
                                    goto LABEL_439;
                                  }
                                  goto LABEL_294;
                                default:
                                  goto LABEL_483;
                              }
                              CFRelease(v208);
                              goto LABEL_292;
                            }
LABEL_483:
                            ACFULogging::getLogInstance(v203);
                            ACFULogging::handleMessage();
LABEL_436:
                            uint64_t v31 = 1;
                            goto LABEL_437;
                          }
                          ACFULogging::getLogInstance(v202);
                          ACFULogging::handleMessage();
                          uint64_t v31 = 1004;
LABEL_437:
                          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)value, *(uint64_t *)&value[8]);
                          if (!v133)
                          {
LABEL_441:
                            int v138 = v232;
                            if (v232) {
                              goto LABEL_442;
                            }
                            goto LABEL_444;
                          }
LABEL_440:
                          CFRelease(v133);
                          goto LABEL_441;
                        }
                      }
                      else
                      {
                        if (v170 >= v165) {
                          goto LABEL_327;
                        }
LABEL_313:
                        char v167 = (uint64_t *)v167[1];
                        if (!v167) {
                          goto LABEL_328;
                        }
                      }
                    }
                  }
                  operator delete(*(void **)value);
                  goto LABEL_299;
                }
                ACFULogging::getLogInstance(v141);
              }
              else
              {
                ACFULogging::getLogInstance(0);
              }
              ACFULogging::handleMessage();
              goto LABEL_488;
            }
LABEL_263:
            if (!atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
            CFIndex v136 = v231;
            goto LABEL_266;
          }
LABEL_262:
          long long v140 = v232;
          long long v231 = (ACFULogging *)v136;
          long long v232 = 0;
          if (!v140) {
            goto LABEL_266;
          }
          goto LABEL_263;
        }
      }
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
      if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) {
        goto LABEL_234;
      }
      goto LABEL_256;
    }
    int v137 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v125, v126, v127, v128, v129, v130, (char)"BasebandRestore");
  }
  else
  {
    int v137 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v118, v119, v120, v121, v122, v123, 0);
  }
  ACFULogging::getLogInstance(v137);
  ACFULogging::handleMessage();
  uint64_t v31 = 1004;
  int v138 = v232;
  if (v232)
  {
LABEL_442:
    if (!atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
LABEL_444:
  std::string::size_type v213 = v233.__r_.__value_.__r.__words[0];
  if (v233.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v214 = v233.__r_.__value_.__l.__size_;
    long long v215 = (void *)v233.__r_.__value_.__r.__words[0];
    if (v233.__r_.__value_.__l.__size_ != v233.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v214 - 1) < 0) {
          operator delete(*(void **)(v214 - 24));
        }
        v214 -= 24;
      }
      while (v214 != v213);
      long long v215 = (void *)v233.__r_.__value_.__r.__words[0];
    }
    v233.__r_.__value_.__l.__size_ = v213;
    operator delete(v215);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v237) {
    CFRelease(v237);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v238.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_458:
      if ((SHIBYTE(v241) & 0x80000000) == 0) {
        goto LABEL_459;
      }
LABEL_463:
      operator delete(v240[0]);
      long long v216 = (std::__shared_weak_count *)__s2.__r_.__value_.__l.__size_;
      if (!__s2.__r_.__value_.__l.__size_) {
        goto LABEL_465;
      }
      goto LABEL_464;
    }
  }
  else if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_458;
  }
  operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v241) < 0) {
    goto LABEL_463;
  }
LABEL_459:
  long long v216 = (std::__shared_weak_count *)__s2.__r_.__value_.__l.__size_;
  if (!__s2.__r_.__value_.__l.__size_)
  {
LABEL_465:
    uint64_t v59 = (uint64_t)v228;
    if (!v228) {
      goto LABEL_467;
    }
    goto LABEL_466;
  }
LABEL_464:
  if (atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_465;
  }
  ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
  std::__shared_weak_count::__release_weak(v216);
  uint64_t v59 = (uint64_t)v228;
  if (v228) {
LABEL_466:
  }
    CFRelease((CFTypeRef)v59);
LABEL_467:
  if (v31)
  {
LABEL_468:
    ACFULogging::getLogInstance((ACFULogging *)v59);
    ACFULogging::handleMessage();
  }
LABEL_469:
  if (v225 && !atomic_fetch_add(&v225->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
    std::__shared_weak_count::__release_weak(v225);
  }
LABEL_472:
  if (v223 && !atomic_fetch_add(&v223->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
    std::__shared_weak_count::__release_weak(v223);
  }
  if (v224 && !atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
    std::__shared_weak_count::__release_weak(v224);
  }
  return v31;
}

void sub_21DF3C00C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::target_type()
{
}

void std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(*a1);
    std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void SharedData::create_default_global(SharedData *this)
{
  std::string __p = operator new(0x60uLL);
  strcpy((char *)__p, "/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.Statistics.plist");
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v14.st_blkstd::string::size_type size = v2;
  *(timespec *)v14.st_qspare = v2;
  v14.st_birthtimespec = v2;
  *(timespec *)&v14.st_std::string::size_type size = v2;
  v14.st_mtimespec = v2;
  v14.st_ctimespec = v2;
  *(timespec *)&v14.st_uid = v2;
  v14.st_atimespec = v2;
  long long v13 = xmmword_21DFACB80;
  *(timespec *)&v14.st_dev = v2;
  if (!stat((const char *)__p, &v14))
  {
    CFDataRef v4 = v13 >= 0 ? (const std::__fs::filesystem::path *)&__p : (const std::__fs::filesystem::path *)__p;
    if (remove(v4, v3))
    {
      if (v13 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      unlink(p_p);
    }
  }
  uint64_t v6 = operator new(0x30uLL);
  MEMORY[0x223C1D180](v6, @"com.apple.AppleBasebandManager.data", *MEMORY[0x263EFFE70]);
  v6[3] = 0;
  v6[4] = 0;
  *((_DWORD *)v6 + 10) = 0;
  *(void *)this = v6;
  *(void *)&v14.st_dev = v6;
  uint64_t v7 = (atomic_ullong *)operator new(0x20uLL);
  uint64_t v8 = (std::__shared_weak_count *)v7;
  void v7[2] = 0;
  v7[1] = 0;
  *uint64_t v7 = (atomic_ullong)&unk_26CECD170;
  v7[3] = (atomic_ullong)v6;
  *((void *)this + 1) = v7;
  *(void *)&v14.st_dev = 0;
  atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(v7 + 2, 1uLL, memory_order_relaxed);
  v6[3] = v6;
  v6[4] = v7;
  if (!atomic_fetch_add(v7 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v7 + 16))(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(void *)&v14.st_dev;
  if (*(void *)&v14.st_dev)
  {
    CFDataRef v10 = *(std::__shared_weak_count **)(*(void *)&v14.st_dev + 32);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    int v11 = (void *)MEMORY[0x223C1D190](v9);
    operator delete(v11);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
}

void sub_21DF3C908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    CFDataRef v4 = (void *)MEMORY[0x223C1D190](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    unint64_t v3 = (void *)MEMORY[0x223C1D190](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFAD06BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFAD06BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFAD06BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFAD06BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x223C1D190]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFAD131) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFAD131 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFAD131)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFAD131 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_14()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_540()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_541()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_542()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t BBUEURUpdateSource::getSBLType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getSBLType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x19u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a SBL1 file.\")", v3, v4, v5, v6);
  }
  return 16391;
}

void sub_21DF3CCE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getRPMType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getRPMType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x25u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a RPM file.\")", v3, v4, v5, v6);
  }
  return 16392;
}

void sub_21DF3CD6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getAPPSType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getAPPSType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x31u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an APPS file.\")", v3, v4, v5, v6);
  }
  return 16393;
}

void sub_21DF3CDF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getDSP3Type(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getDSP3Type(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x47u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a DSP3 file.\")", v3, v4, v5, v6);
  }
  return 16394;
}

void sub_21DF3CE7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getMBAType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getMBAType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x52u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an MBA file.\")", v3, v4, v5, v6);
  }
  return 16395;
}

void sub_21DF3CF04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getQDSP6SWType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getQDSP6SWType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x5Du, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a QDSP6SW file.\")", v3, v4, v5, v6);
  }
  return 16396;
}

void sub_21DF3CF8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getTZType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getTZType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x68u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a TZ file.\")", v3, v4, v5, v6);
  }
  return 16397;
}

void sub_21DF3D014(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getWDTType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getWDTType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x74u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a WDT file.\")", v3, v4, v5, v6);
  }
  return 16398;
}

void sub_21DF3D09C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getACDBType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getACDBType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x7Fu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an ACDBT file.\")", v3, v4, v5, v6);
  }
  return 16399;
}

void sub_21DF3D124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getEFS1Type(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getEFS1Type(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x8Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS1 file.\")", v3, v4, v5, v6);
  }
  return 16400;
}

void sub_21DF3D1AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getEFS2Type(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getEFS2Type(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x95u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS2 file.\")", v3, v4, v5, v6);
  }
  return 16401;
}

void sub_21DF3D234(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getEFS3Type(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getEFS3Type(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xA0u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS3 file.\")", v3, v4, v5, v6);
  }
  return 16402;
}

void sub_21DF3D2BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getCalType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getCalType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xABu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Cal file.\")", v3, v4, v5, v6);
  }
  return 16403;
}

void sub_21DF3D344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getProvType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getProvType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xB6u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Prov file.\")", v3, v4, v5, v6);
  }
  return 16404;
}

void sub_21DF3D3CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getPacType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getPacType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xC1u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Pac file.\")", v3, v4, v5, v6);
  }
  return 16405;
}

void sub_21DF3D454(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getActType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getActType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xCCu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an Act file.\")", v3, v4, v5, v6);
  }
  return 16406;
}

void sub_21DF3D4DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getBBCFGType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getBBCFGType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xD7u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a BBCFG file.\")", v3, v4, v5, v6);
  }
  return 16407;
}

void sub_21DF3D564(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getMDMDDRType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getMDMDDRType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xE2u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a MDMDDR file.\")", v3, v4, v5, v6);
  }
  return 16413;
}

void sub_21DF3D5EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getAPDPType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getAPDPType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xEDu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a APDP file.\")", v3, v4, v5, v6);
  }
  return 16408;
}

void sub_21DF3D674(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getDEVCFGType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getDEVCFGType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xF8u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a DEVCFG file.\")", v3, v4, v5, v6);
  }
  return 16409;
}

void sub_21DF3D6FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getSECType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getSECType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x103u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a SEC file.\")", v3, v4, v5, v6);
  }
  return 16410;
}

void sub_21DF3D784(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getHYPType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getHYPType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x10Eu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a HYP file.\")", v3, v4, v5, v6);
  }
  return 16411;
}

void sub_21DF3D80C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getAOPType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getAOPType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x119u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a AOP file.\")", v3, v4, v5, v6);
  }
  return 16412;
}

void sub_21DF3D894(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getOEMMiscType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getOEMMiscType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x124u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a OEMMisc file.\")", v3, v4, v5, v6);
  }
  return 16414;
}

void sub_21DF3D91C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getQTIMiscType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getQTIMiscType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x12Fu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a QTIMisc file.\")", v3, v4, v5, v6);
  }
  return 16415;
}

void sub_21DF3D9A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getXblCfgType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getXblCfgType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x13Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a XBL Config file.\")", v3, v4, v5, v6);
  }
  return 16416;
}

void sub_21DF3DA2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getUEFIType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getUEFIType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x145u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a UEFI file.\")", v3, v4, v5, v6);
  }
  return 16417;
}

void sub_21DF3DAB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getXblSupportType(BBUEURUpdateSource *this)
{
  if (capabilities::updater::getXblSupportType(this) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x150u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a XBL Support file.\")", v3, v4, v5, v6);
  }
  return 16418;
}

void sub_21DF3DB3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::containsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4)
  {
    int v6 = *(char *)(a1 + 103);
    if (v6 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      size_t v7 = *(void *)(a1 + 88);
    }
    unint64_t v8 = v7 + 1;
    memset(&__dst, 170, sizeof(__dst));
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v8 >= 0x17)
    {
      uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v10 = v8 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v7 + 1;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
      if (!v7) {
        goto LABEL_19;
      }
    }
    if (v6 >= 0) {
      size_t v12 = (const void *)(a1 + 80);
    }
    else {
      size_t v12 = *(const void **)(a1 + 80);
    }
    memmove(p_dst, v12, v7);
LABEL_19:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 47;
    int v13 = *(char *)(a2 + 23);
    if (v13 >= 0) {
      stat v14 = (const std::string::value_type *)a2;
    }
    else {
      stat v14 = *(const std::string::value_type **)a2;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(a2 + 8);
    }
    unint64_t v16 = std::string::append(&__dst, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = ctu::fs::file_exists();
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v18;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v18;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v18;
  }

  return BBUZipFile::containsFile(v4, (void *)a2);
}

void sub_21DF3DD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void *BBUEURUpdateSource::createDataSource(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  if (!v6)
  {
    int v9 = *(char *)(a1 + 103);
    if (v9 >= 0) {
      size_t v10 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      size_t v10 = *(void *)(a1 + 88);
    }
    unint64_t v11 = v10 + 1;
    memset(&__dst, 170, sizeof(__dst));
    if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v11 >= 0x17)
    {
      uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v13 = v11 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_dst = (std::string *)operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v10 + 1;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
      if (!v10) {
        goto LABEL_23;
      }
    }
    if (v9 >= 0) {
      std::string::size_type v15 = (const void *)(a1 + 80);
    }
    else {
      std::string::size_type v15 = *(const void **)(a1 + 80);
    }
    memmove(p_dst, v15, v10);
LABEL_23:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v10) = 47;
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      long long v17 = (const std::string::value_type *)a2;
    }
    else {
      long long v17 = *(const std::string::value_type **)a2;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(a2 + 8);
    }
    int v19 = std::string::append(&__dst, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = operator new(0x30uLL);
    *unint64_t v8 = &unk_26CECA448;
    *(_OWORD *)(v8 + 1) = 0u;
    *(_OWORD *)(v8 + 3) = 0u;
    if (BBUFileDataSource::init((uint64_t)v8, (const char *)__p, a3))
    {
      (*(void (**)(void *))(*v8 + 8))(v8);
      unint64_t v8 = 0;
    }
    if (SHIBYTE(v24) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v8;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v8;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v8;
  }
  size_t v7 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = operator new(0x38uLL);
  *unint64_t v8 = &unk_26CECBB38;
  v8[1] = v6;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v8, (void *)a2, a3))
  {
    (*(void (**)(void *))(*v8 + 8))(v8);
    unint64_t v8 = 0;
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v8;
}

void sub_21DF3DFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEURUpdateSource::saveFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x17Du, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v28, v29, v30, v31);
  }
  if (!BBUZipFile::containsFile(v4, (void *)a2)) {
    return 35;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  size_t v7 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v43 = v8;
  int v44 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = operator new(0x38uLL);
  *int v9 = &unk_26CECBB38;
  v9[1] = v8;
  v9[4] = 0;
  v9[5] = 0;
  v9[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v9, (void *)a2, 0))
  {
    (*(void (**)(void *))(*v9 + 8))(v9);
    int v9 = 0;
  }
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v9) {
      goto LABEL_10;
    }
    return 35;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v9) {
    return 35;
  }
LABEL_10:
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v10;
  v41[8] = v10;
  v41[5] = v10;
  v41[6] = v10;
  v41[3] = v10;
  v41[4] = v10;
  v41[1] = v10;
  v41[2] = v10;
  v41[0] = v10;
  long long v39 = v10;
  long long v40 = v10;
  long long v37 = v10;
  *(_OWORD *)std::string __p = v10;
  long long v35 = v10;
  long long v36 = v10;
  long long v34 = v10;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v34);
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, v12, v13);
  std::string::size_type v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/", 1);
  int v16 = *(char *)(a2 + 23);
  if (v16 >= 0) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = *(void *)a2;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
  if ((BYTE8(v40) & 0x10) != 0)
  {
    uint64_t v21 = v40;
    if ((unint64_t)v40 < *((void *)&v37 + 1))
    {
      *(void *)&long long v40 = *((void *)&v37 + 1);
      uint64_t v21 = *((void *)&v37 + 1);
    }
    size_t v22 = (const void *)v37;
    size_t v19 = v21 - v37;
    if ((unint64_t)(v21 - v37) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_44;
    }
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      size_t v19 = 0;
      HIBYTE(v33) = 0;
      long long v20 = __dst;
      goto LABEL_37;
    }
    size_t v22 = (const void *)*((void *)&v35 + 1);
    size_t v19 = *((void *)&v36 + 1) - *((void *)&v35 + 1);
    if (*((void *)&v36 + 1) - *((void *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_44:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    uint64_t v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v24 = v19 | 7;
    }
    uint64_t v25 = v24 + 1;
    long long v20 = (void **)operator new(v24 + 1);
    __dst[1] = (void *)v19;
    unint64_t v33 = v25 | 0x8000000000000000;
    __dst[0] = v20;
  }
  else
  {
    HIBYTE(v33) = v19;
    long long v20 = __dst;
    if (!v19) {
      goto LABEL_37;
    }
  }
  memmove(v20, v22, v19);
LABEL_37:
  *((unsigned char *)v20 + v19) = 0;
  uint64_t v23 = (*(uint64_t (**)(void *, void **, void))(*v9 + 48))(v9, __dst, 0);
  if (SHIBYTE(v33) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v34 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v34 + *(void *)(v34 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v34 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C1DDF0](v41);
  return v23;
}

void sub_21DF3E428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_21DF3E488(_Unwind_Exception *a1)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::saveImages(BBUEURUpdateSource *this)
{
  if (!*((void *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x195u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v29, v30, v31, v36);
  }
  memset(__src, 170, 24);
  capabilities::radio::personalizedFirmwarePath(__src, this);
  if (SHIBYTE(__src[2]) < 0)
  {
    if (__src[1])
    {
      uint64_t v2 = (const char *)__src[0];
      goto LABEL_7;
    }
LABEL_79:
    BOOL v32 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v32, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x198u, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v33, v34, v35, v36);
  }
  if (!HIBYTE(__src[2])) {
    goto LABEL_79;
  }
  uint64_t v2 = (const char *)__src;
LABEL_7:
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Saving image to %s", v2);
  unint64_t v3 = 0;
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blkstd::string::size_type size = v4;
  *(timespec *)v38.st_qspare = v4;
  v38.st_birthtimespec = v4;
  *(timespec *)&v38.st_std::string::size_type size = v4;
  v38.st_mtimespec = v4;
  v38.st_ctimespec = v4;
  *(timespec *)&v38.st_uid = v4;
  v38.st_atimespec = v4;
  *(timespec *)&v38.st_dev = v4;
  while (1)
  {
    if (__src[2] >= 0) {
      uint64_t v6 = (const char *)__src;
    }
    else {
      uint64_t v6 = (const char *)__src[0];
    }
    int v7 = stat(v6, &v38);
    if (v3 == -1 || !v7)
    {
      long long v20 = (const char *)__src;
      if (__src[2] < 0) {
        long long v20 = (const char *)__src[0];
      }
      BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Saving image to %s, success", v20);
      uint64_t v21 = 0;
      if (SHIBYTE(__src[2]) < 0) {
        goto LABEL_63;
      }
      return v21;
    }
    size_t v8 = HIBYTE(__src[2]);
    unint64_t v9 = __src[1];
    if (__src[2] >= 0) {
      unint64_t v10 = HIBYTE(__src[2]);
    }
    else {
      unint64_t v10 = __src[1];
    }
    if (v10 <= v3
      || ((v11 = (uint64_t *)__src[0], __src[2] >= 0) ? (uint64_t v12 = __src) : (uint64_t v12 = (uint64_t *)__src[0]),
          (uint64_t v13 = memchr((char *)v12 + v3, 47, v10 - v3), v5 = v13 - (unsigned char *)v12, v13) ? (v14 = v5 == -1) : (v14 = 1),
          v14))
    {
      if ((v8 & 0x80) != 0)
      {
        if (!v9)
        {
LABEL_8:
          size_t v5 = 0;
          goto LABEL_9;
        }
        memset(__dst, 170, sizeof(__dst));
        size_t v5 = v9;
        int v11 = (uint64_t *)__src[0];
        size_t v8 = v9;
        if (v9 >= 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_59;
        }
      }
      else
      {
        if (!v8) {
          goto LABEL_8;
        }
        size_t v5 = v8;
        memset(__dst, 170, sizeof(__dst));
        int v11 = __src;
      }
    }
    else
    {
      if (!v5) {
        goto LABEL_9;
      }
      memset(__dst, 170, sizeof(__dst));
      if ((v8 & 0x80) != 0)
      {
        if (v9 >= v5) {
          size_t v8 = v5;
        }
        else {
          size_t v8 = v9;
        }
        if (v8 >= 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_59;
        }
      }
      else
      {
        int v11 = __src;
        if (v8 >= v5) {
          size_t v8 = v5;
        }
        if (v8 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_59:
        }
          std::string::__throw_length_error[abi:ne180100]();
      }
    }
    if (v8 >= 0x17)
    {
      uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v16 = v8 | 7;
      }
      uint64_t v17 = v16 + 1;
      std::string::size_type v15 = (void **)operator new(v16 + 1);
      __dst[1] = (void *)v8;
      __dst[2] = (void *)(v17 | 0x8000000000000000);
      __dst[0] = v15;
LABEL_44:
      memmove(v15, v11, v8);
      goto LABEL_45;
    }
    HIBYTE(__dst[2]) = v8;
    std::string::size_type v15 = __dst;
    if (v8) {
      goto LABEL_44;
    }
LABEL_45:
    *((unsigned char *)v15 + v8) = 0;
    uint64_t v18 = SHIBYTE(__dst[2]) >= 0 ? (const char *)__dst : (const char *)__dst[0];
    if (stat(v18, &v38))
    {
      size_t v19 = SHIBYTE(__dst[2]) >= 0 ? (const char *)__dst : (const char *)__dst[0];
      if (mkdir(v19, 0x1EDu)) {
        break;
      }
    }
    if (SHIBYTE(__dst[2]) < 0)
    {
      operator delete(__dst[0]);
      unint64_t v3 = v5 + 1;
    }
    else
    {
LABEL_9:
      unint64_t v3 = v5 + 1;
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
    {
LABEL_67:
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        uint64_t v23 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
        CFTypeID v27 = __dst;
        if (SHIBYTE(__dst[2]) < 0) {
          LOBYTE(v27) = __dst[0];
        }
        _BBULog(3, 0, v23, "", "Failed to create path %s", v24, v25, v26, (char)v27);
      }
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0) {
      goto LABEL_67;
    }
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    uint64_t v21 = 35;
    if (SHIBYTE(__src[2]) < 0) {
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v21 = 35;
    if (SHIBYTE(__src[2]) < 0) {
LABEL_63:
    }
      operator delete((void *)__src[0]);
  }
  return v21;
}

void sub_21DF3E8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 - 97) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 - 97) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t BBUEURUpdateSource::cleanupFirmwareImage(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 64))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1C0u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v27, v28, v29, v34);
  }
  memset(v38, 170, sizeof(v38));
  capabilities::radio::personalizedFirmwarePath((uint64_t *)v38, (capabilities::radio *)a1);
  char v4 = HIBYTE(v38[2]);
  if ((SHIBYTE(v38[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v38[2]))
    {
      size_t v5 = v38[1];
      goto LABEL_6;
    }
LABEL_44:
    uint64_t v30 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v30, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1C5u, (ctu::LogMessageBuffer *)"Assertion failure(dirPath.empty() != true && \"Failed finding the bbfw path.\")", v31, v32, v33, v34);
  }
  size_t v5 = v38[1];
  if (!v38[1]) {
    goto LABEL_44;
  }
LABEL_6:
  if (SHIBYTE(v38[2]) >= 0) {
    size_t v6 = HIBYTE(v38[2]);
  }
  else {
    size_t v6 = (size_t)v5;
  }
  unint64_t v7 = v6 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 1;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6 + 1;
    if (!v6) {
      goto LABEL_20;
    }
  }
  if (v4 >= 0) {
    int v11 = v38;
  }
  else {
    int v11 = (void **)v38[0];
  }
  memmove(p_dst, v11, v6);
LABEL_20:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 47;
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v13 = *(const std::string::value_type **)a2;
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v14 = *(void *)(a2 + 8);
  }
  uint64_t v15 = std::string::append(&__dst, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v37 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v17 = (const char *)a2;
  }
  else {
    uint64_t v17 = *(const char **)a2;
  }
  uint64_t v18 = v38;
  if (SHIBYTE(v38[2]) < 0) {
    uint64_t v18 = (void **)v38[0];
  }
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Removing Firmware image [%s] in path [%s]\n", v17, (const char *)v18);
  char v19 = HIBYTE(v37);
  if (v37 >= 0) {
    long long v20 = __p;
  }
  else {
    long long v20 = (void **)__p[0];
  }
  if (unlink((const char *)v20))
  {
    uint64_t v21 = *(BBUFeedback **)(a1 + 8);
    int v22 = *__error();
    uint64_t v23 = __error();
    uint64_t v24 = strerror(*v23);
    BBUFeedback::handleComment(v21, "Unable to remove Firmware image [%s]. Error[%d][%s]\n", (const char *)v20, v22, v24);
    char v19 = HIBYTE(v37);
  }
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v38[2]) & 0x80000000) == 0) {
      return 0;
    }
LABEL_42:
    operator delete(v38[0]);
    return 0;
  }
  if (SHIBYTE(v38[2]) < 0) {
    goto LABEL_42;
  }
  return 0;
}

void sub_21DF3EC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEURUpdateSource::saveFirmwareImage(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 64))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1D7u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v28, v29, v30, v31);
  }
  memset(v43, 170, sizeof(v43));
  capabilities::radio::personalizedFirmwarePath(v43, (capabilities::radio *)a1);
  if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v43[2])) {
      goto LABEL_4;
    }
LABEL_21:
    long long v16 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v16, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1DEu, (ctu::LogMessageBuffer *)"Assertion failure(dirPath.empty() != true && \"Failed finding the bbfw path.\")", v17, v18, v19, v31);
  }
  if (!v43[1]) {
    goto LABEL_21;
  }
LABEL_4:
  uint64_t v4 = BBUEURUpdateSource::saveImages((BBUEURUpdateSource *)a1);
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v5;
  v41[8] = v5;
  v41[5] = v5;
  v41[6] = v5;
  v41[3] = v5;
  v41[4] = v5;
  v41[1] = v5;
  v41[2] = v5;
  v41[0] = v5;
  long long v39 = v5;
  long long v40 = v5;
  long long v37 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v35 = v5;
  long long v36 = v5;
  long long v34 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v34);
  if (v43[2] >= 0) {
    size_t v6 = v43;
  }
  else {
    size_t v6 = (uint64_t *)v43[0];
  }
  if (v43[2] >= 0) {
    uint64_t v7 = HIBYTE(v43[2]);
  }
  else {
    uint64_t v7 = v43[1];
  }
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/", 1);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  if (v4) {
    goto LABEL_40;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if ((BYTE8(v40) & 0x10) != 0)
  {
    uint64_t v20 = v40;
    if ((unint64_t)v40 < *((void *)&v37 + 1))
    {
      *(void *)&long long v40 = *((void *)&v37 + 1);
      uint64_t v20 = *((void *)&v37 + 1);
    }
    uint64_t v21 = (const void *)v37;
    size_t v14 = v20 - v37;
    if ((unint64_t)(v20 - v37) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_46;
    }
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      size_t v14 = 0;
      HIBYTE(v33) = 0;
      uint64_t v15 = __dst;
      goto LABEL_32;
    }
    uint64_t v21 = (const void *)*((void *)&v35 + 1);
    size_t v14 = *((void *)&v36 + 1) - *((void *)&v35 + 1);
    if (*((void *)&v36 + 1) - *((void *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_46:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v14 >= 0x17)
  {
    uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v22 = v14 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v15 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v14;
    unint64_t v33 = v23 | 0x8000000000000000;
    __dst[0] = v15;
  }
  else
  {
    HIBYTE(v33) = v14;
    uint64_t v15 = __dst;
    if (!v14) {
      goto LABEL_32;
    }
  }
  memmove(v15, v21, v14);
LABEL_32:
  *((unsigned char *)v15 + v14) = 0;
  uint64_t v4 = BBUZipFile::saveDataToFile(v13, (uint64_t)__dst);
  if (SHIBYTE(v33) < 0) {
    operator delete(__dst[0]);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v24 = (const char *)a2;
  }
  else {
    uint64_t v24 = *(const char **)a2;
  }
  uint64_t v25 = (const char *)v43;
  if (v43[2] < 0) {
    uint64_t v25 = (const char *)v43[0];
  }
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Saving Firmware image [%s] in path [%s]\n", v24, v25);
LABEL_40:
  *(void *)&long long v34 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v34 + *(void *)(v34 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v34 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C1DDF0](v41);
  if (SHIBYTE(v43[2]) < 0) {
    operator delete((void *)v43[0]);
  }
  return v4;
}

void sub_21DF3F064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  if (*(char *)(v18 - 65) < 0) {
    operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(a1);
}

void BBUEURUpdateSource::loadProvisioningData(BBUEURUpdateSource *this)
{
  memset(v47, 170, 24);
  *((unsigned char *)&v46.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v46, "provisioning/");
  uint64_t v2 = std::string::append(&v46, "info.plist", 0xAuLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  *(void *)&v47[1] = *((void *)&v2->__r_.__value_.__l + 2);
  v47[0] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  memset(&v46, 170, sizeof(v46));
  *((unsigned char *)&v45.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v45, "provisioning/");
  uint64_t v4 = std::string::append(&v45, "puk.pem", 7uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v44.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v44, "provisioning/");
  size_t v6 = std::string::append(&v44, "manifest.bin", 0xCuLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *((void *)this + 8);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1F8u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v31, v32, v33, v43);
    goto LABEL_66;
  }
  *((unsigned char *)&v44.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v44, "provisioning/");
  if (BBUZipFile::containsFile(v8, &v44)) {
    *((unsigned char *)this + 120) = 1;
  }
  if (BBUZipFile::containsFile(*((void *)this + 8), v47))
  {
    if (*((void *)this + 16))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x203u, (ctu::LogMessageBuffer *)"Provisioning Dictionary Source is not NULL", v34, v35, v36, v43);
      goto LABEL_66;
    }
    uint64_t v10 = *((void *)this + 8);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 9);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = operator new(0x38uLL);
    void *v11 = &unk_26CECBB38;
    v11[1] = v10;
    v11[4] = 0;
    v11[5] = 0;
    v11[3] = 0;
    if (BBUZipDataSource::init((uint64_t)v11, v47, 0))
    {
      (*(void (**)(void *))(*v11 + 8))(v11);
      uint64_t v11 = 0;
    }
    *((void *)this + 16) = v11;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_23;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      uint64_t v12 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
      _BBULog(3, 0, v12, "", "Loaded provisioning dictionary\n", v13, v14, v15, v43);
    }
  }
LABEL_23:
  if (!BBUZipFile::containsFile(*((void *)this + 8), &v46)) {
    goto LABEL_36;
  }
  if (*((void *)this + 17))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x20Du, (ctu::LogMessageBuffer *)"Provisioning Public Key Source is not NULL", v37, v38, v39, v43);
    goto LABEL_66;
  }
  uint64_t v17 = *((void *)this + 8);
  long long v16 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = operator new(0x38uLL);
  *uint64_t v18 = &unk_26CECBB38;
  v18[1] = v17;
  v18[4] = 0;
  v18[5] = 0;
  v18[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v18, &v46, 0))
  {
    (*(void (**)(void *))(*v18 + 8))(v18);
    uint64_t v18 = 0;
  }
  *((void *)this + 17) = v18;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_36;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_36;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v19 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v19, "", "Loaded public key source\n", v20, v21, v22, v43);
  }
LABEL_36:
  if (!BBUZipFile::containsFile(*((void *)this + 8), &v45)) {
    goto LABEL_49;
  }
  if (*((void *)this + 18))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x216u, (ctu::LogMessageBuffer *)"Provisioning Manifest Source is not NULL", v40, v41, v42, v43);
LABEL_66:
  }
  uint64_t v24 = *((void *)this + 8);
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = operator new(0x38uLL);
  *uint64_t v25 = &unk_26CECBB38;
  v25[1] = v24;
  v25[4] = 0;
  v25[5] = 0;
  v25[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v25, &v45, 0))
  {
    (*(void (**)(void *))(*v25 + 8))(v25);
    uint64_t v25 = 0;
  }
  *((void *)this + 18) = v25;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_49;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v26 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v26, "", "Loaded provisioning manifest\n", v27, v28, v29, v43);
  }
LABEL_49:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_51:
      if ((SBYTE7(v47[1]) & 0x80000000) == 0) {
        return;
      }
LABEL_55:
      operator delete(*(void **)&v47[0]);
      return;
    }
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  if (SBYTE7(v47[1]) < 0) {
    goto LABEL_55;
  }
}

void sub_21DF3F800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_free_exception(v27);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 73) < 0) {
    operator delete(*(void **)(v28 - 96));
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::copyProvisioningData(uint64_t a1, int a2, BBUMatureProvisioningData **a3)
{
  if (a2 != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x22Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized provisoning support type.\")", v9, v10, v11, v12);
  }
  long long v5 = *(BBUDataSource **)(a1 + 136);
  if (!v5 && !*(void *)(a1 + 144)) {
    return 0;
  }
  size_t v6 = (BBUMatureProvisioningData *)operator new(0x18uLL);
  BBUMatureProvisioningData::BBUMatureProvisioningData(v6, v5, *(BBUDataSource **)(a1 + 144));
  *a3 = v6;
  return 1;
}

void sub_21DF3F988(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF3F99C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getFusingSource(BBUEURUpdateSource *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 26);
    if ((v3 & 4) != 0) {
      return *((void *)this + 14);
    }
    *((_DWORD *)this + 26) = v3 | 4;
    char v27 = 19;
    char v25 = aFusingprogramP[0];
    strcpy(__p, "fusingprogram.plist");
    if (!BBUZipFile::containsFile(v2, __p)) {
      return *((void *)this + 14);
    }
    if (*((void *)this + 14))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x240u, (ctu::LogMessageBuffer *)"Fusing Source had read once", v21, v22, v23, aFusingprogramP[0]);
    }
    uint64_t v5 = *((void *)this + 8);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v27 = 19;
    strcpy(__p, "fusingprogram.plist");
    size_t v6 = operator new(0x38uLL);
    *size_t v6 = &unk_26CECBB38;
    v6[1] = v5;
    v6[4] = 0;
    v6[5] = 0;
    v6[3] = 0;
    if (BBUZipDataSource::init((uint64_t)v6, __p, 0))
    {
      (*(void (**)(void *))(*v6 + 8))(v6);
      size_t v6 = 0;
    }
    *((void *)this + 14) = v6;
    if (v27 < 0) {
      operator delete(*(void **)__p);
    }
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_18;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      long long v7 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
      _BBULog(3, 0, v7, "", "Loaded Fusing program \n", v8, v9, v10, aFusingprogramP[0]);
    }
LABEL_18:
    if (!*((void *)this + 14))
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0) {
          goto LABEL_21;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
        {
LABEL_21:
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            uint64_t v11 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
            _BBULog(3, 0, v11, "", "loading failed\n", v12, v13, v14, v25);
          }
        }
      }
    }
    return *((void *)this + 14);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 0;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 0;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    long long v16 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v16, "", "Fusing Source cannot be non-zipped source.\n", v17, v18, v19, v24);
    return 0;
  }
  return result;
}

void sub_21DF3FD7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF3FD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getManifestSource(BBUEURUpdateSource *this)
{
  int v2 = *((_DWORD *)this + 26);
  if (v2) {
    goto LABEL_82;
  }
  *((_DWORD *)this + 26) = v2 | 1;
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(void *)this + 56))(__p, this);
    int v4 = BBUZipFile::containsFile(v3, __p);
    int v5 = v4;
    if (SHIBYTE(v57) < 0)
    {
      operator delete(__p[0]);
      if (!v5) {
        goto LABEL_82;
      }
    }
    else if (!v4)
    {
      goto LABEL_82;
    }
    if (!*((void *)this + 19))
    {
      uint64_t v8 = *((void *)this + 8);
      long long v7 = (std::__shared_weak_count *)*((void *)this + 9);
      uint64_t v54 = v8;
      uint64_t v55 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(void *)this + 56))(__p, this);
      uint64_t v9 = operator new(0x38uLL);
      *uint64_t v9 = &unk_26CECBB38;
      v9[1] = v8;
      v9[4] = 0;
      v9[5] = 0;
      v9[3] = 0;
      if (BBUZipDataSource::init((uint64_t)v9, __p, 0))
      {
        (*(void (**)(void *))(*v9 + 8))(v9);
        uint64_t v9 = 0;
      }
      *((void *)this + 19) = v9;
      if (SHIBYTE(v57) < 0) {
        operator delete(__p[0]);
      }
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
          goto LABEL_82;
        }
        goto LABEL_80;
      }
LABEL_91:
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_82;
      }
      goto LABEL_80;
    }
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 26, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x255u, (ctu::LogMessageBuffer *)"Root Manifest Source is not NULL", v44, v45, v46, (char)v50);
LABEL_98:
  }
  char v6 = *((unsigned char *)this + 103);
  if (v6 < 0)
  {
    if (!*((void *)this + 11)) {
      goto LABEL_82;
    }
  }
  else if (!*((unsigned char *)this + 103))
  {
    goto LABEL_82;
  }
  if (v6 >= 0) {
    size_t v10 = *((unsigned __int8 *)this + 103);
  }
  else {
    size_t v10 = *((void *)this + 11);
  }
  unint64_t v11 = v10 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v10 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_95:
  }
    std::string::__throw_length_error[abi:ne180100]();
  uint64_t v12 = (char **)((char *)this + 80);
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v10 + 1;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
    if (!v10) {
      goto LABEL_38;
    }
  }
  if (v6 >= 0) {
    long long v16 = (char *)this + 80;
  }
  else {
    long long v16 = *v12;
  }
  memmove(p_dst, v16, v10);
LABEL_38:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v10) = 47;
  (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(void *)this + 56))(&v50, this);
  if ((v52 & 0x80u) == 0) {
    uint64_t v17 = (const std::string::value_type *)&v50;
  }
  else {
    uint64_t v17 = (const std::string::value_type *)v50;
  }
  if ((v52 & 0x80u) == 0) {
    std::string::size_type v18 = v52;
  }
  else {
    std::string::size_type v18 = v51;
  }
  uint64_t v19 = std::string::append(&__dst, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type v57 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = ctu::fs::file_exists();
  if (SHIBYTE(v57) < 0)
  {
    operator delete(__p[0]);
    if (((char)v52 & 0x80000000) == 0)
    {
LABEL_46:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_47;
      }
LABEL_51:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v21) {
        goto LABEL_82;
      }
      goto LABEL_52;
    }
  }
  else if (((char)v52 & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v50);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_47:
  if (!v21) {
    goto LABEL_82;
  }
LABEL_52:
  if (*((void *)this + 19))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 26, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x25Eu, (ctu::LogMessageBuffer *)"Root Manifest Source is not NULL", v47, v48, v49, (char)v50);
    goto LABEL_98;
  }
  int v22 = *((char *)this + 103);
  if (v22 >= 0) {
    size_t v23 = *((unsigned __int8 *)this + 103);
  }
  else {
    size_t v23 = *((void *)this + 11);
  }
  unint64_t v24 = v23 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v23 + 1 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_95;
  }
  if (v24 >= 0x17)
  {
    uint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v26 = v24 | 7;
    }
    uint64_t v27 = v26 + 1;
    char v25 = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v23 + 1;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    char v25 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23 + 1;
    if (!v23) {
      goto LABEL_67;
    }
  }
  if (v22 >= 0) {
    uint64_t v28 = (char *)this + 80;
  }
  else {
    uint64_t v28 = *v12;
  }
  memmove(v25, v28, v23);
LABEL_67:
  *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v23) = 47;
  (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(void *)this + 56))(&v50, this);
  if ((v52 & 0x80u) == 0) {
    uint64_t v29 = (const std::string::value_type *)&v50;
  }
  else {
    uint64_t v29 = (const std::string::value_type *)v50;
  }
  if ((v52 & 0x80u) == 0) {
    std::string::size_type v30 = v52;
  }
  else {
    std::string::size_type v30 = v51;
  }
  uint64_t v31 = std::string::append(&__dst, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  std::string::size_type v57 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  uint64_t v33 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v33 = &unk_26CECA448;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v33, (const char *)__p, 0))
  {
    (*(void (**)(char *))(*(void *)v33 + 8))(v33);
    uint64_t v33 = 0;
  }
  *((void *)this + 19) = v33;
  if (SHIBYTE(v57) < 0)
  {
    operator delete(__p[0]);
    if (((char)v52 & 0x80000000) == 0)
    {
LABEL_77:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_90;
    }
  }
  else if (((char)v52 & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(v50);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_78:
    if (gBBULogMaskGet(void)::once != -1) {
      goto LABEL_91;
    }
    goto LABEL_79;
  }
LABEL_90:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (gBBULogMaskGet(void)::once != -1) {
    goto LABEL_91;
  }
LABEL_79:
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
    goto LABEL_82;
  }
LABEL_80:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v34 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v34, "", "Loaded Manifest\n", v35, v36, v37, (char)v50);
  }
LABEL_82:
  if (!*((void *)this + 19))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        return *((void *)this + 19);
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        return *((void *)this + 19);
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      uint64_t v38 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
      _BBULog(3, 0, v38, "", "loading failed\n", v39, v40, v41, (char)v50);
    }
  }
  return *((void *)this + 19);
}

void sub_21DF404D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF404E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::hasManifestSource(BBUEURUpdateSource *this)
{
  if (*((unsigned char *)this + 104)) {
    return *((void *)this + 19) != 0;
  }
  (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(void *)this + 56))(__p, this);
  uint64_t result = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  uint64_t v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_21DF40688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BBUEURUpdateSource::getManifestFilename(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "bbticket.der");
}

uint64_t BBUEURUpdateSource::generateHash(BBUEURUpdateSource *this, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x283u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v8, v9, v10, v11);
  }
  int v4 = *(const void **)(v2 + 144);
  char v5 = operator new(0x18uLL);
  v5[4] = 0;
  *(void *)char v5 = &unk_26CECE780;
  *((void *)v5 + 1) = v4;
  if (v4) {
    CFRetain(v4);
  }
  BBUDataSource::generateHash((uint64_t)v5, a2, 0);
  (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
  return 1;
}

void sub_21DF407C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::validateCoredumpItems(BBUEURUpdateSource *this)
{
  return 0;
}

uint64_t eUICC::Options::Options(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  *(_DWORD *)a1 = 255;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v3 = (void **)(a1 + 16);
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  v55[0] = 0xAAAAAAAAAAAAAAAALL;
  v55[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v55, *a2);
  *(unsigned char *)(a1 + 11) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, @"VinylForceGold");
  *(unsigned char *)(a1 + 10) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, @"VinylForceMain");
  ctu::cf::map_adapter::getString();
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v56;
  v3[2] = v56[2];
  int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, @"restoredInternal");
  *(unsigned char *)(a1 + 42) = Bool;
  if (Bool)
  {
    *(unsigned char *)(a1 + 8) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, @"VinylSkipAll");
    *(unsigned char *)(a1 + 9) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, @"VinylOnlyPerso");
    if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, @"VinylUse4FF")) {
      *(_DWORD *)a1 = 1;
    }
    memset(v56, 170, sizeof(v56));
    memset(__p, 0, sizeof(__p));
    ctu::cf::map_adapter::getString();
    int v6 = SHIBYTE(v56[2]);
    long long v7 = v56;
    uint64_t v8 = v56[0];
    if (SHIBYTE(v56[2]) < 0) {
      long long v7 = (void **)v56[0];
    }
    uint64_t v9 = (char *)HIBYTE(v56[2]);
    if (SHIBYTE(v56[2]) < 0) {
      uint64_t v9 = (char *)v56[1];
    }
    if (v9)
    {
      uint64_t v10 = (void **)&v9[(void)v7];
      char v11 = v9 - 1;
      uint64_t v12 = v11;
      uint64_t v13 = v7;
      do
      {
        uint64_t v14 = 0;
        while (v14[(void)v13] == aEuiccforcepers[(void)v14])
        {
          uint64_t v15 = v14 + 1;
          if (v12 != v14)
          {
            BOOL v16 = v14++ == (char *)15;
            if (!v16) {
              continue;
            }
          }
          uint64_t v17 = (void **)&v15[(void)v13];
          if (&aEuiccforcepers[(void)v15] == "") {
            goto LABEL_22;
          }
          goto LABEL_20;
        }
        std::string::size_type v18 = &aEuiccforcepers[(void)v14];
        uint64_t v17 = (void **)&v14[(void)v13];
        if (v18 == "") {
          goto LABEL_22;
        }
LABEL_20:
        uint64_t v13 = (void **)((char *)v13 + 1);
        --v12;
      }
      while (v13 != v10);
      uint64_t v13 = v10;
      uint64_t v17 = v10;
LABEL_22:
      *(unsigned char *)(a1 + 40) = v13 != v17;
      uint64_t v19 = v11;
      long long v20 = v7;
      do
      {
        uint64_t v21 = 0;
        while (1)
        {
          CFStringRef v5 = (const __CFString *)aEuiccpersostat[v21];
          if (*((unsigned __int8 *)v20 + v21) != v5) {
            break;
          }
          CFStringRef v5 = (const __CFString *)(v21 + 1);
          if (v19 != (char *)v21)
          {
            BOOL v16 = v21++ == 16;
            if (!v16) {
              continue;
            }
          }
          int v22 = (void **)((char *)&v5->isa + (void)v20);
          if (&aEuiccpersostat[(void)v5] == "") {
            goto LABEL_33;
          }
          goto LABEL_31;
        }
        size_t v23 = &aEuiccpersostat[v21];
        int v22 = (void **)((char *)v20 + v21);
        if (v23 == "") {
          goto LABEL_33;
        }
LABEL_31:
        long long v20 = (void **)((char *)v20 + 1);
        --v19;
      }
      while (v20 != v10);
      long long v20 = v10;
      int v22 = v10;
LABEL_33:
      *(unsigned char *)(a1 + 41) = v20 != v22;
      while (2)
      {
        unint64_t v24 = 0;
        do
        {
          if (v24[(void)v7] != aEuiccforcecust[(void)v24])
          {
            uint64_t v27 = &aEuiccforcecust[(void)v24];
            uint64_t v26 = (void **)&v24[(void)v7];
            if (v27 == "") {
              goto LABEL_45;
            }
            goto LABEL_42;
          }
          char v25 = v24 + 1;
          if (v11 == v24) {
            break;
          }
          BOOL v16 = v24++ == (char *)18;
        }
        while (!v16);
        uint64_t v26 = (void **)&v25[(void)v7];
        if (&aEuiccforcecust[(void)v25] == "")
        {
LABEL_45:
          if (v7 != v26) {
            *(unsigned char *)(a1 + 42) = 0;
          }
          break;
        }
LABEL_42:
        long long v7 = (void **)((char *)v7 + 1);
        --v11;
        if (v7 != v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    if (v6 < 0) {
      operator delete(v8);
    }
  }
  if (BBUpdaterCommon::isNVRAMKeyPresent((BBUpdaterCommon *)@"BBUForceVinylUpdate", v5)) {
    *(_WORD *)(a1 + 10) = 257;
  }
  memset(__p, 170, sizeof(__p));
  memset(v56, 0, sizeof(v56));
  ctu::cf::map_adapter::getString();
  if (SHIBYTE(v56[2]) < 0)
  {
    operator delete(v56[0]);
    uint64_t v31 = (void *)HIBYTE(__p[2]);
    char v29 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v31 = __p[1];
    }
    if (!v31)
    {
LABEL_55:
      if ((v29 & 0x80) == 0) {
        goto LABEL_56;
      }
LABEL_86:
      operator delete(__p[0]);
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v28 = (void *)HIBYTE(__p[2]);
    char v29 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v28 = __p[1];
    }
    if (!v28) {
      goto LABEL_55;
    }
  }
  HIBYTE(v56[2]) = 9;
  strcpy((char *)v56, "Bootstrap");
  char v59 = 3;
  int v57 = 1;
  v58[0] = 7105601;
  int v60 = 2;
  v61[23] = 21;
  strcpy(v61, "Bootstrap Preferences");
  int v62 = 3;
  v63[23] = 15;
  strcpy(v63, "All Preferences");
  int v64 = 4;
  v53[0] = 0;
  v53[1] = 0;
  unsigned __int8 v52 = v53;
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v56, (uint64_t)v56);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v58, (uint64_t)v58);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v61, (uint64_t)v61);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v63, (uint64_t)v63);
  long long v32 = (char *)v53[0];
  if (!v53[0]) {
    goto LABEL_87;
  }
  uint64_t v33 = SHIBYTE(__p[2]) >= 0 ? (const char *)__p : (const char *)__p[0];
  uint64_t v34 = v53;
  uint64_t v35 = v53[0];
  do
  {
    uint64_t v36 = (uint64_t *)v35;
    uint64_t v37 = v34;
    uint64_t v38 = (void *)(v35 + 32);
    if (*(char *)(v35 + 55) >= 0) {
      uint64_t v39 = (const char *)(v35 + 32);
    }
    else {
      uint64_t v39 = *(const char **)(v35 + 32);
    }
    int v40 = strcasecmp(v39, v33);
    if (v40 >= 0) {
      uint64_t v41 = v36;
    }
    else {
      uint64_t v41 = v36 + 1;
    }
    if (v40 >= 0) {
      uint64_t v34 = v36;
    }
    else {
      uint64_t v34 = v37;
    }
    uint64_t v35 = *v41;
  }
  while (v35);
  if (v34 == v53) {
    goto LABEL_87;
  }
  int v42 = v40;
  char v43 = v37 + 4;
  if (v40 >= 0) {
    char v43 = v38;
  }
  uint64_t v44 = *((char *)v34 + 55) >= 0 ? (const char *)v43 : (const char *)*v43;
  if (strcasecmp(v33, v44) < 0)
  {
LABEL_87:
    exception = __cxa_allocate_exception(0x210uLL);
    unint64_t v50 = exception;
    std::string::size_type v51 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      LOBYTE(v51) = __p[0];
    }
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/eUICC/Public/eUICCOptions.cpp", 0x48u, (ctu::LogMessageBuffer *)"Invalid Refurb Option %s", v47, v48, v49, (char)v51);
  }
  if (v42 >= 0) {
    uint64_t v45 = v36;
  }
  else {
    uint64_t v45 = v37;
  }
  *(_DWORD *)(a1 + 4) = *((_DWORD *)v45 + 14);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(v32);
  if ((HIBYTE(__p[2]) & 0x80) != 0) {
    goto LABEL_86;
  }
LABEL_56:
  MEMORY[0x223C1D170](v55);
  return a1;
}

void sub_21DF40E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  MEMORY[0x223C1D170](&a19);
  if (*(char *)(v26 + 39) < 0) {
    operator delete(*v27);
  }
  _Unwind_Resume(a1);
}

uint64_t eUICC::Options::ToString@<X0>(eUICC::Options *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51[7] = v4;
  v51[8] = v4;
  v51[5] = v4;
  v51[6] = v4;
  v51[3] = v4;
  v51[4] = v4;
  v51[1] = v4;
  v51[2] = v4;
  long long v50 = v4;
  v51[0] = v4;
  *(_OWORD *)uint64_t v48 = v4;
  long long v49 = v4;
  long long v46 = v4;
  long long v47 = v4;
  long long v44 = v4;
  long long v45 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
  uint64_t v5 = v44;
  *(_DWORD *)((char *)&v44 + *(void *)(v44 - 24) + 8) |= 1u;
  *(_DWORD *)((char *)&v44 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)&v44 + *(void *)(v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"=========== eUICC Options ============\n", 39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"uimSlot       ", 14);
  long long v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"skipAll       ", 14);
  uint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"onlyPerso     ", 14);
  char v11 = (void *)std::ostream::operator<<();
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"forceMain     ", 14);
  uint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"forceGold     ", 14);
  uint64_t v15 = (void *)std::ostream::operator<<();
  BOOL v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"forcePerso    ", 14);
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"alderHost     ", 14);
  int v20 = *((char *)this + 39);
  if (v20 >= 0) {
    uint64_t v21 = (char *)this + 16;
  }
  else {
    uint64_t v21 = (char *)*((void *)this + 2);
  }
  if (v20 >= 0) {
    uint64_t v22 = *((unsigned __int8 *)this + 39);
  }
  else {
    uint64_t v22 = *((void *)this + 3);
  }
  size_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
  unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"persoStatic   ", 14);
  char v25 = (void *)std::ostream::operator<<();
  uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"internalBuild ", 14);
  uint64_t v27 = (void *)std::ostream::operator<<();
  uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"postProcess   ", 14);
  switch(*((_DWORD *)this + 1))
  {
    case 1:
      std::string::size_type v30 = (char *)operator new(0x28uLL);
      __p[0] = v30;
      *(_OWORD *)&__p[1] = xmmword_21DFAD1B0;
      qmemcpy(v30, "Delete All Non-Bootstrap Profiles", 33);
      uint64_t v31 = v30 + 33;
      uint64_t v32 = 33;
      break;
    case 2:
      uint64_t v32 = 19;
      HIBYTE(__p[2]) = 19;
      qmemcpy(__p, "Delete All Profiles", 19);
      goto LABEL_13;
    case 3:
      std::string::size_type v30 = (char *)operator new(0x28uLL);
      __p[0] = v30;
      *(_OWORD *)&__p[1] = xmmword_21DFAAF20;
      qmemcpy(v30, "Clear Bootstrap eSIM Preferences", 32);
      uint64_t v31 = v30 + 32;
      uint64_t v32 = 32;
      break;
    case 4:
      std::string::size_type v30 = (char *)operator new(0x20uLL);
      __p[0] = v30;
      *(_OWORD *)&__p[1] = xmmword_21DFAD1A0;
      qmemcpy(v30, "Clear All eSIM Preferences", 26);
      uint64_t v31 = v30 + 26;
      uint64_t v32 = 26;
      break;
    default:
      uint64_t v32 = 9;
      HIBYTE(__p[2]) = 9;
      qmemcpy(__p, "No Action", 9);
LABEL_13:
      std::string::size_type v30 = (char *)__p;
      uint64_t v31 = (char *)__p + v32;
      break;
  }
  *uint64_t v31 = 0;
  uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v32);
  uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"======================================\n", 39);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    char v35 = BYTE8(v50);
    if ((BYTE8(v50) & 0x10) == 0) {
      goto LABEL_16;
    }
LABEL_19:
    uint64_t v37 = v50;
    if ((unint64_t)v50 < *((void *)&v47 + 1))
    {
      *(void *)&long long v50 = *((void *)&v47 + 1);
      uint64_t v37 = *((void *)&v47 + 1);
    }
    uint64_t v38 = (const void *)v47;
    size_t v36 = v37 - v47;
    if ((unint64_t)(v37 - v47) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_33;
    }
    goto LABEL_22;
  }
  operator delete(__p[0]);
  char v35 = BYTE8(v50);
  if ((BYTE8(v50) & 0x10) != 0) {
    goto LABEL_19;
  }
LABEL_16:
  if ((v35 & 8) == 0)
  {
    size_t v36 = 0;
    a2[23] = 0;
    goto LABEL_29;
  }
  uint64_t v38 = (const void *)*((void *)&v45 + 1);
  size_t v36 = *((void *)&v46 + 1) - *((void *)&v45 + 1);
  if (*((void *)&v46 + 1) - *((void *)&v45 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_33:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_22:
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v41 = operator new(v39 + 1);
    *((void *)a2 + 1) = v36;
    *((void *)a2 + 2) = v40 | 0x8000000000000000;
    *(void *)a2 = v41;
    a2 = v41;
    goto LABEL_28;
  }
  a2[23] = v36;
  if (v36) {
LABEL_28:
  }
    memmove(a2, v38, v36);
LABEL_29:
  a2[v36] = 0;
  *(void *)&long long v44 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v44 + *(void *)(v44 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v44 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C1DDF0](v51);
}

void sub_21DF41458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21DF4146C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = (void *)a2;
  long long v7 = result;
  uint64_t v8 = result + 1;
  if (result + 1 == (uint64_t *)a2
    || (*(char *)(a3 + 23) >= 0 ? (uint64_t v9 = (const char *)a3) : (uint64_t v9 = *(const char **)a3),
        *(char *)(a2 + 55) >= 0 ? (uint64_t v10 = (const char *)(a2 + 32)) : (uint64_t v10 = *(const char **)(a2 + 32)),
        uint64_t result = (uint64_t *)strcasecmp(v9, v10),
        (result & 0x80000000) != 0))
  {
    uint64_t v11 = *v6;
    if ((void *)*v7 == v6)
    {
      uint64_t v13 = v6;
LABEL_28:
      if (v11) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = v6;
      }
      if (v11) {
        uint64_t v15 = v13 + 1;
      }
      else {
        uint64_t v15 = v6;
      }
      if (*v15) {
        return result;
      }
      int v6 = v21;
LABEL_55:
      uint64_t v33 = (char *)operator new(0x40uLL);
      uint64_t v34 = (std::string *)(v33 + 32);
      if (*(char *)(a4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
        *((void *)v33 + 6) = *(void *)(a4 + 16);
      }
      *((_DWORD *)v33 + 14) = *(_DWORD *)(a4 + 24);
      *(void *)uint64_t v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v6;
      *uint64_t v15 = v33;
      uint64_t v39 = *(void *)*v7;
      if (v39)
      {
        *long long v7 = v39;
        uint64_t v33 = (char *)*v15;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], (uint64_t *)v33);
      ++v7[2];
      return result;
    }
    if (v11)
    {
      uint64_t v12 = (void *)*v6;
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (void *)v12[1];
      }
      while (v12);
    }
    else
    {
      uint64_t v17 = v6;
      do
      {
        uint64_t v13 = (void *)v17[2];
        BOOL v18 = *v13 == (void)v17;
        uint64_t v17 = v13;
      }
      while (v18);
    }
    if (*((char *)v13 + 55) >= 0) {
      uint64_t v19 = (const char *)(v13 + 4);
    }
    else {
      uint64_t v19 = (const char *)v13[4];
    }
    if (*(char *)(a3 + 23) >= 0) {
      int v20 = (const char *)a3;
    }
    else {
      int v20 = *(const char **)a3;
    }
    uint64_t result = (uint64_t *)strcasecmp(v19, v20);
    if ((result & 0x80000000) != 0) {
      goto LABEL_28;
    }
    uint64_t v22 = (void *)*v8;
    uint64_t v15 = v8;
    int v6 = v8;
    if (!*v8) {
      goto LABEL_55;
    }
    while (1)
    {
      while (1)
      {
        int v6 = v22;
        char v25 = (void *)v22[4];
        size_t v23 = v22 + 4;
        unint64_t v24 = v25;
        uint64_t v26 = (const char *)(*((char *)v23 + 23) >= 0 ? v23 : v24);
        if ((strcasecmp(v20, v26) & 0x80000000) == 0) {
          break;
        }
        uint64_t v22 = (void *)*v6;
        uint64_t v15 = v6;
        if (!*v6) {
          goto LABEL_55;
        }
      }
      uint64_t result = (uint64_t *)strcasecmp(v26, v20);
      if ((result & 0x80000000) == 0) {
        break;
      }
      uint64_t v22 = (void *)v6[1];
      if (!v22) {
        goto LABEL_45;
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t *)strcasecmp(v10, v9);
    if ((result & 0x80000000) == 0) {
      return result;
    }
    uint64_t v15 = v6 + 1;
    uint64_t v14 = (void *)v6[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
        int v6 = v15;
        BOOL v16 = v15;
      }
      while (v14);
    }
    else
    {
      BOOL v16 = v6;
      do
      {
        uint64_t v27 = v16;
        BOOL v16 = (void *)v16[2];
      }
      while ((void *)*v16 != v27);
    }
    if (v16 == v8) {
      goto LABEL_55;
    }
    std::string::size_type v30 = (void *)v16[4];
    uint64_t v28 = v16 + 4;
    char v29 = v30;
    uint64_t v31 = (const char *)(*((char *)v28 + 23) >= 0 ? v28 : v29);
    if (strcasecmp(v9, v31) < 0) {
      goto LABEL_55;
    }
    uint64_t v32 = (void *)*v8;
    uint64_t v15 = v8;
    int v6 = v8;
    if (!*v8) {
      goto LABEL_55;
    }
    while (1)
    {
      while (1)
      {
        int v6 = v32;
        uint64_t v37 = (void *)v32[4];
        char v35 = v32 + 4;
        size_t v36 = v37;
        uint64_t v38 = (const char *)(*((char *)v35 + 23) >= 0 ? v35 : v36);
        if ((strcasecmp(v9, v38) & 0x80000000) == 0) {
          break;
        }
        uint64_t v32 = (void *)*v6;
        uint64_t v15 = v6;
        if (!*v6) {
          goto LABEL_55;
        }
      }
      uint64_t result = (uint64_t *)strcasecmp(v38, v9);
      if ((result & 0x80000000) == 0) {
        break;
      }
      uint64_t v32 = (void *)v6[1];
      if (!v32)
      {
LABEL_45:
        uint64_t v15 = v6 + 1;
        goto LABEL_55;
      }
    }
  }
  return result;
}

void sub_21DF4178C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

uint64_t BBUICE16PersonalizationParameters::getFusingState(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    *a2 = ctu::TelephonyUtilRadioFusingInferFusingStateFromCertID((ctu *)&v6, v4);
    return 0;
  }
  else
  {
    *a2 = 0;
    return 3;
  }
}

uint64_t BBUICE16PersonalizationParameters::setPublicKeyHash(uint64_t a1, CFDataRef a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 40) = a2;
  if (a2)
  {
    CFDataRef v5 = (const __CFData *)(*(uint64_t (**)(CFDataRef))(*(void *)a2 + 16))(a2);
    a2 = BBUICEPersonalizationParameters::ICECertID::createFromPublicKeyHashData(v5, v6);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 24) = a2;
  return result;
}

void BBUICE16PersonalizationParameters::~BBUICE16PersonalizationParameters(BBUICE16PersonalizationParameters *this)
{
  BBUPersonalizationParameters::~BBUPersonalizationParameters(this);

  operator delete(v1);
}

uint64_t BBUPersonalizationParameters::setSerialNumber(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 32) = a2;
  return result;
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::vector<std::ssub_match>::pointer begin = this->__position_.__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer end = this->__position_.__match_.__matches_.__end_;
  size_t v4 = (char *)end - (char *)begin;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
  if (end == begin)
  {
    CFDataRef v6 = 0;
  }
  else
  {
    if (v5 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    CFDataRef v6 = operator new(v4);
    memcpy(v6, begin, 24 * ((v4 - 24) / 0x18) + 24);
  }
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  long long v23 = *(_OWORD *)&this->__position_.__match_.__suffix_.matched;
  if (this->__result_ == &this->__suffix_) {
    goto LABEL_28;
  }
  std::vector<int>::pointer v7 = this->__subs_.__begin_;
  unint64_t v8 = this->__n_ + 1;
  if (v8 < this->__subs_.__end_ - v7)
  {
    this->__n_ = v8;
    unint64_t v9 = v7[v8];
    p_unmatched = &begin[(int)v9];
    if (v5 <= v9) {
      p_unmatched = &this->__position_.__match_.__unmatched_;
    }
    if (v9 == -1) {
      p_prefix = &this->__position_.__match_.__prefix_;
    }
    else {
      p_prefix = p_unmatched;
    }
    this->__result_ = p_prefix;
    if (!v6) {
      return this;
    }
LABEL_32:
    operator delete(v6);
    return this;
  }
  this->__n_ = 0;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&this->__position_);
  std::vector<std::ssub_match>::pointer v12 = this->__position_.__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer v13 = this->__position_.__match_.__matches_.__end_;
  uint64_t v14 = (char *)v13 - (char *)v12;
  if (v13 == v12)
  {
    std::vector<int>::pointer v17 = this->__subs_.__end_;
    BOOL v18 = wmemchr(this->__subs_.__begin_, -1, v17 - this->__subs_.__begin_);
    uint64_t v19 = 0;
    if (v18) {
      int v20 = v18;
    }
    else {
      int v20 = v17;
    }
    if (v20 == this->__subs_.__end_ || !(_BYTE)v23)
    {
LABEL_31:
      this->__result_ = v19;
      if (!v6) {
        return this;
      }
      goto LABEL_32;
    }
    if (v22.second.__i_ != v22.first.__i_)
    {
      this->__suffix_.matched = 1;
      this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
      this->__result_ = &this->__suffix_;
      if (!v6) {
        return this;
      }
      goto LABEL_32;
    }
LABEL_28:
    this->__result_ = 0;
    if (!v6) {
      return this;
    }
    goto LABEL_32;
  }
  unint64_t v15 = this->__subs_.__begin_[this->__n_];
  if (v15 == -1)
  {
    uint64_t v19 = &this->__position_.__match_.__prefix_;
    goto LABEL_31;
  }
  BOOL v16 = &v12[(int)v15];
  if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) <= v15) {
    BOOL v16 = &this->__position_.__match_.__unmatched_;
  }
  this->__result_ = v16;
  if (v6) {
    goto LABEL_32;
  }
  return this;
}

void sub_21DF41C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void ResetReasonEncoder::ParsedReason::~ParsedReason(ResetReasonEncoder::ParsedReason *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 32))
  {
    if (*((char *)this + 31) < 0) {
      operator delete(*((void **)this + 1));
    }
  }
}

double ResetReasonEncoder::encode@<D0>(ResetReasonEncoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 33) = v4;
  *(_OWORD *)(a2 + 17) = v4;
  *(_OWORD *)(a2 + 1) = v4;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
  memset((char *)v33 + 2, 0, 62);
  uint64_t v5 = *((void *)this + 5);
  uint64_t v6 = *((void *)this + 6);
  uint64_t v7 = v6 - v5;
  unint64_t v8 = (v6 - v5) >> 2;
  LOBYTE(v33[0]) = *(unsigned char *)this;
  BYTE1(v33[0]) = v8;
  if ((unint64_t)(v6 - v5) >= 0x3F)
  {
    unint64_t v9 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_ERROR))
    {
      int v29 = 134218240;
      uint64_t v30 = v7;
      __int16 v31 = 1024;
      int v32 = 62;
      _os_log_error_impl(&dword_21DE8A000, v9, OS_LOG_TYPE_ERROR, "Failed to encode parsed reason because the size of the numeric arguments (%zu bytes) exceeds the maximum size (%d bytes) of the reset reason", (uint8_t *)&v29, 0x12u);
    }
    return result;
  }
  if (v6 != v5)
  {
    if (v8 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = (v6 - v5) >> 2;
    }
    if (v11 >= 0x14
      && (v8 <= 1 ? (uint64_t v12 = 1) : (uint64_t v12 = (v6 - v5) >> 2),
          (unint64_t v13 = v12 - 1, v15 = v13 == -1, v14 = HIDWORD(v13), !v15) ? (v15 = v14 == 0) : (v15 = 0),
          v15 && (unint64_t)v33 - v5 + 2 >= 0x20))
    {
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF8;
      int v17 = v11 & 0xFFFFFFF8;
      char v25 = (long long *)(v5 + 16);
      uint64_t v26 = (_OWORD *)((char *)&v33[1] + 2);
      unint64_t v27 = v11 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        _OWORD *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v11 == v16) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v16 = 0;
      int v17 = 0;
    }
    unsigned int v18 = v17 + 1;
    do
    {
      *(_DWORD *)((char *)v33 + 4 * v16 + 2) = *(_DWORD *)(v5 + 4 * v16);
      unint64_t v16 = v18++;
    }
    while (v8 > v16);
  }
LABEL_21:
  if (*((unsigned char *)this + 32))
  {
    uint64_t v21 = (const char *)*((void *)this + 1);
    uint64_t v19 = (char *)this + 8;
    int v20 = v21;
    if (v19[23] >= 0) {
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = v19;
    }
    else {
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = v20;
    }
    strlcpy((char *)v33 + v7 + 2, v22, 62 - v7);
  }
  long long v23 = v33[1];
  *(_OWORD *)a2 = v33[0];
  *(_OWORD *)(a2 + 16) = v23;
  double result = *(double *)&v33[2];
  long long v24 = v33[3];
  *(_OWORD *)(a2 + 32) = v33[2];
  *(_OWORD *)(a2 + 48) = v24;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

void *std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x38E38E38E38E38FLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 72 * a3;
    uint64_t v6 = (char *)operator new(72 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      ResetReasonEncoder::SubmatchInfo::SubmatchInfo((std::string *)&v6[v7], (long long *)(a2 + v7));
      v7 += 72;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_21DF41F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21DF41F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 72)
  {
    while (1)
    {
      uint64_t v13 = v10 + v11;
      if (*(unsigned char *)(v10 + v11 - 8))
      {
        uint64_t v14 = *(void *)(v13 - 16);
        if (v13 - 40 == v14)
        {
          (*(void (**)(uint64_t))(*(void *)(v13 - 40) + 32))(v13 - 40);
        }
        else if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
      }
      if (*(char *)(v13 - 49) < 0) {
        break;
      }
      v11 -= 72;
      if (!v11) {
        goto LABEL_11;
      }
    }
    operator delete(*(void **)(v13 - 72));
  }
LABEL_11:
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      long long v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 40;
        do
        {
          while (1)
          {
            if (*(v4 - 8))
            {
              uint64_t v7 = (char *)*((void *)v4 - 2);
              if (v4 - 40 == v7)
              {
                (*(void (**)(char *))(*((void *)v4 - 5) + 32))(v4 - 40);
              }
              else if (v7)
              {
                (*(void (**)(char *))(*(void *)v7 + 40))(v7);
              }
            }
            if (*(v4 - 49) < 0) {
              break;
            }
            v4 -= 72;
            v6 -= 72;
            if (v4 == v3) {
              goto LABEL_14;
            }
          }
          operator delete(*((void **)v4 - 9));
          v4 -= 72;
          v6 -= 72;
        }
        while (v4 != v3);
LABEL_14:
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *ResetReasonEncoder::SubmatchInfo::SubmatchInfo(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  int v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__s.__data_[8] = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[2].__r_.__value_.__s.__data_[16] = 0;
  if (*((unsigned char *)a2 + 64))
  {
    std::string::size_type v6 = *((void *)a2 + 7);
    if (v6)
    {
      if ((long long *)v6 == a2 + 2)
      {
        this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&this[1].__r_.__value_.__l.__size_;
        (*(void (**)(void, std::string::size_type *))(**((void **)a2 + 7) + 24))(*((void *)a2 + 7), &this[1].__r_.__value_.__l.__size_);
        goto LABEL_10;
      }
      std::string::size_type v6 = (*(uint64_t (**)(std::string::size_type))(*(void *)v6 + 16))(v6);
    }
    this[2].__r_.__value_.__l.__size_ = v6;
LABEL_10:
    this[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void sub_21DF42258(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 64))
  {
    uint64_t v4 = *(void *)(v1 + 56);
    if (v4 == v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    }
    else if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26CECD3A0;
  return result;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CECD3A0;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *(_OWORD *)uint64_t v56 = *(_OWORD *)a1;
  uint64_t v57 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)uint64_t v54 = *(_OWORD *)a2;
  uint64_t v55 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v76 = 0uLL;
  pregex = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v74 = v4;
  long long v75 = v4;
  *(_OWORD *)&v72[0].__locale_ = v4;
  long long v73 = v4;
  uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)v54, 0);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v67 = 0xAAAAAAAAAAAAAA00;
  v64[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  long long v70 = v6;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  LOBYTE(v70) = 0;
  BYTE8(v70) = 0;
  uint64_t v71 = 0;
  memset(v64, 0, 41);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  __p.__position_.__match_.__unmatched_.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  __p.__position_.__match_.__matches_.__end_ = (std::vector<std::ssub_match>::pointer)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__p.__position_.__match_.__prefix_.second.__i_ = v6;
  memset(&__p.__position_.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__position_.__match_.__unmatched_.matched, 0, 17);
  __p.__position_.__match_.__prefix_.matched = 0;
  __p.__position_.__match_.__suffix_.first.__i_ = 0;
  uint64_t v7 = (char *)HIBYTE(v57);
  if (v57 < 0) {
    uint64_t v7 = (char *)v56[1];
  }
  memset(&__p, 0, 32);
  if (v57 >= 0) {
    unint64_t v8 = (std::sub_match<const char *> *)v56;
  }
  else {
    unint64_t v8 = (std::sub_match<const char *> *)v56[0];
  }
  *(_OWORD *)((char *)&__p.__position_.__flags_ + 1) = 0uLL;
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v5, v8, (std::sub_match<const char *> *)&v7[(void)v8], (std::vector<std::csub_match> *)&__p, 0);
  uint64_t v10 = (char *)HIBYTE(v57);
  if (v57 >= 0) {
    uint64_t v11 = v56;
  }
  else {
    uint64_t v11 = (void **)v56[0];
  }
  if (v57 < 0) {
    uint64_t v10 = (char *)v56[1];
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v64, (uint64_t)v11, (std::sub_match<std::__wrap_iter<const char *>> *)&v10[(void)v11], (uint64_t *)&__p, 0);
  if (__p.__position_.__begin_.__i_)
  {
    __p.__position_.__end_.__i_ = __p.__position_.__begin_.__i_;
    operator delete((void *)__p.__position_.__begin_.__i_);
  }
  if (v9)
  {
    p_end_cap = &v64[1].__end_cap_;
    if (v64[0].__end_ != v64[0].__begin_) {
      p_end_cap = &v64[0].__begin_->matched;
    }
    if (!*p_end_cap)
    {
      memset(&__p, 0, 24);
      if (SHIBYTE(pregex) < 0) {
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v64[0].__end_ == v64[0].__begin_) {
      std::vector<std::ssub_match>::pointer begin = (std::vector<std::ssub_match>::pointer)&v64[1];
    }
    else {
      std::vector<std::ssub_match>::pointer begin = v64[0].__begin_;
    }
    std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
    p_std::__wrap_iter<const char *>::iterator_type i = &v64[0].__begin_->second.__i_;
    if (v64[0].__end_ == v64[0].__begin_) {
      p_std::__wrap_iter<const char *>::iterator_type i = (const char **)&v64[1].__end_;
    }
    unint64_t v16 = *p_i;
    unint64_t v17 = *p_i - i;
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v17 > 0x16)
    {
      uint64_t v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v25 = v17 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_p = (const char *)operator new(v25 + 1);
      __p.__position_.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17;
      __p.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(v26 | 0x8000000000000000);
      __p.__position_.__begin_.__i_ = p_p;
      if (i != v16)
      {
LABEL_25:
        if (v17 < 0x20 || (unint64_t)(p_p - i) < 0x20)
        {
          uint64_t v19 = (char *)p_p;
          int v20 = i;
        }
        else
        {
          uint64_t v19 = (char *)&p_p[v17 & 0xFFFFFFFFFFFFFFE0];
          int v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v21 = (long long *)(i + 16);
          std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = p_p + 16;
          unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v24 = *v21;
            *(v22 - 1) = *(v21 - 1);
            _OWORD *v22 = v24;
            v21 += 2;
            v22 += 2;
            v23 -= 32;
          }
          while (v23);
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_40:
            char *v19 = 0;
            if (SHIBYTE(pregex) < 0) {
LABEL_41:
            }
              operator delete((void *)v76);
LABEL_42:
            long long v76 = *(_OWORD *)&__p.__position_.__begin_.__i_;
            pregex = __p.__position_.__pregex_;
            goto LABEL_43;
          }
        }
        do
        {
          char v27 = *v20++;
          *v19++ = v27;
        }
        while (v20 != v16);
        goto LABEL_40;
      }
    }
    else
    {
      HIBYTE(__p.__position_.__pregex_) = *(unsigned char *)p_i - (_BYTE)i;
      p_p = (const char *)&__p;
      if (i != v16) {
        goto LABEL_25;
      }
    }
    const char *p_p = 0;
    if (SHIBYTE(pregex) < 0) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
LABEL_43:
  *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__re.__loop_count_ = v28;
  *(_OWORD *)&__re.__start_.__cntrl_ = v28;
  *(_OWORD *)&__re.__traits_.__loc_.__locale_ = v28;
  *(_OWORD *)&__re.__traits_.__col_ = v28;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__re, "\\s+", 0);
  v29.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v29.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__n_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__subs_.__end_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__result_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__ready_ = v29;
  __p.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__prefix_.matched = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__matches_.__end_cap_.__value_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__unmatched_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__pregex_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__matches_.__begin_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__begin_.__i_ = v29;
  uint64_t v30 = HIBYTE(pregex);
  if (SHIBYTE(pregex) >= 0) {
    __int16 v31 = (const char *)&v76;
  }
  else {
    __int16 v31 = (const char *)v76;
  }
  if (SHIBYTE(pregex) < 0) {
    uint64_t v30 = *((void *)&v76 + 1);
  }
  int v32 = &v31[v30];
  v33.__i_ = v31;
  v34.__i_ = &v31[v30];
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&__p.__position_, v33, v34, &__re, match_default);
  memset(&__p.__suffix_, 0, 17);
  memset(&__p.__n_, 0, 32);
  char v35 = (int *)operator new(4uLL);
  __p.__subs_.__begin_ = v35;
  *char v35 = -1;
  __p.__subs_.__end_cap_.__value_ = v35 + 1;
  __p.__subs_.__end_ = v35 + 1;
  if (__p.__position_.__match_.__matches_.__end_ == __p.__position_.__match_.__matches_.__begin_)
  {
    __p.__suffix_.matched = 1;
    p_suffix = &__p.__suffix_;
    __p.__suffix_.first.__i_ = v31;
    __p.__suffix_.second.__i_ = v32;
  }
  else
  {
    p_suffix = &__p.__position_.__match_.__prefix_;
  }
  __p.__result_ = p_suffix;
  v37.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v37.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__begin_.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__pregex_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__matches_.__begin_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__matches_.__end_cap_.__value_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__unmatched_.second.__i_ = v37;
  v61.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__prefix_.matched = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__ready_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__result_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__n_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__subs_.__end_ = v37;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v61, &__p);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&__p);
  if (v61.__subs_.__begin_)
  {
    v61.__subs_.__end_ = v61.__subs_.__begin_;
    operator delete(v61.__subs_.__begin_);
  }
  if (v61.__position_.__match_.__matches_.__begin_)
  {
    v61.__position_.__match_.__matches_.__end_ = v61.__position_.__match_.__matches_.__begin_;
    operator delete(v61.__position_.__match_.__matches_.__begin_);
  }
  v38.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v38.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__n_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__subs_.__end_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__result_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__ready_ = v38;
  v60.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__prefix_.matched = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__matches_.__end_cap_.__value_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__unmatched_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__pregex_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__matches_.__begin_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__begin_.__i_ = v38;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v60, &__p);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&__p);
  if (v60.__subs_.__begin_)
  {
    v60.__subs_.__end_ = v60.__subs_.__begin_;
    operator delete(v60.__subs_.__begin_);
  }
  if (v60.__position_.__match_.__matches_.__begin_)
  {
    v60.__position_.__match_.__matches_.__end_ = v60.__position_.__match_.__matches_.__begin_;
    operator delete(v60.__position_.__match_.__matches_.__begin_);
  }
  if (__p.__result_)
  {
    if (__p.__result_->matched)
    {
      std::__wrap_iter<const char *>::iterator_type v40 = __p.__result_->first.__i_;
      std::__wrap_iter<const char *>::iterator_type v39 = __p.__result_->second.__i_;
      unint64_t v41 = v39 - __p.__result_->first.__i_;
      if (v41 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v41 > 0x16)
      {
        uint64_t v49 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17) {
          uint64_t v49 = v41 | 7;
        }
        uint64_t v50 = v49 + 1;
        int v42 = (long long *)operator new(v49 + 1);
        *((void *)&v58 + 1) = v41;
        unint64_t v59 = v50 | 0x8000000000000000;
        *(void *)&long long v58 = v42;
        if (v40 != v39)
        {
LABEL_64:
          if (v41 < 0x20 || (unint64_t)((char *)v42 - v40) < 0x20)
          {
            char v43 = v42;
            long long v44 = v40;
          }
          else
          {
            char v43 = (long long *)((char *)v42 + (v41 & 0xFFFFFFFFFFFFFFE0));
            long long v44 = &v40[v41 & 0xFFFFFFFFFFFFFFE0];
            long long v45 = (long long *)(v40 + 16);
            long long v46 = v42 + 1;
            unint64_t v47 = v41 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v48 = *v45;
              *(v46 - 1) = *(v45 - 1);
              *long long v46 = v48;
              v45 += 2;
              v46 += 2;
              v47 -= 32;
            }
            while (v47);
            if (v41 == (v41 & 0x7FFFFFFFFFFFFFE0)) {
              goto LABEL_77;
            }
          }
          do
          {
            char v51 = *v44++;
            *(unsigned char *)char v43 = v51;
            char v43 = (long long *)((char *)v43 + 1);
          }
          while (v44 != v39);
LABEL_77:
          *(unsigned char *)char v43 = 0;
          goto LABEL_78;
        }
      }
      else
      {
        HIBYTE(v59) = (_BYTE)v39 - (unint64_t)__p.__result_->first.__i_;
        int v42 = &v58;
        if (v40 != v39) {
          goto LABEL_64;
        }
      }
      *(unsigned char *)int v42 = 0;
    }
    else
    {
      long long v58 = 0uLL;
      unint64_t v59 = 0;
    }
LABEL_78:
    *(_OWORD *)a3 = v58;
    a3[2] = v59;
  }
  if (__p.__subs_.__begin_)
  {
    __p.__subs_.__end_ = __p.__subs_.__begin_;
    operator delete(__p.__subs_.__begin_);
  }
  if (__p.__position_.__match_.__matches_.__begin_)
  {
    __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
    operator delete(__p.__position_.__match_.__matches_.__begin_);
  }
  cntrl = __re.__start_.__cntrl_;
  if (__re.__start_.__cntrl_ && !atomic_fetch_add(&__re.__start_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
  }
  std::locale::~locale(&__re.__traits_.__loc_);
  if (v64[0].__begin_)
  {
    v64[0].__end_ = v64[0].__begin_;
    operator delete(v64[0].__begin_);
  }
  uint64_t v53 = (std::__shared_weak_count *)v75;
  if ((void)v75 && !atomic_fetch_add((atomic_ullong *volatile)(v75 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    std::locale::~locale(v72);
    if ((SHIBYTE(pregex) & 0x80000000) == 0)
    {
LABEL_91:
      if ((SHIBYTE(v55) & 0x80000000) == 0) {
        goto LABEL_92;
      }
      goto LABEL_96;
    }
  }
  else
  {
    std::locale::~locale(v72);
    if ((SHIBYTE(pregex) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  operator delete((void *)v76);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_92:
    if ((SHIBYTE(v57) & 0x80000000) == 0) {
      return;
    }
LABEL_97:
    operator delete(v56[0]);
    return;
  }
LABEL_96:
  operator delete(v54[0]);
  if (SHIBYTE(v57) < 0) {
    goto LABEL_97;
  }
}

void sub_21DF429F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  unint64_t v23 = *(void **)(v21 - 256);
  if (v23)
  {
    *(void *)(v21 - 248) = v23;
    operator delete(v23);
    long long v24 = *(std::__shared_weak_count **)(v21 - 96);
    if (!v24) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v24 = *(std::__shared_weak_count **)(v21 - 96);
    if (!v24) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_7:
  std::locale::~locale((std::locale *)(v21 - 144));
  if (*(char *)(v21 - 57) < 0)
  {
    operator delete(*(void **)(v21 - 80));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_9:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0) {
LABEL_10:
  }
    _Unwind_Resume(a1);
LABEL_13:
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_21DF42BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x21DF42B10);
}

uint64_t std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target_type()
{
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *a2)
{
  long long v4 = *(_OWORD *)&a2->__position_.__begin_.__i_;
  *(_OWORD *)((char *)&this->__position_.__end_.__i_ + 4) = *(_OWORD *)((char *)&a2->__position_.__end_.__i_ + 4);
  this->__position_.__match_.__matches_.__begin_ = 0;
  *(_OWORD *)&this->__position_.__begin_.__i_ = v4;
  this->__position_.__match_.__matches_.__end_ = 0;
  this->__position_.__match_.__matches_.__end_cap_.__value_ = 0;
  std::vector<std::ssub_match>::pointer begin = a2->__position_.__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer end = a2->__position_.__match_.__matches_.__end_;
  int64_t v7 = (char *)end - (char *)begin;
  if (end == begin)
  {
    unint64_t v8 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (std::sub_match<std::__wrap_iter<const char *>> *)operator new(v7);
    this->__position_.__match_.__matches_.__begin_ = v8;
    this->__position_.__match_.__matches_.__end_ = v8;
    this->__position_.__match_.__matches_.__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + 8 * (v7 >> 3));
    size_t v9 = 24 * ((v7 - 24) / 0x18uLL) + 24;
    memcpy(v8, begin, v9);
    uint64_t v25 = (char *)v8 + v9;
    this->__position_.__match_.__matches_.__end_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + v9);
  }
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10 = a2->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&this->__position_.__match_.__unmatched_.matched = *(_OWORD *)&a2->__position_.__match_.__unmatched_.matched;
  this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v10;
  long long v11 = *(_OWORD *)&a2->__position_.__match_.__prefix_.second.__i_;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v12 = a2->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  long long v13 = *(_OWORD *)&a2->__position_.__match_.__suffix_.matched;
  this->__position_.__match_.__position_start_.__i_ = a2->__position_.__match_.__position_start_.__i_;
  *(_OWORD *)&this->__position_.__match_.__suffix_.matched = v13;
  this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v12;
  *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_ = v11;
  uint64_t v14 = a2->__result_;
  this->__result_ = v14;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v15 = a2->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(void *)&this->__suffix_.matched = *(void *)&a2->__suffix_.matched;
  this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v15;
  ptrdiff_t n = a2->__n_;
  this->__subs_.__begin_ = 0;
  this->__n_ = n;
  this->__subs_.__end_ = 0;
  this->__subs_.__end_cap_.__value_ = 0;
  std::vector<int>::pointer v18 = a2->__subs_.__begin_;
  std::vector<int>::pointer v17 = a2->__subs_.__end_;
  int64_t v19 = (char *)v17 - (char *)v18;
  if (v17 == v18)
  {
    int v20 = 0;
    if (a2->__result_ != &a2->__suffix_) {
      goto LABEL_8;
    }
LABEL_14:
    p_suffix = &this->__suffix_;
LABEL_16:
    this->__result_ = p_suffix;
    return this;
  }
  if (v19 < 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  int v20 = (int *)operator new((char *)v17 - (char *)v18);
  this->__subs_.__begin_ = v20;
  this->__subs_.__end_ = v20;
  uint64_t v21 = &v20[v19 >> 2];
  this->__subs_.__end_cap_.__value_ = v21;
  memcpy(v20, v18, v19);
  this->__subs_.__end_ = v21;
  if (a2->__result_ == &a2->__suffix_) {
    goto LABEL_14;
  }
LABEL_8:
  if (v14)
  {
    unint64_t v22 = v20[n];
    if (v22 == -1)
    {
      p_suffix = &this->__position_.__match_.__prefix_;
    }
    else if (0xAAAAAAAAAAAAAAABLL * ((v25 - (char *)v8) >> 3) <= v22)
    {
      p_suffix = &this->__position_.__match_.__unmatched_;
    }
    else
    {
      p_suffix = &v8[(int)v22];
    }
    goto LABEL_16;
  }
  return this;
}

void sub_21DF42E78(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v1;
  if (*v1)
  {
    *(void *)(v2 + 192) = v5;
    operator delete(v5);
  }
  long long v6 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<ResetReasonEncoder::Mapping,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    long long v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 40;
      do
      {
        while (1)
        {
          if (*(unsigned char *)(v3 - 8))
          {
            uint64_t v6 = *(void *)(v3 - 16);
            if (v3 - 40 == v6)
            {
              (*(void (**)(uint64_t))(*(void *)(v3 - 40) + 32))(v3 - 40);
            }
            else if (v6)
            {
              (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
            }
          }
          if (*(char *)(v3 - 49) < 0) {
            break;
          }
          v3 -= 72;
          v5 -= 72;
          if (v3 == v2) {
            goto LABEL_12;
          }
        }
        operator delete(*(void **)(v3 - 72));
        v3 -= 72;
        v5 -= 72;
      }
      while (v3 != v2);
LABEL_12:
      long long v4 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int64_t v7 = *(void **)a1;
    operator delete(v7);
  }
}

void _GLOBAL__sub_I_ResetReasonEncoder_cpp()
{
  uint64_t v164 = *MEMORY[0x263EF8340];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&_MergedGlobals_3, "com.apple.telephony.abm", "ResetReasonEncoder");
  std::string::size_type v111 = (char *)operator new(0x48uLL);
  long long v112 = xmmword_21DFAD210;
  strcpy(v111, "AP forced coredump via SPMI - Please analyze reason from AP perspective");
  char v113 = 0;
  uint64_t v116 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v117 = (char *)operator new(0x60uLL);
  long long v118 = xmmword_21DFAD220;
  strcpy(v117, "ARI_CLI_ERR - All transaction IDs exhausted for msg\\(.*\\), for client\\(0[xX][0-9a-fA-F]+\\)");
  char v119 = 1;
  strcpy((char *)v100, "(msg\\(|\\), for client)");
  HIBYTE(v100[2]) = 22;
  int v101 = 0;
  LOBYTE(v102[0]) = 0;
  char v104 = 0;
  char v106 = 12;
  strcpy((char *)v105, "for client\\(");
  int v107 = 2;
  LOBYTE(v108[0]) = 0;
  char v110 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v120, (uint64_t)v100, 2uLL);
  uint64_t v121 = (char *)operator new(0x50uLL);
  long long v122 = xmmword_21DFAD230;
  strcpy(v121, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction 0[xX][0-9a-fA-F]+");
  char v123 = 2;
  CFTypeID v94 = operator new(0x40uLL);
  long long v95 = xmmword_21DFAD240;
  strcpy((char *)v94, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction ");
  int v96 = 2;
  LOBYTE(v97[0]) = 0;
  char v99 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v124, (uint64_t)&v94, 1uLL);
  uint64_t v125 = (char *)operator new(0xA8uLL);
  long long v126 = xmmword_21DFAD250;
  strcpy(v125, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  char v127 = 3;
  uint64_t v57 = operator new(0xB0uLL);
  long long v58 = xmmword_21DFAD260;
  strcpy((char *)v57, "(ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\(([a-zA-Z]+\\.){0,}|\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*)");
  int v59 = 0;
  LOBYTE(v60[0]) = 0;
  char v62 = 0;
  uint64_t v63 = operator new(0x68uLL);
  long long v64 = xmmword_21DFAD270;
  strcpy((char *)v63, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\(|-[0-9a-fA-F]+\\).*");
  int v65 = 1;
  LOBYTE(v66) = 0;
  char v68 = 0;
  uint64_t v69 = operator new(0x60uLL);
  long long v70 = xmmword_21DFAD280;
  strcpy((char *)v69, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-|\\).*");
  int v71 = 2;
  LOBYTE(v72[0]) = 0;
  char v74 = 0;
  long long v75 = operator new(0xA0uLL);
  long long v76 = xmmword_21DFAD290;
  strcpy((char *)v75, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\(|\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  int v77 = 1;
  LOBYTE(v78[0]) = 0;
  char v80 = 0;
  unint64_t v83 = 0x8000000000000098;
  uint64_t v81 = operator new(0x98uLL);
  uint64_t v82 = 151;
  strcpy((char *)v81, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(|\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  int v84 = 2;
  LOBYTE(v85[0]) = 0;
  char v87 = 0;
  BOOL v88 = operator new(0x98uLL);
  long long v89 = xmmword_21DFAD2A0;
  strcpy((char *)v88, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(|\\).*");
  int v90 = 2;
  LOBYTE(v91[0]) = 0;
  char v93 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v128, (uint64_t)&v57, 6uLL);
  uint64_t v129 = (char *)operator new(0x40uLL);
  long long v130 = xmmword_21DFAD2B0;
  strcpy(v129, "Baseband got stuck in data context .* state: resetting baseband");
  char v131 = 4;
  char v51 = operator new(0x48uLL);
  long long v52 = xmmword_21DFAD2C0;
  strcpy((char *)v51, "(Baseband got stuck in data context | state: resetting baseband)");
  int v53 = 0;
  LOBYTE(v54) = 0;
  char v56 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v132, (uint64_t)&v51, 1uLL);
  uint64_t v133 = (char *)operator new(0x20uLL);
  long long v134 = xmmword_21DFAB640;
  strcpy(v133, "Baseband ARI engage timeout");
  char v135 = 5;
  uint64_t v138 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v0 = (char *)operator new(0x38uLL);
  unint64_t v141 = 0x8000000000000038;
  uint64_t v139 = v0;
  uint64_t v140 = 55;
  strcpy(v0, "Failed to open transport to communicate with baseband.*");
  char v142 = 6;
  uint64_t v145 = 0;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  CFDictionaryRef v146 = (char *)operator new(0x20uLL);
  long long v147 = xmmword_21DFAD2D0;
  strcpy(v146, "PCI-EVENT: pci error: .*");
  char v148 = 7;
  strcpy((char *)v46, "PCI-EVENT: pci error: ");
  HIBYTE(v46[2]) = 22;
  int v47 = 0;
  LOBYTE(v48[0]) = 0;
  char v50 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v149, (uint64_t)v46, 1uLL);
  uint64_t v1 = (char *)operator new(0x40uLL);
  v149[5] = 0x8000000000000040;
  v149[3] = v1;
  v149[4] = 62;
  strcpy(v1, "filesystem flush operation failed -- check ARI and BB state --");
  char v150 = 8;
  uint64_t v153 = 0;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  std::string::size_type v154 = (char *)operator new(0x20uLL);
  long long v155 = xmmword_21DFAB650;
  strcpy(v154, "modem boot up failure \\[.+\\]");
  char v156 = 9;
  std::__wrap_iter<const char *>::iterator_type v40 = operator new(0x19uLL);
  long long v41 = xmmword_21DFA8EC0;
  strcpy((char *)v40, "BBUpdater error  [0-9]+");
  int v42 = 1;
  v43[0] = &unk_26CECD3A0;
  long long v44 = v43;
  char v45 = 1;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v157, (uint64_t)&v40, 1uLL);
  __int16 v159 = 2574;
  strcpy(v158, "^\\[abmtool\\].*");
  char v35 = 13;
  strcpy((char *)v34, "^\\[abmtool\\] ");
  int v36 = 0;
  LOBYTE(v37[0]) = 0;
  char v39 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v160, (uint64_t)v34, 1uLL);
  __int16 v162 = 2829;
  strcpy(v161, "^\\[bbutil\\].*");
  char v29 = 12;
  strcpy((char *)__p, "^\\[bbutil\\] ");
  int v30 = 0;
  LOBYTE(v31[0]) = 0;
  char v33 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v163, (uint64_t)__p, 1uLL);
  qword_26AA8EFA0 = 0;
  qword_26AA8EFA8 = 0;
  qword_26AA8EFB0 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  qword_26AA8EFA0 = (uint64_t)operator new(0x2A0uLL);
  qword_26AA8EFA8 = qword_26AA8EFA0;
  qword_26AA8EFB0 = qword_26AA8EFA0 + 672;
  uint64_t v5 = (std::string *)qword_26AA8EFA0;
  do
  {
    uint64_t v6 = &(&v111)[7 * v3];
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *v6, (std::string::size_type)v6[1]);
    }
    else
    {
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
    }
    int64_t v7 = &(&v111)[7 * v3];
    std::string::value_type v8 = *((unsigned char *)v7 + 24);
    v5[1].__r_.__value_.__l.__size_ = 0;
    v5[1].__r_.__value_.__s.__data_[0] = v8;
    v5[1].__r_.__value_.__r.__words[2] = 0;
    v5[2].__r_.__value_.__r.__words[0] = 0;
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10 = v7[4];
    size_t v9 = v7[5];
    int64_t v11 = v9 - v10;
    if (v9 != v10)
    {
      unint64_t v12 = 0x8E38E38E38E38E39 * (v11 >> 3);
      if (v12 >= 0x38E38E38E38E38FLL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      long long v13 = operator new(v11);
      uint64_t v14 = 0;
      v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      v5[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
      v5[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[72 * v12];
      while (1)
      {
        unint64_t v16 = (std::string *)&v13[v14];
        std::vector<int>::pointer v17 = &v10[v14];
        if (v10[v14 + 23] < 0)
        {
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
        }
        else
        {
          long long v18 = *(_OWORD *)v17;
          v16->__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
        }
        int64_t v19 = &v13[v14];
        int v20 = &v10[v14];
        *((_DWORD *)v19 + 6) = *(_DWORD *)&v10[v14 + 24];
        v13[v14 + 32] = 0;
        uint64_t v4 = (uint64_t)&v13[v14 + 32];
        v19[64] = 0;
        if (!v10[v14 + 64]) {
          goto LABEL_13;
        }
        uint64_t v15 = *((void *)v20 + 7);
        if (v15)
        {
          if (v20 + 32 == (char *)v15)
          {
            *(void *)&v13[v14 + 56] = v4;
            (*(void (**)(void))(**((void **)v20 + 7) + 24))(*((void *)v20 + 7));
            goto LABEL_12;
          }
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
        }
        *(void *)&v13[v14 + 56] = v15;
LABEL_12:
        v19[64] = 1;
LABEL_13:
        v14 += 72;
        if (&v10[v14] == v9)
        {
          v5[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v13[v14];
          break;
        }
      }
    }
    ++v3;
    uint64_t v5 = (std::string *)((char *)v5 + 56);
    v2 += 56;
  }
  while (v3 != 12);
  qword_26AA8EFA8 = (uint64_t)v5;
  uint64_t v21 = &v164;
  do
  {
    uint64_t v22 = *(v21 - 3);
    if (v22)
    {
      uint64_t v23 = *(v21 - 2);
      long long v24 = (void *)*(v21 - 3);
      if (v23 != v22)
      {
        uint64_t v25 = v23 - 40;
        do
        {
          while (1)
          {
            if (*(unsigned char *)(v23 - 8))
            {
              uint64_t v26 = *(void *)(v23 - 16);
              if (v23 - 40 == v26)
              {
                (*(void (**)(uint64_t))(*(void *)(v23 - 40) + 32))(v23 - 40);
              }
              else if (v26)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 40))(v26, v4);
              }
            }
            if (*(char *)(v23 - 49) < 0) {
              break;
            }
            v23 -= 72;
            v25 -= 72;
            if (v23 == v22) {
              goto LABEL_34;
            }
          }
          operator delete(*(void **)(v23 - 72));
          v23 -= 72;
          v25 -= 72;
        }
        while (v23 != v22);
LABEL_34:
        long long v24 = (void *)*(v21 - 3);
      }
      *(v21 - 2) = v22;
      operator delete(v24);
    }
    char v27 = (void **)(v21 - 7);
    if (*((char *)v21 - 33) < 0) {
      operator delete(*v27);
    }
    v21 -= 7;
  }
  while (v27 != (void **)&v111);
  if (v33)
  {
    if (v32 != v31)
    {
      if (v32) {
        (*(void (**)(void))(*v32 + 40))();
      }
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v31[0] + 32))(v31, v4);
    if (v29 < 0) {
LABEL_43:
    }
      operator delete(__p[0]);
  }
  else
  {
LABEL_42:
    if (v29 < 0) {
      goto LABEL_43;
    }
  }
  if (v39)
  {
    if (v38 != v37)
    {
      if (v38) {
        (*(void (**)(void))(*v38 + 40))();
      }
      goto LABEL_48;
    }
    (*(void (**)(void *, uint64_t))(v37[0] + 32))(v37, v4);
    if (v35 < 0) {
LABEL_49:
    }
      operator delete(v34[0]);
  }
  else
  {
LABEL_48:
    if (v35 < 0) {
      goto LABEL_49;
    }
  }
  if (v45)
  {
    if (v44 != v43)
    {
      if (v44) {
        (*(void (**)(void))(*v44 + 40))();
      }
      goto LABEL_54;
    }
    (*(void (**)(void *, uint64_t))(v43[0] + 32))(v43, v4);
    if (SHIBYTE(v41) < 0) {
LABEL_55:
    }
      operator delete(v40);
  }
  else
  {
LABEL_54:
    if (SHIBYTE(v41) < 0) {
      goto LABEL_55;
    }
  }
  if (v50)
  {
    if (v49 != v48)
    {
      if (v49) {
        (*(void (**)(void))(*v49 + 40))();
      }
      goto LABEL_60;
    }
    (*(void (**)(void *, uint64_t))(v48[0] + 32))(v48, v4);
    if (SHIBYTE(v46[2]) < 0) {
LABEL_61:
    }
      operator delete(v46[0]);
  }
  else
  {
LABEL_60:
    if (SHIBYTE(v46[2]) < 0) {
      goto LABEL_61;
    }
  }
  if (v56)
  {
    if (v55 != &v54)
    {
      if (v55) {
        (*(void (**)(void))(*v55 + 40))();
      }
      goto LABEL_66;
    }
    (*(void (**)(uint64_t *, uint64_t))(v54 + 32))(&v54, v4);
    if (SHIBYTE(v52) < 0) {
LABEL_67:
    }
      operator delete(v51);
  }
  else
  {
LABEL_66:
    if (SHIBYTE(v52) < 0) {
      goto LABEL_67;
    }
  }
  if (v93)
  {
    if (v92 != v91)
    {
      if (v92) {
        (*(void (**)(void))(*v92 + 40))();
      }
      goto LABEL_72;
    }
    (*(void (**)(void *, uint64_t))(v91[0] + 32))(v91, v4);
    if (SHIBYTE(v89) < 0) {
LABEL_73:
    }
      operator delete(v88);
  }
  else
  {
LABEL_72:
    if (SHIBYTE(v89) < 0) {
      goto LABEL_73;
    }
  }
  if (v87)
  {
    if (v86 != v85)
    {
      if (v86) {
        (*(void (**)(void))(*v86 + 40))();
      }
      goto LABEL_78;
    }
    (*(void (**)(void *, uint64_t))(v85[0] + 32))(v85, v4);
    if (SHIBYTE(v83) < 0) {
LABEL_79:
    }
      operator delete(v81);
  }
  else
  {
LABEL_78:
    if (SHIBYTE(v83) < 0) {
      goto LABEL_79;
    }
  }
  if (v80)
  {
    if (v79 != v78)
    {
      if (v79) {
        (*(void (**)(void))(*v79 + 40))();
      }
      goto LABEL_84;
    }
    (*(void (**)(void *, uint64_t))(v78[0] + 32))(v78, v4);
    if (SHIBYTE(v76) < 0) {
LABEL_85:
    }
      operator delete(v75);
  }
  else
  {
LABEL_84:
    if (SHIBYTE(v76) < 0) {
      goto LABEL_85;
    }
  }
  if (v74)
  {
    if (v73 != v72)
    {
      if (v73) {
        (*(void (**)(void))(*v73 + 40))();
      }
      goto LABEL_90;
    }
    (*(void (**)(void *, uint64_t))(v72[0] + 32))(v72, v4);
    if (SHIBYTE(v70) < 0) {
LABEL_91:
    }
      operator delete(v69);
  }
  else
  {
LABEL_90:
    if (SHIBYTE(v70) < 0) {
      goto LABEL_91;
    }
  }
  if (v68)
  {
    if (v67 != &v66)
    {
      if (v67) {
        (*(void (**)(void))(*v67 + 40))();
      }
      goto LABEL_96;
    }
    (*(void (**)(uint64_t *, uint64_t))(v66 + 32))(&v66, v4);
    if (SHIBYTE(v64) < 0) {
LABEL_97:
    }
      operator delete(v63);
  }
  else
  {
LABEL_96:
    if (SHIBYTE(v64) < 0) {
      goto LABEL_97;
    }
  }
  if (v62)
  {
    if (v61 != v60)
    {
      if (v61) {
        (*(void (**)(void))(*v61 + 40))();
      }
      goto LABEL_102;
    }
    (*(void (**)(void *, uint64_t))(v60[0] + 32))(v60, v4);
    if (SHIBYTE(v58) < 0) {
LABEL_103:
    }
      operator delete(v57);
  }
  else
  {
LABEL_102:
    if (SHIBYTE(v58) < 0) {
      goto LABEL_103;
    }
  }
  if (v99)
  {
    if (v98 != v97)
    {
      if (v98) {
        (*(void (**)(void))(*v98 + 40))();
      }
      goto LABEL_108;
    }
    (*(void (**)(void *, uint64_t))(v97[0] + 32))(v97, v4);
    if (SHIBYTE(v95) < 0) {
LABEL_109:
    }
      operator delete(v94);
  }
  else
  {
LABEL_108:
    if (SHIBYTE(v95) < 0) {
      goto LABEL_109;
    }
  }
  if (v110)
  {
    if (v109 != v108)
    {
      if (v109) {
        (*(void (**)(void))(*v109 + 40))();
      }
      goto LABEL_114;
    }
    (*(void (**)(void *, uint64_t))(v108[0] + 32))(v108, v4);
    if (v106 < 0) {
LABEL_115:
    }
      operator delete(v105[0]);
  }
  else
  {
LABEL_114:
    if (v106 < 0) {
      goto LABEL_115;
    }
  }
  if (v104)
  {
    if (v103 != v102)
    {
      if (v103) {
        (*(void (**)(void))(*v103 + 40))();
      }
      goto LABEL_120;
    }
    (*(void (**)(void *, uint64_t))(v102[0] + 32))(v102, v4);
    if (SHIBYTE(v100[2]) < 0) {
LABEL_121:
    }
      operator delete(v100[0]);
  }
  else
  {
LABEL_120:
    if (SHIBYTE(v100[2]) < 0) {
      goto LABEL_121;
    }
  }
}

void sub_21DF443A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v78 = a24;
  unint64_t v79 = STACK[0x720];
  if (STACK[0x720])
  {
    unint64_t v91 = STACK[0x728];
    CFStringRef v92 = (void *)STACK[0x720];
    if (STACK[0x728] != v79)
    {
      unint64_t v93 = v91 - 40;
      do
      {
        while (1)
        {
          if (*(unsigned char *)(v91 - 8))
          {
            uint64_t v94 = *(void *)(v91 - 16);
            if (v91 - 40 == v94)
            {
              (*(void (**)(unint64_t))(*(void *)(v91 - 40) + 32))(v91 - 40);
            }
            else if (v94)
            {
              (*(void (**)(uint64_t))(*(void *)v94 + 40))(v94);
            }
          }
          if (*(char *)(v91 - 49) < 0) {
            break;
          }
          v91 -= 72;
          v93 -= 72;
          if (v91 == v79) {
            goto LABEL_37;
          }
        }
        operator delete(*(void **)(v91 - 72));
        v91 -= 72;
        v93 -= 72;
      }
      while (v91 != v79);
LABEL_37:
      CFStringRef v92 = (void *)STACK[0x720];
    }
    STACK[0x728] = v79;
    operator delete(v92);
    uint64_t v78 = a24;
    if ((SLOBYTE(STACK[0x717]) & 0x80000000) == 0)
    {
LABEL_3:
      unint64_t v80 = STACK[0x6E8];
      if (!STACK[0x6E8]) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((SLOBYTE(STACK[0x717]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x700]);
  unint64_t v80 = STACK[0x6E8];
  if (!STACK[0x6E8])
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_52;
  }
LABEL_40:
  unint64_t v95 = STACK[0x6F0];
  int v96 = (void *)v80;
  if (STACK[0x6F0] != v80)
  {
    unint64_t v97 = v95 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v95 - 8))
        {
          uint64_t v98 = *(void *)(v95 - 16);
          if (v95 - 40 == v98)
          {
            (*(void (**)(unint64_t))(*(void *)(v95 - 40) + 32))(v95 - 40);
          }
          else if (v98)
          {
            (*(void (**)(uint64_t))(*(void *)v98 + 40))(v98);
          }
        }
        if (*(char *)(v95 - 49) < 0) {
          break;
        }
        v95 -= 72;
        v97 -= 72;
        if (v95 == v80) {
          goto LABEL_50;
        }
      }
      operator delete(*(void **)(v95 - 72));
      v95 -= 72;
      v97 -= 72;
    }
    while (v95 != v80);
LABEL_50:
    int v96 = (void *)STACK[0x6E8];
  }
  STACK[0x6F0] = v80;
  operator delete(v96);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
  {
LABEL_5:
    unint64_t v81 = STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_6;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete((void *)STACK[0x6C8]);
  unint64_t v81 = STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x6A7]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_65;
  }
LABEL_53:
  unint64_t v99 = STACK[0x6B8];
  uint64_t v100 = (void *)v81;
  if (STACK[0x6B8] != v81)
  {
    unint64_t v101 = v99 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v99 - 8))
        {
          uint64_t v102 = *(void *)(v99 - 16);
          if (v99 - 40 == v102)
          {
            (*(void (**)(unint64_t))(*(void *)(v99 - 40) + 32))(v99 - 40);
          }
          else if (v102)
          {
            (*(void (**)(uint64_t))(*(void *)v102 + 40))(v102);
          }
        }
        if (*(char *)(v99 - 49) < 0) {
          break;
        }
        v99 -= 72;
        v101 -= 72;
        if (v99 == v81) {
          goto LABEL_63;
        }
      }
      operator delete(*(void **)(v99 - 72));
      v99 -= 72;
      v101 -= 72;
    }
    while (v99 != v81);
LABEL_63:
    uint64_t v100 = (void *)STACK[0x6B0];
  }
  STACK[0x6B8] = v81;
  operator delete(v100);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x6A7]) & 0x80000000) == 0)
  {
LABEL_7:
    unint64_t v82 = STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_8;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete((void *)STACK[0x690]);
  unint64_t v82 = STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_78;
  }
LABEL_66:
  unint64_t v103 = STACK[0x680];
  char v104 = (void *)v82;
  if (STACK[0x680] != v82)
  {
    unint64_t v105 = v103 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v103 - 8))
        {
          uint64_t v106 = *(void *)(v103 - 16);
          if (v103 - 40 == v106)
          {
            (*(void (**)(unint64_t))(*(void *)(v103 - 40) + 32))(v103 - 40);
          }
          else if (v106)
          {
            (*(void (**)(uint64_t))(*(void *)v106 + 40))(v106);
          }
        }
        if (*(char *)(v103 - 49) < 0) {
          break;
        }
        v103 -= 72;
        v105 -= 72;
        if (v103 == v82) {
          goto LABEL_76;
        }
      }
      operator delete(*(void **)(v103 - 72));
      v103 -= 72;
      v105 -= 72;
    }
    while (v103 != v82);
LABEL_76:
    char v104 = (void *)STACK[0x678];
  }
  STACK[0x680] = v82;
  operator delete(v104);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v83 = STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_10;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete((void *)STACK[0x658]);
  unint64_t v83 = STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_10:
    if ((SLOBYTE(STACK[0x637]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_91;
  }
LABEL_79:
  unint64_t v107 = STACK[0x648];
  uint64_t v108 = (void *)v83;
  if (STACK[0x648] != v83)
  {
    unint64_t v109 = v107 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v107 - 8))
        {
          uint64_t v110 = *(void *)(v107 - 16);
          if (v107 - 40 == v110)
          {
            (*(void (**)(unint64_t))(*(void *)(v107 - 40) + 32))(v107 - 40);
          }
          else if (v110)
          {
            (*(void (**)(uint64_t))(*(void *)v110 + 40))(v110);
          }
        }
        if (*(char *)(v107 - 49) < 0) {
          break;
        }
        v107 -= 72;
        v109 -= 72;
        if (v107 == v83) {
          goto LABEL_89;
        }
      }
      operator delete(*(void **)(v107 - 72));
      v107 -= 72;
      v109 -= 72;
    }
    while (v107 != v83);
LABEL_89:
    uint64_t v108 = (void *)STACK[0x640];
  }
  STACK[0x648] = v83;
  operator delete(v108);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x637]) & 0x80000000) == 0)
  {
LABEL_11:
    unint64_t v84 = STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_12;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete((void *)STACK[0x620]);
  unint64_t v84 = STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_12:
    if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_104;
  }
LABEL_92:
  unint64_t v111 = STACK[0x610];
  long long v112 = (void *)v84;
  if (STACK[0x610] != v84)
  {
    unint64_t v113 = v111 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v111 - 8))
        {
          uint64_t v114 = *(void *)(v111 - 16);
          if (v111 - 40 == v114)
          {
            (*(void (**)(unint64_t))(*(void *)(v111 - 40) + 32))(v111 - 40);
          }
          else if (v114)
          {
            (*(void (**)(uint64_t))(*(void *)v114 + 40))(v114);
          }
        }
        if (*(char *)(v111 - 49) < 0) {
          break;
        }
        v111 -= 72;
        v113 -= 72;
        if (v111 == v84) {
          goto LABEL_102;
        }
      }
      operator delete(*(void **)(v111 - 72));
      v111 -= 72;
      v113 -= 72;
    }
    while (v111 != v84);
LABEL_102:
    long long v112 = (void *)STACK[0x608];
  }
  STACK[0x610] = v84;
  operator delete(v112);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
  {
LABEL_13:
    unint64_t v85 = STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_14;
    }
    goto LABEL_105;
  }
LABEL_104:
  operator delete((void *)STACK[0x5E8]);
  unint64_t v85 = STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_14:
    if ((SLOBYTE(STACK[0x5C7]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_117;
  }
LABEL_105:
  unint64_t v115 = STACK[0x5D8];
  uint64_t v116 = (void *)v85;
  if (STACK[0x5D8] != v85)
  {
    unint64_t v117 = v115 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v115 - 8))
        {
          uint64_t v118 = *(void *)(v115 - 16);
          if (v115 - 40 == v118)
          {
            (*(void (**)(unint64_t))(*(void *)(v115 - 40) + 32))(v115 - 40);
          }
          else if (v118)
          {
            (*(void (**)(uint64_t))(*(void *)v118 + 40))(v118);
          }
        }
        if (*(char *)(v115 - 49) < 0) {
          break;
        }
        v115 -= 72;
        v117 -= 72;
        if (v115 == v85) {
          goto LABEL_115;
        }
      }
      operator delete(*(void **)(v115 - 72));
      v115 -= 72;
      v117 -= 72;
    }
    while (v115 != v85);
LABEL_115:
    uint64_t v116 = (void *)STACK[0x5D0];
  }
  STACK[0x5D8] = v85;
  operator delete(v116);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x5C7]) & 0x80000000) == 0)
  {
LABEL_15:
    unint64_t v86 = STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_16;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete((void *)STACK[0x5B0]);
  unint64_t v86 = STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_16:
    if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_130;
  }
LABEL_118:
  unint64_t v119 = STACK[0x5A0];
  uint64_t v120 = (void *)v86;
  if (STACK[0x5A0] != v86)
  {
    unint64_t v121 = v119 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v119 - 8))
        {
          uint64_t v122 = *(void *)(v119 - 16);
          if (v119 - 40 == v122)
          {
            (*(void (**)(unint64_t))(*(void *)(v119 - 40) + 32))(v119 - 40);
          }
          else if (v122)
          {
            (*(void (**)(uint64_t))(*(void *)v122 + 40))(v122);
          }
        }
        if (*(char *)(v119 - 49) < 0) {
          break;
        }
        v119 -= 72;
        v121 -= 72;
        if (v119 == v86) {
          goto LABEL_128;
        }
      }
      operator delete(*(void **)(v119 - 72));
      v119 -= 72;
      v121 -= 72;
    }
    while (v119 != v86);
LABEL_128:
    uint64_t v120 = (void *)STACK[0x598];
  }
  STACK[0x5A0] = v86;
  operator delete(v120);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0)
  {
LABEL_17:
    unint64_t v87 = STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_18;
    }
    goto LABEL_131;
  }
LABEL_130:
  operator delete((void *)STACK[0x578]);
  unint64_t v87 = STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_18:
    if ((SLOBYTE(STACK[0x557]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_143;
  }
LABEL_131:
  unint64_t v123 = STACK[0x568];
  uint64_t v124 = (void *)v87;
  if (STACK[0x568] != v87)
  {
    unint64_t v125 = v123 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v123 - 8))
        {
          uint64_t v126 = *(void *)(v123 - 16);
          if (v123 - 40 == v126)
          {
            (*(void (**)(unint64_t))(*(void *)(v123 - 40) + 32))(v123 - 40);
          }
          else if (v126)
          {
            (*(void (**)(uint64_t))(*(void *)v126 + 40))(v126);
          }
        }
        if (*(char *)(v123 - 49) < 0) {
          break;
        }
        v123 -= 72;
        v125 -= 72;
        if (v123 == v87) {
          goto LABEL_141;
        }
      }
      operator delete(*(void **)(v123 - 72));
      v123 -= 72;
      v125 -= 72;
    }
    while (v123 != v87);
LABEL_141:
    uint64_t v124 = (void *)STACK[0x560];
  }
  STACK[0x568] = v87;
  operator delete(v124);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x557]) & 0x80000000) == 0)
  {
LABEL_19:
    unint64_t v88 = STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_20;
    }
    goto LABEL_144;
  }
LABEL_143:
  operator delete((void *)STACK[0x540]);
  unint64_t v88 = STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_20:
    if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_156;
  }
LABEL_144:
  unint64_t v127 = STACK[0x530];
  uint64_t v128 = (void *)v88;
  if (STACK[0x530] != v88)
  {
    unint64_t v129 = v127 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v127 - 8))
        {
          uint64_t v130 = *(void *)(v127 - 16);
          if (v127 - 40 == v130)
          {
            (*(void (**)(unint64_t))(*(void *)(v127 - 40) + 32))(v127 - 40);
          }
          else if (v130)
          {
            (*(void (**)(uint64_t))(*(void *)v130 + 40))(v130);
          }
        }
        if (*(char *)(v127 - 49) < 0) {
          break;
        }
        v127 -= 72;
        v129 -= 72;
        if (v127 == v88) {
          goto LABEL_154;
        }
      }
      operator delete(*(void **)(v127 - 72));
      v127 -= 72;
      v129 -= 72;
    }
    while (v127 != v88);
LABEL_154:
    uint64_t v128 = (void *)STACK[0x528];
  }
  STACK[0x530] = v88;
  operator delete(v128);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0)
  {
LABEL_21:
    unint64_t v89 = STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_22;
    }
    goto LABEL_157;
  }
LABEL_156:
  operator delete((void *)STACK[0x508]);
  unint64_t v89 = STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_22:
    if ((SLOBYTE(STACK[0x4E7]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_169;
  }
LABEL_157:
  unint64_t v131 = STACK[0x4F8];
  uint64_t v132 = (void *)v89;
  if (STACK[0x4F8] != v89)
  {
    unint64_t v133 = v131 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v131 - 8))
        {
          uint64_t v134 = *(void *)(v131 - 16);
          if (v131 - 40 == v134)
          {
            (*(void (**)(unint64_t))(*(void *)(v131 - 40) + 32))(v131 - 40);
          }
          else if (v134)
          {
            (*(void (**)(uint64_t))(*(void *)v134 + 40))(v134);
          }
        }
        if (*(char *)(v131 - 49) < 0) {
          break;
        }
        v131 -= 72;
        v133 -= 72;
        if (v131 == v89) {
          goto LABEL_167;
        }
      }
      operator delete(*(void **)(v131 - 72));
      v131 -= 72;
      v133 -= 72;
    }
    while (v131 != v89);
LABEL_167:
    uint64_t v132 = (void *)STACK[0x4F0];
  }
  STACK[0x4F8] = v89;
  operator delete(v132);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x4E7]) & 0x80000000) == 0)
  {
LABEL_23:
    unint64_t v90 = STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_24;
    }
    goto LABEL_170;
  }
LABEL_169:
  operator delete((void *)STACK[0x4D0]);
  unint64_t v90 = STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_24:
    if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_182;
  }
LABEL_170:
  unint64_t v135 = STACK[0x4C0];
  uint64_t v136 = (void *)v90;
  if (STACK[0x4C0] != v90)
  {
    unint64_t v137 = v135 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v135 - 8))
        {
          uint64_t v138 = *(void *)(v135 - 16);
          if (v135 - 40 == v138)
          {
            (*(void (**)(unint64_t))(*(void *)(v135 - 40) + 32))(v135 - 40);
          }
          else if (v138)
          {
            (*(void (**)(uint64_t))(*(void *)v138 + 40))(v138);
          }
        }
        if (*(char *)(v135 - 49) < 0) {
          break;
        }
        v135 -= 72;
        v137 -= 72;
        if (v135 == v90) {
          goto LABEL_180;
        }
      }
      operator delete(*(void **)(v135 - 72));
      v135 -= 72;
      v137 -= 72;
    }
    while (v135 != v90);
LABEL_180:
    uint64_t v136 = (void *)STACK[0x4B8];
  }
  STACK[0x4C0] = v90;
  operator delete(v136);
  uint64_t v78 = a24;
  if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
  {
LABEL_25:
    if (!a39) {
      goto LABEL_187;
    }
    goto LABEL_183;
  }
LABEL_182:
  operator delete((void *)STACK[0x498]);
  if (!a39) {
    goto LABEL_187;
  }
LABEL_183:
  if (a38 == v78)
  {
    (*(void (**)(uint64_t))(a35 + 32))(v78);
  }
  else if (a38)
  {
    (*(void (**)(void))(*(void *)a38 + 40))();
  }
LABEL_187:
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a51)
  {
    if (a50 == a11)
    {
      (*(void (**)(uint64_t))(a47 + 32))(a11);
    }
    else if (a50)
    {
      (*(void (**)(void))(*(void *)a50 + 40))();
    }
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a63)
  {
    if (a62 == a12)
    {
      (*(void (**)(uint64_t))(a59 + 32))(a12);
    }
    else if (a62)
    {
      (*(void (**)(void))(*(void *)a62 + 40))();
    }
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a73)
  {
    if (a72 == a13)
    {
      (*(void (**)(uint64_t))(a71 + 32))(a13);
    }
    else if (a72)
    {
      (*(void (**)(void))(*(void *)a72 + 40))();
    }
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (LOBYTE(STACK[0x200]))
  {
    if (a77 == a14)
    {
      (*(void (**)(uint64_t))(a76 + 32))(a14);
    }
    else if (a77)
    {
      (*(void (**)(void))(*(void *)a77 + 40))();
    }
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (LOBYTE(STACK[0x3B0]))
  {
    unint64_t v139 = STACK[0x3A8];
    if (STACK[0x3A8] == a15)
    {
      (*(void (**)(uint64_t))(STACK[0x390] + 32))(a15);
    }
    else if (v139)
    {
      (*(void (**)(unint64_t))(*(void *)v139 + 40))(v139);
    }
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (LOBYTE(STACK[0x368]))
  {
    unint64_t v140 = STACK[0x360];
    if (STACK[0x360] == a16)
    {
      (*(void (**)(uint64_t))(STACK[0x348] + 32))(a16);
    }
    else if (v140)
    {
      (*(void (**)(unint64_t))(*(void *)v140 + 40))(v140);
    }
  }
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  if (LOBYTE(STACK[0x320]))
  {
    unint64_t v141 = STACK[0x318];
    if (STACK[0x318] == a17)
    {
      (*(void (**)(uint64_t))(STACK[0x300] + 32))(a17);
    }
    else if (v141)
    {
      (*(void (**)(unint64_t))(*(void *)v141 + 40))(v141);
    }
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (LOBYTE(STACK[0x2D8]))
  {
    unint64_t v142 = STACK[0x2D0];
    if (STACK[0x2D0] == a18)
    {
      (*(void (**)(uint64_t))(STACK[0x2B8] + 32))(a18);
    }
    else if (v142)
    {
      (*(void (**)(unint64_t))(*(void *)v142 + 40))(v142);
    }
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (LOBYTE(STACK[0x290]))
  {
    unint64_t v143 = STACK[0x288];
    if (STACK[0x288] == a19)
    {
      (*(void (**)(uint64_t))(STACK[0x270] + 32))(a19);
    }
    else if (v143)
    {
      (*(void (**)(unint64_t))(*(void *)v143 + 40))(v143);
    }
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (LOBYTE(STACK[0x248]))
  {
    unint64_t v144 = STACK[0x240];
    if (STACK[0x240] == a20)
    {
      (*(void (**)(uint64_t))(STACK[0x228] + 32))(a20);
    }
    else if (v144)
    {
      (*(void (**)(unint64_t))(*(void *)v144 + 40))(v144);
    }
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (LOBYTE(STACK[0x3F8]))
  {
    unint64_t v145 = STACK[0x3F0];
    if (STACK[0x3F0] == a21)
    {
      (*(void (**)(uint64_t))(STACK[0x3D8] + 32))(a21);
    }
    else if (v145)
    {
      (*(void (**)(unint64_t))(*(void *)v145 + 40))(v145);
    }
  }
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  if (LOBYTE(STACK[0x488]))
  {
    unint64_t v146 = STACK[0x480];
    if (STACK[0x480] == a22)
    {
      (*(void (**)(uint64_t))(STACK[0x468] + 32))(a22);
    }
    else if (v146)
    {
      (*(void (**)(unint64_t))(*(void *)v146 + 40))(v146);
    }
  }
  if (SLOBYTE(STACK[0x45F]) < 0) {
    operator delete((void *)STACK[0x448]);
  }
  if (LOBYTE(STACK[0x440]))
  {
    unint64_t v147 = STACK[0x438];
    if (STACK[0x438] == a23)
    {
      (*(void (**)(uint64_t))(STACK[0x420] + 32))(a23);
    }
    else if (v147)
    {
      (*(void (**)(unint64_t))(*(void *)v147 + 40))(v147);
    }
  }
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  _Unwind_Resume(a1);
}

BBUEUR10FirmwareVersion *BBUFirmwareVersion::createFromVersionString(capabilities::updater *a1)
{
  switch(capabilities::updater::getFirmwareVersion(a1))
  {
    case 0u:
      uint64_t v2 = (BBUEUR10FirmwareVersion *)operator new(0x60uLL);
      BBUEUR10FirmwareVersion::BBUEUR10FirmwareVersion(v2);
      goto LABEL_5;
    case 1u:
      uint64_t v2 = (BBUEUR10FirmwareVersion *)operator new(0x60uLL);
      BBUEUR13FirmwareVersion::BBUEUR13FirmwareVersion(v2);
      goto LABEL_5;
    case 2u:
      uint64_t v2 = (BBUEUR10FirmwareVersion *)operator new(0x60uLL);
      BBUEUR16FirmwareVersion::BBUEUR16FirmwareVersion(v2);
LABEL_5:
      if ((*(uint64_t (**)(BBUEUR10FirmwareVersion *, capabilities::updater *))(*(void *)v2 + 56))(v2, a1))return v2; {
      (*(void (**)(BBUEUR10FirmwareVersion *))(*(void *)v2 + 8))(v2);
      }
      return 0;
    case 3u:
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/FirmwareVersion/Common/BBUFirmwareVersion.cpp", 0x1Cu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v5, v6, v7, v8);
    default:
      return 0;
  }
}

void sub_21DF45F14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF45F28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF45F3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF45F50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BBUEUR4Fusing::~BBUEUR4Fusing(void **this)
{
  *this = &unk_26CECCD78;
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    if ((*((char *)this + 55) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[4]);
    return;
  }
  operator delete(this[7]);
  if (*((char *)this + 55) < 0) {
    goto LABEL_5;
  }
}

{
  BBUEUR4Fusing *v2;
  uint64_t vars8;

  *this = &unk_26CECCD78;
  if (*((char *)this + 79) < 0)
  {
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (BBUEUR4Fusing *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4]);
  uint64_t v2 = (BBUEUR4Fusing *)this;

LABEL_5:
  operator delete(v2);
}

uint64_t BBUEUR4Fusing::verifyFuse(unsigned char *a1, char a2)
{
  TelephonyUtilLogBinaryToBuffer();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_5;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v4 = (const char *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 32))(a1);
    _BBULog(13, 0, v4, "", "Verifying %d: %s  %u\n", v5, v6, v7, a2);
  }
LABEL_5:
  if (!a1[24]) {
    return 1;
  }
  (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
  if (ETLFusingVerifyQfpromFuse()) {
    return 1;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 0;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 0;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    size_t v9 = (const char *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 32))(a1);
    _BBULog(13, 0, v9, "", "ETLFusingVerifyQfpromFuse failed\n", v10, v11, v12, v13);
    return 0;
  }
  return result;
}

const char *BBUEUR4Fusing::getDebugName(BBUEUR4Fusing *this)
{
  return "BBUEUR4Fusing";
}

uint64_t BBUFDRUtilities::connect(uint64_t *a1, uint64_t *a2)
{
  long long value = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v4 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v5 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v5);
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = &unk_26CECF498;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    uint64_t v7 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v5;
    off_26AA89B58 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v4 = (BBUPartitionManager *)off_26AA89B50;
  }
  char v8 = (std::__shared_weak_count *)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFDRCacheLocation(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v22 = __p;
  }
  uint64_t v21 = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v22;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v24, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v24 = v23;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v25 = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
  if (ctu::cf::convert_copy())
  {
    CFURLRef v10 = CFURLCreateWithString(v9, v25, 0);
    CFRelease(v25);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    CFURLRef v10 = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_26;
    }
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_20:
    long long value = v10;
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v23.__r_.__value_.__l.__data_);
  long long value = v10;
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_28:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v8) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_22:
  if (!v8)
  {
LABEL_30:
    uint64_t v11 = value;
    uint64_t v12 = (__CFDictionary *)*a2;
    if (!value) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_29:
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  uint64_t v11 = value;
  uint64_t v12 = (__CFDictionary *)*a2;
  if (value)
  {
LABEL_31:
    CFDictionaryAddValue(v12, @"DataDirectory", v11);
    uint64_t v12 = (__CFDictionary *)*a2;
  }
LABEL_32:
  CFDictionaryAddValue(v12, @"SignData", (const void *)*MEMORY[0x263EFFB38]);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v13 = AMFDRCreateWithOptions((uint64_t)v9, *a2);
  *a1 = v13;
  if (v13) {
    return 0;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 11;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 11;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "failed creating reference to fdr\n", v14, v15, v16, v18);
    return 11;
  }
  return result;
}

void sub_21DF46698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, const void *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a20);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a20);
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a21);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t BBUFDRUtilities::copy(CFStringRef *a1, CFStringRef *a2, const void **a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef v11 = *a1;
  if (!v11 || !*a2 || !*a4)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        return 2;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        return 2;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0) {
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "invalid arguments:  dataClass = %p, serial = %p, options = %p", a6, a7, a8, (char)*a1);
    }
    return 2;
  }
  if (!CFStringGetLength(v11) || !CFStringGetLength(*a2))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0) {
        goto LABEL_31;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
      {
LABEL_31:
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          char Length = CFStringGetLength(*a1);
          CFStringGetLength(*a2);
          _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "invalid field length:  dataClass = %li, serial = %li\n", v23, v24, v25, Length);
        }
      }
    }
    return 2;
  }
  CFTypeRef v46 = 0;
  CFStringRef v13 = *a1;
  v45[2] = (uint64_t)v13;
  if (v13) {
    CFRetain(v13);
  }
  CFStringRef v14 = *a2;
  v45[1] = (uint64_t)v14;
  if (v14) {
    CFRetain(v14);
  }
  uint64_t v15 = *a4;
  v45[0] = (uint64_t)v15;
  if (v15) {
    CFRetain(v15);
  }
  uint64_t v16 = (capabilities::radio *)BBUFDRUtilities::connect((uint64_t *)&v46, v45);
  uint64_t v20 = (uint64_t)v16;
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (!v20)
  {
    CFTypeRef cf = 0;
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    char v41 = capabilities::radio::chipID(v16);
    CFStringRef v27 = CFStringCreateWithFormat(v26, 0, @"%08X-%@");
    uint64_t v28 = AMFDRDataCopy((uint64_t)v46, (uint64_t)*a1, (uint64_t)v27, (uint64_t)&cf);
    if (v27 && v28)
    {
      CFTypeRef v33 = cf;
      std::__wrap_iter<const char *> v34 = *a3;
      *a3 = (const void *)v28;
      if (v34) {
        CFRelease(v34);
      }
      if (!v33)
      {
        uint64_t v20 = 0;
LABEL_52:
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v27) {
          CFRelease(v27);
        }
        goto LABEL_56;
      }
    }
    else
    {
      char v35 = *a3;
      *a3 = (const void *)v28;
      if (v35) {
        CFRelease(v35);
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        goto LABEL_45;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        goto LABEL_45;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "failed copying data from FDR\n", v30, v31, v32, v41);
      if (gBBULogMaskGet(void)::once != -1)
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t v20 = 11;
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_52;
        }
        goto LABEL_46;
      }
    }
LABEL_45:
    uint64_t v20 = 11;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_52;
    }
LABEL_46:
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      ctu::cf::show((uint64_t *)__p, (ctu::cf *)cf, v29);
      if (v43 >= 0) {
        char v39 = __p;
      }
      else {
        LOBYTE(v39) = __p[0];
      }
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "%s\n", v36, v37, v38, (char)v39);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_52;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0) {
      goto LABEL_21;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
    {
LABEL_21:
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "failed establish connection to FDR\n", v17, v18, v19, v40);
      }
    }
  }
LABEL_56:
  if (v46) {
    CFRelease(v46);
  }
  return v20;
}

void sub_21DF46C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUFDRUtilities::validateAndCopy(capabilities::radio *a1, void *a2, const void **a3, uint64_t *a4, ctu::cf **a5, char a6)
{
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  char v58 = capabilities::radio::chipID(a1);
  uint64_t v16 = (ctu::cf *)CFStringCreateWithFormat(v11, 0, @"%08X-%@");
  if (*(void *)a1 && *a2 && *a4)
  {
    char v62 = 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        goto LABEL_13;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      ctu::cf::show((uint64_t *)v63, *(ctu::cf **)a1, v12);
      int v17 = v64;
      char v18 = (char)v63[0];
      ctu::cf::show((uint64_t *)&__p, v16, v19);
      uint64_t v23 = v63;
      if (v17 < 0) {
        LOBYTE(v23) = v18;
      }
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "DataClass: %s, DataInstance: %s\n", v20, v21, v22, (char)v23);
      if (v61 < 0) {
        operator delete(__p);
      }
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }
LABEL_13:
    if (!AMFDRIsSupported())
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 109, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUFDRUtilities.cpp", 0x101u, (ctu::LogMessageBuffer *)"Assertion failure(( AMFDRIsSupported() == true) && \"AMFDR calls are made but dyn libFDR is NOT linked\")", v55, v56, v57, v58);
    }
    if (a6)
    {
LABEL_20:
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_24;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "Calling AMFDRSealingMapCopyLocalData which does the unsealing/validation.\n", v24, v25, v26, v58);
      }
LABEL_24:
      uint64_t v31 = AMFDRSealingMapCopyLocalData(*(void *)a1, (uint64_t)v16, *a4, (uint64_t)&v62);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_32;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        ctu::cf::show((uint64_t *)v63, v62, v27);
        if (v64 >= 0) {
          char v35 = v63;
        }
        else {
          LOBYTE(v35) = v63[0];
        }
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "AMFDRSealingMapCopyLocalData error: %s\n", v32, v33, v34, (char)v35);
        if (v64 < 0) {
          operator delete(v63[0]);
        }
      }
LABEL_32:
      if (v31) {
        goto LABEL_37;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_37;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_37;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "AMFDRSealingMapCopyLocalData returned NULL data \n", v28, v29, v30, v58);
      }
LABEL_37:
      if (v62) {
        goto LABEL_42;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_42;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_42;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "AMFDRSealingMapCopyLocalData returned NULL error \n", v28, v29, v30, v58);
      }
LABEL_42:
      uint64_t v36 = v62;
      *a5 = v62;
      if (v31) {
        BOOL v37 = v36 == 0;
      }
      else {
        BOOL v37 = 0;
      }
      char v38 = v37;
      char v39 = *a3;
      *a3 = (const void *)v31;
      if (v39) {
        CFRelease(v39);
      }
      if (v38)
      {
        uint64_t v40 = 0;
        goto LABEL_84;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_76;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
          goto LABEL_76;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "hit an error while copying data from FDR\n", v28, v29, v30, v58);
        if (gBBULogMaskGet(void)::once != -1)
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t v40 = 11;
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
          {
LABEL_77:
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              ctu::cf::show((uint64_t *)v63, v62, v27);
              if (v64 >= 0) {
                long long v52 = v63;
              }
              else {
                LOBYTE(v52) = v63[0];
              }
              _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "%s\n", v49, v50, v51, (char)v52);
              if (v64 < 0) {
                operator delete(v63[0]);
              }
              uint64_t v40 = 11;
            }
          }
LABEL_84:
          if (v16) {
            CFRelease(v16);
          }
          return v40;
        }
      }
LABEL_76:
      uint64_t v40 = 11;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0) {
        goto LABEL_77;
      }
      goto LABEL_84;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
      {
LABEL_17:
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "Setting AMFDR Log Handler\n", v24, v25, v26, v58);
        }
      }
    }
    AMFDRLogSetHandler((uint64_t)BBUFDRLogHandler);
    goto LABEL_20;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_56;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_56;
    }
  }
  if (gBBULogVerbosity < 0
    || (_BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "invalid arguments:  dataClass = %p, serial = %p\n, options = %p", v13, v14, v15, *(void *)a1), gBBULogMaskGet(void)::once == -1))
  {
LABEL_56:
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
    goto LABEL_64;
  }
LABEL_57:
  if (gBBULogVerbosity < 0) {
    goto LABEL_64;
  }
  ctu::cf::show((uint64_t *)v63, *(ctu::cf **)a1, v12);
  if (v64 >= 0) {
    long long v44 = v63;
  }
  else {
    LOBYTE(v44) = v63[0];
  }
  _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "DataClass: %s\n", v41, v42, v43, (char)v44);
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
LABEL_64:
    uint64_t v40 = 2;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      return v40;
    }
    goto LABEL_65;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  uint64_t v40 = 2;
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
    return v40;
  }
LABEL_65:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    ctu::cf::show((uint64_t *)v63, v16, v12);
    if (v64 >= 0) {
      long long v48 = v63;
    }
    else {
      LOBYTE(v48) = v63[0];
    }
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "DataInstance: %s\n", v45, v46, v47, (char)v48);
    if (v64 < 0) {
      operator delete(v63[0]);
    }
    return 2;
  }
  return v40;
}

void sub_21DF47408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL BBUFDRUtilities::isTrustErrorAcceptable(BBUFDRUtilities *this, __CFError *a2)
{
  uint64_t v5 = AMFDRGetTrustError((uint64_t)this);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_5;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "FDR TrustError: %llu\n", v2, v3, v4, v5);
  }
LABEL_5:
  if (!v5)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      BOOL v7 = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        return v7;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      BOOL v7 = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
        return v7;
      }
    }
    if (gBBULogVerbosity < 0) {
      return v7;
    }
    char v8 = "Fatal error in FDR data validation/decode \n";
LABEL_18:
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, v8, v2, v3, v4, v10);
    return v7;
  }
  unint64_t v6 = v5 & 0xFFFD9FFFFFFFFEFFLL;
  BOOL v7 = (v5 & 0xFFFD9FFFFFFFFEFFLL) == 0;
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  if (v6) {
    char v8 = "Fatal error in FDR data validation/decode \n";
  }
  else {
    char v8 = "We only have acceptable errors, so we can ignore these errors \n";
  }
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0 && (gBBULogVerbosity & 0x80000000) == 0) {
    goto LABEL_18;
  }
  return v7;
}

BOOL BBUFDRUtilities::isErrorImageNotFound(BBUFDRUtilities *this, __CFError *a2)
{
  if (!this) {
    return 0;
  }
  CFDictionaryRef v2 = CFErrorCopyUserInfo(this);
  if (v2)
  {
    CFDictionaryRef v6 = v2;
    BOOL v7 = (const void *)*MEMORY[0x263EFFC88];
    CFBooleanRef Value = (ctu::cf *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x263EFFC88]);
    if (Value)
    {
      char v10 = Value;
      while (1)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
            goto LABEL_12;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
            goto LABEL_12;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          ctu::cf::show((uint64_t *)__p, v10, v9);
          uint64_t v14 = __p;
          if (v25 < 0) {
            LOBYTE(v14) = __p[0];
          }
          _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "AMFDRSealingMapCopyLocalData error: %s\n", v11, v12, v13, (char)v14);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
        }
LABEL_12:
        CFIndex Code = CFErrorGetCode(v10);
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0) {
            goto LABEL_14;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
          {
LABEL_14:
            if ((gBBULogVerbosity & 0x80000000) == 0) {
              _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "ErrorCode from isErrorImageNotFound: 0x%lx\n", v15, v16, v17, Code);
            }
          }
        }
        CFRelease(v6);
        CFDictionaryRef v19 = CFErrorCopyUserInfo(v10);
        if (!v19) {
          goto LABEL_27;
        }
        CFDictionaryRef v6 = v19;
        char v10 = (ctu::cf *)CFDictionaryGetValue(v19, v7);
        if (!v10) {
          goto LABEL_26;
        }
      }
    }
    CFIndex Code = 0;
LABEL_26:
    CFRelease(v6);
  }
  else
  {
    CFIndex Code = 0;
  }
LABEL_27:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_33;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      goto LABEL_33;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, "ErrorCode from isErrorImageNotFound: 0x%lx\n", v3, v4, v5, Code);
    BOOL v20 = Code == 4;
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    goto LABEL_34;
  }
LABEL_33:
  BOOL v20 = Code == 4;
LABEL_34:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    if (v20) {
      uint64_t v21 = "The root cause of the AMFDR failure IS missing bbxx file \n";
    }
    else {
      uint64_t v21 = "The root cause of the AMFDR failure is NOT missing bbxx file \n";
    }
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_7_1, v21, v3, v4, v5, v23);
  }
  return v20;
}

void sub_21DF478EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_15()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t BBUICEProvisioner::determineSupport(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 16))
  {
    BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Assuming mature provisioning supported.");
    *(_DWORD *)(a1 + 16) = 1;
    (*(void (**)(void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), 0);
  }
  return 0;
}

uint64_t BBUICEProvisioner::handleBeginMature(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a2 + 8);
  __p[6] = v3;
  if (!v3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 56, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUICEProvisioner.cpp", 0x32u, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Error: Unable retrieve public key to start provisioning.\")", v28, v29, v30, v31);
  }
  CFRetain(v3);
  CFDictionaryRef v6 = (UInt8 *)operator new(0xFA0uLL);
  bzero(v6, 0xFA0uLL);
  BOOL v7 = (unsigned __int16 *)operator new(0x4C4uLL);
  bzero(v7, 0x4C4uLL);
  unsigned __int16 Length = CFDataGetLength((CFDataRef)v3);
  *(_WORD *)CFDictionaryRef v6 = Length;
  if (Length <= 0xF9Eu)
  {
    v35.length = CFDataGetLength((CFDataRef)v3);
    v35.locatioptrdiff_t n = 0;
    CFDataGetBytes((CFDataRef)v3, v35, v6 + 2);
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Start provisioning by sending pubkey, size %d", *(unsigned __int16 *)v6);
    IceAriGetContext();
    if (KTLStartProvision())
    {
      if (v7[14] >= 0x400u) {
        size_t v10 = 1024;
      }
      else {
        size_t v10 = v7[14];
      }
      if (v10 <= 0x3FF) {
        size_t v11 = 1024 - v10;
      }
      else {
        size_t v11 = 0;
      }
      bzero(&__dst[v10], v11);
      memcpy(__dst, v7 + 15, v10);
      memset(&__p[3], 170, 24);
      ctu::hex((ctu *)__dst, (const void *)v10);
      uint64_t valid = KTLIsValidIMEIString();
      if (valid)
      {
        uint64_t valid = (uint64_t)operator new(0x18uLL);
        uint64_t v13 = valid;
        if (SHIBYTE(__p[5]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)valid, (const std::string::value_type *)__p[3], (std::string::size_type)__p[4]);
        }
        else
        {
          *(_OWORD *)uint64_t valid = *(_OWORD *)&__p[3];
          *(void **)(valid + 16) = __p[5];
        }
        uint64_t v14 = *a3;
        if (*a3)
        {
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
          operator delete((void *)v14);
        }
        *a3 = v13;
      }
      uint64_t v15 = capabilities::updater::supportsDualIMEIProvision((capabilities::updater *)valid);
      if (v15)
      {
        memcpy(__dst, v7 + 554, v10);
        memset(__p, 170, 24);
        ctu::hex((ctu *)__dst, (const void *)v10);
        uint64_t v15 = KTLIsValidIMEIString();
        if (v15)
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "IMEI2 is valid. Populating provisioning params!");
          uint64_t v15 = (uint64_t)operator new(0x18uLL);
          uint64_t v16 = v15;
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v15, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
            *(void **)(v15 + 16) = __p[2];
          }
          uint64_t v17 = a3[1];
          if (v17)
          {
            if (*(char *)(v17 + 23) < 0) {
              operator delete(*(void **)v17);
            }
            operator delete((void *)v17);
          }
          a3[1] = v16;
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      if (capabilities::updater::hasMEID((capabilities::updater *)v15))
      {
        if (v7[536] >= 0x400u) {
          size_t v18 = 1024;
        }
        else {
          size_t v18 = v7[536];
        }
        memcpy(__dst, v7 + 537, v18);
        memset(__p, 170, 24);
        ctu::hex((ctu *)__dst, (const void *)v18);
        if (KTLIsValidMEIDString())
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "MEID is valid. Populating provisioning params!");
          CFDictionaryRef v19 = (std::string *)operator new(0x18uLL);
          BOOL v20 = v19;
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v19->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
          }
          uint64_t v21 = a3[2];
          if (v21)
          {
            if (*(char *)(v21 + 23) < 0) {
              operator delete(*(void **)v21);
            }
            operator delete((void *)v21);
          }
          a3[2] = (uint64_t)v20;
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v22 = operator new(0x10uLL);
      size_t v23 = v7[23];
      v22[2] = v23;
      uint64_t v24 = operator new[](v23);
      *(void *)uint64_t v22 = v24;
      memcpy(v24, v7 + 24, v23);
      char v25 = (void **)a3[4];
      if (v25)
      {
        if (*v25) {
          operator delete(*v25);
        }
        operator delete(v25);
      }
      a3[4] = (uint64_t)v22;
      if (SHIBYTE(__p[5]) < 0) {
        operator delete(__p[3]);
      }
      uint64_t v9 = 0;
    }
    else
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed to retrieve mature provisioning parameters.");
      uint64_t v9 = 56;
    }
  }
  else
  {
    uint64_t v9 = 19;
  }
  operator delete(v7);
  operator delete(v6);
  CFRelease(v3);
  return v9;
}

void sub_21DF47E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,const void *a23)
{
  operator delete(v25);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  operator delete(v24);
  operator delete(v23);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a23);
  _Unwind_Resume(a1);
}

uint64_t BBUICEProvisioner::handleFinishMature(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = *(const void **)(a2 + 16);
  if (!v2)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 57, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUICEProvisioner.cpp", 0x85u, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Error: Unable retrieve public key to finish provisioning.\")", v10, v11, v12, v13);
  }
  CFRetain(v2);
  uint64_t v4 = (UInt8 *)operator new(0xC02uLL);
  uint64_t v5 = operator new(0xACuLL);
  bzero(v4, 0xC02uLL);
  *(_OWORD *)((char *)v5 + 156) = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  void v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  unsigned __int16 Length = CFDataGetLength((CFDataRef)v2);
  *(_WORD *)uint64_t v4 = Length;
  if (Length <= 0xC00u)
  {
    v14.length = CFDataGetLength((CFDataRef)v2);
    v14.locatioptrdiff_t n = 0;
    CFDataGetBytes((CFDataRef)v2, v14, v4 + 2);
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending manifest, size %d", *(unsigned __int16 *)v4);
    IceAriGetContext();
    if (KTLFinishProvision())
    {
      uint64_t v7 = 0;
    }
    else
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Finish provision failed, rsp status: 0x%x", *((_DWORD *)v5 + 5));
      uint64_t v7 = 57;
    }
  }
  else
  {
    uint64_t v7 = 19;
  }
  operator delete(v5);
  operator delete(v4);
  CFRelease(v2);
  return v7;
}

void sub_21DF4809C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF480B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_21DF480D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  operator delete(v10);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_21DF480EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21DF48104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  operator delete(v11);
  operator delete(v10);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_16()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void *BasebandUpdaterCreate(const __CFDictionary *a1, void (*a2)(void *, const char *), void *a3, void *a4)
{
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v43 = v8;
  long long v44 = v8;
  LOBYTE(v43) = 0;
  DWORD1(v43) = 0;
  WORD4(v43) = 0;
  LOBYTE(v44) = 0;
  BYTE8(v44) = 0;
  unint64_t v45 = 0xAAAAAA0000000000;
  v42[0] = 0xAAAAAAAAAAAAAAAALL;
  v42[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x223C1D890](v42, @"BasebandUpdaterCreate");
  CFDictionaryRef Value = ParseUpdaterDebugArgs(a1, (UpdaterDebugArgs *)&v43);
  long long v48 = 0;
  if (!a1)
  {
    CFDictionaryRef v10 = 0;
    goto LABEL_27;
  }
  CFDictionaryRef v10 = a1;
  if (!DWORD1(v43)) {
    goto LABEL_27;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v12 = (ACFULogging *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"logLevel=%d", DWORD1(v43));
  char v13 = v12;
  uint64_t v47 = v12;
  if (v12) {
    CFRange v14 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    CFRange v14 = 0;
  }
  if (!v14)
  {
    ACFULogging::getLogInstance(v12);
    CFDictionaryRef Value = (const __CFDictionary *)ACFULogging::handleMessage();
    uint64_t v16 = 0;
LABEL_59:
    CFDictionaryRef v10 = 0;
    int v23 = 4;
    goto LABEL_21;
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v11, 0, a1);
  uint64_t v16 = MutableCopy;
  long long v48 = MutableCopy;
  if (MutableCopy) {
    uint64_t v17 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    uint64_t v17 = 0;
  }
  if (!v17)
  {
    ACFULogging::getLogInstance(MutableCopy);
    CFDictionaryRef Value = (const __CFDictionary *)ACFULogging::handleMessage();
    goto LABEL_59;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"Options");
  CFDictionaryRef v18 = Value;
  if (!Value) {
    goto LABEL_20;
  }
  CFTypeID v19 = CFGetTypeID(Value);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetTypeID();
  if ((const __CFDictionary *)v19 != Value) {
    goto LABEL_20;
  }
  uint64_t v46 = 0;
  BOOL v20 = CFDictionaryCreateMutableCopy(v11, 0, v18);
  uint64_t v21 = v20;
  uint64_t v46 = v20;
  if (v20) {
    uint64_t v22 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    uint64_t v22 = 0;
  }
  if (!v22)
  {
    ACFULogging::getLogInstance(v20);
    CFDictionaryRef Value = (const __CFDictionary *)ACFULogging::handleMessage();
    int v23 = 4;
    if (!v21) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  CFDictionaryAddValue(v20, @"ACFUDebugArgs", v13);
  CFDictionaryReplaceValue(v16, @"Options", v21);
  int v23 = 0;
  if (v21) {
LABEL_18:
  }
    CFRelease(v21);
LABEL_19:
  if (v22)
  {
LABEL_20:
    int v23 = 0;
    CFDictionaryRef v10 = v16;
    goto LABEL_21;
  }
  CFDictionaryRef v10 = 0;
LABEL_21:
  if (v13) {
    CFRelease(v13);
  }
  if (!v23)
  {
LABEL_27:
    LogInstance = (ACFULogging *)ACFULogging::getLogInstance(Value);
    CFDictionaryRef Value = (const __CFDictionary *)ACFULogging::initLog(LogInstance, v10, a2, a3);
    int v24 = (int)Value;
    uint64_t v16 = v48;
    if (!v48) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  int v24 = 1;
  if (v16) {
LABEL_28:
  }
    CFRelease(v16);
LABEL_29:
  if (v24)
  {
    ACFULogging::getLogInstance(Value);
    ACFULogging::handleMessage();
    std::string::basic_string[abi:ne180100]<0>(v40, "Failed to init logging");
    uint64_t v33 = (ACFULogging *)ACFUError::addError();
    CFStringRef v27 = 0;
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    uint64_t v32 = (void **)v40;
    goto LABEL_43;
  }
  if (a2)
  {
    qword_26AA8EFC0 = (uint64_t)a2;
    *(void *)algn_26AA8EFC8 = a3;
  }
  if (_MergedGlobals_4 == -1)
  {
    if (qword_26AA8EFD0) {
      goto LABEL_34;
    }
    goto LABEL_53;
  }
  dispatch_once(&_MergedGlobals_4, &__block_literal_global_2);
  if (!qword_26AA8EFD0)
  {
LABEL_53:
    ACFULogging::getLogInstance(Value);
    ACFULogging::handleMessage();
    std::string::basic_string[abi:ne180100]<0>(v38, "Failed to register BasebandUpdater CFRuntimeClass");
    uint64_t v33 = (ACFULogging *)ACFUError::addError();
    CFStringRef v27 = 0;
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    uint64_t v32 = (void **)v38;
LABEL_43:
    operator delete(*v32);
    goto LABEL_44;
  }
LABEL_34:
  Instance = (void *)_CFRuntimeCreateInstance();
  CFStringRef v27 = Instance;
  if (Instance)
  {
    if (!a1)
    {
LABEL_39:
      ACFULogging::getLogInstance((ACFULogging *)Instance);
      ACFULogging::handleMessage();
      goto LABEL_40;
    }
    uint64_t v28 = (BasebandUpdater *)operator new(0x20uLL);
    BasebandUpdater::BasebandUpdater(v28, v27, a1);
    v27[2] = v28;
    uint64_t v30 = Instance[2];
    uint64_t v29 = (std::__shared_weak_count *)Instance[3];
    if (v29
      && (atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if (v30) {
        goto LABEL_39;
      }
    }
    else if (v30)
    {
      goto LABEL_39;
    }
    ACFULogging::getLogInstance((ACFULogging *)Instance);
    ACFULogging::handleMessage();
    uint64_t v34 = (char *)operator new(0x30uLL);
    long long v35 = xmmword_21DFAD3F0;
    strcpy(v34, "Failed to create BasebandUpdater instance");
    ACFUError::addError();
    uint64_t v32 = (void **)&v34;
    goto LABEL_43;
  }
  ACFULogging::getLogInstance(0);
  ACFULogging::handleMessage();
  std::string::basic_string[abi:ne180100]<0>(v36, "Failed to create BasebandUpdater CFRuntime object");
  uint64_t v33 = (ACFULogging *)ACFUError::addError();
  CFStringRef v27 = 0;
  if (v37 < 0)
  {
    uint64_t v32 = (void **)v36;
    goto LABEL_43;
  }
LABEL_44:
  ACFULogging::getLogInstance(v33);
  ACFULogging::handleMessage();
  if (a4 && ACFUError::hasError((ACFUError *)v42)) {
    *a4 = ACFUError::getCFError((ACFUError *)v42);
  }
  if (v27)
  {
    CFRelease(v27);
    CFStringRef v27 = 0;
  }
LABEL_40:
  MEMORY[0x223C1D8A0](v42);
  return v27;
}

void sub_21DF4878C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a22 < 0)
  {
    operator delete(__p);
    MEMORY[0x223C1D8A0](&a35);
    _Unwind_Resume(a1);
  }
  MEMORY[0x223C1D8A0](&a35);
  _Unwind_Resume(a1);
}

uint64_t __BasebandUpdaterCreate_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_26AA8EFD0 = result;
  return result;
}

void *BasebandUpdaterObjDestroy(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      CFDictionaryRef v2 = (ACFULogging *)(*(uint64_t (**)(void *))(*result + 8))(result);
      ACFULogging::getLogInstance(v2);
      uint64_t result = (void *)ACFULogging::handleMessage();
      v1[2] = 0;
    }
  }
  return result;
}

CFStringRef BasebandUpdaterObjDescribe(CFStringRef result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFAllocatorRef v2 = CFGetAllocator(result);
    CFAllocatorRef v3 = CFGetAllocator(v1);
    return CFStringCreateWithFormat(v2, 0, @"<BasebandUpdater %p [%p]>{}", v1, v3);
  }
  return result;
}

uint64_t BasebandUpdaterExecCommand(uint64_t a1, ACFURestore *a2, uint64_t a3, const __CFDictionary **a4, uint64_t *a5)
{
  v85[0] = 0xAAAAAAAAAAAAAAAALL;
  v85[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (ACFULogging *)MEMORY[0x223C1D890](v85, @"BasebandUpdaterExecCommand");
  if (!a1)
  {
    ACFULogging::getLogInstance(v9);
    ACFULogging::handleMessage();
    v84[23] = 21;
    strcpy(v84, "NULL updater argument");
    ACFUError::addError();
    if (!a5) {
      goto LABEL_123;
    }
    goto LABEL_15;
  }
  CFDictionaryRef v10 = *(ACFULogging **)(a1 + 16);
  if (!v10
  {
    ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage();
    unint64_t v82 = (char *)operator new(0x20uLL);
    long long v83 = xmmword_21DFAB640;
    strcpy(v82, "NULL BasebandUpdater object");
    ACFUError::addError();
    operator delete(v82);
    if (!a5) {
      goto LABEL_123;
    }
LABEL_15:
    uint64_t CFError = ACFUError::getCFError((ACFUError *)v85);
    goto LABEL_16;
  }
  uint64_t v12 = v10;
  CFStringRef v13 = (const __CFString *)ACFURestore::restoreCommand(a2, v11);
  if (v13 != -1)
  {
    CFRange v14 = (std::__shared_weak_count *)*((void *)v12 + 3);
    v80.__r_.__value_.__r.__words[0] = *((void *)v12 + 2);
    v80.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = ACFURestore::executeCommand();
    char v16 = v15;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v16)
      {
LABEL_68:
        uint64_t v18 = 1;
        goto LABEL_124;
      }
    }
    else if (v15)
    {
      goto LABEL_68;
    }
LABEL_65:
    uint64_t v48 = *((void *)v12 + 2);
    uint64_t v49 = (std::__shared_weak_count *)*((void *)v12 + 3);
    if (v49)
    {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      int v50 = *(unsigned __int8 *)(v48 + 376);
      if (atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (v50) {
          goto LABEL_68;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (v50) {
          goto LABEL_68;
        }
      }
    }
    else if (*(unsigned char *)(v48 + 376))
    {
      goto LABEL_68;
    }
    ACFULogging::getLogInstance((ACFULogging *)v15);
    CFStringGetCStringPtr((CFStringRef)a2, 0x8000100u);
    ACFULogging::handleMessage();
    if (a5)
    {
      int v77 = (ACFUError *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v51 = (ACFURestore *)*((void *)v12 + 2);
      long long v52 = (std::__shared_weak_count *)*((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      v80.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ACFURestore::getErrorHandle((uint64_t *)&v77, v51);
      if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      memset(&v80, 0, sizeof(v80));
      BOOL v76 = 0;
      int v53 = (ACFUError *)*((void *)v12 + 2);
      uint64_t v54 = (std::__shared_weak_count *)*((void *)v12 + 3);
      char v74 = v53;
      long long v75 = v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BasebandCrashReasoptrdiff_t n = BasebandRestore::getBasebandCrashReason((uint64_t)v53, (uint64_t)&v80, &v76);
      if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      if (BasebandCrashReason)
      {
        if (v76)
        {
          ACFUError::clearError(v77);
          std::string __p = operator new(0x60uLL);
          long long v73 = xmmword_21DFAD220;
          strcpy((char *)__p, "Emergency coredump detected; route this failure to the baseband firmware team for analysis");
          ACFUError::addError();
          operator delete(__p);
          uint64_t v56 = ACFUError::getCFError(v77);
LABEL_117:
          *a5 = v56;
LABEL_118:
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v80.__r_.__value_.__l.__data_);
          }
          char v68 = (std::__shared_weak_count *)v78;
          if (v78 && !atomic_fetch_add((atomic_ullong *volatile)(v78 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
          goto LABEL_123;
        }
        ACFUError::clearError(v77);
        int v62 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v80.__r_.__value_.__l.__size_;
        }
        unint64_t v64 = size + 18;
        unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
        if (size + 18 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v64 >= 0x17)
        {
          uint64_t v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v64 | 7) != 0x17) {
            uint64_t v66 = v64 | 7;
          }
          unint64_t v71 = (v66 + 1) | 0x8000000000000000;
          long long v70 = (char *)operator new(v66 + 1);
          *((_WORD *)v70 + 8) = 8250;
          *(_OWORD *)long long v70 = *(_OWORD *)"Baseband crashed: ";
          int v65 = v70 + 18;
        }
        else
        {
          unint64_t v71 = 8250;
          long long v70 = *(char **)"Baseband crashed: ";
          int v65 = (char *)&v71 + 2;
          if (!size)
          {
LABEL_114:
            v65[size] = 0;
            ACFUError::addError();
            if (SHIBYTE(v71) < 0) {
              operator delete(v70);
            }
            uint64_t v56 = ACFUError::getCFError(v77);
            goto LABEL_117;
          }
        }
        if (v62 >= 0) {
          unint64_t v67 = &v80;
        }
        else {
          unint64_t v67 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        memmove(v65, v67, size);
        goto LABEL_114;
      }
      uint64_t v57 = *((void *)v12 + 2);
      char v58 = (std::__shared_weak_count *)*((void *)v12 + 3);
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::regex_token_iterator<std::__wrap_iter<const char *>, char> v60 = *(ACFUError **)(v57 + 352);
      int v59 = *(std::__shared_weak_count **)(v57 + 360);
      char v74 = v60;
      long long v75 = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      char v61 = v74;
      if ((ACFUError::hasError(v74) & 1) == 0)
      {
        if (!ACFUError::hasError(v77))
        {
LABEL_97:
          if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
          goto LABEL_118;
        }
        char v61 = v77;
      }
      *a5 = ACFUError::getCFError(v61);
      goto LABEL_97;
    }
LABEL_123:
    uint64_t v18 = 0;
    goto LABEL_124;
  }
  CFTypeID v19 = (ACFULogging *)BasebandRestore::basebandRestoreCommand((CFStringRef)a2, v13);
  int v20 = (int)v19;
  switch((int)v19)
  {
    case -1:
      ACFULogging::getLogInstance(v19);
      CFStringGetCStringPtr((CFStringRef)a2, 0x8000100u);
      ACFULogging::handleMessage();
      CStringPtr = (char *)CFStringGetCStringPtr((CFStringRef)a2, 0x8000100u);
      std::string::basic_string[abi:ne180100]<0>(&v80, CStringPtr);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("BasebandUpdater unsupported command: ", &v80, &v79);
      ACFUError::addError();
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v79.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_20:
          if (!a5) {
            goto LABEL_123;
          }
LABEL_130:
          uint64_t CFError = ACFUError::getCFError((ACFUError *)v85);
          break;
        }
      }
      else if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(v80.__r_.__value_.__l.__data_);
      if (!a5) {
        goto LABEL_123;
      }
      goto LABEL_130;
    case 0:
      char v37 = (BasebandRestore *)*((void *)v12 + 2);
      std::string::size_type v38 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      v80.__r_.__value_.__l.__size_ = v38;
      if (v38) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = BasebandRestore::bootCmd(v37);
      goto LABEL_64;
    case 1:
      char v31 = (BasebandRestore *)*((void *)v12 + 2);
      std::string::size_type v32 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      v80.__r_.__value_.__l.__size_ = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = BasebandRestore::coredumpCmd(v31);
      goto LABEL_64;
    case 2:
      std::string::size_type v33 = *((void *)v12 + 2);
      std::string::size_type v34 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = v33;
      v80.__r_.__value_.__l.__size_ = v34;
      if (v34) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = (*(uint64_t (**)(std::string::size_type, const __CFDictionary **))(*(void *)v33 + 48))(v33, a4);
      goto LABEL_64;
    case 3:
      char v25 = (BasebandRestore *)*((void *)v12 + 2);
      std::string::size_type v26 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v80.__r_.__value_.__l.__size_ = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = BasebandRestore::copyBasebandMigrationDataCmd(v25, a4);
      goto LABEL_64;
    case 4:
      char v39 = (BasebandRestore *)*((void *)v12 + 2);
      std::string::size_type v40 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      v80.__r_.__value_.__l.__size_ = v40;
      if (v40) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = BasebandRestore::restoreBasebandMigrationDataCmd(v39, a4);
      goto LABEL_64;
    case 5:
      char v41 = (std::__shared_weak_count **)*((void *)v12 + 2);
      std::string::size_type v42 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      v80.__r_.__value_.__l.__size_ = v42;
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = BasebandRestore::pingCmd(v41, a4);
      goto LABEL_64;
    case 6:
      std::string::size_type v35 = *((void *)v12 + 2);
      std::string::size_type v36 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = v35;
      v80.__r_.__value_.__l.__size_ = v36;
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = (*(uint64_t (**)(std::string::size_type, const __CFDictionary **))(*(void *)v35 + 56))(v35, a4);
      goto LABEL_64;
    case 7:
      std::string::size_type v45 = *((void *)v12 + 2);
      std::string::size_type v46 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = v45;
      v80.__r_.__value_.__l.__size_ = v46;
      if (v46) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = (*(uint64_t (**)(std::string::size_type))(*(void *)v45 + 64))(v45);
      goto LABEL_64;
    case 8:
      uint64_t v29 = (const __CFDictionary **)*((void *)v12 + 2);
      std::string::size_type v30 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      v80.__r_.__value_.__l.__size_ = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = BasebandRestore::provisionCmd(v29, a4);
      goto LABEL_64;
    case 9:
      std::string::size_type v43 = *((void *)v12 + 2);
      std::string::size_type v44 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = v43;
      v80.__r_.__value_.__l.__size_ = v44;
      if (v44) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = (*(uint64_t (**)(std::string::size_type))(*(void *)v43 + 72))(v43);
      goto LABEL_64;
    case 10:
      std::string::size_type v22 = *((void *)v12 + 2);
      std::string::size_type v23 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = v22;
      v80.__r_.__value_.__l.__size_ = v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = (*(uint64_t (**)(std::string::size_type))(*(void *)v22 + 80))(v22);
      goto LABEL_64;
    case 11:
      std::string::size_type v27 = *((void *)v12 + 2);
      std::string::size_type v28 = *((void *)v12 + 3);
      v80.__r_.__value_.__r.__words[0] = v27;
      v80.__r_.__value_.__l.__size_ = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = (*(uint64_t (**)(std::string::size_type))(*(void *)v27 + 88))(v27);
LABEL_64:
      unsigned __int8 v47 = v24;
      uint64_t v15 = std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&v80);
      if ((v47 & 1) == 0) {
        goto LABEL_65;
      }
      goto LABEL_68;
    default:
      ACFULogging::getLogInstance(v19);
      ACFULogging::handleMessage();
      std::to_string(&v80, v20);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Logic error: invalid BasebandUpdater command: ", &v80, &v81);
      ACFUError::addError();
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v81.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_53:
          if (!a5) {
            goto LABEL_123;
          }
          goto LABEL_127;
        }
      }
      else if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_53;
      }
      operator delete(v80.__r_.__value_.__l.__data_);
      if (!a5) {
        goto LABEL_123;
      }
LABEL_127:
      uint64_t CFError = ACFUError::getCFError((ACFUError *)v85);
      break;
  }
LABEL_16:
  uint64_t v18 = 0;
  *a5 = CFError;
LABEL_124:
  MEMORY[0x223C1D8A0](v85);
  return v18;
}

void sub_21DF494CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  MEMORY[0x223C1D8A0](v42 - 80);
  _Unwind_Resume(a1);
}

void sub_21DF495F4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    MEMORY[0x223C1D8A0](v1 - 80);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21DF49640);
}

void sub_21DF49618(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 113) < 0)
  {
    operator delete(*(void **)(v1 - 136));
    MEMORY[0x223C1D8A0](v1 - 80);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21DF49640);
}

uint64_t BasebandUpdaterIsDone(uint64_t a1, void *a2)
{
  v19[0] = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x223C1D890](v19, @"BasebandUpdaterIsDone");
  if (!a1) {
    goto LABEL_24;
  }
  uint64_t v4 = *(ACFULogging **)(a1 + 16);
  if (!v4
  {
    ACFULogging::getLogInstance(v4);
    ACFULogging::handleMessage();
    std::string __p = operator new(0x20uLL);
    long long v18 = xmmword_21DFAB640;
    strcpy((char *)__p, "NULL BasebandUpdater object");
    ACFUError::addError();
    operator delete(__p);
    if (a2) {
      *a2 = ACFUError::getCFError((ACFUError *)v19);
    }
    goto LABEL_22;
  }
  uint64_t v5 = v4;
  CFDictionaryRef v6 = (ACFUError *)*((void *)v4 + 2);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 3);
  uint64_t v15 = v6;
  unint64_t v16 = (unint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  isRestoreComplete = (ACFULogging *)ACFURestore::isRestoreComplete(v6);
  int v9 = (int)isRestoreComplete;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v9) {
      goto LABEL_9;
    }
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  if (!isRestoreComplete) {
    goto LABEL_24;
  }
LABEL_9:
  ACFULogging::getLogInstance(isRestoreComplete);
  ACFULogging::handleMessage();
  uint64_t v15 = (ACFUError *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  CFDictionaryRef v10 = (ACFURestore *)*((void *)v5 + 2);
  CFStringRef v11 = (std::__shared_weak_count *)*((void *)v5 + 3);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ACFURestore::getErrorHandle((uint64_t *)&v15, v10);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (a2 && ACFUError::hasError(v15)) {
    *a2 = ACFUError::getCFError(v15);
  }
  uint64_t v12 = (std::__shared_weak_count *)v16;
  if (v16 && !atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_22:
  uint64_t v13 = 1;
LABEL_25:
  MEMORY[0x223C1D8A0](v19);
  return v13;
}

void sub_21DF49940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x223C1D8A0](v6 - 48);
  _Unwind_Resume(a1);
}

void sub_21DF4995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x223C1D8A0](v4 - 48);
  _Unwind_Resume(a1);
}

void sub_21DF49978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x223C1D8A0](v6 - 48);
  _Unwind_Resume(a1);
}

void sub_21DF49994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    MEMORY[0x223C1D8A0](v21 - 48);
    _Unwind_Resume(a1);
  }
  MEMORY[0x223C1D8A0](v21 - 48);
  _Unwind_Resume(a1);
}

uint64_t BasebandUpdaterSetOptions(void *a1, const __CFDictionary *a2, void *a3)
{
  v28[0] = 0xAAAAAAAAAAAAAAAALL;
  v28[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (ACFULogging *)MEMORY[0x223C1D890](v28, @"BasebandUpdaterSetOptions");
  if (a1 && a2)
  {
    uint64_t v7 = (const void *)a1[2];
    if (v7)
    {
      CFDictionaryRef v10 = (void *)*((void *)v8 + 2);
      int v9 = (std::__shared_weak_count *)*((void *)v8 + 3);
      std::string::size_type v22 = v10;
      std::string::size_type v23 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFStringRef v11 = (const void *)v10[15];
      if (v11) {
        CFRelease(v11);
      }
      v10[15] = a2;
      AMSupportSafeRetain();
      uint64_t v12 = (ACFULogging *)(*(uint64_t (**)(void *))(*v10 + 104))(v10);
      int v13 = (int)v12;
      if (v12)
      {
        ACFULogging::getLogInstance(v12);
        uint64_t v12 = (ACFULogging *)ACFULogging::handleMessage();
      }
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v13)
      {
        ACFULogging::getLogInstance(v12);
        ACFULogging::handleMessage();
        std::string::basic_string[abi:ne180100]<0>(v20, "Failed to setOptions on BasebandUpdater obj");
        ACFUError::addError();
        if (v21 < 0)
        {
          CFRange v14 = (void **)v20;
LABEL_24:
          operator delete(*v14);
          goto LABEL_25;
        }
        goto LABEL_25;
      }
    }
    else
    {
      LogInstance = (ACFULogging *)ACFULogging::getLogInstance(0);
      inited = (ACFULogging *)ACFULogging::initLog(LogInstance, a2, (void (*)(void *, const char *))qword_26AA8EFC0, *(void **)algn_26AA8EFC8);
      if (inited)
      {
        ACFULogging::getLogInstance(inited);
        ACFULogging::handleMessage();
        std::string::basic_string[abi:ne180100]<0>(v24, "Failed to init logging");
        ACFUError::addError();
        if (v25 < 0)
        {
          CFRange v14 = (void **)v24;
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      uint64_t v17 = (BasebandUpdater *)operator new(0x20uLL);
      BasebandUpdater::BasebandUpdater(v17, a1, a2);
      a1[2] = v17;
    }
    uint64_t v18 = 1;
    goto LABEL_19;
  }
  ACFULogging::getLogInstance(v6);
  ACFULogging::handleMessage();
  std::string::basic_string[abi:ne180100]<0>(v26, "NULL updater and/or options arguments");
  ACFUError::addError();
  if (v27 < 0)
  {
    CFRange v14 = (void **)v26;
    goto LABEL_24;
  }
LABEL_25:
  if (a3 && ACFUError::hasError((ACFUError *)v28))
  {
    uint64_t v18 = 0;
    *a3 = ACFUError::getCFError((ACFUError *)v28);
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_19:
  MEMORY[0x223C1D8A0](v28);
  return v18;
}

void sub_21DF49CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    MEMORY[0x223C1D8A0](v25 - 48);
    _Unwind_Resume(a1);
  }
  MEMORY[0x223C1D8A0](v25 - 48);
  _Unwind_Resume(a1);
}

ACFULogging *BasebandUpdaterRegisterLogSink(uint64_t a1, void *a2, void (*a3)(void *, const char *))
{
  if (!a1)
  {
    ACFULogging::getLogInstance(0);
    return (ACFULogging *)ACFULogging::handleMessage();
  }
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = v5[2];
    uint64_t v7 = (std::__shared_weak_count *)v5[3];
    if (!v7)
    {
      CFDictionaryRef v13 = *(const __CFDictionary **)(v6 + 120);
      LogInstance = (ACFULogging *)ACFULogging::getLogInstance((ACFULogging *)v5);
      uint64_t result = (ACFULogging *)ACFULogging::initLog(LogInstance, v13, a3, a2);
      if (result) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    CFDictionaryRef v8 = *(const __CFDictionary **)(v6 + 120);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      CFDictionaryRef v10 = (ACFULogging *)ACFULogging::getLogInstance(v9);
      uint64_t result = (ACFULogging *)ACFULogging::initLog(v10, v8, a3, a2);
      if (!result) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  else
  {
    CFDictionaryRef v8 = 0;
  }
  uint64_t v12 = (ACFULogging *)ACFULogging::getLogInstance((ACFULogging *)v5);
  uint64_t result = (ACFULogging *)ACFULogging::initLog(v12, v8, a3, a2);
  if (result)
  {
LABEL_10:
    ACFULogging::getLogInstance(result);
    return (ACFULogging *)ACFULogging::handleMessage();
  }
LABEL_13:
  qword_26AA8EFC0 = (uint64_t)a3;
  *(void *)algn_26AA8EFC8 = a2;
  return result;
}

double BBUPersonalizationParameters::create(BBUPersonalizationParameters *this)
{
  int PersonalizationParameters = capabilities::updater::getPersonalizationParameters(this);
  if (PersonalizationParameters)
  {
    if (PersonalizationParameters == 1)
    {
      uint64_t v4 = (char *)operator new(0x60uLL);
      double result = 0.0;
      *(_OWORD *)(v4 + 8) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 72) = 0u;
      *((_DWORD *)v4 + 22) = 0;
      *(void *)uint64_t v4 = &unk_26CECD338;
    }
    else if (PersonalizationParameters == 2)
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Common/BBUPersonalizationParameters.cpp", 0x15u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v6, v7, v8, v9);
    }
  }
  else
  {
    CFAllocatorRef v3 = (char *)operator new(0x60uLL);
    double result = 0.0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_DWORD *)v3 + 22) = 0;
    *(void *)CFAllocatorRef v3 = &unk_26CECF6F0;
  }
  return result;
}

void sub_21DF4A048(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUPersonalizationParameters::~BBUPersonalizationParameters(BBUPersonalizationParameters *this)
{
  *(void *)this = &unk_26CECD5B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
}

uint64_t BBUPersonalizationParameters::setPublicKeyHash(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 40) = a2;
  return result;
}

uint64_t BBUEUR2Programmer::EUR2Item::EUR2Item(uint64_t a1, int a2, void *lpsrc)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &unk_26CECD600;
  *(void *)(a1 + 16) = 0;
  if (a2 != 8193)
  {
    if (a2 != 0x2000)
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 85, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x38u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid BBU Programmer item type.\")", v11, v12, v13, v14);
LABEL_11:
    }
    if (lpsrc)
    {
      goto LABEL_7;
    }
LABEL_9:
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x3Bu, (ctu::LogMessageBuffer *)"Assertion failure(fImage && \"BBU Programmer item creation failed.\")", v8, v9, v10, v14);
    goto LABEL_11;
  }
  if (!lpsrc) {
    goto LABEL_9;
  }
LABEL_7:
  *(void *)(a1 + 16) = v5;
  if (!v5) {
    goto LABEL_9;
  }
  return a1;
}

void sub_21DF4A360(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF4A374(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::BBUEUR2Programmer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (capabilities::programmer *)BBUProgrammer::BBUProgrammer(a1, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_26CECCCB8;
  uint64_t v6 = (capabilities::programmer *)capabilities::programmer::connectAttemptCount(v5);
  *(_DWORD *)(a1 + 68) = v6;
  uint64_t v7 = (capabilities::programmer *)capabilities::programmer::connectTimeout(v6);
  *(_DWORD *)(a1 + 72) = v7;
  *(_DWORD *)(a1 + 76) = capabilities::programmer::commandTimeout(v7);
  *(unsigned char *)(a1 + 65) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26CECD638;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 88), 0);
  *(void *)(a1 + 4284) = 0x4000000000000;
  *(unsigned char *)(a1 + 4292) = 0;
  if ((TelephonyUtilRingBufferInitialize() & 1) == 0)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 95, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x60u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to initialize ring buffer.\")", v10, v11, v12, v13);
  }
  return a1;
}

void sub_21DF4A49C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  pthread_mutex_destroy(v2);
  BBUICEProgrammer::~BBUICEProgrammer(v1);
  _Unwind_Resume(a1);
}

void BBUEUR2Programmer::~BBUEUR2Programmer(BBUEUR2Programmer *this)
{
  *(void *)this = &unk_26CECD638;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(void *)this = &unk_26CECEA50;
  uint64_t v2 = (char *)this + 40;
  for (uint64_t i = *((void *)this + 6); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*((void *)this + 7))
  {
    uint64_t v6 = *((void *)this + 5);
    uint64_t v5 = (char *)*((void *)this + 6);
    uint64_t v7 = *(void *)v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    *((void *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(void *)this = &unk_26CECD638;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(void *)this = &unk_26CECEA50;
  uint64_t v2 = (char *)this + 40;
  for (uint64_t i = *((void *)this + 6); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*((void *)this + 7))
  {
    uint64_t v6 = *((void *)this + 5);
    uint64_t v5 = (char *)*((void *)this + 6);
    uint64_t v7 = *(void *)v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    *((void *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t vars8;

  *(void *)this = &unk_26CECD638;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(void *)this = &unk_26CECEA50;
  uint64_t v2 = (char *)this + 40;
  for (uint64_t i = *((void *)this + 6); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*((void *)this + 7))
  {
    uint64_t v6 = *((void *)this + 5);
    uint64_t v5 = (char *)*((void *)this + 6);
    uint64_t v7 = *(void *)v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    *((void *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }

  operator delete(this);
}

uint64_t BBUEUR2Programmer::connectForImage_nl(uint64_t a1, int *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Waiting for Hello");
  int v33 = -1431655766;
  std::string __p = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v4 = -8;
  do
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v40 = v6;
    long long v41 = v6;
    long long v38 = v6;
    long long v39 = v6;
    long long v36 = v6;
    long long v37 = v6;
    long long v34 = v6;
    long long v35 = v6;
    if (ETLSAHCommandReceive() && ETLSAHCommandParseHello())
    {
      if (v33 != 256 && *(_DWORD *)(a1 + 4284) == 2) {
        int v8 = 2;
      }
      else {
        int v8 = v33;
      }
      *a2 = v8;
      if ((ETLSAHCommandCreateHelloResponse() & 1) == 0)
      {
        exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0xA7u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v26, v27, v28, v29);
      }
      if (ETLSAHCommandSend())
      {
        char v9 = 0;
        uint64_t v10 = 0;
        goto LABEL_15;
      }
    }
  }
  while (!__CFADD__(v4++, 1));
  uint64_t v10 = 3;
  char v9 = 1;
LABEL_15:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v10);
  if (v9) {
    goto LABEL_32;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_20;
    }
  }
  if (gBBULogVerbosity >= 1)
  {
    char v14 = ETLSAHModeAsString();
    _BBULog(13, 1, "BBUProgrammer", "", "Hello received boot mode:  %s\n", v15, v16, v17, v14);
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }
  }
LABEL_20:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_21:
  if (gBBULogVerbosity >= 1)
  {
    char v18 = ETLSAHModeAsString();
    _BBULog(13, 1, "BBUProgrammer", "", "Hello response boot mode:  %s\n", v19, v20, v21, v18);
  }
LABEL_23:
  uint64_t v22 = HIBYTE(v32);
  if (v32 < 0) {
    uint64_t v22 = v31;
  }
  if (v22)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_32;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_32;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      p_p = &__p;
      if (v32 < 0) {
        LOBYTE(p_p) = (_BYTE)__p;
      }
      _BBULog(13, 1, "BBUProgrammer", "", "Hello reserved fields:  %s\n", v11, v12, v13, (char)p_p);
    }
  }
LABEL_32:
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  return v10;
}

void sub_21DF4AC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR2Programmer::disconnect(BBUEUR2Programmer *this)
{
  uint64_t result = BBUProgrammer::disconnect(this);
  if (!result)
  {
    if (*((unsigned char *)this + 65)) {
      *((unsigned char *)this + 65) = 0;
    }
  }
  return result;
}

uint64_t BBUEUR2Programmer::disconnectForImage_nl(BBUFeedback **this)
{
  BBUFeedback::handleBeginQuickStep(this[1], "Disconnecting");
  if (ETLSAHCommandCreateDone()) {
    ETLSAHCommandSend();
  }
  if (!ETLSAHCommandReceive() || !ETLSAHCommandParseDoneResponse())
  {
    uint64_t v5 = 3;
    goto LABEL_10;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v5 = 0;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v5 = 0;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_10;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(13, 0, "BBUProgrammer", "", "Status was %u\n", v2, v3, v4, 170);
    uint64_t v5 = 0;
  }
LABEL_10:
  (*(void (**)(BBUFeedback *, uint64_t))(*(void *)this[1] + 24))(this[1], v5);
  return v5;
}

uint64_t BBUEUR2Programmer::gatherPersonalizationParameters(BBUFeedback **this, char a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    int v32 = -1431655766;
    BBUFeedback::handleBeginPhase(this[1], "Gathering Personalization parameters...");
    if ((*((unsigned int (**)(BBUFeedback **, int *))*this + 23))(this, &v32))
    {
      uint64_t Nonce_nl = 48;
    }
    else if (v32 == 2)
    {
      uint64_t Nonce_nl = 28;
    }
    else if (v32 == 256)
    {
      char v14 = (UInt8 *)operator new(0x20uLL);
      uint64_t Nonce_nl = BBUEUR2Programmer::handleMaverickGetNonce_nl((uint64_t)this, a2);
      if (!Nonce_nl)
      {
        uint64_t v15 = operator new(0x10uLL);
        *uint64_t v15 = &unk_26CECE7E8;
        v15[1] = 0;
        v15[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v14 + 4, 20);
        uint64_t Nonce_nl = (uint64_t)BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)*((unsigned int *)v14 + 7));
        uint64_t v16 = BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber((BBUEURPersonalizationParameters::EURSerialNumber *)(v14 + 24), (const unsigned __int8 *)0x20);
        *a4 = *(_DWORD *)v14;
        operator delete(v14);
        uint64_t v17 = *((void *)a5 + 1);
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        *((void *)a5 + 1) = v15;
        uint64_t v18 = *((void *)a5 + 2);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        *((void *)a5 + 2) = Nonce_nl;
        (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 16))(a5, v16);
        uint64_t v19 = this[1];
        (*(void (**)(void **__return_ptr, void *))(*v15 + 24))(__p, v15);
        if (v31 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        BBUFeedback::handleComment(v19, "   NONCE: %s", (const char *)v20);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        if (v16)
        {
          uint64_t v21 = this[1];
          (*(void (**)(void **__return_ptr, void *))(*v16 + 24))(__p, v16);
          if (v31 >= 0) {
            std::string::size_type v23 = __p;
          }
          else {
            std::string::size_type v23 = (void **)__p[0];
          }
          unsigned __int8 v24 = BBUpdaterCommon::redactedString((BBUpdaterCommon *)v23, v22);
          BBUFeedback::handleComment(v21, "   SNUM: 0x%s", v24);
          if (v31 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v25 = this[1];
          int v26 = (*(uint64_t (**)(void))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3));
          BBUFeedback::handleComment(v25, "   CertID: %u", v26);
        }
        if (Nonce_nl)
        {
          uint64_t v27 = this[1];
          int v28 = (*(uint64_t (**)(uint64_t))(*(void *)Nonce_nl + 24))(Nonce_nl);
          BBUFeedback::handleComment(v27, "   CHIPID: 0x%08x", v28);
          uint64_t Nonce_nl = 0;
        }
      }
    }
    else
    {
      uint64_t Nonce_nl = 12;
    }
    (*(void (**)(BBUFeedback *, uint64_t))(*(void *)this[1] + 16))(this[1], Nonce_nl);
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t Nonce_nl = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return Nonce_nl;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t Nonce_nl = 0;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return Nonce_nl;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(13, 1, "BBUProgrammer", "", "Not in restore mode - skipping gathering Personalization parameters...\n", a6, a7, a8, v29);
      return 0;
    }
  }
  return Nonce_nl;
}

void sub_21DF4B244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR2Programmer::handleMaverickGetNonce_nl(uint64_t a1, char a2)
{
  uint64_t v7 = operator new[](0x400uLL);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_5;
    }
  }
  if (gBBULogVerbosity >= 1) {
    _BBULog(13, 1, "BBUProgrammer", "", "Starting Maverick Protocol\n", v4, v5, v6, v16);
  }
LABEL_5:
  if (ETLSAHCommandReceive()
    && ETLSAHCommandParseMaverickEraseQuery()
    && ETLSAHCommandCreateMaverickEraseResponse())
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      {
LABEL_10:
        if (gBBULogVerbosity >= 1) {
          _BBULog(13, 1, "BBUProgrammer", "", "Sending Erase Response: Length %u Type %u  Erase EFS %u\n", v8, v9, v10, v7[1]);
        }
      }
    }
    ETLSAHCommandSend();
    *(unsigned char *)(a1 + 65) = a2;
  }
  if (!ETLSAHCommandReceive())
  {
    uint64_t v14 = 3;
    goto LABEL_22;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
    {
LABEL_16:
      if (gBBULogVerbosity >= 1) {
        _BBULog(13, 1, "BBUProgrammer", "", "Checking Manifest Request: Length %u Type %u\n", v11, v12, v13, v7[1]);
      }
    }
  }
  if (ETLSAHCommandParseMaverickRootManifestQuery()) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 3;
  }
LABEL_22:
  operator delete[](v7);
  return v14;
}

uint64_t BBUEUR2Programmer::program(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, int a11, int a12)
{
  uint64_t v19 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  *(_DWORD *)(a1 + 4284) = a11;
  pthread_mutex_unlock(v19);
  if (BBUProgrammer::addItemsFromList(a1, (uint64_t)a6))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x177u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to add Programmer items from list.\")", v27, v28, v29, v30);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int))(*(void *)a1 + 160))(a1, a2, a3, a4, a5, a7, a9, a10, a12);
  pthread_mutex_lock(v19);
  if (a6)
  {
    if (a6[2])
    {
      uint64_t v22 = *a6;
      uint64_t v21 = (uint64_t *)a6[1];
      uint64_t v23 = *v21;
      *(void *)(v23 + 8) = *(void *)(*a6 + 8);
      **(void **)(v22 + 8) = v23;
      a6[2] = 0;
      if (v21 != a6)
      {
        do
        {
          unsigned __int8 v24 = (uint64_t *)v21[1];
          operator delete(v21);
          uint64_t v21 = v24;
        }
        while (v24 != a6);
      }
    }
    operator delete(a6);
  }
  pthread_mutex_unlock(v19);
  return v20;
}

void sub_21DF4B668(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::sendImage_nl(BBUFeedback **a1, void *lpsrc, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v39 = -1431655766;
  if (!lpsrc)
  {
    uint64_t v15 = 0;
    (*(void (**)(void))(*MEMORY[0x10] + 16))(MEMORY[0x10]);
    if (a5) {
      goto LABEL_3;
    }
    while (1)
    {
LABEL_9:
      uint64_t v22 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v39);
      if (v22) {
        return v22;
      }
      if (v39 != 256)
      {
        if (v39 == 2) {
          return 28;
        }
        int v23 = v15[2];
        if (v23 == 0x2000)
        {
          int v24 = 2;
          uint64_t v25 = a1[1];
          if (!*((unsigned char *)v25 + 44)) {
            goto LABEL_28;
          }
        }
        else
        {
          if (v23 != 8193)
          {
            uint64_t v33 = 0;
LABEL_30:
            uint64_t v20 = (*((uint64_t (**)(BBUFeedback **, void, uint64_t))*a1 + 22))(a1, *((void *)v15 + 2), v33);
            if (v33) {
              BBUFeedback::endProgressBarItem(a1[1]);
            }
            int v34 = 1;
            if (v20) {
              return v20;
            }
            goto LABEL_40;
          }
          int v24 = 5;
          uint64_t v25 = a1[1];
          if (!*((unsigned char *)v25 + 44))
          {
LABEL_28:
            uint64_t v33 = 1;
            goto LABEL_30;
          }
        }
        *((_DWORD *)v25 + 10) = v24;
        goto LABEL_28;
      }
      *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v40 = v26;
      long long v41 = v26;
      uint64_t Nonce_nl = BBUEUR2Programmer::handleMaverickGetNonce_nl((uint64_t)a1, a7);
      if (Nonce_nl)
      {
        uint64_t v20 = Nonce_nl;
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_39;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_39;
          }
        }
        char v31 = "failed getting nonce\n";
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v32 = (*((uint64_t (**)(BBUFeedback **, uint64_t, void, uint64_t, uint64_t, void, uint64_t))*a1 + 24))(a1, a3, v40, a6, a7, 0, a8);
        if (v32)
        {
          uint64_t v20 = v32;
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
              goto LABEL_39;
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
              goto LABEL_39;
            }
          }
          char v31 = "failed handling sahara send hashes command\n";
          if ((gBBULogVerbosity & 0x80000000) == 0) {
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v20 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
          if (!v20) {
            goto LABEL_39;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
              goto LABEL_39;
            }
LABEL_37:
            char v31 = "failed handling maverick end\n";
            if (gBBULogVerbosity < 0) {
              goto LABEL_39;
            }
LABEL_38:
            _BBULog(5, 0, "BBUProgrammer", "", v31, v28, v29, v30, v38);
            goto LABEL_39;
          }
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0) {
            goto LABEL_37;
          }
        }
      }
LABEL_39:
      int v34 = 0;
      if (v20) {
        return v20;
      }
LABEL_40:
      uint64_t v22 = BBUEUR2Programmer::disconnectForImage_nl(a1);
      if (v22) {
        int v35 = 1;
      }
      else {
        int v35 = v34;
      }
      if (v35 == 1) {
        return v22;
      }
    }
  }
  (*(void (**)(void))(**((void **)v15 + 2) + 16))(*((void *)v15 + 2));
  if ((a5 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v16 = (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*a1 + 24))(a1, a3, a4, a6, a7, 1, a8);
  if (v16)
  {
    uint64_t v20 = v16;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v20;
      }
      goto LABEL_6;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
    {
LABEL_6:
      if (gBBULogVerbosity < 0) {
        return v20;
      }
      uint64_t v21 = "failed handling sahara send hashes command\n";
LABEL_57:
      _BBULog(5, 0, "BBUProgrammer", "", v21, v17, v18, v19, v38);
      return v20;
    }
    return v20;
  }
  uint64_t v36 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
  if (v36)
  {
    uint64_t v20 = v36;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v20;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v20;
      }
    }
    if (gBBULogVerbosity < 0) {
      return v20;
    }
    uint64_t v21 = "failed handling maverick end\n";
    goto LABEL_57;
  }

  return BBUEUR2Programmer::disconnectForImage_nl(a1);
}

uint64_t BBUEUR2Programmer::collectCoreDump(BBUFeedback **a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new[](0x8000uLL);
  int v15 = -1431655766;
  BBUFeedback::handleBeginPhase(a1[1], "Collecting core dump...");
  if (ETLSAHGetDebugRecordCount())
  {
    if (is_mul_ok(v15, 0x34uLL)) {
      size_t v5 = 52 * v15;
    }
    else {
      size_t v5 = -1;
    }
    uint64_t v12 = operator new[](v5);
    int v6 = ETLSAHGetDebugTable();
  }
  else
  {
    BBUFeedback::handleComment(a1[1], "Failed to get debug table\n");
    uint64_t v12 = 0;
    int v6 = 0;
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
    {
LABEL_9:
      if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
  if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)) {
    goto LABEL_15;
  }
LABEL_10:
  BBUFeedback::handleComment(a1[1], "Parsing crash reason...");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v14 = *(std::string *)a2;
  }
  (*((void (**)(BBUFeedback **, std::string *))*a1 + 26))(a1, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (v6 && ETLSAHCommandCreateReset())
  {
    int v7 = ETLSAHCommandSend();
    uint64_t v8 = a1[1];
    uint64_t v9 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    int v7 = 0;
    uint64_t v8 = a1[1];
    uint64_t v9 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
  }
  uint64_t v9 = *(const char **)a2;
LABEL_21:
  BBUFeedback::handleComment(v8, "Final coredump at %s:", v9);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  ctu::fs::iterate_folder();
  if (v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 3;
  }
  operator delete[](v4);
  if (v12) {
    operator delete[](v12);
  }
  (*(void (**)(BBUFeedback *, uint64_t))(*(void *)a1[1] + 16))(a1[1], v10);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_21DF4C4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN17BBUEUR2Programmer15collectCoreDumpENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v9.st_blkstd::string::size_type size = v4;
  *(timespec *)v9.st_qspare = v4;
  v9.st_birthtimespec = v4;
  *(timespec *)&v9.st_std::string::size_type size = v4;
  v9.st_mtimespec = v4;
  v9.st_ctimespec = v4;
  *(timespec *)&v9.st_uid = v4;
  v9.st_atimespec = v4;
  *(timespec *)&v9.st_dev = v4;
  size_t v5 = (const char *)(a2 + 21);
  memset(&v8, 170, sizeof(v8));
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v8 = *(std::string *)(a1 + 40);
  }
  ctu::path_join_impl();
  int v6 = *(unsigned __int8 *)(a2 + 20);
  if (v6 == 4)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  <DIR>", v5);
  }
  else if (v6 == 10 || v6 == 8)
  {
    memset(&v9, 0, sizeof(v9));
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v8;
    }
    else {
      int v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    stat((const char *)v7, &v9);
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  0x%-10llx", v5, v9.st_size);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_21DF4C6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN17BBUEUR2Programmer16captureRecord_nlENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPK28ETLSAHDebugDataFieldRecord_t_block_invoke(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      return;
    }
  }
  if (gBBULogVerbosity >= 1) {
    _BBULog(13, 1, "BBUProgrammer", "", "%s: ... %0.1f%c\n", a6, a7, a8, a3 + 32);
  }
}

uint64_t BBUEUR2Programmer::sendImageInternal_nl(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v6 = *(void *)(a1 + 8);
  *((unsigned char *)&v86.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v86, "Sending Image '");
  int v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    std::string::size_type v84 = v9;
    int64_t v85 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v85) = v8;
  p_dst = (void **)&__dst;
  if (v8) {
LABEL_8:
  }
    memmove(p_dst, v7, v9);
  *((unsigned char *)p_dst + v9) = 0;
  if (v85 >= 0) {
    std::string v13 = (const std::string::value_type *)&__dst;
  }
  else {
    std::string v13 = (const std::string::value_type *)__dst;
  }
  if (v85 >= 0) {
    std::string::size_type v14 = HIBYTE(v85);
  }
  else {
    std::string::size_type v14 = v84;
  }
  int v15 = std::string::append(&v86, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  char v82 = 1;
  strcpy(__s, "'");
  uint64_t v17 = std::string::append(&v87, __s, 1uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  std::string::size_type v89 = v17->__r_.__value_.__r.__words[2];
  long long v88 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)v6 + 32))(v6, &v88, 0, v5);
  if (SHIBYTE(v89) < 0)
  {
    operator delete((void *)v88);
    if ((v82 & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_34;
    }
  }
  else if ((v82 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v85) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_35:
    operator delete(__dst);
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85) < 0) {
    goto LABEL_35;
  }
LABEL_19:
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_20;
  }
LABEL_36:
  operator delete(v86.__r_.__value_.__l.__data_);
LABEL_20:
  uint64_t v19 = operator new[](0x100000uLL);
  LODWORD(v88) = -1431655766;
  LODWORD(v87.__r_.__value_.__l.__data_) = -1431655766;
  LODWORD(v86.__r_.__value_.__l.__data_) = -1431655766;
  double Current = CFAbsoluteTimeGetCurrent();
  if ((ETLSAHCommandReceive() & 1) == 0) {
    goto LABEL_26;
  }
  char Data = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_25;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_25;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v21, v22, v23, v88);
  }
LABEL_25:
  if (Data) {
    goto LABEL_89;
  }
LABEL_26:
  if (!ETLSAHCommandReceive()) {
    goto LABEL_41;
  }
  char v28 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_40;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_40:
      if (v28) {
        goto LABEL_89;
      }
      goto LABEL_41;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_40;
  }
  _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v25, v26, v27, v88);
  if (v28) {
    goto LABEL_89;
  }
LABEL_41:
  if (!ETLSAHCommandReceive()) {
    goto LABEL_49;
  }
  char v32 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_48;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_48:
      if (v32) {
        goto LABEL_89;
      }
      goto LABEL_49;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_48;
  }
  _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v29, v30, v31, v88);
  if (v32) {
    goto LABEL_89;
  }
LABEL_49:
  if (!ETLSAHCommandReceive()) {
    goto LABEL_57;
  }
  char v36 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_56;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_56:
      if (v36) {
        goto LABEL_89;
      }
      goto LABEL_57;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_56;
  }
  _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v33, v34, v35, v88);
  if (v36) {
    goto LABEL_89;
  }
LABEL_57:
  if (!ETLSAHCommandReceive()) {
    goto LABEL_65;
  }
  char v40 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_64;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_64:
      if (v40) {
        goto LABEL_89;
      }
      goto LABEL_65;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_64;
  }
  _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v37, v38, v39, v88);
  if (v40) {
    goto LABEL_89;
  }
LABEL_65:
  if (!ETLSAHCommandReceive()) {
    goto LABEL_73;
  }
  char v44 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_72;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_72:
      if (v44) {
        goto LABEL_89;
      }
      goto LABEL_73;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_72;
  }
  _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v41, v42, v43, v88);
  if (v44) {
    goto LABEL_89;
  }
LABEL_73:
  if (!ETLSAHCommandReceive()) {
    goto LABEL_81;
  }
  char v48 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_80;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_80:
      if (v48) {
        goto LABEL_89;
      }
LABEL_81:
      if (!ETLSAHCommandReceive()) {
        goto LABEL_86;
      }
      int v52 = ETLSAHCommandParseReadData();
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          goto LABEL_88;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          goto LABEL_88;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v49, v50, v51, v88);
        if (v52) {
          goto LABEL_89;
        }
        goto LABEL_86;
      }
LABEL_88:
      if (v52) {
        goto LABEL_89;
      }
LABEL_86:
      int v53 = 0;
      uint64_t v54 = 3;
      goto LABEL_126;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_80;
  }
  _BBULog(5, 0, "BBUProgrammer", "", "First request image ID %u, data offset %u, data length %u\n", v45, v46, v47, v88);
  if ((v48 & 1) == 0) {
    goto LABEL_81;
  }
LABEL_89:
  unsigned int v55 = v86.__r_.__value_.__l.__data_;
  int v56 = LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_);
  if (v5 < LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_)) {
    goto LABEL_140;
  }
  double v57 = 1.0 / (double)v5;
  unsigned int v79 = v5;
  while (2)
  {
    if (v5 == v56)
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
      unsigned int v55 = v86.__r_.__value_.__l.__data_;
    }
    for (char i = 0; ; char i = v64 ^ 1)
    {
      uint64_t v60 = v55 >= 0x100000 ? 0x100000 : v55;
      (*(void (**)(uint64_t, void *, uint64_t, void))(*(void *)a2 + 24))(a2, v19, v60, LODWORD(v87.__r_.__value_.__l.__data_));
      int v64 = ETLSAHSendReadData();
      if (!v64) {
        break;
      }
      if (a3)
      {
        LODWORD(v65) = v87.__r_.__value_.__l.__data_;
        BBUFeedback::updateProgressBarItem(*(BBUFeedback **)(a1 + 8), (double)v65 * v57);
      }
      unsigned int v59 = LODWORD(v87.__r_.__value_.__l.__data_) + v60;
      LODWORD(v87.__r_.__value_.__l.__data_) += v60;
      unsigned int v55 = LODWORD(v86.__r_.__value_.__l.__data_) - v60;
      LODWORD(v86.__r_.__value_.__l.__data_) -= v60;
      if (!LODWORD(v86.__r_.__value_.__l.__data_)) {
        goto LABEL_111;
      }
LABEL_95:
      ;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        goto LABEL_106;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        goto LABEL_106;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0) {
      _BBULog(5, 0, "BBUProgrammer", "", "Failed to send read data at offset 0x%x, chunk %u\n", v61, v62, v63, v87.__r_.__value_.__s.__data_[0]);
    }
LABEL_106:
    if (i) {
      break;
    }
    sched_yield();
    usleep(0x64u);
    unsigned int v55 = v86.__r_.__value_.__l.__data_;
    if (LODWORD(v86.__r_.__value_.__l.__data_)) {
      goto LABEL_95;
    }
    unsigned int v59 = v87.__r_.__value_.__l.__data_;
LABEL_111:
    (*(void (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v59);
    if (ETLSAHCommandReceive())
    {
      LODWORD(v5) = v79;
      if (v79 != v56)
      {
        if (ETLSAHCommandParseReadData())
        {
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
            {
LABEL_116:
              if ((gBBULogVerbosity & 0x80000000) == 0) {
                _BBULog(5, 0, "BBUProgrammer", "", "request image ID %u, data offset 0x%x, data length %u\n", v66, v67, v68, v88);
              }
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0) {
              goto LABEL_116;
            }
          }
          unsigned int v55 = v86.__r_.__value_.__l.__data_;
          int v56 = LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_);
          if (v79 < LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_))
          {
LABEL_140:
            exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
            _BBUException::_BBUException((uint64_t)exception, 72, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x317u, (ctu::LogMessageBuffer *)"Assertion failure(( imagePayloadDataLength >=(dataOffset + dataLength)) && \"Error: Chunk size is not sufficient to write payload data!\")", v75, v76, v77, v78);
          }
          continue;
        }
LABEL_135:
        int v53 = 0;
        uint64_t v54 = 12;
        goto LABEL_126;
      }
      LODWORD(__dst) = -1431655766;
      *(_DWORD *)__s = -1431655766;
      if (!ETLSAHCommandParseEndOfImageTransfer()) {
        goto LABEL_135;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        {
LABEL_132:
          if ((gBBULogVerbosity & 0x80000000) == 0) {
            _BBULog(5, 0, "BBUProgrammer", "", "end of image %u\n", v71, v72, v73, v88);
          }
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0) {
          goto LABEL_132;
        }
      }
      uint64_t v54 = 0;
      int v53 = 1;
      goto LABEL_126;
    }
    break;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    int v53 = 0;
    uint64_t v54 = 12;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_126;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    int v53 = 0;
    uint64_t v54 = 12;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_126;
    }
  }
  if (gBBULogVerbosity >= 1)
  {
    _BBULog(13, 1, "BBUProgrammer", "", "Timeout on receiving read request\n", v61, v62, v63, v78);
    int v53 = 0;
  }
LABEL_126:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v54);
  if (v53)
  {
    CFAbsoluteTime v69 = CFAbsoluteTimeGetCurrent();
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Took %f seconds", v69 - Current);
  }
  operator delete[](v19);
  return v54;
}

void sub_21DF4D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 105) < 0)
  {
    operator delete(*(void **)(v39 - 128));
    if (a21 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a39 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if (a27 < 0) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a34);
  if (a27 < 0)
  {
LABEL_7:
    operator delete(a22);
    if ((a33 & 0x80000000) == 0) {
LABEL_13:
    }
      _Unwind_Resume(a1);
LABEL_12:
    operator delete(a28);
    goto LABEL_13;
  }
LABEL_11:
  if ((a33 & 0x80000000) == 0) {
    goto LABEL_13;
  }
  goto LABEL_12;
}

uint64_t BBUEUR2Programmer::processItems(void **a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((unsigned char *)a1 + 32))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 74, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x3AEu, (ctu::LogMessageBuffer *)"Assertion failure(fConnected && \"Not connected to programmer.\")", v26, v27, v28, v29);
  }
  int v15 = (pthread_mutex_t *)(a1 + 11);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 11));
  BBUFeedback::handleBeginPhase((BBUFeedback *)a1[1], "Sending %zu Images", (size_t)a1[7] - 1);
  long long v16 = a1[6];
  if (v16 == a1 + 5)
  {
LABEL_9:
    uint64_t v18 = 0;
    goto LABEL_10;
  }
  if ((a4 & 1) == 0)
  {
    while (1)
    {
      uint64_t v19 = v16[2];
      if (!v19) {
        break;
      }
      uint64_t v18 = ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1)[21])(a1, v19, a2, a3, 0, a5, a7, a8);
      if (v18) {
        goto LABEL_10;
      }
      long long v16 = (void *)v16[1];
      if (v16 == a1 + 5) {
        goto LABEL_9;
      }
    }
LABEL_11:
    uint64_t v21 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v21, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x3BCu, (ctu::LogMessageBuffer *)"Assertion failure(item && \"Unable to create programmer item.\")", v22, v23, v24, v30);
  }
  uint64_t v17 = v16[2];
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t v18 = ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[21])(a1, v17, a2, a3, 1, a5, a7, a8);
LABEL_10:
  (*(void (**)(void *, uint64_t))(*a1[1] + 16))(a1[1], v18);
  pthread_mutex_unlock(v15);
  return v18;
}

void sub_21DF4D890(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void BBUEUR2Programmer::setDebugParameters(uint64_t a1, uint64_t a2)
{
  memset(v21, 170, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  ctu::tokenize();
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    timespec v4 = (void **)v21[0];
    long long v3 = (void **)v21[1];
    if (v21[1] != v21[0]) {
      goto LABEL_6;
    }
  }
  else
  {
    timespec v4 = (void **)v21[0];
    long long v3 = (void **)v21[1];
    if (v21[1] != v21[0])
    {
LABEL_6:
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      int v7 = (unsigned char *)(a1 + 4292);
      while (1)
      {
        size_t v9 = &v4[3 * v5];
        memset(__p, 170, sizeof(__p));
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)*v9, (std::string::size_type)v9[1]);
        }
        else
        {
          long long v10 = *(_OWORD *)v9;
          v18.__r_.__value_.__r.__words[2] = (std::string::size_type)v9[2];
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
        }
        ctu::tokenize();
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v18.__r_.__value_.__l.__data_);
          uint64_t v11 = (void **)__p[0];
          if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)24)
          {
LABEL_15:
            if (v11) {
              goto LABEL_32;
            }
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v11 = (void **)__p[0];
          if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)24) {
            goto LABEL_15;
          }
        }
        memset(&v17, 170, sizeof(v17));
        if (*((char *)v11 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)*v11, (std::string::size_type)v11[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)v11;
          v17.__r_.__value_.__r.__words[2] = (std::string::size_type)v11[2];
          *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
        }
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        int v14 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v17.__r_.__value_.__l.__size_;
        }
        if (size != 4) {
          goto LABEL_27;
        }
        int v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v15 = &v17;
        }
        if (LODWORD(v15->__r_.__value_.__l.__data_) == 1953068401)
        {
          *int v7 = 1;
          if ((v14 & 0x80000000) == 0)
          {
LABEL_28:
            uint64_t v11 = (void **)__p[0];
            if (__p[0]) {
              goto LABEL_32;
            }
            goto LABEL_9;
          }
        }
        else
        {
LABEL_27:
          if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_28;
          }
        }
        operator delete(v17.__r_.__value_.__l.__data_);
        uint64_t v11 = (void **)__p[0];
        if (__p[0])
        {
LABEL_32:
          long long v16 = (void **)__p[1];
          size_t v8 = v11;
          if (__p[1] != v11)
          {
            do
            {
              if (*((char *)v16 - 1) < 0) {
                operator delete(*(v16 - 3));
              }
              v16 -= 3;
            }
            while (v16 != v11);
            size_t v8 = (void **)__p[0];
          }
          __p[1] = v11;
          operator delete(v8);
        }
LABEL_9:
        timespec v4 = (void **)v21[0];
        long long v3 = (void **)v21[1];
        uint64_t v5 = ++v6;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[1] - v21[0]) >> 3) <= v6) {
          goto LABEL_39;
        }
      }
    }
  }
  timespec v4 = v3;
LABEL_39:
  if (v4)
  {
    if (v3 != v4)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v4);
      long long v3 = (void **)v21[0];
    }
    v21[1] = v4;
    operator delete(v3);
  }
}

void sub_21DF4DB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR2Programmer::handleHashesQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v16[12] = v7;
  long long v15 = v7;
  *(_OWORD *)long long v16 = v7;
  long long v14 = v7;
  if (!ETLSAHCommandParseMaverickSendHashesQuery()) {
    return 3;
  }
  uint64_t v8 = 0;
  if (a3 && a4)
  {
    size_t v9 = (char *)operator new(0x68uLL);
    *(void *)size_t v9 = &unk_26CECB268;
    size_t v10 = off_26CECB288((BBUEURHashData *)v9);
    memcpy(v9 + 8, &v14, v10);
    size_t v11 = (*(uint64_t (**)(char *))(*(void *)v9 + 32))(v9);
    memcpy(v9 + 40, (char *)&v15 + 4, v11);
    size_t v12 = (*(uint64_t (**)(char *))(*(void *)v9 + 32))(v9);
    memcpy(v9 + 72, &v16[8], v12);
    (*(void (**)(char *, void))(*(void *)v9 + 24))(v9, *(void *)(a1 + 8));
    if ((*(unsigned int (**)(uint64_t, void, char *))(*(void *)a4 + 16))(a4, *(void *)(a1 + 8), v9)) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 33;
    }
    (*(void (**)(char *))(*(void *)v9 + 8))(v9);
  }
  return v8;
}

void sub_21DF4DDC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::handleMaverickHashData_nl(BBUFeedback **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7)
{
  DigestCFNumberType Type = capabilities::updater::getDigestType((capabilities::updater *)a1);
  int v14 = DigestType;
  if (DigestType == 1)
  {
    size_t v15 = 32;
    if (!a6) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (DigestType != 2)
  {
    BBUFeedback::handleComment(a1[1], "Capabilities returned invalid hash_length");
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 1, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x45Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unsupported hash digest type.\")", v44, v45, v46, v55);
  }
  size_t v15 = 48;
  if (a6) {
LABEL_6:
  }
    BBUFeedback::handleComment(a1[1], "Resuming Maverick Protocol");
LABEL_7:
  uint64_t v16 = a3;
  if (a2) {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  uint64_t v17 = (char *)operator new(v15);
  std::string v18 = &v17[v15];
  std::string __p = v17;
  uint64_t v62 = &v17[v15];
  bzero(v17, v15);
  uint64_t v61 = v18;
  if (v16 <= a3)
  {
    uint64_t v22 = operator new[](v16);
    if (a2)
    {
      *(_DWORD *)uint64_t v63 = 0;
      uint64_t v19 = (*(uint64_t (**)(uint64_t, void *, uint64_t, unsigned char *, void))(*(void *)a2 + 16))(a2, v22, v16, v63, 0);
      if (v14 == 2) {
        CC_SHA384(v22, v16, (unsigned __int8 *)__p);
      }
      else {
        CC_SHA256(v22, v16, (unsigned __int8 *)__p);
      }
      if (v19)
      {
        BBUFeedback::handleComment(a1[1], "failed copying root manifest to buffer\n");
        if (*(_DWORD *)v63 == v16)
        {
          uint64_t v23 = v22;
          goto LABEL_71;
        }
LABEL_79:
        uint64_t v47 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v47, 76, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x48Bu, (ctu::LogMessageBuffer *)"Assertion failure(( copied == rootManifestSize) && \"Copied data size does not match root manifest size!\")", v48, v49, v50, v55);
      }
      if (*(_DWORD *)v63 != v16) {
        goto LABEL_79;
      }
    }
    else
    {
      BBUFeedback::handleComment(a1[1], "No root manifest present\n");
      bzero(v22, v16);
    }
    uint64_t v24 = (v16 + 1024) << 31 >> 31;
    if (v24 != v16 + 1024 || v24 < 0)
    {
      uint64_t v51 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v51, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x49Du, (ctu::LogMessageBuffer *)"Assertion failure(success)", v52, v53, v54, v55);
    }
    uint64_t v23 = operator new[](v24 & 0x1FFFFFFFFLL);
    if ((ETLSAHCommandCreateMaverickRootManifestResponse() & 1) == 0)
    {
      BBUFeedback::handleComment(a1[1], "failed createing maverick root manifest response\n");
      operator delete[](v22);
      uint64_t v19 = 11;
      goto LABEL_71;
    }
    operator delete[](v22);
    int v25 = ETLSAHCommandSend();
    uint64_t v26 = a1[1];
    if (v25)
    {
      ctu::hex();
      if (v63[23] >= 0) {
        uint64_t v27 = v63;
      }
      else {
        uint64_t v27 = *(const char **)v63;
      }
      BBUFeedback::handleComment(v26, "Sent Manifest with length %u, %s", v16, v27);
      if ((v63[23] & 0x80000000) != 0) {
        operator delete(*(void **)v63);
      }
      if ((int)v16 + 1024 < v16 || (ETLSAHCommandReceive() & 1) == 0)
      {
        BBUFeedback::handleComment(a1[1], "failed reading hash query results\n");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        uint64_t v35 = qword_26AA89AB0;
        if (!qword_26AA89AB0)
        {
          char v36 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
          blocunint64_t k = 0;
          ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v36, "BBUError", QOS_CLASS_UTILITY, &block);
          if (block) {
            dispatch_release(block);
          }
          v36->__on_zero_shared_weaunint64_t k = 0;
          v36[1].~__shared_weak_count = 0;
          v36[1].~__shared_weak_count_0 = 0;
          std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v63, v36);
          long long v37 = *(_OWORD *)v63;
          *(void *)uint64_t v63 = 0;
          *(void *)&v63[8] = 0;
          uint64_t v38 = (std::__shared_weak_count *)off_26AA89AB8;
          *(_OWORD *)&qword_26AA89AB0 = v37;
          if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
          uint64_t v39 = *(std::__shared_weak_count **)&v63[8];
          if (*(void *)&v63[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v63[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
          uint64_t v35 = qword_26AA89AB0;
        }
        uint64_t v33 = (std::__shared_weak_count *)off_26AA89AB8;
        uint64_t v58 = v35;
        unsigned int v59 = off_26AA89AB8;
        if (off_26AA89AB8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        int v56 = operator new(0x28uLL);
        long long v57 = xmmword_21DFAD1B0;
        strcpy((char *)v56, "Failed reading hash query results");
        *(void *)uint64_t v63 = MEMORY[0x263EF8330];
        *(void *)&v63[8] = 0x40000000;
        *(void *)&v63[16] = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
        int v64 = &__block_descriptor_tmp_8;
        uint64_t v65 = v35;
        uint64_t v66 = &v56;
        int v67 = 47;
        uint64_t v68 = v63;
        blocunint64_t k = MEMORY[0x263EF8330];
        uint64_t v70 = 0x40000000;
        uint64_t v71 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
        uint64_t v72 = &__block_descriptor_tmp_13_0;
        uint64_t v73 = v35;
        char v74 = &v68;
        char v40 = *(NSObject **)(v35 + 16);
        if (*(void *)(v35 + 24))
        {
          dispatch_async_and_wait(v40, &block);
          if ((SHIBYTE(v57) & 0x80000000) == 0) {
            goto LABEL_67;
          }
        }
        else
        {
          dispatch_sync(v40, &block);
          if ((SHIBYTE(v57) & 0x80000000) == 0) {
            goto LABEL_67;
          }
        }
        uint64_t v34 = v56;
LABEL_66:
        operator delete(v34);
LABEL_67:
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        uint64_t v19 = 47;
LABEL_71:
        operator delete[](v23);
        std::string v20 = (char *)__p;
        if (!__p) {
          return v19;
        }
        goto LABEL_11;
      }
      if ((*((unsigned int (**)(BBUFeedback **, void *, uint64_t, uint64_t))*a1 + 19))(a1, v23, a2, a4))
      {
        BBUFeedback::handleComment(a1[1], "failed handling hash query\n");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        uint64_t v28 = qword_26AA89AB0;
        if (!qword_26AA89AB0)
        {
          char v29 = (BBUError *)operator new(0x38uLL);
          BBUError::BBUError(v29);
          std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v63, (std::__shared_weak_count_vtbl *)v29);
          long long v30 = *(_OWORD *)v63;
          *(void *)uint64_t v63 = 0;
          *(void *)&v63[8] = 0;
          uint64_t v31 = (std::__shared_weak_count *)off_26AA89AB8;
          *(_OWORD *)&qword_26AA89AB0 = v30;
          if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          char v32 = *(std::__shared_weak_count **)&v63[8];
          if (*(void *)&v63[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v63[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          uint64_t v28 = qword_26AA89AB0;
        }
        uint64_t v33 = (std::__shared_weak_count *)off_26AA89AB8;
        blocunint64_t k = v28;
        uint64_t v70 = (uint64_t)off_26AA89AB8;
        if (off_26AA89AB8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        *(void *)uint64_t v63 = operator new(0x20uLL);
        *(_OWORD *)&v63[8] = xmmword_21DFAD1A0;
        strcpy(*(char **)v63, "Failed handling hash query");
        BBUError::addError((uint64_t)v28, (uint64_t)v63, 47);
        if ((v63[23] & 0x80000000) == 0) {
          goto LABEL_67;
        }
        uint64_t v34 = *(void **)v63;
        goto LABEL_66;
      }
      *a7 = 1;
      char MaverickHashResponse = ETLSAHCommandCreateMaverickHashResponse();
      uint64_t v42 = a1[1];
      if ((MaverickHashResponse & 1) == 0)
      {
        BBUFeedback::handleComment(v42, "failed creating maverick hash response\n");
        uint64_t v19 = 11;
        goto LABEL_71;
      }
      BBUFeedback::handleComment(v42, "Sending Hash Response: value %u  success %u", *a7, 1);
      if (ETLSAHCommandSend())
      {
        uint64_t v19 = 0;
        goto LABEL_71;
      }
      BBUFeedback::handleComment(a1[1], "failed sending maverick hash response\n");
    }
    else
    {
      BBUFeedback::handleComment(v26, "failed sending maverick root manifest response\n");
    }
    uint64_t v19 = 3;
    goto LABEL_71;
  }
  BBUFeedback::handleComment(a1[1], "root manifest larger than protocol specification, std::string::size_type size = %u bytes", v16);
  uint64_t v19 = 12;
  std::string v20 = (char *)__p;
  if (__p)
  {
LABEL_11:
    uint64_t v61 = v20;
    operator delete(v20);
  }
  return v19;
}

void sub_21DF4E680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::handleMaverickEnd_nl(BBUFeedback **this)
{
  uint64_t v2 = operator new[](0x400uLL);
  if (ETLSAHCommandReceive())
  {
    if (ETLSAHCommandMaverickParseEnd())
    {
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = 11;
      BBUFeedback::handleComment(this[1], "failed parsing maverick end\n");
    }
  }
  else
  {
    uint64_t v3 = 3;
    BBUFeedback::handleComment(this[1], "failed receiving maverick end\n");
  }
  operator delete[](v2);
  return v3;
}

void BBUEUR2Programmer::postCrashReason(uint64_t a1, const void **a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 8))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x52Eu, (ctu::LogMessageBuffer *)"Assertion failure(fFeedback)", v64, v65, v66, v67);
  }
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  memset(&__p, 0, 24);
  int folder = ctu::fs::read_folder();
  char v7 = folder;
  __darwin_ino64_t v8 = 0;
  if (folder)
  {
    uint64_t v9 = -1431655765 * ((__p.st_ino - *(void *)&__p.st_dev) >> 3);
    if (v9)
    {
      char v10 = folder;
      uint64_t v11 = 0;
      uint64_t v12 = 24 * v9;
      while (1)
      {
        int v14 = (const void **)(*(void *)&__p.st_dev + v11);
        __s2[23] = 8;
        strcpy(__s2, "mav_core");
        uint64_t v15 = *(unsigned __int8 *)(*(void *)&__p.st_dev + v11 + 23);
        if (*(char *)(*(void *)&__p.st_dev + v11 + 23) < 0)
        {
          uint64_t v17 = *v14;
          if ((unint64_t)v14[1] >= 8) {
            size_t v16 = 8;
          }
          else {
            size_t v16 = (size_t)v14[1];
          }
        }
        else
        {
          if (v15 >= 8) {
            size_t v16 = 8;
          }
          else {
            size_t v16 = *(unsigned __int8 *)(*(void *)&__p.st_dev + v11 + 23);
          }
          uint64_t v17 = (const void *)(*(void *)&__p.st_dev + v11);
        }
        int v18 = memcmp(v17, __s2, v16);
        if (v16 != 8 || v18 != 0) {
          goto LABEL_7;
        }
        if ((v15 & 0x80) != 0)
        {
          unint64_t v21 = *(void *)(*(void *)&__p.st_dev + v11 + 8);
          BOOL v22 = v21 > 4;
          unint64_t v23 = v21 - 4;
          if (!v22)
          {
            uint64_t v28 = v72;
            if ((unint64_t)v72 < v73) {
              goto LABEL_39;
            }
            goto LABEL_5;
          }
          __s2[23] = 4;
          strcpy(__s2, ".bin");
          unint64_t v24 = *(void *)(*(void *)&__p.st_dev + v11 + 8);
          BOOL v25 = v24 >= v23;
          unint64_t v26 = v24 - v23;
          if (!v25) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          if (v26 >= 4) {
            size_t v27 = 4;
          }
          else {
            size_t v27 = v26;
          }
          int v20 = memcmp((char *)*v14 + v23, __s2, v27);
          if (v27 != 4) {
            goto LABEL_7;
          }
        }
        else
        {
          if (v15 <= 4)
          {
            uint64_t v28 = v72;
            if ((unint64_t)v72 < v73) {
              goto LABEL_37;
            }
            goto LABEL_5;
          }
          __s2[23] = 4;
          strcpy(__s2, ".bin");
          int v20 = memcmp((char *)v14 + v15 - 4, __s2, 4uLL);
        }
        if (v20) {
          goto LABEL_7;
        }
        uint64_t v28 = v72;
        if ((unint64_t)v72 < v73)
        {
          if ((v15 & 0x80) != 0)
          {
LABEL_39:
            std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)(*(void *)&__p.st_dev + v11), *(void *)(*(void *)&__p.st_dev + v11 + 8));
          }
          else
          {
LABEL_37:
            long long v29 = *(_OWORD *)v14;
            v28->__r_.__value_.__r.__words[2] = (std::string::size_type)v14[2];
            *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          }
          std::string v13 = v28 + 1;
          goto LABEL_6;
        }
LABEL_5:
        std::string v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v71, (uint64_t)v14);
LABEL_6:
        uint64_t v72 = v13;
LABEL_7:
        v11 += 24;
        if (v12 == v11)
        {
          __darwin_ino64_t v8 = *(void *)&__p.st_dev;
          char v7 = v10;
          break;
        }
      }
    }
  }
  if (v8)
  {
    __darwin_ino64_t st_ino = __p.st_ino;
    uint64_t v31 = (void *)v8;
    if (__p.st_ino != v8)
    {
      do
      {
        if (*(char *)(st_ino - 1) < 0) {
          operator delete(*(void **)(st_ino - 24));
        }
        st_ino -= 24;
      }
      while (st_ino != v8);
      uint64_t v31 = *(void **)&__p.st_dev;
    }
    __p.__darwin_ino64_t st_ino = v8;
    operator delete(v31);
  }
  if ((v7 & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
        goto LABEL_124;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_124:
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(1, 0, "BBUProgrammer", "", "failed scanning coredump folder\n", v4, v5, v6, v67);
        }
      }
    }
LABEL_126:
    char v32 = (std::string *)v71;
    goto LABEL_127;
  }
  char v32 = (std::string *)v71;
  if (v71 != v72)
  {
    while (1)
    {
      memset(v70, 170, sizeof(v70));
      int v34 = *((char *)a2 + 23);
      if (v34 >= 0) {
        size_t v35 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v35 = (size_t)a2[1];
      }
      unint64_t v36 = v35 + 1;
      memset(__s2, 170, 24);
      if (v35 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v36 >= 0x17)
      {
        uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v38 = v36 | 7;
        }
        uint64_t v39 = v38 + 1;
        long long v37 = operator new(v38 + 1);
        *(void *)&__s2[8] = v35 + 1;
        *(void *)&__s2[16] = v39 | 0x8000000000000000;
        *(void *)std::string __s2 = v37;
      }
      else
      {
        memset(__s2, 0, 24);
        long long v37 = __s2;
        __s2[23] = v35 + 1;
        if (!v35) {
          goto LABEL_72;
        }
      }
      if (v34 >= 0) {
        char v40 = a2;
      }
      else {
        char v40 = *a2;
      }
      memmove(v37, v40, v35);
LABEL_72:
      *(_WORD *)&v37[v35] = 47;
      int v41 = SHIBYTE(v32->__r_.__value_.__r.__words[2]);
      if (v41 >= 0) {
        uint64_t v42 = (const std::string::value_type *)v32;
      }
      else {
        uint64_t v42 = (const std::string::value_type *)v32->__r_.__value_.__r.__words[0];
      }
      if (v41 >= 0) {
        std::string::size_type size = HIBYTE(v32->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v32->__r_.__value_.__l.__size_;
      }
      uint64_t v44 = std::string::append((std::string *)__s2, v42, size);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v70[2] = (void *)v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v70 = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if ((__s2[23] & 0x80000000) != 0) {
        operator delete(*(void **)__s2);
      }
      v46.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v46.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)__p.st_qspare = v46;
      *(timespec *)&__p.st_std::string::size_type size = v46;
      *(timespec *)&__p.st_blkstd::string::size_type size = v46;
      __p.st_ctimespec = v46;
      __p.st_birthtimespec = v46;
      __p.st_atimespec = v46;
      __p.st_mtimespec = v46;
      *(timespec *)&__p.st_dev = v46;
      *(timespec *)&__p.st_uid = v46;
      if (SHIBYTE(v70[2]) >= 0) {
        uint64_t v47 = v70;
      }
      else {
        uint64_t v47 = (void **)v70[0];
      }
      if (stat((const char *)v47, &__p))
      {
        if (SHIBYTE(v70[2]) >= 0) {
          uint64_t v48 = v70;
        }
        else {
          uint64_t v48 = (void **)v70[0];
        }
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on getting file status from (%s) \n", (const char *)v48);
        goto LABEL_88;
      }
      if (SHIBYTE(v70[2]) >= 0) {
        uint64_t v50 = v70;
      }
      else {
        uint64_t v50 = (void **)v70[0];
      }
      int v51 = open((const char *)v50, 0);
      if (v51 < 0)
      {
        if (SHIBYTE(v70[2]) >= 0) {
          char v55 = v70;
        }
        else {
          char v55 = (void **)v70[0];
        }
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on opening a file (%s).\n", (const char *)v55);
LABEL_88:
        char v49 = 1;
        if ((SHIBYTE(v70[2]) & 0x80000000) == 0) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      st_std::string::size_type size = __p.st_size;
      size_t st_size_low = LODWORD(__p.st_size);
      if (LODWORD(__p.st_size))
      {
        uint64_t v54 = operator new(LODWORD(__p.st_size));
        bzero(v54, st_size_low);
      }
      else
      {
        uint64_t v54 = 0;
      }
      if (read(v51, v54, st_size) < 0)
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on reading the file.\n");
      }
      else if (ETLEFSDumpInterpret())
      {
        unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v56 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v77[14] = v56;
        v77[15] = v56;
        v77[12] = v56;
        v77[13] = v56;
        v77[10] = v56;
        v77[11] = v56;
        v77[8] = v56;
        v77[9] = v56;
        v77[6] = v56;
        v77[7] = v56;
        v77[4] = v56;
        v77[5] = v56;
        _OWORD v77[2] = v56;
        v77[3] = v56;
        v77[0] = v56;
        v77[1] = v56;
        long long v75 = v56;
        long long v76 = v56;
        *(_OWORD *)std::string __s2 = v56;
        *(_OWORD *)&__s2[16] = v56;
        char v57 = ETLEFSDUmpCopyCrashLocationDetails();
        uint64_t v58 = *(BBUFeedback **)(a1 + 8);
        if (v57)
        {
          if (SHIBYTE(v70[2]) >= 0) {
            unsigned int v59 = v70;
          }
          else {
            unsigned int v59 = (void **)v70[0];
          }
          BBUFeedback::handleComment(v58, "File: %s", (const char *)v59);
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "\tCrash at %s:%d, Reason '%s', TID %d\n", &__s2[8], *(_DWORD *)&__s2[4], (const char *)v77 + 8, *(_DWORD *)__s2);
        }
        else
        {
          BBUFeedback::handleComment(v58, "Failed on parsing the information.\n");
        }
        if ((ETLEFSDumpInfoFree() & 1) == 0) {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on freeing dumpInfo.\n");
        }
      }
      else
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on interpreting the file.\n");
      }
      if (close(v51))
      {
        if (SHIBYTE(v70[2]) >= 0) {
          uint64_t v60 = v70;
        }
        else {
          uint64_t v60 = (void **)v70[0];
        }
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on closing a file (%s).\n", (const char *)v60);
      }
      if (v54) {
        operator delete(v54);
      }
      char v49 = 0;
      if ((SHIBYTE(v70[2]) & 0x80000000) == 0) {
        goto LABEL_54;
      }
LABEL_53:
      operator delete(v70[0]);
LABEL_54:
      if (++v32 == v72) {
        char v33 = 1;
      }
      else {
        char v33 = v49;
      }
      if (v33) {
        goto LABEL_126;
      }
    }
  }
LABEL_127:
  if (v32)
  {
    uint64_t v61 = v72;
    uint64_t v62 = v32;
    if (v72 != v32)
    {
      do
      {
        if (SHIBYTE(v61[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61[-1].__r_.__value_.__l.__data_);
        }
        --v61;
      }
      while (v61 != v32);
      uint64_t v62 = v71;
    }
    uint64_t v72 = v32;
    operator delete(v62);
  }
}

void sub_21DF4EF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
}

void sub_21DF4EFA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF4EFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
}

void sub_21DF4EFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41)
{
}

void sub_21DF4EFFC()
{
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x21DF4F070);
}

void sub_21DF4F01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
}

void sub_21DF4F034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
}

void sub_21DF4F048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a38);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21DF4F080);
}

void sub_21DF4F06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a41);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_17()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t readStickyNvramItems(uint64_t *a1)
{
  void v26[2] = *MEMORY[0x263EF8340];
  stat __p = 0;
  long long v24 = 0uLL;
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v2 = off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v3 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v3);
    uint64_t v4 = operator new(0x20uLL);
    *uint64_t v4 = &unk_26CECF498;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    uint64_t v5 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v3;
    off_26AA89B58 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_26AA89B50;
  }
  uint64_t v6 = (std::__shared_weak_count *)off_26AA89B58;
  v21[0] = v2;
  v21[1] = off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  char v7 = (uint64_t *)v2[1];
  if (!v7) {
LABEL_14:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v8 = *((_DWORD *)v7 + 8);
      if (v8 < 3) {
        break;
      }
      char v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_14;
      }
    }
    if (v8 == 2) {
      break;
    }
    char v7 = (uint64_t *)v7[1];
    if (!v7) {
      goto LABEL_14;
    }
  }
  if (*((char *)v7 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25, (const std::string::value_type *)v7[5], v7[6]);
  }
  else
  {
    *(_OWORD *)&v25.st_dev = *(_OWORD *)(v7 + 5);
    *(void *)&v25.st_uid = v7[7];
  }
  uint64_t v9 = std::string::append((std::string *)&v25, "/sticky_nvram_items.plist", 0x19uLL);
  char v10 = (void *)v9->__r_.__value_.__r.__words[0];
  v26[0] = v9->__r_.__value_.__l.__size_;
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  stat __p = v10;
  *(void *)&long long v24 = v26[0];
  *(void *)((char *)&v24 + 7) = *(void *)((char *)v26 + 7);
  HIBYTE(v24) = v11;
  if (SHIBYTE(v25.st_gid) < 0) {
    operator delete(*(void **)&v25.st_dev);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v12.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v25.st_blkstd::string::size_type size = v12;
  *(timespec *)v25.st_qspare = v12;
  v25.st_birthtimespec = v12;
  *(timespec *)&v25.st_std::string::size_type size = v12;
  v25.st_mtimespec = v12;
  v25.st_ctimespec = v12;
  *(timespec *)&v25.st_uid = v12;
  v25.st_atimespec = v12;
  *(timespec *)&v25.st_dev = v12;
  if (v24 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  int v14 = (ACFULogging *)stat(p_p, &v25);
  if (v14)
  {
    if (*((char *)a1 + 23) < 0)
    {
      a1[1] = 0;
      a1 = (uint64_t *)*a1;
    }
    else
    {
      *((unsigned char *)a1 + 23) = 0;
    }
    *(unsigned char *)a1 = 0;
    ACFULogging::getLogInstance(v14);
    ACFULogging::handleMessage();
    size_t v16 = cf;
    if (!cf) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v24 >= 0) {
    uint64_t v15 = (const char *)&__p;
  }
  else {
    uint64_t v15 = (const char *)__p;
  }
  size_t v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v15, 0x8000100u);
  CFTypeRef v17 = cf;
  CFTypeRef cf = v16;
  if (v17) {
    CFRelease(v17);
  }
  memset(&v25, 170, 24);
  MEMORY[0x223C1D180](&v25, v16, *MEMORY[0x263EFFE70]);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v21, "NvramItems");
  int v18 = (const void *)(**(uint64_t (***)(stat *, void))&v25.st_dev)(&v25, v21[0]);
  if (v18)
  {
    ctu::cf::assign();
    CFRelease(v18);
  }
  uint64_t v19 = (ACFULogging *)MEMORY[0x223C1D120](v21);
  ACFULogging::getLogInstance(v19);
  ACFULogging::handleMessage();
  MEMORY[0x223C1D190](&v25);
  if (v16) {
LABEL_42:
  }
    CFRelease(v16);
LABEL_43:
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  return 0;
}

void sub_21DF4F4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t createNVData(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v733 = *MEMORY[0x263EF8340];
  v717 = 0;
  uint64_t v718 = 0;
  v716 = &v717;
  memset(&__x, 0, sizeof(__x));
  memset(&v714, 0, sizeof(v714));
  memset(&v713, 0, sizeof(v713));
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_7;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23)) {
      goto LABEL_7;
    }
LABEL_138:
    ACFULogging::getLogInstance((ACFULogging *)a1);
    ACFULogging::handleMessage();
    uint64_t v6 = 1;
    goto LABEL_1133;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_138;
  }
LABEL_7:
  if ((*(unsigned char *)(a1 + 23) & 0x80) != 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __s = *(std::string *)a1;
  }
  NVRAMKeyValPairs = (ACFULogging *)sGetNVRAMKeyValPairs(&__s, (uint64_t)&__x);
  uint64_t v6 = (uint64_t)NVRAMKeyValPairs;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v6)
  {
    ACFULogging::getLogInstance(NVRAMKeyValPairs);
    ACFULogging::handleMessage();
    goto LABEL_1133;
  }
  if (__x.__end_ != __x.__begin_)
  {
    ACFULogging::getLogInstance(NVRAMKeyValPairs);
    ACFULogging::handleMessage();
    char v7 = (ACFULogging *)std::vector<std::pair<std::string,std::string>>::vector(&v711, &__x);
    std::vector<std::ssub_match>::pointer begin = v711.__begin_;
    std::vector<std::pair<std::string, std::string>>::pointer end = v711.__end_;
    if (v711.__begin_ != v711.__end_)
    {
      do
      {
        ACFULogging::getLogInstance(v7);
        char v7 = (ACFULogging *)ACFULogging::handleMessage();
        ++begin;
      }
      while (begin != end);
      std::vector<std::ssub_match>::pointer begin = v711.__begin_;
    }
    if (begin)
    {
      std::vector<std::pair<std::string, std::string>>::pointer v10 = v711.__end_;
      std::vector<std::pair<std::string, std::string>>::pointer v11 = begin;
      if (v711.__end_ == begin)
      {
LABEL_26:
        v711.__end_ = begin;
        operator delete(v11);
        goto LABEL_27;
      }
      while (1)
      {
        if (SHIBYTE(v10[-1].second.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v10[-1].second.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v10[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_21;
          }
LABEL_24:
          operator delete(v10[-1].first.__r_.__value_.__l.__data_);
          if (--v10 == begin)
          {
LABEL_25:
            std::vector<std::pair<std::string, std::string>>::pointer v11 = v711.__begin_;
            goto LABEL_26;
          }
        }
        else
        {
          if (SHIBYTE(v10[-1].first.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_24;
          }
LABEL_21:
          if (--v10 == begin) {
            goto LABEL_25;
          }
        }
      }
    }
  }
LABEL_27:
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v710, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v710 = *(std::string *)a2;
  }
  timespec v12 = (ACFULogging *)sGetNVRAMKeyValPairs(&v710, (uint64_t)&v714);
  uint64_t v6 = (uint64_t)v12;
  if (SHIBYTE(v710.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v710.__r_.__value_.__l.__data_);
  }
  if (v6)
  {
    ACFULogging::getLogInstance(v12);
    ACFULogging::handleMessage();
    goto LABEL_1133;
  }
  if (v714.__end_ != v714.__begin_)
  {
    ACFULogging::getLogInstance(v12);
    ACFULogging::handleMessage();
    std::string v13 = (ACFULogging *)std::vector<std::pair<std::string,std::string>>::vector(&v709, &v714);
    int v14 = v709.__begin_;
    std::vector<std::pair<std::string, std::string>>::pointer v15 = v709.__end_;
    if (v709.__begin_ != v709.__end_)
    {
      do
      {
        ACFULogging::getLogInstance(v13);
        std::string v13 = (ACFULogging *)ACFULogging::handleMessage();
        ++v14;
      }
      while (v14 != v15);
      int v14 = v709.__begin_;
    }
    if (v14)
    {
      std::vector<std::pair<std::string, std::string>>::pointer v16 = v709.__end_;
      std::vector<std::pair<std::string, std::string>>::pointer v17 = v14;
      if (v709.__end_ == v14)
      {
LABEL_46:
        v709.__end_ = v14;
        operator delete(v17);
        goto LABEL_47;
      }
      while (1)
      {
        if (SHIBYTE(v16[-1].second.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v16[-1].second.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v16[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_41;
          }
LABEL_44:
          operator delete(v16[-1].first.__r_.__value_.__l.__data_);
          if (--v16 == v14)
          {
LABEL_45:
            std::vector<std::pair<std::string, std::string>>::pointer v17 = v709.__begin_;
            goto LABEL_46;
          }
        }
        else
        {
          if (SHIBYTE(v16[-1].first.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_44;
          }
LABEL_41:
          if (--v16 == v14) {
            goto LABEL_45;
          }
        }
      }
    }
  }
LABEL_47:
  std::vector<std::pair<std::string,std::string>>::vector(&v708, &__x);
  int v18 = std::vector<std::pair<std::string,std::string>>::vector(&v707, &v714);
  memset(v728, 0, sizeof(v728));
  uint64_t v19 = (long long *)v708.__begin_;
  int v20 = (long long *)v708.__end_;
  if (v708.__end_ != v708.__begin_)
  {
    size_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v708.__end_ - (char *)v708.__begin_) >> 4);
    if (v707.__end_ != v707.__begin_)
    {
      std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v713, (long long *)v708.__begin_, (long long *)v708.__end_, v21);
      std::vector<std::pair<std::string, std::string>>::pointer v23 = v707.__begin_;
      for (std::vector<std::pair<std::string, std::string>>::pointer i = v707.__end_; v23 != i; ++v23)
      {
        while (1)
        {
          memset(&__s2, 170, sizeof(__s2));
          if (SHIBYTE(v23->first.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&__s2, v23->first.__r_.__value_.__l.__data_, v23->first.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v25 = *(_OWORD *)&v23->first.__r_.__value_.__l.__data_;
            __s2.__r_.__value_.__r.__words[2] = v23->first.__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v25;
          }
          std::vector<std::pair<std::string, std::string>>::pointer v26 = v713.__begin_;
          std::vector<std::pair<std::string, std::string>>::pointer v27 = v713.__end_;
          if (v713.__begin_ != v713.__end_)
          {
            if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __s2.__r_.__value_.__l.__size_;
            }
            if ((*((unsigned char *)&__s2.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              long long v29 = (unsigned __int8 *)__s2.__r_.__value_.__r.__words[0];
              while (1)
              {
                uint64_t v33 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
                if ((v33 & 0x80u) == 0) {
                  std::string::size_type v34 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v34 = v26->first.__r_.__value_.__l.__size_;
                }
                if (v34 == size)
                {
                  if ((v33 & 0x80) != 0)
                  {
                    uint64_t v22 = memcmp(v26->first.__r_.__value_.__l.__data_, v29, v26->first.__r_.__value_.__l.__size_);
                    if (!v22) {
                      goto LABEL_51;
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)&v26->first.__r_.__value_.__s + 23)) {
                      goto LABEL_51;
                    }
                    uint64_t v35 = 0;
                    while (v26->first.__r_.__value_.__s.__data_[v35] == v29[v35])
                    {
                      if (v33 == ++v35) {
                        goto LABEL_51;
                      }
                    }
                  }
                }
                if (++v26 == v27) {
                  goto LABEL_89;
                }
              }
            }
            while (1)
            {
              uint64_t v30 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
              if ((v30 & 0x80u) == 0) {
                std::string::size_type v31 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v31 = v26->first.__r_.__value_.__l.__size_;
              }
              if (v31 == size)
              {
                if ((v30 & 0x80) != 0)
                {
                  uint64_t v22 = memcmp(v26->first.__r_.__value_.__l.__data_, &__s2, v26->first.__r_.__value_.__l.__size_);
                  if (!v22) {
                    break;
                  }
                }
                else
                {
                  if (!*((unsigned char *)&v26->first.__r_.__value_.__s + 23)) {
                    break;
                  }
                  uint64_t v32 = 0;
                  while (v26->first.__r_.__value_.__s.__data_[v32] == __s2.__r_.__value_.__s.__data_[v32])
                  {
                    if (v30 == ++v32) {
                      goto LABEL_51;
                    }
                  }
                }
              }
              if (++v26 == v27) {
                goto LABEL_89;
              }
            }
          }
LABEL_51:
          if (v26 == v27)
          {
LABEL_89:
            if (v728 != (unsigned char *)v23)
            {
              char v36 = HIBYTE(v23->first.__r_.__value_.__r.__words[2]);
              if ((v728[23] & 0x80000000) != 0)
              {
                if (v36 >= 0) {
                  uint64_t v38 = (std::string::value_type *)v23;
                }
                else {
                  uint64_t v38 = (std::string::value_type *)v23->first.__r_.__value_.__r.__words[0];
                }
                if (v36 >= 0) {
                  size_t v39 = HIBYTE(v23->first.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v39 = v23->first.__r_.__value_.__l.__size_;
                }
                std::string::__assign_no_alias<false>((void **)v728, v38, v39);
              }
              else if ((*((unsigned char *)&v23->first.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v728, v23->first.__r_.__value_.__l.__data_, v23->first.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v37 = *(_OWORD *)&v23->first.__r_.__value_.__l.__data_;
                *(void *)&v728[16] = *((void *)&v23->first.__r_.__value_.__l + 2);
                *(_OWORD *)v728 = v37;
              }
              char v40 = HIBYTE(v23->second.__r_.__value_.__r.__words[2]);
              if ((v728[47] & 0x80000000) != 0)
              {
                if (v40 >= 0) {
                  p_std::string second = &v23->second;
                }
                else {
                  p_std::string second = (std::string *)v23->second.__r_.__value_.__l.__data_;
                }
                if (v40 >= 0) {
                  size_t v43 = HIBYTE(v23->second.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v43 = v23->second.__r_.__value_.__l.__size_;
                }
                std::string::__assign_no_alias<false>((void **)&v728[24], p_second, v43);
              }
              else if ((*((unsigned char *)&v23->second.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(&v728[24], v23->second.__r_.__value_.__l.__data_, v23->second.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v41 = *(_OWORD *)&v23->second.__r_.__value_.__l.__data_;
                *(void *)&v728[40] = *((void *)&v23->second.__r_.__value_.__l + 2);
                *(_OWORD *)&v728[24] = v41;
              }
            }
            std::vector<std::pair<std::string, std::string>>::pointer v44 = v713.__end_;
            if (v713.__end_ >= v713.__end_cap_.__value_)
            {
              uint64_t v22 = (uint64_t)std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((void **)&v713.__begin_, (uint64_t)v728);
              v713.__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)v22;
            }
            else
            {
              if ((v728[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(&v713.__end_->first, *(const std::string::value_type **)v728, *(std::string::size_type *)&v728[8]);
              }
              else
              {
                long long v45 = *(_OWORD *)v728;
                v713.__end_->first.__r_.__value_.__r.__words[2] = *(void *)&v728[16];
                *(_OWORD *)&v44->first.__r_.__value_.__l.__data_ = v45;
              }
              timespec v46 = &v44->second;
              if ((v728[47] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)&v728[24], *(std::string::size_type *)&v728[32]);
              }
              else
              {
                long long v47 = *(_OWORD *)&v728[24];
                v44->second.__r_.__value_.__r.__words[2] = *(void *)&v728[40];
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
              }
              uint64_t v22 = (uint64_t)&v44[1];
              v713.__end_ = v44 + 1;
            }
          }
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0) {
            break;
          }
          if (++v23 == i) {
            goto LABEL_124;
          }
        }
        operator delete(__s2.__r_.__value_.__l.__data_);
      }
LABEL_124:
      uint64_t v6 = 0;
      char v48 = 1;
      if ((v728[47] & 0x80000000) == 0) {
        goto LABEL_125;
      }
      goto LABEL_142;
    }
LABEL_123:
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v713, v19, v20, v21);
    goto LABEL_124;
  }
  if (v707.__end_ != v707.__begin_)
  {
    size_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v707.__end_ - (char *)v707.__begin_) >> 4);
    uint64_t v19 = (long long *)v707.__begin_;
    int v20 = (long long *)v707.__end_;
    goto LABEL_123;
  }
  ACFULogging::getLogInstance((ACFULogging *)v18);
  uint64_t v22 = ACFULogging::handleMessage();
  char v48 = 0;
  uint64_t v6 = 1;
  if ((v728[47] & 0x80000000) == 0)
  {
LABEL_125:
    if ((v728[23] & 0x80000000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_143;
  }
LABEL_142:
  operator delete(*(void **)&v728[24]);
  if ((v728[23] & 0x80000000) == 0)
  {
LABEL_126:
    char v49 = v707.__begin_;
    if (v707.__begin_) {
      goto LABEL_127;
    }
LABEL_144:
    int v51 = v708.__begin_;
    if (!v708.__begin_) {
      goto LABEL_154;
    }
LABEL_145:
    std::vector<std::pair<std::string, std::string>>::pointer v52 = v708.__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v53 = v51;
    if (v708.__end_ == v51)
    {
LABEL_153:
      v708.__end_ = v51;
      operator delete(v53);
      goto LABEL_154;
    }
    while (1)
    {
      if (SHIBYTE(v52[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v52[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_148;
        }
LABEL_151:
        operator delete(v52[-1].first.__r_.__value_.__l.__data_);
        if (--v52 == v51)
        {
LABEL_152:
          std::vector<std::pair<std::string, std::string>>::pointer v53 = v708.__begin_;
          goto LABEL_153;
        }
      }
      else
      {
        if (SHIBYTE(v52[-1].first.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_151;
        }
LABEL_148:
        if (--v52 == v51) {
          goto LABEL_152;
        }
      }
    }
  }
LABEL_143:
  operator delete(*(void **)v728);
  char v49 = v707.__begin_;
  if (!v707.__begin_) {
    goto LABEL_144;
  }
LABEL_127:
  std::vector<std::pair<std::string, std::string>>::pointer v50 = v707.__end_;
  if (v707.__end_ == v49)
  {
    v707.__end_ = v49;
    operator delete(v49);
    int v51 = v708.__begin_;
    if (!v708.__begin_) {
      goto LABEL_154;
    }
    goto LABEL_145;
  }
  do
  {
    while (SHIBYTE(v50[-1].second.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50[-1].second.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50[-1].first.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_134;
      }
LABEL_131:
      if (--v50 == v49) {
        goto LABEL_135;
      }
    }
    if ((SHIBYTE(v50[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_131;
    }
LABEL_134:
    operator delete(v50[-1].first.__r_.__value_.__l.__data_);
    --v50;
  }
  while (v50 != v49);
LABEL_135:
  v707.__end_ = v49;
  operator delete(v707.__begin_);
  int v51 = v708.__begin_;
  if (v708.__begin_) {
    goto LABEL_145;
  }
LABEL_154:
  if ((v48 & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)v22);
    ACFULogging::handleMessage();
    goto LABEL_1133;
  }
  ACFULogging::getLogInstance((ACFULogging *)v22);
  uint64_t v54 = ACFULogging::handleMessage();
  std::vector<std::pair<std::string, std::string>>::pointer v55 = v713.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v56 = v713.__end_;
  if (v713.__begin_ != v713.__end_)
  {
    char v57 = 0;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (1)
    {
      ACFULogging::getLogInstance((ACFULogging *)v54);
      ACFULogging::handleMessage();
      if (SHIBYTE(v55->first.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v706, v55->first.__r_.__value_.__l.__data_, v55->first.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v58 = *(_OWORD *)&v55->first.__r_.__value_.__l.__data_;
        v706.__r_.__value_.__r.__words[2] = v55->first.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v706.__r_.__value_.__l.__data_ = v58;
      }
      if (SHIBYTE(v55->second.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&second, v55->second.__r_.__value_.__l.__data_, v55->second.__r_.__value_.__l.__size_);
      }
      else {
        std::string second = v55->second;
      }
      unsigned int v59 = (second.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &second
          : (std::string *)second.__r_.__value_.__r.__words[0];
      uint64_t v60 = (ACFULogging *)CFStringCreateWithCString(alloc, (const char *)v59, 0x600u);
      uint64_t v62 = v60;
      if (v60) {
        break;
      }
      uint64_t v6 = 1007;
      if (SHIBYTE(second.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_181;
      }
LABEL_182:
      if (SHIBYTE(v706.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v706.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_953:
          ACFULogging::getLogInstance(v60);
          ACFULogging::handleMessage();
          goto LABEL_1133;
        }
      }
      else if (v6)
      {
        goto LABEL_953;
      }
      if (SHIBYTE(v55->first.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v728, v55->first.__r_.__value_.__l.__data_, v55->first.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v67 = *(_OWORD *)&v55->first.__r_.__value_.__l.__data_;
        *(void *)&v728[16] = *((void *)&v55->first.__r_.__value_.__l + 2);
        *(_OWORD *)v728 = v67;
      }
      *(void *)&v728[24] = v57;
      uint64_t v68 = v717;
      CFAbsoluteTime v69 = &v717;
      uint64_t v70 = &v717;
      if (!v717) {
        goto LABEL_216;
      }
      char v71 = v728[23];
      if (v728[23] >= 0) {
        uint64_t v72 = v728;
      }
      else {
        uint64_t v72 = *(unsigned char **)v728;
      }
      if (v728[23] >= 0) {
        unint64_t v73 = v728[23];
      }
      else {
        unint64_t v73 = *(void *)&v728[8];
      }
      do
      {
        while (1)
        {
          CFAbsoluteTime v69 = (uint64_t **)v68;
          uint64_t v76 = v68[4];
          char v74 = v68 + 4;
          long long v75 = (uint64_t *)v76;
          int v77 = *((char *)v74 + 23);
          unint64_t v78 = v77 >= 0 ? v74 : v75;
          unint64_t v79 = v77 >= 0 ? *((unsigned __int8 *)v74 + 23) : v74[1];
          size_t v80 = v79 >= v73 ? v73 : v79;
          int v81 = memcmp(v72, v78, v80);
          if (v81) {
            break;
          }
          if (v73 >= v79) {
            goto LABEL_210;
          }
LABEL_196:
          uint64_t v68 = *v69;
          uint64_t v70 = v69;
          if (!*v69) {
            goto LABEL_216;
          }
        }
        if (v81 < 0) {
          goto LABEL_196;
        }
LABEL_210:
        uint64_t v54 = memcmp(v78, v72, v80);
        if (v54)
        {
          if ((v54 & 0x80000000) == 0) {
            goto LABEL_219;
          }
        }
        else if (v79 >= v73)
        {
          goto LABEL_219;
        }
        uint64_t v68 = v69[1];
      }
      while (v68);
      uint64_t v70 = v69 + 1;
LABEL_216:
      char v82 = operator new(0x40uLL);
      v82[2] = *(_OWORD *)v728;
      uint64_t v83 = *(void *)&v728[16];
      memset(v728, 0, 24);
      *((void *)v82 + 6) = v83;
      *((void *)v82 + 7) = v57;
      *(void *)char v82 = 0;
      *((void *)v82 + 1) = 0;
      *((void *)v82 + 2) = v69;
      char *v70 = (uint64_t *)v82;
      if (*v716)
      {
        v716 = (uint64_t **)*v716;
        char v82 = *v70;
      }
      uint64_t v54 = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v717, (uint64_t *)v82);
      ++v718;
      char v71 = v728[23];
LABEL_219:
      if (v71 < 0) {
        operator delete(*(void **)v728);
      }
      if (++v55 == v56) {
        goto LABEL_234;
      }
    }
    std::string::size_type v63 = HIBYTE(v706.__r_.__value_.__r.__words[2]);
    if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v63 = v706.__r_.__value_.__l.__size_;
    }
    if (v63 == 7)
    {
      std::string::size_type v84 = &v706;
      if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v84 = (std::string *)v706.__r_.__value_.__r.__words[0];
      }
      int data = (int)v84->__r_.__value_.__l.__data_;
      int v86 = *(_DWORD *)((char *)v84->__r_.__value_.__r.__words + 3);
      BOOL v87 = data == 1752462689 && v86 == 1734501480;
      if (v87) {
        goto LABEL_178;
      }
    }
    else if (v63 == 8)
    {
      uint64_t v64 = &v706;
      if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v64 = (std::string *)v706.__r_.__value_.__r.__words[0];
      }
      if (v64->__r_.__value_.__r.__words[0] == 0x79616C64746F6F62
        || v64->__r_.__value_.__r.__words[0] == 0x7374726175676264
        || v64->__r_.__value_.__r.__words[0] == 0x6B636F6C72727463
        || v64->__r_.__value_.__r.__words[0] == 0x746F6F626F747561)
      {
LABEL_178:
        *(void *)v728 = 0;
        char Num32FromString = support::cf::createNum32FromString(v60, (const __CFString *)v728, v61);
        uint64_t v66 = *(ACFULogging **)v728;
        if (Num32FromString)
        {
          uint64_t v6 = 0;
        }
        else
        {
          if (*(void *)v728)
          {
            CFRelease(*(CFTypeRef *)v728);
            *(void *)v728 = 0;
          }
          uint64_t v6 = 1;
          uint64_t v66 = v57;
        }
        CFRelease(v62);
        char v57 = v66;
        if ((SHIBYTE(second.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_182;
        }
LABEL_181:
        operator delete(second.__r_.__value_.__l.__data_);
        goto LABEL_182;
      }
    }
    uint64_t v6 = 0;
    char v57 = v60;
    if ((SHIBYTE(second.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_181;
  }
LABEL_234:
  ACFURTKitNVRMGenerator::create();
  uint64_t v91 = *(void *)v728;
  if (*(void *)v728)
  {
    CFStringRef v92 = operator new(0x20uLL);
    *CFStringRef v92 = &unk_26CECD780;
    v92[1] = 0;
    v92[2] = 0;
    v92[3] = v91;
    *(void *)v728 = 0;
    unint64_t v93 = (std::__shared_weak_count *)a4[1];
    *a4 = v91;
    a4[1] = v92;
    if (!v93) {
      goto LABEL_240;
    }
  }
  else
  {
    *(void *)v728 = 0;
    unint64_t v93 = (std::__shared_weak_count *)a4[1];
    *a4 = 0;
    a4[1] = 0;
    if (!v93) {
      goto LABEL_240;
    }
  }
  if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
LABEL_240:
  uint64_t v94 = *(ACFULogging **)v728;
  *(void *)v728 = 0;
  if (v94)
  {
    unint64_t v95 = (void *)MEMORY[0x223C1CFB0](v94, v88, v89, v90);
    operator delete(v95);
  }
  if (!*a4)
  {
    ACFULogging::getLogInstance(v94);
    ACFULogging::handleMessage();
    uint64_t v6 = 1007;
    goto LABEL_1133;
  }
  if (!a3) {
    goto LABEL_1132;
  }
  std::vector<std::pair<std::string,std::string>>::vector(&v704, &v713);
  long long v726 = 0uLL;
  v725 = 0;
  memset(&__p, 0, sizeof(__p));
  CFTypeRef v722 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v720 = 0;
  CFTypeRef v721 = 0;
  int v96 = (char *)std::vector<std::pair<std::string,std::string>>::vector(&v719, &v704);
  std::vector<std::pair<std::string, std::string>>::pointer v97 = v719.__begin_;
  long long v731 = 0uLL;
  int64_t v732 = 0;
  std::vector<std::pair<std::string, std::string>>::pointer alloca = v719.__end_;
  if (v719.__begin_ == v719.__end_)
  {
    unsigned __int8 v136 = 0;
    goto LABEL_338;
  }
  while (2)
  {
    while (2)
    {
      ACFULogging::getLogInstance((ACFULogging *)v96);
      ACFULogging::handleMessage();
      if (&v731 != (long long *)v97)
      {
        char v98 = HIBYTE(v97->first.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v732) < 0)
        {
          if (v98 >= 0) {
            std::vector<std::pair<std::string, std::string>>::pointer v100 = v97;
          }
          else {
            std::vector<std::pair<std::string, std::string>>::pointer v100 = (std::vector<std::pair<std::string, std::string>>::pointer)v97->first.__r_.__value_.__r.__words[0];
          }
          if (v98 >= 0) {
            size_t v101 = HIBYTE(v97->first.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v101 = v97->first.__r_.__value_.__l.__size_;
          }
          std::string::__assign_no_alias<false>((void **)&v731, v100, v101);
        }
        else if ((*((unsigned char *)&v97->first.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(&v731, v97->first.__r_.__value_.__l.__data_, v97->first.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v99 = *(_OWORD *)&v97->first.__r_.__value_.__l.__data_;
          int64_t v732 = v97->first.__r_.__value_.__r.__words[2];
          long long v731 = v99;
        }
      }
      uint64_t v102 = mNVRAMItems;
      if ((uint64_t *)mNVRAMItems != &qword_26AA8FC80)
      {
        do
        {
          uint64_t v121 = HIBYTE(v97->first.__r_.__value_.__r.__words[2]);
          if ((v121 & 0x80u) == 0) {
            std::string::size_type v122 = HIBYTE(v97->first.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v122 = v97->first.__r_.__value_.__l.__size_;
          }
          uint64_t v123 = *(unsigned __int8 *)(v102 + 79);
          int v124 = (char)v123;
          if ((v123 & 0x80u) != 0) {
            uint64_t v123 = *(void *)(v102 + 64);
          }
          if (v122 != v123) {
            goto LABEL_320;
          }
          unint64_t v125 = (long long *)(v102 + 32);
          if (v124 >= 0) {
            uint64_t v126 = (unsigned __int8 *)(v102 + 56);
          }
          else {
            uint64_t v126 = *(unsigned __int8 **)(v102 + 56);
          }
          if ((v121 & 0x80) != 0)
          {
            int v128 = memcmp(v97->first.__r_.__value_.__l.__data_, v126, v97->first.__r_.__value_.__l.__size_);
            if (&v731 != v125 && !v128) {
              goto LABEL_309;
            }
          }
          else
          {
            if (*((unsigned char *)&v97->first.__r_.__value_.__s + 23))
            {
              uint64_t v127 = 0;
              while (v97->first.__r_.__value_.__s.__data_[v127] == v126[v127])
              {
                if (v121 == ++v127) {
                  goto LABEL_305;
                }
              }
              goto LABEL_320;
            }
LABEL_305:
            if (&v731 != v125)
            {
LABEL_309:
              char v129 = *(unsigned char *)(v102 + 55);
              if (SHIBYTE(v732) < 0)
              {
                if (v129 >= 0) {
                  uint64_t v130 = (void *)(v102 + 32);
                }
                else {
                  uint64_t v130 = *(void **)(v102 + 32);
                }
                if (v129 >= 0) {
                  size_t v131 = *(unsigned __int8 *)(v102 + 55);
                }
                else {
                  size_t v131 = *(void *)(v102 + 40);
                }
                std::string::__assign_no_alias<false>((void **)&v731, v130, v131);
              }
              else if ((*(unsigned char *)(v102 + 55) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(&v731, *(void **)(v102 + 32), *(void *)(v102 + 40));
              }
              else
              {
                long long v731 = *v125;
                int64_t v732 = *(void *)(v102 + 48);
              }
            }
          }
LABEL_320:
          uint64_t v132 = *(uint64_t **)(v102 + 8);
          if (v132)
          {
            do
            {
              unint64_t v133 = v132;
              uint64_t v132 = (uint64_t *)*v132;
            }
            while (v132);
          }
          else
          {
            do
            {
              unint64_t v133 = *(uint64_t **)(v102 + 16);
              BOOL v87 = *v133 == v102;
              uint64_t v102 = (uint64_t)v133;
            }
            while (!v87);
          }
          uint64_t v102 = (uint64_t)v133;
        }
        while (v133 != &qword_26AA8FC80);
      }
      int v103 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v104 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v104 = __p.__r_.__value_.__l.__size_;
      }
      int v105 = SHIBYTE(v732);
      if (v732 >= 0) {
        size_t v106 = HIBYTE(v732);
      }
      else {
        size_t v106 = *((void *)&v731 + 1);
      }
      unint64_t v107 = v106 + v104;
      memset(&__dst, 170, sizeof(__dst));
      if (v106 + v104 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v107 > 0x16)
      {
        uint64_t v134 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v107 | 7) != 0x17) {
          uint64_t v134 = v107 | 7;
        }
        uint64_t v135 = v134 + 1;
        p_dst = (std::string *)operator new(v134 + 1);
        __dst.__r_.__value_.__l.__size_ = v106 + v104;
        __dst.__r_.__value_.__r.__words[2] = v135 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (v104)
        {
LABEL_270:
          if (v103 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(p_dst, p_p, v104);
        }
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v106 + v104;
        if (v104) {
          goto LABEL_270;
        }
      }
      uint64_t v110 = (char *)p_dst + v104;
      if (v106)
      {
        if (v105 >= 0) {
          unint64_t v111 = &v731;
        }
        else {
          unint64_t v111 = (long long *)v731;
        }
        memmove(v110, v111, v106);
      }
      v110[v106] = 0;
      long long v112 = std::string::append(&__dst, "='", 2uLL);
      long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      __s2.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      int v114 = SHIBYTE(v97->second.__r_.__value_.__r.__words[2]);
      if (v114 >= 0) {
        unint64_t v115 = (const std::string::value_type *)&v97->second;
      }
      else {
        unint64_t v115 = v97->second.__r_.__value_.__l.__data_;
      }
      if (v114 >= 0) {
        std::string::size_type v116 = HIBYTE(v97->second.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v116 = v97->second.__r_.__value_.__l.__size_;
      }
      unint64_t v117 = std::string::append(&__s2, v115, v116);
      long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      *(void *)&v728[16] = *((void *)&v117->__r_.__value_.__l + 2);
      *(_OWORD *)v728 = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      int v96 = (char *)std::string::append((std::string *)v728, "',", 2uLL);
      std::string::size_type v119 = *(void *)v96;
      v730[0] = *((void *)v96 + 1);
      *(void *)((char *)v730 + 7) = *(void *)(v96 + 15);
      char v120 = v96[23];
      *((void *)v96 + 1) = 0;
      *((void *)v96 + 2) = 0;
      *(void *)int v96 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v730[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v730 + 7);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v120;
      if ((v728[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v728);
        if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_331;
        }
LABEL_246:
        operator delete(__s2.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_332;
        }
LABEL_247:
        if (++v97 == alloca) {
          goto LABEL_333;
        }
        continue;
      }
      break;
    }
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_246;
    }
LABEL_331:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_247;
    }
LABEL_332:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (++v97 != alloca) {
      continue;
    }
    break;
  }
LABEL_333:
  unsigned __int8 v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_361;
    }
    --__p.__r_.__value_.__l.__size_;
    *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_) = 0;
    unsigned __int8 v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_951;
    }
    goto LABEL_338;
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)
    || (--*((unsigned char *)&__p.__r_.__value_.__s + 23),
        __p.__r_.__value_.__s.__data_[v136 - 1] = 0,
        unsigned __int8 v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]),
        (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
LABEL_338:
    std::string::size_type v137 = v136;
    uint64_t v138 = &__p;
    if (v136) {
      goto LABEL_339;
    }
    goto LABEL_361;
  }
LABEL_951:
  std::string::size_type v137 = __p.__r_.__value_.__l.__size_;
  uint64_t v138 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!__p.__r_.__value_.__l.__size_) {
    goto LABEL_361;
  }
LABEL_339:
  unint64_t v139 = v138;
  if (v137 >= 8)
  {
    unint64_t v139 = (std::string *)((char *)v138 + (v137 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v140 = &v138->__r_.__value_.__s.__data_[3];
    unint64_t v141 = v137 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      int8x8_t v142 = vceq_s8(*(int8x8_t *)(v140 - 3), (int8x8_t)0x2020202020202020);
      if (v142.i8[0])
      {
        *(v140 - 3) = 44;
        if ((v142.i8[1] & 1) == 0) {
          goto LABEL_344;
        }
      }
      else if ((v142.i8[1] & 1) == 0)
      {
LABEL_344:
        if (v142.i8[2]) {
          goto LABEL_345;
        }
        goto LABEL_353;
      }
      *(v140 - 2) = 44;
      if (v142.i8[2])
      {
LABEL_345:
        *(v140 - 1) = 44;
        if ((v142.i8[3] & 1) == 0) {
          goto LABEL_346;
        }
        goto LABEL_354;
      }
LABEL_353:
      if ((v142.i8[3] & 1) == 0)
      {
LABEL_346:
        if (v142.i8[4]) {
          goto LABEL_347;
        }
        goto LABEL_355;
      }
LABEL_354:
      *unint64_t v140 = 44;
      if (v142.i8[4])
      {
LABEL_347:
        v140[1] = 44;
        if ((v142.i8[5] & 1) == 0) {
          goto LABEL_348;
        }
        goto LABEL_356;
      }
LABEL_355:
      if ((v142.i8[5] & 1) == 0)
      {
LABEL_348:
        if (v142.i8[6]) {
          goto LABEL_349;
        }
        goto LABEL_357;
      }
LABEL_356:
      v140[2] = 44;
      if (v142.i8[6])
      {
LABEL_349:
        v140[3] = 44;
        if (v142.i8[7]) {
          goto LABEL_358;
        }
        goto LABEL_341;
      }
LABEL_357:
      if (v142.i8[7]) {
LABEL_358:
      }
        v140[4] = 44;
LABEL_341:
      v140 += 8;
      v141 -= 8;
      if (!v141)
      {
        if (v137 == (v137 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_360;
        }
        break;
      }
    }
  }
  unint64_t v147 = (std::string *)((char *)v138 + v137);
  do
  {
    if (v139->__r_.__value_.__s.__data_[0] == 32) {
      v139->__r_.__value_.__s.__data_[0] = 44;
    }
    unint64_t v139 = (std::string *)((char *)v139 + 1);
  }
  while (v139 != v147);
LABEL_360:
  unsigned __int8 v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_361:
  if ((v136 & 0x80u) == 0) {
    unint64_t v143 = &__p;
  }
  else {
    unint64_t v143 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v144 = v136;
  if ((v136 & 0x80u) != 0) {
    std::string::size_type v144 = __p.__r_.__value_.__l.__size_;
  }
  if (!v144) {
    goto LABEL_1042;
  }
  unint64_t v145 = v143;
  while (1)
  {
    int v146 = v145->__r_.__value_.__s.__data_[0];
    unint64_t v145 = (std::string *)((char *)v145 + 1);
    if (v146 == 44) {
      break;
    }
    unint64_t v143 = v145;
    if (!--v144) {
      goto LABEL_1042;
    }
  }
  memset(v728, 0, sizeof(v728));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v148 = &__p;
  }
  else {
    char v148 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFDataRef v149 = (std::string *)((char *)&v143->__r_.__value_.__l.__data_ + 1);
  char v150 = v148;
  while (2)
  {
    uint64_t v151 = (std::string *)boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((uint64_t)v728, v148, v150, v143);
    unint64_t v153 = *(void *)&v728[32];
    uint64_t v152 = *(void *)&v728[40];
    uint64_t v154 = *(void *)&v728[32] + *(void *)&v728[40];
    uint64_t v155 = (*(void *)&v728[32] + *(void *)&v728[40]) >> 12;
    std::string::size_type v157 = *(char **)&v728[16];
    char v156 = *(char **)&v728[8];
    CFTypeRef v158 = (char *)(*(void *)&v728[8] + 8 * v155);
    uint64_t v159 = *(void *)&v728[16] - *(void *)&v728[8];
    if (*(void *)&v728[16] == *(void *)&v728[8])
    {
      unint64_t v161 = *(void *)&v728[32] >> 12;
      goto LABEL_392;
    }
    uint64_t v160 = *(void *)v158 + (v154 & 0xFFF);
    unint64_t v161 = *(void *)&v728[32] >> 12;
    __int16 v162 = (char *)(*(void *)&v728[8] + 8 * (*(void *)&v728[32] >> 12));
    uint64_t v163 = *(void *)v162 + (*(_WORD *)&v728[32] & 0xFFF);
    if (v160 == v163)
    {
LABEL_392:
      v699 = v151;
      unint64_t v701 = 0;
      if (!*(void *)&v728[40]) {
        goto LABEL_393;
      }
LABEL_382:
      if (*(void *)&v728[32] > 1uLL)
      {
LABEL_707:
        v447 = &v156[8 * v161];
        if (v157 == v156)
        {
          v448 = 0;
          if (v701 <= 1)
          {
LABEL_709:
            v449 = (char **)&v156[8 * v161];
            uint64_t v450 = (uint64_t)v448;
            if (*(char **)v447 == v448)
            {
              v449 = (char **)(v447 - 8);
              uint64_t v450 = *((void *)v447 - 1) + 4096;
            }
            v451 = &asc_21DFBB0DB[-v701 + 2];
            *(unsigned char *)(v450 - 1) = asc_21DFBB0DB[-v701 + 1];
            v452 = (char *)(v450 - 1);
            *(int64x2_t *)&v728[32] = vaddq_s64(*(int64x2_t *)&v728[32], (int64x2_t)xmmword_21DFAD470);
            if (&asc_21DFBB0DB[-v701 + 1] != ", ")
            {
              if (v452 == *v449)
              {
                uint64_t v453 = (uint64_t)*--v449;
                v452 = (char *)(v453 + 4096);
              }
              *--v452 = asc_21DFBB0DB[-v701];
              *(int64x2_t *)&v728[32] = vaddq_s64(*(int64x2_t *)&v728[32], (int64x2_t)xmmword_21DFAD470);
            }
            unint64_t v454 = v701;
            if (!v701) {
              goto LABEL_941;
            }
            uint64_t v455 = (uint64_t)&v448[v701 - *(void *)v447];
            if (v455 >= 1) {
              goto LABEL_717;
            }
LABEL_721:
            unint64_t v460 = 4095 - v455;
            v456 = &v447[-8 * (v460 >> 12)];
            v457 = (char *)(*(void *)v456 + (~(_WORD)v460 & 0xFFF));
            v458 = (void **)v456;
            v459 = v457;
            if (v457 == v448) {
              goto LABEL_722;
            }
            while (1)
            {
LABEL_733:
              if (v452 == *v449)
              {
                uint64_t v468 = (uint64_t)*--v449;
                v452 = (char *)(v468 + 4096);
                if (v459 == *v458) {
                  goto LABEL_735;
                }
              }
              else if (v459 == *v458)
              {
LABEL_735:
                uint64_t v470 = (uint64_t)*--v458;
                v459 = (char *)(v470 + 4096);
              }
              char v469 = *--v459;
              *--v452 = v469;
              *(int64x2_t *)&v728[32] = vaddq_s64(*(int64x2_t *)&v728[32], (int64x2_t)xmmword_21DFAD470);
              if (v459 == v448) {
                goto LABEL_722;
              }
            }
          }
        }
        else
        {
          v448 = (char *)(*(void *)v447 + (v153 & 0xFFF));
          if (v701 <= 1) {
            goto LABEL_709;
          }
        }
        unint64_t v454 = 2;
        v451 = ", ";
        v449 = (char **)&v156[8 * v161];
        v452 = v448;
        uint64_t v455 = (uint64_t)&v448[-*(void *)v447 + 2];
        if (v455 >= 1)
        {
LABEL_717:
          v456 = &v447[8 * ((unint64_t)v455 >> 12)];
          v457 = (char *)(*(void *)v456 + (v455 & 0xFFF));
          v458 = (void **)v456;
          v459 = v457;
          if (v457 != v448) {
            goto LABEL_733;
          }
LABEL_722:
          if (v454 >= v701)
          {
            if (v451 == "") {
              goto LABEL_941;
            }
            goto LABEL_793;
          }
          v461 = v149;
          v462 = *(char **)v447;
          uint64_t v463 = (uint64_t)&v448[v701 - *(void *)v447];
          if (v463 < 1)
          {
            unint64_t v472 = 4095 - v463;
            v464 = (const void **)&v447[-8 * (v472 >> 12)];
            v465 = (char *)*v464 + (~(_WORD)v472 & 0xFFF);
            if (v456 != (char *)v464)
            {
LABEL_725:
              uint64_t v466 = *(void *)v456 + 4096;
              if ((char *)v466 != v457)
              {
                v447 = &v156[8 * v161 + 8];
                if (v466 - (uint64_t)v457 >= v462 - v448 + 4096) {
                  size_t v467 = v462 - v448 + 4096;
                }
                else {
                  size_t v467 = v466 - (void)v457;
                }
                if (v467) {
                  goto LABEL_740;
                }
                while (1)
                {
                  v457 += v467;
                  if (v457 == (char *)v466) {
                    break;
                  }
                  v471 = *(char **)v447;
                  v447 += 8;
                  v448 = v471;
                  if (v466 - (uint64_t)v457 >= 4096) {
                    size_t v467 = 4096;
                  }
                  else {
                    size_t v467 = v466 - (void)v457;
                  }
                  if (v467) {
LABEL_740:
                  }
                    memmove(v448, v457, v467);
                }
                v448 += v467;
                v462 = (char *)*((void *)v447 - 1);
                if (v462 + 4096 == v448)
                {
                  v462 = *(char **)v447;
                  v448 = *(char **)v447;
                }
                else
                {
                  v447 -= 8;
                }
              }
              for (unint64_t j = (const void **)(v456 + 8); j != v464; ++j)
              {
                uint64_t v477 = 0;
                v478 = (char *)*j;
                for (v447 += 8; ; v447 += 8)
                {
                  if (4096 - v477 >= v462 - v448 + 4096) {
                    size_t v479 = v462 - v448 + 4096;
                  }
                  else {
                    size_t v479 = 4096 - v477;
                  }
                  if (v479) {
                    memmove(v448, &v478[v477], v479);
                  }
                  v477 += v479;
                  if (v477 == 4096) {
                    break;
                  }
                  v480 = *(char **)v447;
                  v462 = v480;
                  v448 = v480;
                }
                v448 += v479;
                v462 = (char *)*((void *)v447 - 1);
                if (v462 + 4096 == v448)
                {
                  v462 = *(char **)v447;
                  v448 = *(char **)v447;
                }
                else
                {
                  v447 -= 8;
                }
              }
              v481 = (char *)*v464;
              if (*v464 != v465)
              {
                v482 = *(char **)v447;
                v447 += 8;
                uint64_t v483 = v482 - v448 + 4096;
                if (v465 - v481 >= v483) {
                  size_t v484 = v483;
                }
                else {
                  size_t v484 = v465 - v481;
                }
                if (v484) {
                  goto LABEL_786;
                }
                while (1)
                {
                  v481 += v484;
                  if (v481 == v465) {
                    break;
                  }
                  v485 = *(char **)v447;
                  v447 += 8;
                  v448 = v485;
                  if (v465 - v481 >= 4096) {
                    size_t v484 = 4096;
                  }
                  else {
                    size_t v484 = v465 - v481;
                  }
                  if (v484) {
LABEL_786:
                  }
                    memmove(v448, v481, v484);
                }
                v448 += v484;
                v475 = v447 - 8;
                if ((char *)(*((void *)v447 - 1) + 4096) != v448)
                {
LABEL_789:
                  v447 = v475;
LABEL_790:
                  CFDataRef v149 = v461;
                  if (v451 == "") {
                    goto LABEL_941;
                  }
                  goto LABEL_793;
                }
LABEL_760:
                v448 = *(char **)v447;
                goto LABEL_790;
              }
LABEL_792:
              CFDataRef v149 = v461;
              if (v451 == "") {
                goto LABEL_941;
              }
LABEL_793:
              v488 = *(char **)v447;
              v487 = (void **)(v447 + 8);
              v486 = v488;
              while (1)
              {
                uint64_t v489 = v486 - v448 + 4096;
                if (", " - v451 + 2 >= v489) {
                  size_t v490 = v489;
                }
                else {
                  size_t v490 = ", " - v451 + 2;
                }
                if (v490) {
                  memcpy(v448, v451, v490);
                }
                v451 += v490;
                if (v451 == "") {
                  break;
                }
                v491 = (char *)*v487++;
                v486 = v491;
                v448 = v491;
              }
              goto LABEL_941;
            }
          }
          else
          {
            v464 = (const void **)&v447[8 * ((unint64_t)v463 >> 12)];
            v465 = (char *)*v464 + (v463 & 0xFFF);
            if (v456 != (char *)v464) {
              goto LABEL_725;
            }
          }
          if (v457 != v465)
          {
            v447 = &v156[8 * v161 + 8];
            if (v465 - v457 >= v462 - v448 + 4096) {
              size_t v473 = v462 - v448 + 4096;
            }
            else {
              size_t v473 = v465 - v457;
            }
            if (v473) {
              goto LABEL_757;
            }
            while (1)
            {
              v457 += v473;
              if (v457 == v465) {
                break;
              }
              v474 = *(char **)v447;
              v447 += 8;
              v448 = v474;
              if (v465 - v457 >= 4096) {
                size_t v473 = 4096;
              }
              else {
                size_t v473 = v465 - v457;
              }
              if (v473) {
LABEL_757:
              }
                memmove(v448, v457, v473);
            }
            v448 += v473;
            v475 = v447 - 8;
            if ((char *)(*((void *)v447 - 1) + 4096) != v448) {
              goto LABEL_789;
            }
            goto LABEL_760;
          }
          goto LABEL_792;
        }
        goto LABEL_721;
      }
      v696 = v149;
      uint64_t v164 = (v159 << 9) - 1;
      if (*(void *)&v728[16] == *(void *)&v728[8]) {
        uint64_t v164 = 0;
      }
      unint64_t v165 = ((unint64_t)(*(void *)&v728[16] == *(void *)&v728[8]) - *(void *)&v728[32] + 2) >> 12;
      unint64_t v166 = v165 + 1;
      unint64_t v167 = (unint64_t)(v164 - v154) >> 12;
      if (v165 + 1 < v167) {
        unint64_t v168 = v165 + 1;
      }
      else {
        unint64_t v168 = v167;
      }
      if (v165 < v167)
      {
        unint64_t v153 = *(void *)&v728[32] + (v168 << 12);
        *(void *)&v728[32] = v153;
        unint64_t v170 = *(void *)&v728[16] - 8;
        uint64_t v169 = *(void *)(*(void *)&v728[16] - 8);
        *(void *)&v728[16] -= 8;
        if (*(void *)&v728[8] == *(void *)v728)
        {
          if (v170 >= *(void *)&v728[24])
          {
            if (*(void *)&v728[24] == *(void *)&v728[8]) {
              unint64_t v431 = 1;
            }
            else {
              unint64_t v431 = (uint64_t)(*(void *)&v728[24] - *(void *)&v728[8]) >> 2;
            }
            if (v431 >> 61) {
              goto LABEL_1186;
            }
            v432 = (char *)operator new(8 * v431);
            unint64_t v433 = (v431 + 3) >> 2;
            size_t v171 = &v432[8 * v433];
            v434 = v171;
            unint64_t v435 = v170 - (void)v156;
            if ((char *)v170 != v156)
            {
              v434 = &v171[v435 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v436 = v435 - 8;
              v437 = &v432[8 * v433];
              v438 = v156;
              if (v436 < 0x38) {
                goto LABEL_1200;
              }
              uint64_t v439 = 8 * v433;
              v437 = &v432[8 * v433];
              v438 = v156;
              if ((unint64_t)(v437 - v156) < 0x20) {
                goto LABEL_1200;
              }
              uint64_t v440 = (v436 >> 3) + 1;
              uint64_t v441 = 8 * (v440 & 0x3FFFFFFFFFFFFFFCLL);
              v437 = &v171[v441];
              v438 = &v156[v441];
              v442 = (long long *)(v156 + 16);
              v443 = &v432[v439 + 16];
              uint64_t v444 = v440 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v445 = *v442;
                *((_OWORD *)v443 - 1) = *(v442 - 1);
                *(_OWORD *)v443 = v445;
                v442 += 2;
                v443 += 32;
                v444 -= 4;
              }
              while (v444);
              if (v440 != (v440 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1200:
                do
                {
                  uint64_t v446 = *(void *)v438;
                  v438 += 8;
                  *(void *)v437 = v446;
                  v437 += 8;
                }
                while (v437 != v434);
              }
            }
            *(void *)v728 = v432;
            *(void *)&v728[8] = v171;
            *(void *)&v728[16] = v434;
            *(void *)&v728[24] = &v432[8 * v431];
            if (v156) {
              operator delete(v156);
            }
          }
          else
          {
            uint64_t v249 = (uint64_t)(*(void *)&v728[24] - v170) >> 3;
            if (v249 >= -1) {
              uint64_t v250 = v249 + 1;
            }
            else {
              uint64_t v250 = v249 + 2;
            }
            uint64_t v251 = v250 >> 1;
            unint64_t v252 = v170 + 8 * (v250 >> 1);
            size_t v171 = (char *)(v252 - (v170 - *(void *)&v728[8]));
            if (v170 != *(void *)&v728[8])
            {
              memmove((void *)(v252 - (v170 - *(void *)&v728[8])), *(const void **)&v728[8], v170 - *(void *)&v728[8]);
              char v156 = (char *)v170;
            }
            *(void *)&v728[8] = v171;
            *(void *)&v728[16] = &v156[8 * v251];
          }
        }
        else
        {
          size_t v171 = *(char **)&v728[8];
        }
        CFDataRef v149 = v696;
        *((void *)v171 - 1) = v169;
        char v156 = (char *)(*(void *)&v728[8] - 8);
        *(void *)&v728[8] -= 8;
LABEL_706:
        std::string::size_type v157 = *(char **)&v728[16];
        unint64_t v161 = v153 >> 12;
        goto LABEL_707;
      }
      unint64_t v188 = v166 - v168;
      int v189 = *(char **)v728;
      uint64_t v190 = (uint64_t)(*(void *)&v728[16] - *(void *)&v728[8]) >> 3;
      if (v166 - v168 > ((uint64_t)(*(void *)&v728[24] - *(void *)v728) >> 3) - v190)
      {
        if (*(void *)&v728[16] == *(void *)&v728[8]) {
          uint64_t v191 = -1;
        }
        else {
          uint64_t v191 = 0;
        }
        unint64_t v192 = v188 + v190;
        if ((uint64_t)(*(void *)&v728[24] - *(void *)v728) >> 2 <= v192) {
          unint64_t v193 = v192;
        }
        else {
          unint64_t v193 = (uint64_t)(*(void *)&v728[24] - *(void *)v728) >> 2;
        }
        uint64_t v692 = v191;
        uint64_t v694 = *(void *)&v728[32];
        if (v193)
        {
          if (v193 >> 61) {
            goto LABEL_1186;
          }
          CFTypeRef v194 = (char *)operator new(8 * v193);
        }
        else
        {
          CFTypeRef v194 = 0;
        }
        unint64_t v691 = v166 << 12;
        v283 = v194;
        char v156 = v194;
        v284 = &v194[8 * v193];
        while (1)
        {
          while (1)
          {
            v285 = operator new(0x1000uLL);
            if (v283 == v284) {
              break;
            }
LABEL_526:
            *(void *)v283 = v285;
            v283 += 8;
            if (!--v188) {
              goto LABEL_551;
            }
          }
          if (v156 > v194)
          {
            uint64_t v286 = (v156 - v194) >> 3;
            if (v286 >= -1) {
              uint64_t v287 = v286 + 1;
            }
            else {
              uint64_t v287 = v286 + 2;
            }
            uint64_t v288 = v287 >> 1;
            v289 = &v156[-8 * (v287 >> 1)];
            v290 = v284;
            if (v284 != v156)
            {
              memmove(v289, v156, v284 - v156);
              v290 = v156;
            }
            v283 = &v289[v284 - v156];
            char v156 = &v290[-8 * v288];
            goto LABEL_526;
          }
          if (v284 == v194) {
            unint64_t v291 = 1;
          }
          else {
            unint64_t v291 = (v284 - v194) >> 2;
          }
          if (v291 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v292 = (char *)operator new(8 * v291);
          v293 = v292;
          unint64_t v294 = v291 >> 2;
          v295 = &v292[8 * (v291 >> 2)];
          v296 = v295;
          int64_t v297 = v284 - v156;
          if (v284 != v156)
          {
            v296 = &v295[v297 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v298 = v297 - 8;
            if (v298 >= 0x38 && (uint64_t v299 = 8 * v294, (unint64_t)(&v292[8 * v294] - v156) >= 0x20))
            {
              uint64_t v303 = (v298 >> 3) + 1;
              uint64_t v304 = 8 * (v303 & 0x3FFFFFFFFFFFFFFCLL);
              v300 = &v295[v304];
              v301 = &v156[v304];
              v305 = (long long *)(v156 + 16);
              v306 = &v292[v299 + 16];
              uint64_t v307 = v303 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v308 = *v305;
                *((_OWORD *)v306 - 1) = *(v305 - 1);
                *(_OWORD *)v306 = v308;
                v305 += 2;
                v306 += 32;
                v307 -= 4;
              }
              while (v307);
              if (v303 == (v303 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_543;
              }
            }
            else
            {
              v300 = &v292[8 * (v291 >> 2)];
              v301 = v156;
            }
            do
            {
              uint64_t v302 = *(void *)v301;
              v301 += 8;
              *(void *)v300 = v302;
              v300 += 8;
            }
            while (v300 != v296);
          }
LABEL_543:
          v284 = &v292[8 * v291];
          if (v194) {
            operator delete(v194);
          }
          char v156 = v295;
          CFTypeRef v194 = v293;
          *(void *)v296 = v285;
          v283 = v296 + 8;
          if (!--v188)
          {
LABEL_551:
            uint64_t v309 = *(void *)&v728[16];
            if (!v168)
            {
LABEL_552:
              v310 = *(uint64_t **)&v728[8];
              if (*(void *)&v728[8] == v309)
              {
LABEL_553:
                v311 = *(void **)v728;
                *(void *)v728 = v194;
                *(void *)&v728[8] = v156;
                *(void *)&v728[16] = v283;
                *(void *)&v728[24] = v284;
                unint64_t v153 = v694 + v692 + v691;
                *(void *)&v728[32] = v153;
                if (v311) {
                  operator delete(v311);
                }
                goto LABEL_555;
              }
              while (2)
              {
                while (v283 != v284)
                {
                  uint64_t v335 = *v310++;
                  *(void *)v283 = v335;
                  v283 += 8;
                  if (v310 == *(uint64_t **)&v728[16]) {
                    goto LABEL_553;
                  }
                }
                if (v156 > v194)
                {
                  uint64_t v336 = (v156 - v194) >> 3;
                  if (v336 >= -1) {
                    uint64_t v337 = v336 + 1;
                  }
                  else {
                    uint64_t v337 = v336 + 2;
                  }
                  uint64_t v338 = v337 >> 1;
                  v339 = &v156[-8 * (v337 >> 1)];
                  v340 = v284;
                  if (v284 != v156)
                  {
                    memmove(v339, v156, v284 - v156);
                    v340 = v156;
                  }
                  v341 = &v339[v284 - v156];
                  v342 = &v340[-8 * v338];
                  goto LABEL_603;
                }
                if (v284 == v194) {
                  unint64_t v343 = 1;
                }
                else {
                  unint64_t v343 = (v284 - v194) >> 2;
                }
                if (v343 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v344 = (char *)operator new(8 * v343);
                v345 = v344;
                unint64_t v346 = v343 >> 2;
                v342 = &v344[8 * (v343 >> 2)];
                v341 = v342;
                int64_t v347 = v284 - v156;
                if (v284 != v156)
                {
                  v341 = &v342[v347 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v348 = v347 - 8;
                  if (v348 < 0x38 || (uint64_t v349 = 8 * v346, (unint64_t)(&v344[8 * v346] - v156) < 0x20))
                  {
                    v350 = &v344[8 * (v343 >> 2)];
                    v351 = v156;
                    goto LABEL_599;
                  }
                  uint64_t v354 = (v348 >> 3) + 1;
                  uint64_t v355 = 8 * (v354 & 0x3FFFFFFFFFFFFFFCLL);
                  v350 = &v342[v355];
                  v351 = &v156[v355];
                  v356 = (long long *)(v156 + 16);
                  v357 = &v344[v349 + 16];
                  uint64_t v358 = v354 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v359 = *v356;
                    *((_OWORD *)v357 - 1) = *(v356 - 1);
                    *(_OWORD *)v357 = v359;
                    v356 += 2;
                    v357 += 32;
                    v358 -= 4;
                  }
                  while (v358);
                  if (v354 != (v354 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_599:
                      uint64_t v352 = *(void *)v351;
                      v351 += 8;
                      *(void *)v350 = v352;
                      v350 += 8;
                    }
                    while (v350 != v341);
                  }
                }
                v284 = &v344[8 * v343];
                if (v194) {
                  operator delete(v194);
                }
                CFTypeRef v194 = v345;
LABEL_603:
                uint64_t v353 = *v310++;
                *(void *)v341 = v353;
                v283 = v341 + 8;
                char v156 = v342;
                if (v310 == *(uint64_t **)&v728[16]) {
                  goto LABEL_553;
                }
                continue;
              }
            }
            while (2)
            {
              if (v283 != v284)
              {
                v312 = v156;
                goto LABEL_557;
              }
              if (v156 > v194)
              {
                uint64_t v313 = (v156 - v194) >> 3;
                if (v313 >= -1) {
                  uint64_t v314 = v313 + 1;
                }
                else {
                  uint64_t v314 = v313 + 2;
                }
                uint64_t v315 = v314 >> 1;
                v316 = &v156[-8 * (v314 >> 1)];
                v317 = v284;
                if (v284 != v156)
                {
                  memmove(v316, v156, v284 - v156);
                  v317 = v156;
                }
                uint64_t v318 = -v315;
                v283 = &v316[v284 - v156];
                v312 = &v317[8 * v318];
                goto LABEL_557;
              }
              if (v284 == v194) {
                unint64_t v319 = 1;
              }
              else {
                unint64_t v319 = (v284 - v194) >> 2;
              }
              if (v319 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v320 = (char *)operator new(8 * v319);
              v321 = v320;
              unint64_t v322 = v319 >> 2;
              v312 = &v320[8 * (v319 >> 2)];
              v283 = v312;
              int64_t v323 = v284 - v156;
              if (v284 != v156)
              {
                v283 = &v312[v323 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v324 = v323 - 8;
                if (v324 < 0x38 || (uint64_t v325 = 8 * v322, (unint64_t)(&v320[8 * v322] - v156) < 0x20))
                {
                  v326 = &v320[8 * (v319 >> 2)];
                  v327 = v156;
                  goto LABEL_574;
                }
                uint64_t v329 = (v324 >> 3) + 1;
                uint64_t v330 = 8 * (v329 & 0x3FFFFFFFFFFFFFFCLL);
                v326 = &v312[v330];
                v327 = &v156[v330];
                v331 = (long long *)(v156 + 16);
                v332 = &v320[v325 + 16];
                uint64_t v333 = v329 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v334 = *v331;
                  *((_OWORD *)v332 - 1) = *(v331 - 1);
                  *(_OWORD *)v332 = v334;
                  v331 += 2;
                  v332 += 32;
                  v333 -= 4;
                }
                while (v333);
                if (v329 != (v329 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_574:
                    uint64_t v328 = *(void *)v327;
                    v327 += 8;
                    *(void *)v326 = v328;
                    v326 += 8;
                  }
                  while (v326 != v283);
                }
              }
              v284 = &v320[8 * v319];
              if (v194) {
                operator delete(v194);
              }
              CFTypeRef v194 = v321;
LABEL_557:
              *(void *)v283 = *(void *)(v309 - 8);
              v283 += 8;
              uint64_t v309 = *(void *)&v728[16] - 8;
              *(void *)&v728[16] -= 8;
              char v156 = v312;
              if (!--v168) {
                goto LABEL_552;
              }
              continue;
            }
          }
        }
      }
      if (!v188) {
        goto LABEL_491;
      }
      if (*(void *)&v728[8] != *(void *)v728)
      {
        while (1)
        {
          CFStringRef v199 = operator new(0x1000uLL);
          if (v156 == v189)
          {
            if ((unint64_t)v157 >= *(void *)&v728[24])
            {
              if (*(char **)&v728[24] == v189) {
                unint64_t v204 = 1;
              }
              else {
                unint64_t v204 = (uint64_t)(*(void *)&v728[24] - (void)v189) >> 2;
              }
              if (v204 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v205 = (char *)operator new(8 * v204);
              unint64_t v206 = (v204 + 3) >> 2;
              char v156 = &v205[8 * v206];
              CFTypeRef v207 = v156;
              int64_t v208 = v157 - v189;
              if (v157 != v189)
              {
                CFTypeRef v207 = &v156[v208 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v209 = v208 - 8;
                uint64_t v210 = &v205[8 * v206];
                CFTypeRef v211 = v189;
                if (v209 < 0x38) {
                  goto LABEL_1201;
                }
                uint64_t v212 = 8 * v206;
                uint64_t v210 = &v205[8 * v206];
                CFTypeRef v211 = v189;
                if ((unint64_t)(v210 - v189) < 0x20) {
                  goto LABEL_1201;
                }
                uint64_t v213 = (v209 >> 3) + 1;
                uint64_t v214 = 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v210 = &v156[v214];
                CFTypeRef v211 = &v189[v214];
                long long v215 = (long long *)(v189 + 16);
                long long v216 = &v205[v212 + 16];
                uint64_t v217 = v213 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v218 = *v215;
                  *((_OWORD *)v216 - 1) = *(v215 - 1);
                  *(_OWORD *)long long v216 = v218;
                  v215 += 2;
                  v216 += 32;
                  v217 -= 4;
                }
                while (v217);
                if (v213 != (v213 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1201:
                  do
                  {
                    uint64_t v219 = *(void *)v211;
                    v211 += 8;
                    *(void *)uint64_t v210 = v219;
                    v210 += 8;
                  }
                  while (v210 != v207);
                }
              }
              *(void *)v728 = v205;
              *(void *)&v728[8] = v156;
              *(void *)&v728[16] = v207;
              *(void *)&v728[24] = &v205[8 * v204];
              if (v189)
              {
                operator delete(v189);
                char v156 = *(char **)&v728[8];
              }
            }
            else
            {
              uint64_t v200 = (uint64_t)(*(void *)&v728[24] - (void)v157) >> 3;
              if (v200 >= -1) {
                uint64_t v201 = v200 + 1;
              }
              else {
                uint64_t v201 = v200 + 2;
              }
              uint64_t v202 = v201 >> 1;
              v203 = &v157[8 * (v201 >> 1)];
              char v156 = &v203[-(v157 - v189)];
              if (v157 != v189)
              {
                memmove(&v203[-(v157 - v189)], v189, v157 - v189);
                std::string::size_type v157 = *(char **)&v728[16];
              }
              *(void *)&v728[8] = v156;
              *(void *)&v728[16] = &v157[8 * v202];
            }
          }
          *((void *)v156 - 1) = v199;
          std::string::size_type v157 = *(char **)&v728[16];
          char v156 = (char *)(*(void *)&v728[8] - 8);
          uint64_t v220 = 4095;
          if (*(void *)&v728[16] - (*(void *)&v728[8] - 8) != 8) {
            uint64_t v220 = 4096;
          }
          unint64_t v153 = v220 + *(void *)&v728[32];
          *(void *)&v728[8] -= 8;
          *(void *)&v728[32] += v220;
          if (!--v188) {
            break;
          }
          int v189 = *(char **)v728;
          if (v156 == *(char **)v728) {
            goto LABEL_454;
          }
        }
LABEL_491:
        v153 += v168 << 12;
        for (*(void *)&v728[32] = v153; v168; --v168)
        {
          unint64_t v255 = *(void *)&v728[16] - 8;
          uint64_t v254 = *(void *)(*(void *)&v728[16] - 8);
          *(void *)&v728[16] -= 8;
          if (v156 == *(char **)v728)
          {
            if (v255 >= *(void *)&v728[24])
            {
              if (*(char **)&v728[24] == v156) {
                unint64_t v260 = 1;
              }
              else {
                unint64_t v260 = (uint64_t)(*(void *)&v728[24] - (void)v156) >> 2;
              }
              if (v260 >> 61) {
                goto LABEL_1186;
              }
              v261 = (char *)operator new(8 * v260);
              unint64_t v262 = (v260 + 3) >> 2;
              uint64_t v253 = &v261[8 * v262];
              v263 = v253;
              unint64_t v264 = v255 - (void)v156;
              if ((char *)v255 != v156)
              {
                v263 = &v253[v264 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v265 = v264 - 8;
                v266 = &v261[8 * v262];
                v267 = v156;
                if (v265 < 0x38) {
                  goto LABEL_1202;
                }
                uint64_t v268 = 8 * v262;
                v266 = &v261[8 * v262];
                v267 = v156;
                if ((unint64_t)(v266 - v156) < 0x20) {
                  goto LABEL_1202;
                }
                uint64_t v269 = (v265 >> 3) + 1;
                uint64_t v270 = 8 * (v269 & 0x3FFFFFFFFFFFFFFCLL);
                v266 = &v253[v270];
                v267 = &v156[v270];
                v271 = (long long *)(v156 + 16);
                v272 = &v261[v268 + 16];
                uint64_t v273 = v269 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v274 = *v271;
                  *((_OWORD *)v272 - 1) = *(v271 - 1);
                  *(_OWORD *)v272 = v274;
                  v271 += 2;
                  v272 += 32;
                  v273 -= 4;
                }
                while (v273);
                if (v269 != (v269 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1202:
                  do
                  {
                    uint64_t v275 = *(void *)v267;
                    v267 += 8;
                    *(void *)v266 = v275;
                    v266 += 8;
                  }
                  while (v266 != v263);
                }
              }
              *(void *)v728 = v261;
              *(void *)&v728[8] = v253;
              *(void *)&v728[16] = v263;
              *(void *)&v728[24] = &v261[8 * v260];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              uint64_t v256 = (uint64_t)(*(void *)&v728[24] - v255) >> 3;
              if (v256 >= -1) {
                uint64_t v257 = v256 + 1;
              }
              else {
                uint64_t v257 = v256 + 2;
              }
              uint64_t v258 = v257 >> 1;
              unint64_t v259 = v255 + 8 * (v257 >> 1);
              uint64_t v253 = (char *)(v259 - (v255 - (void)v156));
              if ((char *)v255 != v156)
              {
                memmove((void *)(v259 - (v255 - (void)v156)), v156, v255 - (void)v156);
                char v156 = (char *)v255;
              }
              *(void *)&v728[8] = v253;
              *(void *)&v728[16] = &v156[8 * v258];
            }
          }
          else
          {
            uint64_t v253 = v156;
          }
          *((void *)v253 - 1) = v254;
          char v156 = (char *)(*(void *)&v728[8] - 8);
          *(void *)&v728[8] -= 8;
        }
LABEL_555:
        CFDataRef v149 = v696;
        goto LABEL_706;
      }
LABEL_454:
      unint64_t v221 = v188;
      while (1)
      {
        long long v223 = operator new(0x1000uLL);
        if (v157 == *(char **)&v728[24])
        {
          long long v225 = *(char **)&v728[8];
          long long v224 = *(void **)v728;
          if (*(void *)&v728[8] <= *(void *)v728)
          {
            if (v157 == *(char **)v728) {
              unint64_t v231 = 1;
            }
            else {
              unint64_t v231 = (uint64_t)&v157[-*(void *)v728] >> 2;
            }
            if (v231 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v232 = operator new(8 * v231);
            unint64_t v233 = v231 >> 2;
            std::string v234 = &v232[8 * (v231 >> 2)];
            int64_t v235 = v157 - v225;
            BOOL v87 = v157 == v225;
            std::string::size_type v157 = v234;
            if (!v87)
            {
              std::string::size_type v157 = &v234[v235 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v236 = v235 - 8;
              if (v236 < 0x38)
              {
                CFTypeRef v237 = &v232[8 * (v231 >> 2)];
                goto LABEL_475;
              }
              uint64_t v238 = 8 * v233;
              unint64_t v239 = &v232[8 * v233] - v225;
              CFTypeRef v237 = &v232[8 * (v231 >> 2)];
              if (v239 < 0x20) {
                goto LABEL_1203;
              }
              uint64_t v240 = (v236 >> 3) + 1;
              uint64_t v241 = 8 * (v240 & 0x3FFFFFFFFFFFFFFCLL);
              CFTypeRef v237 = &v234[v241];
              v242 = &v225[v241];
              v243 = (long long *)(v225 + 16);
              long long v244 = &v232[v238 + 16];
              uint64_t v245 = v240 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v246 = *v243;
                *(v244 - 1) = *(v243 - 1);
                *long long v244 = v246;
                v243 += 2;
                v244 += 2;
                v245 -= 4;
              }
              while (v245);
              long long v225 = v242;
              if (v240 != (v240 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1203:
                do
                {
LABEL_475:
                  uint64_t v247 = *(void *)v225;
                  v225 += 8;
                  *(void *)CFTypeRef v237 = v247;
                  v237 += 8;
                }
                while (v237 != v157);
              }
            }
            *(void *)v728 = v232;
            *(void *)&v728[8] = &v232[8 * (v231 >> 2)];
            *(void *)&v728[16] = v157;
            *(void *)&v728[24] = &v232[8 * v231];
            if (v224)
            {
              operator delete(v224);
              std::string::size_type v157 = *(char **)&v728[16];
            }
            goto LABEL_456;
          }
          uint64_t v226 = (uint64_t)(*(void *)&v728[8] - *(void *)v728) >> 3;
          if (v226 >= -1) {
            uint64_t v227 = v226 + 1;
          }
          else {
            uint64_t v227 = v226 + 2;
          }
          uint64_t v228 = v227 >> 1;
          uint64_t v229 = *(void *)&v728[8] - 8 * (v227 >> 1);
          std::string v230 = &v157[-*(void *)&v728[8]];
          if (v157 != *(char **)&v728[8])
          {
            memmove((void *)(*(void *)&v728[8] - 8 * (v227 >> 1)), *(const void **)&v728[8], (size_t)&v157[-*(void *)&v728[8]]);
            std::string::size_type v157 = *(char **)&v728[8];
          }
          long long v222 = &v157[-8 * v228];
          std::string::size_type v157 = &v230[v229];
          *(void *)&v728[8] = v222;
          *(void *)&v728[16] = &v230[v229];
        }
LABEL_456:
        *(void *)std::string::size_type v157 = v223;
        std::string::size_type v157 = (char *)(*(void *)&v728[16] + 8);
        *(void *)&v728[16] += 8;
        if (!--v221)
        {
          v168 += v188;
          unint64_t v153 = *(void *)&v728[32];
          char v156 = *(char **)&v728[8];
          goto LABEL_491;
        }
      }
    }
    v699 = v151;
    unint64_t v701 = v160 + ((v158 - v162) << 9) - (v163 + *(void *)v158) + *(void *)v162;
    if (v701 < *(void *)&v728[40] - v701) {
      goto LABEL_382;
    }
LABEL_393:
    uint64_t v172 = (v159 << 9) - 1;
    uint64_t v173 = *(void *)&v728[16] - *(void *)&v728[8];
    if (*(void *)&v728[16] == *(void *)&v728[8]) {
      uint64_t v172 = 0;
    }
    unint64_t v174 = v172 - v154;
    if (v174 > 1) {
      goto LABEL_864;
    }
    v697 = v149;
    uint64_t v175 = 2;
    if (*(void *)&v728[16] == *(void *)&v728[8]) {
      uint64_t v175 = 3;
    }
    unint64_t v176 = (v175 - v174) >> 12;
    if (v176 + 1 < v161) {
      unint64_t v177 = v176 + 1;
    }
    else {
      unint64_t v177 = v161;
    }
    if (v176 < v161)
    {
      unint64_t v178 = *(void *)&v728[32] - (v177 << 12);
      *(void *)&v728[32] = v178;
      char v180 = (char *)(*(void *)&v728[8] + 8);
      uint64_t v179 = **(void **)&v728[8];
      *(void *)&v728[8] += 8;
      if (*(void *)&v728[16] != *(void *)&v728[24]) {
        goto LABEL_861;
      }
      size_t v181 = *(void **)v728;
      if ((unint64_t)v180 > *(void *)v728)
      {
        uint64_t v182 = (uint64_t)&v180[-*(void *)v728] >> 3;
        if (v182 >= -1) {
          uint64_t v183 = v182 + 1;
        }
        else {
          uint64_t v183 = v182 + 2;
        }
        uint64_t v184 = v183 >> 1;
        char v185 = &v180[-8 * (v183 >> 1)];
        uint64_t v186 = *(void *)&v728[16] - (void)v180;
        if (*(char **)&v728[16] != v180)
        {
          memmove(&v180[-8 * (v183 >> 1)], v180, *(void *)&v728[16] - (void)v180);
          std::string::size_type v157 = v180;
        }
        size_t v187 = &v157[-8 * v184];
        std::string::size_type v157 = &v185[v186];
        *(void *)&v728[8] = v187;
        *(void *)&v728[16] = &v185[v186];
        goto LABEL_861;
      }
      if (*(void *)&v728[16] == *(void *)v728) {
        unint64_t v276 = 1;
      }
      else {
        unint64_t v276 = (uint64_t)(*(void *)&v728[16] - *(void *)v728) >> 2;
      }
      if (v276 >> 61) {
        goto LABEL_1186;
      }
      v277 = operator new(8 * v276);
      unint64_t v278 = v276 >> 2;
      v279 = &v277[8 * (v276 >> 2)];
      int64_t v280 = v157 - v180;
      BOOL v87 = v157 == v180;
      std::string::size_type v157 = v279;
      if (!v87)
      {
        std::string::size_type v157 = &v279[v280 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v281 = v280 - 8;
        if (v281 < 0x38)
        {
          v282 = &v277[8 * (v276 >> 2)];
          goto LABEL_858;
        }
        uint64_t v543 = 8 * v278;
        unint64_t v544 = &v277[8 * v278] - v180;
        v282 = &v277[8 * (v276 >> 2)];
        if (v544 < 0x20) {
          goto LABEL_1204;
        }
        uint64_t v545 = (v281 >> 3) + 1;
        uint64_t v546 = 8 * (v545 & 0x3FFFFFFFFFFFFFFCLL);
        v282 = &v279[v546];
        v180 += v546;
        v547 = (long long *)(v156 + 24);
        v548 = &v277[v543 + 16];
        uint64_t v549 = v545 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v550 = *v547;
          *(v548 - 1) = *(v547 - 1);
          _OWORD *v548 = v550;
          v547 += 2;
          v548 += 2;
          v549 -= 4;
        }
        while (v549);
        if (v545 != (v545 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1204:
          do
          {
LABEL_858:
            uint64_t v551 = *(void *)v180;
            v180 += 8;
            *(void *)v282 = v551;
            v282 += 8;
          }
          while (v282 != v157);
        }
      }
      *(void *)v728 = v277;
      *(void *)&v728[8] = &v277[8 * (v276 >> 2)];
      *(void *)&v728[16] = v157;
      *(void *)&v728[24] = &v277[8 * v276];
      if (v181) {
        operator delete(v181);
      }
LABEL_861:
      *(void *)std::string::size_type v157 = v179;
      std::string::size_type v157 = (char *)(*(void *)&v728[16] + 8);
      *(void *)&v728[16] += 8;
LABEL_862:
      CFDataRef v149 = v697;
      goto LABEL_863;
    }
    unint64_t v195 = v176 + 1 - v177;
    uint64_t v196 = v173 >> 3;
    if (v195 <= ((uint64_t)(*(void *)&v728[24] - *(void *)v728) >> 3) - (v173 >> 3))
    {
      if (v195)
      {
        unint64_t v248 = ~v176;
        while (*(char **)&v728[24] != v157)
        {
          *(void *)std::string::size_type v157 = operator new(0x1000uLL);
          std::string::size_type v157 = (char *)(*(void *)&v728[16] + 8);
          *(void *)&v728[16] += 8;
          if (-(uint64_t)v177 == ++v248) {
            goto LABEL_829;
          }
        }
        if (v177 + v248)
        {
          uint64_t v492 = -(uint64_t)(v177 + v248);
          do
          {
            v495 = operator new(0x1000uLL);
            v496 = *(char **)&v728[8];
            if (*(void *)&v728[8] == *(void *)v728)
            {
              if ((unint64_t)v157 >= *(void *)&v728[24])
              {
                if (*(void *)&v728[24] == *(void *)&v728[8]) {
                  unint64_t v501 = 1;
                }
                else {
                  unint64_t v501 = (uint64_t)(*(void *)&v728[24] - *(void *)&v728[8]) >> 2;
                }
                if (v501 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v502 = (char *)operator new(8 * v501);
                unint64_t v503 = (v501 + 3) >> 2;
                v493 = &v502[8 * v503];
                v504 = v493;
                int64_t v505 = v157 - v496;
                if (v157 != v496)
                {
                  v504 = &v493[v505 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v506 = v505 - 8;
                  v507 = &v502[8 * v503];
                  v508 = v496;
                  if (v506 < 0x38) {
                    goto LABEL_1205;
                  }
                  uint64_t v509 = 8 * v503;
                  v507 = &v502[8 * v503];
                  v508 = v496;
                  if ((unint64_t)(v507 - v496) < 0x20) {
                    goto LABEL_1205;
                  }
                  uint64_t v510 = (v506 >> 3) + 1;
                  uint64_t v511 = 8 * (v510 & 0x3FFFFFFFFFFFFFFCLL);
                  v507 = &v493[v511];
                  v508 = &v496[v511];
                  v512 = (long long *)(v496 + 16);
                  v513 = &v502[v509 + 16];
                  uint64_t v514 = v510 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v515 = *v512;
                    *((_OWORD *)v513 - 1) = *(v512 - 1);
                    *(_OWORD *)v513 = v515;
                    v512 += 2;
                    v513 += 32;
                    v514 -= 4;
                  }
                  while (v514);
                  if (v510 != (v510 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_1205:
                    do
                    {
                      uint64_t v516 = *(void *)v508;
                      v508 += 8;
                      *(void *)v507 = v516;
                      v507 += 8;
                    }
                    while (v507 != v504);
                  }
                }
                *(void *)v728 = v502;
                *(void *)&v728[8] = v493;
                *(void *)&v728[16] = v504;
                *(void *)&v728[24] = &v502[8 * v501];
                if (v496)
                {
                  operator delete(v496);
                  v493 = *(char **)&v728[8];
                }
              }
              else
              {
                uint64_t v497 = (uint64_t)(*(void *)&v728[24] - (void)v157) >> 3;
                if (v497 >= -1) {
                  uint64_t v498 = v497 + 1;
                }
                else {
                  uint64_t v498 = v497 + 2;
                }
                uint64_t v499 = v498 >> 1;
                v500 = &v157[8 * (v498 >> 1)];
                v493 = (char *)(v500 - &v157[-*(void *)&v728[8]]);
                if (v157 != *(char **)&v728[8])
                {
                  memmove((void *)(v500 - &v157[-*(void *)&v728[8]]), *(const void **)&v728[8], (size_t)&v157[-*(void *)&v728[8]]);
                  std::string::size_type v157 = *(char **)&v728[16];
                }
                *(void *)&v728[8] = v493;
                *(void *)&v728[16] = &v157[8 * v499];
              }
            }
            else
            {
              v493 = *(char **)&v728[8];
            }
            *((void *)v493 - 1) = v495;
            std::string::size_type v157 = *(char **)&v728[16];
            uint64_t v494 = 4095;
            if (*(void *)&v728[16] - (*(void *)&v728[8] - 8) != 8) {
              uint64_t v494 = 4096;
            }
            unint64_t v153 = v494 + *(void *)&v728[32];
            *(void *)&v728[8] -= 8;
            *(void *)&v728[32] += v494;
            --v492;
          }
          while (v492);
          unint64_t v177 = -(uint64_t)v248;
        }
      }
LABEL_829:
      unint64_t v178 = v153 - (v177 << 12);
      *(void *)&v728[32] = v178;
      if (!v177) {
        goto LABEL_862;
      }
      while (1)
      {
        uint64_t v518 = *(void *)&v728[8];
        v519 = (char *)(*(void *)&v728[8] + 8);
        uint64_t v520 = **(void **)&v728[8];
        *(void *)&v728[8] += 8;
        if (v157 == *(char **)&v728[24])
        {
          v521 = *(void **)v728;
          if ((unint64_t)v519 <= *(void *)v728)
          {
            if (v157 == *(char **)v728) {
              unint64_t v527 = 1;
            }
            else {
              unint64_t v527 = (uint64_t)&v157[-*(void *)v728] >> 2;
            }
            if (v527 >> 61) {
LABEL_1186:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            v528 = operator new(8 * v527);
            unint64_t v529 = v527 >> 2;
            v530 = &v528[8 * (v527 >> 2)];
            int64_t v531 = v157 - v519;
            BOOL v87 = v157 == v519;
            std::string::size_type v157 = v530;
            if (!v87)
            {
              std::string::size_type v157 = &v530[v531 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v532 = v531 - 8;
              if (v532 < 0x38)
              {
                v533 = &v528[8 * (v527 >> 2)];
                goto LABEL_851;
              }
              uint64_t v534 = 8 * v529;
              unint64_t v535 = &v528[8 * v529] - v519;
              v533 = &v528[8 * (v527 >> 2)];
              if (v535 < 0x20) {
                goto LABEL_1206;
              }
              uint64_t v536 = (v532 >> 3) + 1;
              uint64_t v537 = 8 * (v536 & 0x3FFFFFFFFFFFFFFCLL);
              v533 = &v530[v537];
              v519 += v537;
              v538 = (long long *)(v518 + 24);
              v539 = &v528[v534 + 16];
              uint64_t v540 = v536 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v541 = *v538;
                *(v539 - 1) = *(v538 - 1);
                _OWORD *v539 = v541;
                v538 += 2;
                v539 += 2;
                v540 -= 4;
              }
              while (v540);
              if (v536 != (v536 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1206:
                do
                {
LABEL_851:
                  uint64_t v542 = *(void *)v519;
                  v519 += 8;
                  *(void *)v533 = v542;
                  v533 += 8;
                }
                while (v533 != v157);
              }
            }
            *(void *)v728 = v528;
            *(void *)&v728[8] = &v528[8 * (v527 >> 2)];
            *(void *)&v728[16] = v157;
            *(void *)&v728[24] = &v528[8 * v527];
            if (v521) {
              operator delete(v521);
            }
            goto LABEL_832;
          }
          uint64_t v522 = (uint64_t)&v519[-*(void *)v728] >> 3;
          if (v522 >= -1) {
            uint64_t v523 = v522 + 1;
          }
          else {
            uint64_t v523 = v522 + 2;
          }
          uint64_t v524 = v523 >> 1;
          v525 = &v519[-8 * (v523 >> 1)];
          int64_t v526 = v157 - v519;
          if (v157 != v519)
          {
            memmove(&v519[-8 * (v523 >> 1)], v519, v157 - v519);
            std::string::size_type v157 = v519;
          }
          v517 = &v157[-8 * v524];
          std::string::size_type v157 = &v525[v526];
          *(void *)&v728[8] = v517;
          *(void *)&v728[16] = &v525[v526];
        }
LABEL_832:
        *(void *)std::string::size_type v157 = v520;
        std::string::size_type v157 = (char *)(*(void *)&v728[16] + 8);
        *(void *)&v728[16] += 8;
        if (!--v177) {
          goto LABEL_641;
        }
      }
    }
    if ((uint64_t)(*(void *)&v728[24] - *(void *)v728) >> 2 <= v195 + v196) {
      unint64_t v197 = v195 + v196;
    }
    else {
      unint64_t v197 = (uint64_t)(*(void *)&v728[24] - *(void *)v728) >> 2;
    }
    uint64_t v695 = *(void *)&v728[32];
    if (v197)
    {
      if (v197 >> 61) {
        goto LABEL_1186;
      }
      std::string v198 = (char *)operator new(8 * v197);
    }
    else
    {
      std::string v198 = 0;
    }
    unint64_t v693 = v177 << 12;
    std::string::size_type v157 = &v198[8 * (v196 - v177)];
    v360 = &v198[8 * v197];
    v361 = v157;
    while (2)
    {
      while (1)
      {
        v362 = operator new(0x1000uLL);
        if (v157 == v360) {
          break;
        }
LABEL_612:
        *(void *)std::string::size_type v157 = v362;
        v157 += 8;
        if (!--v195) {
          goto LABEL_637;
        }
      }
      if (v361 <= v198)
      {
        if (v360 == v198) {
          unint64_t v369 = 1;
        }
        else {
          unint64_t v369 = (v360 - v198) >> 2;
        }
        if (v369 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v370 = (char *)operator new(8 * v369);
        v371 = v370;
        unint64_t v372 = v369 >> 2;
        v373 = &v370[8 * (v369 >> 2)];
        std::string::size_type v157 = v373;
        int64_t v374 = v360 - v361;
        if (v360 == v361) {
          goto LABEL_631;
        }
        std::string::size_type v157 = &v373[v374 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v375 = v374 - 8;
        if (v375 >= 0x38 && (uint64_t v376 = 8 * v372, (unint64_t)(&v370[8 * v372] - v361) >= 0x20))
        {
          uint64_t v380 = (v375 >> 3) + 1;
          uint64_t v381 = 8 * (v380 & 0x3FFFFFFFFFFFFFFCLL);
          v377 = &v373[v381];
          v378 = &v361[v381];
          v382 = (long long *)(v361 + 16);
          v383 = &v370[v376 + 16];
          uint64_t v384 = v380 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v385 = *v382;
            *((_OWORD *)v383 - 1) = *(v382 - 1);
            *(_OWORD *)v383 = v385;
            v382 += 2;
            v383 += 32;
            v384 -= 4;
          }
          while (v384);
          if (v380 == (v380 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_631;
          }
        }
        else
        {
          v377 = &v370[8 * (v369 >> 2)];
          v378 = v361;
        }
        do
        {
          uint64_t v379 = *(void *)v378;
          v378 += 8;
          *(void *)v377 = v379;
          v377 += 8;
        }
        while (v377 != v157);
LABEL_631:
        v360 = &v370[8 * v369];
        if (v198) {
          operator delete(v198);
        }
        std::string v198 = v371;
        v361 = v373;
        goto LABEL_612;
      }
      uint64_t v363 = (v361 - v198) >> 3;
      if (v363 >= -1) {
        uint64_t v364 = v363 + 1;
      }
      else {
        uint64_t v364 = v363 + 2;
      }
      uint64_t v365 = v364 >> 1;
      v366 = &v361[-8 * (v364 >> 1)];
      v367 = v360;
      if (v360 != v361)
      {
        memmove(v366, v361, v360 - v361);
        v367 = v361;
      }
      v368 = &v366[v360 - v361];
      v361 = &v367[-8 * v365];
      *(void *)v368 = v362;
      std::string::size_type v157 = v368 + 8;
      if (--v195) {
        continue;
      }
      break;
    }
LABEL_637:
    for (unint64_t k = *(void **)&v728[8]; v177; --v177)
    {
      if (v157 == v360)
      {
        if (v361 <= v198)
        {
          if (v360 == v198) {
            unint64_t v395 = 1;
          }
          else {
            unint64_t v395 = (v360 - v198) >> 2;
          }
          if (v395 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v396 = (char *)operator new(8 * v395);
          v397 = v396;
          unint64_t v398 = v395 >> 2;
          v389 = &v396[8 * (v395 >> 2)];
          std::string::size_type v157 = v389;
          int64_t v399 = v360 - v361;
          if (v360 != v361)
          {
            std::string::size_type v157 = &v389[v399 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v400 = v399 - 8;
            if (v400 < 0x38 || (uint64_t v401 = 8 * v398, (unint64_t)(&v396[8 * v398] - v361) < 0x20))
            {
              v402 = &v396[8 * (v395 >> 2)];
              v403 = v361;
              goto LABEL_660;
            }
            uint64_t v405 = (v400 >> 3) + 1;
            uint64_t v406 = 8 * (v405 & 0x3FFFFFFFFFFFFFFCLL);
            v402 = &v389[v406];
            v403 = &v361[v406];
            v407 = (long long *)(v361 + 16);
            v408 = &v396[v401 + 16];
            uint64_t v409 = v405 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v410 = *v407;
              *((_OWORD *)v408 - 1) = *(v407 - 1);
              *(_OWORD *)v408 = v410;
              v407 += 2;
              v408 += 32;
              v409 -= 4;
            }
            while (v409);
            if (v405 != (v405 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_660:
                uint64_t v404 = *(void *)v403;
                v403 += 8;
                *(void *)v402 = v404;
                v402 += 8;
              }
              while (v402 != v157);
            }
          }
          v360 = &v396[8 * v395];
          if (v198) {
            operator delete(v198);
          }
          std::string v198 = v397;
          goto LABEL_643;
        }
        uint64_t v390 = (v361 - v198) >> 3;
        if (v390 >= -1) {
          uint64_t v391 = v390 + 1;
        }
        else {
          uint64_t v391 = v390 + 2;
        }
        uint64_t v392 = v391 >> 1;
        v393 = &v361[-8 * (v391 >> 1)];
        v394 = v360;
        if (v360 != v361)
        {
          memmove(v393, v361, v360 - v361);
          v394 = v361;
        }
        std::string::size_type v157 = &v393[v360 - v361];
        v389 = &v394[-8 * v392];
      }
      else
      {
        v389 = v361;
      }
LABEL_643:
      *(void *)std::string::size_type v157 = *k;
      v157 += 8;
      unint64_t k = (void *)(*(void *)&v728[8] + 8);
      *(void *)&v728[8] += 8;
      v361 = v389;
    }
    uint64_t v387 = *(void *)&v728[16];
    if (*(void **)&v728[16] != k)
    {
      do
      {
        if (v361 == v198)
        {
          if (v157 >= v360)
          {
            if (v360 == v361) {
              unint64_t v416 = 1;
            }
            else {
              unint64_t v416 = (v360 - v361) >> 2;
            }
            if (v416 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v417 = (char *)operator new(8 * v416);
            std::string v198 = v417;
            unint64_t v418 = (v416 + 3) >> 2;
            v411 = &v417[8 * v418];
            v412 = v411;
            int64_t v419 = v157 - v361;
            if (v157 != v361)
            {
              v412 = &v411[v419 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v420 = v419 - 8;
              v421 = &v417[8 * v418];
              v422 = v361;
              if (v420 < 0x38) {
                goto LABEL_1207;
              }
              uint64_t v423 = 8 * v418;
              v421 = &v417[8 * v418];
              v422 = v361;
              if ((unint64_t)(v421 - v361) < 0x20) {
                goto LABEL_1207;
              }
              uint64_t v424 = (v420 >> 3) + 1;
              uint64_t v425 = 8 * (v424 & 0x3FFFFFFFFFFFFFFCLL);
              v421 = &v411[v425];
              v422 = &v361[v425];
              v426 = (long long *)(v361 + 16);
              v427 = &v417[v423 + 16];
              uint64_t v428 = v424 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v429 = *v426;
                *((_OWORD *)v427 - 1) = *(v426 - 1);
                *(_OWORD *)v427 = v429;
                v426 += 2;
                v427 += 32;
                v428 -= 4;
              }
              while (v428);
              if (v424 != (v424 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1207:
                do
                {
                  uint64_t v430 = *(void *)v422;
                  v422 += 8;
                  *(void *)v421 = v430;
                  v421 += 8;
                }
                while (v421 != v412);
              }
            }
            v360 = &v417[8 * v416];
            if (v361) {
              operator delete(v361);
            }
          }
          else
          {
            uint64_t v414 = (v360 - v157) >> 3;
            if (v414 >= -1) {
              unint64_t v415 = v414 + 1;
            }
            else {
              unint64_t v415 = v414 + 2;
            }
            v412 = &v157[8 * (v415 >> 1)];
            v411 = &v361[8 * (v415 >> 1)];
            if (v157 == v361)
            {
              std::string v198 = v157;
            }
            else
            {
              memmove(&v361[8 * (v415 >> 1)], v361, v157 - v361);
              std::string v198 = v361;
            }
          }
        }
        else
        {
          v411 = v361;
          v412 = v157;
        }
        uint64_t v413 = *(void *)(v387 - 8);
        v387 -= 8;
        *((void *)v411 - 1) = v413;
        v361 = v411 - 8;
        std::string::size_type v157 = v412;
      }
      while (v387 != *(void *)&v728[8]);
    }
    v388 = *(void **)v728;
    *(void *)v728 = v198;
    *(void *)&v728[8] = v361;
    *(void *)&v728[16] = v157;
    *(void *)&v728[24] = v360;
    unint64_t v178 = v695 - v693;
    *(void *)&v728[32] = v695 - v693;
    if (v388) {
      operator delete(v388);
    }
LABEL_641:
    CFDataRef v149 = v697;
LABEL_863:
    uint64_t v152 = *(void *)&v728[40];
    char v156 = *(char **)&v728[8];
    LOWORD(v154) = *(_WORD *)&v728[40] + v178;
    uint64_t v155 = (*(void *)&v728[40] + v178) >> 12;
LABEL_864:
    v552 = &v156[8 * v155];
    if (v157 == v156)
    {
      v553 = 0;
      unint64_t v554 = v152 - v701;
      if (v554 <= 1) {
        goto LABEL_866;
      }
LABEL_871:
      unint64_t v559 = 2;
      v560 = "";
      v556 = v552;
      v557 = v553;
      uint64_t v561 = (uint64_t)&v553[-*(void *)v552 - 2];
      if (v561 < 1) {
        goto LABEL_876;
      }
      goto LABEL_872;
    }
    v553 = (unsigned char *)(*(void *)v552 + (v154 & 0xFFF));
    unint64_t v554 = v152 - v701;
    if (v554 > 1) {
      goto LABEL_871;
    }
LABEL_866:
    unint64_t v555 = v554;
    v556 = v552;
    v557 = v553;
    do
    {
      *v557++ = asc_21DFBB0DB[v555];
      if (&v557[-*(void *)v556] == (unsigned char *)4096)
      {
        v558 = (unsigned char *)*((void *)v556 + 1);
        v556 += 8;
        v557 = v558;
      }
      ++*(void *)&v728[40];
      ++v555;
    }
    while (v555 != 2);
    if (!v554) {
      goto LABEL_941;
    }
    v560 = &asc_21DFBB0DB[v554];
    unint64_t v559 = v554;
    uint64_t v561 = (uint64_t)&v553[-v554 - *(void *)v552];
    if (v561 < 1)
    {
LABEL_876:
      unint64_t v566 = 4095 - v561;
      v562 = &v552[-8 * (v566 >> 12)];
      v563 = (unsigned char *)(*(void *)v562 + (~(_WORD)v566 & 0xFFF));
      v564 = v562;
      v565 = v563;
      if (v563 == v553) {
        goto LABEL_877;
      }
LABEL_889:
      while (2)
      {
        *v557++ = *v565;
        if (&v557[-*(void *)v556] == (unsigned char *)4096)
        {
          v576 = (unsigned char *)*((void *)v556 + 1);
          v556 += 8;
          v557 = v576;
          if (&(++v565)[-*(void *)v564] == (unsigned char *)4096)
          {
LABEL_893:
            v577 = (unsigned char *)*((void *)v564 + 1);
            v564 += 8;
            v565 = v577;
          }
        }
        else if (&(++v565)[-*(void *)v564] == (unsigned char *)4096)
        {
          goto LABEL_893;
        }
        ++*(void *)&v728[40];
        if (v565 == v553) {
          goto LABEL_877;
        }
        continue;
      }
    }
LABEL_872:
    v562 = &v552[8 * ((unint64_t)v561 >> 12)];
    v563 = (unsigned char *)(*(void *)v562 + (v561 & 0xFFF));
    v564 = v562;
    v565 = v563;
    if (v563 != v553) {
      goto LABEL_889;
    }
LABEL_877:
    if (v559 >= v554)
    {
      if (v560 == ", ") {
        goto LABEL_941;
      }
LABEL_930:
      uint64_t v595 = *(void *)v552;
      v594 = v552 - 8;
      v596 = &v553[-v595];
      if (v560 - ", " >= (uint64_t)&v553[-v595]) {
        size_t v597 = (size_t)v596;
      }
      else {
        size_t v597 = v560 - ", ";
      }
      v598 = &v560[-v597];
      if (v597) {
        goto LABEL_939;
      }
      while (1)
      {
        do
        {
          if (v598 == ", ") {
            goto LABEL_941;
          }
          uint64_t v599 = *(void *)v594;
          v594 -= 8;
          v553 = (unsigned char *)(v599 + 4096);
          if (v598 - ", " >= 4096) {
            size_t v597 = 4096;
          }
          else {
            size_t v597 = v598 - ", ";
          }
          v598 -= v597;
        }
        while (!v597);
LABEL_939:
        memcpy(&v553[-v597], v598, v597);
      }
    }
    v567 = v149;
    v568 = *(unsigned char **)v552;
    uint64_t v569 = (uint64_t)&v553[-v554 - *(void *)v552];
    if (v569 < 1)
    {
      unint64_t v578 = 4095 - v569;
      v570 = &v552[-8 * (v578 >> 12)];
      v571 = (unsigned char *)(*(void *)v570 + (~(_WORD)v578 & 0xFFF));
      if (v570 == v562) {
        goto LABEL_897;
      }
LABEL_880:
      v572 = *(unsigned char **)v562;
      if (*(unsigned char **)v562 != v563)
      {
        while (1)
        {
          v573 = (char *)(v553 - v568);
          if (v563 - v572 >= (uint64_t)v573) {
            size_t v574 = (size_t)v573;
          }
          else {
            size_t v574 = v563 - v572;
          }
          v563 -= v574;
          v553 -= v574;
          if (v574) {
            memmove(v553, v563, v574);
          }
          if (v563 == v572) {
            break;
          }
          v575 = (unsigned char *)*((void *)v552 - 1);
          v552 -= 8;
          v568 = v575;
          v553 = v575 + 4096;
        }
        goto LABEL_905;
      }
      while (1)
      {
        v562 -= 8;
        if (v562 == v570) {
          break;
        }
        v583 = *(unsigned char **)v562;
        v584 = (char *)(*(void *)v562 + 4096);
        while (1)
        {
          v585 = (char *)(v553 - v568);
          if (v584 - v583 >= (uint64_t)v585) {
            size_t v586 = (size_t)v585;
          }
          else {
            size_t v586 = v584 - v583;
          }
          v584 -= v586;
          v553 -= v586;
          if (v586) {
            memmove(v553, v584, v586);
          }
          if (v584 == v583) {
            break;
          }
          v587 = (unsigned char *)*((void *)v552 - 1);
          v552 -= 8;
          v568 = v587;
          v553 = v587 + 4096;
        }
LABEL_905:
        v568 = *(unsigned char **)v552;
        if ((unsigned char *)(*(void *)v552 + 4096) == v553)
        {
          v582 = (unsigned char *)*((void *)v552 + 1);
          v552 += 8;
          v568 = v582;
          v553 = v582;
        }
      }
      v588 = (char *)(*(void *)v570 + 4096);
      if (v588 != v571)
      {
        uint64_t v589 = *(void *)v552;
        while (1)
        {
          v590 = &v553[-v589];
          if (v588 - v571 >= (uint64_t)v590) {
            size_t v591 = (size_t)v590;
          }
          else {
            size_t v591 = v588 - v571;
          }
          v588 -= v591;
          v553 -= v591;
          if (v591) {
            memmove(v553, v588, v591);
          }
          if (v588 == v571) {
            break;
          }
          uint64_t v592 = *((void *)v552 - 1);
          v552 -= 8;
          uint64_t v589 = v592;
          v553 = (unsigned char *)(v592 + 4096);
        }
        goto LABEL_925;
      }
LABEL_929:
      CFDataRef v149 = v567;
      if (v560 == ", ") {
        goto LABEL_941;
      }
      goto LABEL_930;
    }
    v570 = &v552[8 * ((unint64_t)v569 >> 12)];
    v571 = (unsigned char *)(*(void *)v570 + (v569 & 0xFFF));
    if (v570 != v562) {
      goto LABEL_880;
    }
LABEL_897:
    if (v571 == v563) {
      goto LABEL_929;
    }
    while (1)
    {
      v579 = (char *)(v553 - v568);
      if (v563 - v571 >= (uint64_t)v579) {
        size_t v580 = (size_t)v579;
      }
      else {
        size_t v580 = v563 - v571;
      }
      v563 -= v580;
      v553 -= v580;
      if (v580) {
        memmove(v553, v563, v580);
      }
      if (v563 == v571) {
        break;
      }
      v581 = (unsigned char *)*((void *)v552 - 1);
      v552 -= 8;
      v568 = v581;
      v553 = v581 + 4096;
    }
LABEL_925:
    if ((unsigned char *)(*(void *)v552 + 4096) == v553)
    {
      v593 = (unsigned char *)*((void *)v552 + 1);
      v552 += 8;
      v553 = v593;
    }
    CFDataRef v149 = v567;
    if (v560 != ", ") {
      goto LABEL_930;
    }
LABEL_941:
    std::string::size_type v600 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v601 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v600 = __p.__r_.__value_.__l.__size_;
      v601 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v602 = (std::string *)((char *)v601 + v600);
    if (v149 != v602)
    {
      unint64_t v143 = v149;
      v603 = v149;
      char v148 = v699;
      while (1)
      {
        int v604 = v603->__r_.__value_.__s.__data_[0];
        v603 = (std::string *)((char *)v603 + 1);
        if (v604 == 44) {
          break;
        }
        unint64_t v143 = v603;
        if (v603 == v602) {
          goto LABEL_955;
        }
      }
      char v150 = v149;
      CFDataRef v149 = (std::string *)((char *)&v143->__r_.__value_.__l.__data_ + 1);
      continue;
    }
    break;
  }
  v602 = v149;
  char v148 = v699;
LABEL_955:
  v605 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((uint64_t)v728, v148, v149, v602);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v606 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v606 = __p.__r_.__value_.__l.__size_;
  }
  if (*(void *)&v728[40])
  {
    v607 = (char *)(*(void *)&v728[8] + 8 * (*(void *)&v728[32] >> 12));
    if (*(void *)&v728[16] != *(void *)&v728[8])
    {
      v608 = (std::string::value_type *)(*(void *)v607 + (*(_WORD *)&v728[32] & 0xFFF));
      v609 = (char *)(*(void *)&v728[8] + 8 * ((*(void *)&v728[32] + *(void *)&v728[40]) >> 12));
      uint64_t v610 = *(void *)v609 + ((*(void *)&v728[32] + *(void *)&v728[40]) & 0xFFFLL);
      if ((std::string::value_type *)v610 != v608)
      {
        unint64_t v614 = v610 + ((v609 - v607) << 9) - (void)&v608[*(void *)v609] + *(void *)v607;
        if (v614)
        {
          std::string::size_type v615 = v606;
          memset(&__s2, 0, sizeof(__s2));
          do
          {
            std::string::push_back(&__s2, *v608++);
            if (&v608[-*(void *)v607] == (std::string::value_type *)4096)
            {
              v616 = (std::string::value_type *)*((void *)v607 + 1);
              v607 += 8;
              v608 = v616;
            }
          }
          while (v608 != (std::string::value_type *)v610);
          LOBYTE(v617) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
          if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_s2 = &__s2;
          }
          else {
            p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
          }
          if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v619 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v619 = __s2.__r_.__value_.__l.__size_;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v620 = __p.__r_.__value_.__l.__size_;
            std::string::size_type v623 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v623 - __p.__r_.__value_.__l.__size_ >= v614)
            {
              std::string::size_type v617 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              v627 = (std::string *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_1005;
            }
            unint64_t v621 = __p.__r_.__value_.__l.__size_ + v614;
            if (0x7FFFFFFFFFFFFFF8 - (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < __p.__r_.__value_.__l.__size_ + v614 - v623) {
              goto LABEL_1196;
            }
            v622 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (v623 > 0x3FFFFFFFFFFFFFF2)
            {
              size_t v625 = 0x7FFFFFFFFFFFFFF7;
            }
            else
            {
LABEL_988:
              if (v621 <= 2 * v623) {
                unint64_t v621 = 2 * v623;
              }
              uint64_t v624 = (v621 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v621 | 7) != 0x17) {
                uint64_t v624 = v621 | 7;
              }
              if (v621 >= 0x17) {
                size_t v625 = v624 + 1;
              }
              else {
                size_t v625 = 23;
              }
            }
            v626 = (std::string *)operator new(v625);
            v627 = v626;
            if (v606) {
              memmove(v626, v622, v606);
            }
            if (v620 != v606) {
              memmove((char *)v627 + v606 + v614, (char *)v622 + v606, v620 - v606);
            }
            if (v623 != 22) {
              operator delete(v622);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
            __p.__r_.__value_.__r.__words[2] = v625 | 0x8000000000000000;
            std::string::size_type v628 = v620 + v614;
          }
          else
          {
            std::string::size_type v620 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (22 - (unint64_t)HIBYTE(__p.__r_.__value_.__r.__words[2]) < v614)
            {
              unint64_t v621 = v614 + HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (v621 - 0x7FFFFFFFFFFFFFF8 >= 0x800000000000001ELL)
              {
                v622 = &__p;
                std::string::size_type v623 = 22;
                goto LABEL_988;
              }
LABEL_1196:
              std::string::__throw_length_error[abi:ne180100]();
            }
            v627 = &__p;
LABEL_1005:
            if (v620 != v606)
            {
              memmove((char *)v627 + v606 + v614, (char *)v627 + v606, v620 - v606);
              LOBYTE(v617) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
              std::string::size_type v615 = v620;
            }
            std::string::size_type v628 = v615 + v614;
            if ((v617 & 0x80) == 0)
            {
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = v628 & 0x7F;
              goto LABEL_1010;
            }
          }
          __p.__r_.__value_.__l.__size_ = v628;
LABEL_1010:
          v627->__r_.__value_.__s.__data_[v628] = 0;
          if (v619)
          {
            v629 = (char *)v627 + v606;
            if (v619 < 8)
            {
              v630 = p_s2;
              goto LABEL_1026;
            }
            v630 = p_s2;
            if ((unint64_t)((char *)v627 + v606 - (char *)p_s2) < 0x20) {
              goto LABEL_1026;
            }
            if (v619 >= 0x20)
            {
              unint64_t v631 = v619 & 0xFFFFFFFFFFFFFFE0;
              v632 = &p_s2->__r_.__value_.__r.__words[2];
              v633 = (_OWORD *)((char *)&v627->__r_.__value_.__r.__words[2] + v606);
              unint64_t v634 = v619 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v635 = *(_OWORD *)v632;
                *(v633 - 1) = *((_OWORD *)v632 - 1);
                _OWORD *v633 = v635;
                v632 += 4;
                v633 += 2;
                v634 -= 32;
              }
              while (v634);
              if (v619 != v631)
              {
                if ((v619 & 0x18) == 0)
                {
                  v630 = (std::string *)((char *)p_s2 + v631);
                  v629 += v631;
                  goto LABEL_1026;
                }
                goto LABEL_1021;
              }
            }
            else
            {
              unint64_t v631 = 0;
LABEL_1021:
              v629 += v619 & 0xFFFFFFFFFFFFFFF8;
              v630 = (std::string *)((char *)p_s2 + (v619 & 0xFFFFFFFFFFFFFFF8));
              v636 = (uint64_t *)((char *)p_s2 + v631);
              v637 = (std::string::size_type *)((char *)v627->__r_.__value_.__r.__words + v606 + v631);
              unint64_t v638 = v631 - (v619 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v639 = *v636++;
                *v637++ = v639;
                v638 += 8;
              }
              while (v638);
              if (v619 != (v619 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_1026:
                  std::string::value_type v640 = v630->__r_.__value_.__s.__data_[0];
                  v630 = (std::string *)((char *)v630 + 1);
                  *v629++ = v640;
                }
                while (v630 != (std::string *)((char *)p_s2 + v619));
              }
            }
          }
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s2.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  else
  {
    v611 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v611 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v612 = v605 - (unsigned char *)v611;
    if (v606 < v605 - (unsigned char *)v611) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    std::string::size_type v613 = (char *)v611 + v606 - v605;
    if (v613 == -1)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        __p.__r_.__value_.__l.__size_ = v605 - (unsigned char *)v611;
        *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + v612) = 0;
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v612 & 0x7F;
        __p.__r_.__value_.__s.__data_[v612] = 0;
      }
    }
    else
    {
      std::string::__erase_external_with_move(&__p, v612, v613);
    }
  }
  v642 = *(void ***)&v728[16];
  v641 = *(void ***)&v728[8];
  *(void *)&v728[40] = 0;
  unint64_t v643 = *(void *)&v728[16] - *(void *)&v728[8];
  if (*(void *)&v728[16] - *(void *)&v728[8] >= 0x11uLL)
  {
    do
    {
      operator delete(*v641);
      v642 = *(void ***)&v728[16];
      v641 = (void **)(*(void *)&v728[8] + 8);
      *(void *)&v728[8] = v641;
      unint64_t v643 = *(void *)&v728[16] - (void)v641;
    }
    while (*(void *)&v728[16] - (void)v641 > 0x10uLL);
  }
  unint64_t v644 = v643 >> 3;
  if (v644 == 1)
  {
    uint64_t v645 = 2048;
LABEL_1035:
    *(void *)&v728[32] = v645;
  }
  else if (v644 == 2)
  {
    uint64_t v645 = 4096;
    goto LABEL_1035;
  }
  if (v641 != v642)
  {
    do
    {
      v646 = *v641++;
      operator delete(v646);
    }
    while (v641 != v642);
    if (*(void *)&v728[16] != *(void *)&v728[8]) {
      *(void *)&v728[16] += (*(void *)&v728[8] - *(void *)&v728[16] + 7) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  int v96 = *(char **)v728;
  if (*(void *)v728) {
    operator delete(*(void **)v728);
  }
LABEL_1042:
  ACFULogging::getLogInstance((ACFULogging *)v96);
  ACFULogging::handleMessage();
  if (SHIBYTE(v732) < 0) {
    operator delete((void *)v731);
  }
  v647 = v719.__begin_;
  if (v719.__begin_)
  {
    std::vector<std::pair<std::string, std::string>>::pointer v648 = v719.__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v649 = v719.__begin_;
    if (v719.__end_ == v719.__begin_)
    {
LABEL_1053:
      v719.__end_ = v647;
      operator delete(v649);
      goto LABEL_1054;
    }
    while (1)
    {
      if (SHIBYTE(v648[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v648[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v648[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1048;
        }
      }
      else if ((SHIBYTE(v648[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_1048:
        if (--v648 == v647) {
          goto LABEL_1052;
        }
        continue;
      }
      operator delete(v648[-1].first.__r_.__value_.__l.__data_);
      if (--v648 == v647)
      {
LABEL_1052:
        std::vector<std::pair<std::string, std::string>>::pointer v649 = v719.__begin_;
        goto LABEL_1053;
      }
    }
  }
LABEL_1054:
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v650 = off_26AA89B50;
  if (!off_26AA89B50)
  {
    v651 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v651);
    v652 = operator new(0x20uLL);
    void *v652 = &unk_26CECF498;
    v652[1] = 0;
    v652[2] = 0;
    v652[3] = v651;
    v653 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v651;
    off_26AA89B58 = v652;
    if (v653 && !atomic_fetch_add(&v653->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
      std::__shared_weak_count::__release_weak(v653);
    }
    v650 = off_26AA89B50;
  }
  v654 = (std::__shared_weak_count *)off_26AA89B58;
  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)v650;
  __s2.__r_.__value_.__l.__size_ = (std::string::size_type)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v655 = (uint64_t *)v650[1];
  if (!v655) {
LABEL_1067:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v656 = *((_DWORD *)v655 + 8);
      if (v656 < 3) {
        break;
      }
      v655 = (uint64_t *)*v655;
      if (!v655) {
        goto LABEL_1067;
      }
    }
    if (v656 == 2) {
      break;
    }
    v655 = (uint64_t *)v655[1];
    if (!v655) {
      goto LABEL_1067;
    }
  }
  if (*((char *)v655 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v728, (const std::string::value_type *)v655[5], v655[6]);
  }
  else
  {
    *(_OWORD *)v728 = *(_OWORD *)(v655 + 5);
    *(void *)&v728[16] = v655[7];
  }
  v657 = std::string::append((std::string *)v728, "/sticky_nvram_items.plist", 0x19uLL);
  v658 = (void *)v657->__r_.__value_.__r.__words[0];
  *(void *)&long long v731 = v657->__r_.__value_.__l.__size_;
  *(void *)((char *)&v731 + 7) = *(std::string::size_type *)((char *)&v657->__r_.__value_.__r.__words[1] + 7);
  char v659 = HIBYTE(v657->__r_.__value_.__r.__words[2]);
  v657->__r_.__value_.__l.__size_ = 0;
  v657->__r_.__value_.__r.__words[2] = 0;
  v657->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v726) < 0) {
    operator delete(v725);
  }
  v725 = v658;
  *(void *)&long long v726 = v731;
  *(void *)((char *)&v726 + 7) = *(void *)((char *)&v731 + 7);
  HIBYTE(v726) = v659;
  if ((v728[23] & 0x80000000) != 0) {
    operator delete(*(void **)v728);
  }
  if (v654 && !atomic_fetch_add(&v654->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
    std::__shared_weak_count::__release_weak(v654);
  }
  ACFULogging::getLogInstance((ACFULogging *)v657);
  ACFULogging::handleMessage();
  CFAllocatorRef v660 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (v726 >= 0) {
    v661 = (const char *)&v725;
  }
  else {
    v661 = (const char *)v725;
  }
  CFStringRef v662 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v661, 0x8000100u);
  v663 = (void *)cf;
  CFTypeRef cf = v662;
  if (v663) {
    CFRelease(v663);
  }
  if (v662) {
    v664 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    v664 = 0;
  }
  if (v664)
  {
    v665 = CFURLCreateWithString(v660, v662, 0);
    v666 = (void *)v720;
    CFTypeRef v720 = v665;
    if (v666) {
      CFRelease(v666);
    }
    if (v665) {
      v667 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
    }
    else {
      v667 = 0;
    }
    if (!v667) {
      goto LABEL_1183;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v660, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    v666 = (void *)v722;
    CFTypeRef v722 = Mutable;
    if (v666) {
      CFRelease(v666);
    }
    if (!(Mutable
         ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
         : 0))
      goto LABEL_1183;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v670 = &__p;
    }
    else {
      v670 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    CFStringRef v671 = CFStringCreateWithCString(v660, (const char *)v670, 0x8000100u);
    v666 = (void *)v721;
    CFTypeRef v721 = v671;
    if (v666) {
      CFRelease(v666);
    }
    v672 = v671
         ? ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get
         : 0;
    if (!v672
      || (CFDictionarySetValue(Mutable, @"NvramItems", v671),
          v666 = (void *)AMSupportWriteDictionarytoFileURL(),
          v666))
    {
LABEL_1183:
      ACFULogging::getLogInstance((ACFULogging *)v666);
      ACFULogging::handleMessage();
    }
  }
  else
  {
    ACFULogging::getLogInstance((ACFULogging *)v663);
    ACFULogging::handleMessage();
    v665 = v720;
  }
  if (v665) {
    CFRelease(v665);
  }
  if (v721) {
    CFRelease(v721);
  }
  if (v722) {
    CFRelease(v722);
  }
  if (v662) {
    CFRelease(v662);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v726) < 0) {
      goto LABEL_1122;
    }
LABEL_1119:
    v673 = v704.__begin_;
    if (!v704.__begin_) {
      goto LABEL_1132;
    }
LABEL_1123:
    std::vector<std::pair<std::string, std::string>>::pointer v674 = v704.__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v675 = v673;
    if (v704.__end_ == v673)
    {
LABEL_1131:
      v704.__end_ = v673;
      operator delete(v675);
      goto LABEL_1132;
    }
    while (1)
    {
      if (SHIBYTE(v674[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v674[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v674[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1126;
        }
LABEL_1129:
        operator delete(v674[-1].first.__r_.__value_.__l.__data_);
        if (--v674 == v673)
        {
LABEL_1130:
          std::vector<std::pair<std::string, std::string>>::pointer v675 = v704.__begin_;
          goto LABEL_1131;
        }
      }
      else
      {
        if (SHIBYTE(v674[-1].first.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_1129;
        }
LABEL_1126:
        if (--v674 == v673) {
          goto LABEL_1130;
        }
      }
    }
  }
  if ((SHIBYTE(v726) & 0x80000000) == 0) {
    goto LABEL_1119;
  }
LABEL_1122:
  operator delete(v725);
  v673 = v704.__begin_;
  if (v704.__begin_) {
    goto LABEL_1123;
  }
LABEL_1132:
  uint64_t v6 = 0;
LABEL_1133:
  v676 = v716;
  if (v716 != &v717)
  {
    do
    {
      *(void *)&long long v680 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v680 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v728 = v680;
      *(_OWORD *)&v728[16] = v680;
      if (*((char *)v676 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v728, (const std::string::value_type *)v676[4], (std::string::size_type)v676[5]);
      }
      else
      {
        *(_OWORD *)v728 = *((_OWORD *)v676 + 2);
        *(void *)&v728[16] = v676[6];
      }
      v681 = v676[7];
      *(void *)&v728[24] = v681;
      if (v681)
      {
        CFRelease(v681);
        *(void *)&v728[24] = 0;
      }
      if ((v728[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v728);
        v682 = v676[1];
        if (v682)
        {
          do
          {
LABEL_1147:
            v683 = (uint64_t **)v682;
            v682 = (uint64_t *)*v682;
          }
          while (v682);
          goto LABEL_1137;
        }
      }
      else
      {
        v682 = v676[1];
        if (v682) {
          goto LABEL_1147;
        }
      }
      do
      {
        v683 = (uint64_t **)v676[2];
        BOOL v87 = *v683 == (uint64_t *)v676;
        v676 = v683;
      }
      while (!v87);
LABEL_1137:
      v676 = v683;
    }
    while (v683 != &v717);
  }
  v677 = v713.__begin_;
  if (!v713.__begin_) {
    goto LABEL_1159;
  }
  std::vector<std::pair<std::string, std::string>>::pointer v678 = v713.__end_;
  std::vector<std::pair<std::string, std::string>>::pointer v679 = v713.__begin_;
  if (v713.__end_ != v713.__begin_)
  {
    while (1)
    {
      if (SHIBYTE(v678[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v678[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v678[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1153;
        }
LABEL_1156:
        operator delete(v678[-1].first.__r_.__value_.__l.__data_);
        if (--v678 == v677)
        {
LABEL_1157:
          std::vector<std::pair<std::string, std::string>>::pointer v679 = v713.__begin_;
          break;
        }
      }
      else
      {
        if (SHIBYTE(v678[-1].first.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_1156;
        }
LABEL_1153:
        if (--v678 == v677) {
          goto LABEL_1157;
        }
      }
    }
  }
  v713.__end_ = v677;
  operator delete(v679);
LABEL_1159:
  v684 = v714.__begin_;
  if (v714.__begin_)
  {
    std::vector<std::pair<std::string, std::string>>::pointer v685 = v714.__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v686 = v714.__begin_;
    if (v714.__end_ == v714.__begin_)
    {
LABEL_1168:
      v714.__end_ = v684;
      operator delete(v686);
      goto LABEL_1169;
    }
    while (1)
    {
      if (SHIBYTE(v685[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v685[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v685[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1163;
        }
      }
      else if ((SHIBYTE(v685[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_1163:
        if (--v685 == v684) {
          goto LABEL_1167;
        }
        continue;
      }
      operator delete(v685[-1].first.__r_.__value_.__l.__data_);
      if (--v685 == v684)
      {
LABEL_1167:
        std::vector<std::pair<std::string, std::string>>::pointer v686 = v714.__begin_;
        goto LABEL_1168;
      }
    }
  }
LABEL_1169:
  v687 = __x.__begin_;
  if (__x.__begin_)
  {
    std::vector<std::pair<std::string, std::string>>::pointer v688 = __x.__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v689 = __x.__begin_;
    if (__x.__end_ == __x.__begin_)
    {
LABEL_1178:
      __x.__end_ = v687;
      operator delete(v689);
      goto LABEL_1179;
    }
    while (1)
    {
      if (SHIBYTE(v688[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v688[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v688[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1173;
        }
      }
      else if ((SHIBYTE(v688[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_1173:
        if (--v688 == v687) {
          goto LABEL_1177;
        }
        continue;
      }
      operator delete(v688[-1].first.__r_.__value_.__l.__data_);
      if (--v688 == v687)
      {
LABEL_1177:
        std::vector<std::pair<std::string, std::string>>::pointer v689 = __x.__begin_;
        goto LABEL_1178;
      }
    }
  }
LABEL_1179:
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy((char *)v717);
  return v6;
}

void sub_21DF53630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::deque<char>::~deque[abi:ne180100](v73 - 224);
  if (*(char *)(v73 - 105) < 0) {
    operator delete(*(void **)(v73 - 128));
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a63);
  ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a66);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a67);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a68);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a69);
  if (a73 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a22);
  JUMPOUT(0x21DF53A90);
}

void sub_21DF53750()
{
  if (*(char *)(v0 - 201) < 0) {
    operator delete(*(void **)(v0 - 224));
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v0 - 176);
  JUMPOUT(0x21DF53A40);
}

void sub_21DF53770()
{
  std::unique_ptr<ACFURTKitNVRMGenerator>::~unique_ptr[abi:ne180100]((uint64_t *)(v0 - 224));
  JUMPOUT(0x21DF53A90);
}

void sub_21DF53780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (*(char *)(v52 + 23) < 0) {
    operator delete(*(void **)v52);
  }
  a52 = v52;
  if (*(char *)(v53 - 153) < 0) {
    operator delete(*(void **)(v53 - 176));
  }
  std::pair<std::string const,std::string>::~pair(v53 - 224);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a32);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a35);
  JUMPOUT(0x21DF53A90);
}

void sub_21DF537A8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x21DF537B4);
  }
  JUMPOUT(0x21DF53AB0);
}

void sub_21DF537DC()
{
  __cxa_end_catch();
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x21DF538B0);
}

void sub_21DF537EC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x21DF537F8);
  }
  JUMPOUT(0x21DF53AB0);
}

void sub_21DF53820()
{
}

void sub_21DF53844()
{
}

void sub_21DF53850(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21DF53A90);
}

void sub_21DF53868(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21DF53A90);
}

void sub_21DF53880(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (*(char *)(v2 - 153) < 0) {
      operator delete(*(void **)(v2 - 176));
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x21DF53AB0);
}

void sub_21DF538A8()
{
}

void sub_21DF538C4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21DF53AB0);
}

void sub_21DF538D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a66);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a67);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a68);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a69);
  if (a73 < 0) {
    operator delete(a70);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a22);
  JUMPOUT(0x21DF53A90);
}

void sub_21DF538DC()
{
}

void sub_21DF5391C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21DF53A90);
}

void sub_21DF5392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (*(char *)(v63 - 225) < 0)
  {
    operator delete(*(void **)(v63 - 248));
    if ((*(char *)(v63 - 105) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((*(char *)(v63 - 105) & 0x80000000) == 0)
  {
LABEL_6:
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a63);
    JUMPOUT(0x21DF53A40);
  }
  operator delete(*(void **)(v63 - 128));
  goto LABEL_6;
}

void sub_21DF539BC()
{
  if (*(char *)(v0 - 201) < 0) {
    operator delete(*(void **)(v0 - 224));
  }
  JUMPOUT(0x21DF53A90);
}

void sub_21DF539DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
}

void sub_21DF539EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
}

void sub_21DF539FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v63 - 105) < 0) {
    operator delete(*(void **)(v63 - 128));
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a63);
  JUMPOUT(0x21DF53A40);
}

void sub_21DF53A0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0x21DF53A90);
}

void sub_21DF53A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char *a61)
{
}

uint64_t sGetNVRAMKeyValPairs(std::string *__s, uint64_t a2)
{
  *(_OWORD *)char v82 = 0u;
  long long v83 = 0u;
  *(_OWORD *)int v81 = 0u;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v80 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  v77[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v78 = 0xAAAAAAAAAAAAAALL;
  v77[0] = (void *)0xAAAAAAAAAAAAAA00;
  int v4 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    uint64_t v6 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    size_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    uint64_t v6 = __s;
  }
  char v7 = memchr(v6, 32, size);
  if (v7) {
    unint64_t v8 = (unint64_t)v7;
  }
  else {
    unint64_t v8 = (unint64_t)v6 + size;
  }
  uint64_t v9 = (std::string *)(v8 + 1);
  if (v8 - (void)v6 != size && v9 != (std::string *)((char *)v6 + size))
  {
    std::vector<std::pair<std::string, std::string>>::pointer v11 = (char *)v6 + size + ~v8;
    do
    {
      int v12 = v9->__r_.__value_.__s.__data_[0];
      if (v12 != 32) {
        *(unsigned char *)v8++ = v12;
      }
      uint64_t v9 = (std::string *)((char *)v9 + 1);
      --v11;
    }
    while (v11);
    LOBYTE(v4) = *((unsigned char *)&__s->__r_.__value_.__s + 23);
  }
  if ((v4 & 0x80) != 0)
  {
    std::string::size_type v15 = __s->__r_.__value_.__l.__size_;
    std::string v13 = (char *)(__s->__r_.__value_.__r.__words[0] + v15);
    std::string::size_type v14 = v8 - __s->__r_.__value_.__r.__words[0];
    if (v15 >= v14) {
      goto LABEL_18;
    }
LABEL_21:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::string v13 = (char *)__s + v4;
  std::string::size_type v14 = v8 - (void)__s;
  if (v4 < v8 - (unint64_t)__s) {
    goto LABEL_21;
  }
LABEL_18:
  if (&v13[-v8] == (char *)-1)
  {
    if ((v4 & 0x80) != 0)
    {
      std::string::size_type v16 = __s->__r_.__value_.__r.__words[0];
      __s->__r_.__value_.__l.__size_ = v14;
      *(unsigned char *)(v16 + v14) = 0;
    }
    else
    {
      *((unsigned char *)&__s->__r_.__value_.__s + 23) = v14 & 0x7F;
      __s->__r_.__value_.__s.__data_[v14] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(__s, v14, (std::string::size_type)&v13[-v8]);
  }
  std::string::size_type v17 = 0;
  char v74 = &v82[1];
  while (1)
  {
    std::string::size_type v19 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v21 = __s->__r_.__value_.__l.__size_;
      if (v17 >= v21)
      {
LABEL_175:
        uint64_t v32 = 0;
        if ((SHIBYTE(v78) & 0x80000000) == 0) {
          goto LABEL_179;
        }
        goto LABEL_184;
      }
      int v20 = (std::string *)__s->__r_.__value_.__r.__words[0];
    }
    else
    {
      int v20 = __s;
      std::string::size_type v21 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      if (v17 >= v19) {
        goto LABEL_175;
      }
    }
    uint64_t v22 = (char *)v20 + v17;
    std::vector<std::pair<std::string, std::string>>::pointer v23 = (char *)v20 + v21;
    uint64_t v24 = v21 - v17;
    if (v24 >= 2)
    {
      do
      {
        long long v25 = (char *)memchr(v22, 39, v24 - 1);
        if (!v25) {
          break;
        }
        if (*(_WORD *)v25 == 11303)
        {
          if (v25 != v23)
          {
            int64_t v27 = v25 - (char *)v20;
            if (v25 - (char *)v20 != -1) {
              goto LABEL_41;
            }
          }
          break;
        }
        uint64_t v22 = v25 + 1;
        uint64_t v24 = v23 - v22;
      }
      while (v23 - v22 >= 2);
    }
    if ((v19 & 0x80) != 0) {
      std::string::size_type v26 = __s->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v26 = v19;
    }
    int64_t v27 = v26 - 1;
LABEL_41:
    if ((v19 & 0x80) != 0)
    {
      uint64_t v28 = (std::string *)__s->__r_.__value_.__r.__words[0];
      std::string::size_type v30 = __s->__r_.__value_.__l.__size_;
      size_t v29 = v30 - v17;
      if (v30 > v17) {
        goto LABEL_45;
      }
LABEL_177:
      uint64_t v32 = 1005;
LABEL_178:
      if ((SHIBYTE(v78) & 0x80000000) == 0) {
        goto LABEL_179;
      }
LABEL_184:
      operator delete(v77[0]);
      if ((SHIBYTE(v80) & 0x80000000) == 0) {
        goto LABEL_180;
      }
      goto LABEL_185;
    }
    uint64_t v28 = __s;
    size_t v29 = v19 - v17;
    if (v19 <= v17) {
      goto LABEL_177;
    }
LABEL_45:
    std::string::size_type v31 = memchr((char *)v28 + v17, 61, v29);
    uint64_t v32 = 1005;
    if (!v31) {
      goto LABEL_178;
    }
    int64_t v33 = v31 - (unsigned char *)v28;
    if (v31 - (unsigned char *)v28 == -1) {
      goto LABEL_178;
    }
    if ((v19 & 0x80) != 0)
    {
      std::string::size_type v36 = __s->__r_.__value_.__l.__size_;
      if (v36 < v17) {
LABEL_188:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      std::string::size_type v34 = (std::string *)__s->__r_.__value_.__r.__words[0];
      if (v36 - v17 >= v33 - v17) {
        size_t v35 = v33 - v17;
      }
      else {
        size_t v35 = v36 - v17;
      }
      if (v35 > 0x7FFFFFFFFFFFFFF7) {
LABEL_189:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    else
    {
      std::string::size_type v34 = __s;
      if (v17 > v19) {
        goto LABEL_188;
      }
      if (v19 - v17 >= v33 - v17) {
        size_t v35 = v33 - v17;
      }
      else {
        size_t v35 = v19 - v17;
      }
      if (v35 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_189;
      }
    }
    if (v35 >= 0x17)
    {
      uint64_t v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17) {
        uint64_t v40 = v35 | 7;
      }
      uint64_t v41 = v40 + 1;
      p_dst = (long long *)operator new(v40 + 1);
      *((void *)&__dst + 1) = v35;
      unint64_t v76 = v41 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
LABEL_70:
      memmove(p_dst, (char *)v34 + v17, v35);
      *((unsigned char *)p_dst + v35) = 0;
      if ((SHIBYTE(v80) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_71;
    }
    HIBYTE(v76) = v35;
    p_dst = &__dst;
    if (v35) {
      goto LABEL_70;
    }
    LOBYTE(__dst) = 0;
    if ((SHIBYTE(v80) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_71:
    operator delete(__p[0]);
LABEL_62:
    *(_OWORD *)std::string __p = __dst;
    uint64_t v80 = v76;
    uint64_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((const void **)__p);
    if (v38 != &qword_26AA8FC80)
    {
      if (__p != (void **)(v38 + 7))
      {
        char v39 = *((unsigned char *)v38 + 79);
        if (SHIBYTE(v80) < 0)
        {
          if (v39 >= 0) {
            size_t v43 = v38 + 7;
          }
          else {
            size_t v43 = (void *)v38[7];
          }
          if (v39 >= 0) {
            size_t v44 = *((unsigned __int8 *)v38 + 79);
          }
          else {
            size_t v44 = v38[8];
          }
          std::string::__assign_no_alias<false>(__p, v43, v44);
        }
        else if ((*((unsigned char *)v38 + 79) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(__p, (void *)v38[7], v38[8]);
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v38 + 7);
          uint64_t v80 = v38[9];
        }
      }
      goto LABEL_87;
    }
    unint64_t v42 = HIBYTE(v80);
    if (v80 < 0) {
      unint64_t v42 = (unint64_t)__p[1];
    }
    if (v42 > 8) {
      break;
    }
LABEL_87:
    unint64_t v45 = v33 + 2;
    if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v46 = __s->__r_.__value_.__l.__size_;
      if (v46 < v45) {
LABEL_190:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      long long v47 = (std::string *)__s->__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type v46 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      long long v47 = __s;
      if (v45 > v46) {
        goto LABEL_190;
      }
    }
    unint64_t v48 = v46 - v45;
    if (v48 >= v27 - v33 - 2) {
      size_t v49 = v27 - v33 - 2;
    }
    else {
      size_t v49 = v48;
    }
    if (v49 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v49 >= 0x17)
    {
      uint64_t v61 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17) {
        uint64_t v61 = v49 | 7;
      }
      uint64_t v62 = v61 + 1;
      std::vector<std::pair<std::string, std::string>>::pointer v50 = (long long *)operator new(v61 + 1);
      *((void *)&__dst + 1) = v49;
      unint64_t v76 = v62 | 0x8000000000000000;
      *(void *)&long long __dst = v50;
LABEL_137:
      memmove(v50, (char *)v47 + v45, v49);
      *((unsigned char *)v50 + v49) = 0;
      if ((SHIBYTE(v78) & 0x80000000) == 0) {
        goto LABEL_99;
      }
      goto LABEL_138;
    }
    HIBYTE(v76) = v49;
    std::vector<std::pair<std::string, std::string>>::pointer v50 = &__dst;
    if (v49) {
      goto LABEL_137;
    }
    LOBYTE(__dst) = 0;
    if ((SHIBYTE(v78) & 0x80000000) == 0) {
      goto LABEL_99;
    }
LABEL_138:
    operator delete(v77[0]);
LABEL_99:
    *(_OWORD *)int v77 = __dst;
    uint64_t v78 = v76;
    HIBYTE(v76) = 8;
    strcpy((char *)&__dst, "bootargs");
    int v51 = (void *)HIBYTE(v80);
    if (v80 >= 0) {
      uint64_t v52 = __p;
    }
    else {
      uint64_t v52 = (void **)__p[0];
    }
    if (v80 >= 0) {
      unint64_t v53 = HIBYTE(v80);
    }
    else {
      unint64_t v53 = (unint64_t)__p[1];
    }
    if (v53 >= 8) {
      size_t v54 = 8;
    }
    else {
      size_t v54 = v53;
    }
    if (!memcmp(v52, &__dst, v54) && v53 == 8)
    {
      std::vector<std::pair<std::string, std::string>>::pointer v55 = v77;
      if (v78 >= 0)
      {
        unint64_t v56 = HIBYTE(v78);
      }
      else
      {
        std::vector<std::pair<std::string, std::string>>::pointer v55 = (void **)v77[0];
        unint64_t v56 = (unint64_t)v77[1];
      }
      if (v56)
      {
        char v57 = v55;
        if (v56 >= 8)
        {
          char v57 = (char *)v55 + (v56 & 0xFFFFFFFFFFFFFFF8);
          long long v58 = (char *)v55 + 3;
          unint64_t v59 = v56 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            int8x8_t v60 = vceq_s8(*(int8x8_t *)(v58 - 3), (int8x8_t)0x2C2C2C2C2C2C2C2CLL);
            if (v60.i8[0])
            {
              *(v58 - 3) = 32;
              if ((v60.i8[1] & 1) == 0)
              {
LABEL_119:
                if ((v60.i8[2] & 1) == 0) {
                  goto LABEL_120;
                }
                goto LABEL_128;
              }
            }
            else if ((v60.i8[1] & 1) == 0)
            {
              goto LABEL_119;
            }
            *(v58 - 2) = 32;
            if ((v60.i8[2] & 1) == 0)
            {
LABEL_120:
              if ((v60.i8[3] & 1) == 0) {
                goto LABEL_121;
              }
              goto LABEL_129;
            }
LABEL_128:
            *(v58 - 1) = 32;
            if ((v60.i8[3] & 1) == 0)
            {
LABEL_121:
              if ((v60.i8[4] & 1) == 0) {
                goto LABEL_122;
              }
              goto LABEL_130;
            }
LABEL_129:
            unsigned char *v58 = 32;
            if ((v60.i8[4] & 1) == 0)
            {
LABEL_122:
              if ((v60.i8[5] & 1) == 0) {
                goto LABEL_123;
              }
              goto LABEL_131;
            }
LABEL_130:
            v58[1] = 32;
            if ((v60.i8[5] & 1) == 0)
            {
LABEL_123:
              if ((v60.i8[6] & 1) == 0) {
                goto LABEL_124;
              }
              goto LABEL_132;
            }
LABEL_131:
            v58[2] = 32;
            if ((v60.i8[6] & 1) == 0)
            {
LABEL_124:
              if (v60.i8[7]) {
                goto LABEL_133;
              }
              goto LABEL_116;
            }
LABEL_132:
            v58[3] = 32;
            if (v60.i8[7]) {
LABEL_133:
            }
              v58[4] = 32;
LABEL_116:
            v58 += 8;
            v59 -= 8;
            if (!v59)
            {
              if (v56 == (v56 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_140;
              }
              break;
            }
          }
        }
        uint64_t v68 = (char *)v55 + v56;
        do
        {
          if (*v57 == 44) {
            *char v57 = 32;
          }
          ++v57;
        }
        while (v57 != v68);
LABEL_140:
        int v51 = (void *)HIBYTE(v80);
      }
    }
    if (SHIBYTE(v82[0]) < 0)
    {
      if ((char)v51 >= 0) {
        uint64_t v63 = __p;
      }
      else {
        uint64_t v63 = (void **)__p[0];
      }
      if ((char)v51 >= 0) {
        uint64_t v64 = v51;
      }
      else {
        uint64_t v64 = __p[1];
      }
      std::string::__assign_no_alias<false>(v81, v63, (size_t)v64);
    }
    else if ((char)v51 < 0)
    {
      std::string::__assign_no_alias<true>(v81, __p[0], (size_t)__p[1]);
    }
    else
    {
      *(_OWORD *)int v81 = *(_OWORD *)__p;
      v82[0] = (void *)v80;
    }
    if (SHIBYTE(v83) < 0)
    {
      if (v78 >= 0) {
        uint64_t v66 = v77;
      }
      else {
        uint64_t v66 = (void **)v77[0];
      }
      if (v78 >= 0) {
        size_t v67 = HIBYTE(v78);
      }
      else {
        size_t v67 = (size_t)v77[1];
      }
      std::string::__assign_no_alias<false>((void **)v74, v66, v67);
    }
    else if (v78 < 0)
    {
      std::string::__assign_no_alias<true>(v74, v77[0], (size_t)v77[1]);
    }
    else
    {
      uint64_t v65 = v74;
      *(_OWORD *)char v74 = *(_OWORD *)v77;
      v65[2] = v78;
    }
    unint64_t v69 = *(void *)(a2 + 8);
    if (v69 >= *(void *)(a2 + 16))
    {
      int v18 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((void **)a2, (uint64_t)v81);
    }
    else
    {
      if (SHIBYTE(v82[0]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), (const std::string::value_type *)v81[0], (std::string::size_type)v81[1]);
      }
      else
      {
        long long v70 = *(_OWORD *)v81;
        *(void **)(v69 + 16) = v82[0];
        *(_OWORD *)unint64_t v69 = v70;
      }
      char v71 = (std::string *)(v69 + 24);
      if (SHIBYTE(v83) < 0)
      {
        std::string::__init_copy_ctor_external(v71, (const std::string::value_type *)v82[1], v83);
      }
      else
      {
        long long v72 = *(_OWORD *)v74;
        *(void *)(v69 + 40) = *((void *)v74 + 2);
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      }
      int v18 = (std::string *)(v69 + 48);
      *(void *)(a2 + 8) = v69 + 48;
    }
    *(void *)(a2 + 8) = v18;
    std::string::size_type v17 = v27 + 2;
  }
  uint64_t v32 = 1005;
  if (SHIBYTE(v78) < 0) {
    goto LABEL_184;
  }
LABEL_179:
  if ((SHIBYTE(v80) & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v83) & 0x80000000) == 0) {
      goto LABEL_181;
    }
LABEL_186:
    operator delete(v82[1]);
    if (SHIBYTE(v82[0]) < 0) {
      goto LABEL_187;
    }
    return v32;
  }
LABEL_185:
  operator delete(__p[0]);
  if (SHIBYTE(v83) < 0) {
    goto LABEL_186;
  }
LABEL_181:
  if (SHIBYTE(v82[0]) < 0) {
LABEL_187:
  }
    operator delete(v81[0]);
  return v32;
}

void sub_21DF542F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      std::pair<std::string const,std::string>::~pair((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  std::pair<std::string const,std::string>::~pair((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ACFURTKitNVRMGenerator>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (void *)MEMORY[0x223C1CFB0]();
    operator delete(v3);
  }
  return a1;
}

uint64_t saveNVRAMFile(const __CFDictionary *a1, ACFURTKitNVRMGenerator **a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  CFStringRef v20 = 0;
  memset(&v19, 0, sizeof(v19));
  memset(v23, 170, sizeof(v23));
  v21[1] = 0;
  *(void *)&v23[408] = &unk_26CECAA48;
  std::ios_base::init((std::ios_base *)&v23[408], v23);
  *(_DWORD *)&v23[552] = -1;
  *(void *)&v23[544] = 0;
  int v4 = (ACFULogging *)MEMORY[0x223C1DAD0](v23);
  if (a1 && *a2)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"NVRAMOutputPath");
    CFStringRef v6 = Value;
    if (!Value)
    {
      uint64_t v8 = 0;
      goto LABEL_17;
    }
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFStringGetTypeID()) {
      CFRetain(v6);
    }
    else {
      CFStringRef v6 = 0;
    }
    CFStringRef v20 = v6;
    CFTypeID v9 = CFGetTypeID(v6);
    uint64_t TypeID = (ACFULogging *)CFStringGetTypeID();
    if ((ACFULogging *)v9 == TypeID)
    {
      CStringPtr = CFStringGetCStringPtr(v6, 0x8000100u);
      int v12 = std::string::__assign_external(&v19, CStringPtr);
      ACFULogging::getLogInstance((ACFULogging *)v12);
      ACFULogging::handleMessage();
      CFDataRef v13 = (const __CFData *)ACFURTKitNVRMGenerator::copy(*a2);
      uint64_t v14 = std::filebuf::open();
      std::string::size_type v15 = (std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24));
      if (v14) {
        std::ios_base::iostate v16 = 0;
      }
      else {
        std::ios_base::iostate v16 = v15->__rdstate_ | 4;
      }
      std::ios_base::clear(v15, v16);
      if (*(void *)&v23[120])
      {
        CFDataGetBytePtr(v13);
        CFDataGetLength(v13);
        std::ostream::write();
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)), *(_DWORD *)&v23[*(void *)(v21[0] - 24) + 8] | 4);
        }
        uint64_t v8 = 0;
        if (v13) {
          goto LABEL_16;
        }
      }
      else
      {
        ACFULogging::getLogInstance(v17);
        ACFULogging::handleMessage();
        uint64_t v8 = 1;
        if (v13) {
LABEL_16:
        }
          CFRelease(v13);
      }
    }
    else
    {
      ACFULogging::getLogInstance(TypeID);
      ACFULogging::handleMessage();
      uint64_t v8 = 1;
    }
  }
  else
  {
    ACFULogging::getLogInstance(v4);
    ACFULogging::handleMessage();
    CFStringRef v6 = 0;
    uint64_t v8 = 1;
  }
LABEL_17:
  MEMORY[0x223C1DAE0](v23);
  std::iostream::~basic_iostream();
  MEMORY[0x223C1DDF0](&v23[408]);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v6) {
      return v8;
    }
    goto LABEL_21;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (v6) {
LABEL_21:
  }
    CFRelease(v6);
  return v8;
}

void sub_21DF547AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>(uint64_t a1, char *__s, const char **a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  std::vector<std::pair<std::string, std::string>>::pointer v11 = (void *)(a1 + 24);
  int v12 = *a3;
  size_t v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    std::vector<std::pair<std::string, std::string>>::pointer v11 = operator new(v15 + 1);
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v16 | 0x8000000000000000;
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((unsigned char *)v11 + v14) = 0;
  return a1;
}

void sub_21DF54970(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  if (!__n) {
    return;
  }
  int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    size_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = size - __pos;
    }
    if (size - __pos <= __n) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    size_t v6 = this;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    }
    if (v7 <= __n) {
      goto LABEL_8;
    }
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_8:
  std::string::size_type v9 = size - v8;
  if ((v4 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = v9;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  }
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(const void **a1)
{
  uint64_t v1 = qword_26AA8FC80;
  if (!qword_26AA8FC80) {
    return &qword_26AA8FC80;
  }
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (v2 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  uint64_t v5 = &qword_26AA8FC80;
  do
  {
    while (1)
    {
      int v6 = *(char *)(v1 + 55);
      std::string::size_type v7 = v6 >= 0 ? (const void *)(v1 + 32) : *(const void **)(v1 + 32);
      size_t v8 = v6 >= 0 ? *(unsigned __int8 *)(v1 + 55) : *(void *)(v1 + 40);
      size_t v9 = v4 >= v8 ? v8 : v4;
      int v10 = memcmp(v7, v3, v9);
      if (v10) {
        break;
      }
      if (v8 >= v4) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v1 = *(void *)(v1 + 8);
      if (!v1) {
        goto LABEL_24;
      }
    }
    if (v10 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v5 = (uint64_t *)v1;
    uint64_t v1 = *(void *)v1;
  }
  while (v1);
LABEL_24:
  if (v5 == &qword_26AA8FC80) {
    return &qword_26AA8FC80;
  }
  int v11 = *((char *)v5 + 55);
  if (v11 >= 0) {
    int v12 = v5 + 4;
  }
  else {
    int v12 = (const void *)v5[4];
  }
  if (v11 >= 0) {
    size_t v13 = *((unsigned __int8 *)v5 + 55);
  }
  else {
    size_t v13 = v5[5];
  }
  if (v13 >= v4) {
    size_t v14 = v4;
  }
  else {
    size_t v14 = v13;
  }
  int v15 = memcmp(v3, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0) {
      return v5;
    }
    return &qword_26AA8FC80;
  }
  else
  {
    if (v4 < v13) {
      return &qword_26AA8FC80;
    }
    return v5;
  }
}

std::string *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string::size_type v7 = (std::string *)operator new(48 * v6);
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  size_t v8 = v7 + 2 * v3;
  std::string v19 = &v7[2 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7 + 2 * v3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  size_t v9 = v7 + 2 * v3 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    v7[1].__r_.__value_.__r.__words[6 * v3 + 2] = *(void *)(a2 + 40);
  }
  int v10 = v7 + 2 * v3;
  int v18 = v10;
  int v11 = (char *)&v10[2];
  int v12 = (void **)*a1;
  size_t v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v13 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v13 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v15;
      v10 -= 2;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    size_t v13 = (void **)*a1;
    uint64_t v16 = (void **)a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v19;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_28;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(v16 - 6));
LABEL_20:
      v16 -= 6;
    }
  }
  *a1 = v7 + 2 * v3;
  a1[1] = v11;
  a1[2] = v19;
LABEL_28:
  if (v13) {
    operator delete(v13);
  }
  return v18 + 2;
}

void sub_21DF54D4C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0)
  {
    operator delete(*(void **)v10);
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
    _Unwind_Resume(a1);
  }
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_; i != begin; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_)
  {
    this->__end_ = i - 1;
    if (SHIBYTE(i[-1].second.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(i[-1].second.__r_.__value_.__l.__data_);
      if ((SHIBYTE(i[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((SHIBYTE(i[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(i[-1].first.__r_.__value_.__l.__data_);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

std::vector<std::pair<std::string, std::string>> *__cdecl std::vector<std::pair<std::string,std::string>>::vector(std::vector<std::pair<std::string, std::string>> *this, const std::vector<std::pair<std::string, std::string>> *__x)
{
  this->__end_cap_.__value_ = 0;
  int v3 = this + 16;
  this->__begin_ = 0;
  this->__end_ = 0;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = (long long *)__x->__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer end = (long long *)__x->__end_;
  int64_t v6 = (char *)end - (char *)__x->__begin_;
  if (end != (long long *)__x->__begin_)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    size_t v8 = (std::pair<std::string, std::string> *)operator new(v6);
    this->__begin_ = v8;
    this->__end_ = v8;
    this->__end_cap_.__value_ = v8 + v7;
    this->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v3, begin, end, &v8->first);
  }
  return this;
}

void sub_21DF54EB4(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  unint64_t v4 = (void **)*v1;
  if (!*v1) {
LABEL_12:
  }
    _Unwind_Resume(exception_object);
  uint64_t v5 = (void **)v1[1];
  int64_t v6 = *v1;
  if (v5 == v4)
  {
LABEL_11:
    v1[1] = v4;
    operator delete(v6);
    goto LABEL_12;
  }
  while (1)
  {
    if (*((char *)v5 - 1) < 0)
    {
      operator delete(*(v5 - 3));
      if (*((char *)v5 - 25) < 0) {
LABEL_9:
      }
        operator delete(*(v5 - 6));
    }
    else if (*((char *)v5 - 25) < 0)
    {
      goto LABEL_9;
    }
    v5 -= 6;
    if (v5 == v4)
    {
      int64_t v6 = *v1;
      goto LABEL_11;
    }
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(int a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  int v11 = this;
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      size_t v9 = v4 + 1;
      if (*((char *)v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
      }
      else
      {
        long long v7 = *(long long *)((char *)v6 + 24);
        v4[1].__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v7;
      }
      v6 += 3;
      unint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_21DF55000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (1)
    {
      if (v3 == v4) {
        return a1;
      }
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 25) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 - 25) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 - 48));
LABEL_4:
      v3 -= 48;
    }
  }
  return a1;
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, size_t __sz)
{
  int64_t v6 = a2;
  int v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 4) < __sz)
  {
    if (!v10) {
      goto LABEL_23;
    }
    int v11 = *(std::string **)(a1 + 8);
    int v12 = *(std::string **)a1;
    if (v11 == v10)
    {
LABEL_22:
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
LABEL_23:
      if (__sz > 0x555555555555555) {
        goto LABEL_41;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= __sz) {
        uint64_t v19 = __sz;
      }
      unint64_t v20 = v18 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v19;
      if (v20 > 0x555555555555555) {
LABEL_41:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      uint64_t v21 = 2 * v20;
      uint64_t v22 = (std::string *)operator new(48 * v20);
      *(void *)a1 = v22;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = &v22[v21];
      uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v9, v6, a3, v22);
LABEL_31:
      *(void *)(a1 + 8) = v16;
      return;
    }
    while (1)
    {
      if (SHIBYTE(v11[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11[-1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0) {
LABEL_10:
        }
          operator delete(v11[-2].__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_10;
      }
      v11 -= 2;
      if (v11 == v10)
      {
        int v12 = *(std::string **)a1;
        goto LABEL_22;
      }
    }
  }
  size_t v13 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v10) >> 4) < __sz)
  {
    long long v14 = &a2[((char *)v13 - (char *)v10) >> 4];
    if (v13 != v10)
    {
      uint64_t v15 = 16 * (((char *)v13 - (char *)v10) >> 4);
      do
      {
        std::pair<std::string,std::string>::operator=[abi:ne180100]((void **)&v10->__r_.__value_.__l.__data_, (size_t *)v6);
        v6 += 3;
        v10 += 2;
        v15 -= 48;
      }
      while (v15);
      uint64_t v10 = *(std::string **)(a1 + 8);
    }
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v9, v14, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    std::string::size_type v17 = *(std::string **)a1;
  }
  else
  {
    std::string::size_type v17 = *(std::string **)a1;
    do
    {
      std::pair<std::string,std::string>::operator=[abi:ne180100]((void **)&v10->__r_.__value_.__l.__data_, (size_t *)v6);
      v6 += 3;
      v10 += 2;
      v17 += 2;
    }
    while (v6 != a3);
    size_t v13 = *(std::string **)(a1 + 8);
  }
  while (v13 != v17)
  {
    if (SHIBYTE(v13[-1].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13[-1].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v13[-2].__r_.__value_.__l.__data_);
LABEL_33:
    v13 -= 2;
  }
  *(void *)(a1 + 8) = v17;
}

void sub_21DF55310(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21DF55318(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void **std::pair<std::string,std::string>::operator=[abi:ne180100](void **a1, size_t *a2)
{
  if (a1 == (void **)a2) {
    return a1;
  }
  uint64_t v3 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      size_t v8 = v3[1];
    }
    std::string::__assign_no_alias<false>(a1, a2, v8);
    uint64_t v5 = (char *)(v3 + 3);
    int64_t v6 = a1 + 3;
    size_t v7 = *((unsigned __int8 *)v3 + 47);
    if (*((char *)a1 + 47) < 0) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  if ((*((unsigned char *)a2 + 23) & 0x80) == 0)
  {
    long long v4 = *(_OWORD *)a2;
    a1[2] = (void *)a2[2];
    *(_OWORD *)a1 = v4;
    uint64_t v5 = (char *)(a2 + 3);
    int64_t v6 = a1 + 3;
    size_t v7 = *((unsigned __int8 *)a2 + 47);
    if (*((char *)a1 + 47) < 0) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  std::string::__assign_no_alias<true>(a1, (void *)*a2, a2[1]);
  uint64_t v5 = (char *)(v3 + 3);
  int64_t v6 = a1 + 3;
  size_t v7 = *((unsigned __int8 *)v3 + 47);
  if ((*((char *)a1 + 47) & 0x80000000) == 0)
  {
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v6, (void *)v3[3], v3[4]);
      return a1;
    }
    long long v9 = *(_OWORD *)v5;
    v6[2] = (void *)*((void *)v5 + 2);
    *(_OWORD *)int64_t v6 = v9;
    return a1;
  }
LABEL_14:
  if ((v7 & 0x80u) == 0) {
    int v11 = v5;
  }
  else {
    int v11 = (void *)v3[3];
  }
  if ((v7 & 0x80u) == 0) {
    size_t v12 = v7;
  }
  else {
    size_t v12 = v3[4];
  }
  std::string::__assign_no_alias<false>(v6, v11, v12);
  return a1;
}

unsigned char *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(uint64_t a1, unsigned char *__dst, unsigned char *__src, unsigned char *a4)
{
  int64_t v6 = __dst;
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    BOOL v9 = __dst == __src;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    long long v99 = *(void ***)(a1 + 8);
    unint64_t v100 = *(void *)(a1 + 32);
    do
    {
      *int64_t v6 = (*(unsigned char **)((char *)v99 + ((v100 >> 9) & 0x7FFFFFFFFFFFF8)))[v100 & 0xFFF];
      long long v99 = *(void ***)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 40) - 1;
      unint64_t v100 = *(void *)(a1 + 32) + 1;
      *(void *)(a1 + 32) = v100;
      *(void *)(a1 + 40) = v8;
      if (v100 >= 0x2000)
      {
        operator delete(*v99);
        long long v99 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v99;
        uint64_t v8 = *(void *)(a1 + 40);
        unint64_t v100 = *(void *)(a1 + 32) - 4096;
        *(void *)(a1 + 32) = v100;
      }
      ++v6;
      if (v8) {
        BOOL v101 = v6 == __src;
      }
      else {
        BOOL v101 = 1;
      }
    }
    while (!v101);
  }
  if (v8)
  {
    if (v6 != a4)
    {
      uint64_t v10 = *(void ***)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 32);
      int v103 = a4;
      while (1)
      {
        size_t v12 = *(char **)(a1 + 16);
        uint64_t v13 = v12 - (char *)v10;
        uint64_t v14 = v12 == (char *)v10 ? 0 : ((v12 - (char *)v10) << 9) - 1;
        unint64_t v15 = *(void *)(a1 + 40) + v11;
        if (v14 == v15) {
          break;
        }
LABEL_92:
        (*(unsigned char **)((char *)v10 + ((v15 >> 9) & 0x7FFFFFFFFFFFF8)))[v15 & 0xFFF] = *v6;
        unint64_t v85 = *(void *)(a1 + 32);
        ++*(void *)(a1 + 40);
        *int64_t v6 = *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + ((v85 >> 9) & 0x7FFFFFFFFFFFF8)) + (v85 & 0xFFF));
        uint64_t v10 = *(void ***)(a1 + 8);
        int64x2_t v86 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_21DFAD480);
        *(int64x2_t *)(a1 + 32) = v86;
        unint64_t v11 = v86.i64[0];
        if (v86.i64[0] >= 0x2000uLL)
        {
          operator delete(*v10);
          uint64_t v10 = (void **)(*(void *)(a1 + 8) + 8);
          *(void *)(a1 + 8) = v10;
          unint64_t v11 = *(void *)(a1 + 32) - 4096;
          *(void *)(a1 + 32) = v11;
        }
        if (++v6 == a4) {
          return a4;
        }
      }
      BOOL v16 = v11 >= 0x1000;
      unint64_t v17 = v11 - 4096;
      if (v16)
      {
        *(void *)(a1 + 32) = v17;
        unint64_t v18 = (char *)(v10 + 1);
        uint64_t v19 = *v10;
        *(void *)(a1 + 8) = v10 + 1;
        if (v12 == *(char **)(a1 + 24))
        {
          unint64_t v20 = *(char **)a1;
          if ((unint64_t)v18 > *(void *)a1)
          {
            uint64_t v21 = (uint64_t)&v18[-*(void *)a1] >> 3;
            if (v21 >= -1) {
              uint64_t v22 = v21 + 1;
            }
            else {
              uint64_t v22 = v21 + 2;
            }
            uint64_t v23 = v22 >> 1;
            uint64_t v24 = &v18[-8 * (v22 >> 1)];
            int64_t v25 = v12 - v18;
            if (v12 != v18)
            {
              memmove(&v18[-8 * (v22 >> 1)], v10 + 1, v12 - v18);
              size_t v12 = *(char **)(a1 + 8);
            }
            std::string::size_type v26 = &v12[-8 * v23];
            size_t v12 = &v24[v25];
            goto LABEL_24;
          }
          unint64_t v39 = (v12 - v20) >> 2;
          if (v12 == v20) {
            unint64_t v39 = 1;
          }
          if (v39 >> 61) {
LABEL_118:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v40 = v39 >> 2;
          uint64_t v41 = 8 * v39;
          unint64_t v42 = (char *)operator new(8 * v39);
          size_t v43 = &v42[8 * v40];
          int64_t v44 = v12 - v18;
          BOOL v9 = v12 == v18;
          size_t v12 = v43;
          if (!v9)
          {
            size_t v12 = &v43[v44 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v45 = v44 - 8;
            if ((unint64_t)(v44 - 8) >= 0x38)
            {
              std::string::size_type v46 = &v42[8 * v40];
              if ((unint64_t)(v46 - v18) >= 0x20)
              {
                uint64_t v78 = (v45 >> 3) + 1;
                uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
                std::string::size_type v46 = &v43[v79];
                v18 += v79;
                uint64_t v80 = (long long *)(v10 + 3);
                int v81 = &v42[8 * v40 + 16];
                uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v83 = *v80;
                  *((_OWORD *)v81 - 1) = *(v80 - 1);
                  *(_OWORD *)int v81 = v83;
                  v80 += 2;
                  v81 += 32;
                  v82 -= 4;
                }
                while (v82);
                if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_88;
                }
              }
            }
            else
            {
              std::string::size_type v46 = &v42[8 * v40];
            }
            do
            {
              uint64_t v84 = *(void *)v18;
              v18 += 8;
              *(void *)std::string::size_type v46 = v84;
              v46 += 8;
            }
            while (v46 != v12);
          }
LABEL_88:
          *(void *)a1 = v42;
          *(void *)(a1 + 8) = v43;
          *(void *)(a1 + 16) = v12;
          *(void *)(a1 + 24) = &v42[v41];
          if (v20)
          {
            operator delete(v20);
            size_t v12 = *(char **)(a1 + 16);
          }
        }
LABEL_90:
        *(void *)size_t v12 = v19;
        *(void *)(a1 + 16) += 8;
        goto LABEL_91;
      }
      int64_t v27 = *(char **)(a1 + 24);
      uint64_t v28 = (uint64_t)&v27[-*(void *)a1];
      if (v13 >> 3 < (unint64_t)(v28 >> 3))
      {
        if (v27 != v12)
        {
          std::string::size_type v104 = operator new(0x1000uLL);
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v104);
LABEL_91:
          uint64_t v10 = *(void ***)(a1 + 8);
          unint64_t v15 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
          goto LABEL_92;
        }
        std::string::size_type v104 = operator new(0x1000uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v104);
        long long v47 = *(void **)(a1 + 8);
        size_t v12 = *(char **)(a1 + 16);
        unint64_t v48 = (char *)(v47 + 1);
        uint64_t v19 = (void *)*v47;
        *(void *)(a1 + 8) = v47 + 1;
        if (v12 == *(char **)(a1 + 24))
        {
          unint64_t v20 = *(char **)a1;
          if ((unint64_t)v48 > *(void *)a1)
          {
            uint64_t v49 = (uint64_t)&v48[-*(void *)a1] >> 3;
            if (v49 >= -1) {
              uint64_t v50 = v49 + 1;
            }
            else {
              uint64_t v50 = v49 + 2;
            }
            uint64_t v51 = v50 >> 1;
            uint64_t v52 = &v48[-8 * (v50 >> 1)];
            int64_t v53 = v12 - v48;
            if (v12 != v48)
            {
              memmove(&v48[-8 * (v50 >> 1)], v48, v12 - v48);
              unint64_t v48 = *(char **)(a1 + 8);
            }
            size_t v12 = &v52[v53];
            std::string::size_type v26 = &v48[-8 * v51];
LABEL_24:
            *(void *)(a1 + 8) = v26;
            *(void *)(a1 + 16) = v12;
            goto LABEL_90;
          }
          unint64_t v87 = (v12 - v20) >> 2;
          if (v12 == v20) {
            unint64_t v87 = 1;
          }
          if (v87 >> 61) {
            goto LABEL_118;
          }
          unint64_t v88 = v87 >> 2;
          uint64_t v41 = 8 * v87;
          unint64_t v42 = (char *)operator new(8 * v87);
          size_t v43 = &v42[8 * v88];
          int64_t v89 = v12 - v48;
          BOOL v9 = v12 == v48;
          size_t v12 = v43;
          if (!v9)
          {
            size_t v12 = &v43[v89 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v90 = v89 - 8;
            if ((unint64_t)(v89 - 8) < 0x38)
            {
              uint64_t v91 = &v42[8 * v88];
              do
              {
LABEL_104:
                uint64_t v98 = *(void *)v48;
                v48 += 8;
                *(void *)uint64_t v91 = v98;
                v91 += 8;
              }
              while (v91 != v12);
              goto LABEL_88;
            }
            uint64_t v91 = &v42[8 * v88];
            if ((unint64_t)(v91 - v48) < 0x20) {
              goto LABEL_104;
            }
            uint64_t v92 = (v90 >> 3) + 1;
            uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v91 = &v43[v93];
            v48 += v93;
            uint64_t v94 = (long long *)(v47 + 3);
            unint64_t v95 = &v42[8 * v88 + 16];
            uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v97 = *v94;
              *((_OWORD *)v95 - 1) = *(v94 - 1);
              *(_OWORD *)unint64_t v95 = v97;
              v94 += 2;
              v95 += 32;
              v96 -= 4;
            }
            while (v96);
            if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_104;
            }
          }
          goto LABEL_88;
        }
        goto LABEL_90;
      }
      uint64_t v29 = v28 >> 2;
      if (v27 == *(char **)a1) {
        unint64_t v30 = 1;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30 >> 61) {
        goto LABEL_118;
      }
      std::string::size_type v31 = (char *)operator new(8 * v30);
      uint64_t v32 = operator new(0x1000uLL);
      uint64_t v33 = v13 >> 3;
      std::string::size_type v34 = &v31[8 * (v13 >> 3)];
      size_t v35 = &v31[8 * v30];
      if (v13 >> 3 == v30)
      {
        long long v37 = v32;
        if (v13 < 1)
        {
          if (v12 == (char *)v10) {
            unint64_t v54 = 1;
          }
          else {
            unint64_t v54 = v13 >> 2;
          }
          if (v54 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string::size_type v34 = (char *)operator new(8 * v54);
          size_t v35 = &v34[8 * v54];
          operator delete(v31);
          std::vector<std::pair<std::string, std::string>>::pointer v55 = *(char **)(a1 + 8);
          size_t v12 = *(char **)(a1 + 16);
          std::string::size_type v31 = v34;
          *(void *)std::string::size_type v34 = v37;
          std::string::size_type v36 = v34 + 8;
          if (v12 == v55) {
            goto LABEL_59;
          }
        }
        else
        {
          unint64_t v38 = v33 + 2;
          if (v33 >= -1) {
            unint64_t v38 = v33 + 1;
          }
          v34 -= 8 * (v38 >> 1);
          *(void *)std::string::size_type v34 = v32;
          std::string::size_type v36 = v34 + 8;
          if (v12 == (char *)v10) {
            goto LABEL_59;
          }
        }
      }
      else
      {
        *(void *)std::string::size_type v34 = v32;
        std::string::size_type v36 = v34 + 8;
        if (v12 == (char *)v10)
        {
LABEL_59:
          unint64_t v56 = *(char **)a1;
          *(void *)a1 = v31;
          *(void *)(a1 + 8) = v34;
          *(void *)(a1 + 16) = v36;
          *(void *)(a1 + 24) = v35;
          a4 = v103;
          if (v56) {
            operator delete(v56);
          }
          goto LABEL_91;
        }
      }
      do
      {
        if (v34 == v31)
        {
          if (v36 >= v35)
          {
            if (v35 == v31) {
              unint64_t v62 = 1;
            }
            else {
              unint64_t v62 = (v35 - v31) >> 2;
            }
            if (v62 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v63 = (char *)operator new(8 * v62);
            uint64_t v64 = v63;
            unint64_t v65 = (v62 + 3) >> 2;
            std::string::size_type v34 = &v63[8 * v65];
            int64_t v66 = v36 - v31;
            BOOL v9 = v36 == v31;
            std::string::size_type v36 = v34;
            if (!v9)
            {
              std::string::size_type v36 = &v34[v66 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v67 = v66 - 8;
              uint64_t v68 = &v63[8 * v65];
              unint64_t v69 = v31;
              if (v67 < 0x38) {
                goto LABEL_122;
              }
              uint64_t v70 = 8 * v65;
              uint64_t v68 = &v63[8 * v65];
              unint64_t v69 = v31;
              if ((unint64_t)(v68 - v31) < 0x20) {
                goto LABEL_122;
              }
              uint64_t v71 = (v67 >> 3) + 1;
              uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v68 = &v34[v72];
              unint64_t v69 = &v31[v72];
              uint64_t v73 = (long long *)(v31 + 16);
              char v74 = &v63[v70 + 16];
              uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v76 = *v73;
                *((_OWORD *)v74 - 1) = *(v73 - 1);
                *(_OWORD *)char v74 = v76;
                v73 += 2;
                v74 += 32;
                v75 -= 4;
              }
              while (v75);
              if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_122:
                do
                {
                  uint64_t v77 = *(void *)v69;
                  v69 += 8;
                  *(void *)uint64_t v68 = v77;
                  v68 += 8;
                }
                while (v68 != v36);
              }
            }
            size_t v35 = &v63[8 * v62];
            operator delete(v31);
            std::string::size_type v31 = v64;
          }
          else
          {
            uint64_t v58 = (v35 - v36) >> 3;
            if (v58 >= -1) {
              uint64_t v59 = v58 + 1;
            }
            else {
              uint64_t v59 = v58 + 2;
            }
            uint64_t v60 = v59 >> 1;
            std::string::size_type v34 = &v31[8 * (v59 >> 1)];
            uint64_t v61 = v31;
            if (v36 != v31)
            {
              memmove(v34, v31, v36 - v31);
              uint64_t v61 = v36;
            }
            std::string::size_type v36 = (char *)v61 + 8 * v60;
          }
        }
        uint64_t v57 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v34 - 1) = v57;
        v34 -= 8;
      }
      while (v12 != *(char **)(a1 + 8));
      goto LABEL_59;
    }
  }
  else if (v6 != __src)
  {
    if (a4 != __src) {
      memmove(v6, __src, a4 - __src);
    }
    return &v6[a4 - __src];
  }
  return a4;
}

void sub_21DF55B48(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      size_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<ACFURTKitNVRMGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ACFURTKitNVRMGenerator  *>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x223C1CFB0]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ACFURTKitNVRMGenerator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFAD4F6) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFAD4F6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFAD4F6)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFAD4F6 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_22()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ManifestCache>::~PthreadMutexGuardPolicy, &ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void _GLOBAL__sub_I_BasebandNVRAM_mm()
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)v0, "boot-args", (const char **)kBootArgsShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v4, "boot-command", (const char **)kBootCommadShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v8, "auto-boot", (const char **)kAutoBootShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v12, "bootdelay", (const char **)kBootDelayShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v16, "boot-script", (const char **)kBootScriptShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v20, "boot-device", (const char **)kBootDeviceShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v24, "debug-soc", (const char **)kDebugSocShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v28, "debug-uarts", (const char **)kDebugUartsShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v32, "force-ctrr-lock", (const char **)kForceCtrrLockShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v36, "enable-auth-debug", (const char **)kEnableAuthDebugShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v40, "reconfig-breakpoints", (const char **)kReconfigBreakpointsShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v44, "reconfig-behavior", (const char **)kReconfigBehaviorShort);
  std::map<std::string,std::string>::map[abi:ne180100]((void **)&mNVRAMItems, (const void **)v0, 12);
  if (v47 < 0)
  {
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v42);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v40);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v38);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v36);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v32);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v30);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v28);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v24);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v22);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v18);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v14);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v12);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(__p);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v4);
  if ((v3 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v1 & 0x80000000) == 0) {
      return;
    }
LABEL_49:
    operator delete(v0[0]);
    return;
  }
LABEL_48:
  operator delete(v2);
  if (v1 < 0) {
    goto LABEL_49;
  }
}

void sub_21DF56198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (SLOBYTE(STACK[0x247]) < 0)
  {
    operator delete(v82[69]);
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v82[66]);
  if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v82[63]);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a81 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v82[60]);
  if ((a81 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v82[57]);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a79 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v82[54]);
  if ((a79 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v82[51]);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a77 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v82[48]);
  if ((a77 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v82[45]);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a75 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v82[42]);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v82[39]);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a73 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v82[36]);
  if ((a73 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v82[33]);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a69 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v82[30]);
  if ((a69 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a63 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v82[27]);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a57 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v82[24]);
  if ((a57 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v82[21]);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v82[18]);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a39 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(__p);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_21:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_23:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_24:
    if ((a15 & 0x80000000) == 0) {
LABEL_50:
    }
      _Unwind_Resume(a1);
LABEL_49:
    operator delete(a10);
    _Unwind_Resume(a1);
  }
LABEL_48:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_50;
  }
  goto LABEL_49;
}

void sub_21DF563EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  while (1)
  {
    if (*((char *)v10 - 1) < 0)
    {
      operator delete(*(v10 - 3));
      if (*((char *)v10 - 25) < 0) {
LABEL_7:
      }
        operator delete(*(v10 - 6));
    }
    else if (*((char *)v10 - 25) < 0)
    {
      goto LABEL_7;
    }
    v10 -= 6;
    if (v10 == (void **)&a10) {
      JUMPOUT(0x21DF563E4);
    }
  }
}

void BBUICEMRCImage::~BBUICEMRCImage(BBUICEMRCImage *this)
{
  *(void *)this = &unk_26CECD7D0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  BBUICEMRCImage *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CECD7D0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0)
  {
    operator delete(*((void **)this + 1));
    char v3 = this;
  }
  else
  {
    char v3 = this;
  }
  operator delete(v3);
}

uint64_t BBUICEMRCImage::getWritePayloadData(BBUICEMRCImage *this, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t result = (*(uint64_t (**)(BBUICEMRCImage *))(*(void *)this + 32))(this);
  if (result <= a4)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 106, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEMRCImage.cpp", 0x1Du, (ctu::LogMessageBuffer *)"Assertion failure((offset < (getWritePayloadLength())) && \"Chunk size is not sufficient to write payload data of the MRC image!\")", v10, v11, v12, v19);
    goto LABEL_9;
  }
  int v20 = -1431655766;
  if (!a3) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t, int *, void))(**((void **)this + 5) + 16))(*((void *)this + 5), a2, a3, &v20, *((_DWORD *)this + 8) + a4);
  if (result)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 106, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEMRCImage.cpp", 0x24u, (ctu::LogMessageBuffer *)"Assertion failure((ret == kBBUReturnSuccess) && \"Failed to copy MRC image payload data to buffer!\")", v13, v14, v15, v19);
    goto LABEL_9;
  }
  if (v20 != a3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 106, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEMRCImage.cpp", 0x25u, (ctu::LogMessageBuffer *)"Assertion failure((amountCopied == amount) && \"Copied data size mismatch: Failed to copy MRC image payload data to buffer\")", v16, v17, v18, v19);
LABEL_9:
  }
  return result;
}

void sub_21DF566CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF566E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF566F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICEMRCImage::getName(BBUICEMRCImage *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t BBUICEMRCImage::getWritePayloadLength(BBUICEMRCImage *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t BBUICEMRCImage::getOpenPayloadData(BBUICEMRCImage *this)
{
  return 0;
}

uint64_t BBUICEMRCImage::getOpenPayloadLength(BBUICEMRCImage *this)
{
  return 0;
}

void BBUICEMRCImage::generateHash(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      BBUDataSource::generateHash(v3, a2, a3);
    }
  }
}

void BBUEUR10UpdateSource::BBUEUR10UpdateSource(BBUEUR10UpdateSource *this, BBUZipFile *a2, unsigned int a3, BBUFeedback *a4)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26CECD210;
  *((void *)this + 1) = a4;
  *((void *)this + 8) = a2;
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_26CECAF18;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  *((void *)this + 9) = v6;
  *((unsigned char *)this + 103) = 0;
  *((unsigned char *)this + 80) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 120) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(void *)this = &unk_26CECD838;
  *((void *)this + 24) = 0;
  *((_OWORD *)this + 10) = constinit_0;
  *((_OWORD *)this + 11) = *(_OWORD *)algn_21DFAD568;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = xmmword_21DFAD540;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  char v7 = operator new(0x18uLL);
  *((void *)this + 37) = v7 + 3;
  *((void *)this + 38) = v7 + 3;
  v7[1] = 0;
  void v7[2] = 0;
  *char v7 = 0;
  *((void *)this + 36) = v7;
  *((void *)this + 51) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  BBUEUR10UpdateSource::init(this);
}

void sub_21DF568A4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 288);
  if (v3)
  {
    *(void *)(v1 + 296) = v3;
    operator delete(v3);
    BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
    _Unwind_Resume(a1);
  }
  BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
  _Unwind_Resume(a1);
}

void sub_21DF568DC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  if (v3)
  {
    BBUZipFile::~BBUZipFile(v3);
    operator delete(v5);
  }
  BBUUpdateSource::~BBUUpdateSource(v1);
  _Unwind_Resume(a1);
}

void BBUEURUpdateSource::~BBUEURUpdateSource(void **this)
{
  *this = &unk_26CECD210;
  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    uint64_t v2 = (std::__shared_weak_count *)this[9];
    if (!v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = (std::__shared_weak_count *)this[9];
    if (!v2) {
      goto LABEL_3;
    }
  }
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_3:
    uint64_t v3 = (BBUUpdateSource *)this;
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (BBUUpdateSource *)this;

LABEL_5:
  BBUUpdateSource::~BBUUpdateSource(v3);
}

uint64_t BBUEUR10UpdateSource::BBUEUR10UpdateSource(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_26CECD210;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v5 = (std::string *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)a1 = &unk_26CECD838;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = constinit_1;
  *(_OWORD *)(a1 + 176) = unk_21DFAD590;
  *(_OWORD *)(a1 + 200) = xmmword_21DFAD540;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  char v7 = operator new(0x18uLL);
  *(void *)(a1 + 296) = v7 + 3;
  *(void *)(a1 + 304) = v7 + 3;
  v7[1] = 0;
  void v7[2] = 0;
  *char v7 = 0;
  *(void *)(a1 + 288) = v7;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  BBUEUR10UpdateSource::init((BBUEUR10UpdateSource *)a1);
  return a1;
}

void sub_21DF56B00(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v3);
  BBUUpdateSource::~BBUUpdateSource(v1);
  _Unwind_Resume(a1);
}

void sub_21DF56B20(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 288);
  if (v3)
  {
    *(void *)(v1 + 296) = v3;
    operator delete(v3);
    BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
    _Unwind_Resume(a1);
  }
  BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
  _Unwind_Resume(a1);
}

void BBUEUR10UpdateSource::~BBUEUR10UpdateSource(BBUEUR10UpdateSource *this)
{
  *(void *)this = &unk_26CECD838;
  uint64_t v2 = *((void *)this + 27);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 30);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 31);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 28);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 32);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 33);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 34);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 35);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 40);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 41);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 42);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 43);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 44);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 45);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 46);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)this + 47);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 48);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  int v20 = (void *)*((void *)this + 36);
  char v21 = (void *)*((void *)this + 37);
  while (v20 != v21)
  {
    if (*v20) {
      (*(void (**)(void))(*(void *)*v20 + 8))(*v20);
    }
    ++v20;
  }
  uint64_t v22 = *((void *)this + 39);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *((void *)this + 19);
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *((void *)this + 49);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *((void *)this + 50);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)this + 51);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  char v27 = (void *)*((void *)this + 36);
  if (v27)
  {
    *((void *)this + 37) = v27;
    operator delete(v27);
  }
  *(void *)this = &unk_26CECD210;
  if (*((char *)this + 103) < 0)
  {
    operator delete(*((void **)this + 10));
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v28) {
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v28) {
      goto LABEL_56;
    }
  }
  if (atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_56:
    char v29 = this;
    goto LABEL_58;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  char v29 = this;

LABEL_58:
  BBUUpdateSource::~BBUUpdateSource(v29);
}

{
  void *v1;
  uint64_t vars8;

  BBUEUR10UpdateSource::~BBUEUR10UpdateSource(this);

  operator delete(v1);
}

void BBUEUR10UpdateSource::init(BBUEUR10UpdateSource *this)
{
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v2 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v3 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v3);
    uint64_t v4 = operator new(0x20uLL);
    *uint64_t v4 = &unk_26CECF498;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    uint64_t v5 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v3;
    off_26AA89B58 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (BBUPartitionManager *)off_26AA89B50;
  }
  uint64_t v6 = (std::__shared_weak_count *)off_26AA89B58;
  v381.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  v381.__r_.__value_.__l.__size_ = (std::string::size_type)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v2, (std::string *)&__p);
  if ((__p.st_gid & 0x80000000) == 0) {
    p_p = (bbufs *)&__p;
  }
  else {
    p_p = *(bbufs **)&__p.st_dev;
  }
  if (p_p)
  {
    if ((bbufs::prepareDestination(p_p, v7) & 1) == 0) {
      _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v15, v16, v17, v18, v19, v20, (char)v375);
    }
  }
  else
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v8, v9, v10, v11, v12, v13, 0);
  }
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else if (!v6)
  {
LABEL_20:
    int v21 = *((char *)this + 103);
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_24:
    if (*((void *)this + 11)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  int v21 = *((char *)this + 103);
  if (v21 < 0) {
    goto LABEL_24;
  }
LABEL_21:
  if ((_BYTE)v21) {
    goto LABEL_26;
  }
LABEL_25:
  if (!*((void *)this + 8))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x93u, (ctu::LogMessageBuffer *)"Assertion failure(( !fFirmwareFolder.empty() || fZipFile) && \"Firmware data source error!\")", v368, v369, v370, (char)v375);
LABEL_567:
  }
LABEL_26:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "restoresbl1.mbn");
  int v22 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v23 = v22;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    uint64_t v24 = &unk_26AA8F000;
    if (v23) {
      goto LABEL_28;
    }
LABEL_36:
    uint64_t v26 = v24;
    if (v24[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_41;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_41;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_41;
    }
    uint64_t v28 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    uint64_t v32 = "File not present: %s\n";
    unint64_t v375 = "restoresbl1.mbn";
    uint64_t v33 = 1;
    goto LABEL_40;
  }
  uint64_t v24 = (void *)&unk_26AA8F000;
  if (!v22) {
    goto LABEL_36;
  }
LABEL_28:
  if (*((void *)this + 27))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x97u, (ctu::LogMessageBuffer *)"Assertion failure(fRestoreSBLImage == __null)", v359, v360, v361, (char)v375);
    goto LABEL_567;
  }
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "restoresbl1.mbn");
  DataSource = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, *((_DWORD *)this + 52));
  uint64_t v26 = &unk_26AA8F000;
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  char v27 = (char *)operator new(0x58uLL);
  BBUEURMIImage::BBUEURMIImage((BBUEURMIImage *)v27, DataSource, 0);
  *(void *)char v27 = &unk_26CECC2D0;
  *((void *)v27 + 10) = 0;
  *(void *)(v27 + 74) = 0;
  *((_WORD *)v27 + 36) = 19522;
  *((void *)v27 + 8) = *(void *)"restoreSBL";
  v27[87] = 10;
  *((void *)this + 27) = v27;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_41;
    }
    goto LABEL_33;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_33:
    if (gBBULogVerbosity < 0) {
      goto LABEL_41;
    }
    uint64_t v28 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    uint64_t v32 = "Loaded restoreSBL1\n";
    uint64_t v33 = 0;
LABEL_40:
    _BBULog(3, v33, v28, "", v32, v29, v30, v31, (char)v375);
  }
LABEL_41:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "sbl1.mbn");
  int v34 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v35 = v34;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v35) {
      goto LABEL_43;
    }
LABEL_51:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_56;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_56;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_56;
    }
    unint64_t v38 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v42 = "File not present: %s\n";
    unint64_t v375 = "sbl1.mbn";
    int v43 = 1;
    uint64_t v44 = 1;
    goto LABEL_55;
  }
  if (!v34) {
    goto LABEL_51;
  }
LABEL_43:
  if (*((void *)this + 28))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0xA6u, (ctu::LogMessageBuffer *)"Assertion failure(fSBLImage == __null)", v362, v363, v364, (char)v375);
    goto LABEL_567;
  }
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "sbl1.mbn");
  std::string::size_type v36 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, *((_DWORD *)this + 52));
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  char v37 = (char *)operator new(0x58uLL);
  BBUEURMIImage::BBUEURMIImage((BBUEURMIImage *)v37, v36, 0);
  *(void *)char v37 = &unk_26CECC2D0;
  *(void *)(v37 + 75) = 0;
  *(void *)(v37 + 67) = 0;
  *(_DWORD *)(v37 + 83) = 0;
  *((_WORD *)v37 + 32) = 16979;
  v37[66] = 76;
  v37[87] = 3;
  *((void *)this + 28) = v37;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_56;
    }
    goto LABEL_48;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_48:
    if (gBBULogVerbosity < 0) {
      goto LABEL_56;
    }
    unint64_t v38 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v42 = "Loaded SBL1\n";
    int v43 = 3;
    uint64_t v44 = 0;
LABEL_55:
    _BBULog(v43, v44, v38, "", v42, v39, v40, v41, (char)v375);
  }
LABEL_56:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "rpm.mbn");
  int v45 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v46 = v45;
  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
  {
    if (v45) {
      goto LABEL_58;
    }
LABEL_66:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_71;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_71;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_71;
    }
    uint64_t v50 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v54 = "File not present: %s\n";
    unint64_t v375 = "rpm.mbn";
    uint64_t v55 = 1;
    goto LABEL_70;
  }
  operator delete(*(void **)&__p.st_dev);
  if (!v46) {
    goto LABEL_66;
  }
LABEL_58:
  if (*((void *)this + 29))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0xB5u, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage == __null)", v365, v366, v367, (char)v375);
    goto LABEL_567;
  }
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "rpm.mbn");
  char v47 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, *((_DWORD *)this + 53));
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  uint64_t v48 = operator new(0x20uLL);
  *uint64_t v48 = &unk_26CECA7E0;
  v48[1] = v47;
  void v48[2] = 0;
  *((_DWORD *)v48 + 6) = 0;
  uint64_t v49 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v49, v47, 0);
  void v48[2] = v49;
  *uint64_t v48 = &unk_26CECD968;
  *((void *)this + 29) = v48;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_71;
    }
    goto LABEL_63;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_63:
    if (gBBULogVerbosity < 0) {
      goto LABEL_71;
    }
    uint64_t v50 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v54 = "Loaded RPM\n";
    uint64_t v55 = 0;
LABEL_70:
    _BBULog(3, v55, v50, "", v54, v51, v52, v53, (char)v375);
  }
LABEL_71:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apps.mbn");
  int v56 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v57 = v56;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v57) {
      goto LABEL_73;
    }
LABEL_80:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_85;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_85;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_85;
    }
    uint64_t v61 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v65 = "File not present: %s\n";
    unint64_t v375 = "apps.mbn";
    uint64_t v66 = 1;
    goto LABEL_84;
  }
  if (!v56) {
    goto LABEL_80;
  }
LABEL_73:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apps.mbn");
  uint64_t v58 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  uint64_t v59 = operator new(0x20uLL);
  void *v59 = &unk_26CECA7E0;
  v59[1] = v58;
  v59[2] = 0;
  *((_DWORD *)v59 + 6) = 0;
  uint64_t v60 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v60, v58, 0);
  v59[2] = v60;
  void *v59 = &unk_26CECD9D0;
  *((void *)this + 30) = v59;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_85;
    }
    goto LABEL_77;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_77:
    if (gBBULogVerbosity < 0) {
      goto LABEL_85;
    }
    uint64_t v61 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v65 = "Loaded APPS\n";
    uint64_t v66 = 0;
LABEL_84:
    _BBULog(3, v66, v61, "", v65, v62, v63, v64, (char)v375);
  }
LABEL_85:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "mba.mbn");
  int v67 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v68 = v67;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v68) {
      goto LABEL_87;
    }
LABEL_94:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_99;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_99;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_99;
    }
    uint64_t v72 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    long long v76 = "File not present: %s\n";
    unint64_t v375 = "mba.mbn";
    uint64_t v77 = 1;
    goto LABEL_98;
  }
  if (!v67) {
    goto LABEL_94;
  }
LABEL_87:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "mba.mbn");
  unint64_t v69 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  uint64_t v70 = operator new(0x20uLL);
  void *v70 = &unk_26CECA7E0;
  v70[1] = v69;
  v70[2] = 0;
  *((_DWORD *)v70 + 6) = 0;
  uint64_t v71 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v71, v69, 0);
  v70[2] = v71;
  void *v70 = &unk_26CECDA38;
  *((void *)this + 32) = v70;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_99;
    }
    goto LABEL_91;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_91:
    if (gBBULogVerbosity < 0) {
      goto LABEL_99;
    }
    uint64_t v72 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    long long v76 = "Loaded MBA\n";
    uint64_t v77 = 0;
LABEL_98:
    _BBULog(3, v77, v72, "", v76, v73, v74, v75, (char)v375);
  }
LABEL_99:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "qdsp6sw.mbn");
  int v78 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v79 = v78;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v79) {
      goto LABEL_101;
    }
LABEL_108:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_113;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_113;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_113;
    }
    long long v83 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v87 = "File not present: %s\n";
    unint64_t v375 = "qdsp6sw.mbn";
    uint64_t v88 = 1;
    goto LABEL_112;
  }
  if (!v78) {
    goto LABEL_108;
  }
LABEL_101:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "qdsp6sw.mbn");
  uint64_t v80 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  int v81 = operator new(0x20uLL);
  *int v81 = &unk_26CECA7E0;
  v81[1] = v80;
  v81[2] = 0;
  *((_DWORD *)v81 + 6) = 0;
  uint64_t v82 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v82, v80, 0);
  v81[2] = v82;
  *int v81 = &unk_26CECDAA0;
  *((void *)this + 33) = v81;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_113;
    }
    goto LABEL_105;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_105:
    if (gBBULogVerbosity < 0) {
      goto LABEL_113;
    }
    long long v83 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    unint64_t v87 = "Loaded QDSP6SW\n";
    uint64_t v88 = 0;
LABEL_112:
    _BBULog(3, v88, v83, "", v87, v84, v85, v86, (char)v375);
  }
LABEL_113:
  HIBYTE(__p.st_gid) = 6;
  strcpy((char *)&__p, "tz.mbn");
  int v89 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v90 = v89;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v90) {
      goto LABEL_115;
    }
LABEL_122:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_127;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_127;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_127;
    }
    uint64_t v94 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    uint64_t v98 = "File not present: %s\n";
    unint64_t v375 = "tz.mbn";
    uint64_t v99 = 1;
    goto LABEL_126;
  }
  if (!v89) {
    goto LABEL_122;
  }
LABEL_115:
  HIBYTE(__p.st_gid) = 6;
  strcpy((char *)&__p, "tz.mbn");
  uint64_t v91 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  uint64_t v92 = operator new(0x20uLL);
  *uint64_t v92 = &unk_26CECA7E0;
  v92[1] = v91;
  v92[2] = 0;
  *((_DWORD *)v92 + 6) = 0;
  uint64_t v93 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v93, v91, 0);
  v92[2] = v93;
  *uint64_t v92 = &unk_26CECDB08;
  *((void *)this + 34) = v92;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_127;
    }
    goto LABEL_119;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_119:
    if (gBBULogVerbosity < 0) {
      goto LABEL_127;
    }
    uint64_t v94 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    uint64_t v98 = "Loaded TZ\n";
    uint64_t v99 = 0;
LABEL_126:
    _BBULog(3, v99, v94, "", v98, v95, v96, v97, (char)v375);
  }
LABEL_127:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "dsp3.mbn");
  int v100 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v101 = v100;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v101) {
      goto LABEL_129;
    }
LABEL_136:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_141;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_141;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_141;
    }
    std::string::size_type v104 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    uint64_t v108 = "File not present: %s\n";
    unint64_t v375 = "dsp3.mbn";
    uint64_t v109 = 1;
    goto LABEL_140;
  }
  if (!v100) {
    goto LABEL_136;
  }
LABEL_129:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "dsp3.mbn");
  uint64_t v102 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  int v103 = (BBUEURDSPImage *)operator new(0x58uLL);
  BBUEURDSPImage::BBUEURDSPImage(v103, v102, 3u, 0);
  *((void *)this + 31) = v103;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_141;
    }
    goto LABEL_133;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_133:
    if (gBBULogVerbosity < 0) {
      goto LABEL_141;
    }
    std::string::size_type v104 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    uint64_t v108 = "Loaded DSP3\n";
    uint64_t v109 = 0;
LABEL_140:
    _BBULog(3, v109, v104, "", v108, v105, v106, v107, (char)v375);
  }
LABEL_141:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "wdt.mbn");
  int v110 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v111 = v110;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v111) {
      goto LABEL_143;
    }
LABEL_150:
    if (v26[406] == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_155;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_155;
      }
    }
    if (gBBULogVerbosity < 1) {
      goto LABEL_155;
    }
    int v114 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    long long v118 = "File not present: %s\n";
    unint64_t v375 = "wdt.mbn";
    uint64_t v119 = 1;
    goto LABEL_154;
  }
  if (!v110) {
    goto LABEL_150;
  }
LABEL_143:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "wdt.mbn");
  long long v112 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  long long v113 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v113, v112, 0);
  *(void *)long long v113 = &unk_26CECDB70;
  *((void *)this + 35) = v113;
  if (v26[406] == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_155;
    }
    goto LABEL_147;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_147:
    if (gBBULogVerbosity < 0) {
      goto LABEL_155;
    }
    int v114 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    long long v118 = "Loaded WDT\n";
    uint64_t v119 = 0;
LABEL_154:
    _BBULog(3, v119, v114, "", v118, v115, v116, v117, (char)v375);
  }
LABEL_155:
  memset(&v381, 170, sizeof(v381));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  char v120 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v121 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v121);
    std::string::size_type v122 = operator new(0x20uLL);
    void *v122 = &unk_26CECF498;
    v122[1] = 0;
    v122[2] = 0;
    v122[3] = v121;
    uint64_t v123 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v121;
    off_26AA89B58 = v122;
    if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
    char v120 = (BBUPartitionManager *)off_26AA89B50;
  }
  int v124 = (std::__shared_weak_count *)off_26AA89B58;
  *(void *)&__p.st_dev = v120;
  __p.__darwin_ino64_t st_ino = (__darwin_ino64_t)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v120, &v381);
  if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
    if (*((_DWORD *)this + 50)) {
      goto LABEL_165;
    }
  }
  else if (*((_DWORD *)this + 50))
  {
LABEL_165:
    for (unint64_t i = 0; i < *((unsigned int *)this + 50); ++i)
    {
      memset(&__p, 170, 24);
      int v126 = SHIBYTE(v381.__r_.__value_.__r.__words[2]);
      if ((v381.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v381.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v381.__r_.__value_.__l.__size_;
      }
      unint64_t v128 = size + 3;
      memset(&__dst, 170, sizeof(__dst));
      if (size + 3 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v128 >= 0x17)
      {
        uint64_t v130 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v128 | 7) != 0x17) {
          uint64_t v130 = v128 | 7;
        }
        uint64_t v131 = v130 + 1;
        p_dst = (std::string *)operator new(v130 + 1);
        __dst.__r_.__value_.__l.__size_ = size + 3;
        __dst.__r_.__value_.__r.__words[2] = v131 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 3;
        if (!size) {
          goto LABEL_181;
        }
      }
      if (v126 >= 0) {
        uint64_t v132 = &v381;
      }
      else {
        uint64_t v132 = (std::string *)v381.__r_.__value_.__r.__words[0];
      }
      memmove(p_dst, v132, size);
LABEL_181:
      *(_DWORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 7562853;
      std::to_string(&v378, i + 1);
      if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v133 = &v378;
      }
      else {
        unint64_t v133 = (std::string *)v378.__r_.__value_.__r.__words[0];
      }
      if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v134 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v134 = v378.__r_.__value_.__l.__size_;
      }
      uint64_t v135 = std::string::append(&__dst, (const std::string::value_type *)v133, v134);
      long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
      v380.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v380.__r_.__value_.__l.__data_ = v136;
      v135->__r_.__value_.__l.__size_ = 0;
      v135->__r_.__value_.__r.__words[2] = 0;
      v135->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v137 = std::string::append(&v380, ".bin", 4uLL);
      long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
      *(void *)&__p.st_uid = *((void *)&v137->__r_.__value_.__l + 2);
      *(_OWORD *)&__p.st_dev = v138;
      v137->__r_.__value_.__l.__size_ = 0;
      v137->__r_.__value_.__r.__words[2] = 0;
      v137->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v380.__r_.__value_.__l.__data_);
        if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_193:
          operator delete(v378.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_190;
          }
          goto LABEL_194;
        }
      }
      else if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_193;
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_190;
      }
LABEL_194:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_190:
      uint64_t v139 = (uint64_t)operator new(0x30uLL);
      *(void *)uint64_t v139 = &unk_26CECA448;
      *(_OWORD *)(v139 + 8) = 0u;
      *(_OWORD *)(v139 + 24) = 0u;
      int v140 = BBUFileDataSource::init(v139, (const char *)&__p, 0);
      uint64_t v141 = *(void *)v139;
      if (v140)
      {
        (*(void (**)(uint64_t))(v141 + 8))(v139);
        uint64_t v139 = 0;
        int v142 = 1;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(v141 + 24))(v139) < 0x29)
        {
          int v142 = 0;
        }
        else
        {
          unint64_t v143 = (BBUEUREFSImage *)operator new(0x58uLL);
          BBUEUREFSImage::BBUEUREFSImage(v143, (BBUDataSource *)v139, i + 1, 0);
          uint64_t v144 = (*(uint64_t (**)(uint64_t))(*(void *)v139 + 24))(v139);
          int v145 = (*(uint64_t (**)(BBUEUREFSImage *, uint64_t))(*(void *)v143 + 72))(v143, v144);
          (*(void (**)(BBUEUREFSImage *))(*(void *)v143 + 8))(v143);
          if (v145)
          {
            uint64_t v139 = (uint64_t)operator new(0x30uLL);
            *(void *)uint64_t v139 = &unk_26CECA448;
            *(_OWORD *)(v139 + 8) = 0u;
            *(_OWORD *)(v139 + 24) = 0u;
            if (BBUFileDataSource::init(v139, (const char *)&__p, 0))
            {
              (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
              uint64_t v139 = 0;
            }
            int v142 = 1;
          }
          else
          {
            int v142 = 0;
            uint64_t v139 = 0;
          }
        }
        BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "EFS file verify status: %d", v142);
      }
      if (i | v139 && v142)
      {
        if (!v139) {
          goto LABEL_224;
        }
      }
      else
      {
        memset(&v380, 170, sizeof(v380));
        if (v139)
        {
          unsigned int v146 = (*(uint64_t (**)(uint64_t))(*(void *)v139 + 24))(v139);
          std::to_string(&v380, v146);
          char v147 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
        }
        else
        {
          char v147 = 4;
          *((unsigned char *)&v380.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v380, "NULL");
        }
        char v148 = (const char *)&__p;
        if ((__p.st_gid & 0x80000000) != 0) {
          char v148 = *(const char **)&__p.st_dev;
        }
        BOOL v149 = v147 < 0;
        char v150 = &v380;
        if (v149) {
          char v150 = (std::string *)v380.__r_.__value_.__r.__words[0];
        }
        BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed to load %s (size %s), creating empty file (size %u)", v148, (const char *)v150, *((_DWORD *)this + 51));
        if (v139) {
          (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
        }
        if (BBUScratchFile::createWithFile((uint64_t)&__p, *((unsigned int *)this + 51)))
        {
          uint64_t v353 = __cxa_allocate_exception(0x210uLL);
          v351 = v353;
          v357 = &__p;
          if ((__p.st_gid & 0x80000000) != 0) {
            LOBYTE(v357) = __p.st_dev;
          }
          _BBUException::_BBUException((uint64_t)v353, 104, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x137u, (ctu::LogMessageBuffer *)"Failed to create scratch %s (%d)", v354, v355, v356, (char)v357);
LABEL_560:
        }
        uint64_t v139 = (uint64_t)operator new(0x30uLL);
        *(void *)uint64_t v139 = &unk_26CECA448;
        *(_OWORD *)(v139 + 8) = 0u;
        *(_OWORD *)(v139 + 24) = 0u;
        if (BBUFileDataSource::init(v139, (const char *)&__p, 0))
        {
          (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
          int64_t v347 = __cxa_allocate_exception(0x210uLL);
          v351 = v347;
          uint64_t v352 = &__p;
          if ((__p.st_gid & 0x80000000) != 0) {
            LOBYTE(v352) = __p.st_dev;
          }
          _BBUException::_BBUException((uint64_t)v347, 104, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x13Au, (ctu::LogMessageBuffer *)"Failed to create data source from fresh scratch file %s (%d)", v348, v349, v350, (char)v352);
          goto LABEL_560;
        }
        if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v380.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v151 = (BBUEUREFSImage *)operator new(0x58uLL);
      BBUEUREFSImage::BBUEUREFSImage(v151, (BBUDataSource *)v139, i + 1, 0);
      *(void *)(*((void *)this + 36) + 8 * i) = v151;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0) {
          goto LABEL_222;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
        {
LABEL_222:
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            uint64_t v152 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
            _BBULog(3, 0, v152, "", "Loaded EFS%u\n", v153, v154, v155, i + 1);
          }
        }
      }
LABEL_224:
      if (SHIBYTE(__p.st_gid) < 0) {
        operator delete(*(void **)&__p.st_dev);
      }
    }
  }
  memset(&v380, 170, sizeof(v380));
  int v156 = SHIBYTE(v381.__r_.__value_.__r.__words[2]);
  if ((v381.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v157 = HIBYTE(v381.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v157 = v381.__r_.__value_.__l.__size_;
  }
  unint64_t v158 = v157 + 1;
  memset(&__p, 170, 24);
  if (v157 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v158 >= 0x17)
  {
    uint64_t v160 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v158 | 7) != 0x17) {
      uint64_t v160 = v158 | 7;
    }
    uint64_t v161 = v160 + 1;
    uint64_t v159 = (stat *)operator new(v160 + 1);
    __p.__darwin_ino64_t st_ino = v157 + 1;
    *(void *)&__p.st_uid = v161 | 0x8000000000000000;
    *(void *)&__p.st_dev = v159;
  }
  else
  {
    memset(&__p, 0, 24);
    uint64_t v159 = &__p;
    HIBYTE(__p.st_gid) = v157 + 1;
    if (!v157) {
      goto LABEL_243;
    }
  }
  if (v156 >= 0) {
    __int16 v162 = &v381;
  }
  else {
    __int16 v162 = (std::string *)v381.__r_.__value_.__r.__words[0];
  }
  memmove(v159, v162, v157);
LABEL_243:
  *(_WORD *)((char *)&v159->st_dev + v157) = 47;
  uint64_t v163 = std::string::append((std::string *)&__p, "act.der", 7uLL);
  long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
  v380.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v380.__r_.__value_.__l.__data_ = v164;
  v163->__r_.__value_.__l.__size_ = 0;
  v163->__r_.__value_.__r.__words[2] = 0;
  v163->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  v165.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v165.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__p.st_blkstd::string::size_type size = v165;
  *(timespec *)__p.st_qspare = v165;
  __p.st_birthtimespec = v165;
  *(timespec *)&__p.st_std::string::size_type size = v165;
  __p.st_mtimespec = v165;
  __p.st_ctimespec = v165;
  *(timespec *)&__p.st_uid = v165;
  __p.st_atimespec = v165;
  *(timespec *)&__p.st_dev = v165;
  if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v166 = &v380;
  }
  else {
    unint64_t v166 = (std::string *)v380.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)v166, &__p))
  {
    __dst.__r_.__value_.__r.__words[0] = 0;
    HIBYTE(__p.st_gid) = 3;
    __p.st_dev = 5522241;
    CFTypeRef cf = 0;
    int v167 = (*(uint64_t (**)(BBUEUR10UpdateSource *, char *, stat *, CFTypeRef *))(*(void *)this + 240))(this, (char *)this + 312, &__p, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(__p.st_gid) < 0)
    {
      operator delete(*(void **)&__p.st_dev);
      if (!v167) {
        goto LABEL_267;
      }
    }
    else if (!v167)
    {
      goto LABEL_267;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_267;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_267;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      unint64_t v170 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(1, 1, v170, "", "failed creating MI image from from data for %s\n", v171, v172, v173, (char)"act.der");
    }
  }
  else
  {
    HIBYTE(__p.st_gid) = 3;
    __p.st_dev = 5522241;
    int v168 = (*(uint64_t (**)(BBUEUR10UpdateSource *, char *, std::string *, stat *))(*(void *)this + 224))(this, (char *)this + 312, &v380, &__p);
    int v169 = v168;
    if (SHIBYTE(__p.st_gid) < 0)
    {
      operator delete(*(void **)&__p.st_dev);
      if (!v169) {
        goto LABEL_267;
      }
    }
    else if (!v168)
    {
      goto LABEL_267;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_267;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        goto LABEL_267;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      unint64_t v174 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(1, 1, v174, "", "failed creating MI image from from file for %s\n", v175, v176, v177, (char)"act.der");
    }
  }
LABEL_267:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "acdb.mbn");
  int v178 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v179 = v178;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v179) {
      goto LABEL_269;
    }
LABEL_276:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_280;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_280;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      uint64_t v186 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v186, "", "File not present: %s\n", v187, v188, v189, (char)"acdb.mbn");
    }
    goto LABEL_280;
  }
  if (!v178) {
    goto LABEL_276;
  }
LABEL_269:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "acdb.mbn");
  char v180 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  size_t v181 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v181, v180, 0);
  *(void *)size_t v181 = &unk_26CECDBE8;
  *((void *)this + 40) = v181;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_280;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_280;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v182 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v182, "", "Loaded ACDB\n", v183, v184, v185, (char)v375);
  }
LABEL_280:
  HIBYTE(__p.st_gid) = 9;
  strcpy((char *)&__p, "bbcfg.mbn");
  int v190 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v191 = v190;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v191) {
      goto LABEL_282;
    }
LABEL_289:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_293;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_293;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      std::string v198 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v198, "", "File not present: %s\n", v199, v200, v201, (char)"bbcfg.mbn");
    }
    goto LABEL_293;
  }
  if (!v190) {
    goto LABEL_289;
  }
LABEL_282:
  HIBYTE(__p.st_gid) = 9;
  strcpy((char *)&__p, "bbcfg.mbn");
  unint64_t v192 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  unint64_t v193 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v193, v192, 0);
  *(void *)unint64_t v193 = &unk_26CECDC60;
  *((void *)this + 41) = v193;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_293;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_293;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    CFTypeRef v194 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v194, "", "Loaded BBCFG\n", v195, v196, v197, (char)v375);
  }
LABEL_293:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apdp.mbn");
  int v202 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v203 = v202;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v203) {
      goto LABEL_295;
    }
LABEL_302:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_306;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_306;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      CFTypeRef v211 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v211, "", "File not present: %s\n", v212, v213, v214, (char)"apdp.mbn");
    }
    goto LABEL_306;
  }
  if (!v202) {
    goto LABEL_302;
  }
LABEL_295:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apdp.mbn");
  unint64_t v204 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  int v205 = operator new(0x20uLL);
  *int v205 = &unk_26CECA7E0;
  v205[1] = v204;
  v205[2] = 0;
  *((_DWORD *)v205 + 6) = 0;
  unint64_t v206 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v206, v204, 0);
  v205[2] = v206;
  *int v205 = &unk_26CECDCD8;
  *((void *)this + 42) = v205;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_306;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_306;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    CFTypeRef v207 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v207, "", "Loaded APDP\n", v208, v209, v210, (char)v375);
  }
LABEL_306:
  HIBYTE(__p.st_gid) = 10;
  strcpy((char *)&__p, "devcfg.mbn");
  int v215 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v216 = v215;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v216) {
      goto LABEL_308;
    }
LABEL_315:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_319;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_319;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      long long v224 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v224, "", "File not present: %s\n", v225, v226, v227, (char)"devcfg.mbn");
    }
    goto LABEL_319;
  }
  if (!v215) {
    goto LABEL_315;
  }
LABEL_308:
  HIBYTE(__p.st_gid) = 10;
  strcpy((char *)&__p, "devcfg.mbn");
  uint64_t v217 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  long long v218 = operator new(0x20uLL);
  *long long v218 = &unk_26CECA7E0;
  v218[1] = v217;
  v218[2] = 0;
  *((_DWORD *)v218 + 6) = 0;
  uint64_t v219 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v219, v217, 0);
  v218[2] = v219;
  *long long v218 = &unk_26CECDD40;
  *((void *)this + 43) = v218;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_319;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_319;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v220 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v220, "", "Loaded DEVCFG\n", v221, v222, v223, (char)v375);
  }
LABEL_319:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "hyp.mbn");
  int v228 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v229 = v228;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v229) {
      goto LABEL_321;
    }
LABEL_328:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_332;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_332;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      CFTypeRef v237 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v237, "", "File not present: %s\n", v238, v239, v240, (char)"hyp.mbn");
    }
    goto LABEL_332;
  }
  if (!v228) {
    goto LABEL_328;
  }
LABEL_321:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "hyp.mbn");
  std::string v230 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  unint64_t v231 = operator new(0x20uLL);
  *unint64_t v231 = &unk_26CECA7E0;
  v231[1] = v230;
  v231[2] = 0;
  *((_DWORD *)v231 + 6) = 0;
  long long v232 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v232, v230, 0);
  v231[2] = v232;
  *unint64_t v231 = &unk_26CECDDA8;
  *((void *)this + 44) = v231;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_332;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_332;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    unint64_t v233 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v233, "", "Loaded HYP\n", v234, v235, v236, (char)v375);
  }
LABEL_332:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "aop.mbn");
  int v241 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v242 = v241;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v242) {
      goto LABEL_334;
    }
LABEL_341:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_345;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_345;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      uint64_t v250 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v250, "", "File not present: %s\n", v251, v252, v253, (char)"aop.mbn");
    }
    goto LABEL_345;
  }
  if (!v241) {
    goto LABEL_341;
  }
LABEL_334:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "aop.mbn");
  v243 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  long long v244 = operator new(0x20uLL);
  *long long v244 = &unk_26CECA7E0;
  v244[1] = v243;
  v244[2] = 0;
  *((_DWORD *)v244 + 6) = 0;
  uint64_t v245 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v245, v243, 0);
  v244[2] = v245;
  *long long v244 = &unk_26CECDE10;
  *((void *)this + 45) = v244;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_345;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_345;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    long long v246 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v246, "", "Loaded AOP\n", v247, v248, v249, (char)v375);
  }
LABEL_345:
  memset(&__dst, 170, sizeof(__dst));
  int v254 = SHIBYTE(v381.__r_.__value_.__r.__words[2]);
  if ((v381.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v255 = HIBYTE(v381.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v255 = v381.__r_.__value_.__l.__size_;
  }
  unint64_t v256 = v255 + 1;
  memset(&__p, 170, 24);
  if (v255 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v256 >= 0x17)
  {
    uint64_t v258 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v256 | 7) != 0x17) {
      uint64_t v258 = v256 | 7;
    }
    uint64_t v259 = v258 + 1;
    uint64_t v257 = (stat *)operator new(v258 + 1);
    __p.__darwin_ino64_t st_ino = v255 + 1;
    *(void *)&__p.st_uid = v259 | 0x8000000000000000;
    *(void *)&__p.st_dev = v257;
  }
  else
  {
    memset(&__p, 0, 24);
    uint64_t v257 = &__p;
    HIBYTE(__p.st_gid) = v255 + 1;
    if (!v255) {
      goto LABEL_359;
    }
  }
  if (v254 >= 0) {
    unint64_t v260 = &v381;
  }
  else {
    unint64_t v260 = (std::string *)v381.__r_.__value_.__r.__words[0];
  }
  memmove(v257, v260, v255);
LABEL_359:
  *(_WORD *)((char *)&v257->st_dev + v255) = 47;
  v261 = std::string::append((std::string *)&__p, "mdmddr.mbn", 0xAuLL);
  long long v262 = *(_OWORD *)&v261->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v261->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v262;
  v261->__r_.__value_.__l.__size_ = 0;
  v261->__r_.__value_.__r.__words[2] = 0;
  v261->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  v263.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v263.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__p.st_blkstd::string::size_type size = v263;
  *(timespec *)__p.st_qspare = v263;
  __p.st_birthtimespec = v263;
  *(timespec *)&__p.st_std::string::size_type size = v263;
  __p.st_mtimespec = v263;
  __p.st_ctimespec = v263;
  *(timespec *)&__p.st_uid = v263;
  __p.st_atimespec = v263;
  *(timespec *)&__p.st_dev = v263;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v264 = &__dst;
  }
  else {
    unint64_t v264 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  unint64_t v265 = (capabilities::updater *)stat((const char *)v264, &__p);
  if (v265)
  {
    if (!capabilities::updater::supportsDDRDataSaving(v265)) {
      goto LABEL_379;
    }
    CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    v378.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    memset(&__p.st_ino, 0, 32);
    *(void *)&__p.st_dev = 0x300000022;
    HIDWORD(__p.st_ino) = 344623104;
    CFDataAppendBytes(Mutable, (const UInt8 *)&__p, 40);
    v267 = operator new(0x18uLL);
    v267[4] = 0;
    *(void *)v267 = &unk_26CECE780;
    *((void *)v267 + 1) = Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    uint64_t v268 = (BBUEURMIImage *)operator new(0x40uLL);
    BBUEURMIImage::BBUEURMIImage(v268, (BBUDataSource *)v267, 0);
    *(void *)uint64_t v268 = &unk_26CECDE78;
    *((void *)this + 46) = v268;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0) {
        goto LABEL_370;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
      {
LABEL_370:
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          uint64_t v269 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
          _BBULog(3, 0, v269, "", "created dummy MDMDDR\n", v270, v271, v272, (char)v375);
        }
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    goto LABEL_379;
  }
  uint64_t v273 = (BBUDataSource *)operator new(0x30uLL);
  *(void *)uint64_t v273 = &unk_26CECA448;
  *(_OWORD *)((char *)v273 + 8) = 0u;
  *(_OWORD *)((char *)v273 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v273, (const char *)&__dst, 0))
  {
    (*(void (**)(BBUDataSource *))(*(void *)v273 + 8))(v273);
    v371 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v371, 120, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x1A6u, (ctu::LogMessageBuffer *)"Assertion failure(dataSource && \"Failed creating data source from file for MDMDDR\")", v372, v373, v374, (char)v375);
  }
  long long v274 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v274, v273, 0);
  *(void *)long long v274 = &unk_26CECDE78;
  *((void *)this + 46) = v274;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_379;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_379;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v275 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v275, "", "Loaded MDMDDR\n", v276, v277, v278, (char)v375);
  }
LABEL_379:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "multi_image.mbn");
  int v279 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v280 = v279;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v280) {
      goto LABEL_381;
    }
LABEL_388:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_392;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_392;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      uint64_t v288 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v288, "", "File not present: %s\n", v289, v290, v291, (char)"multi_image.mbn");
    }
    goto LABEL_392;
  }
  if (!v279) {
    goto LABEL_388;
  }
LABEL_381:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "multi_image.mbn");
  unint64_t v281 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  v282 = operator new(0x20uLL);
  void *v282 = &unk_26CECA7E0;
  v282[1] = v281;
  v282[2] = 0;
  *((_DWORD *)v282 + 6) = 0;
  v283 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v283, v281, 0);
  v282[2] = v283;
  void *v282 = &unk_26CECDEF0;
  *((void *)this + 47) = v282;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_392;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_392;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v284 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v284, "", "Loaded OEMMisc\n", v285, v286, v287, (char)v375);
  }
LABEL_392:
  HIBYTE(__p.st_gid) = 19;
  strcpy((char *)&__p, "multi_image_qti.mbn");
  int v292 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v293 = v292;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v293) {
      goto LABEL_394;
    }
LABEL_401:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_405;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_405;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      v301 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v301, "", "File not present: %s\n", v302, v303, v304, (char)"multi_image_qti.mbn");
    }
    goto LABEL_405;
  }
  if (!v292) {
    goto LABEL_401;
  }
LABEL_394:
  HIBYTE(__p.st_gid) = 19;
  strcpy((char *)&__p, "multi_image_qti.mbn");
  unint64_t v294 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  v295 = operator new(0x20uLL);
  void *v295 = &unk_26CECA7E0;
  v295[1] = v294;
  v295[2] = 0;
  *((_DWORD *)v295 + 6) = 0;
  v296 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v296, v294, 0);
  v295[2] = v296;
  void *v295 = &unk_26CECDF58;
  *((void *)this + 48) = v295;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_405;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_405;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    int64_t v297 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v297, "", "Loaded QTIMisc\n", v298, v299, v300, (char)v375);
  }
LABEL_405:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "xbl_cfg.elf");
  int v305 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v306 = v305;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v306) {
      goto LABEL_407;
    }
LABEL_414:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_418;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_418;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      uint64_t v314 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v314, "", "File not present: %s\n", v315, v316, v317, (char)"xbl_cfg.elf");
    }
    goto LABEL_418;
  }
  if (!v305) {
    goto LABEL_414;
  }
LABEL_407:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "xbl_cfg.elf");
  uint64_t v307 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  long long v308 = operator new(0x20uLL);
  *long long v308 = &unk_26CECA7E0;
  v308[1] = v307;
  v308[2] = 0;
  *((_DWORD *)v308 + 6) = 0;
  uint64_t v309 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v309, v307, 0);
  v308[2] = v309;
  *long long v308 = &unk_26CECDFC0;
  *((void *)this + 49) = v308;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_418;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_418;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v310 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v310, "", "Loaded XBL Config\n", v311, v312, v313, (char)v375);
  }
LABEL_418:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "uefi.elf");
  int v318 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v319 = v318;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v319) {
      goto LABEL_420;
    }
LABEL_427:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_431;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_431;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      v327 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v327, "", "File not present: %s\n", v328, v329, v330, (char)"uefi.elf");
    }
    goto LABEL_431;
  }
  if (!v318) {
    goto LABEL_427;
  }
LABEL_420:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "uefi.elf");
  v320 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  v321 = operator new(0x20uLL);
  void *v321 = &unk_26CECA7E0;
  v321[1] = v320;
  v321[2] = 0;
  *((_DWORD *)v321 + 6) = 0;
  unint64_t v322 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v322, v320, 0);
  v321[2] = v322;
  void *v321 = &unk_26CECE028;
  *((void *)this + 50) = v321;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_431;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_431;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    int64_t v323 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v323, "", "Loaded UEFI\n", v324, v325, v326, (char)v375);
  }
LABEL_431:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "xbl_support.elf");
  int v331 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v332 = v331;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v332) {
      goto LABEL_433;
    }
LABEL_440:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_444;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_444;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      v340 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v340, "", "File not present: %s\n", v341, v342, v343, (char)"xbl_support.elf");
    }
    goto LABEL_444;
  }
  if (!v331) {
    goto LABEL_440;
  }
LABEL_433:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "xbl_support.elf");
  uint64_t v333 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  long long v334 = operator new(0x20uLL);
  *long long v334 = &unk_26CECA7E0;
  v334[1] = v333;
  v334[2] = 0;
  *((_DWORD *)v334 + 6) = 0;
  uint64_t v335 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v335, v333, 0);
  v334[2] = v335;
  *long long v334 = &unk_26CECE090;
  *((void *)this + 51) = v334;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_444;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_444;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v336 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v336, "", "Loaded XBL Support\n", v337, v338, v339, (char)v375);
  }
LABEL_444:
  HIBYTE(__p.st_gid) = 13;
  strcpy((char *)&__p, "Options.plist");
  int v344 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  int v345 = v344;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (!v345) {
      goto LABEL_458;
    }
  }
  else if (!v344)
  {
    goto LABEL_458;
  }
  HIBYTE(__p.st_gid) = 13;
  strcpy((char *)&__p, "Options.plist");
  unint64_t v346 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  *(void *)&__p.st_dev = 0xAAAAAAAAAAAAAAAALL;
  BBUDataSource::createData(v346, (CFDataRef *)&__p);
  if (v346) {
    (*(void (**)(BBUDataSource *))(*(void *)v346 + 8))(v346);
  }
  CFTypeRef v376 = *(CFTypeRef *)&__p.st_dev;
  if (*(void *)&__p.st_dev) {
    CFRetain(*(CFTypeRef *)&__p.st_dev);
  }
  BBUUpdateSource::loadOptions((uint64_t)this, (CFDataRef *)&v376);
  if (v376) {
    CFRelease(v376);
  }
  if (*(void *)&__p.st_dev) {
    CFRelease(*(CFTypeRef *)&__p.st_dev);
  }
LABEL_458:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_460:
      if ((SHIBYTE(v381.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_464:
      operator delete(v381.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_460;
  }
  operator delete(v380.__r_.__value_.__l.__data_);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_464;
  }
}

void sub_21DF5AD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  __cxa_free_exception(v51);
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef BBUEUR10UpdateSource::copyBasebandMigrationData(BBUEUR10UpdateSource *this, BBUFeedback *a2)
{
  memset(&v82, 170, sizeof(v82));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v3 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v4 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v4);
    uint64_t v5 = operator new(0x20uLL);
    *uint64_t v5 = &unk_26CECF498;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    uint64_t v6 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v4;
    off_26AA89B58 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = (BBUPartitionManager *)off_26AA89B50;
  }
  uint64_t v7 = (std::__shared_weak_count *)off_26AA89B58;
  *(void *)&long long v73 = v3;
  *((void *)&v73 + 1) = off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v3, &v82);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = (bbufs *)&v82;
    }
    else {
      uint64_t v15 = (bbufs *)v82.__r_.__value_.__r.__words[0];
    }
    if (v15) {
      goto LABEL_14;
    }
LABEL_29:
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v9, v10, v11, v12, v13, v14, 0);
    goto LABEL_30;
  }
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = (bbufs *)&v82;
  }
  else {
    uint64_t v15 = (bbufs *)v82.__r_.__value_.__r.__words[0];
  }
  if (!v15) {
    goto LABEL_29;
  }
LABEL_14:
  if (bbufs::prepareDestination(v15, v8))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    unint64_t v81 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v80[7] = v23;
    v80[8] = v23;
    v80[5] = v23;
    v80[6] = v23;
    v80[3] = v23;
    v80[4] = v23;
    v80[1] = v23;
    v80[2] = v23;
    long long v79 = v23;
    v80[0] = v23;
    *(_OWORD *)uint64_t v77 = v23;
    long long v78 = v23;
    long long v75 = v23;
    long long v76 = v23;
    long long v73 = v23;
    long long v74 = v23;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v73);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v82;
    }
    else {
      uint64_t v24 = (std::string *)v82.__r_.__value_.__r.__words[0];
    }
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v82.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)v24, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"efs", 3);
    char v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)".bin", 4);
    if ((BYTE8(v79) & 0x10) != 0)
    {
      uint64_t v31 = v79;
      if ((unint64_t)v79 < *((void *)&v76 + 1))
      {
        *(void *)&long long v79 = *((void *)&v76 + 1);
        uint64_t v31 = *((void *)&v76 + 1);
      }
      uint64_t v32 = (const void *)v76;
      size_t v28 = v31 - v76;
      if ((unint64_t)(v31 - v76) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_62;
      }
    }
    else
    {
      if ((BYTE8(v79) & 8) == 0)
      {
        size_t v28 = 0;
        HIBYTE(v72) = 0;
        uint64_t v29 = __dst;
        goto LABEL_43;
      }
      uint64_t v32 = (const void *)*((void *)&v74 + 1);
      size_t v28 = *((void *)&v75 + 1) - *((void *)&v74 + 1);
      if (*((void *)&v75 + 1) - *((void *)&v74 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_62:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v28 >= 0x17)
    {
      uint64_t v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v33 = v28 | 7;
      }
      uint64_t v34 = v33 + 1;
      uint64_t v29 = (void **)operator new(v33 + 1);
      __dst[1] = (void *)v28;
      int64_t v72 = v34 | 0x8000000000000000;
      __dst[0] = v29;
    }
    else
    {
      HIBYTE(v72) = v28;
      uint64_t v29 = __dst;
      if (!v28)
      {
LABEL_43:
        *((unsigned char *)v29 + v28) = 0;
        v35.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v35.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&v83.st_blkstd::string::size_type size = v35;
        *(timespec *)v83.st_qspare = v35;
        v83.st_birthtimespec = v35;
        *(timespec *)&v83.st_std::string::size_type size = v35;
        v83.st_mtimespec = v35;
        v83.st_ctimespec = v35;
        *(timespec *)&v83.st_uid = v35;
        v83.st_atimespec = v35;
        *(timespec *)&v83.st_dev = v35;
        if (v72 >= 0) {
          std::string::size_type v36 = (const char *)__dst;
        }
        else {
          std::string::size_type v36 = (const char *)__dst[0];
        }
        int v37 = stat(v36, &v83);
        int v38 = v37;
        if (SHIBYTE(v72) < 0)
        {
          operator delete(__dst[0]);
          if (v38)
          {
LABEL_48:
            if ((BYTE8(v79) & 0x10) != 0)
            {
              uint64_t v43 = v79;
              if ((unint64_t)v79 < *((void *)&v76 + 1))
              {
                *(void *)&long long v79 = *((void *)&v76 + 1);
                uint64_t v43 = *((void *)&v76 + 1);
              }
              uint64_t v44 = (const void *)v76;
              __darwin_ino64_t v39 = v43 - v76;
              if ((unint64_t)(v43 - v76) > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_79;
              }
            }
            else
            {
              if ((BYTE8(v79) & 8) == 0)
              {
                __darwin_ino64_t v39 = 0;
                HIBYTE(v83.st_gid) = 0;
                uint64_t v40 = &v83;
                goto LABEL_67;
              }
              uint64_t v44 = (const void *)*((void *)&v74 + 1);
              __darwin_ino64_t v39 = *((void *)&v75 + 1) - *((void *)&v74 + 1);
              if (*((void *)&v75 + 1) - *((void *)&v74 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_79:
              }
                std::string::__throw_length_error[abi:ne180100]();
            }
            if (v39 >= 0x17)
            {
              uint64_t v45 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v39 | 7) != 0x17) {
                uint64_t v45 = v39 | 7;
              }
              uint64_t v46 = v45 + 1;
              uint64_t v40 = operator new(v45 + 1);
              v83.__darwin_ino64_t st_ino = v39;
              *(void *)&v83.st_uid = v46 | 0x8000000000000000;
              *(void *)&v83.st_dev = v40;
            }
            else
            {
              HIBYTE(v83.st_gid) = v39;
              uint64_t v40 = &v83;
              if (!v39) {
                goto LABEL_67;
              }
            }
            memmove(v40, v44, v39);
LABEL_67:
            *((unsigned char *)v40 + v39) = 0;
            char v47 = &v83;
            if ((v83.st_gid & 0x80000000) != 0) {
              char v47 = *(stat **)&v83.st_dev;
            }
            BBUFeedback::handleComment(this, "Failed to locate %s while copying baseband migration data\n", (const char *)v47);
LABEL_70:
            if (SHIBYTE(v83.st_gid) < 0) {
              operator delete(*(void **)&v83.st_dev);
            }
            goto LABEL_117;
          }
        }
        else if (v37)
        {
          goto LABEL_48;
        }
        if ((BYTE8(v79) & 0x10) != 0)
        {
          uint64_t v48 = v79;
          if ((unint64_t)v79 < *((void *)&v76 + 1))
          {
            *(void *)&long long v79 = *((void *)&v76 + 1);
            uint64_t v48 = *((void *)&v76 + 1);
          }
          uint64_t v49 = (const void *)v76;
          __darwin_ino64_t v41 = v48 - v76;
          if ((unint64_t)(v48 - v76) > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_99;
          }
        }
        else
        {
          if ((BYTE8(v79) & 8) == 0)
          {
            __darwin_ino64_t v41 = 0;
            HIBYTE(v83.st_gid) = 0;
            unint64_t v42 = &v83;
            goto LABEL_84;
          }
          uint64_t v49 = (const void *)*((void *)&v74 + 1);
          __darwin_ino64_t v41 = *((void *)&v75 + 1) - *((void *)&v74 + 1);
          if (*((void *)&v75 + 1) - *((void *)&v74 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_99:
          }
            std::string::__throw_length_error[abi:ne180100]();
        }
        if (v41 >= 0x17)
        {
          uint64_t v50 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17) {
            uint64_t v50 = v41 | 7;
          }
          uint64_t v51 = v50 + 1;
          unint64_t v42 = operator new(v50 + 1);
          v83.__darwin_ino64_t st_ino = v41;
          *(void *)&v83.st_uid = v51 | 0x8000000000000000;
          *(void *)&v83.st_dev = v42;
        }
        else
        {
          HIBYTE(v83.st_gid) = v41;
          unint64_t v42 = &v83;
          if (!v41)
          {
LABEL_84:
            v42[v41] = 0;
            uint64_t v52 = (BBUDataSource *)operator new(0x30uLL);
            *(void *)uint64_t v52 = &unk_26CECA448;
            *(_OWORD *)((char *)v52 + 8) = 0u;
            *(_OWORD *)((char *)v52 + 24) = 0u;
            if (BBUFileDataSource::init((uint64_t)v52, (const char *)&v83, 0))
            {
              (*(void (**)(BBUDataSource *))(*(void *)v52 + 8))(v52);
              uint64_t v52 = 0;
            }
            if (SHIBYTE(v83.st_gid) < 0) {
              operator delete(*(void **)&v83.st_dev);
            }
            if (v52)
            {
              if ((BYTE8(v79) & 0x10) != 0)
              {
                uint64_t v57 = v79;
                if ((unint64_t)v79 < *((void *)&v76 + 1))
                {
                  *(void *)&long long v79 = *((void *)&v76 + 1);
                  uint64_t v57 = *((void *)&v76 + 1);
                }
                uint64_t v58 = (const void **)&v76;
              }
              else
              {
                if ((BYTE8(v79) & 8) == 0)
                {
                  size_t v53 = 0;
                  HIBYTE(v70) = 0;
                  unint64_t v54 = __p;
                  goto LABEL_112;
                }
                uint64_t v58 = (const void **)&v74 + 1;
                uint64_t v57 = *((void *)&v75 + 1);
              }
              uint64_t v61 = *v58;
              size_t v53 = v57 - (void)*v58;
              if (v53 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v53 >= 0x17)
              {
                uint64_t v62 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v53 | 7) != 0x17) {
                  uint64_t v62 = v53 | 7;
                }
                uint64_t v63 = v62 + 1;
                unint64_t v54 = operator new(v62 + 1);
                __p[1] = (void *)v53;
                unint64_t v70 = v63 | 0x8000000000000000;
                __p[0] = v54;
              }
              else
              {
                HIBYTE(v70) = v57 - *(unsigned char *)v58;
                unint64_t v54 = __p;
                if (!v53) {
                  goto LABEL_112;
                }
              }
              memmove(v54, v61, v53);
LABEL_112:
              *((unsigned char *)v54 + v53) = 0;
              BBUDataSource::createData(v52, (CFDataRef *)&v83);
              ctu::cf::insert<std::string,__CFData const*>((uint64_t)Mutable, (uint64_t)__p, *(const void **)&v83.st_dev);
              if (*(void *)&v83.st_dev) {
                CFRelease(*(CFTypeRef *)&v83.st_dev);
              }
              if (SHIBYTE(v70) < 0) {
                operator delete(__p[0]);
              }
              (*(void (**)(BBUDataSource *))(*(void *)v52 + 8))(v52);
LABEL_117:
              *(void *)&long long v73 = *MEMORY[0x263F8C2C8];
              *(void *)((char *)&v73 + *(void *)(v73 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
              *((void *)&v73 + 1) = MEMORY[0x263F8C318] + 16;
              if (SHIBYTE(v78) < 0) {
                operator delete(v77[1]);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x223C1DDF0](v80);
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_31;
              }
              return Mutable;
            }
            if ((BYTE8(v79) & 0x10) != 0)
            {
              uint64_t v59 = v79;
              if ((unint64_t)v79 < *((void *)&v76 + 1))
              {
                *(void *)&long long v79 = *((void *)&v76 + 1);
                uint64_t v59 = *((void *)&v76 + 1);
              }
              uint64_t v60 = (const void **)&v76;
            }
            else
            {
              if ((BYTE8(v79) & 8) == 0)
              {
                __darwin_ino64_t v55 = 0;
                HIBYTE(v83.st_gid) = 0;
                int v56 = &v83;
                goto LABEL_130;
              }
              uint64_t v60 = (const void **)&v74 + 1;
              uint64_t v59 = *((void *)&v75 + 1);
            }
            uint64_t v64 = *v60;
            __darwin_ino64_t v55 = v59 - (void)*v60;
            if (v55 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v55 >= 0x17)
            {
              uint64_t v65 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17) {
                uint64_t v65 = v55 | 7;
              }
              uint64_t v66 = v65 + 1;
              int v56 = operator new(v65 + 1);
              v83.__darwin_ino64_t st_ino = v55;
              *(void *)&v83.st_uid = v66 | 0x8000000000000000;
              *(void *)&v83.st_dev = v56;
            }
            else
            {
              HIBYTE(v83.st_gid) = v59 - *(unsigned char *)v60;
              int v56 = &v83;
              if (!v55) {
                goto LABEL_130;
              }
            }
            memmove(v56, v64, v55);
LABEL_130:
            *((unsigned char *)v56 + v55) = 0;
            int v67 = &v83;
            if ((v83.st_gid & 0x80000000) != 0) {
              int v67 = *(stat **)&v83.st_dev;
            }
            BBUFeedback::handleComment(this, "Failed generating data source for %s while copying baseband migration data\n", (const char *)v67);
            goto LABEL_70;
          }
        }
        memmove(v42, v49, v41);
        goto LABEL_84;
      }
    }
    memmove(v29, v32, v28);
    goto LABEL_43;
  }
  _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v16, v17, v18, v19, v20, v21, v68);
LABEL_30:
  BBUFeedback::handleComment(this, "Failed preparing baseband filesystem directory for copying baseband migration data\n");
  CFMutableDictionaryRef Mutable = 0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
LABEL_31:
  }
    operator delete(v82.__r_.__value_.__l.__data_);
  return Mutable;
}

void sub_21DF5BBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (*(char *)(v23 - 201) < 0) {
    operator delete(*(void **)(v23 - 224));
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  if (*(char *)(v23 - 225) < 0) {
    operator delete(*(void **)(v23 - 248));
  }
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10UpdateSource::restoreBasebandMigrationData(BBUEUR10UpdateSource *this, BBUFeedback *a2, const __CFDictionary *a3)
{
  memset(&__p, 170, sizeof(__p));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v5 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v6 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v6);
    uint64_t v7 = operator new(0x20uLL);
    *uint64_t v7 = &unk_26CECF498;
    v7[1] = 0;
    void v7[2] = 0;
    v7[3] = v6;
    uint64_t v8 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v6;
    off_26AA89B58 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v5 = (BBUPartitionManager *)off_26AA89B50;
  }
  uint64_t v9 = (std::__shared_weak_count *)off_26AA89B58;
  *(void *)uint64_t v48 = v5;
  *(void *)&v48[8] = off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v5, &__p);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = (bbufs *)&__p;
    }
    else {
      p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
    }
    if (p_p) {
      goto LABEL_14;
    }
LABEL_21:
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v11, v12, v13, v14, v15, v16, 0);
    goto LABEL_22;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = (bbufs *)&__p;
  }
  else {
    p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
  }
  if (!p_p) {
    goto LABEL_21;
  }
LABEL_14:
  if (bbufs::prepareDestination(p_p, v10))
  {
    uint64_t v24 = 1;
    goto LABEL_23;
  }
  _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v18, v19, v20, v21, v22, v23, v45);
LABEL_22:
  BBUFeedback::handleComment(this, "Failed preparing baseband filesystem directory for copying baseband migration data");
  uint64_t v24 = 0;
LABEL_23:
  *((void *)&v49 + 1) = 0;
  uint64_t v50 = 0;
  *(void *)&long long v49 = (char *)&v49 + 8;
  *(_OWORD *)&v48[8] = 0uLL;
  *(void *)uint64_t v48 = &v48[8];
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
  context.__r_.__value_.__l.__size_ = (std::string::size_type)&v48[8];
  if (!a2)
  {
    std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)v48, 0);
    uint64_t v30 = (_OWORD *)v49;
    if ((long long *)v49 == (long long *)((char *)&v49 + 8)) {
      goto LABEL_85;
    }
    goto LABEL_31;
  }
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,__CFData const*,std::insert_iterator<std::map<std::string,__CFData const*>>>, &context);
  long long v25 = v49;
  long long v49 = *(_OWORD *)v48;
  *(_OWORD *)uint64_t v48 = v25;
  uint64_t v26 = v50;
  uint64_t v50 = *(void *)&v48[16];
  *(void *)&v48[16] = v26;
  char v27 = &v49;
  if (v50) {
    char v27 = (long long *)(*((void *)&v49 + 1) + 16);
  }
  *(void *)char v27 = (char *)&v49 + 8;
  BOOL v28 = v26 == 0;
  uint64_t v29 = v48;
  if (!v28) {
    uint64_t v29 = (void *)(*((void *)&v25 + 1) + 16);
  }
  *uint64_t v29 = &v48[8];
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)v48, *((char **)&v25 + 1));
  uint64_t v30 = (_OWORD *)v49;
  if ((long long *)v49 != (long long *)((char *)&v49 + 8))
  {
LABEL_31:
    CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)uint64_t v48 = v32;
      *(_OWORD *)&v48[16] = v32;
      if (*((char *)v30 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v48, *((const std::string::value_type **)v30 + 4), *((void *)v30 + 5));
      }
      else
      {
        *(_OWORD *)uint64_t v48 = v30[2];
        *(void *)&v48[16] = *((void *)v30 + 6);
      }
      *(void *)&v48[24] = *((void *)v30 + 7);
      if ((v48[23] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
      }
      else {
        std::string v46 = *(std::string *)v48;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v53, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      }
      else {
        std::string v53 = v46;
      }
      uint64_t v52 = 0;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&context, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      }
      else {
        std::string context = v53;
      }
      CFStringRef v55 = 0;
      if (ctu::cf::convert_copy()) {
        CFStringRef v33 = v55;
      }
      else {
        CFStringRef v33 = 0;
      }
      if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(context.__r_.__value_.__l.__data_);
        CFStringRef v47 = v33;
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_64:
          operator delete(v53.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_65;
        }
      }
      else
      {
        CFStringRef v47 = v33;
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_64;
        }
      }
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_51;
      }
LABEL_65:
      operator delete(v46.__r_.__value_.__l.__data_);
LABEL_51:
      CFURLRef v34 = CFURLCreateWithFileSystemPath(v31, v33, kCFURLPOSIXPathStyle, 0);
      if (!v34)
      {
        timespec v35 = v48;
        if (v48[23] < 0) {
          timespec v35 = *(const char **)v48;
        }
        BBUFeedback::handleComment(this, "Failed creating CFURLRef for %s while restoring baseband migration data", v35);
      }
      if (v33) {
        CFRelease(v33);
      }
      if (!v34)
      {
        uint64_t v24 = 0;
        goto LABEL_76;
      }
      context.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v53.__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v36 = CFWriteStreamCreateWithFile(0, v34);
      int v37 = v36;
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      if (v36) {
        int v38 = ctu::SharedRef<__CFWriteStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFWriteStream>::get;
      }
      else {
        int v38 = 0;
      }
      if (v38)
      {
        if (CFWriteStreamOpen(v36))
        {
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)&v48[24]);
          CFIndex Length = CFDataGetLength(*(CFDataRef *)&v48[24]);
          CFIndex v41 = CFWriteStreamWrite(v37, BytePtr, Length);
          if (v41 <= 0) {
            BBUFeedback::handleComment(this, "Failed writing to stream for restoring baseband migration data");
          }
          CFWriteStreamClose(v37);
          uint64_t v24 = v24 & (v41 > 0);
          if (!v37) {
            goto LABEL_75;
          }
LABEL_74:
          CFRelease(v37);
          goto LABEL_75;
        }
        BBUFeedback::handleComment(this, "Failed opening stream for restoring baseband migration data");
      }
      else
      {
        BBUFeedback::handleComment(this, "Failed creating CFWriteStremRef for restoring baseband migration data");
      }
      uint64_t v24 = 0;
      if (v37) {
        goto LABEL_74;
      }
LABEL_75:
      CFRelease(v34);
LABEL_76:
      if ((v48[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v48);
        unint64_t v42 = (void *)*((void *)v30 + 1);
        if (v42)
        {
          do
          {
LABEL_80:
            uint64_t v43 = v42;
            unint64_t v42 = (void *)*v42;
          }
          while (v42);
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v42 = (void *)*((void *)v30 + 1);
        if (v42) {
          goto LABEL_80;
        }
      }
      do
      {
        uint64_t v43 = (_OWORD *)*((void *)v30 + 2);
        BOOL v28 = *(void *)v43 == (void)v30;
        uint64_t v30 = v43;
      }
      while (!v28);
LABEL_32:
      uint64_t v30 = v43;
    }
    while (v43 != (long long *)((char *)&v49 + 8));
  }
LABEL_85:
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&v49, *((char **)&v49 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v24;
}

void sub_21DF5C284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v41, v41[1]);
  operator delete(v41);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_21DF5C400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    JUMPOUT(0x21DF5C3DCLL);
  }
  JUMPOUT(0x21DF5C3D4);
}

uint64_t BBUEUR10UpdateSource::eraseBasebandFilesystem(BBUEUR10UpdateSource *this)
{
  memset(&v88, 170, sizeof(v88));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v2 = off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v3 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v3);
    uint64_t v4 = operator new(0x20uLL);
    *uint64_t v4 = &unk_26CECF498;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    uint64_t v5 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v3;
    off_26AA89B58 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_26AA89B50;
  }
  uint64_t v6 = (std::__shared_weak_count *)off_26AA89B58;
  v79[0] = v2;
  v79[1] = off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath((BBUPartitionManager *)v2, &v88);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v87 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v86[7] = v7;
  v86[8] = v7;
  v86[5] = v7;
  v86[6] = v7;
  v86[3] = v7;
  v86[4] = v7;
  v86[1] = v7;
  v86[2] = v7;
  v86[0] = v7;
  long long v84 = v7;
  long long v85 = v7;
  long long v82 = v7;
  *(_OWORD *)std::string __p = v7;
  long long v80 = v7;
  long long v81 = v7;
  *(_OWORD *)long long v79 = v7;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v88;
  }
  else {
    uint64_t v8 = (std::string *)v88.__r_.__value_.__r.__words[0];
  }
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v88.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v8, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"efs", 3);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".bin", 4);
  uint64_t v12 = (const void **)&v82;
  uint64_t v13 = (BBUFeedback *)*((void *)this + 1);
  if ((BYTE8(v85) & 0x10) != 0)
  {
    uint64_t v16 = v85;
    uint64_t v17 = (const void **)&v82;
    if ((unint64_t)v85 < *((void *)&v82 + 1))
    {
      *(void *)&long long v85 = *((void *)&v82 + 1);
      uint64_t v16 = *((void *)&v82 + 1);
      uint64_t v17 = (const void **)&v82;
    }
  }
  else
  {
    if ((BYTE8(v85) & 8) == 0)
    {
      size_t v14 = 0;
      HIBYTE(v78) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_31;
    }
    uint64_t v16 = *((void *)&v81 + 1);
    uint64_t v17 = (const void **)&v80 + 1;
  }
  uint64_t v18 = *v17;
  size_t v14 = v16 - (void)*v17;
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v14 >= 0x17)
  {
    uint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v19 = v14 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    uint64_t v77 = (void *)v14;
    int64_t v78 = v20 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v78) = v16 - *(unsigned char *)v17;
  p_dst = (void **)&__dst;
  if (v14) {
LABEL_30:
  }
    memmove(p_dst, v18, v14);
LABEL_31:
  *((unsigned char *)p_dst + v14) = 0;
  uint64_t v21 = (const char *)&__dst;
  if (v78 < 0) {
    uint64_t v21 = (const char *)__dst;
  }
  BBUFeedback::handleComment(v13, "generating empty file for %s with size %u", v21, *((_DWORD *)this + 51));
  if (SHIBYTE(v78) < 0)
  {
    operator delete(__dst);
    char v22 = BYTE8(v85);
    if ((BYTE8(v85) & 0x10) == 0) {
      goto LABEL_35;
    }
LABEL_38:
    uint64_t v25 = v85;
    uint64_t v26 = (const void **)&v82;
    if ((unint64_t)v85 < *((void *)&v82 + 1))
    {
      *(void *)&long long v85 = *((void *)&v82 + 1);
      uint64_t v25 = *((void *)&v82 + 1);
      uint64_t v26 = (const void **)&v82;
    }
    goto LABEL_41;
  }
  char v22 = BYTE8(v85);
  if ((BYTE8(v85) & 0x10) != 0) {
    goto LABEL_38;
  }
LABEL_35:
  if ((v22 & 8) == 0)
  {
    size_t v23 = 0;
    HIBYTE(v78) = 0;
    uint64_t v24 = (void **)&__dst;
    goto LABEL_49;
  }
  uint64_t v25 = *((void *)&v81 + 1);
  uint64_t v26 = (const void **)&v80 + 1;
LABEL_41:
  char v27 = *v26;
  size_t v23 = v25 - (void)*v26;
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    uint64_t v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v28 = v23 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v24 = (void **)operator new(v28 + 1);
    uint64_t v77 = (void *)v23;
    int64_t v78 = v29 | 0x8000000000000000;
    std::string __dst = v24;
    goto LABEL_48;
  }
  HIBYTE(v78) = v25 - *(unsigned char *)v26;
  uint64_t v24 = (void **)&__dst;
  if (v23) {
LABEL_48:
  }
    memmove(v24, v27, v23);
LABEL_49:
  *((unsigned char *)v24 + v23) = 0;
  uint64_t v30 = BBUScratchFile::createWithFile((uint64_t)&__dst, *((unsigned int *)this + 51));
  uint64_t v31 = v30;
  if (SHIBYTE(v78) < 0)
  {
    operator delete(__dst);
    if (v31) {
      goto LABEL_51;
    }
  }
  else if (v30)
  {
LABEL_51:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_80;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_80;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      long long v32 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 0, v32, "", "Failed generating empty EFS file %u\n", v33, v34, v35, 1);
    }
    goto LABEL_80;
  }
  if ((BYTE8(v85) & 0x10) != 0)
  {
    uint64_t v38 = v85;
    if ((unint64_t)v85 < *((void *)&v82 + 1))
    {
      *(void *)&long long v85 = *((void *)&v82 + 1);
      uint64_t v38 = *((void *)&v82 + 1);
    }
  }
  else
  {
    if ((BYTE8(v85) & 8) == 0)
    {
      size_t v36 = 0;
      HIBYTE(v78) = 0;
      int v37 = (void **)&__dst;
      goto LABEL_70;
    }
    uint64_t v38 = *((void *)&v81 + 1);
    uint64_t v12 = (const void **)&v80 + 1;
  }
  __darwin_ino64_t v39 = *v12;
  size_t v36 = v38 - (void)*v12;
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v36 >= 0x17)
  {
    uint64_t v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v40 = v36 | 7;
    }
    uint64_t v41 = v40 + 1;
    int v37 = (void **)operator new(v40 + 1);
    uint64_t v77 = (void *)v36;
    int64_t v78 = v41 | 0x8000000000000000;
    std::string __dst = v37;
  }
  else
  {
    HIBYTE(v78) = v38 - *(unsigned char *)v12;
    int v37 = (void **)&__dst;
    if (!v36) {
      goto LABEL_70;
    }
  }
  memmove(v37, v39, v36);
LABEL_70:
  *((unsigned char *)v37 + v36) = 0;
  unint64_t v42 = (BBUDataSource *)operator new(0x30uLL);
  *(void *)unint64_t v42 = &unk_26CECA448;
  *(_OWORD *)((char *)v42 + 8) = 0u;
  *(_OWORD *)((char *)v42 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v42, (const char *)&__dst, 0))
  {
    (*(void (**)(BBUDataSource *))(*(void *)v42 + 8))(v42);
    unint64_t v42 = 0;
  }
  if (SHIBYTE(v78) < 0) {
    operator delete(__dst);
  }
  uint64_t v43 = **((void **)this + 36);
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = (BBUEUREFSImage *)operator new(0x58uLL);
  BBUEUREFSImage::BBUEUREFSImage(v44, v42, 1u, 0);
  **((void **)this + 36) = v44;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_80;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_80;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    char v45 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v45, "", "Loaded EFS%u\n", v46, v47, v48, 1);
  }
LABEL_80:
  long long v49 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  v79[0] = *(void **)MEMORY[0x263F8C2C8];
  *(void **)((char *)v79 + *((void *)v79[0] - 3)) = v49;
  v79[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (SHIBYTE(v84) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C1DDF0](v86);
  if (v31) {
    goto LABEL_111;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v50 = (void **)off_26AA89B50;
  if (!off_26AA89B50)
  {
    uint64_t v51 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v51);
    uint64_t v52 = operator new(0x20uLL);
    *uint64_t v52 = &unk_26CECF498;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v51;
    std::string v53 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v51;
    off_26AA89B58 = v52;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    uint64_t v50 = (void **)off_26AA89B50;
  }
  unint64_t v54 = (std::__shared_weak_count *)off_26AA89B58;
  std::string __dst = v50;
  uint64_t v77 = off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath((BBUPartitionManager *)v50, (std::string *)v79);
  if ((SBYTE7(v80) & 0x80u) == 0) {
    uint64_t v62 = v79;
  }
  else {
    uint64_t v62 = (void **)v79[0];
  }
  if (!v62)
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v56, v57, v58, v59, v60, v61, 0);
    goto LABEL_99;
  }
  if ((bbufs::prepareDestination((bbufs *)v62, v55) & 1) == 0)
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v63, v64, v65, v66, v67, v68, v75);
LABEL_99:
    char v69 = 0;
    if (SBYTE7(v80) < 0) {
      goto LABEL_102;
    }
    goto LABEL_100;
  }
  char v69 = 1;
  if (SBYTE7(v80) < 0)
  {
LABEL_102:
    operator delete(v79[0]);
    if (!v54) {
      goto LABEL_104;
    }
    goto LABEL_103;
  }
LABEL_100:
  if (!v54)
  {
LABEL_104:
    if (v69)
    {
LABEL_105:
      uint64_t v31 = 0;
      goto LABEL_111;
    }
    goto LABEL_107;
  }
LABEL_103:
  if (atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_104;
  }
  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
  std::__shared_weak_count::__release_weak(v54);
  if (v69) {
    goto LABEL_105;
  }
LABEL_107:
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v31 = 11;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_111;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v31 = 11;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      goto LABEL_111;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    unint64_t v70 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v70, "", "failed preparing filesystem after erase\n", v71, v72, v73, v75);
  }
LABEL_111:
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  return v31;
}

void sub_21DF5CE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v23, v23[1]);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  if (*(char *)(v24 - 97) < 0) {
    operator delete(*(void **)(v24 - 120));
  }
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10UpdateSource::getImageIDFromImageName(const void **a1)
{
  int v1 = *((char *)a1 + 23);
  if (v1 >= 0) {
    unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v2 = (unint64_t)a1[1];
  }
  if (v1 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (v2 >= 3) {
    size_t v4 = 3;
  }
  else {
    size_t v4 = v2;
  }
  if (!memcmp(v3, "CAL", v4) && v2 == 3) {
    return 1128352768;
  }
  if (v2 >= 4) {
    size_t v6 = 4;
  }
  else {
    size_t v6 = v2;
  }
  if (!memcmp(v3, "PROV", v6) && v2 == 4) {
    return 1347571542;
  }
  if (!memcmp(v3, "PAC", v4) && v2 == 3) {
    return 1346454272;
  }
  if (memcmp(v3, "ACT", v4) || v2 != 3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x2D7u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBUEUR Remote Data fileName.\")", v11, v12, v13, v14);
  }
  return 1094931456;
}

void sub_21DF5D0D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

capabilities::updater *BBUEUR10UpdateSource::getItems(BBUEUR10UpdateSource *this)
{
  unint64_t v2 = (capabilities::updater *)operator new(0x18uLL);
  *(void *)unint64_t v2 = v2;
  *((void *)v2 + 1) = v2;
  *((void *)v2 + 2) = 0;
  if (capabilities::updater::supportsBbcfgImage(v2))
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 41);
    BBCFGCFNumberType Type = BBUEURUpdateSource::getBBCFGType(this);
    if (v3)
    {
      uint64_t v5 = BBUProgrammer::Item::createFromImage(BBCFGType, v3);
      size_t v6 = operator new(0x18uLL);
      v6[1] = v2;
      v6[2] = v5;
      uint64_t v7 = *(void *)v2;
      *size_t v6 = *(void *)v2;
      *(void *)(v7 + 8) = v6;
      *(void *)unint64_t v2 = v6;
      ++*((void *)v2 + 2);
    }
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 28);
  SBLCFNumberType Type = BBUEURUpdateSource::getSBLType(this);
  if (v8)
  {
    uint64_t v10 = BBUProgrammer::Item::createFromImage(SBLType, v8);
    uint64_t v11 = operator new(0x18uLL);
    v11[1] = v2;
    v11[2] = v10;
    uint64_t v12 = *(void *)v2;
    void *v11 = *(void *)v2;
    *(void *)(v12 + 8) = v11;
    *(void *)unint64_t v2 = v11;
    ++*((void *)v2 + 2);
  }
  uint64_t v13 = (uint64_t *)*((void *)this + 29);
  RPMCFNumberType Type = BBUEURUpdateSource::getRPMType(this);
  if (v13)
  {
    uint64_t v15 = BBUProgrammer::Item::createFromImage(RPMType, v13);
    uint64_t v16 = operator new(0x18uLL);
    v16[1] = v2;
    void v16[2] = v15;
    uint64_t v17 = *(void *)v2;
    *uint64_t v16 = *(void *)v2;
    *(void *)(v17 + 8) = v16;
    *(void *)unint64_t v2 = v16;
    ++*((void *)v2 + 2);
  }
  uint64_t v18 = (uint64_t *)*((void *)this + 30);
  APPSCFNumberType Type = BBUEURUpdateSource::getAPPSType(this);
  if (v18)
  {
    uint64_t v20 = BBUProgrammer::Item::createFromImage(APPSType, v18);
    uint64_t v21 = operator new(0x18uLL);
    v21[1] = v2;
    void v21[2] = v20;
    uint64_t v22 = *(void *)v2;
    void *v21 = *(void *)v2;
    *(void *)(v22 + 8) = v21;
    *(void *)unint64_t v2 = v21;
    ++*((void *)v2 + 2);
  }
  size_t v23 = (uint64_t *)*((void *)this + 31);
  DSP3CFNumberType Type = BBUEURUpdateSource::getDSP3Type(this);
  if (v23)
  {
    uint64_t v25 = BBUProgrammer::Item::createFromImage(DSP3Type, v23);
    uint64_t v26 = operator new(0x18uLL);
    v26[1] = v2;
    void v26[2] = v25;
    uint64_t v27 = *(void *)v2;
    void *v26 = *(void *)v2;
    *(void *)(v27 + 8) = v26;
    *(void *)unint64_t v2 = v26;
    ++*((void *)v2 + 2);
  }
  uint64_t v28 = (uint64_t *)*((void *)this + 32);
  MBACFNumberType Type = BBUEURUpdateSource::getMBAType(this);
  if (v28)
  {
    uint64_t v30 = BBUProgrammer::Item::createFromImage(MBAType, v28);
    uint64_t v31 = operator new(0x18uLL);
    v31[1] = v2;
    _DWORD v31[2] = v30;
    uint64_t v32 = *(void *)v2;
    *uint64_t v31 = *(void *)v2;
    *(void *)(v32 + 8) = v31;
    *(void *)unint64_t v2 = v31;
    ++*((void *)v2 + 2);
  }
  uint64_t v33 = (uint64_t *)*((void *)this + 33);
  QDSP6SWCFNumberType Type = BBUEURUpdateSource::getQDSP6SWType(this);
  if (v33)
  {
    uint64_t v35 = BBUProgrammer::Item::createFromImage(QDSP6SWType, v33);
    size_t v36 = operator new(0x18uLL);
    v36[1] = v2;
    void v36[2] = v35;
    uint64_t v37 = *(void *)v2;
    *size_t v36 = *(void *)v2;
    *(void *)(v37 + 8) = v36;
    *(void *)unint64_t v2 = v36;
    ++*((void *)v2 + 2);
  }
  uint64_t v38 = (uint64_t *)*((void *)this + 34);
  TZCFNumberType Type = BBUEURUpdateSource::getTZType(this);
  if (v38)
  {
    uint64_t v40 = BBUProgrammer::Item::createFromImage(TZType, v38);
    uint64_t v41 = operator new(0x18uLL);
    v41[1] = v2;
    v41[2] = v40;
    uint64_t v42 = *(void *)v2;
    *uint64_t v41 = *(void *)v2;
    *(void *)(v42 + 8) = v41;
    *(void *)unint64_t v2 = v41;
    ++*((void *)v2 + 2);
  }
  uint64_t v43 = (uint64_t *)*((void *)this + 35);
  WDTCFNumberType Type = BBUEURUpdateSource::getWDTType(this);
  if (v43)
  {
    char v45 = BBUProgrammer::Item::createFromImage(WDTType, v43);
    uint64_t v46 = operator new(0x18uLL);
    v46[1] = v2;
    v46[2] = v45;
    uint64_t v47 = *(void *)v2;
    *uint64_t v46 = *(void *)v2;
    *(void *)(v47 + 8) = v46;
    *(void *)unint64_t v2 = v46;
    ++*((void *)v2 + 2);
  }
  uint64_t v48 = (uint64_t *)**((void **)this + 36);
  EFS1CFNumberType Type = BBUEURUpdateSource::getEFS1Type(this);
  if (v48)
  {
    uint64_t v50 = BBUProgrammer::Item::createFromImage(EFS1Type, v48);
    uint64_t v51 = operator new(0x18uLL);
    v51[1] = v2;
    v51[2] = v50;
    uint64_t v52 = *(void *)v2;
    *uint64_t v51 = *(void *)v2;
    *(void *)(v52 + 8) = v51;
    *(void *)unint64_t v2 = v51;
    ++*((void *)v2 + 2);
  }
  std::string v53 = *(uint64_t **)(*((void *)this + 36) + 8);
  EFS2CFNumberType Type = BBUEURUpdateSource::getEFS2Type(this);
  if (v53)
  {
    CFStringRef v55 = BBUProgrammer::Item::createFromImage(EFS2Type, v53);
    uint64_t v56 = operator new(0x18uLL);
    v56[1] = v2;
    v56[2] = v55;
    uint64_t v57 = *(void *)v2;
    *uint64_t v56 = *(void *)v2;
    *(void *)(v57 + 8) = v56;
    *(void *)unint64_t v2 = v56;
    ++*((void *)v2 + 2);
  }
  uint64_t v58 = *(uint64_t **)(*((void *)this + 36) + 16);
  EFS3CFNumberType Type = BBUEURUpdateSource::getEFS3Type(this);
  if (v58)
  {
    uint64_t v60 = BBUProgrammer::Item::createFromImage(EFS3Type, v58);
    uint64_t v61 = operator new(0x18uLL);
    v61[1] = v2;
    v61[2] = v60;
    uint64_t v62 = *(void *)v2;
    *uint64_t v61 = *(void *)v2;
    *(void *)(v62 + 8) = v61;
    *(void *)unint64_t v2 = v61;
    ++*((void *)v2 + 2);
  }
  uint64_t v63 = (uint64_t *)*((void *)this + 5);
  CalCFNumberType Type = BBUEURUpdateSource::getCalType(this);
  if (v63)
  {
    uint64_t v65 = BBUProgrammer::Item::createFromImage(CalType, v63);
    uint64_t v66 = operator new(0x18uLL);
    v66[1] = v2;
    v66[2] = v65;
    uint64_t v67 = *(void *)v2;
    void *v66 = *(void *)v2;
    *(void *)(v67 + 8) = v66;
    *(void *)unint64_t v2 = v66;
    ++*((void *)v2 + 2);
  }
  uint64_t v68 = (uint64_t *)*((void *)this + 6);
  ProvCFNumberType Type = BBUEURUpdateSource::getProvType(this);
  if (v68)
  {
    unint64_t v70 = BBUProgrammer::Item::createFromImage(ProvType, v68);
    uint64_t v71 = operator new(0x18uLL);
    v71[1] = v2;
    v71[2] = v70;
    uint64_t v72 = *(void *)v2;
    *uint64_t v71 = *(void *)v2;
    *(void *)(v72 + 8) = v71;
    *(void *)unint64_t v2 = v71;
    ++*((void *)v2 + 2);
  }
  uint64_t v73 = (uint64_t *)*((void *)this + 7);
  PacCFNumberType Type = BBUEURUpdateSource::getPacType(this);
  if (v73)
  {
    char v75 = BBUProgrammer::Item::createFromImage(PacType, v73);
    long long v76 = operator new(0x18uLL);
    v76[1] = v2;
    v76[2] = v75;
    uint64_t v77 = *(void *)v2;
    void *v76 = *(void *)v2;
    *(void *)(v77 + 8) = v76;
    *(void *)unint64_t v2 = v76;
    ++*((void *)v2 + 2);
  }
  int64_t v78 = (uint64_t *)*((void *)this + 39);
  ActCFNumberType Type = BBUEURUpdateSource::getActType(this);
  if (v78)
  {
    long long v80 = BBUProgrammer::Item::createFromImage(ActType, v78);
    long long v81 = operator new(0x18uLL);
    v81[1] = v2;
    v81[2] = v80;
    uint64_t v82 = *(void *)v2;
    *long long v81 = *(void *)v2;
    *(void *)(v82 + 8) = v81;
    *(void *)unint64_t v2 = v81;
    ++*((void *)v2 + 2);
  }
  stat v83 = (uint64_t *)*((void *)this + 40);
  ACDBCFNumberType Type = BBUEURUpdateSource::getACDBType(this);
  if (v83)
  {
    long long v85 = BBUProgrammer::Item::createFromImage(ACDBType, v83);
    uint64_t v86 = operator new(0x18uLL);
    v86[1] = v2;
    v86[2] = v85;
    uint64_t v87 = *(void *)v2;
    *uint64_t v86 = *(void *)v2;
    *(void *)(v87 + 8) = v86;
    *(void *)unint64_t v2 = v86;
    ++*((void *)v2 + 2);
  }
  return v2;
}

uint64_t BBUEUR10UpdateSource::validateBootupItems(BBUEUR10UpdateSource *this)
{
  uint64_t v2 = *((void *)this + 28);
  if (!v2) {
    return 35;
  }
  uint64_t v3 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
  if (!v3) {
    return 35;
  }
  if (*((void *)this + 29)
    && *((void *)this + 30)
    && *((void *)this + 31)
    && *((void *)this + 32)
    && *((void *)this + 33)
    && *((void *)this + 34)
    && *((void *)this + 35)
    && **((void **)this + 36)
    && *((void *)this + 40))
  {
    uint64_t result = capabilities::updater::supportsBbcfgImage(v3);
    if (!result) {
      return result;
    }
    if (*((void *)this + 41)) {
      return 0;
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 35;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 35;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v5 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v5, "", "Baseband FW isn't complete. You are missing some images!\n", v6, v7, v8, v9);
    return 35;
  }
  return result;
}

uint64_t BBUEUR10UpdateSource::validateCoredumpItems(BBUEUR10UpdateSource *this)
{
  uint64_t v1 = *((void *)this + 28);
  if (v1 && (*(uint64_t (**)(uint64_t))(*(void *)v1 + 64))(v1)) {
    return 0;
  }
  else {
    return 35;
  }
}

char *BBUEUR10UpdateSource::copyHashData(BBUEUR10UpdateSource *this, int a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if (a2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __src[0] = v3;
    __src[1] = v3;
    v91[0] = v3;
    v91[1] = v3;
    v90[0] = v3;
    v90[1] = v3;
    v89[0] = v3;
    v89[1] = v3;
    v88[0] = v3;
    v88[1] = v3;
    v87[0] = v3;
    v87[1] = v3;
    v86[0] = v3;
    v86[1] = v3;
    v85[0] = v3;
    v85[1] = v3;
    v84[0] = v3;
    v84[1] = v3;
    v83[0] = v3;
    v83[1] = v3;
    v82[0] = v3;
    v82[1] = v3;
    uint64_t v4 = *((void *)this + 28);
    if (!v4)
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 89, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x337u, (ctu::LogMessageBuffer *)"Assertion failure(fSBLImage && \"Failed loading SBL image for creating hash.\")", v39, v40, v41, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v4 + 56))(v4, __src, 0);
    uint64_t v5 = *((void *)this + 29);
    if (!v5)
    {
      uint64_t v42 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v42, 90, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x33Au, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage && \"Failed loading RPM image for creating hash.\")", v43, v44, v45, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v5 + 56))(v5, v91, 0);
    uint64_t v6 = *((void *)this + 30);
    if (!v6)
    {
      uint64_t v46 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v46, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x33Du, (ctu::LogMessageBuffer *)"Assertion failure(fAppsImage && \"Failed loading Apps image for creating hash.\")", v47, v48, v49, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v6 + 56))(v6, v90, 0);
    uint64_t v7 = *((void *)this + 31);
    if (!v7)
    {
      uint64_t v50 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v50, 91, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x340u, (ctu::LogMessageBuffer *)"Assertion failure(fDSPImage && \"Failed loading DSP image for creating hash.\")", v51, v52, v53, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v7 + 56))(v7, v89, 0);
    uint64_t v8 = *((void *)this + 32);
    if (!v8)
    {
      unint64_t v54 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v54, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x343u, (ctu::LogMessageBuffer *)"Assertion failure(fMBAImage && \"Failed loading MBA image for creating hash.\")", v55, v56, v57, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v8 + 56))(v8, v88, 0);
    uint64_t v9 = *((void *)this + 33);
    if (!v9)
    {
      uint64_t v58 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v58, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x346u, (ctu::LogMessageBuffer *)"Assertion failure(fQDSP6SWImage && \"Failed loading QDSP6SW image for creating hash.\")", v59, v60, v61, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v9 + 56))(v9, v87, 0);
    uint64_t v10 = *((void *)this + 34);
    if (!v10)
    {
      uint64_t v62 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v62, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x349u, (ctu::LogMessageBuffer *)"Assertion failure(fTZImage && \"Failed loading TZI image for creating hash.\")", v63, v64, v65, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v10 + 56))(v10, v86, 0);
    uint64_t v11 = *((void *)this + 35);
    if (!v11)
    {
      uint64_t v66 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v66, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x34Cu, (ctu::LogMessageBuffer *)"Assertion failure(fWDTImage && \"Failed loading WDT image for creating hash.\")", v67, v68, v69, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v11 + 56))(v11, v84, 0);
    uint64_t v12 = *((void *)this + 29);
    if (!v12)
    {
      unint64_t v70 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v70, 90, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x34Fu, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage && \"Failed loading RPM image for creating hash.\")", v71, v72, v73, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v12 + 56))(v12, v85, 0);
    uint64_t v13 = *((void *)this + 40);
    if (!v13)
    {
      long long v74 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v74, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x352u, (ctu::LogMessageBuffer *)"Assertion failure(fAcdbImage && \"Failed loading ACDB image for creating hash.\")", v75, v76, v77, v82[0]);
    }
    char v14 = (capabilities::updater *)(*(uint64_t (**)(uint64_t, _OWORD *, void))(*(void *)v13 + 56))(v13, v83, 0);
    if (capabilities::updater::supportsBbcfgImage(v14))
    {
      uint64_t v15 = *((void *)this + 41);
      if (!v15)
      {
        int64_t v78 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v78, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x357u, (ctu::LogMessageBuffer *)"Assertion failure(fBbcfgImage && \"Failed loading BBCFG image for creating hash.\")", v79, v80, v81, v82[0]);
      }
      (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v15 + 56))(v15, v82, 0);
    }
    uint64_t v16 = (char *)operator new(0x148uLL);
    *(void *)uint64_t v16 = &unk_26CECA848;
    size_t v17 = off_26CECA868((BBUEURHashData *)v16);
    memcpy(v16 + 8, __src, v17);
    size_t v18 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 40, v91, v18);
    size_t v19 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 72, v90, v19);
    size_t v20 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 104, v89, v20);
    size_t v21 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 136, v88, v21);
    size_t v22 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 168, v87, v22);
    size_t v23 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 200, v86, v23);
    size_t v24 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 232, v84, v24);
    size_t v25 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 264, v83, v25);
    size_t v26 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    memcpy(v16 + 296, v82, v26);
  }
  else
  {
    uint64_t v16 = (char *)operator new(0x148uLL);
    *(void *)uint64_t v16 = &unk_26CECA848;
    size_t v27 = off_26CECA868((BBUEURHashData *)v16);
    bzero(v16 + 8, v27);
    size_t v28 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 40, v28);
    size_t v29 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 72, v29);
    size_t v30 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 104, v30);
    size_t v31 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 136, v31);
    size_t v32 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 168, v32);
    size_t v33 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 200, v33);
    size_t v34 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 232, v34);
    size_t v35 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 264, v35);
    size_t v36 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
    bzero(v16 + 296, v36);
  }
  return v16;
}

void sub_21DF5E200(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E214(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E228(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E23C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E250(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E264(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E278(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E28C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E2A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E2B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E2C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E2DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF5E2F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10UpdateSource::getProgrammerSource(BBUEUR10UpdateSource *this, int a2)
{
  if (a2)
  {
    uint64_t v2 = *((void *)this + 28);
    if (v2) {
      return (*(uint64_t (**)(void))(*(void *)v2 + 64))();
    }
  }
  else
  {
    uint64_t v2 = *((void *)this + 27);
    if (v2) {
      return (*(uint64_t (**)(void))(*(void *)v2 + 64))();
    }
  }
  return 0;
}

uint64_t BBUEUR10UpdateSource::saveImages(BBUEUR10UpdateSource *this)
{
  if (!*((void *)this + 8))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x387u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error!\")", v16, v17, v18, (char)__p[0]);
  }
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  uint64_t v2 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
  uint64_t v6 = (capabilities::radio *)_BBULog(19, 0xFFFFFFFFLL, v2, "", "BBUEUR10UpdateSource::saveImages\n", v3, v4, v5, (char)__p[0]);
  memset(v25, 170, sizeof(v25));
  capabilities::radio::personalizedFirmwarePath((uint64_t *)v25, v6);
  uint64_t v7 = (void *)HIBYTE(v25[2]);
  if (SHIBYTE(v25[2]) < 0) {
    uint64_t v7 = v25[1];
  }
  if (!v7)
  {
    size_t v19 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v19, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x38Cu, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v20, v21, v22, (char)__p[0]);
  }
  uint64_t v8 = BBUEURUpdateSource::saveImages(this);
  if (!v8)
  {
    char v24 = 8;
    strcpy((char *)__p, "sbl1.mbn");
    uint64_t v9 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    uint64_t v8 = v9;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if (v8) {
        goto LABEL_47;
      }
    }
    else if (v9)
    {
      goto LABEL_47;
    }
    char v24 = 7;
    strcpy((char *)__p, "rpm.mbn");
    uint64_t v10 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    uint64_t v8 = v10;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if (v8) {
        goto LABEL_47;
      }
    }
    else if (v10)
    {
      goto LABEL_47;
    }
    char v24 = 8;
    strcpy((char *)__p, "apps.mbn");
    uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (!v8)
    {
      char v24 = 8;
      strcpy((char *)__p, "dsp3.mbn");
      uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (!v8)
      {
        char v24 = 11;
        strcpy((char *)__p, "qdsp6sw.mbn");
        uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (!v8)
        {
          char v24 = 7;
          strcpy((char *)__p, "mba.mbn");
          uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
          if (!v8)
          {
            char v24 = 6;
            strcpy((char *)__p, "tz.mbn");
            uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
            if (v24 < 0) {
              operator delete(__p[0]);
            }
            if (!v8)
            {
              char v24 = 7;
              strcpy((char *)__p, "wdt.mbn");
              uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
              if (v24 < 0) {
                operator delete(__p[0]);
              }
              if (!v8)
              {
                char v24 = 8;
                strcpy((char *)__p, "acdb.mbn");
                uint64_t v11 = (capabilities::updater *)BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
                uint64_t v8 = (uint64_t)v11;
                if (v24 < 0) {
                  operator delete(__p[0]);
                }
                if (!v8)
                {
                  if ((capabilities::updater::supportsBbcfgImage(v11) & 1) == 0)
                  {
                    uint64_t v12 = *((void *)this + 8);
                    char v24 = 9;
                    strcpy((char *)__p, "bbcfg.mbn");
                    if (!BBUZipFile::containsFile(v12, __p)) {
                      goto LABEL_42;
                    }
                  }
                  char v24 = 9;
                  strcpy((char *)__p, "bbcfg.mbn");
                  uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
                  if (v24 < 0) {
                    operator delete(__p[0]);
                  }
                  if (!v8)
                  {
LABEL_42:
                    uint64_t v13 = *((void *)this + 8);
                    (*(void (**)(void **__return_ptr, BBUEUR10UpdateSource *))(*(void *)this + 56))(__p, this);
                    uint64_t v8 = BBUZipFile::containsFile(v13, __p);
                    if (v24 < 0) {
                      operator delete(__p[0]);
                    }
                    if (v8)
                    {
                      (*(void (**)(void **__return_ptr, BBUEUR10UpdateSource *))(*(void *)this + 56))(__p, this);
                      uint64_t v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
                      if (v24 < 0) {
                        operator delete(__p[0]);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_47:
  if (SHIBYTE(v25[2]) < 0) {
    operator delete(v25[0]);
  }
  return v8;
}

void sub_21DF5E8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *BBUEUR10UpdateSource::getDebugName(BBUEUR10UpdateSource *this)
{
  return "BBUEUR10UpdateSource";
}

void BBUEURRPMElfImage::~BBUEURRPMElfImage(BBUEURRPMElfImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURRPMElfImage::getName(BBUEURRPMElfImage *this)
{
  return "RPM";
}

void BBUEURAppsImage::~BBUEURAppsImage(BBUEURAppsImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURAppsImage::getName(BBUEURAppsImage *this)
{
  return "Apps";
}

void BBUEURMBAImage::~BBUEURMBAImage(BBUEURMBAImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURMBAImage::getName(BBUEURMBAImage *this)
{
  return "MBA";
}

void BBUEURQDSP6SWImage::~BBUEURQDSP6SWImage(BBUEURQDSP6SWImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURQDSP6SWImage::getName(BBUEURQDSP6SWImage *this)
{
  return "QDSP6SW";
}

void BBUEURTZImage::~BBUEURTZImage(BBUEURTZImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURTZImage::getName(BBUEURTZImage *this)
{
  return "TZ";
}

void BBUEURWDTImage::~BBUEURWDTImage(BBUEURWDTImage *this)
{
  *(void *)this = &unk_26CECEAE8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECEAE8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(this);
}

const char *BBUEURWDTImage::getName(BBUEURWDTImage *this)
{
  return "WDT";
}

void BBUEURACDBImage::~BBUEURACDBImage(BBUEURACDBImage *this)
{
  *(void *)this = &unk_26CECEAE8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECEAE8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(this);
}

const char *BBUEURACDBImage::getName(BBUEURACDBImage *this)
{
  return "ACDB";
}

void BBUEURBBCFGImage::~BBUEURBBCFGImage(BBUEURBBCFGImage *this)
{
  *(void *)this = &unk_26CECEAE8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECEAE8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(this);
}

const char *BBUEURBBCFGImage::getName(BBUEURBBCFGImage *this)
{
  return "BBCFG";
}

void BBUEURAPDPImage::~BBUEURAPDPImage(BBUEURAPDPImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURAPDPImage::getName(BBUEURAPDPImage *this)
{
  return "APDP";
}

void BBUEURDevcfgImage::~BBUEURDevcfgImage(BBUEURDevcfgImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURDevcfgImage::getName(BBUEURDevcfgImage *this)
{
  return "DEVCFG";
}

void BBUEURHYPImage::~BBUEURHYPImage(BBUEURHYPImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURHYPImage::getName(BBUEURHYPImage *this)
{
  return "HYP";
}

void BBUEURAOPImage::~BBUEURAOPImage(BBUEURAOPImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURAOPImage::getName(BBUEURAOPImage *this)
{
  return "AOP";
}

void BBUEURMDMDDRImage::~BBUEURMDMDDRImage(BBUEURMDMDDRImage *this)
{
  *(void *)this = &unk_26CECEAE8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECEAE8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(this);
}

const char *BBUEURMDMDDRImage::getName(BBUEURMDMDDRImage *this)
{
  return "MDMDDR";
}

void BBUEUROEMMiscImage::~BBUEUROEMMiscImage(BBUEUROEMMiscImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEUROEMMiscImage::getName(BBUEUROEMMiscImage *this)
{
  return "OEMMisc";
}

void BBUEURQTIMiscImage::~BBUEURQTIMiscImage(BBUEURQTIMiscImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURQTIMiscImage::getName(BBUEURQTIMiscImage *this)
{
  return "QTIMisc";
}

void BBUEURXblCfgImage::~BBUEURXblCfgImage(BBUEURXblCfgImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURXblCfgImage::getName(BBUEURXblCfgImage *this)
{
  return "XBL_CFG";
}

void BBUEURUEFIImage::~BBUEURUEFIImage(BBUEURUEFIImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURUEFIImage::getName(BBUEURUEFIImage *this)
{
  return "UEFI";
}

void BBUEURXblSupportImage::~BBUEURXblSupportImage(BBUEURXblSupportImage *this)
{
  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECA7E0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3) {
      operator delete[](v3);
    }
    operator delete(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

const char *BBUEURXblSupportImage::getName(BBUEURXblSupportImage *this)
{
  return "XblSupport";
}

uint64_t __cxx_global_var_init_18()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

uint64_t BBUEUR10Programmer::EUR10Item::EUR10Item(uint64_t a1, int a2, void *lpsrc)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &unk_26CECE208;
  *(void *)(a1 + 16) = 0;
  switch(a2)
  {
    case 16391:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 21;
      goto LABEL_61;
    case 16392:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 23;
      goto LABEL_61;
    case 16393:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 6;
      goto LABEL_61;
    case 16394:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 28;
      goto LABEL_61;
    case 16395:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 31;
      goto LABEL_61;
    case 16396:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 8;
      goto LABEL_61;
    case 16397:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 25;
      goto LABEL_61;
    case 16398:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 30;
      goto LABEL_61;
    case 16399:
      if (lpsrc) {
      else
      }
        uint64_t v4 = 0;
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 29;
      goto LABEL_61;
    case 16400:
      *(_DWORD *)(a1 + 24) = 16;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_33;
    case 16401:
      *(_DWORD *)(a1 + 24) = 17;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_33;
    case 16402:
      *(_DWORD *)(a1 + 24) = 20;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_33;
    case 16403:
      *(_DWORD *)(a1 + 24) = 1128352768;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_33;
    case 16404:
      *(_DWORD *)(a1 + 24) = 1347571542;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_33;
    case 16405:
      *(_DWORD *)(a1 + 24) = 1346454272;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_33;
    case 16406:
      *(_DWORD *)(a1 + 24) = 1094931456;
      if (!lpsrc) {
        goto LABEL_59;
      }
LABEL_33:
      goto LABEL_34;
    case 16407:
      *(_DWORD *)(a1 + 24) = 1128679168;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16408:
      *(_DWORD *)(a1 + 24) = 40;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16409:
      *(_DWORD *)(a1 + 24) = 41;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16410:
      *(_DWORD *)(a1 + 24) = 42;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16411:
      *(_DWORD *)(a1 + 24) = 33;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16412:
      *(_DWORD *)(a1 + 24) = 23;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16413:
      *(_DWORD *)(a1 + 24) = 34;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16414:
      *(_DWORD *)(a1 + 24) = 37;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16415:
      *(_DWORD *)(a1 + 24) = 36;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16416:
      *(_DWORD *)(a1 + 24) = 38;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16417:
      *(_DWORD *)(a1 + 24) = 5;
      if (!lpsrc) {
        goto LABEL_59;
      }
      goto LABEL_34;
    case 16418:
      *(_DWORD *)(a1 + 24) = 48;
      if (lpsrc)
      {
LABEL_34:
      }
      else
      {
LABEL_59:
        uint64_t v4 = 0;
      }
      *(void *)(a1 + 16) = v4;
LABEL_61:
      if (!v4)
      {
        exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR10Programmer.cpp", 0xBEu, (ctu::LogMessageBuffer *)"Assertion failure(fImage && \"BBU Programmer item creation failed.\")", v8, v9, v10, v14);
LABEL_82:
      }
      return a1;
    default:
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 85, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR10Programmer.cpp", 0xBBu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU Programmer item type.\")", v11, v12, v13, v14);
      goto LABEL_82;
  }
}

void sub_21DF606B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF606CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *BBUEUR10Programmer::addProgressBarTimes(uint64_t *this, BBUFeedback *a2)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v4 = (uint64_t **)(this + 2);
  uint64_t v3 = (int *)this[2];
  uint64_t v5 = (uint64_t **)(this + 2);
  uint64_t v6 = this + 2;
  if (v3)
  {
    uint64_t v7 = (int *)this[2];
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v7;
        int v8 = v7[8];
        if (v8 < 2) {
          break;
        }
        uint64_t v7 = (int *)*v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v8 == 1) {
        break;
      }
      uint64_t v7 = (int *)v6[1];
      if (!v7)
      {
        uint64_t v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v9 = v6;
    uint64_t v6 = operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = 1;
    v6[5] = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *uint64_t v5 = v6;
    uint64_t v10 = **(void **)(v2 + 8);
    uint64_t v11 = v6;
    if (v10)
    {
      *(void *)(v2 + 8) = v10;
      uint64_t v11 = *v5;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v11);
    uint64_t v3 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v6[5] = 0x408F400000000000;
  uint64_t v12 = v4;
  uint64_t v13 = v4;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v13 = v3;
        int v14 = v3[8];
        if (v14 < 4) {
          break;
        }
        uint64_t v3 = (int *)*v13;
        uint64_t v12 = (uint64_t **)v13;
        if (!*v13) {
          goto LABEL_18;
        }
      }
      if (v14 == 3) {
        break;
      }
      uint64_t v3 = (int *)v13[1];
      if (!v3)
      {
        uint64_t v12 = (uint64_t **)(v13 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    uint64_t v15 = v13;
    uint64_t v13 = operator new(0x30uLL);
    *((_DWORD *)v13 + 8) = 3;
    v13[5] = 0;
    *uint64_t v13 = 0;
    v13[1] = 0;
    v13[2] = v15;
    *uint64_t v12 = v13;
    uint64_t v16 = **(void **)(v2 + 8);
    uint64_t v17 = v13;
    if (v16)
    {
      *(void *)(v2 + 8) = v16;
      uint64_t v17 = *v12;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v17);
    ++*(void *)(v2 + 24);
  }
  v13[5] = 0x408F400000000000;
  uint64_t v18 = (int *)*v4;
  size_t v19 = v4;
  uint64_t v20 = v4;
  if (*v4)
  {
    uint64_t v21 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v20 = v21;
        int v22 = v21[8];
        if (v22 < 5) {
          break;
        }
        uint64_t v21 = (int *)*v20;
        size_t v19 = (uint64_t **)v20;
        if (!*v20) {
          goto LABEL_28;
        }
      }
      if (v22 == 4) {
        break;
      }
      uint64_t v21 = (int *)v20[1];
      if (!v21)
      {
        size_t v19 = (uint64_t **)(v20 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    size_t v23 = v20;
    uint64_t v20 = operator new(0x30uLL);
    *((_DWORD *)v20 + 8) = 4;
    v20[5] = 0;
    void *v20 = 0;
    v20[1] = 0;
    void v20[2] = v23;
    void *v19 = v20;
    uint64_t v24 = **(void **)(v2 + 8);
    size_t v25 = v20;
    if (v24)
    {
      *(void *)(v2 + 8) = v24;
      size_t v25 = *v19;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v25);
    uint64_t v18 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v20[5] = 0x409F400000000000;
  size_t v26 = v4;
  size_t v27 = v4;
  if (v18)
  {
    while (1)
    {
      while (1)
      {
        size_t v27 = v18;
        int v28 = v18[8];
        if (v28 < 10) {
          break;
        }
        uint64_t v18 = (int *)*v27;
        size_t v26 = (uint64_t **)v27;
        if (!*v27) {
          goto LABEL_38;
        }
      }
      if (v28 == 9) {
        break;
      }
      uint64_t v18 = (int *)v27[1];
      if (!v18)
      {
        size_t v26 = (uint64_t **)(v27 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    size_t v29 = v27;
    size_t v27 = operator new(0x30uLL);
    *((_DWORD *)v27 + 8) = 9;
    v27[5] = 0;
    void *v27 = 0;
    v27[1] = 0;
    v27[2] = v29;
    void *v26 = v27;
    uint64_t v30 = **(void **)(v2 + 8);
    size_t v31 = v27;
    if (v30)
    {
      *(void *)(v2 + 8) = v30;
      size_t v31 = *v26;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v31);
    ++*(void *)(v2 + 24);
  }
  v27[5] = 0x40CD4C0000000000;
  size_t v32 = (int *)*v4;
  size_t v33 = v4;
  size_t v34 = v4;
  if (*v4)
  {
    size_t v35 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        size_t v34 = v35;
        int v36 = v35[8];
        if (v36 < 7) {
          break;
        }
        size_t v35 = (int *)*v34;
        size_t v33 = (uint64_t **)v34;
        if (!*v34) {
          goto LABEL_48;
        }
      }
      if (v36 == 6) {
        break;
      }
      size_t v35 = (int *)v34[1];
      if (!v35)
      {
        size_t v33 = (uint64_t **)(v34 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    uint64_t v37 = v34;
    size_t v34 = operator new(0x30uLL);
    *((_DWORD *)v34 + 8) = 6;
    v34[5] = 0;
    *size_t v34 = 0;
    v34[1] = 0;
    v34[2] = v37;
    *size_t v33 = v34;
    uint64_t v38 = **(void **)(v2 + 8);
    uint64_t v39 = v34;
    if (v38)
    {
      *(void *)(v2 + 8) = v38;
      uint64_t v39 = *v33;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v39);
    size_t v32 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v34[5] = 0x408F400000000000;
  uint64_t v40 = v4;
  uint64_t v41 = v4;
  if (v32)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v41 = v32;
        int v42 = v32[8];
        if (v42 < 8) {
          break;
        }
        size_t v32 = (int *)*v41;
        uint64_t v40 = (uint64_t **)v41;
        if (!*v41) {
          goto LABEL_58;
        }
      }
      if (v42 == 7) {
        break;
      }
      size_t v32 = (int *)v41[1];
      if (!v32)
      {
        uint64_t v40 = (uint64_t **)(v41 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    uint64_t v43 = v41;
    uint64_t v41 = operator new(0x30uLL);
    *((_DWORD *)v41 + 8) = 7;
    v41[5] = 0;
    *uint64_t v41 = 0;
    v41[1] = 0;
    v41[2] = v43;
    *uint64_t v40 = v41;
    uint64_t v44 = **(void **)(v2 + 8);
    uint64_t v45 = v41;
    if (v44)
    {
      *(void *)(v2 + 8) = v44;
      uint64_t v45 = *v40;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v45);
    ++*(void *)(v2 + 24);
  }
  v41[5] = 0x410D4C0000000000;
  uint64_t v46 = (int *)*v4;
  uint64_t v47 = v4;
  uint64_t v48 = v4;
  if (*v4)
  {
    uint64_t v49 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v48 = v49;
        int v50 = v49[8];
        if (v50 < 9) {
          break;
        }
        uint64_t v49 = (int *)*v48;
        uint64_t v47 = (uint64_t **)v48;
        if (!*v48) {
          goto LABEL_68;
        }
      }
      if (v50 == 8) {
        break;
      }
      uint64_t v49 = (int *)v48[1];
      if (!v49)
      {
        uint64_t v47 = (uint64_t **)(v48 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    uint64_t v51 = v48;
    uint64_t v48 = operator new(0x30uLL);
    *((_DWORD *)v48 + 8) = 8;
    v48[5] = 0;
    *uint64_t v48 = 0;
    v48[1] = 0;
    void v48[2] = v51;
    *uint64_t v47 = v48;
    uint64_t v52 = **(void **)(v2 + 8);
    uint64_t v53 = v48;
    if (v52)
    {
      *(void *)(v2 + 8) = v52;
      uint64_t v53 = *v47;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v53);
    uint64_t v46 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v48[5] = 0x410D4C0000000000;
  unint64_t v54 = v4;
  uint64_t v55 = v4;
  if (v46)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v55 = v46;
        int v56 = v46[8];
        if (v56 < 15) {
          break;
        }
        uint64_t v46 = (int *)*v55;
        unint64_t v54 = (uint64_t **)v55;
        if (!*v55) {
          goto LABEL_78;
        }
      }
      if (v56 == 14) {
        break;
      }
      uint64_t v46 = (int *)v55[1];
      if (!v46)
      {
        unint64_t v54 = (uint64_t **)(v55 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    uint64_t v57 = v55;
    uint64_t v55 = operator new(0x30uLL);
    *((_DWORD *)v55 + 8) = 14;
    v55[5] = 0;
    *uint64_t v55 = 0;
    v55[1] = 0;
    void v55[2] = v57;
    *unint64_t v54 = v55;
    uint64_t v58 = **(void **)(v2 + 8);
    uint64_t v59 = v55;
    if (v58)
    {
      *(void *)(v2 + 8) = v58;
      uint64_t v59 = *v54;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v59);
    ++*(void *)(v2 + 24);
  }
  v55[5] = 0x3FF0000000000000;
  uint64_t v60 = (int *)*v4;
  uint64_t v61 = v4;
  uint64_t v62 = v4;
  if (*v4)
  {
    uint64_t v63 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v62 = v63;
        int v64 = v63[8];
        if (v64 < 16) {
          break;
        }
        uint64_t v63 = (int *)*v62;
        uint64_t v61 = (uint64_t **)v62;
        if (!*v62) {
          goto LABEL_88;
        }
      }
      if (v64 == 15) {
        break;
      }
      uint64_t v63 = (int *)v62[1];
      if (!v63)
      {
        uint64_t v61 = (uint64_t **)(v62 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    uint64_t v65 = v62;
    uint64_t v62 = operator new(0x30uLL);
    *((_DWORD *)v62 + 8) = 15;
    v62[5] = 0;
    *uint64_t v62 = 0;
    v62[1] = 0;
    v62[2] = v65;
    *uint64_t v61 = v62;
    uint64_t v66 = **(void **)(v2 + 8);
    uint64_t v67 = v62;
    if (v66)
    {
      *(void *)(v2 + 8) = v66;
      uint64_t v67 = *v61;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v67);
    uint64_t v60 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v62[5] = 0x3FF0000000000000;
  uint64_t v68 = v4;
  uint64_t v69 = v4;
  if (v60)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v69 = v60;
        int v70 = v60[8];
        if (v70 < 17) {
          break;
        }
        uint64_t v60 = (int *)*v69;
        uint64_t v68 = (uint64_t **)v69;
        if (!*v69) {
          goto LABEL_98;
        }
      }
      if (v70 == 16) {
        break;
      }
      uint64_t v60 = (int *)v69[1];
      if (!v60)
      {
        uint64_t v68 = (uint64_t **)(v69 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    uint64_t v71 = v69;
    uint64_t v69 = operator new(0x30uLL);
    *((_DWORD *)v69 + 8) = 16;
    v69[5] = 0;
    *uint64_t v69 = 0;
    v69[1] = 0;
    v69[2] = v71;
    *uint64_t v68 = v69;
    uint64_t v72 = **(void **)(v2 + 8);
    uint64_t v73 = v69;
    if (v72)
    {
      *(void *)(v2 + 8) = v72;
      uint64_t v73 = *v68;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v73);
    ++*(void *)(v2 + 24);
  }
  v69[5] = 0x3FF0000000000000;
  long long v74 = (int *)*v4;
  uint64_t v75 = v4;
  uint64_t v76 = v4;
  if (*v4)
  {
    uint64_t v77 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        uint64_t v76 = v77;
        int v78 = v77[8];
        if (v78 < 18) {
          break;
        }
        uint64_t v77 = (int *)*v76;
        uint64_t v75 = (uint64_t **)v76;
        if (!*v76) {
          goto LABEL_108;
        }
      }
      if (v78 == 17) {
        break;
      }
      uint64_t v77 = (int *)v76[1];
      if (!v77)
      {
        uint64_t v75 = (uint64_t **)(v76 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    uint64_t v79 = v76;
    uint64_t v76 = operator new(0x30uLL);
    *((_DWORD *)v76 + 8) = 17;
    v76[5] = 0;
    void *v76 = 0;
    v76[1] = 0;
    v76[2] = v79;
    *uint64_t v75 = v76;
    uint64_t v80 = **(void **)(v2 + 8);
    uint64_t v81 = v76;
    if (v80)
    {
      *(void *)(v2 + 8) = v80;
      uint64_t v81 = *v75;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v81);
    long long v74 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v76[5] = 0x3FF0000000000000;
  uint64_t v82 = v4;
  stat v83 = v4;
  if (v74)
  {
    while (1)
    {
      while (1)
      {
        stat v83 = v74;
        int v84 = v74[8];
        if (v84 < 11) {
          break;
        }
        long long v74 = (int *)*v83;
        uint64_t v82 = (uint64_t **)v83;
        if (!*v83) {
          goto LABEL_118;
        }
      }
      if (v84 == 10) {
        break;
      }
      long long v74 = (int *)v83[1];
      if (!v74)
      {
        uint64_t v82 = (uint64_t **)(v83 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    long long v85 = v83;
    stat v83 = operator new(0x30uLL);
    *((_DWORD *)v83 + 8) = 10;
    v83[5] = 0;
    *stat v83 = 0;
    v83[1] = 0;
    _OWORD v83[2] = v85;
    *uint64_t v82 = v83;
    uint64_t v86 = **(void **)(v2 + 8);
    uint64_t v87 = v83;
    if (v86)
    {
      *(void *)(v2 + 8) = v86;
      uint64_t v87 = *v82;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v87);
    ++*(void *)(v2 + 24);
  }
  v83[5] = 0x3FF0000000000000;
  std::string v88 = (int *)*v4;
  int v89 = v4;
  int v90 = v4;
  if (*v4)
  {
    uint64_t v91 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        int v90 = v91;
        int v92 = v91[8];
        if (v92 < 19) {
          break;
        }
        uint64_t v91 = (int *)*v90;
        int v89 = (uint64_t **)v90;
        if (!*v90) {
          goto LABEL_128;
        }
      }
      if (v92 == 18) {
        break;
      }
      uint64_t v91 = (int *)v90[1];
      if (!v91)
      {
        int v89 = (uint64_t **)(v90 + 1);
        goto LABEL_128;
      }
    }
  }
  else
  {
LABEL_128:
    uint64_t v93 = v90;
    int v90 = operator new(0x30uLL);
    *((_DWORD *)v90 + 8) = 18;
    v90[5] = 0;
    *int v90 = 0;
    v90[1] = 0;
    _OWORD v90[2] = v93;
    *int v89 = v90;
    uint64_t v94 = **(void **)(v2 + 8);
    uint64_t v95 = v90;
    if (v94)
    {
      *(void *)(v2 + 8) = v94;
      uint64_t v95 = *v89;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v95);
    std::string v88 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v90[5] = 0x3FF0000000000000;
  uint64_t v96 = v4;
  uint64_t v97 = v4;
  if (v88)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v97 = v88;
        int v98 = v88[8];
        if (v98 < 20) {
          break;
        }
        std::string v88 = (int *)*v97;
        uint64_t v96 = (uint64_t **)v97;
        if (!*v97) {
          goto LABEL_138;
        }
      }
      if (v98 == 19) {
        break;
      }
      std::string v88 = (int *)v97[1];
      if (!v88)
      {
        uint64_t v96 = (uint64_t **)(v97 + 1);
        goto LABEL_138;
      }
    }
  }
  else
  {
LABEL_138:
    uint64_t v99 = v97;
    uint64_t v97 = operator new(0x30uLL);
    *((_DWORD *)v97 + 8) = 19;
    v97[5] = 0;
    *uint64_t v97 = 0;
    v97[1] = 0;
    v97[2] = v99;
    *uint64_t v96 = v97;
    uint64_t v100 = **(void **)(v2 + 8);
    int v101 = v97;
    if (v100)
    {
      *(void *)(v2 + 8) = v100;
      int v101 = *v96;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v101);
    ++*(void *)(v2 + 24);
  }
  v97[5] = 0x3FF0000000000000;
  uint64_t v102 = (int *)*v4;
  int v103 = v4;
  std::string::size_type v104 = v4;
  if (*v4)
  {
    uint64_t v105 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        std::string::size_type v104 = v105;
        int v106 = v105[8];
        if (v106 < 21) {
          break;
        }
        uint64_t v105 = (int *)*v104;
        int v103 = (uint64_t **)v104;
        if (!*v104) {
          goto LABEL_148;
        }
      }
      if (v106 == 20) {
        break;
      }
      uint64_t v105 = (int *)v104[1];
      if (!v105)
      {
        int v103 = (uint64_t **)(v104 + 1);
        goto LABEL_148;
      }
    }
  }
  else
  {
LABEL_148:
    uint64_t v107 = v104;
    std::string::size_type v104 = operator new(0x30uLL);
    *((_DWORD *)v104 + 8) = 20;
    v104[5] = 0;
    void *v104 = 0;
    v104[1] = 0;
    v104[2] = v107;
    BBUEURDSPImage *v103 = v104;
    uint64_t v108 = **(void **)(v2 + 8);
    uint64_t v109 = v104;
    if (v108)
    {
      *(void *)(v2 + 8) = v108;
      uint64_t v109 = *v103;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v109);
    uint64_t v102 = *(int **)(v2 + 16);
    ++*(void *)(v2 + 24);
  }
  v104[5] = 0x3FF0000000000000;
  int v110 = v4;
  int v111 = v4;
  if (v102)
  {
    while (1)
    {
      while (1)
      {
        int v111 = v102;
        int v112 = v102[8];
        if (v112 < 22) {
          break;
        }
        uint64_t v102 = (int *)*v111;
        int v110 = (uint64_t **)v111;
        if (!*v111) {
          goto LABEL_158;
        }
      }
      if (v112 == 21) {
        break;
      }
      uint64_t v102 = (int *)v111[1];
      if (!v102)
      {
        int v110 = (uint64_t **)(v111 + 1);
        goto LABEL_158;
      }
    }
  }
  else
  {
LABEL_158:
    long long v113 = v111;
    int v111 = operator new(0x30uLL);
    *((_DWORD *)v111 + 8) = 21;
    v111[5] = 0;
    *int v111 = 0;
    v111[1] = 0;
    v111[2] = v113;
    *int v110 = v111;
    uint64_t v114 = **(void **)(v2 + 8);
    uint64_t v115 = v111;
    if (v114)
    {
      *(void *)(v2 + 8) = v114;
      uint64_t v115 = *v110;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v115);
    ++*(void *)(v2 + 24);
  }
  v111[5] = 0x3FF0000000000000;
  uint64_t v116 = (int *)*v4;
  uint64_t v117 = v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v117 = v116;
        int v118 = v116[8];
        if (v118 < 23) {
          break;
        }
        uint64_t v116 = (int *)*v117;
        uint64_t v4 = (uint64_t **)v117;
        if (!*v117) {
          goto LABEL_168;
        }
      }
      if (v118 == 22) {
        break;
      }
      uint64_t v116 = (int *)v117[1];
      if (!v116)
      {
        uint64_t v4 = (uint64_t **)(v117 + 1);
        goto LABEL_168;
      }
    }
  }
  else
  {
LABEL_168:
    uint64_t v119 = v117;
    uint64_t v117 = operator new(0x30uLL);
    *((_DWORD *)v117 + 8) = 22;
    v117[5] = 0;
    *uint64_t v117 = 0;
    v117[1] = 0;
    v117[2] = v119;
    *uint64_t v4 = v117;
    uint64_t v120 = **(void **)(v2 + 8);
    uint64_t v121 = v117;
    if (v120)
    {
      *(void *)(v2 + 8) = v120;
      uint64_t v121 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v121);
    ++*(void *)(v2 + 24);
  }
  v117[5] = 0x4024000000000000;
  return this;
}

uint64_t BBUEUR10Programmer::connectForImage_nl(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  int v65 = 256;
  uint64_t v64 = 0;
  int v63 = 0;
  std::string __p = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v75 = v10;
  long long v76 = v10;
  long long v73 = v10;
  long long v74 = v10;
  long long v71 = v10;
  long long v72 = v10;
  long long v69 = v10;
  long long v70 = v10;
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0 && gBBULogVerbosity >= 1) {
    _BBULog(13, 1, "BBUProgrammer", "", "Waiting for Hello\n", a6, a7, a8, v57);
  }
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v20 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_91;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v20 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_91;
      }
    }
    if (gBBULogVerbosity < 0) {
      goto LABEL_91;
    }
    uint64_t v21 = "failed receiving sahara hello\n";
    goto LABEL_20;
  }
  if (ETLSAHCommandParseHello())
  {
    if (*(_DWORD *)(a1 + 4284) == 2) {
      int v17 = 2;
    }
    else {
      int v17 = v65;
    }
    *a2 = v17;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_27;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_27;
      }
    }
    if (gBBULogVerbosity >= 3)
    {
      uint64_t v18 = *(int *)(a1 + 4284);
      if (v18 > 2) {
        size_t v19 = "Unknown";
      }
      else {
        size_t v19 = off_26448A0A0[v18];
      }
      ETLSAHModeAsString();
      ETLSAHModeAsString();
      _BBULog(13, 3, "BBUProgrammer", "", "\n Boot mode => Requested : %s, Received : %s, Override : %s\n", v22, v23, v24, (char)v19);
    }
LABEL_27:
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    size_t v25 = (const char *)(a1 + 4304);
    if (*(char *)(a1 + 4327) < 0)
    {
      if (*(void *)(a1 + 4312))
      {
        size_t v25 = *(const char **)v25;
        size_t v26 = strlen(v25);
        if (v26 < 0x7FFFFFFFFFFFFFF8)
        {
LABEL_30:
          size_t v27 = v26;
          if (v26 >= 0x17)
          {
            uint64_t v37 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17) {
              uint64_t v37 = v26 | 7;
            }
            uint64_t v38 = v37 + 1;
            int v28 = operator new(v37 + 1);
            __dst[1] = v27;
            int64_t v59 = v38 | 0x8000000000000000;
            __dst[0] = v28;
          }
          else
          {
            HIBYTE(v59) = v26;
            int v28 = __dst;
            if (!v26) {
              goto LABEL_44;
            }
          }
          memmove(v28, v25, v27);
LABEL_44:
          *((unsigned char *)v28 + v27) = 0;
          int v39 = SHIBYTE(v59);
          uint64_t v40 = (void *)__dst[0];
          if (v59 >= 0) {
            uint64_t v41 = (const char *)__dst;
          }
          else {
            uint64_t v41 = (const char *)__dst[0];
          }
          int v42 = strtoul(v41, 0, 16);
          if (v39 < 0) {
            operator delete(v40);
          }
          LODWORD(v66) = v42;
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
              goto LABEL_53;
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
              goto LABEL_53;
            }
          }
          if (gBBULogVerbosity >= 1) {
            _BBULog(13, 1, "BBUProgrammer", "", "Overriding Product Type : %u and Hardware Config: 0x%x in Reserved %zu\n", v30, v31, v32, v42);
          }
          goto LABEL_53;
        }
LABEL_35:
        std::string::__throw_length_error[abi:ne180100]();
      }
    }
    else if (*(unsigned char *)(a1 + 4327))
    {
      size_t v26 = strlen((const char *)(a1 + 4304));
      if (v26 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
    int HardwareConfig = TelephonyRadiosGetHardwareConfig();
    LODWORD(v66) = TelephonyRadiosGetProduct() | (HardwareConfig << 30);
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_53;
      }
    }
    if (gBBULogVerbosity >= 1)
    {
      char Product = TelephonyRadiosGetProduct();
      TelephonyRadiosGetHardwareConfig();
      _BBULog(13, 1, "BBUProgrammer", "", "Product Type : %d and Hardware Config: 0x%x in Reserved%lu\n", v34, v35, v36, Product);
    }
LABEL_53:
    if (!*(unsigned char *)(a1 + 4302)) {
      goto LABEL_58;
    }
    HIDWORD(v66) |= 1u;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_58;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_58;
      }
    }
    if (gBBULogVerbosity >= 1) {
      _BBULog(13, 1, "BBUProgrammer", "", "Sending Erase BB EEPROM in Reserved%lu\n", v30, v31, v32, 1);
    }
LABEL_58:
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
        goto LABEL_60;
      }
    }
    else
    {
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      {
LABEL_60:
        if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) {
          goto LABEL_62;
        }
LABEL_61:
        if (!*(unsigned char *)(a1 + 4303)) {
          goto LABEL_66;
        }
LABEL_62:
        LODWORD(v67) = 1381192786;
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            goto LABEL_66;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            goto LABEL_66;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(13, 0, "BBUProgrammer", "", "Sending restore mode cookie in Reserved%lu\n", v30, v31, v32, 2);
        }
LABEL_66:
        if (ETLSAHCommandCreateHelloResponseExt())
        {
          if (ETLSAHCommandSend())
          {
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
                goto LABEL_73;
              }
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
                goto LABEL_73;
              }
            }
            if (gBBULogVerbosity >= 1)
            {
              char v46 = ETLSAHModeAsString();
              _BBULog(13, 1, "BBUProgrammer", "", "Hello received boot mode:  %s\n", v47, v48, v49, v46);
              if (gBBULogMaskGet(void)::once != -1)
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
                {
LABEL_74:
                  if (gBBULogVerbosity >= 1)
                  {
                    char v50 = ETLSAHModeAsString();
                    _BBULog(13, 1, "BBUProgrammer", "", "Hello response boot mode:  %s\n", v51, v52, v53, v50);
                  }
                }
LABEL_76:
                uint64_t v54 = HIBYTE(v62);
                if (v62 < 0) {
                  uint64_t v54 = v61;
                }
                if (!v54)
                {
LABEL_85:
                  uint64_t v20 = 0;
                  goto LABEL_91;
                }
                if (gBBULogMaskGet(void)::once == -1)
                {
                  uint64_t v20 = 0;
                  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
                    goto LABEL_91;
                  }
                  goto LABEL_81;
                }
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                uint64_t v20 = 0;
                if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
                {
LABEL_81:
                  if (gBBULogVerbosity < 1) {
                    goto LABEL_91;
                  }
                  p_p = &__p;
                  if (v62 < 0) {
                    LOBYTE(p_p) = (_BYTE)__p;
                  }
                  _BBULog(13, 1, "BBUProgrammer", "", "Hello reserved fields:  %s\n", v11, v12, v13, (char)p_p);
                  goto LABEL_85;
                }
                goto LABEL_91;
              }
            }
LABEL_73:
            if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0) {
              goto LABEL_74;
            }
            goto LABEL_76;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            uint64_t v20 = 3;
            if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
              goto LABEL_91;
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            uint64_t v20 = 3;
            if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
              goto LABEL_91;
            }
          }
          if (gBBULogVerbosity < 0) {
            goto LABEL_91;
          }
          uint64_t v21 = "failed sending hello response\n";
LABEL_20:
          _BBULog(13, 0, "BBUProgrammer", "", v21, v11, v12, v13, v57);
          goto LABEL_91;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0) {
            goto LABEL_88;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
          {
LABEL_88:
            if ((gBBULogVerbosity & 0x80000000) == 0) {
              _BBULog(13, 0, "BBUProgrammer", "", "failed creating hello response\n", v43, v44, v45, v57);
            }
          }
        }
        uint64_t v20 = 11;
        goto LABEL_91;
      }
    }
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
    if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v20 = 12;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_91;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v20 = 12;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
      goto LABEL_91;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(13, 0, "BBUProgrammer", "", "failed parsing sahara hello\n", v14, v15, v16, v57);
  }
LABEL_91:
  if (SHIBYTE(v62) < 0) {
    operator delete(__p);
  }
  return v20;
}

void sub_21DF61BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR10Programmer::disconnectForImage_nl(uint64_t a1, _DWORD *a2)
{
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Disconnecting");
  if ((ETLSAHCommandCreateDone() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v16 = 11;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v16 = 11;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_23;
      }
    }
    if (gBBULogVerbosity < 0) {
      goto LABEL_23;
    }
    int v17 = "failed creating done command\n";
LABEL_22:
    _BBULog(13, 0, "BBUProgrammer", "", v17, v4, v5, v6, v19);
    goto LABEL_23;
  }
  if ((ETLSAHCommandSend() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v16 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v16 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_23;
      }
    }
    if (gBBULogVerbosity < 0) {
      goto LABEL_23;
    }
    int v17 = "failed sending done command\n";
    goto LABEL_22;
  }
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v16 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v16 = 3;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_23;
      }
    }
    if (gBBULogVerbosity < 0) {
      goto LABEL_23;
    }
    int v17 = "failed receiving done response\n";
    goto LABEL_22;
  }
  char done = ETLSAHCommandParseDoneResponse();
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  int v11 = (gBBULogVerbosity >= 0) & (*(unsigned __int8 *)(gBBULogMaskGet(void)::sBBULogMask + 1) >> 5);
  if (done)
  {
    if (v11)
    {
      char v12 = ETLSAHModeAsString();
      _BBULog(13, 0, "BBUProgrammer", "", "status is %s\n", v13, v14, v15, v12);
    }
    uint64_t v16 = 0;
    *a2 = 256;
  }
  else
  {
    if (v11) {
      _BBULog(13, 0, "BBUProgrammer", "", "failed parsing done response\n", v7, v8, v9, v19);
    }
    uint64_t v16 = 11;
  }
LABEL_23:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v16);
  return v16;
}

uint64_t BBUEUR10Programmer::load(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 8), "Sending Loader");
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = BBUProgrammer::addItemsFromList(a1, a2);
    if (v11)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          goto LABEL_26;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(13, 0, "BBUProgrammer", "", "failed adding loader item to programmer list\n", v8, v9, v10, v22);
      }
    }
    else
    {
      int v24 = 256;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 184))(a1, &v24);
      if (v11)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            goto LABEL_26;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
            goto LABEL_26;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(13, 0, "BBUProgrammer", "", "failed connecting to sahara for pushing secondary loader\n", v12, v13, v14, v22);
        }
      }
      else
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a1 + 40);
        if (v11)
        {
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
              goto LABEL_26;
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
              goto LABEL_26;
            }
          }
          if ((gBBULogVerbosity & 0x80000000) == 0) {
            _BBULog(13, 0, "BBUProgrammer", "", "failed sending secondary loader\n", v15, v16, v17, v22);
          }
        }
        else
        {
          int v23 = 256;
          uint64_t v11 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 248))(a1, &v23);
          if (v11)
          {
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
                goto LABEL_26;
              }
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
                goto LABEL_26;
              }
            }
            if ((gBBULogVerbosity & 0x80000000) == 0) {
              _BBULog(5, 0, "BBUProgrammer", "", "Failed disconnecting after pushing secondary loader\n", v18, v19, v20, v22);
            }
          }
        }
      }
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v11 = 74;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v11 = 74;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_26;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0) {
      _BBULog(13, 0, "BBUProgrammer", "", "not connected to programmer\n", v5, v6, v7, v22);
    }
  }
LABEL_26:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v11);
  pthread_mutex_unlock(v4);
  return v11;
}

void sub_21DF622F4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Programmer::processItems(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  int64_t v59 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 8), "Sending Images");
  if (!*(unsigned char *)(a1 + 32))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        goto LABEL_8;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0) {
      _BBULog(13, 0, "BBUProgrammer", "", "not connected to programmer\n", v10, v11, v12, v58);
    }
LABEL_8:
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v14 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      uint64_t v15 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      blocunint64_t k = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v15, "BBUError", QOS_CLASS_UTILITY, &block);
      if (block) {
        dispatch_release(block);
      }
      v15->__on_zero_shared_weaunint64_t k = 0;
      v15[1].~__shared_weak_count = 0;
      v15[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v70, v15);
      long long v16 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v17 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v16;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      std::string::size_type size = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
      if (v70.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v70.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      uint64_t v14 = qword_26AA89AB0;
    }
    uint64_t v19 = (std::__shared_weak_count *)off_26AA89AB8;
    uint64_t v68 = v14;
    long long v69 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string __p = operator new(0x20uLL);
    long long v67 = xmmword_21DFAB650;
    strcpy((char *)__p, "not connected to programmer\n");
    v70.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
    v70.__r_.__value_.__l.__size_ = 0x40000000;
    v70.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    long long v71 = &__block_descriptor_tmp_8;
    uint64_t v72 = v14;
    p_p = &__p;
    int v74 = 12;
    long long v75 = &v70;
    blocunint64_t k = MEMORY[0x263EF8330];
    uint64_t v77 = 0x40000000;
    int v78 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v79 = &__block_descriptor_tmp_13_0;
    uint64_t v80 = v14;
    uint64_t v81 = &v75;
    uint64_t v20 = *(NSObject **)(v14 + 16);
    if (*(void *)(v14 + 24))
    {
      dispatch_async_and_wait(v20, &block);
      if ((SHIBYTE(v67) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      dispatch_sync(v20, &block);
      if ((SHIBYTE(v67) & 0x80000000) == 0)
      {
LABEL_23:
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        uint64_t v21 = 74;
        goto LABEL_152;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
  unsigned int v65 = 256;
  if (a4)
  {
    uint64_t v13 = 256;
    goto LABEL_42;
  }
  while (1)
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)a1 + 184))(a1, &v65);
    if (v21)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          goto LABEL_37;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          goto LABEL_37;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(13, 0, "BBUProgrammer", "", "failed connecting to sahara\n", v22, v23, v24, v58);
      }
LABEL_37:
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      uint64_t v25 = qword_26AA89AB0;
      if (qword_26AA89AB0)
      {
        size_t v26 = (std::__shared_weak_count *)off_26AA89AB8;
        uint64_t v68 = qword_26AA89AB0;
        long long v69 = off_26AA89AB8;
        if (!off_26AA89AB8)
        {
LABEL_40:
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string __p = operator new(0x20uLL);
          long long v67 = xmmword_21DFAB650;
          strcpy((char *)__p, "failed connecting to sahara\n");
          goto LABEL_51;
        }
LABEL_39:
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_40;
      }
      uint64_t v38 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      blocunint64_t k = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v38, "BBUError", QOS_CLASS_UTILITY, &block);
      if (block) {
        dispatch_release(block);
      }
      v38->__on_zero_shared_weaunint64_t k = 0;
      v38[1].~__shared_weak_count = 0;
      v38[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v70, v38);
      long long v39 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v40 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v39;
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        uint64_t v41 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
        if (!v70.__r_.__value_.__l.__size_) {
          goto LABEL_97;
        }
      }
      else
      {
        uint64_t v41 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
        if (!v70.__r_.__value_.__l.__size_) {
          goto LABEL_97;
        }
      }
      if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        uint64_t v25 = qword_26AA89AB0;
        size_t v26 = (std::__shared_weak_count *)off_26AA89AB8;
        uint64_t v68 = qword_26AA89AB0;
        long long v69 = off_26AA89AB8;
        if (!off_26AA89AB8) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
LABEL_97:
      uint64_t v25 = qword_26AA89AB0;
      size_t v26 = (std::__shared_weak_count *)off_26AA89AB8;
      uint64_t v68 = qword_26AA89AB0;
      long long v69 = off_26AA89AB8;
      if (!off_26AA89AB8) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    uint64_t v13 = v65;
LABEL_42:
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, v13, a2, a3, a4, a5, a8, a9);
    if (v21)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          goto LABEL_47;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
          goto LABEL_47;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(13, 0, "BBUProgrammer", "", "failed handling sahara mode operation\n", v27, v28, v29, v58);
      }
LABEL_47:
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      uint64_t v25 = qword_26AA89AB0;
      if (qword_26AA89AB0)
      {
        size_t v26 = (std::__shared_weak_count *)off_26AA89AB8;
        uint64_t v68 = qword_26AA89AB0;
        long long v69 = off_26AA89AB8;
        if (!off_26AA89AB8)
        {
LABEL_50:
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string __p = operator new(0x28uLL);
          long long v67 = xmmword_21DFAD720;
          strcpy((char *)__p, "failed handling sahara mode operation\n");
LABEL_51:
          v70.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
          v70.__r_.__value_.__l.__size_ = 0x40000000;
          v70.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
          long long v71 = &__block_descriptor_tmp_8;
          uint64_t v72 = v25;
          p_p = &__p;
          int v74 = 12;
          long long v75 = &v70;
          blocunint64_t k = MEMORY[0x263EF8330];
          uint64_t v77 = 0x40000000;
          int v78 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          uint64_t v79 = &__block_descriptor_tmp_13_0;
          uint64_t v80 = v25;
          uint64_t v81 = &v75;
          uint64_t v30 = *(NSObject **)(v25 + 16);
          if (*(void *)(v25 + 24))
          {
            dispatch_async_and_wait(v30, &block);
            if ((SHIBYTE(v67) & 0x80000000) == 0)
            {
LABEL_54:
              if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
              if (v65 != 3) {
                goto LABEL_150;
              }
LABEL_58:
              if (gBBULogMaskGet(void)::once == -1)
              {
                if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
                  goto LABEL_62;
                }
              }
              else
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
                  goto LABEL_62;
                }
              }
              if ((gBBULogVerbosity & 0x80000000) == 0) {
                _BBULog(5, 0, "BBUProgrammer", "", "not performing disconnect as the previous mode was CommandMode\n", v27, v28, v29, v58);
              }
LABEL_62:
              if (v21) {
                goto LABEL_150;
              }
              goto LABEL_63;
            }
          }
          else
          {
            dispatch_sync(v30, &block);
            if ((SHIBYTE(v67) & 0x80000000) == 0) {
              goto LABEL_54;
            }
          }
          operator delete(__p);
          goto LABEL_54;
        }
LABEL_49:
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_50;
      }
      int v42 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      blocunint64_t k = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v42, "BBUError", QOS_CLASS_UTILITY, &block);
      if (block) {
        dispatch_release(block);
      }
      v42->__on_zero_shared_weaunint64_t k = 0;
      v42[1].~__shared_weak_count = 0;
      v42[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v70, v42);
      long long v43 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v44 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v43;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        uint64_t v45 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
        if (!v70.__r_.__value_.__l.__size_) {
          goto LABEL_105;
        }
      }
      else
      {
        uint64_t v45 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
        if (!v70.__r_.__value_.__l.__size_) {
          goto LABEL_105;
        }
      }
      if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        uint64_t v25 = qword_26AA89AB0;
        size_t v26 = (std::__shared_weak_count *)off_26AA89AB8;
        uint64_t v68 = qword_26AA89AB0;
        long long v69 = off_26AA89AB8;
        if (!off_26AA89AB8) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
LABEL_105:
      uint64_t v25 = qword_26AA89AB0;
      size_t v26 = (std::__shared_weak_count *)off_26AA89AB8;
      uint64_t v68 = qword_26AA89AB0;
      long long v69 = off_26AA89AB8;
      if (!off_26AA89AB8) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
    if (v65 == 3) {
      goto LABEL_58;
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)a1 + 248))(a1, &v65);
    if (v21) {
      break;
    }
LABEL_63:
    switch(v65)
    {
      case 0u:
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_71;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_71;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(5, 0, "BBUProgrammer", "", "Next image requested\n", v27, v28, v29, v58);
        }
        goto LABEL_71;
      case 1u:
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_72;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_72;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(5, 0, "BBUProgrammer", "", "All images transferred\n", v27, v28, v29, v58);
        }
        goto LABEL_72;
      case 2u:
        goto LABEL_72;
      case 3u:
        goto LABEL_71;
      default:
        if (v65 != 256)
        {
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
              goto LABEL_123;
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
              goto LABEL_123;
            }
          }
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            char v46 = v65;
            ETLSAHModeAsString();
            _BBULog(5, 0, "BBUProgrammer", "", "unexpected hello disconnect mode %u, %s\n", v47, v48, v49, v46);
          }
LABEL_123:
          pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          uint64_t v50 = qword_26AA89AB0;
          if (!qword_26AA89AB0)
          {
            uint64_t v51 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
            blocunint64_t k = 0;
            ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v51, "BBUError", QOS_CLASS_UTILITY, &block);
            if (block) {
              dispatch_release(block);
            }
            v51->__on_zero_shared_weaunint64_t k = 0;
            v51[1].~__shared_weak_count = 0;
            v51[1].~__shared_weak_count_0 = 0;
            std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v70, v51);
            long long v52 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
            *(_OWORD *)&v70.__r_.__value_.__l.__data_ = 0uLL;
            uint64_t v53 = (std::__shared_weak_count *)off_26AA89AB8;
            *(_OWORD *)&qword_26AA89AB0 = v52;
            if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
            uint64_t v54 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
            if (v70.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(v70.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
            uint64_t v50 = qword_26AA89AB0;
          }
          uint64_t v55 = (std::__shared_weak_count *)off_26AA89AB8;
          uint64_t v68 = v50;
          long long v69 = off_26AA89AB8;
          if (off_26AA89AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string __p = operator new(0x28uLL);
          long long v67 = xmmword_21DFAD1B0;
          strcpy((char *)__p, "Unexpected hello disconnect mode\n");
          v70.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
          v70.__r_.__value_.__l.__size_ = 0x40000000;
          v70.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
          long long v71 = &__block_descriptor_tmp_8;
          uint64_t v72 = v50;
          p_p = &__p;
          int v74 = 12;
          long long v75 = &v70;
          blocunint64_t k = MEMORY[0x263EF8330];
          uint64_t v77 = 0x40000000;
          int v78 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          uint64_t v79 = &__block_descriptor_tmp_13_0;
          uint64_t v80 = v50;
          uint64_t v81 = &v75;
          int v56 = *(NSObject **)(v50 + 16);
          if (*(void *)(v50 + 24))
          {
            dispatch_async_and_wait(v56, &block);
            if ((SHIBYTE(v67) & 0x80000000) == 0) {
              goto LABEL_138;
            }
          }
          else
          {
            dispatch_sync(v56, &block);
            if ((SHIBYTE(v67) & 0x80000000) == 0)
            {
LABEL_138:
              if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
              uint64_t v21 = 12;
              goto LABEL_152;
            }
          }
          operator delete(__p);
          goto LABEL_138;
        }
LABEL_71:
        if (a4)
        {
LABEL_72:
          uint64_t v21 = 0;
          goto LABEL_155;
        }
        unsigned int v65 = 256;
        break;
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
    {
LABEL_77:
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(5, 0, "BBUProgrammer", "", "Failed disconnecting for image\n", v27, v28, v29, v58);
      }
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0) {
      goto LABEL_77;
    }
  }
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  uint64_t v31 = qword_26AA89AB0;
  if (!qword_26AA89AB0)
  {
    uint64_t v32 = (BBUError *)operator new(0x38uLL);
    BBUError::BBUError(v32);
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v70, (std::__shared_weak_count_vtbl *)v32);
    long long v33 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v34 = (std::__shared_weak_count *)off_26AA89AB8;
    *(_OWORD *)&qword_26AA89AB0 = v33;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    uint64_t v35 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
    if (v70.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v70.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    uint64_t v31 = qword_26AA89AB0;
  }
  uint64_t v36 = (std::__shared_weak_count *)off_26AA89AB8;
  uint64_t v68 = v31;
  long long v69 = off_26AA89AB8;
  if (off_26AA89AB8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  std::string __p = operator new(0x20uLL);
  long long v67 = xmmword_21DFAB690;
  strcpy((char *)__p, "Failed disconnecting for image\n");
  v70.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  v70.__r_.__value_.__l.__size_ = 0x40000000;
  v70.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  long long v71 = &__block_descriptor_tmp_8;
  uint64_t v72 = v31;
  p_p = &__p;
  int v74 = 12;
  long long v75 = &v70;
  blocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v77 = 0x40000000;
  int v78 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v79 = &__block_descriptor_tmp_13_0;
  uint64_t v80 = v31;
  uint64_t v81 = &v75;
  uint64_t v37 = *(NSObject **)(v31 + 16);
  if (*(void *)(v31 + 24)) {
    dispatch_async_and_wait(v37, &block);
  }
  else {
    dispatch_sync(v37, &block);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(__p);
  }
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_150:
  if (v21 != 7 && v21 != 28)
  {
LABEL_152:
    v70.__r_.__value_.__s.__data_[15] = -86;
    v70.__r_.__value_.__r.__words[2] = 0xEAAAAAAAAAAAAAALL;
    strcpy((char *)&v70, "Hit an error. ");
    if (a4)
    {
      std::string::append(&v70, "Proceed for core dumps?", 0x17uLL);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_155:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v21);
  pthread_mutex_unlock(v59);
  return v21;
}

void sub_21DF6346C()
{
  operator delete(v0);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  JUMPOUT(0x21DF63584);
}

void sub_21DF634E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21DF63584);
}

void sub_21DF634FC()
{
  uint64_t v2 = *(NSObject **)(v1 - 144);
  if (v2) {
    dispatch_release(v2);
  }
  operator delete(v0);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  JUMPOUT(0x21DF63584);
}

void sub_21DF63580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_mutex_t *a12)
{
}

uint64_t BBUEUR10Programmer::handleSaharaMode_nl(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11 = a2;
  if (a4)
  {
    BOOL v13 = a2 == 2;
    if (a2 >= 2) {
      goto LABEL_3;
    }
LABEL_12:
    uint64_t v18 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)a1 + 224))(a1, a1 + 10);
    if (v18)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          return v18;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          return v18;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        uint64_t v19 = "failed sending image\n";
        goto LABEL_33;
      }
    }
    return v18;
  }
  a4 = (a1[1070] - 8);
  BOOL v13 = a2 == 2;
  if (a2 < 2) {
    goto LABEL_12;
  }
LABEL_3:
  if (v13) {
    return 28;
  }
  if (a2 != 256)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v18 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v18;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v18 = 12;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v18;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      ETLSAHModeAsString();
      _BBULog(5, 0, "BBUProgrammer", "", "unexpected hello start mode %u, %s\n", v20, v21, v22, v11);
    }
    return v18;
  }
  if (a5)
  {
LABEL_23:
    uint64_t v23 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, a3, a4, a6, 0, a5, a7);
    if (v23)
    {
      uint64_t v18 = v23;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          return v18;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          return v18;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        uint64_t v19 = "failed handling sahara send hashes command\n";
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v18 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 200))(a1);
      if (v18)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            return v18;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            return v18;
          }
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          uint64_t v19 = "failed handling maverick end\n";
          goto LABEL_33;
        }
      }
    }
    return v18;
  }
  uint64_t Nonce_nl = BBUEUR4Programmer::handleMaverickGetNonce_nl((uint64_t)a1, 0);
  if (!Nonce_nl)
  {
    a4 = 0;
    goto LABEL_23;
  }
  uint64_t v18 = Nonce_nl;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      return v18;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      return v18;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    uint64_t v19 = "failed getting nonce\n";
LABEL_33:
    _BBULog(5, 0, "BBUProgrammer", "", v19, v15, v16, v17, v25);
  }
  return v18;
}

uint64_t BBUEUR10Programmer::sendImageInternal_nl(BBUFeedback **a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = operator new[](0x100000uLL);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v48 = 0;
  if ((*((unsigned int (**)(BBUFeedback **, void *, uint64_t, char *, uint64_t *, uint64_t *, char *))*a1 + 29))(a1, v5, 0x100000, (char *)&v50 + 4, &v50, &v49, &v48))
  {
    int v9 = HIDWORD(v50);
    uint64_t v10 = a2;
    while (1)
    {
      uint64_t v10 = *(void *)(v10 + 8);
      if (v10 == a2) {
        break;
      }
      char v11 = *(void **)(v10 + 16);
      if (v11) {
      if (*((_DWORD *)v11 + 6) == v9)
      }
      {
        uint64_t v16 = *((void *)v11 + 2);
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
        v47.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        v47.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
        strcpy((char *)&v47, "unknown");
        uint64_t v20 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
        std::string::__assign_external(&v47, v20);
        uint64_t v12 = 0;
        int v15 = 1;
        int v18 = HIDWORD(v50);
        if (SHIDWORD(v50) > 1128352767) {
          goto LABEL_17;
        }
        goto LABEL_25;
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v12 = 15;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v12 = 15;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        goto LABEL_16;
      }
    }
    if (gBBULogVerbosity < 0) {
      goto LABEL_16;
    }
    BOOL v13 = "item not found in item list\n";
    uint64_t v14 = 0;
LABEL_15:
    _BBULog(5, v14, "BBUProgrammer", "", v13, v6, v7, v8, v40);
    goto LABEL_16;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v12 = 12;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  uint64_t v12 = 12;
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
  {
LABEL_9:
    if (gBBULogVerbosity < 1) {
      goto LABEL_16;
    }
    BOOL v13 = "failed receiving next segment request\n";
    uint64_t v14 = 1;
    goto LABEL_15;
  }
LABEL_16:
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v47.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v47.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)&v47, "unknown");
  int v18 = HIDWORD(v50);
  if (SHIDWORD(v50) <= 1128352767)
  {
LABEL_25:
    switch(v18)
    {
      case 16408:
        int v19 = 23;
        break;
      case 16409:
        int v19 = 24;
        break;
      case 16410:
        int v19 = 25;
        break;
      case 16411:
        int v19 = 26;
        break;
      case 16412:
        int v19 = 27;
        break;
      case 16413:
        int v19 = 28;
        break;
      case 16414:
        int v19 = 29;
        break;
      case 16415:
        int v19 = 30;
        break;
      case 16416:
        int v19 = 31;
        break;
      case 16417:
        int v19 = 32;
        break;
      case 16418:
        int v19 = 33;
        break;
      default:
        int v21 = v18 - 6;
        int v19 = 3;
        switch(v21)
        {
          case 0:
            int v19 = 9;
            goto LABEL_31;
          case 2:
            int v19 = 7;
            goto LABEL_31;
          case 10:
            int v19 = 15;
            goto LABEL_31;
          case 15:
            int v19 = 1;
            goto LABEL_31;
          case 17:
            goto LABEL_31;
          case 22:
            int v19 = 8;
            goto LABEL_31;
          case 23:
            int v19 = 10;
            goto LABEL_31;
          case 24:
            int v19 = 14;
            goto LABEL_31;
          case 25:
            int v19 = 11;
            goto LABEL_31;
          default:
            goto LABEL_78;
        }
    }
    goto LABEL_31;
  }
LABEL_17:
  if (v18 > 1346454271)
  {
    if (v18 == 1346454272)
    {
      int v19 = 20;
      goto LABEL_31;
    }
    if (v18 == 1347571542)
    {
      int v19 = 19;
      goto LABEL_31;
    }
LABEL_78:
    int v23 = 0;
    uint64_t v22 = a1[1];
    goto LABEL_34;
  }
  if (v18 == 1128352768)
  {
    int v19 = 18;
    goto LABEL_31;
  }
  if (v18 != 1128679168) {
    goto LABEL_78;
  }
  int v19 = 22;
LABEL_31:
  uint64_t v22 = a1[1];
  if (*((unsigned char *)v22 + 44)) {
    *((_DWORD *)v22 + 10) = v19;
  }
  int v23 = 1;
LABEL_34:
  *((unsigned char *)&v43.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v43, "Sending Image '");
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &v47;
  }
  else {
    uint64_t v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  size_t v26 = std::string::append(&v43, (const std::string::value_type *)v24, size);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  char v42 = 1;
  strcpy(__s, "'");
  uint64_t v28 = std::string::append(&v44, __s, 1uLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  std::string::size_type v46 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(BBUFeedback *, void **, void, uint64_t))(*(void *)v22 + 32))(v22, __p, 0, v17);
  if (SHIBYTE(v46) < 0)
  {
    operator delete(__p[0]);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_42:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_51;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v44.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if (v48) {
      int v30 = 0;
    }
    else {
      int v30 = v15;
    }
    if (v30 == 1) {
      goto LABEL_56;
    }
    goto LABEL_71;
  }
LABEL_52:
  operator delete(v43.__r_.__value_.__l.__data_);
  if (v48) {
    int v31 = 0;
  }
  else {
    int v31 = v15;
  }
  if (v31 == 1)
  {
    while (1)
    {
LABEL_56:
      if (v17 < (int)v49 + (int)v50)
      {
        BBUFeedback::handleComment(a1[1], "Error: Chunk size is not sufficient to write payload data of the image!");
        uint64_t v12 = 72;
        goto LABEL_71;
      }
      if (((*((uint64_t (**)(BBUFeedback **, uint64_t, void *, uint64_t, uint64_t *, uint64_t *, char *, uint64_t))*a1
             + 30))(a1, v16, v5, 0x100000, &v50, &v49, (char *)&v49 + 4, v17) & 1) == 0)break;
      if (((*((uint64_t (**)(BBUFeedback **, void *, uint64_t, char *, uint64_t *, uint64_t *, char *))*a1 + 29))(a1, v5, 0x100000, (char *)&v50 + 4, &v50, &v49, &v48) & 1) == 0)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t v12 = 0;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_71;
          }
          goto LABEL_68;
        }
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t v12 = 0;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        {
LABEL_68:
          if (gBBULogVerbosity < 1) {
            goto LABEL_71;
          }
          _BBULog(5, 1, "BBUProgrammer", "", "failed receiving next segment request\n", v35, v36, v37, v40);
LABEL_70:
          uint64_t v12 = 0;
          goto LABEL_71;
        }
        goto LABEL_71;
      }
      if (v48) {
        goto LABEL_70;
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v12 = 3;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        goto LABEL_71;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v12 = 3;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        goto LABEL_71;
      }
    }
    if (gBBULogVerbosity >= 1) {
      _BBULog(5, 1, "BBUProgrammer", "", "failed transfering segment\n", v32, v33, v34, v40);
    }
  }
LABEL_71:
  if (v23) {
    BBUFeedback::endProgressBarItem(a1[1]);
  }
  (*(void (**)(BBUFeedback *, uint64_t))(*(void *)a1[1] + 48))(a1[1], v12);
  if (!v12)
  {
    CFAbsoluteTime v38 = CFAbsoluteTimeGetCurrent();
    BBUFeedback::handleComment(a1[1], "Took %f seconds", v38 - Current);
  }
  operator delete[](v5);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_21DF641C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR10Programmer::getSegmentRequestInternal_nl(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t result = 0;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return result;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t result = 0;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return result;
      }
    }
    if (gBBULogVerbosity < 1) {
      return result;
    }
    int v18 = "no response from baseband after segment transfer\n";
    uint64_t v19 = 1;
    goto LABEL_34;
  }
  if (*a2 != 4)
  {
    if (*a2 == 3)
    {
      int Data = ETLSAHCommandParseReadData();
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      int v14 = (gBBULogVerbosity >= 0) & (*(unsigned __int8 *)gBBULogMaskGet(void)::sBBULogMask >> 5);
      if (Data)
      {
        if (!v14) {
          return 1;
        }
        int v15 = *a4;
        uint64_t v16 = "request image ID %u, data offset 0x%x, data length %u\n";
LABEL_18:
        _BBULog(5, 0, "BBUProgrammer", "", v16, v10, v11, v12, v15);
        return 1;
      }
      if (!v14) {
        return 0;
      }
      int v18 = "Failed parsing read command";
      goto LABEL_33;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t result = 1;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return result;
      }
      goto LABEL_16;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 1;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
    {
LABEL_16:
      if (gBBULogVerbosity < 0) {
        return result;
      }
      int v15 = *a2;
      uint64_t v16 = "unexpected command %u";
      goto LABEL_18;
    }
    return result;
  }
  uint64_t v22 = 0;
  if (ETLSAHCommandParseEndOfImageTransfer())
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
      {
LABEL_26:
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(5, 0, "BBUProgrammer", "", "end of image %u\n", v10, v11, v12, *a4);
        }
      }
    }
    uint64_t result = 1;
    *a7 = 1;
    return result;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t result = 0;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      return result;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t result = 0;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      return result;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    int v18 = "Failed parsing image end command";
LABEL_33:
    uint64_t v19 = 0;
LABEL_34:
    _BBULog(5, v19, "BBUProgrammer", "", v18, v10, v11, v12, v21);
    return 0;
  }
  return result;
}

void sub_21DF64BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  char v21 = *(NSObject **)(v19 - 96);
  if (v21) {
    dispatch_release(v21);
  }
  operator delete(v18);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  if (a17 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Programmer::sendSegmentInternal_nl(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5, unsigned int *a6, _DWORD *a7, unsigned int a8)
{
  unsigned int v8 = *a6;
  if (*a6)
  {
    double v16 = 1.0 / (double)a8;
    while (1)
    {
      if (v8 >= a4) {
        uint64_t v18 = a4;
      }
      else {
        uint64_t v18 = v8;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, a3, v18, *a5);
      uint64_t Data = ETLSAHSendReadData();
      if (Data)
      {
        LODWORD(v23) = *a5;
        BBUFeedback::updateProgressBarItem(*(BBUFeedback **)(a1 + 8), (double)v23 * v16);
        (*(void (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *a5);
      }
      else if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0) {
          goto LABEL_14;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        {
LABEL_14:
          if (gBBULogVerbosity >= 1) {
            _BBULog(5, 1, "BBUProgrammer", "", "Failed sending data at offset 0x%x, chunk %u\n", v19, v20, v21, *a5);
          }
        }
      }
      *a6 -= v18;
      *a5 += v18;
      *a7 += v18;
      unsigned int v8 = *a6;
      if (*a6) {
        char v17 = Data;
      }
      else {
        char v17 = 0;
      }
      if ((v17 & 1) == 0) {
        return Data;
      }
    }
  }
  return 1;
}

uint64_t BBUEUR10Programmer::handleHashesQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[0] = v8;
  v41[1] = v8;
  v40[0] = v8;
  v40[1] = v8;
  v39[0] = v8;
  v39[1] = v8;
  v38[0] = v8;
  v38[1] = v8;
  v37[0] = v8;
  v37[1] = v8;
  v36[0] = v8;
  v36[1] = v8;
  v35[0] = v8;
  v35[1] = v8;
  v34[0] = v8;
  v34[1] = v8;
  v33[0] = v8;
  v33[1] = v8;
  __src[0] = v8;
  __src[1] = v8;
  if (a2)
  {
    if (ETLSAHCommandParseMaverickSendHashesQuery())
    {
      uint64_t v15 = 0;
      if (a3 && a4)
      {
        double v16 = (char *)operator new(0x148uLL);
        *(void *)double v16 = &unk_26CECA848;
        size_t v17 = off_26CECA868((BBUEURHashData *)v16);
        memcpy(v16 + 8, __src, v17);
        size_t v18 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 40, v36, v18);
        size_t v19 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 72, v37, v19);
        size_t v20 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 104, v40, v20);
        size_t v21 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 136, v38, v21);
        size_t v22 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 168, v39, v22);
        size_t v23 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 200, v33, v23);
        size_t v24 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 232, v34, v24);
        size_t v25 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 264, v35, v25);
        size_t v26 = (*(uint64_t (**)(char *))(*(void *)v16 + 32))(v16);
        memcpy(v16 + 296, v41, v26);
        (*(void (**)(char *, void))(*(void *)v16 + 24))(v16, *(void *)(a1 + 8));
        if ((*(uint64_t (**)(uint64_t, void, char *))(*(void *)a4 + 16))(a4, *(void *)(a1 + 8), v16))
        {
          uint64_t v15 = 0;
LABEL_19:
          (*(void (**)(char *))(*(void *)v16 + 8))(v16);
          return v15;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          uint64_t v15 = 33;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_19;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          uint64_t v15 = 33;
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
            goto LABEL_19;
          }
        }
        if (gBBULogVerbosity >= 1) {
          _BBULog(5, 1, "BBUProgrammer", "", "root manifest hash data mismatches baseband hash query\n", v27, v28, v29, v31);
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        uint64_t v15 = 12;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          return v15;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t v15 = 12;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
          return v15;
        }
      }
      if (gBBULogVerbosity >= 1) {
        _BBULog(5, 1, "BBUProgrammer", "", "Failed parsing maverick hash query results\n", v12, v13, v14, v31);
      }
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v15 = 2;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v15;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v15 = 2;
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
        return v15;
      }
    }
    if (gBBULogVerbosity >= 1) {
      _BBULog(5, 1, "BBUProgrammer", "", "Bad arguments:  header = %p\n", a6, a7, a8, 0);
    }
  }
  return v15;
}

void sub_21DF6534C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Programmer::collectCoreDump(BBUFeedback **a1, uint64_t a2, uint64_t a3)
{
  int v14 = 2;
  *((_DWORD *)a1 + 1071) = 2;
  uint64_t v5 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v14);
  if (v5)
  {
    uint64_t v9 = v5;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return v9;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return v9;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      uint64_t v10 = "failed connecting to sahara for collecting coredump\n";
LABEL_13:
      _BBULog(13, 0, "BBUProgrammer", "", v10, v6, v7, v8, v12);
    }
    return v9;
  }
  if (v14 != 2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      uint64_t v9 = 12;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return v9;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      uint64_t v9 = 12;
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0) {
        return v9;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      uint64_t v10 = "failed to enter debug mode, unknown mode: %d \n";
      char v12 = v14;
      goto LABEL_13;
    }
    return v9;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  uint64_t v9 = BBUEUR2Programmer::collectCoreDump(a1, (uint64_t)&v13);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v9;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21DF65540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BBUEUR10Programmer::~BBUEUR10Programmer(BBUEUR10Programmer *this)
{
  *(void *)this = &unk_26CECE0F8;
  if (*((char *)this + 4327) < 0) {
    operator delete(*((void **)this + 538));
  }
  *(void *)this = &unk_26CECD638;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));

  BBUProgrammer::~BBUProgrammer(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE0F8;
  if (*((char *)this + 4327) < 0) {
    operator delete(*((void **)this + 538));
  }
  *(void *)this = &unk_26CECD638;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  BBUProgrammer::~BBUProgrammer(this);

  operator delete(v2);
}

uint64_t __cxx_global_var_init_19()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void BBUICE16Programmer::~BBUICE16Programmer(BBUICE16Programmer *this)
{
  *(void *)this = &unk_26CECE258;
  if (*((void *)this + 27))
  {
    uint64_t v2 = (void **)*((void *)this + 26);
    if (v2)
    {
      do
      {
        uint64_t v8 = (void **)*v2;
        if (*((char *)v2 + 39) < 0) {
          operator delete(v2[2]);
        }
        operator delete(v2);
        uint64_t v2 = v8;
      }
      while (v8);
    }
    *((void *)this + 26) = 0;
    uint64_t v3 = *((void *)this + 25);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 24) + 8 * i) = 0;
    }
    *((void *)this + 27) = 0;
  }
  if (*((char *)this + 279) < 0) {
    operator delete(*((void **)this + 32));
  }
  uint64_t v5 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 30);
    uint64_t v7 = (void *)*((void *)this + 29);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 29);
    }
    *((void *)this + 30) = v5;
    operator delete(v7);
  }
  uint64_t v9 = (void **)*((void *)this + 26);
  if (v9)
  {
    do
    {
      std::string v13 = (void **)*v9;
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      uint64_t v9 = v13;
    }
    while (v13);
  }
  uint64_t v10 = (void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v10) {
    operator delete(v10);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 120));
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  *(void *)this = &unk_26CECEA50;
  uint64_t v11 = (char *)this + 40;
  for (uint64_t j = *((void *)this + 6); (char *)j != v11; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v14 = *(void *)(j + 16);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  if (*((void *)this + 7))
  {
    uint64_t v16 = *((void *)this + 5);
    uint64_t v15 = (char *)*((void *)this + 6);
    uint64_t v17 = *(void *)v15;
    *(void *)(v17 + 8) = *(void *)(v16 + 8);
    **(void **)(v16 + 8) = v17;
    *((void *)this + 7) = 0;
    if (v15 != v11)
    {
      do
      {
        size_t v18 = (char *)*((void *)v15 + 1);
        operator delete(v15);
        uint64_t v15 = v18;
      }
      while (v18 != v11);
    }
  }
}

{
  void *v1;
  uint64_t vars8;

  BBUICE16Programmer::~BBUICE16Programmer(this);

  operator delete(v1);
}

uint64_t BBUICE16Programmer::addItemsToHashmap(BBUICE16Programmer *this)
{
  uint64_t v1 = (char *)this + 40;
  uint64_t v2 = (char *)*((void *)this + 6);
  if (v2 != (char *)this + 40)
  {
    uint64_t v3 = (char *)this + 192;
    while (1)
    {
      uint64_t v4 = (const void *)*((void *)v2 + 2);
      if (!v4
      {
        break;
      }
      if (!v5)
      {
        exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x4Du, (ctu::LogMessageBuffer *)"Assertion failure(ice16item && \"Error: loading programmer items!\")", v11, v12, v13, __p.__r_.__value_.__s.__data_[0]);
LABEL_15:
      }
      if (v5[55] < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 4), *((void *)v5 + 5));
      }
      else {
        std::string __p = *(std::string *)(v5 + 32);
      }
      p_p = &__p;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 5) = v4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = (char *)*((void *)v2 + 1);
      if (v2 == v1) {
        return 0;
      }
    }
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x59u, (ctu::LogMessageBuffer *)"Assertion failure(item && \"Error: loading programmer items!\")", v8, v9, v10, __p.__r_.__value_.__s.__data_[0]);
    goto LABEL_15;
  }
  return 0;
}

void sub_21DF65AB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF65AC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF65AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::ICE16Item::ICE16Item(uint64_t a1, int a2, uint64_t *lpsrc)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &unk_26CECE378;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = (std::string *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int v5 = a2 - 20480;
  if ((a2 - 20480) >= 8)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 85, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x8Cu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU Programmer item type!\")", v12, v13, v14, v18);
    goto LABEL_6;
  }
  int v7 = dword_21DFAD7C8[v5];
  uint64_t v8 = *lpsrc;
  *(_DWORD *)(a1 + 24) = v7;
  uint64_t v9 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t *))(v8 + 16))(lpsrc);
  std::string::__assign_external(v4, v9);
  if (!*(void *)(a1 + 16))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x8Fu, (ctu::LogMessageBuffer *)"Assertion failure(fImage && \"Failed to to create BBU Image for the programmer item!\")", v15, v16, v17, v18);
LABEL_6:
  }
  return a1;
}

void sub_21DF65C68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::imageDownload(BBUICE16Programmer *this)
{
  size_t v2 = *((unsigned int *)this + 73);
  if (v2)
  {
    uint64_t v3 = operator new(*((unsigned int *)this + 73));
    bzero(v3, v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v6 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 120));
  BBUFeedback::handleBeginPhase(*((BBUFeedback **)this + 1), "Sending Images");
  if (!*((unsigned char *)this + 32)) {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "not connected to programmer");
  }
  uint64_t v4 = (*(uint64_t (**)(BBUICE16Programmer *))(*(void *)this + 200))(this);
  if (v4)
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed EBL Start sequence");
    int v6 = 2;
  }
  else
  {
    int v6 = 2;
    do
    {
      uint64_t v4 = (*(uint64_t (**)(BBUICE16Programmer *, int *, void *))(*(void *)this + 192))(this, &v6, v3);
      if (v4)
      {
        BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "failed handling EBL command.");
        goto LABEL_15;
      }
    }
    while (v6 == 2);
    if (v6 == 3) {
      BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "All images transferred\n");
    }
    uint64_t v4 = 0;
  }
LABEL_15:
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), v4);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 120));
  if (v3) {
    operator delete(v3);
  }
  return v4;
}

void sub_21DF65E34(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::sendImageSegment(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v10;
  v41[8] = v10;
  v41[5] = v10;
  v41[6] = v10;
  v41[3] = v10;
  v41[4] = v10;
  v41[1] = v10;
  _OWORD v41[2] = v10;
  v41[0] = v10;
  long long v39 = v10;
  long long v40 = v10;
  long long v37 = v10;
  *(_OWORD *)std::string __p = v10;
  long long v35 = v10;
  long long v36 = v10;
  long long v34 = v10;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v34);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Reading file '", 14);
  uint64_t v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  size_t v13 = strlen(v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' (offset=", 10);
  uint64_t v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", length=", 9);
  uint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")", 1);
  uint64_t v17 = *(void *)(a1 + 8);
  if ((BYTE8(v40) & 0x10) != 0)
  {
    uint64_t v20 = v40;
    if ((unint64_t)v40 < *((void *)&v37 + 1))
    {
      *(void *)&long long v40 = *((void *)&v37 + 1);
      uint64_t v20 = *((void *)&v37 + 1);
    }
    size_t v21 = (const void *)v37;
    size_t v18 = v20 - v37;
    if ((unint64_t)(v20 - v37) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_41;
    }
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      size_t v18 = 0;
      HIBYTE(v33) = 0;
      size_t v19 = __dst;
      goto LABEL_14;
    }
    size_t v21 = (const void *)*((void *)&v35 + 1);
    size_t v18 = *((void *)&v36 + 1) - *((void *)&v35 + 1);
    if (*((void *)&v36 + 1) - *((void *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_41:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    uint64_t v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v22 = v18 | 7;
    }
    uint64_t v23 = v22 + 1;
    size_t v19 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v18;
    unint64_t v33 = v23 | 0x8000000000000000;
    __dst[0] = v19;
  }
  else
  {
    HIBYTE(v33) = v18;
    size_t v19 = __dst;
    if (!v18) {
      goto LABEL_14;
    }
  }
  memmove(v19, v21, v18);
LABEL_14:
  unsigned int v24 = a4 + a3;
  *((unsigned char *)v19 + v18) = 0;
  (*(void (**)(uint64_t, void **, uint64_t, void))(*(void *)v17 + 32))(v17, __dst, a3, a4 + a3);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if (a4) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
  operator delete(__dst[0]);
  if (!a4)
  {
LABEL_31:
    uint64_t v30 = 0;
    goto LABEL_32;
  }
LABEL_18:
  while (1)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 292);
    uint64_t v26 = v25 >= a4 ? a4 : v25;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a5, v26, a3);
    if (!KTLEBLSendReadfileData()) {
      break;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0) {
        goto LABEL_25;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
      {
LABEL_25:
        if (gBBULogVerbosity >= 1) {
          _BBULog(5, 1, "BBUProgrammer", "", "Sent read data at offset 0x%08x, chunk %u\n", v27, v28, v29, a3);
        }
      }
    }
    BBUFeedback::updateProgressBarItem(*(BBUFeedback **)(a1 + 8), (double)a3 * (1.0 / (double)v24));
    (*(void (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a3);
    a3 = (v26 + a3);
    a4 -= v26;
    if (!a4) {
      goto LABEL_31;
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v30 = 3;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_32;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v30 = 3;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0) {
      goto LABEL_32;
    }
  }
  if (gBBULogVerbosity >= 1) {
    _BBULog(5, 1, "BBUProgrammer", "", "Failed sending data at offset 0x%08x, chunk %u\n", v27, v28, v29, a3);
  }
LABEL_32:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v30);
  *(void *)&long long v34 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v34 + *(void *)(v34 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v34 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C1DDF0](v41);
  return v30;
}

void sub_21DF66384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t BBUICE16Programmer::sendEBL(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  size_t v4 = v3;
  if (v3)
  {
    if (v3 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int v5 = operator new(v3);
    bzero(v5, v4);
  }
  else
  {
    int v5 = 0;
  }
  if (KTLPSIFormatEnhancedCommand())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending PSI enhanced command 'Load and execute EBL'");
    if ((KTLPSISendEnhancedCommand() & 1) == 0)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending PSI command for Loading EBL\n");
      goto LABEL_15;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0) {
        goto LABEL_9;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
      {
LABEL_9:
        if (gBBULogVerbosity >= 1) {
          _BBULog(9, 1, "BBUProgrammer", "", "Waiting for PSI command response\n", v6, v7, v8, v12);
        }
      }
    }
    if (KTLPSIReadResponse())
    {
      KTLParsePSIRunning();
      long long v10 = *(BBUFeedback **)(a1 + 8);
      uint64_t v11 = (const char *)PSIModeDescription();
      BBUFeedback::handleComment(v10, "Unexpected PSI running mode %d (%s)\n", 0, v11);
    }
    else
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed reading PSI command response\n");
    }
  }
LABEL_15:
  if (v5) {
    operator delete(v5);
  }
  return 3;
}

void sub_21DF669DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::readPSIRunningMode(uint64_t a1, int *a2)
{
  __int16 v26 = -21846;
  *a2 = 0;
  if (KTLPSIReadResponse())
  {
    char v4 = KTLParsePSIRunning();
    int v5 = *(BBUFeedback **)(a1 + 8);
    if (v4)
    {
      int v6 = *a2;
      uint64_t v7 = (const char *)PSIModeDescription();
      BBUFeedback::handleComment(v5, "PSI-Running mode 0x%x (%s)", v6, v7);
      return 0;
    }
    BBUFeedback::handleComment(v5, "Failed reading PSI-RAM Running status\n");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v16 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      uint64_t v17 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      blocunint64_t k = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v17, "BBUError", QOS_CLASS_UTILITY, &block);
      if (block) {
        dispatch_release(block);
      }
      v17->__on_zero_shared_weaunint64_t k = 0;
      v17[1].~__shared_weak_count = 0;
      v17[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v27, v17);
      long long v18 = v27;
      long long v27 = 0uLL;
      size_t v19 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v18;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      uint64_t v20 = (std::__shared_weak_count *)*((void *)&v27 + 1);
      if (*((void *)&v27 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v16 = qword_26AA89AB0;
    }
    uint64_t v14 = (std::__shared_weak_count *)off_26AA89AB8;
    uint64_t v24 = v16;
    unsigned int v25 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string __p = operator new(0x28uLL);
    long long v23 = xmmword_21DFAD720;
    strcpy((char *)__p, "Failed reading PSI-RAM Running status\n");
    *(void *)&long long v27 = MEMORY[0x263EF8330];
    *((void *)&v27 + 1) = 0x40000000;
    uint64_t v28 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    uint64_t v29 = &__block_descriptor_tmp_8;
    uint64_t v30 = v16;
    p_p = &__p;
    int v32 = 3;
    unint64_t v33 = &v27;
    blocunint64_t k = MEMORY[0x263EF8330];
    uint64_t v35 = 0x40000000;
    long long v36 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    long long v37 = &__block_descriptor_tmp_13_0;
    uint64_t v38 = v16;
    long long v39 = &v33;
    size_t v21 = *(NSObject **)(v16 + 16);
    if (*(void *)(v16 + 24))
    {
      dispatch_async_and_wait(v21, &block);
      if ((SHIBYTE(v23) & 0x80000000) == 0)
      {
LABEL_35:
        if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return 3;
        }
        goto LABEL_42;
      }
    }
    else
    {
      dispatch_sync(v21, &block);
      if ((SHIBYTE(v23) & 0x80000000) == 0) {
        goto LABEL_35;
      }
    }
    operator delete(__p);
    goto LABEL_35;
  }
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed reading PSI-RAM Running status\n");
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  uint64_t v9 = qword_26AA89AB0;
  if (!qword_26AA89AB0)
  {
    long long v10 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    blocunint64_t k = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v10, "BBUError", QOS_CLASS_UTILITY, &block);
    if (block) {
      dispatch_release(block);
    }
    v10->__on_zero_shared_weaunint64_t k = 0;
    v10[1].~__shared_weak_count = 0;
    v10[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v27, v10);
    long long v11 = v27;
    long long v27 = 0uLL;
    char v12 = (std::__shared_weak_count *)off_26AA89AB8;
    *(_OWORD *)&qword_26AA89AB0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    size_t v13 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    if (*((void *)&v27 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v9 = qword_26AA89AB0;
  }
  uint64_t v14 = (std::__shared_weak_count *)off_26AA89AB8;
  uint64_t v24 = v9;
  unsigned int v25 = off_26AA89AB8;
  if (off_26AA89AB8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  std::string __p = operator new(0x28uLL);
  long long v23 = xmmword_21DFAD720;
  strcpy((char *)__p, "Failed reading PSI-RAM Running status\n");
  *(void *)&long long v27 = MEMORY[0x263EF8330];
  *((void *)&v27 + 1) = 0x40000000;
  uint64_t v28 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  uint64_t v29 = &__block_descriptor_tmp_8;
  uint64_t v30 = v9;
  p_p = &__p;
  int v32 = 3;
  unint64_t v33 = &v27;
  blocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v35 = 0x40000000;
  long long v36 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  long long v37 = &__block_descriptor_tmp_13_0;
  uint64_t v38 = v9;
  long long v39 = &v33;
  uint64_t v15 = *(NSObject **)(v9 + 16);
  if (*(void *)(v9 + 24))
  {
    dispatch_async_and_wait(v15, &block);
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    dispatch_sync(v15, &block);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_18:
      if (!v14) {
        return 3;
      }
      goto LABEL_40;
    }
  }
  operator delete(__p);
  if (!v14) {
    return 3;
  }
LABEL_40:
  if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return 3;
  }
LABEL_42:
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return 3;
}

void sub_21DF66F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(NSObject **)(v15 - 80);
  if (v17) {
    dispatch_release(v17);
  }
  operator delete(v14);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_21DF67018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::handleEBLStart(BBUICE16Programmer *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  size_t v2 = (char *)this + 88;
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 111))
    {
      size_t v3 = strlen((const char *)this + 88);
      if (v3 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_4;
      }
LABEL_9:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_10:
    int HardwareConfig = TelephonyRadiosGetHardwareConfig();
    LODWORD(v19) = TelephonyRadiosGetProduct() | (HardwareConfig << 30);
    uint64_t v7 = (BBUFeedback *)*((void *)this + 1);
    TelephonyRadiosGetProduct();
    TelephonyRadiosGetHardwareConfig();
    BBUFeedback::handleComment(v7, "Product Type : %d and Hardware Config: 0x%x in Reserved%lu\n");
    goto LABEL_21;
  }
  if (!*((void *)this + 12)) {
    goto LABEL_10;
  }
  size_t v2 = *(const char **)v2;
  size_t v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_9;
  }
LABEL_4:
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v5 = operator new(v8 + 1);
    __dst[1] = v4;
    int64_t v18 = v9 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v18) = v3;
    int v5 = __dst;
    if (!v3) {
      goto LABEL_15;
    }
  }
  memmove(v5, v2, v4);
LABEL_15:
  *((unsigned char *)v5 + v4) = 0;
  int v10 = SHIBYTE(v18);
  long long v11 = (void *)__dst[0];
  if (v18 >= 0) {
    char v12 = (const char *)__dst;
  }
  else {
    char v12 = (const char *)__dst[0];
  }
  int v13 = strtoul(v12, 0, 16);
  if (v10 < 0) {
    operator delete(v11);
  }
  LODWORD(v19) = v13;
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Overriding Product Type : %u and Hardware Config: 0x%x in Reserved %zu\n");
LABEL_21:
  if ((KTLEBLReceivePacket() & 1) == 0)
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed to receive Start packet from EBL.\n");
    return 3;
  }
  if ((KTLEBLParseStartInfo() & 1) == 0)
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Invalid start packet recieved from EBL.\n");
    return 3;
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
      goto LABEL_25;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
    {
LABEL_25:
      if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)) {
        goto LABEL_26;
      }
      goto LABEL_27;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
  if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
  {
LABEL_26:
    if (!*((unsigned char *)this + 82)) {
      goto LABEL_28;
    }
  }
LABEL_27:
  HIDWORD(v19) = 1381192786;
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Sending restore mode cookie in Reserved%lu\n", 1);
LABEL_28:
  if (KTLEBLCreateStartACKPacket())
  {
    char v14 = KTLEBLSendPacket();
    uint64_t v15 = (BBUFeedback *)*((void *)this + 1);
    if (v14)
    {
      BBUFeedback::handleComment(v15, "EBL started, continue to image download.");
      return 0;
    }
    BBUFeedback::handleComment(v15, "Failed sending Start ACK packet.\n");
  }
  else
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed to create Start ACK packet.\n");
  }
  return 3;
}

uint64_t BBUICE16Programmer::handleEBLReadfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = operator new(0x400uLL);
  bzero(v5, 0x400uLL);
  unsigned int v33 = -1431655766;
  unsigned int v34 = -1431655766;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_5, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_5))
  {
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26AA8EFE0, &dword_21DE8A000);
    __cxa_guard_release(&_MergedGlobals_5);
  }
  if ((KTLEBLParseReadfileExt() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing Readfile command.\n");
    uint64_t v9 = 3;
    goto LABEL_54;
  }
  size_t v6 = strlen((const char *)v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v32 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v32) = v6;
    p_dst = &__dst;
    if (!v6) {
      goto LABEL_12;
    }
  }
  memcpy(p_dst, v5, v7);
LABEL_12:
  *((unsigned char *)p_dst + v7) = 0;
  char v12 = std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::find<std::string>((void *)(a1 + 192), (uint64_t)&__dst);
  int v13 = v12;
  if (SHIBYTE(v32) < 0)
  {
    operator delete((void *)__dst);
    if (v13)
    {
LABEL_14:
      size_t v14 = strlen((const char *)v5);
      if (v14 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v15 = v14;
      if (v14 >= 0x17)
      {
        uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v17 = v14 | 7;
        }
        uint64_t v18 = v17 + 1;
        uint64_t v16 = (long long *)operator new(v17 + 1);
        *((void *)&__dst + 1) = v15;
        unint64_t v32 = v18 | 0x8000000000000000;
        *(void *)&long long __dst = v16;
      }
      else
      {
        HIBYTE(v32) = v14;
        uint64_t v16 = &__dst;
        if (!v14)
        {
LABEL_24:
          *((unsigned char *)v16 + v15) = 0;
          uint64_t v35 = &__dst;
          uint64_t v19 = (const void *)*((void *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 192, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, &v35)+ 5);
          if (v19)
          {
            if ((SHIBYTE(v32) & 0x80000000) == 0) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v20 = 0;
            if ((SHIBYTE(v32) & 0x80000000) == 0)
            {
LABEL_27:
              uint64_t v21 = v20[2];
              BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Loaded file '%s'\n", (const char *)v5);
              size_t v22 = strlen((const char *)v5);
              size_t v23 = v22;
              if (byte_26AA8EFF7 < 0)
              {
                if (v22 != -1)
                {
                  uint64_t v24 = *((void *)&xmmword_26AA8EFE0 + 1);
                  if (*((void *)&xmmword_26AA8EFE0 + 1) >= v22) {
                    size_t v26 = v22;
                  }
                  else {
                    size_t v26 = *((void *)&xmmword_26AA8EFE0 + 1);
                  }
                  if (memcmp((const void *)xmmword_26AA8EFE0, v5, v26)) {
                    goto LABEL_42;
                  }
                  goto LABEL_41;
                }
              }
              else if (v22 != -1)
              {
                uint64_t v24 = byte_26AA8EFF7;
                if (byte_26AA8EFF7 >= v22) {
                  size_t v25 = v22;
                }
                else {
                  size_t v25 = byte_26AA8EFF7;
                }
                if (memcmp(&xmmword_26AA8EFE0, v5, v25)) {
                  goto LABEL_42;
                }
LABEL_41:
                if (v24 == v23)
                {
LABEL_53:
                  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(*(void *)a1 + 152))(a1, v21, v34, v33, a3);
                  goto LABEL_54;
                }
LABEL_42:
                if (v23 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                if (v23 >= 0x17)
                {
                  uint64_t v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v23 | 7) != 0x17) {
                    uint64_t v28 = v23 | 7;
                  }
                  uint64_t v29 = v28 + 1;
                  long long v27 = (long long *)operator new(v28 + 1);
                  *((void *)&__dst + 1) = v23;
                  unint64_t v32 = v29 | 0x8000000000000000;
                  *(void *)&long long __dst = v27;
                }
                else
                {
                  HIBYTE(v32) = v23;
                  long long v27 = &__dst;
                  if (!v23) {
                    goto LABEL_50;
                  }
                }
                memcpy(v27, v5, v23);
LABEL_50:
                *((unsigned char *)v27 + v23) = 0;
                if (byte_26AA8EFF7 < 0) {
                  operator delete((void *)xmmword_26AA8EFE0);
                }
                xmmword_26AA8EFE0 = __dst;
                unk_26AA8EFF0 = v32;
                goto LABEL_53;
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          operator delete((void *)__dst);
          goto LABEL_27;
        }
      }
      memcpy(v16, v5, v15);
      goto LABEL_24;
    }
  }
  else if (v12)
  {
    goto LABEL_14;
  }
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "file '%s' not found in item list\n", (const char *)v5);
  uint64_t v9 = 15;
LABEL_54:
  operator delete(v5);
  return v9;
}

void sub_21DF6778C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::handleEBLDone(uint64_t a1)
{
  size_t v2 = (int *)(a1 + 296);
  if (KTLEBLParseDone())
  {
    int v3 = *v2;
    if (*v2 == 256)
    {
      if (KTLEBLCreateDoneACKPacket() & 1) != 0 && (KTLEBLSendPacket())
      {
        return 0;
      }
      else
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending Done ACK packet.\n");
        return 3;
      }
    }
    else
    {
      if ((v3 - 257) >= 0x18)
      {
        if (v3 == 281) {
          int v5 = "ERR BIN";
        }
        else {
          int v5 = "Unknown";
        }
      }
      else
      {
        int v5 = off_26448A118[v3 - 257];
      }
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Baseband reported failure during image download (%s).\n", v5);
      if (*v2 == 261) {
        return 65;
      }
      else {
        return 3;
      }
    }
  }
  else
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing EBL Done packet.\n");
    return 3;
  }
}

uint64_t BBUICE16Programmer::handleEBLCommand(BBUFeedback **a1, _DWORD *a2, uint64_t a3)
{
  if (KTLEBLReceivePacket())
  {
    if (dword_26AA8EFF8 == 4)
    {
      uint64_t result = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 27))(a1, &dword_26AA8EFF8);
      if (!result) {
        *a2 = 3;
      }
    }
    else if (dword_26AA8EFF8 == 3)
    {
      size_t v6 = (uint64_t (*)(BBUFeedback **, int *, uint64_t))*((void *)*a1 + 26);
      return v6(a1, &dword_26AA8EFF8, a3);
    }
    else
    {
      BBUFeedback::handleComment(a1[1], "Received invalid EBL packet.");
      return 1;
    }
  }
  else
  {
    BBUFeedback::handleComment(a1[1], "Failed to receive EBL packet.\n");
    return 3;
  }
  return result;
}

uint64_t BBUICE16Programmer::program(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  int v55 = -1431655766;
  uint64_t v16 = (pthread_mutex_t *)(a1 + 120);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 120));
  *(_DWORD *)(a1 + 312) = a11;
  uint64_t v17 = *(unsigned int *)(a1 + 184);
  if (BBUProgrammer::addItemsFromList(a1, (uint64_t)a6))
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Error: loading programmer items!");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v18 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      uint64_t v19 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      dispatch_object_t object = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v19, "BBUError", QOS_CLASS_UTILITY, &object);
      if (object) {
        dispatch_release(object);
      }
      v19->__on_zero_shared_weaunint64_t k = 0;
      v19[1].~__shared_weak_count = 0;
      v19[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v56, v19);
      long long v20 = *(_OWORD *)v56;
      v56[0] = 0;
      v56[1] = 0;
      uint64_t v21 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      size_t v22 = (std::__shared_weak_count *)v56[1];
      if (v56[1] && !atomic_fetch_add((atomic_ullong *volatile)v56[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v18 = qword_26AA89AB0;
    }
    size_t v23 = (std::__shared_weak_count *)off_26AA89AB8;
    uint64_t v53 = v18;
    uint64_t v54 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string __p = operator new(0x28uLL);
    long long v52 = xmmword_21DFAAF20;
    strcpy((char *)__p, "Error: loading programmer items!");
    v56[0] = (void *)MEMORY[0x263EF8330];
    v56[1] = (void *)0x40000000;
    char v57 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    char v58 = &__block_descriptor_tmp_8;
    uint64_t v59 = v18;
    p_p = &__p;
    int v61 = 66;
    uint64_t v62 = v56;
    dispatch_object_t object = (dispatch_object_t)MEMORY[0x263EF8330];
    uint64_t v64 = 0x40000000;
    unsigned int v65 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v66 = &__block_descriptor_tmp_13_0;
    uint64_t v67 = v18;
    uint64_t v68 = &v62;
    uint64_t v24 = *(NSObject **)(v18 + 16);
    if (*(void *)(v18 + 24))
    {
      dispatch_async_and_wait(v24, &object);
      if ((SHIBYTE(v52) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      dispatch_sync(v24, &object);
      if ((SHIBYTE(v52) & 0x80000000) == 0)
      {
LABEL_17:
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        uint64_t v25 = 66;
        goto LABEL_46;
      }
    }
    operator delete(__p);
    goto LABEL_17;
  }
  BBUICE16Programmer::addItemsToHashmap((BBUICE16Programmer *)a1);
  if (a11 == 2)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Booted for coredump, not programming firmware");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v26 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      long long v27 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      dispatch_object_t object = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v27, "BBUError", QOS_CLASS_UTILITY, &object);
      if (object) {
        dispatch_release(object);
      }
      v27->__on_zero_shared_weaunint64_t k = 0;
      v27[1].~__shared_weak_count = 0;
      v27[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v56, v27);
      long long v28 = *(_OWORD *)v56;
      v56[0] = 0;
      v56[1] = 0;
      uint64_t v29 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v28;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      uint64_t v30 = (std::__shared_weak_count *)v56[1];
      if (v56[1] && !atomic_fetch_add((atomic_ullong *volatile)v56[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      uint64_t v26 = qword_26AA89AB0;
    }
    char v31 = (std::__shared_weak_count *)off_26AA89AB8;
    uint64_t v53 = v26;
    uint64_t v54 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string __p = operator new(0x30uLL);
    long long v52 = xmmword_21DFAD780;
    strcpy((char *)__p, "Booted for coredump, not programming firmware");
    v56[0] = (void *)MEMORY[0x263EF8330];
    v56[1] = (void *)0x40000000;
    char v57 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    char v58 = &__block_descriptor_tmp_8;
    uint64_t v59 = v26;
    p_p = &__p;
    int v61 = 28;
    uint64_t v62 = v56;
    dispatch_object_t object = (dispatch_object_t)MEMORY[0x263EF8330];
    uint64_t v64 = 0x40000000;
    unsigned int v65 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v66 = &__block_descriptor_tmp_13_0;
    uint64_t v67 = v26;
    uint64_t v68 = &v62;
    unint64_t v32 = *(NSObject **)(v26 + 16);
    if (*(void *)(v26 + 24))
    {
      dispatch_async_and_wait(v32, &object);
      if ((SHIBYTE(v52) & 0x80000000) == 0)
      {
LABEL_37:
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        goto LABEL_40;
      }
    }
    else
    {
      dispatch_sync(v32, &object);
      if ((SHIBYTE(v52) & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    operator delete(__p);
    goto LABEL_37;
  }
  if (a4)
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2, v17, a5, 1, a10);
    goto LABEL_46;
  }
  uint64_t v25 = BBUICE16Programmer::readPSIRunningMode(a1, &v55);
  if (!v25)
  {
    switch(v55)
    {
      case 462:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Running secure mode");
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t))(*(void *)a1 + 176))(a1, a2, v17, 0, 0, a10);
        if (v25)
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed executing secure mode, failing program\n");
          pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          uint64_t v38 = qword_26AA89AB0;
          if (!qword_26AA89AB0)
          {
            BBUError::create_default_global((std::__shared_weak_count_vtbl **)v56);
            std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v56);
            std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v56);
            uint64_t v38 = qword_26AA89AB0;
          }
          dispatch_object_t object = v38;
          uint64_t v64 = (uint64_t)off_26AA89AB8;
          if (off_26AA89AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string::basic_string[abi:ne180100]<0>(v56, "Failed executing secure mode, failing program\n");
          goto LABEL_87;
        }
        int v55 = 56577;
        break;
      case 56577:
        break;
      case 52480:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Coredump detected, not programming firmware");
LABEL_40:
        uint64_t v25 = 28;
        goto LABEL_46;
      default:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "PSI is not running enhanced mode, unsupported firmware\n");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        long long v39 = qword_26AA89AB0;
        if (!qword_26AA89AB0)
        {
          BBUError::create_default_global((std::__shared_weak_count_vtbl **)v56);
          std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v56);
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v56);
          long long v39 = qword_26AA89AB0;
        }
        dispatch_object_t object = v39;
        uint64_t v64 = (uint64_t)off_26AA89AB8;
        if (off_26AA89AB8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        std::string::basic_string[abi:ne180100]<0>(v56, "PSI is not running enhanced mode, unsupported firmware\n");
        BBUError::addError((uint64_t)v39, (uint64_t)v56, 9);
        if (SHIBYTE(v57) < 0) {
          operator delete(v56[0]);
        }
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
        uint64_t v25 = 9;
        goto LABEL_46;
    }
    long long v40 = (void *)(a1 + 256);
    if (!std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::find<std::string>((void *)(a1 + 192), a1 + 256))
    {
      std::string v43 = *(BBUFeedback **)(a1 + 8);
      std::string v44 = "EBL (%s) not found in item list!";
      if ((*(char *)(a1 + 279) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    v56[0] = (void *)(a1 + 256);
    uint64_t v41 = (const void *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 192, a1 + 256, (uint64_t)&std::piecewise_construct, (long long **)v56)[5];
    if (!v41
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x34Cu, (ctu::LogMessageBuffer *)"Assertion failure(eblItem && \"Error: loading EBL item!\")", v47, v48, v49, v50);
    }
    if (*((_DWORD *)v42 + 6))
    {
      std::string v43 = *(BBUFeedback **)(a1 + 8);
      std::string v44 = "EBL (%s) exists, but  is of invalid type!";
      if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      {
LABEL_78:
        BBUFeedback::handleComment(v43, v44, v40);
        uint64_t v25 = 15;
        goto LABEL_46;
      }
LABEL_77:
      long long v40 = (void *)*v40;
      goto LABEL_78;
    }
    uint64_t v25 = BBUICE16Programmer::sendEBL(a1, *((void *)v42 + 2));
    if (!v25)
    {
      pthread_mutex_unlock(v16);
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
      if (v25)
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed image download!");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        uint64_t v45 = qword_26AA89AB0;
        if (!qword_26AA89AB0)
        {
          BBUError::create_default_global((std::__shared_weak_count_vtbl **)v56);
          std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v56);
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v56);
          uint64_t v45 = qword_26AA89AB0;
        }
        dispatch_object_t object = v45;
        uint64_t v64 = (uint64_t)off_26AA89AB8;
        if (off_26AA89AB8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        std::string::basic_string[abi:ne180100]<0>(v56, "Failed image download!");
        BBUError::addError((uint64_t)v45, (uint64_t)v56, v25);
        if (SHIBYTE(v57) < 0) {
          operator delete(v56[0]);
        }
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
      }
      pthread_mutex_lock(v16);
      goto LABEL_46;
    }
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending EBL!");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v38 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      BBUError::create_default_global((std::__shared_weak_count_vtbl **)v56);
      std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v56);
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v56);
      uint64_t v38 = qword_26AA89AB0;
    }
    dispatch_object_t object = v38;
    uint64_t v64 = (uint64_t)off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string::basic_string[abi:ne180100]<0>(v56, "Failed sending EBL!");
LABEL_87:
    BBUError::addError((uint64_t)v38, (uint64_t)v56, v25);
    if (SHIBYTE(v57) < 0) {
      operator delete(v56[0]);
    }
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
  }
LABEL_46:
  if (a6)
  {
    if (a6[2])
    {
      uint64_t v34 = *a6;
      unsigned int v33 = (uint64_t *)a6[1];
      uint64_t v35 = *v33;
      *(void *)(v35 + 8) = *(void *)(*a6 + 8);
      **(void **)(v34 + 8) = v35;
      a6[2] = 0;
      if (v33 != a6)
      {
        do
        {
          long long v36 = (uint64_t *)v33[1];
          operator delete(v33);
          unsigned int v33 = v36;
        }
        while (v36 != a6);
      }
    }
    operator delete(a6);
  }
  pthread_mutex_unlock(v16);
  return v25;
}

void sub_21DF684F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_object_t object)
{
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  pthread_mutex_unlock(v25);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::collectCoreDump(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v13 = -1431655766;
  int v5 = operator new(0x1000uLL);
  bzero(v5, 0x1000uLL);
  char v12 = 0;
  uint64_t v6 = BBUICE16Programmer::readPSIRunningMode(a1, &v13);
  if (!v6)
  {
    if (v13 > 56576)
    {
      if (v13 != 56577 && v13 != 61166) {
        goto LABEL_11;
      }
    }
    else if (v13 != 462 && v13 != 52480)
    {
LABEL_11:
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "PSI is not running supported mode, unsupported firmware\n");
      uint64_t v6 = 9;
      goto LABEL_21;
    }
    BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 8), "Collecting core dump...");
    int started = KTLCDSendStartCoredumpCommand();
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed to get coredump list\n");
    if (started)
    {
      uint64_t v6 = 0;
      int v8 = 1;
    }
    else
    {
      int v8 = 0;
      uint64_t v6 = 3;
    }
    if (v8)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending 'end coredump' command\n");
      KTLCDSendEndCoredumpCommand();
    }
    uint64_t v9 = (const char *)a3;
    if (*(char *)(a3 + 23) < 0) {
      uint64_t v9 = *(const char **)a3;
    }
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Final coredump at %s", v9);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    ctu::fs::iterate_folder();
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_21:
  operator delete(v5);
  return v6;
}

void sub_21DF692BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C1DDF0](a14);
  if (a42 < 0)
  {
    operator delete(a37);
    if (!a16)
    {
LABEL_5:
      if ((*(char *)(v60 - 153) & 0x80000000) == 0)
      {
LABEL_10:
        if (*(char *)(v60 - 121) < 0)
        {
          operator delete(*(void **)(v60 - 144));
          if ((*(char *)(v60 - 97) & 0x80000000) == 0)
          {
LABEL_12:
            if ((a30 & 0x80000000) == 0)
            {
LABEL_17:
              operator delete(v59);
              _Unwind_Resume(a1);
            }
LABEL_16:
            operator delete(a25);
            operator delete(v59);
            _Unwind_Resume(a1);
          }
        }
        else if ((*(char *)(v60 - 97) & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(*(void **)(v60 - 120));
        if ((a30 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
LABEL_9:
      operator delete(*(void **)(v60 - 176));
      goto LABEL_10;
    }
  }
  else if (!a16)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((*(char *)(v60 - 153) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18BBUICE16Programmer15collectCoreDumpEP13BBUDataSourceNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v9.st_blkstd::string::size_type size = v4;
  *(timespec *)v9.st_qspare = v4;
  v9.st_birthtimespec = v4;
  *(timespec *)&v9.st_std::string::size_type size = v4;
  v9.st_mtimespec = v4;
  v9.st_ctimespec = v4;
  *(timespec *)&v9.st_uid = v4;
  v9.st_atimespec = v4;
  *(timespec *)&v9.st_dev = v4;
  int v5 = (const char *)(a2 + 21);
  memset(&v8, 170, sizeof(v8));
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v8 = *(std::string *)(a1 + 40);
  }
  ctu::path_join_impl();
  int v6 = *(unsigned __int8 *)(a2 + 20);
  if (v6 == 4)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  <DIR>", v5);
  }
  else if (v6 == 10 || v6 == 8)
  {
    memset(&v9, 0, sizeof(v9));
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v7 = &v8;
    }
    else {
      size_t v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    stat((const char *)v7, &v9);
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  0x%-10llx", v5, v9.st_size);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_21DF69604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float BBUICE16Programmer::handleCapureProgress(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  LODWORD(a4) = *a2;
  float v4 = (double)*(unint64_t *)&a4 * 100.0 / (float)a2[1];
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "\t%s: ... %0.1f%c", (const char *)(a3 + 4), v4, 37);
  return result;
}

uint64_t BBUICE16Programmer::saveCoredumpEntry(uint64_t a1, const void **a2, uint64_t a3)
{
  void v48[2] = *MEMORY[0x263EF8340];
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v3;
  long long v46 = v3;
  long long v43 = v3;
  long long v44 = v3;
  long long v42 = v3;
  std::string __p = 0;
  long long v41 = 0uLL;
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  unint64_t v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a3;
  if (v6 >= 0x17)
  {
    uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v11 = v6 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    uint64_t v7 = a3;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    int v13 = a2;
  }
  else {
    int v13 = *a2;
  }
  memmove(p_dst, v13, v5);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 47;
  std::string::size_type v14 = strlen((const char *)(v7 + 4));
  size_t v15 = std::string::append(&__dst, (const std::string::value_type *)(v7 + 4), v14);
  uint64_t v16 = (void *)v15->__r_.__value_.__r.__words[0];
  v48[0] = v15->__r_.__value_.__l.__size_;
  *(void *)((char *)v48 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
  std::string __p = v16;
  *(void *)&long long v41 = v48[0];
  *(void *)((char *)&v41 + 7) = *(void *)((char *)v48 + 7);
  HIBYTE(v41) = v17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    char v17 = HIBYTE(v41);
    uint64_t v16 = __p;
  }
  if (v17 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (void **)v16;
  }
  int v19 = open_dprotected_np((const char *)p_p, 1793, 4, 0, 420);
  if ((v19 & 0x80000000) == 0)
  {
    if ((TelephonyUtilTransportCreateWithFD() & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        uint64_t v30 = 1;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          goto LABEL_48;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        uint64_t v30 = 1;
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
          goto LABEL_48;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(1, 0, "BBUProgrammer", "", "failed creating transport with fd %i\n", v20, v21, v22, v19);
      }
      goto LABEL_48;
    }
    unsigned int v23 = HIWORD(*(_DWORD *)v7);
    if ((unsigned __int16)*(_DWORD *)v7) {
      ++v23;
    }
    if (v23 >= 0x14) {
      int v24 = 20;
    }
    else {
      int v24 = v23;
    }
    if (v23) {
      int v25 = v24;
    }
    else {
      int v25 = 1;
    }
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = *(_DWORD *)v7;
    LODWORD(__dst.__r_.__value_.__r.__words[1]) = v25;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
    int v29 = KTLCDProcessCoredumpEntry();
    if ((v29 & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
          goto LABEL_35;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_35:
          if ((gBBULogVerbosity & 0x80000000) == 0) {
            _BBULog(1, 0, "BBUProgrammer", "", "failed getting entry\n", v26, v27, v28, v38);
          }
        }
      }
    }
    uint64_t v30 = v29 ^ 1u;
LABEL_48:
    close(v19);
    TelephonyUtilTransportFree();
    goto LABEL_49;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v30 = 1;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v30 = 1;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
      goto LABEL_49;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    int v31 = SHIBYTE(v41);
    char v32 = (char)__p;
    __error();
    long long v36 = &__p;
    if (v31 < 0) {
      LOBYTE(v36) = v32;
    }
    uint64_t v30 = 1;
    _BBULog(1, 0, "BBUProgrammer", "", "failed opening file %s with fd %i errno %d\n", v33, v34, v35, (char)v36);
  }
LABEL_49:
  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
  return v30;
}

void sub_21DF69B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN18BBUICE16Programmer17saveCoredumpEntryENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP22KTLCoreDumpListEntry_ti_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160))();
}

uint64_t BBUICE16Programmer::gatherPersonalizationParameters(BBUICE16Programmer *this, BOOL a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  int v38 = 0;
  long long v37 = 0;
  unint64_t v6 = (BBUFeedback *)*((void *)this + 1);
  if (a3)
  {
    BBUFeedback::handleBeginPhase(v6, "Gathering Personalization parameters...");
    uint64_t v8 = BBUICE16Programmer::readPSIRunningMode((uint64_t)this, &v38);
    uint64_t v9 = v8;
    if (v8 || (int v10 = v38, v38 == 462))
    {
      if (!v8)
      {
        uint64_t v9 = (*(uint64_t (**)(BBUICE16Programmer *, void **))(*(void *)this + 232))(this, &v37);
        if (!v9)
        {
          int v13 = (const UInt8 *)v37 + 20;
          std::string::size_type v14 = operator new(0x10uLL);
          *std::string::size_type v14 = &unk_26CECFE08;
          v14[1] = 0;
          CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          v14[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v13, 20);
          uint64_t v16 = BBUICEPersonalizationParameters::ICEChipID::createFromChipID((BBUICEPersonalizationParameters::ICEChipID *)*((unsigned __int16 *)v37 + 1));
          char v17 = BBUICEPersonalizationParameters::ICESerialNumber::createFromSerialNumber((const UInt8 *)v37 + 8, (const unsigned __int8 *)0x60);
          uint64_t v18 = (const UInt8 *)v37 + 40;
          int v19 = operator new(0x10uLL);
          void *v19 = &unk_26CECFF28;
          v19[1] = 0;
          v19[1] = CFDataCreate(v15, v18, 32);
          int v20 = *((_DWORD *)v37 + 1);
          *((_DWORD *)this + 46) = v20 - 2;
          BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Max root packet size from PSI: %u", v20);
          free(v37);
          uint64_t v21 = *((void *)a5 + 1);
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          *((void *)a5 + 1) = v14;
          uint64_t v22 = *((void *)a5 + 2);
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          }
          *((void *)a5 + 2) = v16;
          (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 16))(a5, v17);
          (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 24))(a5, v19);
          if (v17 && v16)
          {
            unsigned int v23 = (BBUFeedback *)*((void *)this + 1);
            (*(void (**)(void **__return_ptr, void *))(*v17 + 24))(__p, v17);
            int v25 = v36 >= 0 ? (BBUpdaterCommon *)__p : (BBUpdaterCommon *)__p[0];
            uint64_t v26 = BBUpdaterCommon::redactedString(v25, v24);
            int v27 = (*(uint64_t (**)(void *))(*v16 + 24))(v16);
            BBUFeedback::handleComment(v23, "   SNUM: 0x%s / CHIPID: 0x%08x", v26, v27);
            if (v36 < 0) {
              operator delete(__p[0]);
            }
          }
          uint64_t v28 = (BBUFeedback *)*((void *)this + 1);
          (*(void (**)(void **__return_ptr, void *))(*v14 + 24))(__p, v14);
          if (v36 >= 0) {
            int v29 = __p;
          }
          else {
            int v29 = (void **)__p[0];
          }
          BBUFeedback::handleComment(v28, "   NONCE: %s", (const char *)v29);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v30 = (BBUFeedback *)*((void *)this + 1);
          (*(void (**)(void **__return_ptr, void *))(*v19 + 24))(__p, v19);
          if (v36 >= 0) {
            int v31 = __p;
          }
          else {
            int v31 = (void **)__p[0];
          }
          BBUFeedback::handleComment(v30, "   PUBLIC_KEY_HASH: %s", (const char *)v31);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          char v32 = (BBUFeedback *)*((void *)this + 1);
          int v33 = (*(uint64_t (**)(void))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3));
          BBUFeedback::handleComment(v32, "   CertID: %u", v33);
          uint64_t v9 = 0;
        }
      }
    }
    else
    {
      uint64_t v11 = (BBUFeedback *)*((void *)this + 1);
      uint64_t v12 = (const char *)PSIModeDescription();
      BBUFeedback::handleComment(v11, "Unexpected running mode 0x%x (%s), cannot gather personalization params\n", v10, v12);
      uint64_t v9 = 12;
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), v9);
  }
  else
  {
    BBUFeedback::handleComment(v6, "Not in restore mode - skipping gathering Personalization parameters...");
    return 0;
  }
  return v9;
}

void sub_21DF6A034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::handleICETestModeVector(BBUICE16Programmer *this)
{
  return 0;
}

uint64_t BBUICE16Programmer::fetchPersonalizationParameters(uint64_t a1)
{
  size_t v2 = operator new(0x4CuLL);
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *(_OWORD *)((char *)v2 + 60) = 0u;
  if ((KTLPSIFormatEnhancedCommand() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed formatting PSI enhanced command to retrieve personalization info\n");
    uint64_t v6 = 11;
    goto LABEL_15;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0) {
      goto LABEL_6;
    }
  }
  if (gBBULogVerbosity >= 1) {
    _BBULog(9, 1, "BBUProgrammer", "", "Sending PSI enhanced command 'Fetch security/personalization info'\n", v3, v4, v5, v8);
  }
LABEL_6:
  if (!KTLPSISendEnhancedCommand())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending PSI command to fetch security info\n");
LABEL_14:
    uint64_t v6 = 3;
    goto LABEL_15;
  }
  if (!KTLRawReceiveData())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed receiving personalization parameters from device\n");
    goto LABEL_14;
  }
  if ((KTLParsePSIICEPersonalizionInfo() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing personalization parameters\n");
    goto LABEL_14;
  }
  uint64_t v6 = 0;
LABEL_15:
  operator delete(v2);
  return v6;
}

void sub_21DF6A204(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::handleICESecurePSIMode(BBUFeedback **a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = 0;
  if (a4) {
    return 3;
  }
  uint64_t v6 = (*((uint64_t (**)(BBUFeedback **, void **))*a1 + 29))(a1, &v35);
  if (!v6)
  {
    int v31 = *((_DWORD *)v35 + 1);
    uint64_t v32 = a6;
    BBUFeedback::handleComment(a1[1], "Setting max root packet size from PSI: %u", v31);
    uint64_t v12 = (const UInt8 *)v35 + 20;
    int v13 = operator new(0x10uLL);
    *int v13 = &unk_26CECFE08;
    v13[1] = 0;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    v13[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v12, 20);
    CFAllocatorRef v15 = BBUICEPersonalizationParameters::ICEChipID::createFromChipID((BBUICEPersonalizationParameters::ICEChipID *)*((unsigned __int16 *)v35 + 1));
    uint64_t v16 = BBUICEPersonalizationParameters::ICESerialNumber::createFromSerialNumber((const UInt8 *)v35 + 8, (const unsigned __int8 *)0x60);
    char v17 = (const UInt8 *)v35 + 40;
    uint64_t v18 = operator new(0x10uLL);
    *uint64_t v18 = &unk_26CECFF28;
    v18[1] = 0;
    v18[1] = CFDataCreate(v14, v17, 32);
    if (!v16 || !v15)
    {
LABEL_15:
      int v24 = a1[1];
      (*(void (**)(void **__return_ptr, void *))(*v13 + 24))(__p, v13);
      if (v34 >= 0) {
        int v25 = __p;
      }
      else {
        int v25 = (void **)__p[0];
      }
      BBUFeedback::handleComment(v24, "   NONCE: %s", (const char *)v25);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(void *))(*v13 + 8))(v13);
      uint64_t v26 = a1[1];
      (*(void (**)(void **__return_ptr, void *))(*v18 + 24))(__p, v18);
      if (v34 >= 0) {
        int v27 = __p;
      }
      else {
        int v27 = (void **)__p[0];
      }
      BBUFeedback::handleComment(v26, "   PUBLIC_KEY_HASH: %s", (const char *)v27);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      a3 = (v31 - 2);
      (*(void (**)(void *))(*v18 + 8))(v18);
      if (v16) {
        (*(void (**)(void *))(*v16 + 8))(v16);
      }
      if (v15) {
        (*(void (**)(void *))(*v15 + 8))(v15);
      }
      a6 = v32;
      goto LABEL_30;
    }
    uint64_t v30 = a1[1];
    (*(void (**)(void **__return_ptr, void *))(*v16 + 24))(__p, v16);
    if (v34 >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = (void **)__p[0];
    }
    int v29 = v19;
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      {
LABEL_11:
        int v20 = BBUpdaterCommon::inRestoreOS(void)::restoreOS;
        int v21 = BBUpdaterCommon::inRestoreOS(void)::recoveryOS;
        int v22 = (*(uint64_t (**)(void *))(*v15 + 24))(v15);
        unsigned int v23 = (const char *)v29;
        if (!(v20 | v21)) {
          unsigned int v23 = "<< SNUM >>";
        }
        BBUFeedback::handleComment(v30, "   SNUM: 0x%s / CHIPID: 0x%08x", v23, v22);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_15;
      }
    }
    else
    {
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
        goto LABEL_11;
      }
    }
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
    goto LABEL_11;
  }
LABEL_30:
  if (v35)
  {
    free(v35);
    uint64_t v35 = 0;
  }
  if (!v6) {
    return (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t, uint64_t, void, uint64_t))*a1 + 28))(a1, a2, a3, a5, 0, a6);
  }
  return v6;
}

void sub_21DF6A688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::finishSecurePSIMode(BBUFeedback **a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, unsigned char *a6)
{
  unsigned int v34 = 0;
  if (a5) {
    BBUFeedback::handleComment(a1[1], "Resuming Secure Mode");
  }
  if (a2)
  {
    unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    if (v11 > a3)
    {
      BBUFeedback::handleComment(a1[1], "root manifest size larger than protocol specification %u, std::string::size_type size = %u bytes", a3, v11);
      return 12;
    }
  }
  else
  {
    unsigned int v11 = a3;
  }
  size_t v13 = v11;
  if (v11)
  {
    CFAllocatorRef v14 = operator new(v11);
    bzero(v14, v13);
  }
  else
  {
    CFAllocatorRef v14 = 0;
  }
  CFAllocatorRef v15 = (char *)operator new(0x20uLL);
  uint64_t v32 = (unsigned __int8 *)(v15 + 32);
  int v33 = v15 + 32;
  *(_OWORD *)CFAllocatorRef v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  md = (unsigned __int8 *)v15;
  if (!a2)
  {
    BBUFeedback::handleComment(a1[1], "No root manifest present\n");
    bzero(v14, v13);
    unsigned int v17 = v13 + 1024;
    uint64_t v28 = a6;
    if (v13 != -1024)
    {
      uint64_t v12 = 3;
      BOOL v16 = 1;
LABEL_18:
      uint64_t v18 = operator new(v17);
      bzero(v18, v17);
      if (!v16) {
        goto LABEL_35;
      }
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v18 = 0;
LABEL_23:
    *uint64_t v18 = v13;
    memcpy(v18 + 1, v14, v13);
    CC_SHA256(v14, v13, md);
    int v19 = KTLRawSendData();
    int v20 = a1[1];
    if (v19)
    {
      ctu::hex();
      if (v30 >= 0) {
        int v21 = __p;
      }
      else {
        int v21 = (void **)__p[0];
      }
      BBUFeedback::handleComment(v20, "Sent Manifest with length %u SHA256 Hash %s", v13, (const char *)v21);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (KTLRawReceiveData())
      {
        uint64_t v12 = (*((uint64_t (**)(BBUFeedback **, _WORD *, void, uint64_t, uint64_t))*a1 + 30))(a1, v18, v34, a2, a4);
        if (v12)
        {
          BBUFeedback::handleComment(a1[1], "failed handling hash response\n");
        }
        else
        {
          unsigned char *v28 = 1;
          LOWORD(__p[0]) = 3777;
          if (KTLRawSendData())
          {
            BBUFeedback::handleComment(a1[1], "finished secure mode\n");
            uint64_t v12 = 0;
          }
          else
          {
            BBUFeedback::handleComment(a1[1], "failed sending mode end packet\n");
            uint64_t v12 = 11;
          }
        }
        goto LABEL_35;
      }
      BBUFeedback::handleComment(a1[1], "failed reading hash results\n");
    }
    else
    {
      BBUFeedback::handleComment(v20, "failed sending root manifest data\n");
    }
    uint64_t v12 = 3;
LABEL_35:
    operator delete(v18);
    goto LABEL_36;
  }
  LODWORD(__p[0]) = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *, size_t, void **, void))(*(void *)a2 + 16))(a2, v14, v13, __p, 0);
  BOOL v16 = v12 == 0;
  if (v12) {
    BBUFeedback::handleComment(a1[1], "failed copying root manifest to buffer\n");
  }
  if (LODWORD(__p[0]) != v13)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x5ACu, (ctu::LogMessageBuffer *)"Assertion failure(copied == rootManifestSize && \"failed copying root manifest to buffer\")", v24, v25, v26, v27);
  }
  unsigned int v17 = v13 + 1024;
  if (v13 != -1024)
  {
    uint64_t v28 = a6;
    goto LABEL_18;
  }
  if (!v12)
  {
    uint64_t v28 = a6;
    goto LABEL_22;
  }
LABEL_36:
  if (md)
  {
    uint64_t v32 = md;
    operator delete(md);
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21DF6AA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  operator delete(v20);
  if (__p)
  {
    operator delete(__p);
    if (!v19) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_3;
  }
  operator delete(v19);
  _Unwind_Resume(a1);
}

void BBUICE16Programmer::getHashVerifiedFiles(BBUICE16Programmer *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 29);
  uint64_t v3 = *((void *)this + 30);
  int64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4);
    uint64_t v8 = 0;
    *a2 = v7;
    a2[1] = v7;
    a2[2] = &v7[24 * v6];
    do
    {
      int v10 = (std::string *)&v7[v8];
      unsigned int v11 = (long long *)(v2 + v8);
      if (*(char *)(v2 + v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v9 = *v11;
        v10->__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v9;
      }
      v8 += 24;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
}

void sub_21DF6ABE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void **)*v1;
  if (*v1)
  {
    int64_t v4 = (void **)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::handleHashResponse(uint64_t a1, const void *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v29 = 0;
  if (a2 && a3)
  {
    int v8 = KTLParsePSIICEHashResponse();
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing hash response\n");
    uint64_t v9 = 12;
    int v10 = v29;
    if (v8)
    {
      uint64_t v26 = a4;
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Received hash response, %d entries", *((_DWORD *)v29 + 1));
      unsigned int v11 = operator new(0x20uLL);
      BBUICE16HashData::BBUICE16HashData(v11, *((_DWORD *)v29 + 1), (char *)v29 + 8);
      uint64_t v12 = (const char *)v29;
      if (*((_DWORD *)v29 + 1))
      {
        unint64_t v13 = 0;
        uint64_t v14 = 8;
        do
        {
          BOOL v16 = &v12[v14];
          size_t v17 = strlen(&v12[v14]);
          if (v17 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v18 = v17;
          if (v17 >= 0x17)
          {
            uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17) {
              uint64_t v21 = v17 | 7;
            }
            uint64_t v22 = v21 + 1;
            p_dst = (long long *)operator new(v21 + 1);
            *((void *)&__dst + 1) = v18;
            unint64_t v28 = v22 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v28) = v17;
            p_dst = &__dst;
            if (!v17)
            {
              LOBYTE(__dst) = 0;
              unint64_t v20 = *(void *)(a1 + 240);
              if (v20 >= *(void *)(a1 + 248)) {
                goto LABEL_19;
              }
              goto LABEL_8;
            }
          }
          memmove(p_dst, v16, v18);
          *((unsigned char *)p_dst + v18) = 0;
          unint64_t v20 = *(void *)(a1 + 240);
          if (v20 >= *(void *)(a1 + 248))
          {
LABEL_19:
            unsigned int v23 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 232), (uint64_t)&__dst);
            int v24 = SHIBYTE(v28);
            *(void *)(a1 + 240) = v23;
            if (v24 < 0) {
              operator delete((void *)__dst);
            }
            goto LABEL_9;
          }
LABEL_8:
          long long v15 = __dst;
          *(void *)(v20 + 16) = v28;
          *(_OWORD *)unint64_t v20 = v15;
          *(void *)(a1 + 240) = v20 + 24;
LABEL_9:
          ++v13;
          uint64_t v12 = (const char *)v29;
          v14 += 96;
        }
        while (v13 < *((unsigned int *)v29 + 1));
      }
      if (v26 && a5)
      {
        (*(void (**)(void *, void))(*v11 + 24))(v11, *(void *)(a1 + 8));
        uint64_t v9 = 12;
        if (((*(uint64_t (**)(void *, void, uint64_t))(*v11 + 16))(v11, *(void *)(a1 + 8), a5) & 1) == 0)
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "root manifest hash data mismatches baseband hash response\n");
          uint64_t v9 = 33;
        }
      }
      else
      {
        uint64_t v9 = 12;
      }
      (*(void (**)(void *))(*v11 + 8))(v11);
      int v10 = v29;
    }
    if (v10) {
      free(v10);
    }
  }
  else
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Bad arguments:  packet = %p\n", a2);
    return 2;
  }
  return v9;
}

void sub_21DF6AF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v18);
  _Unwind_Resume(a1);
}

void BBUICE16Programmer::ICE16Item::~ICE16Item(void **this)
{
  *this = &unk_26CECE378;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

{
  BBUICE16Programmer::ICE16Item *v1;
  uint64_t vars8;

  uint64_t v1 = (BBUICE16Programmer::ICE16Item *)this;
  *this = &unk_26CECE378;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    this = (void **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v10 = v8 + 24;
  unsigned int v11 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    uint64_t v12 = (void **)*a1;
    uint64_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = v9;
      if (v9 >= v11) {
        unint64_t v13 = v9 % v11;
      }
    }
    else
    {
      unint64_t v13 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      long long v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v10)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v5[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v13)
            {
              goto LABEL_51;
            }
            long long v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v11) {
              v18 %= v11;
            }
            if (v18 != v13) {
              break;
            }
          }
          long long v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  uint64_t v26 = (void *)(a1 + 16);
  void v44[2] = 0xAAAAAAAAAAAAAA01;
  long long v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = v10;
  char v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)char v27 = 0;
  *((void *)v15 + 5) = 0;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    uint64_t v32 = *(void **)(*(void *)a1 + 8 * v13);
    if (v32)
    {
LABEL_54:
      *(void *)long long v15 = *v32;
LABEL_89:
      *uint64_t v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v11 >= 3) {
      BOOL v33 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v11);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v13 = v10 % v11;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v13 = v10;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v10);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v13 = v41 & v10;
      uint64_t v31 = *(void *)a1;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v41 & v10));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)long long v15 = *v26;
  void *v26 = v15;
  *(void *)(v31 + 8 * v13) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_21DF6B5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    long long v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint8x8_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *unint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint8x8_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    char v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *unint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *char v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          char v16 = v7;
LABEL_25:
          unint64_t v7 = v16;
          char v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          unint64_t v7 = v16;
          char v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          float result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        float result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = v9;
      if (v9 >= v11) {
        unint64_t v13 = v9 % v11;
      }
    }
    else
    {
      unint64_t v13 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v5, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v5[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v13)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v11) {
              v18 %= v11;
            }
            if (v18 != v13) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  unint64_t v46 = 0xAAAAAAAAAAAAAA00;
  uint64_t v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  void *v26 = 0;
  v26[1] = v10;
  char v27 = (std::string *)(v26 + 2);
  long long v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  LOBYTE(v46) = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    BOOL v34 = 1;
    if (v11 >= 3) {
      BOOL v34 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v11);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v42 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v13 = v10 % v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v13 = v10;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v10);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v13 = v42 & v10;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v10));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11) {
          v43 %= v11;
        }
      }
      else
      {
        v43 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v13);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_21DF6BE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21DF6BE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_20()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void BBUICEDownloadImage::~BBUICEDownloadImage(BBUICEDownloadImage *this)
{
  *(void *)this = &unk_26CECE3E0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  BBUICEDownloadImage *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CECE3E0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0)
  {
    operator delete(*((void **)this + 1));
    unint64_t v3 = this;
  }
  else
  {
    unint64_t v3 = this;
  }
  operator delete(v3);
}

uint64_t BBUICEDownloadImage::getWritePayloadData(BBUICEDownloadImage *this, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  if ((*(unsigned int (**)(BBUICEDownloadImage *))(*(void *)this + 32))(this) <= a4)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 81, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEDownloadImage.cpp", 0x1Du, (ctu::LogMessageBuffer *)"Assertion failure(( offset < getWritePayloadLength()) && \"Error: Chunk size is not sufficient to write payload data of the download image.\")", v10, v11, v12, v19);
    goto LABEL_8;
  }
  int v20 = -1431655766;
  uint64_t result = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t, int *, void))(**((void **)this + 5) + 16))(*((void *)this + 5), a2, a3, &v20, *((_DWORD *)this + 8) + a4);
  if (result)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 81, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEDownloadImage.cpp", 0x20u, (ctu::LogMessageBuffer *)"Assertion failure((ret == kBBUReturnSuccess) && \"Failed to copy image payload data to buffer!\")", v13, v14, v15, v19);
    goto LABEL_8;
  }
  if (v20 != a3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 81, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEDownloadImage.cpp", 0x21u, (ctu::LogMessageBuffer *)"Assertion failure((amountCopied == amount) && \"Copied data size mismatch: Failed to copy image payload data to buffer!\")", v16, v17, v18, v19);
LABEL_8:
  }
  return result;
}

void sub_21DF6C158(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF6C16C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF6C180(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICEDownloadImage::getName(BBUICEDownloadImage *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t BBUICEDownloadImage::getWritePayloadLength(BBUICEDownloadImage *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t BBUICEDownloadImage::getOpenPayloadData(BBUICEDownloadImage *this)
{
  return 0;
}

uint64_t BBUICEDownloadImage::getOpenPayloadLength(BBUICEDownloadImage *this)
{
  return 0;
}

void BBUICEDownloadImage::generateHash(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      BBUDataSource::generateHash(v3, a2, a3);
    }
  }
}

void BBUEURLoaderVersion::~BBUEURLoaderVersion(void **this)
{
  *this = &unk_26CECE448;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  BBUEURLoaderVersion *v1;
  uint64_t vars8;

  uint64_t v1 = (BBUEURLoaderVersion *)this;
  *this = &unk_26CECE448;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    this = (void **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void BBUEURLoaderVersion::getAsString(BBUEURLoaderVersion *this@<X0>, std::string *a2@<X8>)
{
  __src[0] = 0;
  __src[1] = 0;
  uint64_t v19 = 0;
  int v4 = *((_DWORD *)this + 2);
  if (v4 == 2)
  {
    size_t v5 = 3;
    HIBYTE(v19) = 3;
    qmemcpy(__src, "PBL", 3);
  }
  else
  {
    if (v4 != 1)
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/FirmwareVersion/Eureka/BBUEURLoaderVersion.cpp", 0x1Cu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU loader version type!\")", v14, v15, v16, __p.__r_.__value_.__s.__data_[0]);
    }
    size_t v5 = 4;
    HIBYTE(v19) = 4;
    LODWORD(__src[0]) = 1279415119;
  }
  memset(&__p, 0, sizeof(__p));
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v5 + 1;
  memcpy(&__p, __src, v5);
  *(_WORD *)((unint64_t)&__p | v5) = 45;
  unint64_t v8 = (const std::string::value_type *)*((void *)this + 2);
  unint64_t v7 = (char *)this + 16;
  unint64_t v6 = v8;
  int v9 = v7[23];
  if (v9 >= 0) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v6;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = v7[23];
  }
  else {
    std::string::size_type v11 = *((void *)v7 + 1);
  }
  uint64_t v12 = std::string::append(&__p, v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21DF6C43C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF6C450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BBUEURLoaderVersion::getAsFilename(BBUEURLoaderVersion *this)
{
  exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
  _BBUException::_BBUException((uint64_t)exception, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/FirmwareVersion/Eureka/BBUEURLoaderVersion.cpp", 0x24u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU loader version type!\")", v2, v3, v4, v5);
}

void sub_21DF6C4C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURLoaderVersion::parseVersionString(uint64_t a1, const void **__s1)
{
  uint64_t v2 = __s1;
  __s2[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v40 = 0x3AAAAAAAAAAAAAALL;
  uint64_t v38 = 0x4AAAAAAAAAAAAAALL;
  __s2[0] = (void *)0xAAAAAAAA00323651;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAA005F4C4250;
  size_t v4 = *((unsigned __int8 *)__s1 + 23);
  if ((*((char *)__s1 + 23) & 0x80000000) == 0)
  {
    if (v4 >= 3) {
      size_t v5 = 3;
    }
    else {
      size_t v5 = *((unsigned __int8 *)__s1 + 23);
    }
    int v6 = memcmp(__s1, __s2, v5);
    if (v5 != 3 || v6 != 0) {
      goto LABEL_9;
    }
LABEL_32:
    uint64_t v19 = (void **)(a1 + 16);
    if ((const void **)(a1 + 16) != v2)
    {
      if (*(char *)(a1 + 39) < 0)
      {
        if ((v4 & 0x80u) == 0) {
          uint64_t v26 = v2;
        }
        else {
          uint64_t v26 = (void *)*v2;
        }
        if ((v4 & 0x80u) == 0) {
          size_t v27 = v4;
        }
        else {
          size_t v27 = (size_t)v2[1];
        }
        std::string::__assign_no_alias<false>(v19, v26, v27);
      }
      else if ((v4 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v19, (void *)*v2, (size_t)v2[1]);
      }
      else
      {
        long long v20 = *(_OWORD *)v2;
        *(void *)(a1 + 32) = v2[2];
        *(_OWORD *)uint64_t v19 = v20;
      }
    }
    uint64_t v14 = 0;
    *(_DWORD *)(a1 + 8) = 1;
    goto LABEL_76;
  }
  if ((unint64_t)__s1[1] >= 3) {
    size_t v16 = 3;
  }
  else {
    size_t v16 = (size_t)__s1[1];
  }
  int v17 = memcmp(*__s1, __s2, v16);
  if (v16 == 3 && v17 == 0) {
    goto LABEL_32;
  }
LABEL_9:
  if ((v4 & 0x80) != 0)
  {
    if ((unint64_t)v2[1] >= 4) {
      size_t v21 = 4;
    }
    else {
      size_t v21 = (size_t)v2[1];
    }
    int v22 = memcmp(*v2, __p, v21);
    if (v21 != 4 || v22 != 0) {
      goto LABEL_17;
    }
LABEL_44:
    unint64_t v24 = (unint64_t)v2[1];
    if ((v4 & 0x80u) == 0) {
      uint64_t v25 = (const void *)v4;
    }
    else {
      uint64_t v25 = v2[1];
    }
    if ((v4 & 0x80) != 0)
    {
      if (v24 < 4) {
        goto LABEL_81;
      }
      uint64_t v2 = (const void **)*v2;
      size_t v4 = v24;
    }
    else if (v4 <= 3)
    {
LABEL_81:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v28 = (unint64_t)v25 - 4;
    if (v4 - 4 >= v28) {
      size_t v29 = v28;
    }
    else {
      size_t v29 = v4 - 4;
    }
    if (v29 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v29 >= 0x17)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      p_dst = (long long *)operator new(v32 + 1);
      *((void *)&__dst + 1) = v29;
      unint64_t v36 = v33 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v36) = v29;
      p_dst = &__dst;
      if (!v29)
      {
        LOBYTE(__dst) = 0;
        uint64_t v31 = a1 + 16;
        if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        {
LABEL_66:
          *(_OWORD *)uint64_t v31 = __dst;
          *(void *)(v31 + 16) = v36;
          *(_DWORD *)(a1 + 8) = 2;
          if (SHIBYTE(v38) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v14 = 0;
          goto LABEL_76;
        }
LABEL_73:
        operator delete(*(void **)v31);
        goto LABEL_66;
      }
    }
    memmove(p_dst, (char *)v2 + 4, v29);
    *((unsigned char *)p_dst + v29) = 0;
    uint64_t v31 = a1 + 16;
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_73;
  }
  if (v4 >= 4) {
    size_t v8 = 4;
  }
  else {
    size_t v8 = v4;
  }
  int v9 = memcmp(v2, __p, v8);
  if (v8 == 4 && v9 == 0) {
    goto LABEL_44;
  }
LABEL_17:
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v14 = 2;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 4) == 0) {
      goto LABEL_76;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v14 = 2;
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 4) == 0) {
      goto LABEL_76;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    if (*((char *)v2 + 23) >= 0) {
      LOBYTE(v15) = (_BYTE)v2;
    }
    else {
      uint64_t v15 = (void *)*v2;
    }
    _BBULog(18, 0, "BBULoaderVersion", "", "Unrecognized string %s\n", v10, v11, v12, (char)v15);
  }
LABEL_76:
  if (SHIBYTE(v40) < 0) {
    operator delete(__s2[0]);
  }
  return v14;
}

uint64_t BBUEURLoaderVersion::isNewerThan()
{
  return 0;
}

uint64_t BBUEURLoaderVersion::isEqualTo()
{
  return 1;
}

void eUICC::Source::CreateFromZip(uint64_t *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  size_t v4 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  size_t v5 = v4;
  int v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  int v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  eUICC::Source::Source(v4, (uint64_t)&v8);
  std::shared_ptr<eUICC::Source>::shared_ptr[abi:ne180100]<eUICC::Source,void>(a2, v5);
  unint64_t v7 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_21DF6C8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21DF6C910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void *eUICC::Source::Source(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  a1[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[7] = v5;
  v38[8] = v5;
  v38[5] = v5;
  v38[6] = v5;
  v38[3] = v5;
  v38[4] = v5;
  v38[1] = v5;
  _OWORD v38[2] = v5;
  v38[0] = v5;
  long long v36 = v5;
  long long v37 = v5;
  long long v34 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v32 = v5;
  long long v33 = v5;
  long long v31 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"==== eUICC Source ====\n", 23);
  BBUZipFile::getFileList(*(BBUZipFile **)a2, &__dst);
  for (uint64_t i = v29; i != &__dst; uint64_t i = (void *)i[1])
  {
    int v7 = *((char *)i + 39);
    if (v7 >= 0) {
      uint64_t v8 = (uint64_t)(i + 2);
    }
    else {
      uint64_t v8 = i[2];
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)i + 39);
    }
    else {
      uint64_t v9 = i[3];
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  }
  if (v30)
  {
    uint64_t v11 = __dst;
    uint64_t v12 = (void **)v29;
    uint64_t v13 = *v29;
    *(void *)(v13 + 8) = __dst[1];
    *(void *)v11[1] = v13;
    int64_t v30 = 0;
    if (v12 != (void **)&__dst)
    {
      do
      {
        long long v20 = (void **)v12[1];
        if (*((char *)v12 + 39) < 0) {
          operator delete(v12[2]);
        }
        operator delete(v12);
        uint64_t v12 = v20;
      }
      while (v20 != (void **)&__dst);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"====================\n", 21);
  if (gBBULogMaskGet(void)::once != -1)
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    char v17 = BYTE8(v37);
    if ((BYTE8(v37) & 0x10) == 0) {
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v22 = v37;
    if ((unint64_t)v37 < *((void *)&v34 + 1))
    {
      *(void *)&long long v37 = *((void *)&v34 + 1);
      uint64_t v22 = *((void *)&v34 + 1);
    }
    size_t v21 = (const void **)&v34;
    goto LABEL_25;
  }
  char v17 = BYTE8(v37);
  if ((BYTE8(v37) & 0x10) != 0) {
    goto LABEL_22;
  }
LABEL_15:
  if ((v17 & 8) == 0)
  {
    size_t v18 = 0;
    HIBYTE(v30) = 0;
    p_dst = &__dst;
    goto LABEL_33;
  }
  size_t v21 = (const void **)&v32 + 1;
  uint64_t v22 = *((void *)&v33 + 1);
LABEL_25:
  uint64_t v23 = *v21;
  size_t v18 = v22 - (void)*v21;
  if (v18 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v24 = v18 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    size_t v29 = (void *)v18;
    int64_t v30 = v25 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_32;
  }
  HIBYTE(v30) = v22 - *(unsigned char *)v21;
  p_dst = &__dst;
  if (v18) {
LABEL_32:
  }
    memmove(p_dst, v23, v18);
LABEL_33:
  *((unsigned char *)p_dst + v18) = 0;
  uint64_t v26 = &__dst;
  if (v30 < 0) {
    LOBYTE(v26) = (_BYTE)__dst;
  }
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "%s", v14, v15, v16, (char)v26);
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst);
  }
  *(void *)&long long v31 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v31 + *(void *)(v31 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v31 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C1DDF0](v38);
  return a1;
}

void sub_21DF6CCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v17);
  uint64_t v19 = *(std::__shared_weak_count **)(v16 + 8);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  _Unwind_Resume(a1);
}

void eUICC::Source::GetMainFirmware(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      long long v5 = *(const char **)a2;
    }
    else {
      long long v5 = "vinyl";
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    long long v5 = (const char *)a2;
  }
  else
  {
    long long v5 = "vinyl";
  }
  memset(__dst, 170, sizeof(__dst));
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    void __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_15;
  }
  HIBYTE(__dst[2]) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_15:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ctu::path_join_impl();
  ctu::path_join_impl();
  eUICC::Source::GetFirmwareInternal(a1, (uint64_t)__dst, a3);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21DF6CE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void eUICC::Source::GetFirmwareInternal(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  memset(&v52, 170, sizeof(v52));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v52 = *(std::string *)a2;
  }
  ctu::path_join_impl();
  memset(&v51, 170, sizeof(v51));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v51 = *(std::string *)a2;
  }
  ctu::path_join_impl();
  memset(&v50, 170, sizeof(v50));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v50 = *(std::string *)a2;
  }
  ctu::path_join_impl();
  memset(&v49, 170, sizeof(v49));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v49 = *(std::string *)a2;
  }
  ctu::path_join_impl();
  CFTypeRef v47 = 0;
  CFTypeRef v48 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v46 = 0;
  size_t v6 = *(pthread_mutex_t **)(a1 + 16);
  unint64_t v43 = 0;
  p_CFTypeRef cf = &v48;
  int v10 = BBUZipFile::copyEntireFile(v6, (const void **)&v52.__r_.__value_.__l.__data_, &v43);
  CFTypeRef v11 = *p_cf;
  if (v43)
  {
    *p_CFTypeRef cf = v43;
    if (v11) {
      goto LABEL_17;
    }
  }
  else
  {
    *p_CFTypeRef cf = 0;
    if (v11) {
LABEL_17:
    }
      CFRelease(v11);
  }
  if (v10
    || (v48
      ? (size_t v18 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get)
      : (size_t v18 = 0),
        !v18))
  {
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(25, 0xFFFFFFFFLL, "eUICC::Source", "", "Condition <<%s>> failed %s %s/%d\n", v7, v8, v9, (char)"kBBUReturnSuccess == r && installData");
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    std::string::value_type v15 = v52.__r_.__value_.__s.__data_[0];
    BOOL v16 = (v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    uint64_t v17 = &v52;
    goto LABEL_24;
  }
  uint64_t v19 = *(pthread_mutex_t **)(a1 + 16);
  unint64_t v43 = 0;
  p_CFTypeRef cf = &v46;
  int v23 = BBUZipFile::copyEntireFile(v19, (const void **)&v50.__r_.__value_.__l.__data_, &v43);
  CFTypeRef v24 = *p_cf;
  if (v43)
  {
    *p_CFTypeRef cf = v43;
    if (!v24) {
      goto LABEL_53;
    }
  }
  else
  {
    *p_CFTypeRef cf = 0;
    if (!v24) {
      goto LABEL_53;
    }
  }
  CFRelease(v24);
LABEL_53:
  if (!v23)
  {
    if (v46 ? ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get : 0)
    {
      uint64_t v26 = *(pthread_mutex_t **)(a1 + 16);
      unint64_t v43 = 0;
      p_CFTypeRef cf = &v47;
      int v27 = BBUZipFile::copyEntireFile(v26, (const void **)&v51.__r_.__value_.__l.__data_, &v43);
      CFTypeRef v28 = *p_cf;
      if (v43)
      {
        *p_CFTypeRef cf = v43;
        if (!v28) {
          goto LABEL_68;
        }
      }
      else
      {
        *p_CFTypeRef cf = 0;
        if (!v28) {
          goto LABEL_68;
        }
      }
      CFRelease(v28);
LABEL_68:
      CFTypeRef v29 = v47;
      if (v27
        || (v47
          ? (int64_t v30 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get)
          : (int64_t v30 = 0),
            !v30))
      {
        CFTypeRef v47 = 0;
        if (v29) {
          CFRelease(v29);
        }
      }
      long long v31 = *(pthread_mutex_t **)(a1 + 16);
      unint64_t v43 = 0;
      p_CFTypeRef cf = &cf;
      int v35 = BBUZipFile::copyEntireFile(v31, (const void **)&v49.__r_.__value_.__l.__data_, &v43);
      CFTypeRef v36 = *p_cf;
      if (v43)
      {
        *p_CFTypeRef cf = v43;
        if (v36) {
          goto LABEL_79;
        }
      }
      else
      {
        *p_CFTypeRef cf = 0;
        if (v36) {
LABEL_79:
        }
          CFRelease(v36);
      }
      if (v35)
      {
        if (gBBULogMaskGet(void)::once != -1) {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        }
        long long v37 = &v49;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          LOBYTE(v37) = v49.__r_.__value_.__s.__data_[0];
        }
        _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "File %s ret %d\n", v32, v33, v34, (char)v37);
        CFTypeRef v38 = cf;
        CFTypeRef cf = 0;
        if (v38) {
          CFRelease(v38);
        }
      }
      CFTypeRef v42 = v48;
      if (v48) {
        CFRetain(v48);
      }
      CFTypeRef v41 = v47;
      if (v47) {
        CFRetain(v47);
      }
      CFTypeRef v40 = v46;
      if (v46) {
        CFRetain(v46);
      }
      CFTypeRef v39 = cf;
      if (cf) {
        CFRetain(cf);
      }
      eUICC::Firmware::CreateFromData(&v42, &v41, &v40, a3);
      if (v39) {
        CFRelease(v39);
      }
      if (v40) {
        CFRelease(v40);
      }
      if (v41) {
        CFRelease(v41);
      }
      if (v42) {
        CFRelease(v42);
      }
      goto LABEL_27;
    }
  }
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(25, 0xFFFFFFFFLL, "eUICC::Source", "", "Condition <<%s>> failed %s %s/%d\n", v20, v21, v22, (char)"kBBUReturnSuccess == r && infoPlist");
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  std::string::value_type v15 = v50.__r_.__value_.__s.__data_[0];
  BOOL v16 = (v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  uint64_t v17 = &v50;
LABEL_24:
  if (v16) {
    LOBYTE(v17) = v15;
  }
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "File %s ret %d\n", v12, v13, v14, (char)v17);
  *a3 = 0;
  a3[1] = 0;
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_38:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_50:
    operator delete(v52.__r_.__value_.__l.__data_);
    return;
  }
LABEL_49:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_50;
  }
}

void sub_21DF6D4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, const void *a14, const void *a15, const void *a16, __int16 a17, char a18, char a19, uint64_t a20,const void *a21,const void *a22,const void *a23,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a15);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a21);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a22);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a23);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a24);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v37 - 89) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((*(char *)(v37 - 89) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v37 - 57) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*(void **)(v37 - 112));
  if ((*(char *)(v37 - 57) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  operator delete(*(void **)(v37 - 80));
  goto LABEL_6;
}

void eUICC::Source::GetGoldFirmware(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      long long v5 = *(const char **)a2;
    }
    else {
      long long v5 = "vinyl";
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    long long v5 = (const char *)a2;
  }
  else
  {
    long long v5 = "vinyl";
  }
  memset(__dst, 170, sizeof(__dst));
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    void __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_15;
  }
  HIBYTE(__dst[2]) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_15:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ctu::path_join_impl();
  ctu::path_join_impl();
  eUICC::Source::GetFirmwareInternal(a1, (uint64_t)__dst, a3);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21DF6D764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFData>::~TakeOwnershipProxy(const void **a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (const void **)a1[1];
  uint64_t v4 = *v2;
  if (v3)
  {
    unsigned char *v2 = v3;
    if (v4) {
      goto LABEL_5;
    }
  }
  else
  {
    unsigned char *v2 = 0;
    if (v4) {
LABEL_5:
    }
      CFRelease(v4);
  }
  return a1;
}

void eUICC::Source::GetRecoveryForMac(ctu *this@<X1>, uint64_t a2@<X0>, const char *a3@<X2>, void *a4@<X8>)
{
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  ctu::hex(this, (const void *)8);
  if (v54 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    LOBYTE(v10) = __p[0];
  }
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "GetRecoveryForMac: %s\n", v7, v8, v9, (char)v10);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v57 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
  eUICC::Source::GetGoldFirmware(a2, (uint64_t)a3, &v57);
  if (!(void)v57)
  {
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "GetGoldFirmware did not successfully return anything valid\n", v11, v12, v13, v49);
    *a4 = 0;
    a4[1] = 0;
    uint64_t v19 = (std::__shared_weak_count *)*((void *)&v57 + 1);
    if (*((void *)&v57 + 1))
    {
LABEL_73:
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    return;
  }
  uint64_t v14 = (ctu *)(*(uint64_t (**)(void))(*(void *)v57 + 8))(v57);
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  ctu::hex(v14, (const void *)8);
  if (v54 >= 0) {
    size_t v18 = __p;
  }
  else {
    LOBYTE(v18) = __p[0];
  }
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "Update/Gold Mac %s\n", v15, v16, v17, (char)v18);
  if ((v54 & 0x80000000) == 0)
  {
    if (*(void *)this != *(void *)v14) {
      goto LABEL_16;
    }
LABEL_25:
    *(_OWORD *)a4 = v57;
    long long v57 = 0uLL;
    return;
  }
  operator delete(__p[0]);
  if (*(void *)this == *(void *)v14) {
    goto LABEL_25;
  }
LABEL_16:
  if (a3[23] < 0)
  {
    if (*((void *)a3 + 1)) {
      a3 = *(const char **)a3;
    }
    else {
      a3 = "vinyl";
    }
  }
  else if (!a3[23])
  {
    a3 = "vinyl";
  }
  memset(__dst, 170, sizeof(__dst));
  size_t v20 = strlen(a3);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (void **)operator new(v23 + 1);
    __dst[1] = v21;
    void __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v22;
  }
  else
  {
    HIBYTE(__dst[2]) = v20;
    uint64_t v22 = __dst;
    if (!v20) {
      goto LABEL_37;
    }
  }
  memmove(v22, a3, (size_t)v21);
LABEL_37:
  *((unsigned char *)v21 + (void)v22) = 0;
  ctu::path_join_impl();
  ctu::path_join_impl();
  uint64_t v26 = 0;
  while (1)
  {
    memset(v55, 170, sizeof(v55));
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)__p, (ctu::LogMessageBuffer *)"%03d", v25, v26, v51);
    int v27 = (std::string *)MEMORY[0x223C1D0C0](__p);
    CFTypeRef v28 = SHIBYTE(__dst[2]) >= 0 ? (const std::string::value_type *)__dst : (const std::string::value_type *)__dst[0];
    CFTypeRef v29 = SHIBYTE(__dst[2]) >= 0 ? (void *)HIBYTE(__dst[2]) : __dst[1];
    int64_t v30 = std::string::insert(v27, 0, v28, (std::string::size_type)v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    void v55[2] = (void *)v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v55 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x223C1D0F0](__p);
    eUICC::Source::GetFirmwareInternal(a2, (uint64_t)v55, __p);
    long long v32 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v57 + 1);
    long long v57 = v32;
    if (!v33) {
      goto LABEL_46;
    }
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      uint64_t v34 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_50;
      }
    }
    else
    {
LABEL_46:
      uint64_t v34 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_50;
      }
    }
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
LABEL_50:
    uint64_t v35 = v57;
    if ((void)v57)
    {
      CFTypeRef v36 = (ctu *)(*(uint64_t (**)(void))(*(void *)v57 + 8))(v57);
      if (!v36)
      {
        exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/eUICC/Source/eUICCSource.cpp", 0x7Fu, (ctu::LogMessageBuffer *)"Assertion failure(fwMac.data && \"Corrupt FW in input!\")", v46, v47, v48, v50);
      }
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      int v37 = SHIBYTE(v55[2]);
      char v38 = (char)v55[0];
      ctu::hex(v36, (const void *)8);
      CFTypeRef v42 = v55;
      if (v37 < 0) {
        LOBYTE(v42) = v38;
      }
      unint64_t v43 = __p;
      if (v54 < 0) {
        unint64_t v43 = (void **)__p[0];
      }
      std::string v51 = v43;
      _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "Path %s -> Mac %s\n", v39, v40, v41, (char)v42);
      if (v54 < 0)
      {
        operator delete(__p[0]);
        if (*(void *)this != *(void *)v36)
        {
LABEL_60:
          char v44 = 1;
          if ((SHIBYTE(v55[2]) & 0x80000000) == 0) {
            goto LABEL_62;
          }
LABEL_61:
          operator delete(v55[0]);
          goto LABEL_62;
        }
      }
      else if (*(void *)this != *(void *)v36)
      {
        goto LABEL_60;
      }
      char v44 = 0;
      *(_OWORD *)a4 = v57;
      long long v57 = 0uLL;
      if (SHIBYTE(v55[2]) < 0) {
        goto LABEL_61;
      }
    }
    else
    {
      char v44 = 0;
      if (SHIBYTE(v55[2]) < 0) {
        goto LABEL_61;
      }
    }
LABEL_62:
    if ((v44 & 1) == 0) {
      break;
    }
    uint64_t v26 = (v26 + 1);
    if (v26 == 1000) {
      goto LABEL_76;
    }
  }
  if (v35)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
  }
  else
  {
LABEL_76:
    *a4 = 0;
    a4[1] = 0;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_72:
      uint64_t v19 = (std::__shared_weak_count *)*((void *)&v57 + 1);
      if (!*((void *)&v57 + 1)) {
        return;
      }
      goto LABEL_73;
    }
  }
  operator delete(__dst[0]);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1)) {
    goto LABEL_73;
  }
}

void sub_21DF6DE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v35 - 112);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **std::shared_ptr<eUICC::Source>::shared_ptr[abi:ne180100]<eUICC::Source,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECE4A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (a2)
  {
    size_t v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
    if (v6)
    {
      if (v6->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
        a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
        std::__shared_weak_count::__release_weak(v6);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_7:
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return a1;
}

void sub_21DF6E098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<eUICC::Source>::~unique_ptr[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<eUICC::Source>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[3];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[1];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<eUICC::Source *,std::shared_ptr<eUICC::Source>::__shared_ptr_default_delete<eUICC::Source,eUICC::Source>,std::allocator<eUICC::Source>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<eUICC::Source *,std::shared_ptr<eUICC::Source>::__shared_ptr_default_delete<eUICC::Source,eUICC::Source>,std::allocator<eUICC::Source>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[3];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = (std::__shared_weak_count *)v1[1];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<eUICC::Source *,std::shared_ptr<eUICC::Source>::__shared_ptr_default_delete<eUICC::Source,eUICC::Source>,std::allocator<eUICC::Source>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFAD892) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFAD892 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFAD892)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFAD892 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get(uint64_t a1)
{
  return *(void *)a1;
}

void *std::function<void ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t __cxx_global_var_init_21()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void BBUICELoader::BBUICELoader(BBUICELoader *this, BBUFeedback *a2)
{
  BBULoader::BBULoader(this, a2);
  *(void *)uint64_t v3 = &unk_26CECE4F8;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v4 = (capabilities::updater *)capabilities::radio::chipID(v3);
  *((_DWORD *)this + 7) = v4;
  long long v5 = (capabilities::updater *)capabilities::updater::loaderConnectAttempts(v4);
  *((_DWORD *)this + 8) = v5;
  uint64_t v6 = capabilities::updater::loaderCommandTimeout(v5);
  if (v6 >= 0x100000000)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICELoader.cpp", 0x1Au, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::updater::loaderCommandTimeout().count() <= std::numeric_limits<UInt32>::max() && \"capabilities::updater::loaderCommandTimeout().count() exceeds maximum allowable value\")", v8, v9, v10, v11);
  }
  *((_DWORD *)this + 9) = capabilities::updater::loaderCommandTimeout((capabilities::updater *)v6);
  *((unsigned char *)this + 40) = 0;
}

void sub_21DF6E41C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICELoader::getCommandTimeout(BBUICELoader *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t BBUICELoader::connect()
{
  return 3;
}

void BBUICELoader::getVersion()
{
  exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
  _BBUException::_BBUException((uint64_t)exception, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICELoader.cpp", 0x3Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"BBU loader version error!\")", v1, v2, v3, v4);
}

void sub_21DF6E4A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICELoader::enableStepThroughImages(uint64_t this)
{
  *(unsigned char *)(this + 40) = 1;
  return this;
}

uint64_t BBUICELoader::load(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICELoader.cpp", 0x4Bu, (ctu::LogMessageBuffer *)"Assertion failure(source && \"BBU data source error!\")", v5, v6, v7, v8);
  }
  return 11;
}

void sub_21DF6E52C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICELoader::go()
{
  return 11;
}

uint64_t BBUICELoader::queryChipInfo()
{
  return 3;
}

const char *BBUICELoader::getDebugName(BBUICELoader *this)
{
  return "BBUICELoader";
}

uint64_t BBUICECommunication::setTransportCreationTimeout(BBUICECommunication *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
    {
LABEL_7:
      *((double *)this + 2) = a2;
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_7;
    }
  }
  if (gBBULogVerbosity < 0) {
    goto LABEL_7;
  }
  _BBULog(2, 0, "BBUICECommunication", "", "Transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  uint64_t v11 = gBBULogMaskGet(void)::once;
  *((double *)this + 2) = a2;
  if (v11 != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
LABEL_8:
  if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0 && (gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(2, 0, "BBUICECommunication", "", "Boot-up transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  }
  *((double *)this + 3) = a2;
  return 0;
}

uint64_t BBUICECommunication::getBasebandState()
{
  return 9;
}

uint64_t BBUICECommunication::freeTransport(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 >= 1)
  {
    close(v2);
    *(_DWORD *)(a1 + 56) = -1;
  }

  return TelephonyUtilTransportFree();
}

std::string *BBUICECommunication::setUartDevicePath(BBUICECommunication *this, char *a2)
{
  return std::string::__assign_external((std::string *)((char *)this + 32), a2);
}

CFErrorRef BBUpdaterExtremePrivate::makeCFError(CFIndex code, const char *a2)
{
  unsigned int v2 = code;
  keys[1] = *(void **)MEMORY[0x263EF8340];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (a2 && (char v4 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, 0x8000100u)) != 0)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)*MEMORY[0x263EFFC70];
    values = v4;
    keys[0] = v6;
    CFDictionaryRef v7 = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFRelease(v5);
    CFErrorRef v8 = CFErrorCreate(v3, @"BBUpdater", v2, v7);
    if (v7) {
      CFRelease(v7);
    }
    return v8;
  }
  else
  {
    return CFErrorCreate(v3, @"BBUpdater", v2, 0);
  }
}

uint64_t BBUEUR13UpdateSource::saveImages(BBUEUR13UpdateSource *this)
{
  uint64_t v2 = BBUEUR10UpdateSource::saveImages(this);
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  CFAllocatorRef v3 = (const char *)(**(uint64_t (***)(BBUEUR13UpdateSource *))this)(this);
  _BBULog(19, 0xFFFFFFFFLL, v3, "", "SaveImages called super %d\n", v4, v5, v6, v2);
  if (!v2)
  {
    uint64_t v7 = *((void *)this + 8);
    (*(void (**)(void **__return_ptr, BBUEUR13UpdateSource *))(*(void *)this + 56))(__p, this);
    uint64_t v8 = BBUZipFile::containsFile(v7, __p);
    uint64_t v2 = v8;
    if (v23 < 0)
    {
      operator delete(__p[0]);
      if (!v2) {
        return v2;
      }
    }
    else if (!v8)
    {
      return v2;
    }
    uint64_t v9 = (pthread_mutex_t *)*((void *)this + 8);
    (*(void (**)(void **__return_ptr, BBUEUR13UpdateSource *))(*(void *)this + 56))(__p, this);
    pthread_mutex_lock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
    if (!qword_267D239B8)
    {
      uint64_t v11 = (const void **)operator new(8uLL);
      void *v11 = 0;
      uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
      v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECE710;
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
      uint64_t v12 = (std::__shared_weak_count *)off_267D239C0;
      qword_267D239B8 = (uint64_t)v11;
      off_267D239C0 = v10;
      if (!v12)
      {
        uint64_t v19 = v10;
        goto LABEL_15;
      }
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    uint64_t v11 = (const void **)qword_267D239B8;
    uint64_t v10 = (std::__shared_weak_count *)off_267D239C0;
    uint64_t v19 = (std::__shared_weak_count *)off_267D239C0;
    if (!off_267D239C0)
    {
LABEL_16:
      pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
      size_t v20 = 0;
      uint64_t v21 = v11;
      uint64_t v2 = BBUZipFile::copyEntireFile(v9, (const void **)__p, &v20);
      uint64_t v13 = *v21;
      if (v20)
      {
        void *v21 = v20;
        if (!v13) {
          goto LABEL_21;
        }
      }
      else
      {
        void *v21 = 0;
        if (!v13) {
          goto LABEL_21;
        }
      }
      CFRelease(v13);
LABEL_21:
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      uint64_t v14 = (const char *)(**(uint64_t (***)(BBUEUR13UpdateSource *))this)(this);
      _BBULog(19, 0xFFFFFFFFLL, v14, "", "SaveImages saved ticket to manifest cache %d\n", v15, v16, v17, v2);
      return v2;
    }
LABEL_15:
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_16;
  }
  return v2;
}

void sub_21DF6EB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  operator delete(v19);
  pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *BBUEUR13UpdateSource::getManifestSource(BBUEUR13UpdateSource *this)
{
  pthread_mutex_lock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  if (!qword_267D239B8)
  {
    CFAllocatorRef v3 = (const void **)operator new(8uLL);
    *CFAllocatorRef v3 = 0;
    uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
    v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECE710;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    uint64_t v4 = (std::__shared_weak_count *)off_267D239C0;
    qword_267D239B8 = (uint64_t)v3;
    off_267D239C0 = v2;
    if (!v4) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  CFAllocatorRef v3 = (const void **)qword_267D239B8;
  uint64_t v2 = (std::__shared_weak_count *)off_267D239C0;
  if (off_267D239C0) {
LABEL_7:
  }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  uint64_t v5 = (const char *)(**(uint64_t (***)(BBUEUR13UpdateSource *))this)(this);
  _BBULog(19, 0xFFFFFFFFLL, v5, "", "BBUEUR13UpdateSource getManifestSource: using cache? %d\n", v6, v7, v8, v3 != 0);
  uint64_t v9 = *v3;
  if (v9) {
    uint64_t v10 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v10)
  {
    ManifestSource = (_DWORD *)BBUEURUpdateSource::getManifestSource(this);
    if (!v2) {
      return ManifestSource;
    }
    goto LABEL_19;
  }
  ManifestSource = operator new(0x18uLL);
  ManifestSource[4] = 0;
  *(void *)ManifestSource = &unk_26CECE780;
  *((void *)ManifestSource + 1) = v9;
  if (v9) {
    CFRetain(v9);
  }
  if (v2)
  {
LABEL_19:
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return ManifestSource;
}

void sub_21DF6EE14(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_21DF6EE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *BBUEUR13UpdateSource::getDebugName(BBUEUR13UpdateSource *this)
{
  return "BBUEUR13UpdateSource";
}

void BBUEUR13UpdateSource::~BBUEUR13UpdateSource(BBUEUR13UpdateSource *this)
{
  BBUEUR10UpdateSource::~BBUEUR10UpdateSource(this);

  operator delete(v1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ManifestCache>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  CFAllocatorRef v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<ManifestCache *,std::shared_ptr<ManifestCache>::__shared_ptr_default_delete<ManifestCache,ManifestCache>,std::allocator<ManifestCache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ManifestCache *,std::shared_ptr<ManifestCache>::__shared_ptr_default_delete<ManifestCache,ManifestCache>,std::allocator<ManifestCache>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(CFTypeRef **)(a1 + 24);
  if (v1)
  {
    if (*v1) {
      CFRelease(*v1);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ManifestCache *,std::shared_ptr<ManifestCache>::__shared_ptr_default_delete<ManifestCache,ManifestCache>,std::allocator<ManifestCache>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000021DFAD997) {
    return a1 + 24;
  }
  if (((v3 & 0x800000021DFAD997 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021DFAD997)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021DFAD997 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

const char *_BBUFSDebugPrint(const char *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sDelegate) {
    return (const char *)sDelegate(result, a2, &a9);
  }
  return result;
}

void _BBUFSDebugPrintOsLog(const char *a1, const char *a2, va_list a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    memset(__b, 170, sizeof(__b));
    vsnprintf(__b, 0x400uLL, a2, a3);
    if (qword_26AA8F800 == -1)
    {
      uint64_t v5 = _MergedGlobals_6;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_6, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_26AA8F800, &__block_literal_global_3);
      uint64_t v5 = _MergedGlobals_6;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_6, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
    }
    int v6 = 136315138;
    uint64_t v7 = __b;
    _os_log_impl(&dword_21DE8A000, v5, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v6, 0xCu);
  }
}

os_log_t ___ZL25_BBUFSDebugGetOsLogObjectv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.telephony.baseband", "bbufs");
  _MergedGlobals_6 = (uint64_t)result;
  return result;
}

void BBUCFDataDataSource::~BBUCFDataDataSource(BBUCFDataDataSource *this)
{
  *(void *)this = &unk_26CECE780;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE780;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

uint64_t BBUCFDataDataSource::copyData(CFDataRef *this, unsigned __int8 *a2, int a3, unsigned int *a4, unsigned int a5)
{
  LODWORD(v7) = a3;
  unsigned int v10 = (*((uint64_t (**)(CFDataRef *))*this + 3))(this);
  unsigned int v11 = v10 - a5;
  if (v10 >= a5)
  {
    if (v11 >= v7) {
      CFIndex v7 = v7;
    }
    else {
      CFIndex v7 = v11;
    }
    v13.locatioptrdiff_t n = a5;
    v13.length = v7;
    CFDataGetBytes(this[1], v13, a2);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  *a4 = v7;
  return 0;
}

const __CFData *BBUCFDataDataSource::getSize(BBUCFDataDataSource *this)
{
  CFDataRef result = (const __CFData *)*((void *)this + 1);
  if (result) {
    return (const __CFData *)CFDataGetLength(result);
  }
  return result;
}

uint64_t BBUCFDataDataSource::getBaseAddress(BBUCFDataDataSource *this)
{
  return *((unsigned int *)this + 4);
}

void BBUCFDataDataSource::getNameAsString(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "CFData");
}

const char *BBUCFDataDataSource::getDebugName(BBUCFDataDataSource *this)
{
  return "BBUCFDataDataSource";
}

void BBUEURPersonalizationParameters::EURNonce::~EURNonce(BBUEURPersonalizationParameters::EURNonce *this)
{
  *(void *)this = &unk_26CECE7E8;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE7E8;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

uint64_t BBUEURPersonalizationParameters::EURNonce::getAsCFData(BBUEURPersonalizationParameters::EURNonce *this)
{
  return *((void *)this + 1);
}

void BBUEURPersonalizationParameters::EURNonce::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
}

void cfDataToCString(const __CFData *a1, const __CFData *a2)
{
  CFDataRef v2 = a1;
  if (!a2)
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    return;
  }
  CFDataGetBytePtr(a2);
  int Length = CFDataGetLength(a2);
  uint64_t v5 = (char *)operator new[]((3 * Length + 1));
  TelephonyUtilBinToHex();
  memset(v2, 170, 24);
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    CFDataRef v10 = (const __CFData *)operator new(v8 + 1);
    *((void *)v2 + 1) = v7;
    *((void *)v2 + 2) = v9 | 0x8000000000000000;
    *(void *)CFDataRef v2 = v10;
    CFDataRef v2 = v10;
  }
  else
  {
    *((unsigned char *)v2 + 23) = v6;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memcpy(v2, v5, v7);
LABEL_11:
  *((unsigned char *)v2 + v7) = 0;

  operator delete[](v5);
}

void BBUEURPersonalizationParameters::EURSerialNumber::~EURSerialNumber(BBUEURPersonalizationParameters::EURSerialNumber *this)
{
  *(void *)this = &unk_26CECE818;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE818;
  CFDataRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

void *BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber(BBUEURPersonalizationParameters::EURSerialNumber *this, const unsigned __int8 *a2)
{
  if (a2 != 32) {
    return 0;
  }
  uint64_t v3 = operator new(0x10uLL);
  *uint64_t v3 = &unk_26CECE818;
  v3[1] = 0;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 4);
  if (!Mutable)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x83u, (ctu::LogMessageBuffer *)"Assertion failure(data)", v9, v10, v11, v12);
  }
  uint64_t v5 = Mutable;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  UInt8 *MutableBytePtr = *((unsigned char *)this + 3);
  MutableBytePtr[1] = *((unsigned char *)this + 2);
  MutableBytePtr[2] = *((unsigned char *)this + 1);
  MutableBytePtr[3] = *(unsigned char *)this;
  CFDataSetLength(v5, 4);
  v3[1] = v5;
  return v3;
}

void sub_21DF6F774(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURSerialNumber::getAsCFData(BBUEURPersonalizationParameters::EURSerialNumber *this)
{
  return *((void *)this + 1);
}

void BBUEURPersonalizationParameters::EURSerialNumber::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
}

void BBUEURPersonalizationParameters::EURCertID::~EURCertID(BBUEURPersonalizationParameters::EURCertID *this)
{
  *(void *)this = &unk_26CECE848;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE848;
  CFDataRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

CFDataRef BBUEURPersonalizationParameters::EURCertID::createFromPublicKeyHashData(CFDataRef theData, const __CFData *a2)
{
  CFDataRef v2 = theData;
  if (!theData) {
    return v2;
  }
  BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
  if ((CFDataGetLength(v2) & 0xFFFFFFFCLL) != 0)
  {
    CFDataRef v2 = (CFDataRef)operator new(0x10uLL);
    *(void *)CFDataRef v2 = &unk_26CECE848;
    *((void *)v2 + 1) = 0;
    uint64_t valuePtr = bswap32(*BytePtr);
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
    *((void *)v2 + 1) = v4;
    if (!v4)
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 97, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0xFFu, (ctu::LogMessageBuffer *)"Assertion failure(certID->fNumber && \"Failed to create certID from public key hash.\")", v7, v8, v9, v10);
    }
    return v2;
  }
  return 0;
}

void sub_21DF6F94C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURCertID::getAsCFNumber(BBUEURPersonalizationParameters::EURCertID *this)
{
  return *((void *)this + 1);
}

uint64_t BBUEURPersonalizationParameters::EURCertID::getAsUnsigned(unsigned int **this, uint64_t a2, const __CFNumber *a3)
{
  unsigned int v9 = -1431655766;
  if ((ctu::cf::assign((ctu::cf *)&v9, this[1], a3) & 1) == 0)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 97, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x11Du, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to create certID.\")", v5, v6, v7, v8);
  }
  return v9;
}

void sub_21DF6F9F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUEURPersonalizationParameters::EURChipID::~EURChipID(BBUEURPersonalizationParameters::EURChipID *this)
{
  *(void *)this = &unk_26CECE878;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE878;
  CFDataRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

void *BBUEURPersonalizationParameters::EURChipID::createFromChipID(BBUEURPersonalizationParameters::EURChipID *this)
{
  unsigned int v1 = this;
  CFDataRef v2 = operator new(0x10uLL);
  void *v2 = &unk_26CECE878;
  v2[1] = 0;
  uint64_t valuePtr = v1;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
  v2[1] = v3;
  if (!v3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 98, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x136u, (ctu::LogMessageBuffer *)"Assertion failure(chipID->fNumber && \"Failed to create certID.\")", v6, v7, v8, v9);
  }
  return v2;
}

void sub_21DF6FB78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURChipID::getAsCFNumber(BBUEURPersonalizationParameters::EURChipID *this)
{
  return *((void *)this + 1);
}

uint64_t BBUEURPersonalizationParameters::EURChipID::getAsUnsigned(unsigned int **this, uint64_t a2, const __CFNumber *a3)
{
  unsigned int v9 = -1431655766;
  if ((ctu::cf::assign((ctu::cf *)&v9, this[1], a3) & 1) == 0)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 98, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x151u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to create chipID.\")", v5, v6, v7, v8);
  }
  return v9;
}

void sub_21DF6FC1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUEURPersonalizationParameters::EURKeyStatus::~EURKeyStatus(BBUEURPersonalizationParameters::EURKeyStatus *this)
{
  *(void *)this = &unk_26CECE8A8;
  unsigned int v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE8A8;
  CFDataRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

void *BBUEURPersonalizationParameters::EURKeyStatus::createFromKeyStatus(BBUEURPersonalizationParameters::EURKeyStatus *this)
{
  unsigned int v1 = this;
  CFDataRef v2 = operator new(0x10uLL);
  void *v2 = &unk_26CECE8A8;
  v2[1] = 0;
  uint64_t valuePtr = v1;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
  v2[1] = v3;
  if (!v3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 99, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x16Au, (ctu::LogMessageBuffer *)"Assertion failure(status->fNumber && \"Failed to create key status.\")", v6, v7, v8, v9);
  }
  return v2;
}

void sub_21DF6FDA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURKeyStatus::getAsUnsigned(unsigned int **this, uint64_t a2, const __CFNumber *a3)
{
  unsigned int v9 = -1431655766;
  if ((ctu::cf::assign((ctu::cf *)&v9, this[1], a3) & 1) == 0)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 99, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x17Fu, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to create key status.\")", v5, v6, v7, v8);
  }
  return v9;
}

void sub_21DF6FE40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURKeyStatus::getAsCFNumber(BBUEURPersonalizationParameters::EURKeyStatus *this)
{
  return *((void *)this + 1);
}

void BBUEURPersonalizationParameters::EURKeyHash::~EURKeyHash(BBUEURPersonalizationParameters::EURKeyHash *this)
{
  *(void *)this = &unk_26CECE8D8;
  unsigned int v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE8D8;
  CFDataRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

uint64_t BBUEURPersonalizationParameters::EURKeyHash::getAsCFData(BBUEURPersonalizationParameters::EURKeyHash *this)
{
  return *((void *)this + 1);
}

void BBUEURPersonalizationParameters::EURKeyHash::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
}

void BBUEURPersonalizationParameters::EURPublicKeyHash::~EURPublicKeyHash(BBUEURPersonalizationParameters::EURPublicKeyHash *this)
{
  *(void *)this = &unk_26CECE908;
  unsigned int v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECE908;
  CFDataRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  operator delete(this);
}

uint64_t BBUEURPersonalizationParameters::EURPublicKeyHash::getAsCFData(BBUEURPersonalizationParameters::EURPublicKeyHash *this)
{
  return *((void *)this + 1);
}

void BBUEURPersonalizationParameters::EURPublicKeyHash::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
}

BOOL BBUHashData::compareHash(BBUHashData *this, BBUFeedback *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, const char *a5)
{
  size_t v10 = (*(uint64_t (**)(BBUHashData *))(*(void *)this + 32))(this);
  int v11 = memcmp(a3, a4, v10);
  if (!v11) {
    return v11 == 0;
  }
  BBUFeedback::handleComment(a2, "%s Hash mismatch", a5);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_4:
      if (gBBULogVerbosity >= 1) {
        _BBULog(1, 1, "BBUEUR2HashData", "", "%s Hash mismatch\n", v12, v13, v14, (char)a5);
      }
    }
  }
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(BBUHashData *))(*(void *)this + 32))(this);
  ctu::assign();
  BBUFeedback::handleComment(a2, "\t %s:  %s", "File    ", (const char *)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(BBUHashData *))(*(void *)this + 32))(this);
  ctu::assign();
  if (v19 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  BBUFeedback::handleComment(a2, "\t %s:  %s", "Manifest", p_p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  return v11 == 0;
}

void sub_21DF70218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *BBUProgrammer::Item::createFromImage(int a1, uint64_t *a2)
{
  if (a1 >= 20480)
  {
    if ((a1 - 20480) < 8)
    {
      CFNumberRef v4 = operator new(0x38uLL);
      BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v4, a1, a2);
      return v4;
    }
LABEL_11:
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 85, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xA9u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU programmer item.\")", v7, v8, v9, v10);
  }
  if ((a1 - 16391) >= 0x1C)
  {
    if ((a1 - 16385) < 6)
    {
      CFNumberRef v4 = operator new(0x18uLL);
      BBUEUR4Programmer::EUR4Item::EUR4Item((uint64_t)v4, a1, a2);
      return v4;
    }
    if ((a1 - 0x2000) < 2)
    {
      CFNumberRef v4 = operator new(0x18uLL);
      BBUEUR2Programmer::EUR2Item::EUR2Item((uint64_t)v4, a1, a2);
      return v4;
    }
    goto LABEL_11;
  }
  CFNumberRef v4 = operator new(0x20uLL);
  BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v4, a1, a2);
  return v4;
}

void sub_21DF70358(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF7036C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF70380(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF70394(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF703A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::BBUProgrammer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)CFDataRef result = &unk_26CECEA50;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(unsigned char *)(result + 32) = 0;
  *(void *)(result + 40) = result + 40;
  *(void *)(result + 48) = result + 40;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  if (!a3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xB4u, (ctu::LogMessageBuffer *)"Assertion failure(transport && \"BBU telephony util transport error.\")", v5, v6, v7, v8);
  }
  return result;
}

void sub_21DF70468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
}

void sub_21DF7047C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  __cxa_free_exception(v10);
  std::list<BBUProgrammer::Item *>::~list(a10);
  _Unwind_Resume(a1);
}

uint64_t *std::list<BBUProgrammer::Item *>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    CFDataRef v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v2[1];
        operator delete(v2);
        CFDataRef v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void BBUProgrammer::~BBUProgrammer(BBUProgrammer *this)
{
  *(void *)this = &unk_26CECEA50;
  CFDataRef v2 = (char *)this + 40;
  for (uint64_t i = *((void *)this + 6); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*((void *)this + 7))
  {
    uint64_t v6 = *((void *)this + 5);
    uint64_t v5 = (char *)*((void *)this + 6);
    uint64_t v7 = *(void *)v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    *((void *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        char v8 = (char *)*((void *)v5 + 1);
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

uint64_t BBUProgrammer::addItemsFromList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v5 = a1 + 40;
    do
    {
      uint64_t v6 = *(void *)(v2 + 16);
      if (!v6)
      {
        exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xC1u, (ctu::LogMessageBuffer *)"Assertion failure(item && \"Error: loading programmer items!\")", v11, v12, v13, v14);
      }
      uint64_t v7 = operator new(0x18uLL);
      v7[1] = v5;
      void v7[2] = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      *uint64_t v7 = v8;
      *(void *)(v8 + 8) = v7;
      *(void *)(a1 + 40) = v7;
      ++*(void *)(a1 + 56);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
  }
  return 0;
}

void sub_21DF706A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *BBUProgrammer::create(capabilities::updater *a1, uint64_t a2, uint64_t a3)
{
  switch(capabilities::updater::getProgrammerType(a1))
  {
    case 0u:
      uint64_t v7 = operator new(0x10E8uLL);
      BBUEUR2Programmer::BBUEUR2Programmer((uint64_t)v7, (uint64_t)a1, a2, a3);
      v7[537] = 0;
      *uint64_t v7 = &unk_26CECE0F8;
      *((unsigned char *)v7 + 4327) = 0;
      *((unsigned char *)v7 + 4304) = 0;
      goto LABEL_3;
    case 1u:
      char v10 = operator new(0x1108uLL);
      BBUEUR2Programmer::BBUEUR2Programmer((uint64_t)v10, (uint64_t)a1, a2, a3);
      v10[4327] = 0;
      *((void *)v10 + 537) = 0;
      v10[4304] = 0;
      *(void *)char v10 = &unk_26CECC0A0;
      *((void *)v10 + 541) = 0;
      *((void *)v10 + 543) = 0;
      *((void *)v10 + 542) = 0;
      uint64_t v11 = (char *)operator new(0x400uLL);
      *((void *)v10 + 541) = v11;
      *((void *)v10 + 543) = v11 + 1024;
      bzero(v11, 0x400uLL);
      *((void *)v10 + 542) = v11 + 1024;
      *((void *)v10 + 544) = v11;
      return v10;
    case 2u:
      uint64_t v9 = (char *)operator new(0x140uLL);
      BBUICEProgrammer::BBUICEProgrammer((uint64_t)v9, (uint64_t)a1, a2, a3);
      *(void *)uint64_t v9 = &unk_26CECE258;
      *(_WORD *)(v9 + 81) = 0;
      v9[111] = 0;
      v9[88] = 0;
      *((_DWORD *)v9 + 28) = 0;
      pthread_mutex_init((pthread_mutex_t *)(v9 + 120), 0);
      *((_DWORD *)v9 + 46) = 0;
      *((_OWORD *)v9 + 12) = 0u;
      *((_OWORD *)v9 + 13) = 0u;
      *((_DWORD *)v9 + 56) = 1065353216;
      *((void *)v9 + 30) = 0;
      *((void *)v9 + 31) = 0;
      *((void *)v9 + 29) = 0;
      v9[279] = 3;
      strcpy(v9 + 256, "EBL");
      *(_OWORD *)(v9 + 280) = xmmword_21DFAD770;
      *(void *)(v9 + 308) = 0;
      *(void *)(v9 + 300) = 0;
      *((_DWORD *)v9 + 74) = 257;
      return v9;
    case 3u:
      uint64_t v7 = operator new(0x198uLL);
      BBUICE18Programmer::BBUICE18Programmer((uint64_t)v7, (uint64_t)a1, a2, a3);
LABEL_3:
      CFDataRef result = (char *)v7;
      break;
    case 4u:
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xEAu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v13, v14, v15, v16);
    default:
      CFDataRef result = v3;
      break;
  }
  return result;
}

void sub_21DF70948(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF7095C(_Unwind_Exception *a1)
{
  *(void *)unsigned int v1 = &unk_26CECE0F8;
  BBUEUR2Programmer::~BBUEUR2Programmer(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_21DF70990(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  BBUICEProgrammer::~BBUICEProgrammer((BBUICEProgrammer *)v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_21DF709B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF709CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF709E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF709F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *BBUProgrammer::addProgressBarTimes(uint64_t **this, BBUFeedback *a2)
{
  CFDataRef result = (uint64_t *)capabilities::updater::getProgrammerProgressBarTimesType((capabilities::updater *)this);
  if (result == 2)
  {
    uint64_t v6 = this + 2;
    uint64_t v5 = this[2];
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v7 = (uint64_t **)v5;
          int v8 = *((_DWORD *)v5 + 8);
          if (v8 < 2) {
            break;
          }
          uint64_t v5 = *v7;
          uint64_t v6 = v7;
          if (!*v7) {
            goto LABEL_15;
          }
        }
        if (v8 == 1) {
          break;
        }
        uint64_t v5 = v7[1];
        if (!v5)
        {
          uint64_t v6 = v7 + 1;
          goto LABEL_15;
        }
      }
    }
    else
    {
      uint64_t v7 = this + 2;
LABEL_15:
      uint64_t v9 = (char *)v7;
      uint64_t v7 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v7 + 8) = 1;
      v7[5] = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = (uint64_t *)v9;
      *uint64_t v6 = (uint64_t *)v7;
      char v10 = (uint64_t *)*this[1];
      uint64_t v11 = (uint64_t *)v7;
      if (v10)
      {
        this[1] = v10;
        uint64_t v11 = *v6;
      }
      CFDataRef result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[2], v11);
      this[3] = (uint64_t *)((char *)this[3] + 1);
    }
    v7[5] = (uint64_t *)0x408F400000000000;
  }
  else
  {
    if (result != 1)
    {
      if (result)
      {
        exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xFFu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v13, v14, v15, v16);
      }
      BBUEUR10Programmer::addProgressBarTimes((uint64_t *)this, v4);
    }
    return BBUEUR20Programmer::addProgressBarTimes((uint64_t *)this, v4);
  }
  return result;
}

void sub_21DF70B74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::connect(BBUProgrammer *this)
{
  if (*((unsigned char *)this + 32))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 74, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0x106u, (ctu::LogMessageBuffer *)"Assertion failure(!fConnected && \"Cannot finish connection, since BBU programmer is already (falsely) recognized as connected!\")", v3, v4, v5, v6);
  }
  *((unsigned char *)this + 32) = 1;
  return 0;
}

void sub_21DF70C00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::disconnect(BBUProgrammer *this)
{
  if (!*((unsigned char *)this + 32))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 74, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0x10Fu, (ctu::LogMessageBuffer *)"Assertion failure(fConnected && \"Cannot finish disconnection, since BBU programmer is already (falsely) recognized as disconnected!\")", v3, v4, v5, v6);
  }
  *((unsigned char *)this + 32) = 0;
  return 0;
}

void sub_21DF70C88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::cmdCopyMei(BBUProgrammer *this, const __CFDictionary **a2)
{
  v11[4] = *(__CFString **)MEMORY[0x263EF8340];
  memset(v11, 170, 25);
  memset(&value[1], 170, 7);
  memset(v10, 170, 15);
  uint64_t v3 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (ETLGSMGetIMEI() && ETLGSMMakeStringFromIMEI())
  {
    value[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    ctu::cf::convert_copy((ctu::cf *)value, (const __CFString **)v11, (const char *)0x8000100, v3, v5);
    CFDictionarySetValue(Mutable, @"imei", value[0]);
    CFRelease(value[0]);
    int v6 = 1;
    if (!ETLCDMAGetMEID()) {
      goto LABEL_8;
    }
  }
  else
  {
    int v6 = 0;
    if (!ETLCDMAGetMEID()) {
      goto LABEL_8;
    }
  }
  if (ETLCDMAMakeStringFromMEID())
  {
    value[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    ctu::cf::convert_copy((ctu::cf *)value, v10, (const char *)0x8000100, v3, v7);
    CFDictionarySetValue(Mutable, @"meid", value[0]);
    CFRelease(value[0]);
LABEL_9:
    uint64_t result = 0;
    *a2 = Mutable;
    return result;
  }
LABEL_8:
  if (v6) {
    goto LABEL_9;
  }
  return 1;
}

void BBUEURMIImage::BBUEURMIImage(BBUEURMIImage *this, BBUDataSource *a2, uint64_t a3)
{
  *(void *)this = &unk_26CECEAE8;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 14) = a3;
  int v37 = -1431655766;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v3 = (_DWORD *)((char *)this + 16);
  *((void *)this + 6) = 0;
  if (!a2)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0xCu, (ctu::LogMessageBuffer *)"Assertion failure(fDataSource)", v27, v28, v29, v36);
    goto LABEL_39;
  }
  if ((*(unsigned int (**)(BBUDataSource *, _DWORD *, uint64_t, int *, uint64_t))(*(void *)a2 + 16))(a2, v3, 40, &v37, a3))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0xEu, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy MI Image data.\")", v30, v31, v32, v36);
    goto LABEL_39;
  }
  if (v37 != 40)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0xFu, (ctu::LogMessageBuffer *)"Assertion failure(( amountCopied == sizeof( MIBootImageHeader)) && \"Copied data size mismatch: Failed to copy MI Image data.\")", v33, v34, v35, v36);
LABEL_39:
  }
  if (*v3 <= 0xBu && ((1 << *v3) & 0xC04) != 0)
  {
    if (gBBULogMaskGet(void)::once == -1) {
      goto LABEL_9;
    }
LABEL_26:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *((_DWORD *)this + 8) = (*(uint64_t (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1))
                        - 40;
  if (gBBULogMaskGet(void)::once != -1) {
    goto LABEL_26;
  }
LABEL_9:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  if (gBBULogVerbosity >= 7)
  {
    int v6 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(void *)this + 16))(this);
    _BBULog(16, 7, v6, "", "Image ID: %u, Header version: %u\n", v7, v8, v9, *((_DWORD *)this + 4));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
LABEL_12:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_13:
  if (gBBULogVerbosity >= 7)
  {
    char v10 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(void *)this + 16))(this);
    _BBULog(16, 7, v10, "", "Image Flash Address: %u, Image RAM Address: %u\n", v11, v12, v13, *((_DWORD *)this + 6));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
  }
LABEL_15:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_16:
  if (gBBULogVerbosity >= 7)
  {
    uint64_t v14 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(void *)this + 16))(this);
    _BBULog(16, 7, v14, "", "Image Size: %u, Code Size: %u\n", v15, v16, v17, *((_DWORD *)this + 8));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
LABEL_18:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
    goto LABEL_21;
  }
LABEL_19:
  if (gBBULogVerbosity >= 7)
  {
    uint64_t v18 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(void *)this + 16))(this);
    _BBULog(16, 7, v18, "", "Signature Address: %u, Signature Size: %u\n", v19, v20, v21, *((_DWORD *)this + 10));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
        return;
      }
      goto LABEL_22;
    }
  }
LABEL_21:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
    return;
  }
LABEL_22:
  if (gBBULogVerbosity >= 7)
  {
    uint64_t v22 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(void *)this + 16))(this);
    _BBULog(16, 7, v22, "", "Cert Chain Address: %u, Cert Chain Size: %up\n", v23, v24, v25, *((_DWORD *)this + 12));
  }
}

void sub_21DF71334(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF71348(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF7135C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUEURMIImage::~BBUEURMIImage(BBUEURMIImage *this)
{
  *(void *)this = &unk_26CECEAE8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CECEAE8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(this);
}

uint64_t BBUEURMIImage::getWritePayloadData(BBUEURMIImage *this, unsigned __int8 *a2, uint64_t a3, int a4)
{
  int v19 = -1431655766;
  uint64_t v5 = *((void *)this + 1);
  if (!v5)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0x35u, (ctu::LogMessageBuffer *)"Assertion failure(fDataSource)", v9, v10, v11, v18);
    goto LABEL_8;
  }
  int v6 = a3;
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, int *, void))(*(void *)v5 + 16))(v5, a2, a3, &v19, (*((_DWORD *)this + 14) + a4));
  if (result)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0x37u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy MI Image data.\")", v12, v13, v14, v18);
    goto LABEL_8;
  }
  if (v19 != v6)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0x38u, (ctu::LogMessageBuffer *)"Assertion failure(( amountCopied == amount) && \"Copied data size mismatch: Failed to copy MI Image data.\")", v15, v16, v17, v18);
LABEL_8:
  }
  return result;
}

void sub_21DF71574(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF71588(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF7159C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *BBUEURMIImage::getName(BBUEURMIImage *this)
{
  return "MultiImage";
}

FILE *fopen_file_func(int a1, char *__filename, char a3)
{
  int v3 = a3 & 3;
  uint64_t v4 = "r+b";
  uint64_t v5 = "wb";
  if ((a3 & 8) == 0) {
    uint64_t v5 = 0;
  }
  if ((a3 & 4) != 0) {
    LOBYTE(v6) = 1;
  }
  else {
    int v6 = (a3 & 8) >> 3;
  }
  if ((a3 & 4) == 0) {
    uint64_t v4 = v5;
  }
  if (v3 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = v6;
  }
  if (v3 == 1) {
    uint64_t v8 = "rb";
  }
  else {
    uint64_t v8 = v4;
  }
  if (__filename && (v7 & 1) != 0) {
    return fopen(__filename, v8);
  }
  else {
    return 0;
  }
}

size_t fread_file_func(int a1, FILE *__stream, void *__ptr, size_t __nitems)
{
  return fread(__ptr, 1uLL, __nitems, __stream);
}

size_t fwrite_file_func(int a1, FILE *__stream, void *__ptr, size_t __nitems)
{
  return fwrite(__ptr, 1uLL, __nitems, __stream);
}

void ftell_file_func()
{
}

uint64_t fseek_file_func(int a1, FILE *a2, uint64_t a3, unsigned int a4)
{
  if (a4 > 2) {
    return -1;
  }
  fseek(a2, a3, a4);
  return 0;
}

uint64_t fclose_file_func(int a1, FILE *a2)
{
  return fclose(a2);
}

uint64_t ferror_file_func(int a1, FILE *a2)
{
  return ferror(a2);
}

FILE *(**fill_fopen_filefunc(FILE *(**result)(int a1, char *__filename, char a3)))(int a1, char *__filename, char a3)
{
  *uint64_t result = fopen_file_func;
  result[1] = (FILE *(*)(int, char *, char))fread_file_func;
  result[2] = (FILE *(*)(int, char *, char))fwrite_file_func;
  result[3] = (FILE *(*)(int, char *, char))ftell_file_func;
  result[4] = (FILE *(*)(int, char *, char))fseek_file_func;
  result[5] = (FILE *(*)(int, char *, char))fclose_file_func;
  result[6] = (FILE *(*)(int, char *, char))ferror_file_func;
  result[7] = 0;
  return result;
}

void BBUProfiler::BBUProfiler(BBUProfiler *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v4 = *(const void **)this;
    *(void *)this = Mutable;
    if (v4) {
      CFRelease(v4);
    }
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *((void *)this + 2);
  if (v5 == v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v6) << 6) - 1;
  }
  uint64_t v8 = *((void *)this + 6);
  unint64_t v9 = v8 + *((void *)this + 5);
  if (v7 == v9)
  {
    std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::__add_back_capacity(v2);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v8 = *((void *)this + 6);
    unint64_t v9 = v8 + *((void *)this + 5);
  }
  uint64_t v10 = *(const void **)this;
  *(void *)(*(void *)(v6 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *(void *)this;
  if (v10)
  {
    CFRetain(v10);
    uint64_t v8 = *((void *)this + 6);
  }
  *((void *)this + 6) = v8 + 1;
}

void sub_21DF7180C(_Unwind_Exception *a1)
{
  std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::~deque[abi:ne180100](v2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void BBUProfiler::startStage(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[6] + a1[5] - 1;
  uint64_t v5 = *(void **)(*(void *)(a1[2] + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
  if (v5) {
    CFRetain(v5);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  CFTypeRef cf = 0;
  ctu::cf::convert_copy();
  CFTypeRef v7 = cf;
  CFTypeRef v14 = cf;
  CFTypeRef cf = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    if (v7) {
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, v7, Mutable);
    }
    CFRelease(Mutable);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[2];
  if (v8 == v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v8 - v9) << 6) - 1;
  }
  uint64_t v11 = a1[6];
  unint64_t v12 = v11 + a1[5];
  if (v10 == v12)
  {
    std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::__add_back_capacity(a1 + 1);
    uint64_t v9 = a1[2];
    uint64_t v11 = a1[6];
    unint64_t v12 = v11 + a1[5];
  }
  *(void *)(*(void *)(v9 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)) = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    uint64_t v11 = a1[6];
  }
  a1[6] = v11 + 1;
  *((unsigned char *)&v13.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v13, "start");
  BBUProfiler::markEvent(a1, (uint64_t)&v13);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_21DF71A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, const void *a18, const void *a19)
{
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a9);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void BBUProfiler::markEvent(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[6] + a1[5] - 1;
  unint64_t v4 = *(void **)(*(void *)(a1[2] + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF));
  if (v4) {
    CFRetain(v4);
  }
  int v5 = TelephonyUtilSystemMachTime();
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v12 = 0;
  ctu::cf::convert_copy();
  CFNumberRef v7 = v12;
  CFNumberRef v11 = v12;
  int valuePtr = v5;
  CFNumberRef v8 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  CFNumberRef v12 = v8;
  if (v7 && v8)
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)v4, v7, v8);
  }
  else if (!v8)
  {
    goto LABEL_11;
  }
  CFRelease(v9);
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if (!v4) {
      return;
    }
    goto LABEL_17;
  }
  if (v4) {
LABEL_17:
  }
    CFRelease(v4);
}

void sub_21DF71BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, const void *a18)
{
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t BBUProfiler::endStage(BBUProfiler *this)
{
  char v36 = 4;
  strcpy((char *)v35, "stop");
  BBUProfiler::markEvent(this, (uint64_t)v35);
  uint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 5) + *((void *)this + 6) - 1;
  v35[0] = 0xAAAAAAAAAAAAAAAALL;
  v35[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v35, *(const __CFDictionary **)(*(void *)(v2 + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF)));
  uint64_t v34 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v38, "stop");
  unint64_t v4 = (int *)(*(uint64_t (**)(void *, CFNumberRef))v35[0])(v35, v38);
  int v5 = v4;
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID()) {
      ctu::cf::assign((ctu::cf *)((char *)&v34 + 4), v5, v7);
    }
    CFRelease(v5);
  }
  MEMORY[0x223C1D120](&v38);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v38, "start");
  CFNumberRef v8 = (int *)(*(uint64_t (**)(void *, CFNumberRef))v35[0])(v35, v38);
  CFNumberRef v9 = v8;
  if (v8)
  {
    CFTypeID v10 = CFGetTypeID(v8);
    if (v10 == CFNumberGetTypeID()) {
      ctu::cf::assign((ctu::cf *)&v34, v9, v11);
    }
    CFRelease(v9);
  }
  MEMORY[0x223C1D120](&v38);
  unint64_t v12 = *((void *)this + 6) + *((void *)this + 5) - 1;
  int v14 = v34;
  int v13 = HIDWORD(v34);
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v16 = *(__CFDictionary **)(*(void *)(*((void *)this + 2) + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF));
  CFNumberRef v38 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v38, (const __CFString **)"delta", (const char *)0x8000100, (uint64_t)v15, v17);
  int v18 = v13 - v14;
  CFNumberRef v19 = v38;
  CFNumberRef v37 = v38;
  int valuePtr = v18;
  CFNumberRef v20 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
  CFNumberRef v21 = v20;
  CFNumberRef v38 = v20;
  if (v19 && v20)
  {
    CFDictionaryAddValue(v16, v19, v20);
  }
  else if (!v20)
  {
    goto LABEL_14;
  }
  CFRelease(v21);
LABEL_14:
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v23 = *((void *)this + 5);
  uint64_t v22 = *((void *)this + 6);
  uint64_t v24 = v22 - 1;
  unint64_t v25 = v22 - 1 + v23;
  uint64_t v26 = *((void *)this + 2);
  uint64_t v27 = *(void *)(v26 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v28 = v25 & 0x1FF;
  uint64_t v29 = *(const void **)(v27 + 8 * v28);
  if (v29)
  {
    CFRetain(*(CFTypeRef *)(v27 + 8 * v28));
    uint64_t v23 = *((void *)this + 5);
    uint64_t v22 = *((void *)this + 6);
    uint64_t v26 = *((void *)this + 2);
    uint64_t v24 = v22 - 1;
    uint64_t v30 = *(const void **)(*(void *)(v26 + (((unint64_t)(v22 - 1 + v23) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v22 - 1 + v23) & 0x1FF));
    if (v30)
    {
      CFRelease(v30);
      uint64_t v26 = *((void *)this + 2);
      uint64_t v23 = *((void *)this + 5);
      uint64_t v22 = *((void *)this + 6);
      uint64_t v24 = v22 - 1;
    }
  }
  uint64_t v31 = *((void *)this + 3);
  *((void *)this + 6) = v24;
  if (v31 == v26) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = ((v31 - v26) << 6) - 1;
  }
  if ((unint64_t)(v32 - (v23 + v22) + 1) >= 0x400)
  {
    operator delete(*(void **)(v31 - 8));
    *((void *)this + 3) -= 8;
  }
  if (v29) {
    CFRelease(v29);
  }
  return MEMORY[0x223C1D170](v35);
}

void sub_21DF71F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  CFNumberRef v8 = va_arg(va2, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  MEMORY[0x223C1D170]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21DF71F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x223C1D170](va);
  _Unwind_Resume(a1);
}

void sub_21DF71F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  MEMORY[0x223C1D120](va1);
  MEMORY[0x223C1D170]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL BBUProfiler::exportToFile(CFTypeRef *a1, uint64_t a2)
{
  CFTypeRef v3 = *a1;
  CFRetain(*a1);
  CFTypeRef v13 = v3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = __p;
  }
  uint64_t v14 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v16 = v15;
  }
  CFStringRef v17 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (ctu::cf::convert_copy()) {
    CFStringRef v5 = v17;
  }
  else {
    CFStringRef v5 = 0;
  }
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    CFStringRef v12 = v5;
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_20:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  CFStringRef v12 = v5;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_21:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
  CFURLRef v6 = CFURLCreateWithFileSystemPath(v4, v5, kCFURLPOSIXPathStyle, 0);
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  uint64_t v7 = CFWriteStreamCreateWithFile(0, v6);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  if (!CFWriteStreamOpen(v7))
  {
    BOOL v9 = 0;
    if (!v7) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  CFIndex v8 = CFPropertyListWrite(v3, v7, kCFPropertyListXMLFormat_v1_0, 0, 0);
  CFWriteStreamClose(v7);
  BOOL v9 = v8 != 0;
  if (v7) {
LABEL_23:
  }
    CFRelease(v7);
LABEL_24:
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v9;
}

void sub_21DF72194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, const void *a17, const void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a17);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    CFURLRef v6 = (void *)a1[1];
    CFStringRef v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)CFStringRef v5 = v8;
      goto LABEL_95;
    }
    BOOL v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      CFStringRef v5 = &v14[v15];
      std::string v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v35 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v35 = 1;
    }
    if (v35 >> 61) {
      goto LABEL_111;
    }
    unint64_t v36 = v35 >> 2;
    uint64_t v37 = 8 * v35;
    CFNumberRef v38 = (char *)operator new(8 * v35);
    uint64_t v39 = &v38[8 * v36];
    int64_t v41 = v5 - v7;
    BOOL v40 = v5 == v7;
    CFStringRef v5 = v39;
    if (!v40)
    {
      CFStringRef v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v42 = v41 - 8;
      if ((unint64_t)(v41 - 8) >= 0x38)
      {
        int v92 = &v38[8 * v36];
        unint64_t v43 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v42 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v43 = &v39[v94];
          v7 += v94;
          uint64_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        unint64_t v43 = &v38[8 * v36];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)unint64_t v43 = v99;
        v43 += 8;
      }
      while (v43 != v5);
    }
LABEL_91:
    *a1 = v38;
    a1[1] = v39;
    a1[2] = v5;
    a1[3] = &v38[v37];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v100 = v9;
LABEL_93:
    operator delete(v100);
    CFStringRef v5 = (char *)a1[2];
    goto LABEL_94;
  }
  int v18 = (char *)a1[2];
  CFStringRef v17 = (char *)a1[3];
  CFNumberRef v20 = (char *)*a1;
  CFNumberRef v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    unint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)int v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      uint64_t v72 = (char *)operator new(8 * v69);
      char v44 = &v72[8 * v70];
      long long v73 = v44;
      if (v18 != v19)
      {
        long long v73 = &v44[8 * v22];
        int v74 = &v72[8 * v70];
        long long v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        long long v76 = &v72[8 * v70];
        int v74 = v76;
        long long v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        int v74 = &v44[v78];
        long long v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)int v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v44;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        char v44 = (char *)a1[1];
      }
    }
    else
    {
      char v44 = v19;
    }
    *((void *)v44 - 1) = v25;
    int v84 = (char *)a1[1];
    CFStringRef v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    long long v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      int v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        int v84 = (char *)a1[1];
      }
      CFStringRef v5 = &v90[v91];
      std::string v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      std::string::size_type v104 = (char *)operator new(8 * v101);
      uint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v40 = v5 == v84;
      CFStringRef v5 = v105;
      if (!v40)
      {
        CFStringRef v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          uint64_t v109 = &v104[8 * v102];
          uint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v108 = &v105[v111];
            int v112 = &v84[v111];
            long long v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *uint64_t v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            int v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)uint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      uint64_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0x1000uLL);
  uint64_t v30 = &v28[8 * v22];
  uint64_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    uint64_t v33 = v29;
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = v21 >> 2;
      }
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v30 = (char *)operator new(8 * v45);
      uint64_t v31 = &v30[8 * v45];
      operator delete(v28);
      uint64_t v46 = (char *)a1[1];
      int v18 = (char *)a1[2];
      uint64_t v28 = v30;
      *(void *)uint64_t v30 = v33;
      uint64_t v32 = v30 + 8;
      if (v18 == v46) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v34 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v34 = v22 + 1;
      }
      v30 -= 8 * (v34 >> 1);
      *(void *)uint64_t v30 = v29;
      uint64_t v32 = v30 + 8;
      if (v18 == v19) {
        goto LABEL_40;
      }
    }
    goto LABEL_46;
  }
  *(void *)uint64_t v30 = v29;
  uint64_t v32 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_46:
      if (v30 == v28)
      {
        if (v32 >= v31)
        {
          if (v31 == v28) {
            unint64_t v53 = 1;
          }
          else {
            unint64_t v53 = (v31 - v28) >> 2;
          }
          if (v53 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v54 = (char *)operator new(8 * v53);
          int v55 = v54;
          unint64_t v56 = (v53 + 3) >> 2;
          uint64_t v30 = &v54[8 * v56];
          int64_t v57 = v32 - v28;
          BOOL v40 = v32 == v28;
          uint64_t v32 = v30;
          if (!v40)
          {
            uint64_t v32 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v58 = v57 - 8;
            uint64_t v59 = &v54[8 * v56];
            uint64_t v60 = v28;
            if (v58 < 0x38) {
              goto LABEL_116;
            }
            uint64_t v61 = 8 * v56;
            uint64_t v59 = &v54[8 * v56];
            uint64_t v60 = v28;
            if ((unint64_t)(v59 - v28) < 0x20) {
              goto LABEL_116;
            }
            uint64_t v62 = (v58 >> 3) + 1;
            uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v30[v63];
            uint64_t v60 = &v28[v63];
            uint64_t v64 = (long long *)(v28 + 16);
            unsigned int v65 = &v54[v61 + 16];
            uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)unsigned int v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_116:
              do
              {
                uint64_t v68 = *(void *)v60;
                v60 += 8;
                *(void *)uint64_t v59 = v68;
                v59 += 8;
              }
              while (v59 != v32);
            }
          }
          uint64_t v31 = &v54[8 * v53];
          operator delete(v28);
          uint64_t v28 = v55;
        }
        else
        {
          uint64_t v49 = (v31 - v32) >> 3;
          if (v49 >= -1) {
            uint64_t v50 = v49 + 1;
          }
          else {
            uint64_t v50 = v49 + 2;
          }
          uint64_t v51 = v50 >> 1;
          uint64_t v30 = &v28[8 * (v50 >> 1)];
          std::string v52 = v28;
          if (v32 != v28)
          {
            memmove(v30, v28, v32 - v28);
            std::string v52 = v32;
          }
          uint64_t v32 = (char *)v52 + 8 * v51;
        }
      }
      uint64_t v48 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != (char *)a1[1]);
  }
LABEL_40:
  uint64_t v47 = (char *)*a1;
  *a1 = v28;
  a1[1] = v30;
  a1[2] = v32;
  a1[3] = v31;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_21DF7292C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BBULogKTLPrintDelegate(const char *a1, const char *a2, va_list a3)
{
  if (a1)
  {
    if (a2)
    {
      size_t v5 = strnlen(a1, 0x400uLL);
      if (v5 - 1005 >= 0xFFFFFFFFFFFFFC00)
      {
        size_t v6 = 1005 - v5;
        std::mutex::lock(&gLogLock);
        uint64_t v7 = (ACFULogging *)vsnprintf(gLogBuffer, v6, a2, a3);
        ACFULogging::getLogInstance(v7);
        ACFULogging::handleMessage();
        std::mutex::unlock(&gLogLock);
      }
    }
  }
}

{
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  timeval v12;
  char __str[16];
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)&size_t v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v27 = v5;
  uint64_t v28 = v5;
  unint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v23 = v5;
  uint64_t v24 = v5;
  uint64_t v21 = v5;
  uint64_t v22 = v5;
  CFNumberRef v19 = v5;
  CFNumberRef v20 = v5;
  CFStringRef v17 = v5;
  int v18 = v5;
  int64_t v15 = v5;
  std::string v16 = v5;
  *(_OWORD *)__str = v5;
  uint64_t v14 = v5;
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v12.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v12, 0);
  vsnprintf(__str, 0x100uLL, a2, a3);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 1) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 1) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULogPlain(8, "%u.%03u: %s: %s", v6, v7, v8, v9, v10, v11, v12.tv_sec);
  }
}

void sub_21DF72A40(_Unwind_Exception *a1)
{
}

void BBULogKTLPrintErrorDelegate(const char *a1, const char *a2, va_list a3)
{
  if (a1)
  {
    if (a2)
    {
      size_t v5 = strnlen(a1, 0x400uLL);
      if (v5 - 1005 >= 0xFFFFFFFFFFFFFC00)
      {
        size_t v6 = 1005 - v5;
        std::mutex::lock(&gLogLock);
        uint64_t v7 = (ACFULogging *)vsnprintf(gLogBuffer, v6, a2, a3);
        ACFULogging::getLogInstance(v7);
        ACFULogging::handleMessage();
        std::mutex::unlock(&gLogLock);
      }
    }
  }
}

{
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  timeval v12;
  char __str[16];
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)&size_t v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v27 = v5;
  uint64_t v28 = v5;
  unint64_t v25 = v5;
  uint64_t v26 = v5;
  uint64_t v23 = v5;
  uint64_t v24 = v5;
  uint64_t v21 = v5;
  uint64_t v22 = v5;
  CFNumberRef v19 = v5;
  CFNumberRef v20 = v5;
  CFStringRef v17 = v5;
  int v18 = v5;
  int64_t v15 = v5;
  std::string v16 = v5;
  *(_OWORD *)__str = v5;
  uint64_t v14 = v5;
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v12.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v12, 0);
  vsnprintf(__str, 0x100uLL, a2, a3);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 1) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 1) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULogPlain(0, "%u.%03u: %s: %s", v6, v7, v8, v9, v10, v11, v12.tv_sec);
  }
}

void sub_21DF72B38(_Unwind_Exception *a1)
{
}

void BBULogKTLPrintBinaryDelegate(ACFULogging *a1)
{
  ACFULogging::getLogInstance(a1);
  uint64_t v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  strcpy(__p, "BasebandUpdater:");
  ACFULogging::handleMessageBinary();
}

void sub_21DF72C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEnvironment::validate(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  char v55 = 10;
  strcpy((char *)__p, "CommCenter");
  __size.__r_.__value_.__r.__words[0] = 0;
  if (sysctl(BBUEnvironment::isProcessLoaded(std::string const&)::kNames, 3u, 0, (size_t *)&__size, 0, 0))
  {
    int v40 = *__error();
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUEnvironment.cpp", 0x24u, (ctu::LogMessageBuffer *)"first sysctl() failed with err = %d", v42, v43, v44, v40);
    goto LABEL_70;
  }
  BOOL v3 = (char *)malloc(__size.__r_.__value_.__r.__words[0]);
  if (!v3)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUEnvironment.cpp", 0x2Au, (ctu::LogMessageBuffer *)"malloc failed for proc list", v45, v46, v47, v52);
    goto LABEL_70;
  }
  unint64_t v4 = v3;
  if (sysctl(BBUEnvironment::isProcessLoaded(std::string const&)::kNames, 3u, v3, (size_t *)&__size, 0, 0))
  {
    int v48 = *__error();
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUEnvironment.cpp", 0x32u, (ctu::LogMessageBuffer *)"second sysctl() failed with err = %d", v49, v50, v51, v48);
LABEL_70:
  }
  std::string::size_type v8 = __size.__r_.__value_.__r.__words[0];
  unint64_t v9 = ((__size.__r_.__value_.__r.__words[0] >> 3) * (unsigned __int128)0x329161F9ADD3C0CBuLL) >> 64;
  if (gBBULogMaskGet(void)::once == -1)
  {
    std::string::size_type v10 = __size.__r_.__value_.__r.__words[0] / 0x288;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    std::string::size_type v10 = v9 >> 4;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
    {
LABEL_6:
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(3, 0, "BBUEnvironment", "", "There are %zu processes\n", v5, v6, v7, v10);
      }
    }
  }
  if (v8 <= 0x287)
  {
    free(v4);
LABEL_60:
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    return 1;
  }
  uint64_t v11 = 0;
  unsigned int v12 = 0;
  while (1)
  {
    int64_t v15 = &v4[648 * v11 + 243];
    memset(&__size, 170, sizeof(__size));
    size_t v16 = strlen(v15);
    if (v16 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v20 = v16;
    if (v16 >= 0x17)
    {
      uint64_t v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v22 = v16 | 7;
      }
      uint64_t v23 = v22 + 1;
      p_std::string::size_type size = (std::string *)operator new(v22 + 1);
      __size.__r_.__value_.__l.__size_ = v20;
      __size.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
      __size.__r_.__value_.__r.__words[0] = (std::string::size_type)p_size;
LABEL_20:
      memcpy(p_size, v15, v20);
      goto LABEL_21;
    }
    *((unsigned char *)&__size.__r_.__value_.__s + 23) = v16;
    p_std::string::size_type size = &__size;
    if (v16) {
      goto LABEL_20;
    }
LABEL_21:
    p_size->__r_.__value_.__s.__data_[v20] = 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0) {
        goto LABEL_28;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      if ((__size.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &__size;
      }
      else {
        LOBYTE(v24) = __size.__r_.__value_.__s.__data_[0];
      }
      _BBULog(3, 0, "BBUEnvironment", "", "Checking against process %s\n", v17, v18, v19, (char)v24);
    }
LABEL_28:
    if ((__size.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__size.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __size.__r_.__value_.__l.__size_;
    }
    unint64_t v26 = v55;
    int v27 = v55;
    if (v55 < 0) {
      unint64_t v26 = (unint64_t)__p[1];
    }
    if (size != v26)
    {
      if ((*((unsigned char *)&__size.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__size.__r_.__value_.__l.__data_);
      }
      goto LABEL_12;
    }
    if (v55 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if ((*((unsigned char *)&__size.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v13 = (void *)__size.__r_.__value_.__r.__words[0];
      int v14 = memcmp(__size.__r_.__value_.__l.__data_, v28, __size.__r_.__value_.__l.__size_);
      operator delete(v13);
      if (!v14) {
        break;
      }
      goto LABEL_12;
    }
    if (!*((unsigned char *)&__size.__r_.__value_.__s + 23)) {
      break;
    }
    uint64_t v29 = 0;
    do
    {
      int v30 = __size.__r_.__value_.__s.__data_[v29];
      int v31 = *((unsigned __int8 *)v28 + v29);
    }
    while (v30 == v31 && HIBYTE(__size.__r_.__value_.__r.__words[2]) - 1 != v29++);
    if (v30 == v31) {
      break;
    }
LABEL_12:
    uint64_t v11 = ++v12;
    if (v10 <= v12)
    {
      int v33 = 0;
      free(v4);
      std::string::size_type v34 = *(void *)"CommCenter";
      if (v27 < 0) {
        goto LABEL_59;
      }
LABEL_52:
      if (!v33) {
        goto LABEL_60;
      }
      goto LABEL_53;
    }
  }
  int v33 = 1;
  free(v4);
  std::string::size_type v34 = *(void *)"CommCenter";
  if ((v27 & 0x80000000) == 0) {
    goto LABEL_52;
  }
LABEL_59:
  operator delete(__p[0]);
  if ((v33 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_53:
  __size.__r_.__value_.__l.__size_ = v34;
  __size.__r_.__value_.__r.__words[0] = 0x20737365636F7250;
  __size.__r_.__value_.__r.__words[2] = 29285;
  unint64_t v35 = std::string::append(&__size, " is loaded, please unload it", 0x1CuLL);
  std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
  __p[0] = (void *)v35->__r_.__value_.__l.__size_;
  *(void **)((char *)__p + 7) = *(void **)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
  char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  CFNumberRef v38 = __p[0];
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v38;
  *(void **)(a2 + 15) = *(void **)((char *)__p + 7);
  *(unsigned char *)(a2 + 23) = v37;
  if (SHIBYTE(__size.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__size.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_21DF7318C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bbufs::prepareDestination(bbufs *this, const char *a2)
{
  memset(v168, 170, 24);
  size_t v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memcpy(p_dst, this, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  std::string::size_type v8 = std::string::append(&__dst, "/", 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v168[1] = *((void *)&v8->__r_.__value_.__l + 2);
  v168[0] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::string::size_type v10 = (const void *)kBBUFSServerBackupName;
  size_t v11 = strlen((const char *)kBBUFSServerBackupName);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v13 = operator new(v14 + 1);
    v166.__r_.__value_.__l.__size_ = v12;
    v166.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_18;
  }
  *((unsigned char *)&v166.__r_.__value_.__s + 23) = v11;
  uint64_t v13 = &v166;
  if (v11) {
LABEL_18:
  }
    memmove(v13, v10, v12);
  *((unsigned char *)v13 + v12) = 0;
  size_t v16 = std::string::append(&v166, "/", 1uLL);
  std::string __dst = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  int v17 = SBYTE7(v168[1]);
  if ((SBYTE7(v168[1]) & 0x80u) == 0) {
    size_t v18 = BYTE7(v168[1]);
  }
  else {
    size_t v18 = *((void *)&v168[0] + 1);
  }
  int v19 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  unint64_t v21 = size + v18;
  memset(&v166, 170, sizeof(v166));
  if (size + v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v21 <= 0x16)
  {
    memset(&v166, 0, sizeof(v166));
    uint64_t v22 = (char *)&v166;
    *((unsigned char *)&v166.__r_.__value_.__s + 23) = size + v18;
    if (!v18) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  uint64_t v55 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v21 | 7) != 0x17) {
    uint64_t v55 = v21 | 7;
  }
  uint64_t v56 = v55 + 1;
  uint64_t v22 = (char *)operator new(v55 + 1);
  v166.__r_.__value_.__l.__size_ = size + v18;
  v166.__r_.__value_.__r.__words[2] = v56 | 0x8000000000000000;
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  if (v18)
  {
LABEL_30:
    if (v17 >= 0) {
      uint64_t v23 = v168;
    }
    else {
      uint64_t v23 = *(_OWORD **)&v168[0];
    }
    memmove(v22, v23, v18);
  }
LABEL_34:
  uint64_t v24 = &v22[v18];
  if (size)
  {
    if (v19 >= 0) {
      unint64_t v25 = &__dst;
    }
    else {
      unint64_t v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v24, v25, size);
  }
  v24[size] = 0;
  size_t v26 = strlen((const char *)this);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v33 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v57 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v57 = v26 | 7;
    }
    uint64_t v58 = v57 + 1;
    std::string::size_type v34 = operator new(v57 + 1);
    long long v164 = (void *)v33;
    unint64_t v165 = v58 | 0x8000000000000000;
    uint64_t v163 = v34;
  }
  else
  {
    HIBYTE(v165) = v26;
    std::string::size_type v34 = &v163;
    if (!v26)
    {
      LOBYTE(v163) = 0;
      int v35 = SHIBYTE(v165);
      if ((SHIBYTE(v165) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_60;
    }
  }
  memcpy(v34, this, v33);
  *((unsigned char *)v34 + v33) = 0;
  int v35 = SHIBYTE(v165);
  if ((SHIBYTE(v165) & 0x80000000) == 0)
  {
LABEL_43:
    if (v35) {
      goto LABEL_44;
    }
LABEL_61:
    uint64_t v60 = "invalid path pointer to create directory\n";
LABEL_63:
    _BBUFSDebugPrint("prepareDestination", v60, v27, v28, v29, v30, v31, v32, v156);
    goto LABEL_64;
  }
LABEL_60:
  uint64_t v59 = v164;
  operator delete(v163);
  if (!v59) {
    goto LABEL_61;
  }
LABEL_44:
  if ((ctu::fs::create_directory() & 1) == 0)
  {
    uint64_t v60 = "failed creating directory\n";
    goto LABEL_63;
  }
  std::string::size_type v36 = getpwnam("_wireless");
  if (!v36)
  {
    uint64_t v63 = "failed to get uid and gid information for _wireless\n";
    _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v37, v38, v39, v40, v41, v42, v156);
LABEL_80:
    _BBUFSDebugPrint("prepareDestination", v63, v64, v65, v66, v67, v68, v69, v156);
    goto LABEL_64;
  }
  uid_t pw_uid = v36->pw_uid;
  gid_t pw_gid = v36->pw_gid;
  if ((SBYTE7(v168[1]) & 0x80u) == 0) {
    uint64_t v45 = (const char *)v168;
  }
  else {
    uint64_t v45 = *(const char **)&v168[0];
  }
  if (chown(v45, pw_uid, pw_gid))
  {
    uint64_t v46 = __error();
    char v47 = strerror(*v46);
    char v54 = "failed changing owner of bbfs directory:  %s\n";
LABEL_51:
    _BBUFSDebugPrint("prepareDestination", v54, v48, v49, v50, v51, v52, v53, v47);
LABEL_64:
    uint64_t v61 = 0;
    goto LABEL_65;
  }
  if ((ctu::fs::create_directory() & 1) == 0)
  {
    uint64_t v63 = "failed creating backup directory\n";
    goto LABEL_80;
  }
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v70 = &v166;
  }
  else {
    unint64_t v70 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (chown((const char *)v70, pw_uid, pw_gid))
  {
    uint64_t v71 = __error();
    char v47 = strerror(*v71);
    char v54 = "failed changing owner of bbfs backup directory:  %s\n";
    goto LABEL_51;
  }
  uint64_t v163 = 0;
  long long v164 = 0;
  unint64_t v165 = 0;
  uint64_t folder = ctu::fs::read_folder();
  if (folder)
  {
    if (capabilities::radio::vendor((capabilities::radio *)folder) != 2) {
      goto LABEL_117;
    }
    long long v85 = v163;
    if (v163 == v164) {
      goto LABEL_118;
    }
    uint64_t v86 = v163;
    while (1)
    {
      uint64_t v87 = *((unsigned __int8 *)v86 + 23);
      int v88 = (char)v87;
      if ((v87 & 0x80u) != 0) {
        uint64_t v87 = v86[1];
      }
      if (v87 == 10)
      {
        uint64_t v89 = v88 >= 0 ? v86 : (uint64_t *)*v86;
        uint64_t v90 = *v89;
        int v91 = *((unsigned __int16 *)v89 + 4);
        if (v90 == 0x6E2E636974617473 && v91 == 28022) {
          break;
        }
      }
      v86 += 3;
      if (v86 == v164)
      {
        uint64_t v86 = v164;
        break;
      }
    }
    if (v86 == v164) {
      goto LABEL_118;
    }
    while (1)
    {
      uint64_t v93 = *((unsigned __int8 *)v85 + 23);
      int v94 = (char)v93;
      if ((v93 & 0x80u) != 0) {
        uint64_t v93 = v85[1];
      }
      if (v93 == 11)
      {
        uint64_t v95 = v94 >= 0 ? v85 : (uint64_t *)*v85;
        uint64_t v96 = *v95;
        uint64_t v97 = *(uint64_t *)((char *)v95 + 3);
        if (v96 == 0x2E63696D616E7964 && v97 == 0x6D766E2E63696D61) {
          break;
        }
      }
      v85 += 3;
      if (v85 == v164)
      {
        long long v85 = v164;
        break;
      }
    }
    if (v85 == v164)
    {
LABEL_118:
      _BBUFSDebugPrint("prepareDestination", "both files not present in backup, removing backup files\n", v79, v80, v81, v82, v83, v84, v156);
      int v99 = 0;
    }
    else
    {
LABEL_117:
      int v99 = 1;
    }
    _BBUFSDebugPrint("prepareDestination", "FSInit: restore_files=%d\n", v79, v80, v81, v82, v83, v84, v99);
    uint64_t v159 = (char *)v164;
    if (v163 != v164)
    {
      int64_t v106 = (const std::string::value_type **)((char *)v163 + 24);
      char v157 = 1;
      int v158 = v99;
      while (1)
      {
        memset(&v162, 170, sizeof(v162));
        if (*((char *)v106 - 1) < 0)
        {
          std::string::__init_copy_ctor_external(&v162, *(v106 - 3), (std::string::size_type)*(v106 - 2));
        }
        else
        {
          long long v108 = *(_OWORD *)(v106 - 3);
          v162.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v106 - 1);
          *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v108;
        }
        int v109 = SHIBYTE(v166.__r_.__value_.__r.__words[2]);
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v110 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v110 = v166.__r_.__value_.__l.__size_;
        }
        int v111 = SHIBYTE(v162.__r_.__value_.__r.__words[2]);
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v112 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v112 = v162.__r_.__value_.__l.__size_;
        }
        unint64_t v113 = v112 + v110;
        memset(__p, 170, sizeof(__p));
        if (v112 + v110 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v113 <= 0x16) {
          break;
        }
        uint64_t v137 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v113 | 7) != 0x17) {
          uint64_t v137 = v113 | 7;
        }
        uint64_t v138 = v137 + 1;
        uint64_t v114 = (char *)operator new(v137 + 1);
        __p[1] = (void *)(v112 + v110);
        __p[2] = (void *)(v138 | 0x8000000000000000);
        __p[0] = v114;
        int v99 = v158;
        if (v110) {
          goto LABEL_138;
        }
LABEL_142:
        long long v116 = &v114[v110];
        if (v112)
        {
          if (v111 >= 0) {
            uint64_t v117 = &v162;
          }
          else {
            uint64_t v117 = (std::string *)v162.__r_.__value_.__r.__words[0];
          }
          memmove(v116, v117, v112);
        }
        v116[v112] = 0;
        int v118 = SBYTE7(v168[1]);
        if ((SBYTE7(v168[1]) & 0x80u) == 0) {
          size_t v119 = BYTE7(v168[1]);
        }
        else {
          size_t v119 = *((void *)&v168[0] + 1);
        }
        unint64_t v120 = v119 + v112;
        memset(v160, 170, sizeof(v160));
        if (v119 + v112 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v120 <= 0x16)
        {
          memset(v160, 0, sizeof(v160));
          uint64_t v121 = (char *)v160;
          HIBYTE(v160[2]) = v119 + v112;
          if (!v119) {
            goto LABEL_157;
          }
LABEL_153:
          if (v118 >= 0) {
            std::string::size_type v122 = v168;
          }
          else {
            std::string::size_type v122 = *(_OWORD **)&v168[0];
          }
          memmove(v121, v122, v119);
          goto LABEL_157;
        }
        uint64_t v139 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v120 | 7) != 0x17) {
          uint64_t v139 = v120 | 7;
        }
        uint64_t v140 = v139 + 1;
        uint64_t v121 = (char *)operator new(v139 + 1);
        v160[1] = (void *)(v119 + v112);
        v160[2] = (void *)(v140 | 0x8000000000000000);
        v160[0] = v121;
        int v99 = v158;
        if (v119) {
          goto LABEL_153;
        }
LABEL_157:
        uint64_t v123 = &v121[v119];
        if (v111 >= 0) {
          int v124 = &v162;
        }
        else {
          int v124 = (std::string *)v162.__r_.__value_.__r.__words[0];
        }
        if (v112) {
          memmove(v123, v124, v112);
        }
        v123[v112] = 0;
        if (v99)
        {
          _BBUFSDebugPrint("prepareDestination", "%s backup present, restoring\n", v100, v101, v102, v103, v104, v105, (char)v124);
          int v126 = __p;
          if (SHIBYTE(__p[2]) >= 0) {
            uint64_t v127 = (const std::__fs::filesystem::path *)__p;
          }
          else {
            uint64_t v127 = (const std::__fs::filesystem::path *)__p[0];
          }
          if (SHIBYTE(v160[2]) >= 0) {
            unint64_t v128 = (const std::__fs::filesystem::path *)v160;
          }
          else {
            unint64_t v128 = (const std::__fs::filesystem::path *)v160[0];
          }
          rename(v127, v128, v125);
          if (v129 < 0)
          {
            if (SHIBYTE(__p[2]) < 0) {
              LOBYTE(v126) = __p[0];
            }
            uint64_t v130 = __error();
            strerror(*v130);
            _BBUFSDebugPrint("prepareDestination", "failed restoring %s to %s:  %s\n", v131, v132, v133, v134, v135, v136, (char)v126);
            goto LABEL_197;
          }
        }
        else
        {
          _BBUFSDebugPrint("prepareDestination", "%s backup present, but rule is to delete it\n", v100, v101, v102, v103, v104, v105, (char)v124);
          int v142 = __p;
          if (SHIBYTE(__p[2]) >= 0) {
            unint64_t v143 = (const std::__fs::filesystem::path *)__p;
          }
          else {
            unint64_t v143 = (const std::__fs::filesystem::path *)__p[0];
          }
          if (remove(v143, v141) < 0)
          {
            if (SHIBYTE(__p[2]) < 0) {
              LOBYTE(v142) = __p[0];
            }
            unsigned int v146 = __error();
            strerror(*v146);
            _BBUFSDebugPrint("prepareDestination", "failed removing %s:  %s\n", v147, v148, v149, v150, v151, v152, (char)v142);
LABEL_197:
            char v157 = 0;
            char v144 = 1;
            if ((SHIBYTE(v160[2]) & 0x80000000) == 0) {
              goto LABEL_187;
            }
LABEL_186:
            operator delete(v160[0]);
            goto LABEL_187;
          }
        }
        char v144 = 0;
        if (SHIBYTE(v160[2]) < 0) {
          goto LABEL_186;
        }
LABEL_187:
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_122;
          }
LABEL_189:
          operator delete(v162.__r_.__value_.__l.__data_);
          if (v106 == (const std::string::value_type **)v159) {
            char v145 = 1;
          }
          else {
            char v145 = v144;
          }
          v106 += 3;
          if (v145) {
            goto LABEL_200;
          }
        }
        else
        {
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_189;
          }
LABEL_122:
          if (v106 == (const std::string::value_type **)v159) {
            char v107 = 1;
          }
          else {
            char v107 = v144;
          }
          v106 += 3;
          if (v107) {
            goto LABEL_200;
          }
        }
      }
      memset(__p, 0, sizeof(__p));
      uint64_t v114 = (char *)__p;
      HIBYTE(__p[2]) = v112 + v110;
      if (!v110) {
        goto LABEL_142;
      }
LABEL_138:
      if (v109 >= 0) {
        uint64_t v115 = &v166;
      }
      else {
        uint64_t v115 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      memmove(v114, v115, v110);
      goto LABEL_142;
    }
    char v157 = 1;
LABEL_200:
    uint64_t v61 = v157 & 1;
  }
  else
  {
    _BBUFSDebugPrint("prepareDestination", "failed reading backup directory\n", v73, v74, v75, v76, v77, v78, v156);
    uint64_t v61 = 0;
  }
  uint64_t v153 = (void **)v163;
  if (v163)
  {
    uint64_t v154 = (void **)v164;
    uint64_t v155 = v163;
    if (v164 != v163)
    {
      do
      {
        if (*((char *)v154 - 1) < 0) {
          operator delete(*(v154 - 3));
        }
        v154 -= 3;
      }
      while (v154 != v153);
      uint64_t v155 = v163;
    }
    long long v164 = v153;
    operator delete(v155);
  }
LABEL_65:
  if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_70:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SBYTE7(v168[1]) & 0x80000000) == 0) {
      return v61;
    }
LABEL_71:
    operator delete(*(void **)&v168[0]);
    return v61;
  }
  operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_70;
  }
LABEL_67:
  if (SBYTE7(v168[1]) < 0) {
    goto LABEL_71;
  }
  return v61;
}

void sub_21DF73C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::vector<std::string>::~vector[abi:ne180100](&a34);
  if (a42 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 121) < 0) {
    operator delete(*(void **)(v42 - 144));
  }
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  _Unwind_Resume(a1);
}

void bbufs::createDirectoryWithTimestamp(const void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  __int16 v124 = -21846;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v122 = v4;
  long long v123 = v4;
  *(_OWORD *)std::string __s = v4;
  time_t v120 = time(0);
  uint64_t v5 = localtime(&v120);
  strftime(__s, 0x32uLL, "%Y-%m-%d-%H-%M-%S", v5);
  memset(a2, 170, 24);
  int v6 = *((char *)a1 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v7 = (size_t)a1[1];
  }
  if (!v7)
  {
    std::string::size_type v10 = 0;
    size_t v11 = 0;
    unsigned int v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_33;
  }
  unint64_t v8 = v7 + 7;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 > 0x16)
  {
    uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v13 = v8 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 7;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7 + 7;
  }
  if (v6 >= 0) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = *a1;
  }
  memmove(p_dst, v15, v7);
  strcpy((char *)p_dst + v7, "bbulog-");
  size_t v16 = strlen(__s);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    size_t v18 = operator new(v19 + 1);
    unint64_t v116 = v17;
    int64_t v117 = v20 | 0x8000000000000000;
    uint64_t v115 = v18;
    goto LABEL_22;
  }
  HIBYTE(v117) = v16;
  size_t v18 = &v115;
  if (v16) {
LABEL_22:
  }
    memcpy(v18, __s, v17);
  *((unsigned char *)v18 + v17) = 0;
  if (v117 >= 0) {
    unint64_t v21 = (const std::string::value_type *)&v115;
  }
  else {
    unint64_t v21 = (const std::string::value_type *)v115;
  }
  if (v117 >= 0) {
    std::string::size_type v22 = HIBYTE(v117);
  }
  else {
    std::string::size_type v22 = v116;
  }
  uint64_t v23 = std::string::append(&__dst, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  unint64_t v25 = std::string::append(&v119, "/", 1uLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v117) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_137:
    operator delete(v115);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_138:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_32;
  }
  operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117) < 0) {
    goto LABEL_137;
  }
LABEL_31:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_138;
  }
LABEL_32:
  unsigned int v12 = *((unsigned __int8 *)a2 + 23);
  std::string::size_type v10 = (char *)*a2;
  size_t v11 = a2[1];
LABEL_33:
  memset(&v119, 0, sizeof(v119));
  memset(&__dst, 0, sizeof(__dst));
  if ((v12 & 0x80u) == 0) {
    size_t v27 = v12;
  }
  else {
    size_t v27 = v11;
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v28 = (char *)a2;
  }
  else {
    uint64_t v28 = v10;
  }
  uint64_t v29 = &v28[v27];
  if ((uint64_t)v27 >= 9)
  {
    size_t v30 = v27;
    uint64_t v31 = v28;
    do
    {
      uint64_t v32 = (char *)memchr(v31, 47, v30 - 8);
      if (!v32) {
        break;
      }
      if (*(void *)v32 == 0x73656C657269772FLL && v32[8] == 115) {
        goto LABEL_48;
      }
      uint64_t v31 = v32 + 1;
      size_t v30 = v29 - (unsigned char *)v31;
    }
    while (v29 - (unsigned char *)v31 > 8);
  }
  uint64_t v32 = &v28[v27];
LABEL_48:
  if (v32 == v29) {
    unint64_t v34 = -1;
  }
  else {
    unint64_t v34 = v32 - v28;
  }
  unint64_t v116 = 0xAAAAAAAAAAAAAAAALL;
  int64_t v117 = 0xAAAAAAAAAAAAAAAALL;
  if (v27 >= v34) {
    size_t v27 = v34;
  }
  uint64_t v115 = (void *)0xAAAAAAAAAAAAAAAALL;
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    uint64_t v40 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v40 = v27 | 7;
    }
    uint64_t v41 = v40 + 1;
    int v35 = operator new(v40 + 1);
    unint64_t v116 = v27;
    int64_t v117 = v41 | 0x8000000000000000;
    uint64_t v115 = v35;
  }
  else
  {
    HIBYTE(v117) = v27;
    int v35 = &v115;
    if (!v27)
    {
      LOBYTE(v115) = 0;
      memset(v114, 170, sizeof(v114));
      LODWORD(v36) = *((char *)a2 + 23);
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_57;
      }
      goto LABEL_66;
    }
  }
  memmove(v35, v28, v27);
  *((unsigned char *)v35 + v27) = 0;
  memset(v114, 170, sizeof(v114));
  LODWORD(v36) = *((char *)a2 + 23);
  if ((v36 & 0x80000000) == 0)
  {
LABEL_57:
    unint64_t v36 = v36;
    uint64_t v37 = a2;
    if (v34 <= v36)
    {
      size_t v38 = v36 - v34;
      if (v38 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_59;
      }
LABEL_68:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_168:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_66:
  unint64_t v36 = a2[1];
  if (v36 < v34) {
    goto LABEL_168;
  }
  uint64_t v37 = (void *)*a2;
  size_t v38 = v36 - v34;
  if (v36 - v34 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_68;
  }
LABEL_59:
  if (v38 >= 0x17)
  {
    uint64_t v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17) {
      uint64_t v42 = v38 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v39 = operator new(v42 + 1);
    v114[1] = (void *)v38;
    v114[2] = (void *)(v43 | 0x8000000000000000);
    v114[0] = v39;
    goto LABEL_72;
  }
  HIBYTE(v114[2]) = v38;
  uint64_t v39 = v114;
  if (v36 != v34) {
LABEL_72:
  }
    memmove(v39, (char *)v37 + v34, v38);
  *((unsigned char *)v39 + v38) = 0;
  memset(&__p[1], 170, sizeof(std::string));
  ctu::tokenize();
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v50 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v50 = a2[1];
  }
  if (!v50)
  {
    _BBUFSDebugPrint("createDirectoryWithTimestamp", "Invalid directory path\n", v44, v45, v46, v47, v48, v49, v108);
    goto LABEL_147;
  }
  if ((ctu::fs::create_directory() & 1) == 0)
  {
    _BBUFSDebugPrint("createDirectoryWithTimestamp", "Failed to create the directory\n", v51, v52, v53, v54, v55, v56, v108);
    goto LABEL_140;
  }
  uint64_t v57 = getpwnam("_wireless");
  if (!v57)
  {
    _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v58, v59, v60, v61, v62, v63, v108);
    _BBUFSDebugPrint("createDirectoryWithTimestamp", "Failed to get directory ownership information for _wireless\n", v92, v93, v94, v95, v96, v97, v108);
LABEL_140:
    if (*((char *)a2 + 23) < 0)
    {
      *(unsigned char *)*a2 = 0;
      a2[1] = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *((unsigned char *)a2 + 23) = 0;
    }
    goto LABEL_147;
  }
  std::string::size_type size = __p[1].__r_.__value_.__l.__size_;
  std::string::pointer data = __p[1].__r_.__value_.__l.__data_;
  if (__p[1].__r_.__value_.__l.__size_ == __p[1].__r_.__value_.__r.__words[0]) {
    goto LABEL_148;
  }
  unint64_t v66 = 0;
  std::string::size_type v112 = (char *)&__p[0].__r_.__value_.__l.__data_ + 1;
  uid_t pw_uid = v57->pw_uid;
  gid_t pw_gid = v57->pw_gid;
  uid_t v111 = pw_uid;
  unsigned int v68 = 1;
  while (1)
  {
    uint64_t v69 = &data[24 * v66];
    int v70 = v69[23];
    if (v70 >= 0) {
      size_t v71 = v69[23];
    }
    else {
      size_t v71 = *((void *)v69 + 1);
    }
    unint64_t v72 = v71 + 1;
    memset(__p, 170, 24);
    if (v71 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v72 >= 0x17)
    {
      uint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v72 | 7) != 0x17) {
        uint64_t v74 = v72 | 7;
      }
      uint64_t v75 = v74 + 1;
      uint64_t v76 = operator new(v74 + 1);
      __p[0].__r_.__value_.__l.__size_ = v71 + 1;
      __p[0].__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
      unsigned char *v76 = 47;
      uint64_t v73 = v76 + 1;
    }
    else
    {
      __p[0].__r_.__value_.__r.__words[2] = 0;
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = v71 + 1;
      uint64_t v73 = v112;
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0x2FuLL;
      if (!v71) {
        goto LABEL_96;
      }
    }
    uint64_t v77 = v70 >= 0 ? v69 : *(char **)v69;
    memmove(v73, v77, v71);
LABEL_96:
    *((unsigned char *)v73 + v71) = 0;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v78 = __p;
    }
    else {
      uint64_t v78 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v79 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v79 = __p[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v119, (const std::string::value_type *)v78, v79);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    int v80 = SHIBYTE(v117);
    if (v117 >= 0) {
      size_t v81 = HIBYTE(v117);
    }
    else {
      size_t v81 = v116;
    }
    int v82 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v83 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v83 = v119.__r_.__value_.__l.__size_;
    }
    unint64_t v84 = v83 + v81;
    memset(__p, 170, 24);
    if (v83 + v81 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v84 <= 0x16)
    {
      memset(__p, 0, 24);
      long long v85 = __p;
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = v83 + v81;
      if (!v81) {
        goto LABEL_117;
      }
LABEL_113:
      if (v80 >= 0) {
        uint64_t v86 = &v115;
      }
      else {
        uint64_t v86 = v115;
      }
      memmove(v85, v86, v81);
      goto LABEL_117;
    }
    uint64_t v90 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v90 = v84 | 7;
    }
    uint64_t v91 = v90 + 1;
    long long v85 = (std::string *)operator new(v90 + 1);
    __p[0].__r_.__value_.__l.__size_ = v83 + v81;
    __p[0].__r_.__value_.__r.__words[2] = v91 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    if (v81) {
      goto LABEL_113;
    }
LABEL_117:
    uint64_t v87 = (char *)v85 + v81;
    if (v83)
    {
      if (v82 >= 0) {
        int v88 = &v119;
      }
      else {
        int v88 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      memmove(v87, v88, v83);
    }
    v87[v83] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string __dst = __p[0];
    if (ctu::fs::is_directory())
    {
      uint64_t v89 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__dst
          : (std::string *)__dst.__r_.__value_.__r.__words[0];
      if (chown((const char *)v89, v111, pw_gid)) {
        break;
      }
    }
    unint64_t v66 = v68;
    std::string::pointer data = __p[1].__r_.__value_.__l.__data_;
    ++v68;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p[1].__r_.__value_.__l.__size_ - __p[1].__r_.__value_.__r.__words[0]) >> 3) <= v66) {
      goto LABEL_147;
    }
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v98 = &__dst;
  }
  else {
    LOBYTE(v98) = __dst.__r_.__value_.__s.__data_[0];
  }
  int v99 = __error();
  int v109 = strerror(*v99);
  _BBUFSDebugPrint("createDirectoryWithTimestamp", "Failed changing owner of coredump directory:  %s: %s\n", v100, v101, v102, v103, v104, v105, (char)v98);
LABEL_147:
  std::string::size_type size = __p[1].__r_.__value_.__r.__words[0];
LABEL_148:
  if (size)
  {
    std::string::size_type v106 = __p[1].__r_.__value_.__l.__size_;
    std::string::pointer v107 = (std::string::pointer)size;
    if (__p[1].__r_.__value_.__l.__size_ != size)
    {
      do
      {
        if (*(char *)(v106 - 1) < 0) {
          operator delete(*(void **)(v106 - 24));
        }
        v106 -= 24;
      }
      while (v106 != size);
      std::string::pointer v107 = __p[1].__r_.__value_.__l.__data_;
    }
    __p[1].__r_.__value_.__l.__size_ = size;
    operator delete(v107);
  }
  if ((SHIBYTE(v114[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v117) & 0x80000000) == 0) {
      goto LABEL_158;
    }
LABEL_162:
    operator delete(v115);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_163;
    }
LABEL_159:
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_164:
    operator delete(v119.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v114[0]);
  if (SHIBYTE(v117) < 0) {
    goto LABEL_162;
  }
LABEL_158:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_159;
  }
LABEL_163:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_164;
  }
}

void sub_21DF74694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::vector<std::string>::~vector[abi:ne180100](&a19);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a39 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a34);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v46 + 23) & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
LABEL_11:
    operator delete(*(void **)v46);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(a41);
  if ((*(char *)(v46 + 23) & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t bbufs::chownToWireless(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      goto LABEL_11;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
LABEL_11:
    char v9 = 1;
    if (a2 < 0) {
      goto LABEL_12;
    }
LABEL_7:
    std::string::size_type v10 = getpwnam("_wireless");
    if (v10)
    {
      uid_t pw_uid = v10->pw_uid;
      if (fchown(v8, pw_uid, v10->pw_gid))
      {
        _BBUFSDebugPrint("chownToWireless", "Failed changing file ownership (%u, %u)\n", v18, v19, v20, v21, v22, v23, pw_uid);
        uint64_t v24 = 0;
        if (v9) {
          return v24;
        }
      }
      else
      {
        uint64_t v24 = 1;
        _BBUFSDebugPrint("chownToWireless", "chown'd to _wireless(%u, %u) : ret %d \n", v18, v19, v20, v21, v22, v23, pw_uid);
        if (v9) {
          return v24;
        }
      }
    }
    else
    {
      _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v11, v12, v13, v14, v15, v16, v26);
      uint64_t v24 = 0;
      if (v9) {
        return v24;
      }
    }
    close(v8);
    return v24;
  }
  int v8 = open((const char *)a1, 1, 420);
  char v9 = 0;
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_7;
  }
LABEL_12:
  _BBUFSDebugPrint("chownToWireless", "Failed to open file to chown\n", a3, a4, a5, a6, a7, a8, v26);
  return 0;
}

char *bbufs::copyFSPath(bbufs *this)
{
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  uint64_t v1 = (BBUPartitionManager *)off_26AA89B50;
  if (!off_26AA89B50)
  {
    unint64_t v2 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v2);
    size_t v3 = operator new(0x20uLL);
    *size_t v3 = &unk_26CECF498;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = v2;
    long long v4 = (std::__shared_weak_count *)off_26AA89B58;
    off_26AA89B50 = v2;
    off_26AA89B58 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (BBUPartitionManager *)off_26AA89B50;
  }
  uint64_t v5 = (std::__shared_weak_count *)off_26AA89B58;
  if (off_26AA89B58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89B58 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v1, &__s1);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    int v8 = (void *)__s1.__r_.__value_.__r.__words[0];
    int v6 = strdup(__s1.__r_.__value_.__l.__data_);
    operator delete(v8);
    if (!v5) {
      return v6;
    }
  }
  else
  {
    int v6 = strdup((const char *)&__s1);
    if (!v5) {
      return v6;
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v6;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v6;
}

void sub_21DF74AAC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v1, v1[1]);
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_21DF74AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bbufs::backupFile(uint64_t a1)
{
  memset(&v27, 170, sizeof(v27));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v27 = *(std::string *)a1;
  }
  ctu::path_join_impl();
  if (!ctu::fs::file_exists())
  {
    int v8 = &v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      LOBYTE(v8) = v27.__r_.__value_.__s.__data_[0];
    }
    _BBUFSDebugPrint("backupFile", "Nothing to backup: file (%s) does not exist\n", v2, v3, v4, v5, v6, v7, (char)v8);
    goto LABEL_20;
  }
  memset(&v26, 170, sizeof(v26));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v26 = *(std::string *)a1;
  }
  ctu::path_join_impl();
  memset(&v25, 170, sizeof(v25));
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v26;
  }
  ctu::path_join_impl();
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v27;
  }
  else {
    LOBYTE(v15) = v27.__r_.__value_.__s.__data_[0];
  }
  _BBUFSDebugPrint("backupFile", "Backing-up file from (%s) to (%s)\n", v9, v10, v11, v12, v13, v14, (char)v15);
  if ((ctu::fs::rename() & 1) == 0)
  {
    uint64_t v24 = &v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      LOBYTE(v24) = v27.__r_.__value_.__s.__data_[0];
    }
    _BBUFSDebugPrint("backupFile", "Failed to backup file from (%s) to (%s)\n", v16, v17, v18, v19, v20, v21, (char)v24);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_26:
        uint64_t v22 = 0;
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v22;
        }
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    uint64_t v22 = 0;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v22;
    }
    goto LABEL_33;
  }
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_29:
    operator delete(v26.__r_.__value_.__l.__data_);
    uint64_t v22 = 1;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v22;
    }
    goto LABEL_33;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
LABEL_20:
  uint64_t v22 = 1;
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v22;
  }
LABEL_33:
  operator delete(v27.__r_.__value_.__l.__data_);
  return v22;
}

void sub_21DF74DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 41) & 0x80000000) == 0) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 41) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(v23 - 64));
  goto LABEL_4;
}

uint64_t bbufs::createBackupDir(uint64_t a1)
{
  memset(&v25, 170, sizeof(v25));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v25 = *(std::string *)a1;
  }
  ctu::path_join_impl();
  int v7 = ctu::fs::file_exists();
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v25;
  }
  else {
    LOBYTE(v8) = v25.__r_.__value_.__s.__data_[0];
  }
  if (v7)
  {
    if ((ctu::fs::is_directory() & 1) == 0)
    {
      uint64_t v15 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        LOBYTE(v15) = v25.__r_.__value_.__s.__data_[0];
      }
      _BBUFSDebugPrint("createBackupDir", "Backup directory path (%s) exists but is not a directory\n", v9, v10, v11, v12, v13, v14, (char)v15);
LABEL_16:
      uint64_t v22 = 0;
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v22;
      }
LABEL_14:
      operator delete(v25.__r_.__value_.__l.__data_);
      return v22;
    }
  }
  else
  {
    _BBUFSDebugPrint("createBackupDir", "Backup directory (%s) does not exist, creating it\n", v1, v2, v3, v4, v5, v6, (char)v8);
    if ((ctu::fs::create_directory() & 1) == 0)
    {
      _BBUFSDebugPrint("createBackupDir", "Failed to create backup directory\n", v16, v17, v18, v19, v20, v21, v24);
      goto LABEL_16;
    }
  }
  uint64_t v22 = 1;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
  return v22;
}

void sub_21DF74FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bbufs::createFile(uint64_t a1)
{
  memset(&v43, 170, sizeof(v43));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v43 = *(std::string *)a1;
  }
  ctu::path_join_impl();
  uint64_t v7 = ctu::fs::open_file();
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v23 = &v43;
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      LOBYTE(v23) = v43.__r_.__value_.__s.__data_[0];
    }
    _BBUFSDebugPrint("createFile", "Failed to open/create file (%s)\n", v1, v2, v3, v4, v5, v6, (char)v23);
    uint64_t v24 = 0;
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v24;
    }
    goto LABEL_24;
  }
  int v8 = getpwnam("_wireless");
  if (!v8)
  {
    _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v9, v10, v11, v12, v13, v14, v41);
    _BBUFSDebugPrint("createFile", "Failed to get uid gid information for _wireless\n", v25, v26, v27, v28, v29, v30, v42);
LABEL_16:
    int v31 = 0;
    goto LABEL_18;
  }
  if (fchown(v7, v8->pw_uid, v8->pw_gid))
  {
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v43;
    }
    else {
      LOBYTE(v15) = v43.__r_.__value_.__s.__data_[0];
    }
    uint64_t v16 = __error();
    strerror(*v16);
    _BBUFSDebugPrint("createFile", "Failed to change file (%s) owner: %s\n", v17, v18, v19, v20, v21, v22, (char)v15);
    goto LABEL_16;
  }
  int v31 = 1;
LABEL_18:
  unsigned int v38 = ctu::fs::close_file((ctu::fs *)v7);
  if ((v38 & 1) == 0)
  {
    uint64_t v39 = &v43;
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      LOBYTE(v39) = v43.__r_.__value_.__s.__data_[0];
    }
    _BBUFSDebugPrint("createFile", "Failed to close file (%s)\n", v32, v33, v34, v35, v36, v37, (char)v39);
  }
  uint64_t v24 = v31 & v38;
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v24;
  }
LABEL_24:
  operator delete(v43.__r_.__value_.__l.__data_);
  return v24;
}

void sub_21DF751E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bbufs::restoreBackupFile(uint64_t a1)
{
  memset(&v15, 170, sizeof(v15));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v15 = *(std::string *)a1;
  }
  ctu::path_join_impl();
  memset(&v14, 170, sizeof(v14));
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v15;
  }
  ctu::path_join_impl();
  if (!ctu::fs::file_exists()) {
    goto LABEL_19;
  }
  memset(&v13, 170, sizeof(v13));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v13 = *(std::string *)a1;
  }
  ctu::path_join_impl();
  char v2 = ctu::fs::rename();
  char v9 = v2;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v14;
  }
  else {
    LOBYTE(v10) = v14.__r_.__value_.__s.__data_[0];
  }
  if (v2) {
    _BBUFSDebugPrint("restoreBackupFile", "Restored backup file from (%s) to (%s)\n", v3, v4, v5, v6, v7, v8, (char)v10);
  }
  else {
    _BBUFSDebugPrint("restoreBackupFile", "Failed to restore backup file (%s)\n", v3, v4, v5, v6, v7, v8, (char)v10);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((v9 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_19:
    uint64_t v11 = 1;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_24:
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v11;
    }
    goto LABEL_25;
  }
  if (v9) {
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v11 = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
LABEL_20:
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v11;
  }
LABEL_25:
  operator delete(v15.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21DF75454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 41) & 0x80000000) == 0) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 41) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(v23 - 64));
  goto LABEL_4;
}

uint64_t bbufs::clearBackupFile(uint64_t a1)
{
  memset(&v18, 170, sizeof(v18));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  ctu::path_join_impl();
  memset(&v17, 170, sizeof(v17));
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v18;
  }
  ctu::path_join_impl();
  if (!ctu::fs::file_exists()
    || ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (uint64_t v7 = &v17)
      : (std::string *)(LOBYTE(v7) = v17.__r_.__value_.__s.__data_[0]),
        _BBUFSDebugPrint("clearBackupFile", "Deleting backup file (%s)\n", v1, v2, v3, v4, v5, v6, (char)v7),
        (ctu::fs::remove_file() & 1) != 0))
  {
    uint64_t v14 = 1;
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_18:
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v14;
    }
    goto LABEL_19;
  }
  uint64_t v16 = &v17;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    LOBYTE(v16) = v17.__r_.__value_.__s.__data_[0];
  }
  _BBUFSDebugPrint("clearBackupFile", "Failed to delete file backup (%s)\n", v8, v9, v10, v11, v12, v13, (char)v16);
  uint64_t v14 = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_13:
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v14;
  }
LABEL_19:
  operator delete(v18.__r_.__value_.__l.__data_);
  return v14;
}

void sub_21DF75680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_23()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void BBUStringToArgv(void **a1, void *a2)
{
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  unint64_t v4 = v3 + 4;
  memset(v71, 170, sizeof(v71));
  if (v3 + 4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v46 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v46 = v4 | 7;
    }
    uint64_t v47 = v46 + 1;
    uint64_t v48 = operator new(v46 + 1);
    *(void *)&v71[8] = v3 + 4;
    *(void *)&v71[16] = v47 | 0x8000000000000000;
    *(void *)size_t v71 = v48;
    *uint64_t v48 = 544235879;
    uint64_t v7 = v48 + 1;
  }
  else
  {
    *(void *)&v71[16] = 0;
    v71[23] = v3 + 4;
    uint64_t v7 = &v71[4];
    *(_OWORD *)size_t v71 = 0x20706167uLL;
    if (!v3)
    {
      v71[4] = 0;
      if ((v2 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_66;
    }
  }
  if (v2 >= 0) {
    uint64_t v49 = (char *)a1;
  }
  else {
    uint64_t v49 = (char *)*a1;
  }
  memmove(v7, v49, v3);
  v7[v3] = 0;
  if (v2 < 0) {
LABEL_66:
  }
    operator delete(*a1);
LABEL_8:
  *(_OWORD *)a1 = *(_OWORD *)v71;
  unint64_t v8 = *(void *)&v71[16];
  a1[2] = *(void **)&v71[16];
  uint64_t v9 = (char *)HIBYTE(v8);
  if ((char)v9 >= 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = (char *)a1[1];
  }
  if (v10)
  {
    unint64_t v11 = 0;
    uint64_t v12 = MEMORY[0x263EF8318];
    uint64_t v69 = a2;
    do
    {
      while (1)
      {
        uint64_t v13 = *((char *)a1 + 23) >= 0 ? (char **)a1 : (char **)*a1;
        unsigned int v14 = *((char *)v13 + v11);
        int v15 = (v14 & 0x80000000) != 0 ? __maskrune(v14, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v14 + 60) & 0x4000;
        uint64_t v16 = *((char *)a1 + 23) >= 0 ? (char **)a1 : (char **)*a1;
        std::string v17 = (char *)v16 + v11;
        if (v11 >= (unint64_t)v10 || !v15) {
          break;
        }
        *std::string v17 = 0;
        ++v11;
      }
      uint64_t v19 = (char *)a2[1];
      unint64_t v18 = a2[2];
      if ((unint64_t)v19 < v18)
      {
        *(void *)uint64_t v19 = v17;
        uint64_t v20 = (uint64_t)(v19 + 8);
        goto LABEL_43;
      }
      uint64_t v21 = (char *)*a2;
      uint64_t v22 = (uint64_t)&v19[-*a2];
      uint64_t v23 = v22 >> 3;
      unint64_t v24 = (v22 >> 3) + 1;
      if (v24 >> 61) {
        goto LABEL_88;
      }
      uint64_t v25 = v18 - (void)v21;
      if (v25 >> 2 > v24) {
        unint64_t v24 = v25 >> 2;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v70 = v24;
      if (v24)
      {
        if (v24 >> 61) {
          goto LABEL_89;
        }
        uint64_t v26 = operator new(8 * v24);
        uint64_t v27 = &v26[8 * v23];
        void *v27 = v17;
        uint64_t v20 = (uint64_t)(v27 + 1);
        uint64_t v28 = (char *)(v19 - v21);
        if (v19 == v21)
        {
LABEL_55:
          a2 = v69;
          *uint64_t v69 = v27;
          v69[1] = v20;
          v69[2] = &v26[8 * v70];
          if (v19) {
            goto LABEL_42;
          }
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (void *)(8 * v23);
        *(void *)(8 * v23) = v17;
        uint64_t v20 = 8 * v23 + 8;
        uint64_t v28 = (char *)(v19 - v21);
        if (v19 == v21) {
          goto LABEL_55;
        }
      }
      unint64_t v29 = (unint64_t)(v28 - 8);
      if (v29 < 0x58) {
        goto LABEL_93;
      }
      if ((unint64_t)(v19 - v26 - v22) < 0x20) {
        goto LABEL_93;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v32 = &v19[-v31];
      uint64_t v27 = (void *)((char *)v27 - v31);
      uint64_t v33 = &v26[8 * v23 - 16];
      uint64_t v34 = v19 - 16;
      uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v36 = *(_OWORD *)v34;
        *(v33 - 1) = *((_OWORD *)v34 - 1);
        *uint64_t v33 = v36;
        v33 -= 2;
        v34 -= 32;
        v35 -= 4;
      }
      while (v35);
      uint64_t v19 = v32;
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        do
        {
          uint64_t v37 = *((void *)v19 - 1);
          v19 -= 8;
          *--uint64_t v27 = v37;
        }
        while (v19 != v21);
      }
      a2 = v69;
      uint64_t v19 = (char *)*v69;
      *uint64_t v69 = v27;
      v69[1] = v20;
      v69[2] = &v26[8 * v70];
      if (v19) {
LABEL_42:
      }
        operator delete(v19);
LABEL_43:
      a2[1] = v20;
      unint64_t v38 = v11 + 1;
      do
      {
        unint64_t v39 = v38;
        if (*((char *)a1 + 23) >= 0) {
          uint64_t v40 = (char *)a1;
        }
        else {
          uint64_t v40 = (char *)*a1;
        }
        unsigned int v41 = v40[v39];
        if ((v41 & 0x80000000) != 0)
        {
          int v42 = __maskrune(v41, 0x4000uLL);
          unint64_t v38 = v39 + 1;
          if (v39 >= (unint64_t)v10) {
            break;
          }
        }
        else
        {
          int v42 = *(_DWORD *)(v12 + 4 * v41 + 60) & 0x4000;
          unint64_t v38 = v39 + 1;
          if (v39 >= (unint64_t)v10) {
            break;
          }
        }
      }
      while (!v42);
      unint64_t v11 = v38 - 1;
    }
    while (v39 < (unint64_t)v10);
  }
  uint64_t v44 = (char *)a2[1];
  unint64_t v43 = a2[2];
  if ((unint64_t)v44 < v43)
  {
    *(void *)uint64_t v44 = 0;
    uint64_t v45 = (uint64_t)(v44 + 8);
    goto LABEL_87;
  }
  uint64_t v50 = (char *)*a2;
  uint64_t v51 = (uint64_t)&v44[-*a2];
  uint64_t v52 = v51 >> 3;
  unint64_t v53 = (v51 >> 3) + 1;
  if (v53 >> 61) {
LABEL_88:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  uint64_t v54 = v43 - (void)v50;
  if (v54 >> 2 > v53) {
    unint64_t v53 = v54 >> 2;
  }
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v55 = v53;
  }
  if (v55)
  {
    if (v55 >> 61) {
LABEL_89:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v56 = operator new(8 * v55);
    uint64_t v57 = &v56[8 * v52];
    uint64_t v58 = &v56[8 * v55];
    *uint64_t v57 = 0;
    uint64_t v45 = (uint64_t)(v57 + 1);
    uint64_t v59 = (char *)(v44 - v50);
    if (v44 == v50) {
      goto LABEL_85;
    }
    goto LABEL_78;
  }
  uint64_t v56 = 0;
  uint64_t v57 = (void *)(8 * v52);
  uint64_t v58 = 0;
  *(void *)(8 * v52) = 0;
  uint64_t v45 = 8 * v52 + 8;
  uint64_t v59 = (char *)(v44 - v50);
  if (v44 != v50)
  {
LABEL_78:
    unint64_t v60 = (unint64_t)(v59 - 8);
    if (v60 < 0x58) {
      goto LABEL_94;
    }
    if ((unint64_t)(v44 - v56 - v51) < 0x20) {
      goto LABEL_94;
    }
    uint64_t v61 = (v60 >> 3) + 1;
    uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v63 = &v44[-v62];
    uint64_t v57 = (void *)((char *)v57 - v62);
    uint64_t v64 = &v56[8 * v52 - 16];
    uint64_t v65 = v44 - 16;
    uint64_t v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *(_OWORD *)v65;
      *(v64 - 1) = *((_OWORD *)v65 - 1);
      *uint64_t v64 = v67;
      v64 -= 2;
      v65 -= 32;
      v66 -= 4;
    }
    while (v66);
    uint64_t v44 = v63;
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        uint64_t v68 = *((void *)v44 - 1);
        v44 -= 8;
        *--uint64_t v57 = v68;
      }
      while (v44 != v50);
    }
    uint64_t v44 = (char *)*a2;
  }
LABEL_85:
  *a2 = v57;
  a2[1] = v45;
  a2[2] = v58;
  if (v44) {
    operator delete(v44);
  }
LABEL_87:
  a2[1] = v45;
}

CFDictionaryRef ParseUpdaterDebugArgs(const __CFDictionary *result, UpdaterDebugArgs *a2)
{
  __b[128] = *(char *const **)MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"Options");
    if (result)
    {
      CFDictionaryRef v3 = result;
      v28[0] = 0xAAAAAAAAAAAAAAAALL;
      v28[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v28, result);
      int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v28, @"RestoreInternal");
      long long value = 0;
      if (!CFDictionaryGetValueIfPresent(v3, @"DebugArgs", (const void **)&value)) {
        return (const __CFDictionary *)MEMORY[0x223C1D170](v28);
      }
      CFTypeID v5 = CFGetTypeID(value);
      if (v5 != CFStringGetTypeID()) {
        return (const __CFDictionary *)MEMORY[0x223C1D170](v28);
      }
      memset(__dst, 170, sizeof(__dst));
      memset(__b, 170, 0x400uLL);
      CFStringGetCString((CFStringRef)value, (char *)__b, 1024, 0x8000100u);
      size_t v6 = strlen((const char *)__b);
      if (v6 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v7 = (void *)v6;
      if (v6 >= 0x17)
      {
        uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v9 = v6 | 7;
        }
        uint64_t v10 = v9 + 1;
        unint64_t v8 = (void **)operator new(v9 + 1);
        __dst[1] = v7;
        void __dst[2] = (void *)(v10 | 0x8000000000000000);
        __dst[0] = v8;
      }
      else
      {
        HIBYTE(__dst[2]) = v6;
        unint64_t v8 = __dst;
        if (!v6)
        {
LABEL_13:
          *((unsigned char *)v7 + (void)v8) = 0;
          if (SHIBYTE(__dst[2]) < 0)
          {
            if (!__dst[1]) {
              goto LABEL_57;
            }
          }
          else if (!HIBYTE(__dst[2]))
          {
            return (const __CFDictionary *)MEMORY[0x223C1D170](v28);
          }
          memset(__b, 0, 24);
          BBUStringToArgv(__dst, __b);
          *MEMORY[0x263EF89E8] = 1;
          *MEMORY[0x263EF89F8] = 1;
          if (Bool)
          {
            unint64_t v11 = (const char **)MEMORY[0x263EF89E0];
            while (1)
            {
              uint64_t v12 = (char **)__b[0];
              int v13 = getopt_long(((unint64_t)((char *)__b[1] - (char *)__b[0]) >> 3) - 1, __b[0], "dfl:tnp:iuse", (const option *)&ParseUpdaterDebugArgs(__CFDictionary const*,UpdaterDebugArgs &)::long_options, 0);
              switch(v13)
              {
                case 'd':
                  *((unsigned char *)a2 + 35) = 1;
                  continue;
                case 'e':
                  *((unsigned char *)a2 + 36) = 1;
                  continue;
                case 'f':
                  *((unsigned char *)a2 + 8) = 1;
                  continue;
                case 'g':
                case 'h':
                case 'j':
                case 'k':
                case 'm':
                case 'o':
                case 'q':
                case 'r':
                  continue;
                case 'i':
                  *((unsigned char *)a2 + 32) = 1;
                  continue;
                case 'l':
                  *((_DWORD *)a2 + 1) = atoi(*v11);
                  continue;
                case 'n':
                  *((unsigned char *)a2 + 9) = 1;
                  continue;
                case 'p':
                  unsigned int v14 = *v11;
                  size_t v15 = strlen(*v11);
                  if (v15 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  std::string::size_type v16 = v15;
                  if (v15 >= 0x17)
                  {
                    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v15 | 7) != 0x17) {
                      uint64_t v18 = v15 | 7;
                    }
                    uint64_t v19 = v18 + 1;
                    p_str = operator new(v18 + 1);
                    __str.__r_.__value_.__l.__size_ = v16;
                    __str.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
                    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
                  }
                  else
                  {
                    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v15;
                    p_str = &__str;
                    if (!v15) {
                      goto LABEL_39;
                    }
                  }
                  memmove(p_str, v14, v16);
LABEL_39:
                  *((unsigned char *)p_str + v16) = 0;
                  uint64_t v20 = std::stol(&__str, 0, 10);
                  uint64_t v21 = v20;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__str.__r_.__value_.__l.__data_);
                    if ((v21 & 0x8000000000000000) == 0)
                    {
LABEL_43:
                      *((void *)a2 + 2) = v21;
                      *((unsigned char *)a2 + 24) = 1;
                    }
                  }
                  else if ((v20 & 0x8000000000000000) == 0)
                  {
                    goto LABEL_43;
                  }
                  break;
                case 's':
                  *((unsigned char *)a2 + 34) = 1;
                  continue;
                case 't':
                  *(unsigned char *)a2 = 1;
                  continue;
                case 'u':
                  *((unsigned char *)a2 + 33) = 1;
                  continue;
                default:
                  if (v13 != -1) {
                    continue;
                  }
                  goto LABEL_54;
              }
            }
          }
          uint64_t v12 = (char **)__b[0];
          int v22 = ((unint64_t)((char *)__b[1] - (char *)__b[0]) >> 3) - 1;
          uint64_t v23 = (const char **)MEMORY[0x263EF89E0];
          do
          {
            while (1)
            {
              while (1)
              {
                int v24 = getopt_long(v22, v12, "dfl:tnp:iuse", (const option *)&ParseUpdaterDebugArgs(__CFDictionary const*,UpdaterDebugArgs &)::long_options, 0);
                if (v24 <= 100) {
                  break;
                }
                if (v24 == 101)
                {
                  *((unsigned char *)a2 + 36) = 1;
                }
                else if (v24 == 108)
                {
                  *((_DWORD *)a2 + 1) = atoi(*v23);
                }
              }
              if (v24 != 100) {
                break;
              }
              *((unsigned char *)a2 + 35) = 1;
            }
          }
          while (v24 != -1);
LABEL_54:
          if (v12) {
            operator delete(v12);
          }
          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
            return (const __CFDictionary *)MEMORY[0x223C1D170](v28);
          }
LABEL_57:
          operator delete(__dst[0]);
          return (const __CFDictionary *)MEMORY[0x223C1D170](v28);
        }
      }
      memcpy(v8, __b, (size_t)v7);
      goto LABEL_13;
    }
  }
  return result;
}

void sub_21DF76008()
{
}

uint64_t UpdaterDebugArgs::print(UpdaterDebugArgs *this)
{
  ACFULogging::getLogInstance(this);
  int v2 = *((unsigned __int8 *)this + 24);
  if (*((unsigned char *)this + 24)) {
    std::to_string(&v5, *((void *)this + 2));
  }
  CFDictionaryRef v3 = (ACFULogging *)ACFULogging::handleMessage();
  if (v2 && SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  ACFULogging::getLogInstance(v3);
  return ACFULogging::handleMessage();
}

void sub_21DF761D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

DIR *BBUpdaterCommon::BBUReadDirectory(const char *a1, uint64_t *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = opendir(a1);
  if (result)
  {
    unint64_t v4 = result;
    std::string v5 = readdir(result);
    if (v5)
    {
      size_t v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namleptrdiff_t n = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            uint64_t v9 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            uint64_t v9 = d_namlen | 7;
          }
          unint64_t v8 = operator new(v9 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v9 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)std::string __dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          unint64_t v8 = __dst;
          if (!d_namlen) {
            goto LABEL_15;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
LABEL_15:
        v8[d_namlen] = 0;
        uint64_t v10 = operator new(0x28uLL);
        unint64_t v11 = (std::string *)(v10 + 2);
        void *v10 = 0;
        v10[1] = 0;
        int v12 = __dst[23];
        if ((__dst[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
          v10[4] = *(void *)&__dst[16];
        }
        uint64_t v13 = *a2;
        void *v10 = *a2;
        v10[1] = a2;
        *(void *)(v13 + 8) = v10;
        *a2 = (uint64_t)v10;
        ++a2[2];
        if (v12 < 0) {
          operator delete(*(void **)__dst);
        }
        size_t v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_21DF76374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void *___ZN15BBUpdaterCommon15BBUMGCopyAnswerEPK10__CFString_block_invoke()
{
  uint64_t result = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "MGCopyAnswer");
    BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer = result;
  }
  return result;
}

BOOL BBUpdaterCommon::inRestoreOS(BBUpdaterCommon *this)
{
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS != -1)
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
      return (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) != 0;
    }
LABEL_5:
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
    return (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) != 0;
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS != -1) {
    goto LABEL_5;
  }
  return (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) != 0;
}

void ___ZN15BBUpdaterCommon11inRestoreOSEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    unint64_t v8 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_9:
      CFBooleanRef v10 = 0;
      int v12 = &unk_26AA8F000;
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    unint64_t v8 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer) {
      goto LABEL_9;
    }
  }
  CFBooleanRef v9 = (const __CFBoolean *)v8(@"RestoreOSBuild", 0);
  if (!v9) {
    goto LABEL_9;
  }
  CFBooleanRef v10 = v9;
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 == CFBooleanGetTypeID())
  {
    int v12 = (unsigned char *)&unk_26AA8F000;
    if (ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get) {
      BBUpdaterCommon::inRestoreOS(void)::restoreOS = CFBooleanGetValue(v10) != 0;
    }
  }
  else
  {
    CFRelease(v10);
    CFBooleanRef v10 = 0;
    int v12 = (unsigned char *)&unk_26AA8F000;
  }
LABEL_11:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      goto LABEL_15;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(25, 0, "BBUCommon", "", "inRestoreOS: %d\n", a6, a7, a8, v12[3288]);
  }
LABEL_15:
  if (v10) {
    CFRelease(v10);
  }
}

void sub_21DF76628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFBoolean const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN15BBUpdaterCommon11inRestoreOSEv_block_invoke_2()
{
  BBUpdaterCommon::inRestoreOS(void)::recoveryOS = os_variant_is_recovery();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(25, 0, "BBUCommon", "", "InRecoveryOS: %d\n", v0, v1, v2, BBUpdaterCommon::inRestoreOS(void)::recoveryOS);
  }
}

void ___ZN15BBUpdaterCommon7getECIDEv_block_invoke()
{
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    uint64_t v0 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_9:
      uint64_t v2 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    uint64_t v0 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer) {
      goto LABEL_9;
    }
  }
  uint64_t v1 = (const void *)v0(@"UniqueChipID", 0);
  if (!v1) {
    goto LABEL_9;
  }
  uint64_t v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 != CFNumberGetTypeID())
  {
    CFRelease(v2);
    uint64_t v2 = 0;
    goto LABEL_14;
  }
  if (ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get)
  {
    CFNumberGetValue((CFNumberRef)v2, kCFNumberSInt64Type, &BBUpdaterCommon::getECID(void)::ecid);
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
        goto LABEL_14;
      }
    }
    if ((gBBULogVerbosity & 0x80000000) == 0) {
      _BBULog(25, 0, "BBUCommon", "", "ECID: 0x%llx\n", v4, v5, v6, BBUpdaterCommon::getECID(void)::ecid);
    }
  }
LABEL_14:
  if (v2) {
    CFRelease(v2);
  }
}

void sub_21DF768AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN15BBUpdaterCommon14getEUICCChipIDEv_block_invoke()
{
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    uint64_t v0 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_9:
      CFNumberRef v2 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    uint64_t v0 = (uint64_t (*)(__CFString *, void))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer) {
      goto LABEL_9;
    }
  }
  CFNumberRef v1 = (const __CFNumber *)v0(@"EUICCChipID", 0);
  if (!v1) {
    goto LABEL_9;
  }
  CFNumberRef v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFNumberGetTypeID())
  {
    if (ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get) {
      CFNumberGetValue(v2, kCFNumberSInt64Type, &BBUpdaterCommon::getEUICCChipID(void)::euiccChipID);
    }
  }
  else
  {
    CFRelease(v2);
    CFNumberRef v2 = 0;
  }
LABEL_11:
  if (v2) {
    CFRelease(v2);
  }
}

void sub_21DF769EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN15BBUpdaterCommon12BBUReadNVRAMEv_block_invoke()
{
  kern_return_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  io_registry_entry_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  io_object_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  kern_return_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  CFMutableDictionaryRef properties;
  const void **v25;
  mach_port_t mainPort;

  mainPort = -1431655766;
  uint64_t v0 = IOMasterPort(*MEMORY[0x263EF87F0], &mainPort);
  if (v0)
  {
    uint64_t v4 = v0;
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(25, 0xFFFFFFFFLL, "BBUCommon", "", "Condition <<%s>> failed %s %s/%d\n", v1, v2, v3, (char)"KERN_SUCCESS == kr");
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
        return;
      }
      goto LABEL_6;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) != 0)
    {
LABEL_6:
      if (gBBULogVerbosity < 0) {
        return;
      }
      unint64_t v8 = "Could not get master port %d\n";
      uint64_t v23 = v4;
      goto LABEL_8;
    }
    return;
  }
  CFBooleanRef v9 = IORegistryEntryFromPath(mainPort, "IODeviceTree:/options");
  if (v9)
  {
    uint64_t v13 = v9;
    properties = 0;
    uint64_t v25 = (const void **)&_MergedGlobals_7;
    std::string v17 = IORegistryEntryCreateCFProperties(v9, &properties, (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    uint64_t v18 = *v25;
    if (properties)
    {
      *uint64_t v25 = properties;
      if (v18) {
        goto LABEL_21;
      }
    }
    else
    {
      *uint64_t v25 = 0;
      if (v18) {
LABEL_21:
      }
        CFRelease(v18);
    }
    if (!v17)
    {
      if (_MergedGlobals_7
         ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
         : 0)
      {
        goto LABEL_33;
      }
    }
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(25, 0xFFFFFFFFLL, "BBUCommon", "", "Condition <<%s>> failed %s %s/%d\n", v14, v15, v16, (char)"KERN_SUCCESS == kr && nvramInfo");
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) != 0) {
        goto LABEL_27;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) != 0)
      {
LABEL_27:
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(25, 0, "BBUCommon", "", "Could not load NVRAM? %d\n", v19, v20, v21, v17);
        }
      }
    }
LABEL_33:
    IOObjectRelease(v13);
    return;
  }
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(25, 0xFFFFFFFFLL, "BBUCommon", "", "Condition <<%s>> failed %s %s/%d\n", v10, v11, v12, (char)"nvramRef");
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    unint64_t v8 = "Could not find NVRAM via IOKit\n";
LABEL_8:
    _BBULog(25, 0, "BBUCommon", "", v8, v5, v6, v7, v23);
  }
}

void sub_21DF76D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  ctu::cf::detail::TakeOwnershipProxy<__CFDictionary>::~TakeOwnershipProxy((const void **)va);
  _Unwind_Resume(a1);
}

BOOL BBUpdaterCommon::isNVRAMKeyPresent(BBUpdaterCommon *this, const __CFString *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AA8F810, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AA8F810))
  {
    _MergedGlobals_7 = 0;
    __cxa_atexit((void (*)(void *))ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef, &_MergedGlobals_7, &dword_21DE8A000);
    __cxa_guard_release(&qword_26AA8F810);
  }
  if (qword_26AA8F818 == -1)
  {
    if (gBBULogMaskGet(void)::once == -1) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_26AA8F818, &__block_literal_global_31);
    if (gBBULogMaskGet(void)::once == -1) {
      goto LABEL_4;
    }
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_4:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) != 0
    && (gBBULogVerbosity & 0x80000000) == 0
    && ((ctu::cf::show((uint64_t *)__p, (ctu::cf *)_MergedGlobals_7, a2), v15 >= 0)
      ? (uint64_t v6 = __p)
      : (void **)(LOBYTE(v6) = __p[0]),
        _BBULog(25, 0, "BBUCommon", "", "NVRAM: %s\n", v3, v4, v5, (char)v6),
        v15 < 0))
  {
    operator delete(__p[0]);
    uint64_t v7 = (const void *)_MergedGlobals_7;
    if (!_MergedGlobals_7) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v7 = (const void *)_MergedGlobals_7;
    if (!_MergedGlobals_7) {
      goto LABEL_24;
    }
  }
  CFRetain(v7);
  if (ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get)
  {
    BOOL v8 = CFDictionaryContainsKey((CFDictionaryRef)v7, this) != 0;
    if (gBBULogMaskGet(void)::once == -1) {
      goto LABEL_13;
    }
LABEL_25:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
LABEL_24:
  BOOL v8 = 0;
  if (gBBULogMaskGet(void)::once != -1) {
    goto LABEL_25;
  }
LABEL_13:
  if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
    goto LABEL_20;
  }
LABEL_14:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    ctu::cf::show((uint64_t *)__p, this, a2);
    if (v15 >= 0) {
      int v12 = __p;
    }
    else {
      LOBYTE(v12) = __p[0];
    }
    _BBULog(25, 0, "BBUCommon", "", "NVRAM '%s' exists? %s\n", v9, v10, v11, (char)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_20:
  if (v7) {
    CFRelease(v7);
  }
  return v8;
}

void sub_21DF77054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a11);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterCommon::BBUCreateCFError(CFErrorRef *a1, uint64_t a2, unsigned int a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
        return 0;
      }
    }
    if (gBBULogVerbosity <= 5) {
      return 0;
    }
    goto LABEL_19;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v16 = ctu::cf::convert_copy();
    if (v16)
    {
      std::string v17 = (const void *)*MEMORY[0x263EFFC48];
      if (*MEMORY[0x263EFFC48]) {
        CFRetain(v17);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (a4)
      {
        uint64_t v18 = (const void *)*MEMORY[0x263EFFC88];
        if (*MEMORY[0x263EFFC88]) {
          CFRetain(v18);
        }
        CFRetain(a4);
        if (v18) {
          CFDictionaryAddValue(Mutable, v18, a4);
        }
        CFRelease(a4);
        if (v18) {
          CFRelease(v18);
        }
      }
      *a1 = CFErrorCreate(v11, @"BBUpdater", a3, Mutable);
      goto LABEL_25;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_23:
        if (gBBULogVerbosity >= 6) {
          _BBULog(1, 6, "BBUCommon", "", "check failed: %s, %d, assertion: %s\n", v13, v14, v15, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUCommon.cpp");
        }
      }
    }
LABEL_25:
    CFRelease(Mutable);
    return v16;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0) {
      return 0;
    }
  }
  if (gBBULogVerbosity >= 6) {
LABEL_19:
  }
    _BBULog(1, 6, "BBUCommon", "", "check failed: %s, %d, assertion: %s\n", a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUCommon.cpp");
  return 0;
}

void sub_21DF773F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  BOOL v8 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va3);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_21DF77448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

unint64_t BBUpdaterCommon::BBUStrError@<X0>(BBUpdaterCommon *this@<X0>, void *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  long long v10 = 0u;
  if (strerror_r((int)this, __strerrbuf, 0x80uLL)) {
    snprintf(__strerrbuf, 0x80uLL, "unknown error %d", v2);
  }
  unint64_t result = strlen(__strerrbuf);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    BOOL v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  unint64_t result = (unint64_t)memcpy(a2, __strerrbuf, v5);
LABEL_11:
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

const char *BBUpdaterCommon::redactedString(BBUpdaterCommon *this, const char *a2)
{
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
LABEL_3:
  if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) {
    return (const char *)this;
  }
  else {
    return "<< SNUM >>";
  }
}

uint64_t BBUICE16Communication::freeTransportSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 80);
  if (!v8) {
    return 1;
  }
  if (v8 == a2)
  {
    long long v12 = *(NSObject **)(a1 + 72);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    block[4] = a1;
    dispatch_sync(v12, block);
    uint64_t v11 = TelephonyUtilTransportFree();
    long long v13 = *(NSObject **)(a1 + 72);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    v15[2] = ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke_2;
    v15[3] = &__block_descriptor_tmp_8_0;
    char v16 = v11;
    v15[4] = a1;
    v15[5] = a2;
    dispatch_sync(v13, v15);
    return v11;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    uint64_t v11 = 0;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      return v11;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    uint64_t v11 = 0;
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      return v11;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(2, 0, "BBUICE16Communication", "", "call with %p different from fTransportCreated(%p)\n", a6, a7, a8, a2);
    return 0;
  }
  return v11;
}

uint64_t ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 60) = 1;
  return result;
}

void ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  *(unsigned char *)(v8 + 60) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    *(void *)(v8 + 80) = 0;
    return;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(2, 0, "BBUICE16Communication", "", "fail to free transport: %p\n", a6, a7, a8, *(void *)(a1 + 40));
  }
}

uint64_t BBUICE16Communication::createTransport(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v46 = 0;
  uint64_t v47 = &v46;
  uint64_t v48 = 0x2000000000;
  int v49 = 3;
  uint64_t v42 = 0;
  unint64_t v43 = &v42;
  uint64_t v44 = 0x2000000000;
  char v45 = 0;
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v6;
  long long v40 = v6;
  long long v37 = v6;
  long long v38 = v6;
  long long v36 = v6;
  TelephonyBasebandPCITransportInitParameters();
  if (*(void *)(a1 + 80))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0) {
        goto LABEL_4;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      {
LABEL_4:
        if ((gBBULogVerbosity & 0x80000000) == 0) {
          _BBULog(2, 0, "BBUICE16Communication", "", "Need to free transport before creating again", v7, v8, v9, v27);
        }
      }
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 40))(a1, *(void *)(a1 + 80));
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v10 = *(void *)(a1 + 72);
  LODWORD(v38) = v38 | 1;
  v35[0] = MEMORY[0x263EF8330];
  v35[1] = 0x40000000;
  void v35[2] = ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke;
  v35[3] = &__block_descriptor_tmp_11_1;
  v35[4] = a2;
  *((void *)&v36 + 1) = v10;
  *(void *)&long long v37 = v35;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
    {
LABEL_9:
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(2, 0, "BBUICE16Communication", "", "Creating transport:%p stage:%d interface:%d %f ms\n", v7, v8, v9, a2);
      }
    }
  }
  switch(a3)
  {
    case 1:
    case 8:
    case 16:
      int v11 = 8;
      goto LABEL_15;
    case 2:
      int v11 = 6;
      LODWORD(v36) = 6;
      int v12 = 5000;
      goto LABEL_16;
    case 4:
      int v11 = 7;
LABEL_15:
      LODWORD(v36) = v11;
      int v12 = 10000;
LABEL_16:
      DWORD2(v37) = v12;
      *(_DWORD *)(a1 + 88) = v11;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
          goto LABEL_20;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(2, 0, "BBUICE16Communication", "", "Creating with timeout set to %u ms\n", v7, v8, v9, SBYTE8(v37));
      }
LABEL_20:
      long long v13 = *(NSObject **)(a1 + 64);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1107296256;
      block[2] = ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_19;
      void block[6] = a1;
      block[7] = a2;
      long long v31 = v38;
      long long v32 = v39;
      long long v33 = v40;
      unint64_t v34 = v41;
      long long v29 = v36;
      long long v30 = v37;
      block[4] = &v42;
      void block[5] = &v46;
      dispatch_sync(v13, block);
      uint64_t v17 = v47;
      if (v36 != 8 || *((_DWORD *)v47 + 6)) {
        goto LABEL_30;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
          goto LABEL_26;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(2, 0, "BBUICE16Communication", "", " Initializing KTL options struct, opening ARI channel\n", v14, v15, v16, v27);
      }
LABEL_26:
      Context = (capabilities::updater *)IceAriGetContext();
      capabilities::updater::ARICommandTimeout(Context);
      int v19 = KTLInitOptions();
      uint64_t v20 = v43;
      *((unsigned char *)v43 + 24) = v19;
      if (v19)
      {
        IceAriGetContext();
        LOBYTE(v19) = KTLOpenChannel();
        uint64_t v20 = v43;
      }
      *((unsigned char *)v20 + 24) = v19;
      IceAriSetContextValid(1);
      uint64_t v17 = v47;
      if (!*((unsigned char *)v43 + 24)) {
        *((_DWORD *)v47 + 6) = 11;
      }
LABEL_30:
      uint64_t v21 = *((unsigned int *)v17 + 6);
      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
      return v21;
    default:
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
          goto LABEL_43;
        }
      }
      if ((gBBULogVerbosity & 0x80000000) == 0) {
        _BBULog(2, 0, "BBUICE16Communication", "", "Unsupported stage: %d\n", v7, v8, v9, a3);
      }
LABEL_43:
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/ICE/BBUICE16Communication.cpp", 0x6Eu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unsupported BBU stage.\")", v24, v25, v26, v27);
  }
}

void sub_21DF77DC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Block_object_dispose((const void *)(v2 - 112), 8);
  _Unwind_Resume(a1);
}

void ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_5;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(2, 0, "BBUICE16Communication", "", "transport %p, status: %d\n", a6, a7, a8, v9);
  }
LABEL_5:
  if (a2 != 1) {
    return;
  }
  uint64_t Controller = (const void *)TelephonyBasebandCreateController();
  int v14 = TelephonyBasebandResetModem();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0) {
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
    {
LABEL_8:
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        uint64_t v15 = "failure";
        if (v14) {
          uint64_t v15 = "success";
        }
        _BBULog(2, 0, "BBUICE16Communication", "", "Resetting modem: %s\n", v11, v12, v13, (char)v15);
      }
    }
  }
  if (Controller) {
    CFRelease(Controller);
  }
}

void sub_21DF77FB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(v2 + 80) = a1[7];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = TelephonyBasebandPCITransportCreate();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_8;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
      uint64_t v9 = "success";
    }
    else {
      uint64_t v9 = "failure";
    }
    _BBULog(2, 0, "BBUICE16Communication", "", " TelephonyBasebandPCITransportCreate returns: %s\n", v6, v7, v8, (char)v9);
  }
LABEL_8:
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    if (!*(void *)(v2 + 80))
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/ICE/BBUICE16Communication.cpp", 0x80u, (ctu::LogMessageBuffer *)"Assertion failure(nullptr != fTransportCreated && \"Telephony util transport error.\")", v12, v13, v14, v15);
    }
    int v10 = 0;
  }
  else
  {
    BBUICE16Communication::freeTransportSync(v2, a1[7], v3, v4, v5, v6, v7, v8);
    int v10 = 3;
  }
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = v10;
}

void sub_21DF78144(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void IceAriSetContextValid(char a1)
{
  pthread_mutex_lock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  if (!qword_26AA89BA0)
  {
    uint64_t v3 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
    LOBYTE(v3->__on_zero_shared_weak) = 0;
    uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
    v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECAB70;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = v3;
    uint64_t v5 = (std::__shared_weak_count *)off_26AA89BA8;
    qword_26AA89BA0 = (uint64_t)v3;
    off_26AA89BA8 = v2;
    if (!v5) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  uint64_t v3 = (std::__shared_weak_count_vtbl *)qword_26AA89BA0;
  uint64_t v2 = (std::__shared_weak_count *)off_26AA89BA8;
  if (off_26AA89BA8)
  {
LABEL_7:
    char v4 = 0;
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
  char v4 = 1;
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  LOBYTE(v3->__on_zero_shared_weak) = a1;
  if ((v4 & 1) == 0 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_21DF782C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Communication::getBasebandState(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a1 + 88) - 6;
  if (v9 > 3) {
    int v10 = 3;
  }
  else {
    int v10 = dword_21DFADC90[v9];
  }
  *a3 = v10;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      return 0;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(2, 0, "BBUICE16Communication", "", "returning state: %d\n", a6, a7, a8, *a3);
  }
  return 0;
}

uint64_t BBUICE16Communication::freeTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  char v22 = 1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0) {
      goto LABEL_5;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(2, 0, "BBUICE16Communication", "", "request to free transport: %p\n", a6, a7, a8, a2);
  }
LABEL_5:
  pthread_mutex_lock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  if (!qword_26AA89BA0)
  {
    uint64_t v11 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
    LOBYTE(v11->__on_zero_shared_weak) = 0;
    int v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECAB70;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v11;
    uint64_t v13 = (std::__shared_weak_count *)off_26AA89BA8;
    qword_26AA89BA0 = (uint64_t)v11;
    off_26AA89BA8 = v10;
    if (!v13) {
      goto LABEL_11;
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  uint64_t v11 = (std::__shared_weak_count_vtbl *)qword_26AA89BA0;
  int v10 = (std::__shared_weak_count *)off_26AA89BA8;
  if (off_26AA89BA8)
  {
LABEL_11:
    char v12 = 0;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_12;
  }
  char v12 = 1;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  int on_zero_shared_weak_low = LOBYTE(v11->__on_zero_shared_weak);
  if ((v12 & 1) == 0 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!on_zero_shared_weak_low) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (on_zero_shared_weak_low)
  {
LABEL_15:
    IceAriGetContext();
    KTLCloseChannel();
    IceAriSetContextValid(0);
  }
LABEL_16:
  char v15 = *(NSObject **)(a1 + 64);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1107296256;
  block[2] = ___ZN21BBUICE16Communication13freeTransportEP26TelephonyUtilTransport_tag_block_invoke;
  block[3] = &__block_descriptor_tmp_23_1;
  block[4] = &v19;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v15, block);
  uint64_t v16 = *((unsigned __int8 *)v20 + 24);
  _Block_object_dispose(&v19, 8);
  return v16;
}

void sub_21DF78648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v17);
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21BBUICE16Communication13freeTransportEP26TelephonyUtilTransport_tag_block_invoke(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = BBUICE16Communication::freeTransportSync(a1[5], a1[6], a3, a4, a5, a6, a7, a8);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void BBUICE16Communication::~BBUICE16Communication(BBUICE16Communication *this)
{
  *(void *)this = &unk_26CECECB0;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    dispatch_release(v3);
  }
  *(void *)this = &unk_26CECE578;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

{
  NSObject *v2;
  NSObject *v3;
  BBUICE16Communication *v4;
  uint64_t vars8;

  *(void *)this = &unk_26CECECB0;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    dispatch_release(v3);
  }
  *(void *)this = &unk_26CECE578;
  if (*((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    char v4 = this;
  }
  else
  {
    char v4 = this;
  }
  operator delete(v4);
}

void *BBUICE16Communication::getIPCLogBuffer@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (BBULogIOABP *)operator new(0xA0uLL);
  BBULogIOABP::BBULogIOABP(v3);
  *a1 = (char *)v3 + *(void *)(*(void *)v3 - 88);
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &unk_26CECBA80;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_21DF788B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v2 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_21DF788D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_24()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

void *BBUICE18HashData::BBUICE18HashData(void *a1, unsigned int a2, char *__s)
{
  *a1 = &unk_26CECED00;
  a1[2] = 0;
  a1[1] = a1 + 2;
  uint64_t v3 = (uint64_t **)(a1 + 1);
  a1[3] = 0;
  if (a2)
  {
    uint64_t v5 = a2;
    while (1)
    {
      memset(__p, 170, sizeof(__p));
      size_t v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v7 = (unsigned char *)v6;
      if (v6 >= 0x17) {
        break;
      }
      HIBYTE(__p[2]) = v6;
      uint64_t v8 = __p;
      if (v6) {
        goto LABEL_12;
      }
LABEL_13:
      v7[(void)v8] = 0;
      uint64_t v11 = (long long *)operator new(0x30uLL);
      long long v12 = *((_OWORD *)__s + 5);
      long long *v11 = *((_OWORD *)__s + 4);
      v11[1] = v12;
      v11[2] = *((_OWORD *)__s + 6);
      long long v31 = __p;
      uint64_t v13 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v31);
      uint64_t v14 = v13;
      uint64_t v16 = v13 + 7;
      char v15 = v13[7];
      unint64_t v17 = (unint64_t)v13[9];
      if (v17 - (unint64_t)v15 >= 0x30)
      {
        char v22 = v13[8];
        int64_t v23 = (char *)v22 - (char *)v15;
        if ((unint64_t)((char *)v22 - (char *)v15) > 0x2F)
        {
          long long v26 = *v11;
          long long v27 = v11[2];
          *((_OWORD *)v15 + 1) = v11[1];
          *((_OWORD *)v15 + 2) = v27;
          *(_OWORD *)char v15 = v26;
          v13[8] = v15 + 6;
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
        else
        {
          if (v22 != v15)
          {
            memmove(v13[7], v11, (char *)v22 - (char *)v15);
            char v15 = v14[8];
          }
          uint64_t v24 = (char *)v11 + v23;
          size_t v25 = 48 - v23;
          memmove(v15, v24, v25);
          v14[8] = (uint64_t *)((char *)v15 + v25);
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        if (v15)
        {
          v13[8] = v15;
          operator delete(v15);
          unint64_t v17 = 0;
          *uint64_t v16 = 0;
          v16[1] = 0;
          void v16[2] = 0;
        }
        uint64_t v18 = 2 * v17;
        if (2 * v17 <= 0x30) {
          uint64_t v18 = 48;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v19 = v18;
        }
        uint64_t v20 = (uint64_t *)operator new(v19);
        v14[7] = v20;
        v14[8] = v20;
        v14[9] = (uint64_t *)((char *)v20 + v19);
        long long v21 = v11[1];
        *(_OWORD *)uint64_t v20 = *v11;
        *((_OWORD *)v20 + 1) = v21;
        *((_OWORD *)v20 + 2) = v11[2];
        v14[8] = v20 + 6;
        operator delete(v11);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      operator delete(__p[0]);
LABEL_4:
      __s += 112;
      if (!--v5) {
        return a1;
      }
    }
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    __p[1] = v7;
    std::string __p[2] = (void *)(v10 | 0x8000000000000000);
    __p[0] = v8;
LABEL_12:
    memcpy(v8, __s, (size_t)v7);
    goto LABEL_13;
  }
  return a1;
}

void sub_21DF78BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v17, *a10);
  _Unwind_Resume(a1);
}

void sub_21DF78BE8()
{
  operator delete(v0);
  JUMPOUT(0x21DF78BF4);
}

void BBUICE18HashData::~BBUICE18HashData(char **this)
{
  *this = (char *)&unk_26CECED00;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  uint64_t vars8;

  *this = (char *)&unk_26CECED00;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);

  operator delete(this);
}

BOOL BBUICE18HashData::compare(BBUICE18HashData *this, BBUFeedback *a2, const BBUHashData *lpsrc)
{
  if (!lpsrc)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = (long long *)*((void *)this + 1);
    uint64_t v8 = (char *)this + 16;
    if (v7 == (long long *)((char *)this + 16)) {
      return v6;
    }
LABEL_7:
    while (1)
    {
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v19[16] = v9;
      long long v20 = v9;
      *(_OWORD *)size_t v19 = v9;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v19, v7 + 2);
      uint64_t v10 = *(const unsigned __int8 **)&v19[24];
      uint64_t v11 = (const unsigned __int8 *)(*(uint64_t (**)(void *, unsigned char *))(*(void *)v5 + 40))(v5, v19);
      if (!v11) {
        break;
      }
      if (!v6) {
        goto LABEL_18;
      }
      if (v19[23] >= 0) {
        long long v12 = v19;
      }
      else {
        long long v12 = *(const char **)v19;
      }
      BOOL v6 = BBUHashData::compareHash(this, a2, v10, v11, v12);
      uint64_t v13 = *(void **)&v19[24];
      if (*(void *)&v19[24]) {
        goto LABEL_19;
      }
LABEL_20:
      if ((v19[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v19);
        char v15 = (long long *)*((void *)v7 + 1);
        if (v15)
        {
          do
          {
LABEL_24:
            uint64_t v16 = v15;
            char v15 = *(long long **)v15;
          }
          while (v15);
          goto LABEL_6;
        }
      }
      else
      {
        char v15 = (long long *)*((void *)v7 + 1);
        if (v15) {
          goto LABEL_24;
        }
      }
      do
      {
        uint64_t v16 = (long long *)*((void *)v7 + 2);
        BOOL v17 = *(void *)v16 == (void)v7;
        uint64_t v7 = v16;
      }
      while (!v17);
LABEL_6:
      uint64_t v7 = v16;
      if (v16 == (long long *)v8) {
        return v6;
      }
    }
    if (v19[23] >= 0) {
      uint64_t v14 = v19;
    }
    else {
      uint64_t v14 = *(const char **)v19;
    }
    BBUFeedback::handleComment(a2, "Hash missing in BBFW: %s", v14);
LABEL_18:
    BOOL v6 = 0;
    uint64_t v13 = *(void **)&v19[24];
    if (!*(void *)&v19[24]) {
      goto LABEL_20;
    }
LABEL_19:
    *(void *)&long long v20 = v13;
    operator delete(v13);
    goto LABEL_20;
  }
  BOOL v6 = v5 != 0;
  uint64_t v7 = (long long *)*((void *)this + 1);
  uint64_t v8 = (char *)this + 16;
  if (v7 != (long long *)((char *)this + 16)) {
    goto LABEL_7;
  }
  return v6;
}

void sub_21DF78EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void BBUICE18HashData::showHashes(BBUICE18HashData *this, BBUFeedback *a2)
{
  uint64_t v2 = (long long *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 16;
  if (v2 != (long long *)((char *)this + 16))
  {
    while (1)
    {
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v13[16] = v6;
      long long v14 = v6;
      *(_OWORD *)uint64_t v13 = v6;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v13, v2 + 2);
      uint64_t v7 = v13[23] >= 0 ? v13 : *(const char **)v13;
      v15[0] = 0;
      v15[1] = 0;
      uint64_t v16 = 0;
      (*(void (**)(BBUICE18HashData *))(*(void *)this + 32))(this);
      ctu::assign();
      uint64_t v8 = v16 >= 0 ? (const char *)v15 : (const char *)v15[0];
      BBUFeedback::handleComment(a2, "\t %s:  %s", v7, v8);
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        break;
      }
      operator delete(v15[0]);
      long long v9 = *(void **)&v13[24];
      if (*(void *)&v13[24]) {
        goto LABEL_12;
      }
LABEL_13:
      if ((v13[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v13);
        uint64_t v10 = (long long *)*((void *)v2 + 1);
        if (v10)
        {
          do
          {
LABEL_19:
            uint64_t v11 = v10;
            uint64_t v10 = *(long long **)v10;
          }
          while (v10);
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v10 = (long long *)*((void *)v2 + 1);
        if (v10) {
          goto LABEL_19;
        }
      }
      do
      {
        uint64_t v11 = (long long *)*((void *)v2 + 2);
        BOOL v12 = *(void *)v11 == (void)v2;
        uint64_t v2 = v11;
      }
      while (!v12);
LABEL_3:
      uint64_t v2 = v11;
      if (v11 == (long long *)v3) {
        return;
      }
    }
    long long v9 = *(void **)&v13[24];
    if (!*(void *)&v13[24]) {
      goto LABEL_13;
    }
LABEL_12:
    *(void *)&long long v14 = v9;
    operator delete(v9);
    goto LABEL_13;
  }
}

void sub_21DF79050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BBUICE18HashData::getFileHash(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>(a1 + 8, a2);
  if ((uint64_t *)(a1 + 16) == v3) {
    return 0;
  }
  else {
    return v3[7];
  }
}

uint64_t BBUICE18HashData::getHashSize(BBUICE18HashData *this)
{
  return 48;
}

void BBUELF32Header::BBUELF32Header(BBUELF32Header *this, BBUDataSource *a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 8) = 0;
  int v53 = -1431655766;
  if (!a2)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x14u, (ctu::LogMessageBuffer *)"Assertion failure(fDataSource)", v23, v24, v25, v50);
    goto LABEL_30;
  }
  char v4 = (_DWORD *)((char *)this + 8);
  if ((*(unsigned int (**)(BBUDataSource *, char *, uint64_t, int *, uint64_t))(*(void *)a2 + 16))(a2, (char *)this + 8, 52, &v53, a3))
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x16u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy ELF32 header from data source.\")", v26, v27, v28, v50);
    goto LABEL_30;
  }
  if (v53 != 52)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x17u, (ctu::LogMessageBuffer *)"Assertion failure(( amountRead == sizeof( Header)) && \"Copied data size mismatch: Failed to copy ELF32 header from data source.\")", v29, v30, v31, v50);
    goto LABEL_30;
  }
  if (*v4 != 1179403647)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x19u, (ctu::LogMessageBuffer *)"Assertion failure(::memcmp( fHeader.e_ident, kIdentMagic, sizeof( kIdentMagic)) == 0)", v32, v33, v34, v50);
    goto LABEL_30;
  }
  if (*((unsigned char *)this + 12) != 1)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x1Du, (ctu::LogMessageBuffer *)"Assertion failure(( fHeader.e_ident[i] == kELFClass32) && \"ELF header identity mismatch.\")", v35, v36, v37, v50);
    goto LABEL_30;
  }
  if (*((unsigned char *)this + 13) != 1)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x20u, (ctu::LogMessageBuffer *)"Assertion failure(( fHeader.e_ident[i] == kELFData2LSB) && \"ELF header identity mismatch.\")", v38, v39, v40, v50);
    goto LABEL_30;
  }
  uint64_t v8 = *((unsigned int *)this + 9);
  if (v8)
  {
    if (*((unsigned __int16 *)this + 25) <= 0x1Fu)
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x28u, (ctu::LogMessageBuffer *)"Assertion failure(( sizeof( ProgramHeaderTable) <= getProgramHeaderTableEntrySize()) && \"Program header table size exceeds program header table entry size.\")", v47, v48, v49, v50);
      goto LABEL_30;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0) {
        goto LABEL_13;
      }
    }
    if (gBBULogVerbosity >= 7) {
      _BBULog(16, 7, "BBUELF32Header", "", "Program header entries %u\n", v5, v6, v7, *((_WORD *)this + 26));
    }
LABEL_13:
    uint64_t v9 = *((unsigned __int16 *)this + 26);
    *((void *)this + 8) = operator new[](32 * v9);
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < *((unsigned __int16 *)this + 26); ++i)
      {
        if ((*(unsigned int (**)(void, uint64_t, uint64_t, int *, uint64_t))(**(void **)this + 16))(*(void *)this, *((void *)this + 8) + v10, 32, &v53, v8))
        {
          exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x33u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy data from program header table.\")", v17, v18, v19, v50);
          goto LABEL_30;
        }
        if (v53 != 32)
        {
          exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x34u, (ctu::LogMessageBuffer *)"Assertion failure(amountRead == sizeof( ProgramHeaderTable) && \"Copied data size mismatch: Failed to copy data from program header table.\")", v20, v21, v22, v50);
          goto LABEL_30;
        }
        int v15 = *((unsigned __int16 *)this + 25);
        if (gBBULogMaskGet(void)::once == -1)
        {
          if (*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2)) {
            goto LABEL_20;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if (*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2))
          {
LABEL_20:
            if (gBBULogVerbosity >= 7) {
              _BBULog(16, 7, "BBUELF32Header", "", "\t%u - Type: %u, Offset %u, VAddr %u, PAddr %u FileSize %u, MemSize %u, Flags %u\n", v12, v13, v14, i);
            }
          }
        }
        uint64_t v8 = (v8 + v15);
        v10 += 32;
      }
    }
  }
  if (*((_DWORD *)this + 10))
  {
    unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v41 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v51[0] = v41;
    v51[1] = v41;
    int v42 = (*(uint64_t (**)(void, _OWORD *, uint64_t, int *))(**(void **)this + 16))(*(void *)this, v51, 40, &v53);
    unint64_t v43 = __cxa_allocate_exception(0x210uLL);
    exceptioptrdiff_t n = v43;
    if (v42) {
      _BBUException::_BBUException((uint64_t)v43, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x46u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy data from section header table.\")", v44, v45, v46, v50);
    }
    else {
      _BBUException::_BBUException((uint64_t)v43, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x47u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == sizeof( SectionHeaderTable)) && \"Copied data size mismatch: Failed to copy data from section header table.\")", v44, v45, v46, v50);
    }
LABEL_30:
  }
}

void sub_21DF795B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF795C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF795DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF795F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF79604(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF79618(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF7962C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF79640(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF79654(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF79668(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF7967C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t b64_ntop(unsigned __int8 *a1, unint64_t a2, unsigned char *a3, unint64_t a4)
{
  *a3 = 0;
  if (a2 >= 3)
  {
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t result = v5 + 4;
      if (v5 + 4 > a4) {
        goto LABEL_16;
      }
      unint64_t v7 = a1[2];
      unint64_t v8 = a1[1];
      unsigned int v9 = *a1;
      a1 += 3;
      a2 -= 3;
      uint64_t v10 = &a3[v5];
      unsigned char *v10 = Base64[(unint64_t)v9 >> 2];
      v10[1] = Base64[(v8 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v9 & 3))];
      v10[2] = Base64[(v7 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v8 & 0xF))];
      v10[3] = Base64[v7 & 0x3F];
      unint64_t v5 = result;
      if (a2 <= 2)
      {
        if (a2) {
          goto LABEL_9;
        }
        goto LABEL_6;
      }
    }
  }
  unint64_t result = 0;
  if (a2)
  {
LABEL_9:
    uint64_t v11 = 0;
    unsigned __int8 v18 = 0;
    __int16 v17 = 0;
    do
    {
      *((unsigned char *)&v17 + v11) = a1[v11];
      ++v11;
    }
    while (a2 > v11);
    unint64_t v12 = result + 4;
    if (result + 4 <= a4)
    {
      char v13 = HIBYTE(v17);
      unint64_t v14 = ((unint64_t)HIBYTE(v17) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v17 & 3));
      a3[result] = Base64[(unint64_t)v17 >> 2];
      unint64_t v15 = v18;
      a3[result | 1] = Base64[v14];
      char v16 = 61;
      if (a2 != 1) {
        char v16 = Base64[(v15 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v13 & 0xF))];
      }
      a3[result | 2] = v16;
      a3[result | 3] = 61;
      result += 4;
      if (v12 < a4) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_6:
    if (result < a4)
    {
LABEL_15:
      a3[result] = 0;
      return result;
    }
  }
LABEL_16:
  a3[a4 - 1] = 0;
  *a3 = 0;
  return 0xFFFFFFFFLL;
}

uint64_t BBUICE18Programmer::BBUICE18Programmer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = BBUICEProgrammer::BBUICEProgrammer(a1, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_26CECE258;
  *(_WORD *)(v5 + 81) = 0;
  *(unsigned char *)(v5 + 111) = 0;
  *(unsigned char *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 112) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v5 + 120), 0);
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 279) = 3;
  strcpy((char *)(a1 + 256), "EBL");
  *(_OWORD *)(a1 + 280) = xmmword_21DFAD770;
  *(void *)(a1 + 308) = 0;
  *(void *)(a1 + 300) = 0;
  *(_DWORD *)(a1 + 296) = 257;
  *(void *)a1 = &unk_26CECED58;
  *(_DWORD *)(a1 + 316) = 0;
  *(_WORD *)(a1 + 324) = 0;
  *(unsigned char *)(a1 + 351) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 375) = 3;
  *(_DWORD *)(a1 + 352) = 4997701;
  *(_OWORD *)(a1 + 376) = xmmword_21DFAE0C0;
  return a1;
}

void sub_21DF798FC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  BBUProgrammer::~BBUProgrammer((BBUProgrammer *)v1);
  _Unwind_Resume(a1);
}

void BBUICE18Programmer::~BBUICE18Programmer(void **this)
{
  *this = &unk_26CECED58;
  if (*((char *)this + 375) < 0)
  {
    operator delete(this[44]);
    if ((*((char *)this + 351) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (BBUICE16Programmer *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 351) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[41]);
  uint64_t v2 = (BBUICE16Programmer *)this;

LABEL_5:
  BBUICE16Programmer::~BBUICE16Programmer(v2);
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_26CECED58;
  if (*((char *)this + 375) < 0)
  {
    operator delete(this[44]);
    if ((*((char *)this + 351) & 0x80000000) == 0)
    {
LABEL_3:
      BBUICE16Programmer::~BBUICE16Programmer((BBUICE16Programmer *)this);
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 351) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[41]);
  BBUICE16Programmer::~BBUICE16Programmer((BBUICE16Programmer *)this);

LABEL_5:
  operator delete(v2);
}

uint64_t BBUICE18Programmer::saveMRCData(BBUFeedback **this, unsigned __int8 *a2, CFIndex length)
{
  CFDataRef v4 = CFDataCreateWithBytesNoCopy(0, a2, length, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (v4)
  {
    CFDataRef v8 = v4;
    unsigned int v9 = operator new(0x18uLL);
    v9[4] = 0;
    *(void *)unsigned int v9 = &unk_26CECE780;
    *((void *)v9 + 1) = v8;
    CFRetain(v8);
    BBUICE16UpdateSource::getMRCFilePath((uint64_t)__p);
    uint64_t v10 = (*(uint64_t (**)(_DWORD *, void **, uint64_t))(*(void *)v9 + 48))(v9, __p, 1);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v8);
    (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    return v10;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_7:
      if (gBBULogVerbosity >= 6) {
        _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v5, v6, v7, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
      }
    }
  }
  BBUFeedback::handleComment(this[1], "Failed creating CFDataRef");
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  uint64_t v12 = qword_26AA89AB0;
  if (!qword_26AA89AB0)
  {
    BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
    std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    uint64_t v12 = qword_26AA89AB0;
  }
  v15[0] = v12;
  v15[1] = off_26AA89AB8;
  if (off_26AA89AB8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed creating CFDataRef");
  BBUError::addError(v12, (uint64_t)__p, 19);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v15);
  return 19;
}

void sub_21DF79CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void BBUICE18Programmer::MRCResultString(int a1@<W1>, char *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      a2[23] = 15;
      strcpy(a2, "InitialTuningOK");
      break;
    case 1:
      a2[23] = 16;
      strcpy(a2, "FastbootTuningOK");
      break;
    case 2:
      a2[23] = 17;
      strcpy(a2, "InitialTuningFail");
      break;
    case 3:
      a2[23] = 18;
      strcpy(a2, "FastbootTuningFail");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "unknown");
      break;
  }
}

uint64_t BBUICE18Programmer::mrcTrainInit(BBUFeedback **this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  memset(__b, 170, sizeof(__b));
  if (KTLPSIFormatEnhancedCommand())
  {
    BBUFeedback::handleComment(this[1], "Sending PSI enhanced command 'Start MRC Training' in mrcTrainInit ");
    if (KTLPSISendEnhancedCommand())
    {
      BBUFeedback::handleComment(this[1], "Waiting for PSI command response");
      if (KTLPSIReadMrcResponse())
      {
        BBUFeedback::handleComment(this[1], "psiResp.responseCFIndex Code = %d", LOWORD(__b[1]));
        BBUFeedback::handleComment(this[1], "psiResp.paraunint64_t m = %d", __b[0]);
        uint64_t v11 = this[1];
        int v12 = __b[2];
        (*((void (**)(void **__return_ptr, BBUFeedback **, void))*this + 38))(__p, this, __b[2]);
        if (v27 >= 0) {
          char v13 = __p;
        }
        else {
          char v13 = (void **)__p[0];
        }
        BBUFeedback::handleComment(v11, "psiResp.unint64_t result = 0x%X (%s)", v12, (const char *)v13);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (LOWORD(__b[1]) == 5)
        {
          if ((__b[0] - 2049) > 0xFFFFFBFE)
          {
            if (!__b[2])
            {
              uint64_t v20 = (*((uint64_t (**)(BBUFeedback **, _DWORD *))*this + 35))(this, &__b[3]);
              if (!v20)
              {
                BBUFeedback::handleComment(this[1], "saved MRC data");
                return 0;
              }
              if (gBBULogMaskGet(void)::once == -1)
              {
                if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
                  goto LABEL_79;
                }
              }
              else
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
                {
LABEL_79:
                  if (gBBULogVerbosity >= 6) {
                    _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v17, v18, v19, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
                  }
                }
              }
              BBUFeedback::handleComment(this[1], "Failed saving MRC data");
              pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
              uint64_t v25 = qword_26AA89AB0;
              if (!qword_26AA89AB0)
              {
                BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
                std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
                std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
                uint64_t v25 = qword_26AA89AB0;
              }
              uint64_t v28 = v25;
              uint64_t v29 = off_26AA89AB8;
              if (off_26AA89AB8) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
              }
              pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
              std::string::basic_string[abi:ne180100]<0>(__p, "MRC data not accepted");
              BBUError::addError(v25, (uint64_t)__p, v20);
              if (v27 < 0) {
                operator delete(__p[0]);
              }
              std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
              return v20;
            }
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
                goto LABEL_67;
              }
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
              {
LABEL_67:
                if (gBBULogVerbosity >= 6) {
                  _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
                }
              }
            }
            BBUFeedback::handleComment(this[1], "Data Not accepted");
            pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
            uint64_t v24 = qword_26AA89AB0;
            if (!qword_26AA89AB0)
            {
              BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
              std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
              std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
              uint64_t v24 = qword_26AA89AB0;
            }
            uint64_t v28 = v24;
            uint64_t v29 = off_26AA89AB8;
            if (off_26AA89AB8) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
            }
            pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
            std::string::basic_string[abi:ne180100]<0>(__p, "MRC data not accepted");
LABEL_74:
            BBUError::addError(v24, (uint64_t)__p, 12);
            if (v27 < 0) {
              operator delete(__p[0]);
            }
            std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
            return 12;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
              goto LABEL_58;
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            {
LABEL_58:
              if (gBBULogVerbosity >= 6) {
                _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
              }
            }
          }
          BBUFeedback::handleComment(this[1], "Invalid MRC Data Length received from BB");
          pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          uint64_t v24 = qword_26AA89AB0;
          if (!qword_26AA89AB0)
          {
            BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
            std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
            std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            uint64_t v24 = qword_26AA89AB0;
          }
          uint64_t v28 = v24;
          uint64_t v29 = off_26AA89AB8;
          if (off_26AA89AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string::basic_string[abi:ne180100]<0>(__p, "Invalid MRC Data Length received from BB");
          goto LABEL_74;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
            goto LABEL_49;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_49:
            if (gBBULogVerbosity >= 6) {
              _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
            }
          }
        }
        BBUFeedback::handleComment(this[1], "MRC training RspId invalid");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        uint64_t v24 = qword_26AA89AB0;
        if (!qword_26AA89AB0)
        {
          BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
          std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          uint64_t v24 = qword_26AA89AB0;
        }
        uint64_t v28 = v24;
        uint64_t v29 = off_26AA89AB8;
        if (off_26AA89AB8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        std::string::basic_string[abi:ne180100]<0>(__p, "MRC training RspId invalid");
        goto LABEL_74;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
          goto LABEL_37;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_37:
          if (gBBULogVerbosity >= 6) {
            _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v8, v9, v10, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
          }
        }
      }
      BBUFeedback::handleComment(this[1], "Failed reading PSI command response");
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      uint64_t v23 = qword_26AA89AB0;
      if (!qword_26AA89AB0)
      {
        BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
        std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        uint64_t v23 = qword_26AA89AB0;
      }
      uint64_t v28 = v23;
      uint64_t v29 = off_26AA89AB8;
      if (off_26AA89AB8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      std::string::basic_string[abi:ne180100]<0>(__p, "Failed reading PSI command response");
LABEL_44:
      BBUError::addError(v23, (uint64_t)__p, 3);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
      return 3;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_28:
        if (gBBULogVerbosity >= 6) {
          _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v5, v6, v7, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
        }
      }
    }
    BBUFeedback::handleComment(this[1], "Failed sending MRC training start in mrcTrainInit");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v23 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
      std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      uint64_t v23 = qword_26AA89AB0;
    }
    uint64_t v28 = v23;
    uint64_t v29 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed sending MRC training start in mrcTrainInit");
    goto LABEL_44;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_17:
      if (gBBULogVerbosity >= 6) {
        _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v2, v3, v4, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
      }
    }
  }
  BBUFeedback::handleComment(this[1], "Failed creating MRC training start command");
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  uint64_t v22 = qword_26AA89AB0;
  if (!qword_26AA89AB0)
  {
    BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
    std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    uint64_t v22 = qword_26AA89AB0;
  }
  uint64_t v28 = v22;
  uint64_t v29 = off_26AA89AB8;
  if (off_26AA89AB8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed creating MRC training start command");
  BBUError::addError(v22, (uint64_t)__p, 19);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
  return 19;
}

void sub_21DF7A878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t BBUICE18Programmer::readMRCData(BBUFeedback **this, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  BBUICE16UpdateSource::getMRCFileName((uint64_t)__p);
  if (v23 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  size_t v9 = strlen((const char *)v8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v25 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_11;
  }
  HIBYTE(v25) = v9;
  uint64_t v11 = __dst;
  if (v9) {
LABEL_11:
  }
    memmove(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  uint64_t v26 = __dst;
  uint64_t v14 = (const void *)*((void *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(this + 24), (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (long long **)&v26)+ 5);
  if (v14)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  if (SHIBYTE(v25) < 0) {
LABEL_14:
  }
    operator delete(__dst[0]);
LABEL_15:
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if (v15) {
      goto LABEL_17;
    }
LABEL_23:
    BBUFeedback::handleComment(this[1], "Can't find mrcImage");
    return 1;
  }
  if (!v15) {
    goto LABEL_23;
  }
LABEL_17:
  uint64_t v16 = v15[2];
  if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 32))(v16))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 32))(v16) > a3)
    {
      uint64_t v17 = this[1];
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
      BBUFeedback::handleComment(v17, "Buffer too small (%zu) for file (%u)", a3, v18);
      return 104;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, void))(*(void *)v16 + 24))(v16, a2, v20, 0);
  }
  unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
  uint64_t result = 0;
  *a4 = v21;
  return result;
}

void sub_21DF7ACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE18Programmer::handleHashResponseSha384(uint64_t a1, const void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "handleHashResponse length = %u", a3);
  if (a2 && a3)
  {
    int v10 = KTLParsePSIICEHashResponseSha384();
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing hash response");
    uint64_t v11 = 12;
    uint64_t v12 = v31;
    if (v10)
    {
      uint64_t v28 = a5;
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Received hash response, %d entries", *((_DWORD *)v31 + 1));
      uint64_t v13 = operator new(0x20uLL);
      BBUICE18HashData::BBUICE18HashData(v13, *((_DWORD *)v31 + 1), (char *)v31 + 8);
      uint64_t v14 = (const char *)v31;
      if (*((_DWORD *)v31 + 1))
      {
        unint64_t v15 = 0;
        uint64_t v16 = 8;
        do
        {
          int v18 = &v14[v16];
          size_t v19 = strlen(&v14[v16]);
          if (v19 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v20 = v19;
          if (v19 >= 0x17)
          {
            uint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17) {
              uint64_t v23 = v19 | 7;
            }
            uint64_t v24 = v23 + 1;
            p_dst = (long long *)operator new(v23 + 1);
            *((void *)&__dst + 1) = v20;
            unint64_t v30 = v24 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v30) = v19;
            p_dst = &__dst;
            if (!v19)
            {
              LOBYTE(__dst) = 0;
              unint64_t v22 = *(void *)(a1 + 240);
              if (v22 >= *(void *)(a1 + 248)) {
                goto LABEL_19;
              }
              goto LABEL_8;
            }
          }
          memmove(p_dst, v18, v20);
          *((unsigned char *)p_dst + v20) = 0;
          unint64_t v22 = *(void *)(a1 + 240);
          if (v22 >= *(void *)(a1 + 248))
          {
LABEL_19:
            unint64_t v25 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 232), (uint64_t)&__dst);
            int v26 = SHIBYTE(v30);
            *(void *)(a1 + 240) = v25;
            if (v26 < 0) {
              operator delete((void *)__dst);
            }
            goto LABEL_9;
          }
LABEL_8:
          long long v17 = __dst;
          *(void *)(v22 + 16) = v30;
          *(_OWORD *)unint64_t v22 = v17;
          *(void *)(a1 + 240) = v22 + 24;
LABEL_9:
          ++v15;
          uint64_t v14 = (const char *)v31;
          v16 += 112;
        }
        while (v15 < *((unsigned int *)v31 + 1));
      }
      if (a4 && v28)
      {
        (*(void (**)(void *, void))(*v13 + 24))(v13, *(void *)(a1 + 8));
        uint64_t v11 = 12;
        if (((*(uint64_t (**)(void *, void, uint64_t))(*v13 + 16))(v13, *(void *)(a1 + 8), v28) & 1) == 0)
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "root manifest hash data mismatches baseband hash response");
          uint64_t v11 = 33;
        }
      }
      else
      {
        uint64_t v11 = 12;
      }
      (*(void (**)(void *))(*v13 + 8))(v13);
      uint64_t v12 = v31;
    }
    if (v12) {
      free(v12);
    }
  }
  else
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Bad arguments:  packet = %p\n", a2);
    return 2;
  }
  return v11;
}

void sub_21DF7B020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t BBUICE18Programmer::doesMRCDataExist(BBUFeedback **this)
{
  BBUICE16UpdateSource::getMRCFileName((uint64_t)__p);
  if (v12 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  size_t v3 = strlen((const char *)v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v14 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_11;
  }
  HIBYTE(v14) = v3;
  uint64_t v5 = __dst;
  if (v3) {
LABEL_11:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  unint64_t v15 = __dst;
  uint64_t v8 = (const void *)*((void *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(this + 24), (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 5);
  if (v8)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  size_t v9 = 0;
  if (SHIBYTE(v14) < 0) {
LABEL_14:
  }
    operator delete(__dst[0]);
LABEL_15:
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_17;
    }
LABEL_22:
    BBUFeedback::handleComment(this[1], "No MRC image in programmer list");
    return 0;
  }
  if (!v9) {
    goto LABEL_22;
  }
LABEL_17:
  if ((*(unsigned int (**)(void *))(*v9[2] + 32))(v9[2]) - 1 < 0x800) {
    return 1;
  }
  BBUFeedback::handleComment(this[1], "MRC data size %lu invalid, ignoring existing data");
  return 0;
}

void sub_21DF7B248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE18Programmer::mrcFastboot(BBUICE18Programmer *this)
{
  uint64_t v1 = (BBUFeedback **)MEMORY[0x270FA5388](this);
  uint64_t v64 = *MEMORY[0x263EF8340];
  memset(v63, 170, sizeof(v63));
  unint64_t v49 = 0;
  int v48 = 0;
  uint64_t v5 = (*((uint64_t (**)(BBUFeedback **, _DWORD *, uint64_t, unint64_t *))*v1 + 34))(v1, &v63[517], 2048, &v49);
  if (!v5)
  {
    if (v49 < 0x801)
    {
      if (KTLPSIFormatEnhancedCommandMrcData())
      {
        BBUFeedback::handleComment(v1[1], "Sending PSI enhanced command 'Start MRC Training'");
        char v12 = KTLPSISendMrcTrainingCommand();
        if (gBBULogMaskGet(void)::once != -1) {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        }
        uint64_t v13 = *(void *)gBBULogMaskGet(void)::sBBULogMask;
        if ((v12 & 1) == 0)
        {
          if ((v13 & 2) != 0 && gBBULogVerbosity >= 6) {
            _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
          }
          BBUFeedback::handleComment(v1[1], "Failed sending MRC training start in mrcFastboot, bytesSent = %u", v48);
          pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          long long v41 = qword_26AA89AB0;
          if (!qword_26AA89AB0)
          {
            BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
            std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
            std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            long long v41 = qword_26AA89AB0;
          }
          dispatch_object_t object = v41;
          uint64_t v58 = (uint64_t)off_26AA89AB8;
          if (off_26AA89AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string::basic_string[abi:ne180100]<0>(__p, "Failed sending MRC training start in Fastboot");
          goto LABEL_100;
        }
        if ((v13 & 0x200) != 0 && gBBULogVerbosity >= 1) {
          _BBULog(9, 1, "BBUProgrammer", "", "Waiting for PSI command response\n", v9, v10, v11, v43);
        }
        if (KTLPSIReadMrcResponse())
        {
          BBUFeedback::handleComment(v1[1], "psiResp.responseCFIndex Code = %d", LOWORD(v63[1]));
          BBUFeedback::handleComment(v1[1], "psiResp.paraunint64_t m = %d", v63[0]);
          long long v17 = v1[1];
          int v18 = v63[2];
          (*((void (**)(void **__return_ptr, BBUFeedback **, void))*v1 + 38))(__p, v1, v63[2]);
          if (SHIBYTE(v51) >= 0) {
            size_t v19 = __p;
          }
          else {
            size_t v19 = (void **)__p[0];
          }
          BBUFeedback::handleComment(v17, "psiResp.uint64_t result = 0x%X (%s)", v18, (const char *)v19);
          if (SHIBYTE(v51) < 0) {
            operator delete(__p[0]);
          }
          if (LOWORD(v63[1]) == 5)
          {
            if (!v63[2])
            {
              BBUFeedback::handleComment(v1[1], "Saving new training data");
              uint64_t v5 = (*((uint64_t (**)(BBUFeedback **, _DWORD *, void))*v1 + 35))(v1, &v63[3], v63[0]);
              uint64_t v29 = v1[1];
              if (v5) {
                BBUFeedback::handleComment(v29, "failed saving data");
              }
              else {
                BBUFeedback::handleComment(v29, "Saved data");
              }
              return v5;
            }
            if (v63[2] == 1)
            {
              BBUFeedback::handleComment(v1[1], "Data accepted");
              BBUICE16UpdateSource::getMRCFilePath((uint64_t)__p);
              if (bbufs::chownToWireless((uint64_t *)__p, -1, v23, v24, v25, v26, v27, v28)) {
                uint64_t v5 = 0;
              }
              else {
                uint64_t v5 = 35;
              }
              if (SHIBYTE(v51) < 0) {
                operator delete(__p[0]);
              }
              return v5;
            }
            BBUFeedback::handleComment(v1[1], "Error: Data Not accepted, also, BB didn't send new data");
            pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
            uint64_t v30 = qword_26AA89AB0;
            if (!qword_26AA89AB0)
            {
              uint64_t v31 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
              dispatch_object_t object = 0;
              ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v31, "BBUError", QOS_CLASS_UTILITY, &object);
              if (object) {
                dispatch_release(object);
              }
              v31->__on_zero_shared_weaunint64_t k = 0;
              v31[1].~__shared_weak_count = 0;
              v31[1].~__shared_weak_count_0 = 0;
              std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)__p, v31);
              long long v32 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v33 = (std::__shared_weak_count *)off_26AA89AB8;
              *(_OWORD *)&qword_26AA89AB0 = v32;
              if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
              uint64_t v34 = (std::__shared_weak_count *)__p[1];
              if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
              uint64_t v30 = qword_26AA89AB0;
            }
            uint64_t v35 = (std::__shared_weak_count *)off_26AA89AB8;
            uint64_t v46 = v30;
            uint64_t v47 = off_26AA89AB8;
            if (off_26AA89AB8) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
            }
            pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
            uint64_t v44 = operator new(0x38uLL);
            long long v45 = xmmword_21DFAE0D0;
            strcpy((char *)v44, "Error: Data Not accepted, also, BB didn't send new data");
            __p[0] = (void *)MEMORY[0x263EF8330];
            __p[1] = (void *)0x40000000;
            uint64_t v51 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
            unint64_t v52 = &__block_descriptor_tmp_8;
            uint64_t v53 = v30;
            uint64_t v54 = &v44;
            int v55 = 12;
            uint64_t v56 = __p;
            dispatch_object_t object = (dispatch_object_t)MEMORY[0x263EF8330];
            uint64_t v58 = 0x40000000;
            uint64_t v59 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
            unint64_t v60 = &__block_descriptor_tmp_13_0;
            uint64_t v61 = v30;
            uint64_t v62 = &v56;
            uint64_t v36 = *(NSObject **)(v30 + 16);
            if (*(void *)(v30 + 24))
            {
              dispatch_async_and_wait(v36, &object);
              if ((SHIBYTE(v45) & 0x80000000) == 0) {
                goto LABEL_42;
              }
            }
            else
            {
              dispatch_sync(v36, &object);
              if ((SHIBYTE(v45) & 0x80000000) == 0)
              {
LABEL_42:
                if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
                (*((void (**)(BBUFeedback **, _DWORD *, void))*v1 + 35))(v1, &v63[3], 0);
                return 12;
              }
            }
            operator delete(v44);
            goto LABEL_42;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
              goto LABEL_105;
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            {
LABEL_105:
              if (gBBULogVerbosity >= 6) {
                _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v20, v21, v22, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
              }
            }
          }
          BBUFeedback::handleComment(v1[1], "MRC training RspId invalid");
          pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          int v42 = qword_26AA89AB0;
          if (!qword_26AA89AB0)
          {
            BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
            std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
            std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            int v42 = qword_26AA89AB0;
          }
          dispatch_object_t object = v42;
          uint64_t v58 = (uint64_t)off_26AA89AB8;
          if (off_26AA89AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string::basic_string[abi:ne180100]<0>(__p, "MRC training RspId invalid");
          BBUError::addError((uint64_t)v42, (uint64_t)__p, 12);
          if (SHIBYTE(v51) < 0) {
            operator delete(__p[0]);
          }
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
          return 12;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
            goto LABEL_93;
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_93:
            if (gBBULogVerbosity >= 6) {
              _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
            }
          }
        }
        BBUFeedback::handleComment(v1[1], "Failed reading MRC training response");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        long long v41 = qword_26AA89AB0;
        if (!qword_26AA89AB0)
        {
          BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
          std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          long long v41 = qword_26AA89AB0;
        }
        dispatch_object_t object = v41;
        uint64_t v58 = (uint64_t)off_26AA89AB8;
        if (off_26AA89AB8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        std::string::basic_string[abi:ne180100]<0>(__p, "Failed reading MRC training response");
LABEL_100:
        BBUError::addError((uint64_t)v41, (uint64_t)__p, 3);
        if (SHIBYTE(v51) < 0) {
          operator delete(__p[0]);
        }
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
        return 3;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
          goto LABEL_74;
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_74:
          if (gBBULogVerbosity >= 6) {
            _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v6, v7, v8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
          }
        }
      }
      BBUFeedback::handleComment(v1[1], "Failed formatting MRC training command");
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      uint64_t v40 = qword_26AA89AB0;
      if (!qword_26AA89AB0)
      {
        BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
        std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        uint64_t v40 = qword_26AA89AB0;
      }
      dispatch_object_t object = v40;
      uint64_t v58 = (uint64_t)off_26AA89AB8;
      if (off_26AA89AB8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      std::string::basic_string[abi:ne180100]<0>(__p, "Failed formatting MRC training command");
      BBUError::addError((uint64_t)v40, (uint64_t)__p, 19);
      if (SHIBYTE(v51) < 0) {
        operator delete(__p[0]);
      }
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
      return 19;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
        goto LABEL_63;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_63:
        if (gBBULogVerbosity >= 6) {
          _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v2, v3, v4, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
        }
      }
    }
    BBUFeedback::handleComment(v1[1], "MRC data too large");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v39 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
      std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      uint64_t v39 = qword_26AA89AB0;
    }
    dispatch_object_t object = v39;
    uint64_t v58 = (uint64_t)off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string::basic_string[abi:ne180100]<0>(__p, "MRC data too large");
    BBUError::addError((uint64_t)v39, (uint64_t)__p, 104);
    if (SHIBYTE(v51) < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
    return 104;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0) {
      goto LABEL_52;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_52:
      if (gBBULogVerbosity >= 6) {
        _BBULog(1, 6, "BBUProgrammer", "", "check failed: %s, %d, assertion: %s\n", v2, v3, v4, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp");
      }
    }
  }
  BBUFeedback::handleComment(v1[1], "Failed reading MRC data from file");
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  uint64_t v38 = qword_26AA89AB0;
  if (!qword_26AA89AB0)
  {
    BBUError::create_default_global((std::__shared_weak_count_vtbl **)__p);
    std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    uint64_t v38 = qword_26AA89AB0;
  }
  dispatch_object_t object = v38;
  uint64_t v58 = (uint64_t)off_26AA89AB8;
  if (off_26AA89AB8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed reading MRC data from file");
  BBUError::addError((uint64_t)v38, (uint64_t)__p, v5);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
  return v5;
}

void sub_21DF7BFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,dispatch_object_t object)
{
}

uint64_t BBUICE18Programmer::program(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  int v62 = -1431655766;
  uint64_t v16 = (pthread_mutex_t *)(a1 + 120);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 120));
  *(_DWORD *)(a1 + 320) = a11;
  uint64_t v17 = *(unsigned int *)(a1 + 184);
  if (BBUProgrammer::addItemsFromList(a1, (uint64_t)a6))
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Error: loading programmer items!");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v18 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      size_t v19 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      dispatch_object_t object = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v19, "BBUError", QOS_CLASS_UTILITY, &object);
      if (object) {
        dispatch_release(object);
      }
      v19->__on_zero_shared_weaunint64_t k = 0;
      v19[1].~__shared_weak_count = 0;
      v19[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v63, v19);
      long long v20 = *(_OWORD *)v63;
      v63[0] = 0;
      v63[1] = 0;
      uint64_t v21 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      uint64_t v22 = (std::__shared_weak_count *)v63[1];
      if (v63[1] && !atomic_fetch_add((atomic_ullong *volatile)v63[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v18 = qword_26AA89AB0;
    }
    uint64_t v23 = (std::__shared_weak_count *)off_26AA89AB8;
    uint64_t v60 = v18;
    uint64_t v61 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string __p = operator new(0x28uLL);
    long long v59 = xmmword_21DFAAF20;
    strcpy((char *)__p, "Error: loading programmer items!");
    v63[0] = (void *)MEMORY[0x263EF8330];
    v63[1] = (void *)0x40000000;
    uint64_t v64 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    uint64_t v65 = &__block_descriptor_tmp_8;
    uint64_t v66 = v18;
    p_p = &__p;
    int v68 = 66;
    uint64_t v69 = v63;
    dispatch_object_t object = (dispatch_object_t)MEMORY[0x263EF8330];
    uint64_t v71 = 0x40000000;
    unint64_t v72 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v73 = &__block_descriptor_tmp_13_0;
    uint64_t v74 = v18;
    uint64_t v75 = &v69;
    uint64_t v24 = *(NSObject **)(v18 + 16);
    if (*(void *)(v18 + 24))
    {
      dispatch_async_and_wait(v24, &object);
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      dispatch_sync(v24, &object);
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_17:
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        uint64_t v25 = 66;
        goto LABEL_77;
      }
    }
    operator delete(__p);
    goto LABEL_17;
  }
  if (BBUICE16Programmer::addItemsToHashmap((BBUICE16Programmer *)a1))
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Error: Generating Hashmap of items!");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v26 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      uint64_t v27 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      dispatch_object_t object = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v27, "BBUError", QOS_CLASS_UTILITY, &object);
      if (object) {
        dispatch_release(object);
      }
      v27->__on_zero_shared_weaunint64_t k = 0;
      v27[1].~__shared_weak_count = 0;
      v27[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v63, v27);
      long long v28 = *(_OWORD *)v63;
      v63[0] = 0;
      v63[1] = 0;
      uint64_t v29 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v28;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      uint64_t v30 = (std::__shared_weak_count *)v63[1];
      if (v63[1] && !atomic_fetch_add((atomic_ullong *volatile)v63[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      uint64_t v26 = qword_26AA89AB0;
    }
    uint64_t v31 = (std::__shared_weak_count *)off_26AA89AB8;
    uint64_t v60 = v26;
    uint64_t v61 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string __p = operator new(0x28uLL);
    long long v59 = xmmword_21DFA8EB0;
    strcpy((char *)__p, "Error: Generating Hashmap of items!");
    v63[0] = (void *)MEMORY[0x263EF8330];
    v63[1] = (void *)0x40000000;
    uint64_t v64 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    uint64_t v65 = &__block_descriptor_tmp_8;
    uint64_t v66 = v26;
    p_p = &__p;
    int v68 = 1;
    uint64_t v69 = v63;
    dispatch_object_t object = (dispatch_object_t)MEMORY[0x263EF8330];
    uint64_t v71 = 0x40000000;
    unint64_t v72 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v73 = &__block_descriptor_tmp_13_0;
    uint64_t v74 = v26;
    uint64_t v75 = &v69;
    long long v32 = *(NSObject **)(v26 + 16);
    if (*(void *)(v26 + 24))
    {
      dispatch_async_and_wait(v32, &object);
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      dispatch_sync(v32, &object);
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_37:
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        uint64_t v25 = 1;
        goto LABEL_77;
      }
    }
    operator delete(__p);
    goto LABEL_37;
  }
  if (a11 == 2)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Booted for coredump, not programming firmware");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    uint64_t v33 = qword_26AA89AB0;
    if (!qword_26AA89AB0)
    {
      uint64_t v34 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      dispatch_object_t object = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v34, "BBUError", QOS_CLASS_UTILITY, &object);
      if (object) {
        dispatch_release(object);
      }
      v34->__on_zero_shared_weaunint64_t k = 0;
      v34[1].~__shared_weak_count = 0;
      v34[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v63, v34);
      long long v35 = *(_OWORD *)v63;
      v63[0] = 0;
      v63[1] = 0;
      uint64_t v36 = (std::__shared_weak_count *)off_26AA89AB8;
      *(_OWORD *)&qword_26AA89AB0 = v35;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      uint64_t v37 = (std::__shared_weak_count *)v63[1];
      if (v63[1] && !atomic_fetch_add((atomic_ullong *volatile)v63[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      uint64_t v33 = qword_26AA89AB0;
    }
    uint64_t v38 = (std::__shared_weak_count *)off_26AA89AB8;
    uint64_t v60 = v33;
    uint64_t v61 = off_26AA89AB8;
    if (off_26AA89AB8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string __p = operator new(0x30uLL);
    long long v59 = xmmword_21DFAD780;
    strcpy((char *)__p, "Booted for coredump, not programming firmware");
    v63[0] = (void *)MEMORY[0x263EF8330];
    v63[1] = (void *)0x40000000;
    uint64_t v64 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    uint64_t v65 = &__block_descriptor_tmp_8;
    uint64_t v66 = v33;
    p_p = &__p;
    int v68 = 28;
    uint64_t v69 = v63;
    dispatch_object_t object = (dispatch_object_t)MEMORY[0x263EF8330];
    uint64_t v71 = 0x40000000;
    unint64_t v72 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v73 = &__block_descriptor_tmp_13_0;
    uint64_t v74 = v33;
    uint64_t v75 = &v69;
    uint64_t v39 = *(NSObject **)(v33 + 16);
    if (*(void *)(v33 + 24))
    {
      dispatch_async_and_wait(v39, &object);
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_59:
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        goto LABEL_62;
      }
    }
    else
    {
      dispatch_sync(v39, &object);
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        goto LABEL_59;
      }
    }
    operator delete(__p);
    goto LABEL_59;
  }
  if (a4)
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2, v17, a5, 1, a10);
    goto LABEL_77;
  }
  uint64_t v25 = BBUICE16Programmer::readPSIRunningMode(a1, &v62);
  if (!v25)
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296))(a1);
    if (v25)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed training, failing program");
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      uint64_t v40 = qword_26AA89AB0;
      if (!qword_26AA89AB0)
      {
        BBUError::create_default_global((std::__shared_weak_count_vtbl **)v63);
        std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v63);
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v63);
        uint64_t v40 = qword_26AA89AB0;
      }
      dispatch_object_t object = v40;
      uint64_t v71 = (uint64_t)off_26AA89AB8;
      if (off_26AA89AB8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      std::string::basic_string[abi:ne180100]<0>(v63, "Failed training, failing program");
LABEL_74:
      BBUError::addError((uint64_t)v40, (uint64_t)v63, v25);
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
      goto LABEL_77;
    }
    switch(v62)
    {
      case 462:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Running secure mode");
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t))(*(void *)a1 + 176))(a1, a2, v17, 0, 0, a10);
        if (v25)
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed executing secure mode, failing program\n");
          pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          uint64_t v40 = qword_26AA89AB0;
          if (!qword_26AA89AB0)
          {
            BBUError::create_default_global((std::__shared_weak_count_vtbl **)v63);
            std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v63);
            std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v63);
            uint64_t v40 = qword_26AA89AB0;
          }
          dispatch_object_t object = v40;
          uint64_t v71 = (uint64_t)off_26AA89AB8;
          if (off_26AA89AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string::basic_string[abi:ne180100]<0>(v63, "Failed executing secure mode, failing program\n");
          goto LABEL_74;
        }
        int v62 = 56577;
        break;
      case 56577:
        break;
      case 52480:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Coredump detected, not programming firmware");
LABEL_62:
        uint64_t v25 = 28;
        goto LABEL_77;
      default:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "PSI is not running enhanced mode, unsupported firmware\n");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        uint64_t v46 = qword_26AA89AB0;
        if (!qword_26AA89AB0)
        {
          BBUError::create_default_global((std::__shared_weak_count_vtbl **)v63);
          std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v63);
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v63);
          uint64_t v46 = qword_26AA89AB0;
        }
        dispatch_object_t object = v46;
        uint64_t v71 = (uint64_t)off_26AA89AB8;
        if (off_26AA89AB8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        std::string::basic_string[abi:ne180100]<0>(v63, "PSI is not running enhanced mode, unsupported firmware\n");
        BBUError::addError((uint64_t)v46, (uint64_t)v63, 9);
        if (SHIBYTE(v64) < 0) {
          operator delete(v63[0]);
        }
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
        uint64_t v25 = 9;
        goto LABEL_77;
    }
    uint64_t v47 = (void *)(a1 + 352);
    if (!std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::find<std::string>((void *)(a1 + 192), a1 + 352))
    {
      char v50 = *(BBUFeedback **)(a1 + 8);
      uint64_t v51 = "EBL (%s) not found in item list!";
      if ((*(char *)(a1 + 375) & 0x80000000) == 0) {
        goto LABEL_109;
      }
      goto LABEL_108;
    }
    v63[0] = (void *)(a1 + 352);
    int v48 = (const void *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 192, a1 + 352, (uint64_t)&std::piecewise_construct, (long long **)v63)[5];
    if (!v48
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp", 0x216u, (ctu::LogMessageBuffer *)"Assertion failure(eblItem && \"Error: loading EBL item!\")", v54, v55, v56, v57);
    }
    if (*((_DWORD *)v49 + 6))
    {
      char v50 = *(BBUFeedback **)(a1 + 8);
      uint64_t v51 = "EBL (%s) exists, but is of invalid type!";
      if ((*(char *)(a1 + 375) & 0x80000000) == 0)
      {
LABEL_109:
        BBUFeedback::handleComment(v50, v51, v47);
        uint64_t v25 = 15;
        goto LABEL_77;
      }
LABEL_108:
      uint64_t v47 = (void *)*v47;
      goto LABEL_109;
    }
    uint64_t v25 = BBUICE16Programmer::sendEBL(a1, *((void *)v49 + 2));
    if (v25)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending EBL!");
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      uint64_t v40 = qword_26AA89AB0;
      if (!qword_26AA89AB0)
      {
        BBUError::create_default_global((std::__shared_weak_count_vtbl **)v63);
        std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v63);
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v63);
        uint64_t v40 = qword_26AA89AB0;
      }
      dispatch_object_t object = v40;
      uint64_t v71 = (uint64_t)off_26AA89AB8;
      if (off_26AA89AB8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      std::string::basic_string[abi:ne180100]<0>(v63, "Failed sending EBL!");
      goto LABEL_74;
    }
    pthread_mutex_unlock(v16);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
    if (v25)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed image download!");
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      unint64_t v52 = qword_26AA89AB0;
      if (!qword_26AA89AB0)
      {
        BBUError::create_default_global((std::__shared_weak_count_vtbl **)v63);
        std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_26AA89AB0, (long long *)v63);
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v63);
        unint64_t v52 = qword_26AA89AB0;
      }
      dispatch_object_t object = v52;
      uint64_t v71 = (uint64_t)off_26AA89AB8;
      if (off_26AA89AB8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AA89AB8 + 1, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      std::string::basic_string[abi:ne180100]<0>(v63, "Failed image download!");
      BBUError::addError((uint64_t)v52, (uint64_t)v63, v25);
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
    }
    pthread_mutex_lock(v16);
  }
LABEL_77:
  if (a6)
  {
    if (a6[2])
    {
      uint64_t v42 = *a6;
      long long v41 = (uint64_t *)a6[1];
      uint64_t v43 = *v41;
      *(void *)(v43 + 8) = *(void *)(*a6 + 8);
      **(void **)(v42 + 8) = v43;
      a6[2] = 0;
      if (v41 != a6)
      {
        do
        {
          uint64_t v44 = (uint64_t *)v41[1];
          operator delete(v41);
          long long v41 = v44;
        }
        while (v44 != a6);
      }
    }
    operator delete(a6);
  }
  pthread_mutex_unlock(v16);
  return v25;
}

void sub_21DF7CF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_object_t object)
{
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  pthread_mutex_unlock(v25);
  _Unwind_Resume(a1);
}

uint64_t BBUICE18Programmer::finishSecurePSIMode(BBUFeedback **a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, unsigned char *a6)
{
  unsigned int v35 = 0;
  if (a5) {
    BBUFeedback::handleComment(a1[1], "Resuming Secure Mode");
  }
  if (a2)
  {
    unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    if (v11 > a3)
    {
      BBUFeedback::handleComment(a1[1], "root manifest size larger than protocol specification %u, std::string::size_type size = %u bytes", a3, v11);
      return 12;
    }
  }
  else
  {
    unsigned int v11 = a3;
  }
  size_t v13 = v11;
  if (v11)
  {
    uint64_t v14 = operator new(v11);
    bzero(v14, v13);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (char *)operator new(0x30uLL);
  uint64_t v33 = (unsigned __int8 *)(v15 + 48);
  uint64_t v34 = v15 + 48;
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  md = (unsigned __int8 *)v15;
  if (!a2)
  {
    BBUFeedback::handleComment(a1[1], "No root manifest present");
    bzero(v14, v13);
    unsigned int v17 = v13 + 1024;
    uint64_t v29 = a6;
    if (v13 != -1024)
    {
      uint64_t v12 = 3;
      BOOL v16 = 1;
      goto LABEL_18;
    }
LABEL_22:
    uint64_t v18 = 0;
    int v19 = -1022;
    goto LABEL_23;
  }
  LODWORD(__p[0]) = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *, size_t, void **, void))(*(void *)a2 + 16))(a2, v14, v13, __p, 0);
  BOOL v16 = v12 == 0;
  if (v12) {
    BBUFeedback::handleComment(a1[1], "failed copying root manifest to buffer");
  }
  if (LODWORD(__p[0]) != v13)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE18Programmer.cpp", 0x263u, (ctu::LogMessageBuffer *)"Assertion failure(copied == rootManifestSize && \"failed copying root manifest to buffer\")", v25, v26, v27, v28);
  }
  unsigned int v17 = v13 + 1024;
  if (v13 != -1024)
  {
    uint64_t v29 = a6;
LABEL_18:
    uint64_t v18 = operator new(v17);
    bzero(v18, v17);
    if (!v16) {
      goto LABEL_35;
    }
    int v19 = v13 + 2;
LABEL_23:
    *uint64_t v18 = v13;
    memcpy(v18 + 1, v14, v13);
    CC_SHA384(v14, v13, md);
    BBUFeedback::handleComment(a1[1], "packetSize = %u; kBufferSize = %u; rootManifestSize = %u", v19, v17, v13);
    int v20 = KTLRawSendData();
    uint64_t v21 = a1[1];
    if (v20)
    {
      ctu::hex();
      if (v31 >= 0) {
        uint64_t v22 = __p;
      }
      else {
        uint64_t v22 = (void **)__p[0];
      }
      BBUFeedback::handleComment(v21, "Sent Manifest with length %u Hash %s", v13, (const char *)v22);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if (KTLRawReceiveData())
      {
        uint64_t v12 = (*((uint64_t (**)(BBUFeedback **, _WORD *, void, uint64_t, uint64_t))*a1 + 36))(a1, v18, v35, a2, a4);
        if (v12)
        {
          BBUFeedback::handleComment(a1[1], "failed handling hash response");
        }
        else
        {
          *uint64_t v29 = 1;
          LOWORD(__p[0]) = 3777;
          if (KTLRawSendData())
          {
            BBUFeedback::handleComment(a1[1], "finished secure mode");
            uint64_t v12 = 0;
          }
          else
          {
            BBUFeedback::handleComment(a1[1], "failed sending mode end packet");
            uint64_t v12 = 11;
          }
        }
        goto LABEL_35;
      }
      BBUFeedback::handleComment(a1[1], "failed reading hash results");
    }
    else
    {
      BBUFeedback::handleComment(v21, "failed sending root manifest data");
    }
    uint64_t v12 = 3;
LABEL_35:
    operator delete(v18);
    goto LABEL_36;
  }
  if (!v12)
  {
    uint64_t v29 = a6;
    unsigned int v17 = 0;
    goto LABEL_22;
  }
LABEL_36:
  if (md)
  {
    uint64_t v33 = md;
    operator delete(md);
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_21DF7D500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  operator delete(v22);
  if (__p)
  {
    operator delete(__p);
    if (!v21) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_3;
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

uint64_t BBUICE18Programmer::handleMRCTrainingSequence(BBUFeedback **this)
{
  uint64_t result = MEMORY[0x223C1CBE0]();
  if (result)
  {
    int v3 = (*((uint64_t (**)(BBUFeedback **))*this + 32))(this);
    uint64_t v4 = this[1];
    if (v3)
    {
      BBUFeedback::handleComment(v4, "MRC data exists - fastbooting with existing data");
      uint64_t v5 = (uint64_t (*)(BBUICE18Programmer *))*((void *)*this + 31);
      uint64_t v6 = (BBUICE18Programmer *)this;
    }
    else
    {
      BBUFeedback::handleComment(v4, "MRC data doesn't exist or is invalid size - training fresh data");
      uint64_t v5 = (uint64_t (*)(BBUICE18Programmer *))*((void *)*this + 33);
      uint64_t v6 = (BBUICE18Programmer *)this;
    }
    return v5(v6);
  }
  return result;
}

uint64_t BBUICE18Programmer::gatherPersonalizationParameters(BBUICE18Programmer *this, BOOL a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  int v38 = 0;
  uint64_t v37 = 0;
  uint64_t v6 = (BBUFeedback *)*((void *)this + 1);
  if ((a3 & 1) == 0)
  {
    BBUFeedback::handleComment(v6, "Not in restore mode - skipping gathering Personalization parameters...");
    return 0;
  }
  BBUFeedback::handleBeginPhase(v6, "Gathering Personalization parameters...");
  if (!BBUICE16Programmer::readPSIRunningMode((uint64_t)this, &v38))
  {
    int v8 = v38;
    if (v38 != 462)
    {
      uint64_t v9 = (BBUFeedback *)*((void *)this + 1);
      uint64_t v10 = (const char *)PSIModeDescription();
      BBUFeedback::handleComment(v9, "Unexpected running mode 0x%x (%s), cannot gather personalization params\n", v8, v10);
    }
  }
  uint64_t v11 = (*(uint64_t (**)(BBUICE18Programmer *))(*(void *)this + 296))(this);
  if (!v11)
  {
    uint64_t v11 = (*(uint64_t (**)(BBUICE18Programmer *, void **))(*(void *)this + 232))(this, &v37);
    if (!v11)
    {
      uint64_t v12 = (const UInt8 *)v37 + 20;
      size_t v13 = operator new(0x10uLL);
      *size_t v13 = &unk_26CECFE08;
      v13[1] = 0;
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      v13[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v12, 20);
      uint64_t v15 = BBUICEPersonalizationParameters::ICEChipID::createFromChipID((BBUICEPersonalizationParameters::ICEChipID *)*((unsigned __int16 *)v37 + 1));
      BOOL v16 = BBUICEPersonalizationParameters::ICESerialNumber::createFromSerialNumber((const UInt8 *)v37 + 8, (const unsigned __int8 *)0x60);
      unsigned int v17 = (const UInt8 *)v37 + 40;
      uint64_t v18 = operator new(0x10uLL);
      *uint64_t v18 = &unk_26CECFF28;
      v18[1] = 0;
      v18[1] = CFDataCreate(v14, v17, 32);
      int v19 = *((_DWORD *)v37 + 1);
      *((_DWORD *)this + 46) = v19 - 2;
      BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Max root packet size from PSI: %u", v19);
      free(v37);
      uint64_t v20 = *((void *)a5 + 1);
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      *((void *)a5 + 1) = v13;
      uint64_t v21 = *((void *)a5 + 2);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      *((void *)a5 + 2) = v15;
      (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 16))(a5, v16);
      (*(void (**)(BBUPersonalizationParameters *, void *))(*(void *)a5 + 24))(a5, v18);
      if (!v16 || !v15) {
        goto LABEL_23;
      }
      uint64_t v22 = (BBUFeedback *)*((void *)this + 1);
      (*(void (**)(void **__return_ptr, void *))(*v16 + 24))(__p, v16);
      if (v36 >= 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
      {
        if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
          goto LABEL_18;
        }
      }
      else
      {
        dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_7);
        if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1) {
          goto LABEL_18;
        }
      }
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_13);
LABEL_18:
      int v24 = BBUpdaterCommon::inRestoreOS(void)::restoreOS;
      int v25 = BBUpdaterCommon::inRestoreOS(void)::recoveryOS;
      int v26 = (*(uint64_t (**)(void *))(*v15 + 24))(v15);
      if (v24 | v25) {
        uint64_t v27 = (const char *)v23;
      }
      else {
        uint64_t v27 = "<< SNUM >>";
      }
      BBUFeedback::handleComment(v22, "   SNUM: 0x%s / CHIPID: 0x%08x", v27, v26);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
LABEL_23:
      char v28 = (BBUFeedback *)*((void *)this + 1);
      (*(void (**)(void **__return_ptr, void *))(*v13 + 24))(__p, v13);
      if (v36 >= 0) {
        uint64_t v29 = __p;
      }
      else {
        uint64_t v29 = (void **)__p[0];
      }
      BBUFeedback::handleComment(v28, "   NONCE: %s", (const char *)v29);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v30 = (BBUFeedback *)*((void *)this + 1);
      (*(void (**)(void **__return_ptr, void *))(*v18 + 24))(__p, v18);
      if (v36 >= 0) {
        char v31 = __p;
      }
      else {
        char v31 = (void **)__p[0];
      }
      BBUFeedback::handleComment(v30, "   PUBLIC_KEY_HASH: %s", (const char *)v31);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
      long long v32 = (BBUFeedback *)*((void *)this + 1);
      int v33 = (*(uint64_t (**)(void))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3));
      BBUFeedback::handleComment(v32, "   CertID: %u", v33);
      uint64_t v11 = 0;
    }
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), v11);
  return v11;
}

void sub_21DF7DBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_25()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_21DE8A000);
  }
  return result;
}

unint64_t *fopen_mem_func(uint64_t a1, const char *a2, char a3)
{
  uint64_t v5 = (unint64_t *)malloc(0x20uLL);
  uint64_t v6 = v5;
  if (!v5) {
    return v6;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (sscanf(a2, "%lx+%lx", &v9, v5 + 1) != 2) {
    return 0;
  }
  *uint64_t v6 = v9;
  if ((a3 & 8) != 0) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v6[1];
  }
  v6[2] = v7;
  v6[3] = 0;
  return v6;
}

size_t fread_mem_func(int a1, void *a2, void *__dst, size_t a4)
{
  uint64_t v5 = a2[3];
  if (a2[1] - v5 >= a4) {
    size_t v6 = a4;
  }
  else {
    size_t v6 = a2[1] - v5;
  }
  memcpy(__dst, (const void *)(*a2 + v5), v6);
  a2[3] += v6;
  return v6;
}

size_t fwrite_mem_func(int a1, void *a2, void *__src, size_t a4)
{
  uint64_t v5 = a2[3];
  if (a2[1] - v5 >= a4) {
    size_t v6 = a4;
  }
  else {
    size_t v6 = a2[1] - v5;
  }
  memcpy((void *)(*a2 + v5), __src, v6);
  size_t v7 = a2[2];
  size_t v8 = a2[3] + v6;
  a2[3] = v8;
  if (v8 > v7) {
    a2[2] = v8;
  }
  return v6;
}

uint64_t ftell_mem_func(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t fseek_mem_func(uint64_t a1, void *a2, unint64_t a3, int a4)
{
  unint64_t v4 = a3;
  if (a4)
  {
    if (a4 == 2)
    {
      size_t v6 = a2 + 2;
    }
    else
    {
      if (a4 != 1) {
        return -1;
      }
      size_t v6 = a2 + 3;
    }
    unint64_t v4 = *v6 + a3;
  }
  if (v4 > a2[1]) {
    return 1;
  }
  unint64_t v8 = a2[2];
  if (v4 > v8) {
    bzero((void *)(*a2 + v8), v4 - v8);
  }
  uint64_t result = 0;
  a2[3] = v4;
  return result;
}

uint64_t fclose_mem_func(int a1, void *a2)
{
  return 0;
}

uint64_t ferror_mem_func()
{
  return 0;
}

unint64_t *(**fill_memory_filefunc(unint64_t *(**result)(uint64_t a1, const char *a2, char a3)))(uint64_t a1, const char *a2, char a3)
{
  *uint64_t result = fopen_mem_func;
  result[1] = (unint64_t *(*)(uint64_t, const char *, char))fread_mem_func;
  result[2] = (unint64_t *(*)(uint64_t, const char *, char))fwrite_mem_func;
  result[3] = (unint64_t *(*)(uint64_t, const char *, char))ftell_mem_func;
  result[4] = (unint64_t *(*)(uint64_t, const char *, char))fseek_mem_func;
  result[5] = (unint64_t *(*)(uint64_t, const char *, char))fclose_mem_func;
  result[6] = (unint64_t *(*)(uint64_t, const char *, char))ferror_mem_func;
  result[7] = 0;
  return result;
}

void *___Z14gBBULogMaskGetv_block_invoke()
{
  uint64_t result = operator new(8uLL);
  *uint64_t result = sLogInternalMask;
  gBBULogMaskGet(void)::sBBULogMasunint64_t k = (uint64_t)result;
  return result;
}

uint64_t _BBULogv(int a1, uint64_t a2, const char *a3, const char *a4, const char *a5, va_list a6)
{
  if (_MergedGlobals_8 != -1) {
    dispatch_once(&_MergedGlobals_8, &__block_literal_global_16);
  }
  uint64_t v11 = (pthread_mutex_t *)qword_26AA8F828;
  pthread_mutex_lock((pthread_mutex_t *)qword_26AA8F828);
  if (qword_26AA8F838 == -1)
  {
    unint64_t v12 = 0x267D23000uLL;
    if (*(void *)qword_26AA8F830) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&qword_26AA8F838, &__block_literal_global_20);
    unint64_t v12 = 0x267D23000;
    if (*(void *)qword_26AA8F830) {
      goto LABEL_6;
    }
  }
  if (((*(void *)(v12 + 2416) >> a1) & 1) == 0) {
    return pthread_mutex_unlock(v11);
  }
LABEL_6:
  vsnprintf(byte_26AA8F850, 0x400uLL, a5, a6);
  v55.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v55.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v55, 0);
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v13;
  v53[8] = v13;
  v53[5] = v13;
  v53[6] = v13;
  v53[3] = v13;
  v53[4] = v13;
  v53[1] = v13;
  void v53[2] = v13;
  v53[0] = v13;
  long long v51 = v13;
  long long v52 = v13;
  long long v49 = v13;
  *(_OWORD *)std::string __p = v13;
  long long v47 = v13;
  long long v48 = v13;
  long long v46 = v13;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
  CFAllocatorRef v14 = (void *)std::ostream::operator<<();
  LOBYTE(__dst[0].__locale_) = 46;
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__dst, 1);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 3;
  unsigned int v17 = (char *)v15 + *(void *)(v16 - 24);
  if (*((_DWORD *)v17 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v16 - 24)));
    uint64_t v18 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    int v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
    std::locale::~locale(__dst);
    *((_DWORD *)v17 + 36) = v19;
  }
  *((_DWORD *)v17 + 36) = 48;
  uint64_t v20 = (void *)std::ostream::operator<<();
  *(void *)((char *)v20 + *(void *)(*v20 - 24) + 24) = 1;
  LOBYTE(__dst[0].__locale_) = 91;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)__dst, 1);
  uint64_t v21 = (void *)std::ostream::operator<<();
  LOBYTE(__dst[0].__locale_) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)__dst, 1);
  uint64_t v22 = (void *)std::ostream::operator<<();
  LOBYTE(__dst[0].__locale_) = 93;
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)__dst, 1);
  size_t v24 = strlen(a3);
  int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a3, v24);
  int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"::", 2);
  size_t v27 = strlen(a4);
  char v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)a4, v27);
  uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
  size_t v30 = strlen(byte_26AA8F850);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)byte_26AA8F850, v30);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v52) & 0x10) != 0)
  {
    uint64_t v33 = v52;
    if ((unint64_t)v52 < *((void *)&v49 + 1))
    {
      *(void *)&long long v52 = *((void *)&v49 + 1);
      uint64_t v33 = *((void *)&v49 + 1);
    }
    uint64_t v34 = (const void *)v49;
    size_t v31 = v33 - v49;
    if ((unint64_t)(v33 - v49) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_37;
    }
  }
  else
  {
    if ((BYTE8(v52) & 8) == 0)
    {
      size_t v31 = 0;
      HIBYTE(__dst[2].__locale_) = 0;
      long long v32 = (std::locale::__imp *)__dst;
      goto LABEL_21;
    }
    uint64_t v34 = (const void *)*((void *)&v47 + 1);
    size_t v31 = *((void *)&v48 + 1) - *((void *)&v47 + 1);
    if (*((void *)&v48 + 1) - *((void *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_37:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v31 >= 0x17)
  {
    uint64_t v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v35 = v31 | 7;
    }
    uint64_t v36 = v35 + 1;
    long long v32 = (std::locale::__imp *)operator new(v35 + 1);
    __dst[1].__locale_ = (std::locale::__imp *)v31;
    __dst[2].__locale_ = (std::locale::__imp *)(v36 | 0x8000000000000000);
    __dst[0].__locale_ = v32;
    goto LABEL_20;
  }
  HIBYTE(__dst[2].__locale_) = v31;
  long long v32 = (std::locale::__imp *)__dst;
  if (v31) {
LABEL_20:
  }
    memmove(v32, v34, v31);
LABEL_21:
  *((unsigned char *)v32 + v31) = 0;
  if (qword_26AA8F838 == -1)
  {
    if (*(void *)qword_26AA8F830)
    {
LABEL_23:
      if (SHIBYTE(__dst[2].__locale_) >= 0) {
        locale = __dst;
      }
      else {
        locale = __dst[0].__locale_;
      }
      if (SHIBYTE(__dst[2].__locale_) >= 0) {
        locale_high = (std::locale::__imp *)HIBYTE(__dst[2].__locale_);
      }
      else {
        locale_high = __dst[1].__locale_;
      }
      (*(void (**)(void, void *, std::locale::__imp *))(**(void **)qword_26AA8F830 + 24))(*(void *)qword_26AA8F830, locale, locale_high);
    }
  }
  else
  {
    dispatch_once(&qword_26AA8F838, &__block_literal_global_20);
    if (*(void *)qword_26AA8F830) {
      goto LABEL_23;
    }
  }
  if ((*(void *)(v12 + 2416) >> a1))
  {
    if (gBBULogSinkFunc)
    {
      if (SHIBYTE(__dst[2].__locale_) >= 0) {
        uint64_t v39 = __dst;
      }
      else {
        uint64_t v39 = __dst[0].__locale_;
      }
      gBBULogSinkFunc(gBBULogSinkContext, (1 << a1), v39);
    }
    else
    {
      Streaunint64_t m = (FILE *)_BBULogGetStream(a1);
      if (SHIBYTE(__dst[2].__locale_) >= 0) {
        long long v41 = (const char *)__dst;
      }
      else {
        long long v41 = (const char *)__dst[0].__locale_;
      }
      fputs(v41, Stream);
      fflush(Stream);
      uint64_t v42 = (FILE **)MEMORY[0x263EF8358];
      if (Stream != (FILE *)*MEMORY[0x263EF8358])
      {
        if (SHIBYTE(__dst[2].__locale_) >= 0) {
          uint64_t v43 = (const char *)__dst;
        }
        else {
          uint64_t v43 = (const char *)__dst[0].__locale_;
        }
        fputs(v43, (FILE *)*MEMORY[0x263EF8358]);
        fflush(*v42);
      }
    }
  }
  if (SHIBYTE(__dst[2].__locale_) < 0) {
    operator delete(__dst[0].__locale_);
  }
  *(void *)&long long v46 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v46 + *(void *)(v46 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v46 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C1DDF0](v53);
  return pthread_mutex_unlock(v11);
}

void sub_21DF7E518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  pthread_mutex_unlock(v16);
  _Unwind_Resume(a1);
}

uint64_t _BBULogGetStream(int a1)
{
  switch(a1)
  {
    case 0:
      if (qword_26AA8F848 != -1) {
        dispatch_once(&qword_26AA8F848, &__block_literal_global_23);
      }
      uint64_t v1 = (uint64_t *)(qword_26AA8F840 + 24);
      break;
    case 1:
      if (qword_26AA8F848 != -1) {
        dispatch_once(&qword_26AA8F848, &__block_literal_global_23);
      }
      uint64_t v1 = (uint64_t *)(qword_26AA8F840 + 32);
      break;
    case 5:
    case 6:
    case 7:
      if (qword_26AA8F848 != -1) {
        dispatch_once(&qword_26AA8F848, &__block_literal_global_23);
      }
      uint64_t v1 = (uint64_t *)(qword_26AA8F840 + 40);
      break;
    case 9:
    case 13:
      if (qword_26AA8F848 != -1) {
        dispatch_once(&qword_26AA8F848, &__block_literal_global_23);
      }
      uint64_t v1 = (uint64_t *)(qword_26AA8F840 + 48);
      break;
    case 14:
      if (qword_26AA8F848 != -1) {
        dispatch_once(&qword_26AA8F848, &__block_literal_global_23);
      }
      uint64_t v1 = (uint64_t *)(qword_26AA8F840 + 56);
      break;
    case 17:
      if (qword_26AA8F848 != -1) {
        dispatch_once(&qword_26AA8F848, &__block_literal_global_23);
      }
      uint64_t v1 = (uint64_t *)(qword_26AA8F840 + 16);
      break;
    default:
      if (qword_26AA8F848 != -1) {
        dispatch_once(&qword_26AA8F848, &__block_literal_global_23);
      }
      uint64_t v1 = (uint64_t *)(qword_26AA8F840 + 8);
      break;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2;
  }
  else {
    return *MEMORY[0x263EF8358];
  }
}

uint64_t _BBULog(int a1, uint64_t a2, const char *a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return _BBULogv(a1, a2, a3, a4, a5, &a9);
}

uint64_t _BBULogPlain(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (_MergedGlobals_8 != -1) {
    dispatch_once(&_MergedGlobals_8, &__block_literal_global_16);
  }
  uint64_t v11 = (pthread_mutex_t *)qword_26AA8F828;
  pthread_mutex_lock((pthread_mutex_t *)qword_26AA8F828);
  if (qword_26AA8F838 == -1)
  {
    unint64_t v12 = 0x267D23000uLL;
    if (*(void *)qword_26AA8F830) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&qword_26AA8F838, &__block_literal_global_20);
    unint64_t v12 = 0x267D23000;
    if (*(void *)qword_26AA8F830) {
      goto LABEL_6;
    }
  }
  if (((*(void *)(v12 + 2416) >> a1) & 1) == 0) {
    return pthread_mutex_unlock(v11);
  }
LABEL_6:
  uint64_t v39 = &a9;
  vsnprintf(byte_26AA8F850, 0x400uLL, a2, &a9);
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[7] = v13;
  v37[8] = v13;
  v37[5] = v13;
  v37[6] = v13;
  void v37[3] = v13;
  v37[4] = v13;
  v37[1] = v13;
  _OWORD v37[2] = v13;
  v37[0] = v13;
  long long v35 = v13;
  long long v36 = v13;
  long long v33 = v13;
  *(_OWORD *)std::string __p = v13;
  long long v31 = v13;
  long long v32 = v13;
  long long v30 = v13;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
  if (a1 == 1) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"!!! ", 4);
  }
  size_t v14 = strlen(byte_26AA8F850);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)byte_26AA8F850, v14);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v36) & 0x10) != 0)
  {
    uint64_t v17 = v36;
    if ((unint64_t)v36 < *((void *)&v33 + 1))
    {
      *(void *)&long long v36 = *((void *)&v33 + 1);
      uint64_t v17 = *((void *)&v33 + 1);
    }
    uint64_t v18 = (const void *)v33;
    size_t v15 = v17 - v33;
    if ((unint64_t)(v17 - v33) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_37;
    }
  }
  else
  {
    if ((BYTE8(v36) & 8) == 0)
    {
      size_t v15 = 0;
      HIBYTE(__dst[2]) = 0;
      uint64_t v16 = __dst;
      goto LABEL_21;
    }
    uint64_t v18 = (const void *)*((void *)&v31 + 1);
    size_t v15 = *((void *)&v32 + 1) - *((void *)&v31 + 1);
    if (*((void *)&v32 + 1) - *((void *)&v31 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_37:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v16 = (void **)operator new(v19 + 1);
    __dst[1] = (void *)v15;
    void __dst[2] = (void *)(v20 | 0x8000000000000000);
    __dst[0] = v16;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v15;
  uint64_t v16 = __dst;
  if (v15) {
LABEL_20:
  }
    memmove(v16, v18, v15);
LABEL_21:
  *((unsigned char *)v16 + v15) = 0;
  if (qword_26AA8F838 == -1)
  {
    if (*(void *)qword_26AA8F830)
    {
LABEL_23:
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v21 = __dst;
      }
      else {
        uint64_t v21 = (void **)__dst[0];
      }
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v22 = (void *)HIBYTE(__dst[2]);
      }
      else {
        uint64_t v22 = __dst[1];
      }
      (*(void (**)(void, void **, void *))(**(void **)qword_26AA8F830 + 24))(*(void *)qword_26AA8F830, v21, v22);
    }
  }
  else
  {
    dispatch_once(&qword_26AA8F838, &__block_literal_global_20);
    if (*(void *)qword_26AA8F830) {
      goto LABEL_23;
    }
  }
  if ((*(void *)(v12 + 2416) >> a1))
  {
    if (gBBULogSinkFunc)
    {
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v23 = __dst;
      }
      else {
        uint64_t v23 = (void **)__dst[0];
      }
      gBBULogSinkFunc(gBBULogSinkContext, (1 << a1), v23);
    }
    else
    {
      Streaunint64_t m = (FILE *)_BBULogGetStream(a1);
      if (SHIBYTE(__dst[2]) >= 0) {
        int v25 = (const char *)__dst;
      }
      else {
        int v25 = (const char *)__dst[0];
      }
      fputs(v25, Stream);
      fflush(Stream);
      int v26 = (FILE **)MEMORY[0x263EF8358];
      if (Stream != (FILE *)*MEMORY[0x263EF8358])
      {
        if (SHIBYTE(__dst[2]) >= 0) {
          size_t v27 = (const char *)__dst;
        }
        else {
          size_t v27 = (const char *)__dst[0];
        }
        fputs(v27, (FILE *)*MEMORY[0x263EF8358]);
        fflush(*v26);
      }
    }
  }
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v30 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v30 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C1DDF0](v37);
  return pthread_mutex_unlock(v11);
}

void sub_21DF7EC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  pthread_mutex_unlock(v16);
  _Unwind_Resume(a1);
}

uint64_t _BBULogBinary(uint64_t result, uint64_t a2, const char *a3, const char *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char v39 = a7;
  int v42 = result;
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (a6)
  {
    unint64_t v8 = a6;
    unint64_t v9 = a3;
    uint64_t v10 = a2;
    unint64_t v11 = 0;
    BOOL v34 = (int)a2 >= 0 && a6 > 0x3E80;
    uint64_t v12 = 112;
    if (v34)
    {
      unint64_t v13 = a6 - 224;
    }
    else
    {
      uint64_t v12 = 0xFFFFFFFFLL;
      unint64_t v13 = 0;
    }
    uint64_t v38 = v12;
    unint64_t v35 = v12 + v13;
    unsigned int v37 = a2;
    while (1)
    {
      if (v11 == v38)
      {
        _BBULog(v42, v10, v9, a4, " -- middle of buffer snipped -- \n", a6, a7, a8, v33);
        unint64_t v11 = v35;
      }
      unint64_t v16 = v8;
      unint64_t v17 = v8 - v11;
      *(_OWORD *)&v45[16] = 0u;
      long long v46 = 0u;
      if (v17 >= 0x10) {
        uint64_t v18 = 16;
      }
      else {
        uint64_t v18 = v17;
      }
      long long v44 = 0uLL;
      *(_OWORD *)long long v45 = 0uLL;
      long long v43 = 0uLL;
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)(a5 + v11);
        do
        {
          unsigned int v21 = *v20++;
          uint64_t v22 = (char *)&v43 + v19;
          char *v22 = str_26_3[(unint64_t)v21 >> 4];
          v22[1] = str_26_3[v21 & 0xF];
          v19 += 3;
          v22[2] = 32;
        }
        while (3 * v18 != v19);
        memset((char *)&v43 + v19, 32, 3 * (17 - v18));
        if (v17 < 0x10)
        {
          uint64_t v23 = 0;
          uint64_t v15 = (54 - 3 * v18) + v19 - 3;
          unint64_t v9 = a3;
          uint64_t v10 = v37;
          unint64_t v8 = v16;
LABEL_19:
          uint64_t v29 = v18 - v23;
          long long v30 = (unsigned __int8 *)(a5 + v23 + v11);
          do
          {
            int v32 = *v30++;
            char v31 = v32;
            if ((v32 - 32) >= 0x5F) {
              char v31 = 46;
            }
            *((unsigned char *)&v43 + v15++) = v31;
            --v29;
          }
          while (v29);
          goto LABEL_7;
        }
        uint64_t v23 = v18 & 0x10;
        uint64_t v24 = (54 - 3 * v18);
        uint64_t v15 = v23 + v19 + v24 - 3;
        int8x16_t v25 = *(int8x16_t *)(a5 + v11);
        v26.i64[0] = 0xE0E0E0E0E0E0E0E0;
        v26.i64[1] = 0xE0E0E0E0E0E0E0E0;
        v27.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
        v27.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
        int8x16_t v28 = (int8x16_t)vcgtq_u8(v27, (uint8x16_t)vaddq_s8(v25, v26));
        v27.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
        v27.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
        *(int8x16_t *)((char *)&v42 + v24 + v19 + 1) = vbslq_s8(v28, v25, (int8x16_t)v27);
        unint64_t v9 = a3;
        uint64_t v10 = v37;
        unint64_t v8 = v16;
        if (v18 != v23) {
          goto LABEL_19;
        }
      }
      else
      {
        *(_DWORD *)&v45[15] = 538976288;
        *(void *)&long long v14 = 0x2020202020202020;
        *((void *)&v14 + 1) = 0x2020202020202020;
        long long v44 = v14;
        *(_OWORD *)long long v45 = v14;
        LODWORD(v15) = 51;
        long long v43 = v14;
        unint64_t v8 = v16;
      }
LABEL_7:
      strcpy((char *)&v43 + (int)v15, "\r\n");
      uint64_t result = _BBULog(v42, v10, v9, a4, "%c%04zx  %s", a6, a7, a8, v39);
      v11 += 16;
      if (v11 >= v8)
      {
        if (v34) {
          return _BBULog(v42, v10, v9, a4, "(snipped)\n", a6, a7, a8, v33);
        }
        return result;
      }
    }
  }
  return result;
}

void BBUFDRLogHandler(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = (char)a2;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(15, 0, "BBULog", "", "Dump: %s\n", a6, a7, a8, v8);
  }
}

void BBURemoteFSPrintDelegate(const char *a1, const char *a2, va_list a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  long long v26 = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v21 = v5;
  long long v22 = v5;
  long long v19 = v5;
  long long v20 = v5;
  long long v17 = v5;
  long long v18 = v5;
  long long v15 = v5;
  long long v16 = v5;
  *(_OWORD *)std::string __str = v5;
  long long v14 = v5;
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v12.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v12, 0);
  vsnprintf(__str, 0x100uLL, a2, a3);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x80) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x80) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULogPlain(23, "%u.%03u: %s: %s", v6, v7, v8, v9, v10, v11, v12.tv_sec);
  }
}

uint64_t BBULogRegisterDelegates(void)
{
  uint64_t v0 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  sDelegate = (uint64_t (*)(const char *, const char *, char *))BBURemoteFSPrintDelegate;
  int v1 = capabilities::radio::vendor(v0);
  if (v1 == 2)
  {
    return KTLDebugRegisterDelegate();
  }
  else
  {
    if (v1 != 1)
    {
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 9, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogging.cpp", 0x2D3u, (ctu::LogMessageBuffer *)"Invalid vendor for log delegate registration", v3, v4, v5, v7);
    }
    return MEMORY[0x270F91AC8](&BBULogRegisterETLDelegate(void)::delegate);
  }
}

void sub_21DF7F220(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL8gLockGetv_block_invoke()
{
  uint64_t v0 = (pthread_mutex_t *)operator new(0x40uLL);
  uint64_t result = pthread_mutex_init(v0, 0);
  qword_26AA8F828 = (uint64_t)v0;
  return result;
}

void sub_21DF7F26C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *___ZL13sLogBufferGetv_block_invoke()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = 0;
  result[1] = 0;
  qword_26AA8F830 = (uint64_t)result;
  return result;
}

FILE *___ZL14gLogStreamsGetv_block_invoke()
{
  uint64_t v0 = operator new(0x48uLL);
  int v1 = (void *)MEMORY[0x263EF8358];
  uint64_t v2 = *MEMORY[0x263EF8358];
  void *v0 = *MEMORY[0x263EF8358];
  v0[1] = v2;
  v0[2] = v2;
  v0[6] = v2;
  v0[7] = v2;
  v0[5] = v2;
  uint64_t result = fopen("/dev/null", "w");
  v0[8] = result;
  uint64_t v4 = *MEMORY[0x263EF8348];
  v0[3] = *v1;
  v0[4] = v4;
  qword_26AA8F840 = (uint64_t)v0;
  return result;
}

void sub_21DF7F320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BBULogTelephonyUtilPrintDelegate(const char *a1, const char *a2, va_list a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  long long v26 = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v21 = v5;
  long long v22 = v5;
  long long v19 = v5;
  long long v20 = v5;
  long long v17 = v5;
  long long v18 = v5;
  long long v15 = v5;
  long long v16 = v5;
  *(_OWORD *)std::string __str = v5;
  long long v14 = v5;
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v12.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v12, 0);
  vsnprintf(__str, 0x100uLL, a2, a3);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x40) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x40) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULogPlain(6, "%u.%03u: %s: %s", v6, v7, v8, v9, v10, v11, v12.tv_sec);
  }
}

void BBULogTelephonyUtilPrintBinaryDelegate(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = "misc";
  if (a2 == 1) {
    uint64_t v4 = "recv";
  }
  if (a2) {
    long long v5 = v4;
  }
  else {
    long long v5 = "send";
  }
  BBULogPrintBinaryDelegate(6, (uint64_t)v5, a3, a4);
}

void BBULogPrintBinaryDelegate(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (a4 < 0x801)
  {
    unint64_t v6 = a4;
  }
  else
  {
    HIBYTE(v17) = 9;
    LOBYTE(v16) = 41;
    std::string __p = *(void **)"(snipped)";
    unint64_t v6 = 2048;
  }
  v14.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v14.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v14, 0);
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  uint64_t v13 = 1 << a1;
  if ((*(void *)gBBULogMaskGet(void)::sBBULogMask & (1 << a1)) == 0
    || gBBULogVerbosity < 0
    || (_BBULogPlain(a1, "%u.%03u: %s: %u%s\n", v7, v8, v9, v10, v11, v12, v14.tv_sec), gBBULogMaskGet(void)::once == -1))
  {
    if ((*(void *)gBBULogMaskGet(void)::sBBULogMask & v13) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(void *)gBBULogMaskGet(void)::sBBULogMask & v13) == 0) {
      goto LABEL_12;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULogBinary(a1, 0, "BBULog", "", a3, v6, 32, v12);
  }
LABEL_12:
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
}

void sub_21DF7F64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BBULogETLPrintDelegate(const char *a1, const char *a2, va_list a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  long long v26 = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v21 = v5;
  long long v22 = v5;
  long long v19 = v5;
  long long v20 = v5;
  long long v17 = v5;
  long long v18 = v5;
  long long v15 = v5;
  long long v16 = v5;
  *(_OWORD *)std::string __str = v5;
  long long v14 = v5;
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v12.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v12, 0);
  vsnprintf(__str, 0x100uLL, a2, a3);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x80) == 0) {
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)gBBULogMaskGet(void)::sBBULogMask & 0x80) == 0) {
      return;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULogPlain(7, "%u.%03u: %s: %s", v6, v7, v8, v9, v10, v11, v12.tv_sec);
  }
}

void BBULogETLPrintBinaryDelegate(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = "misc";
  if (a2 == 1) {
    uint64_t v4 = "recv";
  }
  if (a2) {
    long long v5 = v4;
  }
  else {
    long long v5 = "send";
  }
  BBULogPrintBinaryDelegate(7, (uint64_t)v5, a3, a4);
}

void BBULogKTLPrintBinaryDelegate(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = "misc";
  if (a2 == 1) {
    uint64_t v4 = "recv";
  }
  if (a2) {
    long long v5 = v4;
  }
  else {
    long long v5 = "send";
  }
  BBULogPrintBinaryDelegate(8, (uint64_t)v5, a3, a4);
}

uint64_t *ReverseProxyGetSettings@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  v43[0] = 0;
  v43[1] = v43;
  void v43[2] = 0x3002000000;
  uint64_t v43[3] = __Block_byref_object_copy__2;
  v43[4] = __Block_byref_object_dispose__2;
  uint64_t v4 = (char *)operator new(0x90uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 3) = 850045863;
  *((void *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((void *)v4 + 10) = 0;
  *((void *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(void *)uint64_t v4 = &unk_26CECEFA8;
  v44[0] = (uint64_t)v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  int v5 = *((_DWORD *)v4 + 34);
  if ((v5 & 2) != 0) {
    std::__throw_future_error[abi:ne180100](1u);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  *((_DWORD *)v4 + 34) = v5 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v41 = *(std::string *)a1;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v41;
  }
  v44[1] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v46 = v45;
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v47, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v47 = v46;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v48 = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
  if (ctu::cf::convert_copy())
  {
    CFURLRef v7 = CFURLCreateWithString(v6, v48, 0);
    CFRelease(v48);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    CFURLRef v7 = 0;
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_35;
    }
  }
  operator delete(v47.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    CFTypeRef cf = v7;
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }
LABEL_35:
  operator delete(v46.__r_.__value_.__l.__data_);
  CFTypeRef cf = v7;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_37:
  operator delete(v41.__r_.__value_.__l.__data_);
LABEL_19:
  uint64_t v11 = (const void *)RPRegisterForAvailability();
  if (v11)
  {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a1 + 8);
    }
    if (!v12
      || (cf
        ? (uint64_t v13 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get)
        : (uint64_t v13 = 0),
          !v13))
    {
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Condition <<%s>> failed %s %s/%d\n", v8, v9, v10, (char)"!url.empty() && urlRef");
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "NULL requestURL?\n", v21, v22, v23, v38);
      goto LABEL_43;
    }
    RPRegistrationResume();
    v47.__r_.__value_.__r.__words[0] = std::chrono::steady_clock::now().__d_.__rep_ + 5000000000;
    int v14 = std::__assoc_sub_state::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>((uint64_t)v4, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)&v47);
    RPRegistrationInvalidate();
    if (v14)
    {
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Condition <<%s>> failed %s %s/%d\n", v15, v16, v17, (char)"fs == std::future_status::ready");
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "PRP timed out %d\n", v18, v19, v20, v14);
      goto LABEL_43;
    }
    std::__assoc_state<BOOL>::move((std::__assoc_sub_state *)v4);
    char v32 = v28;
    if (atomic_fetch_add((atomic_ullong *volatile)v4 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (v28) {
        goto LABEL_57;
      }
    }
    else
    {
      (*(void (**)(char *))(*(void *)v4 + 16))(v4);
      if (v32)
      {
LABEL_57:
        uint64_t v33 = RPCopyProxyDictionary();
        BOOL v34 = (const void *)*a2;
        *a2 = v33;
        if (v34) {
          CFRelease(v34);
        }
LABEL_65:
        uint64_t v4 = 0;
LABEL_43:
        CFRelease(v11);
        goto LABEL_49;
      }
    }
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Condition <<%s>> failed %s %s/%d\n", v29, v30, v31, (char)"future.get()");
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Failed to get PRP\n", v35, v36, v37, v40);
    goto LABEL_65;
  }
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Condition <<%s>> failed %s %s/%d\n", v8, v9, v10, (char)"reg");
  if (gBBULogMaskGet(void)::once != -1) {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Failed to register for proxy\n", v24, v25, v26, v39);
LABEL_49:
  if (cf) {
    CFRelease(cf);
  }
  if (v4 && !atomic_fetch_add((atomic_ullong *volatile)v4 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(char *))(*(void *)v4 + 16))(v4);
  }
  _Block_object_dispose(v43, 8);
  return std::promise<BOOL>::~promise(v44);
}

void sub_21DF8015C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,const void *a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a26);
  _Block_object_dispose(&a27, 8);
  std::promise<BOOL>::~promise(v36);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v35);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t *__Block_byref_object_dispose__2(uint64_t a1)
{
  return std::promise<BOOL>::~promise((uint64_t *)(a1 + 40));
}

void ___Z23ReverseProxyGetSettingsRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != 2)
  {
    char v8 = a2;
    if (a2 == 1)
    {
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Proxy Available!\n", a6, a7, a8, v12);
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      if (!v10) {
        std::__throw_future_error[abi:ne180100](3u);
      }
      std::mutex::lock((std::mutex *)(v10 + 24));
      if ((*(unsigned char *)(v10 + 136) & 1) != 0
        || (v13.__ptr_ = 0, uint64_t v11 = *(void *)(v10 + 16), std::exception_ptr::~exception_ptr(&v13), v11))
      {
        std::__throw_future_error[abi:ne180100](2u);
      }
      *(unsigned char *)(v10 + 140) = 1;
      *(_DWORD *)(v10 + 136) |= 5u;
      std::condition_variable::notify_all((std::condition_variable *)(v10 + 88));
      std::mutex::unlock((std::mutex *)(v10 + 24));
    }
    else
    {
      if (gBBULogMaskGet(void)::once != -1) {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
      _BBULog(25, 0xFFFFFFFFLL, "BBUPurpleReverseProxy", "", "Proxy Aborted? %d\n", a6, a7, a8, v8);
    }
  }
}

void sub_21DF80490(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_state<BOOL>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  void *v3;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete(v3);
}

uint64_t std::__assoc_state<BOOL>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t *std::promise<BOOL>::~promise(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      int v5 = std::future_category();
      MEMORY[0x223C1DA90](&v8, 4, v5);
      exceptioptrdiff_t n = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      CFURLRef v7 = std::logic_error::logic_error(exception, &v8);
      v7->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C2E0] + 16);
      v7[1] = v9;
      __cxa_throw(v7, MEMORY[0x263F8C1A0], MEMORY[0x263F8C0C0]);
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

uint64_t std::__assoc_sub_state::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  unint64_t m = (std::mutex *)(a1 + 24);
  v14.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  *(void *)&v14.__owns_ = 0xAAAAAAAAAAAAAA01;
  std::mutex::lock((std::mutex *)(a1 + 24));
  unsigned int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 8) != 0)
  {
    uint64_t v6 = 2;
    goto LABEL_26;
  }
  if ((v5 & 4) != 0)
  {
    uint64_t v6 = ((v5 >> 2) & 1) == 0;
    goto LABEL_26;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    if (*a2 <= std::chrono::steady_clock::now().__d_.__rep_) {
      goto LABEL_10;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = *a2;
    v11.__d_.__rep_ = v10 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v11.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v12.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = 0;
        goto LABEL_7;
      }
      if (v12.__d_.__rep_ < 1)
      {
        if ((unint64_t)v12.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = 0x8000000000000000;
          goto LABEL_7;
        }
      }
      else if ((unint64_t)v12.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v11.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_22:
          v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_8;
        }
LABEL_7:
        v8.__d_.__rep_ = v7 + v11.__d_.__rep_;
LABEL_8:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 88), &v14, v8);
        std::chrono::steady_clock::now();
        goto LABEL_9;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = 1000 * v12.__d_.__rep_;
      if (1000 * v12.__d_.__rep_ > (v11.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_22;
      }
      goto LABEL_7;
    }
LABEL_9:
    std::chrono::steady_clock::now();
LABEL_10:
    unsigned int v9 = *(_DWORD *)(a1 + 136);
    if ((v9 & 4) != 0) {
      goto LABEL_24;
    }
  }
  unsigned int v9 = *(_DWORD *)(a1 + 136);
LABEL_24:
  uint64_t v6 = ((v9 >> 2) & 1) == 0;
  if (v14.__owns_)
  {
    unint64_t m = v14.__m_;
LABEL_26:
    std::mutex::unlock(m);
  }
  return v6;
}

void std::__assoc_state<BOOL>::move(std::__assoc_sub_state *a1)
{
  __lk.__m_ = &a1->__mut_;
  *(void *)&__lk.__owns_ = 0xAAAAAAAAAAAAAA01;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_21DF80920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

void BBULoader::BBULoader(BBULoader *this, BBUFeedback *a2)
{
  *(void *)this = &unk_26CECEFF0;
  *((void *)this + 1) = a2;
  if (!a2)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBULoader.cpp", 0x10u, (ctu::LogMessageBuffer *)"Assertion failure(fFeedback)", v3, v4, v5, v6);
  }
}

void sub_21DF809D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *BBULoader::create(BBULoader *this, BBUFeedback *a2)
{
  switch(capabilities::updater::getLoaderType(this))
  {
    case 0u:
      uint64_t v4 = (BBUEUR10Loader *)operator new(0xA8uLL);
      BBUEUR10Loader::BBUEUR10Loader(v4, this);
      goto LABEL_3;
    case 1u:
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = (char *)operator new(0x50uLL);
      BBUEURLoader::BBUEURLoader((BBUEURLoader *)v7, this);
      *(void *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = &unk_26CECF408;
      *(_OWORD *)(v7 + 41) = xmmword_21DFAE126;
      *(_OWORD *)(v7 + 57) = unk_21DFAE136;
      return v7;
    case 2u:
      char v6 = (char *)operator new(0x80uLL);
      BBUEURLoader::BBUEURLoader((BBUEURLoader *)v6, this);
      *(_OWORD *)(v6 + 41) = xmmword_21DFAE126;
      *(_OWORD *)(v6 + 57) = unk_21DFAE136;
      *(void *)char v6 = &unk_26CECF050;
      *((_DWORD *)v6 + 19) = 1000;
      *((_OWORD *)v6 + 5) = xmmword_21DFAE146;
      *((_OWORD *)v6 + 6) = unk_21DFAE156;
      *((_OWORD *)v6 + 7) = xmmword_21DFAE166;
      return v6;
    case 3u:
      uint64_t v4 = (BBUEUR10Loader *)operator new(0x88uLL);
      BBUICE16Loader::BBUICE16Loader(v4, this);
LABEL_3:
      uint64_t result = (char *)v4;
      break;
    case 4u:
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBULoader.cpp", 0x29u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v9, v10, v11, v12);
    default:
      uint64_t result = (char *)v2;
      break;
  }
  return result;
}

void sub_21DF80B8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21DF80BA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF80BB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF80BC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21DF80BDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *BBULoader::addProgressBarTimes(uint64_t **this, BBUFeedback *a2)
{
  uint64_t result = (uint64_t *)capabilities::updater::getLoaderProgressBarTimesType((capabilities::updater *)this);
  switch(result)
  {
    case 0:
      uint64_t v5 = this + 2;
      uint64_t v4 = this[2];
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            char v6 = v4;
            int v7 = *((_DWORD *)v4 + 8);
            if (v7 < 2) {
              break;
            }
            uint64_t v4 = (uint64_t *)*v6;
            uint64_t v5 = (uint64_t **)v6;
            if (!*v6) {
              goto LABEL_19;
            }
          }
          if (v7 == 1) {
            goto LABEL_23;
          }
          uint64_t v4 = (uint64_t *)v6[1];
          if (!v4)
          {
LABEL_18:
            uint64_t v5 = (uint64_t **)(v6 + 1);
            goto LABEL_19;
          }
        }
      }
      goto LABEL_13;
    case 1:
      uint64_t v5 = this + 2;
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = this[2];
      if (v8)
      {
        while (1)
        {
          while (1)
          {
            char v6 = v8;
            int v9 = *((_DWORD *)v8 + 8);
            if (v9 < 2) {
              break;
            }
            std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = (uint64_t *)*v6;
            uint64_t v5 = (uint64_t **)v6;
            if (!*v6) {
              goto LABEL_19;
            }
          }
          if (v9 == 1) {
            break;
          }
          std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = (uint64_t *)v6[1];
          if (!v8) {
            goto LABEL_18;
          }
        }
LABEL_23:
        v6[5] = 0x408F400000000000;
        return result;
      }
LABEL_13:
      char v6 = (uint64_t *)v5;
LABEL_19:
      uint64_t v10 = (uint64_t *)operator new(0x30uLL);
      uint64_t v11 = v10;
      *((_DWORD *)v10 + 8) = 1;
      v10[5] = 0;
      uint64_t *v10 = 0;
      v10[1] = 0;
      v10[2] = (uint64_t)v6;
      *uint64_t v5 = v10;
      char v12 = (uint64_t *)*this[1];
      if (v12)
      {
        this[1] = v12;
        char v6 = v10;
        uint64_t v11 = *v5;
      }
      else
      {
        char v6 = v10;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[2], v11);
      this[3] = (uint64_t *)((char *)this[3] + 1);
      goto LABEL_23;
    case 2:
      exceptioptrdiff_t n = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBULoader.cpp", 0x3Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v14, v15, v16, v17);
  }
  return result;
}

void sub_21DF80D84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *BBUEUR20Loader::getDebugName(BBUEUR20Loader *this)
{
  return "BBUEUR20Loader";
}

uint64_t BBUEUR20Loader::getPKHashLength(BBUEUR20Loader *this)
{
  return 48;
}

uint64_t BBUEUR20Loader::getEURDefaultHashData(BBUEUR20Loader *this)
{
  return (uint64_t)this + 80;
}

uint64_t eUICC::Done(const __CFDictionary **a1)
{
  CFDictionaryRef v1 = *a1;
  CFDictionaryRef v8 = v1;
  if (v1) {
    CFRetain(v1);
  }
  eUICC::Options::Options((uint64_t)v9, &v8);
  int v2 = v9[8];
  if (v11 < 0)
  {
    operator delete(__p);
    if (!v1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v1) {
LABEL_7:
  }
    CFRelease(v1);
LABEL_8:
  if (v2) {
    return 1;
  }
  pthread_mutex_lock(&ctu::Singleton<eUICC::detail::StateMachine,eUICC::detail::StateMachine,ctu::PthreadMutexGuardPolicy<eUICC::detail::StateMachine>>::sInstance);
  if (qword_267D23A08)
  {
LABEL_12:
    uint64_t v5 = (std::__shared_weak_count_vtbl *)qword_267D23A08;
    char v6 = (std::__shared_weak_count *)off_267D23A10;
    if (!off_267D23A10) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(4uLL);
  LODWORD(v5->~__shared_weak_count) = 0;
  char v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CECF0F0;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v5;
  int v7 = (std::__shared_weak_count *)off_267D23A10;
  qword_267D23A08 = (uint64_t)v5;
  off_267D23A10 = v6;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    goto LABEL_12;
  }
LABEL_17:
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_18:
  pthread_mutex_unlock(&ctu::Singleton<eUICC::detail::StateMachine,eUICC::detail::StateMachine,ctu::PthreadMutexGuardPolicy<eUICC::detail::StateMachine>>::sInstance);
  BOOL v3 = LODWORD(v5->~__shared_weak_count) > 7;
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v3;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return v3;
}

void sub_21DF80F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  pthread_mutex_unlock(&ctu::Singleton<eUICC::detail::StateMachine,eUICC::detail::StateMachine,ctu::PthreadMutexGuardPolicy<eUICC::detail::StateMachine>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t eUICC::UpdateOutput(void *a1, const __CFDictionary **a2, CFMutableDictionaryRef *a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v5;
  long long v46 = v5;
  long long v44 = v5;
  CFDictionaryRef v6 = *a2;
  CFDictionaryRef v43 = v6;
  if (v6) {
    CFRetain(v6);
  }
  int v7 = (capabilities::radio *)eUICC::Options::Options((uint64_t)&v44, &v43);
  if (v6) {
    CFRelease(v6);
  }
  int v8 = v44;
  int v9 = (capabilities::radio *)capabilities::radio::maverick(v7);
  if (v9)
  {
    uint64_t v10 = (char *)operator new(0x138uLL);
    *(_WORD *)(v10 + 289) = 0;
    *(void *)uint64_t v10 = &unk_26CED0128;
    *((void *)v10 + 37) = a1;
    *((_DWORD *)v10 + 73) = v8;
    v10[304] = 15;
  }
  else if (capabilities::radio::ice(v9))
  {
    uint64_t v10 = (char *)operator new(0x140uLL);
    eUICC::eUICCVinylICEValve::eUICCVinylICEValve((eUICC::eUICCVinylICEValve *)v10, a1, v8, 0);
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v53[10] = v11;
  long long v52 = v11;
  *(_OWORD *)uint64_t v53 = v11;
  _OWORD v51[9] = v11;
  v51[10] = v11;
  v51[7] = v11;
  v51[8] = v11;
  v51[5] = v11;
  v51[6] = v11;
  v51[3] = v11;
  v51[4] = v11;
  v51[1] = v11;
  _OWORD v51[2] = v11;
  long long v50 = v11;
  v51[0] = v11;
  long long v48 = v11;
  long long v49 = v11;
  long long v47 = v11;
  (*(void (**)(long long *__return_ptr, char *))(*(void *)v10 + 8))(&v47, v10);
  int v18 = eUICC::HowToProceed((unsigned __int8 *)&v47, (uint64_t)&v44, v12, v13, v14, v15, v16, v17);
  if (!v18)
  {
    uint64_t v19 = 18;
    goto LABEL_44;
  }
  if (v18 == 3)
  {
    uint64_t v19 = 0;
    goto LABEL_44;
  }
  CFDataRef v20 = CFDataCreate(0, (const UInt8 *)&v47 + 7, 16);
  CFDataRef v42 = v20;
  CFDictionarySetValue(*a3, @"EUICCCSN", v20);
  if (BYTE7(v48))
  {
LABEL_42:
    uint64_t v19 = 0;
    if (!v20) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  CFDataRef v21 = CFDataCreate(0, (const UInt8 *)&v50 + 8, 8);
  CFDataRef v41 = v21;
  CFDictionarySetValue(*a3, @"EUICCMainNonce", v21);
  CFDataRef v22 = CFDataCreate(0, (const UInt8 *)v51, 8);
  CFDataRef v40 = v22;
  CFDictionarySetValue(*a3, @"EUICCGoldNonce", v22);
  __int16 valuePtr = 1;
  CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
  _OWORD v38[2] = v23;
  CFDictionarySetValue(*a3, @"EUICCTicketVersion", v23);
  CFIndex v24 = capabilities::updater::EUICCCertIDSizeBytes((capabilities::updater *)v53[19]);
  CFDataRef v25 = CFDataCreate(0, (const UInt8 *)&v52 + 3, v24);
  v38[1] = v25;
  CFDictionarySetValue(*a3, @"EUICCCertIdentifier", v25);
  v38[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v26 = v53[19];
  if (v53[19] < 5uLL)
  {
    if (BBUpdaterCommon::getEUICCChipID(void)::sOnce != -1) {
      dispatch_once(&BBUpdaterCommon::getEUICCChipID(void)::sOnce, &__block_literal_global_25);
    }
    uint64_t v26 = BBUpdaterCommon::getEUICCChipID(void)::euiccChipID;
  }
  v38[0] = v26;
  CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, v38);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(unsigned char *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0) {
      goto LABEL_23;
    }
  }
  if ((gBBULogVerbosity & 0x80000000) == 0) {
    _BBULog(25, 0, "eUICC", "", "eUICC ChipID: 0x%llx\n", v27, v28, v29, v38[0]);
  }
LABEL_23:
  uint64_t v31 = v38[0];
  if (v38[0])
  {
    CFDictionarySetValue(*a3, @"EUICCChipID", v30);
    CFDataRef v32 = CFDataCreate(0, (const UInt8 *)&v52, 3);
    CFDictionarySetValue(*a3, @"EUICCFirmwareLoaderVersion", v32);
    if (v32) {
      CFRelease(v32);
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(25, 0xFFFFFFFFLL, "eUICC", "", "Condition <<%s>> failed %s %s/%d\n", v27, v28, v29, (char)"chipID");
    if (gBBULogMaskGet(void)::once != -1) {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    }
    _BBULog(22, 0xFFFFFFFFLL, "eUICC", "", "EUICC but MG has no ChipID?", v33, v34, v35, v37);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v31) {
    goto LABEL_42;
  }
  uint64_t v19 = 18;
  if (v20) {
LABEL_43:
  }
    CFRelease(v20);
LABEL_44:
  (*(void (**)(char *))(*(void *)v10 + 96))(v10);
  if (SBYTE7(v46) < 0) {
    operator delete(__p[0]);
  }
  return v19;
}