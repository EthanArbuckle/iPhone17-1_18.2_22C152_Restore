uint64_t aks_ref_key_create_with_blob(int a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  void *v12;

  v4 = 3758097090;
  if (a2)
  {
    if (a3)
    {
      if (der_get_sizeof((uint64_t)a2) == a3)
      {
        v4 = 3758604298;
        v9 = calloc(0x50uLL, 1uLL);
        v12 = v9;
        if (v9)
        {
          v10 = (uint64_t)v9;
          memset_s(v9, 0x50uLL, 0, 0x50uLL);
          *(_DWORD *)(v10 + 40) = a1;
          if (_set_blob(v10, a2, a3))
          {
            aks_ref_key_free((uint64_t *)&v12);
          }
          else
          {
            v4 = 0;
            *a4 = v10;
          }
        }
      }
    }
  }
  return v4;
}

uint64_t _set_blob(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (!der_dict_find_value((uint64_t)der_key_ref_key, &v8, &v9)) {
    return 3758097090;
  }
  if (*(void *)a1)
  {
    memset_s(*(void **)a1, *(void *)(a1 + 8), 0, *(void *)(a1 + 8));
    free(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  v6 = calloc(a3, 1uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = a3;
  if (!v6) {
    return 3758604298;
  }
  memcpy(v6, a2, a3);
  *(void *)(a1 + 16) = *(void *)a1 + *(void *)(a1 + 8);
  if (der_dict_find_value((uint64_t)der_key_ref_key, &v8, &v9)) {
    *(void *)(a1 + 32) = v8;
  }
  if ((der_dict_find_value((uint64_t)der_key_external_data, &v8, &v9) & 1) != 0
    || (uint64_t result = der_dict_find_value((uint64_t)der_key_auth_data, &v8, &v9), result))
  {
    uint64_t result = 0;
    *(void *)(a1 + 24) = v8;
  }
  return result;
}

uint64_t der_dict_find_value(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    der_dict_iterate();
    if (a2)
    {
      if (a3)
      {
        *a2 = 0;
        *a3 = 0;
      }
    }
  }
  return 0;
}

uint64_t der_dict_iterate()
{
  uint64_t result = ccder_blob_decode_range();
  if (result)
  {
    if (ccder_blob_decode_sequence_tl())
    {
      uint64_t result = ccder_blob_decode_tl();
      if (result) {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL _dict_find_value_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = der_equal(*(const void **)a5, *(void *)a5 + *(unsigned __int8 *)(*(void *)a5 + 1) + 2, a1);
  if (v8)
  {
    *(unsigned char *)(a5 + 24) = 1;
    *(void *)(a5 + 8) = a3;
    *(void *)(a5 + 16) = a3 + a4;
  }
  return !v8;
}

BOOL der_equal(const void *a1, uint64_t a2, const void *a3)
{
  size_t v5 = der_get_sizeof((uint64_t)a1);
  return v5 == der_get_sizeof((uint64_t)a3) && memcmp(a1, a3, v5) == 0;
}

uint64_t der_get_sizeof(uint64_t a1)
{
  if (ccder_blob_decode_tag() && ccder_blob_decode_len()) {
    return a1 - a1;
  }
  else {
    return 0;
  }
}

uint64_t _merge_dict_cb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  BOOL v8 = (unsigned __int8 *)der_key_validate(a1);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!encode_list_remove_key(a5, v8) && !encode_list_add_der(a5, v9, a3, a3 + a4)) {
      return 1;
    }
  }
  fprintf((FILE *)*MEMORY[0x263EF8358], "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n", "aks", "", "", "", "_merge_dict_cb", ":", 647, "", 0, "", "");
  return 0;
}

uint64_t encode_list_add_der(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    if (der_get_sizeof(a3) <= (unint64_t)(a4 - a3))
    {
      size_t v6 = ccder_sizeof();
      v7 = (char *)calloc(v6, 1uLL);
      if (!v7) {
        return 4294967279;
      }
      BOOL v8 = v7;
      v16 = &v7[v6];
      if (ccder_blob_encode_body())
      {
        int v9 = ccder_blob_encode_body();
        v10 = v16;
        if (!v9) {
          v10 = 0;
        }
        v17 = v10;
        int v11 = ccder_blob_encode_tl();
        v12 = v17;
        if (!v11) {
          v12 = 0;
        }
        if (v12 && v12 == v8)
        {
          v14 = calloc(0x18uLL, 1uLL);
          if (v14)
          {
            v15 = v14;
            uint64_t result = 0;
            v15[1] = v8;
            v15[2] = v6;
            void *v15 = *a1;
            *a1 = v15;
            return result;
          }
        }
      }
      memset_s(v8, v6, 0, v6);
      free(v8);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t der_key_validate(uint64_t a1)
{
  if ((ccder_blob_decode_tl() & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x263EF8358], "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0;
  }
  return a1;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  v12[3] = *MEMORY[0x263EF8340];
  memset(v12, 170, 24);
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!result)
  {
    if (v12[0] == 0x2000000000000010) {
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v32 = 0;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }
  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = DERDecodeSeqNext(&v32, v31);
      if (result) {
        break;
      }
      if (a2 <= v13) {
        return 2;
      }
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3) {
          goto LABEL_58;
        }
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24 * v13 + 8)) {
          break;
        }
        uint64_t result = 2;
        if (v18)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1)) {
            continue;
          }
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4) {
          goto LABEL_59;
        }
        *(_OWORD *)v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        unint64_t v12 = v33;
        goto LABEL_47;
      }
    }
    if (result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        v25 = (__int16 *)(a3 + 24 * v13 + 16);
        unint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0;
        while (1)
        {
          __int16 v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[0] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3;
  }
  v4 = *(unsigned char **)result;
  if (*(void *)result == -1) {
    goto LABEL_68;
  }
  size_t v5 = &v4[v3];
  size_t v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    unint64_t v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      unint64_t v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0;
            }
LABEL_34:
            uint64_t result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3;
      }
      unint64_t v15 = 0;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (unsigned char *)-1)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          uint64_t result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          unint64_t v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28) {
            goto LABEL_69;
          }
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3;
  }
  unint64_t v8 = 0;
  uint64_t result = 3;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 == (unsigned __int8 *)-1) {
      goto LABEL_68;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    unint64_t v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERDecodeSeqInit(uint64_t a1, void *a2, void *a3)
{
  v8[3] = *MEMORY[0x263EF8340];
  memset(v8, 170, 24);
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v8, 0);
  if (!result)
  {
    unint64_t v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        unint64_t v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          uint64_t result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t DEREncodeSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  v45[1] = *MEMORY[0x263EF8340];
  unint64_t v8 = ~a6;
  if (~a6 < a7) {
    goto LABEL_73;
  }
  unint64_t v11 = *a8;
  unint64_t v44 = a7;
  v45[0] = 0;
  if (v11 < a7) {
    goto LABEL_74;
  }
  uint64_t result = DEREncodeTag(a1, a6, &v44);
  if (result) {
    return result;
  }
  if (v44 > v8) {
    goto LABEL_73;
  }
  unint64_t v17 = a7 - v44;
  if (a7 < v44) {
    goto LABEL_75;
  }
  unint64_t v18 = a6 + a7;
  unint64_t v19 = a6 + v44;
  if (a6 + v44 < v18)
  {
    uint64_t result = DERContentLengthOfEncodedSequence(a2, a3, a4, a5, v45);
    if (result) {
      return result;
    }
    unint64_t v44 = v17;
    if (v19 > a6 + v11 || v19 < a6 || v17 > a6 + v11 - v19) {
      goto LABEL_74;
    }
    unint64_t v42 = a6 + v11;
    unint64_t v20 = v45[0];
    uint64_t result = DEREncodeLengthSized(v45[0], v19, v17, (uint64_t *)&v44);
    if (result) {
      return result;
    }
    unint64_t v21 = v42;
    if (__CFADD__(v19, v44))
    {
LABEL_73:
      __break(0x5513u);
      goto LABEL_74;
    }
    unint64_t v22 = v17 - v44;
    if (v17 >= v44)
    {
      unint64_t v23 = (unsigned char *)(v19 + v44);
      if (!__CFADD__(v19 + v44, v20))
      {
        if ((unint64_t)&v23[v20] > v18) {
          return 7;
        }
        if (a4)
        {
          unint64_t v24 = 0;
          unint64_t v25 = a2 + a3;
          uint64_t v41 = 24 * a4;
          while (1)
          {
            if (v24 > ~a5) {
              goto LABEL_73;
            }
            unint64_t v26 = *(void *)(a5 + v24);
            if (v26 > ~a2) {
              goto LABEL_73;
            }
            unint64_t v27 = (const void **)(a2 + v26);
            __int16 v28 = *(_WORD *)(a5 + v24 + 16);
            if ((v28 & 0x200) != 0) {
              break;
            }
            if ((v28 & 1) == 0) {
              goto LABEL_29;
            }
            if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25) {
              goto LABEL_74;
            }
            if (v27[1])
            {
LABEL_29:
              unint64_t v44 = v22;
              if ((unint64_t)v23 > v21 || (unint64_t)v23 < a6 || v22 > v21 - (unint64_t)v23) {
                goto LABEL_74;
              }
              uint64_t result = DEREncodeTag(*(void *)(a5 + v24 + 8), (unint64_t)v23, &v44);
              if (result) {
                return result;
              }
              if (__CFADD__(v23, v44)) {
                goto LABEL_73;
              }
              unint64_t v30 = v22 - v44;
              if (v22 < v44) {
                goto LABEL_75;
              }
              if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25) {
                goto LABEL_74;
              }
              unint64_t v31 = (unint64_t)v27[1];
              v45[0] = v31;
              char v32 = 1;
              if ((v28 & 0x100) != 0 && v31 && *(char *)*v27 < 0)
              {
                char v32 = 0;
                v45[0] = ++v31;
              }
              unint64_t v33 = (unint64_t)&v23[v44];
              unint64_t v44 = v30;
              if (v33 > v42 || v33 < a6 || v30 > v42 - v33) {
                goto LABEL_74;
              }
              uint64_t result = DEREncodeLengthSized(v31, v33, v30, (uint64_t *)&v44);
              if (result) {
                return result;
              }
              unint64_t v34 = v44;
              if (__CFADD__(v33, v44)) {
                goto LABEL_73;
              }
              unint64_t v35 = v30 - v44;
              if (v30 < v44) {
                goto LABEL_75;
              }
              unint64_t v23 = (unsigned char *)(v33 + v44);
              if ((v32 & 1) == 0)
              {
                if (v23 == (unsigned char *)-1) {
                  goto LABEL_73;
                }
                if ((unint64_t)v23 >= v42 || (unint64_t)v23 < a6) {
                  goto LABEL_74;
                }
                *unint64_t v23 = 0;
                --v35;
                if (v30 == v34) {
                  goto LABEL_75;
                }
                ++v23;
              }
              if ((unint64_t)v23 > v42) {
                goto LABEL_74;
              }
              if ((unint64_t)v23 < a6) {
                goto LABEL_74;
              }
              size_t v36 = (size_t)v27[1];
              if (v36 > v42 - (unint64_t)v23) {
                goto LABEL_74;
              }
              uint64_t result = (uint64_t)memmove(v23, *v27, v36);
              unint64_t v21 = v42;
              unint64_t v37 = (unint64_t)v27[1];
              if (__CFADD__(v23, v37)) {
                goto LABEL_73;
              }
              unint64_t v22 = v35 - v37;
              if (v35 < v37) {
                goto LABEL_75;
              }
              goto LABEL_69;
            }
LABEL_70:
            v24 += 24;
            if (v41 == v24) {
              goto LABEL_71;
            }
          }
          if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25) {
            goto LABEL_74;
          }
          if ((unint64_t)v23 > v21) {
            goto LABEL_74;
          }
          if ((unint64_t)v23 < a6) {
            goto LABEL_74;
          }
          size_t v39 = (size_t)v27[1];
          if (v39 > v21 - (unint64_t)v23) {
            goto LABEL_74;
          }
          uint64_t result = (uint64_t)memmove(v23, *v27, v39);
          unint64_t v21 = v42;
          unint64_t v37 = (unint64_t)v27[1];
          if (__CFADD__(v23, v37)) {
            goto LABEL_73;
          }
          BOOL v40 = v22 >= v37;
          v22 -= v37;
          if (!v40) {
            goto LABEL_75;
          }
LABEL_69:
          v23 += v37;
          goto LABEL_70;
        }
LABEL_71:
        if ((unint64_t)&v23[-a6] <= *a8)
        {
          uint64_t result = 0;
          *a8 = (unint64_t)&v23[-a6];
          return result;
        }
LABEL_74:
        __break(0x5519u);
      }
      goto LABEL_73;
    }
LABEL_75:
    __break(0x5515u);
    return result;
  }
  return 7;
}

uint64_t DEREncodeTag(uint64_t result, unint64_t a2, unint64_t *a3)
{
  unint64_t v3 = result & 0x1FFFFFFFFFFFFFFFLL;
  if ((result & 0x1FFFFFFFFFFFFFFFuLL) < 0x1F)
  {
    if (*a3)
    {
      *(unsigned char *)a2 = HIBYTE(result) & 0xE0 | result;
      unint64_t v8 = 1;
      goto LABEL_17;
    }
    return 7;
  }
  unint64_t v4 = 0;
  unint64_t v5 = result & 0x1FFFFFFFFFFFFFFFLL;
  do
  {
    ++v4;
    BOOL v6 = v5 > 0x7F;
    v5 >>= 7;
  }
  while (v6);
  unint64_t v7 = *a3;
  if (v4 >= *a3) {
    return 7;
  }
  if (v4 >= ~a2 || (*(unsigned char *)a2 = HIBYTE(result) | 0x1F, a2 + v4 == -2))
  {
LABEL_20:
    __break(0x5513u);
    goto LABEL_21;
  }
  if (a2 + v4 >= a2)
  {
    unint64_t v8 = v4 + 1;
    *(unsigned char *)(a2 + v4) = result & 0x7F;
    if (v3 >= 0x80)
    {
      unsigned int v9 = (unsigned char *)(a2 + v4 - 1);
      BOOL v10 = (unsigned char *)(a2 + v7);
      while (v9 != (unsigned char *)-2)
      {
        if (v9 >= v10 || (unint64_t)v9 < a2) {
          goto LABEL_21;
        }
        unint64_t v11 = v3 >> 14;
        v3 >>= 7;
        *v9-- = v3 | 0x80;
        if (!v11) {
          goto LABEL_17;
        }
      }
      goto LABEL_20;
    }
LABEL_17:
    if (v8 <= *a3)
    {
      uint64_t result = 0;
      *a3 = v8;
      return result;
    }
  }
LABEL_21:
  __break(0x5519u);
  return result;
}

unint64_t DEREncodeLengthSized(unint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (result >= 0x80)
  {
    uint64_t v5 = 0;
    unint64_t v6 = result;
    do
    {
      --v5;
      BOOL v7 = v6 > 0xFF;
      v6 >>= 8;
    }
    while (v7);
    unint64_t v8 = -v5;
    uint64_t v9 = 7;
    if (-v5 < a3 && v8 <= 0x7E)
    {
      if (*a4)
      {
        uint64_t v4 = 1 - v5;
        *(unsigned char *)a2 = -(char)v5 | 0x80;
        if (v8 < ~a2)
        {
          BOOL v10 = (unsigned char *)(a2 - v5);
          if (a2 - v5 != -2)
          {
            unint64_t v11 = (unsigned char *)(a2 + *a4);
            while (v10 != (unsigned char *)-1)
            {
              if (v10 >= v11 || (unint64_t)v10 < a2) {
                goto LABEL_23;
              }
              *v10-- = result;
              BOOL v7 = result > 0xFF;
              result >>= 8;
              if (!v7)
              {
                if (v8 >= *a4) {
                  goto LABEL_23;
                }
                goto LABEL_19;
              }
            }
          }
        }
        __break(0x5513u);
      }
      goto LABEL_23;
    }
    return v9;
  }
  if (!a3) {
    return 7;
  }
  if (*a4)
  {
    *(unsigned char *)a2 = result;
    if (*a4)
    {
      uint64_t v4 = 1;
LABEL_19:
      uint64_t v9 = 0;
      *a4 = v4;
      return v9;
    }
  }
LABEL_23:
  __break(0x5519u);
  return result;
}

void __get_aks_client_connection_block_invoke()
{
  if (!get_aks_client_connection_connection) {
    get_aks_client_connection_connection = _copy_aks_client_connection("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
  }
}

uint64_t _copy_aks_client_connection(char *path, const char *a2)
{
  kern_return_t v7;
  CFDictionaryRef v8;
  io_service_t MatchingService;
  io_object_t v10;
  uint64_t result;
  kern_return_t v12;
  io_connect_t connect;

  connect = 0;
  mach_port_t v3 = *MEMORY[0x263F0EC90];
  io_service_t v4 = IORegistryEntryFromPath(*MEMORY[0x263F0EC90], path);
  uint64_t v5 = (task_port_t *)MEMORY[0x263EF8960];
  if (!v4 || (io_object_t v6 = v4, v7 = IOServiceOpen(v4, *MEMORY[0x263EF8960], 0, &connect), IOObjectRelease(v6), v7))
  {
    unint64_t v8 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(v3, v8);
    if (MatchingService)
    {
      BOOL v10 = MatchingService;
      IOServiceOpen(MatchingService, *v5, 0, &connect);
      IOObjectRelease(v10);
    }
  }
  uint64_t result = connect;
  if (connect)
  {
    unint64_t v12 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint64_t result = connect;
    if (v12)
    {
      IOServiceClose(connect);
      return 0;
    }
  }
  return result;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  v4[1] = *MEMORY[0x263EF8340];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = DERParseInteger64(a1, v4);
  if (!result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7;
    }
    else
    {
      uint64_t result = 0;
      *a2 = v4[0];
    }
  }
  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (!v2) {
    return 3;
  }
  mach_port_t v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0) {
    return 3;
  }
  if (**a1)
  {
    if (v2 > 8) {
      return 7;
    }
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0) {
      return 3;
    }
    if (v2 > 9) {
      return 7;
    }
  }
LABEL_10:
  unint64_t v5 = 0;
  do
  {
    unsigned int v6 = *v3++;
    unint64_t v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t DERLengthOfEncodedSequence(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) < a2) {
    __break(0x5519u);
  }
  if (DERLengthOfEncodedSequenceFromObject(a1, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, v5)) {
    return 0;
  }
  else {
    return v5[0];
  }
}

unint64_t DERLengthOfEncodedSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t *a6)
{
  v17[1] = *MEMORY[0x263EF8340];
  v17[0] = 0;
  unint64_t result = DERContentLengthOfEncodedSequence(a2, a3, a4, a5, v17);
  if (!result)
  {
    unint64_t v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v10 = 1;
    if ((a1 & 0x1FFFFFFFFFFFFFFFuLL) >= 0x1F)
    {
      do
      {
        ++v10;
        BOOL v11 = v9 > 0x7F;
        v9 >>= 7;
      }
      while (v11);
    }
    uint64_t v12 = 1;
    if (v17[0] >= 0x80uLL)
    {
      unint64_t v13 = v17[0];
      do
      {
        ++v12;
        BOOL v11 = v13 > 0xFF;
        v13 >>= 8;
      }
      while (v11);
    }
    BOOL v14 = __CFADD__(v10, v12);
    uint64_t v15 = v10 + v12;
    if (v14 || (BOOL v14 = __CFADD__(v15, v17[0]), v16 = v15 + v17[0], v14))
    {
      __break(0x5500u);
    }
    else
    {
      unint64_t result = 0;
      *a6 = v16;
    }
  }
  return result;
}

unint64_t DERContentLengthOfEncodedSequence(unint64_t result, unint64_t a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  if (!a3)
  {
LABEL_38:
    unint64_t result = 0;
LABEL_40:
    *a5 = v5;
    return result;
  }
  unsigned int v6 = 0;
  unint64_t v7 = result + a2;
  while (24 * (unint64_t)v6 <= ~a4)
  {
    unint64_t v8 = *(void *)(a4 + 24 * v6);
    BOOL v9 = v8 > 0xFFFFFFFFFFFFFFEFLL || v8 + 16 > a2;
    if (v9)
    {
      uint64_t v5 = 0;
      unint64_t result = 7;
      goto LABEL_40;
    }
    if (v8 > ~result) {
      break;
    }
    uint64_t v10 = (unsigned __int8 **)(result + v8);
    __int16 v11 = *(_WORD *)(a4 + 24 * v6 + 16);
    if ((v11 & 0x200) == 0)
    {
      if (v11)
      {
        if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
          goto LABEL_43;
        }
        if (!v10[1]) {
          goto LABEL_37;
        }
      }
      unint64_t v13 = *(void *)(a4 + 24 * v6 + 8) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v14 = 1;
      if (v13 >= 0x1F)
      {
        do
        {
          ++v14;
          BOOL v9 = v13 > 0x7F;
          v13 >>= 7;
        }
        while (v9);
      }
      BOOL v15 = __CFADD__(v5, v14);
      uint64_t v16 = v5 + v14;
      if (v15) {
        goto LABEL_42;
      }
      if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
        goto LABEL_43;
      }
      unint64_t v17 = (unint64_t)v10[1];
      if ((*(_WORD *)(a4 + 24 * v6 + 16) & 0x100) != 0)
      {
        if (v17)
        {
          v17 += (unint64_t)**v10 >> 7;
          goto LABEL_24;
        }
LABEL_25:
        uint64_t v18 = 1;
      }
      else
      {
LABEL_24:
        if (v17 < 0x80) {
          goto LABEL_25;
        }
        uint64_t v18 = 1;
        unint64_t v21 = v17;
        do
        {
          ++v18;
          BOOL v9 = v21 > 0xFF;
          v21 >>= 8;
        }
        while (v9);
      }
      BOOL v15 = __CFADD__(v16, v18);
      uint64_t v22 = v16 + v18;
      if (v15) {
        goto LABEL_42;
      }
      BOOL v15 = __CFADD__(v22, v17);
      uint64_t v5 = v22 + v17;
      if (v15) {
        goto LABEL_42;
      }
      goto LABEL_37;
    }
    if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
      goto LABEL_43;
    }
    unint64_t v20 = v10[1];
    BOOL v15 = __CFADD__(v5, v20);
    v5 += (uint64_t)v20;
    if (v15) {
      goto LABEL_42;
    }
LABEL_37:
    if (++v6 == a3) {
      goto LABEL_38;
    }
  }
  __break(0x5513u);
LABEL_42:
  __break(0x5500u);
LABEL_43:
  __break(0x5519u);
  return result;
}

uint64_t aks_ref_key_sign(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3758097090;
  unint64_t v8 = der_key_op_sign;
  BOOL v9 = (void **)calloc(8uLL, 1uLL);
  *BOOL v9 = 0;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  __s = 0;
  rsize_t __n = 0;
  if (!_get_merged_params((uint64_t)a1, v9, a2))
  {
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_data);
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_data(v9, (uint64_t)der_key_data, a4)
      && !encode_list_add_der(v9, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v9, &__s, &__n))
    {
      uint64_t v7 = _aks_operation();
    }
  }
  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v7;
}

uint64_t encode_list_remove_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v2 = (void **)a1;
  uint64_t result = (uint64_t)_encode_list_find_key(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    for (i = *v2; i != (void *)result; i = (void *)*i)
      unint64_t v2 = (void **)i;
    *unint64_t v2 = *(void **)result;
    unsigned int v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(void *)(v4 + 16), 0, *(void *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }
    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0;
  }
  return result;
}

void *_encode_list_find_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    do
    {
      uint64_t v5 = (const void *)v2[1];
      if (ccder_blob_decode_sequence_tl() && der_equal(a2, (uint64_t)&a2[a2[1] + 2], v5)) {
        break;
      }
      unint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t encode_list_free(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unint64_t v2 = *a1;
    if (!*a1) {
      break;
    }
    mach_port_t v3 = (void *)*((void *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((void *)v2 + 2), 0, *((void *)v2 + 2));
      free(*((void **)v2 + 1));
    }
    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }
  return 0;
}

uint64_t _aks_operation()
{
  int v0 = MEMORY[0x270FA5388]();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  size_t v6 = v5;
  unint64_t v8 = v7;
  int v9 = v0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v8)
    {
      mach_port_t v11 = aks_client_connection;
      uint64_t v12 = 3758097090;
      if (der_get_sizeof((uint64_t)v8) == v6)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000;
        uint64_t input = v9;
        uint64_t v12 = IOConnectCallMethod(v11, 0x2Bu, &input, 1u, v8, v6, 0, 0, __src, &__count);
        if (!v12 && v4 && v2)
        {
          unint64_t v13 = calloc(__count, 1uLL);
          void *v4 = v13;
          if (v13)
          {
            memcpy(v13, __src, __count);
            uint64_t v12 = 0;
            *unint64_t v2 = __count;
          }
          else
          {
            uint64_t v12 = 3758097085;
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x263EF8358], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_operation", ":", 457, "", 0, "", "");
    uint64_t v12 = 3758097084;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v12;
}

uint64_t encode_list_dict(void *a1, void *a2, size_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = (void *)*a1;
        if (*a1)
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          do
          {
            v10 += v7[2];
            uint64_t v7 = (void *)*v7;
            v9 -= 16;
            --v8;
          }
          while (v7);
          if (v8 >= 0xF000000000000001 && (rsize_t v11 = -v9, (v12 = calloc(-v9, 1uLL)) != 0))
          {
            unint64_t v13 = v12;
            uint64_t v14 = (void *)*a1;
            if (*a1)
            {
              BOOL v15 = v12;
              do
              {
                *v15++ = *(_OWORD *)(v14 + 1);
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))_qsort_compare);
            size_t v16 = ccder_sizeof();
            unint64_t v17 = (char *)calloc(v16, 1uLL);
            uint64_t v18 = v17;
            if (v17)
            {
              unint64_t v25 = v17;
              unint64_t v26 = &v17[v16];
              unint64_t v19 = v8 - 1;
              uint64_t v20 = (uint64_t)v13 - v9 - 8;
              while (!__CFADD__(v19++, 1))
              {
                uint64_t v22 = v20 - 16;
                char v23 = ccder_blob_encode_body();
                uint64_t v20 = v22;
                if ((v23 & 1) == 0) {
                  goto LABEL_16;
                }
              }
              if (!ccder_blob_encode_tl() || v25 != v26)
              {
LABEL_16:
                uint64_t v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }
              uint64_t v3 = 0;
              *a2 = v18;
              *a3 = v16;
              uint64_t v18 = 0;
            }
            else
            {
              uint64_t v3 = 4294967279;
            }
LABEL_20:
            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }
          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t encode_list_add_data(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    ccder_sizeof();
    size_t v5 = ccder_sizeof();
    size_t v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      BOOL v15 = &v6[v5];
      if (!ccder_blob_encode_body() || !ccder_blob_encode_tl()) {
        goto LABEL_19;
      }
      int v8 = ccder_blob_encode_body();
      uint64_t v9 = v15;
      if (!v8) {
        uint64_t v9 = 0;
      }
      size_t v16 = v9;
      int v10 = ccder_blob_encode_tl();
      rsize_t v11 = v16;
      if (!v10) {
        rsize_t v11 = 0;
      }
      BOOL v12 = v11 && v11 == v7;
      if (v12 && (unint64_t v13 = calloc(0x18uLL, 1uLL)) != 0)
      {
        uint64_t v14 = v13;
        uint64_t result = 0;
        v14[1] = v7;
        v14[2] = v5;
        void *v14 = *a1;
        *a1 = v14;
      }
      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t _get_merged_params(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = 3758604298;
  if (a1
    && (!*(void *)(a1 + 48) || !encode_list_merge_dict((uint64_t)a2))
    && (!a3 || !encode_list_merge_dict((uint64_t)a2)))
  {
    encode_list_remove_key(a2, (unsigned __int8 *)der_key_external_data);
    return 0;
  }
  return v3;
}

uint64_t encode_list_merge_dict(uint64_t a1)
{
  if (a1) {
    return der_dict_iterate() - 1;
  }
  else {
    return 4294967285;
  }
}

uint64_t get_aks_client_connection()
{
  if (get_aks_client_dispatch_queue_onceToken != -1) {
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_173);
  }
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_152);
  uint64_t result = get_aks_client_connection_connection;
  if (!get_aks_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return get_aks_client_connection_connection;
  }
  return result;
}

uint64_t encode_list_add_key(void *a1, uint64_t a2, uint64_t a3)
{
  return encode_list_add_der(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t aks_params_free(void ***a1)
{
  uint64_t result = 3758097090;
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      *a1 = 0;
      encode_list_free(v3);
      memset_s(v3, 8uLL, 0, 8uLL);
      free(v3);
      return 0;
    }
  }
  return result;
}

uint64_t aks_ref_key_get_type(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t result = der_dict_find_value((uint64_t)der_key_type, &v2, &v3);
  if (result) {
    return der_get_number();
  }
  return result;
}

uint64_t der_get_number()
{
  return 0;
}

uint64_t AMFDRCopyDeviceKeys(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!a2 || !a3)
  {
    unint64_t v6 = 0x267BB5000;
    uint64_t result = 1;
LABEL_9:
    *(_DWORD *)(v6 + 3472) = result;
    return result;
  }
  if (*MEMORY[0x263F16FE0] != a1)
  {
    unint64_t v6 = 0x267BB5000uLL;
    uint64_t result = 9;
    goto LABEL_9;
  }
  if (AMFDRCopyDeviceKeys_onceToken != -1) {
    dispatch_once(&AMFDRCopyDeviceKeys_onceToken, &__block_literal_global);
  }
  *a2 = AMSupportSafeRetain();
  *a3 = AMSupportSafeRetain();
  return AMFDRCopyDeviceKeys_error;
}

void __AMFDRCopyDeviceKeys_block_invoke()
{
  kern_return_t v9;
  int key_deterministic;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  UInt8 *v15;
  UInt8 *v16;
  int v17;
  CFAllocatorRef v18;
  char v19;
  size_t outputStructCnt[4];
  io_connect_t connect[534];
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  connect[0] = 0;
  CFMutableDictionaryRef v0 = IOServiceMatching("IOAESAccelerator");
  if (!v0) {
    goto LABEL_34;
  }
  CFDictionaryRef v1 = v0;
  CFRetain(v0);
  io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x263F0EC88], v1);
  if (!MatchingService)
  {
    CFRelease(v1);
    goto LABEL_34;
  }
  io_object_t v3 = MatchingService;
  IOServiceOpen(MatchingService, *MEMORY[0x263EF8960], 0, connect);
  CFRelease(v1);
  IOObjectRelease(v3);
  mach_port_t v4 = connect[0];
  if (!connect[0])
  {
LABEL_34:
    AMFDRCopyDeviceKeys_error = 6;
    return;
  }
  size_t v5 = CryptoBufferAllocate();
  if (v5)
  {
    unint64_t v6 = v5;
    *size_t v5 = kAMDDeviceKeySeed;
    v5[1] = unk_217DFD520;
    uint64_t v5[2] = xmmword_217DFD530;
    v5[3] = unk_217DFD540;
    uint64_t v7 = CryptoBufferAllocate();
    if (v7)
    {
      int v8 = v7;
      *(void *)&connect[20] = 0;
      *(void *)&connect[7] = 0;
      *(void *)&connect[5] = 0;
      memset(&connect[11], 0, 32);
      outputStructCnt[0] = 88;
      *(void *)connect = v6;
      *(void *)&connect[2] = v7;
      connect[4] = 64;
      *(void *)&connect[9] = 0x8000000000;
      connect[19] = 2105;
      uint64_t v9 = IOConnectCallStructMethod(v4, 1u, connect, 0x58uLL, connect, outputStructCnt);
      switch(v9)
      {
        case -536870212:
        case -536870211:
        case -536870210:
        case -536870209:
        case -536870208:
        case -536870207:
        case -536870206:
        case -536870205:
        case -536870204:
        case -536870203:
        case -536870202:
        case -536870201:
        case -536870200:
        case -536870199:
        case -536870198:
        case -536870197:
        case -536870196:
        case -536870195:
        case -536870194:
        case -536870193:
        case -536870192:
        case -536870191:
        case -536870190:
        case -536870189:
        case -536870188:
          goto LABEL_17;
        default:
          if (v9)
          {
LABEL_17:
            AMSupportLogInternal();
            unint64_t v17 = 6;
            goto LABEL_18;
          }
          AMSupportLogInternal();
          memset(connect, 170, 2132);
          if (!ccrng()
            || (strcpy((char *)outputStructCnt, "pseudo_ccrng_allocate"),
                key_deterministic = ccrsa_generate_key_deterministic(),
                AMSupportLogInternal(),
                key_deterministic))
          {
            unint64_t v19 = 0;
            unint64_t v17 = 6;
            goto LABEL_28;
          }
          rsize_t v11 = ccrsa_export_priv_size();
          BOOL v12 = malloc_type_malloc(v11, 0x31A5EEB4uLL);
          unint64_t v13 = ccrsa_ctx_public();
          uint64_t v14 = MEMORY[0x21D45B430](v13);
          BOOL v15 = (UInt8 *)malloc_type_malloc(v14, 0x998B1B66uLL);
          size_t v16 = v15;
          if (v12 && v15)
          {
            if (ccrsa_export_priv()) {
              goto LABEL_36;
            }
            ccrsa_ctx_public();
            if (ccrsa_export_pub()) {
              goto LABEL_36;
            }
            if (AMSupportDigestSha1()) {
              AMSupportLogInternal();
            }
            else {
              AMSupportLogDumpMemory();
            }
            if (AMSupportRsaCreatePemFromData())
            {
LABEL_36:
              unint64_t v19 = 0;
              unint64_t v17 = 6;
            }
            else
            {
              uint64_t v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              AMFDRCopyDeviceKeys_privKey = (uint64_t)CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
              if (AMFDRCopyDeviceKeys_privKey
                && (AMSupportLogInternal(), (AMFDRCopyDeviceKeys_pubKey = (uint64_t)CFDataCreate(v18, v16, v14)) != 0))
              {
                AMSupportLogInternal();
                unint64_t v17 = 0;
                unint64_t v19 = 1;
              }
              else
              {
                unint64_t v19 = 0;
                unint64_t v17 = 2;
              }
            }
            goto LABEL_25;
          }
          unint64_t v19 = 0;
          unint64_t v17 = 2;
          if (v12) {
LABEL_25:
          }
            free(v12);
          if (v16) {
            free(v16);
          }
LABEL_28:
          if ((v19 & 1) == 0)
          {
            if (AMFDRCopyDeviceKeys_pubKey)
            {
              CFRelease((CFTypeRef)AMFDRCopyDeviceKeys_pubKey);
              AMFDRCopyDeviceKeys_pubKey = 0;
            }
            if (AMFDRCopyDeviceKeys_privKey)
            {
              CFRelease((CFTypeRef)AMFDRCopyDeviceKeys_privKey);
              AMFDRCopyDeviceKeys_privKey = 0;
            }
          }
LABEL_18:
          AMFDRCopyDeviceKeys_error = v17;
          IOServiceClose(v4);
          free(v8);
          break;
      }
    }
    else
    {
      AMFDRCopyDeviceKeys_error = 2;
      IOServiceClose(v4);
    }
    free(v6);
  }
  else
  {
    AMFDRCopyDeviceKeys_error = 2;
    IOServiceClose(v4);
  }
}

void *CryptoBufferAllocate()
{
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 0x10uLL, 0x40uLL, 0xA612416EuLL))
  {
    CFMutableDictionaryRef v0 = memptr;
    *(_OWORD *)memptr = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    v0[3] = 0u;
  }
  return memptr;
}

void *AMFDRDeviceRefKeyCreate(const __CFAllocator *a1)
{
  return _AMFDRDeviceRefKeyCreateInternal(a1, 0);
}

void *_AMFDRDeviceRefKeyCreateInternal(const __CFAllocator *a1, CFDataRef theData)
{
  unint64_t v27 = 0;
  unint64_t v25 = 0;
  CFIndex length = 0;
  char v23 = 0;
  CFIndex v24 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 1;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex v5 = CFDataGetLength(theData);
    if (aks_ref_key_create_with_blob(0, BytePtr, v5, (uint64_t *)&v25))
    {
      AMSupportLogInternal();
      unint64_t v6 = 0;
      CFDataRef v12 = 0;
      CFBooleanRef v7 = 0;
      goto LABEL_45;
    }
    unint64_t v6 = 0;
    CFBooleanRef v7 = 0;
  }
  else
  {
    CFBooleanRef v8 = (const __CFBoolean *)MGCopyAnswer();
    CFBooleanRef v7 = v8;
    if (!v8 || (CFTypeID v9 = CFGetTypeID(v8), v9 != CFBooleanGetTypeID()))
    {
      AMSupportLogInternal();
      unint64_t v6 = 0;
LABEL_44:
      CFDataRef v12 = 0;
      goto LABEL_45;
    }
    if (CFBooleanGetValue(v7)) {
      unsigned int v10 = 5;
    }
    else {
      unsigned int v10 = 4;
    }
    rsize_t v11 = (void **)aks_params_create(0);
    unint64_t v6 = v11;
    unint64_t v21 = v11;
    if (!v11
      || aks_params_set_number(v11, 9, &v20)
      || aks_params_get_der(v6, &v23, &v22)
      || aks_ref_key_create(-1, 13, v10, (uint64_t)v23, v22, &v25))
    {
LABEL_43:
      AMSupportLogInternal();
      goto LABEL_44;
    }
  }
  if (!v25
    || aks_sik_attest((uint64_t *)v25, (uint64_t)v23, v22, (uint64_t)&v27, (uint64_t)&length)
    || !v27
    || !length)
  {
    goto LABEL_43;
  }
  CFDataRef v12 = CFDataCreate(a1, v27, length);
  if (!v12)
  {
    AMSupportLogInternal();
LABEL_45:
    CFDataRef v14 = 0;
    goto LABEL_46;
  }
  public_key = (const UInt8 *)aks_ref_key_get_public_key(v25, &v24);
  if (!public_key || !v24) {
    goto LABEL_45;
  }
  CFDataRef v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], public_key, v24);
  if (v14)
  {
    pthread_once(&_AMFDRDeviceRefKeyClassInitializeOnce, (void (*)(void))_AMFDRDeviceRefKeyClassInitialize);
    Instance = (void *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      size_t v16 = Instance;
      Instance[2] = 0;
      Instance[3] = 0;
      Instance[4] = 0;
      CFTypeRef v17 = CFRetain(v12);
      uint64_t v18 = v25;
      v16[2] = v17;
      v16[3] = v18;
      unint64_t v25 = 0;
      v16[4] = v14;
      CFDataRef v14 = 0;
      if (!v6) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
LABEL_46:
  if (v25) {
    aks_ref_key_free((uint64_t *)&v25);
  }
  size_t v16 = 0;
  if (v6) {
LABEL_23:
  }
    aks_params_free(&v21);
LABEL_24:
  if (v14) {
    CFRelease(v14);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v27)
  {
    free(v27);
    unint64_t v27 = 0;
  }
  if (v23) {
    free(v23);
  }
  return v16;
}

void *AMFDRDeviceRefKeyCreateWithData(const __CFAllocator *a1, const __CFData *a2)
{
  if (a2)
  {
    return _AMFDRDeviceRefKeyCreateInternal(a1, a2);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

uint64_t AMFDRDeviceRefKeySign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v5;
  v9[1] = v5;
  if (a1 && a2 && a3 && a4 && a5)
  {
    ccsha256_di();
    ccdigest();
    aks_ref_key_sign(*(uint64_t **)(a1 + 24), 0, 0, (uint64_t)v9);
    AMSupportLogInternal();
    return 6;
  }
  else
  {
    AMSupportLogInternal();
    return 1;
  }
}

CFTypeRef AMFDRDeviceRefKeyCopyAttestation(uint64_t a1)
{
  if (a1 && (CFDictionaryRef v1 = *(const void **)(a1 + 16)) != 0)
  {
    return CFRetain(v1);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

uint64_t AMFDRDeviceRefKeyGetPublicKey(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 32);
  }
  AMSupportLogInternal();
  return 0;
}

CFDataRef AMFDRDeviceCopySikPub(const __CFAllocator *a1)
{
  CFIndex length = 0;
  bytes = 0;
  if (!aks_system_key_get_public(1u, 1u, 0, 0, &bytes, &length) && bytes && length)
  {
    CFDataRef SikPubDigestIfNecessary = AMFDRDataCreateSikPubDigestIfNecessary(a1, bytes, length);
  }
  else
  {
    AMSupportLogInternal();
    CFDataRef SikPubDigestIfNecessary = 0;
  }
  if (bytes) {
    free(bytes);
  }
  return SikPubDigestIfNecessary;
}

CFDataRef AMFDRDeviceRefKeyCopyKeyBlob(uint64_t a1)
{
  CFIndex length = 0;
  if (!a1
    || (CFDictionaryRef v1 = *(uint64_t **)(a1 + 24)) == 0
    || (blob = (const UInt8 *)aks_ref_key_get_blob(v1, &length)) == 0
    || (CFDataRef result = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], blob, length)) == 0)
  {
    AMSupportLogInternal();
    return 0;
  }
  return result;
}

uint64_t _AMFDRDeviceRefKeyClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  _AMFDRDeviceRefKeyTypeID = result;
  return result;
}

void _AMFDRDeviceRefKeyClassFinalize(void *a1)
{
  if (!a1) {
    _AMFDRDeviceRefKeyClassFinalize_cold_1();
  }
  io_object_t v3 = a1 + 2;
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    *io_object_t v3 = 0;
  }
  if (a1[3])
  {
    aks_ref_key_free(a1 + 3);
    a1[3] = 0;
  }
  mach_port_t v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  *io_object_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
}

__CFString *_AMFDRDeviceRefKeyCopyFormattingDescription(uint64_t a1)
{
  CFIndex length = 0;
  if (!a1) {
    _AMFDRDeviceRefKeyCopyFormattingDescription_cold_1();
  }
  CFDictionaryRef v1 = *(void **)(a1 + 24);
  if (!v1) {
    return @"Invalid AMFDRDeviceRefKey";
  }
  public_key = (const UInt8 *)aks_ref_key_get_public_key(v1, &length);
  if (!public_key) {
    return @"Invalid AMFDRDeviceRefKey";
  }
  if (!length) {
    return @"Invalid AMFDRDeviceRefKey";
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], public_key, length);
  if (!v4) {
    return @"Invalid AMFDRDeviceRefKey";
  }
  CFDataRef v5 = v4;
  uint64_t v6 = AMSupportCopyHexStringFromData();
  if (!v6)
  {
    uint64_t v10 = @"Invalid AMFDRDeviceRefKey";
    CFStringRef v9 = (CFStringRef)v5;
LABEL_10:
    CFRelease(v9);
    return v10;
  }
  CFBooleanRef v7 = (const void *)v6;
  CFStringRef v8 = CFStringCreateWithFormat(v3, 0, @"AMFDRDeviceRefKey: %@", v6);
  CFStringRef v9 = v8;
  if (v8) {
    uint64_t v10 = (__CFString *)CFRetain(v8);
  }
  else {
    uint64_t v10 = @"Invalid AMFDRDeviceRefKey";
  }
  CFRelease(v5);
  CFRelease(v7);
  if (v9) {
    goto LABEL_10;
  }
  return v10;
}

uint64_t AMFDRCopyDisposableKeys(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  memset(__b, 170, sizeof(__b));
  char v5 = 0;
  uint64_t v6 = 1;
  if (!a2 || !a3) {
    goto LABEL_15;
  }
  ccrng();
  int key = ccrsa_generate_key();
  AMSupportLogInternal();
  if (key)
  {
    char v5 = 0;
    uint64_t v6 = 6;
    goto LABEL_15;
  }
  size_t v8 = ccrsa_export_priv_size();
  CFStringRef v9 = malloc_type_malloc(v8, 0x6725E0A8uLL);
  uint64_t v10 = ccrsa_ctx_public();
  uint64_t v11 = MEMORY[0x21D45B430](v10);
  CFDataRef v12 = (UInt8 *)malloc_type_malloc(v11, 0xBB46C6AAuLL);
  unint64_t v13 = v12;
  if (v9 && v12)
  {
    if (ccrsa_export_priv()
      || (ccrsa_ctx_public(), ccrsa_export_pub())
      || AMSupportRsaCreatePemFromData())
    {
      char v5 = 0;
      uint64_t v6 = 6;
    }
    else
    {
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      *a3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
      AMSupportLogInternal();
      if (*a3 && (*a2 = CFDataCreate(v14, v13, v11), AMSupportLogInternal(), *a2))
      {
        uint64_t v6 = 0;
        char v5 = 1;
      }
      else
      {
        char v5 = 0;
        uint64_t v6 = 2;
      }
    }
    goto LABEL_12;
  }
  char v5 = 0;
  uint64_t v6 = 2;
  if (v9) {
LABEL_12:
  }
    free(v9);
  if (v13) {
    free(v13);
  }
LABEL_15:
  if ((v5 & 1) == 0)
  {
    if (*a2)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
  return v6;
}

CFDataRef AMFDRCryptoCreateCsr(uint64_t a1, const __CFString *a2)
{
  CFDataRef PemFromData = (CFDataRef)a1;
  unsigned int v20 = 0;
  CFTypeRef cf = 0;
  CFDataRef theData = 0;
  if (!a1)
  {
    AMSupportLogInternal();
    goto LABEL_25;
  }
  if (AMFDRCryptoGetCryptoVersion(a1, 2u, (int *)&v20)) {
    goto LABEL_24;
  }
  if ((v20 & 0x10000) != 0)
  {
    unint64_t v13 = (void *)*((void *)PemFromData + 17);
    if (*v13 >= 0x29uLL && (CFAllocatorRef v14 = (uint64_t (*)(CFDataRef, void))v13[5]) != 0)
    {
      CFTypeRef v12 = (CFTypeRef)v14(PemFromData, *((void *)PemFromData + 18));
      CFTypeRef cf = v12;
      if (v12) {
        goto LABEL_19;
      }
    }
    else
    {
      CFTypeRef cf = 0;
    }
LABEL_24:
    AMSupportLogInternal();
    CFDataRef PemFromData = 0;
    goto LABEL_25;
  }
  CFDataRef PrivateKey = (const __CFData *)AMFDRCryptoGetPrivateKey((uint64_t)PemFromData);
  CFDataRef theData = PrivateKey;
  if (!PrivateKey || (CFDataRef v5 = PrivateKey, v6 = CFGetTypeID(PrivateKey), v6 != CFDataGetTypeID()))
  {
    CFBooleanRef v7 = (void *)*((void *)PemFromData + 17);
    if (*v7 < 0x51uLL) {
      goto LABEL_24;
    }
    size_t v8 = (unsigned int (*)(CFDataRef, CFTypeRef *, CFDataRef *, void))v7[10];
    if (!v8) {
      goto LABEL_24;
    }
    if (v8(PemFromData, &cf, &theData, *((void *)PemFromData + 18))) {
      goto LABEL_24;
    }
    CFDataRef v5 = theData;
    if (!theData) {
      goto LABEL_24;
    }
  }
  CFTypeID v9 = CFGetTypeID(v5);
  if (v9 != CFDataGetTypeID()) {
    goto LABEL_24;
  }
  uint64_t v10 = cf;
  if (!cf)
  {
    CFDataGetBytePtr(theData);
    CFDataGetLength(theData);
    if (AMSupportRsaCreatePublicKeyFromPrivateKeyPEMBuffer()) {
      goto LABEL_24;
    }
    uint64_t v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
    CFTypeRef cf = v10;
    if (!v10) {
      goto LABEL_24;
    }
  }
  CFTypeID v11 = CFGetTypeID(v10);
  if (v11 != CFDataGetTypeID()) {
    goto LABEL_24;
  }
  CFTypeRef v12 = cf;
LABEL_19:
  CFDataRef SignedCsr = AMFDRCryptoCreateSignedCsr((const __CFDictionary **)PemFromData, v20, a2, (const __CFData *)v12, (uint64_t (*)(void, void, void, void))AMFDRCryptoCreateCsrSignature, (uint64_t)PemFromData);
  if (!SignedCsr) {
    goto LABEL_24;
  }
  CFDataRef v16 = SignedCsr;
  CFDataRef PemFromData = AMFDRCryptoCreatePemFromData((uint64_t)SignedCsr, 1);
  if (!PemFromData) {
    AMSupportLogInternal();
  }
  CFRelease(v16);
LABEL_25:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  return PemFromData;
}

uint64_t AMFDRCryptoCreateDataSignature(int a1, uint64_t a2, uint64_t a3, void **a4, void *a5, CFTypeRef cf)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (!cf) {
    goto LABEL_36;
  }
  CFTypeID v12 = CFGetTypeID(cf);
  if (v12 != AMFDRGetTypeID() || !a2 || !a3 || !a4 || !a5) {
    goto LABEL_36;
  }
  uint64_t PrivateKeyFromPEMBuffer = 103;
  if (a1 != 66050 && a1 != 66562)
  {
    CFDataRef PrivateKey = (const __CFData *)AMFDRCryptoGetPrivateKey((uint64_t)cf);
    if (!PrivateKey) {
      goto LABEL_36;
    }
    CFDataRef v15 = PrivateKey;
    CFTypeID v16 = CFGetTypeID(PrivateKey);
    if (v16 != CFDataGetTypeID()) {
      goto LABEL_36;
    }
    CFDataGetBytePtr(v15);
    CFDataGetLength(v15);
    uint64_t PrivateKeyFromPEMBuffer = AMSupportRsaCreatePrivateKeyFromPEMBuffer();
    if (PrivateKeyFromPEMBuffer) {
      goto LABEL_26;
    }
  }
  if (a1 > 1024)
  {
    if (a1 != 66562 && a1 != 66050)
    {
      uint64_t PrivateKeyFromPEMBuffer = 105;
      if (a1 != 1025) {
        goto LABEL_27;
      }
LABEL_36:
      AMSupportLogInternal();
      uint64_t PrivateKeyFromPEMBuffer = 103;
      goto LABEL_27;
    }
    uint64_t v18 = (void *)*((void *)cf + 17);
    if (*v18 >= 0x39uLL)
    {
      unint64_t v19 = (unsigned int (*)(CFTypeRef, uint64_t, uint64_t, void **, uint64_t *, void))v18[7];
      if (v19)
      {
        if (!v19(cf, a2, a3, &v22, &v21, *((void *)cf + 18)))
        {
          if (v22)
          {
            uint64_t v17 = v21;
            if (v21)
            {
              *a4 = v22;
              uint64_t v22 = 0;
              uint64_t PrivateKeyFromPEMBuffer = 100;
              *a5 = v17;
              return PrivateKeyFromPEMBuffer;
            }
          }
        }
      }
    }
LABEL_26:
    AMSupportLogInternal();
    goto LABEL_27;
  }
  if (a1 == 257) {
    goto LABEL_36;
  }
  uint64_t PrivateKeyFromPEMBuffer = 105;
  if (a1 == 513) {
    goto LABEL_36;
  }
LABEL_27:
  if (v22)
  {
    free(v22);
    uint64_t v22 = 0;
  }
  return PrivateKeyFromPEMBuffer;
}

uint64_t AMFDRCreateRsaSignature(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t *a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v10 = ccrsa_import_priv_n();
  MEMORY[0x270FA5388]();
  CFTypeID v12 = (uint64_t *)((char *)&v21 - v11);
  if (v13 >= 0x20)
  {
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    CFDataRef v15 = (_OWORD *)((char *)&v21 - v11);
    do
    {
      _OWORD *v15 = v14;
      v15[1] = v14;
      v15 += 2;
      v11 -= 32;
    }
    while (v11);
  }
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v16;
  long long v25 = v16;
  long long v23 = v16;
  uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t *v12 = v10;
  if (ccrsa_import_priv()) {
    return 6;
  }
  uint64_t v22 = 8 * v10;
  uint64_t v17 = malloc_type_calloc(1uLL, 8 * v10, 0xD1C17806uLL);
  if (!v17) {
    return 6;
  }
  uint64_t v18 = v17;
  switch(a1)
  {
    case 1025:
      ccsha384_di();
      ccdigest();
      break;
    case 513:
      ccsha256_di();
      ccdigest();
      break;
    case 257:
      ccsha1_di();
      ccdigest();
      break;
    default:
      uint64_t v19 = 105;
LABEL_15:
      free(v18);
      return v19;
  }
  if (ccrsa_sign_pkcs1v15())
  {
    uint64_t v19 = 6;
    goto LABEL_15;
  }
  uint64_t v19 = 0;
  *a6 = v18;
  *a7 = v22;
  return v19;
}

uint64_t AMFDRCryptoCreateLocalSignedDataSignature(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || !a3 || !a4 || !a5) {
    goto LABEL_14;
  }
  if ((a1 & 3) != 1 && (a1 & 3) != 2) {
    return 105;
  }
  uint64_t DataFromPem = AMSupportRsaCreateDataFromPem();
  if (!DataFromPem)
  {
LABEL_14:
    AMSupportLogInternal();
    return 103;
  }
  uint64_t v6 = DataFromPem;
  AMSupportLogInternal();
  return v6;
}

uint64_t AMFDRCreateEcDsaSignature(int a1)
{
  if (a1 == 66562)
  {
    SignatureSha384 = AMSupportEcDsaCreateSignatureSha384();
  }
  else
  {
    if (a1 != 66050) {
      return 6;
    }
    SignatureSha384 = AMSupportEcDsaCreateSignatureSha256();
  }
  if (SignatureSha384) {
    return 6;
  }
  else {
    return 0;
  }
}

uint64_t AMFDRCryptoCreateLocalSignedCertificateData(char a1, void *a2, _DWORD *a3)
{
  if (a2 && a3)
  {
    if ((a1 & 3) == 1)
    {
      CFDataRef v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIEKTCCAxGgAwIBAgIJAIpZXkx8FEc8MA0GCSqGSIb3DQEBBQUAMIGbMQswCQYD\n"
           "VQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTESMBAGA1UEBwwJQ3VwZXJ0aW5v\n"
           "MRMwEQYDVQQKDApBcHBsZSBJbmMuMQ8wDQYDVQQLDAZDb3JlT1MxFTATBgNVBAMM\n"
           "DEZEUi1MT0NBTC1WMTEmMCQGCSqGSIb3DQEJARYXZmRyLWRldkBncm91cC5hcHBs\n"
           "ZS5jb20wHhcNMjIwNTA5MTUyOTQxWhcNMzIwNTA2MTUyOTQxWjCBmzELMAkGA1UE\n"
           "BhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExEjAQBgNVBAcMCUN1cGVydGlubzET\n"
           "MBEGA1UECgwKQXBwbGUgSW5jLjEPMA0GA1UECwwGQ29yZU9TMRUwEwYDVQQDDAxG\n"
           "RFItTE9DQUwtVjExJjAkBgkqhkiG9w0BCQEWF2Zkci1kZXZAZ3JvdXAuYXBwbGUu\n"
           "Y29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqDSCzDVLKL1ti0A5\n"
           "6ddmfyNhDRWpSTQM1eWgkOXeOrmXGuUF0l183cNLHmCDLCQF/gN2ZDOlH/mGv4DU\n"
           "KsVWZ4MV0fmoBUddlXlMH3lYT+4ZvWlH0bp5OX5UmVKxfvKMBl5jKkmANEZYmHu7\n"
           "VFiy3/7S4ca064Lfq1lNefMc0OM9oxulXlAICBwiwxiJKoPOa3/fgdx61lzMnWRa\n"
           "U72XCh8jZdDBJDd5wFgPVGYJMFCbAlgKrEvLPT0Ih9TiWZO97YlnvTeO2PrJtztb\n"
           "c3coQKfq9fOkLL9CyUrMUY4q7IJGBI1z4pB+UBS/ZgJ3/cBNvdhW5is2JVx113hl\n"
           "IskfCQIDAQABo24wbDAdBgNVHQ4EFgQU0QoF+nE1hlJxSQU0TutWjH2N2dUwCQYD\n"
           "VR0TBAIwADALBgNVHQ8EBAMCBeAwGgYJKoZIhvdjZAYQBA0MC3Blcm1pc3Npb25z\n"
           "MBcGCSqGSIb3Y2QGEQQKDAhjbGllbnRpZDANBgkqhkiG9w0BAQUFAAOCAQEAFjVa\n"
           "sSNfZOzLK10c16i06IRkqLx7xRo7ycnbSazwgNLxsGYNqzueBKI634nX4/MkFzgn\n"
           "sIz3rayMogDSgcZmrMe63JmvKJwOWYNFQDs2fTCFNyHBU3lQRL67dddJ8vKKUgPF\n"
           "4zLSbg80sYVkMAxpAjdIxDoXAGZX9ss8l4Z7QtbNHEUZoihXz5dWhjTUHfsNZsG4\n"
           "MxCIO9wniOpG5C/bUquZXq+Q75j4P4fC/KEfC70G/LVXzCTii+vEE6WTz8XhG2Ek\n"
           "oZt6eUiXbC8LjA4Iss8POlr9oTj1y9zsZwdUN7E6/crQhtc68El3XcGWTvveMWIw\n"
           "/Ry4bOUy5w0BVWlJEA==\n"
           "-----END CERTIFICATE-----";
      size_t v6 = 1505;
    }
    else
    {
      if ((a1 & 3) != 2) {
        return 9;
      }
      CFDataRef v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIDzDCCAbSgAwIBAgIGAflWiCu0MA0GCSqGSIb3DQEBCwUAMEcxEzARBgNVBAgM\n"
           "CkNhbGlmb3JuaWExEzARBgNVBAoMCkFwcGxlIEluYy4xGzAZBgNVBAMMEkZEUi1D\n"
           "QTEtUk9PVC1MT0NBTDAeFw0yMjA0MjEwODQ0MTFaFw0zMjA0MTgwODQ0MTFaMEgx\n"
           "CzAJBgNVBAYTAlVTMRMwEQYDVQQKDApBcHBsZSBJbmMuMRAwDgYDVQQLDAdEZXZp\n"
           "Y2VzMRIwEAYDVQQDDAlGRFItTE9DQUwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNC\n"
           "AATstM3jcCQWuq9Bg83QA8IlrIKWDtWxssWc1c4hdDg/wsmD6Xb+xb45NCRgFnBW\n"
           "SS1+dvn52D3WUU5HVS412NMxo4GHMIGEMFoGCiqGSIb3Y2QGAQ8ETDFK/4T6iZRQ\n"
           "QzBBFgRPQkpQMTn/hKKdplQMMAoWBERHU1SgAgUA/4absdJkDDAKFgRjbGlkoAIF\n"
           "AP+Gy7nmdAwwChYEaW5zdKACBQAwEAYJKoZIhvdjZAYQBAMMASowFAYJKoZIhvdj\n"
           "ZAYRBAcMBUxvY2FsMA0GCSqGSIb3DQEBCwUAA4ICAQBvsxDEZweOcEo10OpMUpx2\n"
           "NZTy4BvSNqKOlv1nHTLqESHYTfik/L3mqTeOoWe20UkMY/e3vKwJWbgavzw7WOxb\n"
           "65bQ+ixU5VQUZzy1XlaQkIW49Tqid1WViSNNlqEXJLTj8lsplpuy5iT/WndNWczq\n"
           "opM3SkdS5YgjAqP4r8qoOAK7pSoMvLd6LTijbp9pTKDTseoXoJsVgPA/LNbW0FvR\n"
           "QxJyVVYkFnN1jtZB2ge5tqpuEuXwyCa/1bC9H8WE49uHyABIzfRaLEs7JbYvIaDH\n"
           "rgcoErGtyADmR/OvhMXryBz+USUG8bZtD/VoCsoIhoJFSVOBNDZXD59arISbjl8q\n"
           "8lbmCloZmocbUPMRinXDbpwMcAfQhv2sV/J6T5+TFAeRdSORhnwnle+56sedvugJ\n"
           "e8QOz85eTifA/KIuSTh+uKkrod3chBgHrh0PvJafOhcmYqhRbqV4guMXi53UrTLi\n"
           "VP68jydKSP2+gLinzYw/J0G/fE88SoWNBcihGjgNrfn8MIAZpVVEQ34PLozWKiXq\n"
           "hZ1VOA54XfeKlNp9Fxuuif0ZNPZ4q7ztbeR3aALN8lVkh/AfmpHNi6oN6LBu0zJw\n"
           "Z9AX2sUNOH0DOOMdojFblTdyuINrt2Tr4ccpHS1htnNR0ro82kZpkJH/zES/oYTA\n"
           "h0Sm4iIj1I5P1NFGq/jR8A==\n"
           "-----END CERTIFICATE-----";
      size_t v6 = 1379;
    }
    CFBooleanRef v7 = malloc_type_calloc(1uLL, v6, 0x73EAED92uLL);
    *a2 = v7;
    if (v7)
    {
      memcpy(v7, v5, v6);
      uint64_t result = 0;
      *a3 = v6;
      return result;
    }
  }
  AMSupportLogInternal();
  return 199;
}

uint64_t AMFDRCryptoCopyAttestation(void *a1)
{
  if (!a1 || (CFTypeID v2 = CFGetTypeID(a1), v2 != AMFDRGetTypeID()))
  {
    AMSupportLogInternal();
    return 0;
  }
  CFAllocatorRef v3 = (void *)a1[17];
  if (*v3 < 0x31uLL) {
    return 0;
  }
  CFDataRef v4 = (uint64_t (*)(void *, uint64_t))v3[6];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a1[18];

  return v4(a1, v5);
}

uint64_t AMFDRCryptoCopyRefKeyPub(void *a1)
{
  if (!a1 || (CFTypeID v2 = CFGetTypeID(a1), v2 != AMFDRGetTypeID()))
  {
    AMSupportLogInternal();
    return 0;
  }
  CFAllocatorRef v3 = (void *)a1[17];
  if (*v3 < 0x29uLL) {
    return 0;
  }
  CFDataRef v4 = (uint64_t (*)(void *, uint64_t))v3[5];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a1[18];

  return v4(a1, v5);
}

BOOL AMFDRDigestMd5(uint64_t a1)
{
  if (a1)
  {
    ccmd5_di();
    ccdigest();
  }
  else
  {
    AMSupportLogInternal();
  }
  return a1 != 0;
}

uint64_t FDREncodeReStitchManifest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  uint64_t v6 = 1;
  if (a1 && a3 && a5 && a6)
  {
    if (Img4DecodeInit() || Img4EncodeStitchManifest() != 100)
    {
      AMSupportLogInternal();
      return 16;
    }
    else if (*a5 && *a6)
    {
      return 0;
    }
    else
    {
      AMSupportLogInternal();
      return 10;
    }
  }
  return v6;
}

uint64_t FDREncodeCreateCombinedFast(uint64_t a1, int a2, void *a3, unsigned int a4, const void *a5, unsigned int a6, char **a7, _DWORD *a8)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  v68[0] = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  uint64_t result = 1;
  if (a1 && a2 && (!a3 || a4))
  {
    BOOL v16 = a6 || a5 == 0;
    if (v16 && a7 && a8)
    {
      unint64_t v97 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v95 = v17;
      long long v96 = v17;
      long long v93 = v17;
      long long v94 = v17;
      long long v91 = v17;
      long long v92 = v17;
      long long v89 = v17;
      long long v90 = v17;
      long long v87 = v17;
      long long v88 = v17;
      long long v85 = v17;
      long long v86 = v17;
      long long v83 = v17;
      long long v84 = v17;
      long long v81 = v17;
      long long v82 = v17;
      long long v79 = v17;
      long long v80 = v17;
      long long v77 = v17;
      long long v78 = v17;
      long long v75 = v17;
      long long v76 = v17;
      long long v73 = v17;
      long long v74 = v17;
      long long v71 = v17;
      long long v72 = v17;
      long long v69 = v17;
      long long v70 = v17;
      if (Img4DecodeInit())
      {
        AMSupportLogInternal();
        return 16;
      }
      if (a3) {
        size_t v18 = a4;
      }
      else {
        size_t v18 = v71;
      }
      if (a3) {
        uint64_t v19 = a3;
      }
      else {
        uint64_t v19 = (void *)*((void *)&v70 + 1);
      }
      unsigned int v20 = _FDREncodeLength(&v65, v18);
      if (!v20) {
        return 3;
      }
      unsigned int v21 = v20;
      unsigned int v22 = v20 + v18 + v70 + 7;
      unsigned int v23 = _FDREncodeLength((unsigned char *)&v65 + 8, v22);
      if (!v23) {
        return 3;
      }
      unsigned int v24 = v23;
      v63 = v19;
      unsigned int v25 = v23 + v22;
      int v26 = v23 + v22 + 1;
      unsigned int v27 = _FDREncodeLength(&v66, v25 + 1);
      if (!v27) {
        return 3;
      }
      unsigned int v28 = v27;
      size_t __n = v18;
      v64 = a5;
      unsigned int v29 = v26 + v27 + 7;
      unsigned int v30 = _FDREncodeLength((unsigned char *)&v66 + 8, v29);
      if (!v30) {
        return 3;
      }
      unsigned int v31 = v30;
      v58 = a7;
      v59 = a8;
      if (v64)
      {
        unsigned int v32 = _FDREncodeLength(&v67, a6);
        if (!v32) {
          return 3;
        }
        unsigned int v33 = a6 + v32 + 7;
        size_t v60 = v32;
      }
      else
      {
        size_t v60 = 0;
        unsigned int v33 = 6;
      }
      unsigned int v34 = _FDREncodeLength((unsigned char *)&v67 + 8, v33);
      if (v34)
      {
        unsigned int v35 = v34;
        unsigned int v36 = v29 + v31 + v33 + v34 + 8;
        unsigned int v37 = _FDREncodeLength(v68, v36);
        if (v37)
        {
          unsigned int v38 = v37;
          size_t v39 = v36 + v37 + 1;
          BOOL v40 = (char *)malloc_type_calloc(1uLL, v39, 0x3B2F231uLL);
          if (!v40) {
            return 2;
          }
          uint64_t v41 = v40;
          size_t v61 = v39;
          *BOOL v40 = 48;
          unint64_t v42 = v40 + 1;
          memcpy(v40 + 1, v68, v38);
          v43 = &v42[v38];
          *(_WORD *)v43 = 1046;
          *(_DWORD *)(v43 + 2) = *(_DWORD *)"comb";
          unint64_t v44 = v43 + 7;
          v43[6] = 48;
          memcpy(v43 + 7, (char *)&v66 + 8, v31);
          v45 = &v44[v31];
          *(_WORD *)v45 = 1046;
          *(_DWORD *)(v45 + 2) = *(_DWORD *)"fdrd";
          v46 = v45 + 7;
          v45[6] = 4;
          memcpy(v45 + 7, &v66, v28);
          v47 = &v46[v28];
          *v47++ = 48;
          memcpy(v47, (char *)&v65 + 8, v24);
          v48 = &v47[v24];
          v49 = (_DWORD *)MEMORY[0x263F8BE28];
          *(_WORD *)v48 = 1046;
          *(_DWORD *)(v48 + 2) = *v49;
          v50 = v48 + 6;
          memcpy(v48 + 6, *((const void **)&v69 + 1), v70);
          v51 = &v50[v70];
          *v51++ = -96;
          memcpy(v51, &v65, v21);
          v52 = &v51[v21];
          memcpy(v52, v63, __n);
          v53 = &v52[__n];
          *v53++ = 48;
          memcpy(v53, (char *)&v67 + 8, v35);
          v54 = &v53[v35];
          *(_WORD *)v54 = 1046;
          *(_DWORD *)(v54 + 2) = *(_DWORD *)"secb";
          if (v64)
          {
            v55 = v54 + 7;
            v54[6] = 4;
            memcpy(v54 + 7, &v67, v60);
            v56 = &v55[v60];
            memcpy(v56, v64, a6);
            v57 = &v56[a6];
          }
          else
          {
            v57 = v54 + 6;
          }
          if (&v57[-v61] == v41)
          {
            uint64_t result = 0;
            *v58 = v41;
            _DWORD *v59 = v61;
          }
          else
          {
            AMSupportLogInternal();
            free(v41);
            return 10;
          }
          return result;
        }
      }
      return 3;
    }
  }
  return result;
}

unsigned char *_FDREncodeLength(unsigned char *result, unsigned int a2)
{
  v5[1] = *MEMORY[0x263EF8340];
  if (result)
  {
    if (a2 > 0x7F)
    {
      uint64_t v3 = 0;
      v5[0] = 0;
      do
      {
        *((unsigned char *)v5 + v3++) = a2;
        BOOL v4 = a2 > 0xFF;
        a2 >>= 8;
      }
      while (v4);
      LODWORD(v2) = result;
      if (v3 <= 7)
      {
        *uint64_t result = v3 | 0x80;
        CFTypeID v2 = result + 1;
        if (v3)
        {
          do
            *v2++ = *((unsigned char *)&v5[-1] + v3-- + 7);
          while (v3);
        }
      }
    }
    else
    {
      *uint64_t result = a2;
      LODWORD(v2) = result + 1;
    }
    return (unsigned char *)(v2 - result);
  }
  return result;
}

uint64_t FDREncoderAddSequenceProperty(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1 && a2 && (a3 || !a4) && DEREncoderCreate())
  {
    if (DEREncoderAddDataNoCopy()
      || a3 && DEREncoderAddDataNoCopy()
      || DEREncoderAddSequenceFromEncoder())
    {
      AMSupportLogInternal();
      uint64_t v5 = 3;
      AMSupportLogInternal();
    }
    else
    {
      uint64_t v5 = 0;
    }
    DEREncoderDestroy();
  }
  else
  {
    uint64_t v5 = 3;
    AMSupportLogInternal();
  }
  return v5;
}

uint64_t FDREncodeCreateFDR2Data(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8 = DEREncoderCreate();
  if (!v8) {
    return 2;
  }
  uint64_t v9 = v8;
  if (DEREncoderAddDataNoCopy())
  {
    uint64_t v12 = 3;
  }
  else
  {
    uint64_t v10 = FDREncoderAddSequenceProperty(v9, (uint64_t)"fdrd", a1, a2);
    if (v10)
    {
      uint64_t v12 = v10;
    }
    else
    {
      uint64_t v11 = FDREncoderAddSequenceProperty(v9, (uint64_t)"mft2", a3, a4);
      if (!v11)
      {
        if (DEREncoderCreate())
        {
          if (DEREncoderAddSequenceFromEncoder() || DEREncoderCreateEncodedBuffer())
          {
            uint64_t v12 = 3;
            AMSupportLogInternal();
          }
          else
          {
            uint64_t v12 = 0;
          }
          DEREncoderDestroy();
        }
        else
        {
          AMSupportLogInternal();
          uint64_t v12 = 2;
        }
        goto LABEL_10;
      }
      uint64_t v12 = v11;
    }
  }
  AMSupportLogInternal();
LABEL_10:
  DEREncoderDestroy();
  return v12;
}

uint64_t FDREncodeSealingRequest(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a1) {
    return 1;
  }
  uint64_t v8 = DEREncoderCreate();
  if (!v8) {
    return 2;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *a1;
  if (!*a1)
  {
    uint64_t v11 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *a1 = v11;
    if (!v11 || (**a1 = DEREncoderCreate()) == 0)
    {
      uint64_t v12 = 2;
      goto LABEL_14;
    }
    if (DEREncoderAddData())
    {
      uint64_t v12 = 3;
      goto LABEL_23;
    }
    uint64_t v10 = *a1;
  }
  if (!*v10) {
    goto LABEL_21;
  }
  uint64_t v12 = 0;
  if (!a4 || !a5) {
    goto LABEL_14;
  }
  uint64_t v13 = FDREncoderAddSequenceProperty(v9, MEMORY[0x263F8BE20], a4, a5);
  if (v13)
  {
    uint64_t v12 = v13;
LABEL_23:
    AMSupportLogInternal();
    goto LABEL_14;
  }
  if (DEREncoderAddSequenceFromEncoder())
  {
LABEL_21:
    AMSupportLogInternal();
    uint64_t v12 = 10;
    goto LABEL_14;
  }
  uint64_t v12 = 0;
LABEL_14:
  DEREncoderDestroy();
  return v12;
}

uint64_t FDREncodeSealingRequestEnd(void **a1, void *a2, _DWORD *a3)
{
  if (!a1) {
    return 1;
  }
  BOOL v4 = *a1;
  if (!v4) {
    return 1;
  }
  uint64_t v6 = 1;
  if (a3 && a2 && *v4)
  {
    uint64_t v8 = DEREncoderCreate();
    BOOL v4 = *a1;
    if (v8)
    {
      if (DEREncoderAddSequenceFromEncoder())
      {
        uint64_t v6 = 3;
      }
      else if (DEREncoderCreateEncodedBuffer())
      {
        uint64_t v6 = 2;
      }
      else if (*a2)
      {
        if (*a3)
        {
          uint64_t v6 = 0;
          goto LABEL_12;
        }
        uint64_t v6 = 10;
      }
      else
      {
        uint64_t v6 = 10;
      }
      AMSupportLogInternal();
LABEL_12:
      DEREncoderDestroy();
      BOOL v4 = *a1;
      if (!*a1) {
        return v6;
      }
      goto LABEL_13;
    }
    uint64_t v6 = 2;
    if (!v4) {
      return v6;
    }
  }
LABEL_13:
  if (!*v4 || (DEREncoderDestroy(), **a1 = 0, (BOOL v4 = *a1) != 0))
  {
    free(v4);
    *a1 = 0;
  }
  return v6;
}

uint64_t AMFDREncodeProducerIDBegin(void *a1)
{
  if (!a1) {
    return 1;
  }
  CFTypeID v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *a1 = v2;
  if (!v2) {
    return 2;
  }
  *(void *)*a1 = DEREncoderCreate();
  return 2 * (*(void *)*a1 == 0);
}

uint64_t AMFDREncodeProducerIDAddDigest(void *a1, uint64_t a2, int a3)
{
  if (!a1 || !*a1) {
    return 1;
  }
  uint64_t v3 = 1;
  if (a3)
  {
    if (a2)
    {
      if (*(void *)*a1)
      {
        uint64_t v3 = 0;
        if (DEREncoderAddData())
        {
          uint64_t v3 = 3;
          AMSupportLogInternal();
        }
      }
    }
  }
  return v3;
}

uint64_t AMFDREncodeProducerIDAddDigestFromData(void *a1, int *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = malloc_type_calloc(1uLL, 0x30uLL, 0xB54F4942uLL);
  if (!v8) {
    return 2;
  }
  uint64_t v9 = v8;
  uint64_t v10 = 1;
  if (a3 && a4)
  {
    if (_FDREncodeDigestCompute(a3, a4, (uint64_t)v8, *(void *)a2, (unint64_t *)a2)) {
      uint64_t v10 = 6;
    }
    else {
      uint64_t v10 = AMFDREncodeProducerIDAddDigest(a1, (uint64_t)v9, *a2);
    }
  }
  free(v9);
  return v10;
}

uint64_t _FDREncodeDigestCompute(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t result = 6;
  if (a1 && a2 && a3 && a5 && *a5 <= a4)
  {
    if (DEROidCompare(a5[1], (uint64_t)&oidSha1))
    {
      if (!AMSupportDigestSha1()) {
        return 0;
      }
    }
    else if (DEROidCompare(a5[1], (uint64_t)&oidSha256))
    {
      if (!AMSupportDigestSha256()) {
        return 0;
      }
    }
    else
    {
      if (!DEROidCompare(a5[1], (uint64_t)&oidSha384)) {
        return 4;
      }
      if (!AMSupportDigestSha384()) {
        return 0;
      }
    }
    return 3;
  }
  return result;
}

uint64_t AMFDREncodeProducerIDEnd(void **a1, void *a2, _DWORD *a3)
{
  if (!a1) {
    return 1;
  }
  BOOL v4 = *a1;
  if (!v4) {
    return 1;
  }
  uint64_t v6 = 1;
  if (a3 && a2 && *v4)
  {
    uint64_t v8 = DEREncoderCreate();
    BOOL v4 = *a1;
    if (v8)
    {
      if (DEREncoderAddSequenceFromEncoder())
      {
        uint64_t v6 = 3;
      }
      else if (DEREncoderCreateEncodedBuffer())
      {
        uint64_t v6 = 2;
      }
      else if (*a2)
      {
        if (*a3)
        {
          uint64_t v6 = 0;
          goto LABEL_12;
        }
        uint64_t v6 = 10;
      }
      else
      {
        uint64_t v6 = 10;
      }
      AMSupportLogInternal();
LABEL_12:
      DEREncoderDestroy();
      BOOL v4 = *a1;
      if (!*a1) {
        return v6;
      }
      goto LABEL_13;
    }
    uint64_t v6 = 2;
    if (!v4) {
      return v6;
    }
  }
LABEL_13:
  if (!*v4 || (DEREncoderDestroy(), **a1 = 0, (BOOL v4 = *a1) != 0))
  {
    free(v4);
    *a1 = 0;
  }
  return v6;
}

uint64_t FDREncodeExtendedProperties(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 101;
  if (a2 && a3 && a4 && a5)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      if (!*(_DWORD *)(a3 + 4 * i) || !*(void *)(a4 + 8 * i) || !*(_DWORD *)(a5 + 4 * i)) {
        return 101;
      }
    }
    long long v14 = *(void **)a1;
    if (!*(void *)a1)
    {
      long long v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x10D004042747809uLL);
      *(void *)a1 = v14;
    }
    uint64_t result = 0;
    *(_DWORD *)long long v14 = a2;
    v14[1] = a3;
    *(void *)(*(void *)a1 + 16) = a4;
    *(void *)(*(void *)a1 + 24) = a5;
    *(void *)(*(void *)a1 + 32) = a6;
  }
  return result;
}

uint64_t FDREncodeCreateSignedManifest()
{
  if (AMSupportRsaCreateDataFromPem())
  {
    uint64_t v1 = 3;
    AMSupportLogInternal();
  }
  else if (Img4EncodeCreateManifest() == 100)
  {
    AMSupportLogInternal();
    return 10;
  }
  else
  {
    AMSupportLogInternal();
    return 16;
  }
  return v1;
}

uint64_t _FDREncodeAddManifestProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 101;
  if (!a1) {
    goto LABEL_31;
  }
  if (!a2) {
    goto LABEL_31;
  }
  if (!a3) {
    goto LABEL_31;
  }
  uint64_t v3 = Img4EncodeItemBegin();
  if (v3 != 100) {
    goto LABEL_31;
  }
  uint64_t v5 = (char *)malloc_type_malloc(0x20uLL, 0x1D56B548uLL);
  if (!v5)
  {
    AMSupportLogInternal();
    uint64_t v3 = 2;
LABEL_31:
    Img4EncodeItemDestroy();
    return v3;
  }
  uint64_t v6 = v5;
  for (uint64_t i = 0; i != 32; i += 4)
    *(_DWORD *)&v6[i] = arc4random();
  uint64_t v3 = Img4EncodeItemPropertyData();
  if (v3 == 100)
  {
    if (!*(void *)a3 || !*(_DWORD *)(a3 + 8) || (uint64_t v3 = Img4EncodeItemPropertyData(), v3 == 100))
    {
      if (!*(void *)(a3 + 16) || !*(_DWORD *)(a3 + 24) || (uint64_t v3 = Img4EncodeItemPropertyData(), v3 == 100))
      {
        uint64_t v3 = Img4EncodeItemPropertyBool();
        if (v3 == 100)
        {
          uint64_t v8 = *(unsigned int **)(a3 + 48);
          if (v8 && *v8)
          {
            for (unint64_t j = 0; j < *v8; ++j)
            {
              int v10 = *(_DWORD *)(*((void *)v8 + 4) + 4 * j);
              if (v10)
              {
                if (v10 != 1 || *(_DWORD *)(*((void *)v8 + 3) + 4 * j) != 8)
                {
                  AMSupportLogInternal();
                  uint64_t v3 = 101;
                  goto LABEL_28;
                }
                uint64_t v11 = Img4EncodeItemPropertyInt64();
              }
              else
              {
                uint64_t v11 = Img4EncodeItemPropertyData();
              }
              uint64_t v3 = v11;
              if (v11 != 100) {
                goto LABEL_28;
              }
              uint64_t v8 = *(unsigned int **)(a3 + 48);
            }
          }
          uint64_t v3 = Img4EncodeItemEnd();
          if (v3 == 100) {
            uint64_t v3 = Img4EncodeItemCopyBuffer();
          }
        }
      }
    }
  }
LABEL_28:
  Img4EncodeItemDestroy();
  free(v6);
  return v3;
}

uint64_t _FDREncodeAddObjectProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 101;
  if (a1 && a2)
  {
    if (a3)
    {
      if (!*(_DWORD *)(a3 + 32))
      {
LABEL_21:
        uint64_t v3 = Img4EncodeItemCopyBuffer();
        goto LABEL_22;
      }
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(void *)(a3 + 40);
        uint64_t v8 = Img4EncodeItemBegin();
        if (v8 != 100) {
          break;
        }
        uint64_t v8 = Img4EncodeItemPropertyData();
        if (v8 != 100) {
          break;
        }
        uint64_t v8 = Img4EncodeItemPropertyData();
        if (v8 != 100) {
          break;
        }
        uint64_t v8 = Img4EncodeItemPropertyData();
        if (v8 != 100) {
          break;
        }
        if (*(void *)(v7 + v5 + 48))
        {
          uint64_t v8 = Img4EncodeItemPropertyData();
          if (v8 != 100) {
            break;
          }
        }
        if (*(void *)(v7 + v5 + 64))
        {
          uint64_t v8 = Img4EncodeItemPropertyData();
          if (v8 != 100) {
            break;
          }
        }
        if (*(void *)(v7 + v5 + 80))
        {
          uint64_t v8 = Img4EncodeItemPropertyData();
          if (v8 != 100) {
            break;
          }
        }
        uint64_t v8 = Img4EncodeItemEnd();
        if (v8 != 100) {
          break;
        }
        ++v6;
        v5 += 96;
        if (v6 >= *(unsigned int *)(a3 + 32)) {
          goto LABEL_21;
        }
      }
      uint64_t v3 = v8;
    }
    AMSupportLogInternal();
  }
LABEL_22:
  Img4EncodeItemDestroy();
  return v3;
}

uint64_t FDREncodeCreateSignedData(uint64_t a1, uint64_t a2, char *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v48 = 0;
  unsigned int v47 = 0;
  v46 = 0;
  int v45 = 0;
  unint64_t v44 = 0;
  int v43 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  int v40 = 0;
  uint64_t v19 = *(int **)(a1 + 24);
  size_t v39 = 0;
  int v38 = 0;
  char v37 = 0;
  *(_DWORD *)__dst = 0;
  unsigned int v35 = 0;
  memset(v34, 170, sizeof(v34));
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[17] = v20;
  v33[18] = v20;
  v33[15] = v20;
  v33[16] = v20;
  v33[13] = v20;
  v33[14] = v20;
  v33[11] = v20;
  v33[12] = v20;
  v33[9] = v20;
  v33[10] = v20;
  v33[7] = v20;
  v33[8] = v20;
  v33[5] = v20;
  v33[6] = v20;
  v33[3] = v20;
  v33[4] = v20;
  v33[1] = v20;
  v33[2] = v20;
  v33[0] = v20;
  unsigned int v32 = v33;
  unsigned int v21 = malloc_type_calloc(1uLL, 0x30uLL, 0xAD7C1F45uLL);
  if (!v21)
  {
    AMSupportLogInternal();
    uint64_t v22 = 2;
    goto LABEL_13;
  }
  if (a4 == 4)
  {
    strncpy(__dst, a3, 4uLL);
    if (Img4EncodeCreatePayload() == 100)
    {
      if (!v48 || !v47) {
        goto LABEL_12;
      }
      uint64_t v22 = _FDREncodeDigestCompute((uint64_t)v48, v47, (uint64_t)v21, **(void **)(a1 + 16), *(unint64_t **)(a1 + 16));
      if (v22) {
        goto LABEL_13;
      }
      uint64_t v23 = AMFDREncodeProducerIDBegin(&v35);
      if (v23)
      {
        uint64_t v22 = v23;
LABEL_9:
        AMSupportLogInternal();
        goto LABEL_13;
      }
      unsigned int v25 = *(uint64_t (**)(void **, int *, uint64_t))(a1 + 40);
      if (!v25) {
        goto LABEL_37;
      }
      uint64_t v26 = v25(&v39, &v38, a2);
      if (v26)
      {
        uint64_t v22 = v26;
        goto LABEL_9;
      }
      if (!v39 || !v38) {
        goto LABEL_37;
      }
      uint64_t DataFromPem = AMSupportRsaCreateDataFromPem();
      if (DataFromPem)
      {
        uint64_t v22 = DataFromPem;
LABEL_34:
        AMSupportLogInternal();
        goto LABEL_13;
      }
      if (AMFDRDecodeIterateCertChainBegin(v34, (uint64_t)v42, v41)
        || (AMFDRDecodeIterateCertChainNext((uint64_t)v34, &v32, &v40), v28))
      {
LABEL_37:
        AMSupportLogInternal();
LABEL_38:
        uint64_t v22 = 0;
        goto LABEL_13;
      }
      while (v32)
      {
        uint64_t v29 = AMFDREncodeProducerIDAddDigestFromData(&v35, v19, *((void *)v32 + 18), *((_DWORD *)v32 + 38));
        if (v29
          || (uint64_t v29 = AMFDREncodeProducerIDAddDigestFromData(&v35, v19, *((void *)v32 + 32), *((_DWORD *)v32 + 66)),
              v29))
        {
          uint64_t v22 = v29;
          goto LABEL_34;
        }
        uint64_t v22 = AMFDREncodeProducerIDAddDigestFromData(&v35, v19, *((void *)v32 + 34), *((_DWORD *)v32 + 70));
        if (v22) {
          AMSupportLogInternal();
        }
        AMFDRDecodeIterateCertChainNext((uint64_t)v34, &v32, &v40);
        if (v30) {
          goto LABEL_34;
        }
      }
      uint64_t v31 = AMFDREncodeProducerIDEnd(&v35, &v44, &v43);
      if (v31)
      {
        uint64_t v22 = v31;
        goto LABEL_34;
      }
      AMFDRTagsStringToTag((unsigned int *)a3);
      if (!FDREncodeCreateSignedManifest())
      {
        if (!v46 || !v45) {
          goto LABEL_12;
        }
        if (Img4EncodeStitchManifest() == 100)
        {
          if (a14 && a15) {
            goto LABEL_38;
          }
LABEL_12:
          AMSupportLogInternal();
          uint64_t v22 = 10;
          goto LABEL_13;
        }
      }
    }
    AMSupportLogInternal();
    uint64_t v22 = 16;
    goto LABEL_13;
  }
  AMSupportLogInternal();
  uint64_t v22 = 199;
LABEL_13:
  if (v48)
  {
    free(v48);
    v48 = 0;
  }
  if (v46) {
    free(v46);
  }
  if (v44)
  {
    free(v44);
    unint64_t v44 = 0;
  }
  if (v42)
  {
    free(v42);
    unint64_t v42 = 0;
  }
  if (v21) {
    free(v21);
  }
  if (v39)
  {
    free(v39);
    size_t v39 = 0;
  }
  if (v35) {
    AMFDREncodeProducerIDEnd(&v35, &v44, &v43);
  }
  return v22;
}

uint64_t FDREncodeCreateOfflineSignedData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v29 = 0;
  unsigned int v28 = 0;
  unsigned int v27 = 0;
  int v26 = 0;
  char v25 = 0;
  *(_DWORD *)__dst = 0;
  size_t v18 = malloc_type_calloc(1uLL, 0x30uLL, 0x60B855FCuLL);
  if (!v18)
  {
    AMSupportLogInternal();
    unsigned int v21 = 0;
    uint64_t v22 = 0;
LABEL_9:
    uint64_t v20 = 2;
    goto LABEL_14;
  }
  if (a6 == 4)
  {
    strncpy(__dst, a5, 4uLL);
    if (Img4EncodeCreatePayload() != 100)
    {
      AMSupportLogInternal();
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      goto LABEL_11;
    }
    if (!v29 || !v28)
    {
      AMSupportLogInternal();
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      goto LABEL_13;
    }
    uint64_t v19 = _FDREncodeDigestCompute((uint64_t)v29, v28, (uint64_t)v18, **(void **)(a1 + 16), *(unint64_t **)(a1 + 16));
    if (v19)
    {
      uint64_t v20 = v19;
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      goto LABEL_14;
    }
    AMFDRTagsStringToTag((unsigned int *)a5);
    uint64_t v22 = 0;
    if (!a3 || !a4)
    {
LABEL_30:
      uint64_t v31 = 0;
      int v30 = 0;
      if (Img4EncodeCreateManifest() == 100 && (unsigned int v21 = v31) != 0 && v30)
      {
        if (Img4EncodeStitchManifest() == 100)
        {
          if (a12 && a13)
          {
            uint64_t v20 = 0;
            goto LABEL_14;
          }
          AMSupportLogInternal();
LABEL_13:
          uint64_t v20 = 10;
          goto LABEL_14;
        }
        AMSupportLogInternal();
      }
      else
      {
        AMSupportLogInternal();
        if (v31) {
          free(v31);
        }
        AMSupportLogInternal();
        unsigned int v21 = 0;
      }
LABEL_11:
      uint64_t v20 = 16;
      goto LABEL_14;
    }
    uint64_t v22 = DEREncoderCreate();
    if (!v22) {
      goto LABEL_45;
    }
    if (!DEREncoderAddDataNoCopy())
    {
      if (!DEREncoderCreateEncodedBuffer()) {
        goto LABEL_30;
      }
      AMSupportLogInternal();
LABEL_45:
      unsigned int v21 = 0;
      goto LABEL_9;
    }
    uint64_t v20 = 3;
    AMSupportLogInternal();
    unsigned int v21 = 0;
  }
  else
  {
    AMSupportLogInternal();
    unsigned int v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 199;
  }
LABEL_14:
  if (v29)
  {
    free(v29);
    uint64_t v29 = 0;
  }
  if (v21) {
    free(v21);
  }
  if (v18) {
    free(v18);
  }
  if (v22) {
    DEREncoderDestroy();
  }
  if (v27) {
    free(v27);
  }
  return v20;
}

uint64_t AMFDREncodeMultiRequestBegin(uint64_t a1, int a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  *(void *)a1 = v3;
  if (v3
    && (**(void **)a1 = DEREncoderCreate()) != 0
    && (*(void *)(*(void *)a1 + 8) = DEREncoderCreate()) != 0
    && (*(void *)(*(void *)a1 + 16) = DEREncoderCreate()) != 0)
  {
    uint64_t v4 = 0;
    if (DEREncoderAddData())
    {
      uint64_t v4 = 3;
      AMSupportLogInternal();
    }
  }
  else
  {
    AMSupportLogInternal();
    return 2;
  }
  return v4;
}

uint64_t AMFDREncodeMultiRequestAddRecord(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  if (!a1 || !*(void *)a1) {
    return 1;
  }
  uint64_t v7 = 1;
  if (a3 && a2 && *(void *)(*(void *)a1 + 16))
  {
    if (a4)
    {
      if (!a5) {
        goto LABEL_32;
      }
    }
    else if (a5)
    {
      goto LABEL_32;
    }
    if (a6)
    {
      if (!a7) {
        goto LABEL_32;
      }
LABEL_14:
      if (DEREncoderCreate())
      {
        if (DEREncoderCreate())
        {
          if (DEREncoderAddDataNoCopy()
            || a4 && (DEREncoderAddDataNoCopy() || DEREncoderAddDataFromEncoder())
            || a6 && DEREncoderAddDataNoCopy()
            || DEREncoderAddSequenceFromEncoder())
          {
            uint64_t v7 = 3;
            AMSupportLogInternal();
          }
          else
          {
            uint64_t v7 = 0;
          }
          DEREncoderDestroy();
          DEREncoderDestroy();
          return v7;
        }
        AMSupportLogInternal();
        DEREncoderDestroy();
      }
      else
      {
        AMSupportLogInternal();
      }
      return 2;
    }
    if (!a7) {
      goto LABEL_14;
    }
LABEL_32:
    AMSupportLogInternal();
  }
  return v7;
}

uint64_t AMFDREncodeMultiRequestEnd(void *a1, void *a2, _DWORD *a3)
{
  if (!a1 || (uint64_t v4 = (void *)*a1) == 0 || !*v4 || !v4[1])
  {
    uint64_t v6 = 1;
    goto LABEL_17;
  }
  uint64_t v6 = 1;
  if (a3 && a2 && v4[2])
  {
    if (!DEREncoderCreate())
    {
      AMSupportLogInternal();
      uint64_t v6 = 2;
      goto LABEL_17;
    }
    if (DEREncoderAddSetFromEncoder())
    {
      uint64_t v6 = 3;
    }
    else if (DEREncoderAddSequenceFromEncoder() || DEREncoderAddSequenceFromEncoder())
    {
      uint64_t v6 = 3;
    }
    else if (DEREncoderCreateEncodedBuffer())
    {
      uint64_t v6 = 3;
    }
    else if (*a2)
    {
      if (*a3)
      {
        uint64_t v6 = 0;
LABEL_16:
        DEREncoderDestroy();
        goto LABEL_17;
      }
      uint64_t v6 = 199;
    }
    else
    {
      uint64_t v6 = 199;
    }
    AMSupportLogInternal();
    goto LABEL_16;
  }
LABEL_17:
  AMFDREncodeMultiRequestDestroy((uint64_t)a1);
  return v6;
}

void AMFDREncodeMultiRequestDestroy(uint64_t a1)
{
  if (a1)
  {
    CFTypeID v2 = *(void **)a1;
    if (v2)
    {
      if (*v2)
      {
        DEREncoderDestroy();
        **(void **)a1 = 0;
        CFTypeID v2 = *(void **)a1;
      }
      if (v2[1])
      {
        DEREncoderDestroy();
        *(void *)(*(void *)a1 + 8) = 0;
        CFTypeID v2 = *(void **)a1;
      }
      if (!v2[2] || (DEREncoderDestroy(), *(void *)(*(void *)a1 + 16) = 0, (CFTypeID v2 = *(void **)a1) != 0)) {
        free(v2);
      }
      *(void *)a1 = 0;
    }
  }
}

uint64_t AMFDREncodeMultiResponseBegin(uint64_t a1)
{
  CFTypeID v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  *(void *)a1 = v2;
  if (v2
    && (**(void **)a1 = DEREncoderCreate()) != 0
    && (*(void *)(*(void *)a1 + 8) = DEREncoderCreate()) != 0
    && (*(void *)(*(void *)a1 + 16) = DEREncoderCreate()) != 0)
  {
    uint64_t v3 = 0;
    if (DEREncoderAddData())
    {
      uint64_t v3 = 3;
      AMSupportLogInternal();
    }
  }
  else
  {
    AMSupportLogInternal();
    return 2;
  }
  return v3;
}

uint64_t AMFDREncodeMultiResponseAddRecord(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9)
{
  if (!a1 || !*(void *)a1) {
    return 1;
  }
  uint64_t v9 = 1;
  if (a5 && a4 && a3 && a2 && *(void *)(*(void *)a1 + 16))
  {
    if (a6)
    {
      if (!a7) {
        goto LABEL_33;
      }
    }
    else if (a7)
    {
LABEL_33:
      AMSupportLogInternal();
      return v9;
    }
    if (a8)
    {
      if (!a9) {
        goto LABEL_34;
      }
    }
    else if (a9)
    {
LABEL_34:
      AMSupportLogInternal();
      return 1;
    }
    if (DEREncoderCreate())
    {
      if (DEREncoderCreate())
      {
        if (DEREncoderAddDataNoCopy()
          || DEREncoderAddDataNoCopy()
          || DEREncoderAddDataFromEncoder()
          || a6 && DEREncoderAddDataNoCopy()
          || a8 && DEREncoderAddDataNoCopy()
          || DEREncoderAddSequenceFromEncoder())
        {
          uint64_t v9 = 3;
          AMSupportLogInternal();
        }
        else
        {
          uint64_t v9 = 0;
        }
        DEREncoderDestroy();
        DEREncoderDestroy();
        return v9;
      }
      AMSupportLogInternal();
      DEREncoderDestroy();
    }
    else
    {
      AMSupportLogInternal();
    }
    return 2;
  }
  return v9;
}

uint64_t AMFDREncodeMultiResponseEnd(uint64_t *a1, void *a2, _DWORD *a3)
{
  if (!a1 || (uint64_t v4 = *a1) == 0 || !*(void *)(v4 + 8))
  {
    uint64_t v6 = 1;
    goto LABEL_19;
  }
  uint64_t v6 = 1;
  if (a3 && a2 && *(void *)(v4 + 16))
  {
    if (!DEREncoderCreate())
    {
      AMSupportLogInternal();
      uint64_t v6 = 2;
      goto LABEL_19;
    }
    if (!DEREncoderCreate())
    {
      AMSupportLogInternal();
      uint64_t v6 = 2;
      goto LABEL_18;
    }
    if (DEREncoderAddSetFromEncoder())
    {
      uint64_t v6 = 3;
    }
    else if (DEREncoderAddDataFromEncoder())
    {
      uint64_t v6 = 3;
    }
    else if (DEREncoderAddSequenceFromEncoder() || DEREncoderAddSequenceFromEncoder())
    {
      uint64_t v6 = 3;
    }
    else if (DEREncoderCreateEncodedBuffer())
    {
      uint64_t v6 = 3;
    }
    else if (*a2)
    {
      if (*a3)
      {
        uint64_t v6 = 0;
LABEL_17:
        DEREncoderDestroy();
LABEL_18:
        DEREncoderDestroy();
        goto LABEL_19;
      }
      uint64_t v6 = 199;
    }
    else
    {
      uint64_t v6 = 199;
    }
    AMSupportLogInternal();
    goto LABEL_17;
  }
LABEL_19:
  AMFDREncodeMultiRequestDestroy((uint64_t)a1);
  return v6;
}

uint64_t AMFDREncodeMetadataBegin(void *a1)
{
  CFTypeID v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *a1 = v2;
  if (!v2 || (v3 = DEREncoderCreate(), uint64_t result = 0, (*(void *)*a1 = v3) == 0))
  {
    AMSupportLogInternal();
    return 2;
  }
  return result;
}

uint64_t AMFDREncodeMetadataAddRecord(void *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (!a1 || !*a1) {
    return 1;
  }
  uint64_t v5 = 1;
  if (a3 && a2 && *(void *)*a1)
  {
    if (a4)
    {
      if (!a5) {
        goto LABEL_21;
      }
    }
    else if (a5)
    {
LABEL_21:
      AMSupportLogInternal();
      return v5;
    }
    if (DEREncoderCreate())
    {
      if (DEREncoderAddDataNoCopy()
        || a4 && DEREncoderAddDataNoCopy()
        || DEREncoderAddSequenceFromEncoder())
      {
        uint64_t v5 = 3;
        AMSupportLogInternal();
      }
      else
      {
        uint64_t v5 = 0;
      }
      DEREncoderDestroy();
    }
    else
    {
      AMSupportLogInternal();
      return 2;
    }
  }
  return v5;
}

uint64_t AMFDREncodeMetadataEnd(void **a1, void *a2, _DWORD *a3)
{
  if (!a1 || !*a1)
  {
    uint64_t v5 = 1;
    goto LABEL_13;
  }
  uint64_t v5 = 1;
  if (a3 && a2 && **a1)
  {
    if (!DEREncoderCreate())
    {
      AMSupportLogInternal();
      uint64_t v5 = 2;
      goto LABEL_13;
    }
    if (DEREncoderAddSetFromEncoder())
    {
      uint64_t v5 = 3;
    }
    else if (DEREncoderCreateEncodedBuffer())
    {
      uint64_t v5 = 3;
    }
    else if (*a2)
    {
      if (*a3)
      {
        uint64_t v5 = 0;
LABEL_12:
        DEREncoderDestroy();
        goto LABEL_13;
      }
      uint64_t v5 = 199;
    }
    else
    {
      uint64_t v5 = 199;
    }
    AMSupportLogInternal();
    goto LABEL_12;
  }
LABEL_13:
  AMFDREncodeMetadataDestroy(a1);
  return v5;
}

void AMFDREncodeMetadataDestroy(void **a1)
{
  if (a1)
  {
    CFTypeID v2 = *a1;
    if (v2)
    {
      if (!*v2 || (DEREncoderDestroy(), **a1 = 0, (CFTypeID v2 = *a1) != 0)) {
        free(v2);
      }
      *a1 = 0;
    }
  }
}

uint64_t AMFDREncodeMetaPropertyBegin(void *a1)
{
  CFTypeID v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *a1 = v2;
  if (!v2 || (v3 = DEREncoderCreate(), uint64_t result = 0, (*(void *)*a1 = v3) == 0))
  {
    AMSupportLogInternal();
    return 2;
  }
  return result;
}

uint64_t AMFDREncodeMetaPropertyAddData(int a1, void *a2, uint64_t a3, int a4)
{
  if (!a2 || !*a2 || !*(void *)*a2) {
    return 1;
  }
  if (a1) {
    return 0;
  }
  if (a3)
  {
    if (a4)
    {
      uint64_t v4 = 0;
      if (!DEREncoderAddData()) {
        return v4;
      }
      uint64_t v4 = 3;
    }
    else
    {
      uint64_t v4 = 1;
    }
LABEL_15:
    AMSupportLogInternal();
    return v4;
  }
  if (a4)
  {
    uint64_t v4 = 1;
    goto LABEL_15;
  }
  return 0;
}

uint64_t AMFDREncodeMetaPropertyEnd(void **a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5)
{
  if (!a1 || !*a1)
  {
    uint64_t v7 = 1;
    goto LABEL_19;
  }
  uint64_t v7 = 1;
  if (!a5 || !a4 || !**a1) {
    goto LABEL_19;
  }
  if (!DEREncoderCreate())
  {
    AMSupportLogInternal();
    uint64_t v7 = 2;
    goto LABEL_19;
  }
  if (DEREncoderAddDataNoCopy())
  {
    uint64_t v7 = 3;
LABEL_25:
    AMSupportLogInternal();
    goto LABEL_18;
  }
  if (DEREncoderAddSequenceFromEncoder())
  {
    uint64_t v7 = 3;
    goto LABEL_25;
  }
  if (!DEREncoderCreate())
  {
    uint64_t v7 = 2;
    goto LABEL_25;
  }
  if (DEREncoderAddSequenceFromEncoder())
  {
    uint64_t v9 = 0;
LABEL_27:
    uint64_t v7 = 3;
    goto LABEL_32;
  }
  uint64_t v9 = DEREncoderCreate();
  if (!v9)
  {
    uint64_t v7 = 2;
    goto LABEL_32;
  }
  if (DEREncoderAddSequenceFromEncoder()) {
    goto LABEL_27;
  }
  if (DEREncoderCreateEncodedBuffer())
  {
    uint64_t v7 = 3;
  }
  else if (*a4)
  {
    if (*a5)
    {
      uint64_t v7 = 0;
      goto LABEL_17;
    }
    uint64_t v7 = 199;
  }
  else
  {
    uint64_t v7 = 199;
  }
LABEL_32:
  AMSupportLogInternal();
LABEL_17:
  DEREncoderDestroy();
  DEREncoderDestroy();
  if (v9) {
LABEL_18:
  }
    DEREncoderDestroy();
LABEL_19:
  AMFDREncodeMetadataDestroy(a1);
  return v7;
}

uint64_t AMFDREncodeCreateOfflineBlob(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, void *a7, _DWORD *a8)
{
  uint64_t result = 1;
  if (a1 && a2 && a3 && a4 && a5 && a6 && a7 && a8)
  {
    if (DEREncoderCreate())
    {
      if (DEREncoderCreate())
      {
        if (DEREncoderAddDataNoCopy())
        {
          uint64_t v12 = 3;
        }
        else if (DEREncoderAddDataNoCopy())
        {
          uint64_t v12 = 3;
        }
        else if (DEREncoderAddDataNoCopy() || DEREncoderAddSequenceFromEncoder())
        {
          uint64_t v12 = 3;
        }
        else if (DEREncoderCreateEncodedBuffer())
        {
          uint64_t v12 = 3;
        }
        else if (*a7)
        {
          if (*a8)
          {
            uint64_t v12 = 0;
LABEL_19:
            DEREncoderDestroy();
            DEREncoderDestroy();
            return v12;
          }
          uint64_t v12 = 199;
        }
        else
        {
          uint64_t v12 = 199;
        }
        AMSupportLogInternal();
        goto LABEL_19;
      }
      AMSupportLogInternal();
      DEREncoderDestroy();
    }
    else
    {
      AMSupportLogInternal();
    }
    return 2;
  }
  return result;
}

uint64_t AMFDREncodeCertificateRequestBegin(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  CFTypeID v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  *(void *)a1 = v2;
  if (!v2
    || (**(void **)a1 = DEREncoderCreate()) == 0
    || (*(void *)(*(void *)a1 + 8) = DEREncoderCreate()) == 0
    || (v3 = DEREncoderCreate(), uint64_t result = 0, (*(void *)(*(void *)a1 + 16) = v3) == 0))
  {
    AMSupportLogInternal();
    return 2;
  }
  return result;
}

uint64_t AMFDREncodeCertificateRequestAddSubject(uint64_t a1, char *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v11 = 0;
  int v10 = 0;
  uint64_t v5 = 1;
  if (a1 && a2 && a3 && a4 && a5)
  {
    if (DEREncoderCreate())
    {
      if (DEREncoderCreate())
      {
        int v7 = _FDREncodeCreateDataFromOid(a2, &v11, &v10);
        uint64_t v8 = v11;
        if (v7)
        {
          uint64_t v5 = 3;
        }
        else if (DEREncoderAddDataNoCopy() {
               || DEREncoderAddDataNoCopy()
        }
               || DEREncoderAddSequenceFromEncoder()
               || DEREncoderAddSetFromEncoder())
        {
          uint64_t v5 = 3;
          AMSupportLogInternal();
        }
        else
        {
          uint64_t v5 = 0;
        }
        if (v8) {
          free(v8);
        }
        DEREncoderDestroy();
      }
      else
      {
        AMSupportLogInternal();
        uint64_t v5 = 2;
      }
      DEREncoderDestroy();
    }
    else
    {
      AMSupportLogInternal();
      return 2;
    }
  }
  return v5;
}

uint64_t _FDREncodeCreateDataFromOid(char *a1, void *a2, _DWORD *a3)
{
  __lasts = a1;
  uint64_t v6 = malloc_type_malloc(0x100uLL, 0x4D0B734DuLL);
  if (!v6)
  {
    AMSupportLogInternal();
    return 2;
  }
  int v7 = v6;
  size_t v8 = strlen(a1);
  uint64_t v9 = malloc_type_malloc(v8 + 1, 0x67518CEEuLL);
  if (!v9)
  {
    AMSupportLogInternal();
    uint64_t v23 = 2;
    goto LABEL_24;
  }
  size_t v10 = strlen(a1);
  memcpy(v9, a1, v10 + 1);
  uint64_t v11 = strtok_r((char *)v9, ".", &__lasts);
  if (v11)
  {
    uint64_t v12 = v11;
    int v13 = 0;
    int v14 = 0;
    while (1)
    {
      *__error() = 0;
      unint64_t v15 = strtoul(v12, 0, 10);
      if (*__error() || HIDWORD(v15)) {
        break;
      }
      if (v13)
      {
        if (v13 != 1)
        {
          uint64_t v16 = 0;
          char v17 = 0;
          int v18 = 0;
          int v19 = v14;
          while (1)
          {
            uint64_t v20 = v16;
            for (int i = v19; v20; --v20)
            {
              v7[i] = v7[i - 1];
              --i;
            }
            v7[v14] = v15 & 0x7F | v17;
            if ((++v18 + v14) >= 0x100) {
              goto LABEL_23;
            }
            ++v16;
            ++v19;
            char v17 = 0x80;
            BOOL v22 = v15 >= 0x80;
            v15 >>= 7;
            if (!v22)
            {
              v14 += v18;
              goto LABEL_17;
            }
          }
        }
        v7[v14] = v15 + 40 * v7[v14];
        ++v14;
      }
      else
      {
        v7[v14] = v15;
      }
LABEL_17:
      ++v13;
      uint64_t v12 = strtok_r(0, ".", &__lasts);
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_23:
    uint64_t v23 = 3;
    AMSupportLogInternal();
LABEL_24:
    free(v7);
    if (!v9) {
      return v23;
    }
    goto LABEL_21;
  }
  int v14 = 0;
LABEL_20:
  uint64_t v23 = 0;
  *a2 = v7;
  *a3 = v14;
LABEL_21:
  free(v9);
  return v23;
}

uint64_t AMFDREncodeCertificateRequestAddAttribute(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = 0;
  int v19 = 0;
  int v18 = 0;
  char v17 = 0;
  int v16 = 0;
  uint64_t v7 = 1;
  if (!a1 || !a2 || !a4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    goto LABEL_20;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!a5) {
    goto LABEL_20;
  }
  uint64_t v10 = DEREncoderCreate();
  if (!v10)
  {
    AMSupportLogInternal();
    uint64_t v6 = 0;
    uint64_t v9 = 0;
LABEL_33:
    uint64_t v7 = 2;
    goto LABEL_20;
  }
  uint64_t v9 = DEREncoderCreate();
  if (!v9)
  {
    AMSupportLogInternal();
    uint64_t v6 = 0;
    goto LABEL_33;
  }
  uint64_t v6 = DEREncoderCreate();
  if (!v6)
  {
    AMSupportLogInternal();
    goto LABEL_33;
  }
  int v13 = _FDREncodeCreateDataFromOid(a2, &v17, &v16);
  int v14 = v17;
  if (v13)
  {
    uint64_t v7 = 3;
  }
  else if (DEREncoderAddDataNoCopy() {
         || a6 && DEREncoderAddBoolean()
  }
         || !a3 && (DEREncoderAddDataNoCopy() || DEREncoderCreateEncodedBuffer())
         || DEREncoderAddDataNoCopy()
         || DEREncoderAddSequenceFromEncoder())
  {
    uint64_t v7 = 3;
    AMSupportLogInternal();
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v14) {
    free(v14);
  }
LABEL_20:
  if (v19)
  {
    free(v19);
    int v19 = 0;
  }
  if (v10) {
    DEREncoderDestroy();
  }
  if (v9) {
    DEREncoderDestroy();
  }
  if (v6) {
    DEREncoderDestroy();
  }
  return v7;
}

uint64_t AMFDREncodeCertificateRequestCreateUnsginedData(uint64_t a1, const void *a2, unsigned int a3, char *a4, char *a5, void *a6, _DWORD *a7)
{
  uint64_t v7 = 0;
  char v31 = 2;
  int v30 = 0;
  int v29 = 0;
  unsigned int v27 = 1;
  if (!a1 || !a2 || !a3 || !a4 || !a6)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_45;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!a7) {
    goto LABEL_45;
  }
  uint64_t v14 = DEREncoderCreate();
  if (!v14)
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_69:
    int v25 = 2;
LABEL_74:
    unsigned int v27 = v25;
LABEL_45:
    uint64_t v23 = v27;
    if (!v14) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  uint64_t v13 = DEREncoderCreate();
  if (!v13)
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_69;
  }
  uint64_t v12 = DEREncoderCreate();
  if (!v12)
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
    uint64_t v11 = 0;
    goto LABEL_69;
  }
  uint64_t v11 = DEREncoderCreate();
  if (!v11)
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
    goto LABEL_69;
  }
  uint64_t v7 = DEREncoderCreate();
  if (!v7) {
    goto LABEL_68;
  }
  if (DEREncoderAddDataNoCopy() || DEREncoderAddSequenceFromEncoder()) {
    goto LABEL_44;
  }
  int v17 = _FDREncodeCreateDataFromOid(a4, &v30, &v29);
  int v18 = v30;
  if (v17)
  {
LABEL_71:
    if (v18)
    {
      free(v18);
      int v30 = 0;
    }
    int v25 = 3;
    goto LABEL_74;
  }
  if (DEREncoderAddData()) {
    goto LABEL_70;
  }
  if (v18)
  {
    free(v18);
    int v30 = 0;
  }
  if (!a5)
  {
    if (!DEREncoderAddDataNoCopy()) {
      goto LABEL_24;
    }
LABEL_44:
    unsigned int v27 = 3;
    AMSupportLogInternal();
    goto LABEL_45;
  }
  int v19 = _FDREncodeCreateDataFromOid(a5, &v30, &v29);
  int v18 = v30;
  if (v19) {
    goto LABEL_71;
  }
  if (DEREncoderAddData())
  {
LABEL_70:
    AMSupportLogInternal();
    goto LABEL_71;
  }
  if (v18)
  {
    free(v18);
    int v30 = 0;
  }
LABEL_24:
  if (DEREncoderAddSequenceFromEncoder()
    || AMFDREncodeAddBitString(v12, a2, a3)
    || DEREncoderAddSequenceFromEncoder())
  {
    goto LABEL_44;
  }
  DEREncoderDestroy();
  uint64_t v13 = DEREncoderCreate();
  if (!v13)
  {
LABEL_68:
    AMSupportLogInternal();
    goto LABEL_69;
  }
  int v20 = _FDREncodeCreateDataFromOid("1.2.840.113549.1.9.14", &v30, &v29);
  int v18 = v30;
  if (v20) {
    goto LABEL_71;
  }
  if (DEREncoderAddData()) {
    goto LABEL_70;
  }
  if (v18)
  {
    free(v18);
    int v30 = 0;
  }
  uint64_t v21 = *(void *)(*(void *)a1 + 8);
  int v33 = 0;
  unsigned int v32 = 0;
  if (!v21) {
    goto LABEL_44;
  }
  int EncodedBuffer = DEREncoderCreateEncodedBuffer();
  if (!EncodedBuffer) {
    int EncodedBuffer = DEREncoderAddData();
  }
  if (v32) {
    free(v32);
  }
  if (EncodedBuffer
    || DEREncoderAddSetFromEncoder()
    || DEREncoderAddSequenceFromEncoder()
    || DEREncoderAddDataFromEncoder()
    || DEREncoderAddSequenceFromEncoder()
    || DEREncoderCreateEncodedBuffer())
  {
    goto LABEL_44;
  }
  uint64_t v23 = 0;
  *a6 = 0;
  *a7 = 0;
LABEL_46:
  DEREncoderDestroy();
LABEL_47:
  if (v13) {
    DEREncoderDestroy();
  }
  if (v12) {
    DEREncoderDestroy();
  }
  if (v11) {
    DEREncoderDestroy();
  }
  if (v7) {
    DEREncoderDestroy();
  }
  return v23;
}

uint64_t AMFDREncodeAddBitString(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v5 = malloc_type_malloc(a3 + 1, 0x3D5FB60BuLL);
  if (!v5) {
    return 2;
  }
  uint64_t v6 = v5;
  *uint64_t v5 = 0;
  memcpy(v5 + 1, a2, a3);
  uint64_t v7 = DEREncoderAddData();
  free(v6);
  return v7;
}

uint64_t AMFDREncodeCertificateRequestEnd(uint64_t a1, const void *a2, unsigned int a3, char *a4, char *a5, char a6, void *a7, _DWORD *a8)
{
  uint64_t v8 = a1;
  uint64_t v9 = 0;
  int v25 = 0;
  int v24 = 0;
  uint64_t v10 = 1;
  if (!a1 || !a2 || !a3 || !a4 || !a7)
  {
    uint64_t v16 = 0;
    goto LABEL_40;
  }
  uint64_t v16 = 0;
  if (!a8) {
    goto LABEL_40;
  }
  uint64_t v16 = DEREncoderCreate();
  if (!v16)
  {
    AMSupportLogInternal();
    uint64_t v9 = 0;
LABEL_32:
    uint64_t v10 = 2;
LABEL_33:
    uint64_t v8 = a1;
    goto LABEL_40;
  }
  uint64_t v9 = DEREncoderCreate();
  if (!v9)
  {
    AMSupportLogInternal();
    goto LABEL_32;
  }
  int v19 = _FDREncodeCreateDataFromOid(a4, &v25, &v24);
  int v20 = v25;
  if (v19) {
    goto LABEL_37;
  }
  if (DEREncoderAddData())
  {
LABEL_36:
    AMSupportLogInternal();
    goto LABEL_37;
  }
  if (v20)
  {
    free(v20);
    int v25 = 0;
  }
  if (a5)
  {
    int v21 = _FDREncodeCreateDataFromOid(a5, &v25, &v24);
    int v20 = v25;
    if (!v21)
    {
      if (!DEREncoderAddData())
      {
        if (v20)
        {
          free(v20);
          int v25 = 0;
        }
        goto LABEL_20;
      }
      goto LABEL_36;
    }
LABEL_37:
    uint64_t v8 = a1;
    if (v20)
    {
      free(v20);
      int v25 = 0;
    }
    uint64_t v10 = 3;
    goto LABEL_40;
  }
  if ((a6 & 1) == 0 && DEREncoderAddDataNoCopy())
  {
    uint64_t v10 = 3;
    AMSupportLogInternal();
    goto LABEL_33;
  }
LABEL_20:
  uint64_t v8 = a1;
  if (!DEREncoderAddSequenceFromEncoder()
    && !AMFDREncodeAddBitString(*(void *)(*(void *)a1 + 16), a2, a3)
    && !DEREncoderAddSequenceFromEncoder()
    && !DEREncoderCreateEncodedBuffer())
  {
    uint64_t v10 = 0;
    *a7 = 0;
    *a8 = 0;
LABEL_25:
    DEREncoderDestroy();
    goto LABEL_26;
  }
  uint64_t v10 = 3;
  AMSupportLogInternal();
LABEL_40:
  if (v16) {
    goto LABEL_25;
  }
LABEL_26:
  if (v9) {
    DEREncoderDestroy();
  }
  AMFDREncodeMultiRequestDestroy(v8);
  return v10;
}

uint64_t AMFDREncodeCreatePayloadAndDigest(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5, void **a6, unsigned int *a7, void *a8, _DWORD *a9)
{
  int v21 = 0;
  unsigned int v20 = 0;
  char v19 = 0;
  *(_DWORD *)__dst = 0;
  unint64_t v15 = malloc_type_calloc(1uLL, 0x30uLL, 0x2DE0F186uLL);
  if (v15)
  {
    if (a3 == 4)
    {
      strncpy(__dst, a2, 4uLL);
      if (Img4EncodeCreatePayload() == 100)
      {
        if (v21
          && v20
          && !_FDREncodeDigestCompute((uint64_t)v21, v20, (uint64_t)v15, **(void **)(a1 + 16), *(unint64_t **)(a1 + 16)))
        {
          if (a6 && a7)
          {
            *a6 = v21;
            *a7 = v20;
            int v21 = 0;
          }
          uint64_t v16 = 0;
          if (a8 && a9)
          {
            uint64_t v16 = 0;
            *a8 = v15;
            *a9 = **(void **)(a1 + 16);
            unint64_t v15 = 0;
          }
        }
        else
        {
          AMSupportLogInternal();
          uint64_t v16 = 10;
        }
      }
      else
      {
        AMSupportLogInternal();
        uint64_t v16 = 16;
      }
    }
    else
    {
      AMSupportLogInternal();
      uint64_t v16 = 199;
    }
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v16 = 2;
  }
  if (v21) {
    free(v21);
  }
  if (v15) {
    free(v15);
  }
  return v16;
}

uint64_t AMFDREncodeRepairConfigurationBegin(void *a1)
{
  if (!a1)
  {
    uint64_t v3 = 1;
LABEL_8:
    AMSupportLogInternal();
    return v3;
  }
  CFTypeID v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *a1 = v2;
  if (!v2)
  {
    uint64_t v3 = 2;
    goto LABEL_8;
  }
  uint64_t v3 = 0;
  *(void *)*a1 = DEREncoderCreate();
  if (!*(void *)*a1)
  {
    uint64_t v3 = 2;
    goto LABEL_8;
  }
  return v3;
}

uint64_t AMFDREncodeRepairConfigurationAddSequence(uint64_t **a1, uint64_t **a2)
{
  if ((_AMFDREncodeIsRepairConfigurationContextValid(a1) & 1) != 0
    && (uint64_t v4 = **a1, (_AMFDREncodeIsRepairConfigurationContextValid(a2) & 1) != 0))
  {
    if (a1 == a2)
    {
      uint64_t v5 = DEREncoderCreate();
      if (!v5)
      {
        AMSupportLogInternal();
        return 2;
      }
      uint64_t v6 = v5;
      if (DEREncoderAddSequenceFromEncoder())
      {
        DEREncoderDestroy();
LABEL_15:
        uint64_t v7 = 3;
        AMSupportLogInternal();
        return v7;
      }
      **a1 = v6;
      if (v4) {
        DEREncoderDestroy();
      }
    }
    else if (DEREncoderAddSequenceFromEncoder())
    {
      goto LABEL_15;
    }
    return 0;
  }
  else
  {
    AMSupportLogInternal();
    return 1;
  }
}

uint64_t _AMFDREncodeIsRepairConfigurationContextValid(void *a1)
{
  if (a1 && *a1 && *(void *)*a1) {
    return 1;
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDREncodeRepairConfigurationAddSequenceWithKey(uint64_t **a1)
{
  if (_AMFDREncodeIsRepairConfigurationContextValid(a1))
  {
    uint64_t v2 = **a1;
    uint64_t v3 = DEREncoderCreate();
    if (v3)
    {
      uint64_t v4 = v3;
      if (DEREncoderAddDataNoCopy() || DEREncoderAddSequenceFromEncoder())
      {
        DEREncoderDestroy();
        uint64_t v5 = 3;
        AMSupportLogInternal();
      }
      else
      {
        **a1 = v4;
        if (v2) {
          DEREncoderDestroy();
        }
        return 0;
      }
    }
    else
    {
      AMSupportLogInternal();
      return 2;
    }
  }
  else
  {
    AMSupportLogInternal();
    return 1;
  }
  return v5;
}

uint64_t AMFDREncodeRepairConfigurationAddSetWithKey(uint64_t **a1)
{
  if (_AMFDREncodeIsRepairConfigurationContextValid(a1))
  {
    uint64_t v2 = **a1;
    uint64_t v3 = DEREncoderCreate();
    if (v3)
    {
      uint64_t v4 = v3;
      if (DEREncoderAddDataNoCopy() || DEREncoderAddSetFromEncoder())
      {
        DEREncoderDestroy();
        uint64_t v5 = 3;
        AMSupportLogInternal();
      }
      else
      {
        **a1 = v4;
        if (v2) {
          DEREncoderDestroy();
        }
        return 0;
      }
    }
    else
    {
      AMSupportLogInternal();
      return 2;
    }
  }
  else
  {
    AMSupportLogInternal();
    return 1;
  }
  return v5;
}

uint64_t AMFDREncodeRepairConfigurationAddData(void *a1, int a2, uint64_t a3, int a4)
{
  if ((_AMFDREncodeIsRepairConfigurationContextValid(a1) & 1) != 0 && a4 && a3)
  {
    switch(a2)
    {
      case 0:
      case 1:
      case 2:
        if (!DEREncoderAddData()) {
          goto LABEL_7;
        }
        goto LABEL_10;
      case 3:
        if (DEREncoderAddUInt32())
        {
LABEL_10:
          uint64_t v7 = 3;
          AMSupportLogInternal();
        }
        else
        {
LABEL_7:
          uint64_t v7 = 0;
        }
        break;
      default:
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    AMSupportLogInternal();
    return 1;
  }
  return v7;
}

uint64_t AMFDREncodeRepairConfigurationEnd(void *a1, void *a2, _DWORD *a3)
{
  if (!_AMFDREncodeIsRepairConfigurationContextValid(a1))
  {
    uint64_t v5 = 1;
LABEL_15:
    AMSupportLogInternal();
    return v5;
  }
  if (!a2)
  {
    uint64_t v5 = 1;
    goto LABEL_15;
  }
  if (!a3)
  {
    uint64_t v5 = 1;
    goto LABEL_15;
  }
  if (DEREncoderCreateEncodedBuffer())
  {
    uint64_t v5 = 3;
    goto LABEL_15;
  }
  if (!*a2)
  {
    uint64_t v5 = 199;
    goto LABEL_15;
  }
  if (!*a3)
  {
    uint64_t v5 = 199;
    goto LABEL_15;
  }
  return 0;
}

uint64_t AMFDREncodeMultiCombinedDataPayloadBegin(void *a1)
{
  if (!a1)
  {
    uint64_t v3 = 199;
LABEL_9:
    AMSupportLogInternal();
    return v3;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *a1 = v2;
  if (!v2)
  {
    uint64_t v3 = 2;
    goto LABEL_9;
  }
  uint64_t v3 = 0;
  *(void *)*a1 = DEREncoderCreate();
  if (!*(void *)*a1)
  {
    uint64_t v3 = 2;
    goto LABEL_9;
  }
  return v3;
}

uint64_t AMFDREncodeMultiCombinedDataPayloadAddData(void *a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9)
{
  if (!a1 || !*a1) {
    return 1;
  }
  uint64_t v9 = 1;
  if (a5 && a4 && a3 && a2 && *(void *)*a1)
  {
    if (a6)
    {
      if (!a7) {
        goto LABEL_29;
      }
    }
    else if (a7)
    {
LABEL_29:
      AMSupportLogInternal();
      return v9;
    }
    if (a8)
    {
      if (!a9) {
        goto LABEL_30;
      }
    }
    else if (a9)
    {
LABEL_30:
      AMSupportLogInternal();
      return 1;
    }
    if (DEREncoderCreate())
    {
      if (DEREncoderAddDataNoCopy()
        || DEREncoderAddDataNoCopy()
        || a6 && DEREncoderAddDataNoCopy()
        || a8 && DEREncoderAddDataNoCopy()
        || DEREncoderAddSequenceFromEncoder())
      {
        uint64_t v9 = 3;
        AMSupportLogInternal();
      }
      else
      {
        uint64_t v9 = 0;
      }
      DEREncoderDestroy();
    }
    else
    {
      AMSupportLogInternal();
      return 2;
    }
  }
  return v9;
}

uint64_t AMFDREncodeMultiCombinedDataPayloadEnd(void **a1, void *a2, _DWORD *a3)
{
  if (!a1)
  {
    uint64_t v6 = 1;
    goto LABEL_14;
  }
  if (!*a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    goto LABEL_20;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 1;
  if (!a3 || !a2 || !**a1)
  {
LABEL_20:
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v5 = DEREncoderCreate();
  if (!v5)
  {
    AMSupportLogInternal();
    uint64_t v6 = 2;
    goto LABEL_20;
  }
  if (DEREncoderAddSetFromEncoder() || DEREncoderCreateEncodedBuffer())
  {
    uint64_t v6 = 3;
    AMSupportLogInternal();
    goto LABEL_20;
  }
  if (Img4EncodeCreatePayload() != 100 || !*a2 || !*a3)
  {
    AMSupportLogInternal();
    uint64_t v6 = 199;
    goto LABEL_20;
  }
  uint64_t v6 = 0;
LABEL_13:
  DEREncoderDestroy();
LABEL_14:
  AMFDREncodeMetadataDestroy(a1);
  return v6;
}

uint64_t AMFDREncodeSubCCDigestsBegin(void *a1)
{
  if (!a1)
  {
    uint64_t v3 = 199;
LABEL_8:
    AMSupportLogInternal();
    return v3;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *a1 = v2;
  if (!v2)
  {
    uint64_t v3 = 2;
    goto LABEL_8;
  }
  uint64_t v3 = 0;
  *(void *)*a1 = DEREncoderCreate();
  if (!*(void *)*a1)
  {
    uint64_t v3 = 2;
    goto LABEL_8;
  }
  return v3;
}

uint64_t AMFDREncodeSubCCDigestsAddData(void *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (!a1 || !*a1) {
    return 1;
  }
  uint64_t v5 = 1;
  if (a5 && a4 && a3 && a2 && *(void *)*a1)
  {
    if (DEREncoderCreate())
    {
      if (DEREncoderAddDataNoCopy()
        || DEREncoderAddDataNoCopy()
        || DEREncoderAddSequenceFromEncoder())
      {
        uint64_t v5 = 3;
        AMSupportLogInternal();
      }
      else
      {
        uint64_t v5 = 0;
      }
      DEREncoderDestroy();
    }
    else
    {
      AMSupportLogInternal();
      return 2;
    }
  }
  return v5;
}

uint64_t AMFDREncodeSubCCDigestsEnd(void **a1, void *a2, _DWORD *a3)
{
  if (!a1 || !*a1)
  {
    uint64_t v5 = 1;
    goto LABEL_13;
  }
  uint64_t v5 = 1;
  if (a3 && a2 && **a1)
  {
    if (!DEREncoderCreate())
    {
      AMSupportLogInternal();
      uint64_t v5 = 2;
      goto LABEL_13;
    }
    if (DEREncoderAddSetFromEncoder())
    {
      uint64_t v5 = 3;
    }
    else if (DEREncoderCreateEncodedBuffer())
    {
      uint64_t v5 = 3;
    }
    else if (*a2)
    {
      if (*a3)
      {
        uint64_t v5 = 0;
LABEL_12:
        DEREncoderDestroy();
        goto LABEL_13;
      }
      uint64_t v5 = 199;
    }
    else
    {
      uint64_t v5 = 199;
    }
    AMSupportLogInternal();
    goto LABEL_12;
  }
LABEL_13:
  AMFDREncodeMetadataDestroy(a1);
  return v5;
}

uint64_t AMFDRTagsStringToTag(unsigned int *a1)
{
  return bswap32(*a1);
}

uint64_t AMFDRErrorPushInternal(uint64_t a1, CFIndex a2, const __CFNumber *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, void *value, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, CFStringRef format, char a17)
{
  CFNumberRef v22 = a3;
  CFNumberRef valuePtr = a3;
  CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v26 = CFStringCreateWithFormatAndArguments((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, format, &a17);
  if (v26) {
    AMSupportLogInternal();
  }
  if (!a1)
  {
    unsigned int v28 = 0;
    CFNumberRef v22 = 0;
    if (!v26) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  CFIndex code = a2;
  Mutable = CFDictionaryCreateMutable(v25, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  unsigned int v28 = Mutable;
  if (!Mutable)
  {
    CFNumberRef v22 = 0;
    a1 = 0;
    if (!v26) {
      goto LABEL_39;
    }
LABEL_38:
    CFRelease(v26);
    goto LABEL_39;
  }
  if (v26) {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFFC48], v26);
  }
  if (v22)
  {
    CFNumberRef v22 = CFNumberCreate(v25, kCFNumberSInt64Type, &valuePtr);
    if (v22)
    {
      AMSupportLogInternal();
      CFDictionaryAddValue(v28, @"AMFDRTrustError", v22);
    }
  }
  if (a4) {
    CFDictionarySetValue(v28, @"MissingDataInstances", a4);
  }
  if (a5) {
    CFDictionarySetValue(v28, @"MissingMultiManifests", a5);
  }
  if (a6) {
    CFDictionarySetValue(v28, @"DigestMismatchedDataInstances", a6);
  }
  if (a7) {
    CFDictionarySetValue(v28, @"UnverifiedCombinedManifests", a7);
  }
  if (a8) {
    CFDictionarySetValue(v28, @"UnverifiedDataInstances", a8);
  }
  if (value) {
    CFDictionarySetValue(v28, @"MultiRequestErrors", value);
  }
  if (a10) {
    CFDictionarySetValue(v28, @"MissingMinimalManifests", a10);
  }
  if (a11) {
    CFDictionarySetValue(v28, @"UnverifiedMinimalManifests", a11);
  }
  if (a12) {
    CFDictionarySetValue(v28, @"MissingMinimalSealingInstances", a12);
  }
  if (a13) {
    CFDictionarySetValue(v28, @"MissingSubCCDataInstances", a13);
  }
  if (a14) {
    CFDictionarySetValue(v28, @"MismatchedProperties", a14);
  }
  if (*(void *)a1)
  {
    CFDictionaryAddValue(v28, (const void *)*MEMORY[0x263EFFC88], *(const void **)a1);
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0;
    }
  }
  *(void *)a1 = CFErrorCreate(v25, @"AMFDRError", code, v28);
  a1 = 1;
  if (v26) {
    goto LABEL_38;
  }
LABEL_39:
  if (v28) {
    CFRelease(v28);
  }
  if (v22) {
    CFRelease(v22);
  }
  return a1;
}

uint64_t AMFDRLogSetHandler()
{
  return MEMORY[0x270F97AC8]();
}

uint64_t AMFDRGetTypeID()
{
  return _AMFDRTypeID;
}

uint64_t _AMFDRClassInitialize()
{
  _AMFDRTypeID = _CFRuntimeRegisterClass();

  return AMFDRCryptoInit();
}

void *AMFDRCreateWithImplementation(const __CFAllocator *a1, CFDictionaryRef theDict, void *a3, uint64_t a4)
{
  if (!theDict || (CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, theDict)) == 0)
  {
    AMSupportLogInternal();
    return 0;
  }
  uint64_t v9 = MutableCopy;
  pthread_once(&_AMFDRClassInitializeOnce, (void (*)(void))_AMFDRClassInitialize);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 144) = 0;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(void *)(Instance + 48) = AMFDRLocalStore;
    AMFDRPlatformSetImplementation(Instance, a3, a4);
    if (!CFDictionaryGetValue(theDict, @"DSURL")) {
      CFDictionarySetValue(v9, @"DSURL", @"https://skl.apple.com");
    }
    if (!CFDictionaryGetValue(theDict, @"CAURL")) {
      CFDictionarySetValue(v9, @"CAURL", @"https://gg.apple.com");
    }
    if (!CFDictionaryGetValue(theDict, @"SealingURL")) {
      CFDictionarySetValue(v9, @"SealingURL", @"https://ig.apple.com");
    }
    if (AMFDRSetOptions((uint64_t)v11, v9))
    {
      AMFDRCryptoGetPrivateKey((uint64_t)v11);
      AMFDRCryptoGetCert((uint64_t)v11);
      if (v11[9]
        || (CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]), (v11[9] = v12) != 0))
      {
        if (v11[13]
          || (CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]), (v11[13] = v13) != 0))
        {
          if (v11[14]
            || (CFMutableDictionaryRef v14 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]), (v11[14] = v14) != 0))
          {
            if (v11[16]) {
              goto LABEL_20;
            }
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            v11[16] = Mutable;
            if (Mutable) {
              goto LABEL_20;
            }
          }
        }
      }
    }
    else
    {
      CFRelease(v11);
      uint64_t v11 = 0;
    }
  }
  AMSupportLogInternal();
LABEL_20:
  CFRelease(v9);
  return v11;
}

uint64_t AMFDRSetOptions(uint64_t a1, CFTypeRef cf)
{
  if (!a1 || !cf)
  {
LABEL_20:
    AMSupportLogInternal();
    return 0;
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 16) = cf;
  CFRetain(cf);
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"DataStore");
  if (!Value) {
    return 1;
  }
  CFStringRef v6 = Value;
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v6)) {
    return 1;
  }
  if (CFStringCompare(v6, @"Remote", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v10 = AMFDRHTTPStore;
LABEL_17:
    *(void *)(a1 + 48) = v10;
    return 1;
  }
  if (CFStringCompare(v6, @"Local", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v10 = AMFDRLocalStore;
    goto LABEL_17;
  }
  uint64_t v8 = 1;
  if (CFStringCompare(v6, @"Memory", 1uLL) == kCFCompareEqualTo)
  {
    *(void *)(a1 + 48) = &AMFDRMemoryStore;
    if (CFDictionaryGetValue((CFDictionaryRef)cf, @"MemoryStoreURL")) {
      AMFDRLoadMemoryStoreFromFile(a1);
    }
    if (!*(void *)(a1 + 80))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      *(void *)(a1 + 80) = Mutable;
      if (!Mutable) {
        goto LABEL_20;
      }
    }
    return 1;
  }
  return v8;
}

void *AMFDRCreateWithOptions(const __CFAllocator *a1, const __CFDictionary *a2)
{
  return AMFDRCreateWithImplementation(a1, a2, 0, 0);
}

void *AMFDRCreateTypeWithOptions(CFAllocatorRef allocator, const void *a2, const __CFDictionary *a3)
{
  if (a2
    && (!a3
      ? (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]))
      : (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(allocator, 0, a3)),
        (CFDictionaryRef v6 = Mutable) != 0))
  {
    CFDictionarySetValue(Mutable, @"DataStore", a2);
    uint64_t v7 = AMFDRCreateWithImplementation(allocator, v6, 0, 0);
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
  }
  AMSupportSafeRelease();
  return v7;
}

uint64_t AMFDRSetOption(uint64_t cf, const void *a2, const __CFString *a3)
{
  if (!cf) {
    goto LABEL_30;
  }
  if (!*(void *)(cf + 16)) {
    goto LABEL_30;
  }
  if (!a2) {
    goto LABEL_30;
  }
  CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)cf);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, *(CFDictionaryRef *)(cf + 16));
  uint64_t v8 = MutableCopy;
  if (!MutableCopy) {
    goto LABEL_30;
  }
  if (a3)
  {
    if (CFEqual(a2, @"Permissions"))
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"Permissions");
      if (Value)
      {
        if (CFStringCompare(a3, Value, 0))
        {
          uint64_t v10 = *(const void **)(cf + 32);
          if (v10)
          {
            CFRelease(v10);
            *(void *)(cf + 32) = 0;
          }
        }
      }
    }
    CFDictionarySetValue(v8, a2, a3);
  }
  else
  {
    CFDictionaryRemoveValue(MutableCopy, a2);
  }
  if ((AMFDRSetOptions(cf, v8) & 1) == 0) {
    goto LABEL_30;
  }
  if (CFEqual(a2, @"PrivateKey"))
  {
    uint64_t v11 = &kAMFDRPlatformImplementationStation;
    if (*(_UNKNOWN **)(cf + 136) == &kAMFDRPlatformImplementationStation)
    {
      if (off_26C895BA8[0])
      {
        CFMutableDictionaryRef v12 = *(void **)(cf + 144);
        if (v12)
        {
          ((void (*)(void *))off_26C895BA8[0])(v12);
          *(void *)(cf + 144) = 0;
          uint64_t v11 = *(void **)(cf + 136);
        }
      }
      CFMutableDictionaryRef v13 = (uint64_t (*)(void))v11[2];
      if (v13) {
        uint64_t v14 = v13(0);
      }
      else {
        uint64_t v14 = 0;
      }
      *(void *)(cf + 144) = v14;
      AMFDRCryptoGetPrivateKey(cf);
      goto LABEL_27;
    }
LABEL_30:
    AMSupportLogInternal();
    goto LABEL_27;
  }
  if (CFEqual(a2, @"Certificate"))
  {
    unint64_t v15 = *(const void **)(cf + 32);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(cf + 32) = 0;
    }
    AMFDRCryptoGetCert(cf);
  }
LABEL_27:

  return AMSupportSafeRelease();
}

uint64_t AMFDRLoadMemoryStoreFromFile(uint64_t a1)
{
  uint64_t v1 = a1;
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    AMSupportLogInternal();
    goto LABEL_15;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16);
  if (!v2 || !CFDictionaryGetValue(v2, @"MemoryStoreURL"))
  {
    AMSupportLogInternal();
    uint64_t v1 = 0;
    goto LABEL_15;
  }
  uint64_t URLFromString = AMSupportCreateURLFromString();
  if (!URLFromString) {
    goto LABEL_18;
  }
  char v7 = 0;
  if (MEMORY[0x21D45A5F0](URLFromString, &v7)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v7 == 1;
  }
  if (v4)
  {
    if (AMSupportCreateDictionaryFromFileURL()) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = theDict == 0;
    }
    if (!v5)
    {
      uint64_t v1 = AMFDRSetMemoryStore(v1, theDict);
      goto LABEL_15;
    }
LABEL_18:
    AMSupportLogInternal();
    uint64_t v1 = 0;
    goto LABEL_15;
  }
  AMSupportLogInternal();
  uint64_t v1 = 1;
LABEL_15:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v1;
}

void AMFDRSetAssemblyIdentifierToVerify(uint64_t a1, void *key, const __CFString *a3)
{
  if (a1 && (BOOL v4 = *(__CFDictionary **)(a1 + 104)) != 0 && key)
  {
    CFDictionaryRemoveValue(v4, key);
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFStringGetTypeID() && CFStringGetLength(a3) >= 1)
      {
        uint64_t v8 = *(__CFDictionary **)(a1 + 104);
        CFDictionarySetValue(v8, key, a3);
      }
    }
  }
  else
  {
    AMSupportLogInternal();
  }
}

const void *AMFDRGetAssemblyIDToVerify(uint64_t a1, const void *a2)
{
  if (a1 && (CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 104)) != 0 && a2)
  {
    return CFDictionaryGetValue(v2, a2);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

void AMFDRSetSubCCDigestsToVerify(uint64_t a1, void *key, const void *a3)
{
  if (a1 && (BOOL v4 = *(__CFDictionary **)(a1 + 128)) != 0 && key)
  {
    CFDictionaryRemoveValue(v4, key);
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a3) >= 1)
      {
        uint64_t v8 = *(__CFDictionary **)(a1 + 128);
        CFDictionarySetValue(v8, key, a3);
      }
    }
  }
  else
  {
    AMSupportLogInternal();
  }
}

const void *AMFDRGetSubCCDigestsToVerify(uint64_t a1, const void *a2)
{
  if (a1 && (CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 128)) != 0 && a2)
  {
    return CFDictionaryGetValue(v2, a2);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

uint64_t AMFDRGetOptions(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 16);
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDRGetInfo(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 72);
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDRGetCert(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 32);
  }
  AMSupportLogInternal();
  return 0;
}

void AMFDRIncrementStat(CFMutableDictionaryRef *a1, void *key)
{
  uint64_t valuePtr = 0;
  if (a1)
  {
    CFDictionaryRef v3 = a1[9];
    if (v3)
    {
      if (key)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, key);
        if (Value)
        {
          if (!CFNumberGetValue(Value, kCFNumberLongType, &valuePtr))
          {
LABEL_13:
            AMSupportLogInternal();
            return;
          }
          uint64_t v6 = valuePtr + 1;
        }
        else
        {
          uint64_t v6 = 1;
        }
        uint64_t valuePtr = v6;
        CFAllocatorRef v7 = CFGetAllocator(a1);
        CFNumberRef v8 = CFNumberCreate(v7, kCFNumberLongType, &valuePtr);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionarySetValue(a1[9], key, v8);
          CFRelease(v9);
          return;
        }
        goto LABEL_13;
      }
    }
  }

  AMSupportLogInternal();
}

void AMFDRSetStat(CFMutableDictionaryRef *cf, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  if (cf && cf[9] && a2)
  {
    CFAllocatorRef v5 = CFGetAllocator(cf);
    CFNumberRef v6 = CFNumberCreate(v5, kCFNumberLongType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(cf[9], a2, v6);
      CFRelease(v7);
    }
    else
    {
      AMSupportLogInternal();
    }
  }
  else
  {
    AMSupportLogInternal();
  }
}

void AMFDRCopyStatString(CFMutableDictionaryRef *cf, const void *a2, const __CFString *a3)
{
  if (cf && cf[9] && a2 && a3 && (CFAllocatorRef v6 = CFGetAllocator(cf), (Copy = CFStringCreateCopy(v6, a3)) != 0))
  {
    CFStringRef v8 = Copy;
    CFDictionarySetValue(cf[9], a2, Copy);
    CFRelease(v8);
  }
  else
  {
    AMSupportLogInternal();
  }
}

uint64_t AMFDRGetMemoryStore(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 80);
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDRFlushMemoryStoreToFile(uint64_t a1)
{
  if (!a1) {
    goto LABEL_12;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t Value = (uint64_t)CFDictionaryGetValue(v2, @"MemoryStoreURL");
  if (!Value)
  {
    AMSupportLogInternal();
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 80) || !AMSupportCreateURLFromString() || AMSupportWriteDictionarytoFileURL())
  {
LABEL_12:
    AMSupportLogInternal();
    uint64_t Value = 0;
    goto LABEL_8;
  }
  AMSupportLogInternal();
  uint64_t Value = 1;
LABEL_8:
  AMSupportSafeRelease();
  return Value;
}

uint64_t AMFDRSetMemoryStore(uint64_t a1, CFDictionaryRef theDict)
{
  if (a1 && theDict)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 80);
    if (v4)
    {
      CFDictionaryGetCount(v4);
      AMSupportLogInternal();
      CFAllocatorRef v5 = *(const void **)(a1 + 80);
      if (v5) {
        CFRelease(v5);
      }
      *(void *)(a1 + 80) = 0;
    }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theDict);
    *(void *)(a1 + 80) = MutableCopy;
    if (MutableCopy) {
      return 1;
    }
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDRClearMemoryStore(uint64_t a1)
{
  if (a1)
  {
    CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 80);
    if (v2)
    {
      CFDictionaryGetCount(v2);
      AMSupportLogInternal();
      CFDictionaryRef v3 = *(const void **)(a1 + 80);
      if (v3) {
        CFRelease(v3);
      }
      *(void *)(a1 + 80) = 0;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    *(void *)(a1 + 80) = Mutable;
    if (Mutable) {
      return 1;
    }
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDRSetCopyMGOverrideCallback(uint64_t a1, uint64_t a2)
{
  if ((AMFDREntitlementIsEntitled(@"com.apple.libFDR.AllowIdentifierOverride") & 1) != 0 && a1)
  {
    *(void *)(a1 + 88) = a2;
    return 1;
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

uint64_t AMFDRPerformManifestCheck(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t AMFDRCopyClientId(uint64_t a1)
{
  if (a1
    && (uint64_t v1 = *(void **)(a1 + 136), *v1 >= 0x59uLL)
    && (CFDictionaryRef v2 = (uint64_t (*)(uint64_t, void))v1[11]) != 0)
  {
    return v2(a1, *(void *)(a1 + 144));
  }
  else
  {
    return 0;
  }
}

uint64_t AMFDRCopyCertifyClientId(void *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)a1[2];
  if (v2)
  {
    uint64_t Value = CFDictionaryGetValue(v2, @"CertifyClientId");
    if (Value)
    {
      CFDictionaryRef v4 = Value;
      CFRetain(Value);
      return (uint64_t)v4;
    }
  }
  CFAllocatorRef v5 = (void *)a1[17];
  if (*v5 < 0x59uLL) {
    return 0;
  }
  CFAllocatorRef v6 = (uint64_t (*)(void *, uint64_t))v5[11];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = a1[18];

  return v6(a1, v7);
}

CFStringRef AMFDRCopyCertifyClientIdSik(void *a1)
{
  if (!a1) {
    goto LABEL_14;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)a1[2];
  if (v2 && (CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v2, @"CertifySikPub")) != 0)
  {
    CFDataRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 != CFDataGetTypeID()) {
      goto LABEL_14;
    }
    CFAllocatorRef v6 = CFGetAllocator(a1);
    BytePtr = (UInt8 *)CFDataGetBytePtr(v4);
    CFIndex Length = CFDataGetLength(v4);
    CFStringRef SikPubDigestIfNecessary = (const __CFString *)AMFDRDataCreateSikPubDigestIfNecessary(v6, BytePtr, Length);
    if (!SikPubDigestIfNecessary) {
      goto LABEL_14;
    }
    CFAllocatorRef v10 = CFGetAllocator(a1);
    CFStringRef v11 = AMFDRCreateInstanceString(v10, SikPubDigestIfNecessary);
    if (!v11) {
      goto LABEL_14;
    }
    uint64_t v12 = (uint64_t)v11;
  }
  else
  {
    uint64_t SikPub = AMFDRCryptoGetSikPub((uint64_t)a1);
    if (!SikPub)
    {
LABEL_14:
      AMSupportLogInternal();
      CFStringRef v17 = 0;
      goto LABEL_13;
    }
    uint64_t v12 = SikPub;
  }
  uint64_t v14 = AMFDRCopyCertifyClientId(a1);
  if (!v14) {
    goto LABEL_14;
  }
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFStringRef v16 = CFStringCreateWithFormat(v15, 0, @"sik-%@-%@", v14, v12);
  if (!v16) {
    goto LABEL_14;
  }
  CFStringRef v17 = v16;
LABEL_13:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v17;
}

__CFString *AMFDRCopyLibraryVersionString()
{
  CFStringRef v0 = CFStringCreateWithFormat(0, 0, @"%s", "@(#)PROGRAM:FDR  PROJECT:libFDR-1300.60.13\n");
  if (!v0) {
    return @"libFDR-??";
  }
  CFTypeRef v1 = v0;
  CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v0);
  if (MutableCopy)
  {
    CFDictionaryRef v3 = MutableCopy;
    CFStringTrimWhitespace(MutableCopy);
    CFRelease(v1);
    CFTypeRef v1 = CFRetain(v3);
    CFRelease(v3);
  }
  return (__CFString *)v1;
}

uint64_t AMFDRGetTrustError(__CFError *a1)
{
  uint64_t valuePtr = 0;
  if (a1)
  {
    CFDictionaryRef v1 = CFErrorCopyUserInfo(a1);
    if (v1)
    {
      CFDictionaryRef v2 = v1;
      CFDictionaryRef v3 = (const void *)*MEMORY[0x263EFFC88];
      do
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v2, @"AMFDRTrustError");
        CFTypeID v5 = (__CFError *)CFDictionaryGetValue(v2, v3);
        if (!v5) {
          break;
        }
        CFAllocatorRef v6 = v5;
        CFRelease(v2);
        CFDictionaryRef v2 = CFErrorCopyUserInfo(v6);
      }
      while (v2);
      if (Value) {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
      }
      if (v2) {
        CFRelease(v2);
      }
    }
  }
  return valuePtr;
}

uint64_t AMFDRCopyUnderlyingDictionary(__CFError *a1, const void *a2)
{
  if (a1)
  {
    CFDictionaryRef v3 = CFErrorCopyUserInfo(a1);
    if (v3)
    {
      CFDictionaryRef v4 = v3;
      CFTypeID v5 = (const void *)*MEMORY[0x263EFFC88];
      do
      {
        CFDictionaryGetValue(v4, a2);
        CFNumberRef Value = (__CFError *)CFDictionaryGetValue(v4, v5);
        CFRelease(v4);
        if (!Value) {
          break;
        }
        CFDictionaryRef v4 = CFErrorCopyUserInfo(Value);
      }
      while (v4);
    }
  }

  return AMSupportSafeRetain();
}

CFArrayRef AMFDRNonEmptyArrayValueExists(CFDictionaryRef theDict, const void *a2)
{
  CFArrayRef result = 0;
  if (theDict)
  {
    if (a2)
    {
      CFArrayRef result = (const __CFArray *)CFDictionaryGetValue(theDict, a2);
      if (result)
      {
        CFArrayRef v4 = result;
        CFTypeID v5 = CFGetTypeID(result);
        if (v5 == CFArrayGetTypeID()) {
          return (const __CFArray *)(CFArrayGetCount(v4) > 0);
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL AMFDRSetSsoCreateServiceTicketCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    *(void *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
  }
  else
  {
    AMSupportLogInternal();
  }
  return a1 != 0;
}

BOOL AMFDROptionsGetBooleanValue(uint64_t a1, const void *a2, uint64_t a3)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16);
  if (v4)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, a2);
    if (Value)
    {
      CFBooleanRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFBooleanGetTypeID()) {
        return CFBooleanGetValue(v6) != 0;
      }
    }
  }
  return a3;
}

uint64_t AMFDRIsSupported()
{
  return 1;
}

uint64_t _CFDictionaryAddDictionary(__CFDictionary *a1, CFDictionaryRef theDict)
{
  if (!theDict || !a1)
  {
    AMSupportLogInternal();
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFTypeID v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFBooleanRef v6 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(theDict, v5, v6);
  if (Count >= 1)
  {
    CFTypeID v7 = v5;
    CFStringRef v8 = v6;
    do
    {
      CFAllocatorRef v10 = *v7++;
      CFNumberRef v9 = v10;
      CFStringRef v11 = *v8++;
      CFDictionarySetValue(a1, v9, v11);
      --Count;
    }
    while (Count);
    goto LABEL_8;
  }
  if (v5) {
LABEL_8:
  }
    free(v5);
  if (v6) {
    free(v6);
  }
  return 1;
}

uint64_t AMFDRRegisterModuleChallengeCallback(void *a1, CFStringRef theString2, const __CFString *a3)
{
  if (!theString2 || !a3) {
    goto LABEL_11;
  }
  uint64_t v6 = a1[12];
  if (v6)
  {
    while (CFStringCompare(*(CFStringRef *)v6, theString2, 0))
    {
      uint64_t v6 = *(void *)(v6 + 16);
      if (!v6) {
        goto LABEL_6;
      }
    }
    *(void *)(v6 + 8) = a3;
    AMSupportLogInternal();
    return 1;
  }
LABEL_6:
  CFTypeID v7 = (CFStringRef *)malloc_type_malloc(0x18uLL, 0xE00403260BBE2uLL);
  if (v7)
  {
    CFStringRef v8 = v7;
    CFAllocatorRef v9 = CFGetAllocator(a1);
    CFStringRef Copy = CFStringCreateCopy(v9, theString2);
    *CFStringRef v8 = Copy;
    if (Copy)
    {
      CFStringRef v11 = (const __CFString *)a1[12];
      v8[1] = a3;
      v8[2] = v11;
      a1[12] = v8;
      return 1;
    }
    AMSupportLogInternal();
    free(v8);
  }
  else
  {
LABEL_11:
    AMSupportLogInternal();
  }
  return 0;
}

__CFString *AMFDRCreateRecoveryPermissions(__CFString *a1, const __CFString *a2, const __CFString *a3, CFArrayRef theArray, const __CFArray *a5, uint64_t a6)
{
  if (!a1)
  {
    CFStringRef v25 = @"amfdr is NULL";
LABEL_37:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCreateRecoveryPermissions", v25, v26);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v25 = @"sealedDataClass is NULL";
    goto LABEL_37;
  }
  if (!a3)
  {
    CFStringRef v25 = @"sealedDataInstance is NULL";
    goto LABEL_37;
  }
  if (!theArray)
  {
    CFStringRef v25 = @"dataClasses is NULL";
    goto LABEL_37;
  }
  if (!a5)
  {
    CFStringRef v25 = @"dataInstances is NULL";
    goto LABEL_37;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFIndex v12 = CFArrayGetCount(a5);
  CFIndex v13 = CFArrayGetCount(theArray);
  char v14 = v13;
  if (Count != v12)
  {
    CFArrayGetCount(a5);
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCreateRecoveryPermissions", @"CFArrayGetCount(dataClasses) (%ld) != CFArrayGetCount(dataInstances) (%ld)", v14);
    return 0;
  }
  if (v13 >= 1)
  {
    CFIndex v15 = 0;
    PermissionsString = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v15);
      if (!ValueAtIndex)
      {
        CFStringRef format = @"dataClass is NULL";
LABEL_27:
        AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCreateRecoveryPermissions", format, v26);
        goto LABEL_28;
      }
      CFStringRef v18 = ValueAtIndex;
      CFTypeID v19 = CFGetTypeID(ValueAtIndex);
      if (v19 != CFStringGetTypeID())
      {
        AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCreateRecoveryPermissions", @"Object of unexpected type '%@' for key dataClass, expected CFString", (char)v18);
        goto LABEL_28;
      }
      CFStringRef v20 = (const __CFString *)CFArrayGetValueAtIndex(a5, v15);
      if (!v20)
      {
        CFStringRef format = @"dataInstance is NULL";
        goto LABEL_27;
      }
      CFStringRef v21 = v20;
      CFTypeID v22 = CFGetTypeID(v20);
      if (v22 != CFStringGetTypeID())
      {
        char v26 = (char)v21;
        CFStringRef format = @"Object of unexpected type '%@' for key dataInstance, expected CFString";
        goto LABEL_27;
      }
      if (PermissionsString)
      {
        if ((AMFDRDataAppendPermissionsString(a1, 0, v18, v21, PermissionsString) & 1) == 0)
        {
          AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCreateRecoveryPermissions", @"Failed to append permissions string with data class '%@', data instance '%@', action '%d'", (char)v18);
          goto LABEL_29;
        }
      }
      else
      {
        PermissionsString = (__CFString *)AMFDRDataCreatePermissionsString(a1, 0, v18, v21);
        if (!PermissionsString)
        {
          AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCreateRecoveryPermissions", @"Failed to create permissions string for data class '%@', data instance '%@', action '%d'", (char)v18);
          return PermissionsString;
        }
      }
      if (++v15 >= CFArrayGetCount(theArray)) {
        goto LABEL_20;
      }
    }
  }
  PermissionsString = 0;
LABEL_20:
  if ((AMFDRDataAppendPermissionsString(a1, 0, a2, a3, PermissionsString) & 1) == 0
    || (AMFDRDataAppendPermissionsString(a1, 5u, a2, a3, PermissionsString) & 1) == 0)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCreateRecoveryPermissions", @"Failed to append permissions string with data class '%@', data instance '%@', action '%d'", (char)a2);
LABEL_28:
    if (PermissionsString)
    {
LABEL_29:
      CFRelease(PermissionsString);
      return 0;
    }
  }
  return PermissionsString;
}

unint64_t AMFDRSetDigest(CFTypeRef cf, uint64_t a2, uint64_t a3, const void *a4)
{
  unint64_t v4 = (unint64_t)cf;
  if (cf)
  {
    if (a2 && a3 && (CFAllocatorRef v8 = CFGetAllocator(cf), (FullKey = AMFDRDataLocalCreateFullKey(v8, a2, a3)) != 0))
    {
      CFStringRef v10 = FullKey;
      CFStringRef v11 = *(__CFDictionary **)(v4 + 112);
      unint64_t v4 = v11 != 0;
      if (v11)
      {
        if (a4) {
          CFDictionarySetValue(v11, v10, a4);
        }
        else {
          CFDictionaryRemoveValue(v11, v10);
        }
      }
      else
      {
        AMSupportLogInternal();
      }
      CFRelease(v10);
    }
    else
    {
      AMSupportLogInternal();
      return 0;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  return v4;
}

BOOL AMFDRCreateDataSignature(CFTypeRef cf, int a2, uint64_t a3, uint64_t a4, void **a5, void *a6)
{
  int DataSignature = AMFDRCryptoCreateDataSignature(a2, a3, a4, a5, a6, cf);
  if (DataSignature != 100) {
    AMSupportLogInternal();
  }
  return DataSignature == 100;
}

void *AMFDRGetSikOverride(void *cf, uint64_t a2, uint64_t a3)
{
  CFBooleanRef Value = cf;
  if (!cf) {
    return Value;
  }
  if ((*(unsigned char *)(cf[17] + 8) & 2) != 0) {
    return 0;
  }
  if (!a2 || !a3 || (CFAllocatorRef v6 = CFGetAllocator(cf), (FullKey = AMFDRDataLocalCreateFullKey(v6, a2, a3)) == 0))
  {
    AMSupportLogInternal();
    return 0;
  }
  CFStringRef v8 = FullKey;
  CFDictionaryRef v9 = (const __CFDictionary *)Value[15];
  if (v9) {
    CFBooleanRef Value = CFDictionaryGetValue(v9, v8);
  }
  else {
    CFBooleanRef Value = 0;
  }
  CFRelease(v8);
  return Value;
}

void AMFDRSetRestorePeriodOptions(CFTypeRef a1)
{
  CFDictionaryRef v1 = (const void *)_restorePeriodOptions;
  if ((CFTypeRef)_restorePeriodOptions != a1)
  {
    if (a1) {
      a1 = CFRetain(a1);
    }
    _restorePeriodOptions = (uint64_t)a1;
    if (v1)
    {
      CFRelease(v1);
    }
  }
}

uint64_t AMFDRGetRestorePeriodOptions()
{
  return _restorePeriodOptions;
}

uint64_t AMFDRSetRestorePeriodSsoCallback(uint64_t result, uint64_t a2)
{
  _restorePeriodSsoCallback = result;
  _restorePeriodSsoContext = a2;
  return result;
}

uint64_t AMFDREnableRestorePeriodSsoCallback(uint64_t a1)
{
  if (a1) {
    BOOL v1 = _restorePeriodSsoCallback == 0;
  }
  else {
    BOOL v1 = 1;
  }
  uint64_t v2 = !v1;
  if (!v1)
  {
    uint64_t v3 = _restorePeriodSsoContext;
    *(void *)(a1 + 56) = _restorePeriodSsoCallback;
    *(void *)(a1 + 64) = v3;
  }
  return v2;
}

uint64_t AMFDRAddMinimalManifestPropertyItemsToVerify(uint64_t a1, const __CFDictionary *cf)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (*(void *)(a1 + 16)
      && cf
      && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID())
      && CFDictionaryGetCount(cf) > 0)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 16), @"MinimalManifestPropertyCheck");
      if (Value && (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
      {
        CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)v2);
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, v6);
      }
      else
      {
        CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)v2);
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      }
      CFStringRef v11 = (__CFString *)MutableCopy;
      if (MutableCopy)
      {
        CFIndex Count = CFDictionaryGetCount(cf);
        CFIndex v13 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
        char v14 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
        CFIndex v15 = v14;
        if (v13)
        {
          if (v14)
          {
            CFDictionaryGetKeysAndValues(cf, v13, v14);
            if (Count < 1)
            {
LABEL_38:
              AMFDRSetOption(v2, @"MinimalManifestPropertyCheck", v11);
              uint64_t v2 = 1;
              goto LABEL_41;
            }
            uint64_t v16 = 0;
            CFIndex v36 = Count;
            char v37 = v11;
            while (1)
            {
              CFStringRef v17 = v13[v16];
              if (!v17) {
                break;
              }
              CFTypeID v18 = CFGetTypeID(v17);
              if (v18 != CFStringGetTypeID()) {
                break;
              }
              CFTypeID v19 = v15[v16];
              if (!v19) {
                break;
              }
              CFTypeID v20 = CFGetTypeID(v19);
              if (v20 != CFArrayGetTypeID()) {
                break;
              }
              CFArrayRef v21 = (const __CFArray *)v15[v16];
              if (CFDictionaryContainsKey((CFDictionaryRef)v11, v13[v16]))
              {
                CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v11, v13[v16]);
                if (!v22) {
                  break;
                }
                CFArrayRef v23 = v22;
                CFTypeID v24 = CFGetTypeID(v22);
                if (v24 != CFArrayGetTypeID()) {
                  break;
                }
                CFAllocatorRef v25 = CFGetAllocator((CFTypeRef)v2);
                CFMutableArrayRef v26 = CFArrayCreateMutableCopy(v25, 0, v23);
                if (!v26) {
                  break;
                }
                unsigned int v27 = v26;
                if (CFArrayGetCount(v21) >= 1)
                {
                  unsigned int v28 = v15;
                  uint64_t v29 = v2;
                  CFIndex v30 = 0;
                  do
                  {
                    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v21, v30);
                    if (ValueAtIndex)
                    {
                      unsigned int v32 = ValueAtIndex;
                      CFTypeID v33 = CFGetTypeID(ValueAtIndex);
                      if (v33 == CFStringGetTypeID())
                      {
                        v38.CFIndex length = CFArrayGetCount(v23);
                        v38.location = 0;
                        if (!CFArrayContainsValue(v23, v38, v32)) {
                          CFArrayAppendValue(v27, v32);
                        }
                      }
                    }
                    ++v30;
                  }
                  while (v30 < CFArrayGetCount(v21));
                  uint64_t v2 = v29;
                  CFIndex v15 = v28;
                  CFIndex Count = v36;
                  CFStringRef v11 = v37;
                }
              }
              else
              {
                unsigned int v27 = 0;
              }
              if (v27) {
                unsigned int v34 = v27;
              }
              else {
                unsigned int v34 = v21;
              }
              CFDictionarySetValue((CFMutableDictionaryRef)v11, v13[v16], v34);
              if (v27) {
                CFRelease(v27);
              }
              if (++v16 == Count) {
                goto LABEL_38;
              }
            }
          }
        }
      }
      AMSupportLogInternal();
    }
    else
    {
      AMSupportLogInternal();
      CFStringRef v11 = 0;
    }
    uint64_t v2 = 0;
  }
  else
  {
    AMSupportLogInternal();
    CFStringRef v11 = 0;
  }
LABEL_41:
  AMSupportSafeFree();
  AMSupportSafeFree();
  if (v11) {
    CFRelease(v11);
  }
  return v2;
}

uint64_t AMFDRMigrateCredentials(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_19:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRMigrateCredentials", v12, v13);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v12 = @"amfdrSource is NULL";
    goto LABEL_19;
  }
  CFDictionaryRef v5 = (const __CFDictionary *)a2[2];
  if (!v5)
  {
    CFStringRef v12 = @"amfdrSource optionsDict is NULL";
    goto LABEL_19;
  }
  if (*(void *)(a1 + 136) != a2[17])
  {
    CFStringRef v12 = @"amfdr and amfdrSource have different platform implementations";
    goto LABEL_19;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v5, @"Permissions");
  if (Value) {
    AMFDRSetOption(a1, @"Permissions", Value);
  }
  CFStringRef v7 = (const __CFString *)a2[4];
  if (v7) {
    AMFDRSetOption(a1, @"Certificate", v7);
  }
  CFAllocatorRef v8 = *(void (**)(void))(*(void *)(a1 + 136) + 24);
  if (v8 && *(void *)(a1 + 144))
  {
    v8();
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v9 = a2[18];
  CFAllocatorRef v10 = *(uint64_t (**)(uint64_t))(a2[17] + 16);
  if (v10) {
    uint64_t v9 = v10(v9);
  }
  *(void *)(a1 + 144) = v9;
  return 1;
}

CFTypeRef AMFDRCreateCopyWithOptionsOverride(uint64_t a1, const __CFDictionary *a2)
{
  context[1] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    AMSupportLogInternal();
    return 0;
  }
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef v5 = AMFDRCreateWithImplementation(v4, *(CFDictionaryRef *)(a1 + 16), 0, 0);
  CFDictionaryRef v6 = (const void *)v5[3];
  if (v6) {
    CFRelease(v6);
  }
  CFStringRef v7 = *(const void **)(a1 + 24);
  v5[3] = v7;
  if (v7) {
    CFRetain(v7);
  }
  CFAllocatorRef v8 = (const void *)v5[4];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 32);
  v5[4] = v9;
  if (v9) {
    CFRetain(v9);
  }
  *((_WORD *)v5 + 20) = *(_WORD *)(a1 + 40);
  *(_OWORD *)(v5 + 7) = *(_OWORD *)(a1 + 56);
  CFAllocatorRef v10 = (const void *)v5[9];
  if (v10) {
    CFRelease(v10);
  }
  CFStringRef v11 = *(const void **)(a1 + 72);
  v5[9] = v11;
  if (v11) {
    CFRetain(v11);
  }
  CFStringRef v12 = (const void *)v5[10];
  if (v12) {
    CFRelease(v12);
  }
  char v13 = *(const void **)(a1 + 80);
  v5[10] = v13;
  if (v13) {
    CFRetain(v13);
  }
  v5[11] = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  if (!v14)
  {
LABEL_21:
    CFIndex v15 = (const void *)v5[13];
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v16 = *(const void **)(a1 + 104);
    v5[13] = v16;
    if (v16) {
      CFRetain(v16);
    }
    CFStringRef v17 = (const void *)v5[14];
    if (v17) {
      CFRelease(v17);
    }
    CFTypeID v18 = *(const void **)(a1 + 112);
    v5[14] = v18;
    if (v18) {
      CFRetain(v18);
    }
    CFTypeID v19 = (const void *)v5[15];
    if (v19) {
      CFRelease(v19);
    }
    CFTypeID v20 = *(const void **)(a1 + 120);
    v5[15] = v20;
    if (v20) {
      CFRetain(v20);
    }
    CFArrayRef v21 = (const void *)v5[16];
    if (v21) {
      CFRelease(v21);
    }
    CFArrayRef v22 = *(const void **)(a1 + 128);
    v5[16] = v22;
    if (v22) {
      CFRetain(v22);
    }
    if (AMFDRPlatformSetImplementation((uint64_t)v5, *(void **)(a1 + 136), *(void *)(a1 + 144)))
    {
      if (a2)
      {
        context[0] = v5;
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)_AMFDRSetCFDictionaryOptionCallback, context);
      }
      CFTypeRef v23 = CFRetain(v5);
    }
    else
    {
      AMSupportLogInternal();
      CFTypeRef v23 = 0;
    }
LABEL_41:
    CFRelease(v5);
    return v23;
  }
  while (AMFDRRegisterModuleChallengeCallback(v5, *(CFStringRef *)v14, *(const __CFString **)(v14 + 8)))
  {
    uint64_t v14 = *(void *)(v14 + 16);
    if (!v14) {
      goto LABEL_21;
    }
  }
  AMSupportLogInternal();
  AMSupportLogInternal();
  CFTypeRef v23 = 0;
  if (v5) {
    goto LABEL_41;
  }
  return v23;
}

uint64_t _AMFDRSetCFDictionaryOptionCallback(const void *a1, const __CFString *a2, uint64_t *a3)
{
  return AMFDRSetOption(*a3, a1, a2);
}

CFTypeRef AMFDRCreateCopy(uint64_t a1)
{
  return AMFDRCreateCopyWithOptionsOverride(a1, 0);
}

double _AMFDRFinalize(void *a1)
{
  if (!a1) {
    _AMFDRFinalize_cold_1();
  }
  uint64_t v3 = a1 + 2;
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    *uint64_t v3 = 0;
  }
  CFAllocatorRef v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  CFDictionaryRef v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  CFDictionaryRef v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
    a1[9] = 0;
  }
  CFStringRef v7 = (const void *)a1[10];
  if (v7)
  {
    CFRelease(v7);
    a1[10] = 0;
  }
  CFAllocatorRef v8 = (const void *)a1[13];
  if (v8)
  {
    CFRelease(v8);
    a1[13] = 0;
  }
  uint64_t v9 = (const void *)a1[14];
  if (v9)
  {
    CFRelease(v9);
    a1[14] = 0;
  }
  CFAllocatorRef v10 = (const void *)a1[15];
  if (v10)
  {
    CFRelease(v10);
    a1[15] = 0;
  }
  CFStringRef v11 = (const void *)a1[16];
  if (v11)
  {
    CFRelease(v11);
    a1[16] = 0;
  }
  CFStringRef v12 = *(void (**)(void))(a1[17] + 24);
  if (v12 && a1[18])
  {
    v12();
    a1[18] = 0;
  }
  while (1)
  {
    uint64_t v13 = a1[12];
    if (!v13) {
      break;
    }
    a1[12] = *(void *)(v13 + 16);
    if (*(void *)v13) {
      CFRelease(*(CFTypeRef *)v13);
    }
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    free((void *)v13);
  }
  v3[16] = 0;
  double result = 0.0;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  return result;
}

CFStringRef _AMFDRCopyFormattingDescription(uint64_t a1)
{
  if (!a1) {
    _AMFDRCopyFormattingDescription_cold_1();
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"optionsDict=%@", *(void *)(a1 + 16));
}

__SecTask *AMFDREntitlementIsEntitled(const __CFString *a1)
{
  CFErrorRef error = 0;
  uint64_t v2 = SecTaskCreateFromSelf(0);
  uint64_t v3 = v2;
  if (!v2) {
    return v3;
  }
  CFBooleanRef v4 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v2, a1, &error);
  CFBooleanRef v5 = v4;
  if (error) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (v6 || (CFTypeID v7 = CFGetTypeID(v4), v7 != CFBooleanGetTypeID()))
  {
    AMSupportLogInternal();
    CFRelease(v3);
    BOOL v8 = 0;
    uint64_t v3 = 0;
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v8 = CFBooleanGetValue(v5) != 0;
    CFRelease(v3);
  }
  CFRelease(v5);
  uint64_t v3 = (__SecTask *)v8;
LABEL_10:
  if (error) {
    CFRelease(error);
  }
  return v3;
}

CFTypeRef AMFDRPlatformCopyDefaultClientIdByInterface(const void *a1)
{
  if (a1)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      size_t v3 = strlen(off_2642D0FA8[i]);
      CFTypeRef v4 = _CopyClientIdForAdapter(a1, off_2642D0FA8[i], v3);
      if (v4)
      {
        CFTypeRef v12 = v4;
        AMSupportLogInternal();
        return v12;
      }
    }
    CFBooleanRef v5 = if_nameindex();
    if (!v5) {
      goto LABEL_17;
    }
    BOOL v6 = v5;
    if_name = v5->if_name;
    if (if_name)
    {
      p_if_name = &v5[1].if_name;
      do
      {
        if (!strncmp(if_name, "lo0", 3uLL))
        {
          AMSupportLogInternal();
        }
        else
        {
          size_t v9 = strlen(if_name);
          CFTypeRef v10 = _CopyClientIdForAdapter(a1, if_name, v9);
          if (v10)
          {
            CFTypeRef v12 = v10;
            AMSupportLogInternal();
            goto LABEL_15;
          }
        }
        CFStringRef v11 = *p_if_name;
        p_if_name += 2;
        if_name = v11;
      }
      while (v11);
    }
    AMSupportLogInternal();
    CFTypeRef v12 = 0;
LABEL_15:
    MEMORY[0x21D45B5F0](v6);
  }
  else
  {
LABEL_17:
    AMSupportLogInternal();
    return 0;
  }
  return v12;
}

CFTypeRef _CopyClientIdForAdapter(const void *a1, char *a2, size_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFTypeID v18 = 0;
  memset(v19, 170, sizeof(v19));
  size_t size = 0xAAAAAAAAAAAAAAAALL;
  if (!a1 || !a2 || !a3)
  {
    AMSupportLogInternal();
LABEL_24:
    CFTypeRef v9 = 0;
    BOOL v6 = 0;
    goto LABEL_17;
  }
  *(_OWORD *)CFTypeID v19 = xmmword_217DFE860;
  v19[4] = 3;
  v19[5] = if_nametoindex(a2);
  if (!v19[5] || sysctl(v19, 6u, 0, &size, 0, 0) < 0) {
    goto LABEL_24;
  }
  BOOL v6 = (unsigned __int8 *)malloc_type_malloc(size, 0xB277081FuLL);
  if (!v6 || sysctl(v19, 6u, v6, &size, 0, 0) < 0) {
    goto LABEL_14;
  }
  uint64_t v7 = v6[117];
  int v8 = getifaddrs(&v18);
  CFTypeRef v9 = 0;
  CFTypeRef v10 = v18;
  if (!v8 && v18)
  {
    CFStringRef v11 = &v6[v7 + 120];
    while (1)
    {
      if (!strncmp(a2, v10->ifa_name, a3))
      {
        ifa_addr = v10->ifa_addr;
        if (ifa_addr->sa_family == 2) {
          break;
        }
      }
      CFTypeRef v10 = v10->ifa_next;
      if (!v10) {
        goto LABEL_14;
      }
    }
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFStringRef v14 = CFStringCreateWithFormat(v13, 0, @"%02x:%02x:%02x:%02x:%02x:%02x/%u.%u.%u.%u", *v11, v11[1], v11[2], v11[3], v11[4], v11[5], ifa_addr->sa_data[2], ifa_addr->sa_data[3], ifa_addr->sa_data[4], ifa_addr->sa_data[5]);
    if (v14)
    {
      CFStringRef v15 = v14;
      CFTypeRef v9 = CFRetain(v14);
      CFRelease(v15);
      goto LABEL_17;
    }
LABEL_14:
    CFTypeRef v9 = 0;
LABEL_17:
    CFTypeRef v10 = v18;
  }
  if (v10)
  {
    MEMORY[0x21D45B5A0](v10);
    CFTypeID v18 = 0;
  }
  if (v6) {
    free(v6);
  }
  return v9;
}

uint64_t AMFDRPlatformCopyDefaultClientIdByECID()
{
  CFStringRef v0 = AMFDRSealingMapCallMGCopyAnswer(@"UniqueChipID", 0);
  if (!v0)
  {
    AMSupportLogInternal();
    return 0;
  }
  CFStringRef v1 = v0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v3 = AMFDRCreateInstanceString((const __CFAllocator *)*MEMORY[0x263EFFB08], v0);
  if (!v3)
  {
    AMSupportLogInternal();
    CFRelease(v1);
    return 0;
  }
  CFStringRef v4 = v3;
  CFStringRef v5 = AMFDRSealingMapCallMGCopyAnswer(@"ChipID", 0);
  if (v5)
  {
    CFStringRef v6 = AMFDRCreateInstanceString(v2, v5);
    CFStringRef v7 = v6;
    if (v6)
    {
      CFStringRef v8 = CFStringCreateWithFormat(v2, 0, @"%@-%@", v6, v4);
      if (v8)
      {
        uint64_t v9 = AMSupportSafeRetain();
      }
      else
      {
        AMSupportLogInternal();
        uint64_t v9 = 0;
      }
      goto LABEL_7;
    }
    AMSupportLogInternal();
    uint64_t v9 = 0;
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v9 = 0;
    CFStringRef v7 = 0;
  }
  CFStringRef v8 = 0;
LABEL_7:
  CFRelease(v4);
  CFRelease(v1);
  if (v5) {
    CFRelease(v5);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v9;
}

uint64_t AMFDRPlatformCopyDefaultDataDirectoryAppendingPathComponent(const void *a1)
{
  uid_t v2 = getuid();
  CFStringRef v3 = getpwuid(v2);
  if (v3)
  {
    pw_dir = v3->pw_dir;
    if (pw_dir)
    {
      CFAllocatorRef v5 = CFGetAllocator(a1);
      CFIndex v6 = strlen(pw_dir);
      CFURLRef v7 = CFURLCreateFromFileSystemRepresentation(v5, (const UInt8 *)pw_dir, v6, 0);
      if (v7)
      {
        CFURLRef v8 = v7;
        CFAllocatorRef v9 = CFGetAllocator(a1);
        CFURLRef v10 = CFURLCreateCopyAppendingPathComponent(v9, v8, @"Library/Application Support/FDR", 1u);
        if (v10)
        {
          CFURLRef v11 = v10;
          if (!MEMORY[0x21D45A650]())
          {
            CFGetAllocator(a1);
            AMSupportCopyURLWithAppendedComponent();
          }
          CFRelease(v8);
        }
        else
        {
          CFURLRef v11 = v8;
        }
        CFRelease(v11);
      }
    }
  }
  return 0;
}

CFURLRef AMFDRPlatformCopyDefaultDataStoragePath()
{
  if (MEMORY[0x263F53620])
  {
    CFStringRef v0 = (const char *)malloc_type_calloc(1uLL, 0x400uLL, 0x4FE1BD39uLL);
    if (!v0 || lookupPathForPersistentData()) {
      goto LABEL_11;
    }
    CFIndex v1 = strlen(v0);
    CFURLRef v2 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v0, v1, 0);
  }
  else
  {
    CFBooleanRef v3 = (const __CFBoolean *)MGCopyAnswer();
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v5 = @"/System/Library/Caches/com.apple.factorydata";
    if (v3 && CFBooleanGetValue(v3) == 1) {
      CFStringRef v5 = @"/mnt1/System/Library/Caches/com.apple.factorydata";
    }
    CFURLRef v2 = CFURLCreateWithFileSystemPath(v4, v5, kCFURLPOSIXPathStyle, 1u);
  }
  if (!v2)
  {
LABEL_11:
    AMSupportLogInternal();
    CFURLRef v2 = 0;
  }
  AMSupportSafeFree();
  AMSupportSafeRelease();
  return v2;
}

CFStringRef AMFDRDataCreateString(const __CFAllocator *a1, const __CFString *cf, int a3)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFStringGetTypeID())
  {
    if (!a3)
    {
LABEL_17:
      return CFStringCreateCopy(a1, cf);
    }
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      CFIndex Length = CFStringGetLength(cf);
      if ((unint64_t)(Length - 211) < 0xFFFFFFFFFFFFFF2ELL)
      {
        AMSupportLogInternal();
      }
      else
      {
        CFIndex v9 = Length;
        BOOL v10 = 0;
        CFIndex v11 = 0;
        do
        {
          int CharacterAtIndex = CFStringGetCharacterAtIndex(cf, v11);
          if ((CharacterAtIndex - 48) >= 0xA && (CharacterAtIndex & 0xFFFFFFDF) - 65 >= 0x1A)
          {
            uint64_t v14 = 0;
            while (CharacterAtIndex != asc_217E06841[v14])
            {
              if (++v14 == 4) {
                goto LABEL_16;
              }
            }
          }
          BOOL v10 = ++v11 >= v9;
        }
        while (v11 != v9);
LABEL_16:
        if (v10) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_41;
  }
  CFTypeID v16 = CFGetTypeID(cf);
  if (v16 != CFDataGetTypeID())
  {
    CFTypeID v17 = CFGetTypeID(cf);
    if (v17 == CFBooleanGetTypeID())
    {
      if ((const __CFString *)*MEMORY[0x263EFFB40] == cf) {
        CFTypeID v18 = "1";
      }
      else {
        CFTypeID v18 = "0";
      }
      return CFStringCreateWithFormat(a1, 0, @"%s", v18);
    }
    CFTypeID v19 = CFGetTypeID(cf);
    if (v19 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)cf))
    {
      unint64_t ByteSize = CFNumberGetByteSize((CFNumberRef)cf);
      if (ByteSize <= 4)
      {
        int valuePtr = -1431655766;
        if (CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr)) {
          goto LABEL_33;
        }
        goto LABEL_47;
      }
      if (ByteSize == 8)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        if (CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &v22))
        {
          if (HIDWORD(v22))
          {
            CFStringRef result = (CFStringRef)AMSupportCopyHexStringFromUInt64();
            goto LABEL_34;
          }
LABEL_33:
          CFStringRef result = (CFStringRef)AMSupportCopyHexStringFromUInt32();
LABEL_34:
          int v21 = 1;
          goto LABEL_35;
        }
LABEL_47:
        CFStringRef result = (CFStringRef)AMSupportLogInternal();
        int v21 = 4;
LABEL_35:
        if (v21 != 4) {
          return result;
        }
        return 0;
      }
    }
LABEL_41:
    AMSupportLogInternal();
    return 0;
  }

  return (CFStringRef)AMSupportCopyHexStringFromData();
}

CFStringRef AMFDRCreateInstanceString(const __CFAllocator *a1, const __CFString *a2)
{
  return AMFDRDataCreateString(a1, a2, 1);
}

CFStringRef AMFDRDataCreateSikInstanceString(const __CFAllocator *a1, uint64_t a2)
{
  CFBooleanRef v3 = (__CFString *)AMFDRCreateTypeWithOptions(a1, @"Local", 0);
  if (v3)
  {
    CFStringRef SikInstanceStringInternal = AMFDRDataCreateSikInstanceStringInternal(v3, 0, a2);
  }
  else
  {
    AMSupportLogInternal();
    CFStringRef SikInstanceStringInternal = 0;
  }
  AMSupportSafeRelease();
  return SikInstanceStringInternal;
}

CFStringRef AMFDRDataCreateSikInstanceStringInternal(__CFString *cf, uint64_t a2, uint64_t a3)
{
  CFStringRef v3 = cf;
  if (cf)
  {
    if (a3
      && (a2 && (uint64_t SikPub = (uint64_t)AMFDRGetSikOverride(cf, a2, a3)) != 0
       || (uint64_t SikPub = AMFDRCryptoGetSikPub((uint64_t)v3)) != 0)
      && (CFAllocatorRef v6 = CFGetAllocator(v3),
          CFStringRef v7 = CFStringCreateWithFormat(v6, 0, @"sik-%@-%@", a3, SikPub),
          (CFStringRef v8 = v7) != 0)
      && CFStringGetLength(v7) < 211)
    {
      CFStringRef v3 = v8;
    }
    else
    {
      AMSupportLogInternal();
      CFStringRef v3 = 0;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  AMSupportSafeRelease();
  return v3;
}

CFStringRef AMFDRDataCreateInstanceString(__CFString *a1, uint64_t a2, const void *a3)
{
  if (a3)
  {
    if (AMFDRDataInstanceUseSikFormat((uint64_t)a1))
    {
      return AMFDRDataCreateSikInstanceStringInternal(a1, a2, (uint64_t)a3);
    }
    else
    {
      return (const __CFString *)CFRetain(a3);
    }
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

BOOL AMFDRDataInstanceUseSikFormat(uint64_t a1)
{
  if (!a1) {
    return AMFDRSealingMapGetFDRDataVersionForDeviceInternal(0) == 2;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 136) + 8);
  if ((v2 & 8) != 0)
  {
    BOOL v3 = 1;
    if ((v2 & 2) != 0) {
      return 0;
    }
  }
  else
  {
    BOOL v3 = AMFDRSealingMapGetFDRDataVersionForDeviceInternal(a1) == 2;
    if ((*(void *)(*(void *)(a1 + 136) + 8) & 2) != 0) {
      return 0;
    }
  }
  CFDictionaryRef v4 = (const __CFDictionary *)AMFDRGetOptions(a1);
  if (v4)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, @"UseSikDataInstance");
    if (Value) {
      return CFBooleanGetValue(Value) != 0;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  return v3;
}

CFStringRef AMFDRDataCreatePermissionsString(__CFString *cf, unsigned int a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef v4 = a4;
  if (a4)
  {
    if (cf) {
      CFAllocatorRef v8 = CFGetAllocator(cf);
    }
    else {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    }
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(v8, 0);
    if (Mutable)
    {
      BOOL v10 = Mutable;
      if (AMFDRDataAppendPermissionsString(cf, a2, a3, v4, Mutable))
      {
        CFStringRef v4 = (const __CFString *)CFRetain(v10);
      }
      else
      {
        AMSupportLogInternal();
        CFStringRef v4 = 0;
      }
      CFRelease(v10);
    }
    else
    {
      AMSupportLogInternal();
      return 0;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  return v4;
}

uint64_t AMFDRDataAppendPermissionsString(__CFString *cf, unsigned int a2, const __CFString *a3, const __CFString *a4, __CFString *a5)
{
  if (!a4) {
    goto LABEL_16;
  }
  if (a2 == 10) {
    goto LABEL_7;
  }
  if (a2 != 8)
  {
    CFStringRef InstanceString = AMFDRDataCreateInstanceString(cf, (uint64_t)a3, a4);
    if (InstanceString)
    {
      CFStringRef v12 = InstanceString;
      if ((AMFDRAppendPermissionsString(a2, a3, InstanceString, a5) & 1) == 0)
      {
LABEL_17:
        AMSupportLogInternal();
        uint64_t v10 = 0;
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v10 = 1;
LABEL_14:
      CFRelease(v12);
      return v10;
    }
LABEL_16:
    AMSupportLogInternal();
    return 0;
  }
  if (!AMFDRSealingMapEntryHasAttributeForClassInternal((uint64_t)cf, a3, @"ChallengeClaim", 0))
  {
LABEL_7:
    CFStringRef SikInstanceStringInternal = AMFDRDataCreateSikInstanceStringInternal(cf, (uint64_t)a3, (uint64_t)a4);
    if (SikInstanceStringInternal)
    {
      CFStringRef v12 = SikInstanceStringInternal;
      if ((AMFDRAppendPermissionsString(1u, a3, SikInstanceStringInternal, a5) & 1) == 0
        || (AMFDRAppendPermissionsString(0, a3, a4, a5) & 1) == 0)
      {
        goto LABEL_17;
      }
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  if ((AMFDRAppendPermissionsString(8u, a3, a4, a5) & 1) == 0) {
    goto LABEL_16;
  }
  return 1;
}

CFStringRef AMFDRCreatePermissionsString(const __CFAllocator *a1, unsigned int a2, const __CFString *a3, const __CFString *a4)
{
  if (!a3) {
    goto LABEL_10;
  }
  CFStringRef v4 = a4;
  if (!a4)
  {
    AMSupportLogInternal();
    return v4;
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(a1, 0);
  if (!Mutable)
  {
LABEL_10:
    AMSupportLogInternal();
    return 0;
  }
  CFAllocatorRef v8 = Mutable;
  if (AMFDRAppendPermissionsString(a2, a3, v4, Mutable))
  {
    CFStringRef v4 = (const __CFString *)CFRetain(v8);
  }
  else
  {
    AMSupportLogInternal();
    CFStringRef v4 = 0;
  }
  CFRelease(v8);
  return v4;
}

uint64_t AMFDRAppendPermissionsString(unsigned int a1, CFStringRef theString, const __CFString *a3, __CFString *a4)
{
  if (!theString
    || !a3
    || !a4
    || a1 >= 0xF
    || ((0x7BFFu >> a1) & 1) == 0
    || (CFIndex v9 = off_2642D1028[a1], !CFStringGetLength(theString))
    || !CFStringGetLength(a3))
  {
    AMSupportLogInternal();
    return 0;
  }
  if (a1 == 13)
  {
    CFIndex Length = CFStringGetLength(a4);
    CFStringRef v12 = @";%@/Mothership";
    CFStringRef v13 = @"%@/Mothership";
  }
  else
  {
    if (a1 != 7 || CFStringCompare(theString, @"*", 0) || CFStringCompare(a3, @"*", 0))
    {
      if (CFStringGetLength(a4)) {
        CFStringRef v10 = @";%@/%@:%@";
      }
      else {
        CFStringRef v10 = @"%@/%@:%@";
      }
      CFStringAppendFormat(a4, 0, v10, v9, theString, a3);
      return 1;
    }
    CFIndex Length = CFStringGetLength(a4);
    CFStringRef v12 = @";%@/*";
    CFStringRef v13 = @"%@/*";
  }
  if (Length) {
    CFStringAppendFormat(a4, 0, v12, v9);
  }
  else {
    CFStringAppendFormat(a4, 0, v13, v9);
  }
  return 1;
}

uint64_t _AMFDRApTicketIsAppleSigned(const __CFData *a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v40 = v1;
  long long v41 = v1;
  long long v38 = v1;
  long long v39 = v1;
  long long v36 = v1;
  long long v37 = v1;
  long long v34 = v1;
  long long v35 = v1;
  long long v32 = v1;
  long long v33 = v1;
  long long v30 = v1;
  long long v31 = v1;
  long long v28 = v1;
  long long v29 = v1;
  long long v26 = v1;
  long long v27 = v1;
  long long v24 = v1;
  long long v25 = v1;
  long long v22 = v1;
  long long v23 = v1;
  long long v20 = v1;
  long long v21 = v1;
  long long v18 = v1;
  long long v19 = v1;
  long long v16 = v1;
  long long v17 = v1;
  long long v14 = v1;
  long long v15 = v1;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  if (!a1)
  {
    AMSupportLogInternal();
    uint64_t v10 = 6;
    goto LABEL_10;
  }
  CFStringRef v3 = AMFDRSealingMapCallMGCopyAnswer(@"ChipID", 0);
  CFNumberRef v4 = (const __CFNumber *)v3;
  if (!v3 || (CFTypeID v5 = CFGetTypeID(v3), v5 != CFNumberGetTypeID()))
  {
    AMSupportLogInternal();
LABEL_15:
    uint64_t v10 = 0xFFFFFFFFLL;
    goto LABEL_10;
  }
  CFStringRef v6 = AMFDRSealingMapCallMGCopyAnswer(@"UniqueChipID", 0);
  CFNumberRef v7 = (const __CFNumber *)v6;
  if (!v6
    || (CFTypeID v8 = CFGetTypeID(v6), v8 != CFNumberGetTypeID())
    || !CFNumberGetValue(v4, kCFNumberSInt64Type, &v12)
    || !CFNumberGetValue(v7, kCFNumberSInt64Type, &v13))
  {
    AMSupportLogInternal();
    goto LABEL_15;
  }
  CFDataGetBytePtr(a1);
  CFDataGetLength(a1);
  uint64_t inited = Img4DecodeInitManifest();
  if (inited)
  {
    uint64_t v10 = inited;
    AMSupportLogInternal();
  }
  else
  {
    uint64_t v10 = Img4DecodePerformTrustEvaluation();
  }
LABEL_10:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v10;
}

uint64_t _AMFDRApTicketPropertyCallback(int a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (a4)
  {
    if (a3) {
      return 0;
    }
    uint64_t v6 = *a4;
    uint64_t v7 = a4[1];
    if (a1 != 1162037572 && a1 != 1128810832) {
      return 0;
    }
    uint64_t PropertyInteger64 = Img4DecodeGetPropertyInteger64();
    if (!PropertyInteger64)
    {
      if (a1 == 1128810832)
      {
        if (v6) {
          goto LABEL_11;
        }
      }
      else if (v7)
      {
LABEL_11:
        AMSupportLogInternal();
        return 1;
      }
      return 0;
    }
    uint64_t v9 = PropertyInteger64;
    AMSupportLogInternal();
    return v9;
  }
  else
  {
    AMSupportLogInternal();
    return 6;
  }
}

uint64_t AMFDRDataApTicketIsTrusted(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __s1[1] = v2;
  __s1[2] = v2;
  __s1[0] = v2;
  if (!a1) {
    goto LABEL_33;
  }
  uint64_t v3 = a2;
  if (!a2)
  {
    AMSupportLogInternal();
    goto LABEL_29;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)AMFDRGetOptions(a1);
  CFDictionaryRef v5 = v4;
  if (!v4) {
    goto LABEL_33;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, @"APTicketAllowUntrusted");
  if (!Value || (v7 = Value, CFTypeID v8 = CFGetTypeID(Value), v8 != CFBooleanGetTypeID()) || CFBooleanGetValue(v7) != 1)
  {
    CFStringRef v9 = AMFDRSealingMapCallMGCopyAnswer(@"BootManifestHash", 0);
    if (v9)
    {
      CFStringRef v10 = AMFDRSealingMapCallMGCopyAnswer(@"Image4CryptoHashMethod", 0);
      if (v10)
      {
        if (CFStringCompare(v10, @"sha2-384", 1uLL))
        {
          AMSupportLogInternal();
          CFDataGetBytePtr((CFDataRef)v3);
          CFDataGetLength((CFDataRef)v3);
          size_t v11 = 20;
          if (!AMSupportDigestSha1()) {
            goto LABEL_12;
          }
        }
        else
        {
          CFDataGetBytePtr((CFDataRef)v3);
          CFDataGetLength((CFDataRef)v3);
          size_t v11 = 48;
          if (!AMSupportDigestSha384())
          {
LABEL_12:
            BytePtr = CFDataGetBytePtr((CFDataRef)v9);
            if (!memcmp(__s1, BytePtr, v11)) {
              goto LABEL_27;
            }
            AMSupportLogInternal();
            AMSupportLogDumpMemory();
            CFDataGetBytePtr((CFDataRef)v9);
            CFDataGetLength((CFDataRef)v9);
            AMSupportLogDumpMemory();
            CFBooleanRef v13 = (const __CFBoolean *)CFDictionaryGetValue(v5, @"APTicketAllowDigestMismatch");
            if (v13 && (CFBooleanRef v14 = v13, v15 = CFGetTypeID(v13), v15 == CFBooleanGetTypeID()) && CFBooleanGetValue(v14) == 1
              || os_variant_is_recovery())
            {
              AMSupportLogInternal();
            }
            else
            {
              CFStringRef v16 = _AMFDRCopyDataFromDeviceTree("IODeviceTree:/chosen", @"mix-n-match-prevention-status");
              CFDataRef v17 = (const __CFData *)v16;
              if (!v16)
              {
LABEL_34:
                uint64_t v3 = 0;
                goto LABEL_29;
              }
              long long v18 = CFDataGetBytePtr((CFDataRef)v16);
              if (CFDataGetLength(v17) >= 1)
              {
                uint64_t v19 = 0;
                while (!v18[v19])
                {
                  if (++v19 >= CFDataGetLength(v17)) {
                    goto LABEL_26;
                  }
                }
LABEL_30:
                AMSupportLogInternal();
                goto LABEL_34;
              }
            }
LABEL_26:
            if (!_AMFDRApTicketIsAppleSigned((const __CFData *)v3))
            {
LABEL_27:
              AMSupportLogInternal();
              goto LABEL_28;
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_33:
    AMSupportLogInternal();
    goto LABEL_34;
  }
  AMSupportLogInternal();
LABEL_28:
  uint64_t v3 = 1;
LABEL_29:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v3;
}

CFStringRef _AMFDRCopyDataFromDeviceTree(char *path, const __CFString *a2)
{
  CFStringRef v2 = a2;
  if (a2)
  {
    io_registry_entry_t v3 = IORegistryEntryFromPath(*MEMORY[0x263F0EC88], path);
    if (v3)
    {
      io_object_t v4 = v3;
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v3, v2, (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
      uint64_t v6 = CFProperty;
      if (CFProperty && (CFTypeID v7 = CFGetTypeID(CFProperty), v7 == CFDataGetTypeID()))
      {
        CFStringRef v2 = (const __CFString *)CFRetain(v6);
      }
      else
      {
        AMSupportLogInternal();
        CFStringRef v2 = 0;
      }
      IOObjectRelease(v4);
    }
    else
    {
      AMSupportLogInternal();
      CFStringRef v2 = 0;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  AMSupportSafeRelease();
  return v2;
}

uint64_t AMFDRDataApTicketPopulate(uint64_t a1)
{
  uint64_t v1 = a1;
  CFStringRef v9 = 0;
  if (!a1)
  {
    AMSupportLogInternal();
    goto LABEL_11;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16);
  if (!v2)
  {
    AMSupportLogInternal();
    uint64_t v1 = 0;
    goto LABEL_11;
  }
  if (CFDictionaryContainsKey(v2, @"APTicket") || (*(unsigned char *)(*(void *)(v1 + 136) + 8) & 1) != 0)
  {
    CFBooleanRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 16), @"APTicket");
    CFStringRef v6 = (const __CFString *)CFRetain(Value);
    CFStringRef v9 = v6;
  }
  else
  {
    CFBooleanRef v3 = (const __CFBoolean *)MGCopyAnswer();
    if (v3 && !CFBooleanGetValue(v3))
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = __AMFDRDataApTicketPopulate_block_invoke;
      block[3] = &__block_descriptor_tmp_0;
      block[4] = v1;
      if (AMFDRDataApTicketPopulate_onceToken != -1) {
        dispatch_once(&AMFDRDataApTicketPopulate_onceToken, block);
      }
      uint64_t v4 = AMSupportSafeRetain();
    }
    else
    {
      uint64_t v4 = (uint64_t)_AMFDRDataApTicketCopyURL();
    }
    if (!v4 || AMSupportCreateDataFromFileURL()) {
      goto LABEL_20;
    }
    CFDataGetLength((CFDataRef)v9);
    AMSupportLogInternal();
    AMFDRSetOption(v1, @"APTicket", v9);
    CFStringRef v6 = v9;
  }
  if ((AMFDRDataApTicketIsTrusted(v1, (uint64_t)v6) & 1) == 0)
  {
LABEL_20:
    AMSupportLogInternal();
    uint64_t v1 = 0;
    goto LABEL_11;
  }
  uint64_t v1 = 1;
LABEL_11:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v1;
}

CFURLRef __AMFDRDataApTicketPopulate_block_invoke()
{
  CFURLRef result = _AMFDRDataApTicketCopyURL();
  AMFDRDataApTicketPopulate_apticketUrlCached = (uint64_t)result;
  return result;
}

CFURLRef _AMFDRDataApTicketCopyURL()
{
  if (os_variant_is_recovery())
  {
    if (!MEMORY[0x263F53620]) {
      return 0;
    }
    CFStringRef v0 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0xA1753AC3uLL);
    if (v0)
    {
      uint64_t v1 = v0;
      if (!lookupPathForPersistentData())
      {
LABEL_5:
        CFIndex v2 = strlen(v1);
        CFURLRef v3 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v1, v2, 0);
LABEL_6:
        free(v1);
        return v3;
      }
LABEL_10:
      AMSupportLogInternal();
      CFURLRef v3 = 0;
      goto LABEL_6;
    }
LABEL_14:
    AMSupportLogInternal();
    return 0;
  }
  if (MEMORY[0x263F53628])
  {
    uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0xE798E30BuLL);
    if (v4)
    {
      uint64_t v1 = v4;
      if (!lookupPathForPersonalizedData()) {
        goto LABEL_5;
      }
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];

  return CFURLCreateFromFileSystemRepresentation(v5, (const UInt8 *)"/System/Library/Caches/apticket.der", 36, 0);
}

CFDataRef AMFDRDataApTicketCopyObjectProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1
    || (CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 16)) == 0
    || !a2
    || !a3
    || (CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, @"APTicket")) == 0
    || (CFDataRef v5 = Value, CFDataGetBytePtr(Value), CFDataGetLength(v5), Img4DecodeInitManifest())
    || Img4DecodeGetObjectPropertyData()
    || (CFDataRef result = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0xAAAAAAAAAAAAAAAALL)) == 0)
  {
    AMSupportLogInternal();
    return 0;
  }
  return result;
}

CFDataRef AMFDRDataApTicketCopyTrustObjectDigest(uint64_t a1)
{
  CFStringRef v2 = AMFDRSealingMapCallMGCopyAnswer(@"RestoreOSBuild", 0);
  if (v2)
  {
    CFStringRef v3 = v2;
    if (CFBooleanGetValue((CFBooleanRef)v2) == 1) {
      uint64_t v4 = 1919317089;
    }
    else {
      uint64_t v4 = 1718903152;
    }
    CFDataRef v5 = AMFDRDataApTicketCopyObjectProperty(a1, v4, 1145525076);
    CFRelease(v3);
    return v5;
  }
  else
  {
    return AMFDRDataApTicketCopyObjectProperty(a1, 1718903152, 1145525076);
  }
}

uint64_t AMFDRDataSetApTicketAndGetNewestTrustObject(const __CFString *a1, uint64_t a2, void *cf)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)bytes = v4;
  long long v17 = v4;
  CFDataRef theData = 0;
  if (!a1) {
    goto LABEL_30;
  }
  if (!a2) {
    goto LABEL_29;
  }
  uint64_t v6 = (uint64_t)cf;
  if (!cf)
  {
    AMSupportLogInternal();
    goto LABEL_23;
  }
  if (!*(void *)(a2 + 16) || !cf[2])
  {
LABEL_29:
    AMSupportLogInternal();
    uint64_t v6 = 0;
    goto LABEL_23;
  }
  AMFDRSetOption((uint64_t)cf, @"APTicket", a1);
  AMFDRSetOption(a2, @"APTicket", a1);
  CFStringRef v7 = (const __CFString *)AMFDRDataApTicketCopyObjectProperty(a2, 1919317089, 1145525076);
  if (!v7) {
    goto LABEL_30;
  }
  AMFDRSetOption(a2, @"TrustObjectDigest", v7);
  AMFDRSetOption(v6, @"TrustObjectDigest", v7);
  if (AMFDRIsNonDefaultDemotionState_onceToken != -1) {
    dispatch_once(&AMFDRIsNonDefaultDemotionState_onceToken, &__block_literal_global_0);
  }
  if (AMFDRIsNonDefaultDemotionState_result)
  {
    AMSupportLogInternal();
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFB40];
    AMFDRSetOption(a2, @"SkipVerifySik", (const __CFString *)*MEMORY[0x263EFFB40]);
    AMFDRSetOption(v6, @"SkipVerifySik", v8);
  }
  (*(void (**)(uint64_t, void, CFDataRef *, void))(*(void *)(a2 + 48) + 56))(a2, 0, &theData, 0);
  CFStringRef v9 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (!theData) {
    goto LABEL_36;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  if (AMSupportDigestSha256()) {
    goto LABEL_30;
  }
  CFDataRef v10 = CFDataCreate(*v9, bytes, 32);
  if (!v10) {
    goto LABEL_30;
  }
  AMSupportLogInternal();
  if (!theData || !CFEqual(v7, v10))
  {
LABEL_36:
    AMSupportLogInternal();
    AMSupportSafeRelease();
    CFDataRef theData = 0;
    (*(void (**)(uint64_t, void, CFDataRef *, void))(*(void *)(v6 + 48) + 56))(v6, 0, &theData, 0);
    if (!theData) {
      goto LABEL_30;
    }
  }
  AMSupportSafeRelease();
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  if (AMSupportDigestSha256()
    || (CFDataRef v11 = CFDataCreate(*v9, bytes, 32)) == 0
    || !CFEqual(v7, v11)
    || (unint64_t v12 = AMFDRCreateCopy(a2), (v13 = v12) == 0)
    || (AMFDRSetOption((uint64_t)v12, @"SignData", (const __CFString *)*MEMORY[0x263EFFB38]),
        ((*(uint64_t (**)(void *, CFDataRef, void))(v13[6] + 64))(v13, theData, 0) & 1) == 0))
  {
LABEL_30:
    AMSupportLogInternal();
    uint64_t v6 = 0;
    goto LABEL_23;
  }
  AMFDRSetOption(a2, @"TrustObject", (const __CFString *)theData);
  AMFDRSetOption(v6, @"TrustObject", (const __CFString *)theData);
  uint64_t v6 = 1;
LABEL_23:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v6;
}

uint64_t AMFDRIsNonDefaultDemotionState()
{
  if (AMFDRIsNonDefaultDemotionState_onceToken != -1) {
    dispatch_once(&AMFDRIsNonDefaultDemotionState_onceToken, &__block_literal_global_0);
  }
  return AMFDRIsNonDefaultDemotionState_result;
}

uint64_t AMFDRDataCopyTrustObject(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 56))();
}

uint64_t AMFDRDataPutTrustObject(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 64))();
}

uint64_t AMFDRAllowIncompleteData(uint64_t a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)AMFDRGetOptions(a1);
  if (v2)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v2, @"AllowIncompleteData");
    if (Value)
    {
      CFBooleanRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFBooleanGetTypeID() && CFBooleanGetValue(v4) == 1) {
        return 1;
      }
    }
  }
  if (_AMFDRAPTicketHasBooleanEntitlement(a1)) {
    return 1;
  }

  return _AMFDRAPTicketHasBooleanEntitlement(a1);
}

uint64_t _AMFDRAPTicketHasBooleanEntitlement(uint64_t a1)
{
  if (!a1) {
    goto LABEL_10;
  }
  if (*(unsigned char *)(*(void *)(a1 + 136) + 8)) {
    return 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)AMFDRGetOptions(a1);
  if (!v2
    || (CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v2, @"APTicket")) == 0
    || (CFDataRef v4 = Value, (AMFDRDataApTicketIsTrusted(a1, (uint64_t)Value) & 1) == 0)
    || (CFDataGetBytePtr(v4), CFDataGetLength(v4), Img4DecodeInitManifest()))
  {
LABEL_10:
    AMSupportLogInternal();
    return 0;
  }
  int BooleanFromSection = Img4DecodeGetBooleanFromSection();
  uint64_t result = 0;
  if (!BooleanFromSection) {
    return 0;
  }
  return result;
}

uint64_t AMFDRAPTicketAllowsUnsealedData(uint64_t a1)
{
  return _AMFDRAPTicketHasBooleanEntitlement(a1);
}

uint64_t AMFDRAPTicketAllowsIncompleteData(uint64_t a1)
{
  return _AMFDRAPTicketHasBooleanEntitlement(a1);
}

uint64_t __AMFDRIsNonDefaultDemotionState_block_invoke()
{
  CFStringRef v0 = AMFDRSealingMapCallMGCopyAnswer(@"CertificateSecurityMode", 0);
  CFStringRef v1 = AMFDRSealingMapCallMGCopyAnswer(@"EffectiveSecurityModeSEP", 0);
  CFStringRef v2 = AMFDRSealingMapCallMGCopyAnswer(@"EffectiveProductionStatusAp", 0);
  if (v0)
  {
    CFTypeID v3 = CFGetTypeID(v0);
    if (v3 == CFBooleanGetTypeID())
    {
      if (v1)
      {
        CFTypeID v4 = CFGetTypeID(v1);
        if (v4 == CFBooleanGetTypeID())
        {
          if (v2)
          {
            CFTypeID v5 = CFGetTypeID(v2);
            if (v5 == CFBooleanGetTypeID())
            {
              BOOL v6 = CFBooleanGetValue((CFBooleanRef)v0)
                && CFBooleanGetValue((CFBooleanRef)v1)
                && CFBooleanGetValue((CFBooleanRef)v2) == 0;
              AMFDRIsNonDefaultDemotionState_uint64_t result = v6;
            }
          }
        }
      }
    }
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();

  return AMSupportSafeRelease();
}

BOOL AMFDRIsProtoDevice()
{
  CFStringRef v0 = _AMFDRCopyDataFromDeviceTree("IODeviceTree:/arm-io/isp", @"cam-connections-scheme");
  if (v0)
  {
    CFDataRef v1 = (const __CFData *)v0;
    BytePtr = CFDataGetBytePtr((CFDataRef)v0);
    int Length = CFDataGetLength(v1);
    if (BytePtr && Length)
    {
      BOOL v4 = (*BytePtr & 0xEF) == 32;
    }
    else
    {
      AMSupportLogInternal();
      BOOL v4 = 0;
    }
    CFRelease(v1);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
  return v4;
}

BOOL AMFDRDigestEnabled(uint64_t a1, BOOL *a2)
{
  CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"EnableDigest");
  BOOL v5 = (BOOL)Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 != CFBooleanGetTypeID())
    {
      BOOL v5 = 0;
      if (!a2) {
        return v5;
      }
      goto LABEL_7;
    }
    BOOL v5 = CFBooleanGetValue((CFBooleanRef)v5) != 0;
  }
  if (!a2) {
    return v5;
  }
LABEL_7:
  CFBooleanRef v7 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"EnableGetManifest");
  v10 = v7 && (CFBooleanRef v8 = v7, v9 = CFGetTypeID(v7), v9 == CFBooleanGetTypeID()) && CFBooleanGetValue(v8) != 0;
  *a2 = v10;
  return v5;
}

uint64_t AMFDRDataIsDiagnosticMode()
{
  if (AMFDRDataIsDiagnosticMode_onceToken != -1) {
    dispatch_once(&AMFDRDataIsDiagnosticMode_onceToken, &__block_literal_global_212);
  }
  return AMFDRDataIsDiagnosticMode_result;
}

void __AMFDRDataIsDiagnosticMode_block_invoke()
{
  CFStringRef v0 = AMFDRSealingMapCallMGCopyAnswer(@"RestoreOSBuild", 0);
  CFStringRef v1 = v0;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue((CFBooleanRef)v1))
      {
        CFBooleanRef v3 = 0;
LABEL_10:
        CFRelease(v1);
        goto LABEL_11;
      }
    }
  }
  CFStringRef v4 = AMFDRSealingMapCallMGCopyAnswer(@"3kmXfug8VcxLI5yEmsqQKw", 0);
  CFBooleanRef v3 = (const __CFBoolean *)v4;
  if (v4)
  {
    CFTypeID v5 = CFGetTypeID(v4);
    if (v5 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v3)) {
        AMFDRDataIsDiagnosticMode_uint64_t result = 1;
      }
    }
  }
  if (v1) {
    goto LABEL_10;
  }
LABEL_11:
  if (v3)
  {
    CFRelease(v3);
  }
}

CFTypeRef _AMFDRDataCreateUnsignedValueNoCopy(const __CFAllocator *a1, CFDataRef theData, unsigned char *a3, uint64_t a4)
{
  long long v27 = 0;
  unsigned int v26 = 0;
  uint64_t v25 = 0;
  int v24 = 0;
  uint64_t v23 = 0;
  int v22 = 0;
  long long v21 = 0;
  unsigned int v20 = 0;
  if (!theData)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateUnsignedValueNoCopy", @"valueData is NULL", v19);
    return 0;
  }
  BytePtr = CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  if (AMFDRDecodeCombined((uint64_t)BytePtr, Length, &v25, &v24, &v27, &v26)
    && (BOOL v10 = CFDataGetBytePtr(theData),
        unsigned int v11 = CFDataGetLength(theData),
        AMFDRDecodeFDR2Data((uint64_t)v10, v11, &v27, &v26, &v23, &v22)))
  {
    unint64_t v12 = CFDataGetBytePtr(theData);
    unsigned int v13 = CFDataGetLength(theData);
  }
  else
  {
    unint64_t v12 = v27;
    unsigned int v13 = v26;
  }
  if (!v12)
  {
    CFStringRef v18 = @"dataToStrip is NULL";
LABEL_22:
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateUnsignedValueNoCopy", v18, v19);
    return 0;
  }
  if (!v13)
  {
    CFStringRef v18 = @"dataToStripLength is 0";
    goto LABEL_22;
  }
  if (AMFDRDecodeGetImg4RawData((uint64_t)v12, v13, &v21, &v20)) {
    goto LABEL_13;
  }
  unint64_t v12 = v21;
  if (!v21)
  {
    CFStringRef v18 = @"strippedData is NULL";
    goto LABEL_22;
  }
  unsigned int v13 = v20;
  if (!v20)
  {
    CFStringRef v18 = @"strippedDataLength is 0";
    goto LABEL_22;
  }
  if (a3) {
    *a3 = 1;
  }
LABEL_13:
  CFDataRef v14 = CFDataCreateWithBytesNoCopy(a1, v12, v13, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (!v14)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateUnsignedValueNoCopy", @"resultData is NULL", v19);
    return 0;
  }
  CFDataRef v15 = v14;
  CFTypeRef v16 = CFRetain(v14);
  CFRelease(v15);
  return v16;
}

uint64_t AMFDRDataCopyExtraManifests(const void *a1, CFDataRef theData, void *a3, CFTypeRef *a4, uint64_t a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  memset(length, 0, sizeof(length));
  *(void *)&v25[1] = 0;
  v25[0] = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyExtraManifests", @"amfdr is NULL", v23);
    return 0;
  }
  CFDataRef v6 = theData;
  if (!theData)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyExtraManifests", @"valueData is NULL", v23);
    goto LABEL_37;
  }
  BytePtr = CFDataGetBytePtr(theData);
  unsigned int v11 = CFDataGetLength(v6);
  uint64_t v12 = AMFDRDecodeFDR2Data((uint64_t)BytePtr, v11, &length[1], length, &v25[1], v25);
  uint64_t v13 = v12;
  if (!a3)
  {
    CFDataRef v6 = 0;
    goto LABEL_17;
  }
  if (v12 || !*(void *)&length[1] || !length[0])
  {
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v53 = v16;
    long long v54 = v16;
    long long v51 = v16;
    long long v52 = v16;
    long long v49 = v16;
    long long v50 = v16;
    long long v47 = v16;
    long long v48 = v16;
    long long v45 = v16;
    long long v46 = v16;
    long long v43 = v16;
    long long v44 = v16;
    long long v41 = v16;
    long long v42 = v16;
    long long v39 = v16;
    long long v40 = v16;
    long long v37 = v16;
    long long v38 = v16;
    long long v35 = v16;
    long long v36 = v16;
    long long v33 = v16;
    long long v34 = v16;
    long long v31 = v16;
    long long v32 = v16;
    long long v29 = v16;
    long long v30 = v16;
    long long v27 = v16;
    long long v28 = v16;
    CFDataGetBytePtr(v6);
    CFDataGetLength(v6);
    if (!Img4DecodeInit())
    {
      CFDataRef v6 = (const __CFData *)CFRetain(v6);
      if (!v6) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v14;
  long long v54 = v14;
  long long v51 = v14;
  long long v52 = v14;
  long long v49 = v14;
  long long v50 = v14;
  long long v47 = v14;
  long long v48 = v14;
  long long v45 = v14;
  long long v46 = v14;
  long long v43 = v14;
  long long v44 = v14;
  long long v41 = v14;
  long long v42 = v14;
  long long v39 = v14;
  long long v40 = v14;
  long long v37 = v14;
  long long v38 = v14;
  long long v35 = v14;
  long long v36 = v14;
  long long v33 = v14;
  long long v34 = v14;
  long long v31 = v14;
  long long v32 = v14;
  long long v29 = v14;
  long long v30 = v14;
  long long v27 = v14;
  long long v28 = v14;
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFDataRef v6 = CFDataCreate(v15, *(const UInt8 **)&length[1], length[0]);
  if (!v6)
  {
    CFStringRef v22 = @"img4Data is NULL";
LABEL_35:
    AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyExtraManifests", v22, v23);
    goto LABEL_37;
  }
  if (!Img4DecodeInitManifest())
  {
    *a3 = v6;
LABEL_12:
    CFDataRef v6 = 0;
  }
  if (v6)
  {
LABEL_14:
    if (_AMFDRDataCopyImg4Manifest(a1, v6, (CFDataRef *)&cf, a5))
    {
      if (cf)
      {
        *a3 = CFRetain(cf);
        goto LABEL_17;
      }
      CFStringRef v22 = @"deviceManifest is NULL";
      goto LABEL_35;
    }
    AMFDRErrorPushInternal(a5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyExtraManifests", @"_AMFDRDataCopyImg4Manifest failed", v23);
LABEL_37:
    uint64_t v17 = 0;
    goto LABEL_23;
  }
LABEL_17:
  uint64_t v17 = 1;
  if (!a4 || v13 || !*(void *)&v25[1] || !v25[0]) {
    goto LABEL_23;
  }
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFDataRef v19 = CFDataCreate(v18, *(const UInt8 **)&v25[1], v25[0]);
  if (!v19)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyExtraManifests", @"stationManifest is NULL", v23);
    goto LABEL_37;
  }
  CFDataRef v20 = v19;
  *a4 = CFRetain(v19);
  CFRelease(v20);
LABEL_23:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  return v17;
}

uint64_t _AMFDRDataCopyImg4Manifest(const void *a1, CFDataRef theData, CFDataRef *a3, uint64_t a4)
{
  CFAllocatorRef v15 = 0;
  unsigned int v14 = 0;
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_10:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyImg4Manifest", v12, v13);
    return 0;
  }
  if (!theData)
  {
    CFStringRef v12 = @"valueData is NULL";
    goto LABEL_10;
  }
  if (!a3)
  {
    CFStringRef v12 = @"outValueData is NULL";
    goto LABEL_10;
  }
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  if (AMFDRDecodeGetImg4Manifest((uint64_t)BytePtr, Length, &v15, &v14))
  {
    AMFDRErrorPushInternal(a4, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyImg4Manifest", @"AMFDRDecodeGetImg4Manifest failed", v13);
    return 0;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  *a3 = CFDataCreate(v10, v15, v14);
  return 1;
}

uint64_t AMFDRDataCopyDigest(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 48))();
}

uint64_t AMFDRDataPresent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 8))();
}

CFDataRef AMFDRDataCopy(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v10 = @"amfdr is NULL";
LABEL_11:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopy", v10, v11);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v10 = @"dataClassStr is NULL";
    goto LABEL_11;
  }
  if (!a3)
  {
    CFStringRef v10 = @"dataInstanceStr is NULL";
    goto LABEL_11;
  }
  CFDataRef v8 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  if (!v8)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopy", @"%@:%@ get data failed - foundData is NULL", (char)a2);
    return 0;
  }

  return _AMFDRDataCopyFormatted((CFDictionaryRef *)a1, a2, a3, v8, a4);
}

CFDataRef _AMFDRDataCopyFormatted(CFDictionaryRef *a1, const __CFString *a2, const __CFString *a3, CFDataRef ExternalRepresentation, uint64_t a5)
{
  CFDataRef v46 = 0;
  CFTypeRef v47 = 0;
  CFDataRef theData = 0;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  if (!a1)
  {
    CFStringRef v37 = @"amfdr is NULL";
LABEL_62:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", v37, (char)v40);
LABEL_17:
    if (ExternalRepresentation)
    {
      CFRelease(ExternalRepresentation);
LABEL_19:
      CFDataRef v22 = 0;
LABEL_49:
      ExternalRepresentation = 0;
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  CFDictionaryRef v8 = a1[2];
  if (!v8)
  {
    CFStringRef v37 = @"amfdr->optionsDict is NULL";
    goto LABEL_62;
  }
  if (!a2)
  {
    CFStringRef v37 = @"dataClassStr is NULL";
    goto LABEL_62;
  }
  if (!a3)
  {
    CFStringRef v37 = @"dataInstanceStr is NULL";
    goto LABEL_62;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v8, @"VerifyData");
  CFBooleanRef v11 = Value;
  if (Value)
  {
    CFTypeID v12 = CFGetTypeID(Value);
    if (v12 != CFBooleanGetTypeID())
    {
      long long v40 = @"VerifyData";
LABEL_61:
      CFStringRef v37 = @"Invalid type for '%@'. Expected CFBoolean.";
      goto LABEL_62;
    }
  }
  CFBooleanRef v13 = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"StripImg4");
  CFBooleanRef v14 = v13;
  if (v13)
  {
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 != CFBooleanGetTypeID())
    {
      long long v40 = @"StripImg4";
      goto LABEL_61;
    }
  }
  uint64_t v16 = a5;
  CFBooleanRef v17 = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"GetCombined");
  CFBooleanRef v18 = v17;
  if (v17)
  {
    CFTypeID v19 = CFGetTypeID(v17);
    if (v19 != CFBooleanGetTypeID())
    {
      long long v41 = @"GetCombined";
      CFStringRef v21 = @"Invalid type for '%@'. Expected CFBoolean.";
      goto LABEL_16;
    }
  }
  if (v14 && (int v20 = CFBooleanGetValue(v14), v18) && v20)
  {
    if (CFBooleanGetValue(v18))
    {
      long long v41 = @"StripImg4";
      CFStringRef v21 = @"Cannot specify both %@ and %@ with value TRUE";
LABEL_16:
      AMFDRErrorPushInternal(v16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", v21, (char)v41);
      goto LABEL_17;
    }
  }
  else if (!v18)
  {
    BOOL v23 = 0;
    if (v14) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  BOOL v23 = CFBooleanGetValue(v18) != 0;
  if (v14)
  {
LABEL_22:
    BOOL v24 = CFBooleanGetValue(v14) != 0;
    goto LABEL_25;
  }
LABEL_24:
  BOOL v24 = 0;
LABEL_25:
  char v25 = _AMFDRDataCopyUnCombinedValue(a1, v24, ExternalRepresentation, &v46, v16);
  if (ExternalRepresentation) {
    CFRelease(ExternalRepresentation);
  }
  if ((v25 & 1) == 0)
  {
    AMFDRErrorPushInternal(v16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", @"_AMFDRDataCopyUnCombinedValue failed", (char)v40);
    goto LABEL_19;
  }
  if (!v46)
  {
    char v42 = (char)a2;
    CFStringRef v38 = @"%@:%@ get data failed - uncombinedData is NULL";
    goto LABEL_68;
  }
  if (v11 && !CFBooleanGetValue(v11))
  {
    CFDataRef v31 = v46;
    unint64_t v45 = (unint64_t)v46;
    if (!v23) {
      goto LABEL_48;
    }
  }
  else
  {
    CFBooleanRef v26 = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"VerifyAsidInSubCC");
    CFDataRef v27 = v46;
    if (v26) {
      BOOL v28 = CFBooleanGetValue(v26) != 0;
    }
    else {
      BOOL v28 = 0;
    }
    if (v23) {
      long long v29 = 0;
    }
    else {
      long long v29 = (CFDataRef *)&v47;
    }
    if ((AMFDRDataVerifyInternal((uint64_t)a1, a2, a3, 0, v27, 0, v28, v29, v16) & 1) == 0) {
      AMFDRErrorPushInternal(v16, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", @"%@:%@ Data verification failed", (char)a2);
    }
    if (!v23)
    {
      if (v47)
      {
        CFTypeID v30 = CFGetTypeID(v47);
        if (v30 == CFDataGetTypeID())
        {
          CFDataRef v31 = (CFDataRef)v47;
          unint64_t v45 = (unint64_t)v47;
LABEL_48:
          CFDataRef v22 = (CFDataRef)CFRetain(v31);
          goto LABEL_49;
        }
        char v42 = (char)a2;
        CFStringRef v38 = @"%@:%@ Invalid type for rawValueData. Expected CFData.";
      }
      else
      {
        char v42 = (char)a2;
        CFStringRef v38 = @"%@:%@ rawValueData is NULL";
      }
LABEL_68:
      AMFDRErrorPushInternal(v16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", v38, v42);
      goto LABEL_19;
    }
  }
  CFAllocatorRef v32 = CFGetAllocator(a1);
  ExternalRepresentation = CFStringCreateExternalRepresentation(v32, a3, 0x8000100u, 0x20u);
  if (!ExternalRepresentation)
  {
    AMFDRErrorPushInternal(v16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", @"dataInstanceData is NULL", (char)v40);
LABEL_71:
    CFDataRef v22 = 0;
    goto LABEL_72;
  }
  CFAllocatorRef v33 = CFGetAllocator(a1);
  if ((AMFDRDataStripExtraManifest(v33, v46, (CFTypeRef *)&theData, 0, v16) & 1) == 0)
  {
    AMFDRErrorPushInternal(v16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", @"AMFDRDataStripExtraManifest failed", (char)v40);
    goto LABEL_71;
  }
  AMSupportSafeRelease();
  CFDataRef v46 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  if (AMFDRDecodeGetImg4RawData((uint64_t)BytePtr, Length, 0, 0))
  {
    AMSupportLogInternal();
    CFDataRef v22 = (CFDataRef)CFRetain(theData);
    goto LABEL_72;
  }
  char Combined = AMFDRDataCreateCombined(a1, theData, 0, (CFDataRef *)&v45, v16);
  CFDataRef theData = 0;
  if ((Combined & 1) == 0)
  {
    AMFDRErrorPushInternal(v16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", @"AMFDRDataCreateCombined failed", (char)v40);
    goto LABEL_71;
  }
  CFDataRef v22 = (CFDataRef)v45;
  if (!v45) {
    AMFDRErrorPushInternal(v16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormatted", @"AMFDRDataCreateCombined returned returnData == NULL", (char)v40);
  }
LABEL_72:
  if (v47)
  {
    CFRelease(v47);
    CFTypeRef v47 = 0;
  }
  if (v46)
  {
    CFRelease(v46);
    CFDataRef v46 = 0;
  }
  if (theData)
  {
    CFRelease(theData);
    CFDataRef theData = 0;
  }
  if (ExternalRepresentation) {
    CFRelease(ExternalRepresentation);
  }
  return v22;
}

uint64_t AMFDRDataCopyRawAndFormatted(uint64_t a1, const __CFString *a2, const __CFString *a3, CFTypeRef *a4, CFTypeRef *a5, uint64_t a6)
{
  if (!a1)
  {
    CFStringRef v15 = @"amfdr is NULL";
LABEL_10:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawAndFormatted", v15, v16);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v15 = @"dataClassStr is NULL";
    goto LABEL_10;
  }
  if (!a3)
  {
    CFStringRef v15 = @"dataInstanceStr is NULL";
    goto LABEL_10;
  }
  CFDataRef v12 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  if (v12)
  {
    CFDataRef v13 = v12;
    if (_AMFDRDataCopyFormattedRawAndImg4((CFDictionaryRef *)a1, a2, a3, a4, a5, v12, a6)) {
      return 1;
    }
    AMFDRErrorPushInternal(a6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawAndFormatted", @"_AMFDRDataCopyFormattedRawAndImg4 failed", v16);
    CFRelease(v13);
  }
  else
  {
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawAndFormatted", @"%@:%@ get data failed - foundData is NULL", (char)a2);
  }
  return 0;
}

uint64_t _AMFDRDataCopyFormattedRawAndImg4(CFDictionaryRef *a1, const __CFString *a2, const __CFString *a3, CFTypeRef *a4, CFTypeRef *a5, CFDataRef ExternalRepresentation, uint64_t a7)
{
  CFDataRef v47 = 0;
  CFDataRef v48 = 0;
  CFDataRef theData = 0;
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (!a1)
  {
    CFStringRef v20 = @"amfdr is NULL";
    goto LABEL_14;
  }
  CFDictionaryRef v10 = a1[2];
  if (!v10)
  {
    CFStringRef v20 = @"amfdr->optionsDict is NULL";
    goto LABEL_14;
  }
  if (!a2)
  {
    CFStringRef v20 = @"dataClassStr is NULL";
    goto LABEL_14;
  }
  if (!a3)
  {
    CFStringRef v20 = @"dataInstanceStr is NULL";
    goto LABEL_14;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v10, @"StripImg4");
  CFBooleanRef v14 = Value;
  if (Value)
  {
    CFTypeID v15 = CFGetTypeID(Value);
    if (v15 != CFBooleanGetTypeID())
    {
      long long v41 = @"StripImg4";
LABEL_62:
      CFStringRef v20 = @"Invalid type for '%@'. Expected CFBoolean.";
      goto LABEL_14;
    }
  }
  CFBooleanRef v16 = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"GetCombined");
  CFBooleanRef v17 = v16;
  if (v16)
  {
    CFTypeID v18 = CFGetTypeID(v16);
    if (v18 != CFBooleanGetTypeID())
    {
      long long v41 = @"GetCombined";
      goto LABEL_62;
    }
  }
  if (v14 && (int v19 = CFBooleanGetValue(v14), v17) && v19)
  {
    if (CFBooleanGetValue(v17))
    {
      long long v41 = @"StripImg4";
      CFStringRef v20 = @"Cannot specify both %@ and %@ with value TRUE";
LABEL_14:
      AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormattedRawAndImg4", v20, (char)v41);
      if (!ExternalRepresentation)
      {
LABEL_17:
        uint64_t v21 = 0;
        goto LABEL_42;
      }
      CFRelease(ExternalRepresentation);
LABEL_16:
      ExternalRepresentation = 0;
      goto LABEL_17;
    }
  }
  else if (!v17)
  {
    BOOL v22 = 0;
    if (v14) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  BOOL v22 = CFBooleanGetValue(v17) != 0;
  if (v14)
  {
LABEL_20:
    BOOL v23 = CFBooleanGetValue(v14) != 0;
    goto LABEL_23;
  }
LABEL_22:
  BOOL v23 = 0;
LABEL_23:
  char v24 = _AMFDRDataCopyUnCombinedValue(a1, v23, ExternalRepresentation, &v47, a7);
  if (ExternalRepresentation) {
    CFRelease(ExternalRepresentation);
  }
  if ((v24 & 1) == 0)
  {
    AMFDRErrorPushInternal(a7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormattedRawAndImg4", @"_AMFDRDataCopyUnCombinedValue failed", (char)v41);
    goto LABEL_16;
  }
  if (!v47)
  {
    char v42 = (char)a2;
    CFStringRef v39 = @"%@:%@ get data failed - uncombinedData is NULL";
    goto LABEL_67;
  }
  CFBooleanRef v25 = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"VerifyAsidInSubCC");
  CFDataRef v26 = v47;
  if (v25) {
    BOOL v27 = CFBooleanGetValue(v25) != 0;
  }
  else {
    BOOL v27 = 0;
  }
  if ((AMFDRDataVerifyInternal((uint64_t)a1, a2, a3, 0, v26, 0, v27, &v48, a7) & 1) == 0) {
    AMFDRErrorPushInternal(a7, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormattedRawAndImg4", @"%@:%@ Data verification failed", (char)a2);
  }
  if (!v22)
  {
    if (v48)
    {
      CFTypeID v33 = CFGetTypeID(v48);
      if (v33 == CFDataGetTypeID())
      {
        CFDataRef v34 = v47;
        CFTypeRef cf = v47;
        *a4 = CFRetain(v48);
        CFTypeRef v32 = CFRetain(v34);
        ExternalRepresentation = 0;
        goto LABEL_40;
      }
      char v42 = (char)a2;
      CFStringRef v39 = @"%@:%@ Invalid type for rawValueData. Expected CFData.";
    }
    else
    {
      char v42 = (char)a2;
      CFStringRef v39 = @"%@:%@ rawValueData is NULL";
    }
LABEL_67:
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormattedRawAndImg4", v39, v42);
    goto LABEL_16;
  }
  CFTypeRef cf = v47;
  CFAllocatorRef v28 = CFGetAllocator(a1);
  ExternalRepresentation = CFStringCreateExternalRepresentation(v28, a3, 0x8000100u, 0x20u);
  if (!ExternalRepresentation)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormattedRawAndImg4", @"dataInstanceData is NULL", (char)v41);
    goto LABEL_17;
  }
  CFAllocatorRef v29 = CFGetAllocator(a1);
  if ((AMFDRDataStripExtraManifest(v29, v47, (CFTypeRef *)&theData, 0, a7) & 1) == 0)
  {
    CFStringRef v40 = @"AMFDRDataStripExtraManifest failed";
    goto LABEL_71;
  }
  AMSupportSafeRelease();
  CFDataRef v47 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  if (!AMFDRDecodeGetImg4RawData((uint64_t)BytePtr, Length, 0, 0))
  {
    char Combined = AMFDRDataCreateCombined(a1, theData, 0, (CFDataRef *)&cf, a7);
    CFDataRef theData = 0;
    if ((Combined & 1) == 0)
    {
      AMFDRErrorPushInternal(a7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormattedRawAndImg4", @"AMFDRDataCreateCombined failed", (char)v41);
      goto LABEL_17;
    }
    CFTypeRef v38 = cf;
    if (cf)
    {
      *a5 = cf;
      CFTypeRef v32 = CFRetain(v38);
      long long v35 = a4;
      goto LABEL_41;
    }
    CFStringRef v40 = @"AMFDRDataCreateCombined returned returnData == NULL";
LABEL_71:
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyFormattedRawAndImg4", v40, (char)v41);
    goto LABEL_17;
  }
  AMSupportLogInternal();
  *a4 = CFRetain(theData);
  CFTypeRef v32 = CFRetain(theData);
LABEL_40:
  long long v35 = a5;
LABEL_41:
  *long long v35 = v32;
  uint64_t v21 = 1;
LABEL_42:
  if (v48)
  {
    CFRelease(v48);
    CFDataRef v48 = 0;
  }
  if (v47)
  {
    CFRelease(v47);
    CFDataRef v47 = 0;
  }
  if (theData)
  {
    CFRelease(theData);
    CFDataRef theData = 0;
  }
  if (ExternalRepresentation) {
    CFRelease(ExternalRepresentation);
  }
  return v21;
}

__CFString *AMFDRDataGetMultiActionDescription(unsigned int a1)
{
  if (a1 > 4) {
    return @"Unknown";
  }
  else {
    return off_2642D10A0[a1];
  }
}

CFTypeRef AMFDRDataMultiCopy(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  return _AMFDRDataMultiCopyInternal(a1, a2, a3, 0, 0, a4);
}

CFTypeRef _AMFDRDataMultiCopyInternal(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, CFTypeRef *a6)
{
  context[3] = *MEMORY[0x263EF8340];
  CFDictionaryRef theDict = 0;
  CFDictionaryRef v26 = 0;
  memset(context, 170, 24);
  if (!a1)
  {
    CFStringRef format = @"amfdr is NULL";
LABEL_35:
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyInternal", format, v24);
LABEL_10:
    CFTypeRef v13 = 0;
    goto LABEL_46;
  }
  if (!a2)
  {
    CFStringRef format = @"dataClassArray is NULL";
    goto LABEL_35;
  }
  if (!a3)
  {
    CFStringRef format = @"dataInstanceArray is NULL";
    goto LABEL_35;
  }
  if (a6 && *a6)
  {
    CFRelease(*a6);
    *a6 = 0;
  }
  switch(a4)
  {
    case 0:
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t, CFTypeRef *))(a1[6] + 88))(a1, a2, a3, a6);
      break;
    case 1:
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, CFTypeRef *))(a1[6] + 136))(a1, a2, a3, a5, a6);
      break;
    case 2:
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t, CFTypeRef *))(a1[6] + 152))(a1, a2, a3, a6);
      break;
    case 3:
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t, CFTypeRef *))(a1[6] + 168))(a1, a2, a3, a6);
      break;
    case 4:
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t, CFTypeRef *))(a1[6] + 224))(a1, a2, a3, a6);
      break;
    default:
      AMFDRErrorPushInternal((uint64_t)a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyInternal", @"Unsupported multi action: %d", a4);
      goto LABEL_10;
  }
  CFBooleanRef v14 = (const void *)v12;
  if (!v12)
  {
    AMSupportLogInternal();
    goto LABEL_10;
  }
  if (a6 && *a6)
  {
    if (CFErrorGetCode((CFErrorRef)*a6) == 21)
    {
      CFDictionaryRef v15 = CFErrorCopyUserInfo((CFErrorRef)*a6);
      if (v15)
      {
        CFDictionaryRef v16 = v15;
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v15, @"MultiRequestErrors");
        CFDictionaryRef theDict = Value;
        if (!Value)
        {
          AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyInternal", @"MultiRequestErrors not in userInfo", v24);
          CFTypeRef v13 = 0;
          goto LABEL_43;
        }
        CFDictionaryRef v18 = (const __CFDictionary *)CFRetain(Value);
        CFDictionaryRef theDict = v18;
        if (!a4) {
          goto LABEL_22;
        }
LABEL_26:
        CFDictionaryRef v26 = (CFDictionaryRef)CFRetain(v14);
        goto LABEL_27;
      }
      AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyInternal", @"userInfo is NULL", v24);
    }
    else
    {
      AMSupportLogInternal();
    }
LABEL_49:
    CFTypeRef v13 = 0;
    goto LABEL_44;
  }
  CFAllocatorRef v20 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef theDict = Mutable;
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyInternal", @"multiRequestErrors is NULL", v24);
    goto LABEL_49;
  }
  CFDictionaryRef v18 = Mutable;
  CFDictionaryRef v16 = 0;
  if (a4) {
    goto LABEL_26;
  }
LABEL_22:
  CFAllocatorRef v19 = CFGetAllocator(a1);
  CFDictionaryRef v26 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v26)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyInternal", @"formattedDict is NULL", v24);
    goto LABEL_42;
  }
  context[0] = a1;
  context[1] = &v26;
  void context[2] = &theDict;
  CFDictionaryApplyFunction((CFDictionaryRef)v14, (CFDictionaryApplierFunction)_AMFDRDataMultiCopyCallbak, context);
  CFDictionaryRef v18 = theDict;
LABEL_27:
  if (CFDictionaryGetCount(v18) >= 1) {
    AMFDRErrorPushInternal((uint64_t)a6, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyInternal", @"_AMFDRDataMultiCopyCallbak got errors", v24);
  }
  if (CFDictionaryGetCount(v26) < 1)
  {
LABEL_42:
    CFTypeRef v13 = 0;
    if (!v16) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  CFTypeRef v13 = CFRetain(v26);
  if (v16) {
LABEL_43:
  }
    CFRelease(v16);
LABEL_44:
  CFRelease(v14);
  if (v26)
  {
    CFRelease(v26);
    CFDictionaryRef v26 = 0;
  }
LABEL_46:
  if (theDict) {
    CFRelease(theDict);
  }
  return v13;
}

uint64_t AMFDRDataStripExtraManifest(const __CFAllocator *a1, CFDataRef theData, CFTypeRef *a3, CFTypeRef *a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  memset(length, 0, sizeof(length));
  *(void *)&v18[1] = 0;
  v18[0] = 0;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v46 = v7;
  long long v47 = v7;
  long long v44 = v7;
  long long v45 = v7;
  long long v42 = v7;
  long long v43 = v7;
  long long v40 = v7;
  long long v41 = v7;
  long long v38 = v7;
  long long v39 = v7;
  long long v36 = v7;
  long long v37 = v7;
  long long v34 = v7;
  long long v35 = v7;
  long long v32 = v7;
  long long v33 = v7;
  long long v30 = v7;
  long long v31 = v7;
  long long v28 = v7;
  long long v29 = v7;
  long long v27 = v7;
  long long v25 = v7;
  long long v26 = v7;
  long long v23 = v7;
  long long v24 = v7;
  long long v21 = v7;
  long long v22 = v7;
  long long v20 = v7;
  if (!a1)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataStripExtraManifest", @"amfdr is NULL", v17);
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  if (!theData)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataStripExtraManifest", @"valueData is NULL", v17);
LABEL_19:
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  BytePtr = CFDataGetBytePtr(theData);
  unsigned int v12 = CFDataGetLength(theData);
  if (AMFDRDecodeFDR2Data((uint64_t)BytePtr, v12, &length[1], length, &v18[1], v18)
    || Img4DecodeInit()
    || Img4DecodeInitManifest())
  {
    CFTypeRef v13 = CFRetain(theData);
    CFDataRef v14 = 0;
    goto LABEL_7;
  }
  CFTypeRef v13 = CFDataCreate(a1, *(const UInt8 **)&length[1], length[0]);
  if (!v13)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataStripExtraManifest", @"img4Data is NULL", v17);
    goto LABEL_19;
  }
  CFDataRef v14 = CFDataCreate(a1, *(const UInt8 **)&v18[1], v18[0]);
  if (!v14)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataStripExtraManifest", @"strippedManifest is NULL", v17);
    uint64_t v15 = 0;
    goto LABEL_13;
  }
LABEL_7:
  if (a3 && v13) {
    *a3 = CFRetain(v13);
  }
  uint64_t v15 = 1;
  if (a4 && v14) {
    *a4 = CFRetain(v14);
  }
LABEL_13:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v15;
}

CFTypeRef AMFDRDataCopyForPut(uint64_t a1, const __CFString *a2, const void *a3, const __CFData *a4, __CFString *a5, uint64_t a6)
{
  return _AMFDRDataCopyForPutWithManifest(a1, a2, a3, a4, a5, 0, 0, a6);
}

CFTypeRef _AMFDRDataCopyForPutWithManifest(uint64_t a1, const __CFString *a2, const void *a3, const __CFData *a4, __CFString *cf, char a6, const __CFData *a7, uint64_t a8)
{
  CFDataRef v42 = 0;
  CFDataRef v43 = 0;
  CFTypeRef v40 = 0;
  CFTypeRef cfa = 0;
  if (!a1)
  {
    CFStringRef v27 = @"amfdr is NULL";
    goto LABEL_69;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v27 = @"amfdr->optionsDict is NULL";
    goto LABEL_69;
  }
  if (!a2)
  {
    CFStringRef v27 = @"dataClassStr is NULL";
    goto LABEL_69;
  }
  if (!a3)
  {
    CFStringRef v27 = @"dataInstanceStr is NULL";
    goto LABEL_69;
  }
  if (!a4)
  {
    CFStringRef v27 = @"valueData is NULL";
    goto LABEL_69;
  }
  CFDataRef v14 = cf;
  if (cf)
  {
    CFTypeID v15 = CFGetTypeID(cf);
    if (v15 != CFNullGetTypeID())
    {
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 != CFDictionaryGetTypeID())
      {
        CFStringRef v27 = @"options has invalid type";
        goto LABEL_69;
      }
    }
  }
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"SignData");
  if (!Value)
  {
    if (_AMFDRDataCopyUnCombinedValue((CFDictionaryRef *)a1, 1, a4, &v43, a8))
    {
      CFDataRef v22 = v43;
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    goto LABEL_56;
  }
  CFDictionaryRef v18 = Value;
  CFTypeID v19 = CFGetTypeID(Value);
  if (v19 != CFBooleanGetTypeID())
  {
    long long v38 = @"SignData";
LABEL_68:
    CFStringRef v27 = @"Invalid type for '%@'. Expected CFBoolean.";
    goto LABEL_69;
  }
  CFTypeID v20 = CFGetTypeID(v18);
  if (v20 != CFBooleanGetTypeID())
  {
    if (_AMFDRDataCopyUnCombinedValue((CFDictionaryRef *)a1, 0, a4, &v43, a8))
    {
      CFDataRef v22 = v43;
      goto LABEL_28;
    }
    goto LABEL_56;
  }
  int v21 = CFBooleanGetValue((CFBooleanRef)v18);
  if ((_AMFDRDataCopyUnCombinedValue((CFDictionaryRef *)a1, v21 != 0, a4, &v43, a8) & 1) == 0)
  {
LABEL_56:
    CFStringRef v36 = @"_AMFDRDataCopyUnCombinedValue failed";
LABEL_61:
    AMFDRErrorPushInternal(a8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyForPutWithManifest", v36, (char)v38);
    goto LABEL_70;
  }
  CFDataRef v22 = v43;
  if (!v21) {
    goto LABEL_28;
  }
  if (!v14) {
    goto LABEL_26;
  }
LABEL_18:
  CFTypeID v23 = CFGetTypeID(v14);
  if (v23 != CFDictionaryGetTypeID())
  {
    CFDataRef v14 = 0;
    goto LABEL_26;
  }
  long long v24 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v14, @"AssemblyID");
  CFDataRef v14 = v24;
  if (v24)
  {
    CFTypeID v25 = CFGetTypeID(v24);
    if (v25 != CFNullGetTypeID())
    {
      CFTypeID v26 = CFGetTypeID(v14);
      if (v26 != CFStringGetTypeID())
      {
        CFStringRef v27 = @"assemblyID has invalid type";
LABEL_69:
        AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyForPutWithManifest", v27, (char)v38);
        goto LABEL_70;
      }
    }
  }
LABEL_26:
  if ((AMFDRDataLocalSign(a1, a2, a3, v22, 0, 0, v14, 0, &v42, a8) & 1) == 0)
  {
    LOBYTE(v38) = (_BYTE)a2;
    CFStringRef v36 = @"failed to sign data %@:%@";
    goto LABEL_61;
  }
  CFDataRef v22 = v42;
  if (!v42)
  {
    LOBYTE(v38) = (_BYTE)a2;
    CFStringRef v37 = @"signedValueData is NULL %@:%@";
    goto LABEL_65;
  }
LABEL_28:
  if ((a6 & 1) == 0)
  {
    CFBooleanRef v28 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PutCombined");
    if (!v28) {
      goto LABEL_34;
    }
    CFBooleanRef v29 = v28;
    CFTypeID v30 = CFGetTypeID(v28);
    if (v30 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v29)) {
        goto LABEL_32;
      }
LABEL_34:
      int v31 = 0;
      goto LABEL_35;
    }
    long long v38 = @"VerifyData";
    goto LABEL_68;
  }
LABEL_32:
  if (*(uint64_t (***)(int, int, int, int))(a1 + 48) == AMFDRHTTPStore)
  {
    CFStringRef v37 = @"Cannnot store combined data to remote data store";
    goto LABEL_65;
  }
  int v31 = 1;
LABEL_35:
  if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore)
  {
    CFAllocatorRef v32 = CFGetAllocator((CFTypeRef)a1);
    if (AMFDRDataStripExtraManifest(v32, v22, &v40, 0, a8))
    {
      CFDataRef v22 = (const __CFData *)v40;
      goto LABEL_38;
    }
    CFStringRef v37 = @"AMFDRDataStripExtraManifest failed";
LABEL_65:
    AMFDRErrorPushInternal(a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyForPutWithManifest", v37, (char)v38);
    goto LABEL_70;
  }
LABEL_38:
  if (!v31)
  {
LABEL_41:
    CFTypeRef v34 = CFRetain(v22);
    goto LABEL_42;
  }
  CFDataRef v33 = (const __CFData *)CFRetain(v22);
  if (AMFDRDataCreateCombined((CFDictionaryRef *)a1, v33, a7, (CFDataRef *)&cfa, a8))
  {
    CFDataRef v22 = (const __CFData *)cfa;
    if (cfa) {
      goto LABEL_41;
    }
    CFStringRef v37 = @"AMFDRDataCreateCombined returned combinedValueData == NULL";
    goto LABEL_65;
  }
  AMFDRErrorPushInternal(a8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyForPutWithManifest", @"AMFDRDataCreateCombined failed", (char)v38);
LABEL_70:
  CFTypeRef v34 = 0;
LABEL_42:
  if (v42)
  {
    CFRelease(v42);
    CFDataRef v42 = 0;
  }
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (v43)
  {
    CFRelease(v43);
    CFDataRef v43 = 0;
  }
  if (v40) {
    CFRelease(v40);
  }
  return v34;
}

uint64_t AMFDRDataPutWithOptions(uint64_t a1, const __CFString *a2, const void *a3, const __CFData *a4, __CFString *a5, uint64_t a6)
{
  if (!a1)
  {
    CFStringRef v15 = @"amfdr is NULL";
LABEL_12:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutWithOptions", v15, v16);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v15 = @"dataClassStr is NULL";
    goto LABEL_12;
  }
  if (!a3)
  {
    CFStringRef v15 = @"dataInstanceStr is NULL";
    goto LABEL_12;
  }
  if (a4)
  {
    CFTypeRef v11 = _AMFDRDataCopyForPutWithManifest(a1, a2, a3, a4, a5, 0, 0, a6);
    if (v11)
    {
      unsigned int v12 = v11;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, const __CFString *, const void *, CFTypeRef, __CFString *, uint64_t))(*(void *)(a1 + 48) + 24))(a1, a2, a3, v11, a5, a6);
      CFRelease(v12);
      return v13;
    }
    CFStringRef v15 = @"dataToPut is NULL";
    goto LABEL_12;
  }
  AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutWithOptions", @"valueData is NULL", v16);
  return 0;
}

uint64_t AMFDRDataPut(uint64_t a1, const __CFString *a2, const void *a3, const __CFData *a4, uint64_t a5)
{
  return AMFDRDataPutWithOptions(a1, a2, a3, a4, 0, a5);
}

uint64_t AMFDRDataMultiPutWithOptions(void *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, uint64_t a6)
{
  if (!a1)
  {
    CFBooleanRef v28 = @"amfdr is NULL";
LABEL_43:
    CFStringRef v34 = v28;
    *(_OWORD *)CFAllocatorRef v32 = 0u;
    long long v33 = 0u;
    *(_OWORD *)value = 0u;
    uint64_t v29 = a6;
    CFIndex v30 = 1;
    goto LABEL_44;
  }
  if (!theArray)
  {
    CFBooleanRef v28 = @"dataClassArray is NULL";
    goto LABEL_43;
  }
  if (!a3)
  {
    CFBooleanRef v28 = @"dataInstanceArray is NULL";
    goto LABEL_43;
  }
  if (!a4)
  {
    CFBooleanRef v28 = @"valueDataArray is NULL";
    goto LABEL_43;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!Count)
  {
    CFBooleanRef v28 = @"Invalid dataClassArray count";
    goto LABEL_43;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFBooleanRef v28 = @"Invalid dataInstanceArray count";
    goto LABEL_43;
  }
  if (CFArrayGetCount(a4) != v11)
  {
    CFBooleanRef v28 = @"Invalid dataValueArray count";
    goto LABEL_43;
  }
  if (a5 && CFArrayGetCount(a5) != v11)
  {
    CFBooleanRef v28 = @"Invalid optionsArray count";
    goto LABEL_43;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, v11, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    CFStringRef v34 = @"dataToPut is NULL";
    *(_OWORD *)CFAllocatorRef v32 = 0u;
    long long v33 = 0u;
    *(_OWORD *)value = 0u;
    uint64_t v29 = a6;
    CFIndex v30 = 2;
LABEL_44:
    AMFDRErrorPushInternal(v29, v30, 0, 0, 0, 0, 0, 0, value[0], value[1], v32[0], v32[1], (void *)v33, *((void **)&v33 + 1), (uint64_t)"AMFDRDataMultiPutWithOptions", v34, a6);
    return 0;
  }
  CFDataRef v14 = Mutable;
  if (v11 >= 1)
  {
    CFIndex v15 = 0;
    char v16 = 0;
    while (1)
    {
      if (v16) {
        CFRelease(v16);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v15);
      if (!ValueAtIndex)
      {
        CFStringRef v27 = @"dataClassStr is NULL";
        goto LABEL_32;
      }
      CFStringRef v18 = ValueAtIndex;
      CFTypeID v19 = CFArrayGetValueAtIndex(a3, v15);
      if (!v19)
      {
        CFStringRef v27 = @"dataInstanceStr is NULL";
        goto LABEL_32;
      }
      CFTypeID v20 = v19;
      CFDataRef v21 = (const __CFData *)CFArrayGetValueAtIndex(a4, v15);
      if (!v21)
      {
        CFStringRef v27 = @"valueData is NULL";
        goto LABEL_32;
      }
      CFDataRef v22 = v21;
      CFTypeID v23 = a5 ? (__CFString *)CFArrayGetValueAtIndex(a5, v15) : 0;
      CFTypeRef v24 = _AMFDRDataCopyForPutWithManifest((uint64_t)a1, v18, v20, v22, v23, 0, 0, a6);
      if (!v24) {
        break;
      }
      char v16 = v24;
      CFArrayAppendValue(v14, v24);
      if (v11 == ++v15) {
        goto LABEL_25;
      }
    }
    CFStringRef v27 = @"dataToPut is NULL";
LABEL_32:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiPutWithOptions", v27, a6);
    CFRelease(v14);
    return 0;
  }
  char v16 = 0;
LABEL_25:
  uint64_t v25 = (*(uint64_t (**)(void *, CFArrayRef, const __CFArray *, __CFArray *, const __CFArray *, uint64_t))(a1[6] + 96))(a1, theArray, a3, v14, a5, a6);
  CFRelease(v14);
  if (v16) {
    CFRelease(v16);
  }
  return v25;
}

uint64_t AMFDRDataMultiPut(void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, uint64_t a5)
{
  return AMFDRDataMultiPutWithOptions(a1, a2, a3, a4, 0, a5);
}

CFTypeRef AMFDRDataPopulate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    CFStringRef v11 = @"amfdr is NULL";
LABEL_9:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPopulate", v11, v12);
    return 0;
  }
  char v6 = a2;
  if (!a2)
  {
    CFStringRef v11 = @"dataClassStr is NULL";
    goto LABEL_9;
  }
  if (!a3)
  {
    CFStringRef v11 = @"dataInstanceStr is NULL";
    goto LABEL_9;
  }
  long long v7 = (const void *)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 128))();
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    CFTypeRef v9 = CFRetain(v7);
    CFRelease(v8);
    return v9;
  }
  AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPopulate", @"%@:%@ populate data failed - foundData is NULL", v6);
  return 0;
}

CFTypeRef AMFDRDataMultiPopulate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  return _AMFDRDataMultiCopyInternal(a1, a2, a3, 1, a4, a5);
}

uint64_t AMFDRDataCommitWithPopulateAddition(void *a1, const __CFString *a2, const void *a3, const __CFData *a4, int a5, const __CFData *a6, CFTypeRef cf, CFIndex *a8, uint64_t a9)
{
  CFDataRef theData = 0;
  value = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCommitWithPopulateAddition", @"amfdr is NULL", v37);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v36 = @"dataClassStr is NULL";
LABEL_43:
    AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCommitWithPopulateAddition", v36, v37);
LABEL_46:
    uint64_t v34 = 0;
    CFDataRef v11 = 0;
    goto LABEL_35;
  }
  if (!a3)
  {
    CFStringRef v36 = @"dataInstanceStr is NULL";
    goto LABEL_43;
  }
  CFDataRef v11 = a4;
  if (a4)
  {
    BOOL v38 = cf
       && (CFTypeID v17 = CFGetTypeID(cf), v17 == CFDictionaryGetTypeID())
       && CFDictionaryGetValue((CFDictionaryRef)cf, @"CombinedManifest")
       && (CFBooleanRef v18 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"DeviceManifestMissing")) != 0
       && (CFBooleanRef v19 = v18, v20 = CFGetTypeID(v18), v20 == CFBooleanGetTypeID())
       && CFBooleanGetValue(v19) != 0;
    CFDictionaryRef v21 = (const __CFDictionary *)a1[2];
    BOOL v25 = v21
       && (CFBooleanRef v22 = (const __CFBoolean *)CFDictionaryGetValue(v21, @"DiscardExtraManifests")) != 0
       && (CFBooleanRef v23 = v22, v24 = CFGetTypeID(v22), v24 == CFBooleanGetTypeID())
       && CFBooleanGetValue(v23) != 0;
    CFDataRef v26 = (const __CFData *)_AMFDRDataCopyForPutWithManifest((uint64_t)a1, a2, a3, v11, 0, a5, a6, a9);
    if (v26)
    {
      CFDataRef v27 = v26;
      CFIndex Length = CFDataGetLength(v26);
      if (AMFDRDataCopyExtraManifests(a1, v11, &value, (CFTypeRef *)&theData, a9))
      {
        CFAllocatorRef v29 = CFGetAllocator(a1);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v29, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFDataRef v11 = Mutable;
        if (Mutable)
        {
          if (((v25 | a5 ^ 1) & 1) == 0)
          {
            char v31 = v38;
            if (!value) {
              char v31 = 1;
            }
            if ((v31 & 1) == 0)
            {
              CFDictionarySetValue(Mutable, @"DeviceManifest", value);
              Length += CFDataGetLength((CFDataRef)value);
            }
          }
          if (theData) {
            char v32 = v25;
          }
          else {
            char v32 = 1;
          }
          if ((v32 & 1) == 0)
          {
            CFDictionarySetValue(v11, @"StationManifest", theData);
            Length += CFDataGetLength(theData);
          }
          uint64_t v33 = (*(uint64_t (**)(void *, const __CFString *, const void *, const __CFData *, const __CFData *, uint64_t))(a1[6] + 144))(a1, a2, a3, v27, v11, a9);
          uint64_t v34 = v33;
          if (a8 && v33)
          {
            *a8 = Length;
            uint64_t v34 = 1;
          }
        }
        else
        {
          AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCommitWithPopulateAddition", @"additionToCommit is NULL", v37);
          uint64_t v34 = 0;
        }
      }
      else
      {
        AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCommitWithPopulateAddition", @"failed to copy extra manifests", v37);
        uint64_t v34 = 0;
        CFDataRef v11 = 0;
      }
      CFRelease(v27);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
      goto LABEL_35;
    }
    AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCommitWithPopulateAddition", @"dataToPut is NULL", v37);
    goto LABEL_46;
  }
  AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCommitWithPopulateAddition", @"valueData is NULL", v37);
  uint64_t v34 = 0;
LABEL_35:
  if (theData)
  {
    CFRelease(theData);
    CFDataRef theData = 0;
  }
  if (v11) {
    CFRelease(v11);
  }
  return v34;
}

CFTypeRef AMFDRDataMultiCopyDigest(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  return _AMFDRDataMultiCopyInternal(a1, a2, a3, 2, 0, a4);
}

uint64_t AMFDRDataCopyManifest(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 160))();
}

CFTypeRef AMFDRDataMultiCopyManifest(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  return _AMFDRDataMultiCopyInternal(a1, a2, a3, 3, 0, a4);
}

CFTypeRef AMFDRDataMultiCopyAsidMetadata(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  return _AMFDRDataMultiCopyInternal(a1, a2, a3, 4, 0, a4);
}

uint64_t AMFDRDataDelete(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 32))();
}

uint64_t AMFDRDataMultiDelete(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 104))();
}

uint64_t AMFDRDataPrefetch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 40))();
}

uint64_t AMFDRDataExport(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 48))();
}

uint64_t AMFDRDataMultiExport(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 112))();
}

uint64_t AMFDRDataIterate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 72))();
}

uint64_t AMFDRDataMultiClaim(uint64_t a1, const __CFArray *a2, const __CFArray *a3, CFTypeRef *a4, uint64_t a5)
{
  return AMFDRDataMultiClaimWithOptions(a1, 0, a2, a3, a4, a5);
}

uint64_t AMFDRDataMultiClaimWithOptions(uint64_t a1, const __CFDictionary *a2, const __CFArray *a3, const __CFArray *a4, CFTypeRef *a5, uint64_t a6)
{
  char v6 = (CFErrorRef *)a6;
  CFDataRef v75 = 0;
  CFDataRef v76 = 0;
  CFTypeRef v73 = 0;
  CFDataRef v74 = 0;
  CFTypeRef v71 = 0;
  long long v72 = 0;
  CFTypeRef v70 = 0;
  int v69 = 2;
  if (!a1)
  {
    CFStringRef v19 = @"amfdr is NULL";
    goto LABEL_106;
  }
  CFArrayRef v7 = a3;
  if (!a3)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"dataClassArray is NULL", v55);
LABEL_107:
    uint64_t v51 = 0;
    goto LABEL_83;
  }
  if (!a4)
  {
    CFStringRef v19 = @"dataInstanceArray is NULL";
    goto LABEL_106;
  }
  if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore)
  {
    CFStringRef v19 = @"Claim is only supported by HTTP store";
    goto LABEL_106;
  }
  if (!AMFDRDataInstanceUseSikFormat(a1))
  {
    CFStringRef v19 = @"kAMFDROptionUseSikDataInstance is set to false";
    goto LABEL_106;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v19 = @"amfdr->optionsDict is NULL";
    goto LABEL_106;
  }
  if (!a2)
  {
    CFArrayRef v64 = 0;
LABEL_14:
    CFArrayRef v17 = 0;
    uint64_t v18 = a1;
    goto LABEL_15;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"DeviceOnlySigningDataClasses");
  CFArrayRef v11 = Value;
  if (Value)
  {
    CFTypeID v12 = CFGetTypeID(Value);
    if (v12 != CFArrayGetTypeID())
    {
      CFStringRef v19 = @"Invalid kAMFDRDataClaimOptionDeviceOnlySigningDataClasses option is set";
      goto LABEL_106;
    }
  }
  CFArrayRef v64 = v11;
  CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(a2, @"ServerOnlySigningDataClasses");
  if (!v13) {
    goto LABEL_14;
  }
  CFArrayRef v14 = v13;
  CFTypeID v15 = CFGetTypeID(v13);
  BOOL v16 = v15 == CFArrayGetTypeID();
  CFArrayRef v17 = v14;
  uint64_t v18 = a1;
  if (!v16)
  {
    CFStringRef v19 = @"Invalid kAMFDRDataClaimOptionServerOnlySigningDataClasses option is set";
LABEL_106:
    AMFDRErrorPushInternal((uint64_t)v6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", v19, v55);
    goto LABEL_107;
  }
LABEL_15:
  CFAllocatorRef v20 = CFGetAllocator((CFTypeRef)v18);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v20, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    CFStringRef v19 = @"dataToClaim is NULL";
    goto LABEL_106;
  }
  CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)v18);
  size_t v60 = CFArrayCreateMutable(v22, 0, MEMORY[0x263EFFF70]);
  if (!v60)
  {
    CFStringRef v19 = @"dataClassToClaim is NULL";
    goto LABEL_106;
  }
  CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)v18);
  v59 = CFArrayCreateMutable(v23, 0, MEMORY[0x263EFFF70]);
  if (!v59)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"dataInstanceToClaim is NULL", v55);
    uint64_t v51 = 0;
    goto LABEL_83;
  }
  CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)v18);
  BOOL v25 = CFArrayCreateMutable(v24, 0, MEMORY[0x263EFFF70]);
  if (!v25)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"missingDataClassInstance is NULL", v55);
LABEL_109:
    uint64_t v51 = 0;
    goto LABEL_83;
  }
  CFArrayRef v66 = v7;
  CFArrayRef theArray = v17;
  CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 16), @"UseSikDataInstance");
  AMFDRSetOption(v18, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
  CFDictionaryRef v27 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t, const __CFArray *, const __CFArray *, CFErrorRef *))(*(void *)(v18 + 48) + 88))(v18, v7, a4, v6);
  if (v6 && *v6)
  {
    if (CFErrorGetCode(*v6) != 21)
    {
      AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"AMFDRDataMultiCopy got unexpected error", v55);
      goto LABEL_109;
    }
    CFDictionaryRef v28 = (const __CFDictionary *)AMFDRCopyUnderlyingDictionary(*v6, @"MultiRequestErrors");
    if (*v6)
    {
      CFRelease(*v6);
      CFErrorRef *v6 = 0;
    }
  }
  else
  {
    CFDictionaryRef v28 = 0;
  }
  AMFDRSetOption(v18, @"UseSikDataInstance", v26);
  if (!AMFDRDataGetSigningVersion(v18, &v69))
  {
    AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"AMFDRDataGetSigningVersion failed", v55);
    goto LABEL_109;
  }
  uint64_t v56 = a5;
  v58 = Mutable;
  if (CFArrayGetCount(v7) >= 1)
  {
    CFIndex v29 = 0;
    CFStringRef v30 = 0;
    size_t v61 = v25;
    CFDictionaryRef v62 = v28;
    CFDictionaryRef v63 = v27;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v29);
      CFStringRef v32 = (const __CFString *)CFArrayGetValueAtIndex(a4, v29);
      if (v30) {
        CFRelease(v30);
      }
      if (v75)
      {
        CFRelease(v75);
        CFDataRef v75 = 0;
      }
      if (v76)
      {
        CFRelease(v76);
        CFDataRef v76 = 0;
      }
      if (v74)
      {
        CFRelease(v74);
        CFDataRef v74 = 0;
      }
      if (v73)
      {
        CFRelease(v73);
        CFTypeRef v73 = 0;
      }
      if (v72)
      {
        CFRelease(v72);
        long long v72 = 0;
      }
      if (v71)
      {
        CFRelease(v71);
        CFTypeRef v71 = 0;
      }
      if (v70)
      {
        CFRelease(v70);
        CFTypeRef v70 = 0;
      }
      if (theArray
        && (v77.CFIndex length = CFArrayGetCount(theArray), v77.location = 0,
                                                    CFArrayContainsValue(theArray, v77, ValueAtIndex)))
      {
        AMSupportLogInternal();
        CFStringRef v30 = 0;
      }
      else
      {
        if (v64)
        {
          v78.CFIndex length = CFArrayGetCount(v64);
          v78.location = 0;
          BOOL v65 = CFArrayContainsValue(v64, v78, ValueAtIndex) != 0;
        }
        else
        {
          BOOL v65 = 0;
        }
        CFAllocatorRef v33 = CFGetAllocator((CFTypeRef)v18);
        CFStringRef v30 = CFStringCreateWithFormat(v33, 0, @"%@-%@", ValueAtIndex, v32);
        if (!v27 || (CFDataRef v34 = (const __CFData *)CFDictionaryGetValue(v27, v30)) == 0)
        {
          if (!v28)
          {
            CFStringRef v53 = @"data is missing but multiRequestErrors is NULL";
            goto LABEL_88;
          }
          CFDataRef v42 = (__CFError *)CFDictionaryGetValue(v28, v30);
          if (!v42)
          {
            char v55 = (char)v30;
            CFStringRef format = @"%@ is missing but multiRequestError is NULL";
            goto LABEL_86;
          }
          if (CFErrorGetCode(v42) != 701)
          {
            char v55 = (char)v30;
            CFStringRef v53 = @"Unexpected error and underlying error for %@: %ld";
LABEL_88:
            AMFDRErrorPushInternal((uint64_t)v6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", v53, v55);
LABEL_89:
            uint64_t v51 = 0;
            goto LABEL_83;
          }
          AMSupportLogInternal();
          CFArrayAppendValue(v25, v30);
          goto LABEL_62;
        }
        CFDataRef v35 = v34;
        uint64_t v36 = (uint64_t)v6;
        CFStringRef v37 = (const __CFString *)AMFDRGetAssemblyIDToVerify(v18, ValueAtIndex);
        CFAllocatorRef v38 = CFGetAllocator((CFTypeRef)v18);
        uint64_t v39 = v36;
        if ((AMFDRDataStripExtraManifest(v38, v35, &v71, &v73, v36) & 1) == 0)
        {
          AMFDRErrorPushInternal(v36, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"AMFDRDataStripExtraManifest failed", v55);
          uint64_t v51 = 0;
          goto LABEL_83;
        }
        int v40 = AMFDRSealingMapEntryHasSubCCListForClassInternal(v18, ValueAtIndex);
        long long v41 = AMFDRGetSubCCDigestsToVerify(v18, ValueAtIndex);
        if (!AMFDRDataVerifyImg4Integrity((const void *)v18, ValueAtIndex, v32, v37, (const __CFData *)v71, v40, (uint64_t)&v70))
        {
          AMSupportLogInternal();
          BOOL v25 = v61;
          CFArrayAppendValue(v61, v30);
LABEL_61:
          char v6 = (CFErrorRef *)v39;
          CFDictionaryRef v28 = v62;
          CFDictionaryRef v27 = v63;
LABEL_62:
          CFArrayRef v7 = v66;
          goto LABEL_63;
        }
        CFArrayAppendValue(v60, ValueAtIndex);
        CFArrayAppendValue(v59, v32);
        if (v69 == 1)
        {
          CFArrayAppendValue(v58, v35);
          BOOL v25 = v61;
          goto LABEL_61;
        }
        CFDataRef v43 = (const __CFData *)v73;
        if (v73)
        {
          CFTypeRef v73 = 0;
          CFDataRef v74 = v43;
          long long v44 = (const void *)v18;
          uint64_t v45 = v39;
        }
        else
        {
          long long v46 = (const void *)v18;
          long long v44 = (const void *)v18;
          uint64_t v45 = v39;
          if ((_AMFDRDataCopyImg4Manifest(v46, (CFDataRef)v71, &v74, v39) & 1) == 0)
          {
            AMFDRErrorPushInternal(v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"_AMFDRDataCopyImg4StrippedValue failed", v55);
            uint64_t v51 = 0;
            goto LABEL_83;
          }
        }
        long long v47 = v41;
        CFDictionaryRef v27 = v63;
        if ((_AMFDRDataCopyImg4StrippedValue(v44, (CFDataRef)v71, &v76, v45) & 1) == 0)
        {
          AMFDRErrorPushInternal(v45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"_AMFDRDataCopyImg4StrippedValue failed", v55);
          uint64_t v51 = 0;
          goto LABEL_83;
        }
        if (v40) {
          unint64_t v48 = 0;
        }
        else {
          unint64_t v48 = (__CFString *)v37;
        }
        char v49 = AMFDRDataLocalSign((uint64_t)v44, ValueAtIndex, v32, v76, 0, 0, v48, v47, &v75, v45);
        char v6 = (CFErrorRef *)v45;
        CFDictionaryRef v28 = v62;
        if ((v49 & 1) == 0)
        {
          AMFDRErrorPushInternal(v45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", @"AMFDRDataLocalSign failed", v55);
          uint64_t v51 = 0;
          goto LABEL_83;
        }
        BOOL v25 = v61;
        if (v65)
        {
          AMSupportLogInternal();
          CFArrayAppendValue(v58, v75);
          uint64_t v18 = a1;
          goto LABEL_62;
        }
        uint64_t v18 = a1;
        CFArrayRef v7 = v66;
        if ((AMFDRDataCreateFDR2Data(a1, v75, v74, (uint64_t)&v72, (uint64_t)v6) & 1) == 0)
        {
          CFStringRef format = @"AMFDRDataCreateFDR2Data failed";
LABEL_86:
          AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiClaimWithOptions", format, v55);
          goto LABEL_89;
        }
        CFArrayAppendValue(v58, v72);
      }
LABEL_63:
      ++v29;
    }
    while (v29 < CFArrayGetCount(v7));
  }
  CFIndex Count = CFArrayGetCount(v25);
  if (v56 && Count >= 1) {
    CFTypeRef *v56 = CFRetain(v25);
  }
  if (CFArrayGetCount(v58)) {
    uint64_t v51 = (*(uint64_t (**)(uint64_t, __CFArray *, __CFArray *, __CFArray *, void, CFErrorRef *))(*(void *)(v18 + 48) + 96))(v18, v60, v59, v58, 0, v6);
  }
  else {
    uint64_t v51 = 1;
  }
LABEL_83:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v51;
}

uint64_t AMFDRDataGetSigningVersion(uint64_t a1, int *a2)
{
  int valuePtr = 0;
  if (!a1) {
    goto LABEL_20;
  }
  if (!a2) {
    goto LABEL_20;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)AMFDRGetOptions(a1);
  if (!v4) {
    goto LABEL_20;
  }
  CFDictionaryRef v5 = v4;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"DataVersion");
  if (!Value) {
    goto LABEL_13;
  }
  CFNumberRef v7 = Value;
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(v5, @"OrganizationalUnit");
  CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(v5, @"LocalSigning");
  BOOL DeprecateGIDSigning = AMFDRSealingMapGetDeprecateGIDSigning(a1);
  if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFBooleanGetTypeID()))
  {
    BOOL v12 = CFBooleanGetValue(v9) != 0;
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v12 = 0;
    if (!v8) {
      goto LABEL_15;
    }
  }
  CFTypeID v13 = CFGetTypeID(v8);
  if (v13 == CFStringGetTypeID())
  {
    CFComparisonResult v14 = CFStringCompare(v8, @"Devices - Stations", 0);
    if (DeprecateGIDSigning && !v12 && v14 == kCFCompareEqualTo)
    {
LABEL_13:
      if ((*(unsigned char *)(*(void *)(a1 + 136) + 8) & 8) != 0) {
        int FDRDataVersionForDeviceInternal = 1;
      }
      else {
        int FDRDataVersionForDeviceInternal = AMFDRSealingMapGetFDRDataVersionForDeviceInternal(a1);
      }
      int valuePtr = FDRDataVersionForDeviceInternal;
      if (FDRDataVersionForDeviceInternal) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
  }
LABEL_15:
  if (CFNumberGetValue(v7, kCFNumberIntType, &valuePtr))
  {
    int FDRDataVersionForDeviceInternal = valuePtr;
    if (valuePtr)
    {
LABEL_17:
      *a2 = FDRDataVersionForDeviceInternal;
      return 1;
    }
  }
LABEL_20:
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDRDataVerifyImg4Integrity(const void *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFData *a5, int a6, uint64_t a7)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v10;
  v40[8] = v10;
  v40[5] = v10;
  v40[6] = v10;
  v40[3] = v10;
  v40[4] = v10;
  v40[1] = v10;
  v40[2] = v10;
  *(_OWORD *)&v39[128] = v10;
  v40[0] = v10;
  *(_OWORD *)&v39[112] = v10;
  *(_OWORD *)&v39[80] = v10;
  *(_OWORD *)&v39[96] = v10;
  *(_OWORD *)&v39[48] = v10;
  *(_OWORD *)&v39[64] = v10;
  *(_OWORD *)&v39[16] = v10;
  *(_OWORD *)&v39[32] = v10;
  *(_OWORD *)uint64_t v39 = v10;
  uint64_t v38 = 0;
  int v37 = 0;
  uint64_t v36 = 0;
  unsigned int v35 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", @"amfdr is NULL", v34);
LABEL_42:
    uint64_t v29 = 2;
    goto LABEL_22;
  }
  if (!a2)
  {
    CFStringRef v31 = @"dataClass is NULL";
LABEL_30:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", v31, v34);
    uint64_t v29 = 2;
LABEL_31:
    AMFDRErrorPushInternal(a7, 18, (const __CFNumber *)v29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", @"trust verification error code=0x%016llX", v29);
    goto LABEL_32;
  }
  if (!a3)
  {
    CFStringRef v31 = @"dataInstance is NULL";
    goto LABEL_30;
  }
  if (!a5)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", @"valueData is NULL", v34);
    goto LABEL_42;
  }
  memset((char *)v40 + 8, 0, 136);
  memset(&v39[8], 0, 136);
  *(void *)&v40[0] = 66;
  if (AMFDRAllowIncompleteData((uint64_t)a1)) {
    *(void *)&v40[0] = 16450;
  }
  *(void *)uint64_t v39 = CFDataGetBytePtr(a5);
  *(_DWORD *)&v39[8] = CFDataGetLength(a5);
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v15, a2, 0x8000100u, 0x20u);
  CFDataRef v17 = ExternalRepresentation;
  if (!ExternalRepresentation)
  {
    uint64_t v29 = 2;
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", @"dataClassData is NULL", v34);
    goto LABEL_22;
  }
  *(void *)&v39[64] = CFDataGetBytePtr(ExternalRepresentation);
  *(_DWORD *)&v39[72] = CFDataGetLength(v17);
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFDataRef v19 = CFStringCreateExternalRepresentation(v18, a3, 0x8000100u, 0x20u);
  CFDataRef v20 = v19;
  if (!v19)
  {
    uint64_t v29 = 2;
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", @"dataInstanceData is NULL", v34);
    goto LABEL_22;
  }
  *(void *)&v39[80] = CFDataGetBytePtr(v19);
  *(_DWORD *)&v39[88] = CFDataGetLength(v20);
  if (a4 && (CFTypeID v21 = CFGetTypeID(a4), v21 == CFStringGetTypeID()) && CFStringGetLength(a4) >= 1)
  {
    CFAllocatorRef v22 = CFGetAllocator(a1);
    CFDataRef v23 = CFStringCreateExternalRepresentation(v22, a4, 0x8000100u, 0x5Fu);
    CFDataRef v24 = v23;
    if (!v23)
    {
      CFStringRef v33 = @"CFStringCreateExternalRepresentation(assemblyID) failed";
LABEL_41:
      AMFDRErrorPushInternal(a7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", v33, v34);
      goto LABEL_42;
    }
    BytePtr = CFDataGetBytePtr(v23);
    if (a6)
    {
      *(void *)&v40[7] = BytePtr;
      DWORD2(v40[7]) = CFDataGetLength(v24);
      *(void *)&v39[128] = 0;
      CFStringRef v26 = &v39[136];
      goto LABEL_17;
    }
    *(void *)&v39[128] = BytePtr;
    *(_DWORD *)&v39[136] = CFDataGetLength(v24);
  }
  else
  {
    *(void *)&v39[128] = 0;
    *(_DWORD *)&v39[136] = 0;
  }
  *(void *)&v40[7] = 0;
  CFStringRef v26 = (char *)&v40[7] + 8;
LABEL_17:
  *(_DWORD *)CFStringRef v26 = 0;
  CFArrayRef v27 = (const __CFArray *)AMFDRGetSubCCDigestsToVerify((uint64_t)a1, a2);
  if (v27)
  {
    if (_AMFDRDataCreatePtrFromTagStringCFArray(v27, &v36, &v35))
    {
      *(void *)&v40[8] = v36;
      DWORD2(v40[8]) = v35;
      goto LABEL_20;
    }
    CFStringRef v33 = @"cannot convert subCCsToVerifyDigest to uint32_t ptr";
    goto LABEL_41;
  }
LABEL_20:
  uint64_t v28 = AMFDRDecodeTrustEvaluation((uint64_t *)v39, &v38, &v37);
  if (!v28)
  {
    uint64_t v30 = 1;
    goto LABEL_33;
  }
  uint64_t v29 = v28;
LABEL_22:
  if (!a2 || !a3) {
    goto LABEL_31;
  }
  AMFDRErrorPushInternal(a7, 18, (const __CFNumber *)v29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyImg4Integrity", @"trust verification error code=0x%016llX for %@:%@", v29);
LABEL_32:
  uint64_t v30 = 0;
LABEL_33:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (v36) {
    free(v36);
  }
  return v30;
}

uint64_t _AMFDRDataCopyImg4StrippedValue(const void *a1, CFDataRef theData, void *a3, uint64_t a4)
{
  CFAllocatorRef v15 = 0;
  unsigned int v14 = 0;
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_12:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyImg4StrippedValue", v12, v13);
    return 0;
  }
  if (!theData)
  {
    CFStringRef v12 = @"valueData is NULL";
    goto LABEL_12;
  }
  if (!a3)
  {
    CFStringRef v12 = @"outValueData is NULL";
    goto LABEL_12;
  }
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  if (AMFDRDecodeGetImg4RawData((uint64_t)BytePtr, Length, &v15, &v14))
  {
    CFBooleanRef v9 = (void *)CFRetain(theData);
  }
  else
  {
    CFAllocatorRef v10 = CFGetAllocator(a1);
    CFBooleanRef v9 = CFDataCreate(v10, v15, v14);
  }
  *a3 = v9;
  return 1;
}

uint64_t AMFDRDataCreateFDR2Data(uint64_t a1, CFDataRef theData, const __CFData *a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_9:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateFDR2Data", v12, v14);
    return 0;
  }
  if (!theData)
  {
    CFStringRef v12 = @"value is NULL";
    goto LABEL_9;
  }
  if (!a3)
  {
    CFStringRef v12 = @"outValueData is NULL";
    goto LABEL_9;
  }
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  CFAllocatorRef v10 = CFDataGetBytePtr(a3);
  int v11 = CFDataGetLength(a3);
  if (FDREncodeCreateFDR2Data((uint64_t)BytePtr, Length, (uint64_t)v10, v11)) {
    AMFDRErrorPushInternal(a5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateFDR2Data", @"FDREncodeCreateCombined failed", v14);
  }
  else {
    AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateFDR2Data", @"combinedData is NULL", v14);
  }
  return 0;
}

CFDataRef AMFDRDataMake(void *a1, const __CFString *a2, const __CFString *a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v13 = @"amfdr is NULL";
LABEL_12:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMake", v13, v14);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v13 = @"dataClassStr is NULL";
    goto LABEL_12;
  }
  if (!a3)
  {
    CFStringRef v13 = @"dataInstanceStr is NULL";
    goto LABEL_12;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(a1[6] + 80))();
  if (!v8)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMake", @"%@:%@ make data failed - foundData is NULL", (char)a2);
    return 0;
  }
  CFBooleanRef v9 = (const void *)v8;
  CFStringRef v10 = (const __CFString *)AMFDRGetAssemblyIDToVerify((uint64_t)a1, a2);
  int v11 = AMFDRSealingMapEntryHasSubCCListForClassInternal((uint64_t)a1, a2);
  if (!AMFDRDataVerifyImg4Integrity(a1, a2, a3, v10, (const __CFData *)v9, v11, a4))
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMake", @"AMFDRDataVerifyImg4Integrity with %@:%@ failed", (char)a2);
    CFRelease(v9);
    return 0;
  }

  return _AMFDRDataCopyFormatted((CFDictionaryRef *)a1, a2, a3, (CFDataRef)v9, a4);
}

CFTypeRef AMFDRDataMultiMake(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  context[3] = *MEMORY[0x263EF8340];
  CFDictionaryRef theDict = 0;
  CFDictionaryRef Mutable = 0;
  memset(context, 170, 24);
  if (!a1)
  {
    CFStringRef v16 = @"amfdr is NULL";
LABEL_24:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiMake", v16, (char)theDict);
LABEL_26:
    CFTypeRef v15 = 0;
    goto LABEL_32;
  }
  if (!a2)
  {
    CFStringRef v16 = @"dataClassArray is NULL";
    goto LABEL_24;
  }
  if (!a3)
  {
    CFStringRef v16 = @"dataInstanceArray is NULL";
    goto LABEL_24;
  }
  if (a4 && *a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t, CFTypeRef *))(a1[6] + 120))(a1, a2, a3, a4);
  if (!v8)
  {
    AMSupportLogInternal();
    goto LABEL_26;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)v8;
  if (!a4 || !*a4)
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFDictionaryRef v11 = 0;
    CFDictionaryRef theDict = CFDictionaryCreateMutable(v13, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (theDict) {
      goto LABEL_15;
    }
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiMake", @"multiRequestErrors is NULL", 0);
LABEL_38:
    CFTypeRef v15 = 0;
    goto LABEL_30;
  }
  if (CFErrorGetCode((CFErrorRef)*a4) != 21)
  {
    AMSupportLogInternal();
    goto LABEL_38;
  }
  CFDictionaryRef v10 = CFErrorCopyUserInfo((CFErrorRef)*a4);
  if (!v10)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiMake", @"userInfo is NULL", (char)theDict);
    goto LABEL_38;
  }
  CFDictionaryRef v11 = v10;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v10, @"MultiRequestErrors");
  CFDictionaryRef theDict = Value;
  if (!Value)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiMake", @"MultiRequestErrors not in userInfo", 0);
    CFTypeRef v15 = 0;
    goto LABEL_29;
  }
  CFDictionaryRef theDict = (CFDictionaryRef)CFRetain(Value);
LABEL_15:
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiMake", @"formattedDict is NULL", (char)theDict);
    goto LABEL_28;
  }
  context[0] = a1;
  context[1] = &Mutable;
  void context[2] = &theDict;
  CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)_AMFDRDataMultiMakeCallbak, context);
  if (CFDictionaryGetCount(theDict) >= 1) {
    AMFDRErrorPushInternal((uint64_t)a4, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiMake", @"_AMFDRDataMultiMakeCallbak got errors", (char)theDict);
  }
  if (CFDictionaryGetCount(Mutable) < 1)
  {
LABEL_28:
    CFTypeRef v15 = 0;
    if (!v11) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  CFTypeRef v15 = CFRetain(Mutable);
  if (v11) {
LABEL_29:
  }
    CFRelease(v11);
LABEL_30:
  CFRelease(v9);
  if (Mutable)
  {
    CFRelease(Mutable);
    CFDictionaryRef Mutable = 0;
  }
LABEL_32:
  if (theDict) {
    CFRelease(theDict);
  }
  return v15;
}

void _AMFDRDataMultiMakeCallbak(const __CFString *a1, const __CFData *a2, uint64_t a3)
{
  CFStringRef v23 = 0;
  CFStringRef v24 = 0;
  value = 0;
  if (!a1)
  {
    AMSupportLogInternal();
    CFDataRef v3 = 0;
    goto LABEL_13;
  }
  CFDataRef v3 = a2;
  CFDictionaryRef v5 = *(CFMutableDictionaryRef **)(a3 + 16);
  if (!a2)
  {
    AMFDRErrorPushInternal((uint64_t)&value, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiMakeCallbak", @"rawData is NULL", v20);
    goto LABEL_9;
  }
  char v6 = *(CFMutableDictionaryRef **)(a3 + 8);
  if (!v6)
  {
    CFStringRef v15 = @"formattedDict is NULL";
LABEL_26:
    AMFDRErrorPushInternal((uint64_t)&value, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiMakeCallbak", v15, v20);
LABEL_30:
    CFDataRef v3 = 0;
    goto LABEL_9;
  }
  if (!*v6)
  {
    CFStringRef v15 = @"formattedDict is uninitailized";
    goto LABEL_26;
  }
  CFNumberRef v7 = *(void **)a3;
  CFAllocatorRef v8 = CFGetAllocator(*(CFTypeRef *)a3);
  if ((AMFDRDataLocalDecomposeFullKey(v8, a1, (CFTypeRef *)&v24, (CFTypeRef *)&v23) & 1) == 0)
  {
    CFStringRef format = @"AMFDRDataLocalDecomposeFullKey failed with %@";
    char v21 = (char)a1;
    *(_OWORD *)CFDataRef v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)CFStringRef v16 = 0u;
LABEL_29:
    AMFDRErrorPushInternal((uint64_t)&value, 10, 0, 0, 0, 0, 0, 0, v16[0], v16[1], v17[0], v17[1], (void *)v18, *((void **)&v18 + 1), (uint64_t)"_AMFDRDataMultiMakeCallbak", format, v21);
    goto LABEL_30;
  }
  CFStringRef v9 = (const __CFString *)AMFDRGetAssemblyIDToVerify((uint64_t)v7, v24);
  int v10 = AMFDRSealingMapEntryHasSubCCListForClassInternal((uint64_t)v7, v24);
  char v11 = AMFDRDataVerifyImg4Integrity(v7, v24, v23, v9, v3, v10, (uint64_t)&value);
  CFStringRef v13 = v23;
  CFStringRef v12 = v24;
  if ((v11 & 1) == 0)
  {
    char v21 = (char)v24;
    CFStringRef format = @"AMFDRDataVerifyImg4Integrity with %@:%@ failed";
    *(_OWORD *)CFDataRef v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)CFStringRef v16 = 0u;
    goto LABEL_29;
  }
  CFDataRef v14 = (const __CFData *)CFRetain(v3);
  CFDataRef v3 = _AMFDRDataCopyFormatted((CFDictionaryRef *)v7, v12, v13, v14, (uint64_t)&value);
  if (v3) {
    CFDictionaryAddValue(*v6, a1, v3);
  }
  else {
    AMFDRErrorPushInternal((uint64_t)&value, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiMakeCallbak", @"_AMFDRDataCopyFormatted failed with %@", (char)a1);
  }
LABEL_9:
  if (value && v5 && *v5) {
    CFDictionarySetValue(*v5, a1, value);
  }
LABEL_13:
  if (v24)
  {
    CFRelease(v24);
    CFStringRef v24 = 0;
  }
  if (v23)
  {
    CFRelease(v23);
    CFStringRef v23 = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  if (value) {
    CFRelease(value);
  }
}

CFTypeRef AMFDRDataPatch(void *a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _AMFDRDataPatchInternal(a1, a2, a3, a4, 0, a5, 0, a6);
}

CFTypeRef _AMFDRDataPatchInternal(void *a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    long long v18 = @"amfdr is NULL";
LABEL_18:
    CFStringRef v24 = v18;
    *(_OWORD *)CFAllocatorRef v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)value = 0u;
    uint64_t v19 = a8;
    CFIndex v20 = 1;
LABEL_20:
    AMFDRErrorPushInternal(v19, v20, 0, 0, 0, 0, 0, 0, value[0], value[1], v22[0], v22[1], (void *)v23, *((void **)&v23 + 1), (uint64_t)"_AMFDRDataPatchInternal", v24, v25);
    return 0;
  }
  if (!a2)
  {
    long long v18 = @"dataClassStr is NULL";
    goto LABEL_18;
  }
  if (!a3)
  {
    long long v18 = @"dataInstanceStr is NULL";
    goto LABEL_18;
  }
  if (!a6)
  {
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataPatchInternal", @"patchDict is NULL", v25);
    return 0;
  }
  if (!(a4 | a5))
  {
    long long v18 = @"valueData is NULL";
    goto LABEL_18;
  }
  uint64_t v12 = 176;
  if (!a4) {
    uint64_t v12 = 192;
  }
  uint64_t v13 = (*(uint64_t (**)(void))(a1[6] + v12))();
  if (!v13)
  {
    char v25 = (char)a2;
    CFStringRef v24 = @"failed to patch data for %@-%@";
    *(_OWORD *)CFAllocatorRef v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)value = 0u;
    uint64_t v19 = a8;
    CFIndex v20 = 10;
    goto LABEL_20;
  }
  CFDataRef v14 = (const void *)v13;
  CFStringRef v15 = (const __CFString *)AMFDRGetAssemblyIDToVerify((uint64_t)a1, a2);
  if (AMFDRDataVerifyImg4Integrity(a1, a2, a3, v15, (const __CFData *)v14, 1, a8))
  {
    CFTypeRef v16 = CFRetain(v14);
  }
  else
  {
    AMFDRErrorPushInternal(a8, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataPatchInternal", @"failed to verify img4 data for %@-%@", (char)a2);
    CFTypeRef v16 = 0;
  }
  CFRelease(v14);
  return v16;
}

CFTypeRef AMFDRDataCommitPatch(void *a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _AMFDRDataPatchInternal(a1, a2, a3, 0, a4, a5, 0, a6);
}

CFTypeRef AMFDRDataMultiPatch(void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, CFErrorRef *a6)
{
  return _AMFDRDataMultiPatchInternal(a1, a2, a3, a4, 0, a5, a6);
}

CFTypeRef _AMFDRDataMultiPatchInternal(void *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, CFErrorRef *a7)
{
  context[3] = *MEMORY[0x263EF8340];
  memset(context, 170, 24);
  if (!a1)
  {
    CFStringRef v29 = @"amfdr is NULL";
LABEL_38:
    AMFDRErrorPushInternal((uint64_t)a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchInternal", v29, context[0]);
    return 0;
  }
  if (!theArray)
  {
    CFStringRef v29 = @"dataClassArray is NULL";
    goto LABEL_38;
  }
  if (!a3)
  {
    CFStringRef v29 = @"dataInstanceArray is NULL";
    goto LABEL_38;
  }
  if (!a6)
  {
    CFStringRef v29 = @"patchDictArray is NULL";
    goto LABEL_38;
  }
  if (a4) {
    a5 = a4;
  }
  if (!a5)
  {
    CFStringRef v29 = @"dataArray is NULL";
    goto LABEL_38;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!Count)
  {
    CFStringRef v29 = @"Invalid dataClassArray count";
    goto LABEL_38;
  }
  CFIndex v15 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v29 = @"Invalid dataInstanceArray count";
    goto LABEL_38;
  }
  if (CFArrayGetCount(a5) != v15)
  {
    CFStringRef v29 = @"Invalid originalDataArray count";
    goto LABEL_38;
  }
  if (CFArrayGetCount(a6) != v15)
  {
    CFStringRef v29 = @"Invalid patchDictArray count";
    goto LABEL_38;
  }
  uint64_t v16 = 184;
  if (!a4) {
    uint64_t v16 = 200;
  }
  uint64_t v17 = (*(uint64_t (**)(void *, CFArrayRef, const __CFArray *, const __CFArray *, const __CFArray *, void, CFErrorRef *))(a1[6] + v16))(a1, theArray, a3, a5, a6, 0, a7);
  if (!v17)
  {
    AMSupportLogInternal();
    return 0;
  }
  long long v18 = (const void *)v17;
  if (!a7 || !*a7)
  {
    CFAllocatorRef v23 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v23, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      value = Mutable;
      CFDictionaryRef v20 = 0;
      goto LABEL_24;
    }
    AMFDRErrorPushInternal((uint64_t)a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchInternal", @"multiRequestErrors is NULL", context[0]);
    goto LABEL_53;
  }
  if (CFErrorGetCode(*a7) != 21)
  {
    AMSupportLogInternal();
LABEL_53:
    CFRelease(v18);
    return 0;
  }
  CFDictionaryRef v19 = CFErrorCopyUserInfo(*a7);
  if (!v19)
  {
    AMFDRErrorPushInternal((uint64_t)a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchInternal", @"userInfo is NULL", context[0]);
    goto LABEL_53;
  }
  CFDictionaryRef v20 = v19;
  char v21 = CFDictionaryGetValue(v19, @"MultiRequestErrors");
  if (!v21)
  {
    AMFDRErrorPushInternal((uint64_t)a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchInternal", @"MultiRequestErrors not in userInfo", context[0]);
    CFRelease(v18);
    CFMutableDictionaryRef v27 = 0;
    value = 0;
    CFTypeRef v28 = 0;
    goto LABEL_44;
  }
  value = (void *)CFRetain(v21);
LABEL_24:
  CFAllocatorRef v25 = CFGetAllocator(a1);
  CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFMutableDictionaryRef v27 = v26;
  if (v26)
  {
    context[0] = a1;
    context[1] = v26;
    void context[2] = value;
    CFDictionaryApplyFunction((CFDictionaryRef)v18, (CFDictionaryApplierFunction)_AMFDRDataMultiPatchCallback, context);
    if (CFDictionaryGetCount((CFDictionaryRef)value) >= 1) {
      AMFDRErrorPushInternal((uint64_t)a7, 21, 0, 0, 0, 0, 0, 0, value, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchInternal", @"_AMFDRDataMultiPatchCallback got errors", context[0]);
    }
    if (CFDictionaryGetCount(v27) >= 1)
    {
      CFTypeRef v28 = CFRetain(v27);
      goto LABEL_43;
    }
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchInternal", @"patchedDataDict is NULL", context[0]);
  }
  CFTypeRef v28 = 0;
LABEL_43:
  CFRelease(v18);
  if (v20) {
LABEL_44:
  }
    CFRelease(v20);
  if (value) {
    CFRelease(value);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v28;
}

CFTypeRef AMFDRDataMultiCommitPatch(void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, CFErrorRef *a6)
{
  return _AMFDRDataMultiPatchInternal(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t AMFDRDataDictCopy(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4)
{
  char v5 = (char)a2;
  uint64_t v11 = 0;
  CFDataRef v7 = AMFDRDataCopy(a1, a2, a3, a4);
  if (v7)
  {
    CFDataRef v8 = v7;
    v10[0] = a1;
    v10[1] = 0xAAAAAAAAAAAAAA01;
    v10[2] = 0;
    void v10[3] = 0;
    v10[4] = &v11;
    v10[5] = a4;
    _AMFDRDataDictConvertFromData(0, v7, (uint64_t)v10);
    if (!v11) {
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictCopyInternal", @"failed to convert value for %@-%@", v5);
    }
    CFRelease(v8);
    return v11;
  }
  else
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictCopyInternal", @"failed to copy payload data for %@-%@", v5);
    return 0;
  }
}

CFTypeRef AMFDRDataDictMultiCopy(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v6 = _AMFDRDataMultiCopyInternal(a1, a2, a3, 0, 0, a4);
  if (!v6)
  {
    AMSupportLogInternal();
    return 0;
  }
  CFDataRef v7 = v6;
  if (!a4 || !*a4)
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      value = Mutable;
      CFDictionaryRef v10 = 0;
      goto LABEL_10;
    }
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiCopyInternal", @"multiErrors is NULL", v21);
    goto LABEL_29;
  }
  CFIndex Code = CFErrorGetCode((CFErrorRef)*a4);
  if (Code != 21)
  {
    char v21 = Code;
    CFStringRef v20 = @"invalid multi-request error code: %ld";
LABEL_28:
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiCopyInternal", v20, v21);
LABEL_29:
    CFRelease(v7);
    return 0;
  }
  CFDictionaryRef v9 = CFErrorCopyUserInfo((CFErrorRef)*a4);
  if (!v9)
  {
    CFStringRef v20 = @"userInfo is NULL";
    goto LABEL_28;
  }
  CFDictionaryRef v10 = v9;
  uint64_t v11 = CFDictionaryGetValue(v9, @"MultiRequestErrors");
  if (!v11)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiCopyInternal", @"MultiRequestErrors not in userInfo", v21);
    value = 0;
    CFMutableDictionaryRef v17 = 0;
    CFTypeRef v18 = 0;
    goto LABEL_19;
  }
  value = (void *)CFRetain(v11);
LABEL_10:
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFMutableDictionaryRef v17 = v16;
  if (v16)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAAAAAAAA01;
    void context[2] = v16;
    context[3] = value;
    void context[4] = 0;
    context[5] = 0;
    CFDictionaryApplyFunction((CFDictionaryRef)v7, (CFDictionaryApplierFunction)_AMFDRDataDictConvertFromData, context);
    if (CFDictionaryGetCount((CFDictionaryRef)value) >= 1) {
      AMFDRErrorPushInternal((uint64_t)a4, 21, 0, 0, 0, 0, 0, 0, value, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiCopyInternal", @"_AMFDRDataDictConvertFromData got errors", v21);
    }
    if (CFDictionaryGetCount(v17) >= 1)
    {
      CFTypeRef v18 = CFRetain(v17);
      if (!v10) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiCopyInternal", @"multiDict is NULL", v21);
  }
  CFTypeRef v18 = 0;
  if (v10) {
LABEL_19:
  }
    CFRelease(v10);
LABEL_20:
  CFRelease(v7);
  if (v17) {
    CFRelease(v17);
  }
  if (value) {
    CFRelease(value);
  }
  return v18;
}

uint64_t AMFDRDataDictPut(const void *a1, const __CFString *a2, const void *a3, const __CFDictionary *a4, __CFString *a5, uint64_t a6)
{
  if (a1)
  {
    CFGetAllocator(a1);
    AMFDRSysconfigCreate();
    if (v12)
    {
      CFAllocatorRef v13 = (void *)v12;
      AMFDRSysconfigSetDataClass(v12, a2);
      CFDataRef v14 = _AMFDRDataDictCopyForPut(v13, a4, a6);
      if (v14)
      {
        CFDataRef v15 = v14;
        uint64_t v16 = AMFDRDataPutWithOptions((uint64_t)a1, a2, a3, v14, a5, a6);
        CFRelease(v13);
        CFRelease(v15);
        return v16;
      }
      AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictPutInternal", @"failed to copy dict value to put", v18);
      CFRelease(v13);
    }
    else
    {
      AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictPutInternal", @"sysconfig is NULL", v18);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictPutInternal", @"amfdr is NULL", v18);
  }
  return 0;
}

uint64_t AMFDRDataDictMultiPut(void *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, uint64_t a6)
{
  if (!a1)
  {
    CFStringRef v27 = @"amfdr is NULL";
LABEL_35:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiPutInternal", v27, v28);
    return 0;
  }
  if (!theArray)
  {
    CFStringRef v27 = @"dataClassArray is NULL";
    goto LABEL_35;
  }
  if (!a4)
  {
    CFStringRef v27 = @"valueDictArray is NULL";
    goto LABEL_35;
  }
  uint64_t Count = CFArrayGetCount(theArray);
  if (Count != CFArrayGetCount(a4))
  {
    CFStringRef v27 = @"valueDictArray size is invalid";
    goto LABEL_35;
  }
  if (!Count) {
    return 1;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFArrayRef Mutable = CFArrayCreateMutable(v12, Count, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiPutInternal", @"dataArrayToPut is NULL", v28);
    return 0;
  }
  CFDataRef v14 = Mutable;
  if (Count < 1)
  {
    uint64_t v24 = AMFDRDataMultiPutWithOptions(a1, theArray, a3, Mutable, a5, a6);
  }
  else
  {
    CFArrayRef v30 = a3;
    CFArrayRef v31 = a5;
    CFIndex v15 = 0;
    CFDataRef v16 = 0;
    CFMutableDictionaryRef v17 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a4, v15);
      CFDictionaryRef v19 = CFArrayGetValueAtIndex(theArray, v15);
      if (v17) {
        CFRelease(v17);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (!ValueAtIndex || (CFTypeID v20 = CFGetTypeID(ValueAtIndex), v20 != CFDictionaryGetTypeID()))
      {
        char v29 = v15;
        CFStringRef format = @"valueDictArray has invalid element #%ld";
LABEL_27:
        AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiPutInternal", format, v29);
        goto LABEL_29;
      }
      if (!v19 || (CFTypeID v21 = CFGetTypeID(v19), v21 != CFStringGetTypeID()))
      {
        char v29 = v15;
        CFStringRef format = @"dataClassArray has invalid element #%ld";
        goto LABEL_27;
      }
      CFGetAllocator(a1);
      AMFDRSysconfigCreate();
      if (!v22)
      {
        AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiPutInternal", @"sysconfig is NULL", v28);
        goto LABEL_29;
      }
      CFMutableDictionaryRef v17 = (void *)v22;
      AMFDRSysconfigSetDataClass(v22, v19);
      CFDataRef v23 = _AMFDRDataDictCopyForPut(v17, (const __CFDictionary *)ValueAtIndex, a6);
      if (!v23) {
        break;
      }
      CFDataRef v16 = v23;
      CFArrayAppendValue(v14, v23);
      if (Count == ++v15)
      {
        uint64_t v24 = AMFDRDataMultiPutWithOptions(a1, theArray, v30, v14, v31, a6);
        CFRelease(v17);
        CFRelease(v16);
        goto LABEL_23;
      }
    }
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictMultiPutInternal", @"failed to copy #%ld to put", v15);
    CFRelease(v17);
LABEL_29:
    uint64_t v24 = 0;
  }
LABEL_23:
  CFRelease(v14);
  return v24;
}

uint64_t AMFDRDataRevert(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 232))();
}

uint64_t AMFDRDataGetManifestVersion(uint64_t a1, unsigned int *a2)
{
  unsigned int valuePtr = 0;
  if (!a1) {
    goto LABEL_13;
  }
  if (!a2) {
    goto LABEL_13;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)AMFDRGetOptions(a1);
  if (!v4) {
    goto LABEL_13;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"ManifestVersion");
  if (Value)
  {
    if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr)) {
      goto LABEL_13;
    }
    unsigned int v6 = valuePtr;
  }
  else
  {
    unsigned int v6 = (*(unsigned char *)(*(void *)(a1 + 136) + 8) & 8) == 0 && AMFDRSealingMapGetFDRManifestVersionForDeviceInternal(a1);
    unsigned int valuePtr = v6;
  }
  if (v6 < 2)
  {
    *a2 = v6;
    return 1;
  }
LABEL_13:
  AMSupportLogInternal();
  return 0;
}

uint64_t AMFDRDataGetMinimalManifestVersion(uint64_t a1, int *a2)
{
  int valuePtr = 0;
  if (!a1) {
    goto LABEL_13;
  }
  if (!a2) {
    goto LABEL_13;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)AMFDRGetOptions(a1);
  if (!v4) {
    goto LABEL_13;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"MinimalManifestVersion");
  if (Value)
  {
    if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr)) {
      goto LABEL_13;
    }
    int FDRMinimalManifestVersionForDeviceInternal = valuePtr;
  }
  else
  {
    if ((*(unsigned char *)(*(void *)(a1 + 136) + 8) & 8) != 0) {
      int FDRMinimalManifestVersionForDeviceInternal = 1;
    }
    else {
      int FDRMinimalManifestVersionForDeviceInternal = AMFDRSealingMapGetFDRMinimalManifestVersionForDeviceInternal(a1);
    }
    int valuePtr = FDRMinimalManifestVersionForDeviceInternal;
  }
  if ((FDRMinimalManifestVersionForDeviceInternal - 3) > 0xFFFFFFFD)
  {
    *a2 = FDRMinimalManifestVersionForDeviceInternal;
    return 1;
  }
LABEL_13:
  AMSupportLogInternal();
  return 0;
}

BOOL _AMFDRDataCreatePtrFromTagStringCFArray(const __CFArray *a1, void *a2, unsigned int *a3)
{
  if (a2
    && a3
    && (Count = CFArrayGetCount(a1), (unsigned int v7 = Count) != 0)
    && (CFDataRef v8 = malloc_type_malloc(4 * Count, 0x100004052888210uLL)) != 0)
  {
    CFDictionaryRef v9 = v8;
    unint64_t v10 = 0;
    BOOL v11 = 0;
    CFDataRef v12 = 0;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v10);
      if (v12) {
        CFRelease(v12);
      }
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v13, ValueAtIndex, 0x8000100u, 0x5Fu);
      if (!ExternalRepresentation) {
        break;
      }
      CFDataRef v12 = ExternalRepresentation;
      if (CFDataGetLength(ExternalRepresentation) != 4)
      {
        AMSupportLogInternal();
        free(v9);
        goto LABEL_12;
      }
      BytePtr = (unsigned int *)CFDataGetBytePtr(v12);
      *((_DWORD *)v9 + v10++) = AMFDRTagsStringToTag(BytePtr);
      BOOL v11 = v10 >= v7;
      if (v7 == v10)
      {
        *a2 = v9;
        *a3 = v7;
        BOOL v11 = 1;
LABEL_12:
        CFRelease(v12);
        return v11;
      }
    }
    AMSupportLogInternal();
    free(v9);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
  return v11;
}

uint64_t AMFDRDataVerifyInternal(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFData *a5, const __CFString *a6, int a7, CFDataRef *a8, uint64_t a9)
{
  CFStringRef v9 = a3;
  CFStringRef v10 = a2;
  uint64_t v11 = a9;
  uint64_t v112 = *MEMORY[0x263EF8340];
  memset(length, 0, sizeof(length));
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v110 = v12;
  long long v111 = v12;
  long long v108 = v12;
  long long v109 = v12;
  long long v106 = v12;
  long long v107 = v12;
  long long v104 = v12;
  long long v105 = v12;
  long long v102 = v12;
  long long v103 = v12;
  long long v100 = v12;
  long long v101 = v12;
  long long v98 = v12;
  long long v99 = v12;
  long long v96 = v12;
  long long v97 = v12;
  long long v94 = v12;
  long long v95 = v12;
  CFDataRef v92 = 0;
  int v91 = 0;
  long long v90 = 0;
  unsigned int v89 = 0;
  if (!a1)
  {
    CFStringRef format = @"amfdr is NULL";
LABEL_117:
    AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", format, v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v82 = 0;
    CFDataRef v83 = 0;
    CFDataRef cf = 0;
    CFDataRef theData = 0;
    CFDataRef v27 = 0;
LABEL_129:
    CFDataRef v15 = 0;
    goto LABEL_130;
  }
  CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 16);
  if (!v14)
  {
    CFStringRef format = @"amfdr->optionsDict is NULL";
    goto LABEL_117;
  }
  if (!a2)
  {
    CFStringRef v78 = @"dataClassStr is NULL";
LABEL_120:
    AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", v78, v80);
    CFDataRef v72 = 0;
    CFDataRef v15 = 0;
    CFDataRef v27 = 0;
    CFDataRef v71 = 0;
    CFDataRef v83 = 0;
    CFDataRef cf = 0;
    CFDataRef v82 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v49 = 0;
    CFDataRef v50 = 0;
    uint64_t v59 = 2;
    goto LABEL_89;
  }
  if (!a3)
  {
    CFStringRef v78 = @"dataInstanceStr is NULL";
    goto LABEL_120;
  }
  CFDataRef v15 = a5;
  if (!a5)
  {
    AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"valueData is NULL", v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v82 = 0;
    CFDataRef v83 = 0;
    CFDataRef cf = 0;
    CFDataRef theData = 0;
    CFDataRef v27 = 0;
LABEL_130:
    CFDataRef v81 = 0;
    goto LABEL_145;
  }
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v14, @"TrustObjectDigest");
  if (Value)
  {
    CFDataRef v20 = Value;
    *(void *)&long long v97 = CFDataGetBytePtr(Value);
    DWORD2(v97) = CFDataGetLength(v20);
  }
  CFAllocatorRef v21 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v21, v10, 0x8000100u, 0x20u);
  if (!ExternalRepresentation)
  {
    uint64_t v59 = 2;
    AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"dataClassData is NULL", v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v82 = 0;
    CFDataRef v83 = 0;
    CFDataRef cf = 0;
    CFDataRef theData = 0;
    CFDataRef v27 = 0;
    CFDataRef v15 = 0;
    CFDataRef v81 = 0;
    CFStringRef v9 = a3;
    goto LABEL_84;
  }
  CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
  CFStringRef v9 = a3;
  CFDataRef theData = CFStringCreateExternalRepresentation(v22, a3, 0x8000100u, 0x20u);
  if (!theData)
  {
    uint64_t v59 = 2;
    AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"dataInstanceData is NULL", v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v82 = 0;
    CFDataRef v83 = 0;
    CFDataRef cf = 0;
    CFDataRef theData = 0;
LABEL_126:
    CFDataRef v15 = 0;
    CFDataRef v81 = 0;
    CFDataRef v27 = ExternalRepresentation;
    goto LABEL_84;
  }
  if (!a6)
  {
    a6 = (const __CFString *)AMFDRGetAssemblyIDToVerify(a1, v10);
    if (!a6)
    {
      CFDataRef cf = 0;
      CFDataRef v27 = ExternalRepresentation;
      goto LABEL_17;
    }
  }
  CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v24 = CFStringCreateExternalRepresentation(v23, a6, 0x8000100u, 0x20u);
  if (!v24)
  {
    uint64_t v59 = 2;
    AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"assemblyIDData is NULL", v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v82 = 0;
    CFDataRef v83 = 0;
    CFDataRef cf = 0;
    goto LABEL_126;
  }
  CFDataRef v25 = v24;
  BytePtr = CFDataGetBytePtr(v24);
  CFDataRef v27 = ExternalRepresentation;
  CFDataRef cf = v25;
  if (a7)
  {
    *(void *)&long long v110 = BytePtr;
    DWORD2(v110) = CFDataGetLength(v25);
  }
  else
  {
    *(void *)&long long v102 = BytePtr;
    DWORD2(v102) = CFDataGetLength(v25);
  }
LABEL_17:
  CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"INST");
  if (v28)
  {
    CFStringRef v29 = v28;
    CFAllocatorRef v30 = CFGetAllocator((CFTypeRef)a1);
    CFDataRef v31 = CFStringCreateExternalRepresentation(v30, v29, 0x8000100u, 0x20u);
    if (v31)
    {
      CFDataRef v32 = v31;
      *(void *)&long long v100 = CFDataGetBytePtr(v31);
      CFDataRef v81 = v32;
      DWORD2(v100) = CFDataGetLength(v32);
      goto LABEL_21;
    }
    AMFDRErrorPushInternal(a9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"Failed to convert sealedDataInstance to CFDataRef", v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v82 = 0;
    CFDataRef v83 = 0;
    goto LABEL_129;
  }
  CFDataRef v81 = 0;
LABEL_21:
  if ((AMFDRDataGetSigningVersion(a1, &v91) & 1) == 0)
  {
    AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"AMFDRDataGetSigningVersion failed", v80);
LABEL_134:
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    goto LABEL_135;
  }
  if (v91 != 2)
  {
    CFDataRef v83 = 0;
    uint64_t v36 = 0;
LABEL_39:
    CFDataRef v37 = 0;
    goto LABEL_40;
  }
  CFBooleanRef v33 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"SkipVerifySik");
  if (v33)
  {
    CFBooleanRef v34 = v33;
    CFTypeID v35 = CFGetTypeID(v33);
    if (v35 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v34))
      {
        uint64_t v36 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"kAMFDROptionOfflineSigning");
        CFDataRef v83 = 0;
        CFDataRef v37 = 0;
        uint64_t v11 = a9;
        goto LABEL_40;
      }
    }
  }
  CFStringRef SikPub = (const __CFString *)AMFDRCryptoGetSikPub(a1);
  if (!SikPub)
  {
    AMFDRErrorPushInternal(a9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"sikPub is NULL", v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
LABEL_135:
    CFDataRef v82 = 0;
    CFDataRef v83 = 0;
LABEL_144:
    CFDataRef v15 = 0;
    goto LABEL_145;
  }
  if (!a4) {
    a4 = (const __CFString *)AMFDRGetSikOverride((void *)a1, (uint64_t)v10, (uint64_t)a3);
  }
  uint64_t v36 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"kAMFDROptionOfflineSigning");
  CFAllocatorRef v39 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v40 = CFStringCreateExternalRepresentation(v39, SikPub, 0x8000100u, 0x20u);
  if (!v40)
  {
    AMFDRErrorPushInternal(a9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"Failed to convert sikPub to CFDataRef", v80);
    goto LABEL_134;
  }
  CFDataRef v41 = v40;
  *(void *)&long long v101 = CFDataGetBytePtr(v40);
  uint64_t v11 = a9;
  CFDataRef v83 = v41;
  if (!(void)v101)
  {
    CFStringRef v79 = @"sik is NULL";
LABEL_139:
    AMFDRErrorPushInternal(a9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", v79, v80);
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    CFDataRef v82 = 0;
    goto LABEL_144;
  }
  DWORD2(v101) = CFDataGetLength(v41);
  if (!DWORD2(v101))
  {
    CFStringRef v79 = @"sikLength is 0";
    goto LABEL_139;
  }
  if (!a4) {
    goto LABEL_39;
  }
  CFAllocatorRef v42 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v43 = CFStringCreateExternalRepresentation(v42, a4, 0x8000100u, 0x20u);
  if (!v43)
  {
    CFStringRef v79 = @"Failed to convert sikOverride to CFDataRef";
    goto LABEL_139;
  }
  CFDataRef v37 = v43;
  *(void *)&long long v107 = CFDataGetBytePtr(v43);
  if (!(void)v107)
  {
    CFDataRef v82 = v37;
    CFStringRef v44 = @"sikOverride is NULL";
    goto LABEL_142;
  }
  DWORD2(v107) = CFDataGetLength(v37);
  if (!DWORD2(v107))
  {
    CFDataRef v82 = v37;
    CFStringRef v44 = @"sikOverrideLength is 0";
LABEL_142:
    AMFDRErrorPushInternal(a9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", v44, v80);
    goto LABEL_143;
  }
LABEL_40:
  CFArrayRef v45 = (const __CFArray *)AMFDRGetSubCCDigestsToVerify(a1, v10);
  CFDataRef v82 = v37;
  if (v45)
  {
    if (!_AMFDRDataCreatePtrFromTagStringCFArray(v45, &v90, &v89))
    {
      AMFDRErrorPushInternal(v11, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"cannot convert subCCsToVerifyDigest to uint32_t ptr", v80);
      goto LABEL_143;
    }
    *(void *)&long long v111 = v90;
    DWORD2(v111) = v89;
  }
  CFStringRef v46 = v10;
  if (v36)
  {
    CFTypeID v47 = CFGetTypeID(v36);
    if (v47 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue((CFBooleanRef)v36))
      {
        CFAllocatorRef v48 = CFGetAllocator((CFTypeRef)a1);
        CFStringRef SikPub = CFStringCreateWithFormat(v48, 0, @"%@.offline", a3);
        if (SikPub)
        {
          CFDataRef v49 = (const __CFData *)(*(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, uint64_t))(*(void *)(a1 + 48) + 16))(a1, v10, SikPub, a9);
          if (v49)
          {
            CFDataRef v50 = AMFDROfflineBlobVerify(a1, v49, a9);
            if (v50)
            {
              uint64_t v51 = CFDataGetBytePtr(v15);
              unsigned int v52 = CFDataGetLength(v15);
              CFStringRef v53 = CFDataGetBytePtr(theData);
              unsigned int v54 = CFDataGetLength(theData);
              char v55 = CFDataGetBytePtr(v50);
              unsigned int v56 = CFDataGetLength(v50);
              unsigned int v57 = v54;
              uint64_t v58 = (uint64_t)v55;
              CFDataRef v27 = ExternalRepresentation;
              CFStringRef v9 = a3;
              uint64_t v59 = AMFDRDecodeEvaluateTrustOffline((uint64_t)v51, v52, (uint64_t)v53, v57, v58, v56, &length[1], length);
              CFDataRef v15 = 0;
              CFStringRef v10 = v46;
              goto LABEL_79;
            }
            uint64_t v59 = 2;
            AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"Failed to verify offline blob", v80);
          }
          else
          {
            uint64_t v59 = 2;
            AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"offlineBlob is NULL", v80);
            CFDataRef v50 = 0;
          }
          CFDataRef v15 = 0;
        }
        else
        {
          uint64_t v59 = 2;
          AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"offlineDataInstanceStr is NULL", v80);
          CFDataRef v50 = 0;
          CFDataRef v49 = 0;
          CFDataRef v15 = 0;
        }
LABEL_84:
        if (v10 && v9)
        {
          AMFDRErrorPushInternal(a9, 18, (const __CFNumber *)v59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"trust verification error code=0x%016llX for %@:%@", v59);
          CFDataRef v71 = theData;
          CFDataRef v72 = v81;
          goto LABEL_90;
        }
        CFDataRef v71 = theData;
        CFDataRef v72 = v81;
LABEL_89:
        AMFDRErrorPushInternal(a9, 18, (const __CFNumber *)v59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"trust verification error code=0x%016llX", v59);
LABEL_90:
        uint64_t v73 = 0;
        uint64_t v75 = 0;
        CFDataRef v74 = v82;
        if (!v27) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
    }
  }
  CFAllocatorRef v60 = CFGetAllocator((CFTypeRef)a1);
  if ((AMFDRDataStripExtraManifest(v60, v15, (CFTypeRef *)&v92, 0, v11) & 1) == 0)
  {
    AMFDRErrorPushInternal(v11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"AMFDRDataStripExtraManifest failed", v80);
LABEL_143:
    CFDataRef v50 = 0;
    CFDataRef v49 = 0;
    CFStringRef SikPub = 0;
    goto LABEL_144;
  }
  size_t v61 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"SealingManifest");
  CFDictionaryRef v62 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"TrustObject");
  if (v61)
  {
    CFTypeID v63 = CFGetTypeID(v61);
    BOOL v64 = v63 == CFDataGetTypeID();
    CFStringRef v10 = v46;
    if (v64)
    {
      *(void *)&long long v96 = CFDataGetBytePtr((CFDataRef)v61);
      DWORD2(v96) = CFDataGetLength((CFDataRef)v61);
    }
  }
  if (v62)
  {
    CFTypeID v65 = CFGetTypeID(v62);
    BOOL v64 = v65 == CFDataGetTypeID();
    CFStringRef v10 = v46;
    if (v64)
    {
      *(void *)&long long v95 = CFDataGetBytePtr((CFDataRef)v62);
      DWORD2(v95) = CFDataGetLength((CFDataRef)v62);
    }
  }
  *(void *)&long long v94 = CFDataGetBytePtr(v92);
  DWORD2(v94) = CFDataGetLength(v92);
  *(void *)&long long v98 = CFDataGetBytePtr(v27);
  DWORD2(v98) = CFDataGetLength(v27);
  *(void *)&long long v99 = CFDataGetBytePtr(theData);
  DWORD2(v99) = CFDataGetLength(theData);
  if (AMFDROptionsGetBooleanValue(a1, @"CopyAllowUnsealed", 1)
    && _AMFDRAPTicketHasBooleanEntitlement(a1))
  {
    *(void *)&long long v103 = v103 | 2;
  }
  if (AMFDROptionsGetBooleanValue(a1, @"CopyAllowRawData", 0)) {
    *(void *)&long long v103 = v103 | 8;
  }
  if (AMFDROptionsGetBooleanValue(a1, @"CopyAllowOfflineSigning", 0)) {
    *(void *)&long long v103 = v103 | 0x10;
  }
  if (AMFDROptionsGetBooleanValue(a1, @"SealingManifestIsMinimal", 0))
  {
    *(void *)&long long v103 = v103 | 0x100;
    CFStringRef v66 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"MinimalSealingDataInstance");
    if (v66)
    {
      CFStringRef v67 = v66;
      CFAllocatorRef v68 = CFGetAllocator((CFTypeRef)a1);
      CFDataRef v69 = CFStringCreateExternalRepresentation(v68, v67, 0x8000100u, 0x20u);
      CFDataRef v15 = v69;
      if (v69)
      {
        *(void *)&long long v108 = CFDataGetBytePtr(v69);
        DWORD2(v108) = CFDataGetLength(v15);
        goto LABEL_71;
      }
      AMFDRErrorPushInternal(v11, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifyInternal", @"failed to create minimalSealingDataInstanceData", v80);
      CFDataRef v50 = 0;
      CFDataRef v49 = 0;
      CFStringRef SikPub = 0;
LABEL_145:
      uint64_t v59 = 2;
      goto LABEL_84;
    }
  }
  CFDataRef v15 = 0;
LABEL_71:
  if (v91 == 2 && !AMFDROptionsGetBooleanValue(a1, @"AllowVersionMismatch", 0)) {
    *(void *)&long long v103 = v103 | 0x20;
  }
  if ((_AMFDRDataAllowStagedSealing(a1) & 1) == 0) {
    *(void *)&long long v103 = v103 | 0x400;
  }
  if (AMFDRIsProtoDevice())
  {
    AMSupportLogInternal();
    *(void *)&long long v103 = v103 | 0x4000;
  }
  uint64_t v59 = AMFDRDecodeTrustEvaluation((uint64_t *)&v94, &length[1], length);
  CFStringRef SikPub = 0;
  CFDataRef v49 = 0;
  CFDataRef v50 = 0;
LABEL_79:
  AMSupportLogInternal();
  if (a8 && *(void *)&length[1] && length[0])
  {
    CFAllocatorRef v70 = CFGetAllocator((CFTypeRef)a1);
    *a8 = CFDataCreate(v70, *(const UInt8 **)&length[1], length[0]);
  }
  if (v59) {
    goto LABEL_84;
  }
  uint64_t v73 = 1;
  CFDataRef v71 = theData;
  CFDataRef v72 = v81;
  CFDataRef v74 = v82;
LABEL_91:
  CFRelease(v27);
  uint64_t v75 = v73;
LABEL_92:
  if (v71) {
    CFRelease(v71);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SikPub) {
    CFRelease(SikPub);
  }
  if (v72) {
    CFRelease(v72);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v83) {
    CFRelease(v83);
  }
  if (v74) {
    CFRelease(v74);
  }
  if (v92)
  {
    CFRelease(v92);
    CFDataRef v92 = 0;
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v90) {
    free(v90);
  }
  return v75;
}

uint64_t _AMFDRDataAllowStagedSealing(uint64_t a1)
{
  if (AMFDROptionsGetBooleanValue(a1, @"EnableStagedSealing", 0)) {
    return 1;
  }
  if (AMFDRDataIsDiagnosticMode_onceToken != -1) {
    dispatch_once(&AMFDRDataIsDiagnosticMode_onceToken, &__block_literal_global_212);
  }
  return AMFDRDataIsDiagnosticMode_result;
}

uint64_t AMFDRDataVerifySealingManifestInternal(uint64_t cf, const __CFData *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  int v32 = 0;
  uint64_t v31 = 0;
  int v30 = 0;
  if (!cf)
  {
    CFStringRef v27 = @"amfdr is NULL";
LABEL_41:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifySealingManifestInternal", v27, v29);
    return 0;
  }
  if (!*(void *)(cf + 16))
  {
    CFStringRef v27 = @"amfdr->optionsDict is NULL";
    goto LABEL_41;
  }
  if (!a2)
  {
    CFStringRef v27 = @"manifestData is NULL";
    goto LABEL_41;
  }
  if (!a3)
  {
    CFStringRef v27 = @"sealedDataInstance is NULL";
    goto LABEL_41;
  }
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)cf);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v8, a3, 0x8000100u, 0x20u);
  if (!ExternalRepresentation)
  {
    AMFDRErrorPushInternal(a4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifySealingManifestInternal", @"failed to create sealedDataInstanceData", v29);
    return 0;
  }
  CFDataRef v10 = ExternalRepresentation;
  if ((AMFDRDataGetSigningVersion(cf, &v32) & 1) == 0)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifySealingManifestInternal", @"AMFDRDataGetSigningVersion failed", v29);
LABEL_48:
    CFRelease(v10);
    return 0;
  }
  if (v32 == 2 && !AMFDROptionsGetBooleanValue(cf, @"SkipVerifySik", 0))
  {
    uint64_t SikPub = AMFDRCryptoGetSikPub(cf);
    if (SikPub)
    {
      CFStringRef v13 = (const __CFString *)SikPub;
      CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)cf);
      CFDataRef v11 = CFStringCreateExternalRepresentation(v14, v13, 0x8000100u, 0x20u);
      if (v11) {
        goto LABEL_12;
      }
      CFStringRef v28 = @"Failed to convert sikPub to CFDataRef";
    }
    else
    {
      CFStringRef v28 = @"sikPub is NULL";
    }
    AMFDRErrorPushInternal(a4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifySealingManifestInternal", v28, v29);
    goto LABEL_48;
  }
  CFDataRef v11 = 0;
LABEL_12:
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  uint64_t v15 = 128;
  *(void *)&long long v42 = 128;
  if (AMFDROptionsGetBooleanValue(cf, @"SealingManifestIsMinimal", 0)
    && (uint64_t v15 = 384,
        *(void *)&long long v42 = 384,
        (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"MinimalSealingDataInstance")) != 0))
  {
    CFAllocatorRef v17 = CFGetAllocator((CFTypeRef)cf);
    CFDataRef v18 = CFStringCreateExternalRepresentation(v17, Value, 0x8000100u, 0x20u);
    CFDataRef v19 = v18;
    if (!v18)
    {
      AMFDRErrorPushInternal(a4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifySealingManifestInternal", @"failed to create minimalSealingDataInstanceData", v29);
      goto LABEL_30;
    }
    *(void *)&long long v47 = CFDataGetBytePtr(v18);
    DWORD2(v47) = CFDataGetLength(v19);
    uint64_t v15 = 384;
  }
  else
  {
    CFDataRef v19 = 0;
  }
  if (v32 == 2 && !AMFDROptionsGetBooleanValue(cf, @"AllowVersionMismatch", 0))
  {
    v15 |= 0x20uLL;
    *(void *)&long long v42 = v15;
  }
  if ((_AMFDRDataAllowStagedSealing(cf) & 1) == 0) {
    *(void *)&long long v42 = v15 | 0x400;
  }
  *(void *)&long long v33 = CFDataGetBytePtr(a2);
  DWORD2(v33) = CFDataGetLength(a2);
  *(void *)&long long v39 = CFDataGetBytePtr(v10);
  DWORD2(v39) = CFDataGetLength(v10);
  CFDataRef v20 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"TrustObject");
  if (v20)
  {
    CFDataRef v21 = v20;
    *(void *)&long long v34 = CFDataGetBytePtr(v20);
    DWORD2(v34) = CFDataGetLength(v21);
  }
  CFDataRef v22 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"TrustObjectDigest");
  if (v22)
  {
    CFDataRef v23 = v22;
    *(void *)&long long v36 = CFDataGetBytePtr(v22);
    DWORD2(v36) = CFDataGetLength(v23);
  }
  if (v11)
  {
    *(void *)&long long v40 = CFDataGetBytePtr(v11);
    DWORD2(v40) = CFDataGetLength(v11);
  }
  CFNumberRef v24 = (const __CFNumber *)AMFDRDecodeTrustEvaluation((uint64_t *)&v33, &v31, &v30);
  if (!v24)
  {
    uint64_t v25 = 1;
    goto LABEL_32;
  }
  AMFDRErrorPushInternal(a4, 18, v24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataVerifySealingManifestInternal", @"trust verification error code=0x%016llX for %@:%@", (char)v24);
LABEL_30:
  uint64_t v25 = 0;
LABEL_32:
  CFRelease(v10);
  if (v11) {
    CFRelease(v11);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v25;
}

uint64_t AMFDRDataCreateCombined(CFDictionaryRef *a1, CFDataRef theData, const __CFData *a3, CFDataRef *a4, uint64_t a5)
{
  uint64_t v31 = 0;
  unsigned int v30 = 0;
  char v29 = 0;
  unsigned int v28 = 0;
  CFStringRef v27 = 0;
  unsigned int v26 = 0;
  if (!a1)
  {
    CFStringRef v24 = @"amfdr is NULL";
LABEL_37:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateCombined", v24, v25);
    goto LABEL_38;
  }
  if (!theData)
  {
    CFStringRef v24 = @"value is NULL";
    goto LABEL_37;
  }
  if (!a4)
  {
    CFStringRef v24 = @"outValueData is NULL";
    goto LABEL_37;
  }
  uint64_t v31 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  if (AMFDRDecodeCombined((uint64_t)BytePtr, Length, &v29, &v28, &v27, &v26)) {
    goto LABEL_7;
  }
  BytePtr = v27;
  if (!v27)
  {
    CFStringRef v24 = @"foundData is NULL";
    goto LABEL_37;
  }
  unsigned int Length = v26;
  if (!v26)
  {
    CFStringRef v24 = @"foundDataLength is 0";
    goto LABEL_37;
  }
LABEL_7:
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1[2], @"TrustObject");
  if (Value)
  {
    CFDataRef v13 = Value;
    CFAllocatorRef v14 = CFDataGetBytePtr(Value);
    unsigned int v15 = CFDataGetLength(v13);
    if (a3) {
      goto LABEL_12;
    }
  }
  else
  {
    CFAllocatorRef v14 = v29;
    unsigned int v15 = v28;
    if (a3) {
      goto LABEL_12;
    }
  }
  a3 = (const __CFData *)CFDictionaryGetValue(a1[2], @"SealingManifest");
  if (!a3)
  {
    AMSupportLogInternal();
    CFDataRef v16 = 0;
    unsigned int v18 = 0;
    if (BytePtr) {
      goto LABEL_15;
    }
LABEL_23:
    CFStringRef v23 = @"valueData is NULL";
LABEL_34:
    AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateCombined", v23, v25);
    goto LABEL_38;
  }
LABEL_12:
  CFDataRef v16 = (UInt8 *)CFDataGetBytePtr(a3);
  unsigned int v17 = CFDataGetLength(a3);
  if (!v16)
  {
    CFStringRef v23 = @"sealingManifest is NULL";
    goto LABEL_34;
  }
  unsigned int v18 = v17;
  if (!v17)
  {
    CFStringRef v23 = @"sealingManifestLength is 0";
    goto LABEL_34;
  }
  if (!BytePtr) {
    goto LABEL_23;
  }
LABEL_15:
  if (!Length)
  {
    CFStringRef v23 = @"valueDataLength has size of 0";
    goto LABEL_34;
  }
  if (FDREncodeCreateCombinedFast((uint64_t)BytePtr, Length, v16, v18, v14, v15, (char **)&v31, &v30))
  {
    AMFDRErrorPushInternal(a5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateCombined", @"FDREncodeCreateCombined failed", v25);
    goto LABEL_38;
  }
  if (!v31)
  {
    CFStringRef v23 = @"combinedData is NULL";
    goto LABEL_34;
  }
  if (!v30)
  {
    CFStringRef v23 = @"combinedData has size of 0";
    goto LABEL_34;
  }
  AMSupportSafeRelease();
  CFAllocatorRef v19 = CFGetAllocator(a1);
  CFDataRef v20 = CFDataCreateWithBytesNoCopy(v19, v31, v30, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
  *a4 = v20;
  if (v20)
  {
    uint64_t v31 = 0;
    uint64_t v21 = 1;
    goto LABEL_21;
  }
  AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateCombined", @"*outCombinedData is NULL", v25);
LABEL_38:
  if (v31)
  {
    free(v31);
    uint64_t v21 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v21 = 0;
  }
LABEL_21:
  AMSupportSafeRelease();
  return v21;
}

uint64_t AMFDRDataErrorIsBenign(uint64_t a1, char a2, CFErrorRef *a3)
{
  uint64_t v3 = (uint64_t)a3;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataErrorIsBenign", @"amfdr is NULL", v10);
    return 0;
  }
  if (!a3)
  {
    AMFDRErrorPushInternal(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataErrorIsBenign", @"outError is NULL", v10);
    return v3;
  }
  if (!*a3)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataErrorIsBenign", @"%@ failed but did not return an error", a2);
    return 0;
  }
  uint64_t v6 = AMFDRGetUnderlyingErrorCode(a1, a3);
  CFDictionaryRef v7 = CFErrorCopyUserInfo(*(CFErrorRef *)v3);
  if ((AMFDRNonEmptyArrayValueExists(v7, @"MissingDataInstances") & 1) == 0
    && (AMFDRNonEmptyArrayValueExists(v7, @"MissingMultiManifests") & 1) == 0)
  {
    AMFDRErrorPushInternal(v3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataErrorIsBenign", @"%@ failed to report what data is missing", a2);
    goto LABEL_21;
  }
  char v8 = AMFDRAllowIncompleteData(a1);
  if (v6 == 20) {
    goto LABEL_9;
  }
  if (v6 != 28)
  {
    AMFDRErrorPushInternal(v3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataErrorIsBenign", @"Failed to recover required data from FDR DataStore with fatal error code: %ld", v6);
    goto LABEL_21;
  }
  if ((v8 & 1) == 0)
  {
    AMFDRErrorPushInternal(v3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataErrorIsBenign", @"Required data missing from FDR DataStore but neither 'Allow incomplete data' nor 'Allow unsealed data' is present in AP or Sealing Manifests.", v10);
LABEL_21:
    uint64_t v3 = 0;
    if (!v7) {
      return v3;
    }
    goto LABEL_12;
  }
LABEL_9:
  AMSupportLogInternal();
  if (*(void *)v3)
  {
    CFRelease(*(CFTypeRef *)v3);
    *(void *)uint64_t v3 = 0;
  }
  uint64_t v3 = 1;
  if (v7) {
LABEL_12:
  }
    CFRelease(v7);
  return v3;
}

uint64_t _AMFDRDataClaimInternal(const void *a1, const __CFArray *a2, const __CFArray *a3, const void *a4, const void *a5, const __CFArray *a6, const __CFArray *a7, CFTypeRef *a8)
{
  v59[0] = 0;
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFArrayRef theArray = CFArrayCreateMutable(v15, 0, MEMORY[0x263EFFF70]);
  if (!theArray)
  {
    CFStringRef format = @"dataClassesToReq is NULL";
LABEL_66:
    AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", format, v48);
    long long v38 = 0;
    CFMutableDictionaryRef v25 = 0;
LABEL_67:
    CFStringRef v27 = 0;
    goto LABEL_73;
  }
  CFAllocatorRef v16 = CFGetAllocator(a1);
  CFArrayRef Mutable = CFArrayCreateMutable(v16, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    CFStringRef format = @"dataInstancesToReq is NULL";
    goto LABEL_66;
  }
  CFAllocatorRef v17 = CFGetAllocator(a1);
  CFMutableArrayRef v18 = CFArrayCreateMutable(v17, 0, MEMORY[0x263EFFF70]);
  if (!v18)
  {
    CFStringRef format = @"dataClassesChallengeClaim is NULL";
    goto LABEL_66;
  }
  CFAllocatorRef v19 = v18;
  long long v50 = a4;
  CFAllocatorRef v20 = CFGetAllocator(a1);
  CFMutableArrayRef v21 = CFArrayCreateMutable(v20, 0, MEMORY[0x263EFFF70]);
  if (!v21)
  {
    CFStringRef format = @"dataInstancesChallengeClaim is NULL";
    goto LABEL_66;
  }
  CFDataRef v22 = v21;
  CFAllocatorRef v23 = CFGetAllocator(a1);
  CFMutableStringRef v55 = CFStringCreateMutable(v23, 0);
  if (!v55)
  {
    CFStringRef format = @"claimPermissions is NULL";
    goto LABEL_66;
  }
  CFAllocatorRef v24 = CFGetAllocator(a1);
  CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v25)
  {
    AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"claimOptions is NULL", v48);
    long long v38 = 0;
    goto LABEL_67;
  }
  CFTypeRef cf = a1;
  unsigned int v26 = (__CFString *)AMFDRCreateCopy((uint64_t)a1);
  CFStringRef v27 = v26;
  if (!v26)
  {
    AMFDRErrorPushInternal((uint64_t)a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"cannot create a separate amfdr object for data claiming", v48);
    long long v38 = 0;
    goto LABEL_73;
  }
  long long v49 = a5;
  unsigned int v52 = v25;
  CFStringRef v53 = a8;
  CFStringRef v28 = (const __CFString *)*MEMORY[0x263EFFB38];
  AMFDRSetOption((uint64_t)v26, @"PersistCertificate", (const __CFString *)*MEMORY[0x263EFFB38]);
  AMFDRSetOption((uint64_t)v27, @"GetCombined", v28);
  AMFDRSetOption((uint64_t)v27, @"PutCombined", v28);
  AMFDRSetOption((uint64_t)v27, @"VerifyData", v28);
  AMFDRSetOption((uint64_t)v27, @"SignData", v28);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v30 = Count;
    for (CFIndex i = 0; v30 != i; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
      v60.CFIndex length = CFArrayGetCount(a7);
      v60.location = 0;
      if (CFArrayContainsValue(a7, v60, ValueAtIndex))
      {
        CFStringRef v33 = (const __CFString *)CFArrayGetValueAtIndex(a3, i);
        if (!v33) {
          goto LABEL_54;
        }
        CFStringRef v34 = v33;
        if (a6 && (v61.CFIndex length = CFArrayGetCount(a6), v61.location = 0, CFArrayContainsValue(a6, v61, ValueAtIndex)))
        {
          CFArrayAppendValue(v19, ValueAtIndex);
          CFArrayAppendValue(v22, v34);
        }
        else
        {
          CFArrayAppendValue(theArray, ValueAtIndex);
          CFArrayAppendValue(Mutable, v34);
          if ((AMFDRDataAppendPermissionsString(v27, 0xAu, ValueAtIndex, v34, v55) & 1) == 0)
          {
            a8 = v53;
            AMFDRErrorPushInternal((uint64_t)v53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"AMFDRDataAppendPermissionsString failed", (char)v49);
            goto LABEL_59;
          }
        }
      }
    }
  }
  if (CFArrayGetCount(v19) < 1 || (CFIndex v35 = CFArrayGetCount(v19), v35 < 1))
  {
    long long v38 = 0;
LABEL_31:
    if (CFArrayGetCount(theArray) < 1)
    {
      AMSupportLogInternal();
      CFMutableDictionaryRef v25 = v52;
      a8 = v53;
      goto LABEL_43;
    }
    int v58 = 2;
    CFMutableDictionaryRef v25 = v52;
    a8 = v53;
    if (AMFDRDataGetSigningVersion((uint64_t)v27, &v58))
    {
      if (v58 == 1) {
        AMFDRSetOption((uint64_t)v27, @"OrganizationalUnit", @"Devices - Stations");
      }
      AMFDRSetOption((uint64_t)v27, @"Permissions", v55);
      if ((AMFDRPermissionsRequest((uint64_t)v27, v53) & 1) == 0)
      {
        CFStringRef v44 = @"Permissions request failed.";
        goto LABEL_72;
      }
      if (v50) {
        CFDictionarySetValue(v52, @"DeviceOnlySigningDataClasses", v50);
      }
      if (v49) {
        CFDictionarySetValue(v52, @"ServerOnlySigningDataClasses", v49);
      }
      if ((AMFDRDataMultiClaimWithOptions((uint64_t)v27, v52, theArray, Mutable, 0, (uint64_t)v53) & 1) == 0)
      {
        CFStringRef v44 = @"AMFDRDataMultiClaimWithOptions failed";
LABEL_72:
        AMFDRErrorPushInternal((uint64_t)v53, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", v44, (char)v49);
        goto LABEL_73;
      }
LABEL_43:
      AMFDRSetOption((uint64_t)cf, @"ClaimDataClasses", 0);
      uint64_t v45 = 1;
      goto LABEL_44;
    }
    AMFDRErrorPushInternal((uint64_t)v53, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"AMFDRDataGetSigningVersion failed", (char)v49);
LABEL_73:
    uint64_t v45 = 0;
    goto LABEL_44;
  }
  CFIndex v36 = v35;
  CFIndex v37 = 0;
  long long v38 = 0;
  CFStringRef PermissionsString = 0;
  while (1)
  {
    if (v38) {
      CFRelease(v38);
    }
    if (PermissionsString) {
      CFRelease(PermissionsString);
    }
    CFStringRef v40 = (const __CFString *)CFArrayGetValueAtIndex(v19, v37);
    CFStringRef v41 = (const __CFString *)CFArrayGetValueAtIndex(v22, v37);
    if (!v41) {
      break;
    }
    CFStringRef v42 = v41;
    AMSupportLogInternal();
    CFStringRef PermissionsString = AMFDRDataCreatePermissionsString(v27, 8u, v40, v42);
    if (!PermissionsString)
    {
      a8 = v53;
      AMFDRErrorPushInternal((uint64_t)v53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"AMFDRDataCreatePermissionsString failed", (char)v49);
      goto LABEL_59;
    }
    AMFDRSetOption((uint64_t)v27, @"Permissions", PermissionsString);
    CFTypeRef v43 = AMFDRDataHTTPChallengeClaim((uint64_t)v27, v40, v42, v59);
    long long v38 = v43;
    if (v59[0])
    {
      AMFDRErrorPushInternal((uint64_t)v59, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"AMFDRDataHTTPChallengeClaim failed", (char)v49);
      uint64_t v45 = 0;
      CFMutableDictionaryRef v25 = v52;
      a8 = v53;
      goto LABEL_44;
    }
    if (!v43)
    {
      a8 = v53;
      AMFDRErrorPushInternal((uint64_t)v53, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"responseClaimData is NULL", (char)v49);
      goto LABEL_60;
    }
    if (v36 == ++v37) {
      goto LABEL_31;
    }
  }
LABEL_54:
  a8 = v53;
  AMFDRErrorPushInternal((uint64_t)v53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataClaimInternal", @"malformed dataInstanceArray", (char)v49);
LABEL_59:
  long long v38 = 0;
LABEL_60:
  uint64_t v45 = 0;
  CFMutableDictionaryRef v25 = v52;
LABEL_44:
  if (a8 && v59[0]) {
    *a8 = CFRetain(v59[0]);
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (v38) {
    CFRelease(v38);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v45;
}

uint64_t AMFDRDataAddDataClassesToClaim(CFDictionaryRef *a1, const __CFArray *cf)
{
  if (a1
    && a1[2]
    && cf
    && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFArrayGetTypeID())
    && ((CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1[2], @"ClaimDataClasses"),
         CFAllocatorRef v6 = CFGetAllocator(a1),
         !Value)
      ? (CFMutableArrayRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]))
      : (CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(v6, 0, Value)),
        (CFArrayRef v8 = Mutable) != 0))
  {
    if (CFArrayGetCount(cf) >= 1)
    {
      CFIndex v9 = 0;
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(cf, v9);
        v12.CFIndex length = CFArrayGetCount(v8);
        v12.location = 0;
        if (!CFArrayContainsValue(v8, v12, ValueAtIndex)) {
          CFArrayAppendValue(v8, ValueAtIndex);
        }
        ++v9;
      }
      while (v9 < CFArrayGetCount(cf));
    }
    AMFDRSetOption((uint64_t)a1, @"ClaimDataClasses", (const __CFString *)v8);
    CFRelease(v8);
    return 1;
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

uint64_t AMFDRDataRecover(const void *a1, uint64_t a2, const void *a3, const void *a4, CFTypeRef cf, const void *a6, int a7, CFTypeRef *a8, uint64_t a9)
{
  if (!a1)
  {
    CFStringRef v23 = @"amfdrLocal is NULL";
LABEL_21:
    AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataRecover", v23, v25);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v23 = @"amfdrRemote is NULL";
    goto LABEL_21;
  }
  if (!cf)
  {
    CFStringRef v23 = @"dataClassArray is NULL";
    goto LABEL_21;
  }
  if (!a6)
  {
    CFStringRef v23 = @"dataInstanceArray is NULL";
    goto LABEL_21;
  }
  CFTypeID v16 = CFGetTypeID(cf);
  if (v16 != CFArrayGetTypeID())
  {
    CFStringRef v23 = @"dataClassArray must be a CFArrayRef";
    goto LABEL_21;
  }
  CFTypeID v17 = CFGetTypeID(a6);
  if (v17 != CFArrayGetTypeID())
  {
    CFStringRef v23 = @"dataInstanceArray must be a CFArrayRef";
    goto LABEL_21;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count != CFArrayGetCount((CFArrayRef)a6))
  {
    char v25 = CFArrayGetCount((CFArrayRef)cf);
    CFArrayGetCount((CFArrayRef)a6);
    CFStringRef v23 = @"dataClassArray length (%ld) does not match dataInstanceArray (%ld)";
    goto LABEL_21;
  }
  CFGetAllocator(a1);
  AMFDRSealedDataCreate();
  if (!v19)
  {
    AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataRecover", @"Failed to create sealedData. Data Recovery failed.", v25);
    return 0;
  }
  CFAllocatorRef v20 = v19;
  if ((AMFDRSealedDataSetDataClassInstance(v19, a3, a4, cf, a6, a9) & 1) == 0)
  {
    CFStringRef v24 = @"AMFDRSealedDataSetDataClassInstance failed";
LABEL_26:
    AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataRecover", v24, v25);
    uint64_t v21 = 0;
    goto LABEL_12;
  }
  if ((AMFDRSealingMapConfigSealedData(v20, a1, a9) & 1) == 0)
  {
    CFStringRef v24 = @"AMFDRSealingMapConfigSealedData failed.";
    goto LABEL_26;
  }
  uint64_t v21 = AMFDRSealedDataRecover((uint64_t)v20, (uint64_t)a1, a2, 1, a8, a9);
LABEL_12:
  CFRelease(v20);
  return v21;
}

uint64_t _AMFDRCopySealingManifestObjectTag(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, int a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = 0;
  if (!a1) {
    goto LABEL_11;
  }
  if (!a2) {
    goto LABEL_11;
  }
  if (!a3) {
    goto LABEL_11;
  }
  if (!a4) {
    goto LABEL_11;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)a1);
  if (!v8) {
    goto LABEL_11;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v8, @"SealingManifest");
  if (!Value) {
    goto LABEL_11;
  }
  CFDataRef v10 = Value;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v11;
  long long v46 = v11;
  long long v43 = v11;
  long long v44 = v11;
  long long v41 = v11;
  long long v42 = v11;
  long long v39 = v11;
  long long v40 = v11;
  long long v37 = v11;
  long long v38 = v11;
  long long v35 = v11;
  long long v36 = v11;
  long long v33 = v11;
  long long v34 = v11;
  long long v31 = v11;
  long long v32 = v11;
  long long v29 = v11;
  long long v30 = v11;
  long long v27 = v11;
  long long v28 = v11;
  long long v26 = v11;
  long long v24 = v11;
  long long v25 = v11;
  long long v22 = v11;
  long long v23 = v11;
  long long v20 = v11;
  long long v21 = v11;
  long long v19 = v11;
  CFIndex v17 = 0xAAAAAAAAAAAAAAAALL;
  CFMutableArrayRef v18 = (const UInt8 *)0xAAAAAAAAAAAAAAAALL;
  CFDataGetBytePtr(Value);
  CFDataGetLength(v10);
  if (Img4DecodeInitManifest()) {
    goto LABEL_11;
  }
  if (a5)
  {
    uint64_t result = Img4DecodeGetObjectPropertyInteger64();
    if (result) {
      goto LABEL_10;
    }
LABEL_13:
    CFAllocatorRef v13 = CFGetAllocator(a1);
    if (a5) {
      CFNumberRef v14 = CFNumberCreate(v13, kCFNumberSInt64Type, &valuePtr);
    }
    else {
      CFNumberRef v14 = CFDataCreate(v13, v18, v17);
    }
    CFNumberRef v15 = v14;
    if (!v14) {
      goto LABEL_11;
    }
    *a4 = CFRetain(v14);
    CFRelease(v15);
    return 1;
  }
  uint64_t result = Img4DecodeGetObjectPropertyData();
  if (!result) {
    goto LABEL_13;
  }
LABEL_10:
  if (result != 1)
  {
LABEL_11:
    AMSupportLogInternal();
    return 0;
  }
  return result;
}

uint64_t AMFDRDataCopySealingManifestProperty(const void *a1, const __CFString *a2, uint64_t a3)
{
  return _AMFDRDataCopySealingManifestPropertyInternal(a1, a2, 0, a3);
}

uint64_t _AMFDRDataCopySealingManifestPropertyInternal(const void *a1, const __CFString *a2, int a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1 || !a2) {
    goto LABEL_16;
  }
  uint64_t v5 = a4;
  if (!a4)
  {
    AMSupportLogInternal();
    return v5;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v8, a2, 0x8000100u, 0x5Fu);
  if (!ExternalRepresentation)
  {
LABEL_16:
    AMSupportLogInternal();
    return 0;
  }
  CFDataRef v10 = ExternalRepresentation;
  if (CFDataGetLength(ExternalRepresentation) == 4
    && (BytePtr = (unsigned int *)CFDataGetBytePtr(v10),
        unsigned int v12 = AMFDRTagsStringToTag(BytePtr),
        (_AMFDRCopySealingManifestObjectTag(a1, 1296125520, v12, &cf, a3) & 1) != 0))
  {
    if (cf) {
      *(void *)uint64_t v5 = CFRetain(cf);
    }
    uint64_t v5 = 1;
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v5 = 0;
  }
  CFRelease(v10);
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t AMFDRDataCopySealingManifestIntegerProperty(const void *a1, const __CFString *a2, uint64_t a3)
{
  return _AMFDRDataCopySealingManifestPropertyInternal(a1, a2, 1, a3);
}

uint64_t AMFDRDataAddSealingPropertiesOverride(CFDictionaryRef *a1, const __CFDictionary *cf)
{
  if (a1
    && a1[2]
    && cf
    && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID())
    && ((CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1[2], @"SealingPropertiesOverride"),
         CFAllocatorRef v6 = CFGetAllocator(a1),
         !Value)
      ? (CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]))
      : (CFMutableArrayRef Mutable = CFDictionaryCreateMutableCopy(v6, 0, Value)),
        (CFStringRef v8 = (const __CFString *)Mutable) != 0))
  {
    _CFDictionaryAddDictionary(Mutable, cf);
    AMFDRSetOption((uint64_t)a1, @"SealingPropertiesOverride", v8);
    CFRelease(v8);
    return 1;
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

uint64_t AMFDRWriteDataToFileURL(CFTypeRef cf, uint64_t a2, uint64_t a3, int a4)
{
  if (!cf)
  {
    uint64_t v4 = 1;
    goto LABEL_14;
  }
  uint64_t v4 = 1;
  if (a3 && a2 && *((void *)cf + 2))
  {
    if (a4)
    {
      if (AMSupportRemoveFile())
      {
        uint64_t v4 = 4;
        AMSupportLogInternal();
        goto LABEL_14;
      }
    }
    else
    {
      CFGetAllocator(cf);
      if (AMSupportCopyPreserveFileURL())
      {
        uint64_t v4 = 4;
        goto LABEL_18;
      }
    }
    if (AMFDROptionsGetBooleanValue((uint64_t)cf, @"WriteUncached", 0))
    {
      if (AMSupportPlatformWriteDataToFileURLUncached())
      {
        uint64_t v4 = 4;
LABEL_18:
        AMSupportLogInternal();
        goto LABEL_14;
      }
    }
    else if (AMSupportPlatformWriteDataToFileURL())
    {
      uint64_t v4 = 4;
      goto LABEL_18;
    }
    uint64_t v4 = 0;
  }
LABEL_14:
  AMSupportSafeRelease();
  return v4;
}

CFArrayRef AMFDRDataCopySslRoots(const __CFAllocator *a1, CFDataRef theData, uint64_t a3)
{
  memset(v16, 0, sizeof(v16));
  if (!theData)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopySslRoots", @"trustObjectData is NULL", v15);
    return 0;
  }
  BytePtr = CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  uint64_t v8 = AMFDRDecodeTrustObject(v16, (uint64_t)BytePtr, Length);
  if (v8)
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopySslRoots", @"Could not decode trust object (decodestatus=%llu)", v8);
    return 0;
  }
  CFMutableArrayRef v18 = (const UInt8 *)0xAAAAAAAAAAAAAAAALL;
  unsigned int v17 = -1431655766;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!AMFDRDecodeIterateTrustObjectSslRootBegin((uint64_t)v16))
  {
    while (1)
    {
      uint64_t v10 = AMFDRDecodeIterateTrustObjectSslRootNext((uint64_t)v16, &v18, &v17);
      if (v10 || !v18 || !v17) {
        break;
      }
      CFDataRef v11 = CFDataCreate(a1, v18, v17);
      if (!v11) {
        goto LABEL_16;
      }
      CFDataRef v12 = v11;
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v12);
    }
    if (!v10 && CFArrayGetCount(Mutable) > 0)
    {
      CFArrayRef Copy = CFArrayCreateCopy(a1, Mutable);
      if (!Mutable) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
LABEL_16:
  AMSupportLogInternal();
  CFArrayRef Copy = 0;
  if (Mutable) {
LABEL_12:
  }
    CFRelease(Mutable);
LABEL_13:
  if (!Copy) {
    AMFDRErrorPushInternal(a3, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopySslRoots", @"No SSL Root found in trust object", v15);
  }
  return Copy;
}

CFTypeRef AMFDRDataInstanceCopyNonSik(const void *a1, CFStringRef theString)
{
  CFTypeRef v2 = a1;
  if (!a1)
  {
    AMSupportLogInternal();
    goto LABEL_12;
  }
  if (!theString) {
    goto LABEL_14;
  }
  if (!CFStringHasPrefix(theString, @"sik-"))
  {
    CFTypeRef v2 = CFRetain(theString);
    goto LABEL_12;
  }
  CFAllocatorRef v4 = CFGetAllocator(v2);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v4, 0);
  CFAllocatorRef v6 = CFGetAllocator(v2);
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v6, theString, @"-");
  CFArrayRef v8 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings)
  {
LABEL_14:
    AMSupportLogInternal();
    CFTypeRef v2 = 0;
    goto LABEL_12;
  }
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count >= 3)
  {
    CFIndex v10 = Count;
    uint64_t v11 = Count - 2;
    for (uint64_t i = 2; i != v10; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, i - 1);
      CFStringAppend(Mutable, ValueAtIndex);
      if (i - 1 < v11) {
        CFStringAppend(Mutable, @"-");
      }
    }
  }
  CFTypeRef v2 = CFRetain(Mutable);
LABEL_12:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v2;
}

uint64_t AMFDRDataDecodeAndSetSealingManifest(void *a1, CFDataRef theData, uint64_t a3, CFTypeRef *a4, CFTypeRef *a5, uint64_t a6)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  CFTypeRef v49 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v47 = 0;
  if (!a1)
  {
    CFStringRef v38 = @"amfdr is NULL";
LABEL_73:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", v38, v42);
LABEL_77:
    long long v32 = 0;
    long long v25 = 0;
    CFStringRef v22 = 0;
    uint64_t BytePtr = 0;
    goto LABEL_54;
  }
  if (!a1[2])
  {
    CFStringRef v39 = @"amfdr option is NULL";
LABEL_76:
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", v39, v42);
    goto LABEL_77;
  }
  if (!theData)
  {
    CFStringRef v38 = @"rawManifestData is NULL";
    goto LABEL_73;
  }
  uint64_t BytePtr = (uint64_t)CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  if (!BytePtr)
  {
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"sealingManifest is NULL", v42);
    long long v32 = 0;
    long long v25 = 0;
    CFStringRef v22 = 0;
    goto LABEL_54;
  }
  unsigned int v14 = Length;
  if (!Length)
  {
    CFStringRef v39 = @"sealingManifestLength is 0";
    goto LABEL_76;
  }
  uint64_t v44 = a6;
  if (!AMFDRDecodeManifestBody(&v48))
  {
    CFStringRef v22 = (const __CFString *)CFRetain(theData);
    CFStringRef v23 = 0;
    CFDictionaryRef Mutable = 0;
    CFDictionaryRef v19 = 0;
    goto LABEL_19;
  }
  char v45 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v15, kAMFDRDefaultMultiSealingMaxRequest, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"multiSealingRequestErrors is NULL", v42);
    CFStringRef v23 = 0;
    CFDictionaryRef v19 = 0;
LABEL_91:
    uint64_t BytePtr = 0;
    CFStringRef v22 = 0;
    long long v25 = 0;
    goto LABEL_92;
  }
  CFAllocatorRef v17 = CFGetAllocator(a1);
  CFMutableDictionaryRef v18 = CFDictionaryCreateMutable(v17, kAMFDRDefaultMultiSealingMaxRequest, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v19 = v18;
  if (!v18)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"valueDataDict is NULL", v42);
LABEL_87:
    CFStringRef v23 = 0;
    goto LABEL_91;
  }
  *(void *)&long long v50 = a1;
  *((void *)&v50 + 1) = v18;
  *(void *)&long long v51 = Mutable;
  *((void *)&v51 + 1) = &v49;
  if (AMFDRDecodeMultiSealingResponse(BytePtr, v14, &v45, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiSealingCallback, (uint64_t)&v50))
  {
    CFStringRef v41 = @"AMFDRDecodeMultiResponse failed";
LABEL_86:
    AMFDRErrorPushInternal(a6, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", v41, v42);
    goto LABEL_87;
  }
  if (v45 != kAMFDRHTTPMultiRequestActionSealing)
  {
    char v42 = v45;
    CFStringRef v41 = @"actionCode returned is %d";
    goto LABEL_86;
  }
  if (a3)
  {
    CFAllocatorRef v20 = CFGetAllocator(a1);
    uint64_t FullKey = (uint64_t)AMFDRDataLocalCreateFullKey(v20, @"sreq", a3);
  }
  else
  {
    uint64_t FullKey = AMSupportSafeRetain();
  }
  CFStringRef v23 = (CFStringRef)FullKey;
  if (!FullKey)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"failed to create data instancestring", v42);
    goto LABEL_91;
  }
  if (CFDictionaryGetCount(Mutable))
  {
    AMFDRErrorPushInternal(a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"Unexpected multi-sealing error from server: %@", (char)Mutable);
    goto LABEL_91;
  }
  CFStringRef v24 = (const __CFString *)_CFDictionaryCopyValue(v19, v23);
  if (!v24)
  {
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"mainManifest is NULL", v42);
    goto LABEL_91;
  }
  CFStringRef v22 = v24;
LABEL_19:
  AMFDRSetOption((uint64_t)a1, @"SealingManifest", v22);
  long long v25 = 0;
  if (!_AMFDRDataCopySealingManifestPropertyInternal(a1, @"meta", 0, (uint64_t)&cf)
    || !cf
    || (CFTypeID v26 = CFGetTypeID(cf), TypeID = CFDataGetTypeID(), v25 = 0, !v19)
    || v26 != TypeID)
  {
    long long v32 = 0;
    if (a4) {
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  CFTypeID v28 = CFGetTypeID(v19);
  if (v28 != CFDictionaryGetTypeID())
  {
    long long v25 = 0;
    goto LABEL_42;
  }
  CFAllocatorRef v29 = CFGetAllocator(a1);
  long long v25 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v25)
  {
    if (AMFDRDataDecodeMetaProperty((const __CFData *)cf, &v47))
    {
      if (v47)
      {
        CFTypeID v30 = CFGetTypeID(v47);
        if (v30 == CFArrayGetTypeID())
        {
          long long v43 = a4;
          if (CFArrayGetCount((CFArrayRef)v47) >= 1)
          {
            CFIndex v31 = 0;
            long long v32 = 0;
            while (1)
            {
              if (v32) {
                CFRelease(v32);
              }
              long long v33 = a5;
              if (v23) {
                CFRelease(v23);
              }
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v47, v31);
              if (!ValueAtIndex)
              {
                AMFDRErrorPushInternal(v44, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"dataInstance is NULL", v42);
                uint64_t BytePtr = 0;
                CFStringRef v23 = 0;
                goto LABEL_92;
              }
              long long v35 = ValueAtIndex;
              CFAllocatorRef v36 = CFGetAllocator(a1);
              CFStringRef v23 = AMFDRDataLocalCreateFullKey(v36, @"minimal-manifest", (uint64_t)v35);
              if (!v23)
              {
                CFStringRef v40 = @"failed to create data instancestring for minimal manifest";
                goto LABEL_80;
              }
              long long v32 = _CFDictionaryCopyValue(v19, v23);
              if (!v32) {
                break;
              }
              CFDictionarySetValue(v25, v35, v32);
              ++v31;
              a5 = v33;
              if (v31 >= CFArrayGetCount((CFArrayRef)v47)) {
                goto LABEL_68;
              }
            }
            AMFDRErrorPushInternal(v44, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", @"%@:%@ is NULL", (char)@"minimal-manifest");
            uint64_t BytePtr = 0;
            goto LABEL_48;
          }
          long long v32 = 0;
LABEL_68:
          AMSupportLogInternal();
          AMFDRSetOption((uint64_t)a1, @"MinimalSealingManifests", (const __CFString *)v25);
          a4 = v43;
          if (!v43) {
            goto LABEL_45;
          }
          goto LABEL_43;
        }
      }
LABEL_42:
      long long v32 = 0;
      if (a4)
      {
LABEL_43:
        if (v22) {
          *a4 = CFRetain(v22);
        }
      }
LABEL_45:
      uint64_t BytePtr = 1;
      if (a5 && v19) {
        *a5 = CFRetain(v19);
      }
      goto LABEL_48;
    }
    CFStringRef v40 = @"AMFDRDataDecodeMetaProperty failed";
  }
  else
  {
    CFStringRef v40 = @"minimalManifests create failed";
  }
LABEL_80:
  AMFDRErrorPushInternal(v44, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDecodeAndSetSealingManifest", v40, v42);
  uint64_t BytePtr = 0;
LABEL_92:
  long long v32 = 0;
LABEL_48:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v23) {
    CFRelease(v23);
  }
LABEL_54:
  if (v49)
  {
    CFRelease(v49);
    CFTypeRef v49 = 0;
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v47)
  {
    CFRelease(v47);
    CFTypeRef v47 = 0;
  }
  if (v32) {
    CFRelease(v32);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  AMFDRDecodeManifestBodyDestroy(v48);
  return BytePtr;
}

BOOL AMFDRDataDecodeMetaProperty(const __CFData *a1, CFTypeRef *a2)
{
  CFMutableArrayRef cf = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (cf)
  {
    uint64_t BytePtr = CFDataGetBytePtr(a1);
    unsigned int Length = CFDataGetLength(a1);
    uint64_t v6 = AMFDRDecodeMetaProperty((uint64_t)BytePtr, Length, (uint64_t (*)(void))AMFDRDataDecodeMetaPropertyCallback);
    BOOL v7 = v6 == 0;
    if (v6)
    {
      AMSupportLogInternal();
    }
    else if (a2)
    {
      *a2 = CFRetain(cf);
    }
    CFRelease(cf);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
  return v7;
}

CFDataRef AMFDRDataCreateSikPubDigestIfNecessary(CFAllocatorRef allocator, UInt8 *bytes, unint64_t length)
{
  if (length < 0x42)
  {
    return CFDataCreate(allocator, bytes, length);
  }
  else
  {
    CFAllocatorRef v4 = (UInt8 *)malloc_type_calloc(1uLL, 0x30uLL, 0x9E33FA8FuLL);
    if (v4)
    {
      uint64_t v5 = v4;
      if (AMSupportDigestSha384())
      {
        AMSupportLogInternal();
      }
      else
      {
        CFDataRef result = CFDataCreateWithBytesNoCopy(allocator, v5, 48, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
        if (result) {
          return result;
        }
      }
      free(v5);
    }
    else
    {
      AMSupportLogInternal();
    }
    return 0;
  }
}

uint64_t AMFDRDataDecodeMetaPropertyCallback(int a1, const UInt8 *a2, CFIndex numBytes, const UInt8 *a4, unsigned int a5, CFMutableArrayRef *a6)
{
  if (!a6) {
    goto LABEL_16;
  }
  if (!a1)
  {
    if (a2)
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, numBytes, 0x8000100u, 0);
      if (!v11)
      {
        AMSupportLogInternal();
        return 2;
      }
      CFStringRef v12 = v11;
      if (a4)
      {
        CFStringRef v13 = CFStringCreateWithBytes(v10, a4, a5, 0x8000100u, 0);
        if (v13)
        {
          CFStringRef v14 = v13;
          if (*a6 && (CFTypeID v15 = CFGetTypeID(*a6), v15 == CFArrayGetTypeID()))
          {
            CFArrayAppendValue(*a6, v14);
            uint64_t v6 = 0;
          }
          else
          {
            AMSupportLogInternal();
            uint64_t v6 = 2;
          }
          CFRelease(v12);
          CFStringRef v16 = v14;
          goto LABEL_12;
        }
        uint64_t v6 = 2;
      }
      else
      {
        uint64_t v6 = 1;
      }
      AMSupportLogInternal();
      CFStringRef v16 = v12;
LABEL_12:
      CFRelease(v16);
      return v6;
    }
LABEL_16:
    AMSupportLogInternal();
    return 1;
  }
  return 0;
}

uint64_t AMFDRDataPutForRestore(const __CFString *a1, const __CFString *a2, const __CFData *a3, const __CFDictionary *a4, uint64_t a5)
{
  int valuePtr = 1;
  if (!a1)
  {
    CFStringRef v26 = @"dataClass is NULL";
LABEL_49:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", v26, v27);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v26 = @"valueData is NULL";
    goto LABEL_49;
  }
  CFStringRef v8 = a2;
  if (a2)
  {
    CFStringRef v10 = 0;
    goto LABEL_6;
  }
  CFStringRef v8 = (const __CFString *)AMFDRSealingMapCopyInstanceForClass(a1, a5);
  CFStringRef v10 = v8;
  if (!v8)
  {
    CFStringRef v26 = @"failed to query dataInstance";
    goto LABEL_49;
  }
LABEL_6:
  CFDictionaryRef v11 = (const __CFDictionary *)AMFDRGetRestorePeriodOptions();
  CFDictionaryRef v12 = v11;
  if (v11)
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 != CFDictionaryGetTypeID())
    {
      AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", @"fdrRestoreOptions is malformed", v27);
LABEL_46:
      CFDictionaryRef v18 = 0;
      CFStringRef v23 = 0;
      CFNumberRef v20 = 0;
      uint64_t v24 = 0;
      if (!v10) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    CFDictionaryGetCount(v12);
    AMSupportLogInternal();
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFTypeID v15 = (CFDictionaryRef *)AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Remote", v12);
  if (!v15)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", @"amfdr is NULL", v27);
    goto LABEL_46;
  }
  CFStringRef v16 = v15;
  if (!v15[2])
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", @"amfdr->optionsDict is NULL", v27);
    uint64_t v24 = 0;
    CFNumberRef v20 = 0;
    CFStringRef v23 = 0;
    CFDictionaryRef v18 = 0;
    goto LABEL_27;
  }
  if (AMFDREnableRestorePeriodSsoCallback((uint64_t)v15)) {
    AMSupportLogInternal();
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, v16[2]);
  CFDictionaryRef v18 = MutableCopy;
  if (!MutableCopy)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", @"fdrOptions is NULL", v27);
    uint64_t v24 = 0;
    CFNumberRef v20 = 0;
LABEL_44:
    CFStringRef v23 = 0;
    goto LABEL_27;
  }
  if (a4) {
    _CFDictionaryAddDictionary(MutableCopy, a4);
  }
  CFNumberRef v19 = (const __CFNumber *)_CFDictionaryCopyValue(v18, @"DataVersion");
  if (v19)
  {
    CFNumberRef v20 = v19;
    CFTypeID v21 = CFGetTypeID(v19);
    if (v21 == CFNumberGetTypeID())
    {
      if (!CFNumberGetValue(v20, kCFNumberIntType, &valuePtr))
      {
        AMFDRErrorPushInternal(a5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", @"failed to convert versionOption", v27);
LABEL_43:
        uint64_t v24 = 0;
        goto LABEL_44;
      }
      goto LABEL_23;
    }
    CFRelease(v20);
  }
  CFNumberRef v20 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
  if (!v20)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", @"versionOption is NULL", v27);
    goto LABEL_43;
  }
  CFDictionarySetValue(v18, @"DataVersion", v20);
LABEL_23:
  CFStringRef v22 = (const void **)MEMORY[0x263EFFB38];
  if (valuePtr == 1)
  {
    CFDictionarySetValue(v18, @"OrganizationalUnit", @"Devices - Stations");
    CFDictionarySetValue(v18, @"UseSikDataInstance", *v22);
  }
  CFStringRef v23 = AMFDRCreatePermissionsString(v14, 1u, a1, v8);
  if (v23)
  {
    CFDictionarySetValue(v18, @"Permissions", v23);
    CFDictionarySetValue(v18, @"PersistCertificate", *v22);
    AMFDRSetOptions((uint64_t)v16, v18);
    uint64_t v24 = AMFDRDataPutWithOptions((uint64_t)v16, a1, v8, a3, 0, a5);
  }
  else
  {
    AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPutForRestore", @"failed to create PUT permission", v27);
    uint64_t v24 = 0;
  }
LABEL_27:
  CFRelease(v16);
  if (v10) {
LABEL_28:
  }
    CFRelease(v10);
LABEL_29:
  if (v20) {
    CFRelease(v20);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v24;
}

uint64_t AMFDRDataDictCreateFromData(uint64_t a1, const __CFData *a2, char a3, uint64_t a4)
{
  uint64_t v13 = 0;
  if (a2)
  {
    uint64_t v7 = a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
    LOBYTE(v8) = a3;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    CFDictionaryRef v11 = &v13;
    uint64_t v12 = a4;
    _AMFDRDataDictConvertFromData(0, a2, (uint64_t)&v7);
    uint64_t result = v13;
    if (!v13)
    {
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDictCreateFromData", @"failed to convert value", v6);
      return v13;
    }
  }
  else
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataDictCreateFromData", @"valueData is NULL", v6);
    return 0;
  }
  return result;
}

void _AMFDRDataDictConvertFromData(const void *a1, const __CFData *a2, uint64_t a3)
{
  CFTypeID v15 = 0;
  if (a3)
  {
    if (*(void *)a3)
    {
      UnsignedValueNoCFArrayRef Copy = a2;
      if (a2)
      {
        CFAllocatorRef v6 = CFGetAllocator(*(CFTypeRef *)a3);
        UnsignedValueNoCFArrayRef Copy = (const __CFData *)_AMFDRDataCreateUnsignedValueNoCopy(v6, UnsignedValueNoCopy, 0, (uint64_t)&v15);
        if (UnsignedValueNoCopy)
        {
          CFAllocatorRef v7 = CFGetAllocator(*(CFTypeRef *)a3);
          unint64_t v8 = (CFArrayRef *)AMFDRSysconfigCreateFromData(v7, UnsignedValueNoCopy, (uint64_t)&v15);
          uint64_t v9 = v8;
          if (v8)
          {
            if (*(unsigned char *)(a3 + 8))
            {
              CFTypeRef v10 = AMFDRSysconfigCopyValues(v8, (uint64_t)&v15);
              CFDictionaryRef v11 = v10;
              if (!v10)
              {
                AMFDRErrorPushInternal((uint64_t)&v15, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictConvertFromData", @"failed to copy sysconfig entries", v14);
                goto LABEL_15;
              }
              if (!a1)
              {
LABEL_13:
                if (*(void *)(a3 + 32)) {
                  **(void **)(a3 + 32) = CFRetain(v10);
                }
                goto LABEL_15;
              }
            }
            else
            {
              CFDictionaryRef v11 = 0;
              CFTypeRef v10 = v8;
              if (!a1) {
                goto LABEL_13;
              }
            }
            uint64_t v12 = *(__CFDictionary **)(a3 + 16);
            if (!v12) {
              goto LABEL_13;
            }
            CFDictionarySetValue(v12, a1, v10);
LABEL_15:
            if (v15)
            {
              if (a1 && (uint64_t v13 = *(__CFDictionary **)(a3 + 24)) != 0)
              {
                CFDictionarySetValue(v13, a1, v15);
              }
              else if (*(void *)(a3 + 40))
              {
                **(void **)(a3 + 40) = CFRetain(v15);
              }
            }
            if (UnsignedValueNoCopy) {
              CFRelease(UnsignedValueNoCopy);
            }
            if (v9) {
              CFRelease(v9);
            }
            if (v11) {
              CFRelease(v11);
            }
            if (v15) {
              CFRelease(v15);
            }
            return;
          }
          AMFDRErrorPushInternal((uint64_t)&v15, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictConvertFromData", @"failed to decode as sysconfig format", v14);
LABEL_38:
          CFDictionaryRef v11 = 0;
          goto LABEL_15;
        }
        AMFDRErrorPushInternal((uint64_t)&v15, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictConvertFromData", @"failed to extract img4 payload", v14);
      }
      else
      {
        AMFDRErrorPushInternal((uint64_t)&v15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictConvertFromData", @"value is NULL", v14);
      }
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)&v15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictConvertFromData", @"ctx->amfdr is NULL", v14);
      UnsignedValueNoCFArrayRef Copy = 0;
    }
    uint64_t v9 = 0;
    goto LABEL_38;
  }

  AMSupportLogInternal();
}

CFTypeRef AMFDRDataCopyDataForPatch(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFDictionary *cf, uint64_t *a5)
{
  CFTypeRef v69 = 0;
  CFTypeRef v70 = 0;
  CFErrorRef v68 = 0;
  if (!a1)
  {
    CFStringRef v53 = @"amfdr is NULL";
LABEL_102:
    CFStringRef v60 = v53;
    *(_OWORD *)int v58 = 0u;
    long long v59 = 0u;
    *(_OWORD *)unsigned int v57 = 0u;
    unsigned int v54 = &v68;
LABEL_103:
    CFIndex v55 = 1;
LABEL_112:
    AMFDRErrorPushInternal((uint64_t)v54, v55, 0, 0, 0, 0, 0, 0, v57[0], v57[1], v58[0], v58[1], (void *)v59, *((void **)&v59 + 1), (uint64_t)"AMFDRDataCopyDataForPatch", v60, v61);
    CFDataRef v20 = 0;
    CFStringRef v22 = 0;
    goto LABEL_113;
  }
  if (!a2)
  {
    CFStringRef v53 = @"dataClassStr is NULL";
    goto LABEL_102;
  }
  if (!a3)
  {
    CFStringRef v53 = @"dataInstanceStr is NULL";
    goto LABEL_102;
  }
  if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore)
  {
    unsigned int v56 = @"Only supports remote amfdr";
    goto LABEL_111;
  }
  CFBooleanRef v10 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
  if (cf && (CFTypeID v11 = CFGetTypeID(cf), v11 == CFDictionaryGetTypeID()))
  {
    CFDataRef v12 = (const __CFData *)CFDictionaryGetValue(cf, @"GrammarID");
    CFDataRef v13 = v12;
    if (v12)
    {
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 != CFNullGetTypeID())
      {
        CFTypeID v15 = CFGetTypeID(v13);
        if (v15 != CFStringGetTypeID())
        {
          CFNumberRef v19 = @"grammarID has invalid type";
          goto LABEL_120;
        }
      }
    }
    CFBooleanRef v16 = (const __CFBoolean *)CFDictionaryGetValue(cf, @"ForceAllowSchemaMismatch");
    if (v16)
    {
      CFBooleanRef v17 = v16;
      CFTypeID v18 = CFGetTypeID(v16);
      CFBooleanRef v10 = v17;
      if (v18 != CFBooleanGetTypeID())
      {
        CFNumberRef v19 = @"allowSchemaMismatch has invalid type";
LABEL_120:
        CFStringRef v60 = v19;
        *(_OWORD *)int v58 = 0u;
        long long v59 = 0u;
        *(_OWORD *)unsigned int v57 = 0u;
        unsigned int v54 = (CFErrorRef *)a5;
        goto LABEL_103;
      }
    }
  }
  else
  {
    CFDataRef v13 = 0;
  }
  CFDataRef v20 = (const __CFData *)(*(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, CFErrorRef *))(*(void *)(a1 + 48) + 16))(a1, a2, a3, &v68);
  CFStringRef v65 = a3;
  if (!v20)
  {
    uint64_t v25 = AMFDRGetUnderlyingErrorCode(a1, &v68);
    if (v25 == 404)
    {
      CFStringRef v22 = 0;
      CFTypeRef value = 0;
      goto LABEL_38;
    }
    char v61 = v25;
    unsigned int v56 = @"Unexpected error=%ld to handle";
LABEL_111:
    CFStringRef v60 = v56;
    *(_OWORD *)int v58 = 0u;
    long long v59 = 0u;
    *(_OWORD *)unsigned int v57 = 0u;
    unsigned int v54 = &v68;
    CFIndex v55 = 10;
    goto LABEL_112;
  }
  uint64_t v21 = AMFDRDataDictCreateFromData(a1, v20, 0, (uint64_t)&v68);
  CFStringRef v22 = (CFArrayRef *)v21;
  if (!v21)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"origSysconfig of %@ is NULL", (char)a2);
    goto LABEL_113;
  }
  CFArrayRef v23 = *(const __CFArray **)(v21 + 48);
  if (v23)
  {
    if (*(void *)(v21 + 56))
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v21 + 48));
      if (Count != CFArrayGetCount(v22[7]))
      {
        AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"invalid number of metadata values", v61);
LABEL_113:
        long long v34 = 0;
        CFDictionaryRef v33 = 0;
        long long v51 = 0;
        CFDataRef v13 = 0;
        long long v43 = 0;
        if (!a5) {
          goto LABEL_77;
        }
LABEL_76:
        *a5 = AMSupportSafeRetain();
        goto LABEL_77;
      }
      CFArrayRef v23 = v22[6];
      if (!v23) {
        goto LABEL_35;
      }
    }
    else
    {
      CFIndex Count = 0;
    }
    v71.CFIndex length = CFArrayGetCount(v23);
    v71.location = 0;
    if (CFArrayContainsValue(v23, v71, @"grmr"))
    {
      CFTypeID v63 = a5;
      CFIndex v26 = Count - 1;
      if (Count < 1)
      {
LABEL_34:
        CFTypeRef value = 0;
        BOOL v32 = 0;
        CFDataRef v13 = 0;
        CFDictionaryRef v33 = 0;
        long long v34 = 0;
        a5 = v63;
        CFStringRef v35 = v65;
        goto LABEL_55;
      }
      CFBooleanRef v62 = v10;
      CFIndex v27 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v22[6], v27);
        CFAllocatorRef v29 = CFArrayGetValueAtIndex(v22[7], v27);
        int v30 = CFEqual(ValueAtIndex, @"grmr");
        if (v13)
        {
          if (v30) {
            break;
          }
        }
        if (v30) {
          BOOL v31 = 1;
        }
        else {
          BOOL v31 = v26 == v27;
        }
        ++v27;
        if (v31) {
          goto LABEL_34;
        }
      }
      CFStringRef v35 = v65;
      if (CFEqual(v29, v13))
      {
        CFTypeRef value = 0;
        BOOL v32 = 0;
        CFDataRef v13 = 0;
        CFDictionaryRef v33 = 0;
        long long v34 = 0;
        a5 = v63;
        goto LABEL_55;
      }
      CFTypeRef value = CFRetain(v29);
      AMSupportLogInternal();
      CFBooleanRef v10 = v62;
      a5 = v63;
      goto LABEL_37;
    }
  }
LABEL_35:
  CFStringRef v35 = v65;
  if (!v13)
  {
    CFTypeRef value = 0;
    BOOL v32 = 0;
    CFDictionaryRef v33 = 0;
    long long v34 = 0;
    goto LABEL_55;
  }
  AMSupportLogInternal();
  CFTypeRef value = 0;
LABEL_37:
  if (!CFBooleanGetValue(v10))
  {
    AMSupportLogInternal();
    CFDataRef v13 = 0;
    CFDictionaryRef v33 = 0;
    long long v34 = 0;
    BOOL v32 = 1;
    goto LABEL_63;
  }
LABEL_38:
  CFAllocatorRef v36 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"SignData");
  if (v36)
  {
    long long v37 = v36;
    CFTypeID v38 = CFGetTypeID(v36);
    if (v38 == CFBooleanGetTypeID())
    {
      CFTypeID v39 = CFGetTypeID(v37);
      if (v39 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v37)) {
        goto LABEL_42;
      }
      AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"signDataBool is required to true to sign base payload.", v61);
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"Invalid type for '%@'. Expected CFBoolean.", (char)@"SignData");
    }
    CFDataRef v13 = 0;
    CFDictionaryRef v33 = 0;
    long long v34 = 0;
    goto LABEL_49;
  }
LABEL_42:
  CFGetAllocator((CFTypeRef)a1);
  AMFDRSysconfigCreate();
  long long v34 = (CFArrayRef *)v40;
  if (v40)
  {
    AMFDRSysconfigSetDataClass(v40, a2);
    BOOL v32 = v20 != 0;
    if (v13)
    {
      CFAllocatorRef v41 = CFGetAllocator((CFTypeRef)a1);
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(v41, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFDictionaryRef v33 = Mutable;
      CFStringRef v35 = v65;
      if (!Mutable)
      {
        AMFDRErrorPushInternal((uint64_t)a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"metaDataDict is NULL", v61);
        goto LABEL_117;
      }
      CFDictionaryAddValue(Mutable, @"grmr", v13);
      if (!AMFDRSysconfigSetMetaValues(v34, v33, (uint64_t)&v68))
      {
        AMFDRErrorPushInternal((uint64_t)&v68, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"failed to set metaData", v61);
LABEL_117:
        CFDataRef v13 = 0;
        goto LABEL_63;
      }
    }
    else
    {
      CFDictionaryRef v33 = 0;
      CFStringRef v35 = v65;
    }
    CFDataRef v13 = _AMFDRDataDictCopyForPut(v34, 0, (uint64_t)&v68);
    if (!v13)
    {
      AMFDRErrorPushInternal((uint64_t)&v68, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"failed to generate base dict value to patch", v61);
      goto LABEL_63;
    }
    CFDataRef v20 = (const __CFData *)_AMFDRDataCopyForPutWithManifest(a1, a2, v35, v13, 0, 0, 0, (uint64_t)&v68);
    if (!v20)
    {
      AMFDRErrorPushInternal((uint64_t)&v68, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"dataToPatch is NULL", v61);
      goto LABEL_63;
    }
LABEL_55:
    if ((_AMFDRDataCopyFormattedRawAndImg4((CFDictionaryRef *)a1, a2, v35, &v69, &v70, v20, (uint64_t)&v68) & 1) == 0)
    {
      AMFDRErrorPushInternal((uint64_t)a5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"_AMFDRDataCopyFormattedRawAndImg4 failed", v61);
      goto LABEL_63;
    }
    if (v68)
    {
      if (CFErrorGetCode(v68) == 18)
      {
        AMSupportLogInternal();
        if (v68)
        {
          CFRelease(v68);
          CFDataRef v20 = 0;
          CFErrorRef v68 = 0;
          goto LABEL_63;
        }
      }
      else if (v68)
      {
        AMFDRErrorPushInternal((uint64_t)&v68, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"AMFDRDataCopyRawAndFormatted failed, can't copy original data", v61);
      }
    }
    CFDataRef v20 = 0;
    goto LABEL_63;
  }
  AMFDRErrorPushInternal((uint64_t)&v68, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyDataForPatch", @"sysconfig is NULL", v61);
  CFDataRef v13 = 0;
  CFDictionaryRef v33 = 0;
LABEL_49:
  BOOL v32 = v20 != 0;
LABEL_63:
  long long v43 = 0;
  if (!v32 || v68)
  {
    long long v51 = value;
    if (!a5) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  BOOL v64 = v34;
  CFDataRef v66 = v13;
  CFDictionaryRef v44 = v33;
  char v45 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  long long v46 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFTypeRef v47 = (const void *)*MEMORY[0x263EFFC48];
  while (1)
  {
    CFAllocatorRef v48 = CFGetAllocator((CFTypeRef)a1);
    CFTypeRef v49 = CFDictionaryCreateMutable(v48, 0, v45, v46);
    long long v43 = v49;
    if (v49)
    {
      CFDictionarySetValue(v49, v47, @"new grmr received from option is mismatched the grmr of data");
      if (value) {
        CFDictionarySetValue(v43, @"ExistingSchemaHash", value);
      }
      CFAllocatorRef v50 = CFGetAllocator((CFTypeRef)a1);
      CFErrorRef v68 = CFErrorCreate(v50, @"AMFDRError", 34, v43);
      if (v68) {
        break;
      }
    }
    AMSupportLogInternal();
    char v45 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    long long v46 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    if (v68)
    {
      long long v51 = value;
      CFDictionaryRef v33 = v44;
      goto LABEL_75;
    }
  }
  CFDictionaryRef v33 = v44;
  long long v51 = value;
LABEL_75:
  long long v34 = v64;
  CFDataRef v13 = v66;
  if (a5) {
    goto LABEL_76;
  }
LABEL_77:
  if (v69)
  {
    CFRelease(v69);
    CFTypeRef v69 = 0;
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v68)
  {
    CFRelease(v68);
    CFErrorRef v68 = 0;
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v51) {
    CFRelease(v51);
  }
  return v70;
}

CFDataRef _AMFDRDataDictCopyForPut(void *cf, const __CFDictionary *a2, uint64_t a3)
{
  if (a2 && !AMFDRSysconfigSetValues((CFArrayRef *)cf, a2, a3))
  {
    CFStringRef v6 = @"failed to modify sysconfig";
  }
  else
  {
    CFDataRef result = AMFDRSysconfigCreateEncodedData(cf, a3);
    if (result) {
      return result;
    }
    CFStringRef v6 = @"failed to encode sysconfig";
  }
  AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataDictCopyForPut", v6, v7);
  return 0;
}

CFArrayRef AMFDRDataMultiCopyDataForPatch(const __CFArray *a1, CFTypeRef cf, const void *a3, uint64_t a4, void *a5)
{
  CFArrayRef Copy = a1;
  CFAllocatorRef v48 = 0;
  v49[0] = 0;
  CFTypeRef v46 = 0;
  CFTypeRef v47 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)&v48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"amfdr is NULL", (char)v39);
    CFDictionaryRef theDict = 0;
    CFArrayRef v15 = 0;
LABEL_104:
    CFStringRef FullKey = 0;
    CFDataRef v28 = 0;
    CFDataRef v20 = 0;
    CFDataRef v14 = 0;
LABEL_105:
    CFDataRef cfa = 0;
    goto LABEL_56;
  }
  if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 != CFArrayGetTypeID()))
  {
    CFStringRef v38 = @"dataClassArray is NULL";
LABEL_102:
    AMFDRErrorPushInternal((uint64_t)&v48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", v38, (char)v39);
    CFDictionaryRef theDict = 0;
LABEL_103:
    CFArrayRef v15 = 0;
    CFArrayRef Copy = 0;
    goto LABEL_104;
  }
  if (!a3 || (CFTypeID v11 = CFGetTypeID(a3), v11 != CFArrayGetTypeID()))
  {
    CFStringRef v38 = @"dataInstanceArray is NULL";
    goto LABEL_102;
  }
  if (*((uint64_t (***)(int, int, int, int))Copy + 6) != AMFDRHTTPStore)
  {
    CFStringRef v38 = @"Only supports remote amfdr";
    goto LABEL_102;
  }
  if (a4)
  {
    CFStringRef v38 = @"optionsArray isn't supported!!";
    goto LABEL_102;
  }
  uint64_t Count = CFArrayGetCount((CFArrayRef)cf);
  if (CFArrayGetCount((CFArrayRef)a3) != Count)
  {
    CFStringRef v38 = @"dataInstanceEntries count mismatch";
    goto LABEL_102;
  }
  CFDictionaryRef theDict = (const __CFDictionary *)_AMFDRDataMultiCopyInternal(Copy, (uint64_t)cf, (uint64_t)a3, 1, (uint64_t)v49, (CFTypeRef *)&v48);
  if (!v48)
  {
    CFDataRef v14 = 0;
    CFDictionaryRef Value = 0;
    goto LABEL_15;
  }
  if (CFErrorGetCode(v48) != 21)
  {
    AMSupportLogInternal();
    goto LABEL_103;
  }
  CFDictionaryRef v13 = CFErrorCopyUserInfo(v48);
  CFDataRef v14 = v13;
  if (!v13)
  {
    AMFDRErrorPushInternal((uint64_t)&v48, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"userInfo is NULL", (char)v39);
    CFArrayRef v15 = 0;
    CFArrayRef Copy = 0;
    CFStringRef FullKey = 0;
    CFDataRef v28 = 0;
    CFDataRef v20 = 0;
    goto LABEL_105;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v13, @"MultiRequestErrors");
  if (!Value)
  {
    CFDataRef cfa = v14;
    AMFDRErrorPushInternal((uint64_t)&v48, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"cannot get multiResponseErrors", (char)v39);
    CFArrayRef v15 = 0;
LABEL_107:
    CFArrayRef Copy = 0;
    CFStringRef FullKey = 0;
    CFDataRef v28 = 0;
    CFDataRef v20 = 0;
    CFDataRef v14 = 0;
    goto LABEL_56;
  }
LABEL_15:
  CFAllocatorRef v16 = CFGetAllocator(Copy);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v16, Count, MEMORY[0x263EFFF70]);
  CFArrayRef v15 = Mutable;
  CFDataRef cfa = v14;
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)&v48, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"originalDataArray is NULL", (char)v39);
    goto LABEL_107;
  }
  uint64_t v40 = (uint64_t)a5;
  if (Count < 1)
  {
    CFStringRef FullKey = 0;
    CFDataRef v20 = 0;
    CFDataRef v14 = 0;
LABEL_49:
    CFAllocatorRef v35 = CFGetAllocator(Copy);
    CFArrayRef Copy = CFArrayCreateCopy(v35, v15);
    if (v48)
    {
      CFRelease(v48);
      CFDataRef v28 = 0;
      CFAllocatorRef v48 = 0;
    }
    else
    {
      CFDataRef v28 = 0;
    }
  }
  else
  {
    char v42 = Mutable;
    CFArrayRef theArray = (const __CFArray *)a3;
    CFTypeRef v18 = 0;
    CFIndex v19 = 0;
    CFDataRef v14 = 0;
    CFDataRef v20 = 0;
    CFStringRef FullKey = 0;
    while (1)
    {
      if (FullKey) {
        CFRelease(FullKey);
      }
      if (v18)
      {
        CFRelease(v18);
        CFTypeRef v47 = 0;
      }
      if (v46)
      {
        CFRelease(v46);
        CFTypeRef v46 = 0;
      }
      if (v14) {
        CFRelease(v14);
      }
      if (v20) {
        CFRelease(v20);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v19);
      if (!ValueAtIndex) {
        break;
      }
      CFStringRef v23 = ValueAtIndex;
      CFStringRef v24 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v19);
      if (!v24)
      {
        AMFDRErrorPushInternal((uint64_t)&v48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"dataInstanceStr is NULL", (char)v39);
        CFArrayRef Copy = 0;
        CFStringRef FullKey = 0;
        goto LABEL_92;
      }
      CFStringRef v25 = v24;
      CFAllocatorRef v26 = CFGetAllocator(Copy);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v26, (uint64_t)v23, (uint64_t)v25);
      if (!FullKey)
      {
        AMFDRErrorPushInternal((uint64_t)&v48, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"dataClassInstance is NULL", (char)v39);
        goto LABEL_91;
      }
      if (theDict && (CFIndex v27 = CFDictionaryGetValue(theDict, FullKey)) != 0)
      {
        CFDataRef v28 = (const __CFData *)CFRetain(v27);
        if (!v28)
        {
          AMSupportLogInternal();
          CFArrayRef Copy = 0;
          goto LABEL_93;
        }
        CFDataRef v14 = 0;
        CFDataRef v20 = 0;
      }
      else
      {
        if (Value)
        {
          CFAllocatorRef v29 = (__CFError *)CFDictionaryGetValue(Value, FullKey);
          if (v29)
          {
            if (CFErrorGetCode(v29) != 701)
            {
              AMFDRErrorPushInternal((uint64_t)&v48, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"AMFDRDataMultiCopyDataForPatch failed for %@: %@", (char)FullKey);
LABEL_91:
              CFArrayRef Copy = 0;
LABEL_92:
              CFDataRef v28 = 0;
LABEL_93:
              CFDataRef v20 = 0;
LABEL_94:
              CFDataRef v14 = 0;
LABEL_95:
              a5 = (void *)v40;
LABEL_55:
              CFArrayRef v15 = v42;
              goto LABEL_56;
            }
          }
        }
        int v30 = CFDictionaryGetValue(*((CFDictionaryRef *)Copy + 2), @"SignData");
        if (v30)
        {
          BOOL v31 = v30;
          CFTypeID v32 = CFGetTypeID(v30);
          if (v32 != CFBooleanGetTypeID())
          {
            CFTypeID v39 = @"SignData";
            CFStringRef v36 = @"Invalid type for '%@'. Expected CFBoolean.";
            goto LABEL_54;
          }
          CFTypeID v33 = CFGetTypeID(v31);
          if (v33 != CFBooleanGetTypeID() || !CFBooleanGetValue((CFBooleanRef)v31))
          {
            CFStringRef v36 = @"signDataBool is required to true to sign base payload.";
LABEL_54:
            a5 = (void *)v40;
            AMFDRErrorPushInternal(v40, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", v36, (char)v39);
            CFArrayRef Copy = 0;
            CFDataRef v28 = 0;
            CFDataRef v20 = 0;
            CFDataRef v14 = 0;
            goto LABEL_55;
          }
        }
        CFGetAllocator(Copy);
        AMFDRSysconfigCreate();
        CFDataRef v20 = (void *)v34;
        if (!v34)
        {
          AMFDRErrorPushInternal((uint64_t)&v48, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"sysconfig is NULL", (char)v39);
          CFArrayRef Copy = 0;
          CFDataRef v28 = 0;
          goto LABEL_94;
        }
        AMFDRSysconfigSetDataClass(v34, v23);
        CFDataRef v14 = _AMFDRDataDictCopyForPut(v20, 0, (uint64_t)&v48);
        if (!v14)
        {
          AMFDRErrorPushInternal((uint64_t)&v48, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"failed to generate base dict value to patch", (char)v39);
          CFArrayRef Copy = 0;
          CFDataRef v28 = 0;
          goto LABEL_95;
        }
        CFDataRef v28 = (const __CFData *)_AMFDRDataCopyForPutWithManifest((uint64_t)Copy, v23, v25, v14, 0, 0, 0, (uint64_t)&v48);
        if (!v28)
        {
          AMFDRErrorPushInternal((uint64_t)&v48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"dataToPatch is NULL", (char)v39);
          CFArrayRef Copy = 0;
          goto LABEL_95;
        }
      }
      if ((_AMFDRDataCopyFormattedRawAndImg4((CFDictionaryRef *)Copy, v23, v25, &v46, &v47, v28, (uint64_t)&v48) & 1) == 0)
      {
        a5 = (void *)v40;
        AMFDRErrorPushInternal(v40, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"_AMFDRDataCopyFormattedRawAndImg4 failed", (char)v39);
        CFArrayRef Copy = 0;
        goto LABEL_55;
      }
      CFTypeRef v18 = v47;
      CFArrayRef v15 = v42;
      CFArrayAppendValue(v42, v47);
      if (Count == ++v19) {
        goto LABEL_49;
      }
    }
    AMFDRErrorPushInternal((uint64_t)&v48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiCopyDataForPatch", @"dataClassStr is NULL", (char)v39);
    CFArrayRef Copy = 0;
    CFStringRef FullKey = 0;
    CFDataRef v28 = 0;
    CFDataRef v20 = 0;
    CFDataRef v14 = 0;
  }
  a5 = (void *)v40;
LABEL_56:
  if (a5) {
    *a5 = AMSupportSafeRetain();
  }
  if (v15) {
    CFRelease(v15);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (FullKey) {
    CFRelease(FullKey);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v46)
  {
    CFRelease(v46);
    CFTypeRef v46 = 0;
  }
  if (v47)
  {
    CFRelease(v47);
    CFTypeRef v47 = 0;
  }
  if (v49[0])
  {
    CFRelease(v49[0]);
    v49[0] = 0;
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (v48) {
    CFRelease(v48);
  }
  return Copy;
}

__CFString *AMFDRDataPatchWithOptions(uint64_t a1, CFArrayRef *a2, const __CFString *a3, const __CFData *a4, const __CFDictionary *a5, CFTypeRef cf, uint64_t a7)
{
  char v7 = (__CFString *)a1;
  uint64_t v94 = *MEMORY[0x263EF8340];
  CFTypeRef v89 = 0;
  CFTypeRef cfa = 0;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v93[0] = v8;
  v93[1] = v8;
  v92[1] = v8;
  v92[2] = v8;
  v92[0] = v8;
  if (!a1)
  {
    CFBooleanRef v62 = (void *)a7;
    AMFDRErrorPushInternal((uint64_t)&v89, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"amfdr is NULL", v80);
    CFStringRef v10 = 0;
    CFStringRef v67 = 0;
    CFMutableArrayRef Mutable = 0;
    CFDataRef v28 = 0;
    CFStringRef v17 = 0;
    CFDictionaryRef v44 = 0;
    CFDataRef v11 = 0;
    long long v88 = 0;
    uint64_t v9 = 0;
    goto LABEL_130;
  }
  uint64_t v9 = a2;
  if (!a2)
  {
    CFBooleanRef v62 = (void *)a7;
    AMFDRErrorPushInternal((uint64_t)&v89, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"dataClassStr is NULL", v80);
    CFStringRef v10 = 0;
    CFStringRef v67 = 0;
    CFMutableArrayRef Mutable = 0;
    CFDataRef v28 = 0;
    CFStringRef v17 = 0;
    CFDictionaryRef v44 = 0;
    CFDataRef v11 = 0;
    long long v88 = 0;
    goto LABEL_95;
  }
  CFStringRef v10 = a3;
  if (!a3)
  {
    CFBooleanRef v62 = (void *)a7;
    AMFDRErrorPushInternal((uint64_t)&v89, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"dataInstanceStr is NULL", v80);
    goto LABEL_183;
  }
  CFDataRef v11 = a4;
  if (!a4)
  {
    CFBooleanRef v62 = (void *)a7;
    AMFDRErrorPushInternal((uint64_t)&v89, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"originalData is NULL", v80);
    CFStringRef v10 = 0;
    CFStringRef v67 = 0;
    CFMutableArrayRef Mutable = 0;
    CFDataRef v28 = 0;
    CFStringRef v17 = 0;
    CFDictionaryRef v44 = 0;
LABEL_185:
    long long v88 = 0;
    uint64_t v9 = 0;
    goto LABEL_95;
  }
  if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore)
  {
    CFBooleanRef v62 = (void *)a7;
    AMFDRErrorPushInternal((uint64_t)&v89, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"Only supports remote amfdr", v80);
LABEL_182:
    CFStringRef v10 = 0;
LABEL_183:
    CFStringRef v67 = 0;
    CFMutableArrayRef Mutable = 0;
LABEL_184:
    CFDataRef v28 = 0;
    CFStringRef v17 = 0;
    CFDictionaryRef v44 = 0;
    CFDataRef v11 = 0;
    goto LABEL_185;
  }
  CFBooleanRef v14 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
  if (!cf || (CFTypeID v15 = CFGetTypeID(cf), v15 != CFDictionaryGetTypeID()))
  {
    CFBooleanRef BOOLean = v14;
    CFStringRef v17 = 0;
    CFStringRef v21 = 0;
    CFDataRef v28 = 0;
    goto LABEL_30;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"AssemblyID");
  CFStringRef v17 = Value;
  if (Value)
  {
    CFTypeID v18 = CFGetTypeID(Value);
    if (v18 != CFNullGetTypeID())
    {
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 != CFStringGetTypeID())
      {
        CFStringRef v79 = @"assemblyID has invalid type";
        goto LABEL_181;
      }
    }
  }
  CFStringRef v20 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"GrammarID");
  CFStringRef v21 = v20;
  if (v20)
  {
    CFTypeID v22 = CFGetTypeID(v20);
    if (v22 != CFNullGetTypeID())
    {
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 != CFStringGetTypeID())
      {
        CFStringRef v79 = @"grammarID has invalid type";
        goto LABEL_181;
      }
    }
  }
  CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LocalValidation");
  if (v24)
  {
    CFBooleanRef v25 = v24;
    CFTypeID v26 = CFGetTypeID(v24);
    CFBooleanRef v14 = v25;
    if (v26 != CFBooleanGetTypeID())
    {
      CFStringRef v79 = @"validation has invalid type";
LABEL_181:
      CFBooleanRef v62 = (void *)a7;
      AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", v79, v80);
      goto LABEL_182;
    }
  }
  CFBooleanRef BOOLean = v14;
  CFIndex v27 = (__CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RequiredSubCCDgst");
  CFDataRef v28 = v27;
  if (!v27) {
    goto LABEL_30;
  }
  CFTypeID v29 = CFGetTypeID(v27);
  if (v29 != CFNullGetTypeID())
  {
    CFTypeID v30 = CFGetTypeID(v28);
    if (v30 != CFArrayGetTypeID())
    {
      CFStringRef v79 = @"requiredDgstArray has invalid type";
      goto LABEL_181;
    }
  }
  if (CFArrayGetCount(v28) >= 1)
  {
    CFIndex v31 = 0;
    CFMutableArrayRef Mutable = 0;
    CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v34 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v28, v31);
      if (CFDictionaryContainsKey(a5, ValueAtIndex))
      {
        if (!Mutable)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v33, 0, v34);
          if (!Mutable)
          {
            CFBooleanRef v62 = (void *)a7;
            AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"cannot allocate subCCsToVerifyDigest", v80);
            CFStringRef v10 = 0;
            CFStringRef v67 = 0;
            goto LABEL_184;
          }
        }
        CFStringRef v36 = CFArrayGetValueAtIndex(v28, v31);
        CFArrayAppendValue(Mutable, v36);
      }
      ++v31;
    }
    while (v31 < CFArrayGetCount(v28));
    if (Mutable && CFArrayGetCount(Mutable) >= 1) {
      AMFDRSetSubCCDigestsToVerify((uint64_t)v7, a2, Mutable);
    }
    goto LABEL_31;
  }
LABEL_30:
  CFMutableArrayRef Mutable = 0;
LABEL_31:
  long long v88 = Mutable;
  uint64_t v37 = AMFDRDataDictCreateFromData((uint64_t)v7, v11, 0, (uint64_t)&v89);
  uint64_t v9 = (CFArrayRef *)v37;
  if (!v37)
  {
    CFBooleanRef v62 = (void *)a7;
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"origSysconfig of %@ is NULL", (char)a2);
    goto LABEL_93;
  }
  CFArrayRef v38 = *(const __CFArray **)(v37 + 48);
  uint64_t v84 = (uint64_t)v11;
  if (!v38) {
    goto LABEL_44;
  }
  if (*(void *)(v37 + 56))
  {
    CFIndex Count = CFArrayGetCount(v38);
    if (Count != CFArrayGetCount(v9[7]))
    {
      CFStringRef format = @"invalid number of metadata values";
      goto LABEL_92;
    }
    CFArrayRef v38 = v9[6];
    if (!v38) {
      goto LABEL_44;
    }
  }
  else
  {
    CFIndex Count = 0;
  }
  v95.CFIndex length = CFArrayGetCount(v38);
  v95.location = 0;
  if (!CFArrayContainsValue(v38, v95, @"grmr"))
  {
LABEL_44:
    if (!v21) {
      goto LABEL_45;
    }
    goto LABEL_91;
  }
  if (Count < 1)
  {
    CFStringRef v42 = v21;
  }
  else
  {
    CFStringRef v81 = v17;
    CFIndex v40 = 0;
    while (1)
    {
      CFAllocatorRef v41 = CFArrayGetValueAtIndex(v9[6], v40);
      CFStringRef v42 = (const __CFString *)CFArrayGetValueAtIndex(v9[7], v40);
      if (CFEqual(v41, @"grmr")) {
        break;
      }
      if (Count == ++v40)
      {
        CFStringRef v42 = v21;
        goto LABEL_97;
      }
    }
    if (v21)
    {
      CFStringRef v17 = v81;
      if (!CFEqual(v42, v21))
      {
LABEL_91:
        AMSupportLogInternal();
        CFStringRef format = @"grammar hash mismatched, check the grammar ID";
LABEL_92:
        CFBooleanRef v62 = (void *)a7;
        AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", format, v80);
LABEL_93:
        CFStringRef v10 = 0;
        CFStringRef v67 = 0;
        CFMutableArrayRef Mutable = 0;
        CFDataRef v28 = 0;
        CFStringRef v17 = 0;
        CFDictionaryRef v44 = 0;
LABEL_94:
        CFDataRef v11 = 0;
LABEL_95:
        char v7 = 0;
        goto LABEL_130;
      }
      goto LABEL_99;
    }
    AMSupportLogInternal();
LABEL_97:
    CFStringRef v17 = v81;
  }
  CFStringRef v21 = v42;
  if (!v42) {
    goto LABEL_45;
  }
LABEL_99:
  if (!CFBooleanGetValue(BOOLean))
  {
LABEL_45:
    if (v28)
    {
      if (CFArrayGetCount(v28) >= 1)
      {
        CFAllocatorRef v43 = CFGetAllocator(v7);
        CFDictionaryRef v44 = CFStringCreateMutable(v43, 0);
        if (v44)
        {
          CFStringRef v82 = v17;
          if (CFArrayGetCount(v28) >= 1)
          {
            CFIndex v45 = 0;
            CFDataRef v11 = 0;
            CFMutableArrayRef Mutable = 0;
            while (1)
            {
              CFTypeRef v46 = CFArrayGetValueAtIndex(v28, v45);
              CFTypeRef v47 = v46;
              if (!v46) {
                break;
              }
              CFTypeID v48 = CFGetTypeID(v46);
              if (v48 != CFStringGetTypeID()) {
                break;
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
              if (v11) {
                CFRelease(v11);
              }
              CFStringRef v49 = (const __CFString *)CFDictionaryGetValue(a5, v47);
              CFStringRef v50 = v49;
              if (!v49
                || (CFTypeID v51 = CFGetTypeID(v49), v51 != CFDataGetTypeID())
                && (CFTypeID v52 = CFGetTypeID(v50), v52 != CFStringGetTypeID()))
              {
                AMSupportLogInternal();
                CFStringRef v10 = 0;
                CFStringRef v67 = 0;
                CFMutableArrayRef Mutable = 0;
                CFDataRef v28 = 0;
                CFStringRef v17 = 0;
                goto LABEL_128;
              }
              CFTypeID v53 = CFGetTypeID(v50);
              if (v53 == CFStringGetTypeID())
              {
                CFAllocatorRef v54 = CFGetAllocator(v7);
                CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v54, v50, 0x8000100u, 0x20u);
              }
              else
              {
                CFDataRef ExternalRepresentation = (const __CFData *)CFRetain(v50);
              }
              CFDataRef v11 = ExternalRepresentation;
              CFDataGetBytePtr(ExternalRepresentation);
              CFDataGetLength(v11);
              if (AMSupportDigestSha384())
              {
                AMSupportLogInternal();
                CFStringRef v10 = 0;
                CFStringRef v67 = 0;
                CFMutableArrayRef Mutable = 0;
                goto LABEL_160;
              }
              CFMutableArrayRef Mutable = (__CFArray *)_AMFDRCopyHashHexString((unsigned __int8 *)v92, 0x30u);
              if (!Mutable) {
                break;
              }
              if (v45) {
                CFStringAppend(v44, @",");
              }
              CFStringAppendFormat(v44, 0, @"%@:%@", v47, Mutable);
              if (++v45 >= CFArrayGetCount(v28)) {
                goto LABEL_72;
              }
            }
            AMSupportLogInternal();
            CFStringRef v10 = 0;
            CFStringRef v67 = 0;
LABEL_160:
            CFDataRef v28 = 0;
            CFStringRef v17 = 0;
            goto LABEL_129;
          }
          CFMutableArrayRef Mutable = 0;
          CFDataRef v11 = 0;
LABEL_72:
          CFAllocatorRef v56 = CFGetAllocator(v7);
          unsigned int v57 = CFDictionaryCreateMutable(v56, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFDataRef v28 = v57;
          if (!v57)
          {
            CFBooleanRef v62 = (void *)a7;
            AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"metadataDict create failed", v80);
            goto LABEL_175;
          }
          CFDictionarySetValue(v57, @"x-fdr-patch-required-subcc-dgst", v44);
          CFStringRef v17 = v82;
LABEL_74:
          CFStringRef v58 = (const __CFString *)CFDictionaryGetValue(a5, @"asid");
          if (v17)
          {
            if (v58)
            {
              CFComparisonResult v59 = CFStringCompare(v17, v58, 0);
              CFStringRef v60 = v17;
              CFStringRef v17 = 0;
              char v61 = (__CFString *)a2;
              if (v59)
              {
                CFBooleanRef v62 = (void *)a7;
                AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"assemblyID in option not equals asid in patchDict", v80);
LABEL_175:
                CFStringRef v10 = 0;
                CFStringRef v67 = 0;
                CFStringRef v17 = 0;
                goto LABEL_95;
              }
            }
            else
            {
              CFStringRef v60 = v17;
              CFAllocatorRef v63 = CFGetAllocator(v7);
              CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v63, 0, a5);
              CFStringRef v17 = (const __CFString *)MutableCopy;
              if (!MutableCopy)
              {
                CFBooleanRef v62 = (void *)a7;
                AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"asidPatchDict create failed", v80);
                CFStringRef v10 = 0;
                CFStringRef v67 = 0;
                goto LABEL_95;
              }
              CFDictionarySetValue(MutableCopy, @"asid", v60);
              char v61 = (__CFString *)a2;
            }
          }
          else
          {
            CFStringRef v60 = v58;
            char v61 = (__CFString *)a2;
            if (!v58) {
              goto LABEL_83;
            }
          }
          AMFDRSetAssemblyIdentifierToVerify((uint64_t)v7, v61, v60);
LABEL_83:
          if (v17) {
            uint64_t v65 = (uint64_t)v17;
          }
          else {
            uint64_t v65 = (uint64_t)a5;
          }
          CFStringRef v66 = v61;
          CFBooleanRef v62 = (void *)a7;
          char v7 = (__CFString *)_AMFDRDataPatchInternal(v7, v66, a3, v84, 0, v65, (uint64_t)v28, a7);
          CFStringRef v10 = 0;
          CFStringRef v67 = 0;
          goto LABEL_130;
        }
        CFBooleanRef v62 = (void *)a7;
        AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"requiredSubCCs create failed", v80);
        CFStringRef v10 = 0;
        CFStringRef v67 = 0;
        CFMutableArrayRef Mutable = 0;
        CFDataRef v28 = 0;
        CFStringRef v17 = 0;
        goto LABEL_94;
      }
      CFMutableArrayRef Mutable = 0;
      CFDataRef v28 = 0;
    }
    else
    {
      CFMutableArrayRef Mutable = 0;
    }
    CFDictionaryRef v44 = 0;
    CFDataRef v11 = 0;
    goto LABEL_74;
  }
  CFAllocatorRef v69 = CFGetAllocator(v7);
  CFStringRef v10 = CFStringCreateWithFormat(v69, 0, @"%@-%@", @"grmr", v21);
  BOOL v70 = AMFDRLoadPersistent((uint64_t)v7, @"GrammarHash", (uint64_t)v10, (uint64_t)&cfa);
  CFStringRef v67 = 0;
  char v71 = 0;
  while (1)
  {
    if (v67) {
      CFRelease(v67);
    }
    if (!v70) {
      break;
    }
LABEL_118:
    CFDataGetBytePtr((CFDataRef)cfa);
    CFDataGetLength((CFDataRef)cfa);
    if (AMSupportDigestSha256())
    {
      AMSupportLogInternal();
      goto LABEL_163;
    }
    CFStringRef v67 = _AMFDRCopyHashHexString((unsigned __int8 *)v93, 0x20u);
    if (v67)
    {
      int v75 = CFEqual(v21, v67);
      BOOL v70 = 0;
      unsigned __int8 v76 = v71 ^ 1;
      char v71 = 1;
      if (((v75 == 0) & v76) != 0) {
        continue;
      }
    }
    AMSupportLogInternal();
    goto LABEL_127;
  }
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  CFTypeRef v91 = 0;
  CFDictionaryRef v72 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)v7);
  if (v72)
  {
    uint64_t v73 = (__CFString *)CFDictionaryGetValue(v72, @"Permissions");
    if (v73)
    {
      CFAllocatorRef v74 = CFGetAllocator(v7);
      uint64_t v73 = CFStringCreateMutableCopy(v74, 0, v73);
      if (AMFDRDataAppendPermissionsString(v7, 0, @"grmr", v21, v73))
      {
        AMFDRSetOption((uint64_t)v7, @"Permissions", v73);
        CFStringRef v67 = AMFDRDataCopy((uint64_t)v7, @"grmr", v21, (uint64_t)&v91);
        goto LABEL_110;
      }
      AMFDRErrorPushInternal((uint64_t)&v91, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCopyGrmr", @"Append GET permission string failed", v80);
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)&v91, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCopyGrmr", @"oldPerm is NULL", v80);
    }
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)&v91, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCopyGrmr", @"options is NULL", v80);
    uint64_t v73 = 0;
  }
  CFStringRef v67 = 0;
LABEL_110:
  CFTypeRef v89 = (CFTypeRef)AMSupportSafeRetain();
  if (v73) {
    CFRelease(v73);
  }
  if (v91) {
    CFRelease(v91);
  }
  CFTypeRef cfa = v67;
  if (!v67)
  {
    AMFDRErrorPushInternal((uint64_t)&v89, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"grmrData is NULL", v80);
    goto LABEL_127;
  }
  if (AMFDRSavePersistent(v7, @"GrammarHash", v10, v67))
  {
    if (v89)
    {
      CFRelease(v89);
      CFTypeRef v89 = 0;
    }
    goto LABEL_118;
  }
  AMFDRErrorPushInternal((uint64_t)&v89, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataPatchWithOptions", @"can't save grammar file", v80);
LABEL_163:
  CFStringRef v67 = 0;
LABEL_127:
  CFMutableArrayRef Mutable = 0;
  CFDataRef v28 = 0;
  CFStringRef v17 = 0;
  CFDictionaryRef v44 = 0;
LABEL_128:
  CFDataRef v11 = 0;
LABEL_129:
  char v7 = 0;
  CFBooleanRef v62 = (void *)a7;
LABEL_130:
  CFTypeRef v77 = v89;
  if (v62)
  {
    *CFBooleanRef v62 = AMSupportSafeRetain();
    CFTypeRef v77 = v89;
  }
  if (v77)
  {
    CFRelease(v77);
    CFTypeRef v89 = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v7;
}

CFStringRef _AMFDRCopyHashHexString(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memset(v5, 0, sizeof(v5));
  uint64_t v2 = 0;
  if (a2)
  {
    do
    {
      unsigned int v3 = *a1++;
      *((unsigned char *)v5 + v2) = _AMFDRCopyHashHexString_kAsciiHexChars[(unint64_t)v3 >> 4];
      *((unsigned char *)v5 + (v2 + 1)) = _AMFDRCopyHashHexString_kAsciiHexChars[v3 & 0xF];
      v2 += 2;
    }
    while (2 * a2 != v2);
    uint64_t v2 = v2;
  }
  *((unsigned char *)v5 + v2) = 0;
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)v5, 0x8000100u);
}

CFTypeRef AMFDRDataMultiPatchWithOptions(void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, uint64_t a6, CFErrorRef *a7)
{
  if (a6)
  {
    if (a7) {
      AMFDRErrorPushInternal((uint64_t)a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMultiPatchWithOptions", @"optionsArray isn't supported!!", vars0);
    }
    return 0;
  }
  else
  {
    return _AMFDRDataMultiPatchInternal(a1, a2, a3, a4, 0, a5, a7);
  }
}

uint64_t AMFDRDataUpdateMetadataWithOptions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 208))();
}

uint64_t AMFDRDataMultiUpdateMetadataWithOptions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 216))();
}

CFTypeRef AMFDRDataCreateRepairConfigurationAsidMetadata(const __CFArray *cf, char a2, const __CFArray *a3, uint64_t a4)
{
  CFArrayRef v4 = cf;
  long long v107 = 0;
  long long v108 = 0;
  unsigned int v106 = 0;
  if (!cf || (CFTypeID v5 = CFGetTypeID(cf), v5 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"asidMetadataInternalBlob has wrong type %@", (char)v4);
    CFArrayRef v8 = 0;
    CFArrayRef v82 = 0;
    CFStringRef v94 = 0;
    CFTypeRef v79 = 0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_124;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"outAsidMetadata create failed", v88);
    CFArrayRef v8 = 0;
LABEL_169:
    CFArrayRef v82 = 0;
    CFStringRef v94 = 0;
    CFTypeRef v79 = 0;
    goto LABEL_124;
  }
  CFArrayRef v8 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  if (!v8)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"missingSupm create failed", v88);
    goto LABEL_169;
  }
  CFArrayRef v101 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
    CFArrayRef v11 = 0;
    CFStringRef v10 = 0;
    CFDataRef v9 = 0;
    CFDataRef cfa = 0;
LABEL_113:
    CFDataRef v97 = v9;
    CFStringRef v94 = v10;
    CFArrayRef v100 = v11;
    if (CFArrayGetCount(v8) >= 1)
    {
      AMSupportLogInternal();
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, i);
          CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"DataClassInstance");
          CFStringRef v78 = CFDictionaryGetValue(ValueAtIndex, @"supm");
          v115.CFIndex length = CFArrayGetCount(v8);
          v115.location = 0;
          if (CFArrayContainsValue(v8, v115, v78))
          {
            CFDictionaryRemoveValue(Mutable, Value);
            AMSupportLogInternal();
          }
          CFArrayRef v4 = v101;
        }
      }
    }
    CFTypeRef v79 = CFRetain(Mutable);
    CFDataRef v9 = v97;
LABEL_120:
    CFDataRef v80 = cfa;
    if (!v9) {
      goto LABEL_122;
    }
    goto LABEL_121;
  }
  CFAllocatorRef v104 = v6;
  CFDataRef cfa = 0;
  CFDataRef v9 = 0;
  CFStringRef v10 = 0;
  CFArrayRef v11 = 0;
  CFIndex v12 = 0;
  CFArrayRef v91 = v8;
  CFDataRef v92 = Mutable;
  while (1)
  {
    AMFDREncodeMetadataDestroy(&v108);
    int v13 = AMFDREncodeRepairConfigurationBegin(&v108);
    if (v13)
    {
      CFStringRef v94 = v10;
      CFArrayRef v100 = v11;
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"AMFDREncodeRepairConfigurationBegin for Collection failed 0x%X", v13);
      goto LABEL_142;
    }
    CFDictionaryRef v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v12);
    CFDictionaryRef v15 = v14;
    if (!v14 || (CFTypeID v16 = CFGetTypeID(v14), v16 != CFDictionaryGetTypeID()))
    {
      CFStringRef v94 = v10;
      CFArrayRef v100 = v11;
      AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"asidMetadata has wrong type %@", (char)v15);
LABEL_142:
      CFTypeRef v79 = 0;
      goto LABEL_120;
    }
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v15, @"Version");
    CFStringRef v18 = v17;
    if (!v17 || (CFTypeID v19 = CFGetTypeID(v17), v19 != CFStringGetTypeID()))
    {
      CFStringRef v94 = v10;
      CFArrayRef v100 = v11;
      AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"versionStr has wrong type %@", (char)v18);
      goto LABEL_142;
    }
    IntCFStringRef Value = -86;
    IntCFStringRef Value = CFStringGetIntValue(v18);
    int v20 = AMFDREncodeRepairConfigurationAddData(&v108, 2, (uint64_t)&IntValue, 1);
    if (v20)
    {
      CFStringRef v94 = v10;
      CFArrayRef v100 = v11;
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"add version failed 0x%X", v20);
      goto LABEL_162;
    }
    CFIndex v103 = v12;
    CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v15, @"DataClassInstance");
    CFStringRef v22 = v21;
    if (!v21 || (CFTypeID v23 = CFGetTypeID(v21), v23 != CFStringGetTypeID()))
    {
      CFStringRef v94 = v10;
      CFArrayRef v100 = v11;
      char v89 = (char)v22;
      CFStringRef format = @"dataClassInstance has wrong type %@";
      goto LABEL_147;
    }
    if (v11) {
      CFRelease(v11);
    }
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v104, v22, @":");
    CFArrayRef v11 = ArrayBySeparatingStrings;
    if (!ArrayBySeparatingStrings || CFArrayGetCount(ArrayBySeparatingStrings) != 2)
    {
      CFStringRef v94 = v10;
      CFArrayRef v100 = v11;
      AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"Could not split dataClassInstance", v88);
      goto LABEL_162;
    }
    if (v10) {
      CFRelease(v10);
    }
    CFBooleanRef v25 = CFArrayGetValueAtIndex(v11, 0);
    CFTypeID v26 = CFArrayGetValueAtIndex(v11, 1);
    CFStringRef v27 = CFStringCreateWithFormat(v104, 0, @"%@-%@", v25, v26);
    if (!v27)
    {
      CFArrayRef v100 = v11;
      AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"tmpDataClassInstance allocation failed", v88);
      CFStringRef v94 = 0;
      goto LABEL_162;
    }
    CFStringRef v10 = v27;
    if (a3)
    {
      v113.CFIndex length = CFArrayGetCount(a3);
      v113.location = 0;
      if (CFArrayContainsValue(a3, v113, v10)) {
        break;
      }
    }
    CFArrayRef v100 = v11;
    if (v9) {
      CFRelease(v9);
    }
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v104, v22, 0x8000100u, 0x20u);
    CFDataRef v9 = ExternalRepresentation;
    if (!ExternalRepresentation || (CFTypeID v30 = CFGetTypeID(ExternalRepresentation), v30 != CFDataGetTypeID()))
    {
LABEL_139:
      CFStringRef v94 = v10;
      char v89 = (char)v9;
      CFStringRef format = @"valueData has wrong type %@";
LABEL_147:
      AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", format, v89);
      goto LABEL_162;
    }
    uint64_t BytePtr = CFDataGetBytePtr(v9);
    int Length = CFDataGetLength(v9);
    int v33 = AMFDREncodeRepairConfigurationAddData(&v108, 0, (uint64_t)BytePtr, Length);
    if (v33)
    {
      CFStringRef v94 = v10;
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"add data class failed 0x%X", v33);
      goto LABEL_162;
    }
    CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(v15, @"type");
    CFStringRef v35 = v34;
    if (!v34 || (CFTypeID v36 = CFGetTypeID(v34), v36 != CFStringGetTypeID()))
    {
      CFStringRef v94 = v10;
      char v89 = (char)v35;
      CFStringRef format = @"type has wrong type %@";
      goto LABEL_147;
    }
    CFRelease(v9);
    CFDataRef v37 = CFStringCreateExternalRepresentation(v104, v35, 0x8000100u, 0x20u);
    CFDataRef v9 = v37;
    if (!v37) {
      goto LABEL_139;
    }
    CFTypeID v38 = CFGetTypeID(v37);
    if (v38 != CFDataGetTypeID()) {
      goto LABEL_139;
    }
    CFTypeID v39 = CFDataGetBytePtr(v9);
    int v40 = CFDataGetLength(v9);
    int v41 = AMFDREncodeRepairConfigurationAddData(&v108, 0, (uint64_t)v39, v40);
    if (v41)
    {
      CFStringRef v94 = v10;
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"add type failed 0x%X", v41);
      goto LABEL_162;
    }
    CFStringRef v42 = CFDictionaryGetValue(v15, @"dcls");
    CFAllocatorRef v43 = v42;
    if (!v42 || (CFTypeID v44 = CFGetTypeID(v42), v44 != CFArrayGetTypeID()))
    {
      CFStringRef v94 = v10;
      char v89 = (char)v43;
      CFStringRef format = @"dcls has wrong type %@";
      goto LABEL_147;
    }
    if ((_AMFDRDataPrepareRepairConfigurationContextArrayData(@"dcls", v43, (const __CFData *)&v108) & 1) == 0)
    {
      CFStringRef v94 = v10;
      CFStringRef v87 = @"create dcls failed";
      goto LABEL_161;
    }
    if (CFStringCompare(v35, @"Primary", 0)) {
      goto LABEL_77;
    }
    CFDictionaryRef v45 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"pdct");
    CFDictionaryRef v46 = v45;
    long long v111 = 0;
    uint64_t v112 = 0;
    long long v110 = 0;
    CFDataRef v96 = v9;
    if (!v45
      || (CFTypeID v47 = CFGetTypeID(v45), v47 != CFDictionaryGetTypeID())
      || !v108
      || (uint64_t v112 = v108, AMFDREncodeRepairConfigurationBegin(&v111)))
    {
      AMSupportLogInternal();
      CFStringRef v49 = 0;
      goto LABEL_103;
    }
    CFIndex v48 = CFDictionaryGetCount(v46);
    CFStringRef v49 = (const void **)malloc_type_malloc(8 * v48, 0x80040B8603338uLL);
    if (!v49)
    {
      AMSupportLogInternal();
LABEL_103:
      CFStringRef v50 = 0;
LABEL_104:
      CFDataRef v52 = 0;
      goto LABEL_111;
    }
    CFStringRef v50 = (const void **)malloc_type_malloc(8 * v48, 0x80040B8603338uLL);
    if (!v50)
    {
      AMSupportLogInternal();
      goto LABEL_104;
    }
    CFDictionaryGetKeysAndValues(v46, v49, v50);
    if (v48 < 1)
    {
      CFAllocatorRef v53 = v104;
      if (AMFDREncodeRepairConfigurationAddSequence(&v111, &v111))
      {
        CFDataRef v52 = 0;
      }
      else
      {
LABEL_65:
        CFDataRef v61 = CFStringCreateExternalRepresentation(v53, @"pdct", 0x8000100u, 0x20u);
        CFDataRef v52 = v61;
        if (v61)
        {
          CFTypeID v62 = CFGetTypeID(v61);
          if (v62 == CFDataGetTypeID())
          {
            CFDataGetBytePtr(v52);
            CFDataGetLength(v52);
            if (!AMFDREncodeRepairConfigurationAddSequenceWithKey(&v111)
              && !AMFDREncodeRepairConfigurationAddSequence(&v111, &v112))
            {
              char v63 = 1;
              goto LABEL_70;
            }
          }
        }
      }
    }
    else
    {
      CFStringRef v93 = v10;
      uint64_t v51 = 0;
      CFDataRef v52 = 0;
      CFAllocatorRef v53 = v104;
      do
      {
        AMFDREncodeMetadataDestroy(&v110);
        if (AMFDREncodeRepairConfigurationBegin(&v110)) {
          goto LABEL_98;
        }
        CFStringRef v54 = (const __CFString *)v49[v51];
        if (!v54) {
          goto LABEL_98;
        }
        CFTypeID v55 = CFGetTypeID(v49[v51]);
        if (v55 != CFStringGetTypeID()) {
          goto LABEL_98;
        }
        if (v52) {
          CFRelease(v52);
        }
        CFDataRef v56 = CFStringCreateExternalRepresentation(v53, v54, 0x8000100u, 0x20u);
        CFDataRef v52 = v56;
        if (!v56
          || (unsigned int v57 = CFDataGetBytePtr(v56),
              int v58 = CFDataGetLength(v52),
              AMFDREncodeRepairConfigurationAddData(&v110, 0, (uint64_t)v57, v58))
          || (CFNumberRef v59 = (const __CFNumber *)v50[v51]) == 0
          || (CFTypeID v60 = CFGetTypeID(v50[v51]), v60 != CFNumberGetTypeID())
          || (int valuePtr = 0, !CFNumberGetValue(v59, kCFNumberIntType, &valuePtr))
          || AMFDREncodeRepairConfigurationAddData(&v110, 3, (uint64_t)&valuePtr, 1)
          || (CFAllocatorRef v53 = v104, AMFDREncodeRepairConfigurationAddSequence(&v110, &v111)))
        {
LABEL_98:
          AMSupportLogInternal();
          char v63 = 0;
          CFStringRef v10 = v93;
          goto LABEL_70;
        }
        ++v51;
      }
      while (v48 != v51);
      if (!AMFDREncodeRepairConfigurationAddSequence(&v111, &v111))
      {
        CFRelease(v52);
        CFStringRef v10 = v93;
        goto LABEL_65;
      }
      CFStringRef v10 = v93;
    }
    AMSupportLogInternal();
LABEL_111:
    char v63 = 0;
LABEL_70:
    AMFDREncodeMetadataDestroy(&v111);
    AMFDREncodeMetadataDestroy(&v110);
    if (v49) {
      free(v49);
    }
    if (v50) {
      free(v50);
    }
    if (v52) {
      CFRelease(v52);
    }
    CFArrayRef v8 = v91;
    CFMutableArrayRef Mutable = v92;
    CFDataRef v9 = v96;
    if ((v63 & 1) == 0)
    {
      CFStringRef v94 = v10;
      CFStringRef v87 = @"_AMFDRDataPrepareRepairConfigurationContextPdct failed";
      goto LABEL_161;
    }
LABEL_77:
    BOOL v64 = CFDictionaryGetValue(v15, @"manp");
    if (v64)
    {
      uint64_t v65 = v64;
      CFTypeID v66 = CFGetTypeID(v64);
      if (v66 == CFArrayGetTypeID()
        && (_AMFDRDataPrepareRepairConfigurationContextArrayData(@"manp", v65, (const __CFData *)&v108) & 1) == 0)
      {
        CFStringRef v94 = v10;
        CFStringRef v87 = @"create manp failed";
LABEL_161:
        AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", v87, v88);
        goto LABEL_162;
      }
    }
    CFStringRef v67 = CFDictionaryGetValue(v15, @"asid");
    if (v67)
    {
      CFErrorRef v68 = v67;
      CFTypeID v69 = CFGetTypeID(v67);
      if (v69 == CFArrayGetTypeID()
        && (_AMFDRDataPrepareRepairConfigurationContextArrayData(@"asid", v68, (const __CFData *)&v108) & 1) == 0)
      {
        CFStringRef v94 = v10;
        AMSupportLogInternal();
        goto LABEL_162;
      }
    }
    int v70 = AMFDREncodeRepairConfigurationAddSequence(&v108, &v108);
    if (v70)
    {
      CFStringRef v94 = v10;
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"AMFDREncodeRepairConfigurationAddSequence failed 0x%X", v70);
      goto LABEL_162;
    }
    if (v107)
    {
      free(v107);
      long long v107 = 0;
    }
    int v71 = AMFDREncodeRepairConfigurationEnd(&v108, &v107, &v106);
    if (v71)
    {
      CFStringRef v94 = v10;
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"AMFDREncodeRepairConfigurationEnd failed 0x%X", v71);
      goto LABEL_162;
    }
    CFDictionaryRef v72 = (const UInt8 *)v107;
    if (!v107) {
      goto LABEL_95;
    }
    CFIndex v73 = v106;
    CFArrayRef v11 = v100;
    if (v106)
    {
      if (cfa)
      {
        CFRelease(cfa);
        CFDictionaryRef v72 = (const UInt8 *)v107;
        CFIndex v73 = v106;
      }
      CFDataRef v74 = CFDataCreate(v104, v72, v73);
      if (!v74)
      {
        CFStringRef v94 = v10;
        AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"failed to create repairConfigurationData", v88);
        CFDataRef v80 = 0;
        goto LABEL_163;
      }
      uint64_t v112 = 0;
      CFDataRef cfa = v74;
      AMSupportBase64Encode();
      if (!v112)
      {
        CFStringRef v94 = v10;
        AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"asidMetadata AMSupportBase64Encode failed", v88);
        goto LABEL_162;
      }
      CFDictionaryAddValue(Mutable, v22, v112);
      if (v112) {
        CFRelease(v112);
      }
LABEL_95:
      CFArrayRef v11 = v100;
    }
LABEL_96:
    CFArrayRef v4 = v101;
    CFIndex v12 = v103 + 1;
    if (v103 + 1 == Count) {
      goto LABEL_113;
    }
  }
  if (a2)
  {
    AMSupportLogInternal();
    CFDataRef v28 = CFDictionaryGetValue(v15, @"supm");
    v114.CFIndex length = CFArrayGetCount(v8);
    v114.location = 0;
    if (!CFArrayContainsValue(v8, v114, v28)) {
      CFArrayAppendValue(v8, v28);
    }
    goto LABEL_96;
  }
  CFArrayRef v100 = v11;
  CFStringRef v94 = v10;
  AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCreateRepairConfigurationAsidMetadata", @"'%@' is missing", (char)v10);
LABEL_162:
  CFDataRef v80 = cfa;
LABEL_163:
  CFTypeRef v79 = 0;
  if (v9)
  {
LABEL_121:
    CFDataRef v81 = v80;
    CFRelease(v9);
    CFDataRef v80 = v81;
  }
LABEL_122:
  CFArrayRef v82 = v100;
  if (v80) {
    CFRelease(v80);
  }
LABEL_124:
  if (v107)
  {
    free(v107);
    long long v107 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v94) {
    CFRelease(v94);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v82) {
    CFRelease(v82);
  }
  AMFDREncodeMetadataDestroy(&v108);
  if (v79)
  {
    CFTypeID v83 = CFGetTypeID(v79);
    if (v83 == CFDictionaryGetTypeID())
    {
      CFTypeRef v84 = CFRetain(v79);
    }
    else
    {
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateRepairConfigurationAsidMetadata", @"asidMetadata has wrong type %@", (char)v79);
      CFTypeRef v84 = 0;
    }
    CFRelease(v79);
  }
  else
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateRepairConfigurationAsidMetadata", @"asidMetadata has wrong type %@", 0);
    return 0;
  }
  return v84;
}

CFDataRef AMFDRDataCreateRepairConfigurationSupmData(CFTypeRef cf)
{
  *(void *)CFStringRef v18 = 0;
  memset(length, 0, sizeof(length));
  if (!cf) {
    goto LABEL_23;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 != CFDictionaryGetTypeID()) {
    goto LABEL_23;
  }
  if (AMFDREncodeRepairConfigurationBegin(v18)) {
    goto LABEL_23;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Version");
  CFStringRef v4 = Value;
  if (!Value) {
    goto LABEL_23;
  }
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFStringGetTypeID()) {
    goto LABEL_23;
  }
  IntCFStringRef Value = CFStringGetIntValue(v4);
  if (AMFDREncodeRepairConfigurationAddData(v18, 2, (uint64_t)&IntValue, 1)) {
    goto LABEL_23;
  }
  CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RepairConfigurationAsidMetadata");
  CFArrayRef v7 = v6;
  if (!v6) {
    goto LABEL_23;
  }
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 != CFArrayGetTypeID()) {
    goto LABEL_23;
  }
  if (_AMFDRDataPrepareRepairConfigurationContextSupmSetData(*(uint64_t **)v18, v7, @"dcls")) {
    goto LABEL_23;
  }
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RepairConfigurationAsidExceptionList");
  if (v9)
  {
    CFArrayRef v10 = v9;
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 != CFArrayGetTypeID()
      || _AMFDRDataPrepareRepairConfigurationContextSupmSetData(*(uint64_t **)v18, v10, @"xcld"))
    {
      goto LABEL_23;
    }
  }
  if (AMFDREncodeRepairConfigurationAddSequence((uint64_t **)v18, (uint64_t **)v18)
    || AMFDREncodeRepairConfigurationEnd(v18, &length[1], length))
  {
LABEL_23:
    AMSupportLogInternal();
    CFDataRef v12 = 0;
LABEL_19:
    int v13 = *(void **)&length[1];
    goto LABEL_20;
  }
  CFDataRef v12 = 0;
  int v13 = *(void **)&length[1];
  if (*(void *)&length[1] && length[0])
  {
    CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)*MEMORY[0x263EFFB08]);
    CFDataRef v12 = CFDataCreate(v14, *(const UInt8 **)&length[1], length[0]);
    if (!v12) {
      AMSupportLogInternal();
    }
    goto LABEL_19;
  }
LABEL_20:
  if (v13)
  {
    free(v13);
    *(void *)&length[1] = 0;
  }
  AMFDREncodeMetadataDestroy((void **)v18);
  return v12;
}

uint64_t _AMFDRDataPrepareRepairConfigurationContextSupmSetData(uint64_t *a1, CFArrayRef theArray, const __CFString *a3)
{
  CFDataRef v28 = 0;
  CFTypeID v29 = a1;
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v6 = AMFDREncodeRepairConfigurationBegin(&v28);
  if (v6)
  {
    uint64_t v25 = v6;
    AMSupportLogInternal();
    CFDataRef v9 = 0;
LABEL_25:
    AMFDREncodeMetadataDestroy(&v28);
    goto LABEL_21;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (Count >= 1)
  {
    CFIndex v8 = 0;
    CFDataRef v9 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
      CFDictionaryRef v11 = ValueAtIndex;
      if (!ValueAtIndex) {
        goto LABEL_24;
      }
      CFTypeID v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != CFDictionaryGetTypeID()) {
        goto LABEL_24;
      }
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v11, @"Tag");
      CFStringRef v14 = Value;
      if (!Value) {
        goto LABEL_24;
      }
      CFTypeID v15 = CFGetTypeID(Value);
      if (v15 != CFStringGetTypeID()) {
        goto LABEL_24;
      }
      if (v9) {
        CFRelease(v9);
      }
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v7, v14, 0x8000100u, 0x20u);
      CFDataRef v9 = ExternalRepresentation;
      if (!ExternalRepresentation || (CFTypeID v17 = CFGetTypeID(ExternalRepresentation), v17 != CFDataGetTypeID()))
      {
LABEL_24:
        AMSupportLogInternal();
        uint64_t v25 = 0;
        goto LABEL_25;
      }
      uint64_t BytePtr = CFDataGetBytePtr(v9);
      int Length = CFDataGetLength(v9);
      uint64_t v20 = AMFDREncodeRepairConfigurationAddData(&v28, 1, (uint64_t)BytePtr, Length);
      if (v20) {
        break;
      }
      if (Count == ++v8) {
        goto LABEL_16;
      }
    }
    uint64_t v27 = v20;
    AMSupportLogInternal();
    uint64_t v25 = v27;
    goto LABEL_25;
  }
  CFDataRef v9 = 0;
LABEL_16:
  CFDataRef v21 = CFStringCreateExternalRepresentation(v7, a3, 0x8000100u, 0x20u);
  CFDataRef v22 = v21;
  if (v21)
  {
    CFTypeID v23 = CFGetTypeID(v21);
    if (v23 == CFDataGetTypeID())
    {
      CFDataGetBytePtr(v22);
      CFDataGetLength(v22);
      uint64_t v24 = AMFDREncodeRepairConfigurationAddSetWithKey(&v28);
      if (v24)
      {
        uint64_t v25 = v24;
      }
      else
      {
        uint64_t v25 = AMFDREncodeRepairConfigurationAddSequence(&v28, &v29);
        if (!v25)
        {
LABEL_20:
          AMFDREncodeMetadataDestroy(&v28);
          CFRelease(v22);
          goto LABEL_21;
        }
      }
      AMSupportLogInternal();
      goto LABEL_20;
    }
    AMSupportLogInternal();
    uint64_t v25 = 0;
    goto LABEL_20;
  }
  AMSupportLogInternal();
  AMFDREncodeMetadataDestroy(&v28);
  uint64_t v25 = 0;
LABEL_21:
  if (v9) {
    CFRelease(v9);
  }
  return v25;
}

BOOL AMFDRDataAppendPermissionUpdateAsidMetadata(const __CFArray *a1, const __CFArray *a2, uint64_t a3, __CFString *a4, uint64_t a5)
{
  if (!a3)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataAppendPermissionUpdateAsidMetadata", @"amfdrRemote is NULL", v32);
    return 0;
  }
  if (*(uint64_t (***)(int, int, int, int))(a3 + 48) != AMFDRHTTPStore)
  {
    uint64_t v25 = @"amfdr is not remote";
LABEL_35:
    CFStringRef v31 = v25;
    *(_OWORD *)CFTypeID v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v26 = a5;
    CFIndex v27 = 1;
LABEL_37:
    AMFDRErrorPushInternal(v26, v27, 0, 0, 0, 0, 0, 0, value[0], value[1], v29[0], v29[1], (void *)v30, *((void **)&v30 + 1), (uint64_t)"AMFDRDataAppendPermissionUpdateAsidMetadata", v31, v32);
    return 0;
  }
  if (!*(void *)(a3 + 16))
  {
    uint64_t v25 = @"invalid optionsDict";
    goto LABEL_35;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (!Mutable)
  {
    CFStringRef v31 = @"permissions allocation failed";
    *(_OWORD *)CFTypeID v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v26 = a5;
    CFIndex v27 = 2;
    goto LABEL_37;
  }
  CFDictionaryRef v11 = Mutable;
  if (a1 && (CFTypeID v12 = CFGetTypeID(a1), v12 == CFArrayGetTypeID()))
  {
    if (a2 && (CFTypeID v13 = CFGetTypeID(a2), v13 == CFArrayGetTypeID()))
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count == CFArrayGetCount(a2))
      {
        theString = a4;
        if (Count < 1)
        {
          BOOL v15 = 1;
LABEL_20:
          if (CFStringGetLength(theString)) {
            CFStringAppend(theString, @";");
          }
          CFStringAppend(theString, v11);
        }
        else
        {
          uint64_t v34 = a5;
          BOOL v15 = 0;
          CFIndex v16 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v16);
            CFStringRef v18 = ValueAtIndex;
            if (!ValueAtIndex || (CFTypeID v19 = CFGetTypeID(ValueAtIndex), v19 != CFStringGetTypeID()))
            {
              char v33 = (char)v18;
              CFStringRef v24 = @"dataClass has wrong type '%@";
LABEL_27:
              AMFDRErrorPushInternal(v34, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataAppendPermissionUpdateAsidMetadata", v24, v33);
              goto LABEL_23;
            }
            CFStringRef v20 = (const __CFString *)CFArrayGetValueAtIndex(a2, v16);
            CFStringRef v21 = v20;
            if (!v20 || (CFTypeID v22 = CFGetTypeID(v20), v22 != CFStringGetTypeID()))
            {
              char v33 = (char)v21;
              CFStringRef v24 = @"dataInstance has wrong type '%@";
              goto LABEL_27;
            }
            if ((AMFDRDataAppendPermissionsString((__CFString *)a3, 0xCu, v18, v21, v11) & 1) == 0) {
              break;
            }
            BOOL v15 = ++v16 >= Count;
            if (Count == v16) {
              goto LABEL_20;
            }
          }
          AMFDRErrorPushInternal(v34, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataAppendPermissionUpdateAsidMetadata", @"AMFDRDataAppendPermissionsString failed", v32);
        }
        goto LABEL_23;
      }
      AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataAppendPermissionUpdateAsidMetadata", @"input array count mismatched", v32);
    }
    else
    {
      AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataAppendPermissionUpdateAsidMetadata", @"dataInstances has wrong type %@", (char)a2);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataAppendPermissionUpdateAsidMetadata", @"dataClasses has wrong type %@", (char)a1);
  }
  BOOL v15 = 0;
LABEL_23:
  CFRelease(v11);
  return v15;
}

uint64_t AMFDRDataUpdateAsidMetadata(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, const __CFString *a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  if (!a5)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", @"amfdrRemote is NULL", v30);
    return 0;
  }
  if (*(uint64_t (***)(int, int, int, int))(a5 + 48) != AMFDRHTTPStore)
  {
    CFStringRef v29 = @"amfdr is not remote";
LABEL_42:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", v29, v30);
    CFStringRef v15 = 0;
    goto LABEL_38;
  }
  CFDictionaryRef v10 = *(const __CFDictionary **)(a5 + 16);
  if (!v10)
  {
    CFStringRef v29 = @"invalid optionsDict";
    goto LABEL_42;
  }
  CFStringRef v15 = (const __CFString *)_CFDictionaryCopyValue(v10, @"Permissions");
  if (!a6 || (CFTypeID v16 = CFGetTypeID(a6), v16 != CFStringGetTypeID()))
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", @"permissions has wrong type %@", (char)a6);
    goto LABEL_38;
  }
  if (!a1 || (CFTypeID v17 = CFGetTypeID(a1), v17 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", @"dataclasses has wrong type %@", (char)a1);
    goto LABEL_38;
  }
  if (!a2 || (CFTypeID v18 = CFGetTypeID(a2), v18 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", @"dataInstances has wrong type %@", (char)a2);
    goto LABEL_38;
  }
  if (!a3 || (CFTypeID v19 = CFGetTypeID(a3), v19 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", @"metadata has wrong type %@", (char)a3);
    goto LABEL_38;
  }
  if (!a4 || (CFTypeID v20 = CFGetTypeID(a4), v20 != CFArrayGetTypeID()))
  {
    char v30 = (char)a4;
    CFStringRef v28 = @"metadataOptions has wrong type %@";
    goto LABEL_37;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
  if (Count != CFArrayGetCount((CFArrayRef)a2)
    || Count != CFArrayGetCount((CFArrayRef)a3)
    || Count != CFArrayGetCount((CFArrayRef)a4))
  {
    CFStringRef v28 = @"input array count mismatched";
LABEL_37:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", v28, v30);
    goto LABEL_38;
  }
  AMFDRSetOption(a5, @"Permissions", a6);
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a5 + 16), @"UseSikDataInstance");
  if (Value)
  {
    CFBooleanRef v23 = Value;
    CFTypeID v24 = CFGetTypeID(Value);
    if (v24 == CFBooleanGetTypeID()) {
      CFBooleanGetValue(v23);
    }
  }
  AMSupportLogInternal();
  char v25 = (*(uint64_t (**)(uint64_t, const void *, const void *, const void *, const void *, CFTypeRef *))(*(void *)(a5 + 48) + 216))(a5, a1, a2, a3, a4, &cf);
  if (!cf && (v25 & 1) != 0)
  {
    uint64_t v26 = 1;
    goto LABEL_23;
  }
  AMFDRErrorPushInternal(a7, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataUpdateAsidMetadata", @"AMFDRDataMultiUpdateMetadataWithOptions failed with error %@", (char)cf);
LABEL_38:
  uint64_t v26 = 0;
LABEL_23:
  if (*(uint64_t (***)(int, int, int, int))(a5 + 48) == AMFDRHTTPStore && *(void *)(a5 + 16)) {
    AMFDRSetOption(a5, @"Permissions", v15);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v15) {
    CFRelease(v15);
  }
  return v26;
}

BOOL AMFDRDataCopyAsidMetadataParameters(CFTypeRef cf, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5, uint64_t a6)
{
  if (!cf || (CFTypeID v11 = CFGetTypeID(cf), v11 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"asidMetadata has wrong type %@", (char)cf);
    return 0;
  }
  int v40 = a3;
  int v41 = a4;
  CFStringRef v42 = a5;
  uint64_t Count = CFDictionaryGetCount((CFDictionaryRef)cf);
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"dataClasses allocation failed", v36);
    return 0;
  }
  CFMutableArrayRef v47 = CFArrayCreateMutable(v13, 0, MEMORY[0x263EFFF70]);
  if (!v47)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"dataInstances allocation failed", v36);
    CFRelease(Mutable);
    return 0;
  }
  CFMutableArrayRef v14 = CFArrayCreateMutable(v13, Count, MEMORY[0x263EFFF70]);
  if (!v14)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"multiUpdateMetadataOptions allocation failed", v36);
    CFArrayRef ArrayBySeparatingStrings = 0;
    CFMutableArrayRef v15 = 0;
LABEL_67:
    CFTypeID v20 = 0;
    CFMutableDictionaryRef v19 = 0;
    BOOL v17 = 0;
    goto LABEL_38;
  }
  CFMutableArrayRef v15 = CFArrayCreateMutable(v13, Count, MEMORY[0x263EFFF70]);
  if (!v15)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"multiUpdateMetadata allocation failed", v36);
    CFArrayRef ArrayBySeparatingStrings = 0;
    goto LABEL_67;
  }
  CFDictionaryRef v46 = v14;
  CFStringRef v49 = malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  if (!v49)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"dictKeysBuffer allocation failed", v36);
LABEL_70:
    CFArrayRef ArrayBySeparatingStrings = 0;
    CFTypeID v20 = 0;
    CFMutableDictionaryRef v19 = 0;
    BOOL v17 = 0;
    goto LABEL_38;
  }
  CFTypeID v16 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  if (!v16)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"dictValuesBuffer allocation failed", v36);
    free(v49);
    goto LABEL_70;
  }
  CFMutableArrayRef theArray = v15;
  CFDictionaryRef v45 = v16;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)cf, (const void **)v49, v16);
  if (Count < 1)
  {
    CFArrayRef ArrayBySeparatingStrings = 0;
    CFTypeID v20 = 0;
    CFMutableDictionaryRef v19 = 0;
    BOOL v17 = 1;
LABEL_29:
    if (a2) {
      *a2 = CFRetain(Mutable);
    }
    CFMutableArrayRef v14 = v46;
    CFMutableArrayRef v15 = theArray;
    if (v40) {
      *int v40 = CFRetain(v47);
    }
    if (v41) {
      *int v41 = CFRetain(theArray);
    }
    if (v42) {
      *CFStringRef v42 = CFRetain(v46);
    }
    goto LABEL_37;
  }
  uint64_t v39 = a6;
  BOOL v17 = 0;
  uint64_t v18 = 0;
  CFMutableDictionaryRef v19 = 0;
  CFTypeID v20 = 0;
  CFArrayRef ArrayBySeparatingStrings = 0;
  CFTypeID v22 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  while (1)
  {
    CFStringRef v23 = (const __CFString *)*((void *)v49 + v18);
    if (ArrayBySeparatingStrings) {
      CFRelease(ArrayBySeparatingStrings);
    }
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v13, v23, @":");
    if (CFArrayGetCount(ArrayBySeparatingStrings) != 2)
    {
      char v38 = CFArrayGetCount(ArrayBySeparatingStrings);
      AMFDRErrorPushInternal(v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"dataClassInstance has wrong size '%ld", v38);
      goto LABEL_52;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    char v25 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v26 = CFGetTypeID(ValueAtIndex), v26 != CFStringGetTypeID()))
    {
      char v37 = (char)v25;
      CFStringRef format = @"dataClass has wrong type '%@";
LABEL_51:
      AMFDRErrorPushInternal(v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", format, v37);
LABEL_52:
      BOOL v17 = 0;
LABEL_54:
      CFMutableArrayRef v14 = v46;
      goto LABEL_59;
    }
    CFArrayAppendValue(Mutable, v25);
    CFIndex v27 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
    CFStringRef v28 = v27;
    if (!v27 || (CFTypeID v29 = CFGetTypeID(v27), v29 != CFStringGetTypeID()))
    {
      char v37 = (char)v28;
      CFStringRef format = @"dataInstance has wrong type '%@";
      goto LABEL_51;
    }
    CFArrayAppendValue(v47, v28);
    if (v20) {
      CFRelease(v20);
    }
    char v30 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x263EFFF88], v22);
    CFTypeID v20 = v30;
    CFMutableArrayRef v14 = v46;
    if (!v30) {
      break;
    }
    CFDictionaryAddValue(v30, @"MetadataType", @"System");
    CFArrayAppendValue(v46, v20);
    if (v19) {
      CFRelease(v19);
    }
    CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x263EFFF88], v22);
    if (!v19)
    {
      CFStringRef v35 = @"metadataDict allocation failed";
      goto LABEL_58;
    }
    CFStringRef v31 = v45[v18];
    if (!v31 || (CFTypeID v32 = CFGetTypeID(v45[v18]), v32 != CFStringGetTypeID()))
    {
      AMFDRErrorPushInternal(v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", @"b64Metadata has wrong type %@", (char)v31);
      goto LABEL_54;
    }
    CFDictionaryAddValue(v19, @"asid", v31);
    CFArrayAppendValue(theArray, v19);
    BOOL v17 = ++v18 >= Count;
    if (Count == v18) {
      goto LABEL_29;
    }
  }
  CFStringRef v35 = @"metaOptions allocation failed";
LABEL_58:
  AMFDRErrorPushInternal(v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyAsidMetadataParameters", v35, v36);
  BOOL v17 = 0;
LABEL_59:
  CFMutableArrayRef v15 = theArray;
LABEL_37:
  free(v49);
  free(v45);
LABEL_38:
  CFRelease(Mutable);
  CFRelease(v47);
  if (ArrayBySeparatingStrings) {
    CFRelease(ArrayBySeparatingStrings);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v17;
}

uint64_t AMFDRDataCopyRawDataAndManifests(void *a1, uint64_t a2, uint64_t a3, int a4, CFTypeRef *a5, CFTypeRef *a6, uint64_t *a7, uint64_t a8)
{
  CFDataRef v9 = a1;
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawDataAndManifests", @"amfdr is NULL", v20);
    uint64_t v17 = 0;
    goto LABEL_19;
  }
  char v10 = a2;
  if (!a2)
  {
    CFStringRef v19 = @"dataClass is NULL";
LABEL_31:
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawDataAndManifests", v19, v20);
LABEL_33:
    uint64_t v17 = 0;
    CFDataRef v9 = 0;
    goto LABEL_19;
  }
  if (!a3)
  {
    CFStringRef v19 = @"dataInstance is NULL";
    goto LABEL_31;
  }
  if (!a5)
  {
    CFStringRef v19 = @"outData is NULL";
    goto LABEL_31;
  }
  if (!a6)
  {
    CFStringRef v19 = @"outDeviceManifest is NULL";
    goto LABEL_31;
  }
  CFDataRef v15 = (const __CFData *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(a1[6] + 16))(a1, a2, a3, a8);
  if (!v15)
  {
    AMFDRErrorPushInternal(a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawDataAndManifests", @"failed to copy %@-%@", v10);
    goto LABEL_33;
  }
  CFDataRef v16 = v15;
  if (AMFDRDataCopyExtraManifests(v9, v15, &v23, &v22, a8))
  {
    if (v23)
    {
      if (a4)
      {
        CFDataRef v9 = (const void *)AMFDRDataDictCreateFromData((uint64_t)v9, v16, 1, a8);
        if (!v9)
        {
          AMFDRErrorPushInternal(a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawDataAndManifests", @"failed to copy dict for %@-%@", v10);
          uint64_t v17 = 0;
          goto LABEL_17;
        }
LABEL_14:
        *a5 = CFRetain(v9);
        *a6 = CFRetain(v23);
        if (a7) {
          *a7 = AMSupportSafeRetain();
        }
        uint64_t v17 = 1;
        goto LABEL_17;
      }
      if (_AMFDRDataCopyImg4StrippedValue(v9, v16, &cf, a8))
      {
        CFDataRef v9 = CFRetain(cf);
        goto LABEL_14;
      }
      AMFDRErrorPushInternal(a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawDataAndManifests", @"failed to copy data payload for %@-%@", v10);
    }
    else
    {
      AMFDRErrorPushInternal(a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawDataAndManifests", @"AMFDRDataCopyExtraManifests failed to copy device manifest for %@-%@", v10);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCopyRawDataAndManifests", @" AMFDRDataCopyExtraManifests failed to copy manifest for %@-%@", v10);
  }
  uint64_t v17 = 0;
  CFDataRef v9 = 0;
LABEL_17:
  CFRelease(v16);
  if (v23)
  {
    CFRelease(v23);
    CFTypeRef v23 = 0;
  }
LABEL_19:
  if (v22)
  {
    CFRelease(v22);
    CFTypeRef v22 = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t _AMFDRDataCopyUnCombinedValue(CFDictionaryRef *a1, int a2, CFDataRef theData, void *a4, uint64_t a5)
{
  char v33 = 0;
  CFDataRef v34 = 0;
  unsigned int v32 = 0;
  CFStringRef v31 = 0;
  unsigned int v30 = 0;
  uint64_t v29 = 0;
  int v28 = 0;
  if (!a1)
  {
    CFStringRef v25 = @"amfdr is NULL";
LABEL_39:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyUnCombinedValue", v25, v27);
LABEL_44:
    uint64_t MutableCopy = 0;
    CFDataRef v7 = 0;
    goto LABEL_30;
  }
  if (!a1[2])
  {
    CFStringRef v25 = @"amfdr->optionsDict is NULL";
    goto LABEL_39;
  }
  CFDataRef v7 = theData;
  if (!theData)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyUnCombinedValue", @"valueData is NULL", v27);
LABEL_49:
    uint64_t MutableCopy = 0;
    goto LABEL_30;
  }
  if (!a4)
  {
    CFStringRef v25 = @"outValueData is NULL";
    goto LABEL_39;
  }
  uint64_t BytePtr = CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(v7);
  uint64_t v12 = AMFDRDecodeCombined((uint64_t)BytePtr, Length, &v33, &v32, &v31, &v30);
  if (a2 && v12)
  {
    CFAllocatorRef v13 = CFDataGetBytePtr(v7);
    unsigned int v14 = CFDataGetLength(v7);
    uint64_t v12 = AMFDRDecodeFDR2Data((uint64_t)v13, v14, &v31, &v30, &v29, &v28);
  }
  if (v12)
  {
    if (a2)
    {
      if ((_AMFDRDataCopyImg4StrippedValue(a1, v7, &v34, a5) & 1) == 0)
      {
        AMFDRErrorPushInternal(a5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyUnCombinedValue", @"_AMFDRDataCopyImg4StrippedValue failed", v27);
        goto LABEL_44;
      }
      CFDataRef v15 = v34;
      if (!v34)
      {
        CFStringRef v16 = @"strippedData is NULL";
LABEL_42:
        AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyUnCombinedValue", v16, v27);
        goto LABEL_44;
      }
    }
    else
    {
      CFDataRef v15 = v7;
    }
    CFDataRef v7 = 0;
    *a4 = CFRetain(v15);
LABEL_29:
    uint64_t MutableCopy = 1;
    goto LABEL_30;
  }
  if (!v31)
  {
    CFStringRef v16 = @"foundData is NULL";
    goto LABEL_42;
  }
  if (!v30)
  {
    CFStringRef v16 = @"foundDataLength is 0";
    goto LABEL_42;
  }
  CFAllocatorRef v17 = CFGetAllocator(a1);
  CFDataRef v18 = CFDataCreate(v17, v31, v30);
  CFDataRef v7 = v18;
  if (!a2)
  {
    CFDataRef v7 = 0;
    goto LABEL_23;
  }
  if (!v18)
  {
    CFStringRef v26 = @"dataToStrip is NULL";
LABEL_47:
    AMFDRErrorPushInternal(a5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyUnCombinedValue", v26, v27);
    goto LABEL_49;
  }
  if ((_AMFDRDataCopyImg4StrippedValue(a1, v18, &v34, a5) & 1) == 0)
  {
    CFStringRef v26 = @"_AMFDRDataCopyImg4StrippedValue failed";
    goto LABEL_47;
  }
  if (!v34)
  {
    AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataCopyUnCombinedValue", @"strippedData is NULL", v27);
    goto LABEL_49;
  }
  CFDataRef v18 = (const __CFData *)CFRetain(v34);
LABEL_23:
  *a4 = v18;
  uint64_t MutableCopy = 1;
  if (!CFDictionaryGetValue(a1[2], @"TrustObject") && v33 && v32)
  {
    CFAllocatorRef v20 = CFGetAllocator(a1);
    uint64_t MutableCopy = (uint64_t)CFDictionaryCreateMutableCopy(v20, 0, a1[2]);
    if (MutableCopy)
    {
      CFAllocatorRef v21 = CFGetAllocator(a1);
      CFDataRef v22 = CFDataCreate(v21, v33, v32);
      if (v22)
      {
        CFDataRef v23 = v22;
        CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, @"TrustObject", v22);
        CFRelease(a1[2]);
        a1[2] = (CFDictionaryRef)CFRetain((CFTypeRef)MutableCopy);
        CFRelease((CFTypeRef)MutableCopy);
        CFRelease(v23);
        goto LABEL_29;
      }
      AMSupportLogInternal();
      CFRelease((CFTypeRef)MutableCopy);
      goto LABEL_49;
    }
    AMSupportLogInternal();
  }
LABEL_30:
  if (v34)
  {
    CFRelease(v34);
    CFDataRef v34 = 0;
  }
  if (v7) {
    CFRelease(v7);
  }
  return MutableCopy;
}

void _AMFDRDataMultiCopyCallbak(const __CFString *a1, const __CFData *a2, CFDictionaryRef **a3)
{
  CFStringRef v16 = 0;
  CFTypeRef value = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMSupportLogInternal();
    CFDataRef v3 = 0;
    goto LABEL_12;
  }
  CFDataRef v3 = a2;
  CFTypeID v5 = a3[2];
  if (!a2)
  {
    AMFDRErrorPushInternal((uint64_t)&value, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyCallbak", @"rawData is NULL", v13);
    goto LABEL_8;
  }
  uint64_t v6 = a3[1];
  if (!v6)
  {
    CFStringRef format = @"formattedDict is NULL";
LABEL_25:
    AMFDRErrorPushInternal((uint64_t)&value, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyCallbak", format, v13);
LABEL_27:
    CFDataRef v3 = 0;
    goto LABEL_8;
  }
  if (!*v6)
  {
    CFStringRef format = @"formattedDict is uninitailized";
    goto LABEL_25;
  }
  CFDataRef v7 = *a3;
  CFAllocatorRef v8 = CFGetAllocator(*a3);
  if ((AMFDRDataLocalDecomposeFullKey(v8, a1, (CFTypeRef *)&v16, &cf) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)&value, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyCallbak", @"AMFDRDataLocalDecomposeFullKey failed with %@", (char)a1);
    goto LABEL_27;
  }
  CFStringRef v9 = v16;
  CFStringRef v10 = (const __CFString *)cf;
  CFDataRef v11 = (const __CFData *)CFRetain(v3);
  CFDataRef v3 = _AMFDRDataCopyFormatted(v7, v9, v10, v11, (uint64_t)&value);
  if (v3) {
    CFDictionaryAddValue(*v6, a1, v3);
  }
  else {
    AMFDRErrorPushInternal((uint64_t)&value, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiCopyCallbak", @"_AMFDRDataCopyFormatted failed with %@", (char)a1);
  }
LABEL_8:
  if (value && v5 && *v5) {
    CFDictionarySetValue(*v5, a1, value);
  }
LABEL_12:
  if (v16)
  {
    CFRelease(v16);
    CFStringRef v16 = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  if (value) {
    CFRelease(value);
  }
}

void _AMFDRDataMultiPatchCallback(const __CFString *a1, const void *a2, uint64_t a3)
{
  CFStringRef v4 = *(const void **)a3;
  CFDataRef v3 = *(__CFDictionary **)(a3 + 8);
  CFTypeID v5 = *(__CFDictionary **)(a3 + 16);
  CFStringRef v13 = 0;
  CFStringRef v14 = 0;
  CFTypeRef value = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)&value, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchCallback", @"dataClassInstance is NULL", v11);
    goto LABEL_10;
  }
  if (!a2)
  {
    CFStringRef format = @"img4Data is NULL";
LABEL_20:
    AMFDRErrorPushInternal((uint64_t)&value, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchCallback", format, v11);
    goto LABEL_7;
  }
  if (!v3)
  {
    CFStringRef format = @"patchedDataDict is NULL";
    goto LABEL_20;
  }
  CFAllocatorRef v8 = CFGetAllocator(v4);
  if (AMFDRDataLocalDecomposeFullKey(v8, a1, (CFTypeRef *)&v14, (CFTypeRef *)&v13))
  {
    CFStringRef v9 = (const __CFString *)AMFDRGetAssemblyIDToVerify((uint64_t)v4, v14);
    if (AMFDRDataVerifyImg4Integrity(v4, v14, v13, v9, (const __CFData *)a2, 1, (uint64_t)&value)) {
      CFDictionarySetValue(v3, a1, a2);
    }
    else {
      AMFDRErrorPushInternal((uint64_t)&value, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchCallback", @"failed to verify img4 data for %@", (char)a1);
    }
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)&value, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMultiPatchCallback", @"AMFDRDataLocalDecomposeFullKey failed with %@", (char)a1);
  }
LABEL_7:
  if (value && v5) {
    CFDictionarySetValue(v5, a1, value);
  }
LABEL_10:
  if (v14)
  {
    CFRelease(v14);
    CFStringRef v14 = 0;
  }
  if (v13)
  {
    CFRelease(v13);
    CFStringRef v13 = 0;
  }
  if (value) {
    CFRelease(value);
  }
}

uint64_t _AMFDRDataPrepareRepairConfigurationContextArrayData(const __CFString *cf, const void *a2, const __CFData *a3)
{
  CFDataRef v22 = 0;
  CFDataRef v23 = 0;
  if (!cf) {
    goto LABEL_32;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFStringGetTypeID()) {
    goto LABEL_32;
  }
  if (!a2) {
    goto LABEL_32;
  }
  CFTypeID v7 = CFGetTypeID(a2);
  if (v7 != CFArrayGetTypeID()) {
    goto LABEL_32;
  }
  if (!a3)
  {
LABEL_26:
    AMSupportLogInternal();
    goto LABEL_27;
  }
  if (!*(void *)a3 || (CFDataRef v23 = *(uint64_t **)a3, AMFDREncodeRepairConfigurationBegin(&v22)))
  {
LABEL_32:
    AMSupportLogInternal();
    a3 = 0;
LABEL_27:
    AMFDREncodeMetadataDestroy(&v22);
    uint64_t v20 = 0;
    if (!a3) {
      return v20;
    }
    goto LABEL_24;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (Count >= 1)
  {
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    a3 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v11);
      CFStringRef v13 = ValueAtIndex;
      if (!ValueAtIndex) {
        goto LABEL_26;
      }
      CFTypeID v14 = CFGetTypeID(ValueAtIndex);
      if (v14 != CFStringGetTypeID()) {
        goto LABEL_26;
      }
      if (a3) {
        CFRelease(a3);
      }
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v9, v13, 0x8000100u, 0x20u);
      a3 = ExternalRepresentation;
      if (!ExternalRepresentation) {
        goto LABEL_26;
      }
      uint64_t BytePtr = CFDataGetBytePtr(ExternalRepresentation);
      int Length = CFDataGetLength(a3);
      if (AMFDREncodeRepairConfigurationAddData(&v22, 1, (uint64_t)BytePtr, Length)) {
        goto LABEL_26;
      }
      if (v10 == ++v11) {
        goto LABEL_19;
      }
    }
  }
  a3 = 0;
LABEL_19:
  CFDataRef v18 = CFStringCreateExternalRepresentation(v9, cf, 0x8000100u, 0x20u);
  if (!v18) {
    goto LABEL_26;
  }
  CFDataRef v19 = v18;
  CFDataGetBytePtr(v18);
  CFDataGetLength(v19);
  if (AMFDREncodeRepairConfigurationAddSequenceWithKey(&v22)
    || AMFDREncodeRepairConfigurationAddSequence(&v22, &v23))
  {
    AMSupportLogInternal();
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 1;
  }
  AMFDREncodeMetadataDestroy(&v22);
  CFRelease(v19);
  if (a3) {
LABEL_24:
  }
    CFRelease(a3);
  return v20;
}

CFStringRef AMFDRDataLocalCreateFullKey(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return CFStringCreateWithFormat(a1, 0, @"%@-%@", a2, a3);
  }
  else {
    return CFStringCreateWithFormat(a1, 0, @"%@", a2);
  }
}

uint64_t AMFDRDataLocalDecomposeFullKey(const __CFAllocator *a1, CFStringRef theString, CFTypeRef *a3, CFTypeRef *a4)
{
  if (CFStringHasPrefix(theString, @"minimal-manifest")) {
    CFIndex v8 = 2;
  }
  else {
    CFIndex v8 = 1;
  }

  return AMFDRDataLocalDecomposeFullKeyInternal(a1, v8, theString, a3, a4);
}

uint64_t AMFDRDataLocalDecomposeFullKeyInternal(const __CFAllocator *a1, CFIndex a2, CFStringRef theString, CFTypeRef *a4, CFTypeRef *a5)
{
  if (!theString) {
    goto LABEL_14;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, theString, @"-");
  CFArrayRef v11 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings) {
    goto LABEL_14;
  }
  if (a2 < 1) {
    goto LABEL_14;
  }
  if (CFArrayGetCount(ArrayBySeparatingStrings) <= a2) {
    goto LABEL_14;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFArrayRef v13 = Mutable;
  if (!Mutable) {
    goto LABEL_14;
  }
  v20.location = 0;
  v20.CFIndex length = a2;
  CFArrayAppendArray(Mutable, v11, v20);
  CFStringRef v14 = CFStringCreateByCombiningStrings(a1, v13, @"-");
  CFStringRef v15 = v14;
  if (!v14) {
    goto LABEL_14;
  }
  CFIndex Length = CFStringGetLength(v14);
  v21.CFIndex length = CFStringGetLength(theString) + ~Length;
  v21.location = Length + 1;
  CFStringRef v17 = CFStringCreateWithSubstring(a1, theString, v21);
  if (v17)
  {
    if (a4) {
      *a4 = CFRetain(v15);
    }
    if (a5) {
      *a5 = CFRetain(v17);
    }
    uint64_t v18 = 1;
  }
  else
  {
LABEL_14:
    AMSupportLogInternal();
    uint64_t v18 = 0;
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v18;
}

CFTypeRef AMFDRDataLocalCopyDataDirectoryPath(void *a1, uint64_t a2)
{
  if (!a1)
  {
    AMSupportLogInternal();
LABEL_15:
    CFTypeRef v8 = 0;
    goto LABEL_12;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)a1[2];
  if (!v4)
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDataDirectoryPath", @"options on amfdr are NULL", v14);
    goto LABEL_15;
  }
  CFDictionaryGetValue(v4, @"DataDirectory");
  CFTypeID v5 = (const void *)AMSupportSafeRetain();
  if (!v5)
  {
    CFAllocatorRef v9 = (void *)a1[17];
    if (*v9 >= 0x69uLL)
    {
      CFIndex v10 = (uint64_t (*)(void *, void))v9[13];
      if (v10)
      {
        CFArrayRef v11 = (const void *)v10(a1, a1[18]);
        CFTypeID v6 = v11;
        if (v11)
        {
          CFTypeID v12 = CFGetTypeID(v11);
          if (v12 == CFURLGetTypeID()) {
            goto LABEL_5;
          }
        }
      }
    }
    AMFDRErrorPushInternal(a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDataDirectoryPath", @"CopyDefaultDataPath did not return a CFURL", v14);
LABEL_11:
    CFTypeRef v8 = 0;
    goto LABEL_12;
  }
  CFTypeID v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 != CFURLGetTypeID())
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDataDirectoryPath", @"%@ must be a CFURL", (char)@"DataDirectory");
    goto LABEL_11;
  }
LABEL_5:
  CFTypeRef v8 = CFRetain(v6);
LABEL_12:
  AMSupportSafeRelease();
  return v8;
}

uint64_t AMFDRDataLocalCopyDataStoragePath(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v8 = AMFDRDataLocalCopyDataDirectoryPath(a1, a4);
  if (!v8)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDataStoragePath", @"Could not determine data directory URL", v16);
    return 0;
  }
  CFAllocatorRef v9 = v8;
  if (MEMORY[0x21D45A650]())
  {
    CFStringRef v13 = @"AMSupportMakeDirectory failed";
LABEL_9:
    AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDataStoragePath", v13, v16);
    CFRelease(v9);
    return 0;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v10, a2, a3);
  if (!FullKey)
  {
    char v16 = a2;
    CFStringRef v13 = @"failed to create fullKey from %@, %@";
    goto LABEL_9;
  }
  CFStringRef v12 = FullKey;
  CFGetAllocator(a1);
  if (AMSupportCopyURLWithAppendedComponent())
  {
    CFStringRef v15 = @"AMSupportCopyURLWithAppendedComponent failed";
  }
  else
  {
    char v16 = (char)v9;
    CFStringRef v15 = @"failed to create filePath from %@, %@, %@";
  }
  AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDataStoragePath", v15, v16);
  CFRelease(v9);
  CFRelease(v12);
  return 0;
}

uint64_t AMFDRDataLocalSign(uint64_t a1, const __CFString *a2, const void *a3, const __CFData *a4, char a5, const void *a6, __CFString *a7, const void *a8, CFDataRef *a9, uint64_t a10)
{
  CFAllocatorRef v10 = (__CFString *)a1;
  uint64_t v11 = a10;
  uint64_t v134 = *MEMORY[0x263EF8340];
  char v125 = 0;
  v124 = 0;
  unsigned int v123 = 0;
  v122 = 0;
  int v121 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"amfdr is NULL", (char)v98);
LABEL_105:
    CFStringRef v13 = 0;
    goto LABEL_106;
  }
  if (!a2)
  {
    CFStringRef v25 = @"dataClassStr is NULL";
    goto LABEL_101;
  }
  if (!a3)
  {
    AMFDRErrorPushInternal(a10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"dataInstanceStr is NULL.", (char)v98);
LABEL_104:
    CFAllocatorRef v10 = 0;
    goto LABEL_105;
  }
  if (!a4)
  {
    AMFDRErrorPushInternal(a10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"valueData is NULL.", (char)v98);
    goto LABEL_104;
  }
  CFStringRef v13 = a9;
  if (!a9)
  {
    AMFDRErrorPushInternal(a10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"outSignedValueData is NULL.", (char)v98);
    CFAllocatorRef v10 = 0;
LABEL_106:
    a7 = 0;
    uint64_t v39 = 0;
    CFDataRef v92 = 0;
    uint64_t v40 = 0;
    goto LABEL_123;
  }
  CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 16);
  if (!v14)
  {
    CFStringRef v25 = @"options on amfdr are NULL";
    goto LABEL_101;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v14, @"kAMFDROptionOfflineSigning");
  if (!Value || (v20 = Value, v21 = CFGetTypeID(Value), v22 = v21 == CFBooleanGetTypeID(), uint64_t v11 = a10, !v22))
  {
    _isLocalSign((uint64_t)v10);
    BOOL v112 = 0;
    goto LABEL_14;
  }
  int v23 = CFBooleanGetValue(v20);
  BOOL v112 = v23 != 0;
  unsigned int v24 = _isLocalSign((uint64_t)v10);
  if (v23 && v24)
  {
    long long v98 = @"kAMFDROptionOfflineSigning";
    CFStringRef v25 = @"Cannot specify both %@ and %@ with value TRUE";
LABEL_101:
    AMFDRErrorPushInternal(v11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", v25, (char)v98);
    goto LABEL_104;
  }
LABEL_14:
  if ((AMFDRDataGetSigningVersion((uint64_t)v10, &v121) & 1) == 0)
  {
    AMFDRErrorPushInternal(v11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"AMFDRDataGetSigningVersion failed", (char)v98);
    goto LABEL_104;
  }
  char v105 = a5;
  CFAllocatorRef v26 = CFGetAllocator(v10);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v26, a2, 0x8000100u, 0x5Fu);
  if (!ExternalRepresentation)
  {
    AMFDRErrorPushInternal(v11, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"CFStringCreateExternalRepresentation(dataClassData) failed", (char)v98);
    goto LABEL_104;
  }
  CFDataRef v28 = ExternalRepresentation;
  uint64_t v104 = (uint64_t)a2;
  CFStringRef InstanceString = AMFDRDataCreateInstanceString(v10, 0, a3);
  CFAllocatorRef v30 = CFGetAllocator(v10);
  CFDataRef v118 = CFStringCreateExternalRepresentation(v30, InstanceString, 0x8000100u, 0x5Fu);
  if (!v118)
  {
    AMFDRErrorPushInternal(v11, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"CFStringCreateExternalRepresentation(dataInstanceData) failed", (char)v98);
    CFDataRef v71 = 0;
    CFIndex v73 = 0;
    CFAllocatorRef v10 = 0;
    CFStringRef v13 = 0;
    a7 = 0;
    uint64_t v39 = 0;
    v120 = 0;
    CFDataRef v113 = 0;
    uint64_t v40 = 0;
LABEL_114:
    CFRelease(v28);
    goto LABEL_115;
  }
  if (!a7) {
    goto LABEL_23;
  }
  CFTypeID v31 = CFGetTypeID(a7);
  if (v31 != CFStringGetTypeID() || CFStringGetLength(a7) < 1)
  {
    a7 = 0;
LABEL_23:
    CFIndex Length = 0;
    uint64_t BytePtr = 0;
    goto LABEL_24;
  }
  CFAllocatorRef v32 = CFGetAllocator(v10);
  CFDataRef v33 = CFStringCreateExternalRepresentation(v32, a7, 0x8000100u, 0x5Fu);
  a7 = (__CFString *)v33;
  if (!v33)
  {
    AMFDRErrorPushInternal(v11, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"CFStringCreateExternalRepresentation(assemblyIDData) failed", (char)v98);
    uint64_t v40 = 0;
    long long v111 = 0;
    CFDataRef v113 = 0;
    v120 = 0;
    uint64_t v39 = 0;
    CFStringRef v13 = 0;
    CFAllocatorRef v10 = 0;
    CFIndex v73 = 0;
    CFDataRef v71 = 0;
    goto LABEL_149;
  }
  uint64_t BytePtr = CFDataGetBytePtr(v33);
  CFIndex Length = CFDataGetLength((CFDataRef)a7);
LABEL_24:
  CFStringRef v114 = InstanceString;
  long long v111 = a7;
  if (!a6 || (CFTypeID v34 = CFGetTypeID(a6), v34 != CFDictionaryGetTypeID()))
  {
    char v38 = 0;
    CFRange v115 = 0;
    v116 = 0;
    CFStringRef v13 = 0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_39;
  }
  unsigned int Count = CFDictionaryGetCount((CFDictionaryRef)a6);
  if (Count)
  {
    CFAllocatorRef v36 = CFGetAllocator(v10);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v36, Count, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      v120 = malloc_type_malloc(4 * Count, 0x100004052888210uLL);
      if (v120)
      {
        v116 = malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
        if (v116)
        {
          uint64_t v11 = a10;
          CFRange v115 = (__CFString *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
          if (!v115)
          {
            AMFDRErrorPushInternal(a10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"propertyValueLengths is NULL", (char)v98);
            uint64_t v40 = 0;
            CFDataRef v113 = 0;
            a7 = 0;
            CFStringRef v13 = 0;
            CFIndex v73 = 0;
            CFDataRef v71 = 0;
            uint64_t v39 = v116;
            goto LABEL_157;
          }
          char v37 = (CFDataRef *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
          CFStringRef v13 = v37;
          if (!v37)
          {
            AMFDRErrorPushInternal(a10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"propertyValueTypes is NULL", (char)v98);
            uint64_t v40 = 0;
            CFDataRef v113 = 0;
            CFIndex v73 = 0;
            CFDataRef v71 = 0;
            a7 = v115;
            uint64_t v39 = v116;
            goto LABEL_157;
          }
          char v125 = 1;
          char v38 = v120;
          *(void *)&long long context = v10;
          *((void *)&context + 1) = v120;
          a7 = v115;
          uint64_t v39 = v116;
          *(void *)&long long v130 = v116;
          *((void *)&v130 + 1) = v115;
          *(void *)&long long v131 = v37;
          *((void *)&v131 + 1) = Mutable;
          v132 = &v125;
          uint64_t v133 = a10;
          CFDictionaryApplyFunction((CFDictionaryRef)a6, (CFDictionaryApplierFunction)_appendManifestProperties, &context);
          if (!v125) {
            goto LABEL_35;
          }
          if (FDREncodeExtendedProperties((uint64_t)&v122, Count, (uint64_t)v120, (uint64_t)v116, (uint64_t)v115, (uint64_t)v13))
          {
            AMFDRErrorPushInternal(a10, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"FDREncodeExtendedProperties failed", (char)v98);
            a7 = v115;
            uint64_t v39 = v116;
LABEL_35:
            uint64_t v40 = 0;
            CFDataRef v113 = 0;
LABEL_154:
            CFIndex v73 = 0;
            CFDataRef v71 = 0;
LABEL_157:
            CFStringRef InstanceString = v114;
            goto LABEL_112;
          }
          goto LABEL_38;
        }
        AMFDRErrorPushInternal(a10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"propertyValues is NULL", (char)v98);
        uint64_t v40 = 0;
        CFDataRef v113 = 0;
      }
      else
      {
        AMFDRErrorPushInternal(a10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"propertyTags is NULL", (char)v98);
        uint64_t v40 = 0;
        CFDataRef v113 = 0;
        v120 = 0;
      }
      uint64_t v39 = 0;
      a7 = 0;
      CFStringRef v13 = 0;
      goto LABEL_154;
    }
    AMFDRErrorPushInternal(a10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"propertyDataArray is NULL", (char)v98);
    uint64_t v40 = 0;
    CFDataRef v113 = 0;
    v120 = 0;
    uint64_t v39 = 0;
    a7 = 0;
    CFStringRef v13 = 0;
    CFAllocatorRef v10 = 0;
    CFIndex v73 = 0;
    CFDataRef v71 = 0;
    CFStringRef InstanceString = v114;
LABEL_149:
    CFDataRef v74 = v118;
    goto LABEL_113;
  }
  char v38 = 0;
  CFRange v115 = 0;
  v116 = 0;
  CFStringRef v13 = 0;
  CFMutableArrayRef Mutable = 0;
LABEL_38:
  CFStringRef InstanceString = v114;
LABEL_39:
  v120 = v38;
  if (!a8)
  {
    uint64_t v65 = 0;
    goto LABEL_72;
  }
  CFTypeID v41 = CFGetTypeID(a8);
  if (v41 != CFArrayGetTypeID() || !CFArrayGetCount((CFArrayRef)a8))
  {
    uint64_t v65 = 0;
    LODWORD(a8) = 0;
    goto LABEL_72;
  }
  long long v130 = 0u;
  long long v131 = 0u;
  long long context = 0u;
  uint64_t v127 = 0;
  v128 = 0;
  int v126 = 0;
  CFTypeID v42 = CFGetTypeID(a8);
  if (v42 != CFArrayGetTypeID())
  {
    AMFDRErrorPushInternal(v11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", @"subCCListWithDigest is malformed", (char)v98);
LABEL_164:
    AMFDREncodeMetadataDestroy(&v128);
LABEL_165:
    AMFDRErrorPushInternal(v11, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"subCC digest encoding failed for %@", v104);
    goto LABEL_110;
  }
  CFDataRef v108 = v28;
  uint64_t v43 = CFArrayGetCount((CFArrayRef)a8);
  if (!v43)
  {
    AMFDRErrorPushInternal(v11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", @"subCCListWithDigest contains no element", (char)v98);
LABEL_163:
    CFDataRef v28 = v108;
    goto LABEL_164;
  }
  CFAllocatorRef v44 = CFGetAllocator(v10);
  CFDictionaryRef v45 = (CFArrayRef *)AMFDRSysconfigCreateFromData(v44, a4, v11);
  if (!v45)
  {
    AMFDRErrorPushInternal(v11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", @"cannot create sysconfig from valueData", (char)v98);
    goto LABEL_163;
  }
  CFDictionaryRef v46 = v45;
  CFDictionaryRef v47 = (const __CFDictionary *)AMFDRSysconfigCopyValues(v45, v11);
  if (!v47)
  {
    AMFDRErrorPushInternal(v11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", @"cannot create copy values from sysconfig", (char)v98);
    CFDictionaryRef v95 = (const __CFDictionary *)v46;
LABEL_162:
    CFRelease(v95);
    goto LABEL_163;
  }
  CFDictionaryRef v48 = v47;
  int v49 = AMFDREncodeSubCCDigestsBegin(&v128);
  if (v49)
  {
    AMFDRErrorPushInternal(v11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", @"AMFDREncodeSubCCDigestsBegin failed 0x%X", v49);
    CFRelease(v46);
    CFDictionaryRef v95 = v48;
    goto LABEL_162;
  }
  CFTypeRef cf = v46;
  unsigned int v106 = v13;
  CFIndex v50 = 0;
  CFDataRef v51 = 0;
  CFDataRef v52 = 0;
  CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a8, v50);
    if (v51) {
      CFRelease(v51);
    }
    CFDataRef v51 = CFStringCreateExternalRepresentation(v53, ValueAtIndex, 0x8000100u, 0x5Fu);
    CFStringRef v55 = (const __CFString *)CFDictionaryGetValue(v48, ValueAtIndex);
    if (v55)
    {
      CFStringRef v56 = v55;
      if (v52) {
        CFRelease(v52);
      }
      CFTypeID v57 = CFGetTypeID(v56);
      if (v57 == CFStringGetTypeID())
      {
        CFDataRef v58 = CFStringCreateExternalRepresentation(v53, v56, 0x8000100u, 0x5Fu);
      }
      else
      {
        CFTypeID v59 = CFGetTypeID(v56);
        if (v59 != CFDataGetTypeID())
        {
          uint64_t v11 = a10;
          AMFDRErrorPushInternal(a10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", @"unknown data type for the subCC value", (char)v98);
          uint64_t v65 = 0;
          LODWORD(a8) = 0;
          CFDataRef v52 = 0;
          goto LABEL_66;
        }
        CFDataRef v58 = (const __CFData *)CFRetain(v56);
      }
      CFDataRef v52 = v58;
      CFDataGetBytePtr(v58);
      CFDataGetLength(v52);
      int v60 = AMSupportDigestSha384();
      if (v60)
      {
        char v99 = v60;
        CFStringRef format = @"AMSupportDigestSha384 failed 0x%X";
LABEL_93:
        uint64_t v11 = a10;
        AMFDRErrorPushInternal(a10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", format, v99);
        goto LABEL_94;
      }
      CFDataRef v61 = CFDataGetBytePtr(v51);
      int v62 = CFDataGetLength(v51);
      int v63 = AMFDREncodeSubCCDigestsAddData(&v128, (uint64_t)v61, v62, (uint64_t)&context, 48);
      if (v63)
      {
        char v99 = v63;
        CFStringRef format = @"AMFDREncodeSubCCDigestsAddData failed 0x%X";
        goto LABEL_93;
      }
    }
    else
    {
      AMSupportLogInternal();
    }
    ++v50;
  }
  while (v43 != v50);
  int v64 = AMFDREncodeSubCCDigestsEnd(&v128, &v127, &v126);
  uint64_t v11 = a10;
  if (!v64)
  {
    uint64_t v65 = v127;
    char v66 = 1;
    LODWORD(a8) = v126;
    goto LABEL_67;
  }
  AMFDRErrorPushInternal(a10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalCreateSubCCDigestObjP", @"AMFDREncodeSubCCDigestsEnd failed 0x%X", v64);
LABEL_94:
  uint64_t v65 = 0;
  LODWORD(a8) = 0;
LABEL_66:
  char v66 = 0;
LABEL_67:
  CFDataRef v28 = v108;
  CFRelease(cf);
  CFRelease(v48);
  if (v52) {
    CFRelease(v52);
  }
  if (v51) {
    CFRelease(v51);
  }
  AMFDREncodeMetadataDestroy(&v128);
  CFStringRef InstanceString = v114;
  CFStringRef v13 = v106;
  if ((v66 & 1) == 0) {
    goto LABEL_165;
  }
LABEL_72:
  LODWORD(context) = 0;
  if ((AMFDRDataGetSigningVersion((uint64_t)v10, (int *)&context) & 1) == 0)
  {
    AMSupportLogInternal();
LABEL_109:
    AMFDRErrorPushInternal(v11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"cannot get encode implementation", (char)v98);
LABEL_110:
    uint64_t v40 = 0;
    CFDataRef v113 = 0;
    CFIndex v73 = 0;
    CFDataRef v71 = 0;
    goto LABEL_111;
  }
  unsigned int v67 = _isLocalSign((uint64_t)v10);
  if (context != 2)
  {
    if (context == 1)
    {
      CFErrorRef v68 = &FDREncodeImplementationSha1;
      CFTypeID v69 = &FDREncodeImplementationLocalSignSha1;
      goto LABEL_77;
    }
    goto LABEL_109;
  }
  CFErrorRef v68 = &FDREncodeImplementationSha384;
  CFTypeID v69 = &FDREncodeImplementationLocalSignSha384;
LABEL_77:
  if (v67) {
    CFErrorRef v68 = v69;
  }
  CFDataRef cfa = v68;
  long long v107 = v13;
  CFDataRef v109 = v28;
  if (v112)
  {
    CFAllocatorRef v70 = CFGetAllocator(v10);
    CFDataRef v71 = (const __CFData *)CFStringCreateWithFormat(v70, 0, @"%@.offline", a3);
    if (v71)
    {
      CFIndex v73 = (const void *)AMFDROfflineBlobCreate(v10, v104, (uint64_t)a3, v11);
      CFDataRef v74 = v118;
      CFDataRef v113 = v71;
      if (v73)
      {
        if (AMFDRDataLocalPutWithOptions(v10, v104, (uint64_t)v71, (BOOL)v73, v72, v11))
        {
          CFDataRef v75 = (const __CFData *)AMFDRCryptoCopyRefKeyPub(v10);
          CFDataRef v71 = v75;
          if (v75)
          {
            unsigned __int8 v76 = CFDataGetBytePtr(v75);
            int v77 = CFDataGetLength(v71);
            CFStringRef v78 = (char *)CFDataGetBytePtr(v28);
            int v79 = CFDataGetLength(v28);
            CFDataRef v80 = CFDataGetBytePtr(v118);
            CFIndex v81 = CFDataGetLength(v118);
            CFArrayRef v82 = CFDataGetBytePtr(a4);
            BYTE4(value_8) = v105;
            LODWORD(value_8) = CFDataGetLength(a4);
            if (FDREncodeCreateOfflineSignedData((uint64_t)cfa, (uint64_t)v10, (uint64_t)v76, v77, v78, v79, (uint64_t)v80, v81, (uint64_t)v82, value_8, (uint64_t)v122, (uint64_t)&v124, (uint64_t)&v123))
            {
              AMFDRErrorPushInternal(a10, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"FDREncodeCreateOfflineSignedData failed", (char)v98);
              uint64_t v40 = 0;
              CFStringRef InstanceString = v114;
              a7 = v115;
              CFStringRef v13 = v107;
              CFDataRef v28 = v109;
              CFAllocatorRef v10 = (__CFString *)Mutable;
              CFDataRef v74 = v118;
              uint64_t v39 = v116;
              goto LABEL_113;
            }
            CFStringRef InstanceString = v114;
            CFDataRef v28 = v109;
            CFDataRef v74 = v118;
            uint64_t v83 = a10;
            goto LABEL_88;
          }
          AMFDRErrorPushInternal(v11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"refPubKey is NULL", (char)v98);
          uint64_t v40 = 0;
LABEL_145:
          a7 = v115;
          uint64_t v39 = v116;
          CFAllocatorRef v10 = (__CFString *)Mutable;
          goto LABEL_113;
        }
        CFStringRef v94 = @"put offline blob file failed";
      }
      else
      {
        CFStringRef v94 = @"refKeyBlob is NULL";
      }
      AMFDRErrorPushInternal(v11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", v94, (char)v98);
      uint64_t v40 = 0;
      CFDataRef v71 = 0;
      goto LABEL_145;
    }
    AMFDRErrorPushInternal(v11, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"offlineDataInstanceStr is NULL", (char)v98);
    uint64_t v40 = 0;
    CFDataRef v113 = 0;
    CFIndex v73 = 0;
LABEL_111:
    a7 = v115;
    uint64_t v39 = v116;
LABEL_112:
    CFAllocatorRef v10 = (__CFString *)Mutable;
    CFDataRef v74 = v118;
    goto LABEL_113;
  }
  CFTypeRef v84 = (char *)CFDataGetBytePtr(v28);
  int v85 = CFDataGetLength(v28);
  long long v86 = CFDataGetBytePtr(v118);
  CFIndex v87 = CFDataGetLength(v118);
  char v88 = CFDataGetBytePtr(a4);
  BYTE4(v97) = v105;
  LODWORD(v97) = CFDataGetLength(a4);
  LODWORD(value_8) = a8;
  if (FDREncodeCreateSignedData((uint64_t)cfa, (uint64_t)v10, v84, v85, (uint64_t)v86, v87, (uint64_t)BytePtr, Length, v65, value_8, (uint64_t)v88, v97, (uint64_t)v122, (uint64_t)&v124, (uint64_t)&v123))
  {
    AMFDRErrorPushInternal(a10, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"FDREncodeCreateSignedData failed", (char)v98);
    uint64_t v40 = 0;
    CFDataRef v113 = 0;
    CFIndex v73 = 0;
    CFDataRef v71 = 0;
    CFStringRef v13 = v107;
    CFDataRef v28 = v109;
    uint64_t v39 = v116;
    CFAllocatorRef v10 = (__CFString *)Mutable;
    CFDataRef v74 = v118;
    CFStringRef InstanceString = v114;
    a7 = v115;
    goto LABEL_113;
  }
  CFDataRef v113 = 0;
  CFIndex v73 = 0;
  CFDataRef v71 = 0;
  CFDataRef v28 = v109;
  CFDataRef v74 = v118;
  uint64_t v83 = a10;
  CFStringRef InstanceString = v114;
LABEL_88:
  CFAllocatorRef v89 = CFGetAllocator(v10);
  CFDataRef v90 = CFDataCreate(v89, v124, v123);
  *a9 = v90;
  CFAllocatorRef v10 = (__CFString *)Mutable;
  CFStringRef v13 = v107;
  if (v90)
  {
    uint64_t v40 = 1;
  }
  else
  {
    AMFDRErrorPushInternal(v83, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalSign", @"failed to create outSignedValueData", (char)v98);
    uint64_t v40 = 0;
  }
  a7 = v115;
  uint64_t v39 = v116;
LABEL_113:
  CFRelease(v28);
  CFRelease(v74);
  CFDataRef v28 = (CFDataRef)v111;
  if (v111) {
    goto LABEL_114;
  }
LABEL_115:
  if (InstanceString) {
    CFRelease(InstanceString);
  }
  if (v73) {
    CFRelease(v73);
  }
  if (v71) {
    CFRelease(v71);
  }
  CFDataRef v92 = v120;
  if (v113) {
    CFRelease(v113);
  }
LABEL_123:
  if (v124)
  {
    free(v124);
    v124 = 0;
  }
  if (v92) {
    free(v92);
  }
  if (v39) {
    free(v39);
  }
  if (a7) {
    free(a7);
  }
  if (v13) {
    free(v13);
  }
  if (v122)
  {
    free(v122);
    v122 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v40;
}

CFDictionaryRef _isLocalSign(uint64_t a1)
{
  if (a1)
  {
    CFDictionaryRef result = *(const __CFDictionary **)(a1 + 16);
    if (!result) {
      return result;
    }
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(result, @"LocalSigning");
    if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore && Value != 0)
    {
      CFBooleanRef v5 = Value;
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFBooleanGetTypeID()) {
        return (const __CFDictionary *)(CFBooleanGetValue(v5) != 0);
      }
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  return 0;
}

void _appendManifestProperties(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFDataRef v3 = *(unsigned char **)(a3 + 48);
  if (v3 && *v3)
  {
    CFTypeID v7 = *(const void **)a3;
    CFTypeID v6 = *(_DWORD **)(a3 + 8);
    CFTypeRef v8 = *(const UInt8 ***)(a3 + 16);
    CFAllocatorRef v10 = *(_DWORD **)(a3 + 32);
    CFAllocatorRef v9 = *(__CFArray **)(a3 + 40);
    uint64_t v28 = *(void *)(a3 + 56);
    uint64_t v29 = *(_DWORD **)(a3 + 24);
    *CFDataRef v3 = 0;
    if (a1 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a1)))
    {
      CFAllocatorRef v13 = CFGetAllocator(v7);
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v13, a1, 0x8000100u, 0x5Fu);
      if (ExternalRepresentation)
      {
        CFDataRef v15 = ExternalRepresentation;
        if (CFDataGetLength(ExternalRepresentation) == 4)
        {
          if (a2)
          {
            CFTypeID v16 = CFGetTypeID(a2);
            if (v16 == CFDataGetTypeID())
            {
              CFDataRef v17 = (const __CFData *)CFRetain(a2);
LABEL_15:
              CFDataRef v19 = v17;
              _DWORD *v10 = 0;
LABEL_16:
              if (v19)
              {
                CFArrayAppendValue(v9, v19);
                uint64_t BytePtr = (unsigned int *)CFDataGetBytePtr(v15);
                _DWORD *v6 = AMFDRTagsStringToTag(BytePtr);
                *CFTypeRef v8 = CFDataGetBytePtr(v19);
                _DWORD *v29 = CFDataGetLength(v19);
                uint64_t v23 = *(void *)(a3 + 16) + 8;
                *(void *)(a3 + 8) += 4;
                *(void *)(a3 + 16) = v23;
                *(int64x2_t *)(a3 + 24) = vaddq_s64(*(int64x2_t *)(a3 + 24), vdupq_n_s64(4uLL));
                *CFDataRef v3 = 1;
                CFRelease(v15);
                CFDataRef v24 = v19;
LABEL_21:
                CFRelease(v24);
                return;
              }
              CFStringRef v25 = @"keyValueData is NULL";
              goto LABEL_19;
            }
            CFTypeID v18 = CFGetTypeID(a2);
            if (v18 == CFNumberGetTypeID())
            {
              uint64_t valuePtr = 0;
              if (!CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt64Type, &valuePtr))
              {
                AMSupportLogInternal();
                goto LABEL_20;
              }
              CFDataRef v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)&valuePtr, 8);
              _DWORD *v10 = 1;
              goto LABEL_16;
            }
            CFTypeID v20 = CFGetTypeID(a2);
            if (v20 == CFStringGetTypeID())
            {
              CFAllocatorRef v21 = CFGetAllocator(v7);
              CFDataRef v17 = CFStringCreateExternalRepresentation(v21, a2, 0x8000100u, 0x5Fu);
              goto LABEL_15;
            }
          }
          CFStringRef v25 = @"Unexpected propertyValue type";
        }
        else
        {
          CFStringRef v25 = @"keyNameData length is not 4";
        }
LABEL_19:
        AMFDRErrorPushInternal(v28, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_appendManifestProperties", v25, v27);
LABEL_20:
        CFDataRef v24 = v15;
        goto LABEL_21;
      }
      CFStringRef v26 = @"keyNameData is NULL";
    }
    else
    {
      CFStringRef v26 = @"Unexpected propertyTag type";
    }
    AMFDRErrorPushInternal(v28, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_appendManifestProperties", v26, v27);
  }
}

BOOL AMFDRDataLocalPutWithOptions(void *a1, uint64_t a2, uint64_t a3, BOOL a4, int a5, uint64_t a6)
{
  if (!a1)
  {
    CFAllocatorRef v13 = @"amfdr is NULL";
LABEL_12:
    CFStringRef format = v13;
    *(_OWORD *)CFDataRef v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v14 = a6;
    CFIndex v15 = 1;
LABEL_16:
    AMFDRErrorPushInternal(v14, v15, 0, 0, 0, 0, 0, 0, value[0], value[1], v17[0], v17[1], (void *)v18, *((void **)&v18 + 1), (uint64_t)"AMFDRDataLocalPutWithOptions", format, v20);
    return 0;
  }
  if (!a2)
  {
    CFAllocatorRef v13 = @"dataClassStr is NULL";
    goto LABEL_12;
  }
  if (!a3)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutWithOptions", @"dataInstanceStr is NULL.", v20);
    return 0;
  }
  BOOL v7 = a4;
  if (!a4)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutWithOptions", @"valueData is NULL", v20);
    return v7;
  }
  uint64_t v9 = AMFDRDataLocalCopyDataStoragePath(a1, a2, a3, a6);
  if (!v9)
  {
    CFStringRef format = @"missing data storage path";
    *(_OWORD *)CFDataRef v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v14 = a6;
    CFIndex v15 = 4;
    goto LABEL_16;
  }
  CFAllocatorRef v10 = (const void *)v9;
  unsigned int v11 = AMFDRWriteDataToFileURL(a1, v7, v9, 1);
  BOOL v7 = v11 == 0;
  if (v11) {
    AMFDRErrorPushInternal(a6, v11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutWithOptions", @"failed to write data to %@", (char)v10);
  }
  CFRelease(v10);
  return v7;
}

CFTypeRef AMFDRDataLocalCreateDataWithManifests(const void *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, char a5, uint64_t a6)
{
  char v7 = a5;
  return AMFDRDataLocalCreateDataWithManifestsInternal(a1, a2, a3, a4, &v7, 0, a6);
}

CFTypeRef AMFDRDataLocalCreateDataWithManifestsInternal(const void *a1, CFDataRef theData, const __CFData *a3, const __CFData *a4, unsigned char *a5, CFTypeRef *a6, uint64_t a7)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  CFTypeRef v38 = 0;
  memset(v37, 0, sizeof(v37));
  uint64_t v36 = 0;
  int v35 = 0;
  *(void *)&v34[1] = 0;
  v34[0] = 0;
  unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v65 = v13;
  long long v66 = v13;
  long long v63 = v13;
  long long v64 = v13;
  long long v61 = v13;
  long long v62 = v13;
  long long v59 = v13;
  long long v60 = v13;
  long long v57 = v13;
  long long v58 = v13;
  long long v55 = v13;
  long long v56 = v13;
  long long v53 = v13;
  long long v54 = v13;
  long long v51 = v13;
  long long v52 = v13;
  long long v49 = v13;
  long long v50 = v13;
  long long v47 = v13;
  long long v48 = v13;
  long long v45 = v13;
  long long v46 = v13;
  long long v43 = v13;
  long long v44 = v13;
  long long v41 = v13;
  long long v42 = v13;
  long long v39 = v13;
  long long v40 = v13;
  if (a5)
  {
    BOOL v14 = *a5 != 0;
    uint64_t BytePtr = CFDataGetBytePtr(theData);
    *(void *)&v34[1] = BytePtr;
    int v16 = CFDataGetLength(theData);
    v34[0] = v16;
    if (!v14) {
      goto LABEL_16;
    }
  }
  else
  {
    CFDataRef v17 = CFDataGetBytePtr(theData);
    unsigned int v18 = CFDataGetLength(theData);
    BOOL v19 = AMFDRDecodeCombined((uint64_t)v17, v18, &v36, &v35, &v34[1], v34) == 0;
    uint64_t BytePtr = *(const UInt8 **)&v34[1];
    int v16 = v34[0];
    if (!v19)
    {
LABEL_16:
      CFDataRef v27 = (const __CFData *)CFRetain(theData);
      goto LABEL_19;
    }
  }
  if (!BytePtr || !v16) {
    goto LABEL_16;
  }
  if (!a6)
  {
    if (a3) {
      goto LABEL_12;
    }
LABEL_18:
    CFAllocatorRef v28 = CFGetAllocator(a1);
    CFDataRef v27 = CFDataCreate(v28, *(const UInt8 **)&v34[1], v34[0]);
    if (v27) {
      goto LABEL_19;
    }
    CFStringRef v31 = @"failed to extract img4 data";
LABEL_32:
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateDataWithManifestsInternal", v31, v32);
    goto LABEL_24;
  }
  *(void *)&length[1] = 0;
  length[0] = 0;
  if (AMFDRDecodeGetImg4Manifest((uint64_t)BytePtr, v16, &length[1], length) || !*(void *)&length[1])
  {
    AMFDRErrorPushInternal(a7, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateDataWithManifestsInternal", @"failed to parse manifest from combined format", v32);
    goto LABEL_24;
  }
  CFAllocatorRef v20 = CFGetAllocator(a1);
  CFDataRef v21 = CFDataCreate(v20, *(const UInt8 **)&length[1], length[0]);
  if (!v21)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateDataWithManifestsInternal", @"failed to allocate reStitchedManifest", v32);
    goto LABEL_24;
  }
  *a6 = CFRetain(v21);
  if (!a3) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v22 = *(void *)&v34[1];
  uint64_t v23 = v34[0];
  CFDataRef v24 = CFDataGetBytePtr(a3);
  CFIndex v25 = CFDataGetLength(a3);
  if (FDREncodeReStitchManifest(v22, v23, (uint64_t)v24, v25, &v37[1], v37) || !*(void *)&v37[1])
  {
    AMFDRErrorPushInternal(a7, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateDataWithManifestsInternal", @"failed to restitch device manifest", v32);
    goto LABEL_24;
  }
  CFAllocatorRef v26 = CFGetAllocator(a1);
  CFDataRef v27 = CFDataCreateWithBytesNoCopy(v26, *(const UInt8 **)&v37[1], v37[0], (CFAllocatorRef)*MEMORY[0x263EFFB18]);
  if (!v27)
  {
    CFStringRef v31 = @"img4Data is NULL";
    goto LABEL_32;
  }
  *(void *)&v37[1] = 0;
LABEL_19:
  CFDataGetBytePtr(v27);
  CFDataGetLength(v27);
  int v29 = Img4DecodeInit();
  if (!a4 || v29)
  {
    CFTypeRef v38 = CFRetain(v27);
  }
  else if ((AMFDRDataCreateFDR2Data((uint64_t)a1, v27, a4, (uint64_t)&v38, a7) & 1) == 0)
  {
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateDataWithManifestsInternal", @"Failed to create FDR2 data", v32);
  }
LABEL_24:
  AMSupportSafeRelease();
  if (*(void *)&v37[1])
  {
    free(*(void **)&v37[1]);
    *(void *)&v37[1] = 0;
  }
  AMSupportSafeRelease();
  return v38;
}

CFStringRef AMFDRDataLocalPatchCreatePayloadAndDigest(const void *a1, const __CFString *a2, const __CFData *a3, CFTypeRef *a4, CFTypeRef *a5, uint64_t a6)
{
  memset(v36, 0, sizeof(v36));
  *(void *)&length[1] = 0;
  length[0] = 0;
  if (!a1)
  {
    CFStringRef v31 = @"amfdr is NULL";
LABEL_31:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", v31, v34);
LABEL_40:
    CFStringRef v7 = 0;
    goto LABEL_23;
  }
  CFStringRef v7 = a2;
  if (!a2)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", @"dataClass is NULL", v34);
    goto LABEL_23;
  }
  if (!a3)
  {
    CFStringRef v31 = @"rawData is NULL";
    goto LABEL_31;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v12, v7, 0x8000100u, 0x20u);
  CFStringRef v7 = (const __CFString *)ExternalRepresentation;
  if (!ExternalRepresentation)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", @"dataClassData is NULL", v34);
    goto LABEL_23;
  }
  if (CFDataGetLength(ExternalRepresentation) != 4)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", @"dataClass length is invalid", v34);
LABEL_39:
    CFRelease(v7);
    goto LABEL_40;
  }
  uint64_t BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)v7);
  int v15 = CFDataGetLength((CFDataRef)v7);
  int v16 = CFDataGetBytePtr(a3);
  CFIndex v17 = CFDataGetLength(a3);
  unsigned int PayloadAndDigest = AMFDREncodeCreatePayloadAndDigest((uint64_t)&FDREncodeImplementationSha384, BytePtr, v15, (uint64_t)v16, v17, (void **)&v36[1], v36, &length[1], length);
  if (PayloadAndDigest)
  {
    AMFDRErrorPushInternal(a6, PayloadAndDigest, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", @"failed to create payload digest", v34);
    goto LABEL_39;
  }
  if (!*(void *)&v36[1] || !v36[0])
  {
    CFStringRef v32 = @"payload is invalid";
LABEL_37:
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", v32, v34);
    goto LABEL_39;
  }
  if (!*(void *)&length[1] || !length[0])
  {
    CFStringRef v32 = @"digest is invalid";
    goto LABEL_37;
  }
  CFAllocatorRef v19 = CFGetAllocator(a1);
  CFDataRef v20 = CFDataCreateWithBytesNoCopy(v19, *(const UInt8 **)&length[1], length[0], (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (!v20)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", @"digestData is NULL", v34);
    goto LABEL_39;
  }
  CFDataRef v21 = v20;
  CFGetAllocator(a1);
  CFStringRef v22 = (const __CFString *)AMSupportCopyHexStringFromData();
  if (v22)
  {
    CFAllocatorRef v23 = CFGetAllocator(a1);
    uint64_t MutableCopy = CFStringCreateMutableCopy(v23, 0, v22);
    CFIndex v25 = MutableCopy;
    if (MutableCopy)
    {
      CFStringLowercase(MutableCopy, 0);
      CFAllocatorRef v26 = CFGetAllocator(a1);
      CFDataRef v27 = CFDataCreateWithBytesNoCopy(v26, *(const UInt8 **)&v36[1], v36[0], (CFAllocatorRef)*MEMORY[0x263EFFB18]);
      if (v27)
      {
        CFDataRef v28 = v27;
        *(void *)&v36[1] = 0;
        if (a4) {
          *a4 = CFRetain(v27);
        }
        if (a5) {
          *a5 = CFRetain(v25);
        }
        CFRelease(v7);
        CFRelease(v28);
        CFRelease(v21);
        uint64_t v29 = 1;
        goto LABEL_20;
      }
      CFStringRef v33 = @"payloadData is NULL";
    }
    else
    {
      CFStringRef v33 = @"lowercaseDigest is NULL";
    }
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", v33, v34);
  }
  else
  {
    AMFDRErrorPushInternal(a6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreatePayloadAndDigest", @"failed to convert digest string", v34);
    CFIndex v25 = 0;
  }
  CFRelease(v7);
  CFRelease(v21);
  uint64_t v29 = 0;
  CFStringRef v7 = 0;
  if (v22)
  {
LABEL_20:
    CFRelease(v22);
    CFStringRef v7 = (const __CFString *)v29;
  }
  if (v25) {
    CFRelease(v25);
  }
LABEL_23:
  if (*(void *)&v36[1])
  {
    free(*(void **)&v36[1]);
    *(void *)&v36[1] = 0;
  }
  if (*(void *)&length[1]) {
    free(*(void **)&length[1]);
  }
  return v7;
}

uint64_t AMFDRDataLocalPatchCreateSignedData(int a1, const __CFData *a2, CFDataRef theData, uint64_t a4)
{
  if (!a2)
  {
    CFStringRef v10 = @"payloadData is NULL";
LABEL_8:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreateSignedData", v10, v12);
    return 0;
  }
  if (!theData)
  {
    CFStringRef v10 = @"manifestData is NULL";
    goto LABEL_8;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  int inited = Img4DecodeInitManifest();
  if (inited)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreateSignedData", @"failed to decode manifest: %d", inited);
  }
  else
  {
    CFDataGetBytePtr(a2);
    CFDataGetLength(a2);
    CFDataGetBytePtr(theData);
    CFDataGetLength(theData);
    int v8 = Img4EncodeStitchManifest();
    if (v8 == 100)
    {
      CFStringRef v11 = @"img4 data is NULL";
    }
    else
    {
      char v12 = v8;
      CFStringRef v11 = @"failed to create img4 data: %d";
    }
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatchCreateSignedData", v11, v12);
  }
  return 0;
}

CFDataRef AMFDRDataLocalCreateMultiCombinedData(const __CFArray *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFData *a5, const __CFData *a6, uint64_t a7)
{
  long long v59 = 0;
  v60[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  int v58 = 0;
  long long v57 = 0;
  int v56 = 0;
  long long v55 = 0;
  unsigned int v54 = 0;
  if (!a1)
  {
    CFStringRef format = @"dataClasses is NULL";
LABEL_63:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateMultiCombinedData", format, v44);
LABEL_64:
    CFDataRef v41 = 0;
    CFDataRef v18 = 0;
    CFDataRef v17 = 0;
    CFDataRef cf = 0;
    goto LABEL_41;
  }
  CFArrayRef v8 = a2;
  if (!a2)
  {
    CFStringRef format = @"dataInstances is NULL";
    goto LABEL_63;
  }
  if (!a3)
  {
    CFStringRef format = @"subCCs is NULL";
    goto LABEL_63;
  }
  if (!a4)
  {
    CFStringRef format = @"dataBlobs is NULL";
    goto LABEL_63;
  }
  CFArrayRef v11 = a1;
  if (CFArrayGetCount(a1) <= 0)
  {
    CFStringRef format = @"at least one data should be specified";
    goto LABEL_63;
  }
  CFIndex Count = CFArrayGetCount(v11);
  if (Count != CFArrayGetCount(v8))
  {
    CFStringRef format = @"dataInstances length does not match dataClasses";
    goto LABEL_63;
  }
  CFIndex v13 = CFArrayGetCount(v11);
  if (v13 != CFArrayGetCount(a3))
  {
    CFStringRef format = @"subCCs length does not match dataClasses";
    goto LABEL_63;
  }
  CFIndex v14 = CFArrayGetCount(v11);
  if (v14 != CFArrayGetCount(a4))
  {
    CFStringRef format = @"dataBlobs length does not match dataClasses";
    goto LABEL_63;
  }
  int v15 = AMFDREncodeMultiCombinedDataPayloadBegin(v60);
  if (v15)
  {
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateMultiCombinedData", @"AMFDREncodeMultiCombinedDataPayloadBegin failed 0x%X", v15);
    goto LABEL_64;
  }
  CFDataRef theData = a5;
  CFDataRef v47 = a6;
  uint64_t v45 = a7;
  if (CFArrayGetCount(v11) >= 1)
  {
    CFIndex v16 = 0;
    CFDataRef v17 = 0;
    CFDataRef v18 = 0;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDataRef cf = 0;
    CFArrayRef v48 = v11;
    CFArrayRef v49 = v8;
    while (1)
    {
      if (v18) {
        CFRelease(v18);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (cf) {
        CFRelease(cf);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, v16);
      CFDataRef v20 = (const __CFData *)CFArrayGetValueAtIndex(a4, v16);
      CFStringRef v21 = (const __CFString *)CFArrayGetValueAtIndex(v8, v16);
      CFStringRef v22 = (const __CFString *)CFArrayGetValueAtIndex(a3, v16);
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(alloc, ValueAtIndex, 0x8000100u, 0x5Fu);
      if (v21 && CFStringCompare(v21, &stru_26C899958, 0))
      {
        CFDataRef v24 = CFStringCreateExternalRepresentation(alloc, v21, 0x8000100u, 0x5Fu);
        if (!v22) {
          goto LABEL_25;
        }
      }
      else
      {
        CFDataRef v24 = 0;
        if (!v22) {
          goto LABEL_25;
        }
      }
      if (CFStringCompare(v22, &stru_26C899958, 0))
      {
        CFDataRef cf = CFStringCreateExternalRepresentation(alloc, v22, 0x8000100u, 0x5Fu);
        goto LABEL_26;
      }
LABEL_25:
      CFDataRef cf = 0;
LABEL_26:
      uint64_t BytePtr = CFDataGetBytePtr(ExternalRepresentation);
      CFDataRef v26 = ExternalRepresentation;
      int Length = CFDataGetLength(ExternalRepresentation);
      CFDataRef v28 = CFDataGetBytePtr(v20);
      int v29 = CFDataGetLength(v20);
      if (v24)
      {
        CFAllocatorRef v30 = CFDataGetBytePtr(v24);
        CFDataRef v17 = v24;
        LODWORD(v24) = CFDataGetLength(v24);
      }
      else
      {
        CFDataRef v17 = 0;
        CFAllocatorRef v30 = 0;
      }
      CFStringRef v31 = (const UInt8 *)cf;
      if (cf)
      {
        CFStringRef v31 = CFDataGetBytePtr(cf);
        int v32 = CFDataGetLength(cf);
      }
      else
      {
        int v32 = 0;
      }
      int v33 = AMFDREncodeMultiCombinedDataPayloadAddData(v60, (uint64_t)BytePtr, Length, (uint64_t)v28, v29, (uint64_t)v30, (int)v24, (uint64_t)v31, v32);
      if (v33)
      {
        AMFDRErrorPushInternal(v45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateMultiCombinedData", @"AMFDREncodeMultiCombinedDataPayloadAddData failed 0x%X", v33);
        CFDataRef v41 = 0;
        CFDataRef v18 = v26;
        goto LABEL_41;
      }
      ++v16;
      CFArrayRef v11 = v48;
      CFDataRef v18 = v26;
      CFArrayRef v8 = v49;
      if (v16 >= CFArrayGetCount(v48)) {
        goto LABEL_36;
      }
    }
  }
  CFDataRef v18 = 0;
  CFDataRef v17 = 0;
  CFDataRef cf = 0;
LABEL_36:
  int v34 = AMFDREncodeMultiCombinedDataPayloadEnd(v60, &v59, &v58);
  if (v34)
  {
    AMFDRErrorPushInternal(v45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateMultiCombinedData", @"AMFDREncodeMultiCombinedDataPayloadEnd failed 0x%X", v34);
LABEL_68:
    CFDataRef v41 = 0;
    goto LABEL_41;
  }
  int v35 = Img4EncodeStitchManifest();
  if (v35 != 100)
  {
    AMFDRErrorPushInternal(v45, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateMultiCombinedData", @"Img4EncodeStitchManifest failed 0x%X", v35);
    goto LABEL_68;
  }
  uint64_t v36 = (UInt8 *)CFDataGetBytePtr(theData);
  unsigned int v37 = CFDataGetLength(theData);
  CFTypeRef v38 = CFDataGetBytePtr(v47);
  unsigned int v39 = CFDataGetLength(v47);
  int v40 = FDREncodeCreateCombinedFast((uint64_t)v57, v56, v36, v37, v38, v39, (char **)&v55, &v54);
  if (v40)
  {
    AMFDRErrorPushInternal(v45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateMultiCombinedData", @"AMFDREncodeMultiRequestEnd failed 0x%X", v40);
    CFDataRef v41 = 0;
  }
  else
  {
    CFDataRef v41 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v55, v54);
    if (!v41) {
      AMFDRErrorPushInternal(v45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCreateMultiCombinedData", @"outData is NULL", v44);
    }
  }
LABEL_41:
  if (v59)
  {
    free(v59);
    long long v59 = 0;
  }
  if (v57)
  {
    free(v57);
    long long v57 = 0;
  }
  if (v55)
  {
    free(v55);
    long long v55 = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
  AMFDREncodeMetadataDestroy(v60);
  return v41;
}

CFDataRef AMFDRDataLocalCopyDigest(const __CFData *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFDataRef v5 = a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(bytes, 170, sizeof(bytes));
  if (!a1)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDigest", @"amfdr is NULL", v18);
    return v5;
  }
  if (!a2)
  {
    CFStringRef v17 = @"dataClassStr is NULL";
    *(_OWORD *)int v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v11 = a4;
    CFIndex v12 = 1;
LABEL_13:
    AMFDRErrorPushInternal(v11, v12, 0, 0, 0, 0, 0, 0, value[0], value[1], v15[0], v15[1], (void *)v16, *((void **)&v16 + 1), (uint64_t)"AMFDRDataLocalCopyDigest", v17, v18);
    return 0;
  }
  if (!a3)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDigest", @"dataInstanceStr is NULL.", v18);
    return 0;
  }
  CFDataRef v6 = (const __CFData *)AMFDRDataLocalPopulate(a1, a2, a3, 0, a4);
  if (!v6)
  {
    CFStringRef v17 = @"Failed to read data";
    *(_OWORD *)int v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v11 = a4;
    CFIndex v12 = 4;
    goto LABEL_13;
  }
  CFDataRef v7 = v6;
  uint64_t BytePtr = CFDataGetBytePtr(v6);
  CFDataGetLength(v7);
  if (!AMFDRDigestMd5((uint64_t)BytePtr))
  {
    CFStringRef v13 = @"Failed to compute md5";
LABEL_17:
    AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyDigest", v13, v18);
    CFDataRef v5 = 0;
    goto LABEL_7;
  }
  CFAllocatorRef v9 = CFGetAllocator(v5);
  CFDataRef v5 = CFDataCreate(v9, bytes, 16);
  if (!v5)
  {
    CFStringRef v13 = @"CFDataCreate failed to create md5 data";
    goto LABEL_17;
  }
LABEL_7:
  CFRelease(v7);
  return v5;
}

BOOL AMFDRDataLocalPresent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v17 = 0;
  if (!a1)
  {
    CFAllocatorRef v9 = @"amfdr is NULL";
LABEL_11:
    CFStringRef v15 = v9;
    *(_OWORD *)CFStringRef v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v10 = a4;
    CFIndex v11 = 1;
LABEL_14:
    AMFDRErrorPushInternal(v10, v11, 0, 0, 0, 0, 0, 0, value[0], value[1], v13[0], v13[1], (void *)v14, *((void **)&v14 + 1), (uint64_t)"AMFDRDataLocalPresent", v15, v16);
    goto LABEL_15;
  }
  if (!a2)
  {
    CFAllocatorRef v9 = @"dataClassStr is NULL";
    goto LABEL_11;
  }
  if (!a3)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPresent", @"dataInstanceStr is NULL.", v16);
LABEL_15:
    int v7 = 0;
    return v7 != 0;
  }
  uint64_t v5 = AMFDRDataLocalCopyDataStoragePath(a1, a2, a3, a4);
  if (!v5)
  {
    CFStringRef v15 = @"missing data storage path";
    *(_OWORD *)CFStringRef v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v10 = a4;
    CFIndex v11 = 4;
    goto LABEL_14;
  }
  CFDataRef v6 = (const void *)v5;
  if (MEMORY[0x21D45A5F0](v5, &v17))
  {
    AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPresent", @"Failed to read data", v16);
    int v7 = 0;
  }
  else
  {
    int v7 = v17;
  }
  CFRelease(v6);
  return v7 != 0;
}

uint64_t AMFDRDataLocalCopy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v9 = @"amfdr is NULL";
LABEL_10:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopy", v9, v11);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v9 = @"dataClassStr is NULL";
    goto LABEL_10;
  }
  if (a3)
  {
    uint64_t v6 = AMFDRDataLocalCopyDataStoragePath(a1, a2, a3, a4);
    if (v6)
    {
      int v7 = (const void *)v6;
      CFGetAllocator(a1);
      if (AMSupportCreateDataFromFileURL())
      {
        CFStringRef v10 = @"Failed to read data";
      }
      else
      {
        char v11 = (char)v7;
        CFStringRef v10 = @"Failed to read data from %@";
      }
      AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopy", v10, v11);
      CFRelease(v7);
    }
    else
    {
      AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopy", @"missing data storage path", v11);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopy", @"dataInstanceStr is NULL.", v11);
  }
  return 0;
}

BOOL AMFDRDataLocalDelete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDelete", @"amfdr is NULL", v20);
    return 0;
  }
  BOOL v5 = a2;
  if (a2)
  {
    if (a3)
    {
      uint64_t v8 = AMFDRDataLocalCopyDataStoragePath((void *)a1, a2, a3, a4);
      if (v8)
      {
        CFStringRef v9 = (const __CFString *)v8;
        if (AMSupportRemoveFile())
        {
          AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDelete", @"failed to delete data at %@", (char)v9);
        }
        else
        {
          if ((AMFDRDataLocalDeleteExtraManifest((void *)a1, 1, v5, a3, (uint64_t)&cf) & 1) == 0) {
            AMSupportLogInternal();
          }
          if ((AMFDRDataLocalDeleteExtraManifest((void *)a1, 0, v5, a3, (uint64_t)&cf) & 1) == 0) {
            AMSupportLogInternal();
          }
          CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"kAMFDROptionOfflineSigning");
          if (!Value || (CFBooleanRef v11 = Value, v12 = CFGetTypeID(Value), v12 != CFBooleanGetTypeID()) || !CFBooleanGetValue(v11))
          {
            BOOL v5 = 1;
LABEL_20:
            CFStringRef v18 = v9;
LABEL_21:
            CFRelease(v18);
            goto LABEL_22;
          }
          CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a1);
          CFStringRef v14 = CFStringCreateWithFormat(v13, 0, @"%@.offline", a3);
          if (v14)
          {
            CFStringRef v15 = v14;
            char v16 = (const void *)AMFDRDataLocalCopyDataStoragePath((void *)a1, v5, (uint64_t)v14, a4);
            int v17 = AMSupportRemoveFile();
            BOOL v5 = v17 == 0;
            if (v17) {
              AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDelete", @"failed to delete data at %@", (char)v9);
            }
            CFRelease(v9);
            if (v16) {
              CFRelease(v16);
            }
            CFStringRef v18 = v15;
            goto LABEL_21;
          }
          AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDelete", @"offlineDataInstanceStr is NULL", v20);
        }
        BOOL v5 = 0;
        goto LABEL_20;
      }
      AMFDRErrorPushInternal(a4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDelete", @"missing data storage path", v20);
    }
    else
    {
      AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDelete", @"dataInstanceStr is NULL.", v20);
    }
    BOOL v5 = 0;
  }
  else
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDelete", @"dataClassStr is NULL", v20);
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t AMFDRDataLocalPrefetch(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPrefetch", @"AMFDRDataLocalPrefetch is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataLocalExport(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalExport", @"AMFDRDataLocalExport is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataLocalCopyTrustObject(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v13 = @"amfdr is NULL";
LABEL_16:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyTrustObject", v13, v14);
    return 0;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)a1[2];
  if (!v6)
  {
    CFStringRef v13 = @"amfdr->optionsDict is NULL";
    goto LABEL_16;
  }
  if (!CFDictionaryGetValue(v6, @"TrustObjectDigest"))
  {
    CFStringRef v9 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = AMSupportCopyHexStringFromData();
  if (!v8)
  {
    AMFDRErrorPushInternal(a4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyTrustObject", @"Failed to convert trust object digest to hex", v14);
    return 0;
  }
  CFStringRef v9 = (const void *)v8;
  uint64_t v10 = AMFDRDataLocalCopy(a1, @"trustobject", v8, a4);
  if (v10) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v10 = AMFDRDataLocalCopy(a1, @"trustobject", @"current", a4);
  if (v10)
  {
LABEL_9:
    *a3 = v10;
    uint64_t v11 = 1;
    if (!v9) {
      return v11;
    }
    goto LABEL_12;
  }
  uint64_t v11 = 0;
  if (v9) {
LABEL_12:
  }
    CFRelease(v9);
  return v11;
}

BOOL AMFDRDataLocalPutTrustObject(void *a1, CFDataRef theData, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)bytes = v4;
  long long v17 = v4;
  if (!a1)
  {
    CFStringRef v15 = @"amfdr is NULL";
LABEL_10:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutTrustObject", v15, bytes[0]);
    return 0;
  }
  if (!theData)
  {
    CFStringRef v15 = @"valueData is NULL";
    goto LABEL_10;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  if (AMSupportDigestSha256())
  {
    AMFDRErrorPushInternal(a3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutTrustObject", @"Failed to get digest of trustobject", bytes[0]);
    return 0;
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFDataRef v8 = CFDataCreateWithBytesNoCopy(v7, bytes, 32, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (!v8)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutTrustObject", @"Failed to create trustobjectDigestData", bytes[0]);
    return 0;
  }
  CFDataRef v9 = v8;
  uint64_t v10 = AMSupportCopyHexStringFromData();
  if (!v10)
  {
    AMFDRErrorPushInternal(a3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutTrustObject", @"Failed to convert trust object digest to hex", bytes[0]);
    CFRelease(v9);
    return 0;
  }
  CFTypeID v12 = (const void *)v10;
  BOOL v13 = AMFDRDataLocalPutWithOptions(a1, @"trustobject", v10, (BOOL)theData, v11, a3);
  CFRelease(v9);
  CFRelease(v12);
  return v13;
}

uint64_t AMFDRDataLocalIterate(void *a1, unsigned int (*a2)(const __CFString *, CFTypeRef, CFDataRef, CFTypeRef, uint64_t), uint64_t a3, uint64_t a4)
{
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  CFStringRef v24 = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalIterate", @"amfdr is NULL", v19);
    uint64_t v17 = 0;
    goto LABEL_28;
  }
  CFTypeRef v8 = AMFDRDataLocalCopyDataDirectoryPath(a1, a3);
  CFTypeRef v9 = v8;
  if (!v8)
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalIterate", @"Could not determine data directory URL", v19);
LABEL_34:
    uint64_t v17 = 0;
    goto LABEL_28;
  }
  char v22 = 0;
  if (MEMORY[0x21D45A5F0](v8, &v22))
  {
    AMFDRErrorPushInternal(a3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalIterate", @"Could not determine if data directory %@ exists", (char)v9);
    goto LABEL_34;
  }
  if (v22)
  {
    CFAllocatorRef v10 = CFGetAllocator(a1);
    uint64_t v11 = MEMORY[0x21D45AE10](v10, v9, 0, 0);
    if (v11)
    {
      uint64_t v20 = a3;
      while (1)
      {
        while (1)
        {
          CFURLRef url = 0;
          uint64_t v12 = MEMORY[0x21D45AE20](v11, &url, &v26);
          if (v12 == 2)
          {
LABEL_26:
            uint64_t v17 = 1;
            goto LABEL_28;
          }
          if (v12 == 3)
          {
            AMFDRErrorPushInternal(v20, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalIterate", @"Failed to enumerate path: %@", (char)v26);
            uint64_t v17 = 0;
            goto LABEL_28;
          }
          CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
          if (!PathComponent)
          {
            AMFDRErrorPushInternal(v20, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalIterate", @"Could not get filename of URL '%@'", (char)url);
            uint64_t v17 = 0;
            goto LABEL_28;
          }
          CFAllocatorRef v14 = CFGetAllocator(a1);
          CFIndex v15 = CFStringHasPrefix(PathComponent, @"minimal-manifest") ? 2 : 1;
          if (AMFDRDataLocalDecomposeFullKeyInternal(v14, v15, PathComponent, (CFTypeRef *)&v24, &cf)) {
            break;
          }
          AMSupportLogInternal();
          CFRelease(PathComponent);
        }
        CFDataRef v16 = AMFDRDataCopy((uint64_t)a1, v24, (const __CFString *)cf, (uint64_t)&v25);
        if (!v16) {
          break;
        }
        if (!a2(v24, cf, v16, v25, a4)) {
          goto LABEL_26;
        }
        if (v26)
        {
          CFRelease(v26);
          CFTypeRef v26 = 0;
        }
        CFRelease(PathComponent);
        if (v24)
        {
          CFRelease(v24);
          CFStringRef v24 = 0;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        CFRelease(v16);
        if (v25)
        {
          CFRelease(v25);
          CFTypeRef v25 = 0;
        }
      }
      AMSupportLogInternal();
      uint64_t v17 = 0;
    }
    else
    {
      AMFDRErrorPushInternal(a3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalIterate", @"Could not create directory enumerator at '%@'", (char)v9);
      uint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v17 = 1;
  }
LABEL_28:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v17;
}

uint64_t AMFDRDataLocalMake(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMake", @"AMFDRDataLocalMake is not implemented", vars0);
  return 0;
}

CFTypeRef AMFDRDataLocalMultiCopy(void *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataLocalMultiCopyInternal(a1, a2, a3, 0, 0, a4);
}

uint64_t AMFDRDataLocalMultiPutWithOptions(void *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v25 = @"amfdr is NULL";
LABEL_43:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", v25, v26);
    return 0;
  }
  if (!theArray)
  {
    CFStringRef v25 = @"dataClassArray is NULL";
    goto LABEL_43;
  }
  if (!a3)
  {
    CFStringRef v25 = @"dataInstanceArray is NULL";
    goto LABEL_43;
  }
  if (!a4)
  {
    CFStringRef v25 = @"valueDataArray is NULL";
    goto LABEL_43;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v25 = @"Invalid dataClassArray count";
    goto LABEL_43;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v25 = @"Invalid dataInstanceArray count";
    goto LABEL_43;
  }
  if (CFArrayGetCount(a4) != v11)
  {
    CFStringRef v25 = @"Invalid dataValueArray count";
    goto LABEL_43;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFDictionaryRef theDict = CFDictionaryCreateMutable(v12, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", @"multiRequestErrors is NULL", v26);
    return 0;
  }
  CFIndex v13 = 0;
  CFStringRef v14 = 0;
  while (1)
  {
    if (v14) {
      CFRelease(v14);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
    if (!ValueAtIndex)
    {
      CFStringRef format = @"dataClassStr is NULL";
LABEL_31:
      AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", format, v26);
      goto LABEL_33;
    }
    uint64_t v16 = (uint64_t)ValueAtIndex;
    uint64_t v17 = (uint64_t)CFArrayGetValueAtIndex(a3, v13);
    if (!v17)
    {
      AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", @"dataInstanceStr is NULL", v26);
      goto LABEL_25;
    }
    uint64_t v18 = CFArrayGetValueAtIndex(a4, v13);
    if (!v18)
    {
      CFStringRef format = @"valueData is NULL";
      goto LABEL_31;
    }
    BOOL v19 = (BOOL)v18;
    CFAllocatorRef v20 = CFGetAllocator(a1);
    CFStringRef v21 = CFStringCreateWithFormat(v20, 0, @"%@-%@", v16, v17);
    if (!v21) {
      break;
    }
    CFStringRef v14 = v21;
    if (!AMFDRDataLocalPutWithOptions(a1, v16, v17, v19, v22, a6))
    {
      AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", @"AMFDRDataLocalPut failed", v26);
      if (!cf)
      {
        AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", @"internalError is NULL", v26);
        goto LABEL_35;
      }
      CFDictionaryAddValue(theDict, v14, cf);
    }
    if (v11 == ++v13)
    {
      if (!CFDictionaryGetCount(theDict))
      {
        uint64_t v17 = 1;
LABEL_24:
        CFRelease(v14);
        goto LABEL_25;
      }
      AMFDRErrorPushInternal(a6, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", @"got multiRequestErrors", v26);
LABEL_35:
      uint64_t v17 = 0;
      goto LABEL_24;
    }
  }
  AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPutWithOptions", @"currDataInstance is NULL", v26);
LABEL_33:
  uint64_t v17 = 0;
LABEL_25:
  CFRelease(theDict);
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t AMFDRDataLocalMultiDelete(const void *a1, CFArrayRef theArray, const __CFArray *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v24 = @"amfdr is NULL";
LABEL_37:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiDelete", v24, (char)theDict);
    return 0;
  }
  if (!theArray)
  {
    CFStringRef v24 = @"dataClassStr is NULL";
    goto LABEL_37;
  }
  if (!a3)
  {
    CFStringRef v24 = @"dataInstanceStr is NULL";
    goto LABEL_37;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v24 = @"Invalid dataClassArray count";
    goto LABEL_37;
  }
  CFIndex v9 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v24 = @"Invalid dataInstanceArray count";
    goto LABEL_37;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v10, v9, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiDelete", @"multiRequestErrors is NULL", 0);
    return 0;
  }
  CFIndex v11 = 0;
  CFStringRef v12 = 0;
  while (1)
  {
    if (v12) {
      CFRelease(v12);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v11);
    if (!ValueAtIndex)
    {
      CFStringRef v21 = @"dataClassStr is NULL";
LABEL_27:
      AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiDelete", v21, (char)theDict);
      goto LABEL_29;
    }
    uint64_t v14 = (uint64_t)ValueAtIndex;
    CFIndex v15 = CFArrayGetValueAtIndex(a3, v11);
    if (!v15)
    {
      CFStringRef v21 = @"dataInstanceStr is NULL";
      goto LABEL_27;
    }
    uint64_t v16 = (uint64_t)v15;
    CFAllocatorRef v17 = CFGetAllocator(a1);
    CFStringRef v18 = CFStringCreateWithFormat(v17, 0, @"%@-%@", v14, v16);
    if (!v18) {
      break;
    }
    CFStringRef v12 = v18;
    if (!AMFDRDataLocalDelete((uint64_t)a1, v14, v16, a4))
    {
      AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiDelete", @"AMFDRDataLocalDelete failed", (char)theDict);
      if (!cf)
      {
        CFStringRef format = @"internalError is NULL";
        memset(value, 0, sizeof(value));
        uint64_t v22 = a4;
        CFIndex v23 = 2;
        goto LABEL_31;
      }
      CFDictionaryAddValue(theDict, v12, cf);
    }
    if (v9 == ++v11)
    {
      if (!CFDictionaryGetCount(theDict))
      {
        uint64_t v19 = 1;
LABEL_21:
        CFRelease(v12);
        goto LABEL_22;
      }
      CFStringRef format = @"got multiRequestErrors";
      memset(&value[1], 0, 40);
      value[0] = theDict;
      uint64_t v22 = a4;
      CFIndex v23 = 21;
LABEL_31:
      AMFDRErrorPushInternal(v22, v23, 0, 0, 0, 0, 0, 0, value[0], value[1], value[2], value[3], value[4], value[5], (uint64_t)"AMFDRDataLocalMultiDelete", format, (char)theDict);
      uint64_t v19 = 0;
      goto LABEL_21;
    }
  }
  AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiDelete", @"currDataInstance is NULL", (char)theDict);
LABEL_29:
  uint64_t v19 = 0;
LABEL_22:
  CFRelease(theDict);
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

uint64_t AMFDRDataLocalMultiExport(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiExport", @"AMFDRDataLocalMultiExport is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataLocalMultiMake(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiMake", @"AMFDRDataLocalMultiMake is not implemented", vars0);
  return 0;
}

CFTypeRef AMFDRDataLocalPopulate(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, uint64_t a5)
{
  CFDataRef v18 = 0;
  uint64_t v19 = 0;
  CFTypeRef value = 0;
  CFDataRef v17 = 0;
  CFDataRef v10 = (const __CFData *)AMFDRDataLocalCopy(a1, a2, a3, a5);
  if (v10)
  {
    if ((AMFDRDataLocalCopyExtraManifest(a1, 1, a2, a3, (uint64_t)&v18, (uint64_t)&v19) & 1) == 0) {
      AMSupportLogInternal();
    }
    if ((AMFDRDataLocalCopyExtraManifest(a1, 0, a2, a3, (uint64_t)&v17, (uint64_t)&v19) & 1) == 0) {
      AMSupportLogInternal();
    }
    CFTypeRef DataWithManifestsInternal = AMFDRDataLocalCreateDataWithManifestsInternal(a1, v10, v18, v17, 0, (CFTypeRef *)&value, a5);
    if (DataWithManifestsInternal)
    {
      if (a4)
      {
        CFAllocatorRef v12 = CFGetAllocator(a1);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        uint64_t v14 = Mutable;
        if (Mutable)
        {
          if (value)
          {
            CFDictionarySetValue(Mutable, @"CombinedManifest", value);
            if (!v18) {
              CFDictionarySetValue(v14, @"DeviceManifestMissing", (const void *)*MEMORY[0x263EFFB40]);
            }
          }
          *a4 = CFRetain(v14);
        }
        else
        {
          AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPopulate", @"populateInfo is NULL", (char)value);
        }
      }
    }
    else
    {
      AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPopulate", @"Failed to populate local data with manifests", (char)value);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPopulate", @"Failed to populate local data", (char)value);
    CFTypeRef DataWithManifestsInternal = 0;
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return DataWithManifestsInternal;
}

CFTypeRef AMFDRDataLocalMultiPopulate(void *a1, const __CFArray *a2, const __CFArray *a3, CFTypeRef *a4, uint64_t a5)
{
  return _AMFDRDataLocalMultiCopyInternal(a1, a2, a3, 1, a4, a5);
}

BOOL AMFDRDataLocalCommit(void *a1, uint64_t a2, uint64_t a3, BOOL a4, const __CFDictionary *a5, uint64_t a6)
{
  CFTypeRef v16 = 0;
  BOOL v11 = AMFDRDataLocalPutWithOptions(a1, a2, a3, a4, (int)a5, a6);
  if (v11)
  {
    if (a5)
    {
      CFBooleanRef Value = CFDictionaryGetValue(a5, @"DeviceManifest");
      if ((AMFDRDataLocalPutExtraManifest(a1, 1, Value, a2, a3, (uint64_t)&v16) & 1) == 0) {
        AMSupportLogInternal();
      }
      CFIndex v13 = CFDictionaryGetValue(a5, @"StationManifest");
      if ((AMFDRDataLocalPutExtraManifest(a1, 0, v13, a2, a3, (uint64_t)&v16) & 1) == 0) {
        AMSupportLogInternal();
      }
      if (v16) {
        CFRelease(v16);
      }
    }
  }
  else
  {
    AMFDRErrorPushInternal(a6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCommit", @"Failed to commit local data", v15);
  }
  return v11;
}

CFTypeRef AMFDRDataLocalMultiCopyDigest(void *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataLocalMultiCopyInternal(a1, a2, a3, 2, 0, a4);
}

uint64_t AMFDRDataLocalCopyManifest(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v14 = @"amfdr is NULL";
LABEL_19:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyManifest", v14, (char)cf);
LABEL_23:
    uint64_t v12 = 0;
    goto LABEL_11;
  }
  if (!a2)
  {
    CFStringRef v14 = @"dataClassStr is NULL";
    goto LABEL_19;
  }
  if (!a3)
  {
    CFStringRef v14 = @"dataInstanceStr is NULL.";
    goto LABEL_19;
  }
  if ((AMFDRDataLocalCopyExtraManifest(a1, 1, a2, a3, (uint64_t)&v17, a6) & 1) == 0)
  {
    CFStringRef v15 = @"Failed to copy device manifest";
LABEL_22:
    AMFDRErrorPushInternal(a6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyManifest", v15, (char)cf);
    goto LABEL_23;
  }
  if ((AMFDRDataLocalCopyExtraManifest(a1, 0, a2, a3, (uint64_t)&cf, a6) & 1) == 0)
  {
    CFStringRef v15 = @"Failed to copy station manifest";
    goto LABEL_22;
  }
  if (a4) {
    *a4 = AMSupportSafeRetain();
  }
  if (a5) {
    *a5 = AMSupportSafeRetain();
  }
  uint64_t v12 = 1;
LABEL_11:
  if (v17)
  {
    CFRelease(v17);
    CFTypeRef v17 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

CFTypeRef AMFDRDataLocalMultiCopyManifest(void *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataLocalMultiCopyInternal(a1, a2, a3, 3, 0, a4);
}

CFTypeRef AMFDRDataLocalPatch(void *a1, const __CFString *a2, const void *a3, CFArrayRef *a4, const __CFDictionary *a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPatch", @"metadataDict is not supported for local patch", vars0);
    return 0;
  }
  else
  {
    return _AMFDRDataLocalPatchInternal(a1, a2, a3, a4, 0, a5, a7);
  }
}

CFTypeRef AMFDRDataLocalMultiPatch(const void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiPatch", @"metadataDictArray is not supported for local patch", vars0);
    return 0;
  }
  else
  {
    return _AMFDRDataLocalMultiPatchInternal(a1, a2, a3, a4, 0, a5, a7);
  }
}

CFTypeRef AMFDRDataLocalCommitPatch(void *a1, const __CFString *a2, const void *a3, const __CFData *a4, const __CFDictionary *a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCommitPatch", @"metadataDict is not supported for local patch", vars0);
    return 0;
  }
  else
  {
    return _AMFDRDataLocalPatchInternal(a1, a2, a3, 0, a4, a5, a7);
  }
}

CFTypeRef AMFDRDataLocalMultiCommitPatch(const void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiCommitPatch", @"metadataDictArray is not supported for local patch", vars0);
    return 0;
  }
  else
  {
    return _AMFDRDataLocalMultiPatchInternal(a1, a2, a3, 0, a4, a5, a7);
  }
}

uint64_t AMFDRDataLocalUpdateMetadataWithOptions(int a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalUpdateMetadataWithOptions", @"AMFDRDataLocalUpdateMetadataWithOptions is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataLocalMultiUpdateMetadataWithOptions(int a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiUpdateMetadataWithOptions", @"AMFDRDataLocalMultiUpdateMetadataWithOptions is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataLocalMultiCopyAsidMetadata(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalMultiCopyAsidMetadata", @"AMFDRDataLocalMultiCopyAsidMetadata is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataLocalRevert(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalRevert", @"AMFDRDataLocalRevert is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataLocalDeleteExtraManifest(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v11 = 0;
  uint64_t v6 = AMFDRDataLocalCopyExtraManifestPath(a1, a2, a3, a4, a5);
  char v7 = v6;
  if (!v6)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDeleteExtraManifest", @"manifestURL is NULL", v10);
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  uint64_t v8 = 1;
  if (!MEMORY[0x21D45A5F0](v6, &v11) && v11 == 1 && AMSupportRemoveFile())
  {
    AMFDRErrorPushInternal(a5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalDeleteExtraManifest", @"failed to delete manifest: %@", v7);
    goto LABEL_8;
  }
LABEL_5:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v8;
}

uint64_t AMFDRDataLocalCopyExtraManifestPath(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2) {
    CFIndex v9 = @"mandev";
  }
  else {
    CFIndex v9 = @"mansta";
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFStringRef v11 = CFStringCreateWithFormat(v10, 0, @"%@-%@", v9, a3);
  if (v11)
  {
    uint64_t v12 = AMFDRDataLocalCopyDataStoragePath(a1, (uint64_t)v11, a4, a5);
  }
  else
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyExtraManifestPath", @"manifestPrefix is NULL", v14);
    uint64_t v12 = 0;
  }
  AMSupportSafeRelease();
  return v12;
}

CFTypeRef _AMFDRDataLocalMultiCopyInternal(void *a1, CFArrayRef theArray, const __CFArray *a3, int a4, CFTypeRef *a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v43 = 0;
  v44[0] = 0;
  long long v42 = 0;
  if (!a1)
  {
    CFStringRef v34 = @"amfdr is NULL";
LABEL_81:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", v34, v35);
LABEL_82:
    CFTypeRef v18 = 0;
    CFAllocatorRef v20 = 0;
    goto LABEL_58;
  }
  if (!theArray)
  {
    CFStringRef v34 = @"dataClassArray is NULL";
    goto LABEL_81;
  }
  if (!a3)
  {
    CFStringRef v34 = @"dataInstanceArray is NULL";
    goto LABEL_81;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v34 = @"Invalid dataClassArray count";
    goto LABEL_81;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v34 = @"Invalid dataInstanceArray count";
    goto LABEL_81;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v12, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"valueDataDict is NULL", v35);
    goto LABEL_82;
  }
  CFAllocatorRef v13 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"errorDict is NULL", v35);
    CFRelease(theDict);
    goto LABEL_82;
  }
  CFStringRef v15 = Mutable;
  if (a4 == 1)
  {
    CFAllocatorRef v16 = CFGetAllocator(a1);
    CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v16, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v17)
    {
      AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"populateInfoDict is NULL", v35);
      CFTypeRef v18 = 0;
      uint64_t v19 = 0;
      CFAllocatorRef v20 = 0;
      goto LABEL_56;
    }
  }
  else
  {
    CFMutableDictionaryRef v17 = 0;
  }
  CFTypeRef value = v15;
  unsigned int v39 = v17;
  CFIndex v21 = 0;
  CFStringRef v22 = 0;
  uint64_t v19 = 0;
  while (2)
  {
    if (v22) {
      CFRelease(v22);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v43)
    {
      CFRelease(v43);
      CFTypeRef v43 = 0;
    }
    if (v42)
    {
      CFRelease(v42);
      long long v42 = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v44[0])
    {
      CFRelease(v44[0]);
      v44[0] = 0;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v21);
    if (!ValueAtIndex)
    {
      CFStringRef format = @"dataClassStr is NULL";
LABEL_71:
      AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", format, v35);
LABEL_73:
      CFTypeRef v18 = 0;
      uint64_t v19 = 0;
      CFAllocatorRef v20 = v39;
      CFStringRef v15 = value;
      goto LABEL_56;
    }
    uint64_t v24 = (uint64_t)ValueAtIndex;
    CFStringRef v25 = CFArrayGetValueAtIndex(a3, v21);
    if (!v25)
    {
      CFStringRef format = @"dataInstanceStr is NULL";
      goto LABEL_71;
    }
    uint64_t v26 = (uint64_t)v25;
    CFAllocatorRef v27 = CFGetAllocator(a1);
    CFStringRef v28 = CFStringCreateWithFormat(v27, 0, @"%@-%@", v24, v26);
    if (!v28)
    {
      AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"currDataInstance is NULL", v35);
      goto LABEL_73;
    }
    CFStringRef v22 = v28;
    switch(a4)
    {
      case 0:
        uint64_t v29 = AMFDRDataLocalCopy(a1, v24, v26, (uint64_t)v44);
        goto LABEL_32;
      case 1:
        uint64_t v29 = (uint64_t)AMFDRDataLocalPopulate(a1, v24, v26, &v43, (uint64_t)v44);
        goto LABEL_32;
      case 2:
        uint64_t v29 = (uint64_t)AMFDRDataLocalCopyDigest((const __CFData *)a1, v24, v26, (uint64_t)v44);
LABEL_32:
        uint64_t v19 = (void *)v29;
        if (v29) {
          goto LABEL_33;
        }
        goto LABEL_44;
      case 3:
        CFAllocatorRef v30 = CFGetAllocator(a1);
        CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v30, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (v31)
        {
          uint64_t v19 = v31;
          if (AMFDRDataLocalCopyManifest(a1, v24, v26, (uint64_t *)&v42, (uint64_t *)&cf, (uint64_t)v44))
          {
            if (v42) {
              CFDictionarySetValue((CFMutableDictionaryRef)v19, @"mandev", v42);
            }
            if (cf) {
              CFDictionarySetValue((CFMutableDictionaryRef)v19, @"mansta", cf);
            }
          }
LABEL_33:
          if (v44[0])
          {
            AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"internalError is not NULL", v35);
            goto LABEL_54;
          }
          CFDictionaryAddValue(theDict, v22, v19);
          if (v39 && v43 && CFDictionaryGetCount((CFDictionaryRef)v43) >= 1) {
            CFDictionarySetValue(v39, v22, v43);
          }
          goto LABEL_46;
        }
LABEL_44:
        AMFDRErrorPushInternal((uint64_t)v44, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"AMFDRDataLocalCopy failed", v35);
        if (v44[0])
        {
          CFDictionaryAddValue(value, v22, v44[0]);
          uint64_t v19 = 0;
LABEL_46:
          if (v11 == ++v21)
          {
            CFStringRef v15 = value;
            if (CFDictionaryGetCount(value) >= 1) {
              AMFDRErrorPushInternal(a6, 21, 0, 0, 0, 0, 0, 0, value, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"Previous AMFDRDataLocalCopy got errors", v35);
            }
            CFTypeRef v18 = CFRetain(theDict);
            CFAllocatorRef v20 = v39;
            if (a5 && v39) {
              *a5 = CFRetain(v39);
            }
            goto LABEL_55;
          }
          continue;
        }
        AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"internalError is NULL", v35);
LABEL_53:
        uint64_t v19 = 0;
LABEL_54:
        CFTypeRef v18 = 0;
        CFAllocatorRef v20 = v39;
        CFStringRef v15 = value;
LABEL_55:
        CFRelease(v22);
LABEL_56:
        CFRelease(v15);
        CFRelease(theDict);
        if (v19) {
          CFRelease(v19);
        }
LABEL_58:
        if (v44[0])
        {
          CFRelease(v44[0]);
          v44[0] = 0;
        }
        if (v43)
        {
          CFRelease(v43);
          CFTypeRef v43 = 0;
        }
        if (v20) {
          CFRelease(v20);
        }
        if (v42)
        {
          CFRelease(v42);
          long long v42 = 0;
        }
        if (cf) {
          CFRelease(cf);
        }
        return v18;
      default:
        AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiCopyInternal", @"Unsupported multi local action: %d", a4);
        goto LABEL_53;
    }
  }
}

uint64_t AMFDRDataLocalCopyExtraManifest(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v13 = 0;
  uint64_t v8 = AMFDRDataLocalCopyExtraManifestPath(a1, a2, a3, a4, a6);
  char v9 = v8;
  if (!v8)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyExtraManifest", @"manifestURL is NULL", v12);
    goto LABEL_7;
  }
  uint64_t v10 = 1;
  if (!MEMORY[0x21D45A5F0](v8, &v13) && v13 == 1)
  {
    CFGetAllocator(a1);
    AMSupportCreateDataFromFileURL();
    AMFDRErrorPushInternal(a6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalCopyExtraManifest", @"failed to read manifest: %@", v9);
LABEL_7:
    uint64_t v10 = 0;
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v10;
}

uint64_t AMFDRDataLocalPutExtraManifest(void *a1, int a2, CFTypeRef cf, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (cf && (CFTypeID v12 = CFGetTypeID(cf), v12 == CFDataGetTypeID()))
  {
    uint64_t v13 = AMFDRDataLocalCopyExtraManifestPath(a1, a2, a4, a5, a6);
    if (!v13)
    {
      AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutExtraManifest", @"manifestURL is NULL", v17);
      goto LABEL_9;
    }
    uint64_t v14 = 1;
    unsigned int v15 = AMFDRWriteDataToFileURL(a1, (uint64_t)cf, v13, 1);
    if (v15)
    {
      AMFDRErrorPushInternal(a6, v15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataLocalPutExtraManifest", @"failed to write manifest", v17);
LABEL_9:
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
  AMSupportSafeRelease();
  return v14;
}

CFTypeRef _AMFDRDataLocalPatchInternal(void *a1, const __CFString *a2, const void *a3, CFArrayRef *a4, const __CFData *a5, const __CFDictionary *a6, uint64_t a7)
{
  CFDataRef v26 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", @"amfdr is NULL", v25);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v23 = @"dataClassStr is NULL";
LABEL_33:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", v23, v25);
    a5 = 0;
LABEL_44:
    CFDictionaryRef v10 = 0;
    goto LABEL_45;
  }
  if (!a3)
  {
    CFStringRef v23 = @"dataInstanceStr is NULL";
    goto LABEL_33;
  }
  CFDictionaryRef v10 = a6;
  if (!a6)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", @"patchDict is NULL", v25);
    a5 = 0;
LABEL_45:
    CFTypeRef v21 = 0;
    goto LABEL_23;
  }
  CFIndex v11 = a4;
  if (a4) {
    a5 = (const __CFData *)a4;
  }
  if (!a5)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", @"valueData is NULL", v25);
    goto LABEL_44;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  UnsignedValueNoCFArrayRef Copy = (const __CFData *)_AMFDRDataCreateUnsignedValueNoCopy(v14, a5, 0, a7);
  a5 = UnsignedValueNoCopy;
  if (!UnsignedValueNoCopy)
  {
    AMFDRErrorPushInternal(a7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", @"failed to strip data for %@-%@", (char)a2);
    goto LABEL_44;
  }
  if (!v11)
  {
    CFDataRef EncodedData = (const __CFData *)CFRetain(UnsignedValueNoCopy);
    goto LABEL_16;
  }
  CFAllocatorRef v16 = CFGetAllocator(a1);
  char v17 = (CFArrayRef *)AMFDRSysconfigCreateFromData(v16, a5, a7);
  if (!v17)
  {
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", @"failed to decode original data", v25);
    goto LABEL_44;
  }
  CFIndex v11 = v17;
  if (!AMFDRSysconfigSetValues(v17, v10, a7))
  {
    CFStringRef v19 = @"failed to patch data";
    goto LABEL_47;
  }
  CFDataRef EncodedData = AMFDRSysconfigCreateEncodedData(v11, a7);
  if (!EncodedData)
  {
    CFStringRef v19 = @"failed to encode patched data";
LABEL_47:
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", v19, v25);
    CFDictionaryRef v10 = 0;
    CFTypeRef v21 = 0;
    goto LABEL_22;
  }
LABEL_16:
  CFDictionaryRef v10 = EncodedData;
  if (!AMFDRDataLocalSign((uint64_t)a1, a2, a3, EncodedData, 0, 0, 0, 0, &v26, a7) || !v26)
  {
    CFStringRef v24 = @"failed to sign data to put";
    goto LABEL_41;
  }
  if ((AMFDRDataLocalDeleteExtraManifest(a1, 0, (uint64_t)a2, (uint64_t)a3, a7) & 1) == 0)
  {
    CFStringRef v24 = @"failed to remove station manifest";
    goto LABEL_41;
  }
  if ((AMFDRDataLocalDeleteExtraManifest(a1, 1, (uint64_t)a2, (uint64_t)a3, a7) & 1) == 0)
  {
    CFStringRef v24 = @"failed to remove device manifest";
    goto LABEL_41;
  }
  if (!AMFDRDataLocalPutWithOptions(a1, (uint64_t)a2, (uint64_t)a3, (BOOL)v26, v20, a7))
  {
    CFStringRef v24 = @"failed to put patched data";
LABEL_41:
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalPatchInternal", v24, v25);
    CFTypeRef v21 = 0;
    if (!v11) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  CFTypeRef v21 = CFRetain(v26);
  if (v11) {
LABEL_22:
  }
    CFRelease(v11);
LABEL_23:
  if (v26)
  {
    CFRelease(v26);
    CFDataRef v26 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  if (a5) {
    CFRelease(a5);
  }
  return v21;
}

CFTypeRef _AMFDRDataLocalMultiPatchInternal(const void *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, uint64_t a7)
{
  CFTypeRef v45 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"amfdr is NULL", v36);
    return 0;
  }
  CFArrayRef v8 = theArray;
  if (!theArray)
  {
    CFStringRef v35 = @"dataClassArray is NULL";
LABEL_65:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", v35, v36);
LABEL_66:
    CFTypeRef v32 = 0;
    goto LABEL_43;
  }
  if (!a3)
  {
    CFStringRef v35 = @"dataInstanceArray is NULL";
    goto LABEL_65;
  }
  if (!a6)
  {
    CFStringRef v35 = @"patchDictArray is NULL";
    goto LABEL_65;
  }
  CFArrayRef v9 = a4;
  if (!a4) {
    CFArrayRef v9 = a5;
  }
  CFArrayRef theArraya = v9;
  if (!v9)
  {
    CFStringRef v35 = @"input data array is NULL";
    goto LABEL_65;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v35 = @"Invalid dataClassArray count";
    goto LABEL_65;
  }
  CFIndex v12 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v35 = @"Invalid dataInstanceArray count";
    goto LABEL_65;
  }
  if (CFArrayGetCount(theArraya) != v12)
  {
    CFStringRef v35 = @"Invalid dataArray count";
    goto LABEL_65;
  }
  if (CFArrayGetCount(a6) != v12)
  {
    CFStringRef v35 = @"Invalid patchDictArray count";
    goto LABEL_65;
  }
  CFAllocatorRef v13 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, v12, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"valueDataDict is NULL", v36);
    goto LABEL_66;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v14, v12, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"errorDict is NULL", v36);
    CFRelease(Mutable);
    goto LABEL_66;
  }
  CFTypeRef cf = a1;
  uint64_t v37 = a7;
  CFIndex v15 = 0;
  CFStringRef v16 = 0;
  CFTypeRef v17 = 0;
  while (1)
  {
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArraya, v15);
    CFDictionaryRef v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(a6, v15);
    CFStringRef v20 = (const __CFString *)CFArrayGetValueAtIndex(v8, v15);
    CFTypeRef v21 = CFArrayGetValueAtIndex(a3, v15);
    if (!ValueAtIndex)
    {
      CFStringRef format = @"inputData is NULL";
      goto LABEL_50;
    }
    if (!v19)
    {
      CFStringRef format = @"patchDict is NULL";
      goto LABEL_50;
    }
    if (!v20)
    {
      CFStringRef format = @"dataClassStr is NULL";
      goto LABEL_50;
    }
    CFStringRef v22 = v21;
    if (!v21)
    {
      CFStringRef format = @"dataInstanceStr is NULL";
LABEL_50:
      AMFDRErrorPushInternal(v37, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", format, v36);
      CFTypeRef v31 = 0;
      CFTypeRef v32 = 0;
      CFMutableDictionaryRef v30 = theDict;
      if (!v16) {
        goto LABEL_41;
      }
LABEL_40:
      CFRelease(v16);
      CFTypeRef v32 = v31;
      goto LABEL_41;
    }
    CFArrayRef v23 = v8;
    if (a4) {
      CFStringRef v24 = (CFArrayRef *)ValueAtIndex;
    }
    else {
      CFStringRef v24 = 0;
    }
    if (a4) {
      CFDataRef ValueAtIndex = 0;
    }
    if (v16) {
      CFRelease(v16);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v45)
    {
      CFRelease(v45);
      CFTypeRef v45 = 0;
    }
    CFAllocatorRef v25 = CFGetAllocator(cf);
    CFStringRef v26 = CFStringCreateWithFormat(v25, 0, @"%@-%@", v20, v22);
    if (!v26) {
      break;
    }
    CFStringRef v16 = v26;
    CFTypeRef v17 = _AMFDRDataLocalPatchInternal(cf, v20, v22, v24, ValueAtIndex, v19, (uint64_t)&v45);
    if (!v17)
    {
      AMFDRErrorPushInternal((uint64_t)&v45, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"_AMFDRDataLocalPatchInternal failed", v36);
      CFTypeRef v29 = v45;
      if (v45)
      {
        CFArrayRef v8 = v23;
        CFAllocatorRef v27 = theDict;
        CFStringRef v28 = v16;
        goto LABEL_36;
      }
      AMFDRErrorPushInternal(v37, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"internalError is NULL", v36);
      CFTypeRef v17 = 0;
      goto LABEL_55;
    }
    if (v45)
    {
      AMFDRErrorPushInternal(v37, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"internalError is not NULL", v36);
LABEL_55:
      CFTypeRef v31 = 0;
      CFMutableDictionaryRef v30 = theDict;
      goto LABEL_40;
    }
    CFArrayRef v8 = v23;
    CFAllocatorRef v27 = Mutable;
    CFStringRef v28 = v16;
    CFTypeRef v29 = v17;
LABEL_36:
    CFDictionaryAddValue(v27, v28, v29);
    if (v12 == ++v15)
    {
      CFMutableDictionaryRef v30 = theDict;
      if (CFDictionaryGetCount(theDict) >= 1) {
        AMFDRErrorPushInternal(v37, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"Previous AMFDRDataLocalPatch got errors", v36);
      }
      CFTypeRef v31 = CFRetain(Mutable);
      goto LABEL_40;
    }
  }
  AMFDRErrorPushInternal(v37, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataLocalMultiPatchInternal", @"currDataInstance is NULL", v36);
  CFTypeRef v17 = 0;
  CFTypeRef v32 = 0;
  CFMutableDictionaryRef v30 = theDict;
LABEL_41:
  CFRelease(v30);
  CFRelease(Mutable);
  if (v17) {
    CFRelease(v17);
  }
LABEL_43:
  if (v45) {
    CFRelease(v45);
  }
  return v32;
}

uint64_t _AMFDRDecodeComputeDigest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a5)
        {
          CFArrayRef v8 = *(void **)(a5 + 32);
          if (v8)
          {
            if (*v8 == a4)
            {
              if (DEROidCompare(v8[1], (uint64_t)&oidSha1))
              {
                if (!AMSupportDigestSha1()) {
                  return 0;
                }
              }
              else if (DEROidCompare(*(void *)(*(void *)(a5 + 32) + 8), (uint64_t)&oidSha256))
              {
                if (!AMSupportDigestSha256()) {
                  return 0;
                }
              }
              else
              {
                if (!DEROidCompare(*(void *)(*(void *)(a5 + 32) + 8), (uint64_t)&oidSha384)) {
                  return 4;
                }
                if (!AMSupportDigestSha384()) {
                  return 0;
                }
              }
              return 3;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _AMFDRDecodeVerifyChain(uint64_t a1, uint64_t a2, DERByte **a3, DERSize *a4, DERByte **a5, DERSize *a6, uint64_t a7, uint64_t a8)
{
  int v71 = 0;
  memset(v70, 170, sizeof(v70));
  v8.data = (DERByte *)0xAAAAAAAAAAAAAAAALL;
  v8.uint64_t length = 0xAAAAAAAAAAAAAAAALL;
  DERItem v68 = v8;
  DERItem v69 = v8;
  DERItem v66 = v8;
  DERItem v67 = v8;
  DERItem v64 = v8;
  DERItem v65 = v8;
  DERItem v62 = v8;
  DERItem v63 = v8;
  DERItem v60 = v8;
  DERItem v61 = v8;
  DERItem v58 = v8;
  DERItem v59 = v8;
  DERItem v56 = v8;
  DERItem v57 = v8;
  DERItem v54 = v8;
  DERItem v55 = v8;
  DERItem v52 = v8;
  DERItem v53 = v8;
  v50[18] = v8;
  DERItem v51 = v8;
  v50[16] = v8;
  v50[17] = v8;
  v50[14] = v8;
  v50[15] = v8;
  v50[12] = v8;
  v50[13] = v8;
  v50[10] = v8;
  v50[11] = v8;
  v50[8] = v8;
  v50[9] = v8;
  v50[6] = v8;
  v50[7] = v8;
  v50[4] = v8;
  v50[5] = v8;
  v50[2] = v8;
  v50[3] = v8;
  v50[0] = v8;
  v50[1] = v8;
  CFArrayRef v49 = (DERItem *)v50;
  if (a8)
  {
    if (a1 && a2 && a5 && a6)
    {
      if (!a2)
      {
        uint64_t v18 = 3;
        AMSupportLogInternal();
        uint64_t v20 = *(void *)a8 | 1;
        goto LABEL_54;
      }
      v70[1] = a2;
      v70[2] = 0;
      v70[0] = a1;
      AMFDRDecodeIterateCertChainNextWithOptions((uint64_t)v70, *(void *)(a8 + 2016), (_OWORD **)&v49, &v71);
      uint64_t v15 = v14;
      if (v14 || !v49)
      {
        uint64_t v18 = 3;
        AMSupportLogInternal();
        uint64_t v20 = *(void *)a8 | v15;
LABEL_54:
        *(void *)a8 = v20;
        return v18;
      }
      if (!*(void *)(a8 + 1944) || !*(void *)(a8 + 1952))
      {
        AMSupportLogInternal();
        *(void *)a8 |= 0x200100uLL;
LABEL_51:
        uint64_t v37 = v49;
        CFArrayRef v49 = &v51;
        AMFDRDecodeIterateCertChainNextWithOptions((uint64_t)v70, *(void *)(a8 + 2016), (_OWORD **)&v49, &v71);
        if (v38)
        {
          uint64_t v17 = v38;
          goto LABEL_53;
        }
        int v39 = 1;
        while (1)
        {
          if (!v49)
          {
            *a3 = v37[13].data;
            *a4 = v37[13].length;
            *a5 = v37[18].data;
            *a6 = v37[18].length;
            DERItem v43 = v37[15];
            *(DERItem *)(a8 + 312) = v37[14];
            *(DERItem *)(a8 + 328) = v43;
            AMSupportLogInternal();
            return 0;
          }
          AMSupportLogInternal();
          if (AMFDRDecodeVerifyCertIssuerWithOptions((uint64_t)v49, (uint64_t)v37, a8 + 1768, *(void *)(a8 + 2016), (void *)a8))
          {
            break;
          }
          AMSupportLogInternal();
          ++v39;
          int v40 = v49;
          CFArrayRef v49 = v37;
          AMFDRDecodeIterateCertChainNextWithOptions((uint64_t)v70, *(void *)(a8 + 2016), (_OWORD **)&v49, &v71);
          uint64_t v37 = v40;
          if (v41)
          {
            uint64_t v42 = v41;
            uint64_t v18 = 3;
            AMSupportLogInternal();
            uint64_t v20 = *(void *)a8 | v42;
            goto LABEL_54;
          }
        }
        AMSupportLogInternal();
        uint64_t v44 = *(void *)a8 | 0x40000000000;
        goto LABEL_62;
      }
      if ((*(unsigned char *)(a8 + 2017) & 1) == 0)
      {
        uint64_t v16 = AMFDRDecodeIterateTrustObjectTrustedBegin(a8 + 1768);
        if (v16)
        {
          uint64_t v17 = v16;
LABEL_53:
          uint64_t v18 = 3;
          AMSupportLogInternal();
          uint64_t v20 = *(void *)a8 | v17;
          goto LABEL_54;
        }
        CFTypeRef v29 = a4;
        for (int i = 0; ; ++i)
        {
          DERItem v47 = (DERItem)0;
          *(void *)&v48[0] = 0;
          int v31 = DERDecodeSeqNext((unint64_t *)(a8 + 1832), (unint64_t *)&v47);
          if (v31) {
            break;
          }
          uint64_t length = v47.length;
          unsigned int v33 = v48[0];
          if (v47.length) {
            BOOL v34 = LODWORD(v48[0]) == 0;
          }
          else {
            BOOL v34 = 1;
          }
          if (v34) {
            goto LABEL_49;
          }
          AMSupportLogInternal();
          uint64_t v35 = AMFDRDecodeCertificate((unint64_t)&v51, length, v33);
          if (v35)
          {
            uint64_t v46 = v35;
            AMSupportLogInternal();
            uint64_t v44 = *(void *)a8 | v46;
            goto LABEL_62;
          }
          uint64_t v36 = AMFDRDecodeVerifyCertIssuerWithOptions((uint64_t)v49, (uint64_t)&v51, a8 + 1768, 0, 0);
          if (v36 != 0x20000000000)
          {
            uint64_t v45 = v36;
            if (!v36)
            {
              AMSupportLogInternal();
              goto LABEL_50;
            }
            AMSupportLogInternal();
            uint64_t v44 = *(void *)a8 | v45;
            goto LABEL_62;
          }
        }
        if (v31 == 1)
        {
LABEL_49:
          AMSupportLogInternal();
          *(void *)a8 |= 0x100uLL;
LABEL_50:
          a4 = v29;
          goto LABEL_51;
        }
        AMSupportLogInternal();
        uint64_t v44 = *(void *)a8 | 0x400000;
LABEL_62:
        *(void *)a8 = v44;
        return 3;
      }
      memset(v48, 0, sizeof(v48));
      DERItem v47 = (DERItem)0;
      uint64_t v21 = AMFDRDecodeIterateTrustObjectTrustedKeyBegin(a8 + 1768);
      if (v21 == 0x40000000000000)
      {
        AMSupportLogInternal();
      }
      else if (v21)
      {
        *(void *)a8 |= v21;
LABEL_72:
        AMSupportLogInternal();
        return 3;
      }
      int v22 = 0;
LABEL_24:
      while (1)
      {
        unint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        int v23 = DERDecodeSeqNext((unint64_t *)(a8 + 1896), &v72);
        if (v23) {
          break;
        }
        uint64_t v24 = v73;
        unsigned int v25 = v74;
        if (v73) {
          BOOL v26 = v74 == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (v26) {
          goto LABEL_38;
        }
        AMSupportLogInternal();
        uint64_t v27 = AMFDRDecodePublicKey((uint64_t)&v47, v24, v25);
        if (v27)
        {
          AMSupportLogInternal();
          uint64_t v44 = *(void *)a8 | v27;
          goto LABEL_62;
        }
        while (!DEROidCompare((uint64_t)&v49[1], (*(void **)((char *)&kAMFDRDecodeEcdsaInfoList + v27))[3])
             || !DEROidCompare((uint64_t)v48, (*(void **)((char *)&kAMFDRDecodeEcdsaInfoList + v27))[2]))
        {
          v27 += 8;
          if (v27 == 24)
          {
            ++v22;
            goto LABEL_24;
          }
        }
        DERItem v68 = (DERItem)0;
        DERItem v69 = (DERItem)0;
        DERItem v67 = (DERItem)0;
        DERItem v62 = (DERItem)0;
        DERItem v63 = (DERItem)0;
        DERItem v60 = (DERItem)0;
        DERItem v61 = (DERItem)0;
        DERItem v58 = (DERItem)0;
        DERItem v59 = (DERItem)0;
        DERItem v56 = (DERItem)0;
        DERItem v57 = (DERItem)0;
        DERItem v54 = (DERItem)0;
        DERItem v55 = (DERItem)0;
        DERItem v52 = (DERItem)0;
        DERItem v53 = (DERItem)0;
        DERItem v51 = (DERItem)0;
        DERItem v64 = v47;
        DERItem v65 = oidEcPubKey;
        DERItem v66 = (DERItem)v48[0];
        uint64_t v28 = AMFDRDecodeVerifyCertIssuerWithOptions((uint64_t)v49, (uint64_t)&v51, a8 + 1768, *(void *)(a8 + 2016), (void *)a8);
        if (v28 != 0x20000000000)
        {
          if (!v28)
          {
            AMSupportLogInternal();
            goto LABEL_51;
          }
          goto LABEL_71;
        }
      }
      if (v23 == 1)
      {
LABEL_38:
        AMSupportLogInternal();
        *(void *)a8 |= 0x100uLL;
        goto LABEL_51;
      }
      uint64_t v28 = 0x400000;
LABEL_71:
      *(void *)a8 |= v28;
      goto LABEL_72;
    }
    AMSupportLogInternal();
    *(void *)a8 |= 1uLL;
  }
  else
  {
    AMSupportLogInternal();
  }
  return 6;
}

uint64_t _AMFDRDecodeVerifySignature(const void *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2 || !a3 || !a4 || !a5 || !a6 || !a7 || !*(void *)(a7 + 40) || **(void **)(a7 + 32) != a6) {
    goto LABEL_13;
  }
  if (!DEROidCompare(a8 + 312, (uint64_t)&oidEcPubKey))
  {
    if (DEROidCompare(*(void *)(a7 + 40), (uint64_t)&oidSha1Rsa))
    {
      if (!DEROidCompare(a8 + 312, (uint64_t)&oidRsa)) {
        goto LABEL_40;
      }
      uint64_t result = AMSupportRsaVerifySignatureSha1();
    }
    else if (DEROidCompare(*(void *)(a7 + 40), (uint64_t)&oidSha256Rsa))
    {
      if (!DEROidCompare(a8 + 312, (uint64_t)&oidRsa)) {
        goto LABEL_40;
      }
      uint64_t result = AMSupportRsaVerifySignatureSha256();
    }
    else
    {
      if (!DEROidCompare(*(void *)(a7 + 40), (uint64_t)&oidSha384Rsa))
      {
        uint64_t result = 4;
LABEL_14:
        if (!a8) {
          return result;
        }
        goto LABEL_15;
      }
      if (!DEROidCompare(a8 + 312, (uint64_t)&oidRsa)) {
        goto LABEL_40;
      }
      uint64_t result = AMSupportRsaVerifySignatureSha384();
    }
    if (result == 2)
    {
      *(void *)a8 |= 0x80000000000000uLL;
      uint64_t result = 3;
LABEL_15:
      *(void *)a8 |= 0x1000000000000uLL;
      return result;
    }
    goto LABEL_41;
  }
  if ((uint64_t (**)())a7 != kAMFDRDecodeImplementationSha384
    && (uint64_t (**)())a7 != kAMFDRDecodeImplementationOffline)
  {
LABEL_13:
    AMSupportLogInternal();
    uint64_t result = 6;
    goto LABEL_14;
  }
  DERItem v15 = oidEcPrime256v1;
  if ((*(unsigned char *)(a8 + 2017) & 1) == 0)
  {
    if (!AMSupportDigestSha256()) {
      goto LABEL_38;
    }
LABEL_40:
    uint64_t result = 3;
    goto LABEL_14;
  }
  if (!*(void *)(a8 + 336)) {
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  DERItem v15 = *(DERItem *)(a8 + 328);
  while (!DEROidCompare((uint64_t)&v15, (*(void **)((char *)&kAMFDRDecodeEcdsaInfoList + v13))[2]))
  {
    v13 += 8;
    if (v13 == 24) {
      goto LABEL_13;
    }
  }
  uint64_t v14 = *(uint64_t *)((char *)&kAMFDRDecodeEcdsaInfoList + v13);
  if (!*(_DWORD *)(v14 + 8)) {
    goto LABEL_13;
  }
  if (AMFDRDecodeDigestByLength(*(void *)(a8 + 664), *(void *)(a8 + 672), a8 + 776, *(unsigned int *)(v14 + 8)))goto LABEL_40; {
LABEL_38:
  }
  uint64_t result = AMFDRDecodeEcdsaVerifySignature(a1, a2);
  if (result == 2)
  {
    *(void *)a8 |= 0x80000000000000uLL;
    goto LABEL_40;
  }
LABEL_41:
  if (result) {
    goto LABEL_40;
  }
  return result;
}

uint64_t _AMFDRDecodeEvaluateCertificateProperties(uint64_t a1, uint64_t a2)
{
  memset(v20, 170, 32);
  memset(v18, 170, sizeof(v18));
  memset(v17, 170, sizeof(v17));
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v16 = v3;
  uint64_t v4 = 6;
  if (!a1 || !a2)
  {
LABEL_30:
    if (!a2) {
      return v4;
    }
    goto LABEL_31;
  }
  if (!*(void *)(a1 + 320) || (uint64_t v6 = a1 + 312, !*(void *)(a1 + 312)))
  {
    uint64_t v4 = 0;
    uint64_t v13 = 0x200000000000;
LABEL_20:
    *(void *)a2 |= v13;
    return v4;
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = DERDecodeSeqInit(v6, &v19, &v20[2]);
  if (v7)
  {
    uint64_t v4 = v7;
    AMSupportLogInternal();
LABEL_31:
    uint64_t v13 = 0x800000000000;
    goto LABEL_20;
  }
  if (v19 != 0x2000000000000011)
  {
    uint64_t v4 = 2;
    goto LABEL_31;
  }
  int v8 = 0;
  do
  {
    int v9 = DERDecodeSeqNext(&v20[2], v18);
    if (v9)
    {
      if (v9 == 1 && v8) {
        return 0;
      }
      goto LABEL_26;
    }
    ++v8;
    if (v18[0] == 0xE00000004D414E50) {
      break;
    }
    if (v18[0] != 0xE00000004F424A50) {
      goto LABEL_28;
    }
  }
  while ((*(unsigned char *)(a2 + 2016) & 0x80) != 0);
  uint64_t v10 = DERImg4DecodeProperty();
  if (v10)
  {
    uint64_t v4 = v10;
  }
  else
  {
    if (*((void *)&v16 + 1) != 0x2000000000000011) {
      goto LABEL_29;
    }
    CFIndex v11 = DERDecodeSeqContentInit((unint64_t *)&v15 + 1, v20);
    if (!v11)
    {
      if (!DERDecodeSeqNext(v20, v17))
      {
        uint64_t v12 = DERImg4DecodeProperty();
        if (!v12)
        {
          DERImg4DecodeContentFindItemWithTag();
LABEL_28:
          AMSupportLogInternal();
LABEL_29:
          uint64_t v4 = 2;
          goto LABEL_30;
        }
        uint64_t v4 = v12;
        goto LABEL_39;
      }
LABEL_26:
      AMSupportLogInternal();
      uint64_t v4 = 0xFFFFFFFFLL;
      if (a2) {
        goto LABEL_31;
      }
      return v4;
    }
    uint64_t v4 = (uint64_t)v11;
  }
LABEL_39:
  AMSupportLogInternal();
  if (a2) {
    goto LABEL_31;
  }
  return v4;
}

uint64_t _AMFDRDecodeVerifyChainOffline(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v24, 170, sizeof(v24));
  if (a8)
  {
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v22 = v11;
    long long v23 = v11;
    long long v20 = v11;
    long long v21 = v11;
    *(_OWORD *)__s1 = v11;
    long long v19 = v11;
    v17[11] = v11;
    v17[12] = v11;
    v17[9] = v11;
    v17[10] = v11;
    v17[7] = v11;
    v17[8] = v11;
    v17[5] = v11;
    v17[6] = v11;
    unint64_t v17[3] = v11;
    v17[4] = v11;
    v17[1] = v11;
    void v17[2] = v11;
    v17[0] = v11;
    v25[0] = a1;
    v25[1] = a2;
    if (!DERDecodeItem((uint64_t)v25, v24))
    {
      if (v24[0] != 2)
      {
        uint64_t v12 = 3;
        AMSupportLogInternal();
        uint64_t v13 = *(void *)a8 | 0x40;
        goto LABEL_12;
      }
      if (!AMFDRDecodeCertificate((unint64_t)v17, *(void *)(a8 + 296), *(_DWORD *)(a8 + 304)))
      {
        *(void *)a8 |= 0x100uLL;
        unint64_t v14 = v24[2];
        if ((void *)v24[2] == __s1[1])
        {
          unint64_t v15 = v24[1];
          if (!memcmp(__s1[0], (const void *)v24[1], v24[2]))
          {
            uint64_t v12 = 0;
            *a3 = v15;
            *a4 = v14;
            *(DERItem *)(a8 + 312) = oidEcPubKey;
            return v12;
          }
        }
        uint64_t v12 = 3;
        AMSupportLogInternal();
        uint64_t v13 = *(void *)a8 | 0x20000000000000;
        goto LABEL_12;
      }
    }
    uint64_t v12 = 3;
    AMSupportLogInternal();
    uint64_t v13 = *(void *)a8 | 0x40000000000;
LABEL_12:
    *(void *)a8 = v13;
    return v12;
  }
  AMSupportLogInternal();
  return 6;
}

uint64_t _AMFDRDecodeEvaluateTestStationCertificateProperties()
{
  return 0;
}

uint64_t _AMFDRDecodeVerifyDataCallback(int a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v31 = 0;
  __s2 = 0;
  if (!a4)
  {
    AMSupportLogInternal();
    return 6;
  }
  if (!a2)
  {
    AMSupportLogInternal();
    *(void *)a4 |= 1uLL;
    return 6;
  }
  if (a1 <= 1634953571)
  {
    if (a1 > 1400000108)
    {
      if (a1 == 1400000109) {
        return 0;
      }
      if (a1 == 1400010324)
      {
        uint64_t PropertyData = Img4DecodeGetPropertyData();
        if (!PropertyData)
        {
          AMSupportLogInternal();
          uint64_t v6 = 0;
          uint64_t v20 = *(void *)a4 | 0x200;
          goto LABEL_85;
        }
        uint64_t v6 = PropertyData;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (a1 == 1145525076)
    {
      if ((*(unsigned char *)(a4 + 2017) & 0x10) != 0) {
        goto LABEL_47;
      }
      uint64_t v11 = Img4DecodeGetPropertyData();
      if (v11)
      {
        uint64_t v6 = v11;
      }
      else
      {
        if (*(unsigned char *)(a4 + 400)
          && **(void **)(*(void *)(a4 + 2008) + 32) == v31
          && !memcmp(__s2, (const void *)(a4 + 584), v31))
        {
          return 0;
        }
        uint64_t v6 = 3;
      }
    }
    else
    {
      if (a1 != 1396917319)
      {
LABEL_36:
        uint64_t v13 = 1;
        while (v13 != 48)
        {
          int v14 = kFDRKnownTag[v13++];
          if (v14 == a1)
          {
            if ((unint64_t)(v13 - 2) < 0x2F) {
              return 0;
            }
            goto LABEL_47;
          }
        }
        goto LABEL_47;
      }
      uint64_t v7 = Img4DecodeGetPropertyData();
      if (!v7)
      {
        uint64_t v19 = v31;
        *(void *)(a4 + 360) = __s2;
        *(void *)(a4 + 368) = v19;
        if ((*(unsigned char *)(a4 + 2017) & 0x10) != 0)
        {
          if (*(void *)(a4 + 128))
          {
            long long v23 = *(unsigned int **)(a4 + 120);
            if (v23)
            {
              __s1 = 0;
              size_t __n = 0;
              int v24 = AMFDRTagsStringToTag(v23);
              if (_AMFDRDecodeSearchEntryFromPropertyList(*(void *)(a4 + 360), *(void *)(a4 + 368), v24, &__s1))
              {
                uint64_t v6 = 0;
              }
              else if (*(unsigned char *)(a4 + 400))
              {
                if (__n == **(void **)(*(void *)(a4 + 2008) + 32))
                {
                  if (!memcmp(__s1, (const void *)(a4 + 584), __n))
                  {
                    AMSupportLogInternal();
                    uint64_t v6 = 0;
                    *(unsigned char *)(a4 + 376) = 1;
                    return v6;
                  }
                  uint64_t v6 = 3;
                }
                else
                {
                  uint64_t v6 = 3;
                }
              }
              else
              {
                uint64_t v6 = 3;
              }
              AMSupportLogInternal();
              uint64_t v20 = *(void *)a4 | 0x1000000000000000;
              goto LABEL_85;
            }
          }
          *(void *)a4 |= 0x1000000000000000uLL;
        }
        goto LABEL_47;
      }
      uint64_t v6 = v7;
    }
    AMSupportLogInternal();
    uint64_t v20 = *(void *)a4 | 0x8000;
    goto LABEL_85;
  }
  if (a1 <= 1717660002)
  {
    if (a1 == 1634953572)
    {
      uint64_t v12 = Img4DecodeGetPropertyData();
      if (v12)
      {
        uint64_t v6 = v12;
        goto LABEL_35;
      }
      size_t v21 = *(void *)(a4 + 224);
      if (v21)
      {
        if (v21 != v31 || (long long v22 = *(const void **)(a4 + 216)) == 0 || memcmp(v22, __s2, v21))
        {
          uint64_t v6 = 3;
          AMSupportLogInternal();
          uint64_t v20 = *(void *)a4 | 0x200000000000000;
          goto LABEL_85;
        }
        return 0;
      }
      goto LABEL_47;
    }
    if (a1 != 1668047219) {
      goto LABEL_36;
    }
    Img4DecodeGetPropertyData();
    uint64_t v6 = 3;
    AMSupportLogInternal();
    uint64_t v20 = *(void *)a4 | 0x400;
LABEL_85:
    *(void *)a4 = v20;
    return v6;
  }
  if (a1 == 1717660003)
  {
    LOBYTE(__s1) = 0;
    if (!Img4DecodeGetPropertyBoolean())
    {
      uint64_t v6 = 0;
      *(unsigned char *)(a4 + 2004) = (_BYTE)__s1;
      return v6;
    }
    uint64_t v6 = 3;
    AMSupportLogInternal();
    uint64_t v20 = *(void *)a4 | 0x400000000;
    goto LABEL_85;
  }
  if (a1 != 1768846196)
  {
    if (a1 == 1886546276)
    {
      uint64_t v5 = Img4DecodeGetPropertyData();
      if (v5)
      {
        uint64_t v6 = v5;
LABEL_35:
        AMSupportLogInternal();
        uint64_t v20 = *(void *)a4 | 0x2000;
        goto LABEL_85;
      }
      unint64_t v15 = __s2;
      uint64_t v16 = v31;
      *(void *)(a4 + 200) = __s2;
      *(void *)(a4 + 208) = v16;
      if (!*(void *)(a4 + 1944) || !*(void *)(a4 + 1952))
      {
        AMSupportLogInternal();
        uint64_t v6 = 0;
        uint64_t v20 = *(void *)a4 | 0x200000;
        goto LABEL_85;
      }
      uint64_t v17 = AMFDRDecodeCheckProducerIDRevocation(a4 + 1768, (uint64_t)v15, v16);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v6 = 3;
        AMSupportLogInternal();
        uint64_t v20 = *(void *)a4 | v18;
        goto LABEL_85;
      }
      return 0;
    }
    goto LABEL_36;
  }
  uint64_t v10 = Img4DecodeGetPropertyData();
  if (v10)
  {
    uint64_t v6 = v10;
    AMSupportLogInternal();
LABEL_29:
    uint64_t v20 = *(void *)a4 | 0x4000;
    goto LABEL_85;
  }
  if (a3 == 1)
  {
    unsigned int v25 = *(void **)(a4 + 104);
    if (v25)
    {
      size_t v26 = *(void *)(a4 + 112);
      if (v26)
      {
        if (_AMFDRDecodeInstPropertyMatchingWithType(__s2, v31, v25, v26, *(const void **)(a4 + 184), *(void *)(a4 + 192), 1, (void *)a4))return 0; {
        goto LABEL_77;
        }
      }
    }
    if ((*(unsigned char *)(a4 + 2017) & 0x20) == 0)
    {
LABEL_77:
      AMSupportLogInternal();
      uint64_t v6 = 0;
      goto LABEL_29;
    }
LABEL_47:
    AMSupportLogInternal();
    return 0;
  }
  if (a3) {
    return 0;
  }
  uint64_t v6 = 0;
  if ((_AMFDRDecodeInstPropertyMatchingWithType(__s2, v31, *(void **)(a4 + 136), *(void *)(a4 + 144), *(const void **)(a4 + 168), *(void *)(a4 + 176), 0, (void *)a4) & 1) == 0)
  {
    AMSupportLogInternal();
    uint64_t v6 = 0;
    uint64_t v20 = *(void *)a4 | 0x40000000;
    goto LABEL_85;
  }
  return v6;
}

uint64_t _AMFDRDecodeGetExpectedManifestHash(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return *(void *)(a2 + 2024);
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t _AMFDRDecodePropertiesFilterCallback(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v15 = (unint64_t *)a5;
  unint64_t v16 = 0xAAAAAAAAAAAA0000;
  v14[0] = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = 0xAAAAAAAAAAAAAAAALL;
  if (!a5) {
    goto LABEL_22;
  }
  if (!*(void *)(a5 + 104) || !*(void *)(a5 + 112))
  {
    if ((*(unsigned char *)(a5 + 2017) & 0x20) != 0)
    {
      int v5 = 1;
      goto LABEL_7;
    }
LABEL_22:
    AMSupportLogInternal();
    return 6;
  }
  int v5 = 0;
LABEL_7:
  uint64_t v6 = DERDecodeSeqContentInit(a1, v14);
  if (!v6)
  {
    while (1)
    {
      if ((_BYTE)v16) {
        goto LABEL_24;
      }
      uint64_t PropertyInSequence = DERImg4DecodeFindPropertyInSequence();
      if (PropertyInSequence == 1) {
        break;
      }
      uint64_t v8 = PropertyInSequence;
      if (PropertyInSequence) {
        goto LABEL_32;
      }
      if (BYTE1(v16)) {
        char v9 = v5;
      }
      else {
        char v9 = 0;
      }
      if (v9)
      {
        AMSupportLogInternal();
        if ((_BYTE)v16) {
          return 0;
        }
        uint64_t v8 = 0;
        uint64_t v11 = v15;
        unint64_t v12 = *v15 | 0x4000;
LABEL_26:
        *uint64_t v11 = v12;
        return v8;
      }
      uint64_t v10 = Img4DecodeEvaluateDictionaryProperties();
      if (v10)
      {
        uint64_t v8 = v10;
        goto LABEL_32;
      }
    }
    if (BYTE1(v16)) {
      AMSupportLogInternal();
    }
    if ((_BYTE)v16)
    {
      if (!v5) {
        return 0;
      }
    }
    else
    {
      *v15 |= 0x4000uLL;
LABEL_24:
      if ((v5 & 1) == 0) {
        return 0;
      }
    }
    AMSupportLogInternal();
    uint64_t v8 = 0;
    uint64_t v11 = v15;
    unint64_t v12 = *v15 & 0xFFFFFFFFFFFFBFFFLL;
    goto LABEL_26;
  }
  uint64_t v8 = (uint64_t)v6;
LABEL_32:
  AMSupportLogInternal();
  return v8;
}

uint64_t AMFDRDecodeTrustObject(void *a1, uint64_t a2, unsigned int a3)
{
  v5[0] = a2;
  v5[1] = a3;
  if (!DERParseSequenceToObject((uint64_t)v5, 5u, (uint64_t)&DERFDRTrustObjectItemSpecs, (unint64_t)a1, 0x90uLL, 0)&& *a1&& a1[1] == 4&& *(_DWORD *)*a1 == *(_DWORD *)"secb")
  {
    return 0;
  }
  AMSupportLogInternal();
  return 0x400000;
}

uint64_t AMFDRDecodeIterateTrustObjectTrustedBegin(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  CFStringRef v1 = (unint64_t *)(a1 + 64);
  uint64_t v5 = 0;
  if (!DERDecodeSeqContentInit((unint64_t *)(a1 + 16), (unint64_t *)(a1 + 64))
    && !DERDecodeSeqNext(v1, &v3)
    && v4
    && v5 == 4
    && *v4 == *(_DWORD *)"trst")
  {
    return 0;
  }
  AMSupportLogInternal();
  return 0x400000;
}

uint64_t AMFDRDecodeIterateTrustObjectTrustedKeyBegin(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  CFStringRef v1 = (unint64_t *)(a1 + 128);
  uint64_t v6 = 0;
  if (DERDecodeSeqContentInit((unint64_t *)(a1 + 112), (unint64_t *)(a1 + 128)))
  {
LABEL_3:
    AMSupportLogInternal();
    return 0x400000;
  }
  int v3 = DERDecodeSeqNext(v1, &v4);
  if (v3)
  {
    if (v3 != 1) {
      goto LABEL_3;
    }
    return 0x40000000000000;
  }
  else
  {
    if (!v5 || v6 != 4 || *v5 != *(_DWORD *)"trpk") {
      goto LABEL_3;
    }
    return 0;
  }
}

uint64_t AMFDRDecodeIterateTrustObjectRevokedBegin(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  CFStringRef v1 = (unint64_t *)(a1 + 80);
  uint64_t v5 = 0;
  if (!DERDecodeSeqContentInit((unint64_t *)(a1 + 48), (unint64_t *)(a1 + 80))
    && !DERDecodeSeqNext(v1, &v3)
    && v4
    && v5 == 4
    && *v4 == *(_DWORD *)"rvok")
  {
    return 0;
  }
  AMSupportLogInternal();
  return 0x400000;
}

uint64_t AMFDRDecodeIterateTrustObjectRevokedNext(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v7 = DERDecodeSeqNext((unint64_t *)(a1 + 80), &v10);
    if (v7)
    {
      if (v7 == 1)
      {
        int v8 = 0;
        uint64_t v9 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      int v8 = v12;
      if (v12 == 32)
      {
        uint64_t v9 = v11;
LABEL_9:
        uint64_t result = 0;
        *a2 = v9;
        *a3 = v8;
        return result;
      }
    }
    return 0x400000;
  }
  return result;
}

uint64_t AMFDRDecodeIterateTrustObjectSslRootBegin(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  CFStringRef v1 = (unint64_t *)(a1 + 96);
  uint64_t v5 = 0;
  if (!DERDecodeSeqContentInit((unint64_t *)(a1 + 32), (unint64_t *)(a1 + 96))
    && !DERDecodeSeqNext(v1, &v3)
    && v4
    && v5 == 4
    && *v4 == *(_DWORD *)"rssl")
  {
    return 0;
  }
  AMSupportLogInternal();
  return 0x400000;
}

uint64_t AMFDRDecodeIterateTrustObjectSslRootNext(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v7 = DERDecodeSeqNext((unint64_t *)(a1 + 96), &v10);
    if (v7)
    {
      if (v7 == 1)
      {
        int v8 = 0;
        uint64_t v9 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      int v8 = v12;
      if (v12)
      {
        uint64_t v9 = v11;
LABEL_9:
        uint64_t result = 0;
        *a2 = v9;
        *a3 = v8;
        return result;
      }
    }
    return 0x400000;
  }
  return result;
}

uint64_t AMFDRDecodeIterateProducerIDBegin(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
    v6[0] = a2;
    v6[1] = a3;
    if (DERDecodeSeqInit((uint64_t)v6, &v5, a1))
    {
      AMSupportLogInternal();
      return 0x80000000000;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AMFDRDecodeCheckProducerIDRevocation(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __n_4[0] = 0xAAAAAAAAAAAAAAAALL;
  __n_4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = 1;
  if (!a1 || !a2 || !a3) {
    return v3;
  }
  AMSupportLogInternal();
  uint64_t v7 = AMFDRDecodeIterateProducerIDBegin(__n_4, a2, a3);
  if (v7)
  {
    uint64_t v3 = v7;
LABEL_6:
    AMSupportLogInternal();
    return v3;
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v8 = DERDecodeSeqNext(__n_4, &v17);
  if (v8)
  {
    if (v8 != 1)
    {
      uint64_t v3 = 0x80000000000;
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v9 = v18;
  if (!v18) {
    return 0;
  }
  while (2)
  {
    unsigned int __n = 0;
    __s2 = 0;
    uint64_t v10 = AMFDRDecodeIterateTrustObjectRevokedBegin(a1);
    if (v10)
    {
      uint64_t v3 = v10;
      goto LABEL_6;
    }
    while (1)
    {
      uint64_t v11 = AMFDRDecodeIterateTrustObjectRevokedNext(a1, &__s2, &__n);
      if (v11)
      {
        uint64_t v3 = v11;
        goto LABEL_6;
      }
      if (!__s2) {
        break;
      }
      if (!memcmp(v9, __s2, __n))
      {
        AMSupportLogInternal();
        return 0x10000000000;
      }
    }
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v12 = DERDecodeSeqNext(__n_4, &v17);
    if (v12)
    {
      if (v12 != 1)
      {
        uint64_t v3 = 0x80000000000;
        goto LABEL_6;
      }
      return 0;
    }
    uint64_t v3 = 0;
    uint64_t v9 = v18;
    if (v18) {
      continue;
    }
    return v3;
  }
}

uint64_t AMFDRDecodeEvaluateTrustInternal(uint64_t a1)
{
  if (!*(void *)(a1 + 72) || !*(void *)(a1 + 80)) {
    *(void *)a1 |= 0x40000uLL;
  }
  if ((!*(void *)(a1 + 104) || !*(void *)(a1 + 112)) && (*(unsigned char *)(a1 + 2017) & 0x20) == 0)
  {
    AMSupportLogInternal();
    uint64_t result = *(void *)a1 | 1;
LABEL_12:
    *(void *)a1 = result;
    return result;
  }
  if (*(void *)(a1 + 8) && *(void *)(a1 + 16))
  {
    if (_AMFDRDecodeCombined(a1))
    {
      AMSupportLogInternal();
      uint64_t v3 = *(void *)a1;
      *(void *)(a1 + 1912) = *(void *)(a1 + 8);
      *(void *)(a1 + 1920) = *(void *)(a1 + 16);
      uint64_t result = v3 | 0x5A01C00;
      goto LABEL_12;
    }
  }
  else if (!*(void *)(a1 + 1944) || !*(void *)(a1 + 1952))
  {
    *(void *)a1 |= 0x200000uLL;
  }
  uint64_t v4 = _AMFDRDecodeVerifyTrustObject(a1);
  if (v4) {
    *(void *)a1 |= v4;
  }
  uint64_t v5 = _AMFDRDecodeVerifyData((uint64_t *)a1);
  if (v5) {
    *(void *)a1 |= v5;
  }
  unsigned int v25 = 0;
  int v24 = 0;
  if ((!*(void *)(a1 + 344) || !*(_DWORD *)(a1 + 352)) && (!*(void *)(a1 + 232) || !*(void *)(a1 + 240)))
  {
LABEL_48:
    AMSupportLogInternal();
    goto LABEL_52;
  }
  uint64_t v6 = AMFDRDecodeIterateSysconfigBegin(*(void *)(a1 + 1912), *(_DWORD *)(a1 + 1920), &v25, &v24);
  uint64_t v7 = v25;
  if (!v25 || v6)
  {
LABEL_49:
    AMSupportLogInternal();
    uint64_t v17 = *(void *)a1 | 0x400000000000000;
    goto LABEL_51;
  }
  char v8 = 0;
  while (1)
  {
    unsigned int v23 = 0;
    char __n_7 = 0;
    unsigned int __n = 0;
    __s2 = 0;
    uint64_t v9 = AMFDRDecodeIterateSysconfigPayloadNext((uint64_t)v7, &v23, &__n_7, &__s2, &__n, 0);
    if (v9)
    {
      if (v9 == 0x40000000000000)
      {
        if (!*(void *)(a1 + 232) || (*(void *)(a1 + 240) == 0) | v8 & 1) {
          goto LABEL_52;
        }
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    int v10 = AMFDRTagsStringToTag(&v23);
    if (v10 == 1634953572)
    {
      uint64_t v11 = *(const void **)(a1 + 232);
      if (v11)
      {
        size_t v12 = *(void *)(a1 + 240);
        if (v12)
        {
          if (v12 != __n)
          {
            AMSupportLogInternal();
            *(void *)a1 |= 0x200000000000000uLL;
            uint64_t v11 = *(const void **)(a1 + 232);
            size_t v12 = __n;
          }
          if (memcmp(v11, __s2, v12))
          {
            AMSupportLogInternal();
            *(void *)a1 |= 0x200000000000000uLL;
          }
          char v8 = 1;
        }
      }
    }
    if (*(void *)(a1 + 344))
    {
      unint64_t v13 = *(unsigned int *)(a1 + 352);
      if (v13) {
        break;
      }
    }
LABEL_47:
    uint64_t v7 = v25;
  }
  uint64_t v14 = 0;
  while (*(_DWORD *)(*(void *)(a1 + 344) + 4 * v14) != v10)
  {
LABEL_46:
    if (++v14 >= v13) {
      goto LABEL_47;
    }
  }
  uint64_t v15 = *(void *)(a1 + 360);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 368);
    if (v16)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      if (!_AMFDRDecodeSearchEntryFromPropertyList(v15, v16, v10, &v18) && v19 && v18)
      {
        unint64_t v13 = *(unsigned int *)(a1 + 352);
        goto LABEL_46;
      }
    }
  }
  AMSupportLogInternal();
  uint64_t v17 = *(void *)a1 | 0x1000000000000000;
LABEL_51:
  *(void *)a1 = v17;
LABEL_52:
  if (v25) {
    free(v25);
  }
  return *(void *)a1;
}

uint64_t AMFDRDecodeEvaluateTrustOffline(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v16 = (uint64_t *)malloc_type_malloc(0x7F8uLL, 0x10F0040823DC3CEuLL);
  if (v16)
  {
    uint64_t v17 = v16;
    bzero(v16, 0x7F8uLL);
    if (!a7 || !a8)
    {
      AMSupportLogInternal();
      uint64_t v19 = 1;
LABEL_13:
      free(v17);
      return v19;
    }
    _OWORD v17[13] = a3;
    v17[14] = a4;
    unint64_t v17[3] = a1;
    v17[4] = a2;
    v17[37] = a5;
    v17[38] = a6;
    v17[251] = (uint64_t)kAMFDRDecodeImplementationOffline;
    if (a3 && a4)
    {
      uint64_t v18 = _AMFDRDecodeVerifyData(v17);
      uint64_t v19 = *v17;
      if (!v18)
      {
LABEL_12:
        *a7 = v17[239];
        *a8 = v17[240];
        goto LABEL_13;
      }
      v19 |= v18;
    }
    else
    {
      AMSupportLogInternal();
      uint64_t v19 = *v17 | 1;
    }
    uint64_t *v17 = v19;
    goto LABEL_12;
  }
  AMSupportLogInternal();
  return 0x80000000000000;
}

unint64_t _AMFDRDecodeTolerateErrorsForOptions(__int16 a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 2) != 0 && (a2 & 0x2600000000100) != 0)
  {
    AMSupportLogInternal();
    v2 &= 0xFFFD9FFFFFFFFEFFLL;
  }
  if ((a1 & 4) != 0 && (v2 & 0x140000) != 0)
  {
    AMSupportLogInternal();
    v2 &= 0xFFFFFFFFFFEBFFFFLL;
  }
  if ((a1 & 8) != 0)
  {
    uint64_t v4 = 0x8005A33C80;
    if ((a1 & 1) == 0) {
      uint64_t v4 = 0x8005A03C00;
    }
    uint64_t v5 = v2 & v4;
    if ((v2 & v4) != 0)
    {
      AMSupportLogInternal();
      v2 ^= v5;
    }
  }
  if ((a1 & 0x10) != 0 && (v2 & 0x1040000300000) != 0)
  {
    AMSupportLogInternal();
    v2 &= 0xFFFEFBFFFFCFFFFFLL;
  }
  if ((a1 & 0x40) != 0 && (v2 & 0x2C0100) != 0)
  {
    AMSupportLogInternal();
    v2 &= 0xFFFFFFFFFFD3FEFFLL;
  }
  if ((a1 & 0x4000) != 0 && (v2 & 0x1000000000000000) != 0)
  {
    AMSupportLogInternal();
    return v2 & 0xEFFFFFFFFFFFFFFFLL;
  }
  return v2;
}

uint64_t AMFDRDecodeCombined(uint64_t a1, unsigned int a2, void *a3, _DWORD *a4, void *a5, _DWORD *a6)
{
  size_t v12 = malloc_type_malloc(0x7F8uLL, 0x10F0040823DC3CEuLL);
  if (v12)
  {
    unint64_t v13 = v12;
    bzero(v12, 0x7F8uLL);
    if (a1 && a2 && a3 && a4 && a5 && a6)
    {
      v13[1] = a1;
      v13[2] = a2;
      uint64_t v14 = _AMFDRDecodeCombined((uint64_t)v13);
      if (!v14)
      {
        *a3 = v13[243];
        *a4 = v13[244];
        uint64_t v15 = v13[4];
        *a5 = v13[3];
        *a6 = v15;
      }
    }
    else
    {
      AMSupportLogInternal();
      uint64_t v14 = 1;
    }
    free(v13);
  }
  else
  {
    AMSupportLogInternal();
    return 0x80000000000000;
  }
  return v14;
}

uint64_t _AMFDRDecodeCombined(uint64_t a1)
{
  memset(v16, 170, sizeof(v16));
  long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  long long v13 = 0u;
  if (DERDecodeItem(a1 + 8, v16))
  {
    AMSupportLogInternal();
    *(void *)a1 |= 0x80uLL;
    return 128;
  }
  if (v16[0] != 0x2000000000000010)
  {
    AMSupportLogInternal();
    *(void *)a1 |= 0x10000uLL;
    return 0x10000;
  }
  unint64_t v3 = *(void *)(a1 + 8) + *(void *)(a1 + 16);
  if (v3 < v16[1] + v16[2])
  {
    AMSupportLogInternal();
    *(void *)a1 |= 4uLL;
    return 4;
  }
  if (v3 > v16[1] + v16[2])
  {
    AMSupportLogInternal();
    *(void *)a1 |= 8uLL;
    return 8;
  }
  if (DERParseSequenceContentToObject(&v16[1], 3u, (uint64_t)&DERFDRCombinedItemSpecs, (unint64_t)&v13, 0x30uLL, 0))goto LABEL_29; {
  if (!(void)v13 || *((void *)&v13 + 1) != 4)
  }
    goto LABEL_28;
  if (*(_DWORD *)v13 != *(_DWORD *)"comb")
  {
LABEL_29:
    *(void *)a1 |= 0x20000uLL;
    return 0x20000;
  }
  if ((void)v14 && *((void *)&v14 + 1))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    if (DERParseSequenceContentToObject((unint64_t *)&v14, 2u, (uint64_t)&DERFDRItemSpecs, (unint64_t)&v11, 0x20uLL, 0)|| !(void)v11|| *((void *)&v11 + 1) != 4|| *(_DWORD *)v11 != *(_DWORD *)"fdrd")
    {
LABEL_28:
      AMSupportLogInternal();
      goto LABEL_29;
    }
    uint64_t v8 = *((void *)&v12 + 1);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v8;
    if ((*(unsigned char *)(a1 + 2017) & 8) != 0)
    {
      DataFromMultichar Combined = _AMFDRDecodeFindDataFromMultiCombined(a1);
      if (DataFromMultiCombined)
      {
        AMSupportLogInternal();
        uint64_t v10 = *((void *)&v12 + 1);
        *(void *)(a1 + 24) = v12;
        *(void *)(a1 + 32) = v10;
      }
    }
    else
    {
      DataFromMultichar Combined = 0;
    }
  }
  else
  {
    *(void *)a1 |= 0x200uLL;
    DataFromMultichar Combined = 512;
  }
  if (!v15[0] || !v15[1])
  {
    uint64_t v6 = *(void *)a1 | 0x200000;
LABEL_35:
    *(void *)a1 = v6;
    return DataFromMultiCombined;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  if (DERParseSequenceContentToObject(v15, 2u, (uint64_t)&DERFDRItemSpecs, (unint64_t)&v11, 0x20uLL, 0)|| !(void)v11|| *((void *)&v11 + 1) != 4|| *(_DWORD *)v11 != *(_DWORD *)"secb")
  {
    AMSupportLogInternal();
    uint64_t v7 = 0x20000;
    DataFromMultichar Combined = 0x20000;
LABEL_34:
    uint64_t v6 = *(void *)a1 | v7;
    goto LABEL_35;
  }
  long long v9 = v12;
  *(_OWORD *)(a1 + 1944) = v12;
  uint64_t v7 = 0x200000;
  if (!(void)v9 || !*((void *)&v9 + 1)) {
    goto LABEL_34;
  }
  return DataFromMultiCombined;
}

uint64_t AMFDRDecodePublicKey(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    long long v6 = 0uLL;
    unint64_t v5 = 0;
    *(void *)(a1 + 32) = a2;
    *(void *)(a1 + 40) = a3;
    if (_AMFDRDecodePubKey(a1 + 32, (unint64_t *)a1, a1 + 48)) {
      goto LABEL_11;
    }
    if (!DEROidCompare(a1 + 48, (uint64_t)&oidEcPubKey))
    {
      AMSupportLogInternal();
      return 64;
    }
    if (DERDecodeItem(a1 + 64, &v5))
    {
LABEL_11:
      AMSupportLogInternal();
      return 16;
    }
    else
    {
      uint64_t result = 0;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  return result;
}

uint64_t _AMFDRDecodePubKey(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v8 = v5;
  long long v9 = v5;
  char v7 = -86;
  uint64_t result = DERParseSequenceToObject(a1, (unsigned __int16)DERNumSubjPubKeyInfoItemSpecs, (uint64_t)&DERSubjPubKeyInfoItemSpecs, (unint64_t)&v8, 0x20uLL, 0x20uLL);
  if (!result)
  {
    uint64_t result = DERParseSequenceContentToObject((unint64_t *)&v8, (unsigned __int16)DERNumAlgorithmIdItemSpecs, (uint64_t)&DERAlgorithmIdItemSpecs, a3, 0x20uLL, 0x20uLL);
    if (!result)
    {
      if (DEROidCompare(a3, (uint64_t)&oidRsa) || DEROidCompare(a3, (uint64_t)&oidEcPubKey))
      {
        uint64_t result = DERParseBitString((uint64_t)&v9, a2, &v7);
        if (!result)
        {
          if (v7) {
            return 3;
          }
          else {
            return 0;
          }
        }
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

uint64_t AMFDRDecodeCertificate(unint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)(a1 + 256) = a2;
    *(void *)(a1 + 264) = a3;
    if (DERParseSequenceToObject(a1 + 256, (unsigned __int16)DERNumSignedCertCrlItemSpecs, (uint64_t)&DERSignedCertCrlItemSpecs, a1, 0x30uLL, 0x30uLL)|| DERParseSequenceToObject(a1, 0xAu, (uint64_t)&FDRDERTBSCertItemSpecs, a1 + 48, 0xA0uLL, 0xA0uLL)|| _AMFDRDecodePubKey(a1 + 144, (unint64_t *)(a1 + 208), a1 + 224))
    {
      return 0x40000000000;
    }
    if (*(void *)(a1 + 248))
    {
      if (DEROidCompare(a1 + 224, (uint64_t)&oidEcPubKey))
      {
        if (*(void *)(a1 + 248) != 10) {
          return 0x40000000000;
        }
        long long v5 = *(unsigned char **)(a1 + 240);
        if (*v5 != 6 || v5[1] != 8 || memcmp(v5 + 2, &_oidEcPrime256v1, 8uLL)) {
          return 0x40000000000;
        }
      }
      else if (DEROidCompare(a1 + 224, (uint64_t)&oidRsa))
      {
        if (*(void *)(a1 + 248) != 2) {
          return 0x40000000000;
        }
        long long v6 = *(unsigned char **)(a1 + 240);
        if (*v6 != 5 || v6[1]) {
          return 0x40000000000;
        }
      }
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
    if (_AMFDRDecodeParseExtension(a1 + 48, (uint64_t)&___oidAppleFDRClientID, &v7, (void *)(a1 + 272), 1))
    {
      AMSupportLogInternal();
    }
    else if (v7 != 12)
    {
      return 0x40000000000;
    }
    if (_AMFDRDecodeParseExtension(a1 + 48, (uint64_t)&___oidAppleSecureBootCertificateProperties, &v7, (void *)(a1 + 288), 0))
    {
      AMSupportLogInternal();
      return 0;
    }
    if (v7 == 0x2000000000000011) {
      return 0;
    }
    return 0x40000000000;
  }
  return result;
}

uint64_t _AMFDRDecodeParseExtension(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  v20[0] = 0xAAAAAAAAAAAAAAAALL;
  v20[1] = 0xAAAAAAAAAAAAAAAALL;
  memset(v18, 170, sizeof(v18));
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = v5;
  long long v17 = v5;
  memset(v15, 170, sizeof(v15));
  uint64_t v6 = 1;
  v16[0] = v5;
  if (a1 && a2 && a4)
  {
    *a4 = 0;
    a4[1] = 0;
    if (*(void *)(a1 + 152) && (v10 = *(void *)(a1 + 144), uint64_t v9 = a1 + 144, v10))
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v6 = 16;
      if (!DERDecodeSeqInit(v9, &v19, v20) && v19 == 0x2000000000000010)
      {
        uint64_t v6 = 2;
        while (!DERDecodeSeqNext(v20, v18))
        {
          if (v18[0] != 0x2000000000000010
            || DERParseSequenceContentToObject(&v18[1], (unsigned __int16)DERNumExtensionItemSpecs, (uint64_t)&DERExtensionItemSpecs, (unint64_t)v16, 0x30uLL, 0x30uLL))
          {
            return 16;
          }
          if (DEROidCompare(a2, (uint64_t)v16))
          {
            if (DERDecodeItem((uint64_t)&v17, v15)) {
              return 0x40000000000;
            }
            uint64_t v6 = 0;
            *a3 = v15[0];
            if (a5) {
              long long v13 = &v15[1];
            }
            else {
              long long v13 = (unint64_t *)&v17;
            }
            *(_OWORD *)a4 = *(_OWORD *)v13;
            return v6;
          }
        }
      }
    }
    else
    {
      return 512;
    }
  }
  return v6;
}

double AMFDRDecodeImage4Certificate(_OWORD *a1, uint64_t a2, unsigned int a3)
{
  if (a1 && a2 && a3)
  {
    a1[17] = 0u;
    a1[18] = 0u;
    a1[15] = 0u;
    a1[16] = 0u;
    a1[13] = 0u;
    a1[14] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    memset(v22, 0, sizeof(v22));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    v17[0] = 0;
    v17[1] = 0;
    unint64_t v16 = 0;
    unint64_t v14 = 0;
    long long v15 = 0uLL;
    *(void *)&long long v25 = a2;
    *((void *)&v25 + 1) = a3;
    if (DERParseSequenceToObject((uint64_t)&v25, 4u, (uint64_t)&DERFDRImage4CertItemSpecs, (unint64_t)v22, 0x40uLL, 0x40uLL)|| !*(void *)&v22[0]|| *((void *)&v22[0] + 1) != 4|| **(_DWORD **)&v22[0] != *(_DWORD *)"IM4C"|| DERDecodeItem((uint64_t)&v23, &v16)|| v16 != 0x2000000000000011|| DERParseSequenceContentToObject(v17, 2u, (uint64_t)&DERFDRImage4CertSignedSectionItemSpecs, (unint64_t)&v20, 0x20uLL, 0x20uLL)|| DERDecodeItem((uint64_t)&v21, &v14)
      || DERParseSequenceToObject((uint64_t)&v20, 2u, (uint64_t)&DERFDRImage4CertPropertyItemSpecs, (unint64_t)&v18, 0x20uLL, 0x20uLL)|| !(void)v18|| *((void *)&v18 + 1) != 4|| *(_DWORD *)v18 != *(_DWORD *)"CRTP")
    {
      goto LABEL_27;
    }
    uint64_t v4 = 0;
    long long v5 = 0;
    do
    {
      uint64_t v6 = 0;
      uint64_t v7 = (uint64_t)*(&kAMFDRDecodeEcdsaInfoList + v4);
      while (*((void *)&v24 + 1) != *(_DWORD *)(v7 + 4) + v6)
      {
        if (++v6 == 3) {
          goto LABEL_22;
        }
      }
      long long v5 = *(_OWORD **)(v7 + 24);
LABEL_22:
      ++v4;
    }
    while (v4 != 3);
    if (!v5) {
      goto LABEL_27;
    }
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(uint64_t *)((char *)&kAMFDRDecodeEcdsaInfoList + v8);
      if (*((void *)&v15 + 1) == *(_DWORD *)v9) {
        break;
      }
      v8 += 8;
      if (v8 == 24) {
        goto LABEL_27;
      }
    }
    long long v11 = *(long long **)(v9 + 16);
    if (v11)
    {
      *a1 = v23;
      a1[2] = v24;
      a1[1] = *v5;
      a1[13] = v15;
      a1[14] = oidEcPubKey;
      long long v12 = *v11;
      a1[18] = v19;
      long long v13 = v25;
      a1[15] = v12;
      a1[16] = v13;
      double result = *(double *)&v15;
      a1[9] = v15;
    }
    else
    {
LABEL_27:
      AMSupportLogInternal();
    }
  }
  return result;
}

uint64_t AMFDRDecodeIterateCertChainBegin(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a1 = a2;
      a1[1] = a3;
      a1[2] = 0;
    }
  }
  return result;
}

void AMFDRDecodeIterateCertChainNext(uint64_t a1, _OWORD **a2, _DWORD *a3)
{
}

void AMFDRDecodeIterateCertChainNextWithOptions(uint64_t a1, __int16 a2, _OWORD **a3, _DWORD *a4)
{
  unsigned int v15 = 0;
  if (a1 && a3 && *(void *)a1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      if (!AMFDRDecodeParseDERLengthFromBuffer(*(void *)a1, v7, &v15))
      {
        unint64_t v9 = *(void *)(a1 + 8);
        if (v9 >= v15)
        {
          uint64_t v10 = *a3;
          uint64_t v11 = *(void *)a1;
          if ((a2 & 0x100) != 0) {
            AMFDRDecodeImage4Certificate(v10, v11, v9);
          }
          else {
            uint64_t v12 = AMFDRDecodeCertificate((unint64_t)v10, v11, v9);
          }
          if (!v12)
          {
            int v13 = *(unsigned __int16 *)(a1 + 16);
            *(_WORD *)(a1 + 16) = v13 + 1;
            *a4 = v13;
            uint64_t v14 = *(void *)(a1 + 8) - v15;
            *(void *)a1 += v15;
            *(void *)(a1 + 8) = v14;
          }
        }
      }
    }
    else
    {
      *a3 = 0;
    }
  }
}

uint64_t AMFDRDecodeCheckCertRevocation(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int __n = 0;
  __s2 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __s1[0] = v4;
  __s1[1] = v4;
  v15[0] = v4;
  v15[1] = v4;
  __n_4[0] = v4;
  __n_4[1] = v4;
  unsigned int v5 = AMSupportDigestSha256();
  if (v5) {
    goto LABEL_3;
  }
  unsigned int v5 = AMSupportDigestSha256();
  if (v5) {
    goto LABEL_3;
  }
  if (*(void *)(a2 + 272) && *(void *)(a2 + 280))
  {
    unsigned int v5 = AMSupportDigestSha256();
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5;
LABEL_4:
      AMSupportLogInternal();
      return v6;
    }
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = AMFDRDecodeIterateTrustObjectRevokedBegin(a1);
  if (v9)
  {
    uint64_t v6 = v9;
    goto LABEL_4;
  }
  uint64_t v10 = AMFDRDecodeIterateTrustObjectRevokedNext(a1, &__s2, &__n);
  if (v10)
  {
    uint64_t v6 = v10;
    goto LABEL_4;
  }
  while (1)
  {
    uint64_t v6 = (uint64_t)__s2;
    if (!__s2) {
      return v6;
    }
    size_t v11 = __n;
    if (!memcmp(__s1, __s2, __n))
    {
      uint64_t v6 = 0x10000000000;
      goto LABEL_4;
    }
    if (!memcmp(v15, (const void *)v6, v11))
    {
      uint64_t v6 = 0x10000000000;
      goto LABEL_4;
    }
    if (v8 && !memcmp(__n_4, (const void *)v6, v11))
    {
      uint64_t v6 = 0x10000000000;
      goto LABEL_4;
    }
    uint64_t v6 = AMFDRDecodeIterateTrustObjectRevokedNext(a1, &__s2, &__n);
    if (v6) {
      goto LABEL_4;
    }
  }
}

uint64_t AMFDRDecodeVerifyCertIssuerWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, void *a5)
{
  if (!a3)
  {
    AMSupportLogInternal();
    return 1;
  }
  if ((a4 & 0x100) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9)
      {
        if (_AMFDRDecodeVerifySignatureDataWithOid(*(const void **)(a2 + 208), *(_DWORD *)(a2 + 216), *(void *)(a1 + 32), v9, *(void *)a1, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16), v8, a2 + 240, 1, a5))
        {
          uint64_t v10 = 0x20000000000;
        }
        else
        {
          AMSupportLogInternal();
          uint64_t v10 = AMFDRDecodeCheckCertRevocation(a3, a1);
          if (!v10) {
            return v10;
          }
        }
      }
      else
      {
        uint64_t v10 = 0x40000000000;
      }
    }
    else
    {
      uint64_t v10 = 0x40000000000;
    }
    AMSupportLogInternal();
    return v10;
  }

  return _AMFDRDecodeVerifyCertIssuerInternal(a1, a2, a3, a5);
}

uint64_t _AMFDRDecodeVerifyCertIssuerInternal(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = v7;
  v17[1] = v7;
  uint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  size_t v8 = *(void *)(a2 + 136);
  if (v8 != *(void *)(a1 + 104) || memcmp(*(const void **)(a2 + 128), *(const void **)(a1 + 96), v8))
  {
    AMSupportLogInternal();
    uint64_t v10 = malloc_type_malloc(0x100uLL, 0xF9A4D92DuLL);
    _AMFDRDecodeSequenceString(*(void *)(a2 + 128), *(void *)(a2 + 136), v10);
    size_t v11 = malloc_type_malloc(0x100uLL, 0x60A05C50uLL);
    _AMFDRDecodeSequenceString(*(void *)(a1 + 96), *(void *)(a1 + 104), v11);
    AMSupportLogInternal();
    if (v10) {
      free(v10);
    }
    if (v11) {
      free(v11);
    }
    return 0x20000000000;
  }
  char v16 = -86;
  if (DERParseSequenceContentToObject((unint64_t *)(a1 + 16), (unsigned __int16)DERNumAlgorithmIdItemSpecs, (uint64_t)&DERAlgorithmIdItemSpecs, (unint64_t)v17, 0x20uLL, 0x20uLL)|| DERParseBitString(a1 + 32, (unint64_t *)&v14, &v16)|| v16)
  {
    AMSupportLogInternal();
    return 0x40000000000;
  }
  if (_AMFDRDecodeVerifySignatureDataWithOid(*(const void **)(a2 + 208), *(_DWORD *)(a2 + 216), v14, v15, *(void *)a1, *(unsigned int *)(a1 + 8), *(uint64_t *)&v17[0], DWORD2(v17[0]), a1 + 240, 0, a4))
  {
    AMSupportLogInternal();
    return 0x20000000000;
  }
  AMSupportLogInternal();
  if (!a3) {
    return 0;
  }
  uint64_t v12 = AMFDRDecodeCheckCertRevocation(a3, a1);
  if (v12) {
    AMSupportLogInternal();
  }
  return v12;
}

uint64_t AMFDRDecodeParseDERLengthFromBuffer(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  memset(v6, 170, sizeof(v6));
  uint64_t result = 1;
  if (a1 && a3)
  {
    v7[0] = a1;
    v7[1] = a2;
    if (DERDecodeItemPartialBufferGetLength((uint64_t)v7, v6, 0))
    {
      AMSupportLogInternal();
      return 2;
    }
    else
    {
      uint64_t result = 0;
      *a3 = LODWORD(v6[2]) - a1 + LODWORD(v6[1]);
    }
  }
  return result;
}

uint64_t AMFDRDecodeMultiSealingResponse(uint64_t a1, unsigned int a2, unsigned char *a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t), uint64_t a5)
{
  uint64_t v5 = 1;
  if (a1 && a2 && a3)
  {
    memset(v15, 0, sizeof(v15));
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)&long long v11 = a1;
    *((void *)&v11 + 1) = a2;
    if (DERParseSequenceToObject((uint64_t)&v11, 2u, (uint64_t)&DERFDRMultiResponseItemSpecs, (unint64_t)v15, 0x20uLL, 0)|| (long long v11 = v15[0], DERParseSequenceContentToObject((unint64_t *)&v11, 3u, (uint64_t)&DERFDRMultiSealingResponsePayloadItemSpecs, (unint64_t)&v12, 0x30uLL, 0)))
    {
      AMSupportLogInternal();
      return 16;
    }
    else if ((void)v13 && (uint64_t v10 = _AMFDRDecodeMultiSealingResposeRecords(1, (unint64_t *)&v13, a4, a5)) != 0 {
           || (void)v14 && (uint64_t v10 = _AMFDRDecodeMultiSealingResposeRecords(0, (unint64_t *)&v14, a4, a5)) != 0)
    }
    {
      uint64_t v5 = v10;
      AMSupportLogInternal();
    }
    else if ((void)v12 && *((void *)&v12 + 1) == 1)
    {
      uint64_t v5 = 0;
      *a3 = *(unsigned char *)v12;
    }
    else
    {
      AMSupportLogInternal();
      return 32;
    }
  }
  return v5;
}

uint64_t _AMFDRDecodeMultiSealingResposeRecords(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t), uint64_t a4)
{
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (!a2 || !*a2 || !a2[1]) {
    return 1;
  }
  v23[0] = 0;
  v23[1] = 0;
  long long v22 = 0uLL;
  unint64_t v21 = 0;
  if (DERDecodeSeqContentInit(a2, v23))
  {
LABEL_5:
    AMSupportLogInternal();
    return 16;
  }
  else
  {
    long long v8 = 0uLL;
    uint64_t v7 = 16;
    while (1)
    {
      long long v17 = v8;
      long long v18 = v8;
      long long v19 = v8;
      long long v20 = v8;
      long long v15 = v8;
      long long v16 = v8;
      int v9 = DERDecodeSeqNext(v23, &v21);
      if (v9) {
        break;
      }
      if (!*((void *)&v22 + 1)) {
        return v7;
      }
      if (v21 != 0x2000000000000010) {
        goto LABEL_34;
      }
      long long v24 = v22;
      if (DERParseSequenceContentToObject((unint64_t *)&v24, 4u, (uint64_t)&DERFDRMultiResponseRecordItemSpecs, (unint64_t)&v17, 0x40uLL, 0))goto LABEL_5; {
      if ((void)v18)
      }
      {
        long long v24 = v18;
        if (DERDecodeItem((uint64_t)&v24, &v21)) {
          goto LABEL_34;
        }
        if (v21 != 4)
        {
          AMSupportLogInternal();
          return 64;
        }
        uint64_t v10 = v22;
        if (!(void)v22 || (uint64_t v11 = *((void *)&v22 + 1)) == 0)
        {
LABEL_34:
          AMSupportLogInternal();
          return 32;
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      if ((void)v20)
      {
        long long v24 = v20;
        if (DERParseSequenceToObject((uint64_t)&v24, 2u, (uint64_t)&DERFDRMultiResponseErrorItemSpecs, (unint64_t)&v15, 0x20uLL, 0))goto LABEL_5; {
        if (!(void)v15 || *((void *)&v15 + 1) != 1)
        }
          goto LABEL_34;
      }
      if (a3)
      {
        uint64_t v12 = a3(v17, DWORD2(v17), v10, v11, v19, DWORD2(v19), a1, v15, DWORD2(v15), v16, DWORD2(v16), a4);
        if (v12)
        {
          uint64_t v14 = v12;
          AMSupportLogInternal();
          return v14;
        }
      }
      long long v8 = 0uLL;
    }
    if (v9 == 1) {
      return 0;
    }
  }
  return v7;
}

uint64_t AMFDRDecodeMultiResponse(uint64_t a1, unsigned int a2, unsigned char *a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t), uint64_t a5)
{
  uint64_t v5 = 1;
  if (a1 && a2 && a3)
  {
    memset(v15, 0, sizeof(v15));
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)&long long v11 = a1;
    *((void *)&v11 + 1) = a2;
    if (DERParseSequenceToObject((uint64_t)&v11, 2u, (uint64_t)&DERFDRMultiResponseItemSpecs, (unint64_t)v15, 0x20uLL, 0)|| (long long v11 = v15[0], DERParseSequenceContentToObject((unint64_t *)&v11, 3u, (uint64_t)&DERFDRMultiResponsePayloadItemSpecs, (unint64_t)&v12, 0x30uLL, 0)))
    {
      AMSupportLogInternal();
      return 16;
    }
    else if ((void)v13 && (uint64_t v10 = _AMFDRDecodeMultiResposeRecords(1, &v13, a4, a5)) != 0 {
           || (void)v14 && (uint64_t v10 = _AMFDRDecodeMultiResposeRecords(0, &v14, a4, a5)) != 0)
    }
    {
      uint64_t v5 = v10;
      AMSupportLogInternal();
    }
    else if ((void)v12 && *((void *)&v12 + 1) == 1)
    {
      uint64_t v5 = 0;
      *a3 = *(unsigned char *)v12;
    }
    else
    {
      AMSupportLogInternal();
      return 32;
    }
  }
  return v5;
}

uint64_t _AMFDRDecodeMultiResposeRecords(uint64_t a1, void *a2, uint64_t (*a3)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t), uint64_t a4)
{
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = 0;
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  if (!a2 || !*a2 || !a2[1]) {
    return 1;
  }
  v23[0] = 0;
  v23[1] = 0;
  long long v22 = 0uLL;
  unint64_t v21 = 0;
  if (DERDecodeSeqInit((uint64_t)a2, &v25, v23))
  {
LABEL_5:
    AMSupportLogInternal();
    return 16;
  }
  else if (v25 == 0x2000000000000011)
  {
    long long v8 = 0uLL;
    uint64_t v7 = 16;
    while (1)
    {
      long long v17 = v8;
      long long v18 = v8;
      long long v19 = v8;
      long long v20 = v8;
      long long v15 = v8;
      long long v16 = v8;
      int v9 = DERDecodeSeqNext(v23, &v21);
      if (v9) {
        break;
      }
      if (!*((void *)&v22 + 1)) {
        return v7;
      }
      if (v21 != 0x2000000000000010) {
        goto LABEL_26;
      }
      long long v24 = v22;
      if (DERParseSequenceContentToObject((unint64_t *)&v24, 4u, (uint64_t)&DERFDRMultiResponseRecordItemSpecs, (unint64_t)&v17, 0x40uLL, 0))goto LABEL_5; {
      if ((void)v18)
      }
      {
        long long v24 = v18;
        if (DERDecodeItem((uint64_t)&v24, &v21)) {
          goto LABEL_26;
        }
        if (v21 != 4)
        {
          AMSupportLogInternal();
          return 64;
        }
        uint64_t v10 = v22;
        if (!(void)v22) {
          goto LABEL_26;
        }
        uint64_t v11 = *((void *)&v22 + 1);
        if (!*((void *)&v22 + 1)) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      if ((void)v20)
      {
        long long v24 = v20;
        if (DERParseSequenceToObject((uint64_t)&v24, 2u, (uint64_t)&DERFDRMultiResponseErrorItemSpecs, (unint64_t)&v15, 0x20uLL, 0))goto LABEL_5; {
        if (!(void)v15 || *((void *)&v15 + 1) != 1)
        }
          goto LABEL_26;
      }
      if (a3)
      {
        uint64_t v12 = a3(v17, DWORD2(v17), v10, v11, v19, DWORD2(v19), a1, v15, DWORD2(v15), v16, DWORD2(v16), a4);
        if (v12)
        {
          uint64_t v14 = v12;
          AMSupportLogInternal();
          return v14;
        }
      }
      long long v8 = 0uLL;
    }
    if (v9 == 1) {
      return 0;
    }
  }
  else
  {
LABEL_26:
    AMSupportLogInternal();
    return 32;
  }
  return v7;
}

uint64_t AMFDRDecodeMetadata(unint64_t a1, unsigned int a2, uint64_t (*a3)(void, void, void, void, uint64_t), uint64_t a4)
{
  uint64_t v20 = 0;
  uint64_t v4 = 1;
  if (a1 && a2)
  {
    v17[0] = 0;
    v17[1] = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v14 = 0;
    unint64_t v18 = a1;
    uint64_t v19 = a2;
    if (DERDecodeSeqInit((uint64_t)&v18, &v20, v17))
    {
LABEL_4:
      AMSupportLogInternal();
      return 16;
    }
    else if (v20 == 0x2000000000000011)
    {
      long long v7 = 0uLL;
      uint64_t v4 = 16;
      while (1)
      {
        long long v12 = v7;
        long long v13 = v7;
        int v8 = DERDecodeSeqNext(v17, &v14);
        if (v8) {
          break;
        }
        if (!v16) {
          return 512;
        }
        if (v14 != 0x2000000000000010) {
          goto LABEL_14;
        }
        unint64_t v18 = v15;
        uint64_t v19 = v16;
        if (DERParseSequenceContentToObject(&v18, 2u, (uint64_t)&DERFDRMetadataRecordItemSpecs, (unint64_t)&v12, 0x20uLL, 0))goto LABEL_4; {
        if (a3)
        }
        {
          uint64_t v9 = a3(v12, DWORD2(v12), v13, DWORD2(v13), a4);
          if (v9)
          {
            uint64_t v11 = v9;
            AMSupportLogInternal();
            return v11;
          }
        }
        long long v7 = 0uLL;
      }
      if (v8 == 1) {
        return 0;
      }
    }
    else
    {
LABEL_14:
      AMSupportLogInternal();
      return 32;
    }
  }
  return v4;
}

uint64_t AMFDRDecodeGetImg4RawData(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t v4 = 1;
  if (a1 && a2)
  {
    if (Img4DecodeInit())
    {
      return 0x2000;
    }
    else
    {
      uint64_t v4 = 0;
      if (a3 && a4)
      {
        uint64_t v4 = 0;
        *a3 = 0xAAAAAAAAAAAAAAAALL;
        *a4 = -1431655766;
      }
    }
  }
  return v4;
}

uint64_t AMFDRDecodeGetImg4Manifest(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t v4 = 1;
  if (a1 && a2)
  {
    if (Img4DecodeInit())
    {
      AMSupportLogInternal();
      return 0x2000;
    }
    else
    {
      uint64_t v4 = 0;
      if (a3 && a4)
      {
        uint64_t v4 = 0;
        *a3 = 0xAAAAAAAAAAAAAAAALL;
        *a4 = -1431655766;
      }
    }
  }
  return v4;
}

uint64_t AMFDRDecodeFDR2Data(uint64_t a1, unsigned int a2, void *a3, _DWORD *a4, void *a5, _DWORD *a6)
{
  long long v18 = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  long long v17 = 0u;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  memset(v22, 170, sizeof(v22));
  if (DERDecodeItem((uint64_t)&v20, v22))
  {
    AMSupportLogInternal();
    return 128;
  }
  if (v22[0] != 0x2000000000000010)
  {
    AMSupportLogInternal();
    return 0x4000000000000;
  }
  if (v20 + v21 < v22[1] + v22[2])
  {
    AMSupportLogInternal();
    return 4;
  }
  if (v20 + v21 > v22[1] + v22[2])
  {
    AMSupportLogInternal();
    return 8;
  }
  if (DERParseSequenceContentToObject(&v22[1], 3u, (uint64_t)&DERFDR2DataItemSpecs, (unint64_t)&v17, 0x30uLL, 0))return 0x8000000000000; {
  if (!(void)v17 || *((void *)&v17 + 1) != 4 || *(_DWORD *)v17 != *(_DWORD *)"fdr2")
  }
  {
LABEL_14:
    AMSupportLogInternal();
    return 0x8000000000000;
  }
  uint64_t v10 = 512;
  if ((void)v18 && *((void *)&v18 + 1))
  {
    long long v15 = 0u;
    long long v16 = 0u;
    if (DERParseSequenceContentToObject((unint64_t *)&v18, 2u, (uint64_t)&DERFDRItemSpecs, (unint64_t)&v15, 0x20uLL, 0)|| !(void)v15|| *((void *)&v15 + 1) != 4|| *(_DWORD *)v15 != *(_DWORD *)"fdrd")
    {
      goto LABEL_14;
    }
    uint64_t v10 = 0;
    int v13 = DWORD2(v16);
    *a3 = v16;
    *a4 = v13;
  }
  if (v19[0] && v19[1])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    if (!DERParseSequenceContentToObject(v19, 2u, (uint64_t)&DERFDRItemSpecs, (unint64_t)&v15, 0x20uLL, 0)&& (void)v15&& *((void *)&v15 + 1) == 4&& *(_DWORD *)v15 == *(_DWORD *)"mft2")
    {
      int v14 = DWORD2(v16);
      *a5 = v16;
      *a6 = v14;
      return v10;
    }
    goto LABEL_14;
  }
  return v10;
}

uint64_t AMFDRDecodeOfflineBlob(uint64_t a1, unsigned int a2, void *a3, _DWORD *a4, void *a5, _DWORD *a6, void *a7, _DWORD *a8)
{
  memset(v20, 170, sizeof(v20));
  v19[0] = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = a1;
  v21[1] = a2;
  if (DERDecodeSeqInit((uint64_t)v21, v20, v19) || DERDecodeSeqNext(v19, &v20[1])) {
    goto LABEL_3;
  }
  if (v20[1] != 2)
  {
LABEL_13:
    uint64_t v14 = 32;
    goto LABEL_4;
  }
  int v16 = v20[3];
  *a3 = v20[2];
  *a4 = v16;
  if (!DERDecodeSeqNext(v19, &v20[1]))
  {
    if (v20[1] != 2) {
      goto LABEL_13;
    }
    int v17 = v20[3];
    *a5 = v20[2];
    *a6 = v17;
    if (!DERDecodeSeqNext(v19, &v20[1]))
    {
      if (v20[1] == 2)
      {
        int v18 = v20[3];
        *a7 = v20[2];
        *a8 = v18;
        if (DERDecodeSeqNext(v19, &v20[1]) == 1) {
          return 0;
        }
        goto LABEL_3;
      }
      goto LABEL_13;
    }
  }
LABEL_3:
  uint64_t v14 = 16;
LABEL_4:
  AMSupportLogInternal();
  return v14;
}

uint64_t AMFDRDecodeTrustEvaluation(uint64_t *a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = malloc_type_malloc(0x7F8uLL, 0x10F0040823DC3CEuLL);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    bzero(v6, 0x7F8uLL);
    if (a1 && (uint64_t v8 = *a1) != 0 && (v9 = *((unsigned int *)a1 + 2), v9) && a2 && a3)
    {
      uint64_t v10 = a1[18];
      if ((v10 & 0x801) != 0)
      {
        *(void *)(v7 + 8) = v8;
        *(void *)(v7 + 16) = v9;
      }
      else
      {
        *(void *)(v7 + 1944) = a1[2];
        *(void *)(v7 + 1952) = *((unsigned int *)a1 + 6);
        *(void *)(v7 + 24) = v8;
        *(void *)(v7 + 32) = v9;
        uint64_t v13 = *((unsigned int *)a1 + 10);
        *(void *)(v7 + 280) = a1[4];
        *(void *)(v7 + 288) = v13;
      }
      uint64_t v14 = *((unsigned int *)a1 + 14);
      *(void *)(v7 + 72) = a1[6];
      *(void *)(v7 + 80) = v14;
      uint64_t v15 = *((unsigned int *)a1 + 18);
      *(void *)(v7 + 88) = a1[8];
      *(void *)(v7 + 96) = v15;
      uint64_t v16 = 12;
      if ((v10 & 0x80) == 0) {
        uint64_t v16 = 10;
      }
      uint64_t v17 = 13;
      if ((v10 & 0x80) == 0) {
        uint64_t v17 = 11;
      }
      uint64_t v18 = LODWORD(a1[v17]);
      *(void *)(v7 + 104) = a1[v16];
      *(void *)(v7 + 112) = v18;
      uint64_t v19 = *((unsigned int *)a1 + 34);
      *(void *)(v7 + 216) = a1[16];
      *(void *)(v7 + 224) = v19;
      uint64_t v20 = *((unsigned int *)a1 + 66);
      *(void *)(v7 + 232) = a1[32];
      *(void *)(v7 + 240) = v20;
      uint64_t v21 = *((unsigned int *)a1 + 26);
      *(void *)(v7 + 136) = a1[12];
      *(void *)(v7 + 144) = v21;
      uint64_t v22 = a1[14];
      uint64_t v23 = *((unsigned int *)a1 + 30);
      *(void *)(v7 + 168) = v22;
      *(void *)(v7 + 176) = v23;
      uint64_t v24 = a1[26];
      if (v24 && (uint64_t v25 = *((unsigned int *)a1 + 54), v25))
      {
        *(void *)(v7 + 184) = v24;
        uint64_t v23 = v25;
      }
      else
      {
        *(void *)(v7 + 184) = v22;
      }
      *(void *)(v7 + 192) = v23;
      *(void *)(v7 + 2016) = v10;
      if (v22) {
        BOOL v26 = 1;
      }
      else {
        BOOL v26 = v14 == 48;
      }
      BOOL v27 = !v26 && (v10 & 0x20) == 0;
      uint64_t v28 = kAMFDRDecodeImplementationSha1;
      if (!v27) {
        uint64_t v28 = kAMFDRDecodeImplementationSha384;
      }
      *(void *)(v7 + 2008) = v28;
      if ((v10 & 0x100) != 0)
      {
        *(void *)(v7 + 2008) = kAMFDRDecodeImplementationSha384;
        uint64_t v29 = *((unsigned int *)a1 + 58);
        *(void *)(v7 + 152) = a1[28];
        *(void *)(v7 + 160) = v29;
      }
      if ((v10 & 0x1000) != 0)
      {
        uint64_t v30 = *((unsigned int *)a1 + 62);
        *(void *)(v7 + 120) = a1[30];
        *(void *)(v7 + 128) = v30;
      }
      *(void *)(v7 + 2024) = a1[19];
      uint64_t v31 = a1[34];
      if (v31)
      {
        int v32 = *((_DWORD *)a1 + 70);
        if (v32)
        {
          *(void *)(v7 + 344) = v31;
          *(_DWORD *)(v7 + 352) = v32;
        }
      }
      uint64_t v33 = AMFDRDecodeEvaluateTrustInternal(v7);
      *a2 = *(void *)(v7 + 1912);
      *a3 = *(void *)(v7 + 1920);
      if (*(unsigned char *)(v7 + 2032))
      {
        long long v34 = *(_OWORD *)(v7 + 728);
        long long v35 = *(_OWORD *)(v7 + 760);
        *((_OWORD *)a1 + 11) = *(_OWORD *)(v7 + 744);
        *((_OWORD *)a1 + 12) = v35;
        *((_OWORD *)a1 + 10) = v34;
      }
      if (v33) {
        unint64_t v11 = _AMFDRDecodeTolerateErrorsForOptions(a1[18], v33);
      }
      else {
        unint64_t v11 = 0;
      }
    }
    else
    {
      AMSupportLogInternal();
      unint64_t v11 = 1;
    }
    free((void *)v7);
  }
  else
  {
    AMSupportLogInternal();
    return 0x80000000000000;
  }
  return v11;
}

uint64_t AMFDRDecodeMetaProperty(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  uint64_t v3 = 1;
  if (a1 && a2)
  {
    v14[0] = 0;
    v14[1] = 0;
    long long v13 = 0uLL;
    unint64_t v12 = 0;
    *(void *)&long long v15 = a1;
    *((void *)&v15 + 1) = a2;
    if (DERDecodeSeqContentInit((unint64_t *)&v15, v14)
      || DERDecodeSeqNext(v14, &v12)
      || (long long v15 = v13, DERDecodeSeqContentInit((unint64_t *)&v15, v14))
      || DERDecodeSeqNext(v14, &v12)
      || (long long v15 = v13,
          long long v10 = 0u,
          long long v11 = 0u,
          DERParseSequenceContentToObject((unint64_t *)&v15, 2u, (uint64_t)&DERFDRMetaPropertyItemSpecs, (unint64_t)&v10, 0x20uLL, 0))|| (long long v15 = v11, DERDecodeSeqContentInit((unint64_t *)&v15, v14)))
    {
      AMSupportLogInternal();
      return 16;
    }
    else
    {
      uint64_t v3 = 34;
      while (1)
      {
        int v6 = DERDecodeSeqNext(v14, &v12);
        if (v6) {
          break;
        }
        if (!*((void *)&v13 + 1)) {
          return 512;
        }
        if (a3)
        {
          if (!(void)v10
            || *((void *)&v10 + 1) != 16
            || (*(void *)v10 == 0x2D6C616D696E696DLL ? (BOOL v7 = *(void *)(v10 + 8) == 0x74736566696E616DLL) : (BOOL v7 = 0),
                !v7))
          {
            AMSupportLogInternal();
            return v3;
          }
          uint64_t v8 = a3(0);
          uint64_t v3 = 32;
          if (v8)
          {
            uint64_t v9 = v8;
            AMSupportLogInternal();
            return v9;
          }
        }
      }
      if (v6 == 1) {
        return 0;
      }
      else {
        return 16;
      }
    }
  }
  return v3;
}

uint64_t AMFDRDecodeManifestBody(void *a1)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v8 = v2;
  *(_OWORD *)&v8[16] = v2;
  long long v7 = v2;
  memset(v6, 170, sizeof(v6));
  int v5 = 0;
  uint64_t v3 = (char *)malloc_type_malloc(0x1D8uLL, 0x10100404982B0ADuLL);
  *a1 = v3;
  if (!Img4DecodeInitManifest()
    && !DERDecodeItem((uint64_t)(v3 + 280), v6)
    && v6[0] == 0x2000000000000011
    && !DERParseInteger((char **)v3 + 33, &v5)
    && !DERImg4DecodeFindProperty())
  {
    *(_OWORD *)(v3 + 56) = *(_OWORD *)&v8[8];
    if (!DERDecodeSeqContentInit((unint64_t *)v3 + 7, (unint64_t *)v3)) {
      return 0;
    }
  }
  AMSupportLogInternal();
  return 2;
}

uint64_t AMFDRDecodeManifestBodyNext(unint64_t **a1, void *a2, _DWORD *a3, void *a4, _DWORD *a5)
{
  unint64_t v9 = 0;
  long long v10 = 0uLL;
  int v5 = *a1;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  int v6 = DERDecodeSeqNext(v5, &v9);
  if (v6 == 1) {
    return 0x40000000000000;
  }
  if (v6) {
    goto LABEL_10;
  }
  Objectuint64_t PropertyData = Img4DecodeGetObjectPropertyData();
  if (ObjectPropertyData == 1) {
    return 0;
  }
  if (!ObjectPropertyData
    && !DERImg4DecodePropertyWithItem()
    && !Img4DecodeEvaluateDictionaryProperties())
  {
    return 0;
  }
LABEL_10:
  AMSupportLogInternal();
  return 2;
}

uint64_t _AMFDRDecodeGetDataInstCallback(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t PropertyData = 6;
LABEL_6:
    AMSupportLogInternal();
    return PropertyData;
  }
  if (a1 != 1768846196) {
    return 0;
  }
  uint64_t PropertyData = Img4DecodeGetPropertyData();
  if (PropertyData) {
    goto LABEL_6;
  }
  return PropertyData;
}

uint64_t AMFDRDecodeManifestBodyDestroy(void *a1)
{
  if (a1) {
    free(a1);
  }
  return 0;
}

void AMFDRDecodeIterateSysconfigDestroy(void **a1)
{
  if (a1)
  {
    long long v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
  }
}

uint64_t AMFDRDecodeIterateSysconfigBegin(uint64_t a1, unsigned int a2, void *a3, unsigned char *a4)
{
  uint64_t v14 = 0;
  uint64_t v4 = 1;
  if (!a1) {
    return v4;
  }
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  long long v7 = a4;
  if (!a4) {
    return v4;
  }
  unint64_t v9 = (void *)*a3;
  long long v10 = (void *)*a3;
  if (!*a3)
  {
    long long v10 = malloc_type_malloc(0x78uLL, 0x101004079CA27EEuLL);
    if (!v10) {
      return 0x80000000000000;
    }
  }
  v10[14] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)long long v10 = 0u;
  v15[0] = a1;
  v15[1] = a2;
  if (DERParseSequenceToObject((uint64_t)v15, 5u, (uint64_t)&DERSysconfigItemSpecs, (unint64_t)(v10 + 1), 0x50uLL, 0))
  {
    AMSupportLogInternal();
    uint64_t v4 = 0x400000000000000;
    goto LABEL_29;
  }
  if (v10[2] != 4)
  {
    AMSupportLogInternal();
    uint64_t v4 = 0x400000000000020;
    goto LABEL_29;
  }
  for (uint64_t i = 3; i != -1; --i)
    *v7++ = *(unsigned char *)(v10[1] + i);
  if (v10[4] != 4 || (int v12 = *(_DWORD *)v10[3], !(_BYTE)v12) || (v12 & 0xFFFF00) != 0x30000)
  {
    AMSupportLogInternal();
    uint64_t v4 = 0x402000000000000;
    goto LABEL_29;
  }
  if (DERDecodeSeqInit((uint64_t)(v10 + 5), &v14, v10 + 11))
  {
    uint64_t v4 = 0x400000000000010;
    goto LABEL_27;
  }
  if (v14 == 0x2000000000000011)
  {
    if (!DERDecodeSeqInit((uint64_t)(v10 + 7), &v14, v10 + 13))
    {
      if (v14 == 0x2000000000000011)
      {
        uint64_t v4 = 0;
        *(unsigned char *)long long v10 = 1;
        *a3 = v10;
        return v4;
      }
      goto LABEL_28;
    }
    uint64_t v4 = 0x400000000000010;
LABEL_27:
    AMSupportLogInternal();
    goto LABEL_29;
  }
LABEL_28:
  AMSupportLogInternal();
  uint64_t v4 = 0x400000000000040;
LABEL_29:
  if (!v9) {
    free(v10);
  }
  return v4;
}

uint64_t AMFDRDecodeIterateSysconfigPayloadNext(uint64_t a1, unsigned char *a2, unsigned char *a3, void *a4, _DWORD *a5, unsigned char *a6)
{
  unint64_t v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  uint64_t v6 = 1;
  BOOL v18 = 0;
  if (a3)
  {
    if (a1)
    {
      long long v7 = a2;
      if (a2)
      {
        if (a4 && a5)
        {
          if (!*(unsigned char *)a1) {
            goto LABEL_27;
          }
          int v12 = DERDecodeSeqNext((unint64_t *)(a1 + 88), &v23);
          if (v12 == 1) {
            return 0x40000000000000;
          }
          if (v12 || v23 != 0x2000000000000010)
          {
            AMSupportLogInternal();
            return 0x400000000000040;
          }
          if (DERParseSequenceContentToObject(v24, 5u, (uint64_t)&DERSysconfigPayloadItemSpecs, (unint64_t)v19, 0x50uLL, 0))
          {
            uint64_t v6 = 0x400000000000010;
            AMSupportLogInternal();
            return v6;
          }
          if (*((void *)&v19[0] + 1) != 4)
          {
            AMSupportLogInternal();
            return 0x400000000000020;
          }
          uint64_t v13 = *(void *)&v19[0];
          for (uint64_t i = 3; i != -1; --i)
            *v7++ = *(unsigned char *)(v13 + i);
          if (DERParseBooleanWithDefault((unsigned __int8 **)&v22, 0, &v18))
          {
LABEL_27:
            AMSupportLogInternal();
            return 0x400000000000000;
          }
          if (v18)
          {
            uint64_t v6 = 0;
            *a3 = 1;
          }
          else
          {
            int v16 = DWORD2(v21);
            if (*((void *)&v21 + 1))
            {
              *a4 = v21;
              *a5 = v16;
              uint64_t v6 = 0;
              if (a6) {
                *a6 = 1;
              }
            }
            else
            {
              uint64_t v6 = 0;
              int v17 = DWORD2(v20);
              *a4 = v20;
              *a5 = v17;
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t AMFDRDecodeIterateSysconfigMetadataNext(uint64_t a1, void *a2, _DWORD *a3, void *a4, _DWORD *a5, unsigned char *a6)
{
  unint64_t v20 = 0;
  v21[0] = 0;
  v21[1] = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  uint64_t v6 = 1;
  if (a1 && a2 && a3 && a4 && a5)
  {
    if (*(unsigned char *)a1)
    {
      int v12 = DERDecodeSeqNext((unint64_t *)(a1 + 104), &v20);
      if (v12 == 1)
      {
        return 0x40000000000000;
      }
      else if (v12 || v20 != 0x2000000000000010)
      {
        AMSupportLogInternal();
        return 0x400000000000040;
      }
      else if (DERParseSequenceContentToObject(v21, 3u, (uint64_t)&DERSysconfigMetadataItemSpecs, (unint64_t)&v17, 0x30uLL, 0))
      {
        uint64_t v6 = 0x400000000000010;
        AMSupportLogInternal();
      }
      else
      {
        int v13 = DWORD2(v17);
        *a2 = v17;
        *a3 = v13;
        int v14 = DWORD2(v19);
        if (*((void *)&v19 + 1))
        {
          *a4 = v19;
          *a5 = v14;
          uint64_t v6 = 0;
          if (a6) {
            *a6 = 1;
          }
        }
        else
        {
          uint64_t v6 = 0;
          int v15 = DWORD2(v18);
          *a4 = v18;
          *a5 = v15;
        }
      }
    }
    else
    {
      AMSupportLogInternal();
      return 0x400000000000000;
    }
  }
  return v6;
}

uint64_t _AMFDRDecodeVerifyTrustObject(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 1944);
  if (!v2)
  {
    AMSupportLogInternal();
    uint64_t v4 = 0x200000;
    goto LABEL_5;
  }
  uint64_t v3 = AMFDRDecodeTrustObject((void *)(a1 + 1768), v2, *(_DWORD *)(a1 + 1952));
  if (!v3)
  {
    if (!*(void *)(a1 + 72))
    {
      AMSupportLogInternal();
      uint64_t v4 = 0x40000;
      goto LABEL_5;
    }
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __s2[1] = v6;
    __s2[2] = v6;
    __s2[0] = v6;
    uint64_t v7 = *(void *)(a1 + 80);
    if (v7 == 48)
    {
      if (AMSupportDigestSha384())
      {
LABEL_15:
        AMSupportLogInternal();
        uint64_t v4 = 0x100000;
        goto LABEL_5;
      }
    }
    else
    {
      if (v7 != 32)
      {
        AMSupportLogInternal();
        uint64_t v4 = 0x80000;
        goto LABEL_5;
      }
      if (AMSupportDigestSha256()) {
        goto LABEL_15;
      }
    }
    if (!memcmp(*(const void **)(a1 + 72), __s2, *(void *)(a1 + 80))) {
      return 0;
    }
    goto LABEL_15;
  }
  uint64_t v4 = v3;
  AMSupportLogInternal();
LABEL_5:
  *(void *)a1 |= v4;
  return v4;
}

uint64_t _AMFDRDecodeFilterDataInstanceCallback(int a1, uint64_t a2, int a3, _WORD *a4)
{
  if (!*(void *)a4)
  {
    AMSupportLogInternal();
    return 6;
  }
  if (!a2)
  {
    AMSupportLogInternal();
    **(void **)a4 |= 1uLL;
    return 6;
  }
  if (a1 != 1768846196) {
    return 0;
  }
  uint64_t PropertyData = Img4DecodeGetPropertyData();
  if (PropertyData)
  {
    uint64_t v7 = PropertyData;
    AMSupportLogInternal();
    **(void **)a4 |= 0x4000uLL;
    return v7;
  }
  if (a3 != 1)
  {
    AMSupportLogInternal();
    return 0;
  }
  if (_AMFDRDecodeInstPropertyMatchingWithType((_DWORD *)0xAAAAAAAAAAAAAAAALL, 0, *(void **)(*(void *)a4 + 104), *(void *)(*(void *)a4 + 112), *(const void **)(*(void *)a4 + 184), *(void *)(*(void *)a4 + 192), 1, *(void **)a4))
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
    a4[4] = 1;
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
    a4[4] = 256;
  }
  return v7;
}

uint64_t _AMFDRDecodeInstPropertyMatchingWithType(_DWORD *a1, unsigned int a2, void *__s2, size_t __n, const void *a5, size_t a6, int a7, void *a8)
{
  if (a8)
  {
    uint64_t v11 = a8[252];
    if ((v11 & 0x100) != 0 && a8[19] && a8[20] && (!a7 || (v11 & 0x80) != 0))
    {
      a6 = 0;
      a5 = 0;
      unsigned int __n = a8[20];
      __s2 = (void *)a8[19];
    }
  }
  if (a2 < 5 || *a1 != 762014067)
  {
    if (__n != a2 || memcmp(a1, __s2, __n))
    {
LABEL_16:
      AMSupportLogInternal();
      return 0;
    }
    return 1;
  }
  size_t v12 = a2 - 4;
  if (__n >= v12) {
    goto LABEL_16;
  }
  int v13 = a1 + 1;
  if (memcmp(a1 + 1, __s2, __n) || *((unsigned char *)v13 + __n) != 45) {
    goto LABEL_16;
  }
  uint64_t result = 1;
  if (a6 && a5)
  {
    if (a6 != v12 + ~__n || memcmp((char *)v13 + __n + 1, a5, a6)) {
      goto LABEL_16;
    }
    return 1;
  }
  return result;
}

uint64_t _AMFDRDecodeSearchEntryFromPropertyList(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  v15[0] = a1;
  v15[1] = a2;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = v6;
  long long v10 = v6;
  uint64_t v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  unint64_t v11 = 0;
  if (!DERDecodeSeqInit((uint64_t)v15, &v14, v13)
    && v14 == 0x2000000000000011
    && !DERDecodeSeqNext(v13, &v11))
  {
    do
    {
      long long v9 = 0u;
      long long v10 = 0u;
      if (DERParseSequenceContentToObject(v12, 2u, (uint64_t)&DERFDRItemSpecs, (unint64_t)&v9, 0x20uLL, 0))break; {
      if (*((void *)&v9 + 1) == 4 && AMFDRTagsStringToTag((unsigned int *)v9) == a3)
      }
      {
        if (a4)
        {
          uint64_t result = 0;
          uint64_t v8 = *((void *)&v10 + 1);
          *a4 = v10;
          a4[1] = v8;
        }
        else
        {
          AMSupportLogInternal();
          return 1;
        }
        return result;
      }
    }
    while (!DERDecodeSeqNext(v13, &v11));
  }
  AMSupportLogInternal();
  return 2;
}

uint64_t _AMFDRDecodeVerifyData(uint64_t *a1)
{
  int v21 = 0;
  uint64_t v2 = a1[252];
  if ((~*((_DWORD *)a1 + 504) & 0x1080) == 0) {
    goto LABEL_63;
  }
  if ((v2 & 0x80) != 0)
  {
    if (Img4DecodeInitManifest()) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v2 = a1[252];
    goto LABEL_9;
  }
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  if ((v2 & 0x1000) == 0)
  {
    if (Img4DecodeInit()) {
      goto LABEL_17;
    }
    goto LABEL_5;
  }
  a1[106] = 0;
  *((_OWORD *)a1 + 51) = 0u;
  *((_OWORD *)a1 + 52) = 0u;
  *((_OWORD *)a1 + 49) = 0u;
  *((_OWORD *)a1 + 50) = 0u;
  *((_OWORD *)a1 + 47) = 0u;
  *((_OWORD *)a1 + 48) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  *((_OWORD *)a1 + 46) = 0u;
  *((_OWORD *)a1 + 43) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 41) = 0u;
  *((_OWORD *)a1 + 42) = 0u;
  *((_OWORD *)a1 + 39) = 0u;
  *((_OWORD *)a1 + 40) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *((_OWORD *)a1 + 35) = 0u;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  *((_OWORD *)a1 + 34) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  a1[51] = v3;
  a1[52] = v4;
  a1[61] = (uint64_t)"IM4P";
  a1[62] = 4;
  a1[67] = v3;
  a1[68] = v4;
LABEL_9:
  uint64_t v5 = a1[35];
  if ((v2 & 0x1000) != 0)
  {
    if (v5) {
      goto LABEL_16;
    }
LABEL_63:
    AMSupportLogInternal();
    uint64_t result = *a1 | 1;
    goto LABEL_34;
  }
  if (!v5)
  {
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
LABEL_20:
    int v21 = AMFDRTagsStringToTag((unsigned int *)a1[11]);
    goto LABEL_21;
  }
LABEL_16:
  *(_OWORD *)(a1 + 53) = *(_OWORD *)(a1 + 35);
  if (DERImg4DecodeManifest())
  {
LABEL_17:
    AMSupportLogInternal();
    uint64_t v6 = *a1;
    uint64_t v7 = 83901440;
LABEL_18:
    uint64_t result = v6 | v7;
    *a1 = v6 | v7;
    uint64_t v9 = a1[4];
    a1[239] = a1[3];
    a1[240] = v9;
    return result;
  }
  uint64_t v2 = a1[252];
  if ((v2 & 0x1000) != 0) {
    goto LABEL_20;
  }
LABEL_12:
  if ((v2 & 0x80) == 0)
  {
    if (Img4DecodeGetPayloadType()) {
      goto LABEL_17;
    }
    if (a1[66] != 3
      || ((uint64_t v14 = (unsigned __int16 *)a1[65], v15 = *v14, v16 = *((unsigned __int8 *)v14 + 2), v15 == 11825)
        ? (BOOL v17 = v16 == 48)
        : (BOOL v17 = 0),
          !v17))
    {
      AMSupportLogInternal();
      uint64_t v6 = *a1;
      uint64_t v7 = 0x8005001C00;
      goto LABEL_18;
    }
  }
LABEL_21:
  long long v10 = (unsigned int *)a1[11];
  if (v10 && ((unint64_t)(a1[12] - 3) >= 2 || AMFDRTagsStringToTag(v10) != v21))
  {
    AMSupportLogInternal();
    uint64_t result = *a1 | 0x100000004000C00;
LABEL_34:
    *a1 = result;
    return result;
  }
  uint64_t v11 = *a1;
  if ((a1[252] & 0x80) != 0)
  {
    if (!Img4DecodePerformManifestTrustEvaluationWithCallbacks()) {
      goto LABEL_56;
    }
  }
  else if (!Img4DecodePerformTrustEvaluationWithCallbacks())
  {
    goto LABEL_56;
  }
  if ((*a1 & 0x1000000000000) == 0)
  {
LABEL_51:
    AMSupportLogInternal();
    if (!*a1) {
      *a1 = 0x100000000000;
    }
    goto LABEL_58;
  }
  size_t v12 = (uint64_t (**)())a1[251];
  if (v12 == kAMFDRDecodeImplementationSha1)
  {
    int v13 = kAMFDRDecodeImplementationSha384;
    goto LABEL_42;
  }
  if (v12 == kAMFDRDecodeImplementationSha384)
  {
    int v13 = kAMFDRDecodeImplementationSha1;
LABEL_42:
    a1[251] = (uint64_t)v13;
    AMSupportLogInternal();
  }
  long long v18 = (uint64_t (**)())a1[251];
  if (v18 != kAMFDRDecodeImplementationSha1 && v18 != kAMFDRDecodeImplementationSha384) {
    goto LABEL_51;
  }
  uint64_t v19 = *a1;
  *a1 = v11;
  *((unsigned char *)a1 + 400) = 0;
  if ((a1[252] & 0x80) != 0) {
    int v20 = Img4DecodePerformManifestTrustEvaluationWithCallbacks();
  }
  else {
    int v20 = Img4DecodePerformTrustEvaluationWithCallbacks();
  }
  if (v20)
  {
    AMSupportLogInternal();
    *a1 = v19;
    goto LABEL_51;
  }
  if ((a1[252] & 0x20) != 0)
  {
    AMSupportLogInternal();
    *a1 |= 0x2000000000000uLL;
  }
  else
  {
    AMSupportLogInternal();
  }
LABEL_56:
  if (*((unsigned char *)a1 + 401)) {
    *((unsigned char *)a1 + 2032) = 1;
  }
LABEL_58:
  if ((*((unsigned char *)a1 + 2017) & 0x10) != 0)
  {
    uint64_t result = *a1;
    if (!*((unsigned char *)a1 + 376))
    {
      result |= 0x1000000000000000uLL;
      *a1 = result;
    }
  }
  else
  {
    uint64_t result = *a1;
  }
  a1[239] = a1[67];
  a1[240] = a1[68];
  return result;
}

double _AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData(void *a1, _OWORD *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  v14[0] = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v4;
  long long v45 = v4;
  long long v42 = v4;
  long long v43 = v4;
  long long v40 = v4;
  long long v41 = v4;
  long long v38 = v4;
  long long v39 = v4;
  long long v36 = v4;
  long long v37 = v4;
  long long v34 = v4;
  long long v35 = v4;
  long long v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  long long v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  long long v26 = v4;
  long long v27 = v4;
  long long v24 = v4;
  long long v25 = v4;
  long long v22 = v4;
  long long v23 = v4;
  long long v21 = v4;
  long long v19 = v4;
  long long v20 = v4;
  long long v18 = v4;
  unsigned int v13 = 0;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  int v11 = 0;
  memset(v10, 170, sizeof(v10));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v15 = 0;
  if (DERDecodeItem((uint64_t)(a1 + 3), &v15))
  {
    AMSupportLogInternal();
    *a1 |= 0x80uLL;
    return result;
  }
  if (v15 == 0x2000000000000010)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    if (v6 + v7 < (unint64_t)(v16 + v17))
    {
      AMSupportLogInternal();
      *a1 |= 4uLL;
      return result;
    }
    if (v6 + v7 > (unint64_t)(v16 + v17))
    {
      AMSupportLogInternal();
      *a1 |= 8uLL;
      return result;
    }
    int v8 = Img4DecodeInit();
    if (v8 || Img4DecodeGetManifest() || Img4DecodeGetPayloadType()) {
      goto LABEL_14;
    }
    if (v11 != AMFDRTagsStringToTag((unsigned int *)"mcmb")) {
      goto LABEL_18;
    }
    if (Img4DecodeGetPayload())
    {
LABEL_14:
      AMSupportLogInternal();
      return result;
    }
    if (!DERDecodeSeqInit((uint64_t)v14, &v10[16], v10) && *(void *)&v10[16] == 0x2000000000000011)
    {
      uint64_t v9 = v13;
      a1[35] = v12;
      a1[36] = v9;
      if (a2)
      {
        double result = *(double *)v10;
        *a2 = *(_OWORD *)v10;
      }
    }
    else
    {
LABEL_18:
      AMSupportLogInternal();
    }
  }
  else
  {
    AMSupportLogInternal();
    *a1 |= 0x10000uLL;
  }
  return result;
}

uint64_t _AMFDRDecodeFindDataFromMultiCombined(uint64_t a1)
{
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v14 = v2;
  *(_OWORD *)unsigned int __n = v2;
  *(_OWORD *)__s1 = v2;
  long long v13 = v2;
  v18[0] = 0;
  v18[1] = 0;
  unint64_t v17 = 0;
  _AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData((void *)a1, &v16);
  if (v3)
  {
    uint64_t v10 = v3;
    *(void *)a1 |= 0x20000uLL;
    AMSupportLogInternal();
    return v10;
  }
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    char v4 = 0;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 2017) & 0x20) == 0)
    {
      AMSupportLogInternal();
      return 1;
    }
    char v4 = 1;
  }
  if (DERDecodeSeqNext((unint64_t *)&v16, &v17)) {
    goto LABEL_36;
  }
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)unsigned int __n = 0u;
      *(_OWORD *)__s1 = 0u;
      long long v13 = 0u;
      if (DERParseSequenceContentToObject(v18, 4u, (uint64_t)&DERFDRMultiCombinedItemSpecs, (unint64_t)__s1, 0x40uLL, 0))
      {
        AMSupportLogInternal();
        return 0x20000;
      }
      if (__s1[1] != *(void **)(a1 + 96)
        || memcmp(__s1[0], *(const void **)(a1 + 88), (size_t)__s1[1])
        || (v4 & 1) == 0
        && (v14[1] != *(void *)(a1 + 112) || memcmp((const void *)v14[0], *(const void **)(a1 + 104), v14[1]))
        || __n[1] != *(void *)(a1 + 128))
      {
        goto LABEL_12;
      }
      int v8 = *(const void **)(a1 + 120);
      if (__n[0]) {
        break;
      }
      if (!v8) {
        goto LABEL_24;
      }
LABEL_12:
      if (DERDecodeSeqNext((unint64_t *)&v16, &v17))
      {
        if ((v5 & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_29;
      }
    }
    if (!v8 || memcmp((const void *)__n[0], v8, __n[1])) {
      goto LABEL_12;
    }
LABEL_24:
    if ((v4 & 1) == 0)
    {
      AMSupportLogInternal();
      uint64_t v6 = *((void *)&v13 + 1);
      uint64_t v7 = v13;
LABEL_29:
      uint64_t v10 = 0;
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v6;
      return v10;
    }
    if (v5) {
      break;
    }
    size_t v9 = v14[1];
    *(void *)(a1 + 104) = v14[0];
    *(void *)(a1 + 112) = v9;
    AMSupportLogInternal();
    uint64_t v6 = *((void *)&v13 + 1);
    uint64_t v7 = v13;
    char v5 = 1;
    if (DERDecodeSeqNext((unint64_t *)&v16, &v17)) {
      goto LABEL_29;
    }
  }
  AMSupportLogInternal();
  *(void *)a1 |= 0x4000uLL;
LABEL_36:
  AMSupportLogInternal();
  return 512;
}

uint64_t _AMFDRDecodeVerifySignatureDataWithOid(const void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, char a10, void *a11)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)&v22[0] = a7;
  *((void *)&v22[0] + 1) = a8;
  if (DEROidCompare((uint64_t)v22, (uint64_t)&oidSha1Rsa))
  {
    memset(&v22[1], 170, 20);
    if (AMSupportDigestSha1()) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = AMSupportRsaVerifySignatureSha1();
    if (!a11) {
      goto LABEL_36;
    }
LABEL_33:
    if (result != 2) {
      goto LABEL_36;
    }
    *a11 |= 0x80000000000000uLL;
    return 0xFFFFFFFFLL;
  }
  if (DEROidCompare((uint64_t)v22, (uint64_t)&oidSha256Rsa))
  {
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[1] = v14;
    _OWORD v22[2] = v14;
    if (AMSupportDigestSha256()) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = AMSupportRsaVerifySignatureSha256();
    if (a11) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  if (!DEROidCompare((uint64_t)v22, (uint64_t)&oidSha384Rsa))
  {
    if (DEROidCompare((uint64_t)v22, (uint64_t)&oidSha256Ecdsa))
    {
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v22[1] = v16;
      _OWORD v22[2] = v16;
      unint64_t v20 = 0;
      long long v21 = 0uLL;
      if (a9)
      {
        if (!a10)
        {
          if (DERDecodeItem(a9, &v20)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_26;
        }
        if (*(void *)(a9 + 8))
        {
          long long v21 = *(_OWORD *)a9;
LABEL_26:
          if (AMSupportDigestSha256()) {
            return 0xFFFFFFFFLL;
          }
          size_t v18 = a2;
          long long v19 = a1;
          goto LABEL_32;
        }
LABEL_38:
        AMSupportLogInternal();
        return 6;
      }
    }
    else
    {
      if (!DEROidCompare((uint64_t)v22, (uint64_t)&oidSha384Ecdsa)) {
        return 4;
      }
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      _OWORD v22[2] = v17;
      long long v23 = v17;
      v22[1] = v17;
      unint64_t v20 = 0;
      long long v21 = 0uLL;
      if (a9)
      {
        if (a10)
        {
          if (!*(void *)(a9 + 8)) {
            goto LABEL_38;
          }
          long long v21 = *(_OWORD *)a9;
        }
        else if (DERDecodeItem(a9, &v20))
        {
          return 0xFFFFFFFFLL;
        }
        if (AMSupportDigestSha384()) {
          return 0xFFFFFFFFLL;
        }
        size_t v18 = a2;
        long long v19 = a1;
LABEL_32:
        uint64_t result = AMFDRDecodeEcdsaVerifySignature(v19, v18);
        if (!a11) {
          goto LABEL_36;
        }
        goto LABEL_33;
      }
    }
    AMSupportLogInternal();
    return 0xFFFFFFFFLL;
  }
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v22[2] = v15;
  long long v23 = v15;
  v22[1] = v15;
  if (AMSupportDigestSha384()) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = AMSupportRsaVerifySignatureSha384();
  if (a11) {
    goto LABEL_33;
  }
LABEL_36:
  if (result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t AMFDRDecodeEcdsaVerifySignature(const void *a1, size_t a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    if (a2)
    {
      return AMSupportEcDsaVerifySignature();
    }
    else
    {
      char v5 = malloc_type_malloc(a2 + 1, 0xDCD66260uLL);
      if (v5)
      {
        uint64_t v6 = v5;
        *char v5 = 4;
        memcpy(v5 + 1, a1, a2);
        uint64_t v7 = AMSupportEcDsaVerifySignature();
        free(v6);
        return v7;
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

uint64_t _AMFDRDecodeSequenceString(unint64_t a1, unint64_t a2, _OWORD *a3)
{
  v20[0] = a1;
  v20[1] = a2;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = 0uLL;
  unint64_t v17 = 0;
  v19[0] = 0;
  v19[1] = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  if (a3)
  {
    a3[14] = 0uLL;
    a3[15] = 0uLL;
    a3[12] = 0uLL;
    a3[13] = 0uLL;
    a3[10] = 0uLL;
    a3[11] = 0uLL;
    a3[8] = 0uLL;
    a3[9] = 0uLL;
    a3[6] = 0uLL;
    a3[7] = 0uLL;
    a3[4] = 0uLL;
    a3[5] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    char v4 = DERDecodeSeqContentInit(v20, v19);
    if (v4)
    {
      uint64_t v12 = (uint64_t)v4;
    }
    else
    {
      uint64_t v5 = 0;
      size_t v6 = 255;
      while (1)
      {
        do
        {
          while (1)
          {
            uint64_t v7 = DERDecodeSeqNext(v19, &v17);
            if (v7)
            {
              uint64_t v12 = v7;
              if (v7 != 1) {
                goto LABEL_26;
              }
              return 0;
            }
            long long v14 = v18;
            if (v17 == 0x2000000000000011) {
              break;
            }
            AMSupportLogInternal();
          }
          long long v15 = 0u;
          long long v16 = 0u;
          uint64_t v8 = DERParseSequenceToObject((uint64_t)&v14, (unsigned __int16)DERNumAttributeTypeAndValueItemSpecs, (uint64_t)&DERAttributeTypeAndValueItemSpecs, (unint64_t)&v15, 0x20uLL, 0);
          if (v8)
          {
            uint64_t v12 = v8;
            goto LABEL_26;
          }
        }
        while (!(void)v16);
        long long v14 = v16;
        long long v18 = 0uLL;
        unint64_t v17 = 0;
        uint64_t v9 = DERDecodeItem((uint64_t)&v14, &v17);
        if (v9) {
          break;
        }
        if (v17 == 19 || v17 == 12)
        {
          if (v5)
          {
            if (!v6) {
              return 0;
            }
            *((unsigned char *)a3 + v5++) = 32;
            --v6;
          }
          uint64_t v10 = (char *)a3 + v5;
          uint64_t v11 = *((void *)&v18 + 1);
          if (v6 < *((void *)&v18 + 1))
          {
            memcpy(v10, (const void *)v18, v6);
            return 0;
          }
          v6 -= *((void *)&v18 + 1);
          memcpy(v10, (const void *)v18, *((size_t *)&v18 + 1));
          v5 += v11;
        }
      }
      uint64_t v12 = v9;
    }
  }
  else
  {
    uint64_t v12 = 3;
  }
LABEL_26:
  AMSupportLogInternal();
  return v12;
}

uint64_t AMFDRDecodeDigestByLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 48) {
    return AMSupportDigestSha384();
  }
  if (a4 == 32) {
    return AMSupportDigestSha256();
  }
  return 1;
}

uint64_t AMFDRSealingMapSetMGCopyAnswer()
{
  return AMSupportLogInternal();
}

uint64_t AMFDRSealingMapSetKeyQueryRetry(uint64_t result)
{
  gKeyQueryRetry = result;
  return result;
}

uint64_t CFArrayRetainAllowNULLCallBack(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 8))();
  }
  else {
    return 0;
  }
}

uint64_t CFArrayReleaseAllowNULLCallBack(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 16))();
  }
  return result;
}

__CFString *CFArrayCopyDescriptionAllowNULLCallBack(uint64_t a1)
{
  if (a1) {
    return (__CFString *)(*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 24))();
  }
  else {
    return &stru_26C899958;
  }
}

uint64_t CFArrayEqualAllowNULLCallBack()
{
  return (*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 32))();
}

CFStringRef AMFDRSealingMapCallMGCopyAnswer(const __CFString *a1, uint64_t a2)
{
  return AMFDRSealingMapCallMGCopyAnswerInternal(a1, a2, 0);
}

CFStringRef AMFDRSealingMapCallMGCopyAnswerInternal(CFStringRef theString, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!theString || !CFStringHasPrefix(theString, @"ZG:"))
  {
    uint64_t v32 = 0;
    int v31 = -1;
    goto LABEL_11;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFIndex Length = CFStringGetLength(@"ZG:");
  CFIndex v8 = CFStringGetLength(theString);
  v38.uint64_t length = v8 - CFStringGetLength(@"ZG:");
  v38.location = Length;
  CFStringRef v9 = CFStringCreateWithSubstring(v6, theString, v38);
  uint64_t v32 = 0;
  int v31 = -1;
  if (!v9)
  {
LABEL_11:
    unsigned int v12 = 0;
    do
    {
      CFStringRef v13 = (const __CFString *)MGCopyAnswerWithError();
      int v14 = gKeyQueryRetry;
      int v15 = v31;
      if (gKeyQueryRetry) {
        BOOL v16 = v31 == 12;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        usleep(0x3D090u);
        int v14 = gKeyQueryRetry;
        int v15 = v31;
      }
      unsigned int v17 = v12 + 1;
      if (v14) {
        BOOL v18 = v15 == 12;
      }
      else {
        BOOL v18 = 0;
      }
    }
    while (v18 && v13 == 0 && v12++ < 0x14);
    CFStringRef v10 = 0;
    int v21 = 1;
    if (!v13) {
      goto LABEL_55;
    }
    goto LABEL_30;
  }
  CFStringRef v10 = v9;
  if (gKeyQueryRetry)
  {
    if (_isAppleDeviceQueryFrameworkAvailable_onceToken != -1) {
      dispatch_once(&_isAppleDeviceQueryFrameworkAvailable_onceToken, &__block_literal_global_1213);
    }
    if (_isAppleDeviceQueryFrameworkAvailable_isAvailable == 1 && MEMORY[0x263F26D10])
    {
      uint64_t v11 = ZhuGeCopyValue();
LABEL_53:
      CFStringRef v13 = (const __CFString *)v11;
      goto LABEL_54;
    }
    if (_isZhuGeLegacyAvailable_onceToken != -1) {
      dispatch_once(&_isZhuGeLegacyAvailable_onceToken, &__block_literal_global_1217);
    }
    if (_isZhuGeLegacyAvailable_isAvailable)
    {
      ZhuGeCopyValueWithErrorSymbolLoc = (uint64_t (*)(CFStringRef, uint64_t, int *))getZhuGeCopyValueWithErrorSymbolLoc();
      if (!ZhuGeCopyValueWithErrorSymbolLoc) {
        AMFDRSealingMapCallMGCopyAnswerInternal_cold_1();
      }
      uint64_t v11 = ZhuGeCopyValueWithErrorSymbolLoc(v10, a2, &v31);
      goto LABEL_53;
    }
    CFStringRef format = @"ZhuGeCopyValueWithError symbol is not supported";
LABEL_63:
    AMFDRErrorPushInternal(a3, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCallMGCopyAnswerInternal", format, v30);
LABEL_64:
    CFStringRef v13 = 0;
LABEL_65:
    CFRelease(v10);
    goto LABEL_66;
  }
  if (_isAppleDeviceQueryFrameworkAvailable_onceToken != -1) {
    dispatch_once(&_isAppleDeviceQueryFrameworkAvailable_onceToken, &__block_literal_global_1213);
  }
  if (_isAppleDeviceQueryFrameworkAvailable_isAvailable != 1 || !MEMORY[0x263F26D10])
  {
    CFStringRef format = @"ZhuGeCopyValue symbol is not supported";
    goto LABEL_63;
  }
  int v33 = 250;
  int valuePtr = 0;
  CFNumberRef v23 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v24 = CFNumberCreate(v6, kCFNumberSInt32Type, &v33);
  if (v23 && v24)
  {
    *(_OWORD *)keys = xmmword_2642D1478;
    values[0] = v23;
    values[1] = v24;
    CFDictionaryRef v25 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  else
  {
    AMSupportLogInternal();
    CFDictionaryRef v25 = 0;
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (!v25)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCallMGCopyAnswerInternal", @"_createZhuGePreferences failed", v30);
    goto LABEL_64;
  }
  CFStringRef v13 = (const __CFString *)ZhuGeCopyValue();
  AMSupportSafeRelease();
LABEL_54:
  int v21 = 0;
  unsigned int v17 = 0;
  if (!v13)
  {
LABEL_55:
    if (v21)
    {
      if (v17 <= 0x13) {
        long long v27 = @"failed";
      }
      else {
        long long v27 = @"timed out waiting";
      }
      AMFDRErrorPushInternal(a3, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCallMGCopyAnswerInternal", @"AMFDRSealingMapCallMGCopyAnswer %@ for %@, error=%d.", (char)v27);
      CFStringRef v13 = 0;
      goto LABEL_66;
    }
    if (gKeyQueryRetry) {
      AMFDRErrorPushInternal((uint64_t)&v32, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCallMGCopyAnswerInternal", @"ZhuGeCopyValueWithError failed: %d", v31);
    }
    char v30 = (char)theString;
    CFStringRef format = @"AMFDRSealingMapCallMGCopyAnswer failed for %@, error=%@.";
    goto LABEL_63;
  }
LABEL_30:
  if (v17 >= 2 && !v31) {
    AMSupportLogInternal();
  }
  CFTypeID v22 = CFGetTypeID(v13);
  if (v22 == CFStringGetTypeID() && (!CFStringGetLength(v13) || !CFStringGetCharacterAtIndex(v13, 0)))
  {
    AMFDRErrorPushInternal(a3, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCallMGCopyAnswerInternal", @"AMFDRSealingMapCallMGCopyAnswer received empty string for %@", (char)theString);
    CFRelease(v13);
    CFStringRef v13 = 0;
  }
  if ((v21 & 1) == 0) {
    goto LABEL_65;
  }
LABEL_66:
  AMSupportSafeRelease();
  return v13;
}

void AMFDRSetSealingMap(CFTypeRef cf)
{
  if (gSealingMap)
  {
    CFRelease((CFTypeRef)gSealingMap);
    gSealingMap = 0;
  }
  if (cf) {
    gSealingMap = (uint64_t)CFRetain(cf);
  }
}

uint64_t AMFDRGetSealingMap()
{
  uint64_t result = gSealingMap;
  if (!gSealingMap)
  {
    if (sealingMapCacheQueue_onceToken != -1) {
      dispatch_once(&sealingMapCacheQueue_onceToken, &__block_literal_global_1232);
    }
    dispatch_sync((dispatch_queue_t)sealingMapCacheQueue_sealingMapCacheQueue, &__block_literal_global_1);
    return fileSystemSealingMap;
  }
  return result;
}

void __AMFDRGetSealingMap_block_invoke()
{
  if (!fileSystemSealingMap) {
    fileSystemSealingMap = copyFDRSealingMapFromFilesystem();
  }
}

uint64_t copyFDRSealingMapFromFilesystem()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFURLRef v1 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], @"/System/Library/FDR/FDRSealingMap.plist", kCFURLPOSIXPathStyle, 0);
  if (AMSupportCreateDictionaryFromFileURL())
  {
    AMSupportLogInternal();
    if (v1) {
      CFRelease(v1);
    }
    CFURLRef v1 = CFURLCreateWithFileSystemPath(v0, @"/usr/lib/FDRSealingMap.plist", kCFURLPOSIXPathStyle, 0);
    AMSupportCreateDictionaryFromFileURL();
  }
  AMSupportLogInternal();
  if (v1) {
    CFRelease(v1);
  }
  return 0;
}

uint64_t CFDictionaryValueRetainAllowNULLCallBack(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 8))();
  }
  else {
    return 0;
  }
}

uint64_t CFDictionaryValueReleaseAllowNULLCallBack(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 16))();
  }
  return result;
}

__CFString *CFDictionaryValueCopyDescriptionAllowNULLCallBack(uint64_t a1)
{
  if (a1) {
    return (__CFString *)(*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 24))();
  }
  else {
    return &stru_26C899958;
  }
}

uint64_t CFDictionaryValueEqualAllowNULLCallBack(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(MEMORY[0x263EFFF70] + 32))();
  }
  else {
    return (a1 | a2) == 0;
  }
}

uint64_t AMFDRSetRecoveryVerifier(uint64_t result)
{
  gRecoveryVerifier = result;
  return result;
}

CFStringRef AMFDRSealingMapCopyDataInstanceForSealingMapEntry(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, uint64_t a4)
{
  return _copyIdentifierListForSealingMapEntry(a1, a2, a3, 0, 0, a4);
}

CFStringRef _copyIdentifierListForSealingMapEntry(const __CFAllocator *a1, CFTypeRef cf, const __CFDictionary *a3, int a4, int a5, uint64_t a6)
{
  CFTypeID v11 = CFGetTypeID(cf);
  if (v11 != CFDictionaryGetTypeID())
  {
    CFStringRef v46 = @"Value in sealing map has wrong type";
LABEL_101:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", v46, (char)v48);
    return 0;
  }
  CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"MultiDataInstanceIdentifierList");
  if (Value)
  {
    CFStringRef v13 = Value;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      int v15 = Mutable;
      CFTypeID v16 = CFGetTypeID(v13);
      if (v16 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)v13);
        if (Count >= 1)
        {
          CFIndex v17 = 0;
          CFIndex v54 = 0;
          CFStringRef v51 = @"Could not createdataInstanceListString";
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v17);
            CFStringRef v19 = ValueAtIndex;
            if (a3)
            {
              if (CFDictionaryContainsKey(a3, ValueAtIndex))
              {
                CFStringRef v20 = (const __CFString *)_CFDictionaryCopyValue(a3, v19);
                AMSupportLogInternal();
                if (!v20) {
                  goto LABEL_85;
                }
              }
              else
              {
                CFStringRef v20 = AMFDRSealingMapCallMGCopyAnswerInternal(v19, 0, a6);
                CFDictionaryAddValue(a3, v19, v20);
                if (!v20)
                {
LABEL_85:
                  AMFDRErrorPushInternal(a6, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Could not query MobileGestaltfor key '%@'", (char)v19);
                  goto LABEL_93;
                }
              }
            }
            else
            {
              CFStringRef v20 = AMFDRSealingMapCallMGCopyAnswerInternal(ValueAtIndex, 0, a6);
              if (!v20) {
                goto LABEL_85;
              }
            }
            CFDictionaryRef v21 = a3;
            CFTypeID v22 = v13;
            CFTypeID v23 = CFGetTypeID(v20);
            if (v23 != CFArrayGetTypeID())
            {
              char v49 = (char)v19;
              CFStringRef format = @"Could not queryMobileGestalt for key '%@', expected CFArray";
              goto LABEL_87;
            }
            CFIndex v24 = CFArrayGetCount((CFArrayRef)v20);
            if (v17)
            {
              if (v54 != v24)
              {
                char v49 = v54;
                CFStringRef format = @"array count is not equal to first dataInstanceArrayCount: %ld";
LABEL_87:
                AMFDRErrorPushInternal(a6, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", format, v49);
LABEL_70:
                CFMutableStringRef v42 = 0;
                CFStringRef String = 0;
                goto LABEL_78;
              }
            }
            else
            {
              CFIndex v54 = v24;
            }
            if (CFArrayGetCount((CFArrayRef)v20) >= 1)
            {
              CFIndex v25 = 0;
              while (1)
              {
                CFStringRef v26 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v20, v25);
                CFStringRef String = AMFDRCreateInstanceString(a1, v26);
                if (!String)
                {
                  AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Could not get data instance string for dataInstanceIdentifier '%@'", (char)v20);
                  goto LABEL_77;
                }
                if (v25 < CFArrayGetCount(v15) && (CFStringRef v28 = (const __CFString *)CFArrayGetValueAtIndex(v15, v25)) != 0)
                {
                  uint64_t MutableCopy = CFStringCreateMutableCopy(a1, 0, v28);
                  if (!MutableCopy) {
                    goto LABEL_92;
                  }
                  char v30 = MutableCopy;
                  CFStringAppend(MutableCopy, @"-");
                  CFStringAppend(v30, String);
                  CFArraySetValueAtIndex(v15, v25, v30);
                  CFRelease(v30);
                }
                else
                {
                  CFArrayAppendValue(v15, String);
                }
                CFRelease(String);
                if (v17 == Count - 1)
                {
                  CFStringRef v31 = (const __CFString *)CFArrayGetValueAtIndex(v15, v25);
                  if (CFStringGetLength(v31) >= 211) {
                    break;
                  }
                }
                if (++v25 >= CFArrayGetCount((CFArrayRef)v20)) {
                  goto LABEL_30;
                }
              }
              AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Instance %@ is too long", (char)v31);
              goto LABEL_70;
            }
LABEL_30:
            CFRelease(v20);
            ++v17;
            CFStringRef v13 = v22;
            a3 = v21;
            if (v17 == Count)
            {
              CFStringRef String = (const __CFString *)CFRetain(v15);
              goto LABEL_80;
            }
          }
        }
        CFStringRef v47 = @"Missing value for key '%@' in sealing map entry ";
      }
      else
      {
        CFStringRef v47 = @"Value inkey '%@' has wrong type";
      }
      AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", v47, (char)@"MultiDataInstanceIdentifierList");
      CFStringRef String = 0;
LABEL_81:
      CFRelease(v15);
      return String;
    }
    CFStringRef v46 = @"dataInstanceArray is NULL";
    goto LABEL_101;
  }
  if ((a4 & 1) == 0)
  {
    CFStringRef v35 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"DataInstanceIdentifier");
    long long v36 = CFDictionaryGetValue((CFDictionaryRef)cf, @"DataInstanceIdentifierList");
    long long v34 = v36;
    if (v35)
    {
      if (v36)
      {
        long long v50 = @"DataInstanceIdentifier";
        goto LABEL_104;
      }
      if (a3)
      {
        if (CFDictionaryContainsKey(a3, v35))
        {
          CFStringRef v20 = (const __CFString *)_CFDictionaryCopyValue(a3, v35);
          AMSupportLogInternal();
        }
        else
        {
          CFStringRef v20 = AMFDRSealingMapCallMGCopyAnswerInternal(v35, 0, a6);
          CFDictionaryAddValue(a3, v35, v20);
        }
      }
      else
      {
        CFStringRef v20 = AMFDRSealingMapCallMGCopyAnswerInternal(v35, 0, a6);
      }
      if (v20)
      {
        CFStringRef String = AMFDRCreateInstanceString(a1, v20);
        if (!String) {
          AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Could not get data instance string for identifier '%@'", (char)v20);
        }
        int v15 = 0;
LABEL_77:
        CFMutableStringRef v42 = 0;
LABEL_78:
        CFRelease(v20);
        if (v42) {
LABEL_79:
        }
          CFRelease(v42);
LABEL_80:
        if (!v15) {
          return String;
        }
        goto LABEL_81;
      }
      AMFDRErrorPushInternal(a6, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Could not query MobileGestalt for key '%@'", (char)v35);
    }
    else
    {
      if (v36) {
        goto LABEL_51;
      }
      AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"'%@', '%@', '%@', '%@', '%@' not exists in sealing map entry", (char)@"DataInstanceIdentifier");
    }
    return 0;
  }
  uint64_t v32 = CFDictionaryGetValue((CFDictionaryRef)cf, @"AssemblyIdentifierList");
  int v33 = CFDictionaryGetValue((CFDictionaryRef)cf, @"AsidSubCCIdentifierList");
  long long v34 = v33;
  if (v32)
  {
    if (v33 || (long long v34 = v32, CFDictionaryGetValue((CFDictionaryRef)cf, @"AsidSubCCIdOptionalVerifyList")))
    {
      long long v50 = @"AssemblyIdentifierList";
LABEL_104:
      AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Both '%@' and '%@' exist in sealing map entry ", (char)v50);
      return 0;
    }
    goto LABEL_51;
  }
  if (!v33 && a5) {
    long long v34 = CFDictionaryGetValue((CFDictionaryRef)cf, @"AsidSubCCIdOptionalVerifyList");
  }
  if (v34)
  {
LABEL_51:
    CFTypeID v38 = CFGetTypeID(v34);
    if (v38 == CFArrayGetTypeID())
    {
      int v55 = a4;
      CFIndex v39 = CFArrayGetCount((CFArrayRef)v34);
      if (v39 >= 1)
      {
        CFIndex v40 = v39;
        CFIndex v41 = 0;
        CFMutableStringRef v42 = 0;
        CFStringRef v51 = @"Could not create dataInstanceListString";
        while (1)
        {
          CFStringRef v43 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v34, v41);
          CFStringRef v44 = v43;
          if (a3)
          {
            if (CFDictionaryContainsKey(a3, v43))
            {
              CFStringRef v20 = (const __CFString *)_CFDictionaryCopyValue(a3, v44);
              AMSupportLogInternal();
              if (!v20) {
                goto LABEL_88;
              }
            }
            else
            {
              CFStringRef v20 = AMFDRSealingMapCallMGCopyAnswerInternal(v44, 0, a6);
              CFDictionaryAddValue(a3, v44, v20);
              if (!v20)
              {
LABEL_88:
                AMFDRErrorPushInternal(a6, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Could not query MobileGestalt for key '%@'", (char)v44);
                CFStringRef String = 0;
                int v15 = 0;
                if (v42) {
                  goto LABEL_79;
                }
                goto LABEL_80;
              }
            }
          }
          else
          {
            CFStringRef v20 = AMFDRSealingMapCallMGCopyAnswerInternal(v43, 0, a6);
            if (!v20) {
              goto LABEL_88;
            }
          }
          CFStringRef String = AMFDRDataCreateString(a1, v20, v55 ^ 1u);
          if (!String)
          {
            AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Could not get data instance string for identifier '%@'", (char)v20);
            int v15 = 0;
            goto LABEL_78;
          }
          if (v42)
          {
            CFStringAppend(v42, @"-");
            CFStringAppend(v42, String);
          }
          else
          {
            CFMutableStringRef v42 = CFStringCreateMutableCopy(a1, 0, String);
            if (!v42)
            {
              int v15 = 0;
LABEL_92:
              AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", v51, (char)v48);
              CFRelease(v20);
              CFRelease(String);
LABEL_93:
              CFStringRef String = 0;
              goto LABEL_80;
            }
          }
          CFRelease(v20);
          CFRelease(String);
          if (v40 == ++v41)
          {
            if ((v55 & 1) != 0 || CFStringGetLength(v42) < 211)
            {
              CFStringRef String = (const __CFString *)CFRetain(v42);
              int v15 = 0;
            }
            else
            {
              AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyIdentifierListForSealingMapEntry", @"Instance %@ is too long", (char)v42);
              int v15 = 0;
              CFStringRef String = 0;
            }
            goto LABEL_79;
          }
        }
      }
      CFArrayRef v48 = @"DataInstanceIdentifierList";
      CFStringRef v46 = @"Missing value for key '%@' or %@' or %@' in sealing map entry ";
    }
    else
    {
      CFArrayRef v48 = @"DataInstanceIdentifierList";
      CFStringRef v46 = @"Value in key '%@' or %@' or %@' has wrong type";
    }
    goto LABEL_101;
  }

  return CFStringCreateWithCString(a1, "", 0x8000100u);
}

CFTypeRef AMFDRSealingMapCopyAssemblyIdentifierListForSealingMapEntry(const __CFAllocator *a1, CFTypeRef cf, const __CFDictionary *a3, uint64_t a4)
{
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFStringRef format = @"Value in sealing map has wrong type";
    goto LABEL_23;
  }
  CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"AssemblyIdentifierList");
  CFStringRef v10 = CFDictionaryGetValue((CFDictionaryRef)cf, @"AsidSubCCIdentifierList");
  if (v10 || (CFStringRef v10 = CFDictionaryGetValue((CFDictionaryRef)cf, @"AsidSubCCIdOptionalVerifyList")) != 0)
  {
    if (!Value) {
      goto LABEL_5;
    }
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyAssemblyIdentifierListForSealingMapEntry", @"Both '%@' and '%@' exist in sealing map entry", (char)@"AssemblyIdentifierList");
    return 0;
  }
  CFStringRef v10 = Value;
  if (!Value)
  {
    CFIndex v25 = @"AssemblyIdentifierList";
    CFStringRef format = @"Both '%@' and '%@' do not exist in sealing map entry";
LABEL_23:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyAssemblyIdentifierListForSealingMapEntry", format, (char)v25);
    return 0;
  }
LABEL_5:
  CFTypeID v11 = CFGetTypeID(v10);
  if (v11 != CFArrayGetTypeID())
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyAssemblyIdentifierListForSealingMapEntry", @"Value in key '%@' has wrong type", (char)@"AssemblyIdentifierList");
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyAssemblyIdentifierListForSealingMapEntry", @"assemblyInstanceArray is NULL", (char)v25);
    return 0;
  }
  CFStringRef v13 = Mutable;
  CFIndex Count = CFArrayGetCount((CFArrayRef)v10);
  if (Count < 1)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyAssemblyIdentifierListForSealingMapEntry", @"Missing value for key '%@' in sealing map entry ", (char)@"AssemblyIdentifierList");
  }
  else
  {
    CFIndex v15 = Count;
    CFIndex v16 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v10, v16);
      CFStringRef v18 = ValueAtIndex;
      if (a3)
      {
        if (CFDictionaryContainsKey(a3, ValueAtIndex))
        {
          CFStringRef v19 = (const __CFString *)_CFDictionaryCopyValue(a3, v18);
          AMSupportLogInternal();
          if (!v19) {
            goto LABEL_25;
          }
        }
        else
        {
          CFStringRef v19 = AMFDRSealingMapCallMGCopyAnswerInternal(v18, 0, a4);
          CFDictionaryAddValue(a3, v18, v19);
          if (!v19)
          {
LABEL_25:
            AMFDRErrorPushInternal(a4, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyAssemblyIdentifierListForSealingMapEntry", @"Could not query MobileGestalt for key '%@'", (char)v18);
            goto LABEL_27;
          }
        }
      }
      else
      {
        CFStringRef v19 = AMFDRSealingMapCallMGCopyAnswerInternal(ValueAtIndex, 0, a4);
        if (!v19) {
          goto LABEL_25;
        }
      }
      CFStringRef String = AMFDRDataCreateString(a1, v19, 0);
      if (!String) {
        break;
      }
      CFStringRef v21 = String;
      CFArrayAppendValue(v13, String);
      CFRelease(v19);
      CFRelease(v21);
      if (v15 == ++v16)
      {
        CFTypeRef v22 = CFRetain(v13);
        goto LABEL_19;
      }
    }
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_copyAssemblyIdentifierListForSealingMapEntry", @"Could not get data instance string for identifier '%@'", (char)v19);
    CFRelease(v19);
  }
LABEL_27:
  CFTypeRef v22 = 0;
LABEL_19:
  CFRelease(v13);
  return v22;
}

uint64_t AMFDRSealingMapGetEntriesForDevice()
{
  return AMFDRSealingMapGetEntriesForDeviceInternal(0);
}

uint64_t AMFDRSealingMapGetEntriesForDeviceInternal(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 136);
    if ((*(unsigned char *)(v1 + 8) & 8) != 0) {
      return 0;
    }
    if ((_UNKNOWN *)v1 != &kAMFDRPlatformImplementationNative)
    {
      if (*(void *)v1 >= 0x21uLL)
      {
        long long v2 = *(uint64_t (**)(uint64_t, void))(v1 + 32);
        if (v2)
        {
          uint64_t v3 = (const void *)v2(a1, *(void *)(a1 + 144));
          if (v3)
          {
            char v4 = v3;
            Entries = _AMFDRSealingMapGetEntries(v3);
            CFRelease(v4);
            return (uint64_t)Entries;
          }
        }
      }
      AMSupportLogInternal();
      return 0;
    }
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = __AMFDRSealingMapGetEntriesForDeviceInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_211;
  block[4] = a1;
  if (AMFDRSealingMapGetEntriesForDeviceInternal_onceToken != -1) {
    dispatch_once(&AMFDRSealingMapGetEntriesForDeviceInternal_onceToken, block);
  }
  return AMFDRSealingMapGetEntriesForDeviceInternal_deviceSealingMap;
}

uint64_t copyProductType(uint64_t a1)
{
  if (!a1) {
    return off_26C895B38();
  }
  uint64_t v1 = *(void **)(a1 + 136);
  if (*v1 >= 0x21uLL && (long long v2 = (uint64_t (*)(uint64_t, void))v1[4]) != 0) {
    return v2(a1, *(void *)(a1 + 144));
  }
  else {
    return 0;
  }
}

const void *_AMFDRSealingMapGetEntries(const void *a1)
{
  if (!a1) {
    goto LABEL_9;
  }
  CFDictionaryRef FDRSealingMapFromCache = (const __CFDictionary *)_getFDRSealingMapFromCache((uint64_t)a1);
  if (!FDRSealingMapFromCache) {
    goto LABEL_9;
  }
  CFDictionaryRef v3 = FDRSealingMapFromCache;
  CFBooleanRef Value = CFDictionaryGetValue(FDRSealingMapFromCache, a1);
  uint64_t v5 = Value;
  if (!Value)
  {
    AMSupportLogInternal();
    return v5;
  }
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFStringGetTypeID())
  {
    CFTypeID v8 = CFGetTypeID(v5);
    if (v8 == CFArrayGetTypeID()) {
      return v5;
    }
LABEL_9:
    AMSupportLogInternal();
    return 0;
  }

  return CFDictionaryGetValue(v3, v5);
}

uint64_t __AMFDRSealingMapGetEntriesForDeviceInternal_block_invoke(uint64_t a1)
{
  uint64_t v1 = (const void *)copyProductType(*(void *)(a1 + 32));
  if (!v1
    || (AMFDRSealingMapGetEntriesForDeviceInternal_deviceSealingMap = (uint64_t)_AMFDRSealingMapGetEntries(v1)) == 0
    && (!AMFDRSealingMapCallMGCopyAnswerInternal(@"r5pA2qLgR86BQKwgMjPWzg", 0, 0)
     || (AMFDRSealingMapGetEntriesForDeviceInternal_deviceSealingMap = (uint64_t)_AMFDRSealingMapGetEntries(@"iRefDefault")) != 0))
  {
    AMSupportLogInternal();
  }
  AMSupportSafeRelease();

  return AMSupportSafeRelease();
}

CFDictionaryRef AMFDRSealingMapGetEntry(const __CFString *a1)
{
  return AMFDRSealingMapGetEntryInternal(0, a1, 0, 0);
}

CFDictionaryRef AMFDRSealingMapGetEntryInternal(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4)
{
  CFArrayRef EntriesForDeviceInternal = (const __CFArray *)AMFDRSealingMapGetEntriesForDeviceInternal(a1);
  if (!EntriesForDeviceInternal)
  {
LABEL_28:
    AMSupportLogInternal();
    return 0;
  }
  CFArrayRef v8 = EntriesForDeviceInternal;
  if (CFArrayGetCount(EntriesForDeviceInternal) >= 1)
  {
    CFStringRef v9 = 0;
    CFIndex v10 = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (1)
    {
      if (v9) {
        CFRelease(v9);
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v10);
      CFDictionaryRef v13 = ValueAtIndex;
      if (!ValueAtIndex) {
        goto LABEL_28;
      }
      CFTypeID v14 = CFGetTypeID(ValueAtIndex);
      if (v14 != CFDictionaryGetTypeID()) {
        goto LABEL_28;
      }
      if (a4 && !CFDictionaryContainsKey(v13, a4))
      {
        CFStringRef v9 = 0;
      }
      else
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v13, @"Tag");
        CFStringRef v16 = Value;
        if (!Value) {
          goto LABEL_28;
        }
        CFTypeID v17 = CFGetTypeID(Value);
        if (v17 != CFStringGetTypeID()) {
          goto LABEL_28;
        }
        CFComparisonResult v18 = CFStringCompare(v16, a2, 0);
        CFStringRef v9 = 0;
        if (v18 == kCFCompareEqualTo)
        {
          if (!a3) {
            return v13;
          }
          CFStringRef v19 = _copyIdentifierListForSealingMapEntry(v11, v13, 0, 0, 0, 0);
          CFStringRef v9 = v19;
          if (v19)
          {
            CFTypeID v20 = CFGetTypeID(v19);
            if (v20 == CFStringGetTypeID())
            {
              if (CFEqual(v9, a3)) {
                goto LABEL_23;
              }
            }
            else
            {
              CFTypeID v21 = CFGetTypeID(v9);
              if (v21 == CFArrayGetTypeID())
              {
                v23.uint64_t length = CFArrayGetCount((CFArrayRef)v9);
                v23.location = 0;
                if (CFArrayContainsValue((CFArrayRef)v9, v23, a3))
                {
LABEL_23:
                  CFRelease(v9);
                  return v13;
                }
              }
            }
          }
        }
      }
      if (++v10 >= CFArrayGetCount(v8))
      {
        if (v9) {
          CFRelease(v9);
        }
        return 0;
      }
    }
  }
  return 0;
}

BOOL AMFDRSealingMapEntryHasAttribute(const __CFString *a1, const void *a2, uint64_t a3)
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(0, a1, 0, 0);

  return AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, a2, a3);
}

BOOL AMFDRSealingMapEntryHasAttributeForClassInternal(uint64_t a1, const __CFString *a2, const void *a3, uint64_t a4)
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(a1, a2, 0, 0);

  return AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, a3, a4);
}

BOOL AMFDRSealingMapEntryHasAttributeInternal(int a1, CFDictionaryRef theDict, const void *a3, uint64_t a4)
{
  if (theDict)
  {
    if (a3)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"Attributes");
      if (Value)
      {
        CFArrayRef v7 = Value;
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v7))
        {
          v10.uint64_t length = CFArrayGetCount(v7);
          v10.location = 0;
          return CFArrayContainsValue(v7, v10, a3) != 0;
        }
      }
    }
  }
  return a4;
}

CFDictionaryRef AMFDRSealingMapEntryHasSubCCListForClassInternal(uint64_t a1, const __CFString *a2)
{
  CFDictionaryRef result = AMFDRSealingMapGetEntryInternal(a1, a2, 0, 0);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"SubCCList");
    if (result)
    {
      CFDictionaryRef v3 = result;
      CFTypeID TypeID = CFArrayGetTypeID();
      return (const __CFDictionary *)(TypeID == CFGetTypeID(v3));
    }
  }
  return result;
}

uint64_t AMFDRSealingMapGetFDRDataVersionForDevice()
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(0, @"seal", 0, 0);
  if (AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"Version2", 0)) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t AMFDRSealingMapGetFDRDataVersionForDeviceInternal(uint64_t a1)
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(a1, @"seal", 0, 0);
  if (AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"Version2", 0)) {
    return 2;
  }
  else {
    return 1;
  }
}

BOOL AMFDRSealingMapGetFDRManifestVersionForDevice()
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(0, @"seal", 0, 0);
  return AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"ManifestVersion2", 0);
}

BOOL AMFDRSealingMapGetFDRManifestVersionForDeviceInternal(uint64_t a1)
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(a1, @"seal", 0, 0);
  return AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"ManifestVersion2", 0);
}

uint64_t AMFDRSealingMapGetFDRMinimalManifestVersionForDeviceInternal(uint64_t a1)
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(a1, @"seal", 0, 0);
  if (AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"MinimalManifestVersion2", 0))
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

BOOL AMFDRSealingMapGetDeprecateGIDSigning(uint64_t a1)
{
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(a1, @"seal", 0, 0);

  return AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"DeprecateGIDSigning", 0);
}

__CFString *AMFDRSealingMapCreateRecoveryPermissions(uint64_t a1)
{
  return _AMFDRSealingMapCreatePermissions(0, a1);
}

__CFString *_AMFDRSealingMapCreatePermissions(__CFString *a1, uint64_t a2)
{
  uint64_t EntriesForDeviceInternal = AMFDRSealingMapGetEntriesForDeviceInternal((uint64_t)a1);
  if (!EntriesForDeviceInternal)
  {
    int v9 = 1;
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Could not get sealing map", v27);
    CFStringRef PermissionsString = 0;
    goto LABEL_42;
  }
  CFArrayRef v4 = (const __CFArray *)EntriesForDeviceInternal;
  CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  if (Mutable)
  {
    if (a1 && (CFDictionaryRef v5 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)a1)) != 0)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v5, @"SkipRecoverDataClasses");
      CFArrayRef v7 = Value;
      if (Value)
      {
        CFTypeID v8 = CFGetTypeID(Value);
        if (v8 != CFArrayGetTypeID())
        {
          int v9 = 1;
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"malformed skipDataClasses", v27);
          CFStringRef PermissionsString = 0;
          goto LABEL_42;
        }
      }
    }
    else
    {
      CFArrayRef v7 = 0;
    }
    if (CFArrayGetCount(v4) >= 1)
    {
      CFIndex v11 = 0;
      CFStringRef PermissionsString = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v11);
        CFDictionaryRef v13 = ValueAtIndex;
        if (!ValueAtIndex || (CFTypeID v14 = CFGetTypeID(ValueAtIndex), v14 != CFDictionaryGetTypeID()))
        {
          int v9 = 1;
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Object of unexpected type '%@'", (char)v13);
          goto LABEL_42;
        }
        CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(v13, @"Tag");
        if (!v15)
        {
          int v9 = 1;
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Missing key '%@' in sealing map entry", (char)@"Tag");
          goto LABEL_42;
        }
        CFStringRef v16 = v15;
        CFTypeID v17 = CFGetTypeID(v15);
        if (v17 != CFStringGetTypeID())
        {
          char v28 = (char)v16;
          int v9 = 1;
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Object of unexpected type '%@' for key '%@' in sealing map entry", v28);
          goto LABEL_42;
        }
        if (v7 && (v32.uint64_t length = CFArrayGetCount(v7), v32.location = 0, CFArrayContainsValue(v7, v32, v16)))
        {
          if (_isSealingClass((BOOL)v16))
          {
            AMFDRErrorPushInternal(a2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Could not skip seal class '%@'", (char)v16);
            goto LABEL_49;
          }
        }
        else
        {
          CFStringRef v18 = _copyIdentifierListForSealingMapEntry(v29, v13, Mutable, 0, 0, a2);
          if (v18)
          {
            CFStringRef v19 = v18;
            CFTypeID v20 = CFGetTypeID(v18);
            if (v20 == CFStringGetTypeID())
            {
              if (PermissionsString)
              {
                if ((AMFDRDataAppendPermissionsString(a1, 0, v16, v19, PermissionsString) & 1) == 0)
                {
LABEL_47:
                  AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Failed to append permissions string with data class '%@', data instance '%@',  action '%d'", (char)v16);
                  goto LABEL_49;
                }
              }
              else
              {
                CFStringRef PermissionsString = (__CFString *)AMFDRDataCreatePermissionsString(a1, 0, v16, v19);
                if (!PermissionsString)
                {
LABEL_48:
                  AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Failed to create permissions string for     data class '%@', data instance '%@', action '%d'", (char)v16);
                  goto LABEL_49;
                }
              }
            }
            else
            {
              CFTypeID v21 = CFGetTypeID(v19);
              if (v21 != CFArrayGetTypeID() || (CFIndex Count = CFArrayGetCount((CFArrayRef)v19), Count < 1))
              {
                AMSupportLogInternal();
                goto LABEL_49;
              }
              CFIndex v23 = Count;
              for (CFIndex i = 0; i != v23; ++i)
              {
                CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v19, i);
                if (PermissionsString)
                {
                  if ((AMFDRDataAppendPermissionsString(a1, 0, v16, v25, PermissionsString) & 1) == 0) {
                    goto LABEL_47;
                  }
                }
                else
                {
                  CFStringRef PermissionsString = (__CFString *)AMFDRDataCreatePermissionsString(a1, 0, v16, v25);
                  if (!PermissionsString) {
                    goto LABEL_48;
                  }
                }
              }
            }
            if (_isSealingClass((BOOL)v16)
              && (AMFDRDataAppendPermissionsString(a1, 5u, v16, v19, PermissionsString) & 1) == 0)
            {
              AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"Failed to append permissions string with data class '%@', data instance '%@', action '%d'", (char)v16);
              goto LABEL_49;
            }
            CFRelease(v19);
          }
          else
          {
            AMSupportLogInternal();
          }
        }
        if (++v11 >= CFArrayGetCount(v4)) {
          goto LABEL_41;
        }
      }
    }
    CFStringRef PermissionsString = 0;
LABEL_41:
    int v9 = 0;
  }
  else
  {
    AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCreatePermissions", @"queryCache is NULL", v27);
    CFStringRef PermissionsString = 0;
LABEL_49:
    int v9 = 1;
  }
LABEL_42:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (v9 && PermissionsString)
  {
    CFRelease(PermissionsString);
    return 0;
  }
  return PermissionsString;
}

__CFString *AMFDRSealingMapCreateRecoveryPermissionsWithOption(__CFString *a1, uint64_t a2)
{
  if (a1)
  {
    return _AMFDRSealingMapCreatePermissions(a1, a2);
  }
  else
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRecoveryPermissionsWithOption", @"amfdr is NULL", v2);
    return 0;
  }
}

CFTypeRef AMFDRSealingMapCopyMultiInstanceForClass(const void *a1, uint64_t a2)
{
  uint64_t EntriesForDeviceInternal = AMFDRSealingMapGetEntriesForDeviceInternal(0);
  if (!a1)
  {
    CFStringRef format = @"dataClass is NULL";
LABEL_41:
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", format, v22);
    return 0;
  }
  CFArrayRef v5 = (const __CFArray *)EntriesForDeviceInternal;
  if (!EntriesForDeviceInternal)
  {
    CFStringRef format = @"Could not get sealing map";
    goto LABEL_41;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (CFArrayGetCount(v5) < 1)
  {
    CFStringRef v9 = 0;
    if (Mutable)
    {
LABEL_22:
      if (CFArrayGetCount(Mutable) >= 1)
      {
        CFTypeRef v19 = CFRetain(Mutable);
        if (!v9) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
    }
LABEL_25:
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", @"Could not find key '%@' in sealing map.", (char)a1);
    CFTypeRef v19 = 0;
    if (!v9)
    {
LABEL_30:
      if (Mutable) {
LABEL_31:
      }
        CFRelease(Mutable);
      return v19;
    }
LABEL_29:
    CFRelease(v9);
    goto LABEL_30;
  }
  CFIndex v8 = 0;
  CFStringRef v9 = 0;
  while (1)
  {
    if (v9) {
      CFRelease(v9);
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v8);
    CFDictionaryRef v11 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v12 = CFGetTypeID(ValueAtIndex), v12 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", @"Object of unexpected type '%@'", (char)v11);
      goto LABEL_37;
    }
    CFArrayRef Value = CFDictionaryGetValue(v11, @"Tag");
    if (!Value)
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", @"Missing key '%@' in sealing map entry", (char)@"Tag");
      goto LABEL_37;
    }
    CFTypeID v14 = Value;
    CFTypeID v15 = CFGetTypeID(Value);
    if (v15 != CFStringGetTypeID())
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", @"Object of unexpected type '%@' for key '%@' in sealing map entry", (char)a1);
      goto LABEL_37;
    }
    if (CFEqual(a1, v14)) {
      break;
    }
    CFStringRef v9 = 0;
LABEL_18:
    if (++v8 >= CFArrayGetCount(v5))
    {
      if (Mutable) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }
  }
  CFStringRef v16 = _copyIdentifierListForSealingMapEntry(v6, v11, 0, 0, 0, a2);
  if (v16)
  {
    CFStringRef v9 = v16;
    CFTypeID v17 = CFGetTypeID(v16);
    if (v17 == CFStringGetTypeID())
    {
      CFArrayAppendValue(Mutable, v9);
    }
    else
    {
      CFTypeID v18 = CFGetTypeID(v9);
      if (v18 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount((CFArrayRef)v9) <= 0)
        {
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", @"outData array count is zero", v22);
          CFTypeRef v19 = 0;
        }
        else
        {
          CFTypeRef v19 = CFRetain(v9);
        }
        goto LABEL_29;
      }
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", @"malformed data instance for key '%@' in sealing map.", (char)a1);
    }
    goto LABEL_18;
  }
  AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceForClass", @"outData from AMFDRSealingMapCopyDataInstanceForSealingMapEntry is NULL", v22);
LABEL_37:
  CFTypeRef v19 = 0;
  if (Mutable) {
    goto LABEL_31;
  }
  return v19;
}

CFStringRef AMFDRSealingMapCopyAssemblyIdentifierForClass(const void *a1, uint64_t a2)
{
  CFStringRef v2 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a1, a2, 1, 1);
  CFStringRef v3 = v2;
  if (v2 && !CFStringGetLength(v2))
  {
    CFRelease(v3);
    return 0;
  }
  return v3;
}

uint64_t _AMFDRSealingMapCopyIdentifierListForClass(const void *a1, uint64_t a2, int a3, int a4)
{
  if (!a1)
  {
    CFStringRef v17 = @"dataClass is NULL";
    goto LABEL_12;
  }
  CFArrayRef EntriesForDeviceInternal = (const __CFArray *)AMFDRSealingMapGetEntriesForDeviceInternal(0);
  if (!EntriesForDeviceInternal)
  {
    CFStringRef v17 = @"Could not get sealing map";
    goto LABEL_12;
  }
  CFArrayRef v9 = EntriesForDeviceInternal;
  if (CFArrayGetCount(EntriesForDeviceInternal) < 1)
  {
LABEL_11:
    char v27 = (char)a1;
    CFStringRef v17 = @"Could not find key '%@' in sealing map.";
LABEL_12:
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIdentifierListForClass", v17, v27);
    return 0;
  }
  CFIndex v10 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v10);
    CFDictionaryRef v12 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v13 = CFGetTypeID(ValueAtIndex), v13 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIdentifierListForClass", @"Object of unexpected type '%@'", (char)v12);
      return 0;
    }
    CFArrayRef Value = CFDictionaryGetValue(v12, @"Tag");
    if (!Value)
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIdentifierListForClass", @"Missing key '%@' in sealing map entry", (char)@"Tag");
      return 0;
    }
    CFTypeID v15 = Value;
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 != CFStringGetTypeID()) {
      break;
    }
    if (CFEqual(a1, v15))
    {
      if (a3)
      {
        int v19 = 1;
        int v20 = a4;
      }
      else
      {
        int v19 = 0;
        int v20 = 0;
      }
      CFStringRef v21 = _copyIdentifierListForSealingMapEntry((const __CFAllocator *)*MEMORY[0x263EFFB08], v12, 0, v19, v20, a2);
      CFStringRef v22 = v21;
      if (!v21) {
        goto LABEL_23;
      }
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFStringGetTypeID())
      {
        uint64_t v24 = (uint64_t)CFRetain(v22);
        goto LABEL_22;
      }
      CFTypeID v25 = CFGetTypeID(v22);
      if (v25 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex((CFArrayRef)v22, 0);
        uint64_t v24 = AMSupportSafeRetain();
LABEL_22:
        uint64_t v26 = v24;
      }
      else
      {
LABEL_23:
        AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIdentifierListForClass", @"Neither CFString nor CFArray, malformed format.", v27);
        uint64_t v26 = 0;
        uint64_t result = 0;
        if (!v22) {
          return result;
        }
      }
      CFRelease(v22);
      return v26;
    }
    if (++v10 >= CFArrayGetCount(v9)) {
      goto LABEL_11;
    }
  }
  AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIdentifierListForClass", @"Object of unexpected type '%@' for key '%@' in sealing map entry", (char)a1);
  return 0;
}

uint64_t AMFDRSealingMapCopyInstanceForClass(const void *a1, uint64_t a2)
{
  return _AMFDRSealingMapCopyIdentifierListForClass(a1, a2, 0, 0);
}

CFArrayRef AMFDRSealingMapCopyInstanceWithIdentifiers(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v33 = @"dataClass is NULL";
LABEL_40:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", v33, v34);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v33 = @"productType is NULL";
    goto LABEL_40;
  }
  if (!a3)
  {
    CFStringRef v33 = @"identifiers is NULL";
    goto LABEL_40;
  }
  CFArrayRef Entries = (const __CFArray *)_AMFDRSealingMapGetEntries(a2);
  if (!Entries)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", @"Could not get sealing map", v34);
    return Entries;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", @"queryCache is NULL", v34);
    return 0;
  }
  CFIndex v10 = Mutable;
  uint64_t v36 = a4;
  CFIndex Count = CFDictionaryGetCount(a3);
  CFDictionaryRef v12 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFTypeID v13 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(a3, v12, v13);
  if (Count >= 1)
  {
    CFTypeID v14 = v12;
    CFTypeID v15 = v13;
    do
    {
      CFStringRef v17 = *v14++;
      CFTypeID v16 = v17;
      CFTypeID v18 = *v15++;
      CFDictionarySetValue(v10, v16, v18);
      --Count;
    }
    while (Count);
  }
  CFStringRef v35 = v13;
  if (CFArrayGetCount(Entries) < 1)
  {
LABEL_17:
    AMFDRErrorPushInternal(v36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", @"Could not find key '%@' in sealing map.", (char)a1);
LABEL_18:
    CFArrayRef Entries = 0;
    CFStringRef v26 = 0;
    char v27 = v35;
    goto LABEL_27;
  }
  CFIndex v19 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Entries, v19);
    CFDictionaryRef v21 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v22 = CFGetTypeID(ValueAtIndex), v22 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(v36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", @"Object of unexpected type '%@'", (char)v21);
      goto LABEL_18;
    }
    CFArrayRef Value = CFDictionaryGetValue(v21, @"Tag");
    if (!Value)
    {
      AMFDRErrorPushInternal(v36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", @"Missing key '%@' in sealing map entry", (char)@"Tag");
      goto LABEL_18;
    }
    uint64_t v24 = Value;
    CFTypeID v25 = CFGetTypeID(Value);
    if (v25 != CFStringGetTypeID())
    {
      AMFDRErrorPushInternal(v36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", @"Object of unexpected type '%@' for key '%@' in sealing map entry", (char)a1);
      goto LABEL_18;
    }
    if (CFEqual(a1, v24)) {
      break;
    }
    if (++v19 >= CFArrayGetCount(Entries)) {
      goto LABEL_17;
    }
  }
  CFStringRef v28 = _copyIdentifierListForSealingMapEntry(v8, v21, v10, 0, 0, v36);
  CFStringRef v26 = v28;
  char v27 = v35;
  if (!v28) {
    goto LABEL_25;
  }
  CFTypeID v29 = CFGetTypeID(v28);
  if (v29 != CFStringGetTypeID())
  {
    CFTypeID v30 = CFGetTypeID(v26);
    if (v30 == CFArrayGetTypeID())
    {
      CFStringRef v31 = @"Not support for CFArray format in AMFDRSealingMapCopyInstanceWithIdentifiers";
LABEL_26:
      AMFDRErrorPushInternal(v36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", v31, v34);
      CFArrayRef Entries = 0;
      goto LABEL_27;
    }
LABEL_25:
    CFStringRef v31 = @"Neither CFString nor CFArray, malformed format.";
    goto LABEL_26;
  }
  CFArrayRef Entries = (const __CFArray *)CFRetain(v26);
  if (!Entries) {
    AMFDRErrorPushInternal(v36, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyInstanceWithIdentifiers", @"AMFDRSealingMapCopyDataInstanceForSealingMapEntry returned NULL", v34);
  }
LABEL_27:
  CFRelease(v10);
  if (v12) {
    free(v12);
  }
  if (v27) {
    free(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  return Entries;
}

CFTypeRef AMFDRSealingMapCopyMultiInstanceWithIdentifiers(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4)
{
  CFTypeRef v4 = a1;
  if (!a1)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", @"dataClass is NULL", v30);
    return v4;
  }
  if (!a2)
  {
    CFStringRef v29 = @"productType is NULL";
LABEL_37:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", v29, v30);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v29 = @"identifiers is NULL";
    goto LABEL_37;
  }
  CFArrayRef Entries = (const __CFArray *)_AMFDRSealingMapGetEntries(a2);
  if (!Entries)
  {
    CFStringRef v29 = @"Could not get sealing map";
    goto LABEL_37;
  }
  CFArrayRef v7 = Entries;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", @"queryCache is NULL", v30);
    return 0;
  }
  CFIndex v10 = Mutable;
  CFAllocatorRef v31 = v8;
  CFIndex Count = CFDictionaryGetCount(a3);
  CFDictionaryRef v12 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFTypeID v13 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(a3, v12, v13);
  if (Count >= 1)
  {
    CFTypeID v14 = v12;
    CFTypeID v15 = v13;
    do
    {
      CFStringRef v17 = *v14++;
      CFTypeID v16 = v17;
      CFTypeID v18 = *v15++;
      CFDictionarySetValue(v10, v16, v18);
      --Count;
    }
    while (Count);
  }
  if (CFArrayGetCount(v7) < 1)
  {
LABEL_21:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", @"Could not find key '%@' in sealing map.", (char)v4);
LABEL_22:
    CFTypeRef v4 = 0;
    CFStringRef v27 = 0;
  }
  else
  {
    CFIndex v19 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v19);
      CFDictionaryRef v21 = ValueAtIndex;
      if (!ValueAtIndex || (CFTypeID v22 = CFGetTypeID(ValueAtIndex), v22 != CFDictionaryGetTypeID()))
      {
        AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", @"Object of unexpected type '%@'", (char)v21);
        goto LABEL_22;
      }
      CFArrayRef Value = CFDictionaryGetValue(v21, @"Tag");
      if (!Value)
      {
        AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", @"Missing key '%@' in sealing map entry", (char)@"Tag");
        goto LABEL_22;
      }
      uint64_t v24 = Value;
      CFTypeID v25 = CFGetTypeID(Value);
      if (v25 != CFStringGetTypeID())
      {
        AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", @"Object of unexpected type '%@' for key '%@' in sealing map entry", (char)v4);
        goto LABEL_22;
      }
      if (CFEqual(v4, v24)) {
        break;
      }
      if (++v19 >= CFArrayGetCount(v7)) {
        goto LABEL_21;
      }
    }
    CFStringRef v26 = _copyIdentifierListForSealingMapEntry(v31, v21, v10, 0, 0, a4);
    if (!v26) {
      goto LABEL_21;
    }
    CFStringRef v27 = v26;
    CFTypeRef v4 = CFRetain(v26);
    if (!v4) {
      AMFDRErrorPushInternal(a4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMultiInstanceWithIdentifiers", @"AMFDRSealingMapCopyDataInstanceForSealingMapEntry returned NULL", v30);
    }
  }
  CFRelease(v10);
  if (v12) {
    free(v12);
  }
  if (v13) {
    free(v13);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v4;
}

void *AMFDRSealingMapCopyPropertyWithTag(const void *a1, const __CFString *cf, uint64_t a3)
{
  if (!cf || (CFTypeID v6 = CFGetTypeID(cf), v6 != CFStringGetTypeID()) || CFStringGetLength(cf) != 4)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyPropertyWithTag", @"invalid propertyTag '%@'", (char)cf);
    return 0;
  }
  CFArrayRef ManifestPropertyEntriesForDevice = (const __CFArray *)_AMFDRSealingMapGetManifestPropertyEntriesForDevice((uint64_t)a1);
  if (!ManifestPropertyEntriesForDevice)
  {
    CFStringRef v14 = @"Could not get manifest properties";
    goto LABEL_12;
  }
  CFArrayRef v8 = ManifestPropertyEntriesForDevice;
  if (CFArrayGetCount(ManifestPropertyEntriesForDevice) < 1)
  {
LABEL_11:
    char v17 = (char)cf;
    CFStringRef v14 = @"Could not find tag '%@' in manifest properties";
LABEL_12:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyPropertyWithTag", v14, v17);
    return 0;
  }
  CFIndex v9 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v9);
    CFDictionaryRef v11 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v12 = CFGetTypeID(ValueAtIndex), v12 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyPropertyWithTag", @"Invalid entry '%@' in manifest property entries", (char)v11);
      return 0;
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v11, @"Tag");
    if (CFEqual(cf, Value)) {
      break;
    }
    if (++v9 >= CFArrayGetCount(v8)) {
      goto LABEL_11;
    }
  }
  CFAllocatorRef v16 = CFGetAllocator(a1);
  uint64_t result = _copyMGValuePropertyEntry(v16, v11, 0);
  if (result) {
    return result;
  }
  AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyPropertyWithTag", @"Failed to get value on device for property tag '%@'", (char)cf);
  return 0;
}

uint64_t _AMFDRSealingMapGetManifestPropertyEntriesForDevice(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 136);
    if ((*(unsigned char *)(v1 + 8) & 8) != 0) {
      return 0;
    }
    if ((_UNKNOWN *)v1 != &kAMFDRPlatformImplementationNative)
    {
      if (*(void *)v1 >= 0x21uLL)
      {
        CFStringRef v2 = *(uint64_t (**)(uint64_t, void))(v1 + 32);
        if (v2)
        {
          CFStringRef v3 = (const void *)v2(a1, *(void *)(a1 + 144));
          if (v3)
          {
            CFTypeRef v4 = v3;
            ManifestPropertiesCFArrayRef Entries = _AMFDRSealingMapGetManifestPropertiesEntries(v3);
            CFRelease(v4);
            return (uint64_t)ManifestPropertiesEntries;
          }
        }
      }
      AMSupportLogInternal();
      return 0;
    }
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___AMFDRSealingMapGetManifestPropertyEntriesForDevice_block_invoke;
  block[3] = &__block_descriptor_tmp_1319;
  block[4] = a1;
  if (_AMFDRSealingMapGetManifestPropertyEntriesForDevice_onceToken != -1) {
    dispatch_once(&_AMFDRSealingMapGetManifestPropertyEntriesForDevice_onceToken, block);
  }
  return _AMFDRSealingMapGetManifestPropertyEntriesForDevice_deviceManifestProperties;
}

void *_copyMGValuePropertyEntry(const __CFAllocator *a1, CFTypeRef cf, const __CFDictionary *a3)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID()
    || (CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"PropertyIdentifier")) == 0
    || (CFStringRef v8 = Value, v9 = CFGetTypeID(Value), v9 != CFStringGetTypeID())
    || (!a3 || (CFStringRef v10 = (const __CFString *)_CFDictionaryCopyValue(a3, v8)) == 0)
    && (CFStringRef v10 = AMFDRSealingMapCallMGCopyAnswerInternal(v8, 0, 0)) == 0)
  {
    AMSupportLogInternal();
    return 0;
  }
  if (!_propertyEntryHasAttribute((const __CFDictionary *)cf, @"StoreAsData", 0))
  {
    if (!_propertyEntryHasAttribute((const __CFDictionary *)cf, @"StoreAsInteger", 0))
    {
      CFStringRef String = (void *)AMFDRDataCreateString(a1, v10, 0);
LABEL_15:
      CFTypeID v15 = String;
      if (!String) {
        AMSupportLogInternal();
      }
      goto LABEL_17;
    }
    CFTypeID v14 = CFGetTypeID(v10);
    if (v14 != CFNumberGetTypeID()) {
      goto LABEL_20;
    }
LABEL_13:
    CFStringRef String = (void *)CFRetain(v10);
    goto LABEL_15;
  }
  CFTypeID v11 = CFGetTypeID(v10);
  if (v11 == CFDataGetTypeID()) {
    goto LABEL_13;
  }
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 == CFStringGetTypeID())
  {
    CFStringRef String = CFStringCreateExternalRepresentation(a1, v10, 0x8000100u, 0x5Fu);
    goto LABEL_15;
  }
LABEL_20:
  AMSupportLogInternal();
  CFTypeID v15 = 0;
LABEL_17:
  CFRelease(v10);
  return v15;
}

CFTypeRef AMFDRSealingMapCopyRequiredIdentifiers(const void *a1, const void *a2, uint64_t a3)
{
  if (!a1)
  {
    CFStringRef v24 = @"dataClass is NULL";
LABEL_33:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", v24, v25);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v24 = @"productType is NULL";
    goto LABEL_33;
  }
  CFArrayRef Entries = (const __CFArray *)_AMFDRSealingMapGetEntries(a2);
  if (!Entries)
  {
    CFStringRef v24 = @"Could not get sealing map";
    goto LABEL_33;
  }
  CFArrayRef v6 = Entries;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", @"identifiers is NULL", v25);
    return 0;
  }
  CFArrayRef v8 = Mutable;
  if (CFArrayGetCount(v6) < 1)
  {
LABEL_21:
    if (CFArrayGetCount(v8) <= 0)
    {
      AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", @"Could not find key '%@' in sealing map.", (char)a1);
      goto LABEL_29;
    }
    CFTypeRef v21 = CFRetain(v8);
    goto LABEL_23;
  }
  CFIndex v9 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
    CFDictionaryRef v11 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v12 = CFGetTypeID(ValueAtIndex), v12 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", @"Object of unexpected type '%@'", (char)v11);
      goto LABEL_29;
    }
    CFStringRef Value = CFDictionaryGetValue(v11, @"Tag");
    if (!Value)
    {
      AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", @"Missing key '%@' in sealing map entry", (char)@"Tag");
      goto LABEL_29;
    }
    CFTypeID v14 = Value;
    CFTypeID v15 = CFGetTypeID(Value);
    if (v15 != CFStringGetTypeID())
    {
      char v25 = (char)a1;
      CFStringRef v23 = @"Object of unexpected type '%@' for key '%@' in sealing map entry";
      goto LABEL_28;
    }
    if (CFEqual(a1, v14)) {
      break;
    }
    if (++v9 >= CFArrayGetCount(v6)) {
      goto LABEL_21;
    }
  }
  CFAllocatorRef v16 = CFDictionaryGetValue(v11, @"DataInstanceIdentifier");
  CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v11, @"DataInstanceIdentifierList");
  CFArrayRef v18 = v17;
  if (!v16)
  {
    if (!v17) {
      goto LABEL_21;
    }
    CFTypeID v19 = CFGetTypeID(v17);
    if (v19 != CFArrayGetTypeID())
    {
      AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", @"Value in key %@ has wrong type", (char)@"DataInstanceIdentifierList");
      goto LABEL_29;
    }
    uint64_t Count = CFArrayGetCount(v18);
    if (Count > 0)
    {
      v26.uint64_t length = Count;
      v26.location = 0;
      CFArrayAppendArray(v8, v18, v26);
      goto LABEL_21;
    }
    CFStringRef v23 = @"length of gestaltKeyList is 0";
LABEL_28:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", v23, v25);
    goto LABEL_29;
  }
  if (!v17)
  {
    CFArrayAppendValue(v8, v16);
    goto LABEL_21;
  }
  AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyRequiredIdentifiers", @"Both '%@' and '%@' exist in sealing map entry ", (char)@"DataInstanceIdentifier");
LABEL_29:
  CFTypeRef v21 = 0;
LABEL_23:
  CFRelease(v8);
  return v21;
}

uint64_t AMFDRSealingMapCopyLocalDataForClass(__CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalDataForClass", @"dataClass is NULL", v9);
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  CFStringRef v6 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a1, a3, 0, 0);
  if (!v6)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalDataForClass", @"dataInstance is NULL", v9);
    goto LABEL_7;
  }
  uint64_t v7 = AMFDRSealingMapCopyLocalData(a1, v6, a2, a3);
LABEL_4:
  AMSupportSafeRelease();
  return v7;
}

uint64_t AMFDRSealingMapCopyLocalData(__CFString *a1, const __CFString *a2, const __CFDictionary *a3, uint64_t a4)
{
  CFStringRef v8 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a1, a4, 1, 0);
  if (v8)
  {
    uint64_t v9 = _AMFDRSealingMapCopyLocalDataInternal(a1, a2, v8, 0, 0, a3, a4);
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v9 = 0;
  }
  AMSupportSafeRelease();
  return v9;
}

uint64_t _AMFDRSealingMapCopyLocalDataInternal(__CFString *a1, const __CFString *a2, const __CFString *a3, int a4, int a5, const __CFDictionary *a6, uint64_t a7)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"dataClass is NULL", v35);
    uint64_t v33 = 0;
    goto LABEL_47;
  }
  if (!a2)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"dataInstance is NULL", v35);
LABEL_52:
    uint64_t v33 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_45;
  }
  CFTypeID v13 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Local", a6);
  CFTypeID v14 = v13;
  if (!v13)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"amfdr is NULL", v35);
    goto LABEL_52;
  }
  CFAllocatorRef v15 = CFGetAllocator(v13);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"failed to allocate sikOverrideDict", v35);
LABEL_55:
    uint64_t v33 = 0;
    goto LABEL_45;
  }
  if ((AMFDRSealingMapSetSikOverride(v14, Mutable, a1, a2, a7) & 1) == 0)
  {
    AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"AMFDRSealingMapSetSikOverride failed", v35);
    goto LABEL_55;
  }
  CFArrayRef v17 = (const void *)v14[15];
  if (v17) {
    CFRelease(v17);
  }
  v14[15] = Mutable;
  CFRetain(Mutable);
  if (a6)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a6, @"VerifyData");
    CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(a6, @"GetCombined");
    if ((AMFDRDataApTicketPopulate((uint64_t)v14) & 1) == 0)
    {
      if (Value && !CFBooleanGetValue(Value))
      {
        CFStringRef v38 = (const __CFString *)Value;
        CFStringRef v37 = v19;
        AMSupportLogInternal();
        goto LABEL_22;
      }
      goto LABEL_16;
    }
  }
  else
  {
    CFStringRef v19 = 0;
    CFBooleanRef Value = 0;
    if (!AMFDRDataApTicketPopulate((uint64_t)v14))
    {
LABEL_16:
      CFStringRef v38 = (const __CFString *)Value;
      CFStringRef v37 = v19;
      AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"Unable to read AP Ticket", v35);
      goto LABEL_22;
    }
  }
  CFStringRef v38 = (const __CFString *)Value;
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(0, a1, 0, 0);
  if (AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"LocalCopyForceBootedOSTrustObject", 0))
  {
    CFStringRef v21 = (const __CFString *)AMFDRDataApTicketCopyObjectProperty((uint64_t)v14, 1718903152, 1145525076);
  }
  else
  {
    CFStringRef v21 = (const __CFString *)AMFDRDataApTicketCopyTrustObjectDigest((uint64_t)v14);
  }
  if (!v21) {
    goto LABEL_56;
  }
  AMFDRSetOption((uint64_t)v14, @"TrustObjectDigest", v21);
  int is_recovery = os_variant_is_recovery();
  CFStringRef v37 = v19;
  if ((AMFDRIsNonDefaultDemotionState() & 1) != 0 || is_recovery)
  {
    AMSupportLogInternal();
    AMFDRSetOption((uint64_t)v14, @"SkipVerifySik", (const __CFString *)*MEMORY[0x263EFFB40]);
  }
LABEL_22:
  CFStringRef v23 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(@"seal", a7, 0, 0);
  if (!v23)
  {
LABEL_56:
    AMSupportLogInternal();
    uint64_t v33 = 0;
    goto LABEL_45;
  }
  AMFDRSetOption((uint64_t)v14, @"INST", v23);
  CFStringRef v24 = (const __CFString *)*MEMORY[0x263EFFB38];
  AMFDRSetOption((uint64_t)v14, @"VerifyData", (const __CFString *)*MEMORY[0x263EFFB38]);
  AMFDRSetOption((uint64_t)v14, @"GetCombined", v24);
  AMFDRDataCopyTrustObject((uint64_t)v14);
  AMSupportLogInternal();
  CFDictionaryRef v25 = AMFDRSealingMapGetEntryInternal(0, a1, 0, 0);
  int v36 = a5;
  if (!AMFDRSealingMapEntryHasAttributeInternal((int)v25, v25, @"MultiSealing", 0))
  {
    CFStringRef v30 = (const __CFString *)AMFDRDataCopy((uint64_t)v14, @"seal", v23, 0);
    if (v30) {
      AMFDRSetOption((uint64_t)v14, @"SealingManifest", v30);
    }
    else {
      AMSupportLogInternal();
    }
    CFStringRef v28 = 0;
    CFStringRef v29 = 0;
    goto LABEL_33;
  }
  CFAllocatorRef v26 = CFGetAllocator(v14);
  CFStringRef v27 = CFStringCreateWithFormat(v26, 0, @"%@-%@", @"manifest", a1);
  if (v27)
  {
    CFStringRef v28 = v27;
    CFStringRef v29 = (const void *)AMFDRDataLocalCopyDataStoragePath(v14, (uint64_t)v27, (uint64_t)a2, a7);
    if (!v29)
    {
      AMFDRErrorPushInternal(a7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"missing data storage path", v35);
      uint64_t v33 = 0;
LABEL_42:
      CFRelease(v28);
LABEL_43:
      if (v29) {
        CFRelease(v29);
      }
      goto LABEL_45;
    }
    CFGetAllocator(v14);
    AMSupportCreateDataFromFileURL();
    CFStringRef v31 = (const __CFString *)AMFDRDataCopy((uint64_t)v14, @"seal", v23, 0);
    if (v31) {
      AMFDRSetOption((uint64_t)v14, @"SealingManifest", v31);
    }
    else {
      AMSupportLogInternal();
    }
LABEL_33:
    AMFDRSetOption((uint64_t)v14, @"VerifyData", v38);
    AMFDRSetOption((uint64_t)v14, @"GetCombined", v37);
    if (a3)
    {
      AMFDRSetAssemblyIdentifierToVerify((uint64_t)v14, a1, a3);
      if (AMFDRSealingMapEntryHasSubCCListForClassInternal((uint64_t)v14, a1)) {
        AMFDRSetOption((uint64_t)v14, @"VerifyAsidInSubCC", (const __CFString *)*MEMORY[0x263EFFB40]);
      }
    }
    if (a4)
    {
      uint64_t v32 = (uint64_t)AMFDRDataPopulate((uint64_t)v14, (uint64_t)a1, (uint64_t)a2, 0, a7);
    }
    else if (v36)
    {
      uint64_t v32 = AMFDRDataDictCopy((uint64_t)v14, a1, a2, a7);
    }
    else
    {
      uint64_t v32 = (uint64_t)AMFDRDataCopy((uint64_t)v14, a1, a2, a7);
    }
    uint64_t v33 = v32;
    if (!v28) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalDataInternal", @"multiManifestDataClass create failed", v35);
  uint64_t v33 = 0;
LABEL_45:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_47:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v33;
}

CFDataRef AMFDRSealingMapCopyLocalMinimalManifestForInstance(const __CFString *a1, uint64_t a2)
{
  CFTypeRef v4 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Local", 0);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    AMFDRSetOption((uint64_t)v4, @"VerifyData", (const __CFString *)*MEMORY[0x263EFFB38]);
    CFDataRef v6 = AMFDRDataCopy(v5, @"minimal-manifest", a1, a2);
  }
  else
  {
    AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMinimalManifestForInstance", @"amfdr is NULL", v8);
    CFDataRef v6 = 0;
  }
  AMSupportSafeRelease();
  return v6;
}

uint64_t AMFDRSealingMapCopyLocalDataByPopulate(__CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalDataByPopulate", @"dataClass is NULL", v10);
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  CFStringRef v6 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a1, a3, 0, 0);
  if (!v6)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalDataByPopulate", @"dataInstance is NULL", v10);
    goto LABEL_10;
  }
  CFStringRef v7 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a1, a3, 1, 0);
  if (!v7)
  {
    AMSupportLogInternal();
    goto LABEL_10;
  }
  uint64_t v8 = _AMFDRSealingMapCopyLocalDataInternal(a1, v6, v7, 1, 0, a2, a3);
LABEL_5:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v8;
}

uint64_t AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute(void *a1, int a2, const __CFArray *a3, const __CFArray *a4, const void *a5, CFTypeRef *a6, CFTypeRef *a7, CFTypeRef *a8, uint64_t a9)
{
  CFTypeID v13 = a1;
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFAllocatorRef v15 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v17 = CFGetAllocator(v13);
  CFArrayRef v18 = CFArrayCreateMutable(v17, 0, v15);
  CFAllocatorRef v19 = CFGetAllocator(v13);
  CFMutableArrayRef v20 = CFArrayCreateMutable(v19, 0, v15);
  CFMutableArrayRef v21 = v20;
  if (Mutable) {
    BOOL v22 = v18 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22 || v20 == 0)
  {
    AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"failed to allocate data class/instance arrays", v62);
LABEL_81:
    CFArrayRef v51 = 0;
    uint64_t v58 = 0;
    goto LABEL_61;
  }
  CFDictionaryRef v24 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)v13);
  if (!v24)
  {
    AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"amfdr options is NULL", v62);
    goto LABEL_81;
  }
  CFArrayRef v25 = (const __CFArray *)_CFDictionaryCopyValue(v24, @"SkipRecoverDataClasses");
  CFArrayRef v26 = v25;
  CFArrayRef v71 = v25;
  if (v25)
  {
    CFStringRef v27 = v21;
    CFTypeID v28 = CFGetTypeID(v25);
    BOOL v22 = v28 == CFArrayGetTypeID();
    CFMutableArrayRef v21 = v27;
    CFArrayRef v26 = v71;
    if (!v22)
    {
      CFStringRef v61 = @"malformed skipDataClasses";
LABEL_80:
      AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", v61, v62);
      goto LABEL_81;
    }
  }
  uint64_t EntriesForDeviceInternal = AMFDRSealingMapGetEntriesForDeviceInternal((uint64_t)v13);
  if (!EntriesForDeviceInternal)
  {
    CFStringRef v61 = @"Could not get sealing map";
    goto LABEL_80;
  }
  CFArrayRef v30 = (const __CFArray *)EntriesForDeviceInternal;
  CFAllocatorRef v31 = CFGetAllocator(v13);
  CFDictionaryRef v70 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  if (!v70)
  {
    AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"queryCache is NULL", v62);
    goto LABEL_81;
  }
  DERItem v64 = a6;
  DERItem v65 = a7;
  DERItem v66 = a8;
  CFArrayRef v72 = Mutable;
  if (CFArrayGetCount(v30) < 1)
  {
LABEL_50:
    if (CFArrayGetCount(v72) && CFArrayGetCount(v18))
    {
      CFIndex Count = CFArrayGetCount(v72);
      if (Count != CFArrayGetCount(v18))
      {
        AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"Must have a data instance for each data class to recover", v62);
        CFArrayRef v51 = 0;
        uint64_t v58 = 0;
        goto LABEL_61;
      }
      if (v64) {
        CFTypeRef *v64 = CFRetain(v72);
      }
      if (v65) {
        *DERItem v65 = CFRetain(v18);
      }
      if (v66)
      {
        *DERItem v66 = CFRetain(v21);
        if (CFArrayGetCount(v21) >= 1)
        {
          CFIndex v57 = CFArrayGetCount(v21);
          AMFDRSetStat((CFMutableDictionaryRef *)v13, @"FDRMissingDataInstance", v57);
        }
      }
    }
    CFArrayRef v51 = 0;
    uint64_t v58 = 1;
    goto LABEL_61;
  }
  CFIndex v32 = 0;
  if (v26) {
    int v33 = a2;
  }
  else {
    int v33 = 0;
  }
  int v74 = v33;
  char v34 = "adding %@ : %@ into array for multi instance";
  DERItem v67 = v13;
  DERItem v68 = v21;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v32);
    CFDictionaryRef v36 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v37 = CFGetTypeID(ValueAtIndex), v37 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"Object of unexpected type '%@' in sealing map", (char)v36);
      goto LABEL_71;
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v36, @"Tag");
    if (!Value)
    {
      AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"Missing key '%@' in sealing map entry", (char)@"Tag");
      goto LABEL_71;
    }
    CFStringRef v39 = Value;
    CFIndex v40 = v34;
    CFTypeID v41 = CFGetTypeID(Value);
    if (v41 != CFStringGetTypeID())
    {
      char v62 = (char)v39;
      CFStringRef format = @"Object of unexpected type '%@' for key '%@' in sealing map entry";
LABEL_70:
      AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", format, v62);
      goto LABEL_71;
    }
    CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal((uint64_t)v13, v39, 0, 0);
    char v34 = v40;
    if (AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, a5, 0)) {
      break;
    }
LABEL_49:
    if (++v32 >= CFArrayGetCount(v30)) {
      goto LABEL_50;
    }
  }
  if (v74)
  {
    v76.uint64_t length = CFArrayGetCount(v26);
    v76.location = 0;
    if (CFArrayContainsValue(v26, v76, v39))
    {
      AMSupportLogInternal();
      goto LABEL_49;
    }
  }
  CFStringRef v43 = a3;
  if (a3)
  {
    v77.uint64_t length = CFArrayGetCount(a3);
    v77.location = 0;
    LastIndexOfCFStringRef Value = CFArrayGetLastIndexOfValue(a3, v77, v39);
    if (LastIndexOfValue < 0)
    {
      CFStringRef v43 = 0;
    }
    else
    {
      long long v45 = CFArrayGetValueAtIndex(a4, LastIndexOfValue);
      if (!v45)
      {
        CFStringRef format = @"dataInstance is NULL";
        goto LABEL_70;
      }
      CFStringRef v46 = v45;
      CFTypeID v47 = CFGetTypeID(v45);
      if (v47 != CFStringGetTypeID())
      {
        AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"malformed dataInstance", v62);
        CFArrayRef v51 = 0;
        goto LABEL_75;
      }
      AMSupportLogInternal();
      CFStringRef v43 = CFRetain(v46);
      CFArrayRef v26 = v71;
    }
  }
  CFArrayRef v48 = CFDictionaryGetValue(v36, @"MultiDataInstanceIdentifierList");
  if (v43 || !v48)
  {
    if (v43
      || (v55 = CFGetAllocator(v13), (CFStringRef v43 = _copyIdentifierListForSealingMapEntry(v55, v36, v70, 0, 0, a9)) != 0))
    {
      CFArrayAppendValue(v72, v39);
      CFArrayAppendValue(v18, v43);
      CFRelease(v43);
LABEL_48:
      char v34 = v40;
      goto LABEL_49;
    }
    if (!AMFDRAllowIncompleteData((uint64_t)v13))
    {
      char v63 = (char)v39;
LABEL_67:
      AMFDRErrorPushInternal(a9, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"Could not get data instance for data class '%@'", v63);
LABEL_71:
      CFArrayRef v51 = 0;
      uint64_t v58 = 0;
      goto LABEL_61;
    }
LABEL_47:
    AMSupportLogInternal();
    CFArrayAppendValue(v21, v39);
    goto LABEL_48;
  }
  CFAllocatorRef v49 = CFGetAllocator(v13);
  CFStringRef v50 = _copyIdentifierListForSealingMapEntry(v49, v36, v70, 0, 0, a9);
  if (!v50)
  {
    if (!AMFDRAllowIncompleteData((uint64_t)v13))
    {
      char v63 = (char)v39;
      goto LABEL_67;
    }
    goto LABEL_47;
  }
  CFArrayRef v51 = (const __CFArray *)v50;
  CFTypeID v52 = CFGetTypeID(v50);
  if (v52 == CFArrayGetTypeID())
  {
    if (CFArrayGetCount(v51) >= 1)
    {
      CFIndex v53 = 0;
      do
      {
        CFIndex v54 = CFArrayGetValueAtIndex(v51, v53);
        CFArrayAppendValue(v72, v39);
        CFArrayAppendValue(v18, v54);
        AMSupportLogInternal();
        ++v53;
      }
      while (v53 < CFArrayGetCount(v51));
    }
    CFRelease(v51);
    CFTypeID v13 = v67;
    CFMutableArrayRef v21 = v68;
    CFArrayRef v26 = v71;
    goto LABEL_48;
  }
  AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute", @"malformed dataInstance, expected CFArray", v62);
LABEL_75:
  uint64_t v58 = 0;
LABEL_61:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (v51) {
    CFRelease(v51);
  }
  return v58;
}

uint64_t AMFDRSealingMapSetSikOverride(const void *a1, void *a2, const __CFString *a3, const __CFString *a4, uint64_t a5)
{
  CFStringRef v6 = @"dataClass/dataInstance is NULL";
  if (a3 && a4)
  {
    CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal((uint64_t)a1, a3, a4, @"SikOverride");
    if (!EntryInternal || _AMFDRSealingMapEntrySetSikOverride(a1, a2, EntryInternal, (uint64_t)a3, (uint64_t)a4, a5)) {
      return 1;
    }
    CFStringRef v6 = @"_AMFDRSealingMapEntrySetSikOverride failed";
  }
  AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapSetSikOverride", v6, v13);
  return 0;
}

BOOL _AMFDRSealingMapEntrySetSikOverride(CFTypeRef cf, void *a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!theDict)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapEntrySetSikOverride", @"sealingMapEntry is NULL", v38);
    return 0;
  }
  if (!a4 || !a5)
  {
    CFStringRef v37 = @"dataClass/dataInstance is NULL";
    *(_OWORD *)char v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v32 = a6;
    CFIndex v33 = 1;
    goto LABEL_23;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (cf)
  {
    CFTypeID v13 = CFGetTypeID(cf);
    if (v13 == AMFDRGetTypeID()) {
      CFAllocatorRef v12 = CFGetAllocator(cf);
    }
  }
  CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(theDict, @"SikOverride");
  if (!v14) {
    return 1;
  }
  CFStringRef v15 = v14;
  CFTypeID v16 = CFGetTypeID(v14);
  CFTypeID TypeID = CFStringGetTypeID();
  BOOL v18 = 1;
  if (a2)
  {
    if (v16 == TypeID)
    {
      CFTypeID v19 = CFGetTypeID(a2);
      if (v19 == CFDictionaryGetTypeID())
      {
        CFStringRef v20 = AMFDRSealingMapCallMGCopyAnswerInternal(v15, 0, 0);
        if (v20)
        {
          CFDataRef v21 = (const __CFData *)v20;
          CFTypeID v22 = CFGetTypeID(v20);
          if (v22 == CFDataGetTypeID())
          {
            uint64_t BytePtr = (UInt8 *)CFDataGetBytePtr(v21);
            CFIndex Length = CFDataGetLength(v21);
            CFStringRef SikPubDigestIfNecessary = (const __CFString *)AMFDRDataCreateSikPubDigestIfNecessary(v12, BytePtr, Length);
            if (SikPubDigestIfNecessary)
            {
              CFStringRef v26 = SikPubDigestIfNecessary;
              CFStringRef v27 = AMFDRCreateInstanceString(v12, SikPubDigestIfNecessary);
              if (v27)
              {
                CFStringRef v28 = v27;
                CFStringRef v29 = CFStringCreateWithFormat(v12, 0, @"%@-%@", a4, a5);
                BOOL v18 = v29 != 0;
                if (v29)
                {
                  CFStringRef v30 = v29;
                  CFDictionarySetValue((CFMutableDictionaryRef)a2, v29, v28);
                  CFRelease(v30);
                }
                else
                {
                  AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapEntrySetSikOverride", @"sikOverrideKey create failed", v38);
                }
                CFRelease(v28);
              }
              else
              {
                AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapEntrySetSikOverride", @"sikPub is NULL", v38);
                BOOL v18 = 0;
              }
              CFRelease(v21);
              CFRelease(v26);
              return v18;
            }
            AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapEntrySetSikOverride", @"sikPubDigest is NULL", v38);
          }
          else
          {
            AMFDRErrorPushInternal(a6, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapEntrySetSikOverride", @"sikPubData NULL or malformed sikPub from ZG, expected CFData", v38);
          }
          CFRelease(v21);
          return 0;
        }
        CFStringRef v37 = @"sikPubData NULL or malformed sikPub from ZG, expected CFData";
        *(_OWORD *)char v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)CFTypeRef value = 0u;
        uint64_t v32 = a6;
        CFIndex v33 = 29;
LABEL_23:
        AMFDRErrorPushInternal(v32, v33, 0, 0, 0, 0, 0, 0, value[0], value[1], v35[0], v35[1], (void *)v36, *((void **)&v36 + 1), (uint64_t)"_AMFDRSealingMapEntrySetSikOverride", v37, v38);
        return 0;
      }
    }
  }
  return v18;
}

BOOL _AMFDRSealingMapCopyDataClassesAndInstancesInternal(void *a1, const __CFArray *a2, int a3, const void *a4, int a5, const __CFArray *a6, const __CFArray *a7, CFTypeRef *a8, CFTypeRef *a9, CFTypeRef *a10, CFTypeRef *a11, CFTypeRef *a12, CFTypeRef *a13, CFTypeRef cf, uint64_t a15)
{
  CFAllocatorRef v17 = a1;
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFTypeID v19 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v18, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v21 = CFGetAllocator(v17);
  CFTypeID v22 = CFArrayCreateMutable(v21, 0, v19);
  CFAllocatorRef v23 = CFGetAllocator(v17);
  CFMutableArrayRef v24 = CFArrayCreateMutable(v23, 0, v19);
  CFArrayRef v25 = v24;
  if (Mutable) {
    BOOL v26 = v22 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  if (v26 || v24 == 0)
  {
    AMFDRErrorPushInternal(a15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"failed to allocate data class/instance arrays", v89);
    CFAllocatorRef v55 = 0;
    CFStringRef v107 = 0;
    CFArrayRef v66 = 0;
    CFMutableDictionaryRef v29 = 0;
LABEL_177:
    CFArrayRef MutableCopy = 0;
    CFArrayRef v101 = 0;
LABEL_187:
    CFTypeRef v93 = 0;
    goto LABEL_142;
  }
  CFAllocatorRef v28 = CFGetAllocator(v17);
  CFMutableDictionaryRef v29 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v29)
  {
    AMFDRErrorPushInternal(a15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"failed to allocate sikOverrideDict", v89);
    CFAllocatorRef v55 = 0;
    CFStringRef v107 = 0;
    CFArrayRef v66 = 0;
    goto LABEL_177;
  }
  CFArrayRef MutableCopy = 0;
  if (a6)
  {
    CFMutableArrayRef v31 = 0;
    if (a7)
    {
      CFAllocatorRef v32 = CFGetAllocator(v17);
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy(v32, 0, a6);
      CFAllocatorRef v33 = CFGetAllocator(v17);
      CFMutableArrayRef v31 = CFArrayCreateMutableCopy(v33, 0, a7);
      if (!MutableCopy || !v31)
      {
        CFArrayRef v101 = v31;
        AMFDRErrorPushInternal(a15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"failed to allocate mutable copy of override data class/instance array", v89);
LABEL_179:
        CFAllocatorRef v55 = 0;
        CFStringRef v107 = 0;
        CFArrayRef v66 = 0;
        goto LABEL_187;
      }
    }
  }
  else
  {
    CFMutableArrayRef v31 = 0;
  }
  CFArrayRef v101 = v31;
  CFDictionaryRef v34 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)v17);
  if (!v34)
  {
    AMFDRErrorPushInternal(a15, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"amfdr options is NULL", v89);
    goto LABEL_179;
  }
  CFArrayRef v35 = (const __CFArray *)_CFDictionaryCopyValue(v34, @"SkipRecoverDataClasses");
  CFArrayRef v36 = v35;
  if (v35)
  {
    CFTypeID v37 = CFGetTypeID(v35);
    if (v37 != CFArrayGetTypeID())
    {
      AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"malformed skipDataClasses", v89);
      goto LABEL_186;
    }
  }
  if (cf)
  {
    CFTypeID v38 = CFGetTypeID(cf);
    if (v38 == CFDictionaryGetTypeID())
    {
      CFDictionaryRef v100 = (const __CFDictionary *)cf;
      CFRetain(cf);
      goto LABEL_22;
    }
    AMFDRErrorPushInternal(a15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"queryCache has wrong type %@", (char)cf);
LABEL_186:
    CFAllocatorRef v55 = 0;
    CFStringRef v107 = 0;
    CFArrayRef v66 = 0;
    goto LABEL_187;
  }
  CFAllocatorRef v39 = CFGetAllocator(v17);
  CFDictionaryRef v100 = CFDictionaryCreateMutable(v39, 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  if (!v100)
  {
    AMFDRErrorPushInternal(a15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"internalQueryCache allocation failed", v89);
    goto LABEL_186;
  }
LABEL_22:
  CFDataRef v92 = v29;
  int v97 = AMFDRAPTicketAllowsUnsealedData((uint64_t)v17);
  CFArrayRef v40 = a2;
  CFMutableArrayRef theArray = v25;
  if (CFArrayGetCount(a2) >= 1)
  {
    CFTypeRef v95 = 0;
    CFTypeRef v96 = 0;
    CFIndex v41 = 0;
    CFTypeRef v93 = 0;
    CFStringRef v107 = 0;
    uint64_t v104 = v17;
    CFArrayRef v99 = v36;
    CFArrayRef v90 = MutableCopy;
    CFIndex v103 = a4;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v40, v41);
      CFDictionaryRef v43 = ValueAtIndex;
      if (!ValueAtIndex || (CFTypeID v44 = CFGetTypeID(ValueAtIndex), TypeID = CFDictionaryGetTypeID(), v44 != TypeID))
      {
        AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Object of unexpected type '%@' in sealing map", (char)v43);
        goto LABEL_149;
      }
      if (a4)
      {
        CFTypeID v46 = CFGetTypeID(a4);
        CFTypeID TypeID = CFStringGetTypeID();
        if (v46 == TypeID)
        {
          LODWORD(TypeID) = AMFDRSealingMapEntryHasAttributeInternal(TypeID, v43, a4, 0);
          if (!TypeID) {
            goto LABEL_91;
          }
        }
      }
      CFTypeID v47 = @"minimal-manifest";
      if ((a3 & 1) == 0)
      {
        CFStringRef Value = (__CFString *)CFDictionaryGetValue(v43, @"Tag");
        if (!Value)
        {
          AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Missing key '%@' in sealing map entry", (char)@"Tag");
          goto LABEL_149;
        }
        CFTypeID v47 = Value;
        CFTypeID v49 = CFGetTypeID(Value);
        CFTypeID TypeID = CFStringGetTypeID();
        if (v49 != TypeID)
        {
          AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Object of unexpected type '%@' for key '%@' in sealing map entry", (char)v47);
          goto LABEL_149;
        }
      }
      if (v36
        && (v108.uint64_t length = CFArrayGetCount(v36),
            v108.location = 0,
            LODWORD(TypeID) = CFArrayContainsValue(v36, v108, v47),
            TypeID))
      {
        CFArrayRef v40 = a2;
        if (_isSealingClass((BOOL)v47))
        {
          AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Could not skip seal class '%@'", (char)v47);
          goto LABEL_149;
        }
        if (v97)
        {
          AMSupportLogInternal();
          CFArrayAppendValue(v25, v47);
        }
        else
        {
          CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal(0, v47, 0, 0);
          if (AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"RequiredToSeal", 0))
          {
            AMFDRErrorPushInternal(a15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Could not skip data class '%@' without unsealed data entitlement", (char)v47);
LABEL_149:
            CFAllocatorRef v55 = 0;
            goto LABEL_150;
          }
          AMSupportLogInternal();
        }
        a4 = v103;
      }
      else
      {
        BOOL HasAttributeInternal = AMFDRSealingMapEntryHasAttributeInternal(TypeID, v43, @"NonPoR", 0);
        if (HasAttributeInternal)
        {
          if (!AMFDROptionsGetBooleanValue((uint64_t)v17, @"AttemptToRecoverNonPoRData", 0)) {
            goto LABEL_90;
          }
          AMSupportLogInternal();
        }
        if (a6)
        {
          v109.uint64_t length = CFArrayGetCount(MutableCopy);
          CFArrayRef v51 = MutableCopy;
          v109.location = 0;
          LastIndexOfCFStringRef Value = CFArrayGetLastIndexOfValue(MutableCopy, v109, v47);
          if (LastIndexOfValue < 0)
          {
            v110.uint64_t length = CFArrayGetCount(a6);
            v110.location = 0;
            if (CFArrayContainsValue(a6, v110, v47))
            {
              AMSupportLogInternal();
              CFArrayRef v36 = v99;
LABEL_90:
              a4 = v103;
LABEL_91:
              CFArrayRef v40 = a2;
              goto LABEL_109;
            }
            CFAllocatorRef v55 = 0;
          }
          else
          {
            CFIndex v53 = LastIndexOfValue;
            CFIndex v54 = CFArrayGetValueAtIndex(v101, LastIndexOfValue);
            CFAllocatorRef v55 = v54;
            if (!v54)
            {
              AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"dataInstance is NULL", v89);
              CFArrayRef v66 = 0;
              BOOL HasAttributeInternal = 0;
LABEL_181:
              CFMutableDictionaryRef v29 = v92;
              CFArrayRef MutableCopy = v51;
              goto LABEL_153;
            }
            DERItem v56 = v22;
            CFIndex v57 = Mutable;
            CFTypeID v58 = CFGetTypeID(v54);
            if (v58 != CFStringGetTypeID())
            {
              AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"malformed dataInstance", v89);
              CFAllocatorRef v55 = 0;
              CFArrayRef v66 = 0;
              BOOL HasAttributeInternal = 0;
              goto LABEL_181;
            }
            AMSupportLogInternal();
            CFAllocatorRef v55 = CFRetain(v55);
            CFArrayRemoveValueAtIndex(v51, v53);
            CFArrayRemoveValueAtIndex(v101, v53);
            AMFDRGetAssemblyIDToVerify((uint64_t)v104, v47);
            uint64_t v59 = AMSupportSafeRetain();
            if (v59)
            {
              CFStringRef v107 = (const __CFString *)v59;
              CFMutableArrayRef Mutable = v57;
            }
            else
            {
              CFAllocatorRef v61 = CFGetAllocator(v104);
              CFStringRef v62 = CFStringCreateWithCString(v61, "", 0x8000100u);
              CFMutableArrayRef Mutable = v57;
              if (!v62)
              {
                AMFDRErrorPushInternal(a15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"failed to create currentAssemblyID", v89);
                CFStringRef v107 = 0;
                CFArrayRef v66 = 0;
                BOOL HasAttributeInternal = 0;
                goto LABEL_181;
              }
              CFStringRef v107 = v62;
            }
            CFTypeID v22 = v56;
            CFArrayRef v25 = theArray;
          }
          CFArrayRef MutableCopy = v51;
          CFArrayRef v36 = v99;
        }
        else
        {
          CFAllocatorRef v55 = 0;
        }
        char v63 = CFDictionaryGetValue(v43, @"MultiDataInstanceIdentifierList");
        if (v55 || !v63)
        {
          if (!v55)
          {
            CFAllocatorRef v71 = CFGetAllocator(v104);
            CFAllocatorRef v55 = _copyIdentifierListForSealingMapEntry(v71, v43, v100, 0, 0, a15);
          }
          CFStringRef v72 = v107;
          if (!v107)
          {
            CFAllocatorRef v73 = CFGetAllocator(v104);
            CFStringRef v72 = _copyIdentifierListForSealingMapEntry(v73, v43, v100, 1, 1, a15);
          }
          CFStringRef v107 = v72;
          if (v55 && v72)
          {
            if (_isSealingClass((BOOL)v47))
            {
              if (v96 && v95)
              {
                AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Encountered '%@' data class twice", (char)v47);
LABEL_150:
                CFArrayRef v66 = 0;
LABEL_151:
                BOOL HasAttributeInternal = 0;
LABEL_152:
                CFMutableDictionaryRef v29 = v92;
                goto LABEL_153;
              }
              CFTypeRef v96 = CFRetain(v47);
              CFTypeRef v95 = CFRetain(v55);
              goto LABEL_104;
            }
            if (_AMFDRSealingMapEntrySetSikOverride(v104, v92, v43, (uint64_t)v47, (uint64_t)v55, a15))
            {
              CFArrayAppendValue(Mutable, v47);
              CFArrayAppendValue(v22, v55);
              AMFDRSetAssemblyIdentifierToVerify((uint64_t)v104, v47, v107);
              uint64_t v75 = (uint64_t)v93;
              CFArrayRef v40 = a2;
              if (v93) {
                CFRelease(v93);
              }
              CFTypeRef v76 = AMFDRSealingMapCopySubCCNameListWithAttributeForSealingMapEntry(v75, v43, @"RequireSubCCDigest");
              if (v76)
              {
                CFTypeRef v93 = v76;
                AMFDRSetSubCCDigestsToVerify((uint64_t)v104, v47, v76);
              }
              else
              {
                CFTypeRef v93 = 0;
              }
              CFArrayRef MutableCopy = v90;
            }
            else
            {
              CFAllocatorRef v77 = CFGetAllocator(v104);
              CFStringRef v78 = CFStringCreateWithFormat(v77, 0, @"%@-%@", v47, v55);
              if (!v78)
              {
                AMFDRErrorPushInternal(a15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"dataClassInstanceWithoutSikPub create failed", v89);
                CFArrayRef v66 = 0;
                BOOL HasAttributeInternal = 0;
                CFMutableDictionaryRef v29 = v92;
                CFArrayRef MutableCopy = v90;
                goto LABEL_153;
              }
              CFStringRef v79 = v78;
              CFArrayAppendValue(theArray, v78);
              CFRelease(v79);
              if (a5 && AMFDRSealingMapEntryHasAttributeInternal(v80, v43, @"AllowSikPubMissingWhenUnseal", 0))
              {
                AMSupportLogInternal();
                CFArrayRef MutableCopy = v90;
              }
              else
              {
                CFArrayRef MutableCopy = v90;
                if (!(HasAttributeInternal | AMFDRAllowIncompleteData((uint64_t)v104)))
                {
                  AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"_AMFDRSealingMapEntrySetSikOverride failed", v89);
                  CFArrayRef v66 = 0;
                  BOOL HasAttributeInternal = 0;
                  CFMutableDictionaryRef v29 = v92;
                  goto LABEL_153;
                }
              }
              CFArrayRef v25 = theArray;
              CFArrayRef v36 = v99;
LABEL_104:
              CFArrayRef v40 = a2;
            }
            CFRelease(v55);
            CFStringRef v70 = v107;
            a4 = v103;
            CFAllocatorRef v17 = (void *)v104;
            goto LABEL_108;
          }
          int v74 = AMFDRAllowIncompleteData((uint64_t)v104);
          if (((a3 & a5 | v74) & 1) == 0)
          {
            if (a5)
            {
              if (!AMFDRSealingMapEntryHasAttributeInternal(v74, v43, @"FusedByRestore", 0)
                && !HasAttributeInternal)
              {
                goto LABEL_147;
              }
            }
            else if (!HasAttributeInternal)
            {
LABEL_147:
              AMFDRErrorPushInternal(a15, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Could not get data instance for data class '%@'", (char)v47);
              goto LABEL_150;
            }
          }
          AMSupportLogInternal();
          CFArrayAppendValue(v25, v47);
          if (v55) {
            CFRelease(v55);
          }
          CFArrayRef v40 = a2;
          a4 = v103;
          if (v107) {
            CFRelease(v107);
          }
          CFStringRef v107 = 0;
          CFAllocatorRef v17 = (void *)v104;
        }
        else
        {
          CFAllocatorRef v17 = (void *)v104;
          CFAllocatorRef v64 = CFGetAllocator(v104);
          CFStringRef v65 = _copyIdentifierListForSealingMapEntry(v64, v43, v100, 0, 0, a15);
          if (!v65)
          {
            if (!AMFDRAllowIncompleteData((uint64_t)v104) && !HasAttributeInternal)
            {
              AMFDRErrorPushInternal(a15, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Could not get data instance for data class '%@'", (char)v47);
              CFAllocatorRef v55 = 0;
              CFArrayRef v66 = 0;
              goto LABEL_152;
            }
            AMSupportLogInternal();
            CFArrayAppendValue(v25, v47);
            goto LABEL_90;
          }
          CFArrayRef v66 = (const __CFArray *)v65;
          CFTypeID v67 = CFGetTypeID(v65);
          if (v67 != CFArrayGetTypeID())
          {
            AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"malformed dataInstance, expected CFArray", v89);
            CFAllocatorRef v55 = 0;
            goto LABEL_151;
          }
          if (CFArrayGetCount(v66) >= 1)
          {
            CFIndex v68 = 0;
            do
            {
              DERItem v69 = CFArrayGetValueAtIndex(v66, v68);
              CFArrayAppendValue(Mutable, v47);
              CFArrayAppendValue(v22, v69);
              AMSupportLogInternal();
              ++v68;
            }
            while (v68 < CFArrayGetCount(v66));
          }
          CFRelease(v66);
          CFStringRef v70 = v107;
          if (v107)
          {
            a4 = v103;
            CFAllocatorRef v17 = (void *)v104;
            CFArrayRef v40 = a2;
            CFArrayRef v25 = theArray;
            CFArrayRef v36 = v99;
LABEL_108:
            CFRelease(v70);
            CFStringRef v107 = 0;
            goto LABEL_109;
          }
          CFStringRef v107 = 0;
          a4 = v103;
          CFAllocatorRef v17 = (void *)v104;
          CFArrayRef v40 = a2;
          CFArrayRef v25 = theArray;
          CFArrayRef v36 = v99;
        }
      }
LABEL_109:
      if (++v41 >= CFArrayGetCount(v40)) {
        goto LABEL_112;
      }
    }
  }
  CFStringRef v107 = 0;
  CFTypeRef v93 = 0;
  CFTypeRef v95 = 0;
  CFTypeRef v96 = 0;
LABEL_112:
  if (!CFArrayGetCount(Mutable))
  {
    CFMutableDictionaryRef v29 = v92;
    if (!a4 || (CFTypeID v83 = CFGetTypeID(a4), v83 != CFStringGetTypeID()))
    {
      int v84 = AMFDRAllowIncompleteData((uint64_t)v17);
      if ((a3 & a5 & 1) == 0 && !v84)
      {
        CFStringRef format = @"No data classes to recover";
LABEL_140:
        AMFDRErrorPushInternal(a15, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", format, v89);
LABEL_141:
        CFAllocatorRef v55 = 0;
        CFArrayRef v66 = 0;
LABEL_142:
        BOOL HasAttributeInternal = 0;
        goto LABEL_153;
      }
    }
LABEL_146:
    AMSupportLogInternal();
    CFAllocatorRef v55 = 0;
    CFArrayRef v66 = 0;
    BOOL HasAttributeInternal = 1;
    goto LABEL_153;
  }
  CFMutableDictionaryRef v29 = v92;
  if (!CFArrayGetCount(v22))
  {
    if (!a4 || (CFTypeID v86 = CFGetTypeID(a4), v86 != CFStringGetTypeID()))
    {
      int v87 = AMFDRAllowIncompleteData((uint64_t)v17);
      if ((a3 & a5 & 1) == 0 && !v87)
      {
        CFStringRef format = @"No data instances to recover";
        goto LABEL_140;
      }
    }
    goto LABEL_146;
  }
  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count != CFArrayGetCount(v22))
  {
    AMFDRErrorPushInternal(a15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstancesInternal", @"Must have a data instance for each data class to recover", v89);
    goto LABEL_141;
  }
  if (a8 && v96) {
    *a8 = CFRetain(v96);
  }
  if (a9 && v95) {
    *a9 = CFRetain(v95);
  }
  if (a10) {
    *a10 = CFRetain(Mutable);
  }
  if (a11) {
    *a11 = CFRetain(v22);
  }
  if (a12)
  {
    *a12 = CFRetain(theArray);
    if (CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v82 = CFArrayGetCount(theArray);
      AMFDRSetStat((CFMutableDictionaryRef *)v17, @"FDRMissingDataInstance", v82);
    }
  }
  CFAllocatorRef v55 = 0;
  CFArrayRef v66 = 0;
  if (a13) {
    *a13 = CFRetain(v92);
  }
  BOOL HasAttributeInternal = 1;
LABEL_153:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (v66) {
    CFRelease(v66);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v107) {
    CFRelease(v107);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v101) {
    CFRelease(v101);
  }
  if (v93) {
    CFRelease(v93);
  }
  return HasAttributeInternal;
}

BOOL _isSealingClass(BOOL result)
{
  if (result)
  {
    CFStringRef v1 = (const __CFString *)result;
    CFStringRef v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "seal", 0x8000100u);
    if (v2)
    {
      CFStringRef v3 = v2;
      CFComparisonResult v4 = CFStringCompare(v1, v2, 0);
      CFRelease(v3);
      return v4 == kCFCompareEqualTo;
    }
    else
    {
      AMSupportLogInternal();
      return 0;
    }
  }
  return result;
}

CFTypeRef AMFDRSealingMapCopySubCCNameListWithAttributeForSealingMapEntry(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMSupportLogInternal();
    return 0;
  }
  CFStringRef v6 = Mutable;
  if (!a2) {
    goto LABEL_17;
  }
  CFStringRef Value = CFDictionaryGetValue(a2, @"SubCCList");
  if (!Value) {
    goto LABEL_17;
  }
  uint64_t v8 = Value;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v8)) {
    goto LABEL_17;
  }
  if (CFArrayGetCount((CFArrayRef)v8) >= 1)
  {
    CFIndex v10 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v8, v10);
      CFDictionaryRef v12 = ValueAtIndex;
      if (!ValueAtIndex) {
        break;
      }
      CFTypeID v13 = CFGetTypeID(ValueAtIndex);
      if (v13 != CFDictionaryGetTypeID()) {
        break;
      }
      CFStringRef v14 = CFDictionaryGetValue(v12, @"Tag");
      if (!v14) {
        break;
      }
      CFStringRef v15 = v14;
      CFTypeID v16 = CFGetTypeID(v14);
      CFTypeID v17 = CFStringGetTypeID();
      if (v16 != v17) {
        break;
      }
      if (AMFDRSealingMapEntryHasAttributeInternal(v17, v12, a3, 0)) {
        CFArrayAppendValue(v6, v15);
      }
      if (++v10 >= CFArrayGetCount((CFArrayRef)v8)) {
        goto LABEL_14;
      }
    }
LABEL_17:
    AMSupportLogInternal();
    CFTypeRef v18 = 0;
    goto LABEL_15;
  }
LABEL_14:
  CFTypeRef v18 = CFRetain(v6);
LABEL_15:
  CFRelease(v6);
  return v18;
}

CFDictionaryRef AMFDRSealingMapGetPairedSoCs(uint64_t a1)
{
  CFDictionaryRef result = AMFDRSealingMapGetEntryInternal(a1, @"seal", 0, 0);
  if (result)
  {
    return (const __CFDictionary *)CFDictionaryGetValue(result, @"PairedSoC");
  }
  return result;
}

uint64_t AMFDRSealingMapCopyMinimalManifestDataInstancesWithAttribute(void *a1, const void *a2, CFTypeRef *a3, CFTypeRef *a4, uint64_t a5)
{
  CFTypeRef v31 = 0;
  CFTypeRef v32 = 0;
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFDictionaryRef v11 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v13 = CFGetAllocator(a1);
  CFMutableArrayRef v14 = CFArrayCreateMutable(v13, 0, v11);
  CFArrayRef EntriesForDeviceInternal = (const __CFArray *)AMFDRSealingMapGetEntriesForDeviceInternal(0);
  if (!EntriesForDeviceInternal)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMinimalManifestDataInstancesWithAttribute", @"Could not get sealing map", v28);
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  CFArrayRef v16 = EntriesForDeviceInternal;
  CFMutableDictionaryRef v29 = a3;
  CFStringRef v30 = a4;
  if (CFArrayGetCount(EntriesForDeviceInternal) < 1)
  {
LABEL_16:
    if (CFArrayGetCount(Mutable))
    {
      if (v29) {
        CFTypeRef *v29 = CFRetain(Mutable);
      }
      if (v30)
      {
        *CFStringRef v30 = CFRetain(v14);
        if (CFArrayGetCount(v14) >= 1)
        {
          CFIndex Count = CFArrayGetCount(v14);
          AMFDRSetStat((CFMutableDictionaryRef *)a1, @"FDRMissingDataInstance", Count);
        }
      }
      uint64_t v26 = 1;
    }
    else
    {
      uint64_t v26 = 1;
    }
    goto LABEL_24;
  }
  CFIndex v17 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v17);
    CFDictionaryRef v19 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v20 = CFGetTypeID(ValueAtIndex), v20 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMinimalManifestDataInstancesWithAttribute", @"Object of unexpected type '%@' in sealing map", (char)v19);
      goto LABEL_35;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v19, @"MinimalSealingManifest");
    if (Value) {
      break;
    }
LABEL_15:
    if (++v17 >= CFArrayGetCount(v16)) {
      goto LABEL_16;
    }
  }
  CFArrayRef v22 = Value;
  if (v32)
  {
    CFRelease(v32);
    CFTypeRef v32 = 0;
  }
  if (v31)
  {
    CFRelease(v31);
    CFTypeRef v31 = 0;
  }
  if (_AMFDRSealingMapCopyDataClassesAndInstancesInternal(a1, v22, 1, a2, 0, 0, 0, 0, 0, 0, &v32, &v31, 0, 0, a5))
  {
    if (v32 && CFArrayGetCount((CFArrayRef)v32))
    {
      CFArrayRef v23 = (const __CFArray *)v32;
      v33.uint64_t length = CFArrayGetCount((CFArrayRef)v32);
      v33.location = 0;
      CFArrayAppendArray(Mutable, v23, v33);
      CFArrayRef v24 = (const __CFArray *)v31;
      v34.uint64_t length = CFArrayGetCount((CFArrayRef)v31);
      v34.location = 0;
      CFArrayAppendArray(v14, v24, v34);
    }
    goto LABEL_15;
  }
  AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyMinimalManifestDataInstancesWithAttribute", @"_AMFDRSealingMapCopyDataClassesAndInstancesInternal failed", v28);
LABEL_35:
  uint64_t v26 = 0;
LABEL_24:
  if (v32)
  {
    CFRelease(v32);
    CFTypeRef v32 = 0;
  }
  if (v31)
  {
    CFRelease(v31);
    CFTypeRef v31 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v26;
}

uint64_t AMFDRSealingMapCopyManifestPropertiesForDevice(CFDictionaryRef *a1, const __CFDictionary *a2, CFTypeRef *a3, CFTypeRef *a4, uint64_t a5)
{
  if (!a3)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"outManifestProperties is NULL", v48);
    goto LABEL_24;
  }
  CFArrayRef Value = CFDictionaryGetValue(a1[2], @"SealingUpdateProperties");
  unint64_t v10 = (unint64_t)CFDictionaryGetValue(a1[2], @"SealingExcludeProperties");
  unint64_t v11 = (unint64_t)CFDictionaryGetValue(a1[2], @"SealingPropertiesOverride");
  CFTypeRef cf = CFDictionaryGetValue(a1[2], @"AllowPropertyMismatch");
  if (v11 | v10)
  {
    if ((AMFDREntitlementIsEntitled(@"com.apple.libFDR.AllowIdentifierOverride") & 1) == 0)
    {
      AMFDRErrorPushInternal(a5, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Missing AllowIdentifierOverride entitlement", v48);
      goto LABEL_24;
    }
    if (v11)
    {
      CFTypeID v12 = CFGetTypeID((CFTypeRef)v11);
      if (v12 != CFDictionaryGetTypeID())
      {
        CFStringRef format = @"propertiesOverride is not a dictionary";
        goto LABEL_23;
      }
    }
    if (v10)
    {
      CFTypeID v13 = CFGetTypeID((CFTypeRef)v10);
      if (v13 != CFArrayGetTypeID())
      {
        CFStringRef format = @"propertiesToExclude is not an array";
        goto LABEL_23;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)v10);
      if (Count >= 1)
      {
        CFIndex v15 = Count;
        CFIndex v16 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v10, v16);
          if (!ValueAtIndex) {
            break;
          }
          CFTypeID v18 = CFGetTypeID(ValueAtIndex);
          if (v18 != CFStringGetTypeID()) {
            break;
          }
          if (v15 == ++v16) {
            goto LABEL_13;
          }
        }
        AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Object at index %ld in SealingExcludeProperties is not a string", v16);
LABEL_24:
        uint64_t v28 = 0;
        goto LABEL_64;
      }
    }
  }
LABEL_13:
  if (Value)
  {
    CFTypeID v19 = CFGetTypeID(Value);
    if (v19 == CFArrayGetTypeID())
    {
      CFIndex v20 = CFArrayGetCount((CFArrayRef)Value);
      if (v20 >= 1)
      {
        CFIndex v21 = v20;
        CFIndex v22 = 0;
        while (1)
        {
          CFArrayRef v23 = CFArrayGetValueAtIndex((CFArrayRef)Value, v22);
          if (!v23) {
            break;
          }
          CFTypeID v24 = CFGetTypeID(v23);
          if (v24 != CFStringGetTypeID()) {
            break;
          }
          if (v21 == ++v22) {
            goto LABEL_20;
          }
        }
        CFStringRef format = @"malformed property";
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    CFStringRef format = @"kAMFDROptionUpdateProperties is not array";
LABEL_23:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", format, v48);
    goto LABEL_24;
  }
LABEL_20:
  CFAllocatorRef v25 = CFGetAllocator(a1);
  if (v11) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v25, 0, (CFDictionaryRef)v11);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v25, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  CFMutableDictionaryRef v29 = MutableCopy;
  if (!MutableCopy)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Failed to allocate manifestProperties ", v48);
    goto LABEL_24;
  }
  CFAllocatorRef v30 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v30, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Failed to allocate missingPropertyTags ", v48);
    goto LABEL_24;
  }
  CFArrayRef ManifestPropertyEntriesForDevice = (const __CFArray *)_AMFDRSealingMapGetManifestPropertyEntriesForDevice((uint64_t)a1);
  if (!ManifestPropertyEntriesForDevice)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Could not get manifest properties", v48);
    goto LABEL_24;
  }
  CFArrayRef v33 = ManifestPropertyEntriesForDevice;
  CFStringRef v50 = a4;
  CFMutableArrayRef v52 = Mutable;
  uint64_t v49 = a5;
  if (CFArrayGetCount(ManifestPropertyEntriesForDevice) < 1)
  {
LABEL_56:
    if (CFDictionaryGetCount(v29))
    {
      if (CFDictionaryGetCount(v29)) {
        *a3 = CFRetain(v29);
      }
      if (v50 && CFArrayGetCount(v52)) {
        CFTypeRef *v50 = CFRetain(v52);
      }
      uint64_t v28 = 1;
    }
    else
    {
      uint64_t v28 = 1;
    }
    goto LABEL_64;
  }
  CFIndex v34 = 0;
  while (1)
  {
    CFDictionaryRef v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, v34);
    CFDictionaryRef v36 = v35;
    if (!v35 || (CFTypeID v37 = CFGetTypeID(v35), v37 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(v49, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Object of unexpected type '%@' in manifest property entries", (char)v36);
      goto LABEL_70;
    }
    CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(v36, @"Tag");
    if (!v38)
    {
      AMFDRErrorPushInternal(v49, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Missing key '%@' in manifest property entry", (char)@"Tag");
      goto LABEL_70;
    }
    CFStringRef v39 = v38;
    CFTypeID v40 = CFGetTypeID(v38);
    if (v40 != CFStringGetTypeID())
    {
      AMFDRErrorPushInternal(v49, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Object of unexpected type '%@' for key '%@' in manifest property entry", (char)v39);
      goto LABEL_70;
    }
    if (CFStringGetLength(v39) != 4) {
      break;
    }
    if (Value)
    {
      v54.uint64_t length = CFArrayGetCount((CFArrayRef)Value);
      v54.location = 0;
      BOOL v41 = CFArrayContainsValue((CFArrayRef)Value, v54, v39) != 0;
      if (!v10) {
        goto LABEL_42;
      }
    }
    else
    {
      BOOL v41 = 1;
      if (!v10) {
        goto LABEL_42;
      }
    }
    v55.uint64_t length = CFArrayGetCount((CFArrayRef)v10);
    v55.location = 0;
    if (CFArrayContainsValue((CFArrayRef)v10, v55, v39))
    {
      AMSupportLogInternal();
      CFDictionaryContainsKey(v29, v39);
      goto LABEL_55;
    }
LABEL_42:
    if (CFDictionaryContainsKey(v29, v39)) {
      BOOL v42 = 0;
    }
    else {
      BOOL v42 = v41;
    }
    if (v42)
    {
      CFAllocatorRef v43 = CFGetAllocator(a1);
      CFTypeID v44 = _copyMGValuePropertyEntry(v43, v36, a2);
      if (v44)
      {
        long long v45 = v44;
        CFDictionaryAddValue(v29, v39, v44);
        CFRelease(v45);
      }
      else
      {
        if (_propertyEntryHasAttribute(v36, @"Required", 0))
        {
          if ((AMFDRAllowIncompleteData((uint64_t)a1) & 1) == 0)
          {
            if (!cf || (CFTypeID v46 = CFGetTypeID(cf), v46 != CFBooleanGetTypeID()) || !CFBooleanGetValue((CFBooleanRef)cf))
            {
              AMFDRErrorPushInternal(v49, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"missing required property %@", (char)v39);
              goto LABEL_24;
            }
          }
          AMSupportLogInternal();
        }
        AMSupportLogInternal();
        CFArrayAppendValue(v52, v39);
      }
    }
LABEL_55:
    if (++v34 >= CFArrayGetCount(v33)) {
      goto LABEL_56;
    }
  }
  AMFDRErrorPushInternal(v49, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestPropertiesForDevice", @"Key '%@' length should be 4 for '%@' in manifest property entry", (char)v39);
LABEL_70:
  uint64_t v28 = 0;
LABEL_64:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v28;
}

BOOL _propertyEntryHasAttribute(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"PropertyAttributes");
  if (Value)
  {
    CFArrayRef v6 = Value;
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      v9.uint64_t length = CFArrayGetCount(v6);
      v9.location = 0;
      return CFArrayContainsValue(v6, v9, a2) != 0;
    }
  }
  return a3;
}

BOOL AMFDRSealingMapPropertyHasAttribute(uint64_t a1, const __CFString *cf, const void *a3, uint64_t a4)
{
  if (a1)
  {
    if (cf)
    {
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 == CFStringGetTypeID() && CFStringGetLength(cf) == 4)
      {
        CFArrayRef ManifestPropertyEntriesForDevice = (const __CFArray *)_AMFDRSealingMapGetManifestPropertyEntriesForDevice(a1);
        if (ManifestPropertyEntriesForDevice)
        {
          CFArrayRef v10 = ManifestPropertyEntriesForDevice;
          if (CFArrayGetCount(ManifestPropertyEntriesForDevice) >= 1)
          {
            for (CFIndex i = 0; i < CFArrayGetCount(v10); ++i)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, i);
              CFDictionaryRef v13 = ValueAtIndex;
              if (!ValueAtIndex) {
                break;
              }
              CFTypeID v14 = CFGetTypeID(ValueAtIndex);
              if (v14 != CFDictionaryGetTypeID()) {
                break;
              }
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v13, @"Tag");
              if (CFEqual(cf, Value))
              {
                return _propertyEntryHasAttribute(v13, a3, a4);
              }
            }
          }
        }
      }
    }
  }
  AMSupportLogInternal();
  return a4;
}

uint64_t AMFDRSealingMapPopulateMinimalSealingManifest(CFDictionaryRef *a1, void *a2, uint64_t a3)
{
  CFTypeRef v31 = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v28 = @"amfdr is NULL";
LABEL_49:
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapPopulateMinimalSealingManifest", v28, (char)v30);
    uint64_t v14 = 0;
    goto LABEL_50;
  }
  CFDictionaryRef v5 = a1[2];
  if (!v5)
  {
    CFStringRef v28 = @"amfdr option is NULL";
    goto LABEL_49;
  }
  CFStringRef v7 = (__CFDictionary *)_CFDictionaryCopyValue(v5, @"MinimalSealingManifests");
  if (v7)
  {
    CFMutableArrayRef Mutable = v7;
    CFRange v9 = 0;
    CFDictionaryRef Copy = 0;
    CFDataRef v11 = 0;
    if (a2) {
      *a2 = CFRetain(v7);
    }
LABEL_22:
    uint64_t v14 = 1;
    goto LABEL_23;
  }
  int v12 = AMFDRDataCopySealingManifestProperty(a1, @"meta", (uint64_t)&cf);
  CFDictionaryRef Copy = 0;
  CFTypeRef v13 = cf;
  uint64_t v14 = 1;
  if (v12 && cf)
  {
    CFTypeID v15 = CFGetTypeID(cf);
    if (v15 == CFDataGetTypeID())
    {
      CFAllocatorRef v16 = CFGetAllocator(a1);
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v16, a1[2]);
      if (Copy)
      {
        CFAllocatorRef v17 = CFGetAllocator(a1);
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v17, 0, a1[2]);
        CFRange v9 = MutableCopy;
        if (!MutableCopy)
        {
          AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapPopulateMinimalSealingManifest", @"newOptions is NULL", (char)v30);
          uint64_t v14 = 0;
          goto LABEL_25;
        }
        CFTypeID v19 = (const void *)*MEMORY[0x263EFFB38];
        CFDictionarySetValue(MutableCopy, @"VerifyData", (const void *)*MEMORY[0x263EFFB38]);
        CFDictionarySetValue(v9, @"SignData", v19);
        CFDictionarySetValue(v9, @"GetCombined", v19);
        AMFDRSetOptions((uint64_t)a1, v9);
        CFAllocatorRef v20 = CFGetAllocator(a1);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!AMFDRDataDecodeMetaProperty((const __CFData *)cf, &v31))
        {
          AMFDRSetOptions((uint64_t)a1, Copy);
          CFStringRef v29 = @"AMFDRDataDecodeMetaProperty failed";
          goto LABEL_54;
        }
        if (v31 && (CFTypeID v21 = CFGetTypeID(v31), v21 == CFArrayGetTypeID()))
        {
          if (CFArrayGetCount((CFArrayRef)v31) >= 1)
          {
            CFIndex v22 = 0;
            CFDataRef v11 = 0;
            while (1)
            {
              if (v11) {
                CFRelease(v11);
              }
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v31, v22);
              if (!ValueAtIndex)
              {
                CFStringRef v29 = @"dataInstance is NULL";
                goto LABEL_54;
              }
              CFStringRef v24 = ValueAtIndex;
              CFDataRef v25 = AMFDRDataCopy((uint64_t)a1, @"minimal-manifest", ValueAtIndex, a3);
              if (!v25) {
                break;
              }
              CFDataRef v11 = v25;
              CFDictionarySetValue(Mutable, v24, v25);
              if (++v22 >= CFArrayGetCount((CFArrayRef)v31)) {
                goto LABEL_45;
              }
            }
            AMFDRSetOptions((uint64_t)a1, Copy);
            CFAllocatorRef v30 = @"minimal-manifest";
            CFStringRef v29 = @"%@:%@ is NULL";
LABEL_54:
            AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapPopulateMinimalSealingManifest", v29, (char)v30);
            uint64_t v14 = 0;
            if (Mutable)
            {
              CFDataRef v11 = 0;
LABEL_23:
              CFRelease(Mutable);
              if (!v11) {
                goto LABEL_25;
              }
              goto LABEL_24;
            }
            goto LABEL_25;
          }
          CFDataRef v11 = 0;
LABEL_45:
          AMSupportLogInternal();
          if (!a2)
          {
LABEL_38:
            AMFDRSetOptions((uint64_t)a1, Copy);
            if (Mutable)
            {
              CFTypeID v27 = CFGetTypeID(Mutable);
              if (v27 == CFDictionaryGetTypeID() && CFDictionaryGetCount(Mutable) >= 1) {
                AMFDRSetOption((uint64_t)a1, @"MinimalSealingManifests", (const __CFString *)Mutable);
              }
              goto LABEL_22;
            }
            uint64_t v14 = 1;
            if (v11) {
LABEL_24:
            }
              CFRelease(v11);
LABEL_25:
            CFTypeRef v13 = cf;
            if (!cf) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
        }
        else
        {
          CFDataRef v11 = 0;
          if (!a2) {
            goto LABEL_38;
          }
        }
        *a2 = AMSupportSafeRetain();
        goto LABEL_38;
      }
      AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapPopulateMinimalSealingManifest", @"originalOptions is NULL", (char)v30);
      uint64_t v14 = 0;
LABEL_51:
      CFRange v9 = 0;
      goto LABEL_25;
    }
LABEL_50:
    CFDictionaryRef Copy = 0;
    goto LABEL_51;
  }
  CFRange v9 = 0;
  if (cf)
  {
LABEL_26:
    CFRelease(v13);
    CFTypeRef cf = 0;
  }
LABEL_27:
  if (v9) {
    CFRelease(v9);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  if (v31) {
    CFRelease(v31);
  }
  return v14;
}

uint64_t AMFDRSealingMapPopulateSealingManifest(uint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  if (!a1)
  {
    CFStringRef v21 = @"amfdr is NULL";
LABEL_33:
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapPopulateSealingManifest", v21, v24);
    return 0;
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 16);
  if (!v5)
  {
    CFStringRef v21 = @"amfdr option is NULL";
    goto LABEL_33;
  }
  CFStringRef v7 = (const __CFString *)_CFDictionaryCopyValue(v5, @"SealingManifest");
  if (v7)
  {
    CFStringRef v8 = v7;
    CFMutableDictionaryRef MutableCopy = 0;
    CFDictionaryRef Copy = 0;
    if (a2) {
      *a2 = CFRetain(v7);
    }
    uint64_t v15 = 1;
    goto LABEL_25;
  }
  uint64_t v11 = _AMFDRSealingMapCopyIdentifierListForClass(@"seal", a3, 0, 0);
  if (!v11)
  {
    CFStringRef v21 = @"Could not get Sealed Data Instance";
    goto LABEL_33;
  }
  CFStringRef v8 = (const __CFString *)v11;
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v12, *(CFDictionaryRef *)(a1 + 16));
  if (!Copy)
  {
    CFMutableDictionaryRef MutableCopy = 0;
    CFStringRef v22 = @"originalOptions is NULL";
LABEL_38:
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapPopulateSealingManifest", v22, v24);
    uint64_t v15 = 0;
    goto LABEL_25;
  }
  CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v13, 0, *(CFDictionaryRef *)(a1 + 16));
  if (!MutableCopy)
  {
    CFStringRef v22 = @"newOptions is NULL";
    goto LABEL_38;
  }
  if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore)
  {
    CFStringRef v14 = 0;
    goto LABEL_14;
  }
  CFStringRef PermissionsString = AMFDRDataCreatePermissionsString((__CFString *)a1, 0, @"seal", v8);
  if (!PermissionsString)
  {
    CFStringRef v22 = @"permission is NULL";
    goto LABEL_38;
  }
  CFStringRef v14 = PermissionsString;
  CFDictionarySetValue(MutableCopy, @"Permissions", PermissionsString);
LABEL_14:
  CFAllocatorRef v17 = (const void *)*MEMORY[0x263EFFB38];
  CFDictionarySetValue(MutableCopy, @"VerifyData", (const void *)*MEMORY[0x263EFFB38]);
  CFDictionarySetValue(MutableCopy, @"SignData", v17);
  CFDictionarySetValue(MutableCopy, @"GetCombined", v17);
  AMFDRSetOptions(a1, MutableCopy);
  CFStringRef v18 = (const __CFString *)AMFDRDataCopy(a1, @"seal", v8, a3);
  AMFDRSetOptions(a1, Copy);
  if (!v18)
  {
    CFStringRef v23 = @"sealingManifest is NULL";
LABEL_40:
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapPopulateSealingManifest", v23, v24);
    uint64_t v15 = 0;
    goto LABEL_22;
  }
  if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore)
  {
    AMFDRSetOption(a1, @"SealingManifest", v18);
    goto LABEL_18;
  }
  if ((AMFDRDataDecodeAndSetSealingManifest((void *)a1, (CFDataRef)v18, (uint64_t)v8, 0, 0, a3) & 1) == 0)
  {
    AMFDRSetOptions(a1, Copy);
    CFStringRef v23 = @"AMFDRDataDecodeAndSetSealingManifest failed";
    goto LABEL_40;
  }
LABEL_18:
  if (a2)
  {
    CFRelease(v18);
    CFStringRef v19 = (const __CFString *)_CFDictionaryCopyValue(*(const __CFDictionary **)(a1 + 16), @"SealingManifest");
    CFStringRef v18 = v19;
    if (v19) {
      *a2 = CFRetain(v19);
    }
  }
  uint64_t v15 = 1;
LABEL_22:
  CFRelease(v8);
  if (v14) {
    CFRelease(v14);
  }
  CFStringRef v8 = v18;
  if (v18)
  {
LABEL_25:
    CFRelease(v8);
    if (!MutableCopy) {
      goto LABEL_27;
    }
  }
  CFRelease(MutableCopy);
LABEL_27:
  if (Copy) {
    CFRelease(Copy);
  }
  return v15;
}

uint64_t AMFDRSealingMapRevertCurrentDevice(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRevertCurrentDevice", @"amfdr is NULL", v10);
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  CFStringRef v4 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(@"seal", a2, 0, 0);
  if (!v4)
  {
    AMFDRErrorPushInternal(a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRevertCurrentDevice", @"sealedDataInstance is NULL", v10);
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  CFDictionaryRef v5 = (__CFString *)AMFDRCreateCopy(a1);
  uint64_t v6 = (uint64_t)v5;
  if (!v5)
  {
    AMFDRErrorPushInternal(a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRevertCurrentDevice", @"cannot create a separate amfdr object for revert", v10);
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  CFStringRef PermissionsString = AMFDRDataCreatePermissionsString(v5, 0xEu, @"seal", v4);
  if (!PermissionsString)
  {
    AMSupportLogInternal();
LABEL_14:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  AMFDRSetOption(v6, @"Permissions", PermissionsString);
  if ((AMFDRDataRevert(v6) & 1) == 0)
  {
    AMFDRErrorPushInternal(a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRevertCurrentDevice", @"AMFDRDataRevert return false", v10);
    goto LABEL_14;
  }
  uint64_t v8 = 1;
LABEL_7:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v8;
}

uint64_t AMFDRSealingMapRecoverCurrentDevice(uint64_t a1, CFMutableDictionaryRef *a2, int a3, uint64_t a4)
{
  CFStringRef v164 = 0;
  CFStringRef v165 = 0;
  CFArrayRef v162 = 0;
  CFArrayRef v163 = 0;
  CFTypeRef v160 = 0;
  CFTypeRef v161 = 0;
  CFArrayRef v158 = 0;
  CFTypeRef v159 = 0;
  uint64_t v156 = 0;
  CFDictionaryRef v157 = 0;
  char v155 = 0;
  CFTypeRef v154 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  CFMutableDictionaryRef v142 = Mutable;
  if (!Mutable || (CFTypeID v9 = CFGetTypeID(Mutable), v9 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"queryCache allocation failed", v135);
    goto LABEL_210;
  }
  AMFDRSetStat((CFMutableDictionaryRef *)a1, @"FDRSealingMapRecover", 1);
  AMFDRSetStat(a2, @"FDRSealingMapRecover", 1);
  CFDictionaryRef v10 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)a2);
  CFDictionaryRef v11 = v10;
  if (!v10)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"amfdrRemote options is NULL", v135);
    goto LABEL_210;
  }
  v151 = (CFTypeRef *)a4;
  CFAllocatorRef v12 = CFDictionaryGetValue(v10, @"SealingManifestOverride");
  CFTypeRef v147 = CFDictionaryGetValue(v11, @"ForceSealing");
  CFBooleanRef v13 = (const __CFBoolean *)CFDictionaryGetValue(v11, @"AllowCSRForbidden");
  CFStringRef v14 = CFDictionaryGetValue(v11, @"SealingUpdateRepairConfigurationAsidMetadata");
  unint64_t v15 = (unint64_t)CFDictionaryGetValue(v11, @"SealingUpdateDataClasses");
  CFMutableArrayRef theArray = (CFMutableArrayRef)CFDictionaryGetValue(v11, @"SealingUpdateProperties");
  unint64_t cf = (unint64_t)CFDictionaryGetValue(v11, @"DataClassesOverride");
  *(void *)v146 = CFDictionaryGetValue(v11, @"DataInstancesOverride");
  char v143 = AMFDRAPTicketAllowsUnsealedData((uint64_t)a2);
  CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(v11, @"GetIntraFactoryData");
  CFArrayRef v17 = v16;
  if (v16) {
    BOOL v18 = CFArrayGetCount(v16) != 0;
  }
  else {
    BOOL v18 = 0;
  }
  v152 = a2;
  if (AMFDRIsNonDefaultDemotionState())
  {
    AMSupportLogInternal();
    int v19 = a3;
    uint64_t v20 = a1;
    CFStringRef v21 = (const __CFString *)*MEMORY[0x263EFFB40];
    AMFDRSetOption(v20, @"SkipVerifySik", (const __CFString *)*MEMORY[0x263EFFB40]);
    CFStringRef v22 = v21;
    a1 = v20;
    a3 = v19;
    a2 = v152;
    AMFDRSetOption((uint64_t)v152, @"SkipVerifySik", v22);
  }
  CFGetAllocator((CFTypeRef)a1);
  AMFDRSealedDataCreate();
  uint64_t v141 = v23;
  if (!v23)
  {
    AMFDRErrorPushInternal((uint64_t)v151, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"Failed to create sealedData. Data Recovery failed.", v135);
    goto LABEL_210;
  }
  if (cf | *(void *)v146)
  {
    if (AMFDREntitlementIsEntitled(@"com.apple.libFDR.AllowIdentifierOverride"))
    {
      if (cf && *(void *)v146)
      {
        CFTypeID v24 = CFGetTypeID((CFTypeRef)cf);
        if (v24 == CFArrayGetTypeID())
        {
          CFTypeID v25 = CFGetTypeID(*(CFTypeRef *)v146);
          if (v25 == CFArrayGetTypeID())
          {
            CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
            if (Count == CFArrayGetCount(*(CFArrayRef *)v146))
            {
              AMSupportLogInternal();
              CFAllocatorRef v12 = (const void *)*MEMORY[0x263EFFB40];
              goto LABEL_18;
            }
            CFStringRef v123 = @"different length of dataClassesOverride and dataInstancesOverride";
          }
          else
          {
            CFStringRef v123 = @"dataInstancesOverride is not an array";
          }
        }
        else
        {
          CFStringRef v123 = @"dataClassesOverride is not an array";
        }
      }
      else
      {
        CFStringRef v123 = @"dataClassesOverride and dataInstancesOverride do not match";
      }
      AMFDRErrorPushInternal((uint64_t)v151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", v123, v135);
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)v151, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"Missing AllowIdentifierOverride entitlement", v135);
    }
LABEL_224:
    uint64_t v90 = 0;
    goto LABEL_132;
  }
LABEL_18:
  int v138 = a3;
  if (!v12 || (CFTypeID v27 = CFGetTypeID(v12), v27 != CFBooleanGetTypeID()) || CFBooleanGetValue((CFBooleanRef)v12) != 1)
  {
    if (!v147 || (CFTypeID v28 = CFGetTypeID(v147), v28 != CFBooleanGetTypeID()) || CFBooleanGetValue((CFBooleanRef)v147) != 1)
    {
      if (v13 && (CFTypeID v29 = CFGetTypeID(v13), v29 == CFBooleanGetTypeID()))
      {
        int v30 = CFBooleanGetValue(v13);
        char v31 = v143;
        if (v30 == 1) {
          char v31 = 1;
        }
        if ((v31 & 1) == 0)
        {
LABEL_29:
          if (v15) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v18;
          }
          if (!v32 || theArray)
          {
            CFArrayRef v33 = (const void *)v15;
            AMSupportLogInternal();
            CFIndex v34 = (void *)v141;
            CFDictionaryRef v35 = v151;
            CFArrayRef v36 = *(const __CFArray **)v146;
            if (!(v15 | (unint64_t)theArray))
            {
              if ((AMFDRSealingMapPopulateSealingManifest(a1, 0, (uint64_t)&v156) & 1) != 0
                && (_AMFDRSealingManifestTrustEvaluation(a1, (uint64_t)&v156) & 1) != 0
                && (AMFDRSealingMapPopulateMinimalSealingManifest((CFDictionaryRef *)a1, 0, (uint64_t)&v156) & 1) != 0
                && (AMFDRSealingManifestVerifyMinimalManifest((const __CFDictionary **)a1, &v156) & 1) != 0
                && _AMFDRSealingManifestCopyDataClassesAndInstances(a1, (const __CFArray *)cf, *(const __CFArray **)v146, 0, &v165, (CFTypeRef *)&v164, (CFTypeRef *)&v163, (CFTypeRef *)&v162, (uint64_t *)&v161, (uint64_t *)&v160, (uint64_t *)&v159, &v154, &v156))
              {
                goto LABEL_107;
              }
              AMSupportLogInternal();
            }
            goto LABEL_105;
          }
          goto LABEL_43;
        }
      }
      else if ((v143 & 1) == 0)
      {
        goto LABEL_29;
      }
    }
  }
  if (v15 | (unint64_t)theArray)
  {
    CFArrayRef v33 = (const void *)v15;
    AMSupportLogInternal();
    CFIndex v34 = (void *)v141;
    CFDictionaryRef v35 = v151;
    CFArrayRef v36 = *(const __CFArray **)v146;
LABEL_105:
    if (AMFDRSealingMapPopulateSealingManifest((uint64_t)a2, 0, (uint64_t)v35))
    {
      if (_AMFDRSealingManifestCopyDataClassesAndInstances((uint64_t)a2, (const __CFArray *)cf, v36, v33, &v165, (CFTypeRef *)&v164, (CFTypeRef *)&v163, (CFTypeRef *)&v162, (uint64_t *)&v161, (uint64_t *)&v160, (uint64_t *)&v159, &v154, v35))
      {
LABEL_107:
        CFArrayRef v17 = 0;
        if (!AMFDRSealedDataPopulatedFromManifest((uint64_t)v34, 1, (uint64_t)v35))
        {
          uint64_t v90 = 0;
          goto LABEL_132;
        }
        CFTypeRef v148 = 0;
        CFArrayRef v70 = 0;
        goto LABEL_109;
      }
      CFStringRef v124 = @"_AMFDRSealingManifestCopyDataClassesAndInstances failed";
    }
    else
    {
      CFStringRef v124 = @"AMFDRSealingMapPopulateSealingManifest failed on amfdrRemote";
    }
    AMFDRErrorPushInternal((uint64_t)v35, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", v124, v135);
LABEL_210:
    uint64_t v90 = 0;
    goto LABEL_132;
  }
LABEL_43:
  AMSupportLogInternal();
  CFDictionaryRef v35 = v151;
  if ((_AMFDRSealingMapCopyDataClassesAndInstances(a2, (const __CFArray *)cf, *(const __CFArray **)v146, (CFTypeRef *)&v165, (CFTypeRef *)&v164, (CFTypeRef *)&v163, (CFTypeRef *)&v162, (CFTypeRef *)&v158, (uint64_t *)&v161, (uint64_t *)&v160, (uint64_t *)&v159, &v155, &v154, a3 ^ 1u, v142, (uint64_t)v151) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v151, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"_AMFDRSealingMapCopyDataClassesAndInstances failed", v135);
    goto LABEL_224;
  }
  if (v14)
  {
    CFTypeID v37 = CFGetTypeID(v14);
    if (v37 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue((CFBooleanRef)v14))
      {
        CFStringRef v38 = (const void *)copyProductType(a1);
        CFStringRef v39 = v38;
        if (!v38 || (CFTypeID v40 = CFGetTypeID(v38), v40 != CFStringGetTypeID()))
        {
          AMFDRErrorPushInternal((uint64_t)v151, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"currentDevice has wrong type '%@'", (char)v39);
          uint64_t v90 = 0;
          goto LABEL_132;
        }
        RepairConfigurationCFArrayRef Entries = _AMFDRSealingMapGetRepairConfigurationEntries(v39);
        if (RepairConfigurationEntries)
        {
          BOOL v42 = RepairConfigurationEntries;
          CFTypeID v43 = CFGetTypeID(RepairConfigurationEntries);
          if (v43 == CFDictionaryGetTypeID())
          {
            if (AMFDRSealedDataSetRepairConfiguration(v141, v42, (uint64_t)v151))
            {
              char v44 = AMFDRAllowIncompleteData(a1);
              RepairConfigurationAsidMetadataInternalBlob = AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob(0, 0, v42, v44, v142, v151);
              CFTypeID v46 = RepairConfigurationAsidMetadataInternalBlob;
              if (RepairConfigurationAsidMetadataInternalBlob)
              {
                CFTypeID v47 = CFGetTypeID(RepairConfigurationAsidMetadataInternalBlob);
                if (v47 == CFArrayGetTypeID())
                {
                  char v48 = *(const void **)(v141 + 232);
                  if (v48) {
                    CFRelease(v48);
                  }
                  *(void *)(v141 + 232) = v46;
                  CFRetain(v46);
                  goto LABEL_58;
                }
              }
              AMFDRErrorPushInternal((uint64_t)v151, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"asidMetadataInternalBlob has wrong type %@", (char)v46);
            }
            else
            {
              AMFDRErrorPushInternal((uint64_t)v151, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"AMFDRSealedDataSetRepairConfiguration failed.", v135);
            }
            uint64_t v90 = 0;
            goto LABEL_132;
          }
        }
      }
    }
  }
LABEL_58:
  if (!v18)
  {
    CFArrayRef v17 = 0;
    CFTypeRef v148 = 0;
    CFArrayRef v70 = 0;
    CFIndex v34 = (void *)v141;
    goto LABEL_94;
  }
  CFTypeRef v144 = (CFTypeRef)a1;
  if (!a2)
  {
    uint64_t v49 = (uint64_t)v151;
    AMFDRErrorPushInternal((uint64_t)v151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIntraFactoryClassesAndInstances", @"amfdr is NULL", v135);
    CFArrayRef v17 = 0;
LABEL_238:
    CFTypeRef v148 = 0;
    CFArrayRef v70 = 0;
    char v72 = 0;
    CFIndex v34 = (void *)v141;
    goto LABEL_92;
  }
  if (!v17)
  {
    uint64_t v49 = (uint64_t)v151;
    AMFDRErrorPushInternal((uint64_t)v151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIntraFactoryClassesAndInstances", @"intraFactoryDataMap is NULL", v135);
    goto LABEL_238;
  }
  uint64_t v49 = (uint64_t)v151;
  CFAllocatorRef v50 = CFGetAllocator(a2);
  CFArrayRef v51 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef v52 = CFArrayCreateMutable(v50, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v53 = CFGetAllocator(a2);
  CFArrayRef v54 = CFArrayCreateMutable(v53, 0, v51);
  CFAllocatorRef v55 = CFGetAllocator(a2);
  CFMutableArrayRef v56 = CFArrayCreateMutable(v55, 0, v51);
  CFMutableArrayRef theArraya = v56;
  CFArrayRef cfa = v52;
  if (v52 && v54 && v56)
  {
    CFAllocatorRef v57 = CFGetAllocator(a2);
    CFDictionaryRef v58 = CFDictionaryCreateMutable(v57, 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
    if (v58)
    {
      if (CFArrayGetCount(v17) < 1)
      {
LABEL_78:
        if (CFArrayGetCount(cfa) < 1)
        {
          CFIndex v34 = (void *)v141;
          if (AMFDRAllowIncompleteData((uint64_t)a2))
          {
            AMSupportLogInternal();
            CFArrayRef v17 = 0;
            CFTypeRef v148 = 0;
            CFArrayRef v70 = 0;
            char v72 = 1;
          }
          else
          {
            CFArrayRef v17 = 0;
            CFTypeRef v148 = 0;
            CFArrayRef v70 = 0;
            char v72 = 0;
          }
        }
        else
        {
          CFIndex v69 = CFArrayGetCount(cfa);
          CFIndex v34 = (void *)v141;
          if (v69 == CFArrayGetCount(v54))
          {
            CFArrayRef v17 = (const __CFArray *)AMSupportSafeRetain();
            CFTypeRef v148 = (CFTypeRef)AMSupportSafeRetain();
            CFArrayRef v70 = (const __CFArray *)CFRetain(theArraya);
            if (CFArrayGetCount(theArraya) >= 1)
            {
              CFIndex v71 = CFArrayGetCount(theArraya);
              AMFDRSetStat(v152, @"FDRMissingDataInstance", v71);
            }
            char v72 = 1;
          }
          else
          {
            AMFDRErrorPushInternal(v49, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIntraFactoryClassesAndInstances", @"Must have a data instance for each data class to recover", v135);
            CFArrayRef v17 = 0;
            CFTypeRef v148 = 0;
            CFArrayRef v70 = 0;
            char v72 = 0;
          }
        }
        goto LABEL_92;
      }
      CFIndex v59 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v59);
        CFDictionaryRef v61 = ValueAtIndex;
        if (!ValueAtIndex || (CFTypeID v62 = CFGetTypeID(ValueAtIndex), v62 != CFDictionaryGetTypeID()))
        {
          LOBYTE(v136) = (_BYTE)v61;
          v119 = @"Object of unexpected type '%@' in intraFactoryDataMap";
LABEL_203:
          CFStringRef format = v119;
          *(_OWORD *)v129 = 0u;
          *(_OWORD *)long long v131 = 0u;
          *(_OWORD *)CFTypeRef value = 0u;
          uint64_t v73 = v49;
          goto LABEL_204;
        }
        CFStringRef v63 = (const __CFString *)CFDictionaryGetValue(v61, @"Tag");
        if (!v63 || (CFStringRef v64 = v63, CFStringGetCharacterAtIndex(v63, 0) != 48) || CFStringGetLength(v64) != 4)
        {
          v136 = @"Tag";
          v119 = @"Missing key '%@' in intraFactoryDataMapEntry";
          goto LABEL_203;
        }
        CFTypeID v65 = CFGetTypeID(v64);
        if (v65 != CFStringGetTypeID()) {
          break;
        }
        CFAllocatorRef v66 = CFGetAllocator(a2);
        uint64_t v49 = (uint64_t)v151;
        CFStringRef v67 = _copyIdentifierListForSealingMapEntry(v66, v61, v58, 0, 0, (uint64_t)v151);
        if (v67)
        {
          CFStringRef v68 = v67;
          CFArrayAppendValue(cfa, v64);
          CFArrayAppendValue(v54, v68);
          CFRelease(v68);
        }
        else
        {
          if (!AMFDRAllowIncompleteData((uint64_t)a2))
          {
            CFStringRef format = @"Could not get data instance for intra factory data class '%@'";
            LOBYTE(v136) = (_BYTE)v64;
            *(_OWORD *)v129 = 0u;
            *(_OWORD *)long long v131 = 0u;
            *(_OWORD *)CFTypeRef value = 0u;
            uint64_t v73 = (uint64_t)v151;
            CFIndex v74 = 24;
            goto LABEL_89;
          }
          AMSupportLogInternal();
          CFArrayAppendValue(theArraya, v64);
        }
        if (++v59 >= CFArrayGetCount(v17)) {
          goto LABEL_78;
        }
      }
      LOBYTE(v136) = (_BYTE)v64;
      CFStringRef format = @"Object of unexpectedtype '%@' for key '%@' in intraFactoryDataMapEntry";
      *(_OWORD *)v129 = 0u;
      *(_OWORD *)long long v131 = 0u;
      *(_OWORD *)CFTypeRef value = 0u;
      uint64_t v73 = (uint64_t)v151;
      uint64_t v49 = (uint64_t)v151;
LABEL_204:
      CFIndex v74 = 1;
LABEL_89:
      AMFDRErrorPushInternal(v73, v74, 0, 0, 0, 0, 0, 0, value[0], value[1], v129[0], v129[1], v131[0], v131[1], (uint64_t)"_AMFDRSealingMapCopyIntraFactoryClassesAndInstances", format, (char)v136);
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)v151, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIntraFactoryClassesAndInstances", @"queryCache is NULL", v135);
    }
    CFArrayRef v17 = 0;
    CFTypeRef v148 = 0;
    CFArrayRef v70 = 0;
    char v72 = 0;
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)v151, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyIntraFactoryClassesAndInstances", @"failed to allocate data classes/instances/missingDataIdentifiers", v135);
    CFArrayRef v17 = 0;
    CFTypeRef v148 = 0;
    CFArrayRef v70 = 0;
    char v72 = 0;
  }
  CFIndex v34 = (void *)v141;
LABEL_92:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if ((v72 & 1) == 0)
  {
    CFStringRef formata = @"_AMFDRSealingMapCopyIntraFactoryClassesAndInstances failed";
    *(_OWORD *)long long v130 = 0u;
    *(_OWORD *)v132 = 0u;
    *(_OWORD *)valuea = 0u;
    uint64_t v121 = v49;
    goto LABEL_212;
  }
  a1 = (uint64_t)v144;
  CFDictionaryRef v35 = (CFTypeRef *)v49;
LABEL_94:
  uint64_t v75 = *(const void **)(a1 + 104);
  if (v75)
  {
    CFRelease(v75);
    *(void *)(a1 + 104) = 0;
  }
  if (v152[13])
  {
    AMSupportLogInternal();
    CFAllocatorRef v76 = CFGetAllocator((CFTypeRef)a1);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v76, 0, v152[13]);
    *(void *)(a1 + 104) = MutableCopy;
    if (!MutableCopy)
    {
      int v126 = @"failed copy asidDict from amfdrRemote to amfdrLocal";
LABEL_234:
      CFStringRef formata = v126;
      *(_OWORD *)long long v130 = 0u;
      *(_OWORD *)v132 = 0u;
      *(_OWORD *)valuea = 0u;
      uint64_t v121 = (uint64_t)v35;
      CFIndex v122 = 2;
      goto LABEL_235;
    }
  }
  CFStringRef v78 = *(const void **)(a1 + 128);
  if (v78)
  {
    CFRelease(v78);
    *(void *)(a1 + 128) = 0;
  }
  if (v152[16])
  {
    AMSupportLogInternal();
    CFAllocatorRef v79 = CFGetAllocator((CFTypeRef)a1);
    CFMutableDictionaryRef v80 = CFDictionaryCreateMutableCopy(v79, 0, v152[16]);
    *(void *)(a1 + 128) = v80;
    if (!v80)
    {
      int v126 = @"failed copy subCCDigestDict from amfdrRemote to amfdrLocal";
      goto LABEL_234;
    }
  }
  if (!AMFDRSealedDataPopulatedFromManifest((uint64_t)v34, 0, (uint64_t)v35)) {
    goto LABEL_252;
  }
LABEL_109:
  CFMutableDictionaryRef v81 = v152[15];
  if (v81) {
    CFRelease(v81);
  }
  CFTypeRef v82 = v154;
  v152[15] = (CFMutableDictionaryRef)v154;
  if (v82) {
    CFRetain(v82);
  }
  CFTypeID v83 = *(const void **)(a1 + 120);
  if (v83) {
    CFRelease(v83);
  }
  CFTypeRef v84 = v154;
  *(void *)(a1 + 120) = v154;
  if (v84) {
    CFRetain(v84);
  }
  if (!AMFDRGetOptions(a1))
  {
    CFStringRef formata = @"amfdrLocal options is NULL";
    *(_OWORD *)long long v130 = 0u;
    *(_OWORD *)v132 = 0u;
    *(_OWORD *)valuea = 0u;
    uint64_t v121 = (uint64_t)v35;
LABEL_212:
    CFIndex v122 = 10;
LABEL_235:
    AMFDRErrorPushInternal(v121, v122, 0, 0, 0, 0, 0, 0, valuea[0], valuea[1], v130[0], v130[1], v132[0], v132[1], (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", formata, v135);
    goto LABEL_252;
  }
  if (!v163 || !CFArrayGetCount(v163))
  {
    uint64_t v90 = 1;
    goto LABEL_132;
  }
  CFTypeRef v145 = (CFTypeRef)a1;
  int v85 = AMFDRCreateRecoveryPermissions((__CFString *)v152, v165, v164, v163, v162, (uint64_t)v35);
  if (!v85)
  {
LABEL_252:
    uint64_t v90 = 0;
    goto LABEL_132;
  }
  CFDictionaryRef v86 = (const __CFDictionary *)AMFDRGetOptions(a1);
  if (!v86)
  {
    CFStringRef v125 = @"amfdrLocal options is NULL";
LABEL_251:
    AMFDRErrorPushInternal((uint64_t)v35, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", v125, v135);
    goto LABEL_252;
  }
  CFStringRef v87 = (const __CFString *)CFDictionaryGetValue(v86, @"Permissions");
  if (!v87 || CFStringCompare(v87, v85, 0))
  {
    AMSupportLogInternal();
    AMFDRSetOption(a1, @"Permissions", v85);
  }
  CFDictionaryRef v88 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)v152);
  if (!v88)
  {
    CFStringRef v125 = @"amfdrRemote options is NULL";
    goto LABEL_251;
  }
  CFStringRef v89 = (const __CFString *)CFDictionaryGetValue(v88, @"Permissions");
  if (!v89 || CFStringCompare(v89, v85, 0))
  {
    AMSupportLogInternal();
    AMFDRSetOption((uint64_t)v152, @"Permissions", v85);
  }
  if (gRecoveryVerifier)
  {
    uint64_t v90 = (*(uint64_t (**)(uint64_t, const __CFString *))(gRecoveryVerifier + 16))(gRecoveryVerifier, v165);
    goto LABEL_132;
  }
  if (v35 && *v35)
  {
    CFRelease(*v35);
    *CFDictionaryRef v35 = 0;
  }
  if ((AMFDRSealedDataSetDataClassInstance(v34, v165, v164, v163, v162, (uint64_t)v35) & 1) == 0)
  {
    CFStringRef v125 = @"AMFDRSealedDataSetDataClassInstance failed";
    goto LABEL_251;
  }
  if ((AMFDRSealedDataSetMinimalManifestClassInstance(v34, v161, v160, v159, (uint64_t)v35) & 1) == 0)
  {
    CFStringRef v125 = @"AMFDRSealedDataSetMinimalManifestClassInstance failed";
    goto LABEL_251;
  }
  CFDataRef v92 = (const void *)v34[16];
  if (v92) {
    CFRelease(v92);
  }
  CFTypeRef v93 = v154;
  v34[16] = v154;
  if (v93) {
    CFRetain(v93);
  }
  if (v17
    && CFArrayGetCount(v17)
    && (AMFDRSealedDataSetIntraFactoryDataClassInstance((uint64_t)v34, v17, v148, (uint64_t)v35) & 1) == 0)
  {
    CFStringRef v125 = @"AMFDRSealedDataSetIntraFactoryDataClassInstance failed";
    goto LABEL_251;
  }
  if ((AMFDRSealingMapConfigSealedData(v34, (CFTypeRef)a1, (uint64_t)v35) & 1) == 0)
  {
    CFStringRef v125 = @"AMFDRSealingMapConfigSealedData failed.";
    goto LABEL_251;
  }
  unsigned int v153 = AMFDRSealedDataRecover((uint64_t)v34, a1, (uint64_t)v152, v138, (CFTypeRef *)&v157, (uint64_t)v35);
  if (v157)
  {
    CFAllocatorRef v94 = CFGetAllocator((CFTypeRef)a1);
    CFDictionaryRef v95 = CFDictionaryCreateMutableCopy(v94, 0, v157);
  }
  else
  {
    CFDictionaryRef v95 = 0;
  }
  if (v158)
  {
    if (CFArrayGetCount(v158) >= 1)
    {
      if (v95
        || (CFAllocatorRef v96 = CFGetAllocator((CFTypeRef)a1),
            (CFDictionaryRef v95 = CFDictionaryCreateMutable(v96, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) != 0))
      {
        if (CFDictionaryContainsKey(v95, @"MissingDataInstances"))
        {
          CFAllocatorRef v97 = CFGetAllocator((CFTypeRef)a1);
          CFArrayRef v98 = (const __CFArray *)CFDictionaryGetValue(v95, @"MissingDataInstances");
          CFArrayRef v99 = CFArrayCreateMutableCopy(v97, 0, v98);
          CFArrayRef v100 = v158;
          v167.uint64_t length = CFArrayGetCount(v158);
          v167.location = 0;
          CFArrayAppendArray(v99, v100, v167);
        }
        else
        {
          CFArrayRef v99 = v158;
        }
        CFDictionarySetValue(v95, @"MissingDataInstances", v99);
      }
    }
  }
  if (v70
    && CFArrayGetCount(v70) >= 1
    && (v95
     || (CFAllocatorRef v101 = CFGetAllocator((CFTypeRef)a1),
         (CFDictionaryRef v95 = CFDictionaryCreateMutable(v101, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) != 0)))
  {
    int v102 = v138;
    if (CFDictionaryContainsKey(v95, @"MissingIntraFactoryDataInstances"))
    {
      CFAllocatorRef v103 = CFGetAllocator((CFTypeRef)a1);
      CFArrayRef v104 = (const __CFArray *)CFDictionaryGetValue(v95, @"MissingIntraFactoryDataInstances");
      char v105 = CFArrayCreateMutableCopy(v103, 0, v104);
      v168.uint64_t length = CFArrayGetCount(v70);
      v168.location = 0;
      CFArrayAppendArray(v105, v70, v168);
      CFDictionarySetValue(v95, @"MissingIntraFactoryDataInstances", v105);
      if (!v138)
      {
LABEL_193:
        if (v35 && v95)
        {
          if (*v35)
          {
            CFDictionarySetValue(v95, (const void *)*MEMORY[0x263EFFC88], *v35);
            if (*v35)
            {
              CFRelease(*v35);
              *CFDictionaryRef v35 = 0;
            }
          }
          CFAllocatorRef v118 = CFGetAllocator(v145);
          *CFDictionaryRef v35 = CFErrorCreate(v118, @"AMFDRError", 19, v95);
        }
        goto LABEL_199;
      }
      goto LABEL_167;
    }
    CFDictionarySetValue(v95, @"MissingIntraFactoryDataInstances", v70);
  }
  else
  {
    int v102 = v138;
  }
  if (!v102) {
    goto LABEL_193;
  }
LABEL_167:
  v166[0] = 0;
  CFAllocatorRef v106 = CFGetAllocator(v145);
  CFMutableArrayRef v107 = CFArrayCreateMutable(v106, 0, MEMORY[0x263EFFF70]);
  CFArrayRef ManifestPropertyEntriesForDevice = (const __CFArray *)_AMFDRSealingMapGetManifestPropertyEntriesForDevice((uint64_t)v145);
  if (!ManifestPropertyEntriesForDevice)
  {
    int v116 = 1;
    goto LABEL_187;
  }
  if (!AMFDRSealingMapPopulateSealingManifest((uint64_t)v145, 0, (uint64_t)v35))
  {
    CFDictionaryRef v35 = v151;
    AMFDRErrorPushInternal((uint64_t)v151, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMissingPropertyTags", @"AMFDRSealingMapPopulateSealingManifest failed", v135);
    goto LABEL_217;
  }
  if (CFArrayGetCount(ManifestPropertyEntriesForDevice) < 1)
  {
LABEL_185:
    CFArrayRef ManifestPropertyEntriesForDevice = (const __CFArray *)CFRetain(v107);
    int v116 = 1;
    CFDictionaryRef v35 = v151;
    goto LABEL_187;
  }
  CFIndex v109 = 0;
  while (1)
  {
    if (v166[0])
    {
      CFRelease(v166[0]);
      v166[0] = 0;
    }
    CFDictionaryRef v110 = (const __CFDictionary *)CFArrayGetValueAtIndex(ManifestPropertyEntriesForDevice, v109);
    CFDictionaryRef v111 = v110;
    if (!v110 || (CFTypeID v112 = CFGetTypeID(v110), v112 != CFDictionaryGetTypeID()))
    {
      LOBYTE(v137) = (_BYTE)v111;
      CFStringRef v120 = @"Object of unexpected type '%@' in manifest property entries";
      goto LABEL_216;
    }
    CFStringRef v113 = (const __CFString *)CFDictionaryGetValue(v111, @"Tag");
    if (!v113)
    {
      v137 = @"Tag";
      CFStringRef v120 = @"Missing key '%@' in manifest property entry";
      goto LABEL_216;
    }
    CFStringRef v114 = v113;
    CFTypeID v115 = CFGetTypeID(v113);
    if (v115 != CFStringGetTypeID())
    {
      LOBYTE(v137) = (_BYTE)v114;
      CFStringRef v120 = @"Object of unexpected type '%@' for key '%@' in manifest property entry";
      goto LABEL_216;
    }
    if (CFStringGetLength(v114) != 4) {
      break;
    }
    if (_propertyEntryHasAttribute(v111, @"StoreAsInteger", 0))
    {
      if (!AMFDRDataCopySealingManifestIntegerProperty(v145, v114, (uint64_t)v166)) {
        goto LABEL_183;
      }
    }
    else if (!AMFDRDataCopySealingManifestProperty(v145, v114, (uint64_t)v166))
    {
      goto LABEL_183;
    }
    if (!v166[0])
    {
LABEL_183:
      AMSupportLogInternal();
      CFArrayAppendValue(v107, v114);
    }
    if (++v109 >= CFArrayGetCount(ManifestPropertyEntriesForDevice)) {
      goto LABEL_185;
    }
  }
  LOBYTE(v137) = (_BYTE)v114;
  CFStringRef v120 = @"Key '%@' length should be 4 for '%@' in manifest property entry";
LABEL_216:
  CFDictionaryRef v35 = v151;
  AMFDRErrorPushInternal((uint64_t)v151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMissingPropertyTags", v120, (char)v137);
LABEL_217:
  CFArrayRef ManifestPropertyEntriesForDevice = 0;
  int v116 = 0;
LABEL_187:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (v116)
  {
    if (!ManifestPropertyEntriesForDevice || CFArrayGetCount(ManifestPropertyEntriesForDevice) < 1) {
      goto LABEL_193;
    }
    if (v95
      || (CFAllocatorRef v117 = CFGetAllocator(v145),
          (CFDictionaryRef v95 = CFDictionaryCreateMutable(v117, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) != 0))
    {
      CFDictionarySetValue(v95, @"MissingSealingProperties", ManifestPropertyEntriesForDevice);
      goto LABEL_193;
    }
LABEL_199:
    uint64_t v90 = v153;
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)v35, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapRecoverCurrentDevice", @"Failed to get missing properties.", v135);
    uint64_t v90 = v153;
  }
LABEL_132:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v90;
}

uint64_t _AMFDRSealingMapCopyDataClassesAndInstances(void *a1, const __CFArray *a2, const __CFArray *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6, CFTypeRef *a7, CFTypeRef *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, unsigned char *a12, CFTypeRef *a13, unsigned __int8 a14, CFTypeRef cf, uint64_t a16)
{
  CFArrayRef EntriesForDeviceInternal = (const __CFArray *)AMFDRSealingMapGetEntriesForDeviceInternal(0);
  if (EntriesForDeviceInternal)
  {
    if (_AMFDRSealingMapCopyDataClassesAndInstancesInternal(a1, EntriesForDeviceInternal, 0, 0, a14, a2, a3, a4, a5, a6, a7, a8, a13, cf, a16))
    {
      if (AMFDRAPTicketAllowsUnsealedData((uint64_t)a1))
      {
        AMSupportLogInternal();
        return 1;
      }
      if (_AMFDRSealingMapCopyMinimalManifestClassesAndInstances(a1, a14, a9, a10, a11, a12, a16)) {
        return 1;
      }
      CFStringRef v26 = @"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances failed";
    }
    else
    {
      CFStringRef v26 = @"_AMFDRSealingMapCopyDataClassesAndInstancesInternal failed";
    }
    AMFDRErrorPushInternal(a16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstances", v26, v27);
  }
  else
  {
    AMFDRErrorPushInternal(a16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyDataClassesAndInstances", @"Could not get sealing map", v27);
  }
  return 0;
}

const void *_AMFDRSealingMapGetRepairConfigurationEntries(CFTypeRef cf)
{
  if (!cf) {
    goto LABEL_12;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 != CFStringGetTypeID()) {
    goto LABEL_12;
  }
  if (sealingMapRepairConfigurationCacheQueue_onceToken != -1) {
    dispatch_once(&sealingMapRepairConfigurationCacheQueue_onceToken, &__block_literal_global_1387);
  }
  dispatch_sync((dispatch_queue_t)sealingMapRepairConfigurationCacheQueue_sealingMapRepairConfigurationCacheQueue, &__block_literal_global_1384);
  CFDictionaryRef v3 = (const __CFDictionary *)fileSystemSealingMapRepairConfiguration;
  if (!fileSystemSealingMapRepairConfiguration
    || (CFTypeID v4 = CFGetTypeID((CFTypeRef)fileSystemSealingMapRepairConfiguration), v4 != CFDictionaryGetTypeID())
    || (CFStringRef Value = CFDictionaryGetValue(v3, cf)) == 0
    || (uint64_t v6 = Value, v7 = CFGetTypeID(Value), v7 != CFStringGetTypeID())
    || (uint64_t v8 = CFDictionaryGetValue(v3, v6), (v9 = v8) == 0)
    || (CFTypeID v10 = CFGetTypeID(v8), v10 != CFDictionaryGetTypeID()))
  {
LABEL_12:
    AMSupportLogInternal();
    return 0;
  }
  return v9;
}

__CFDictionary *AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob(const __CFString *a1, const __CFString *a2, CFTypeRef cf, char a4, const void *a5, CFTypeRef *a6)
{
  if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 != CFDictionaryGetTypeID()))
  {
    char v114 = (char)cf;
    CFStringRef v108 = @"repairConfiguration has wrong type %@";
LABEL_208:
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", v108, v114);
    return 0;
  }
  CFArrayRef v11 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RepairConfigurationAsidMetadata");
  CFArrayRef v12 = v11;
  if (!v11 || (CFTypeID v13 = CFGetTypeID(v11), v13 != CFArrayGetTypeID()))
  {
    char v114 = (char)v12;
    CFStringRef v108 = @"asidMetadataEntry has wrong type %@";
    goto LABEL_208;
  }
  CFStringRef v14 = CFDictionaryGetValue((CFDictionaryRef)cf, @"Version");
  unint64_t v15 = v14;
  if (!v14 || (CFTypeID v16 = CFGetTypeID(v14), v16 != CFStringGetTypeID()))
  {
    char v114 = (char)v15;
    CFStringRef v108 = @"version has wrong type %@";
    goto LABEL_208;
  }
  CFIndex Count = CFArrayGetCount(v12);
  CFAllocatorRef v140 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"asidMetadataInternalBlob create failed", (char)v110);
    return 0;
  }
  if (!a1 && a2)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"target class is NULL but instance is non-NULL", (char)v110);
    goto LABEL_219;
  }
  if (!a5 || (CFTypeID v17 = CFGetTypeID(a5), v17 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"queryCache has wrong type %@", (char)a5);
LABEL_219:
    CFStringRef v20 = 0;
    BOOL v18 = 0;
    goto LABEL_174;
  }
  BOOL v18 = CFDictionaryCreateMutable(v140, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v18)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"productInfoDict create failed", (char)v110);
    CFStringRef v20 = 0;
    goto LABEL_174;
  }
  v129 = v15;
  CFArrayRef theArray = v12;
  CFStringRef v119 = a2;
  uint64_t v19 = 0;
  CFStringRef v20 = 0;
  do
  {
    if (v20) {
      CFRelease(v20);
    }
    CFStringRef v21 = off_2642D13A8[v19];
    CFStringRef v22 = AMFDRSealingMapCallMGCopyAnswerInternal(v21, 0, 0);
    CFStringRef v20 = v22;
    if (!v22 || (CFTypeID v23 = CFGetTypeID(v22), v23 != CFNumberGetTypeID()))
    {
      CFGetTypeID(v20);
      AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"query %@ failed, productInfoValue is %@, typeID is %lu", (char)v21);
LABEL_174:
      int v30 = 0;
      CFRelease(Mutable);
      goto LABEL_168;
    }
    CFDictionaryAddValue(v18, off_2642D13C0[v19++], v20);
  }
  while (v19 != 3);
  CFStringRef v116 = v20;
  CFTypeRef value = v18;
  if (Count < 1)
  {
    int v138 = 0;
    v132 = 0;
    CFStringRef v25 = 0;
    char v135 = 0;
    CFStringRef v26 = 0;
    CFStringRef v27 = 0;
    CFStringRef v28 = 0;
    CFMutableArrayRef cfa = 0;
    CFTypeID v29 = 0;
    int v30 = 0;
    v136 = 0;
    goto LABEL_143;
  }
  int v138 = 0;
  CFIndex v24 = 0;
  v132 = 0;
  CFStringRef v25 = 0;
  char v135 = 0;
  CFStringRef v26 = 0;
  CFStringRef v27 = 0;
  CFStringRef v28 = 0;
  CFMutableArrayRef cfa = 0;
  CFTypeID v29 = 0;
  int v30 = 0;
  v136 = 0;
  v137 = a6;
  CFTypeID v115 = a5;
  while (1)
  {
    CFIndex v125 = v24;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v24);
    CFDictionaryRef v32 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v33 = CFGetTypeID(ValueAtIndex), v33 != CFDictionaryGetTypeID()))
    {
      CFMutableDictionaryRef theDict = v30;
      char v113 = (char)v32;
      CFStringRef v106 = @"primaryDataDict has wrong type %@";
LABEL_190:
      AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", v106, v113);
      goto LABEL_191;
    }
    CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(v32, @"Tag");
    char v35 = (char)v34;
    if (!v34
      || (theString2 = v34, v36 = CFGetTypeID(v34), v37 = v36 == CFStringGetTypeID(), char v35 = (char)theString2, !v37))
    {
      CFMutableDictionaryRef theDict = v30;
      char v113 = v35;
      CFStringRef v106 = @"primaryDataClass has wrong type %@";
      goto LABEL_190;
    }
    if (a1 && CFStringCompare(a1, theString2, 0)) {
      goto LABEL_139;
    }
    if (v30) {
      CFRelease(v30);
    }
    int v30 = CFDictionaryCreateMutable(v140, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v30)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"primaryModule create failed", (char)v110);
      CFDictionaryRef v95 = v136;
      CFAllocatorRef v96 = v138;
      if (v138) {
        goto LABEL_149;
      }
      goto LABEL_150;
    }
    if (v25) {
      CFRelease(v25);
    }
    CFStringRef v38 = _copyIdentifierListForSealingMapEntry(v140, v32, (const __CFDictionary *)a5, 0, 0, (uint64_t)a6);
    if (!v38)
    {
      if (a4)
      {
        AMSupportLogInternal();
        CFStringRef v25 = 0;
        if (!a6) {
          goto LABEL_139;
        }
        CFTypeRef v45 = *a6;
        if (!*a6) {
          goto LABEL_139;
        }
LABEL_133:
        CFRelease(v45);
        *a6 = 0;
        goto LABEL_139;
      }
      AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"failed to get instance of dataClass %@", (char)theString2);
      CFAllocatorRef v97 = v30;
      int v30 = 0;
      CFStringRef v25 = 0;
LABEL_212:
      CFDictionaryRef v95 = v136;
      CFAllocatorRef v96 = v138;
      goto LABEL_147;
    }
    CFStringRef v25 = v38;
    if (v119 && CFStringCompare(v119, v38, 0)) {
      goto LABEL_139;
    }
    if (v28) {
      CFRelease(v28);
    }
    CFStringRef v39 = CFStringCreateWithFormat(v140, 0, @"%@:%@", theString2, v25);
    CFStringRef v28 = v39;
    if (!v39 || (CFTypeID v40 = CFGetTypeID(v39), v40 != CFStringGetTypeID()))
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"primaryDataClassInstance create failed", (char)v110);
      goto LABEL_211;
    }
    CFDictionarySetValue(v30, @"DataClassInstance", v28);
    CFDictionarySetValue(v30, @"type", @"Primary");
    CFDictionarySetValue(v30, @"Version", v129);
    CFDictionarySetValue(v30, @"supm", v28);
    CFArrayRef v41 = (const __CFArray *)CFDictionaryGetValue(v32, @"dcls");
    CFArrayRef v42 = v41;
    CFArrayRef v130 = v41;
    if (v41)
    {
      CFTypeID v43 = CFGetTypeID(v41);
      BOOL v37 = v43 == CFArrayGetTypeID();
      CFArrayRef v42 = v130;
      if (!v37)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"dcls has wrong type %@", (char)v130);
LABEL_211:
        CFAllocatorRef v97 = v30;
        int v30 = 0;
        goto LABEL_212;
      }
    }
    if (v138) {
      CFRelease(v138);
    }
    char v44 = CFArrayCreateMutable(v140, 0, MEMORY[0x263EFFF70]);
    if (!v44)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"primaryData for dcls create failed", (char)v110);
      CFAllocatorRef v96 = 0;
      CFAllocatorRef v97 = v30;
      int v30 = 0;
      CFDictionaryRef v95 = v136;
      goto LABEL_147;
    }
    int v138 = v44;
    CFArrayAppendValue(v44, v28);
    if (v42) {
      CFIndex v131 = CFArrayGetCount(v42);
    }
    else {
      CFIndex v131 = 0;
    }
    if (cfa) {
      CFRelease(cfa);
    }
    CFMutableArrayRef cfa = CFArrayCreateMutable(v140, 0, MEMORY[0x263EFFF70]);
    if (!cfa)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"secondaryModules create failed", (char)v110);
      CFAllocatorRef v97 = v30;
      int v30 = 0;
      CFMutableArrayRef cfa = 0;
      goto LABEL_212;
    }
    CFMutableDictionaryRef theDict = v30;
    CFStringRef v139 = v28;
    if (v131 >= 1) {
      break;
    }
LABEL_92:
    CFDictionarySetValue(theDict, @"dcls", v138);
    CFArrayRef v68 = (const __CFArray *)CFDictionaryGetValue(v32, @"manp");
    if (!v68)
    {
LABEL_112:
      CFDictionaryRef v88 = CFDictionaryGetValue(v32, @"AssemblyIdentifierList");
      CFStringRef v89 = CFDictionaryGetValue(v32, @"AsidSubCCIdentifierList");
      if (v89 || (CFStringRef v89 = CFDictionaryGetValue(v32, @"AsidSubCCIdOptionalVerifyList")) != 0)
      {
        if (!v88) {
          goto LABEL_115;
        }
        CFDictionaryRef v110 = @"AssemblyIdentifierList";
        CFStringRef v109 = @"Both '%@' and '%@' exist in primaryDataClass %@";
LABEL_223:
        AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", v109, (char)v110);
LABEL_191:
        int v30 = 0;
LABEL_144:
        CFDictionaryRef v95 = v136;
        goto LABEL_145;
      }
      LOBYTE(v89) = (_BYTE)v88;
      if (!v88)
      {
        CFTypeRef v93 = theDict;
        goto LABEL_120;
      }
LABEL_115:
      if (v135) {
        CFRelease(v135);
      }
      CFTypeRef v90 = AMFDRSealingMapCopyAssemblyIdentifierListForSealingMapEntry(v140, v32, (const __CFDictionary *)a5, (uint64_t)a6);
      if (v90)
      {
        CFArrayRef v91 = v90;
        CFTypeID v92 = CFGetTypeID(v90);
        char v135 = v91;
        if (v92 != CFArrayGetTypeID())
        {
          LOBYTE(v110) = (_BYTE)v91;
          CFStringRef v109 = @"asidSeparatedValues has wrong type %@";
          goto LABEL_223;
        }
        CFTypeRef v93 = theDict;
        CFDictionarySetValue(theDict, @"asid", v91);
LABEL_120:
        CFDictionaryAddValue(v93, @"pdct", value);
        CFArrayAppendValue(Mutable, v93);
        v141.uint64_t length = CFArrayGetCount(cfa);
        v141.location = 0;
        CFArrayAppendArray(Mutable, cfa, v141);
        int v30 = v93;
        CFIndex v94 = v125;
        if (!a1) {
          goto LABEL_140;
        }
        goto LABEL_143;
      }
      if ((a4 & 1) == 0)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"failed to get value of asid %@", (char)v89);
        char v135 = 0;
        goto LABEL_191;
      }
      AMSupportLogInternal();
      if (a6)
      {
        char v135 = 0;
LABEL_132:
        CFTypeRef v45 = *a6;
        int v30 = theDict;
        if (!*a6) {
          goto LABEL_139;
        }
        goto LABEL_133;
      }
      char v135 = 0;
LABEL_138:
      int v30 = theDict;
      goto LABEL_139;
    }
    CFArrayRef v69 = v68;
    CFTypeID v70 = CFGetTypeID(v68);
    if (v70 != CFArrayGetTypeID())
    {
      LOBYTE(v110) = (_BYTE)v69;
      CFStringRef v109 = @"manp has wrong type %@";
      goto LABEL_223;
    }
    CFArrayRef v71 = v69;
    CFIndex v72 = CFArrayGetCount(v69);
    if (v72 <= 0)
    {
      CFStringRef v109 = @"manpCount cannot be zero";
      goto LABEL_223;
    }
    CFIndex v73 = v72;
    CFRelease(v138);
    CFMutableArrayRef v74 = CFArrayCreateMutable(v140, 0, MEMORY[0x263EFFF70]);
    if (!v74)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"primaryData for manp create failed", (char)v110);
      int v30 = 0;
      CFAllocatorRef v96 = 0;
      CFDictionaryRef v95 = v136;
      goto LABEL_146;
    }
    int v138 = v74;
    uint64_t v134 = v29;
    CFIndex v75 = 0;
    while (1)
    {
      CFDictionaryRef v76 = (const __CFDictionary *)CFArrayGetValueAtIndex(v71, v75);
      CFDictionaryRef v77 = v76;
      if (!v76 || (CFTypeID v78 = CFGetTypeID(v76), v78 != CFDictionaryGetTypeID()))
      {
        char v112 = (char)v77;
        CFStringRef v105 = @"propertyEntry has wrong type %@";
LABEL_194:
        AMFDRErrorPushInternal((uint64_t)v137, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", v105, v112);
        goto LABEL_195;
      }
      CFStringRef v79 = (const __CFString *)CFDictionaryGetValue(v77, @"Tag");
      CFStringRef v80 = v79;
      if (!v79
        || (v81 = v27, v82 = v25, v83 = CFGetTypeID(v79), v37 = v83 == CFStringGetTypeID(), v25 = v82, CFStringRef v27 = v81, !v37))
      {
        char v112 = (char)v80;
        CFStringRef v105 = @"propertyTag has wrong type %@";
        goto LABEL_194;
      }
      if (CFStringGetLength(v80) != 4)
      {
        char v112 = (char)v80;
        CFStringRef v105 = @"propertyTag '%@' length should be 4";
        goto LABEL_194;
      }
      if (v132) {
        CFRelease(v132);
      }
      CFTypeRef v84 = _copyMGValuePropertyEntry(v140, v77, 0);
      if (!v84) {
        break;
      }
      if (v26)
      {
        int v85 = v84;
        CFRelease(v26);
        CFTypeRef v84 = v85;
      }
      v132 = v84;
      CFStringRef v86 = CFStringCreateWithFormat(v140, 0, @"%@:%@", v80, v84);
      CFStringRef v26 = v86;
      if (!v86 || (CFTypeID v87 = CFGetTypeID(v86), v87 != CFStringGetTypeID()))
      {
        AMFDRErrorPushInternal((uint64_t)v137, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"propertyTagValue has wrong type %@", (char)v26);
LABEL_195:
        int v30 = 0;
        CFStringRef v28 = v139;
        CFDictionaryRef v95 = v136;
        CFTypeID v29 = v134;
        goto LABEL_145;
      }
      CFArrayAppendValue(v138, v26);
      if (v73 == ++v75)
      {
        CFDictionarySetValue(theDict, @"manp", v138);
        CFStringRef v28 = v139;
        CFTypeID v29 = v134;
        a6 = v137;
        a5 = v115;
        goto LABEL_112;
      }
    }
    if ((a4 & 1) == 0)
    {
      AMFDRErrorPushInternal((uint64_t)v137, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"failed to get value of property %@", (char)v80);
      v132 = 0;
      goto LABEL_195;
    }
    AMSupportLogInternal();
    CFStringRef v28 = v139;
    a6 = v137;
    if (!v137)
    {
      v132 = 0;
      CFTypeID v29 = v134;
      int v30 = theDict;
      CFIndex v94 = v125;
      a5 = v115;
      goto LABEL_140;
    }
    v132 = 0;
    CFTypeRef v45 = *v137;
    CFTypeID v29 = v134;
    int v30 = theDict;
    a5 = v115;
    if (*v137) {
      goto LABEL_133;
    }
LABEL_139:
    CFIndex v94 = v125;
LABEL_140:
    CFIndex v24 = v94 + 1;
    if (v24 == Count)
    {
LABEL_143:
      CFMutableDictionaryRef theDict = v30;
      int v30 = (__CFDictionary *)CFRetain(Mutable);
      goto LABEL_144;
    }
  }
  CFIndex v46 = 0;
  CFStringRef v128 = v26;
  while (2)
  {
    CFStringRef v47 = v25;
    if (v29) {
      CFRelease(v29);
    }
    CFMutableDictionaryRef v48 = CFDictionaryCreateMutable(v140, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v48)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"secondaryModule create failed", (char)v110);
      CFTypeID v29 = 0;
      int v30 = 0;
      CFDictionaryRef v95 = v136;
      goto LABEL_181;
    }
    uint64_t v49 = v48;
    CFDictionaryRef v50 = (const __CFDictionary *)CFArrayGetValueAtIndex(v42, v46);
    CFDictionaryRef v51 = v50;
    if (!v50 || (CFTypeID v52 = CFGetTypeID(v50), v52 != CFDictionaryGetTypeID()))
    {
      char v111 = (char)v51;
      CFStringRef format = @"secondaryDataDict has wrong type %@";
LABEL_177:
      AMFDRErrorPushInternal((uint64_t)v137, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", format, v111);
      goto LABEL_179;
    }
    CFAllocatorRef v53 = CFDictionaryGetValue(v51, @"Tag");
    CFArrayRef v54 = v53;
    if (!v53 || (CFTypeID v55 = CFGetTypeID(v53), v55 != CFStringGetTypeID()))
    {
      char v111 = (char)v54;
      CFStringRef format = @"secondaryDataClass has wrong type %@";
      goto LABEL_177;
    }
    CFRelease(v47);
    CFStringRef v56 = _copyIdentifierListForSealingMapEntry(v140, v51, (const __CFDictionary *)a5, 0, 0, (uint64_t)v137);
    if (!v56)
    {
      CFTypeID v29 = v49;
      if ((a4 & 1) == 0)
      {
        AMFDRErrorPushInternal((uint64_t)v137, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"failed to get instance of dataClass %@", (char)v54);
        CFStringRef v25 = 0;
        int v30 = 0;
        CFDictionaryRef v95 = v136;
        goto LABEL_182;
      }
      AMSupportLogInternal();
      a6 = v137;
      CFStringRef v28 = v139;
      CFStringRef v25 = 0;
      if (v137) {
        goto LABEL_132;
      }
      goto LABEL_138;
    }
    CFStringRef v47 = v56;
    if (v27) {
      CFRelease(v27);
    }
    CFStringRef v57 = CFStringCreateWithFormat(v140, 0, @"%@:%@", v54, v47);
    CFStringRef v27 = v57;
    if (v57)
    {
      CFTypeID v58 = CFGetTypeID(v57);
      if (v58 == CFStringGetTypeID())
      {
        CFArrayAppendValue(v138, v27);
        CFStringRef v133 = v27;
        CFDictionarySetValue(v49, @"DataClassInstance", v27);
        CFDictionarySetValue(v49, @"supm", v139);
        CFDictionarySetValue(v49, @"type", @"Secondary");
        CFDictionarySetValue(v49, @"Version", v129);
        if (v136) {
          CFRelease(v136);
        }
        CFIndex v59 = CFArrayCreateMutable(v140, 0, MEMORY[0x263EFFF70]);
        if (!v59)
        {
          AMFDRErrorPushInternal((uint64_t)v137, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"secondaryData create failed", (char)v110);
          CFDictionaryRef v95 = 0;
          int v30 = 0;
          CFStringRef v26 = v128;
          goto LABEL_180;
        }
        CFStringRef v60 = v47;
        CFDictionaryRef v61 = v59;
        CFArrayAppendValue(v59, v139);
        v136 = v61;
        CFDictionarySetValue(v49, @"dcls", v61);
        CFTypeID v62 = CFDictionaryGetValue(v51, @"AssemblyIdentifierList");
        CFStringRef v63 = CFDictionaryGetValue(v51, @"AsidSubCCIdentifierList");
        if (v63 || (CFStringRef v63 = CFDictionaryGetValue(v51, @"AsidSubCCIdOptionalVerifyList")) != 0)
        {
          if (!v62) {
            goto LABEL_76;
          }
          AMFDRErrorPushInternal((uint64_t)v137, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"Both '%@' and '%@' exist in secondaryDataClass %@", (char)@"AssemblyIdentifierList");
          int v30 = 0;
          CFStringRef v28 = v139;
          CFDictionaryRef v95 = v136;
          CFStringRef v107 = v60;
          CFStringRef v26 = v128;
          CFStringRef v27 = v133;
          CFTypeID v29 = v49;
          CFStringRef v25 = v107;
LABEL_145:
          CFAllocatorRef v96 = v138;
          goto LABEL_146;
        }
        LOBYTE(v63) = (_BYTE)v62;
        if (!v62)
        {
          CFStringRef v28 = v139;
          CFTypeID v29 = v49;
          a6 = v137;
LABEL_81:
          CFArrayAppendValue(cfa, v29);
          CFStringRef v25 = v60;
          CFArrayRef v42 = v130;
LABEL_91:
          ++v46;
          CFStringRef v26 = v128;
          CFStringRef v27 = v133;
          if (v131 == v46) {
            goto LABEL_92;
          }
          continue;
        }
LABEL_76:
        if (v135) {
          CFRelease(v135);
        }
        CFDictionaryRef v64 = v51;
        a6 = v137;
        CFTypeRef v65 = AMFDRSealingMapCopyAssemblyIdentifierListForSealingMapEntry(v140, v64, (const __CFDictionary *)a5, (uint64_t)v137);
        if (v65)
        {
          CFAllocatorRef v66 = v65;
          CFTypeID v67 = CFGetTypeID(v65);
          CFTypeID v29 = v49;
          char v135 = v66;
          if (v67 == CFArrayGetTypeID())
          {
            CFDictionarySetValue(v49, @"asid", v66);
            CFStringRef v28 = v139;
            goto LABEL_81;
          }
          AMFDRErrorPushInternal((uint64_t)v137, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"asidSeparatedValues has wrong type %@", (char)v66);
        }
        else
        {
          CFTypeID v29 = v49;
          CFArrayRef v42 = v130;
          if (a4)
          {
            AMSupportLogInternal();
            if (v137)
            {
              CFStringRef v28 = v139;
              if (*v137)
              {
                CFRelease(*v137);
                char v135 = 0;
                CFTypeRef *v137 = 0;
              }
              else
              {
                char v135 = 0;
              }
            }
            else
            {
              char v135 = 0;
              CFStringRef v28 = v139;
            }
            CFStringRef v25 = v60;
            goto LABEL_91;
          }
          AMFDRErrorPushInternal((uint64_t)v137, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"failed to get value of asid %@", (char)v63);
          char v135 = 0;
        }
        int v30 = 0;
        CFStringRef v28 = v139;
        CFDictionaryRef v95 = v136;
        CFStringRef v25 = v60;
        CFStringRef v26 = v128;
        CFStringRef v27 = v133;
        goto LABEL_145;
      }
    }
    break;
  }
  AMFDRErrorPushInternal((uint64_t)v137, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob", @"secondaryDataClassInstance has wrong type %@", (char)v27);
LABEL_179:
  int v30 = 0;
  CFDictionaryRef v95 = v136;
LABEL_180:
  CFTypeID v29 = v49;
LABEL_181:
  CFStringRef v25 = v47;
LABEL_182:
  CFAllocatorRef v96 = v138;
  CFStringRef v28 = v139;
LABEL_146:
  CFAllocatorRef v97 = theDict;
  if (theDict)
  {
LABEL_147:
    CFArrayRef v98 = v95;
    CFArrayRef v99 = v96;
    CFRelease(v97);
    CFAllocatorRef v96 = v99;
    CFDictionaryRef v95 = v98;
  }
  if (v96)
  {
LABEL_149:
    CFArrayRef v100 = v95;
    CFRelease(v96);
    CFDictionaryRef v95 = v100;
  }
LABEL_150:
  if (v95) {
    CFRelease(v95);
  }
  if (v29) {
    CFRelease(v29);
  }
  CFStringRef v101 = v27;
  CFStringRef v102 = v26;
  CFRelease(Mutable);
  if (v28) {
    CFRelease(v28);
  }
  CFStringRef v20 = v116;
  BOOL v18 = value;
  if (v101) {
    CFRelease(v101);
  }
  if (v102) {
    CFRelease(v102);
  }
  if (v135) {
    CFRelease(v135);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v132) {
    CFRelease(v132);
  }
  if (cfa) {
    CFRelease(cfa);
  }
LABEL_168:
  if (v20) {
    CFRelease(v20);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v30;
}

uint64_t _AMFDRSealingManifestTrustEvaluation(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    CFStringRef v11 = @"amfdr is NULL";
LABEL_14:
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestTrustEvaluation", v11, v12);
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16);
  if (!v4)
  {
    CFStringRef v11 = @"amfdr->optionsDict is NULL";
    goto LABEL_14;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v4, @"SealingManifest");
  uint64_t v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"TrustObject");
  CFTypeID v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"TrustObjectDigest");
  if (!Value)
  {
    CFStringRef v11 = @"manifestData is NULL";
    goto LABEL_14;
  }
  if (!v6)
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestTrustEvaluation", @"trustObject is NULL", v12);
LABEL_16:
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  if (!v7)
  {
    CFStringRef v11 = @"trustObjectDigest is NULL";
    goto LABEL_14;
  }
  CFStringRef v8 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(@"seal", a2, 0, 0);
  if (!v8)
  {
    AMFDRErrorPushInternal(a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestTrustEvaluation", @"failed to copy seal data instance", v12);
    goto LABEL_16;
  }
  uint64_t v9 = AMFDRDataVerifySealingManifestInternal(a1, Value, v8, a2);
LABEL_8:
  AMSupportSafeRelease();
  return v9;
}

uint64_t AMFDRSealingManifestVerifyMinimalManifest(const __CFDictionary **a1, void *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  if (!_AMFDRSealingManifestCopyMinimalManifestClassesAndInstances(a1, (uint64_t *)&cf, 0, 0, a2))
  {
    CFDictionaryRef v5 = 0;
    CFTypeRef v8 = 0;
    CFStringRef v16 = @"_AMFDRSealingManifestCopyMinimalManifestClassesAndInstances failed";
LABEL_32:
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestVerifyMinimalManifest", v16, v17);
    uint64_t v13 = 0;
LABEL_17:
    CFTypeRef v14 = v19;
    if (!v19) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)_CFDictionaryCopyValue(a1[2], @"MinimalSealingManifests");
  CFDictionaryRef v5 = v4;
  if (!v4 || (CFTypeID v6 = CFGetTypeID(v4), v6 != CFDictionaryGetTypeID()) || CFDictionaryGetCount(v5) < 1)
  {
    CFTypeRef v8 = 0;
    goto LABEL_16;
  }
  if (!cf || (CFTypeID v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    CFTypeRef v8 = 0;
    CFStringRef v16 = @"minimalSealingDataInstances is NULL/malformed";
    goto LABEL_32;
  }
  CFTypeRef v8 = AMFDRCreateCopy((uint64_t)a1);
  if (!v8)
  {
    CFStringRef v16 = @"cannot create a separate amfdr object for verifying minimal sealing manifests";
    goto LABEL_32;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  AMFDRSetOption((uint64_t)v8, @"SealingManifestIsMinimal", (const __CFString *)*MEMORY[0x263EFFB40]);
  if (Count < 1)
  {
LABEL_16:
    uint64_t v13 = 1;
    goto LABEL_17;
  }
  CFIndex v10 = 0;
  while (1)
  {
    if (v19)
    {
      CFRelease(v19);
      CFTypeRef v19 = 0;
    }
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v10);
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v5, ValueAtIndex);
    AMFDRSetOption((uint64_t)v8, @"MinimalSealingDataInstance", ValueAtIndex);
    if ((AMFDRDataVerifySealingManifestInternal((uint64_t)v8, Value, ValueAtIndex, (uint64_t)&v19) & 1) == 0) {
      break;
    }
    AMSupportLogInternal();
    if (Count == ++v10) {
      goto LABEL_16;
    }
  }
  CFTypeRef v14 = v19;
  if (!v19)
  {
    CFStringRef v16 = @"verifyError is NULL";
    goto LABEL_32;
  }
  uint64_t v13 = 0;
LABEL_18:
  CFRelease(v14);
  CFTypeRef v19 = 0;
LABEL_19:
  if (v5) {
    CFRelease(v5);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v8) {
    CFRelease(v8);
  }
  return v13;
}

BOOL _AMFDRSealingManifestCopyDataClassesAndInstances(uint64_t a1, const __CFArray *a2, const __CFArray *a3, const void *a4, void *a5, CFTypeRef *a6, CFTypeRef *a7, CFTypeRef *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, CFTypeRef *a12, void *a13)
{
  CFDictionaryRef v88 = 0;
  v89[0] = 0;
  unsigned int v87 = 0;
  CFStringRef v86 = 0;
  unsigned int v85 = 0;
  if (!a1)
  {
    CFStringRef v66 = @"amfdr is NULL";
LABEL_141:
    AMFDRErrorPushInternal((uint64_t)a13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", v66, v71);
    goto LABEL_144;
  }
  BOOL v18 = (const void *)a1;
  if (!AMFDRSealingMapGetEntryInternal(a1, @"seal", 0, 0))
  {
    CFStringRef v67 = @"sealingMapEntry for seal key is NULL";
LABEL_143:
    AMFDRErrorPushInternal((uint64_t)a13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", v67, v71);
    goto LABEL_144;
  }
  if ((a9 || a10 || a11)
    && (_AMFDRSealingManifestCopyMinimalManifestClassesAndInstances(v18, a9, a10, a11, a13) & 1) == 0)
  {
    CFStringRef v67 = @"_AMFDRSealingManifestCopyMinimalManifestClassesAndInstances failed";
    goto LABEL_143;
  }
  if (a4)
  {
    CFTypeID v19 = CFGetTypeID(a4);
    if (v19 != CFArrayGetTypeID())
    {
      CFStringRef v66 = @"updateDataClasses is not an array";
      goto LABEL_141;
    }
  }
  CFAllocatorRef v20 = CFGetAllocator(v18);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v20, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", @"failed to allocate mutableDataClasses arrays", v71);
LABEL_144:
    BOOL v56 = 0;
    goto LABEL_104;
  }
  CFMutableArrayRef v22 = Mutable;
  CFAllocatorRef v23 = CFGetAllocator(v18);
  CFMutableArrayRef v24 = CFArrayCreateMutable(v23, 0, MEMORY[0x263EFFF70]);
  if (!v24)
  {
    AMFDRErrorPushInternal((uint64_t)a13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", @"failed to allocate mutableDataInstances arrays", v71);
    CFRelease(v22);
    goto LABEL_144;
  }
  CFStringRef v25 = v24;
  CFMutableArrayRef v74 = a7;
  CFAllocatorRef v26 = CFGetAllocator(v18);
  CFMutableDictionaryRef v27 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFStringRef v82 = v27;
  if (!v27)
  {
    AMFDRErrorPushInternal((uint64_t)a13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", @"failed to allocate sikOverrideDict", v71);
LABEL_133:
    BOOL v56 = 0;
    goto LABEL_100;
  }
  uint64_t v28 = AMFDRGetOptions((uint64_t)v18);
  if (!v28)
  {
    CFStringRef v68 = @"amfdr options is NULL";
LABEL_132:
    AMFDRErrorPushInternal((uint64_t)a13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", v68, v71);
    CFMutableDictionaryRef v27 = 0;
    goto LABEL_133;
  }
  CFDictionaryRef v29 = (const __CFDictionary *)v28;
  CFTypeRef v76 = (CFTypeRef)_AMFDRSealingMapCopyIdentifierListForClass(@"seal", (uint64_t)a13, 0, 0);
  if (!v76)
  {
    CFStringRef v68 = @"Could not get Sealed Data Instance";
    goto LABEL_132;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v29, @"SealingManifest");
  if (!Value)
  {
LABEL_111:
    AMSupportLogInternal();
LABEL_139:
    CFMutableDictionaryRef v27 = 0;
    BOOL v56 = 0;
    goto LABEL_99;
  }
  CFDataRef v31 = Value;
  CFIndex v72 = a5;
  CFIndex v73 = a8;
  uint64_t BytePtr = CFDataGetBytePtr(Value);
  int Length = CFDataGetLength(v31);
  if (!BytePtr)
  {
    CFStringRef v69 = @"sealingManifest is NULL";
LABEL_138:
    AMFDRErrorPushInternal((uint64_t)a13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", v69, v71);
    goto LABEL_139;
  }
  if (!Length)
  {
    CFStringRef v69 = @"sealingManifestLength is 0";
    goto LABEL_138;
  }
  if (a4) {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a4);
  }
  else {
    CFIndex Count = 0;
  }
  if (AMFDRDecodeManifestBody(v89))
  {
    CFStringRef v69 = @"amfdr AMFDRDecodeManifestBody failed";
    goto LABEL_138;
  }
  CFArrayRef v83 = (const __CFArray *)a4;
  CFIndex v84 = Count;
  if (!AMFDRDecodeManifestBodyNext(v89, &v88, &v87, &v86, &v85))
  {
    CFTypeRef v37 = 0;
    CFTypeID v36 = 0;
    CFStringRef v35 = 0;
    int v38 = 0;
    CFArrayRef theArray = a2;
    CFTypeRef cf = v18;
    while (1)
    {
      if (v36) {
        CFRelease(v36);
      }
      if (v35) {
        CFRelease(v35);
      }
      if (v37) {
        CFRelease(v37);
      }
      CFStringRef v35 = 0;
      if (v88 && v87 && v86 && v85)
      {
        CFAllocatorRef v39 = CFGetAllocator(v18);
        CFStringRef v40 = CFStringCreateWithBytes(v39, v88, v87, 0x8000100u, 0);
        if (!v40) {
          goto LABEL_111;
        }
        CFTypeID v36 = v40;
        CFAllocatorRef v41 = CFGetAllocator(v18);
        CFStringRef v35 = CFStringCreateWithBytes(v41, v86, v85, 0x8000100u, 0);
        if (!v35) {
          goto LABEL_123;
        }
        CFTypeRef v42 = AMFDRDataInstanceCopyNonSik(v18, v35);
        if (!v42) {
          goto LABEL_113;
        }
        int v80 = v38;
        if (CFStringHasPrefix(v35, @"sik-"))
        {
          CFAllocatorRef v43 = CFGetAllocator(v18);
          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v43, v35, @"-");
          CFArrayRef v45 = ArrayBySeparatingStrings;
          if (!ArrayBySeparatingStrings)
          {
LABEL_113:
            AMSupportLogInternal();
            goto LABEL_122;
          }
          CFIndex v46 = CFArrayGetCount(ArrayBySeparatingStrings);
          if (v46 < 1)
          {
            CFStringRef v47 = 0;
          }
          else
          {
            CFArrayGetValueAtIndex(v45, v46 - 1);
            CFStringRef v47 = (const void *)AMSupportSafeRetain();
          }
        }
        else
        {
          CFStringRef v47 = 0;
        }
        uint64_t SikPub = (const void *)AMFDRCryptoGetSikPub((uint64_t)v18);
        CFTypeID v49 = CFGetTypeID(v27);
        if (v49 == CFDictionaryGetTypeID() && v47)
        {
          CFMutableDictionaryRef v27 = v82;
          if (SikPub && !CFEqual(SikPub, v47))
          {
            CFAllocatorRef v50 = CFGetAllocator(cf);
            CFStringRef v51 = CFStringCreateWithFormat(v50, 0, @"%@-%@", v36, v42);
            if (!v51)
            {
              AMFDRErrorPushInternal((uint64_t)a13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestSetSikOverride", @"sikOverrideKey create failed", v71);
LABEL_122:
              AMSupportSafeRelease();
              AMSupportSafeRelease();
              AMSupportSafeRelease();
              AMSupportSafeRelease();
LABEL_123:
              AMSupportLogInternal();
              BOOL v56 = 0;
              CFTypeRef v37 = 0;
              goto LABEL_124;
            }
            CFDictionarySetValue(v82, v51, v47);
          }
        }
        else
        {
          CFMutableDictionaryRef v27 = v82;
        }
        AMSupportSafeRelease();
        AMSupportSafeRelease();
        AMSupportSafeRelease();
        AMSupportSafeRelease();
        BOOL v18 = cf;
        CFTypeRef v37 = AMFDRDataInstanceCopyNonSik(cf, v35);
        if (!v37)
        {
          AMSupportLogInternal();
          goto LABEL_120;
        }
        if (theArray)
        {
          v90.uint64_t length = CFArrayGetCount(theArray);
          v90.location = 0;
          LastIndexOfCFDataRef Value = CFArrayGetLastIndexOfValue(theArray, v90, v36);
          if (LastIndexOfValue < 0)
          {
            int v38 = 0;
          }
          else
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a3, LastIndexOfValue);
            if (!ValueAtIndex)
            {
              CFStringRef v65 = @"dataInstance is NULL";
              goto LABEL_119;
            }
            CFArrayRef v54 = ValueAtIndex;
            CFTypeID v55 = CFGetTypeID(ValueAtIndex);
            if (v55 != CFStringGetTypeID())
            {
              CFStringRef v65 = @"melformed dataInstance";
              goto LABEL_119;
            }
            AMSupportLogInternal();
            AMSupportSafeRelease();
            CFTypeRef v37 = CFRetain(v54);
            int v38 = 1;
          }
        }
        else
        {
          int v38 = v80;
        }
        CFIndex Count = v84;
        if (v84 >= 1 && (v91.location = 0, v91.uint64_t length = v84, CFArrayContainsValue(v83, v91, v36)))
        {
          if (v38)
          {
            CFStringRef v65 = @"DataClassOverride and UpdateDataClasses contains same dataClass";
LABEL_119:
            AMFDRErrorPushInternal((uint64_t)a13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", v65, v71);
LABEL_120:
            BOOL v56 = 0;
LABEL_124:
            CFMutableDictionaryRef v27 = 0;
            goto LABEL_94;
          }
          AMSupportLogInternal();
          int v38 = 0;
        }
        else
        {
          CFArrayAppendValue(v22, v36);
          CFArrayAppendValue(v25, v37);
        }
      }
      else
      {
        CFTypeID v36 = 0;
        CFTypeRef v37 = 0;
      }
      if (AMFDRDecodeManifestBodyNext(v89, &v88, &v87, &v86, &v85)) {
        goto LABEL_66;
      }
    }
  }
  CFStringRef v35 = 0;
  CFTypeID v36 = 0;
  CFTypeRef v37 = 0;
LABEL_66:
  CFTypeRef v81 = v37;
  if (Count < 1)
  {
    BOOL v56 = 1;
LABEL_83:
    if (v72) {
      *CFIndex v72 = @"seal";
    }
    if (a6) {
      *a6 = CFRetain(v76);
    }
    if (v74) {
      *CFMutableArrayRef v74 = CFRetain(v22);
    }
    if (v73) {
      *CFIndex v73 = CFRetain(v25);
    }
    CFMutableDictionaryRef v27 = 0;
    if (a12) {
      *a12 = CFRetain(v82);
    }
    goto LABEL_93;
  }
  BOOL v56 = 0;
  CFIndex v57 = 0;
  CFStringRef v58 = v35;
  while (1)
  {
    if (v36) {
      CFRelease(v36);
    }
    if (v58) {
      CFRelease(v58);
    }
    CFArrayGetValueAtIndex(v83, v57);
    CFTypeID v36 = (const void *)AMSupportSafeRetain();
    CFTypeID v59 = CFGetTypeID(v36);
    if (v59 != CFStringGetTypeID())
    {
      CFStringRef format = @"dataClassStr is not string";
LABEL_108:
      AMFDRErrorPushInternal((uint64_t)a13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", format, v71);
      CFMutableDictionaryRef v27 = 0;
      goto LABEL_110;
    }
    if (_isSealingClass((BOOL)v36))
    {
      CFStringRef format = @"dataClassStr is seal";
      goto LABEL_108;
    }
    CFStringRef v60 = (__CFDictionary *)AMFDRSealingMapCopyMultiInstanceForClass(v36, (uint64_t)a13);
    CFMutableDictionaryRef v27 = v60;
    if (!v60) {
      break;
    }
    CFTypeID v61 = CFGetTypeID(v60);
    if (v61 != CFArrayGetTypeID() || CFArrayGetCount(v27) < 1)
    {
      AMFDRErrorPushInternal((uint64_t)a13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", @"Could not copy data instance array for %@, array count is zero", (char)v27);
      goto LABEL_110;
    }
    if (CFArrayGetCount(v27) >= 1)
    {
      CFIndex v62 = 0;
      do
      {
        uint64_t value_8 = CFArrayGetValueAtIndex(v27, v62);
        AMSupportLogInternal();
        CFArrayAppendValue(v22, v36);
        CFArrayAppendValue(v25, value_8);
        ++v62;
      }
      while (v62 < CFArrayGetCount(v27));
    }
    CFRelease(v27);
    CFStringRef v58 = 0;
    CFStringRef v35 = 0;
    BOOL v56 = ++v57 >= v84;
    if (v57 == v84) {
      goto LABEL_83;
    }
  }
  AMFDRErrorPushInternal((uint64_t)a13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyDataClassesAndInstances", @"Could not copy data instance for %@", 0);
LABEL_110:
  CFStringRef v35 = 0;
LABEL_93:
  CFTypeRef v37 = v81;
  if (v36) {
LABEL_94:
  }
    CFRelease(v36);
  if (v35) {
    CFRelease(v35);
  }
  if (v37) {
    CFRelease(v37);
  }
LABEL_99:
  CFRelease(v76);
LABEL_100:
  CFRelease(v22);
  CFRelease(v25);
  if (v27) {
    CFRelease(v27);
  }
  if (v82) {
    CFRelease(v82);
  }
LABEL_104:
  AMFDRDecodeManifestBodyDestroy(v89[0]);
  return v56;
}

uint64_t AMFDRSealingMapConfigSealedData(void *a1, CFTypeRef cf, uint64_t a3)
{
  v22[8] = *MEMORY[0x263EF8340];
  CFTypeRef v20 = 0;
  CFTypeRef cfa = 0;
  if (a1)
  {
    uint64_t v6 = 0;
    v22[0] = a1 + 30;
    v22[1] = a1 + 31;
    _OWORD v22[2] = a1 + 32;
    _OWORD v22[3] = a1 + 33;
    v22[4] = a1 + 37;
    v22[5] = a1 + 35;
    v22[6] = a1 + 34;
    v22[7] = a1 + 36;
    do
    {
      if (cfa)
      {
        CFRelease(cfa);
        CFTypeRef cfa = 0;
      }
      CFTypeID v7 = off_2642D1368[v6];
      if (!AMFDRSealingMapCopyDataClassesWithAttributeInternal(cf, v7, &cfa, a3))
      {
        char v19 = (char)v7;
        CFStringRef v18 = @"Failed to copy data classes with attribute %@";
        goto LABEL_31;
      }
      CFTypeRef v8 = (CFTypeRef *)v22[v6];
      if (*v8) {
        CFRelease(*v8);
      }
      CFTypeRef v9 = cfa;
      *CFTypeRef v8 = cfa;
      if (v9) {
        CFRetain(v9);
      }
      ++v6;
    }
    while (v6 != 8);
    CFIndex v10 = (const void *)a1[25];
    if (v10) {
      CFRelease(v10);
    }
    CFDictionaryRef PairedSoCs = AMFDRSealingMapGetPairedSoCs((uint64_t)cf);
    a1[25] = PairedSoCs;
    if (PairedSoCs) {
      CFRetain(PairedSoCs);
    }
    CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal((uint64_t)cf, @"seal", 0, 0);
    if (AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"DeprecateVersion1", 0)) {
      a1[27] = *MEMORY[0x263EFFB40];
    }
    CFBooleanRef v13 = (const __CFBoolean *)a1[26];
    if (!v13 || CFBooleanGetValue(v13)) {
      goto LABEL_24;
    }
    if (AMFDRSealingMapCopySubCCDataClasses(cf, @"RequiredToSeal", &v20, a3))
    {
      CFTypeRef v14 = (const void *)a1[21];
      if (v14) {
        CFRelease(v14);
      }
      CFTypeRef v15 = v20;
      a1[21] = v20;
      if (v15) {
        CFRetain(v15);
      }
LABEL_24:
      uint64_t v16 = 1;
      goto LABEL_25;
    }
    CFStringRef v18 = @"Failed to copy subcc list";
LABEL_31:
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapConfigSealedData", v18, v19);
  }
  else
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapConfigSealedData", @"sealedData is NULL", v19);
  }
  uint64_t v16 = 0;
LABEL_25:
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

uint64_t AMFDRSealingMapVerifySealing(CFDictionaryRef *a1, CFErrorRef *a2)
{
  CFTypeRef v47 = 0;
  v48[0] = 0;
  unint64_t v46 = 0;
  CFTypeRef v44 = 0;
  *(void *)CFArrayRef v45 = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v43 = 0;
  CFTypeRef cf = 0;
  CFStringRef v41 = 0;
  if (!a1)
  {
    CFStringRef v33 = @"amfdr is NULL";
LABEL_74:
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", v33, v38);
LABEL_75:
    uint64_t IsBenign = 0;
    uint64_t v16 = 0;
    goto LABEL_67;
  }
  if (!AMFDRGetOptions((uint64_t)a1))
  {
    CFStringRef v33 = @"amfdr->optionsDict is NULL";
    goto LABEL_74;
  }
  int v4 = CFDictionaryContainsKey(a1[2], @"TrustObjectDigest");
  CFDictionaryRef v5 = (const __CFString **)MEMORY[0x263EFFB40];
  if (v4) {
    goto LABEL_9;
  }
  if (!CFDictionaryContainsKey(a1[2], @"APTicket") && (AMFDRDataApTicketPopulate((uint64_t)a1) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", @"Failed to load AP Ticket", v38);
    goto LABEL_75;
  }
  CFStringRef v6 = (const __CFString *)AMFDRDataApTicketCopyTrustObjectDigest((uint64_t)a1);
  if (!v6)
  {
    AMSupportLogInternal();
    goto LABEL_93;
  }
  AMFDRSetOption((uint64_t)a1, @"TrustObjectDigest", v6);
  if (AMFDRIsNonDefaultDemotionState())
  {
    AMSupportLogInternal();
    AMFDRSetOption((uint64_t)a1, @"SkipVerifySik", *v5);
  }
LABEL_9:
  CFDictionaryRef v7 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)a1);
  if (!v7)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", @"amfdr options is NULL", v38);
LABEL_93:
    uint64_t IsBenign = 0;
    uint64_t v16 = 0;
    goto LABEL_67;
  }
  CFDictionaryRef v8 = v7;
  CFDataRef Value = CFDictionaryGetValue(v7, @"SealingManifestOverride");
  CFIndex v10 = CFDictionaryGetValue(v8, @"ForceSealing");
  CFStringRef v11 = CFDictionaryGetValue(v8, @"AllowCSRForbidden");
  unint64_t v12 = (unint64_t)CFDictionaryGetValue(v8, @"DataClassesOverride");
  unint64_t v13 = (unint64_t)CFDictionaryGetValue(v8, @"DataInstancesOverride");
  CFAllocatorRef v39 = CFDictionaryGetValue(v8, @"SealingUpdateDataClasses");
  int v14 = AMFDRAPTicketAllowsUnsealedData((uint64_t)a1);
  CFGetAllocator(a1);
  AMFDRSealedDataCreate();
  uint64_t v16 = v15;
  if (!v15)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", @"Failed to create AMFDRSealedData object", (char)v39);
LABEL_96:
    uint64_t IsBenign = 0;
    goto LABEL_67;
  }
  if (!(v12 | v13)) {
    goto LABEL_18;
  }
  if ((AMFDREntitlementIsEntitled(@"com.apple.libFDR.AllowIdentifierOverride") & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", @"Missing AllowIdentifierOverride entitlement", (char)v39);
    goto LABEL_96;
  }
  if (!v12 || !v13)
  {
    CFStringRef v36 = @"dataClassesOverride and dataInstancesOverride do not match";
LABEL_90:
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", v36, (char)v39);
    goto LABEL_96;
  }
  CFTypeID v17 = CFGetTypeID((CFTypeRef)v12);
  if (v17 != CFArrayGetTypeID())
  {
    CFStringRef v36 = @"dataClassesOverride is not an array";
    goto LABEL_90;
  }
  CFTypeID v18 = CFGetTypeID((CFTypeRef)v13);
  if (v18 != CFArrayGetTypeID())
  {
    CFStringRef v36 = @"dataInstancesOverride is not an array";
    goto LABEL_90;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v12);
  if (Count != CFArrayGetCount((CFArrayRef)v13))
  {
    CFStringRef v36 = @"different length of dataClassesOverride and dataInstancesOverride";
    goto LABEL_90;
  }
LABEL_18:
  if (Value)
  {
    CFTypeID v20 = CFGetTypeID(Value);
    if (v20 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)Value) == 1) {
      goto LABEL_36;
    }
  }
  if (v10)
  {
    CFTypeID v21 = CFGetTypeID(v10);
    if (v21 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v10) == 1) {
      goto LABEL_36;
    }
  }
  if (!v11 || (CFTypeID v22 = CFGetTypeID(v11), v22 != CFBooleanGetTypeID()))
  {
    if (!v14) {
      goto LABEL_30;
    }
LABEL_36:
    AMSupportLogInternal();
    if (_AMFDRSealingMapCopyDataClassesAndInstances(a1, (const __CFArray *)v12, (const __CFArray *)v13, v48, &v47, (CFTypeRef *)&v46, (CFTypeRef *)v45, 0, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, 0, &cf, 0, 0, (uint64_t)a2))
    {
      if (!AMFDRSealedDataPopulatedFromManifest((uint64_t)v16, 0, (uint64_t)a2))
      {
LABEL_82:
        uint64_t IsBenign = 0;
        goto LABEL_67;
      }
      goto LABEL_38;
    }
    CFStringRef v35 = @"_AMFDRSealingMapCopyDataClassesAndInstances failed";
    goto LABEL_95;
  }
  if (CFBooleanGetValue((CFBooleanRef)v11) == 1) {
    char v23 = 1;
  }
  else {
    char v23 = v14;
  }
  if (v23) {
    goto LABEL_36;
  }
LABEL_30:
  AMSupportLogInternal();
  if ((AMFDRSealingMapPopulateSealingManifest((uint64_t)a1, 0, (uint64_t)a2) & 1) == 0)
  {
    CFStringRef v35 = @"AMFDRSealingMapPopulateSealingManifest failed on amfdr";
LABEL_95:
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", v35, (char)v39);
    goto LABEL_96;
  }
  if ((AMFDRSealingMapPopulateMinimalSealingManifest(a1, 0, (uint64_t)a2) & 1) == 0)
  {
    CFStringRef v34 = @"AMFDRSealingMapPopulateMinimalSealingManifest failed on amfdr";
    goto LABEL_81;
  }
  if (!_AMFDRSealingManifestCopyDataClassesAndInstances((uint64_t)a1, (const __CFArray *)v12, (const __CFArray *)v13, v39, v48, &v47, (CFTypeRef *)&v46, (CFTypeRef *)v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &cf, a2))
  {
    CFStringRef v34 = @"_AMFDRSealingManifestCopyDataClassesAndInstances failed";
    goto LABEL_81;
  }
  if (!AMFDRSealedDataPopulatedFromManifest((uint64_t)v16, 1, (uint64_t)a2)) {
    goto LABEL_82;
  }
LABEL_38:
  if ((AMFDRSealedDataSetMinimalManifestClassInstance(v16, v44, v43, v42, (uint64_t)a2) & 1) == 0)
  {
    CFStringRef v34 = @"AMFDRSealedDataSetMinimalManifestClassInstance failed";
LABEL_81:
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", v34, (char)v39);
    goto LABEL_82;
  }
  CFMutableArrayRef v24 = (const void *)v16[16];
  if (v24) {
    CFRelease(v24);
  }
  CFTypeRef v25 = cf;
  v16[16] = cf;
  if (v25) {
    CFRetain(v25);
  }
  if ((AMFDRSealingMapConfigSealedData(v16, a1, (uint64_t)a2) & 1) == 0)
  {
    CFStringRef v34 = @"AMFDRSealingMapConfigSealedData failed.";
    goto LABEL_81;
  }
  if ((AMFDRSealedDataConfigureOptionsForRecover((uint64_t)v16, (CFTypeRef *)a1, 0, v47, (uint64_t)a2) & 1) == 0)
  {
    CFStringRef v34 = @"AMFDRSealedDataConfigureOptionsForRecover failed.";
    goto LABEL_81;
  }
  if (a2 && *a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  CFAllocatorRef v26 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v26, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v28 = Mutable;
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", @"Failed to allocate privateOptions", (char)v39);
    goto LABEL_66;
  }
  CFDictionarySetValue(Mutable, @"SkipExtraManifests", (const void *)*MEMORY[0x263EFFB40]);
  if ((__AMFDRSealedDataPopulatePrivate(v28, (uint64_t)v16, (uint64_t)a1, (unint64_t)v48[0], (unint64_t)v47, v46, *(unint64_t *)v45, (uint64_t)a2) & 1) == 0)
  {
    if ((AMFDRDataErrorIsBenign((uint64_t)a1, (char)@"AMFDRSealingMapVerifySealing", a2) & 1) == 0)
    {
      CFStringRef v37 = @"AMFDRSealingMapVerifySealing Failed to populate sealed data";
LABEL_100:
      AMFDRErrorPushInternal((uint64_t)a2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", v37, (char)v39);
      goto LABEL_66;
    }
    if (a2 && *a2)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
  }
  if (AMFDRSealedDataIsEmpty((uint64_t)v16) && AMFDRAllowIncompleteData((uint64_t)a1))
  {
LABEL_64:
    AMSupportLogInternal();
    uint64_t IsBenign = 1;
    goto LABEL_67;
  }
  CFStringRef v29 = (const __CFString *)v16[2];
  if (!v29)
  {
    if (AMFDRAPTicketAllowsUnsealedData((uint64_t)a1)) {
      goto LABEL_64;
    }
    AMFDRErrorPushInternal((uint64_t)a2, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealing", @"No sealing manifest in data store", (char)v39);
LABEL_66:
    uint64_t IsBenign = 0;
    goto LABEL_67;
  }
  AMFDRSetOption((uint64_t)a1, @"SealingManifest", v29);
  if (!CFDictionaryContainsKey(a1[2], @"TrustObject"))
  {
    if (AMFDRDataCopyTrustObject((uint64_t)a1))
    {
      AMFDRSetOption((uint64_t)a1, @"TrustObject", v41);
      goto LABEL_60;
    }
    CFStringRef v37 = @"No trust object in options or in data store";
    goto LABEL_100;
  }
LABEL_60:
  uint64_t v30 = AMFDRSealedDataVerify(v16, (uint64_t)a1, (uint64_t)a2);
  uint64_t IsBenign = v30;
  if (a2 && (v30 & 1) == 0) {
    uint64_t IsBenign = AMFDRSealedDataVerificationErrorIsBenign((int)v16, a1, 0, 0, 0, *a2);
  }
LABEL_67:
  AMFDRSealedDataRestoreOptions((uint64_t)v16, (uint64_t)a1, 0);
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (a2 && IsBenign && *a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  return IsBenign;
}

uint64_t AMFDRSealingMapCreateAndPopulateSealedData(void *a1, CFTypeRef *a2, CFErrorRef *a3)
{
  CFTypeRef v39 = 0;
  unint64_t v40 = 0;
  unint64_t v38 = 0;
  CFTypeRef v36 = 0;
  *(void *)CFStringRef v37 = 0;
  CFTypeRef v34 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v26 = @"amfdr is NULL";
LABEL_51:
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateAndPopulateSealedData", v26, (char)v31);
    uint64_t v24 = 0;
    CFDictionaryRef v7 = 0;
    goto LABEL_48;
  }
  if (!AMFDRGetOptions((uint64_t)a1))
  {
    CFStringRef v26 = @"amfdr->optionsDict is NULL";
    goto LABEL_51;
  }
  CFDictionaryRef v32 = a2;
  CFDictionaryRef v6 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)a1);
  CFDictionaryRef v7 = v6;
  if (!v6)
  {
    CFMutableDictionaryRef v27 = @"amfdr options is NULL";
LABEL_65:
    CFStringRef v30 = v27;
LABEL_70:
    AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateAndPopulateSealedData", v30, (char)v31);
    goto LABEL_71;
  }
  CFDataRef Value = CFDictionaryGetValue(v6, @"SealingManifestOverride");
  CFTypeRef v9 = CFDictionaryGetValue(v7, @"ForceSealing");
  CFIndex v10 = CFDictionaryGetValue(v7, @"AllowCSRForbidden");
  unint64_t v11 = (unint64_t)CFDictionaryGetValue(v7, @"DataClassesOverride");
  unint64_t v12 = (unint64_t)CFDictionaryGetValue(v7, @"DataInstancesOverride");
  CFDataRef v31 = CFDictionaryGetValue(v7, @"SealingUpdateDataClasses");
  int v13 = AMFDRAPTicketAllowsUnsealedData((uint64_t)a1);
  CFGetAllocator(a1);
  AMFDRSealedDataCreate();
  CFDictionaryRef v7 = v14;
  if (!v14)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateAndPopulateSealedData", @"Failed to create AMFDRSealedData object", (char)v31);
    goto LABEL_71;
  }
  if (!(v11 | v12)) {
    goto LABEL_12;
  }
  if ((AMFDREntitlementIsEntitled(@"com.apple.libFDR.AllowIdentifierOverride") & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateAndPopulateSealedData", @"Missing AllowIdentifierOverride entitlement", (char)v31);
    goto LABEL_71;
  }
  if (!v11 || !v12)
  {
    CFStringRef v29 = @"dataClassesOverride and dataInstancesOverride do not match";
LABEL_63:
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateAndPopulateSealedData", v29, (char)v31);
    goto LABEL_71;
  }
  CFTypeID v15 = CFGetTypeID((CFTypeRef)v11);
  if (v15 != CFArrayGetTypeID())
  {
    CFStringRef v29 = @"dataClassesOverride is not an array";
    goto LABEL_63;
  }
  CFTypeID v16 = CFGetTypeID((CFTypeRef)v12);
  if (v16 != CFArrayGetTypeID())
  {
    CFStringRef v29 = @"dataInstancesOverride is not an array";
    goto LABEL_63;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v11);
  if (Count != CFArrayGetCount((CFArrayRef)v12))
  {
    CFStringRef v29 = @"different length of dataClassesOverride and dataInstancesOverride";
    goto LABEL_63;
  }
LABEL_12:
  if (Value)
  {
    CFTypeID v18 = CFGetTypeID(Value);
    if (v18 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)Value) == 1) {
      goto LABEL_30;
    }
  }
  if (v9)
  {
    CFTypeID v19 = CFGetTypeID(v9);
    if (v19 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v9) == 1) {
      goto LABEL_30;
    }
  }
  if (!v10 || (CFTypeID v20 = CFGetTypeID(v10), v20 != CFBooleanGetTypeID()))
  {
    if (!v13) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }
  char v21 = CFBooleanGetValue((CFBooleanRef)v10) == 1 ? 1 : v13;
  if (v21)
  {
LABEL_30:
    AMSupportLogInternal();
    if ((_AMFDRSealingMapCopyDataClassesAndInstances(a1, 0, 0, (CFTypeRef *)&v40, &v39, (CFTypeRef *)&v38, (CFTypeRef *)v37, 0, (uint64_t *)&v36, (uint64_t *)&v35, (uint64_t *)&v34, 0, &cf, 0, 0, (uint64_t)a3) & 1) == 0)
    {
      CFDictionaryRef v28 = @"_AMFDRSealingMapCopyDataClassesAndInstances failed";
LABEL_69:
      CFStringRef v30 = v28;
      goto LABEL_70;
    }
    if (AMFDRSealedDataPopulatedFromManifest((uint64_t)v7, 0, (uint64_t)a3)) {
      goto LABEL_32;
    }
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_48;
  }
LABEL_24:
  AMSupportLogInternal();
  if ((AMFDRSealingMapPopulateSealingManifest((uint64_t)a1, 0, (uint64_t)a3) & 1) == 0)
  {
    CFDictionaryRef v28 = @"AMFDRSealingMapPopulateSealingManifest failed on amfdr";
    goto LABEL_69;
  }
  if ((AMFDRSealingMapPopulateMinimalSealingManifest((CFDictionaryRef *)a1, 0, (uint64_t)a3) & 1) == 0)
  {
    CFDictionaryRef v28 = @"AMFDRSealingMapPopulateMinimalSealingManifest failed on amfdr";
    goto LABEL_69;
  }
  if (!_AMFDRSealingManifestCopyDataClassesAndInstances((uint64_t)a1, (const __CFArray *)v11, (const __CFArray *)v12, v31, &v40, &v39, (CFTypeRef *)&v38, (CFTypeRef *)v37, (uint64_t *)&v36, (uint64_t *)&v35, (uint64_t *)&v34, &cf, a3))
  {
    CFDictionaryRef v28 = @"_AMFDRSealingManifestCopyDataClassesAndInstances failed";
    goto LABEL_69;
  }
  if (!AMFDRSealedDataPopulatedFromManifest((uint64_t)v7, 1, (uint64_t)a3)) {
    goto LABEL_71;
  }
LABEL_32:
  if ((AMFDRSealedDataSetMinimalManifestClassInstance(v7, v36, v35, v34, (uint64_t)a3) & 1) == 0)
  {
    CFMutableDictionaryRef v27 = @"AMFDRSealedDataSetMinimalManifestClassInstance failed";
    goto LABEL_65;
  }
  CFTypeID v22 = (const void *)*((void *)v7 + 16);
  if (v22) {
    CFRelease(v22);
  }
  CFTypeRef v23 = cf;
  *((void *)v7 + 16) = cf;
  if (v23) {
    CFRetain(v23);
  }
  if ((AMFDRSealingMapConfigSealedData(v7, a1, (uint64_t)a3) & 1) == 0)
  {
    CFMutableDictionaryRef v27 = @"AMFDRSealingMapConfigSealedData failed.";
    goto LABEL_65;
  }
  if ((AMFDRSealedDataConfigureOptionsForRecover((uint64_t)v7, (CFTypeRef *)a1, 0, v39, (uint64_t)a3) & 1) == 0)
  {
    CFMutableDictionaryRef v27 = @"AMFDRSealedDataConfigureOptionsForRecover failed.";
    goto LABEL_65;
  }
  if (a3 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  if (AMFDRSealedDataPopulate((uint64_t)v7, (uint64_t)a1, v40, (unint64_t)v39, v38, *(unint64_t *)v37, (uint64_t)a3))goto LABEL_47; {
  if ((AMFDRDataErrorIsBenign((uint64_t)a1, (char)@"AMFDRSealingMapVerifySealing", a3) & 1) == 0)
  }
  {
    CFMutableDictionaryRef v27 = @"AMFDRSealingMapVerifySealing Failed to populate sealed data";
    goto LABEL_65;
  }
  if (a3 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
LABEL_47:
  *CFDictionaryRef v32 = CFRetain(v7);
  uint64_t v24 = 1;
LABEL_48:
  AMFDRSealedDataRestoreOptions((uint64_t)v7, (uint64_t)a1, 0);
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v24;
}

uint64_t AMFDRSealingMapVerifyAndCommitSealedData(CFDictionaryRef *a1, uint64_t a2, __CFError **a3)
{
  if (!a1)
  {
    CFStringRef v17 = @"amfdr is NULL";
LABEL_34:
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAndCommitSealedData", v17, v19);
LABEL_41:
    AMFDRSealedDataRestoreOptions(a2, (uint64_t)a1, 0);
    return 0;
  }
  if (!AMFDRGetOptions((uint64_t)a1))
  {
    CFStringRef v17 = @"amfdr->optionsDict is NULL";
    goto LABEL_34;
  }
  if (!a2)
  {
    CFStringRef v17 = @"sealedData is NULL";
    goto LABEL_34;
  }
  if (!*(void *)(a2 + 80))
  {
    CFStringRef v17 = @"sealedData->sealedDataInstance is NULL";
    goto LABEL_34;
  }
  if ((AMFDRSealingMapConfigSealedData((void *)a2, a1, (uint64_t)a3) & 1) == 0)
  {
    CFStringRef v18 = @"AMFDRSealingMapConfigSealedData failed.";
LABEL_40:
    AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAndCommitSealedData", v18, v19);
    goto LABEL_41;
  }
  if ((AMFDRSealedDataConfigureOptionsForRecover(a2, (CFTypeRef *)a1, 0, *(const void **)(a2 + 80), (uint64_t)a3) & 1) == 0)
  {
    CFStringRef v18 = @"AMFDRSealedDataConfigureOptionsForRecover failed.";
    goto LABEL_40;
  }
  if (AMFDRIsNonDefaultDemotionState())
  {
    AMSupportLogInternal();
    AMFDRSetOption((uint64_t)a1, @"SkipVerifySik", (const __CFString *)*MEMORY[0x263EFFB40]);
  }
  char v6 = AMFDRSealedDataVerify((void *)a2, (uint64_t)a1, (uint64_t)a3);
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"ForceCommit");
  if (!Value || (CFBooleanRef v8 = Value, v9 = CFGetTypeID(Value), v9 != CFBooleanGetTypeID()))
  {
    BOOL v11 = a3 == 0;
LABEL_19:
    if (v6) {
      goto LABEL_20;
    }
    if (v11)
    {
      CFStringRef v18 = @"AMFDRSealedDataVerify failed without returning outError";
    }
    else if (AMFDRSealedDataVerificationErrorIsBenign(a2, a1, 1, 0, 0, *a3))
    {
      CFDictionaryRef v14 = (const __CFDictionary *)AMFDRCopyUnderlyingDictionary(*a3, @"UnverifiedDataInstances");
      if (v14)
      {
        CFDictionaryRef v13 = v14;
        CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)_checkVerification, (void *)a2);
        goto LABEL_25;
      }
      CFStringRef v18 = @"AMFDRSealedDataVerify failed without returning unverifiedDataInstances in outError";
    }
    else
    {
      CFStringRef v18 = @"AMFDRSealedDataVerify failed with unrecoverable errors";
    }
    goto LABEL_40;
  }
  int v10 = CFBooleanGetValue(v8);
  BOOL v11 = a3 == 0;
  if (a3) {
    char v12 = v6;
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) != 0 || !v10) {
    goto LABEL_19;
  }
  AMFDRSealedDataVerificationErrorIsBenign(a2, a1, 1, 0, 0, *a3);
  AMSupportLogInternal();
  if (!*a3)
  {
LABEL_20:
    CFDictionaryRef v13 = 0;
    goto LABEL_25;
  }
  CFRelease(*a3);
  CFDictionaryRef v13 = 0;
  *a3 = 0;
LABEL_25:
  uint64_t v15 = AMFDRSealedDataCommit(a2, (uint64_t)a1, 0, (uint64_t)a3);
  if ((v15 & 1) == 0) {
    AMFDRErrorPushInternal((uint64_t)a3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAndCommitSealedData", @"AMFDRSealedDataCommit failed.", v19);
  }
  AMFDRSealedDataRestoreOptions(a2, (uint64_t)a1, 0);
  if (v13) {
    CFRelease(v13);
  }
  return v15;
}

void _checkVerification(const void *a1, uint64_t a2, CFArrayRef *a3)
{
  CFIndex Count = CFArrayGetCount(a3[4]);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    for (CFIndex i = 0; i != v6; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a3[4], i);
      CFTypeID v9 = CFArrayGetValueAtIndex(a3[5], i);
      CFAllocatorRef v10 = CFGetAllocator(a3);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v10, (uint64_t)ValueAtIndex, (uint64_t)v9);
      if (CFEqual(FullKey, a1))
      {
        AMSupportLogInternal();
        CFArraySetValueAtIndex(a3[8], i, 0);
      }
      if (FullKey) {
        CFRelease(FullKey);
      }
    }
  }
}

uint64_t AMFDRSealingMapRecoverCurrentDeviceWithMemoryStore(const __CFString *a1, CFTypeRef cf, uint64_t a3, CFTypeRef *a4, CFTypeRef a5)
{
  CFTypeRef cfa = 0;
  uint64_t v23 = 0;
  CFErrorRef error = 0;
  if (!a1) {
    goto LABEL_31;
  }
  if (cf)
  {
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 != CFDataGetTypeID()) {
      goto LABEL_31;
    }
  }
  if (a5)
  {
    CFTypeID v11 = CFGetTypeID(a5);
    if (v11 != CFDictionaryGetTypeID()) {
      goto LABEL_31;
    }
  }
  if (!a3)
  {
    AMSupportLogInternal();
    goto LABEL_28;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef v13 = (CFDictionaryRef *)AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Memory", (const __CFDictionary *)a5);
  if (!v13)
  {
LABEL_31:
    AMSupportLogInternal();
    a3 = 0;
    goto LABEL_28;
  }
  CFDictionaryRef v14 = (const __CFDictionary *)CFPropertyListCreateWithData(v12, (CFDataRef)cf, 0, 0, &error);
  if (error)
  {
    AMSupportLogInternal();
    AMSupportSafeRelease();
    CFErrorRef error = 0;
  }
  if (v14 && (AMFDRSetMemoryStore((uint64_t)v13, v14) & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v15 = (CFMutableDictionaryRef *)AMFDRCreateTypeWithOptions(v12, @"Remote", (const __CFDictionary *)a5);
  if (!v15 || (AMFDRDataSetApTicketAndGetNewestTrustObject(a1, (uint64_t)v13, v15) & 1) == 0) {
    goto LABEL_32;
  }
  if (AMFDRSealingMapVerifySealing(v13, (CFErrorRef *)&cfa))
  {
    CFDictionaryGetCount(v13[10]);
    AMSupportLogInternal();
    if ((AMFDRSealingMapCreateAndPopulateSealedData(v13, (CFTypeRef *)&v23, (CFErrorRef *)&cfa) & 1) == 0) {
      goto LABEL_32;
    }
    if ((AMFDRClearMemoryStore((uint64_t)v13) & 1) == 0) {
      goto LABEL_32;
    }
    uint64_t v16 = v23;
    if ((AMFDRSealingMapVerifyAndCommitSealedData(v13, v23, (__CFError **)&cfa) & 1) == 0) {
      goto LABEL_32;
    }
    if (!AMFDRSealedDataIsEmpty(v16)) {
      goto LABEL_21;
    }
  }
  AMSupportLogInternal();
  CFRelease(v13);
  CFStringRef v17 = (CFDictionaryRef *)AMFDRCreateTypeWithOptions(v12, @"Memory", (const __CFDictionary *)a5);
  CFDictionaryRef v13 = v17;
  if (!v17 || (AMFDRSealingMapRecoverCurrentDevice((uint64_t)v17, v15, 1, (uint64_t)&cfa) & 1) == 0)
  {
LABEL_32:
    AMSupportLogInternal();
    a3 = 0;
    goto LABEL_28;
  }
LABEL_21:
  CFDictionaryGetCount(v13[10]);
  AMSupportLogInternal();
  if (cfa) {
    AMSupportLogInternal();
  }
  CFStringRef v18 = (const void *)AMFDRGetMemoryStore((uint64_t)v13);
  CFDataRef v19 = CFPropertyListCreateData(v12, v18, kCFPropertyListBinaryFormat_v1_0, 0, &error);
  if (!v19 || error) {
    goto LABEL_32;
  }
  *(void *)a3 = CFRetain(v19);
  a3 = 1;
  if (a4 && cfa) {
    *a4 = CFRetain(cfa);
  }
LABEL_28:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return a3;
}

uint64_t AMFDRSealingManifestCopyDataClassesInstancesAndProperties(const __CFData *a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4, void *a5)
{
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyDataClassesInstancesAndProperties", @"sealingManifest is NULL", (char)cf);
    uint64_t v13 = 0;
    goto LABEL_10;
  }
  if (!a2)
  {
    CFStringRef v15 = @"outManifestProperties is NULL";
LABEL_15:
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyDataClassesInstancesAndProperties", v15, (char)cf);
    uint64_t v13 = 0;
    goto LABEL_10;
  }
  if (!a3)
  {
    CFStringRef v15 = @"outDataClasses is NULL";
    goto LABEL_15;
  }
  if (!a4)
  {
    CFStringRef v15 = @"outDataInstances is NULL";
    goto LABEL_15;
  }
  CFTypeID v10 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Local", 0);
  CFTypeID v11 = v10;
  if (!v10)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyDataClassesInstancesAndProperties", @"amfdr is NULL", (char)cf);
LABEL_18:
    uint64_t v13 = 0;
    goto LABEL_10;
  }
  if ((AMFDRDataDecodeAndSetSealingManifest(v10, a1, 0, 0, 0, (uint64_t)a5) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyDataClassesInstancesAndProperties", @"AMFDRDataDecodeAndSetSealingManifest failed", (char)cf);
    goto LABEL_18;
  }
  CFTypeRef v12 = AMFDRSealingMapCopyManifestProperties(v11, (uint64_t)a5);
  if (!v12)
  {
    CFStringRef v16 = @"AMFDRSealingMapCopyManifestProperties failed";
LABEL_22:
    AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyDataClassesInstancesAndProperties", v16, (char)cf);
    uint64_t v13 = 0;
    goto LABEL_10;
  }
  if (!_AMFDRSealingManifestCopyDataClassesAndInstances((uint64_t)v11, 0, 0, 0, 0, 0, &v18, &cf, 0, 0, 0, 0, a5))
  {
    CFStringRef v16 = @"_AMFDRSealingManifestCopyDataClassesAndInstances failed";
    goto LABEL_22;
  }
  *a2 = CFRetain(v12);
  *a3 = CFRetain(v18);
  *a4 = CFRetain(cf);
  uint64_t v13 = 1;
LABEL_10:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v13;
}

CFTypeRef AMFDRSealingMapCopyManifestProperties(void *cf, uint64_t a2)
{
  CFTypeRef v3 = cf;
  CFTypeRef cfa = 0;
  if (!cf)
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestProperties", @"amfdr is NULL", (char)v24);
    goto LABEL_31;
  }
  if (!cf[2])
  {
    AMFDRErrorPushInternal(a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestProperties", @"amfdr->optionsDict is NULL", (char)v24);
LABEL_39:
    CFTypeRef v3 = 0;
    goto LABEL_31;
  }
  CFAllocatorRef v4 = CFGetAllocator(cf);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestProperties", @"manifestProperties is NULL", (char)v24);
    goto LABEL_39;
  }
  uint64_t ManifestPropertyEntriesForDevice = _AMFDRSealingMapGetManifestPropertyEntriesForDevice((uint64_t)v3);
  if (!ManifestPropertyEntriesForDevice)
  {
    CFStringRef format = @"Could not get manifest properties";
    *(_OWORD *)char v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v18 = a2;
LABEL_35:
    CFIndex v19 = 1;
    goto LABEL_38;
  }
  CFArrayRef v7 = (const __CFArray *)ManifestPropertyEntriesForDevice;
  if (!AMFDRSealingMapPopulateSealingManifest((uint64_t)v3, 0, a2))
  {
    CFStringRef format = @"AMFDRSealingMapPopulateSealingManifest failed";
    *(_OWORD *)char v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)CFTypeRef value = 0u;
    uint64_t v18 = a2;
LABEL_37:
    CFIndex v19 = 10;
LABEL_38:
    AMFDRErrorPushInternal(v18, v19, 0, 0, 0, 0, 0, 0, value[0], value[1], v21[0], v21[1], (void *)v22, *((void **)&v22 + 1), (uint64_t)"AMFDRSealingMapCopyManifestProperties", format, (char)v24);
    goto LABEL_39;
  }
  if (CFArrayGetCount(v7) >= 1)
  {
    uint64_t v25 = a2;
    CFIndex v8 = 0;
    CFStringRef v9 = 0;
    while (1)
    {
      if (cfa)
      {
        CFRelease(cfa);
        CFTypeRef cfa = 0;
      }
      if (v9) {
        CFRelease(v9);
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v8);
      CFDictionaryRef v11 = ValueAtIndex;
      if (!ValueAtIndex || (CFTypeID v12 = CFGetTypeID(ValueAtIndex), v12 != CFDictionaryGetTypeID()))
      {
        LOBYTE(v24) = (_BYTE)v11;
        CFStringRef v17 = @"Object of unexpected type '%@' in manifest property entries";
LABEL_34:
        CFStringRef format = v17;
        *(_OWORD *)char v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)CFTypeRef value = 0u;
        uint64_t v18 = v25;
        goto LABEL_35;
      }
      CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(v11, @"Tag");
      if (!v13)
      {
        uint64_t v24 = @"Tag";
        CFStringRef v17 = @"Missing key '%@' in manifest property entry";
        goto LABEL_34;
      }
      CFStringRef v14 = v13;
      if (_propertyEntryHasAttribute(v11, @"StoreAsInteger", 0))
      {
        if ((AMFDRDataCopySealingManifestIntegerProperty(v3, v14, (uint64_t)&cfa) & 1) == 0) {
          goto LABEL_36;
        }
      }
      else if ((AMFDRDataCopySealingManifestProperty(v3, v14, (uint64_t)&cfa) & 1) == 0)
      {
LABEL_36:
        CFStringRef format = @"AMFDRDataCopySealingManifestProperty failed";
        *(_OWORD *)char v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)CFTypeRef value = 0u;
        uint64_t v18 = v25;
        goto LABEL_37;
      }
      if (!cfa) {
        break;
      }
      if (_propertyEntryHasAttribute(v11, @"StoreAsData", 0)
        || _propertyEntryHasAttribute(v11, @"StoreAsInteger", 0))
      {
        CFDictionaryAddValue(Mutable, v14, cfa);
LABEL_24:
        CFStringRef v9 = 0;
        goto LABEL_25;
      }
      CFAllocatorRef v15 = CFGetAllocator(v3);
      CFStringRef v9 = CFStringCreateFromExternalRepresentation(v15, (CFDataRef)cfa, 0x8000100u);
      if (!v9)
      {
        AMFDRErrorPushInternal(v25, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyManifestProperties", @"Error to create string from property data for %@", (char)v14);
        goto LABEL_39;
      }
      CFDictionaryAddValue(Mutable, v14, v9);
LABEL_25:
      if (++v8 >= CFArrayGetCount(v7)) {
        goto LABEL_29;
      }
    }
    AMSupportLogInternal();
    goto LABEL_24;
  }
LABEL_29:
  CFTypeRef v3 = CFRetain(Mutable);
  if (!CFDictionaryGetCount(Mutable)) {
    AMSupportLogInternal();
  }
LABEL_31:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v3;
}

uint64_t AMFDRSealingMapVerifySealingManifestProperties(const void *a1, const void *a2, uint64_t a3)
{
  return AMFDRSealingMapVerifySealingManifestPropertiesInternal(a1, a2, 0, a3);
}

uint64_t AMFDRSealingMapVerifySealingManifestPropertiesInternal(CFTypeRef cf, CFTypeRef a2, CFTypeRef *a3, uint64_t a4)
{
  CFStringRef v31 = 0;
  if (!cf)
  {
    CFStringRef format = @"amfdr is NULL";
LABEL_48:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealingManifestPropertiesInternal", format, v28);
    goto LABEL_49;
  }
  if (a2)
  {
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFArrayGetTypeID())
    {
      CFStringRef format = @"ingoreProperties is not a CFArray";
      goto LABEL_48;
    }
  }
  CFAllocatorRef v9 = CFGetAllocator(cf);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70]);
  CFArrayRef ManifestPropertyEntriesForDevice = (const __CFArray *)_AMFDRSealingMapGetManifestPropertyEntriesForDevice((uint64_t)cf);
  if (!ManifestPropertyEntriesForDevice)
  {
    AMFDRErrorPushInternal(a4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealingManifestPropertiesInternal", @"_AMFDRSealingMapGetManifestPropertyEntriesForDevice failed", v28);
    goto LABEL_49;
  }
  CFArrayRef v12 = ManifestPropertyEntriesForDevice;
  CFIndex Count = CFArrayGetCount(ManifestPropertyEntriesForDevice);
  if (!AMFDRSealingMapPopulateSealingManifest((uint64_t)cf, 0, a4))
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealingManifestPropertiesInternal", @"AMFDRSealingMapPopulateSealingManifest failed", v28);
    goto LABEL_49;
  }
  CFStringRef v29 = a3;
  CFArrayRef theArray = Mutable;
  if (Count >= 1)
  {
    CFIndex v14 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v12, v14);
      if (!ValueAtIndex)
      {
        AMFDRErrorPushInternal(a4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealingManifestPropertiesInternal", @"Cannot get entry at index %ld", v14);
        uint64_t Value = 0;
        goto LABEL_50;
      }
      CFDictionaryRef v16 = ValueAtIndex;
      uint64_t Value = (uint64_t)CFDictionaryGetValue(ValueAtIndex, @"Tag");
      if (!Value)
      {
        AMFDRErrorPushInternal(a4, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealingManifestPropertiesInternal", @"Cannot get property tag from entry %ld", v14);
        goto LABEL_50;
      }
      CFAllocatorRef v18 = CFGetAllocator(cf);
      CFStringRef v19 = (const __CFString *)_copyMGValuePropertyEntry(v18, v16, 0);
      if (_propertyEntryHasAttribute(v16, @"StoreAsInteger", 0)) {
        break;
      }
      if ((AMFDRDataCopySealingManifestProperty(cf, (const __CFString *)Value, (uint64_t)&v31) & 1) == 0) {
        goto LABEL_14;
      }
LABEL_15:
      if (v19 && v31)
      {
        CFTypeID v20 = CFGetTypeID(v19);
        if (v20 == CFDataGetTypeID() || (CFTypeID v21 = CFGetTypeID(v19), v21 == CFNumberGetTypeID()))
        {
          CFStringRef v22 = 0;
          if (!CFEqual(v19, v31)) {
            goto LABEL_27;
          }
        }
        else
        {
          CFAllocatorRef v24 = CFGetAllocator(cf);
          CFStringRef v25 = CFStringCreateFromExternalRepresentation(v24, (CFDataRef)v31, 0x8000100u);
          CFStringRef v22 = v25;
          if (!v25 || CFStringCompare(v25, v19, 0)) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        if (v19 != v31)
        {
          CFStringRef v22 = 0;
LABEL_27:
          if (!a2
            || (v32.uint64_t length = CFArrayGetCount((CFArrayRef)a2),
                v32.location = 0,
                !CFArrayContainsValue((CFArrayRef)a2, v32, (const void *)Value)))
          {
            CFArrayAppendValue(theArray, (const void *)Value);
          }
          AMSupportLogInternal();
          goto LABEL_31;
        }
        BOOL HasAttribute = _propertyEntryHasAttribute(v16, @"Required", 0);
        CFStringRef v22 = 0;
        if (HasAttribute) {
          goto LABEL_27;
        }
      }
LABEL_31:
      if (v31)
      {
        CFRelease(v31);
        CFStringRef v31 = 0;
      }
      if (v22) {
        CFRelease(v22);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (Count == ++v14) {
        goto LABEL_38;
      }
    }
    if (AMFDRDataCopySealingManifestIntegerProperty(cf, (const __CFString *)Value, (uint64_t)&v31)) {
      goto LABEL_15;
    }
LABEL_14:
    AMSupportLogInternal();
    goto LABEL_15;
  }
LABEL_38:
  if (!CFArrayGetCount(theArray))
  {
    uint64_t Value = 1;
    goto LABEL_50;
  }
  AMFDRErrorPushInternal(a4, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifySealingManifestPropertiesInternal", @"Mismatched properties: %@", (char)theArray);
  if (!v29)
  {
LABEL_49:
    uint64_t Value = 0;
    goto LABEL_50;
  }
  uint64_t Value = 0;
  CFTypeRef *v29 = CFRetain(theArray);
LABEL_50:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return Value;
}

uint64_t AMFDRSealingMapVerifySealingManifestPropertyMatching(const void *a1, uint64_t a2)
{
  return AMFDRSealingMapVerifySealingManifestPropertiesInternal(a1, 0, 0, a2);
}

uint64_t AMFDRSealingMapAutoChallengeClaim(uint64_t a1, uint64_t a2, int a3, CFTypeRef *a4)
{
  uint64_t v5 = a2;
  CFTypeRef v28 = 0;
  CFArrayRef v26 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  if (!a2)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"amfdrRemote is NULL", v24);
    CFIndex v14 = 0;
    CFStringRef v13 = 0;
    CFStringRef PermissionsString = 0;
    CFTypeID v8 = 0;
    goto LABEL_31;
  }
  CFTypeID v8 = (__CFString *)AMFDRCreateCopy(a2);
  if (!v8)
  {
    CFStringRef v23 = @"cannot create a separate amfdrRemote object for challenge claim";
    goto LABEL_57;
  }
  if ((AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute((void *)v5, 0, 0, 0, @"ChallengeClaim", (CFTypeRef *)&theArray, (CFTypeRef *)&v26, 0, (uint64_t)a4) & 1) == 0)
  {
    CFStringRef v23 = @"AMFDRSealingMapCopyDataClassesAndInstancesWithAttribute failed";
LABEL_57:
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", v23, v24);
LABEL_49:
    uint64_t v5 = 0;
LABEL_50:
    CFIndex v14 = 0;
LABEL_51:
    CFStringRef v13 = 0;
    CFStringRef PermissionsString = 0;
    goto LABEL_31;
  }
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0;
      CFStringRef PermissionsString = 0;
      CFStringRef v13 = 0;
      CFIndex v14 = 0;
      while (1)
      {
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v13) {
          CFRelease(v13);
        }
        if (v14) {
          CFRelease(v14);
        }
        if (PermissionsString) {
          CFRelease(PermissionsString);
        }
        CFDictionaryRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(theArray, v11);
        CFIndex v14 = ValueAtIndex;
        if (!ValueAtIndex)
        {
          AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"dataClass is NULL", v24);
          uint64_t v5 = 0;
          goto LABEL_51;
        }
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
        if (v16 != CFStringGetTypeID())
        {
          AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"Object of unexpected type '%@' for key dataClass, expected CFString", (char)v14);
          goto LABEL_49;
        }
        CFStringRef v17 = CFArrayGetValueAtIndex(v26, v11);
        uint64_t v5 = (uint64_t)v17;
        if (!v17)
        {
          AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"dataInstance is NULL", v24);
          goto LABEL_50;
        }
        CFTypeID v18 = CFGetTypeID(v17);
        if (v18 != CFStringGetTypeID())
        {
          AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"Object of unexpected type '%@' for key dataInstance, expected CFString", v5);
          goto LABEL_49;
        }
        CFStringRef v13 = (const void *)AMFDRSealingMapCopyLocalData(v14, (const __CFString *)v5, *(const __CFDictionary **)(a1 + 16), (uint64_t)&cf);
        if (!cf
          || (uint64_t v19 = AMFDRGetUnderlyingErrorCode(a1, (CFErrorRef *)&cf), v20 = AMFDRGetTrustError((__CFError *)cf), a3)
          && v19 == 18
          && (v20 & 0xFFFD9FFFFFFFFEFFLL) == 0)
        {
          AMSupportLogInternal();
          CFIndex v14 = 0;
          CFStringRef PermissionsString = 0;
        }
        else
        {
          AMSupportLogInternal();
          CFStringRef PermissionsString = AMFDRDataCreatePermissionsString(v8, 8u, v14, (const __CFString *)v5);
          if (!PermissionsString)
          {
            AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"AMFDRDataCreatePermissionsString failed", v24);
            uint64_t v5 = 0;
            CFIndex v14 = 0;
            goto LABEL_31;
          }
          AMFDRSetOption((uint64_t)v8, @"Permissions", PermissionsString);
          CFTypeID v21 = (__CFString *)AMFDRDataHTTPChallengeClaim((uint64_t)v8, v14, (const void *)v5, &v28);
          CFIndex v14 = v21;
          if (v28)
          {
            AMFDRErrorPushInternal((uint64_t)&v28, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"AMFDRDataHTTPChallengeClaim failed", v24);
            uint64_t v5 = 0;
            goto LABEL_31;
          }
          if (!v21)
          {
            AMFDRErrorPushInternal((uint64_t)a4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapAutoChallengeClaim", @"responseClaimData is NULL", v24);
            uint64_t v5 = 0;
            goto LABEL_31;
          }
        }
        if (v10 == ++v11)
        {
          uint64_t v5 = 1;
          goto LABEL_31;
        }
      }
    }
  }
  CFIndex v14 = 0;
  CFStringRef v13 = 0;
  CFStringRef PermissionsString = 0;
  uint64_t v5 = 1;
LABEL_31:
  if (a4 && v28) {
    *a4 = CFRetain(v28);
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (PermissionsString) {
    CFRelease(PermissionsString);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v5;
}

uint64_t AMFDRSealingMapCopyDataClassesWithAttribute(uint64_t a1, const void *a2, CFTypeRef *a3, uint64_t a4)
{
  return AMFDRSealingMapCopyDataClassesWithAttributeInternal(0, a2, a3, a4);
}

uint64_t AMFDRSealingMapCopyDataClassesWithAttributeInternal(CFTypeRef cf, const void *a2, CFTypeRef *a3, uint64_t a4)
{
  if (cf) {
    CFAllocatorRef v8 = CFGetAllocator(cf);
  }
  else {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  }
  CFArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesWithAttributeInternal", @"Failed to allocate dataClasses", (char)v24);
    goto LABEL_24;
  }
  CFArrayRef EntriesForDeviceInternal = (const __CFArray *)AMFDRSealingMapGetEntriesForDeviceInternal((uint64_t)cf);
  if (!EntriesForDeviceInternal)
  {
    CFStringRef v23 = @"Failed to get sealing map";
LABEL_23:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDataClassesWithAttributeInternal", v23, (char)v24);
LABEL_24:
    uint64_t v21 = 0;
    goto LABEL_19;
  }
  CFArrayRef v11 = EntriesForDeviceInternal;
  if (CFArrayGetCount(EntriesForDeviceInternal) >= 1)
  {
    CFIndex v12 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v12);
      CFDictionaryRef v14 = ValueAtIndex;
      if (!ValueAtIndex || (CFTypeID v15 = CFGetTypeID(ValueAtIndex), v15 != CFDictionaryGetTypeID()))
      {
        LOBYTE(v24) = (_BYTE)v14;
        CFStringRef v23 = @"Unexpected type '%@' in sealing map";
        goto LABEL_23;
      }
      uint64_t Value = CFDictionaryGetValue(v14, @"Tag");
      if (!Value)
      {
        char v24 = @"Tag";
        CFStringRef v23 = @"Missing key '%@' in sealing map entry";
        goto LABEL_23;
      }
      CFStringRef v17 = Value;
      CFTypeID v18 = CFGetTypeID(Value);
      CFTypeID TypeID = CFStringGetTypeID();
      if (v18 != TypeID) {
        break;
      }
      if (AMFDRSealingMapEntryHasAttributeInternal(TypeID, v14, a2, 0))
      {
        v25.uint64_t length = CFArrayGetCount(Mutable);
        v25.location = 0;
        if (!CFArrayContainsValue(Mutable, v25, v17)) {
          CFArrayAppendValue(Mutable, v17);
        }
      }
      if (++v12 >= CFArrayGetCount(v11)) {
        goto LABEL_16;
      }
    }
    LOBYTE(v24) = (_BYTE)v17;
    CFStringRef v23 = @"Unexpected type '%@' for key '%@' in sealing map entry";
    goto LABEL_23;
  }
LABEL_16:
  CFIndex Count = CFArrayGetCount(Mutable);
  uint64_t v21 = 1;
  if (a3 && Count) {
    *a3 = CFRetain(Mutable);
  }
LABEL_19:
  AMSupportSafeRelease();
  return v21;
}

uint64_t AMFDRSealingMapCopySubCCDataClasses(CFTypeRef cf, const void *a2, CFTypeRef *a3, uint64_t a4)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  v49[0] = 0;
  if (cf)
  {
    CFAllocatorRef v9 = CFGetAllocator(cf);
    CFDictionaryRef v10 = (const __CFDictionary *)AMFDRGetOptions((uint64_t)cf);
    if (v10 && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v10, @"SkipRecoverDataClasses")) != 0)
    {
      CFArrayRef theArray = Value;
      CFTypeID v12 = CFGetTypeID(Value);
      if (v12 != CFArrayGetTypeID())
      {
        AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"malformed skipDataClasses", v40);
LABEL_60:
        uint64_t v38 = 0;
        goto LABEL_56;
      }
    }
    else
    {
      CFArrayRef theArray = 0;
    }
  }
  else
  {
    CFArrayRef theArray = 0;
    CFAllocatorRef v9 = v8;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Failed to allocate subCCListDict", v40);
    goto LABEL_60;
  }
  CFArrayRef EntriesForDeviceInternal = (const __CFArray *)AMFDRSealingMapGetEntriesForDeviceInternal((uint64_t)cf);
  if (!EntriesForDeviceInternal)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Failed to get sealing map", v40);
    goto LABEL_60;
  }
  CFArrayRef v15 = EntriesForDeviceInternal;
  CFTypeRef v42 = a3;
  CFDictionaryRef theDict = Mutable;
  if (CFArrayGetCount(EntriesForDeviceInternal) < 1)
  {
LABEL_45:
    CFIndex Count = CFDictionaryGetCount(theDict);
    uint64_t v38 = 1;
    if (v42 && Count) {
      *CFTypeRef v42 = CFRetain(theDict);
    }
    goto LABEL_56;
  }
  CFAllocatorRef allocator = v9;
  CFAllocatorRef v45 = v8;
  uint64_t v41 = a4;
  CFIndex v16 = 0;
  CFStringRef FullKey = 0;
  CFMutableDictionaryRef v48 = 0;
  CFMutableArrayRef v17 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v16);
    CFDictionaryRef v19 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v20 = CFGetTypeID(ValueAtIndex), v20 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(v41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Unexpected type '%@' in sealing map", (char)v19);
      goto LABEL_55;
    }
    CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v19, @"SubCCList");
    if (v21) {
      break;
    }
LABEL_44:
    if (++v16 >= CFArrayGetCount(v15)) {
      goto LABEL_45;
    }
  }
  CFArrayRef v22 = v21;
  CFTypeID v23 = CFGetTypeID(v21);
  if (v23 != CFArrayGetTypeID())
  {
    AMFDRErrorPushInternal(v41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"unexpected subcclist array type", v40);
    goto LABEL_55;
  }
  char v24 = CFDictionaryGetValue(v19, @"Tag");
  if (!v24)
  {
    AMFDRErrorPushInternal(v41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Missing key '%@' in sealing map entry", (char)@"Tag");
    goto LABEL_55;
  }
  CFRange v25 = v24;
  CFTypeID v26 = CFGetTypeID(v24);
  if (v26 != CFStringGetTypeID())
  {
    AMFDRErrorPushInternal(v41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Unexpected type '%@' for key '%@' in sealing map entry", (char)v25);
    goto LABEL_55;
  }
  if (theArray)
  {
    v50.uint64_t length = CFArrayGetCount(theArray);
    v50.location = 0;
    if (CFArrayContainsValue(theArray, v50, v25))
    {
      if (_isSealingClass((BOOL)v25))
      {
        AMFDRErrorPushInternal(v41, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Could not skip seal class '%@'", (char)v25);
        goto LABEL_55;
      }
      goto LABEL_44;
    }
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v49[0])
  {
    CFRelease(v49[0]);
    v49[0] = 0;
  }
  CFStringRef v27 = _copyIdentifierListForSealingMapEntry(v45, v19, 0, 0, 0, (uint64_t)v49);
  if (!v27)
  {
    AMSupportLogInternal();
    CFMutableDictionaryRef v48 = 0;
    goto LABEL_44;
  }
  uint64_t v28 = (uint64_t)v27;
  if (FullKey) {
    CFRelease(FullKey);
  }
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v45, (uint64_t)v25, v28);
  if (v17) {
    CFRelease(v17);
  }
  CFMutableDictionaryRef v48 = (const void *)v28;
  CFMutableArrayRef v17 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
  if (!v17)
  {
    AMFDRErrorPushInternal(v41, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Failed to allocate subCCdataClasses", v40);
    goto LABEL_55;
  }
  if (CFArrayGetCount(v22) < 1)
  {
LABEL_42:
    CFDictionarySetValue(theDict, FullKey, v17);
    goto LABEL_44;
  }
  CFIndex v29 = 0;
  while (1)
  {
    CFDictionaryRef v30 = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, v29);
    CFDictionaryRef v31 = v30;
    if (!v30 || (CFTypeID v32 = CFGetTypeID(v30), v32 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(v41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Unexpected type '%@' in subcc list", (char)v31);
      goto LABEL_55;
    }
    CFStringRef v33 = CFDictionaryGetValue(v31, @"Tag");
    if (!v33)
    {
      AMFDRErrorPushInternal(v41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Missing key '%@' in subcc list entry", (char)@"Tag");
      goto LABEL_55;
    }
    CFTypeRef v34 = v33;
    CFTypeID v35 = CFGetTypeID(v33);
    CFTypeID TypeID = CFStringGetTypeID();
    if (v35 != TypeID) {
      break;
    }
    if (AMFDRSealingMapEntryHasAttributeInternal(TypeID, v31, a2, 0)) {
      CFArrayAppendValue(v17, v34);
    }
    else {
      AMSupportLogInternal();
    }
    if (++v29 >= CFArrayGetCount(v22)) {
      goto LABEL_42;
    }
  }
  AMFDRErrorPushInternal(v41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopySubCCDataClasses", @"Unexpected type '%@' for key '%@' in subcc list entry", (char)v34);
LABEL_55:
  uint64_t v38 = 0;
LABEL_56:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v38;
}

uint64_t AMFDRSealingMapCopyPropertyTagsWithAttribute(uint64_t a1, const void *a2, uint64_t *a3, uint64_t a4)
{
  return AMFDRSealingMapCopyPropertyTagsWithAttributeInternal(0, a2, a3, a4);
}

uint64_t AMFDRSealingMapCopyPropertyTagsWithAttributeInternal(const void *a1, const void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t ManifestPropertyEntriesForDevice = _AMFDRSealingMapGetManifestPropertyEntriesForDevice((uint64_t)a1);
  CFArrayRef v9 = (const __CFArray *)ManifestPropertyEntriesForDevice;
  if (a1)
  {
    CFAllocatorRef v10 = CFGetAllocator(a1);
    if (!v9)
    {
LABEL_21:
      if (a3) {
        goto LABEL_18;
      }
      goto LABEL_19;
    }
  }
  else
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (!ManifestPropertyEntriesForDevice) {
      goto LABEL_21;
    }
  }
  if (CFArrayGetCount(v9) < 1) {
    goto LABEL_21;
  }
  uint64_t v24 = a4;
  CFMutableDictionaryRef Mutable = 0;
  CFIndex v12 = 0;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v12);
    CFDictionaryRef v14 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v15 = CFGetTypeID(ValueAtIndex), v15 != CFDictionaryGetTypeID()))
    {
      LOBYTE(v23) = (_BYTE)v14;
      CFStringRef v21 = @"Object of unexpected type '%@' in manifest property entries";
LABEL_27:
      AMFDRErrorPushInternal(v24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyPropertyTagsWithAttributeInternal", v21, (char)v23);
LABEL_28:
      uint64_t v19 = 0;
      goto LABEL_20;
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v14, @"Tag");
    if (!Value)
    {
      CFTypeID v23 = @"Tag";
      CFStringRef v21 = @"Missing key '%@' in manifest property entry";
      goto LABEL_27;
    }
    CFStringRef v17 = Value;
    CFTypeID v18 = CFGetTypeID(Value);
    if (v18 != CFStringGetTypeID())
    {
      LOBYTE(v23) = (_BYTE)v17;
      CFStringRef v21 = @"Object of unexpected type '%@' for key '%@' in manifest property entry";
      goto LABEL_27;
    }
    if (CFStringGetLength(v17) != 4)
    {
      LOBYTE(v23) = (_BYTE)v17;
      CFStringRef v21 = @"Key '%@' length should be 4 for '%@' in manifest property entry";
      goto LABEL_27;
    }
    if (_propertyEntryHasAttribute(v14, a2, 0))
    {
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x263EFFF70]);
        if (!Mutable)
        {
          AMFDRErrorPushInternal(v24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyPropertyTagsWithAttributeInternal", @"propertyTags is NULL", v22);
          goto LABEL_28;
        }
      }
      CFArrayAppendValue(Mutable, v17);
    }
    ++v12;
  }
  while (v12 < CFArrayGetCount(v9));
  if (!a3) {
    goto LABEL_19;
  }
LABEL_18:
  *a3 = AMSupportSafeRetain();
LABEL_19:
  uint64_t v19 = 1;
LABEL_20:
  AMSupportSafeRelease();
  return v19;
}

__CFDictionary *AMFDRSealingMapCopyPropertyTagsAndIdentifiers(uint64_t a1)
{
  uint64_t ManifestPropertyEntriesForDevice = _AMFDRSealingMapGetManifestPropertyEntriesForDevice(0);
  if (!ManifestPropertyEntriesForDevice)
  {
    AMFDRErrorPushInternal(a1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyPropertyTagsAndIdentifiersWithAttribute", @"Failed to query manifest property entries", v18);
    CFTypeID v15 = 0;
    goto LABEL_13;
  }
  CFArrayRef v3 = (const __CFArray *)ManifestPropertyEntriesForDevice;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyPropertyTagsAndIdentifiersWithAttribute", @"propertyInfo is NULL", v18);
LABEL_18:
    CFTypeID v15 = 0;
    goto LABEL_13;
  }
  if (CFArrayGetCount(v3) >= 1)
  {
    CFIndex v5 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v5);
      CFDictionaryRef v7 = ValueAtIndex;
      if (!ValueAtIndex || (CFTypeID v8 = CFGetTypeID(ValueAtIndex), v8 != CFDictionaryGetTypeID()))
      {
        char v19 = (char)v7;
        CFStringRef v17 = @"Object of unexpected type '%@' in manifest property entries";
        goto LABEL_17;
      }
      CFStringRef Value = CFDictionaryGetValue(v7, @"Tag");
      if (!Value || (v10 = Value, CFTypeID v11 = CFGetTypeID(Value), v11 != CFStringGetTypeID()))
      {
        char v19 = v5;
        CFStringRef v17 = @"Unexpected type for property tag %ld";
        goto LABEL_17;
      }
      CFIndex v12 = CFDictionaryGetValue(v7, @"PropertyIdentifier");
      if (!v12) {
        break;
      }
      CFStringRef v13 = v12;
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 != CFStringGetTypeID()) {
        break;
      }
      CFDictionarySetValue(Mutable, v10, v13);
      if (++v5 >= CFArrayGetCount(v3)) {
        goto LABEL_12;
      }
    }
    char v19 = v5;
    CFStringRef v17 = @"Unexpected type for property identifier %ld";
LABEL_17:
    AMFDRErrorPushInternal(a1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyPropertyTagsAndIdentifiersWithAttribute", v17, v19);
    goto LABEL_18;
  }
LABEL_12:
  CFTypeID v15 = Mutable;
LABEL_13:
  AMSupportSafeRelease();
  return v15;
}

CFTypeRef AMFDRSealingManifestCopyInstanceForClass(const void *a1, const __CFDictionary *a2, void *a3)
{
  CFArrayRef v15 = 0;
  CFArrayRef v16 = 0;
  CFIndex v5 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Local", a2);
  uint64_t v6 = (uint64_t)v5;
  if (!v5)
  {
    CFStringRef v9 = @"Create amfdr failed";
    goto LABEL_9;
  }
  if ((AMFDRSealingMapPopulateSealingManifest((uint64_t)v5, 0, (uint64_t)a3) & 1) == 0)
  {
    CFStringRef v13 = @"AMFDRSealingMapPopulateSealingManifest failed";
    goto LABEL_18;
  }
  if (!_AMFDRSealingManifestCopyDataClassesAndInstances(v6, 0, 0, 0, 0, 0, (CFTypeRef *)&v16, (CFTypeRef *)&v15, 0, 0, 0, 0, a3))
  {
    CFStringRef v13 = @"_AMFDRSealingManifestCopyDataClassesAndInstances failed";
    goto LABEL_18;
  }
  if (CFArrayGetCount(v16) >= 1)
  {
    CFIndex v7 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v16, v7);
      if (CFEqual(a1, ValueAtIndex)) {
        break;
      }
      if (++v7 >= CFArrayGetCount(v16)) {
        goto LABEL_8;
      }
    }
    CFTypeID v11 = CFArrayGetValueAtIndex(v15, v7);
    if (v11)
    {
      CFTypeRef v10 = CFRetain(v11);
      if (v10) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }
    CFStringRef v13 = @"dataInstance is NULL";
LABEL_18:
    AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyInstanceForClass", v13, v14);
    goto LABEL_10;
  }
LABEL_8:
  char v14 = (char)a1;
  CFStringRef v9 = @"Could not find dataClass '%@' in sealing manifest, outDataInstance is NULL";
LABEL_9:
  AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyInstanceForClass", v9, v14);
LABEL_10:
  CFTypeRef v10 = 0;
LABEL_13:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v10;
}

CFTypeRef AMFDRSealingManifestCopyMultiInstanceForClass(const void *a1, const __CFDictionary *a2, void *a3)
{
  CFArrayRef v17 = 0;
  CFArrayRef v18 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyMultiInstanceForClass", @"dataClass is NULL", v16);
LABEL_16:
    CFTypeRef v12 = 0;
    goto LABEL_17;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v6 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Local", a2);
  uint64_t v7 = (uint64_t)v6;
  if (!v6)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyMultiInstanceForClass", @"Create amfdr failed", v16);
    goto LABEL_16;
  }
  if ((AMFDRSealingMapPopulateSealingManifest((uint64_t)v6, 0, (uint64_t)a3) & 1) == 0)
  {
    CFStringRef v15 = @"AMFDRSealingMapPopulateSealingManifest failed";
LABEL_23:
    AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyMultiInstanceForClass", v15, v16);
    goto LABEL_16;
  }
  if (!_AMFDRSealingManifestCopyDataClassesAndInstances(v7, 0, 0, 0, 0, 0, (CFTypeRef *)&v18, (CFTypeRef *)&v17, 0, 0, 0, 0, a3))
  {
    CFStringRef v15 = @"_AMFDRSealingManifestCopyDataClassesAndInstances failed";
    goto LABEL_23;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    CFStringRef v13 = @"dataInstanceArray is NULL";
    goto LABEL_15;
  }
  if (CFArrayGetCount(v18) >= 1)
  {
    for (CFIndex i = 0; i < CFArrayGetCount(v18); ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v18, i);
      if (CFEqual(a1, ValueAtIndex))
      {
        CFTypeID v11 = CFArrayGetValueAtIndex(v17, i);
        if (!v11)
        {
          AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyMultiInstanceForClass", @"dataInstance is NULL", v16);
          goto LABEL_16;
        }
        CFArrayAppendValue(Mutable, v11);
      }
    }
  }
  if (CFArrayGetCount(Mutable) < 1)
  {
    char v16 = (char)a1;
    CFStringRef v13 = @"Could not find key '%@' in sealing manifest.";
LABEL_15:
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyMultiInstanceForClass", v13, v16);
    goto LABEL_16;
  }
  CFTypeRef v12 = CFRetain(Mutable);
LABEL_17:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v12;
}

uint64_t AMFDRSealingManifestCopyLocalDataForClass(__CFString *a1, const __CFDictionary *a2, void *a3)
{
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyLocalDataForClass", @"dataClass is NULL", v9);
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  CFStringRef v6 = (const __CFString *)AMFDRSealingManifestCopyInstanceForClass(a1, a2, a3);
  if (!v6)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyLocalDataForClass", @"Failed to copy dataInstance from SealingManifest", v9);
    goto LABEL_7;
  }
  uint64_t v7 = _AMFDRSealingMapCopyLocalDataInternal(a1, v6, 0, 0, 0, a2, (uint64_t)a3);
LABEL_4:
  AMSupportSafeRelease();
  return v7;
}

CFStringRef AMFDRSealingMapCopyDictFromCombinedData(const __CFData *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, int a5, void *a6)
{
  if (!a1)
  {
    CFStringRef v18 = @"dataBlob is NULL";
LABEL_20:
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDictFromCombinedData", v18, v19);
    CFStringRef v8 = 0;
    goto LABEL_15;
  }
  if (!a2)
  {
    CFStringRef v18 = @"dataClass is NULL";
    goto LABEL_20;
  }
  CFStringRef v8 = a3;
  if (!a3)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDictFromCombinedData", @"dataInstance is NULL", v19);
    goto LABEL_15;
  }
  if (!a4)
  {
    CFStringRef v18 = @"manifestInstance is NULL";
    goto LABEL_20;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFTypeRef v12 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Local", 0);
  uint64_t v13 = (uint64_t)v12;
  if (!v12)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDictFromCombinedData", @"Failed to create amfdrLocal", v19);
LABEL_24:
    CFStringRef v8 = 0;
    goto LABEL_15;
  }
  if ((AMFDRDataApTicketPopulate((uint64_t)v12) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDictFromCombinedData", @"Failed to get ApTicket", v19);
    goto LABEL_24;
  }
  CFStringRef v14 = (const __CFString *)AMFDRDataApTicketCopyObjectProperty(v13, 1718903152, 1145525076);
  if (!v14)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDictFromCombinedData", @"Unable to extract trust object digest from AP Ticket", v19);
LABEL_28:
    CFStringRef v8 = 0;
    goto LABEL_15;
  }
  AMFDRSetOption(v13, @"TrustObjectDigest", v14);
  if ((AMFDRDataCopyTrustObject(v13) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDictFromCombinedData", @"Failed to get trustObjData", v19);
    goto LABEL_28;
  }
  CFStringRef v15 = AMFDRCreateTypeWithOptions(v11, @"Memory", 0);
  uint64_t v16 = (uint64_t)v15;
  if (!v15)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyDictFromCombinedData", @"Failed to create amfdrMemory", v19);
    goto LABEL_14;
  }
  AMFDRSetOption((uint64_t)v15, @"TrustObjectDigest", v14);
  AMFDRSetOption(v16, @"TrustObject", 0);
  AMFDRSetOption(v16, @"INST", a4);
  AMFDRSetOption(v16, @"SkipVerifySik", (const __CFString *)*MEMORY[0x263EFFB40]);
  AMFDRSetOption(v16, @"SignData", (const __CFString *)*MEMORY[0x263EFFB38]);
  if ((AMFDRDataPutWithOptions(v16, a2, v8, a1, 0, (uint64_t)a6) & 1) == 0)
  {
    AMSupportLogInternal();
    goto LABEL_14;
  }
  CFStringRef v8 = (const __CFString *)AMFDRDataDictCopy(v16, a2, v8, (uint64_t)a6);
  if (a6 && *a6)
  {
    AMSupportSafeRelease();
LABEL_14:
    CFStringRef v8 = 0;
  }
LABEL_15:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v8;
}

uint64_t AMFDRSealingMapCopyLocalDict(__CFString *a1, const __CFString *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v11 = @"dataClass is NULL";
LABEL_8:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalDict", v11, v12);
LABEL_10:
    uint64_t v9 = 0;
    goto LABEL_5;
  }
  if (!a2)
  {
    CFStringRef v11 = @"dataInstance is NULL";
    goto LABEL_8;
  }
  CFStringRef v8 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a1, a4, 1, 0);
  if (!v8)
  {
    AMSupportLogInternal();
    goto LABEL_10;
  }
  uint64_t v9 = _AMFDRSealingMapCopyLocalDataInternal(a1, a2, v8, 0, 1, a3, a4);
LABEL_5:
  AMSupportSafeRelease();
  return v9;
}

uint64_t AMFDRSealingMapCopyLocalDictForClass(__CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalDictForClass", @"dataClass is NULL", v9);
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  CFStringRef v6 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a1, a3, 0, 0);
  if (!v6)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalDictForClass", @"dataInstance is NULL", v9);
    goto LABEL_7;
  }
  uint64_t v7 = AMFDRSealingMapCopyLocalDict(a1, v6, a2, a3);
LABEL_4:
  AMSupportSafeRelease();
  return v7;
}

uint64_t AMFDRSealingManifestCopyLocalDictForClass(__CFString *a1, const __CFDictionary *a2, void *a3)
{
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyLocalDictForClass", @"dataClass is NULL", v9);
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  CFStringRef v6 = (const __CFString *)AMFDRSealingManifestCopyInstanceForClass(a1, a2, a3);
  if (!v6)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyLocalDictForClass", @"Failed to copy dataInstance from SealingManifest", v9);
    goto LABEL_7;
  }
  uint64_t v7 = _AMFDRSealingMapCopyLocalDataInternal(a1, v6, 0, 0, 1, a2, (uint64_t)a3);
LABEL_4:
  AMSupportSafeRelease();
  return v7;
}

uint64_t AMFDRSealingMapCopyMinimalManifestClassesAndInstances(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  return _AMFDRSealingMapCopyMinimalManifestClassesAndInstances(a1, 0, a2, a3, a4, 0, a5);
}

uint64_t _AMFDRSealingMapCopyMinimalManifestClassesAndInstances(void *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned char *a6, uint64_t a7)
{
  CFTypeRef v53 = 0;
  CFTypeRef v54 = 0;
  CFTypeRef v55 = 0;
  if (!a1)
  {
    CFStringRef v43 = @"amfdr is NULL";
LABEL_80:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", v43, v44);
    CFStringRef v23 = 0;
    CFStringRef v18 = 0;
    CFStringRef v21 = 0;
    CFMutableArrayRef v16 = 0;
    CFMutableArrayRef Mutable = 0;
LABEL_82:
    uint64_t v40 = 0;
    goto LABEL_53;
  }
  uint64_t EntriesForDeviceInternal = AMFDRSealingMapGetEntriesForDeviceInternal(0);
  if (!EntriesForDeviceInternal)
  {
    CFStringRef v43 = @"Could not get sealing map";
    goto LABEL_80;
  }
  CFArrayRef v10 = (const __CFArray *)EntriesForDeviceInternal;
  CFAllocatorRef v45 = a3;
  CFAllocatorRef v11 = CFGetAllocator(a1);
  char v12 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFMutableArrayRef v15 = CFArrayCreateMutable(v14, 0, v12);
  CFMutableArrayRef v16 = v15;
  if (!Mutable || !v15)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", @"failed to allocate data class/instance arrays", v44);
    CFStringRef v23 = 0;
    CFStringRef v18 = 0;
    CFStringRef v21 = 0;
    goto LABEL_82;
  }
  CFArrayRef theArray = v15;
  CFAllocatorRef v17 = CFGetAllocator(a1);
  CFStringRef v18 = CFArrayCreateMutable(v17, 0, &kCFArrayCallBacksAllowNULL);
  CFAllocatorRef v19 = CFGetAllocator(a1);
  CFMutableArrayRef v20 = CFArrayCreateMutable(v19, 0, &kCFArrayCallBacksAllowNULL);
  CFStringRef v21 = v20;
  if (!v18 || !v20)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", @"failed to allocate minimalSealingData arrays", v44);
    CFStringRef v23 = 0;
    uint64_t v40 = 0;
    CFMutableArrayRef v16 = theArray;
    goto LABEL_53;
  }
  CFMutableDictionaryRef v48 = Mutable;
  if (CFArrayGetCount(v10) < 1)
  {
    CFStringRef v23 = 0;
LABEL_43:
    CFMutableArrayRef v16 = theArray;
    if (CFArrayGetCount(theArray) >= 1)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      AMFDRSetStat((CFMutableDictionaryRef *)a1, @"FDRMissingDataInstance", Count);
      if (a6) {
        *a6 = 1;
      }
    }
    CFMutableArrayRef Mutable = v48;
    if (a4) {
      *a4 = AMSupportSafeRetain();
    }
    if (a5) {
      *a5 = AMSupportSafeRetain();
    }
    if (v45) {
      uint64_t *v45 = AMSupportSafeRetain();
    }
    uint64_t v40 = 1;
    goto LABEL_53;
  }
  CFIndex v22 = 0;
  CFStringRef v23 = 0;
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v22);
    CFDictionaryRef v26 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v27 = CFGetTypeID(ValueAtIndex), v27 != CFDictionaryGetTypeID()))
    {
      AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", @"Object of unexpected type '%@' in sealing map", (char)v26);
      goto LABEL_72;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v26, @"MinimalSealingManifest");
    if (!Value) {
      goto LABEL_40;
    }
    CFArrayRef v29 = Value;
    if (v23) {
      CFRelease(v23);
    }
    CFStringRef v30 = _copyIdentifierListForSealingMapEntry(v24, v26, 0, 0, 0, a7);
    if (!v30) {
      break;
    }
    CFStringRef v23 = v30;
    CFTypeID v31 = CFGetTypeID(v30);
    if (v31 != CFStringGetTypeID())
    {
      AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", @"minimal manifest with multi data class is not supported", v44);
      goto LABEL_72;
    }
    if (v55)
    {
      CFRelease(v55);
      CFTypeRef v55 = 0;
    }
    if (v54)
    {
      CFRelease(v54);
      CFTypeRef v54 = 0;
    }
    if (v53)
    {
      CFRelease(v53);
      CFTypeRef v53 = 0;
    }
    CFTypeID v32 = CFDictionaryGetValue(v26, @"Tag");
    if (!v32 || (CFStringRef v33 = v32, v34 = CFGetTypeID(v32), v34 != CFStringGetTypeID()))
    {
      AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", @"Missing key '%@' in sealing map entry", (char)@"Tag");
      goto LABEL_72;
    }
    if (!_AMFDRSealingMapCopyDataClassesAndInstancesInternal(a1, v29, 1, 0, a2, 0, 0, 0, 0, &v55, &v54, &v53, 0, 0, a7))
    {
      CFStringRef format = @"_AMFDRSealingMapCopyDataClassesAndInstancesInternal failed";
LABEL_75:
      AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", format, v44);
      goto LABEL_72;
    }
    if (v53 && CFArrayGetCount((CFArrayRef)v53) >= 1)
    {
      CFArrayRef v35 = (const __CFArray *)v53;
      v56.uint64_t length = CFArrayGetCount((CFArrayRef)v53);
      v56.location = 0;
      CFArrayAppendArray(theArray, v35, v56);
    }
    if (v55 && CFArrayGetCount((CFArrayRef)v55) && v54 && CFArrayGetCount((CFArrayRef)v54))
    {
      CFIndex v36 = CFArrayGetCount((CFArrayRef)v55);
      if (v36 != CFArrayGetCount((CFArrayRef)v54))
      {
        CFStringRef format = @"Must have a data instance for each data class to add to miniaml sealing array";
        goto LABEL_75;
      }
      CFArrayRef v37 = (const __CFArray *)v54;
      v57.uint64_t length = CFArrayGetCount((CFArrayRef)v54);
      v57.location = 0;
      CFArrayAppendArray(v48, v37, v57);
      if (CFArrayGetCount((CFArrayRef)v55) >= 1)
      {
        CFIndex v38 = 0;
        do
        {
          CFArrayAppendValue(v18, v33);
          CFArrayAppendValue(v21, v23);
          ++v38;
        }
        while (v38 < CFArrayGetCount((CFArrayRef)v55));
      }
    }
LABEL_40:
    if (++v22 >= CFArrayGetCount(v10)) {
      goto LABEL_43;
    }
  }
  if (AMFDRAllowIncompleteData((uint64_t)a1))
  {
    AMSupportLogInternal();
    CFStringRef v23 = 0;
    if (a6) {
      *a6 = 1;
    }
    goto LABEL_40;
  }
  AMFDRErrorPushInternal(a7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyMinimalManifestClassesAndInstances", @"failed to query sealed data instance for minimal manifest and incomplete data is not allowed", v44);
  CFStringRef v23 = 0;
LABEL_72:
  uint64_t v40 = 0;
  CFMutableArrayRef Mutable = v48;
  CFMutableArrayRef v16 = theArray;
LABEL_53:
  if (v55)
  {
    CFRelease(v55);
    CFTypeRef v55 = 0;
  }
  if (v54)
  {
    CFRelease(v54);
    CFTypeRef v54 = 0;
  }
  if (v53)
  {
    CFRelease(v53);
    CFTypeRef v53 = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v40;
}

CFMutableArrayRef AMFDRSealingManifestCopyMinimalManifestClassesAndInstances(CFDictionaryRef *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  if ((AMFDRSealingMapPopulateSealingManifest((uint64_t)a1, 0, (uint64_t)a5) & 1) == 0)
  {
    CFStringRef v11 = @"AMFDRSealingMapPopulateSealingManifest failed on amfdr";
LABEL_8:
    AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCopyMinimalManifestClassesAndInstances", v11, v12);
    return 0;
  }
  if ((AMFDRSealingMapPopulateMinimalSealingManifest(a1, 0, (uint64_t)a5) & 1) == 0)
  {
    CFStringRef v11 = @"AMFDRSealingMapPopulateMinimalSealingManifest failed on amfdr";
    goto LABEL_8;
  }

  return _AMFDRSealingManifestCopyMinimalManifestClassesAndInstances(a1, a2, a3, a4, a5);
}

CFMutableArrayRef _AMFDRSealingManifestCopyMinimalManifestClassesAndInstances(CFTypeRef cf, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  context[5] = *MEMORY[0x263EF8340];
  if (!cf || !*((void *)cf + 2))
  {
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyMinimalManifestClassesAndInstances", @"amfdr/amfdr->optionsDict is NULL", context[0]);
    return 0;
  }
  CFAllocatorRef v10 = CFGetAllocator(cf);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyMinimalManifestClassesAndInstances", @"failed to allocate data class/instance arrays", context[0]);
    return Mutable;
  }
  CFAllocatorRef v12 = CFGetAllocator(cf);
  CFMutableArrayRef v13 = CFArrayCreateMutable(v12, 0, &kCFArrayCallBacksAllowNULL);
  CFAllocatorRef v14 = CFGetAllocator(cf);
  CFMutableArrayRef v15 = CFArrayCreateMutable(v14, 0, &kCFArrayCallBacksAllowNULL);
  CFMutableArrayRef v16 = v15;
  if (v13 && v15)
  {
    CFDictionaryRef v17 = (const __CFDictionary *)_CFDictionaryCopyValue(*((const __CFDictionary **)cf + 2), @"MinimalSealingManifests");
    CFDictionaryRef v18 = v17;
    if (v17
      && (CFTypeID v19 = CFGetTypeID(v17), v19 == CFDictionaryGetTypeID())
      && CFDictionaryGetCount(v18) >= 1
      && (context[0] = cf,
          context[1] = Mutable,
          void context[2] = v13,
          context[3] = v16,
          void context[4] = a5,
          CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)_getMinimalSealingManifestDataInstances, context),
          *a5))
    {
      AMSupportLogInternal();
      uint64_t v20 = 0;
    }
    else
    {
      if (a3) {
        *a3 = AMSupportSafeRetain();
      }
      if (a4) {
        *a4 = AMSupportSafeRetain();
      }
      if (a2) {
        *a2 = AMSupportSafeRetain();
      }
      uint64_t v20 = 1;
      if (!v18) {
        goto LABEL_18;
      }
    }
    CFRelease(v18);
LABEL_18:
    CFRelease(Mutable);
LABEL_19:
    CFRelease(v13);
    CFMutableArrayRef Mutable = (CFMutableArrayRef)v20;
    goto LABEL_20;
  }
  AMFDRErrorPushInternal((uint64_t)a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingManifestCopyMinimalManifestClassesAndInstances", @"failed to allocate minimalSealingData arrays", context[0]);
  CFRelease(Mutable);
  uint64_t v20 = 0;
  CFMutableArrayRef Mutable = 0;
  if (v13) {
    goto LABEL_19;
  }
LABEL_20:
  if (v16) {
    CFRelease(v16);
  }
  return Mutable;
}

void *AMFDRSealingManifestCreateSealedData(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  CFTypeRef v21 = 0;
  CFTypeRef v22 = 0;
  CFTypeRef v19 = 0;
  CFTypeRef v20 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  if (!a1
    || !AMFDRSealingMapPopulateSealingManifest(a1, 0, (uint64_t)&v24)
    || !_AMFDRSealingManifestTrustEvaluation(a1, (uint64_t)&v24)
    || !AMFDRSealingMapPopulateMinimalSealingManifest((CFDictionaryRef *)a1, 0, (uint64_t)&v24)
    || !AMFDRSealingManifestVerifyMinimalManifest((const __CFDictionary **)a1, &v24)
    || !_AMFDRSealingManifestCopyDataClassesAndInstances(a1, 0, 0, 0, &v23, &v22, &v21, &v20, (uint64_t *)&v19, (uint64_t *)&v18, (uint64_t *)&v17, &cf, &v24))
  {
    AMSupportLogInternal();
    if (!AMFDRSealingMapPopulateSealingManifest(a2, 0, (uint64_t)a3))
    {
      uint64_t v7 = 0;
      CFStringRef v14 = @"AMFDRSealingMapPopulateSealingManifest failed on amfdrRemote";
      goto LABEL_36;
    }
    if (!_AMFDRSealingManifestCopyDataClassesAndInstances(a2, 0, 0, 0, &v23, &v22, &v21, &v20, (uint64_t *)&v19, (uint64_t *)&v18, (uint64_t *)&v17, &cf, a3))
    {
      uint64_t v7 = 0;
      CFStringRef v14 = @"_AMFDRSealingManifestCopyDataClassesAndInstances failed";
      goto LABEL_36;
    }
  }
  AMFDRSealedDataCreate();
  uint64_t v7 = (void *)v6;
  if (!v6)
  {
    CFStringRef v14 = @"Failed to create sealedData.";
    goto LABEL_36;
  }
  if (AMFDRSealedDataPopulatedFromManifest(v6, 1, (uint64_t)a3))
  {
    CFTypeRef v8 = cf;
    if (!cf)
    {
LABEL_28:
      if (AMFDRSealedDataSetMinimalManifestClassInstance(v7, v19, v18, v17, (uint64_t)a3)) {
        goto LABEL_29;
      }
      CFStringRef v14 = @"AMFDRSealedDataSetMinimalManifestClassInstance failed";
LABEL_36:
      AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingManifestCreateSealedData", v14, v15);
      goto LABEL_29;
    }
    if (a1)
    {
      if (*(void *)(a1 + 120))
      {
        CFRelease(*(CFTypeRef *)(a1 + 120));
        CFTypeRef v8 = cf;
        *(void *)(a1 + 120) = cf;
        if (!v8) {
          goto LABEL_19;
        }
      }
      else
      {
        *(void *)(a1 + 120) = cf;
      }
      CFRetain(v8);
    }
LABEL_19:
    if (a2)
    {
      char v9 = *(const void **)(a2 + 120);
      if (v9) {
        CFRelease(v9);
      }
      CFTypeRef v10 = cf;
      *(void *)(a2 + 120) = cf;
      if (v10) {
        CFRetain(v10);
      }
    }
    CFStringRef v11 = (const void *)v7[16];
    if (v11) {
      CFRelease(v11);
    }
    CFTypeRef v12 = cf;
    v7[16] = cf;
    if (v12) {
      CFRetain(v12);
    }
    goto LABEL_28;
  }
LABEL_29:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v7;
}

uint64_t AMFDRSealingMapGetLocalStoreMaxSizeInternal(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = 0;
  if (a1 && (*(unsigned char *)(*(void *)(a1 + 136) + 8) & 8) != 0)
  {
    uint64_t v19 = 0;
    goto LABEL_20;
  }
  uint64_t v3 = copyProductType(a1);
  CFAllocatorRef v4 = (const void *)v3;
  if (!v3)
  {
    CFStringRef v21 = @"Failed to query product type";
    goto LABEL_26;
  }
  CFDictionaryRef FDRSealingMapFromCache = (const __CFDictionary *)_getFDRSealingMapFromCache(v3);
  if (!FDRSealingMapFromCache) {
    goto LABEL_21;
  }
  CFDictionaryRef v6 = FDRSealingMapFromCache;
  CFTypeID v7 = CFGetTypeID(FDRSealingMapFromCache);
  if (v7 != CFDictionaryGetTypeID()) {
    goto LABEL_21;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, @"StoreMaxSize");
  if (Value && (CFDictionaryRef v9 = Value, v10 = CFGetTypeID(Value), v10 == CFDictionaryGetTypeID()))
  {
    CFStringRef v11 = CFDictionaryGetValue(v9, v4);
    if (v11) {
      goto LABEL_16;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  CFDictionaryRef v12 = (const __CFDictionary *)_getFDRSealingMapFromCache(@"iRefDefault");
  if (!v12 || (CFDictionaryRef v13 = v12, v14 = CFGetTypeID(v12), v14 != CFDictionaryGetTypeID()))
  {
LABEL_21:
    CFStringRef v21 = @"Failed to load sealing map";
LABEL_26:
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapGetLocalStoreMaxSizeInternal", v21, v22);
    goto LABEL_27;
  }
  CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(v13, @"StoreMaxSize");
  if (!v15 || (v16 = v15, CFTypeID v17 = CFGetTypeID(v15), v17 != CFDictionaryGetTypeID()))
  {
    CFStringRef v21 = @"Failed to find store max size map";
    goto LABEL_26;
  }
  CFStringRef v11 = CFDictionaryGetValue(v16, @"iRefDefault");
  if (!v11)
  {
LABEL_22:
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapGetLocalStoreMaxSizeInternal", @"Failed to find store max size for '%@'", (char)v4);
LABEL_27:
    uint64_t v19 = 0;
    goto LABEL_20;
  }
LABEL_16:
  CFTypeID v18 = CFGetTypeID(v11);
  if (v18 != CFNumberGetTypeID()) {
    goto LABEL_22;
  }
  if (!CFNumberGetValue((CFNumberRef)v11, kCFNumberLongType, &valuePtr))
  {
    CFStringRef v21 = @"Failed to decode maxSizeNumber";
    goto LABEL_26;
  }
  uint64_t v19 = valuePtr;
LABEL_20:
  AMSupportSafeRelease();
  return v19;
}

uint64_t _getFDRSealingMapFromCache(uint64_t a1)
{
  uint64_t v5 = 0;
  CFDictionaryRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  uint64_t v1 = gSealingMap;
  if (!gSealingMap)
  {
    uint64_t v1 = fileSystemSealingMap;
    if (!fileSystemSealingMap)
    {
      if (a1)
      {
        if (sealingMapCacheQueue_onceToken != -1)
        {
          uint64_t v3 = a1;
          dispatch_once(&sealingMapCacheQueue_onceToken, &__block_literal_global_1232);
          a1 = v3;
        }
        v4[0] = MEMORY[0x263EF8330];
        v4[1] = 0x40000000;
        unint64_t v4[2] = ___getFDRSealingMapFromCache_block_invoke;
        v4[3] = &unk_2642D1510;
        v4[4] = &v5;
        v4[5] = a1;
        dispatch_sync((dispatch_queue_t)sealingMapCacheQueue_sealingMapCacheQueue, v4);
        uint64_t v1 = v6[3];
      }
      else
      {
        uint64_t v1 = AMFDRGetSealingMap();
      }
    }
  }
  _Block_object_dispose(&v5, 8);
  return v1;
}

uint64_t AMFDRSealingMapGetLocalStoreMaxSize(uint64_t a1)
{
  return AMFDRSealingMapGetLocalStoreMaxSizeInternal(0, a1);
}

uint64_t AMFDRSealingMapCheckSubCCIntegrity(__CFString *a1, const __CFString *a2, const __CFString *cf, uint64_t a4)
{
  CFDictionaryRef v12 = 0;
  if (!a2)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCheckSubCCIntegrity", @"dataClass is NULL", v11);
    return 0;
  }
  CFStringRef v5 = cf;
  if (cf)
  {
    CFRetain(cf);
    goto LABEL_5;
  }
  CFStringRef v5 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a2, a4, 0, 0);
  if (v5)
  {
LABEL_5:
    if (AMFDRSealingMapCopySubCCDataClasses(a1, @"RequiredToSeal", (CFTypeRef *)&v12, a4))
    {
      if (_AMFDRSealingMapCheckSubCCIntegrityInternal(a1, a2, v5, v12, a4))
      {
        uint64_t v8 = 1;
LABEL_8:
        CFRelease(v5);
        goto LABEL_9;
      }
      char v11 = (char)a2;
      CFStringRef format = @"Cannot verify subCC integrity for %@-%@";
    }
    else
    {
      CFStringRef format = @"Failed to copy subcc list";
    }
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCheckSubCCIntegrity", format, v11);
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCheckSubCCIntegrity", @"cannot copy data instance for %@", (char)a2);
  uint64_t v8 = 0;
LABEL_9:
  if (v12) {
    CFRelease(v12);
  }
  return v8;
}

uint64_t _AMFDRSealingMapCheckSubCCIntegrityInternal(__CFString *a1, const __CFString *a2, const __CFString *a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a2)
  {
    CFStringRef v29 = @"dataClass is NULL";
LABEL_30:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCheckSubCCIntegrityInternal", v29, v30);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v29 = @"dataInstance is NULL";
    goto LABEL_30;
  }
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey((const __CFAllocator *)*MEMORY[0x263EFFB08], (uint64_t)a2, (uint64_t)a3);
  if (!FullKey)
  {
    CFStringRef v29 = @"dataClassInstance is NULL";
    goto LABEL_30;
  }
  char v11 = (__CFString *)FullKey;
  CFStringRef PermissionsString = AMFDRDataCreatePermissionsString(a1, 0, a2, a3);
  if (PermissionsString)
  {
    AMFDRSetOption((uint64_t)a1, @"Permissions", PermissionsString);
    CFDataRef v13 = AMFDRDataCopy((uint64_t)a1, a2, a3, a5);
    if (v13)
    {
      CFDataRef v14 = v13;
      CFDictionaryRef v15 = (CFArrayRef *)AMFDRDataDictCreateFromData((uint64_t)a1, v13, 0, 0);
      if (v15)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a4, v11);
        if (!Value)
        {
          AMSupportLogInternal();
          CFMutableArrayRef Mutable = 0;
          goto LABEL_19;
        }
        CFArrayRef v17 = Value;
        CFTypeID v18 = CFGetTypeID(Value);
        if (v18 == CFArrayGetTypeID())
        {
          CFAllocatorRef v19 = CFGetAllocator(a1);
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x263EFFF70]);
          if (Mutable)
          {
            uint64_t v31 = a5;
            if (CFArrayGetCount(v17) < 1) {
              goto LABEL_17;
            }
            char v21 = 0;
            CFIndex v22 = 0;
            do
            {
              CFArrayRef v23 = v15[4];
              if (!v23
                || (CFIndex Count = CFArrayGetCount(v15[4]),
                    CFRange v25 = CFArrayGetValueAtIndex(v17, v22),
                    v32.location = 0,
                    v32.uint64_t length = Count,
                    !CFArrayContainsValue(v23, v32, v25)))
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v17, v22);
                CFArrayAppendValue(Mutable, ValueAtIndex);
                char v21 = 1;
              }
              ++v22;
            }
            while (v22 < CFArrayGetCount(v17));
            if ((v21 & 1) == 0)
            {
LABEL_17:
              AMSupportLogInternal();
LABEL_19:
              uint64_t v27 = 1;
              goto LABEL_20;
            }
            AMFDRErrorPushInternal(v31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCheckSubCCIntegrityInternal", @"Missing SubCC for %@: required subCC: %@, existing subCC: %@, missing subCC: %@", (char)v11);
          }
          else
          {
            AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCheckSubCCIntegrityInternal", @"Could not create missingSubCCArray", v30);
          }
          uint64_t v27 = 0;
LABEL_20:
          CFRelease(v14);
          CFRelease(v11);
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (!v15) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCheckSubCCIntegrityInternal", @"unexpected subcclist array type", v30);
      }
      else
      {
        AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCheckSubCCIntegrityInternal", @"decoded of %@ is NULL", (char)a2);
      }
      uint64_t v27 = 0;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_20;
    }
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCheckSubCCIntegrityInternal", @"valueData is NULL", v30);
  }
  else
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCheckSubCCIntegrityInternal", @"permStr is NULL", v30);
  }
  uint64_t v27 = 0;
  CFDictionaryRef v15 = (CFArrayRef *)v11;
LABEL_23:
  CFRelease(v15);
LABEL_24:
  if (PermissionsString) {
    CFRelease(PermissionsString);
  }
  return v27;
}

uint64_t AMFDRSealingMapCheckSubCCIntegrityForClass(__CFString *a1, const __CFString *a2, uint64_t a3)
{
  return AMFDRSealingMapCheckSubCCIntegrity(a1, a2, 0, a3);
}

uint64_t AMFDRSealingMapCheckMultiSubCCIntegrityForClass(__CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  CFArrayRef v6 = (const __CFArray *)AMFDRSealingMapCopyMultiInstanceForClass(a2, a3);
  if (!v6)
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCheckMultiSubCCIntegrityForClass", @"Could not copy data instance for %@", (char)a2);
    return 0;
  }
  CFArrayRef v7 = v6;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 == CFArrayGetTypeID() && CFArrayGetCount(v7) > 0)
  {
    if (AMFDRSealingMapCopySubCCDataClasses(a1, @"RequiredToSeal", &cf, a3))
    {
      if (CFArrayGetCount(v7) >= 1)
      {
        CFIndex v9 = 0;
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v9);
          AMSupportLogInternal();
          uint64_t v11 = _AMFDRSealingMapCheckSubCCIntegrityInternal(a1, a2, ValueAtIndex, (const __CFDictionary *)cf, a3);
          if ((v11 & 1) == 0) {
            AMSupportLogInternal();
          }
          ++v9;
        }
        while (v9 < CFArrayGetCount(v7));
        goto LABEL_15;
      }
    }
    else
    {
      AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCheckMultiSubCCIntegrityForClass", @"Failed to copy subcc list", v13);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCheckMultiSubCCIntegrityForClass", @"Could not copy data instance array for %@, array count is zero", (char)a2);
  }
  uint64_t v11 = 0;
LABEL_15:
  CFRelease(v7);
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule(const __CFDictionary *cf, const __CFString *a2, const __CFString *a3, CFTypeRef *a4)
{
  CFTypeRef v26 = 0;
  CFTypeRef v27 = 0;
  CFTypeRef cfa = 0;
  CFTypeRef v25 = 0;
  if (cf && (CFTypeID v8 = CFGetTypeID(cf), v8 == CFDictionaryGetTypeID()))
  {
    if (a2 && (CFTypeID v9 = CFGetTypeID(a2), v9 == CFStringGetTypeID()))
    {
      if (a3 && (CFTypeID v10 = CFGetTypeID(a3), v10 != CFStringGetTypeID()))
      {
        AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", @"primaryDataInstance has wrong type %@", (char)a3);
      }
      else
      {
        AMSupportLogInternal();
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFDictionaryRef v12 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Remote", cf);
        if (v12)
        {
          char v13 = v12;
          if (AMFDRDataApTicketPopulate((uint64_t)v12))
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
            CFMutableDictionaryRef v15 = Mutable;
            if (!Mutable || (CFTypeID v16 = CFGetTypeID(Mutable), v16 != CFDictionaryGetTypeID()))
            {
              CFStringRef v21 = @"queryCache allocation failed";
LABEL_35:
              AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", v21, v23);
              goto LABEL_36;
            }
            if (_AMFDRSealingMapCopyAsidMetadataParameters(a2, a3, v15, &v27, &v26, &v25, &cfa, a4))
            {
              CFMutableStringRef v17 = CFStringCreateMutable(v11, 0);
              if (v17)
              {
                CFTypeID v18 = v17;
                AMFDRSetOption((uint64_t)v13, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
                if (AMFDRDataAppendPermissionUpdateAsidMetadata((const __CFArray *)v27, (const __CFArray *)v26, (uint64_t)v13, v18, (uint64_t)a4))
                {
                  if (AMFDRDataUpdateAsidMetadata(v27, v26, v25, cfa, (uint64_t)v13, v18, (uint64_t)a4))
                  {
                    uint64_t v19 = 1;
LABEL_16:
                    CFRelease(v13);
                    CFRelease(v18);
                    goto LABEL_17;
                  }
                  CFStringRef v22 = @"AMFDRDataUpdateAsidMetadata failed";
                }
                else
                {
                  CFStringRef v22 = @"AMFDRDataAppendPermissionUpdateAsidMetadata failed";
                }
                AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", v22, v23);
                uint64_t v19 = 0;
                goto LABEL_16;
              }
              CFStringRef v21 = @"updateAsidMetadataPermissions allocation failed";
              goto LABEL_35;
            }
            AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", @"_AMFDRSealingMapCopyAsidMetadataParameters failed", v23);
          }
          else
          {
            AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", @"Unable to populate apTicket for amfdrRemote", v23);
            CFMutableDictionaryRef v15 = 0;
          }
LABEL_36:
          CFRelease(v13);
          uint64_t v19 = 0;
          goto LABEL_17;
        }
        AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", @"Unable to create amfdrRemote", v23);
      }
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", @"primaryDataClass has wrong type %@", (char)a2);
    }
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapUpdateAsidMetadataWithPrimaryModule", @"optionsDict has wrong type %@", (char)cf);
  }
  uint64_t v19 = 0;
  CFMutableDictionaryRef v15 = 0;
LABEL_17:
  if (v27)
  {
    CFRelease(v27);
    CFTypeRef v27 = 0;
  }
  if (v26)
  {
    CFRelease(v26);
    CFTypeRef v26 = 0;
  }
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (v25)
  {
    CFRelease(v25);
    CFTypeRef v25 = 0;
  }
  if (v15) {
    CFRelease(v15);
  }
  return v19;
}

uint64_t _AMFDRSealingMapCopyAsidMetadataParameters(const __CFString *a1, const __CFString *a2, const void *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6, CFTypeRef *a7, CFTypeRef *a8)
{
  CFTypeID v16 = AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Local", 0);
  if (!v16)
  {
    AMFDRErrorPushInternal((uint64_t)a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataParameters", @"Unable to create amfdrLocal", v34);
    return 0;
  }
  CFMutableStringRef v17 = v16;
  if ((AMFDRDataApTicketPopulate((uint64_t)v16) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataParameters", @"Unable to populate apTicket for amfdrLocal", v34);
    uint64_t v31 = v17;
    goto LABEL_20;
  }
  CFTypeID v18 = (void *)v17[17];
  if (*v18 < 0x21uLL || (uint64_t v19 = (uint64_t (*)(void *, void))v18[4]) == 0)
  {
    CFStringRef v21 = 0;
    goto LABEL_18;
  }
  CFArrayRef v35 = a6;
  CFIndex v36 = a7;
  CFTypeRef v20 = (const void *)v19(v17, v17[18]);
  CFStringRef v21 = v20;
  if (!v20 || (CFTypeID v22 = CFGetTypeID(v20), v22 != CFStringGetTypeID()))
  {
LABEL_18:
    AMFDRErrorPushInternal((uint64_t)a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataParameters", @"currentDevice has wrong type '%@'", (char)v21);
    CFRelease(v17);
    if (!v21) {
      return 0;
    }
    goto LABEL_19;
  }
  RepairConfigurationCFArrayRef Entries = _AMFDRSealingMapGetRepairConfigurationEntries(v21);
  if (!RepairConfigurationEntries
    || (uint64_t v24 = RepairConfigurationEntries, v25 = CFGetTypeID(RepairConfigurationEntries), v25 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataParameters", @"_AMFDRSealingMapGetRepairConfigurationEntries failed", v34);
    CFRelease(v17);
LABEL_19:
    uint64_t v31 = v21;
LABEL_20:
    CFRelease(v31);
    return 0;
  }
  RepairConfigurationAsidMetadataInternalBlob = AMFDRSealingMapCreateRepairConfigurationAsidMetadataInternalBlob(a1, a2, v24, 0, a3, a8);
  CFTypeRef RepairConfigurationAsidMetadata = AMFDRDataCreateRepairConfigurationAsidMetadata(RepairConfigurationAsidMetadataInternalBlob, 0, 0, (uint64_t)a8);
  if (RepairConfigurationAsidMetadata)
  {
    uint64_t v28 = RepairConfigurationAsidMetadata;
    CFTypeID v29 = CFGetTypeID(RepairConfigurationAsidMetadata);
    if (v29 == CFDictionaryGetTypeID())
    {
      AMSupportLogInternal();
      if (CFDictionaryGetCount((CFDictionaryRef)v28) < 1)
      {
        CFStringRef format = @"incomplete asidMetadata";
      }
      else
      {
        if (AMFDRDataCopyAsidMetadataParameters(v28, a4, a5, v35, v36, (uint64_t)a8))
        {
          uint64_t v30 = 1;
LABEL_14:
          CFRelease(v28);
          goto LABEL_15;
        }
        CFStringRef format = @"AMFDRDataCopyAsidMetadataParameters failed";
      }
    }
    else
    {
      CFStringRef format = @"AMFDRDataCreateRepairConfigurationAsidMetadata failed";
    }
    AMFDRErrorPushInternal((uint64_t)a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataParameters", format, v34);
    uint64_t v30 = 0;
    goto LABEL_14;
  }
  AMFDRErrorPushInternal((uint64_t)a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataParameters", @"AMFDRDataCreateRepairConfigurationAsidMetadata failed", v34);
  uint64_t v30 = 0;
LABEL_15:
  CFRelease(v17);
  CFRelease(v21);
  if (RepairConfigurationAsidMetadataInternalBlob) {
    CFRelease(RepairConfigurationAsidMetadataInternalBlob);
  }
  return v30;
}

uint64_t AMFDRSealingMapCopyAsidMetadataDataClassesAndInstancesWithPrimaryModule(const __CFString *cf, const __CFString *a2, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 != CFStringGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyAsidMetadataDataClassesAndInstancesWithPrimaryModule", @"primaryDataClass has wrong type %@", (char)cf);
    return 0;
  }
  if (a2)
  {
    CFTypeID v11 = CFGetTypeID(a2);
    if (v11 != CFStringGetTypeID())
    {
      char v18 = (char)a2;
      CFStringRef v17 = @"primaryDataInstance has wrong type %@";
      goto LABEL_21;
    }
  }
  AMSupportLogInternal();
  if (!a3)
  {
    CFStringRef v17 = @"outDataClasses is NULL";
LABEL_21:
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyAsidMetadataDataClassesAndInstancesWithPrimaryModule", v17, v18);
    return 0;
  }
  if (!a4)
  {
    CFStringRef v17 = @"outDataInstances is NULL";
    goto LABEL_21;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyAsidMetadataDataClassesAndInstancesWithPrimaryModule", @"queryCache allocation failed", v18);
    return 0;
  }
  CFMutableDictionaryRef v13 = Mutable;
  CFTypeID v14 = CFGetTypeID(Mutable);
  if (v14 != CFDictionaryGetTypeID())
  {
    AMFDRErrorPushInternal((uint64_t)a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyAsidMetadataDataClassesAndInstancesWithPrimaryModule", @"queryCache allocation failed", v18);
LABEL_19:
    uint64_t v15 = 0;
    goto LABEL_11;
  }
  if ((_AMFDRSealingMapCopyAsidMetadataParameters(cf, a2, v13, a3, a4, 0, 0, a5) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyAsidMetadataDataClassesAndInstancesWithPrimaryModule", @"AMFDRSealingMapCopyAsidMetadataData failed", v18);
    goto LABEL_19;
  }
  uint64_t v15 = 1;
LABEL_11:
  CFRelease(v13);
  return v15;
}

uint64_t AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule(CFTypeRef cf, const __CFString *a2, const __CFString *a3, CFTypeRef *a4)
{
  char v43 = 1;
  CFTypeRef v41 = 0;
  CFTypeRef cfa = 0;
  if (!cf || (CFTypeID v8 = CFGetTypeID(cf), v8 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"optionsDict has wrong type %@", (char)cf);
LABEL_64:
    uint64_t v27 = 0;
    CFTypeRef v26 = 0;
    CFMutableDictionaryRef v13 = 0;
    goto LABEL_65;
  }
  if (!a2 || (CFTypeID v9 = CFGetTypeID(a2), v9 != CFStringGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"primaryDataClass has wrong type %@", (char)a2);
    goto LABEL_64;
  }
  if (a3)
  {
    CFTypeID v10 = CFGetTypeID(a3);
    if (v10 != CFStringGetTypeID())
    {
      AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"primaryDataInstance has wrong type %@", (char)a3);
      goto LABEL_64;
    }
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  CFMutableDictionaryRef v13 = Mutable;
  if (!Mutable || (CFTypeID v14 = CFGetTypeID(Mutable), v14 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"queryCache allocation failed", v39);
LABEL_58:
    uint64_t v27 = 0;
    CFTypeRef v26 = 0;
LABEL_65:
    char v18 = 0;
    goto LABEL_66;
  }
  if ((_AMFDRSealingMapCopyAsidMetadataParameters(a2, a3, v13, &cfa, &v41, 0, 0, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"_AMFDRSealingMapCopyAsidMetadataParameters failed", v39);
    goto LABEL_58;
  }
  if (!cfa)
  {
    char v31 = 0;
LABEL_53:
    char v40 = v31;
    CFStringRef v32 = @"onDeviceDataClasses has wrong type %@";
LABEL_57:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", v32, v40);
    goto LABEL_58;
  }
  CFTypeID v15 = CFGetTypeID(cfa);
  if (v15 != CFArrayGetTypeID())
  {
    char v31 = (char)cfa;
    goto LABEL_53;
  }
  if (!v41)
  {
    char v33 = 0;
LABEL_56:
    char v40 = v33;
    CFStringRef v32 = @"onDeviceDataInstances has wrong type %@";
    goto LABEL_57;
  }
  CFTypeID v16 = CFGetTypeID(v41);
  if (v16 != CFArrayGetTypeID())
  {
    char v33 = (char)v41;
    goto LABEL_56;
  }
  CFStringRef v17 = (__CFString *)AMFDRCreateTypeWithOptions(v11, @"Remote", (const __CFDictionary *)cf);
  char v18 = v17;
  if (!v17)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"Unable to create amfdrRemote", v39);
    uint64_t v27 = 0;
    CFTypeRef v26 = 0;
LABEL_66:
    CFMutableStringRef v19 = 0;
    goto LABEL_29;
  }
  AMFDRSetOption((uint64_t)v17, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
  CFMutableStringRef v19 = CFStringCreateMutable(v11, 0);
  if (v19)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)cfa);
    if (Count >= 1)
    {
      CFIndex v21 = Count;
      CFIndex v22 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cfa, v22);
        if (!ValueAtIndex)
        {
          CFStringRef v38 = @"dataClassStr is NULL";
          *(_OWORD *)CFIndex v36 = 0u;
          long long v37 = 0u;
          *(_OWORD *)CFTypeRef value = 0u;
          uint64_t v29 = (uint64_t)a4;
          CFIndex v30 = 1;
          goto LABEL_45;
        }
        CFStringRef v24 = ValueAtIndex;
        CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v41, v22);
        if (!v25)
        {
          AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"dataInstanceStr is NULL", v39);
          goto LABEL_46;
        }
        if ((AMFDRDataAppendPermissionsString(v18, 7u, v24, v25, v19) & 1) == 0) {
          break;
        }
        if (v21 == ++v22) {
          goto LABEL_22;
        }
      }
      CFStringRef v38 = @"AMFDRDataAppendPermissionsString failed";
      *(_OWORD *)CFIndex v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)CFTypeRef value = 0u;
      uint64_t v29 = (uint64_t)a4;
      CFIndex v30 = 10;
      goto LABEL_45;
    }
LABEL_22:
    AMFDRSetOption((uint64_t)v18, @"Permissions", v19);
    CFTypeRef v26 = AMFDRDataMultiCopyAsidMetadata(v18, (uint64_t)cfa, (uint64_t)v41, a4);
    if (v26)
    {
      if (_AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule(a2, a3, v26, v13, &v43, a4))
      {
        if (a3)
        {
          if (!v43)
          {
            AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", @"Primary module '%@:%@' verification failed", (char)a2);
LABEL_69:
            uint64_t v27 = 0;
            goto LABEL_29;
          }
LABEL_28:
          uint64_t v27 = 1;
          goto LABEL_29;
        }
        if (v43) {
          goto LABEL_28;
        }
        char v39 = (char)a2;
        CFStringRef v34 = @"Primary module '%@' verification failed";
      }
      else
      {
        CFStringRef v34 = @"_AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule failed";
      }
    }
    else
    {
      CFStringRef v34 = @"AMFDRDataMultiCopyAsidMetadata failed";
    }
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", v34, v39);
    goto LABEL_69;
  }
  CFStringRef v38 = @"permissions is NULL";
  *(_OWORD *)CFIndex v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)CFTypeRef value = 0u;
  uint64_t v29 = (uint64_t)a4;
  CFIndex v30 = 2;
LABEL_45:
  AMFDRErrorPushInternal(v29, v30, 0, 0, 0, 0, 0, 0, value[0], value[1], v36[0], v36[1], (void *)v37, *((void **)&v37 + 1), (uint64_t)"AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", v38, v39);
LABEL_46:
  uint64_t v27 = 0;
  CFTypeRef v26 = 0;
LABEL_29:
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (v41)
  {
    CFRelease(v41);
    CFTypeRef v41 = 0;
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v27;
}

uint64_t _AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule(const __CFString *cf, const __CFString *a2, const void *a3, const void *a4, unsigned char *a5, CFTypeRef *a6)
{
  CFTypeRef v43 = 0;
  CFArrayRef v44 = 0;
  CFTypeRef v42 = 0;
  if (!cf || (CFTypeID v11 = CFGetTypeID(cf), v11 != CFStringGetTypeID()))
  {
    char v38 = (char)cf;
    CFStringRef v35 = @"primaryDataClass has wrong type %@";
LABEL_48:
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", v35, v38);
    goto LABEL_45;
  }
  if (a2)
  {
    CFTypeID v12 = CFGetTypeID(a2);
    if (v12 != CFStringGetTypeID())
    {
      char v38 = (char)a2;
      CFStringRef v35 = @"primaryDataInstance has wrong type %@";
      goto LABEL_48;
    }
  }
  if ((_AMFDRSealingMapCopyAsidMetadataParameters(cf, a2, a4, (CFTypeRef *)&v44, &v43, &v42, 0, a6) & 1) == 0)
  {
    CFStringRef format = @"_AMFDRSealingMapCopyAsidMetadataParameters failed";
    goto LABEL_44;
  }
  CFArrayRef v13 = v44;
  if (!v44 || (CFTypeRef v14 = v42, v15 = v43, v16 = CFGetTypeID(v44), v16 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadata", @"onDeviceDataClasses has wrong type %@", (char)v13);
LABEL_43:
    CFStringRef format = @"_AMFDRSealingMapVerifyAsidMetadata failed";
LABEL_44:
    AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule", format, v37);
LABEL_45:
    uint64_t v33 = 0;
    goto LABEL_30;
  }
  if (!v15 || (CFTypeID v17 = CFGetTypeID(v15), v17 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadata", @"onDeviceDataInstances has wrong type %@", (char)v15);
    goto LABEL_43;
  }
  if (!v14 || (CFTypeID v18 = CFGetTypeID(v14), v18 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadata", @"onDeviceMetadataArray has wrong type %@", (char)v14);
    goto LABEL_43;
  }
  if (!a3 || (CFTypeID v19 = CFGetTypeID(a3), v19 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadata", @"onServerAsidMetaDataDict has wrong type %@", (char)a3);
    goto LABEL_43;
  }
  CFIndex Count = CFArrayGetCount(v13);
  if (Count >= 1)
  {
    CFIndex v21 = Count;
    CFArrayRef theArray = (const __CFArray *)v14;
    uint64_t v39 = (uint64_t)a6;
    CFIndex v22 = 0;
    CFStringRef v23 = 0;
    CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v13, v22);
      CFTypeRef v26 = CFArrayGetValueAtIndex((CFArrayRef)v15, v22);
      CFDictionaryRef v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v22);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v27, @"asid");
      if (v23) {
        CFRelease(v23);
      }
      CFStringRef v29 = CFStringCreateWithFormat(v24, 0, @"%@-%@", ValueAtIndex, v26);
      if (!v29) {
        break;
      }
      CFStringRef v23 = v29;
      CFStringRef v30 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a3, v29);
      if (v30 && (v31 = v30, CFTypeID v32 = CFGetTypeID(v30), v32 == CFStringGetTypeID()))
      {
        if (CFStringCompare(Value, v31, 0))
        {
          *a5 = 0;
          AMFDRErrorPushInternal(v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadata", @"Verification failed: '%@' has asid metadata '%@' on device but the one on server is '%@' ", (char)v23);
        }
        else
        {
          AMSupportLogInternal();
        }
      }
      else
      {
        *a5 = 0;
        AMFDRErrorPushInternal(v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadata", @"Verification failed: '%@' has asid metadata '%@' on device but corresponding fdr data on server is not found", (char)v23);
      }
      if (v21 == ++v22)
      {
        CFRelease(v23);
        goto LABEL_27;
      }
    }
    a6 = (CFTypeRef *)v39;
    AMFDRErrorPushInternal(v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapVerifyAsidMetadata", @"onDeviceDataClassInstance allocation failed", v37);
    goto LABEL_43;
  }
LABEL_27:
  if (*a5) {
    AMSupportLogInternal();
  }
  uint64_t v33 = 1;
LABEL_30:
  if (v44)
  {
    CFRelease(v44);
    CFArrayRef v44 = 0;
  }
  if (v43)
  {
    CFRelease(v43);
    CFTypeRef v43 = 0;
  }
  if (v42) {
    CFRelease(v42);
  }
  return v33;
}

uint64_t AMFDRSealingMapVerifyAsidMetadataForDevice(const __CFDictionary *cf, CFTypeRef *a2)
{
  CFDictionaryRef v3 = cf;
  uint64_t v86 = *MEMORY[0x263EF8340];
  CFTypeRef v82 = 0;
  CFDataRef theData = 0;
  CFTypeRef cfa = 0;
  long long v84 = 0u;
  long long v85 = 0u;
  *(_OWORD *)bytes = 0u;
  if (!cf || (CFTypeID v4 = CFGetTypeID(cf), v4 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"optionsDict has wrong type %@", (char)v3);
    char v60 = 0;
    CFTypeRef v56 = 0;
    CFDictionaryRef v7 = 0;
LABEL_110:
    CFAllocatorRef v45 = 0;
    CFMutableStringRef v49 = 0;
    CFStringRef v46 = 0;
    goto LABEL_80;
  }
  CFDictionaryGetValue(v3, @"TrustObjectURL");
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  CFDictionaryRef v7 = Mutable;
  if (!Mutable || (CFTypeID v8 = CFGetTypeID(Mutable), v8 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"queryCache allocation failed", v69);
    char v60 = 0;
    CFTypeRef v56 = 0;
    goto LABEL_110;
  }
  CFTypeID v9 = AMFDRCreateTypeWithOptions(v5, @"Local", 0);
  if (!v9)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"Unable to create amfdrLocal", v69);
LABEL_113:
    CFArrayRef v73 = 0;
    CFArrayRef v41 = 0;
LABEL_114:
    CFStringRef format = @"_AMFDRSealingMapCopyAsidMetadataPrimaryModules failed";
LABEL_116:
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", format, v69);
LABEL_123:
    char v60 = 0;
    CFTypeRef v56 = 0;
    CFAllocatorRef v45 = 0;
LABEL_133:
    CFMutableStringRef v49 = 0;
    CFStringRef v46 = 0;
    goto LABEL_102;
  }
  CFTypeID v10 = v9;
  if ((AMFDRDataApTicketPopulate((uint64_t)v9) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"Unable to populate apTicket for amfdrLocal", v69);
    CFRelease(v10);
    goto LABEL_113;
  }
  CFTypeID v11 = (void *)v10[17];
  if (*v11 < 0x21uLL || (CFTypeID v12 = (uint64_t (*)(void *, void))v11[4]) == 0)
  {
    char v40 = 0;
LABEL_31:
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"currentDevice has wrong type '%@'", (char)v40);
    CFArrayRef v41 = 0;
    CFArrayRef v73 = 0;
    CFStringRef v28 = 0;
    CFMutableArrayRef v76 = 0;
    CFMutableArrayRef theArray = 0;
    BOOL v26 = 0;
    goto LABEL_35;
  }
  CFIndex v72 = v10;
  CFArrayRef v13 = (const void *)v12(v10, v10[18]);
  if (!v13)
  {
    char v40 = 0;
    goto LABEL_31;
  }
  CFTypeRef v14 = v13;
  CFTypeID v15 = CFGetTypeID(v13);
  if (v15 != CFStringGetTypeID())
  {
    CFTypeID v10 = v72;
    char v40 = v14;
    goto LABEL_31;
  }
  char v71 = v14;
  RepairConfigurationCFArrayRef Entries = (const __CFDictionary *)_AMFDRSealingMapGetRepairConfigurationEntries(v14);
  if (!RepairConfigurationEntries
    || (CFDictionaryRef v17 = RepairConfigurationEntries, v18 = CFGetTypeID(RepairConfigurationEntries), v18 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"repairConfiguration has wrong type '%@'", (char)v71);
LABEL_137:
    CFMutableArrayRef theArray = 0;
    CFStringRef v25 = v72;
    goto LABEL_138;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v17, @"RepairConfigurationAsidMetadata");
  CFArrayRef v20 = Value;
  if (!Value || (CFTypeID v21 = CFGetTypeID(Value), v21 != CFArrayGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"asidMetadataEntry has wrong type %@", (char)v20);
    goto LABEL_137;
  }
  CFIndex Count = CFArrayGetCount(v20);
  CFMutableArrayRef v23 = CFArrayCreateMutable(v5, 0, MEMORY[0x263EFFF70]);
  if (!v23)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"primaryDataClasses create failed", v69);
    goto LABEL_137;
  }
  CFMutableArrayRef theArray = v23;
  CFMutableArrayRef v24 = CFArrayCreateMutable(v5, 0, MEMORY[0x263EFFF70]);
  CFStringRef v25 = v72;
  if (v24)
  {
    CFAllocatorRef v74 = v5;
    CFMutableArrayRef v76 = v24;
    CFDictionaryRef v70 = v3;
    if (Count < 1)
    {
      CFStringRef v28 = 0;
      BOOL v26 = 1;
LABEL_33:
      CFArrayRef v41 = (const __CFArray *)CFRetain(theArray);
      CFArrayRef v73 = (const __CFArray *)CFRetain(v76);
    }
    else
    {
      BOOL v26 = 0;
      CFIndex v27 = 0;
      CFStringRef v28 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v27);
        CFDictionaryRef v30 = ValueAtIndex;
        if (!ValueAtIndex || (CFTypeID v31 = CFGetTypeID(ValueAtIndex), v31 != CFDictionaryGetTypeID()))
        {
          AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"primaryDataDict has wrong type %@", (char)v30);
          goto LABEL_107;
        }
        CFDictionaryRef v32 = v7;
        uint64_t v33 = CFDictionaryGetValue(v30, @"Tag");
        CFStringRef v34 = v33;
        if (!v33 || (CFStringRef v35 = a2, v36 = CFGetTypeID(v33), v37 = v36 == CFStringGetTypeID(), a2 = v35, !v37))
        {
          AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"primaryDataClass has wrong type %@", (char)v34);
          CFArrayRef v41 = 0;
          CFArrayRef v73 = 0;
          CFDictionaryRef v7 = v32;
          goto LABEL_34;
        }
        if (v28) {
          CFRelease(v28);
        }
        CFDictionaryRef v7 = v32;
        CFStringRef v38 = _copyIdentifierListForSealingMapEntry(v74, v30, v32, 0, 0, (uint64_t)a2);
        CFStringRef v28 = v38;
        if (!v38) {
          break;
        }
        CFTypeID v39 = CFGetTypeID(v38);
        if (v39 != CFStringGetTypeID()) {
          break;
        }
        CFArrayAppendValue(theArray, v34);
        CFArrayAppendValue(v76, v28);
        BOOL v26 = ++v27 >= Count;
        if (Count == v27) {
          goto LABEL_33;
        }
      }
      AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"failed to get instance of primary dataClass %@", (char)v34);
LABEL_107:
      CFArrayRef v41 = 0;
      CFArrayRef v73 = 0;
    }
LABEL_34:
    CFAllocatorRef v5 = v74;
    CFDictionaryRef v3 = v70;
    char v40 = v71;
    CFTypeID v10 = v72;
LABEL_35:
    CFRelease(v10);
    CFTypeRef v42 = v40;
    if (!v40) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyAsidMetadataPrimaryModules", @"primaryDataInstances create failed", v69);
LABEL_138:
  CFRelease(v25);
  CFArrayRef v41 = 0;
  CFArrayRef v73 = 0;
  BOOL v26 = 0;
  CFMutableArrayRef v76 = 0;
  CFStringRef v28 = 0;
  CFTypeRef v42 = v71;
LABEL_36:
  CFRelease(v42);
LABEL_37:
  if (v76) {
    CFRelease(v76);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (!v26) {
    goto LABEL_114;
  }
  if ((_AMFDRSealingMapCopyAsidMetadataParameters(0, 0, v7, &v82, &cfa, 0, 0, a2) & 1) == 0)
  {
    CFStringRef format = @"_AMFDRSealingMapCopyAsidMetadataParameters failed";
    goto LABEL_116;
  }
  if (!v82)
  {
    char v66 = 0;
LABEL_119:
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"onDeviceDataClasses has wrong type %@", v66);
    goto LABEL_123;
  }
  CFTypeID v43 = CFGetTypeID(v82);
  if (v43 != CFArrayGetTypeID())
  {
    char v66 = (char)v82;
    goto LABEL_119;
  }
  if (!cfa)
  {
    char v67 = 0;
LABEL_122:
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"onDeviceDataInstances has wrong type %@", v67);
    goto LABEL_123;
  }
  CFTypeID v44 = CFGetTypeID(cfa);
  if (v44 != CFArrayGetTypeID())
  {
    char v67 = (char)cfa;
    goto LABEL_122;
  }
  CFAllocatorRef v45 = (__CFString *)AMFDRCreateTypeWithOptions(v5, @"Remote", v3);
  if (!v45)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"Unable to create amfdrRemote", v69);
LABEL_132:
    char v60 = 0;
    CFTypeRef v56 = 0;
    goto LABEL_133;
  }
  if (!CFDictionaryContainsKey(v3, @"TrustObject"))
  {
    if (AMFDRDataCopyTrustObject((uint64_t)v45)) {
      CFStringRef v68 = @"trust object empty";
    }
    else {
      CFStringRef v68 = @"failed to fetch trust object";
    }
    goto LABEL_131;
  }
  if (CFDictionaryContainsKey(v3, @"TrustObjectDigest"))
  {
    CFStringRef v46 = 0;
  }
  else
  {
    CFDataRef theData = (CFDataRef)CFDictionaryGetValue((CFDictionaryRef)v45->data, @"TrustObject");
    CFRetain(theData);
    CFDataGetBytePtr(theData);
    CFDataGetLength(theData);
    if (AMSupportDigestSha256())
    {
      CFStringRef v68 = @"Failed to get digest from trust object";
LABEL_131:
      AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", v68, v69);
      goto LABEL_132;
    }
    CFAllocatorRef v47 = CFGetAllocator(v45);
    CFStringRef v46 = (const __CFString *)CFDataCreate(v47, bytes, 32);
    if (!v46)
    {
      AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"Failed to allocate trust object digest data", v69);
      char v60 = 0;
      CFTypeRef v56 = 0;
      CFMutableStringRef v49 = 0;
      goto LABEL_102;
    }
    AMFDRSetOption((uint64_t)v45, @"TrustObjectDigest", v46);
  }
  CFDictionaryRef EntryInternal = AMFDRSealingMapGetEntryInternal((uint64_t)v45, @"seal", 0, 0);
  if (!AMFDRSealingMapEntryHasAttributeInternal((int)EntryInternal, EntryInternal, @"DeprecateVersion1", 0))
  {
    AMFDRSetOption((uint64_t)v45, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
    AMSupportLogInternal();
  }
  CFMutableStringRef v49 = CFStringCreateMutable(v5, 0);
  if (!v49)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"permissions is NULL", v69);
LABEL_101:
    char v60 = 0;
    CFTypeRef v56 = 0;
    goto LABEL_102;
  }
  CFIndex v50 = CFArrayGetCount((CFArrayRef)v82);
  if (v50 >= 1)
  {
    CFIndex v51 = v50;
    CFIndex v52 = 0;
    while (1)
    {
      CFStringRef v53 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v82, v52);
      if (!v53)
      {
        AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"dataClassStr is NULL", v69);
        goto LABEL_101;
      }
      CFStringRef v54 = v53;
      CFStringRef v55 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cfa, v52);
      if (!v55)
      {
        AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"dataInstanceStr is NULL", v69);
        goto LABEL_101;
      }
      if ((AMFDRDataAppendPermissionsString(v45, 7u, v54, v55, v49) & 1) == 0) {
        break;
      }
      if (v51 == ++v52) {
        goto LABEL_67;
      }
    }
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"AMFDRDataAppendPermissionsString failed", v69);
    goto LABEL_101;
  }
LABEL_67:
  AMFDRSetOption((uint64_t)v45, @"Permissions", v49);
  CFTypeRef v56 = AMFDRDataMultiCopyAsidMetadata(v45, (uint64_t)v82, (uint64_t)cfa, a2);
  if (v56)
  {
    CFMutableArrayRef theArraya = (CFMutableArrayRef)v46;
    CFIndex v57 = CFArrayGetCount(v41);
    if (v57 < 1)
    {
      char v60 = 1;
      CFArrayRef v63 = v73;
    }
    else
    {
      CFIndex v58 = v57;
      CFIndex v75 = v45;
      CFIndex v59 = 0;
      char v60 = 1;
      while (1)
      {
        char v79 = 1;
        CFStringRef v61 = (const __CFString *)CFArrayGetValueAtIndex(v41, v59);
        CFStringRef v62 = (const __CFString *)CFArrayGetValueAtIndex(v73, v59);
        if (!_AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule(v61, v62, v56, v7, &v79, a2)) {
          break;
        }
        if (!v79)
        {
          AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"Primary module '%@:%@' verification failed", (char)v61);
          char v60 = 0;
        }
        if (v58 == ++v59) {
          goto LABEL_74;
        }
      }
      AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"_AMFDRSealingMapVerifyAsidMetadataWithPrimaryModule failed", v69);
      char v60 = 0;
LABEL_74:
      CFArrayRef v63 = v73;
      CFAllocatorRef v45 = v75;
    }
    CFStringRef v46 = (const __CFString *)theArraya;
    if (!v41) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapVerifyAsidMetadataForDevice", @"AMFDRDataMultiCopyAsidMetadata failed", v69);
  char v60 = 0;
LABEL_102:
  CFArrayRef v63 = v73;
  if (v41) {
LABEL_77:
  }
    CFRelease(v41);
LABEL_78:
  if (v63) {
    CFRelease(v63);
  }
LABEL_80:
  if (v82)
  {
    CFRelease(v82);
    CFTypeRef v82 = 0;
  }
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (theData) {
    CFRelease(theData);
  }
  return v60 & 1;
}

CFDataRef AMFDRSealingMapCreateLocalMultiDataBlobForClass(__CFString *a1, CFDictionaryRef theDict, int a3, void *a4)
{
  CFTypeRef v25 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  CFTypeID v10 = MutableCopy;
  if (!MutableCopy)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateLocalMultiDataBlobForClass", @"optionsFDR is NULL", v22);
    CFDataRef MultiDataAsMultiResponse = 0;
    goto LABEL_47;
  }
  CFTypeID v11 = (const void *)*MEMORY[0x263EFFB38];
  CFDictionaryAddValue(MutableCopy, @"VerifyData", (const void *)*MEMORY[0x263EFFB38]);
  CFDictionaryAddValue(v10, @"StripImg4", v11);
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateLocalMultiDataBlobForClass", @"dataClass is NULL", v22);
    goto LABEL_31;
  }
  if (a3) {
    CFStringRef v12 = (const __CFString *)AMFDRSealingMapCopyMultiInstanceForClass(a1, (uint64_t)a4);
  }
  else {
    CFStringRef v12 = (const __CFString *)AMFDRSealingManifestCopyMultiInstanceForClass(a1, theDict, a4);
  }
  CFStringRef v13 = v12;
  if (!v12)
  {
    AMSupportLogInternal();
LABEL_31:
    CFDataRef MultiDataAsMultiResponse = 0;
LABEL_46:
    CFRelease(v10);
    goto LABEL_47;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  CFDictionaryRef v24 = v10;
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateLocalMultiDataBlobForClass", @"dataClassInstanceArray is NULL", v22);
    CFTypeID v15 = 0;
LABEL_51:
    CFDataRef MultiDataAsMultiResponse = 0;
LABEL_40:
    CFRelease(v13);
    goto LABEL_41;
  }
  CFTypeID v15 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (!v15)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateLocalMultiDataBlobForClass", @"dataArray is NULL", v22);
    goto LABEL_51;
  }
  uint64_t v23 = (uint64_t)a4;
  if (CFArrayGetCount((CFArrayRef)v13) >= 1)
  {
    CFIndex v16 = 0;
    CFStringRef FullKey = 0;
    CFTypeID v18 = 0;
    while (1)
    {
      if (FullKey) {
        CFRelease(FullKey);
      }
      if (v18) {
        CFRelease(v18);
      }
      if (v25)
      {
        CFRelease(v25);
        CFTypeRef v25 = 0;
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v16);
      CFTypeID v18 = (const void *)AMFDRSealingMapCopyLocalData(a1, ValueAtIndex, v24, (uint64_t)&v25);
      if (v25) {
        AMSupportLogInternal();
      }
      if ((a3 & 1) == 0 && !v18)
      {
        AMFDRErrorPushInternal(v23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateLocalMultiDataBlobForClass", @"failed to create data for %@-%@", (char)a1);
        goto LABEL_51;
      }
      if (v18)
      {
        CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v8, (uint64_t)a1, (uint64_t)ValueAtIndex);
        if (!FullKey)
        {
          AMFDRErrorPushInternal(v23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateLocalMultiDataBlobForClass", @"failed to create currDataClassInstance string", v22);
          CFRelease(v13);
          CFDataRef MultiDataAsMultiResponse = 0;
          goto LABEL_38;
        }
        CFArrayAppendValue(Mutable, FullKey);
        CFArrayAppendValue(v15, v18);
      }
      else
      {
        AMSupportLogInternal();
        CFStringRef FullKey = 0;
      }
      if (++v16 >= CFArrayGetCount((CFArrayRef)v13)) {
        goto LABEL_33;
      }
    }
  }
  CFTypeID v18 = 0;
  CFStringRef FullKey = 0;
LABEL_33:
  if (CFArrayGetCount(v15) < 1)
  {
    AMSupportLogInternal();
    CFDataRef MultiDataAsMultiResponse = 0;
  }
  else
  {
    CFDataRef MultiDataAsMultiResponse = AMFDRDataCreateMultiDataAsMultiResponse(Mutable, v15, v23);
    if (!MultiDataAsMultiResponse) {
      AMFDRErrorPushInternal(v23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCreateLocalMultiDataBlobForClass", @"failed to create an encoded data blob for %@", (char)a1);
    }
  }
  CFRelease(v13);
  if (v18) {
LABEL_38:
  }
    CFRelease(v18);
  CFStringRef v13 = FullKey;
  if (FullKey) {
    goto LABEL_40;
  }
LABEL_41:
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFTypeID v10 = v24;
  if (v15) {
    CFRelease(v15);
  }
  if (v24) {
    goto LABEL_46;
  }
LABEL_47:
  if (v25) {
    CFRelease(v25);
  }
  return MultiDataAsMultiResponse;
}

uint64_t AMFDRSealingMapCopyLocalMultiCombinedDataBegin(uint64_t a1, uint64_t a2)
{
  return AMFDRSealingMapCopyLocalMultiCombinedDataBeginWithOptions(a1, 0, a2);
}

uint64_t AMFDRSealingMapCopyLocalMultiCombinedDataBeginWithOptions(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  CFMutableDictionaryRef v8 = MutableCopy;
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataBeginWithOptions", @"copyLocalMultiCombinedDataContext is NULL", v15);
LABEL_21:
    uint64_t v12 = 0;
    if (!v8) {
      return v12;
    }
    goto LABEL_17;
  }
  CFTypeID v9 = malloc_type_calloc(1uLL, 0x40uLL, 0x1060040D88E8A37uLL);
  *(void *)a1 = v9;
  if (!v9)
  {
    CFStringRef v14 = @"failed to allocate memory for AMFDRSealingMapCopyLocalMultiCombinedDataContext";
    goto LABEL_20;
  }
  **(void **)a1 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  if (!**(void **)a1) {
    goto LABEL_19;
  }
  *(void *)(*(void *)a1 + 8) = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  if (!*(void *)(*(void *)a1 + 8)) {
    goto LABEL_19;
  }
  *(void *)(*(void *)a1 + 16) = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  if (!*(void *)(*(void *)a1 + 16)) {
    goto LABEL_19;
  }
  *(void *)(*(void *)a1 + 24) = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  if (!*(void *)(*(void *)a1 + 24)) {
    goto LABEL_19;
  }
  *(void *)(*(void *)a1 + 32) = AMSupportSafeRetain();
  if (!*(void *)(*(void *)a1 + 32)) {
    goto LABEL_19;
  }
  *(void *)(*(void *)a1 + 56) = AMFDRCreateTypeWithOptions(v6, @"Local", theDict);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  if (!v10)
  {
    CFStringRef v14 = @"amfdrLocal is NULL";
    goto LABEL_20;
  }
  if (AMFDRDataApTicketPopulate(v10)) {
    AMSupportLogInternal();
  }
  int v11 = AMFDRAPTicketAllowsUnsealedData(*(void *)(*(void *)a1 + 56));
  *(unsigned char *)(*(void *)a1 + 40) = v11;
  if (v11)
  {
    *(void *)(*(void *)a1 + 48) = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
    if (!*(void *)(*(void *)a1 + 48))
    {
LABEL_19:
      CFStringRef v14 = @"failed to allocate memory";
LABEL_20:
      AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataBeginWithOptions", v14, v15);
      goto LABEL_21;
    }
  }
  uint64_t v12 = 1;
  if (v8) {
LABEL_17:
  }
    CFRelease(v8);
  return v12;
}

uint64_t AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClass(uint64_t a1, __CFString *a2, uint64_t a3)
{
  CFTypeRef v15 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClass", @"copyLocalMultiCombinedDataContext is NULL", v14);
    return 0;
  }
  if (!*(void *)(a1 + 24) || !*(void *)a1 || !*(void *)(a1 + 8) || !*(void *)(a1 + 16) || !*(void *)(a1 + 32))
  {
    CFStringRef v12 = @"copyLocalMultiCombinedDataContext is not properly initialized, AMFDRSealingMapCopyLocalMultiCombinedDataBegin should be used";
LABEL_19:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClass", v12, v14);
    goto LABEL_20;
  }
  if (!a2)
  {
    CFStringRef v12 = @"dataClass is NULL";
    goto LABEL_19;
  }
  CFStringRef v6 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a2, a3, 0, 0);
  if (v6)
  {
    CFStringRef v7 = v6;
    if (*(unsigned char *)(a1 + 40))
    {
      if ((_AMFDRSealingMapCopyLocalMultiCombinedDataCopyPayloadAndSaveManifest(a1, (uint64_t)a2, (uint64_t)v6, 0, &v15, a3) & 1) == 0)
      {
        char v14 = (char)a2;
        CFStringRef v13 = @"failed to copy data and save manifest for %@";
LABEL_26:
        AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClass", v13, v14);
        CFRelease(v7);
        goto LABEL_20;
      }
      CFMutableDictionaryRef v8 = (void *)CFRetain(v15);
    }
    else
    {
      CFMutableDictionaryRef v8 = (void *)AMFDRSealingMapCopyLocalData(a2, v6, *(const __CFDictionary **)(a1 + 32), a3);
    }
    CFTypeID v9 = v8;
    if (v8)
    {
      _AMFDRSealingMapCopyLocalMultiCombinedDataContextAddEntry((CFMutableArrayRef *)a1, a2, v7, &stru_26C899958, v8);
      CFRelease(v7);
      CFRelease(v9);
      uint64_t v10 = 1;
      goto LABEL_15;
    }
    CFStringRef v13 = @"copied localData is NULL";
    goto LABEL_26;
  }
  AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClass", @"copied dataInstance is NULL", v14);
LABEL_20:
  uint64_t v10 = 0;
LABEL_15:
  if (v15) {
    CFRelease(v15);
  }
  return v10;
}

uint64_t _AMFDRSealingMapCopyLocalMultiCombinedDataCopyPayloadAndSaveManifest(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFTypeRef *a5, uint64_t a6)
{
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  if (!a5)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalMultiCombinedDataCopyPayloadAndSaveManifest", @"outType is NULL", v13);
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  if (a1 && *(unsigned char *)(a1 + 40) && *(void *)(a1 + 48))
  {
    char v9 = a2;
    if (AMFDRDataCopyRawDataAndManifests(*(void **)(a1 + 56), a2, a3, a4, &v15, &v14, 0, a6))
    {
      if (v14)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v14);
        *a5 = CFRetain(v15);
        uint64_t v10 = 1;
        goto LABEL_8;
      }
      char v13 = v9;
      CFStringRef v12 = @"failed to copy device manifest for %@-%@";
    }
    else
    {
      CFStringRef v12 = @"failed to copy data and manifest";
    }
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalMultiCombinedDataCopyPayloadAndSaveManifest", v12, v13);
  }
  else
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalMultiCombinedDataCopyPayloadAndSaveManifest", @"not allow unseal, shouldn't call this function", v13);
  }
  uint64_t v10 = 0;
LABEL_8:
  if (v14)
  {
    CFRelease(v14);
    CFTypeRef v14 = 0;
  }
LABEL_10:
  if (v15) {
    CFRelease(v15);
  }
  return v10;
}

void _AMFDRSealingMapCopyLocalMultiCombinedDataContextAddEntry(CFMutableArrayRef *a1, const void *a2, const void *a3, const void *a4, void *value)
{
  CFArrayAppendValue(a1[3], value);
  CFArrayAppendValue(*a1, a2);
  CFArrayAppendValue(a1[1], a3);
  char v9 = a1[2];

  CFArrayAppendValue(v9, a4);
}

uint64_t AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass(uint64_t a1, __CFString *a2, const __CFArray *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass", @"copyLocalMultiCombinedDataContext is NULL", v27);
    return 0;
  }
  if (!*(void *)(a1 + 24) || !*(void *)a1 || !*(void *)(a1 + 8) || !*(void *)(a1 + 16) || !*(void *)(a1 + 32))
  {
    CFStringRef v25 = @"copyLocalMultiCombinedDataContext is not properly initialized, AMFDRSealingMapCopyLocalMultiCombinedDataBegin should be used";
LABEL_41:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass", v25, v27);
LABEL_42:
    uint64_t v23 = 0;
    goto LABEL_34;
  }
  if (!a2)
  {
    CFStringRef v25 = @"dataClass is NULL";
    goto LABEL_41;
  }
  if (!a3)
  {
    CFStringRef v25 = @"subCCArray is NULL, please use AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClass when adding the entire data";
    goto LABEL_41;
  }
  CFStringRef v8 = (const __CFString *)_AMFDRSealingMapCopyIdentifierListForClass(a2, a4, 0, 0);
  if (!v8)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass", @"failed to copy dataInstance for %@", (char)a2);
    goto LABEL_42;
  }
  CFStringRef v9 = v8;
  if (*(unsigned char *)(a1 + 40))
  {
    if ((_AMFDRSealingMapCopyLocalMultiCombinedDataCopyPayloadAndSaveManifest(a1, (uint64_t)a2, (uint64_t)v8, 1, &cf, a4) & 1) == 0)
    {
      char v27 = (char)a2;
      CFStringRef v26 = @"failed to copy data and save manifest for %@";
      goto LABEL_49;
    }
    uint64_t v10 = (uint64_t)CFRetain(cf);
  }
  else
  {
    uint64_t v10 = AMFDRSealingMapCopyLocalDict(a2, v8, *(const __CFDictionary **)(a1 + 32), a4);
  }
  CFDictionaryRef v11 = (const __CFDictionary *)v10;
  if (!v10)
  {
    CFStringRef v26 = @"copied localData is NULL";
LABEL_49:
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass", v26, v27);
    CFRelease(v9);
    goto LABEL_42;
  }
  if (CFArrayGetCount(a3) < 1)
  {
    uint64_t v23 = 1;
    goto LABEL_33;
  }
  uint64_t v28 = a4;
  CFIndex v12 = 0;
  char v13 = 0;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v12);
    if (!ValueAtIndex || (v16 = ValueAtIndex, CFTypeID v17 = CFGetTypeID(ValueAtIndex), v17 != CFStringGetTypeID()))
    {
      AMFDRErrorPushInternal(v28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass", @"subCC Name should be CFString", v27);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      if (!v13) {
        goto LABEL_33;
      }
LABEL_29:
      CFRelease(v13);
      uint64_t v23 = v22;
      goto LABEL_33;
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v11, v16);
    if (v13) {
      CFRelease(v13);
    }
    if (!Value)
    {
LABEL_31:
      AMFDRErrorPushInternal(v28, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass", @"unknown data type for the subCC value", v27);
      goto LABEL_32;
    }
    CFTypeID v19 = CFGetTypeID(Value);
    if (v19 == CFStringGetTypeID())
    {
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v14, Value, 0x8000100u, 0x5Fu);
    }
    else
    {
      CFTypeID v21 = CFGetTypeID(Value);
      if (v21 != CFDataGetTypeID()) {
        goto LABEL_31;
      }
      CFDataRef ExternalRepresentation = (void *)CFRetain(Value);
    }
    char v13 = ExternalRepresentation;
    if (!ExternalRepresentation) {
      break;
    }
    _AMFDRSealingMapCopyLocalMultiCombinedDataContextAddEntry((CFMutableArrayRef *)a1, a2, v9, v16, ExternalRepresentation);
    if (++v12 >= CFArrayGetCount(a3))
    {
      uint64_t v22 = 1;
      goto LABEL_29;
    }
  }
  AMFDRErrorPushInternal(v28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddSubCCForClass", @"subCC %@ is missing", (char)v16);
LABEL_32:
  uint64_t v23 = 0;
LABEL_33:
  CFRelease(v9);
  CFRelease(v11);
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

uint64_t AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClassWithMultiData(uint64_t a1, __CFString *a2, uint64_t a3)
{
  CFTypeRef v17 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClassWithMultiData", @"copyLocalMultiCombinedDataContext is NULL", v16);
    return 0;
  }
  if (!*(void *)(a1 + 24) || !*(void *)a1 || !*(void *)(a1 + 8) || !*(void *)(a1 + 16) || !*(void *)(a1 + 32))
  {
    CFStringRef v15 = @"copyLocalMultiCombinedDataContext is not properly initialized, AMFDRSealingMapCopyLocalMultiCombinedDataBegin should be used";
LABEL_35:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClassWithMultiData", v15, v16);
    uint64_t v13 = 0;
    goto LABEL_28;
  }
  if (!a2)
  {
    CFStringRef v15 = @"dataClass is NULL";
    goto LABEL_35;
  }
  CFArrayRef v6 = (const __CFArray *)AMFDRSealingMapCopyMultiInstanceForClass(a2, a3);
  CFArrayRef v7 = v6;
  if (!v6 || (CFTypeID v8 = CFGetTypeID(v6), v8 != CFArrayGetTypeID()) || CFArrayGetCount(v7) < 1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClassWithMultiData", @"cannot find valid dataInstances", v16);
    goto LABEL_33;
  }
  if (CFArrayGetCount(v7) < 1)
  {
    uint64_t v10 = 0;
    uint64_t v13 = 1;
    goto LABEL_26;
  }
  CFIndex v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    if (v10) {
      CFRelease(v10);
    }
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v9);
    if (*(unsigned char *)(a1 + 40)) {
      break;
    }
    CFIndex v12 = (void *)AMFDRSealingMapCopyLocalData(a2, ValueAtIndex, *(const __CFDictionary **)(a1 + 32), a3);
LABEL_19:
    uint64_t v10 = v12;
    if (!v12)
    {
      AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClassWithMultiData", @"copied localData is NULL", v16);
      uint64_t v13 = 0;
      goto LABEL_22;
    }
    _AMFDRSealingMapCopyLocalMultiCombinedDataContextAddEntry((CFMutableArrayRef *)a1, a2, ValueAtIndex, &stru_26C899958, v12);
    if (++v9 >= CFArrayGetCount(v7))
    {
      uint64_t v13 = 1;
      goto LABEL_22;
    }
  }
  if (_AMFDRSealingMapCopyLocalMultiCombinedDataCopyPayloadAndSaveManifest(a1, (uint64_t)a2, (uint64_t)ValueAtIndex, 0, &v17, a3))
  {
    CFIndex v12 = (void *)CFRetain(v17);
    goto LABEL_19;
  }
  AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataAddDataClassWithMultiData", @"failed to copy data and save manifest for %@-%@", (char)a2);
LABEL_33:
  uint64_t v13 = 0;
  uint64_t v10 = 0;
LABEL_22:
  if (v7)
  {
LABEL_26:
    CFRelease(v7);
    if (v10) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (!v10) {
    goto LABEL_28;
  }
LABEL_27:
  CFRelease(v10);
LABEL_28:
  if (v17) {
    CFRelease(v17);
  }
  return v13;
}

CFDataRef AMFDRSealingMapCopyLocalMultiCombinedDataEnd(const __CFArray ***a1, CFTypeRef *a2)
{
  if (!a1 || (CFTypeID v4 = *a1) == 0)
  {
    CFStringRef v15 = @"copyLocalMultiCombinedDataContext is NULL";
    goto LABEL_28;
  }
  if (!v4[3] || !*v4 || !v4[1] || !v4[2])
  {
    CFStringRef v15 = @"copyLocalMultiCombinedDataContext is not properly initialized, AMFDRSealingMapCopyLocalMultiCombinedDataBegin should be used";
LABEL_28:
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataEnd", v15, v17);
    goto LABEL_24;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataEnd", @"failed to initialize options", v17);
    goto LABEL_24;
  }
  CFDictionaryRef v7 = Mutable;
  CFDictionaryAddValue(Mutable, @"VerifyData", (const void *)*MEMORY[0x263EFFB38]);
  CFDataRef v8 = (const __CFData *)AMFDRSealingMapCopyLocalDataForClass(@"seal", v7, (uint64_t)a2);
  if (!v8)
  {
    CFDictionaryRef v11 = *a1;
    if (*((unsigned char *)*a1 + 40))
    {
      if (a2 && *a2 && (CFRelease(*a2), *a2 = 0, (CFDictionaryRef v11 = *a1) == 0))
      {
        CFStringRef v16 = @"copyLocalMultiCombinedDataContext is NULL";
      }
      else
      {
        CFArrayRef v12 = v11[6];
        if (v12 && CFArrayGetCount(v12) > 0)
        {
          if (CFArrayGetCount(v11[6]) == 1)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v11[6], 0);
            CFDataRef v8 = (const __CFData *)CFRetain(ValueAtIndex);
            if (v8) {
              goto LABEL_9;
            }
          }
          else
          {
            AMSupportLogInternal();
          }
          goto LABEL_23;
        }
        CFStringRef v16 = @"manifestArray is empty";
      }
      AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealingMapCopyLocalMultiCombinedDataCreateUnsealedManifest", v16, v17);
    }
LABEL_23:
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataEnd", @"failed to copy manifestOverride", v17);
    CFRelease(v7);
LABEL_24:
    CFDataRef MultiCombinedData = 0;
    goto LABEL_25;
  }
LABEL_9:
  CFIndex v9 = AMFDRCreateTypeWithOptions(v5, @"Local", v7);
  if (AMFDRDataCopyTrustObject((uint64_t)v9))
  {
    CFDataRef MultiCombinedData = AMFDRDataLocalCreateMultiCombinedData(**a1, (*a1)[1], (*a1)[2], (*a1)[3], v8, 0, (uint64_t)a2);
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealingMapCopyLocalMultiCombinedDataEnd", @"failed to copy trust object", v17);
    CFDataRef MultiCombinedData = 0;
  }
  CFRelease(v8);
  CFRelease(v7);
  if (v9) {
    CFRelease(v9);
  }
LABEL_25:
  AMFDRSealingMapCopyLocalMultiCombinedDataContextDestroy((CFTypeRef **)a1);
  return MultiCombinedData;
}

void AMFDRSealingMapCopyLocalMultiCombinedDataContextDestroy(CFTypeRef **a1)
{
  if (a1)
  {
    CFTypeID v2 = *a1;
    if (v2)
    {
      if (v2[3])
      {
        CFRelease(v2[3]);
        (*a1)[3] = 0;
        CFTypeID v2 = *a1;
      }
      if (*v2)
      {
        CFRelease(*v2);
        **a1 = 0;
        CFTypeID v2 = *a1;
      }
      if (v2[1])
      {
        CFRelease(v2[1]);
        (*a1)[1] = 0;
        CFTypeID v2 = *a1;
      }
      if (v2[2])
      {
        CFRelease(v2[2]);
        (*a1)[2] = 0;
        CFTypeID v2 = *a1;
      }
      if (v2[4])
      {
        CFRelease(v2[4]);
        (*a1)[4] = 0;
        CFTypeID v2 = *a1;
      }
      if (v2[6])
      {
        CFRelease(v2[6]);
        (*a1)[6] = 0;
        CFTypeID v2 = *a1;
      }
      if (!v2[7] || (CFRelease(v2[7]), (*a1)[7] = 0, (CFTypeID v2 = *a1) != 0))
      {
        free(v2);
        *a1 = 0;
      }
    }
  }
}

uint64_t ___isAppleDeviceQueryFrameworkAvailable_block_invoke()
{
  _isAppleDeviceQueryFrameworkAvailable_isAvailable = 1;
  if (!MEMORY[0x263F26D10]) {
    return AMSupportLogInternal();
  }
  return result;
}

uint64_t ___isZhuGeLegacyAvailable_block_invoke()
{
  if (ZhuGeSupportLibraryCore())
  {
    uint64_t result = getZhuGeCopyValueWithErrorSymbolLoc();
    _isZhuGeLegacyAvailable_isAvailable = result != 0;
    if (result) {
      return result;
    }
  }
  else
  {
    _isZhuGeLegacyAvailable_isAvailable = 0;
  }

  return AMSupportLogInternal();
}

uint64_t ZhuGeSupportLibraryCore()
{
  if (!ZhuGeSupportLibraryCore_frameworkLibrary) {
    ZhuGeSupportLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return ZhuGeSupportLibraryCore_frameworkLibrary;
}

uint64_t getZhuGeCopyValueWithErrorSymbolLoc()
{
  uint64_t v3 = 0;
  CFTypeID v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getZhuGeCopyValueWithErrorSymbolLoc_ptr;
  uint64_t v6 = getZhuGeCopyValueWithErrorSymbolLoc_ptr;
  if (!getZhuGeCopyValueWithErrorSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x263EF8330];
    v2[1] = 0x40000000;
    v2[2] = __getZhuGeCopyValueWithErrorSymbolLoc_block_invoke;
    v2[3] = &unk_2642D1458;
    v2[4] = &v3;
    __getZhuGeCopyValueWithErrorSymbolLoc_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __ZhuGeSupportLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ZhuGeSupportLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getZhuGeCopyValueWithErrorSymbolLoc_block_invoke(uint64_t a1)
{
  CFTypeID v2 = (void *)ZhuGeSupportLibraryCore();
  if (!v2)
  {
    CFTypeID v4 = (void *)abort_report_np();
    free(v4);
  }
  uint64_t result = dlsym(v2, "ZhuGeCopyValueWithError");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getZhuGeCopyValueWithErrorSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

dispatch_queue_t __sealingMapCacheQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.libfdr.sealingMapCache", 0);
  sealingMapCacheQueue_sealingMapCacheQueue = (uint64_t)result;
  return result;
}

CFDictionaryRef _AMFDRSealingMapGetManifestPropertiesEntries(const void *a1)
{
  if (!a1) {
    goto LABEL_11;
  }
  CFDictionaryRef FDRSealingMapFromCache = (const __CFDictionary *)_getFDRSealingMapFromCache((uint64_t)a1);
  CFDictionaryRef v3 = FDRSealingMapFromCache;
  if (!FDRSealingMapFromCache)
  {
    AMSupportLogInternal();
    return v3;
  }
  CFTypeID v4 = CFGetTypeID(FDRSealingMapFromCache);
  if (v4 != CFDictionaryGetTypeID()) {
    goto LABEL_11;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v3, @"ManifestProperties");
  if (!Value) {
    goto LABEL_11;
  }
  CFDictionaryRef v3 = Value;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFArrayGetTypeID())
  {
    CFTypeID v7 = CFGetTypeID(v3);
    if (v7 != CFDictionaryGetTypeID()
      || (CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(v3, a1)) == 0
      || (CFDictionaryRef v9 = v8, v10 = CFGetTypeID(v8), v10 != CFDictionaryGetTypeID())
      || (CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(v9, @"Properties")) == 0
      || (v3 = v11, CFTypeID v12 = CFGetTypeID(v11), v12 != CFArrayGetTypeID()))
    {
LABEL_11:
      AMSupportLogInternal();
      return 0;
    }
  }
  return v3;
}

dispatch_queue_t __sealingMapRepairConfigurationCacheQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.libfdr.sealingMapRepairConfigurationCache", 0);
  sealingMapRepairConfigurationCacheQueue_sealingMapRepairConfigurationCacheQueue = (uint64_t)result;
  return result;
}

uint64_t _getMinimalSealingManifestDataInstances(void *value, const __CFData *a2, uint64_t a3)
{
  CFDictionaryRef v24 = 0;
  unsigned int v23 = 0;
  numBytes_4 = 0;
  unsigned int numBytes = 0;
  CFArrayRef v20 = 0;
  CFTypeID v4 = *(const void **)a3;
  CFTypeID v6 = *(__CFArray **)(a3 + 16);
  uint64_t v5 = *(__CFArray **)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 32);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 8), value);
  CFDataGetBytePtr(a2);
  CFDataGetLength(a2);
  if (AMFDRDecodeManifestBody(&v20))
  {
    CFStringRef v18 = @"AMFDRDecodeManifestBody failed";
LABEL_31:
    AMFDRErrorPushInternal(v7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_getMinimalSealingManifestDataInstances", v18, v19);
  }
  else
  {
    if (AMFDRDecodeManifestBodyNext(&v20, &v24, &v23, &numBytes_4, &numBytes))
    {
      CFDictionaryRef v8 = 0;
      CFStringRef v9 = 0;
      CFStringRef v10 = 0;
    }
    else
    {
      char v11 = 0;
      CFDictionaryRef v8 = 0;
      CFStringRef v9 = 0;
      CFStringRef v10 = 0;
      CFStringRef v12 = @"failed to create dataInstanceStr";
      do
      {
        if (v10) {
          CFRelease(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
        if (v8) {
          CFRelease(v8);
        }
        CFStringRef v10 = 0;
        if (v24 && v23 && numBytes_4)
        {
          CFStringRef v9 = 0;
          CFDictionaryRef v8 = 0;
          if (numBytes)
          {
            CFAllocatorRef v13 = CFGetAllocator(v4);
            CFStringRef v14 = CFStringCreateWithBytes(v13, v24, v23, 0x8000100u, 0);
            if (!v14)
            {
              CFStringRef v18 = @"failed to create dataClassStr";
              goto LABEL_31;
            }
            CFStringRef v10 = v14;
            CFAllocatorRef v15 = CFGetAllocator(v4);
            CFStringRef v9 = CFStringCreateWithBytes(v15, numBytes_4, numBytes, 0x8000100u, 0);
            if (!v9) {
              goto LABEL_33;
            }
            CFTypeRef v16 = AMFDRDataInstanceCopyNonSik(v4, v9);
            if (!v16)
            {
              CFStringRef v12 = @"failed to create dataInstanceNonSik";
LABEL_33:
              AMFDRErrorPushInternal(v7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_getMinimalSealingManifestDataInstances", v12, v19);
              CFDictionaryRef v8 = 0;
              goto LABEL_24;
            }
            CFDictionaryRef v8 = v16;
            CFArrayAppendValue(v6, v10);
            CFArrayAppendValue(v5, v8);
            char v11 = 1;
          }
        }
        else
        {
          CFStringRef v9 = 0;
          CFDictionaryRef v8 = 0;
        }
      }
      while (!AMFDRDecodeManifestBodyNext(&v20, &v24, &v23, &numBytes_4, &numBytes));
      if (v11) {
        goto LABEL_23;
      }
    }
    CFArrayAppendValue(v6, 0);
    CFArrayAppendValue(v5, 0);
LABEL_23:
    if (v10) {
LABEL_24:
    }
      CFRelease(v10);
    if (v9) {
      CFRelease(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return AMFDRDecodeManifestBodyDestroy(v20);
}

void ___getFDRSealingMapFromCache_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)prunedSealingMapCache;
  if (prunedSealingMapCache
    || (CFDictionaryRef v2 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]), (prunedSealingMapCache = (uint64_t)v2) != 0))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue(v2, *(const void **)(a1 + 40));
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      return;
    }
    uint64_t v3 = copyFDRSealingMapFromFilesystem();
    if (v3)
    {
      CFDictionaryRef v4 = (const __CFDictionary *)v3;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!Mutable)
      {
        AMSupportLogInternal();
        CFDictionaryRef v19 = v4;
        goto LABEL_20;
      }
      CFTypeID v6 = Mutable;
      uint64_t v7 = *(const void **)(a1 + 40);
      CFDictionaryRef Value = CFDictionaryGetValue(v4, v7);
      if (Value)
      {
        CFStringRef v9 = Value;
        CFDictionarySetValue(v6, v7, Value);
        CFTypeID v10 = CFGetTypeID(v9);
        if (v10 == CFStringGetTypeID())
        {
          char v11 = CFDictionaryGetValue(v4, v9);
          if (v11) {
            CFDictionarySetValue(v6, v9, v11);
          }
        }
      }
      CFStringRef v12 = CFDictionaryGetValue(v4, @"ManifestProperties");
      if (v12)
      {
        CFAllocatorRef v13 = v12;
        CFTypeID v14 = CFGetTypeID(v12);
        if (v14 == CFArrayGetTypeID())
        {
          CFDictionarySetValue(v6, @"ManifestProperties", v13);
        }
        else
        {
          CFTypeID v15 = CFGetTypeID(v13);
          if (v15 == CFDictionaryGetTypeID()
            && !_addSealingMapEntryKeyValueToCache(v6, v7, @"ManifestProperties", (CFDictionaryRef)v13))
          {
            goto LABEL_27;
          }
        }
      }
      CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v4, @"StoreMaxSize");
      if (!v16
        || (CFDictionaryRef v17 = v16, v18 = CFGetTypeID(v16), v18 != CFDictionaryGetTypeID())
        || (_addSealingMapEntryKeyValueToCache(v6, v7, @"StoreMaxSize", v17) & 1) != 0)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)prunedSealingMapCache, *(const void **)(a1 + 40), v6);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
LABEL_19:
        CFRelease(v4);
        CFDictionaryRef v19 = v6;
LABEL_20:
        CFRelease(v19);
        return;
      }
LABEL_27:
      AMSupportLogInternal();
      goto LABEL_19;
    }
  }

  AMSupportLogInternal();
}

uint64_t _addSealingMapEntryKeyValueToCache(const __CFDictionary *a1, const void *a2, const void *a3, CFDictionaryRef theDict)
{
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, a2);
  CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(a1, a3);
  if (!Value) {
    return 1;
  }
  CFStringRef v9 = v8;
  if (v8)
  {
    if (!CFDictionaryContainsKey(v8, a2)) {
      CFDictionaryAddValue(v9, a2, Value);
    }
    return 1;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(a1, a3, Mutable);
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, a2, Value);
    CFRelease(Mutable);
    return 1;
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t _AMFDRServiceSendSocketDict(int a1, const void *a2)
{
  unsigned int v9 = -1431655766;
  if (a1 == -1 || !a2)
  {
    AMSupportLogInternal();
    uint64_t v7 = 0;
  }
  else
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    CFDataRef v4 = Data;
    if (Data
      && (unsigned int Length = CFDataGetLength(Data),
          uint64_t BytePtr = CFDataGetBytePtr(v4),
          AMSupportLogInternal(),
          unsigned int v9 = bswap32(Length),
          send(a1, &v9, 4uLL, 0) == 4)
      && send(a1, BytePtr, Length, 0) == Length)
    {
      uint64_t v7 = 1;
    }
    else
    {
      AMSupportLogInternal();
      uint64_t v7 = 0;
    }
  }
  AMSupportSafeRelease();
  return v7;
}

CFPropertyListRef _AMFDRServiceCopySocketDict(int a1)
{
  unsigned int v11 = -1431655766;
  if (a1 == -1)
  {
    AMSupportLogInternal();
    CFPropertyListRef v9 = 0;
  }
  else
  {
    for (unint64_t i = 0; i < 4; i += read(a1, (char *)&v11 + i, 4 - i))
      ;
    unsigned int v3 = v11;
    size_t v4 = bswap32(v11);
    uint64_t v5 = (const UInt8 *)malloc_type_malloc(v4, 0xDC64F391uLL);
    if (!v5) {
      goto LABEL_13;
    }
    if (v3)
    {
      size_t v6 = 0;
      do
        v6 += read(a1, (void *)&v5[v6], v4 - v6);
      while (v6 < v4);
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, v4);
    if (v8)
    {
      CFPropertyListRef v9 = CFPropertyListCreateWithData(v7, v8, 0, 0, 0);
      if (!v9) {
        AMSupportLogInternal();
      }
    }
    else
    {
LABEL_13:
      AMSupportLogInternal();
      CFPropertyListRef v9 = 0;
    }
  }
  AMSupportSafeFree();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v9;
}

BOOL AMFDRServicePreflightRecoveryCopyData(const void *a1, const void *a2, BOOL a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  if (!a1 || !a5) {
    goto LABEL_24;
  }
  BOOL v6 = a3;
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    unsigned int v11 = Mutable;
    if (Mutable)
    {
      CFDictionaryAddValue(Mutable, @"command", @"preflight");
      CFDictionaryAddValue(v11, @"apTicket", a1);
      if (a2) {
        CFDictionaryAddValue(v11, @"fdrData", a2);
      }
      if (a4)
      {
        if (CFDictionaryGetValue(a4, @"EnableProxy"))
        {
          CFDictionaryRef Value = CFDictionaryGetValue(a4, @"EnableProxy");
          CFDictionaryAddValue(v11, @"EnableProxy", Value);
          CFAllocatorRef v13 = @"EnableProxySsl";
        }
        else
        {
          if (CFDictionaryGetValue(a4, @"UseSOCKSHost"))
          {
            CFTypeID v14 = CFDictionaryGetValue(a4, @"UseSOCKSHost");
            CFDictionaryAddValue(v11, @"UseSOCKSHost", v14);
          }
          CFAllocatorRef v13 = @"UseSOCKSPort";
        }
        if (CFDictionaryGetValue(a4, v13))
        {
          CFTypeID v15 = CFDictionaryGetValue(a4, v13);
          CFDictionaryAddValue(v11, v13, v15);
        }
      }
      AMSupportLogInternal();
      if (_AMFDRServiceSendSocketDict(v6, v11))
      {
        AMSupportSafeRelease();
        AMSupportLogInternal();
        CFDictionaryRef v16 = (const __CFDictionary *)_AMFDRServiceCopySocketDict(v6);
        CFDictionaryRef v17 = v16;
        if (v16)
        {
          CFTypeID v18 = CFDictionaryGetValue(v16, @"fdrData");
          CFDictionaryRef v19 = CFDictionaryGetValue(v17, @"result");
          if (v19)
          {
            CFArrayRef v20 = v19;
            if (CFDictionaryGetValue(v17, @"errorString")) {
              AMSupportLogInternal();
            }
            BOOL v6 = v20 == (const void *)*MEMORY[0x263EFFB40];
            if (v18) {
              *a5 = CFRetain(v18);
            }
            goto LABEL_22;
          }
        }
      }
    }
LABEL_24:
    AMSupportLogInternal();
    BOOL v6 = 0;
    goto LABEL_23;
  }
LABEL_22:
  AMSupportLogInternal();
LABEL_23:
  AMSupportSafeRelease();
  return v6;
}

void AMFDRHttpRequestPrintGlobalStatistics(const __CFAllocator *a1, CFArrayRef theArray, char a3)
{
  if (theArray)
  {
    size_t v4 = theArray;
    uint64_t Count = CFArrayGetCount(theArray);
    if (a3)
    {
      v26.location = 0;
      v26.uint64_t length = Count;
      CFArraySortValues(v4, v26, (CFComparatorFunction)_HttpRequestStatisticCompareFunction, 0);
    }
    AMSupportLogInternal();
    if (Count >= 1)
    {
      CFIndex v7 = 0;
      uint64_t v23 = Count;
      CFDictionaryRef v24 = v4;
      CFStringRef v8 = &stru_26C899958;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
        CFDictionaryRef v10 = ValueAtIndex;
        CFStringRef v11 = &stru_26C899958;
        if ((a3 & 2) == 0)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"EpochTime");
          CFStringRef v11 = CFStringCreateWithFormat(a1, 0, @" epochtime=%@", Value);
          if (!v11) {
            break;
          }
        }
        CFStringRef v13 = &stru_26C899958;
        if ((a3 & 4) != 0
          || (CFTypeID v14 = CFDictionaryGetValue(v10, @"Pid"),
              (CFStringRef v13 = CFStringCreateWithFormat(a1, 0, @" pid=%@", v14)) != 0))
        {
          CFStringRef v15 = &stru_26C899958;
          if ((a3 & 0x40) != 0
            && (CFDictionaryRef v16 = CFDictionaryGetValue(v10, @"UUID"),
                (CFStringRef v15 = CFStringCreateWithFormat(a1, 0, @" UUID=%@", v16)) == 0))
          {
            AMSupportLogInternal();
            CFStringRef v22 = 0;
            CFStringRef v17 = &stru_26C899958;
          }
          else
          {
            CFStringRef v17 = &stru_26C899958;
            if ((a3 & 8) != 0
              || (CFTypeID v18 = CFDictionaryGetValue(v10, @"Process"),
                  (CFStringRef v17 = CFStringCreateWithFormat(a1, 0, @" process=%@", v18)) != 0))
            {
              CFStringRef v19 = &stru_26C899958;
              if (((a3 & 0x10) != 0
                 || (CFArrayRef v20 = CFDictionaryGetValue(v10, @"Url"),
                     (CFStringRef v19 = CFStringCreateWithFormat(a1, 0, @" url=%@", v20)) != 0))
                && ((a3 & 0x20) != 0
                 || (CFTypeID v21 = CFDictionaryGetValue(v10, @"Tag"),
                     (CFStringRef v8 = CFStringCreateWithFormat(a1, 0, @" tag=%@", v21)) != 0)))
              {
                CFStringRef v22 = CFStringCreateWithFormat(a1, 0, @"%@%@%@%@%@%@", v11, v15, v13, v17, v19, v8);
              }
              else
              {
                AMSupportLogInternal();
                CFStringRef v22 = 0;
              }
LABEL_19:
              CFRelease(v11);
              if (v13) {
LABEL_20:
              }
                CFRelease(v13);
              if (!v15) {
                goto LABEL_23;
              }
              goto LABEL_22;
            }
            AMSupportLogInternal();
            CFStringRef v22 = 0;
          }
          CFStringRef v19 = &stru_26C899958;
          goto LABEL_19;
        }
        AMSupportLogInternal();
        CFRelease(v11);
        CFStringRef v22 = 0;
        CFStringRef v15 = &stru_26C899958;
        CFStringRef v19 = &stru_26C899958;
        CFStringRef v17 = &stru_26C899958;
LABEL_22:
        CFRelease(v15);
LABEL_23:
        if (v17) {
          CFRelease(v17);
        }
        if (v19) {
          CFRelease(v19);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (!v22) {
          goto LABEL_41;
        }
        if (CFStringGetLength(v22) >= 1) {
          AMSupportLogInternal();
        }
        CFRelease(v22);
        ++v7;
        size_t v4 = v24;
        CFStringRef v8 = &stru_26C899958;
        if (v23 == v7) {
          return;
        }
      }
      AMSupportLogInternal();
      CFStringRef v22 = 0;
      CFStringRef v13 = &stru_26C899958;
      CFStringRef v15 = &stru_26C899958;
      CFStringRef v17 = &stru_26C899958;
      CFStringRef v19 = &stru_26C899958;
      goto LABEL_20;
    }
  }
  else
  {
LABEL_41:
    AMSupportLogInternal();
  }
}

CFComparisonResult _HttpRequestStatisticCompareFunction(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"EpochTime");
  CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(a2, @"EpochTime");
  if (!Value) {
    return 1;
  }
  if (!v4) {
    return -1;
  }

  return CFNumberCompare(Value, v4, 0);
}

uint64_t AMFDRHttpRequestCopyGlobalStatistics(uint64_t a1)
{
  void context[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = 0;
  context[0] = a1;
  context[1] = &v2;
  if (_AMFDRGetHttpRequestStatisticsQueue_onceToken != -1) {
    dispatch_once(&_AMFDRGetHttpRequestStatisticsQueue_onceToken, &__block_literal_global_2);
  }
  dispatch_sync_f((dispatch_queue_t)_AMFDRGetHttpRequestStatisticsQueue_queue, context, (dispatch_function_t)___thr_AMFDRHttpRequestCopyGlobalStatistics);
  return v2;
}

CFMutableArrayRef ___thr_AMFDRHttpRequestCopyGlobalStatistics(CFMutableArrayRef result)
{
  if (gHttpRequestStatisticsArray)
  {
    uint64_t v1 = (CFMutableArrayRef *)*((void *)result + 1);
    dispatch_queue_t result = CFArrayCreateMutableCopy(*(CFAllocatorRef *)result, 0, (CFArrayRef)gHttpRequestStatisticsArray);
    CFMutableArrayRef *v1 = result;
  }
  return result;
}

void AMFDRHttpRequestResetGlobalStatistics()
{
  if (_AMFDRGetHttpRequestStatisticsQueue_onceToken != -1) {
    dispatch_once(&_AMFDRGetHttpRequestStatisticsQueue_onceToken, &__block_literal_global_2);
  }
  uint64_t v0 = _AMFDRGetHttpRequestStatisticsQueue_queue;

  dispatch_sync_f(v0, 0, (dispatch_function_t)___thr_AMFDRHttpResetReleaseGlobalStatistics);
}

void ___thr_AMFDRHttpResetReleaseGlobalStatistics()
{
  if (gHttpRequestStatisticsArray)
  {
    CFRelease((CFTypeRef)gHttpRequestStatisticsArray);
    gHttpRequestStatisticsArray = 0;
  }
}

BOOL AMFDRLoadPersistent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  context[5] = *MEMORY[0x263EF8340];
  char v5 = 0;
  if (a1 && a4 && a2 && a3)
  {
    context[0] = a1;
    context[1] = a2;
    void context[2] = a3;
    void context[3] = a4;
    void context[4] = &v5;
    if (_AMFDRGetPersistentQueue_onceToken != -1) {
      dispatch_once(&_AMFDRGetPersistentQueue_onceToken, &__block_literal_global_897);
    }
    dispatch_sync_f((dispatch_queue_t)_AMFDRGetPersistentQueue_queue, context, (dispatch_function_t)___thr_AMFDRLoadPersistent);
    return v5 != 0;
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

void ___thr_AMFDRLoadPersistent(uint64_t a1)
{
  uint64_t v1 = *(CFDictionaryRef **)a1;
  uint64_t v2 = *(CFTypeRef **)(a1 + 24);
  unsigned int v3 = *(unsigned char **)(a1 + 32);
  CFTypeRef v4 = _CopyPersistentDataPath(*(CFDictionaryRef **)a1, *(const void **)(a1 + 8));
  if (v4)
  {
    char v5 = v4;
    CFGetAllocator(v1);
    if (AMSupportCreateDataFromFileURL() || !CFDataGetLength(0))
    {
      AMSupportLogInternal();
    }
    else
    {
      *uint64_t v2 = CFRetain(0);
      *unsigned int v3 = 1;
    }
    CFRelease(v5);
  }
  else
  {
    AMSupportLogInternal();
  }
}

uint64_t AMFDRDataHTTPLoadPersistent(CFDataRef *a1, CFTypeRef *a2)
{
  CFTypeRef v21 = 0;
  CFTypeRef v22 = 0;
  int v20 = 0;
  CFDataRef v19 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPLoadPersistent", @"amfdr is NULL", 0);
    goto LABEL_14;
  }
  if ((AMFDRDataGetSigningVersion((uint64_t)a1, &v20) & 1) == 0
    || v20 == 1
    && !AMFDRCryptoGetPrivateKey((uint64_t)a1)
    && ((BOOL v6 = a1[17], *v6 < 0x51uLL)
     || (CFIndex v7 = (unsigned int (*)(CFDataRef *, CFTypeRef *, CFTypeRef *, CFDataRef))v6[10]) == 0
     || v7(a1, &v21, &v22, a1[18])))
  {
    AMSupportLogInternal();
LABEL_14:
    uint64_t v8 = 0;
    goto LABEL_33;
  }
  if (!AMFDRCryptoGetCert((uint64_t)a1) && AMFDRShouldPersistData((uint64_t)a1, @"PersistCertificate"))
  {
    CFDictionaryRef v4 = a1[10];
    if (v4)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v4, @"certificate");
      a1[4] = Value;
      AMSupportSafeRetain();
      if (!Value) {
        goto LABEL_20;
      }
    }
    else if (!AMFDRLoadPersistent((uint64_t)a1, @"CertificateFile", @"certificate", (uint64_t)(a1 + 4)))
    {
      goto LABEL_20;
    }
    CFDictionaryRef v10 = a1 + 4;
    CFDataRef v9 = a1[4];
    if (!v9 || !CFDataGetLength(v9))
    {
LABEL_20:
      AMSupportLogInternal();
      CFDictionaryRef v10 = a1 + 4;
      CFDataRef v11 = a1[4];
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    CFDataGetBytePtr(*v10);
    CFDataGetLength(*v10);
    AMSupportRsaCreateDataFromPem();
    AMSupportLogInternal();
    CFDataRef v11 = *v10;
    if (*v10)
    {
LABEL_21:
      CFRelease(v11);
      CFDataRef *v10 = 0;
    }
  }
LABEL_22:
  CFDataRef v12 = a1[4];
  if ((!v12 || !CFDataGetLength(v12)) && (AMFDRPermissionsRequest((uint64_t)a1, a2) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPLoadPersistent", @"Permissions request failed.", 0);
    goto LABEL_14;
  }
  if (AMFDROptionsGetBooleanValue((uint64_t)a1, @"EnableCookie", 0)
    && !a1[3]
    && AMFDRShouldPersistData((uint64_t)a1, @"PersistCookie")
    && AMFDRLoadPersistent((uint64_t)a1, @"CookieFile", @"cookie", (uint64_t)&v19))
  {
    CFDataRef v13 = a1[3];
    if (v13)
    {
      CFRelease(v13);
      a1[3] = 0;
    }
    CFAllocatorRef v14 = CFGetAllocator(a1);
    uint64_t BytePtr = CFDataGetBytePtr(v19);
    CFIndex Length = CFDataGetLength(v19);
    CFStringRef v17 = CFStringCreateWithBytes(v14, BytePtr, Length, 0x8000100u, 0);
    a1[3] = (CFDataRef)v17;
    if (!v17)
    {
      AMFDRErrorPushInternal((uint64_t)a2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPLoadPersistent", @"failed to convert amfdr->cookieStr", 0);
      goto LABEL_14;
    }
  }
  uint64_t v8 = 1;
LABEL_33:
  if (v19)
  {
    CFRelease(v19);
    CFDataRef v19 = 0;
  }
  if (v21)
  {
    CFRelease(v21);
    CFTypeRef v21 = 0;
  }
  if (v22)
  {
    CFRelease(v22);
    CFTypeRef v22 = 0;
  }
  return v8;
}

BOOL AMFDRShouldPersistData(uint64_t a1, const void *a2)
{
  if (a1) {
    uint64_t v2 = (*(unsigned __int8 *)(*(void *)(a1 + 136) + 8) >> 2) & 1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (Value)
  {
    CFBooleanRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFBooleanGetTypeID()) {
      return CFBooleanGetValue(v4) == 1;
    }
  }
  return v2;
}

uint64_t AMFDRPermissionsRequest(uint64_t a1, CFTypeRef *a2)
{
  if (!a1)
  {
    CFStringRef v11 = @"amfdr is NULL";
LABEL_22:
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRPermissionsRequest", v11, v13);
    return 0;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16);
  if (!v4)
  {
    CFStringRef v11 = @"amfdr->optionsDict is NULL";
    goto LABEL_22;
  }
  *(unsigned char *)(a1 + 41) = 0;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, @"Permissions");
  if (!Value)
  {
    CFStringRef v11 = @"permsStr is NULL. kAMFDROptionPermissions required in options.";
    goto LABEL_22;
  }
  CFStringRef v6 = Value;
  if (a2 && *a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  if (*(void *)(a1 + 16))
  {
    CFIndex v7 = _AMFDRCreateUrlWithKey(a1, @"CAURL", @"ca/authorize", 0, 0);
    if (v7)
    {
      CFDataRef Csr = AMFDRCryptoCreateCsr(a1, v6);
      CFDataRef v9 = Csr;
      if (!Csr)
      {
        CFStringRef v12 = @"Unable to create CSR";
        goto LABEL_27;
      }
      CFDataGetBytePtr(Csr);
      CFDataGetLength(v9);
      if (!AMSupportRsaCreateDataFromPem())
      {
        CFStringRef v12 = @"Unable to create DER CSR (csrDER is NULL)";
LABEL_27:
        AMFDRErrorPushInternal((uint64_t)a2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRPermissionsRequestWithString", v12, v13);
        goto LABEL_28;
      }
      AMFDRErrorPushInternal((uint64_t)a2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRPermissionsRequestWithString", @"Unable to create CSR", v13);
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRPermissionsRequestWithString", @"serverURL is NULL", v13);
      CFDataRef v9 = 0;
    }
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRPermissionsRequestWithString", @"amfdr->optionsDict is NULL", v13);
    CFDataRef v9 = 0;
    CFIndex v7 = 0;
  }
LABEL_28:
  AMFDRSetStat((CFMutableDictionaryRef *)a1, @"FDRCAFail", 1);
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (AMFDRGetUnderlyingErrorCode(a1, (CFErrorRef *)a2) == 403) {
    *(unsigned char *)(a1 + 41) = 1;
  }
  AMFDRErrorPushInternal((uint64_t)a2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRPermissionsRequest", @"_AMFDRSavePersistentData failed", v14);
  return 0;
}

BOOL _AMFDRSavePersistent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  context[5] = *MEMORY[0x263EF8340];
  char v5 = 0;
  if (!a4) {
    return 0;
  }
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  void context[3] = a4;
  void context[4] = &v5;
  if (_AMFDRGetPersistentQueue_onceToken != -1) {
    dispatch_once(&_AMFDRGetPersistentQueue_onceToken, &__block_literal_global_897);
  }
  dispatch_sync_f((dispatch_queue_t)_AMFDRGetPersistentQueue_queue, context, (dispatch_function_t)___thr_AMFDRSavePersistent);
  return v5 != 0;
}

uint64_t _AMFDRSupportBase64Encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v3 = a3;
  if (a3)
  {
    AMSupportBase64Encode();
LABEL_7:
    AMSupportLogInternal();
    return 0;
  }
  AMSupportLogInternal();
  return v3;
}

uint64_t AMFDRSupportBase64Decode(const __CFAllocator *a1, CFStringRef theString, uint64_t a3)
{
  if (!theString) {
    goto LABEL_8;
  }
  uint64_t v3 = a3;
  if (!a3)
  {
    AMSupportLogInternal();
    return v3;
  }
  CFStringRef MutableCopy = CFStringCreateMutableCopy(a1, 0, theString);
  if (!MutableCopy)
  {
LABEL_8:
    AMSupportLogInternal();
    return 0;
  }
  char v5 = (__CFString *)MutableCopy;
  v7.uint64_t length = CFStringGetLength(MutableCopy);
  v7.location = 0;
  CFStringFindAndReplace(v5, @"-", @"+", v7, 0);
  v8.uint64_t length = CFStringGetLength(v5);
  v8.location = 0;
  CFStringFindAndReplace(v5, @"_", @"/", v8, 0);
  AMSupportBase64Decode();
  AMSupportLogInternal();
  uint64_t v3 = 0;
  CFRelease(v5);
  return v3;
}

uint64_t AMFDROfflineBlobCreate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0;
  CFIndex length = 0;
  memset(v18, 0, sizeof(v18));
  if (!a1)
  {
    CFStringRef v15 = @"amfdr is NULL";
LABEL_14:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobCreate", v15, v17);
    return 0;
  }
  if (!a1[2])
  {
    CFStringRef v15 = @"amfdr->optionsDict is NULL";
    goto LABEL_14;
  }
  if (!a2)
  {
    CFStringRef v15 = @"dataClass is NULL";
    goto LABEL_14;
  }
  if (!a3)
  {
    CFStringRef v15 = @"dataInstance is NULL";
    goto LABEL_14;
  }
  uint64_t SikPub = AMFDRCryptoGetSikPub((uint64_t)a1);
  if (!SikPub)
  {
    CFStringRef v16 = @"Unable to get sik";
LABEL_18:
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobCreate", v16, v17);
    return 0;
  }
  uint64_t v9 = SikPub;
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFStringRef v11 = CFStringCreateWithFormat(v10, 0, @"PUT/%@:sik-%@-%@", a2, a3, v9);
  if (!v11)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobCreate", @"permsStr is NULL", v17);
    return 0;
  }
  CFDataRef Csr = AMFDRCryptoCreateCsr((uint64_t)a1, v11);
  if (!Csr)
  {
    CFStringRef v16 = @"Unable to create CSR";
    goto LABEL_18;
  }
  CFDataRef v13 = Csr;
  CFDataGetBytePtr(Csr);
  CFDataGetLength(v13);
  if (AMSupportRsaCreateDataFromPem()) {
    AMFDRErrorPushInternal(a4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobCreate", @"Unable to create CSR", v17);
  }
  else {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobCreate", @"Unable to create DER CSR (csrDER is NULL)", v17);
  }
  CFRelease(v13);
  return 0;
}

CFDataRef _CopyDevRefKeySignature(const void *a1, CFDataRef theData, uint64_t a3)
{
  CFIndex v12 = 0;
  CFDataRef v13 = 0;
  if (!a1)
  {
    CFStringRef v10 = @"amfdr is NULL";
LABEL_13:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_CopyDevRefKeySignature", v10, v12);
    goto LABEL_18;
  }
  if (!theData)
  {
    CFStringRef v10 = @"csrData is NULL";
    goto LABEL_13;
  }
  uint64_t BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if (!Length)
  {
    CFStringRef v11 = @"csrData byte length is 0";
LABEL_17:
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_CopyDevRefKeySignature", v11, v12);
    goto LABEL_18;
  }
  if (AMFDRCryptoCreateDataSignature(66050, (uint64_t)BytePtr, Length, (void **)&v13, &v12, a1) == 100)
  {
    if (v13)
    {
      if (v12)
      {
        CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v13, v12);
        goto LABEL_8;
      }
      CFStringRef v11 = @"sig_len is 0";
      goto LABEL_17;
    }
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_CopyDevRefKeySignature", @"sig byte pointer is NULL", v12);
  }
LABEL_18:
  CFDataRef v8 = 0;
LABEL_8:
  if (v13) {
    free(v13);
  }
  return v8;
}

CFDataRef AMFDROfflineBlobVerify(uint64_t a1, const __CFData *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  CFDataRef theData = 0;
  uint64_t v37 = -1;
  CFTypeRef v38 = 0;
  memset(length, 0, sizeof(length));
  *(void *)&v35[1] = 0;
  v35[0] = 0;
  *(void *)&v34[1] = 0;
  v34[0] = 0;
  if (!a1)
  {
    CFStringRef v31 = @"amfdr is NULL";
LABEL_51:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", v31, v33);
    AMFDRSetStat((CFMutableDictionaryRef *)a1, @"FDRCAFail", 1);
    CFDictionaryRef v24 = 0;
    CFStringRef v23 = 0;
    CFTypeRef v21 = 0;
    CFDataRef v28 = 0;
    goto LABEL_33;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v31 = @"amfdr->optionsDict is NULL";
    goto LABEL_51;
  }
  if (!a2)
  {
    CFStringRef v31 = @"offlineBlob is NULL";
    goto LABEL_51;
  }
  CFStringRef v6 = _AMFDRCreateUrlWithKey(a1, @"CAURL", @"ca/authorize", 0, 0);
  if (!v6)
  {
    CFStringRef v31 = @"serverURL is NULL";
    goto LABEL_51;
  }
  CFURLRef v7 = (const __CFURL *)v6;
  uint64_t BytePtr = CFDataGetBytePtr(a2);
  unsigned int v9 = CFDataGetLength(a2);
  if (AMFDRDecodeOfflineBlob((uint64_t)BytePtr, v9, &length[1], length, &v35[1], v35, &v34[1], v34))
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", @"AMFDRDecodeOfflineBlob failed", v33);
    CFDataRef v11 = 0;
LABEL_54:
    CFDataRef v13 = 0;
LABEL_56:
    CFDataRef v15 = 0;
LABEL_59:
    CFTypeRef v21 = 0;
    CFStringRef v23 = 0;
    CFDictionaryRef v24 = 0;
    goto LABEL_60;
  }
  CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v11 = CFDataCreate(v10, *(const UInt8 **)&length[1], length[0]);
  if (!v11)
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", @"Unable to create csrDERData", v33);
    goto LABEL_54;
  }
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v13 = CFDataCreate(v12, *(const UInt8 **)&v35[1], v35[0]);
  if (!v13)
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", @"Unable to create csrSigData", v33);
    goto LABEL_56;
  }
  CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v15 = CFDataCreate(v14, *(const UInt8 **)&v34[1], v34[0]);
  if (!v15)
  {
    CFStringRef v30 = @"Unable to create attestationData";
    goto LABEL_58;
  }
  CFAllocatorRef v16 = CFGetAllocator((CFTypeRef)a1);
  if ((_AMFDRSupportBase64Encode((uint64_t)v16, (uint64_t)v13, (uint64_t)&cf) & 1) == 0) {
    goto LABEL_46;
  }
  if (!cf)
  {
    CFStringRef v27 = @"base64CsrGidSignature is NULL";
    goto LABEL_25;
  }
  CFAllocatorRef v17 = CFGetAllocator((CFTypeRef)a1);
  if ((_AMFDRSupportBase64Encode((uint64_t)v17, (uint64_t)v15, (uint64_t)&v38) & 1) == 0)
  {
LABEL_46:
    CFStringRef v30 = @"_AMFDRSupportBase64Encode failed";
LABEL_58:
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", v30, v33);
    goto LABEL_59;
  }
  if (!v38)
  {
    CFStringRef v27 = @"base64Attestation is NULL";
    goto LABEL_25;
  }
  CFTypeID v18 = *(void **)(a1 + 136);
  if (*v18 < 0x59uLL
    || (CFDataRef v19 = (uint64_t (*)(uint64_t, void))v18[11]) == 0
    || (uint64_t v20 = v19(a1, *(void *)(a1 + 144))) == 0)
  {
    CFStringRef v27 = @"clientId is NULL";
LABEL_25:
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", v27, v33);
    CFDictionaryRef v24 = 0;
    CFStringRef v23 = 0;
    CFTypeRef v21 = 0;
    goto LABEL_26;
  }
  CFTypeRef v21 = (void *)v20;
  CFStringRef SikInstanceStringInternal = AMFDRDataCreateSikInstanceStringInternal((__CFString *)a1, 0, v20);
  CFStringRef v23 = SikInstanceStringInternal;
  if (SikInstanceStringInternal)
  {
    keys[0] = xmmword_2642D1698;
    keys[1] = *(_OWORD *)off_2642D16A8;
    CFTypeID v43 = @"x-fdr-device-certificate-version";
    values[0] = (void *)cf;
    values[1] = (void *)v38;
    values[2] = v21;
    values[3] = (void *)SikInstanceStringInternal;
    values[4] = @"2";
    CFDictionaryRef v24 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)keys, (const void **)values, 5, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v24)
    {
      CFStringRef v32 = @"Unable to create HTTP header extension dictionary";
LABEL_70:
      AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", v32, v33);
      goto LABEL_26;
    }
    if (_AMFDRHttpRequestSendSyncNoRetry(a1, v7, @"OfflineBlobVerify", @"POST", @"application/x-pem-file", v24, v11, (CFTypeRef *)&theData, 0, 1, 0, 0, &v37, a3))
    {
      if (theData)
      {
        if (v37 <= 0)
        {
          CFStringRef v32 = @"httpStatus is negative";
        }
        else
        {
          CFDataGetBytePtr(theData);
          CFDataGetLength(theData);
          if (!AMSupportRsaCreateDataFromPem())
          {
            CFAllocatorRef v25 = CFGetAllocator((CFTypeRef)a1);
            CFDataRef v26 = CFDataCreate(v25, 0, 0);
            if (!v26) {
              AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", @"Unable to create outCert", v33);
            }
            goto LABEL_27;
          }
          CFStringRef v32 = @"failed to convert certificate";
        }
      }
      else
      {
        CFStringRef v32 = @"signedCert is NULL";
      }
      goto LABEL_70;
    }
    AMFDRErrorPushInternal(a3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", @"AMFDRPermissionsRequest failed", v33);
LABEL_60:
    AMFDRSetStat((CFMutableDictionaryRef *)a1, @"FDRCAFail", 1);
    CFRelease(v7);
    CFDataRef v26 = 0;
    CFDataRef v28 = 0;
    if (!v11) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDROfflineBlobVerify", @"clientIdSik is NULL", v33);
  CFDictionaryRef v24 = 0;
LABEL_26:
  CFDataRef v26 = 0;
LABEL_27:
  CFRelease(v7);
LABEL_28:
  CFRelease(v11);
  CFDataRef v28 = v26;
LABEL_29:
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_33:
  if (theData)
  {
    CFRelease(theData);
    CFDataRef theData = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v38)
  {
    CFRelease(v38);
    CFTypeRef v38 = 0;
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v28;
}

__CFString *_AMFDRCreateUrlWithKey(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  char v5 = (__CFString *)a1;
  if (!a1)
  {
    AMSupportLogInternal();
    return v5;
  }
  if (!a2) {
    goto LABEL_14;
  }
  if (!a3) {
    goto LABEL_14;
  }
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (!Value) {
    goto LABEL_14;
  }
  CFAllocatorRef v10 = Value;
  if (a4)
  {
    if (a5)
    {
      CFStringRef InstanceString = AMFDRDataCreateInstanceString(v5, a4, a5);
      if (InstanceString)
      {
        CFStringRef v12 = InstanceString;
        CFGetAllocator(v5);
        AMSupportHttpUriEscapeString();
        AMSupportLogInternal();
        char v5 = 0;
        CFRelease(v12);
        return v5;
      }
    }
LABEL_14:
    AMSupportLogInternal();
    return 0;
  }
  CFAllocatorRef v15 = CFGetAllocator(v5);
  CFStringRef v16 = CFStringCreateWithFormat(v15, 0, @"%@/%@", v10, a3);
  if (!v16) {
    goto LABEL_14;
  }
  CFAllocatorRef v13 = CFGetAllocator(v5);
  char v5 = (__CFString *)CFURLCreateWithString(v13, v16, 0);
  if (!v5) {
    AMSupportLogInternal();
  }
  CFRelease(v16);
  return v5;
}

uint64_t _AMFDRHttpRequestSendSyncNoRetry(uint64_t cf, const __CFURL *a2, uint64_t a3, __CFString *a4, const __CFString *a5, const void *a6, const __CFData *a7, CFTypeRef *a8, CFTypeRef *a9, char a10, uint64_t a11, char a12, uint64_t *a13, uint64_t a14)
{
  void context[4] = *MEMORY[0x263EF8340];
  CFDictionaryRef theDict = 0;
  CFTypeRef cfa = 0;
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  CFIndex v58 = (__CFString *)0xAAAAAAAAAAAAAAAALL;
  v55[1] = a11;
  uint64_t v56 = -1;
  v55[0] = 0xAAAAAAAAAAAAAAAALL;
  LOBYTE(v55[0]) = a10;
  if (!cf)
  {
    CFStringRef v52 = @"amfdr is NULL";
LABEL_78:
    AMFDRErrorPushInternal(a14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", v52, v53);
    uint64_t v49 = 0;
    CFStringRef v16 = 0;
LABEL_84:
    CFStringRef v17 = 0;
    goto LABEL_85;
  }
  if (!*(void *)(cf + 16))
  {
    CFStringRef v52 = @"amfdr->optionsDict is NULL";
    goto LABEL_78;
  }
  CFURLRef v15 = a2;
  if (!a2)
  {
    AMFDRErrorPushInternal(a14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"serverURL is NULL", v53);
    uint64_t v49 = 0;
    CFStringRef v16 = 0;
    CFStringRef v17 = 0;
LABEL_86:
    CFStringRef v27 = 0;
LABEL_87:
    CFDataRef v28 = 0;
    goto LABEL_60;
  }
  CFStringRef v16 = a4;
  if (!a4)
  {
    AMFDRErrorPushInternal(a14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"action is NULL", v53);
LABEL_83:
    uint64_t v49 = 0;
    goto LABEL_84;
  }
  CFStringRef v17 = a5;
  if (!a5)
  {
    AMFDRErrorPushInternal(a14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"contentType is NULL", v53);
    uint64_t v49 = 0;
    CFStringRef v16 = 0;
LABEL_85:
    CFURLRef v15 = 0;
    goto LABEL_86;
  }
  if (a3)
  {
    uint64_t v61 = -1;
    context[0] = CFGetAllocator((CFTypeRef)cf);
    context[1] = v15;
    void context[2] = a3;
    void context[3] = &v61;
    if (_AMFDRGetHttpRequestStatisticsQueue_onceToken != -1) {
      dispatch_once(&_AMFDRGetHttpRequestStatisticsQueue_onceToken, &__block_literal_global_2);
    }
    dispatch_sync_f((dispatch_queue_t)_AMFDRGetHttpRequestStatisticsQueue_queue, context, (dispatch_function_t)___thr_AMFDRHttpRequestStatisticsRecord);
  }
  CFAllocatorRef v21 = CFGetAllocator((CFTypeRef)cf);
  Request = CFHTTPMessageCreateRequest(v21, v16, v15, (CFStringRef)*MEMORY[0x263EFC708]);
  CFStringRef v16 = (__CFString *)Request;
  if (!Request)
  {
    AMFDRErrorPushInternal(a14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"httpRequest allocation failed", v53);
    goto LABEL_83;
  }
  CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Type", v17);
  CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)cf);
  if (a7) {
    CFIndex Length = CFDataGetLength(a7);
  }
  else {
    CFIndex Length = 0;
  }
  CFStringRef v17 = CFStringCreateWithFormat(v23, 0, @"%lu", Length);
  if (!v17)
  {
    AMFDRErrorPushInternal(a14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"contentLengthStr allocation failed", v53);
    uint64_t v49 = 0;
    goto LABEL_85;
  }
  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v16, @"Content-Length", v17);
  if (AMFDROptionsGetBooleanValue(cf, @"EnableCookie", 0))
  {
    CFStringRef v25 = *(const __CFString **)(cf + 24);
    if (v25) {
      CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v16, @"Cookie", v25);
    }
    else {
      AMSupportLogInternal();
    }
  }
  CFURLRef v15 = (const __CFURL *)AMFDRCopyClientId(cf);
  if (!v15)
  {
    AMFDRErrorPushInternal(a14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"clientId not found in optionsDict", v53);
    uint64_t v49 = 0;
    goto LABEL_86;
  }
  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v16, @"x-fdr-client-id", (CFStringRef)v15);
  CFAllocatorRef v26 = CFGetAllocator((CFTypeRef)cf);
  CFStringRef v27 = CFStringCreateWithFormat(v26, 0, @"%d", 2);
  if (!v27)
  {
    AMFDRErrorPushInternal(a14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"clientVersion is NULL", v53);
    uint64_t v49 = 0;
    goto LABEL_87;
  }
  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v16, @"x-fdr-client-version", v27);
  CFDataRef v28 = AMFDRCopyLibraryVersionString();
  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v16, @"x-fdr-libFDR-tag", v28);
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"HardwareModel");
  if (_AMFDRHttpRequestSendSyncNoRetry_onceToken != -1) {
    dispatch_once(&_AMFDRHttpRequestSendSyncNoRetry_onceToken, &__block_literal_global_964);
  }
  if (Value) {
    CFStringRef v30 = Value;
  }
  else {
    CFStringRef v30 = (const __CFString *)_AMFDRHttpRequestSendSyncNoRetry_hardwareModel;
  }
  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v16, @"x-fdr-hardware-model", v30);
  unint64_t v57 = (unint64_t)v16;
  CFIndex v58 = @"x-fdr-metadata-";
  CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"Metadata");
  if (v31)
  {
    CFDictionaryRef v32 = v31;
    CFTypeID v33 = CFGetTypeID(v31);
    if (v33 != CFDictionaryGetTypeID()) {
      goto LABEL_75;
    }
    CFDictionaryApplyFunction(v32, (CFDictionaryApplierFunction)_InsertHeader, &v57);
  }
  unint64_t v57 = (unint64_t)v16;
  CFIndex v58 = @"x-fdr-user-metadata-";
  CFDictionaryRef v34 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"UserMetadata");
  if (!v34) {
    goto LABEL_32;
  }
  CFDictionaryRef v35 = v34;
  CFTypeID v36 = CFGetTypeID(v34);
  if (v36 != CFDictionaryGetTypeID())
  {
LABEL_75:
    CFStringRef v51 = @"metadataDict is of incorrect type";
LABEL_94:
    AMFDRErrorPushInternal(a14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", v51, v53);
    uint64_t v49 = 0;
    goto LABEL_60;
  }
  CFDictionaryApplyFunction(v35, (CFDictionaryApplierFunction)_InsertHeader, &v57);
LABEL_32:
  CFIndex v58 = &stru_26C899958;
  if (!a6) {
    goto LABEL_35;
  }
  CFTypeID v37 = CFGetTypeID(a6);
  if (v37 != CFDictionaryGetTypeID())
  {
    CFStringRef v51 = @"httpExtHeaders is of incorrect type";
    goto LABEL_94;
  }
  CFDictionaryApplyFunction((CFDictionaryRef)a6, (CFDictionaryApplierFunction)_InsertHeader, &v57);
LABEL_35:
  CFHTTPMessageSetBody((CFHTTPMessageRef)v16, a7);
  SInt32 v38 = _AMFDRGetHttpTimeout(cf);
  unsigned int v39 = 3;
  LODWORD(context[0]) = 3;
  CFDictionaryRef v40 = *(const __CFDictionary **)(cf + 16);
  if (v40)
  {
    CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v40, @"HTTPMaxAttempts");
    if (!v41
      || (CFNumberRef v42 = v41, v43 = CFGetTypeID(v41), v43 != CFNumberGetTypeID())
      || (unsigned int v39 = 3, CFNumberGetValue(v42, kCFNumberSInt32Type, context)) && (unsigned int v39 = context[0]) == 0)
    {
      unsigned int v39 = 3;
    }
  }
  if (a12) {
    uint64_t v44 = _AMFDRHttpAuthenticationCallback;
  }
  else {
    uint64_t v44 = 0;
  }
  if (_AMFDRHttpMessageSendSync((CFDictionaryRef *)cf, (CFHTTPMessageRef)v16, &cfa, (CFTypeRef *)&theDict, &v56, v38, v39, (uint64_t (*)(CFDictionaryRef *, __CFHTTPMessage *, __CFDictionary *, uint64_t, uint64_t))_AMFDRHttpMessagePreAction, (uint64_t (*)(CFDictionaryRef *, CFHTTPMessageRef, CFDictionaryRef *, CFTypeRef *, uint64_t *, void, CFErrorRef *))v44, (uint64_t)v55, a14))
  {
    if (theDict)
    {
      if (AMFDROptionsGetBooleanValue(cf, @"EnableCookie", 0))
      {
        CFAllocatorRef v45 = CFDictionaryGetValue(theDict, @"Set-Cookie");
        if (v45)
        {
          CFStringRef v46 = v45;
          CFAllocatorRef v47 = *(const void **)(cf + 24);
          if (v47)
          {
            CFRelease(v47);
            *(void *)(cf + 24) = 0;
          }
          *(void *)(cf + 24) = CFRetain(v46);
        }
      }
      if (a8 && cfa) {
        *a8 = CFRetain(cfa);
      }
      if (a9) {
        *a9 = CFRetain(theDict);
      }
      CFIndex v48 = v56;
      *a13 = v56;
      if ((v48 & 0xFFFFFFFFFFFFFFFDLL) == 0xC8)
      {
        uint64_t v49 = 1;
        goto LABEL_60;
      }
      _AMFDRHttpHandleHeaderMessage((CFMutableDictionaryRef *)cf, theDict, v48, (const __CFData *)cfa, a14);
    }
    else
    {
      AMFDRErrorPushInternal(a14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"httpResponseHeader is NULL", v53);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a14, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSyncNoRetry", @"_AMFDRHttpMessageSendSync failed", v53);
  }
  uint64_t v49 = 0;
LABEL_60:
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (theDict)
  {
    CFRelease(theDict);
    CFDictionaryRef theDict = 0;
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v49;
}

BOOL AMFDRDecomposePermissionString(const __CFAllocator *a1, const __CFString *a2, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  if (!a2 || (CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, a2, @";")) == 0)
  {
    AMSupportLogInternal();
    return 0;
  }
  CFArrayRef v10 = ArrayBySeparatingStrings;
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count <= 0)
  {
    AMSupportLogInternal();
    CFDictionaryRef v31 = 0;
    CFMutableArrayRef v14 = 0;
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFIndex v12 = Count;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      CFMutableArrayRef v14 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
      if (v14)
      {
        CFMutableArrayRef v15 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
        if (v15)
        {
          CFTypeID v33 = a3;
          CFDictionaryRef v34 = a4;
          CFDictionaryRef v35 = a5;
          CFTypeID v36 = v15;
          CFTypeID v37 = v14;
          CFMutableArrayRef theArray = Mutable;
          BOOL v16 = 0;
          CFIndex v17 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v17);
            CFArrayRef v19 = CFStringCreateArrayBySeparatingStrings(a1, ValueAtIndex, @"/");
            if (!v19)
            {
              AMSupportLogInternal();
              CFMutableArrayRef v14 = v37;
              CFMutableArrayRef Mutable = theArray;
              CFDictionaryRef v31 = v36;
              goto LABEL_23;
            }
            CFArrayRef v20 = v19;
            if (CFArrayGetCount(v19) <= 1)
            {
              AMSupportLogInternal();
              CFArrayRef v25 = 0;
              goto LABEL_34;
            }
            CFArrayRef v21 = v10;
            CFTypeRef v22 = CFArrayGetValueAtIndex(v20, 0);
            CFStringRef v23 = (const __CFString *)CFArrayGetValueAtIndex(v20, 1);
            CFArrayRef v24 = CFStringCreateArrayBySeparatingStrings(a1, v23, @":");
            CFArrayRef v25 = v24;
            if (!v24) {
              break;
            }
            CFIndex v26 = CFArrayGetCount(v24);
            if ((unint64_t)(v26 - 3) <= 0xFFFFFFFFFFFFFFFDLL) {
              break;
            }
            CFIndex v27 = v26;
            CFStringRef v28 = (const __CFString *)CFArrayGetValueAtIndex(v25, 0);
            CFStringRef v29 = v28;
            if (v27 == 1)
            {
              CFStringRef v30 = @"*";
              if (CFStringCompare(v28, @"*", 0)) {
                break;
              }
            }
            else
            {
              CFStringRef v30 = (__CFString *)CFArrayGetValueAtIndex(v25, 1);
            }
            CFArrayAppendValue(theArray, v22);
            CFArrayAppendValue(v37, v29);
            CFArrayAppendValue(v36, v30);
            CFRelease(v20);
            CFRelease(v25);
            BOOL v16 = ++v17 >= v12;
            CFArrayRef v10 = v21;
            if (v12 == v17)
            {
              CFMutableArrayRef Mutable = theArray;
              if (v33) {
                *CFTypeID v33 = CFRetain(theArray);
              }
              CFDictionaryRef v31 = v36;
              CFMutableArrayRef v14 = v37;
              if (v34) {
                *CFDictionaryRef v34 = CFRetain(v37);
              }
              if (v35) {
                *CFDictionaryRef v35 = CFRetain(v36);
              }
              goto LABEL_23;
            }
          }
          AMSupportLogInternal();
          CFArrayRef v10 = v21;
LABEL_34:
          CFMutableArrayRef v14 = v37;
          CFMutableArrayRef Mutable = theArray;
          CFDictionaryRef v31 = v36;
          CFRelease(v10);
          CFRelease(v20);
          CFArrayRef v10 = v25;
          if (v25) {
            goto LABEL_23;
          }
          goto LABEL_24;
        }
      }
      AMSupportLogInternal();
      CFDictionaryRef v31 = 0;
    }
    else
    {
      AMSupportLogInternal();
      CFDictionaryRef v31 = 0;
      CFMutableArrayRef v14 = 0;
    }
  }
  BOOL v16 = 0;
LABEL_23:
  CFRelease(v10);
LABEL_24:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v31) {
    CFRelease(v31);
  }
  return v16;
}

uint64_t _AMFDRHttpMultiSealingCallback(const UInt8 *a1, unsigned int a2, const UInt8 *a3, unsigned int a4, unint64_t a5, unsigned int a6, int a7, char *a8, int a9, const UInt8 *a10, unsigned int a11, uint64_t a12)
{
  CFNumberRef v41 = 0;
  if (!a1
    || !a2
    || (CFDictionaryRef v13 = *(const __CFDictionary **)(a12 + 16)) == 0
    || (CFArrayRef v20 = *(const void **)a12,
        CFDictionaryRef v19 = *(const __CFDictionary **)(a12 + 8),
        CFArrayRef v21 = *(CFTypeRef **)(a12 + 24),
        CFDictionaryGetCount(*(CFDictionaryRef *)(a12 + 16)) >= 16)
    || !v20
    || !v19
    || CFDictionaryGetCount(v19) >= 16)
  {
    AMSupportLogInternal();
    uint64_t v27 = 1;
    goto LABEL_49;
  }
  CFAllocatorRef v22 = CFGetAllocator(v20);
  CFStringRef v23 = CFStringCreateWithBytes(v22, a1, a2, 0x8000100u, 0);
  if (!v23)
  {
    AMSupportLogInternal();
LABEL_55:
    uint64_t v27 = 2;
    goto LABEL_49;
  }
  CFStringRef cf = v23;
  CFStringRef v24 = (const __CFString *)_AMFDRDataHTTPConvertMultiResponseKey(v20, v23);
  if (!v24)
  {
    AMSupportLogInternal();
    CFRelease(cf);
    goto LABEL_55;
  }
  CFStringRef v25 = v24;
  if (v21 && !*v21 && CFStringHasPrefix(v24, @"sreq")) {
    CFTypeRef *v21 = CFRetain(v25);
  }
  AMSupportLogInternal();
  if (!a5)
  {
    uint64_t v27 = 2;
    goto LABEL_18;
  }
  uint64_t v26 = AMFDRDecodeMetadata(a5, a6, (uint64_t (*)(void, void, void, void, uint64_t))_AMFDRHttpMetadataLog, 0);
  uint64_t v27 = 0;
  if (!v26)
  {
LABEL_18:
    if (CFDictionaryGetValue(v19, v25) || CFDictionaryGetValue(v13, v25)) {
      goto LABEL_63;
    }
    if (a7)
    {
      if (!a8)
      {
        if (a3 && a4)
        {
          CFAllocatorRef v31 = CFGetAllocator(v20);
          CFDataRef v32 = CFDataCreate(v31, a3, a4);
          CFDataRef v29 = v32;
          if (v32)
          {
            CFDataGetLength(v32);
            AMSupportLogInternal();
            CFDictionarySetValue(v19, v25, v29);
            uint64_t v27 = 0;
          }
          else
          {
            AMSupportLogInternal();
          }
          goto LABEL_26;
        }
LABEL_63:
        AMSupportLogInternal();
        CFDataRef v29 = 0;
        CFStringRef v30 = 0;
        uint64_t v27 = 1;
        goto LABEL_45;
      }
    }
    else if (!a3)
    {
      if (a4) {
        goto LABEL_63;
      }
      if (a8 && a9 == 1)
      {
        if (a10
          && a11
          && (CFAllocatorRef v33 = CFGetAllocator(v20), (v34 = CFStringCreateWithBytes(v33, a10, a11, 0x8000100u, 0)) != 0))
        {
          CFStringRef v30 = v34;
          AMSupportLogInternal();
          if ((*a8 - 1) >= 5u) {
            CFIndex v35 = 799;
          }
          else {
            CFIndex v35 = (*a8 - 1) + 701;
          }
          AMFDRErrorPushInternal((uint64_t)&v41, v35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMultiSealingCallback", @"multi-response error %d : %@", *a8);
        }
        else
        {
          AMSupportLogInternal();
          if ((*a8 - 1) >= 5u) {
            CFIndex v36 = 799;
          }
          else {
            CFIndex v36 = (*a8 - 1) + 701;
          }
          AMFDRErrorPushInternal((uint64_t)&v41, v36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMultiSealingCallback", @"multi-response error %d without an error message", *a8);
          CFStringRef v30 = 0;
        }
        if (v41)
        {
          CFDictionarySetValue(v13, v25, v41);
          uint64_t v27 = 0;
        }
        else
        {
          AMSupportLogInternal();
        }
        CFDataRef v29 = 0;
        goto LABEL_45;
      }
    }
    AMSupportLogInternal();
    CFDataRef v29 = 0;
LABEL_26:
    CFStringRef v30 = 0;
    goto LABEL_45;
  }
  uint64_t v28 = v26;
  AMSupportLogInternal();
  CFDataRef v29 = 0;
  CFStringRef v30 = 0;
  uint64_t v27 = v28;
LABEL_45:
  CFRelease(cf);
  CFRelease(v25);
  if (v29) {
    CFRelease(v29);
  }
  if (v30) {
    CFRelease(v30);
  }
LABEL_49:
  if (v41) {
    CFRelease(v41);
  }
  return v27;
}

CFTypeRef _AMFDRDataHTTPConvertMultiResponseKey(CFTypeRef cf, const __CFString *a2)
{
  if (!cf)
  {
    AMSupportLogInternal();
    CFTypeRef v16 = 0;
    goto LABEL_22;
  }
  if (!a2) {
    goto LABEL_23;
  }
  CFAllocatorRef v4 = CFGetAllocator(cf);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v4, 0, a2);
  if (!MutableCopy) {
    goto LABEL_23;
  }
  if (!AMFDRDataInstanceUseSikFormat((uint64_t)cf))
  {
    if ((*(unsigned char *)(*((void *)cf + 17) + 8) & 0x10) != 0)
    {
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], MutableCopy, @":");
      if (ArrayBySeparatingStrings)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
        if (ValueAtIndex)
        {
          CFStringRef v13 = ValueAtIndex;
          CFIndex Length = CFStringGetLength(ValueAtIndex);
          if ((unint64_t)(Length - 5) > 0xFFFFFFFFFFFFFFFDLL)
          {
            CFIndex v15 = Length;
            if (Length != 3 || CFEqual(@"TS2", v13))
            {
              v24.location = v15;
              v24.CFIndex length = 1;
              if (CFStringFindAndReplace(MutableCopy, @":", @"-", v24, 0) == 1) {
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
    else
    {
      v23.location = 4;
      v23.CFIndex length = 1;
      if (CFStringFindAndReplace(MutableCopy, @":", @"-", v23, 0) == 1) {
        goto LABEL_21;
      }
    }
LABEL_23:
    AMSupportLogInternal();
    CFTypeRef v16 = 0;
    goto LABEL_22;
  }
  result.location = 0xAAAAAAAAAAAAAAAALL;
  result.CFIndex length = 0xAAAAAAAAAAAAAAAALL;
  v21.location = 4;
  v21.CFIndex length = 5;
  if (CFStringFindAndReplace(MutableCopy, @":sik-", @"-", v21, 0) != 1)
  {
    v20.location = 0;
    v20.CFIndex length = 16;
    if (!CFStringFindWithOptions(MutableCopy, @"minimal-manifest", v20, 8uLL, &result)) {
      goto LABEL_23;
    }
    v22.location = 16;
    v22.CFIndex length = 5;
    if (CFStringFindAndReplace(MutableCopy, @":sik-", @"-", v22, 0) != 1) {
      goto LABEL_23;
    }
  }
  CFArrayRef v6 = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], MutableCopy, @"-");
  CFArrayRef v7 = v6;
  if (!v6) {
    goto LABEL_23;
  }
  CFIndex Count = CFArrayGetCount(v6);
  if (Count <= 2) {
    goto LABEL_23;
  }
  CFStringRef v9 = (const __CFString *)CFArrayGetValueAtIndex(v7, Count - 1);
  if (!v9) {
    goto LABEL_23;
  }
  CFIndex v10 = CFStringGetLength(v9);
  v19.location = CFStringGetLength(MutableCopy) + ~v10;
  v19.CFIndex length = v10 + 1;
  CFStringDelete(MutableCopy, v19);
LABEL_21:
  CFTypeRef v16 = CFRetain(MutableCopy);
LABEL_22:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v16;
}

uint64_t _AMFDRHttpMetadataLog(UInt8 *bytes, CFIndex numBytes, const UInt8 *a3, unsigned int a4, void *a5)
{
  if (!bytes)
  {
    AMSupportLogInternal();
    return 1;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v9 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, numBytes, 0x8000100u, 0);
  if (!v9)
  {
    AMSupportLogInternal();
    return 2;
  }
  CFStringRef v10 = v9;
  if (a3)
  {
    a3 = (const UInt8 *)CFStringCreateWithBytes(v8, a3, a4, 0x8000100u, 0);
    if (!a3)
    {
      AMSupportLogInternal();
      CFRelease(v10);
      return 2;
    }
  }
  AMSupportLogInternal();
  if (!a5) {
    goto LABEL_13;
  }
  if (!a3 || !*a5 || CFStringCompare(v10, @"x-fdr-jmet-data-hash", 0))
  {
    if (a3 && a5[1])
    {
      if (CFStringCompare(v10, @"x-fdr-metadata-asid", 0))
      {
        CFStringRef Copy = 0;
      }
      else
      {
        CFStringRef Copy = CFStringCreateCopy(v8, (CFStringRef)a3);
        CFStringRef v13 = (CFTypeRef *)a5[1];
        if (*v13)
        {
          CFRelease(*v13);
          CFStringRef v13 = (CFTypeRef *)a5[1];
        }
        *CFStringRef v13 = Copy;
        CFMutableArrayRef v14 = *(const void **)a5[1];
        if (v14) {
          CFRetain(v14);
        }
      }
      uint64_t v12 = 0;
      goto LABEL_21;
    }
LABEL_13:
    CFRelease(v10);
    uint64_t v12 = 0;
    CFStringRef Copy = 0;
    if (!a3) {
      return v12;
    }
    goto LABEL_22;
  }
  AMSupportCopyDataFromHexString();
  AMSupportLogInternal();
  CFStringRef Copy = 0;
  uint64_t v12 = 2;
LABEL_21:
  CFRelease(v10);
LABEL_22:
  CFRelease(a3);
  if (Copy) {
    CFRelease(Copy);
  }
  return v12;
}

CFDataRef AMFDRDataHTTPCreateMultiRequest(__CFString *a1, unsigned int a2, CFArrayRef theArray, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, const __CFArray *a7, int a8, uint64_t a9)
{
  CFStringRef v55 = 0;
  unsigned int v54 = 0;
  char v53 = 0;
  int v52 = 0;
  CFIndex v50 = 0;
  uint64_t v51 = 0;
  if (!a1)
  {
    CFStringRef v39 = @"amfdr is NULL";
    goto LABEL_83;
  }
  CFArrayRef v9 = theArray;
  if (!theArray)
  {
    CFStringRef v39 = @"dataClassArray is NULL";
    goto LABEL_83;
  }
  if (!a4)
  {
    CFStringRef v39 = @"dataInstanceArray is NULL";
    goto LABEL_83;
  }
  if (a2 > 0x10 || ((1 << a2) & 0x10804) == 0)
  {
    if (a5 || !a8) {
      goto LABEL_7;
    }
    CFStringRef v39 = @"dataInstanceArray is NULL and signData is specified";
LABEL_83:
    AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", v39, v40);
    goto LABEL_84;
  }
  if (!a5)
  {
    CFStringRef v39 = @"MultiRequestActionPut but valueDataArray is NULL, or other action code but valueDataArray has value";
    goto LABEL_83;
  }
LABEL_7:
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v39 = @"Nothing to compose multirequest";
    goto LABEL_83;
  }
  int v13 = AMFDREncodeMultiRequestBegin((uint64_t)&v51, a2);
  if (!v13)
  {
    CFIndex v14 = 0;
    CFStringRef InstanceString = 0;
    CFStringRef v16 = 0;
    CFStringRef ValueAtIndex = 0;
    CFArrayRef v42 = v9;
    CFArrayRef v43 = a6;
    while (1)
    {
      if (v16) {
        CFRelease(v16);
      }
      if (InstanceString) {
        CFRelease(InstanceString);
      }
      if (ValueAtIndex) {
        CFRelease(ValueAtIndex);
      }
      if (v53)
      {
        free(v53);
        char v53 = 0;
      }
      int v52 = 0;
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v14);
      CFTypeID v18 = CFArrayGetValueAtIndex(a4, v14);
      if (!ValueAtIndex)
      {
        AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"dataClassStr is NULL", v40);
        CFDataRef v22 = 0;
        goto LABEL_85;
      }
      CFRange v19 = v18;
      if (!CFStringGetLength(ValueAtIndex))
      {
        CFStringRef v39 = @"dataClassStr length is 0";
        goto LABEL_83;
      }
      if (!v19)
      {
        CFStringRef v39 = @"dataInstanceStr is NULL";
        goto LABEL_83;
      }
      if (a6)
      {
        CFRange v20 = (__CFString *)CFArrayGetValueAtIndex(a6, v14);
        if (!v20)
        {
          CFStringRef v39 = @"options is NULL";
          goto LABEL_83;
        }
      }
      else
      {
        CFRange v20 = 0;
      }
      CFStringRef InstanceString = AMFDRDataCreateInstanceString(a1, (uint64_t)ValueAtIndex, v19);
      if (!InstanceString)
      {
        AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"dataInstanceToReq is NULL", v40);
        CFDataRef v22 = 0;
        CFStringRef ValueAtIndex = 0;
        CFStringRef v16 = 0;
        goto LABEL_60;
      }
      CFAllocatorRef v21 = CFGetAllocator(a1);
      CFStringRef v16 = CFStringCreateWithFormat(v21, 0, @"%@:%@", ValueAtIndex, InstanceString);
      CFRelease(InstanceString);
      if (!v16) {
        break;
      }
      CFDataRef v22 = 0;
      if (a2 <= 0x10 && ((1 << a2) & 0x10804) != 0)
      {
        CFDataRef v22 = (const __CFData *)CFArrayGetValueAtIndex(a5, v14);
        if (!v22)
        {
          AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"valueData is NULL", v40);
          goto LABEL_82;
        }
      }
      CFAllocatorRef v23 = CFGetAllocator(a1);
      CFStringRef InstanceString = CFStringCreateExternalRepresentation(v23, v16, 0x8000100u, 0x5Fu);
      if (!InstanceString)
      {
        AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"currDataInstanceData is NULL", v40);
        CFDataRef v22 = 0;
        CFStringRef ValueAtIndex = 0;
        goto LABEL_60;
      }
      if (a8)
      {
        CFStringRef ValueAtIndex = (const __CFString *)AMFDRDataCopyForPut((uint64_t)a1, ValueAtIndex, v19, v22, v20, a9);
        CFDataRef v22 = (const __CFData *)ValueAtIndex;
        if (!ValueAtIndex)
        {
          AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"AMFDRDataCopyForPut failed", v40);
          goto LABEL_60;
        }
      }
      else
      {
        CFStringRef ValueAtIndex = 0;
      }
      if (a7)
      {
        CFDictionaryRef v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(a7, v14);
        if (!v24)
        {
          AMFDRErrorPushInternal(a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"metadata is NULL", v40);
          goto LABEL_88;
        }
        if (a2 <= 0x10 && ((1 << a2) & 0x10880) != 0)
        {
          CFDictionaryRef v25 = v24;
          CFTypeID v26 = CFGetTypeID(v24);
          if (v26 == CFDictionaryGetTypeID() && CFDictionaryGetCount(v25) >= 1)
          {
            if (AMFDREncodeMetadataBegin(&v50)) {
              goto LABEL_80;
            }
            context[0] = v50;
            context[1] = a9;
            uint64_t v49 = &stru_26C899958;
            if (v20)
            {
              CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)v20, @"MetadataType");
              if (Value)
              {
                uint64_t v28 = Value;
                int v29 = CFEqual(Value, @"System");
                CFStringRef v30 = @"x-fdr-metadata-";
                if (!v29)
                {
                  int v31 = CFEqual(v28, @"User");
                  CFStringRef v30 = &stru_26C899958;
                  if (v31) {
                    CFStringRef v30 = @"x-fdr-user-metadata-";
                  }
                }
                uint64_t v49 = v30;
              }
            }
            CFDictionaryApplyFunction(v25, (CFDictionaryApplierFunction)_addMetaDataRecord, context);
            if (AMFDREncodeMetadataEnd(&v50, &v53, &v52))
            {
LABEL_80:
              AMSupportLogInternal();
              goto LABEL_88;
            }
          }
        }
      }
      uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)InstanceString);
      int Length = CFDataGetLength((CFDataRef)InstanceString);
      CFStringRef v34 = 0;
      if (a2 <= 0x10 && ((1 << a2) & 0x10804) != 0) {
        CFStringRef v34 = CFDataGetBytePtr(v22);
      }
      int v35 = 0;
      if (a2 <= 0x10 && ((1 << a2) & 0x10804) != 0) {
        int v35 = CFDataGetLength(v22);
      }
      if (AMFDREncodeMultiRequestAddRecord((uint64_t)&v51, (uint64_t)BytePtr, Length, (uint64_t)v34, v35, (uint64_t)v53, v52))goto LABEL_80; {
      ++v14;
      }
      a6 = v43;
      CFArrayRef v9 = v42;
      if (Count == v14)
      {
        int v36 = AMFDREncodeMultiRequestEnd(&v51, &v55, &v54);
        if (!v36)
        {
          CFAllocatorRef v37 = CFGetAllocator(a1);
          CFDataRef v22 = CFDataCreate(v37, v55, v54);
          if (!v22) {
            AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"httpRequestData is NULL", v40);
          }
          goto LABEL_60;
        }
        AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"AMFDREncodeMultiRequestEnd failed 0x%X", v36);
LABEL_88:
        CFDataRef v22 = 0;
        goto LABEL_60;
      }
    }
    AMFDRErrorPushInternal(a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"currDataInstance is NULL", v40);
    CFDataRef v22 = 0;
LABEL_82:
    CFStringRef ValueAtIndex = 0;
    goto LABEL_86;
  }
  AMFDRErrorPushInternal(a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCreateMultiRequest", @"AMFDREncodeMultiRequestBegin failed 0x%X", v13);
LABEL_84:
  CFDataRef v22 = 0;
  CFStringRef ValueAtIndex = 0;
LABEL_85:
  CFStringRef v16 = 0;
LABEL_86:
  CFStringRef InstanceString = 0;
LABEL_60:
  if (v55)
  {
    free(v55);
    CFStringRef v55 = 0;
  }
  if (v53)
  {
    free(v53);
    char v53 = 0;
  }
  if (ValueAtIndex) {
    CFRelease(ValueAtIndex);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (InstanceString) {
    CFRelease(InstanceString);
  }
  AMFDREncodeMetadataDestroy(&v50);
  AMFDREncodeMultiRequestDestroy((uint64_t)&v51);
  return v22;
}

void _addMetaDataRecord(const __CFString *cf, const __CFString *a2, uint64_t a3)
{
  CFStringRef v4 = cf;
  CFTypeRef cfa = 0;
  if (!cf)
  {
    AMSupportLogInternal();
    CFDataRef ExternalRepresentation = 0;
    goto LABEL_15;
  }
  if (!a3)
  {
    AMSupportLogInternal();
    goto LABEL_26;
  }
  CFStringRef v5 = a2;
  if (!a2)
  {
    AMFDRErrorPushInternal((uint64_t)&cfa, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_addMetaDataRecord", @"value is NULL", v16);
    CFDataRef ExternalRepresentation = 0;
LABEL_33:
    CFStringRef v4 = 0;
    goto LABEL_16;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFStringGetTypeID())
  {
    AMSupportLogInternal();
    CFDataRef ExternalRepresentation = 0;
    CFStringRef v5 = 0;
    goto LABEL_33;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@%@", *(void *)(a3 + 16), v4);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v7, v4, 0x8000100u, 0x20u);
  if (!ExternalRepresentation)
  {
    AMFDRErrorPushInternal((uint64_t)&cfa, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_addMetaDataRecord", @"failed to create innerHeaderKey", v16);
    goto LABEL_15;
  }
  CFTypeID v9 = CFGetTypeID(v5);
  if (v9 == CFDataGetTypeID())
  {
    CFStringRef v5 = (const __CFString *)CFRetain(v5);
    goto LABEL_10;
  }
  CFTypeID v10 = CFGetTypeID(v5);
  if (v10 != CFStringGetTypeID())
  {
    AMFDRErrorPushInternal((uint64_t)&cfa, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_addMetaDataRecord", @"unexpected type of innerHeaderValue", v16);
LABEL_15:
    CFStringRef v5 = 0;
    goto LABEL_16;
  }
  CFStringRef v5 = (const __CFString *)CFStringCreateExternalRepresentation(v7, v5, 0x8000100u, 0x20u);
  if (v5)
  {
LABEL_10:
    if (CFDataGetLength((CFDataRef)v5))
    {
      uint64_t BytePtr = CFDataGetBytePtr(ExternalRepresentation);
      int Length = CFDataGetLength(ExternalRepresentation);
      int v13 = CFDataGetBytePtr((CFDataRef)v5);
      int v14 = CFDataGetLength((CFDataRef)v5);
      int v15 = AMFDREncodeMetadataAddRecord((void *)a3, (uint64_t)BytePtr, Length, (uint64_t)v13, v14);
      if (v15) {
        AMFDRErrorPushInternal((uint64_t)&cfa, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_addMetaDataRecord", @"AMFDREncodeMetadataAddRecord failed 0x%X", v15);
      }
    }
    else
    {
      AMSupportLogInternal();
    }
    goto LABEL_16;
  }
  AMFDRErrorPushInternal((uint64_t)&cfa, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_addMetaDataRecord", @"failed to create innerHeaderValue", v16);
LABEL_16:
  if (a3 && cfa && *(void *)(a3 + 8)) {
    **(void **)(a3 + 8) = CFRetain(cfa);
  }
  if (ExternalRepresentation) {
    CFRelease(ExternalRepresentation);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_26:
  if (cfa) {
    CFRelease(cfa);
  }
}

CFTypeRef *AMFDRDataHTTPMultiSign(uint64_t a1, const __CFArray *a2, const __CFArray *a3, const __CFData *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  CFTypeID v6 = a6;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v65 = 0;
  int v64 = 0;
  CFDataRef theData = 0;
  char v62 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  if (!a1)
  {
    uint64_t v51 = @"amfdr is NULL";
LABEL_51:
    CFStringRef format = v51;
LABEL_58:
    AMFDRErrorPushInternal((uint64_t)v6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", format, v58);
    goto LABEL_59;
  }
  CFAllocatorRef v7 = (CFDictionaryRef *)a1;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v51 = @"amfdr->optionsDict is NULL";
    goto LABEL_51;
  }
  CFAllocatorRef v8 = a5;
  if (!a5)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"outSignedValueDataDict is NULL", v58);
    goto LABEL_45;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a6) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"AMFDRDataHTTPLoadPersistent failed", v58);
LABEL_59:
    CFAllocatorRef v8 = 0;
    goto LABEL_45;
  }
  if (!a2)
  {
    int v52 = @"dataClassesArray is NULL";
LABEL_57:
    CFStringRef format = v52;
    goto LABEL_58;
  }
  CFIndex Count = CFArrayGetCount(a2);
  if (Count <= 0)
  {
    int v52 = @"dataClassesArray count is 0";
    goto LABEL_57;
  }
  CFIndex v13 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    int v52 = @"Invalid dataInstancesArray count";
    goto LABEL_57;
  }
  CFAllocatorRef v14 = CFGetAllocator(v7);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, v13, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"valueDataDict is NULL", v58);
    goto LABEL_59;
  }
  CFMutableDictionaryRef v16 = Mutable;
  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a3, 0);
  CFStringRef cf = _AMFDRCreateUrlWithKey((uint64_t)v7, @"SealingURL", @"sealing/sign", @"seal", ValueAtIndex);
  if (!cf)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"serverURL is NULL", v58);
    CFRelease(v16);
    goto LABEL_59;
  }
  if ((AMFDRDataGetSigningVersion((uint64_t)v7, (int *)&v65 + 1) & 1) == 0)
  {
    CFStringRef v53 = @"AMFDRDataGetSigningVersion failed";
LABEL_65:
    AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", v53, v58);
    CFDictionaryRef v23 = 0;
LABEL_67:
    CFAllocatorRef v37 = 0;
    goto LABEL_75;
  }
  if (HIDWORD(v65) == 1)
  {
    CFStringRef v53 = @"Multi sealing require FDR 2.0";
    goto LABEL_65;
  }
  if ((AMFDRDataGetManifestVersion((uint64_t)v7, (unsigned int *)&v65) & 1) == 0)
  {
    CFStringRef v53 = @"AMFDRDataGetManifestVersion failed";
    goto LABEL_65;
  }
  char v60 = v8;
  if (v65 == 1)
  {
    *(_OWORD *)keys = xmmword_2642D1540;
    char v69 = @"x-fdr-jmet-multi-seal";
    *(_OWORD *)values = xmmword_2642D1558;
    char v67 = @"true";
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFRange v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    CFRange v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v22 = 3;
  }
  else
  {
    *(_OWORD *)keys = xmmword_2642D1570;
    *(_OWORD *)values = xmmword_2642D1580;
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFRange v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    CFRange v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v22 = 2;
  }
  CFDictionaryRef v23 = CFDictionaryCreate(v21, (const void **)keys, (const void **)values, v22, v19, v20);
  if (!v23)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"Unable to create HTTP header extensiondictionary", v58);
    goto LABEL_67;
  }
  CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(v7[2], @"SealingHeaders");
  if (!v24) {
    goto LABEL_21;
  }
  CFDictionaryRef v25 = v24;
  CFIndex v59 = v7;
  CFAllocatorRef v26 = v18;
  CFIndex v27 = v13;
  CFArrayRef v28 = a2;
  CFArrayRef v29 = a3;
  CFDataRef v30 = a4;
  int v31 = v6;
  CFDictionaryRef v32 = v23;
  CFAllocatorRef v33 = v16;
  CFTypeID v34 = CFGetTypeID(v24);
  BOOL v35 = v34 == CFDictionaryGetTypeID();
  CFMutableDictionaryRef v16 = v33;
  CFDictionaryRef v23 = v32;
  CFTypeID v6 = v31;
  a4 = v30;
  a3 = v29;
  a2 = v28;
  CFIndex v13 = v27;
  CFAllocatorRef v18 = v26;
  CFAllocatorRef v7 = v59;
  if (v35) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v18, 0, v25);
  }
  else {
LABEL_21:
  }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v37 = MutableCopy;
  if (!MutableCopy)
  {
    CFStringRef v54 = @"Unable to create httpXAllHeaders";
    goto LABEL_74;
  }
  if (AMFDROptionsGetBooleanValue((uint64_t)v7, @"DeprecateV1", 0)) {
    CFDictionarySetValue(v37, @"x-fdr-deprecate-v1", @"true");
  }
  if ((AMFDRDataGetMinimalManifestVersion((uint64_t)v7, &v64) & 1) == 0)
  {
    CFStringRef v55 = @"AMFDRDataGetMinimalManifestVersion failed";
LABEL_71:
    AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", v55, v58);
    goto LABEL_75;
  }
  if (v64 == 2) {
    CFDictionarySetValue(v37, @"x-fdr-minimal-seal-version", @"2");
  }
  if ((_CFDictionaryAddDictionary(v37, v23) & 1) == 0)
  {
    CFStringRef v55 = @"Unable to add sealing headers";
    goto LABEL_71;
  }
  if ((_AMFDRHttpRequestSendSync(v7, (const __CFURL *)cf, @"MultiSign", @"POST", v37, a4, (CFTypeRef *)&theData, 1, 0, 0, 0, 0, v6) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"AMFDRDataHTTPMultiSign failed", v58);
    goto LABEL_75;
  }
  CFAllocatorRef v38 = CFGetAllocator(v7);
  CFMutableDictionaryRef v39 = CFDictionaryCreateMutable(v38, v13, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v39)
  {
    CFMutableDictionaryRef value = v39;
    if (theData)
    {
      *(void *)&long long v70 = v7;
      *((void *)&v70 + 1) = v16;
      *(void *)&long long v71 = v39;
      uint64_t BytePtr = CFDataGetBytePtr(theData);
      unsigned int Length = CFDataGetLength(theData);
      if (AMFDRDecodeMultiSealingResponse((uint64_t)BytePtr, Length, &v62, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiSealingCallback, (uint64_t)&v70))
      {
        CFStringRef v56 = @"AMFDRDecodeMultiSealingResponse failed";
      }
      else
      {
        if (v62 == 11)
        {
          if (_AMFDRSavePersistentCookie((uint64_t)v7, (uint64_t)v6))
          {
            if (CFDictionaryGetCount(value) >= 1)
            {
              AMFDRErrorPushInternal((uint64_t)v6, 21, 0, 0, 0, 0, 0, 0, value, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"got multiRequestErrors", v58);
              if (CFArrayGetCount(a2) >= 1)
              {
                CFArrayRef v43 = CFArrayGetValueAtIndex(a2, 0);
                uint64_t v44 = CFArrayGetValueAtIndex(a3, 0);
                CFAllocatorRef v45 = CFGetAllocator(v7);
                CFStringRef v46 = CFStringCreateWithFormat(v45, 0, @"%@-%@", v43, v44);
                CFAllocatorRef v47 = (__CFError *)CFDictionaryGetValue(value, v46);
                if (v47)
                {
                  CFErrorGetCode(v47);
                  AMSupportLogInternal();
                }
                else
                {
                  AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", @"%@ manifest is missing but multiRequestError is NULL", (char)v46);
                }
                uint64_t v48 = 0;
LABEL_42:
                CFRelease(v16);
                CFRelease(value);
                CFRelease(cf);
                CFRelease(v23);
                if (v46) {
                  CFRelease(v46);
                }
LABEL_44:
                CFRelease(v37);
                CFAllocatorRef v8 = (CFTypeRef *)v48;
                goto LABEL_45;
              }
            }
            *char v60 = CFRetain(v16);
            if (_AMFDRSavePersistentCookie((uint64_t)v7, (uint64_t)v6))
            {
              CFStringRef v46 = 0;
              uint64_t v48 = 1;
              goto LABEL_42;
            }
          }
          CFStringRef v50 = @"_AMFDRSavePersistentCookie failed";
          goto LABEL_80;
        }
        char v58 = v62;
        CFStringRef v56 = @"actionCode returned is %d";
      }
      AMFDRErrorPushInternal((uint64_t)v6, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", v56, v58);
      goto LABEL_84;
    }
    CFStringRef v50 = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
LABEL_80:
    AMFDRErrorPushInternal((uint64_t)v6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", v50, v58);
LABEL_84:
    uint64_t v48 = 0;
    CFStringRef v46 = 0;
    goto LABEL_42;
  }
  CFStringRef v54 = @"multiRequestErrors is NULL";
LABEL_74:
  AMFDRErrorPushInternal((uint64_t)v6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiSign", v54, v58);
LABEL_75:
  CFRelease(v16);
  CFRelease(cf);
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v48 = 0;
  CFAllocatorRef v8 = 0;
  if (v37) {
    goto LABEL_44;
  }
LABEL_45:
  if (theData) {
    CFRelease(theData);
  }
  return v8;
}

uint64_t _AMFDRHttpRequestSendSync(CFDictionaryRef *cf, const __CFURL *a2, uint64_t a3, __CFString *a4, const void *a5, const __CFData *a6, CFTypeRef *a7, char a8, uint64_t a9, const __CFString *a10, uint64_t (*a11)(CFDictionaryRef *, uint64_t, CFTypeRef *), uint64_t a12, CFTypeRef *a13)
{
  CFIndex v40 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef cfa = 0;
  if (!cf)
  {
    CFStringRef format = @"amfdr is NULL";
LABEL_58:
    AMFDRErrorPushInternal((uint64_t)a13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSync", format, v36);
    goto LABEL_24;
  }
  if (!cf[2])
  {
    CFStringRef format = @"amfdr->optionsDict is NULL";
    goto LABEL_58;
  }
  if (!a2)
  {
    CFStringRef format = @"serverURL is NULL";
    goto LABEL_58;
  }
  if (!a4)
  {
    CFStringRef format = @"action is NULL";
    goto LABEL_58;
  }
  CFIndex v17 = a7;
  if (a10)
  {
    char v21 = _AMFDRDataPermAllowed(cf, a10);
    CFIndex v17 = a7;
    if ((v21 & 1) == 0)
    {
      char v37 = (char)a10;
LABEL_23:
      AMFDRErrorPushInternal((uint64_t)a13, 404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSync", @"%@ is not allowed. returning kAMFDRServerErrorNotFound", v37);
LABEL_24:
      uint64_t v25 = 0;
      CFDataRef v22 = 0;
      goto LABEL_49;
    }
  }
  _AMFDRHttpRequestSendSyncNoRetry((uint64_t)cf, a2, a3, a4, @"application/octet-stream", a5, a6, v17, &cfa, a8, a9, 1, &v40, (uint64_t)a13);
  if (!cfa)
  {
    AMFDRErrorPushInternal((uint64_t)a13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSync", @"httpResponseHeader is NULL", v36);
    goto LABEL_24;
  }
  CFDataRef v38 = a6;
  CFDataRef v22 = 0;
  if ((unint64_t)(v40 - 401) > 0x12 || ((1 << (v40 + 111)) & 0x40005) == 0) {
    goto LABEL_34;
  }
  AMSupportLogInternal();
  if ((AMFDRPermissionsRequest((uint64_t)cf, a13) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a13, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSync", @"Permissions request failed.", v36);
    goto LABEL_24;
  }
  CFDictionaryRef v23 = cf[3];
  if (v23)
  {
    CFRelease(v23);
    cf[3] = 0;
  }
  if (a13 && *a13)
  {
    CFRelease(*a13);
    *a13 = 0;
  }
  AMSupportSafeRelease();
  CFTypeRef cfa = 0;
  if (a10 && (_AMFDRDataPermAllowed(cf, a10) & 1) == 0)
  {
    char v37 = (char)a10;
    goto LABEL_23;
  }
  if (a11)
  {
    CFDataRef v22 = (const __CFData *)a11(cf, a12, a13);
    CFDataRef v38 = v22;
    if (!v22)
    {
      CFStringRef v24 = @"createSignedData failed";
LABEL_63:
      AMFDRErrorPushInternal((uint64_t)a13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSync", v24, v36);
      goto LABEL_48;
    }
  }
  else
  {
    CFDataRef v22 = 0;
  }
  CFAllocatorRef v26 = a7;
  if (a7 && *a7)
  {
    CFRelease(*a7);
    CFAllocatorRef v26 = a7;
    *a7 = 0;
  }
  if ((_AMFDRHttpRequestSendSyncNoRetry((uint64_t)cf, a2, a3, a4, @"application/octet-stream", a5, v38, v26, &cfa, a8, a9, 1, &v40, (uint64_t)a13) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a13, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpRequestSendSync", @"_AMFDRHttpRequestSendSyncNoRetry failed", v36);
    goto LABEL_48;
  }
  if (!cfa)
  {
    CFStringRef v24 = @"httpResponseHeader is NULL";
    goto LABEL_63;
  }
  if (a13 && *a13)
  {
    CFRelease(*a13);
    *a13 = 0;
  }
LABEL_34:
  CFIndex v27 = v40;
  if ((v40 & 0xFFFFFFFFFFFFFFFDLL) == 0xC8)
  {
    uint64_t v25 = 1;
    goto LABEL_49;
  }
  if (AMFDROptionsGetBooleanValue((uint64_t)cf, @"DumpHttpBodyOnFailure", 0))
  {
    int v28 = 0x80000;
    int valuePtr = 0x80000;
    CFDictionaryRef v29 = cf[2];
    if (v29)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v29, @"DumpHttpBodyLength");
      if (!Value
        || (v31 = Value, CFTypeID v32 = CFGetTypeID(Value), v32 != CFNumberGetTypeID())
        || !CFNumberGetValue(v31, kCFNumberSInt32Type, &valuePtr)
        || (int v28 = valuePtr, valuePtr < 0))
      {
        int v28 = 0x80000;
      }
    }
    _AMFDRHttpLogRequest(0, v38, v28);
    CFIndex v27 = v40;
  }
  if (a7) {
    CFDataRef v33 = (const __CFData *)*a7;
  }
  else {
    CFDataRef v33 = 0;
  }
  _AMFDRHttpHandleHeaderMessage(cf, (CFDictionaryRef)cfa, v27, v33, (uint64_t)a13);
LABEL_48:
  uint64_t v25 = 0;
LABEL_49:
  if (cfa)
  {
    CFRelease(cfa);
    CFTypeRef cfa = 0;
  }
  if (v22) {
    CFRelease(v22);
  }
  return v25;
}

uint64_t _AMFDRSavePersistentCookie(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSavePersistentCookie", @"amfdr is NULL", v17);
    return 0;
  }
  if (AMFDRShouldPersistData(a1, @"PersistCookie"))
  {
    CFStringRef v4 = *(const __CFString **)(a1 + 24);
    if (v4)
    {
      if (CFStringGetLength(v4))
      {
        CFIndex Length = CFStringGetLength(*(CFStringRef *)(a1 + 24));
        CFTypeID v6 = (UInt8 *)malloc_type_calloc(1uLL, Length + 1, 0x8DACE079uLL);
        if (v6)
        {
          CFAllocatorRef v7 = v6;
          CFStringRef v8 = *(const __CFString **)(a1 + 24);
          CFIndex v9 = CFStringGetLength(v8);
          if (CFStringGetCString(v8, (char *)v7, v9 + 1, 0x8000100u))
          {
            CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
            CFIndex v11 = CFStringGetLength(*(CFStringRef *)(a1 + 24));
            CFDataRef v12 = CFDataCreate(v10, v7, v11);
            if (v12)
            {
              CFDataRef v13 = v12;
              CFAllocatorRef v14 = *(__CFDictionary **)(a1 + 80);
              if (v14)
              {
                CFDictionarySetValue(v14, @"cookie", v13);
              }
              else if (!_AMFDRSavePersistent(a1, @"CookieFile", @"cookie", (uint64_t)v13))
              {
                uint64_t v15 = 0;
                goto LABEL_14;
              }
              uint64_t v15 = 1;
LABEL_14:
              CFRelease(v13);
LABEL_15:
              free(v7);
              return v15;
            }
            AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSavePersistentCookie", @"tempData is NULL, failed to convert tempCString to CFData", v17);
          }
          else
          {
            AMFDRErrorPushInternal(a2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSavePersistentCookie", @"failed to convert amfdr->cookieStr to c-string", v17);
          }
          uint64_t v15 = 0;
          goto LABEL_15;
        }
        AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSavePersistentCookie", @"tempCString is NULL", v17);
        return 0;
      }
    }
  }
  return 1;
}

uint64_t AMFDRDataHTTPSign(CFDictionaryRef *a1, const void *a2, const __CFData *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  uint64_t v34 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", @"amfdr is NULL", v31);
    return 0;
  }
  if (!a1[2])
  {
    CFStringRef v28 = @"amfdr->optionsDict is NULL";
    goto LABEL_48;
  }
  if (!a4)
  {
    CFStringRef v28 = @"outSealingManifest is NULL";
    goto LABEL_48;
  }
  if (AMFDRDataHTTPLoadPersistent(a1, a5))
  {
    CFAllocatorRef v10 = _AMFDRCreateUrlWithKey((uint64_t)a1, @"SealingURL", @"sealing/sign", @"seal", a2);
    if (v10)
    {
      CFIndex v11 = v10;
      if ((AMFDRDataGetSigningVersion((uint64_t)a1, (int *)&v34 + 1) & 1) == 0)
      {
        CFStringRef v29 = @"AMFDRDataGetSigningVersion failed";
LABEL_60:
        AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", v29, v31);
        CFRelease(v11);
        goto LABEL_61;
      }
      if (HIDWORD(v34) == 1)
      {
        unsigned int v32 = 0;
        if ((AMFDRDataGetManifestVersion((uint64_t)a1, &v32) & 1) == 0)
        {
LABEL_57:
          CFStringRef v29 = @"AMFDRDataGetManifestVersion failed";
          goto LABEL_60;
        }
        if (v32 == 1)
        {
          CFMutableDictionaryRef v16 = @"x-fdr-seal-manifest-version";
          goto LABEL_17;
        }
      }
      else if (HIDWORD(v34) == 2)
      {
        unsigned int v32 = 0;
        if (AMFDRDataGetManifestVersion((uint64_t)a1, &v32))
        {
          if (v32 == 1)
          {
            *(_OWORD *)keys = xmmword_2642D1590;
            *(_OWORD *)values = xmmword_2642D15A0;
            CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFDataRef v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
            CFAllocatorRef v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
            CFIndex v15 = 2;
LABEL_18:
            CFDictionaryRef v18 = CFDictionaryCreate(v12, (const void **)keys, (const void **)values, v15, v13, v14);
            if (v18)
            {
              CFDictionaryRef v17 = v18;
LABEL_20:
              if ((AMFDRDataGetMinimalManifestVersion((uint64_t)a1, (int *)&v34) & 1) == 0)
              {
                AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", @"AMFDRDataGetMinimalManifestVersion failed", v31);
                uint64_t v26 = 0;
                uint64_t v25 = 0;
                goto LABEL_36;
              }
              if (v34 == 2) {
                CFDictionarySetValue(0, @"x-fdr-minimal-seal-version", @"2");
              }
              CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1[2], @"SealingHeaders");
              if (Value)
              {
                CFDictionaryRef v20 = Value;
                CFTypeID v21 = CFGetTypeID(Value);
                CFTypeID TypeID = CFDictionaryGetTypeID();
                CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
                if (v21 == TypeID)
                {
                  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v23, 0, v20);
LABEL_28:
                  uint64_t v25 = MutableCopy;
                  if (MutableCopy)
                  {
                    if (AMFDROptionsGetBooleanValue((uint64_t)a1, @"DeprecateV1", 0)) {
                      CFDictionarySetValue(v25, @"x-fdr-deprecate-v1", @"true");
                    }
                    if (v17 && (_CFDictionaryAddDictionary(v25, v17) & 1) == 0)
                    {
                      AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", @"Unable to add sealing headers", v31);
                      CFRelease(v11);
                      uint64_t v26 = 0;
LABEL_37:
                      CFRelease(v17);
LABEL_38:
                      if (v25) {
                        CFRelease(v25);
                      }
                      goto LABEL_40;
                    }
                    if (_AMFDRHttpRequestSendSync(a1, (const __CFURL *)v11, @"Sign", @"POST", v25, a3, &cf, 1, 0, 0, 0, 0, a5))
                    {
                      if (_AMFDRSavePersistentCookie((uint64_t)a1, (uint64_t)a5))
                      {
                        *a4 = CFRetain(cf);
                        uint64_t v26 = 1;
                        goto LABEL_36;
                      }
                      CFStringRef v30 = @"_AMFDRSavePersistentCookie failed";
                    }
                    else
                    {
                      CFStringRef v30 = @"AMFDRDataHTTPSign failed";
                    }
                    AMFDRErrorPushInternal((uint64_t)a5, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", v30, v31);
                  }
                  else
                  {
                    AMFDRErrorPushInternal((uint64_t)a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", @"Unable to create httpXAllHeaders", v31);
                  }
                  uint64_t v26 = 0;
LABEL_36:
                  CFRelease(v11);
                  if (!v17) {
                    goto LABEL_38;
                  }
                  goto LABEL_37;
                }
              }
              else
              {
                CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              }
              CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v23, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              goto LABEL_28;
            }
            CFStringRef v29 = @"Unable to create HTTP header extensiondictionary";
            goto LABEL_60;
          }
          CFMutableDictionaryRef v16 = @"x-fdr-seal-version";
LABEL_17:
          keys[0] = v16;
          values[0] = @"2";
          CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFDataRef v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
          CFAllocatorRef v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
          CFIndex v15 = 1;
          goto LABEL_18;
        }
        goto LABEL_57;
      }
      CFDictionaryRef v17 = 0;
      goto LABEL_20;
    }
    CFStringRef v28 = @"serverURL is NULL";
LABEL_48:
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", v28, v31);
    goto LABEL_61;
  }
  AMFDRErrorPushInternal((uint64_t)a5, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPSign", @"AMFDRDataHTTPLoadPersistent failed", v31);
LABEL_61:
  uint64_t v26 = 0;
LABEL_40:
  if (cf) {
    CFRelease(cf);
  }
  return v26;
}

CFTypeRef AMFDRDataHTTPChallengeClaim(uint64_t a1, const __CFString *a2, const void *a3, CFTypeRef *a4)
{
  CFStringRef v19 = a2;
  CFTypeRef cf = 0;
  if (a4 && *a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  if (!a1)
  {
    CFStringRef v16 = @"amfdr is NULL";
LABEL_36:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPChallengeClaim", v16, (char)cf);
    CFStringRef Value = 0;
LABEL_39:
    AMFDRSetOption(a1, @"UseSikDataInstance", Value);
    return 0;
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 16);
  if (!v8)
  {
    CFStringRef v16 = @"amfdr->optionsDict is NULL";
    goto LABEL_36;
  }
  if (!a2)
  {
    CFStringRef v16 = @"dataClassStr is NULL";
    goto LABEL_36;
  }
  if (!a3)
  {
    CFStringRef v16 = @"dataInstanceStr is NULL";
    goto LABEL_36;
  }
  if (!*(void *)(a1 + 96))
  {
    CFStringRef v16 = @"amfdr->challengeCallbacks is NULL";
    goto LABEL_36;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v8, @"UseSikDataInstance");
  AMFDRSetOption(a1, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPChallengeClaim", @"AMFDRDataHTTPLoadPersistent failed", (char)cf);
    goto LABEL_39;
  }
  CFAllocatorRef v10 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/claim", (uint64_t)a2, a3);
  if (!v10)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPChallengeClaim", @"serverURL is NULL", (char)cf);
    goto LABEL_39;
  }
  CFURLRef v11 = (const __CFURL *)v10;
  if (a4 && *a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12)
  {
    while (1)
    {
      if (!*(void *)v12)
      {
        CFStringRef v13 = @"exeNode->dataClass is NULL";
        goto LABEL_20;
      }
      if (!*(void *)(v12 + 8))
      {
        CFStringRef v13 = @"exeNode->callback is NULL";
        goto LABEL_20;
      }
      if (CFEqual(*(CFStringRef *)v12, a2)) {
        break;
      }
      uint64_t v12 = *(void *)(v12 + 16);
      if (!v12) {
        goto LABEL_19;
      }
    }
    AMSupportLogInternal();
    if (_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, v11, @"ChallengeClaim", @"GET", 0, 0, &cf, 0, *(void *)(v12 + 8), 0, 0, (uint64_t)&v19, a4))
    {
      if (cf)
      {
        if (_AMFDRSavePersistentCookie(a1, (uint64_t)a4))
        {
          CFTypeRef v14 = CFRetain(cf);
          goto LABEL_26;
        }
        CFStringRef v17 = @"_AMFDRSavePersistentCookie failed";
      }
      else
      {
        CFStringRef v17 = @"AMFDRDataHTTPChallengeClaim failed: httpReturnData is NULL";
      }
    }
    else
    {
      CFStringRef v17 = @"AMFDRDataHTTPChallengeClaim failed";
    }
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPChallengeClaim", v17, (char)cf);
  }
  else
  {
LABEL_19:
    CFStringRef v13 = @"AMFDRDataHTTPChallengeClaim cannot find the callback funtion.";
LABEL_20:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPChallengeClaim", v13, (char)cf);
  }
  CFTypeRef v14 = 0;
LABEL_26:
  AMFDRSetOption(a1, @"UseSikDataInstance", Value);
  CFRelease(v11);
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t AMFDRDataHTTPCopyDigest(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopyDigest", @"AMFDRDataHTTPCopyDigest is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataHTTPPresent(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  if (a4 && *a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  if (!a1)
  {
    CFStringRef v11 = @"amfdr is NULL";
LABEL_30:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPresent", v11, v12);
    return 0;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v11 = @"amfdr->optionsDict is NULL";
    goto LABEL_30;
  }
  if (!a2)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPresent", @"dataClassStr is NULL", v12);
    return a2;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPresent", @"AMFDRDataHTTPLoadPersistent failed", v12);
    return 0;
  }
  CFDictionaryRef v8 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/data", a2, a3);
  if (!v8)
  {
    CFStringRef v11 = @"serverURL is NULL";
    goto LABEL_30;
  }
  CFURLRef v9 = (const __CFURL *)v8;
  if (a4)
  {
    if (*a4)
    {
      CFRelease(*a4);
      *a4 = 0;
    }
    if (_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, v9, @"Present", @"HEAD", 0, 0, 0, 0, 0, 0, 0, 0, a4))
    {
      if (*a4)
      {
        AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPresent", @"_AMFDRHttpRequestSendSync returned success but outError is not NULL", v12);
LABEL_33:
        a2 = 0;
        goto LABEL_23;
      }
      goto LABEL_16;
    }
  }
  else if (_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v8, @"Present", @"HEAD", 0, 0, 0, 0, 0, 0, 0, 0, 0))
  {
LABEL_16:
    a2 = 1;
    goto LABEL_22;
  }
  if (AMFDRGetUnderlyingErrorCode(a1, (CFErrorRef *)a4) == 404 && (AMSupportLogInternal(), a4) && *a4)
  {
    CFRelease(*a4);
    a2 = 0;
    *a4 = 0;
  }
  else
  {
    a2 = 0;
  }
LABEL_22:
  if ((_AMFDRSavePersistentCookie(a1, (uint64_t)a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPresent", @"_AMFDRSavePersistentCookie failed", v12);
    goto LABEL_33;
  }
LABEL_23:
  CFRelease(v9);
  return a2;
}

CFTypeRef AMFDRDataHTTPCopy(__CFString *cf, const __CFString *a2, const __CFString *a3, CFTypeRef *a4)
{
  CFTypeRef v17 = 0;
  if (a4 && *a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  if (!cf)
  {
    CFStringRef v14 = @"amfdr is NULL";
LABEL_29:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopy", v14, v16);
    return 0;
  }
  if (!cf->data)
  {
    CFStringRef v14 = @"amfdr->optionsDict is NULL";
    goto LABEL_29;
  }
  if (!a2)
  {
    CFStringRef v14 = @"dataClassStr is NULL";
    goto LABEL_29;
  }
  if (!a3)
  {
    CFStringRef v14 = @"dataInstanceStr is NULL";
    goto LABEL_29;
  }
  CFStringRef PermissionsString = AMFDRDataCreatePermissionsString(cf, 0, a2, a3);
  if (!PermissionsString)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopy", @"AMFDRDataCreatePermissionsString failed", v16);
    return 0;
  }
  CFStringRef v9 = PermissionsString;
  if (AMFDRDataHTTPLoadPersistent((CFDataRef *)cf, a4))
  {
    CFAllocatorRef v10 = _AMFDRCreateUrlWithKey((uint64_t)cf, @"DSURL", @"dm/data", (uint64_t)a2, a3);
    if (v10)
    {
      CFURLRef v11 = (const __CFURL *)v10;
      if (a4 && *a4)
      {
        CFRelease(*a4);
        *a4 = 0;
      }
      if (_AMFDRHttpRequestSendSync((CFDictionaryRef *)cf, v11, @"Copy", @"GET", 0, 0, &v17, 0, 0, v9, 0, 0, a4))
      {
        if (v17)
        {
          if (a4 && *a4)
          {
            CFRelease(*a4);
            *a4 = 0;
          }
          if (_AMFDRSavePersistentCookie((uint64_t)cf, (uint64_t)a4))
          {
            CFTypeRef v12 = CFRetain(v17);
            goto LABEL_21;
          }
          CFStringRef v15 = @"_AMFDRSavePersistentCookie failed";
        }
        else
        {
          CFStringRef v15 = @"AMFDRDataHTTPCopy failed: outValueData is NULL";
        }
      }
      else
      {
        CFStringRef v15 = @"AMFDRDataHTTPCopy failed";
      }
      AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopy", v15, v16);
      CFTypeRef v12 = 0;
LABEL_21:
      CFRelease(v11);
      if (v17)
      {
        CFRelease(v17);
        CFTypeRef v17 = 0;
      }
      goto LABEL_23;
    }
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopy", @"serverURL is NULL", v16);
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopy", @"AMFDRDataHTTPLoadPersistent failed", v16);
  }
  CFTypeRef v12 = 0;
LABEL_23:
  CFRelease(v9);
  return v12;
}

uint64_t AMFDRDataHTTPPutWithOptions(uint64_t a1, uint64_t a2, CFStringRef theString, const __CFData *a4, uint64_t a5, CFTypeRef *a6)
{
  unint64_t v20[4] = *MEMORY[0x263EF8340];
  result.location = 0xAAAAAAAAAAAAAAAALL;
  result.CFIndex length = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = a2;
  v20[1] = theString;
  unint64_t v20[2] = a4;
  v20[3] = a5;
  if (!a1)
  {
    CFStringRef v16 = @"amfdr is NULL";
LABEL_20:
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPutWithOptions", v16, v18);
    return 0;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v16 = @"amfdr->optionsDict is NULL";
    goto LABEL_20;
  }
  if (!a2)
  {
    CFStringRef v16 = @"dataClassStr is NULL";
    goto LABEL_20;
  }
  if (!a4)
  {
    CFStringRef v16 = @"valueData is NULL";
    goto LABEL_20;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 136) + 8) & 2) != 0)
  {
    v21.location = 0;
    v21.CFIndex length = 4;
    if (CFStringFindWithOptions(theString, @"sik-", v21, 8uLL, &result))
    {
      AMFDRErrorPushInternal((uint64_t)a6, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPutWithOptions", @"Station AMFDRDataHTTPPut with sik format is forbidden. %@-%@", a2);
      return 0;
    }
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a6) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPutWithOptions", @"AMFDRDataHTTPLoadPersistent failed", v18);
    return 0;
  }
  CFTypeRef v12 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/data", a2, theString);
  if (!v12)
  {
    CFStringRef v16 = @"serverURL is NULL";
    goto LABEL_20;
  }
  CFStringRef v13 = v12;
  if (!_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v12, @"Put", @"PUT", 0, a4, 0, 0, 0, 0, (uint64_t (*)(CFDictionaryRef *, uint64_t, CFTypeRef *))_AMFDRDataHTTPCopyForPut, (uint64_t)v20, a6))
  {
    CFStringRef v17 = @"AMFDRDataHTTPPut failed";
LABEL_24:
    AMFDRErrorPushInternal((uint64_t)a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPutWithOptions", v17, v18);
    uint64_t v14 = 0;
    goto LABEL_12;
  }
  if ((_AMFDRSavePersistentCookie(a1, (uint64_t)a6) & 1) == 0)
  {
    CFStringRef v17 = @"_AMFDRSavePersistentCookie failed";
    goto LABEL_24;
  }
  uint64_t v14 = 1;
LABEL_12:
  CFRelease(v13);
  return v14;
}

uint64_t AMFDRDataHTTPDelete(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_16:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPDelete", v12, v14);
    return 0;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v12 = @"amfdr->optionsDict is NULL";
    goto LABEL_16;
  }
  if (!a2)
  {
    CFStringRef v12 = @"dataClassStr is NULL";
    goto LABEL_16;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPDelete", @"AMFDRDataHTTPLoadPersistent failed", v14);
    return 0;
  }
  CFDictionaryRef v8 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/data", a2, a3);
  if (!v8)
  {
    CFStringRef v12 = @"serverURL is NULL";
    goto LABEL_16;
  }
  CFStringRef v9 = v8;
  if (!_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v8, @"Delete", @"DELETE", 0, 0, 0, 0, 0, 0, 0, 0, a4))
  {
    CFStringRef v13 = @"AMFDRDataHTTPDelete failed";
LABEL_20:
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPDelete", v13, v14);
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  if ((_AMFDRSavePersistentCookie(a1, (uint64_t)a4) & 1) == 0)
  {
    CFStringRef v13 = @"_AMFDRSavePersistentCookie failed";
    goto LABEL_20;
  }
  uint64_t v10 = 1;
LABEL_9:
  CFRelease(v9);
  return v10;
}

uint64_t AMFDRDataHTTPPrefetch(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_16:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPrefetch", v12, v14);
    return 0;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v12 = @"amfdr->optionsDict is NULL";
    goto LABEL_16;
  }
  if (!a2)
  {
    CFStringRef v12 = @"dataClassStr is NULL";
    goto LABEL_16;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPrefetch", @"AMFDRDataHTTPLoadPersistent failed", v14);
    return 0;
  }
  CFDictionaryRef v8 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/export", a2, a3);
  if (!v8)
  {
    CFStringRef v12 = @"serverURL is NULL";
    goto LABEL_16;
  }
  CFStringRef v9 = v8;
  if (!_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v8, @"Present", @"POST", 0, 0, 0, 0, 0, 0, 0, 0, a4))
  {
    CFStringRef v13 = @"AMFDRDataHTTPPrefetch failed";
LABEL_20:
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPrefetch", v13, v14);
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  if ((_AMFDRSavePersistentCookie(a1, (uint64_t)a4) & 1) == 0)
  {
    CFStringRef v13 = @"_AMFDRSavePersistentCookie failed";
    goto LABEL_20;
  }
  uint64_t v10 = 1;
LABEL_9:
  CFRelease(v9);
  return v10;
}

uint64_t AMFDRDataHTTPExport(CFDataRef *a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  if (!a1)
  {
    CFStringRef v26 = @"amfdr is NULL";
LABEL_38:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPExport", v26, v28);
    return 0;
  }
  if (!a1[2])
  {
    CFStringRef v26 = @"amfdr->optionsDict is NULL";
    goto LABEL_38;
  }
  if (!a2)
  {
    CFStringRef v26 = @"dataClassStr is NULL";
    goto LABEL_38;
  }
  if ((AMFDRDataHTTPLoadPersistent(a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPExport", @"AMFDRDataHTTPLoadPersistent failed", v28);
    return 0;
  }
  CFDictionaryRef v8 = _AMFDRCreateUrlWithKey((uint64_t)a1, @"DSURL", @"dm/export", a2, a3);
  if (!v8)
  {
    CFStringRef v26 = @"serverURL is NULL";
    goto LABEL_38;
  }
  CFURLRef v9 = (const __CFURL *)v8;
  CFStringRef Value = (__CFString *)CFDictionaryGetValue(a1[2], @"ExportDestination");
  CFURLRef v11 = Value;
  if (!Value)
  {
    CFURLRef v15 = 0;
    goto LABEL_20;
  }
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 == CFStringGetTypeID())
  {
    CFStringRef v13 = (__CFString *)CFRetain(v11);
    if (v13)
    {
      CFURLRef v11 = v13;
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      goto LABEL_18;
    }
    goto LABEL_26;
  }
  CFTypeID v16 = CFGetTypeID(v11);
  if (v16 != CFArrayGetTypeID())
  {
LABEL_26:
    CFStringRef v24 = @"export destination has wrong type";
LABEL_27:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPExport", v24, v28);
    uint64_t v23 = 0;
    CFURLRef v11 = 0;
LABEL_28:
    CFURLRef v15 = v9;
    goto LABEL_29;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v11);
  if (Count >= 1)
  {
    CFIndex v18 = Count;
    CFIndex v19 = 0;
    while (CFArrayGetValueAtIndex((CFArrayRef)v11, v19))
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, v19);
      CFTypeID v21 = CFGetTypeID(ValueAtIndex);
      if (v21 != CFStringGetTypeID()) {
        break;
      }
      if (v18 == ++v19) {
        goto LABEL_17;
      }
    }
    CFStringRef v24 = @"malformed export destination";
    goto LABEL_27;
  }
LABEL_17:
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFURLRef v11 = (__CFString *)CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFArrayRef)v11, @",");
  if (!v11)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPExport", @"exportDestination is NULL", v28);
    goto LABEL_45;
  }
LABEL_18:
  values = v11;
  keys[0] = @"x-fdr-internal-export-destination";
  CFDictionaryRef v22 = CFDictionaryCreate(v14, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v22)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPExport", @"Unable to create HTTP header extension dictionary", v28);
LABEL_45:
    uint64_t v23 = 0;
    goto LABEL_28;
  }
  CFURLRef v15 = v22;
LABEL_20:
  if (_AMFDRHttpRequestSendSync(a1, v9, @"Export", @"PUT", v15, 0, 0, 0, 0, 0, 0, 0, a4))
  {
    if (_AMFDRSavePersistentCookie((uint64_t)a1, (uint64_t)a4))
    {
      uint64_t v23 = 1;
      goto LABEL_23;
    }
    CFStringRef v27 = @"_AMFDRSavePersistentCookie failed";
  }
  else
  {
    CFStringRef v27 = @"AMFDRDataHTTPExport failed";
  }
  AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPExport", v27, v28);
  uint64_t v23 = 0;
LABEL_23:
  CFRelease(v9);
  if (!v15)
  {
    if (!v11) {
      return v23;
    }
    goto LABEL_30;
  }
LABEL_29:
  CFRelease(v15);
  if (v11) {
LABEL_30:
  }
    CFRelease(v11);
  return v23;
}

uint64_t AMFDRDataHTTPCopyTrustObject(CFDictionaryRef *a1, __CFString *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  if (a2)
  {
    CFAllocatorRef v7 = a2;
    if (!a1)
    {
      CFStringRef v8 = @"amfdr is NULL";
LABEL_28:
      AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopyTrustObject", v8, v21);
      return 0;
    }
  }
  else
  {
    CFStringRef Value = (__CFString *)CFDictionaryGetValue(a1[2], @"TrustObjectURL");
    if (Value) {
      CFAllocatorRef v7 = Value;
    }
    else {
      CFAllocatorRef v7 = @"http://gg.apple.com/fdrtrustobject";
    }
  }
  CFDictionaryRef v10 = a1[2];
  if (!v10)
  {
    CFStringRef v8 = @"amfdr->optionsDict is NULL";
    goto LABEL_28;
  }
  if (CFDictionaryGetValue(v10, @"TrustObjectDigest"))
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v12 = AMSupportCopyHexStringFromData();
    if (!v12)
    {
      CFStringRef v8 = @"Failed to convert trust object digest to hex";
      goto LABEL_28;
    }
    CFStringRef v13 = (const void *)v12;
    CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"%@/%@", v7, v12);
  }
  else
  {
    CFStringRef v14 = (const __CFString *)CFRetain(v7);
    CFStringRef v13 = 0;
  }
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFURLRef v16 = CFURLCreateWithString(v15, v14, 0);
  if (v16)
  {
    CFURLRef v17 = v16;
    if (_AMFDRHttpRequestSendSync(a1, v16, @"CopyTrustObject", @"GET", 0, 0, a3, 0, 0, 0, 0, 0, a4))
    {
      if (*a3)
      {
        uint64_t v18 = 1;
        goto LABEL_16;
      }
      CFStringRef v20 = @"AMFDRDataHTTPCopyTrustObject failed: outValueData is NULL";
    }
    else
    {
      CFStringRef v20 = @"AMFDRDataHTTPCopyTrustObject failed";
    }
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopyTrustObject", v20, v21);
    uint64_t v18 = 0;
LABEL_16:
    CFRelease(v17);
    if (!v14) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  AMFDRErrorPushInternal((uint64_t)a4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopyTrustObject", @"AMFDRDataHTTPCopyTrustObject failed: serverURL is NULL", v21);
  uint64_t v18 = 0;
  if (v14) {
LABEL_17:
  }
    CFRelease(v14);
LABEL_18:
  if (v13) {
    CFRelease(v13);
  }
  return v18;
}

uint64_t AMFDRDataHTTPPutTrustObject(int a1, int a2, uint64_t a3)
{
  AMFDRErrorPushInternal(a3, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPutTrustObject", @"No implementation in AMFDRDataHTTP module", vars0);
  return 0;
}

uint64_t AMFDRDataHTTPIterate(int a1, int a2, uint64_t a3)
{
  AMFDRErrorPushInternal(a3, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPIterate", @"No implementation in AMFDRDataHTTP module", vars0);
  return 0;
}

CFTypeRef AMFDRDataHTTPMake(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef v15 = 0;
  if (a4 && *a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_29:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMake", v12, v14);
    return 0;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v12 = @"amfdr->optionsDict is NULL";
    goto LABEL_29;
  }
  if (!a2)
  {
    CFStringRef v12 = @"dataClassStr is NULL";
    goto LABEL_29;
  }
  if (!a3)
  {
    CFStringRef v12 = @"dataInstanceStr is NULL";
    goto LABEL_29;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMake", @"AMFDRDataHTTPLoadPersistent failed", v14);
    return 0;
  }
  CFStringRef v8 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/make", a2, a3);
  if (!v8)
  {
    CFStringRef v12 = @"serverURL is NULL";
    goto LABEL_29;
  }
  CFURLRef v9 = (const __CFURL *)v8;
  if (a4 && *a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  if (_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, v9, @"Make", @"GET", 0, 0, &v15, 0, 0, 0, 0, 0, a4))
  {
    if (v15)
    {
      if (a4 && *a4)
      {
        CFRelease(*a4);
        *a4 = 0;
      }
      if (_AMFDRSavePersistentCookie(a1, (uint64_t)a4))
      {
        CFTypeRef v10 = CFRetain(v15);
        goto LABEL_20;
      }
      CFStringRef v13 = @"_AMFDRSavePersistentCookie failed";
    }
    else
    {
      CFStringRef v13 = @"AMFDRDataHTTPMake failed: outValueData is NULL";
    }
  }
  else
  {
    CFStringRef v13 = @"AMFDRDataHTTPMake failed";
  }
  AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMake", v13, v14);
  CFTypeRef v10 = 0;
LABEL_20:
  CFRelease(v9);
  if (v15) {
    CFRelease(v15);
  }
  return v10;
}

__CFString *AMFDRDataHTTPMultiCopy(__CFString *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataHTTPMultiCopyInternal(a1, a2, a3, 0, a4);
}

uint64_t AMFDRDataHTTPMultiPutWithOptions(__CFString *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, CFTypeRef *a6)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  CFTypeRef v71 = 0;
  char v70 = 0;
  CFAllocatorRef v74 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v72 = v6;
  long long v73 = v6;
  int v69 = 5;
  if (!a1)
  {
    CFAllocatorRef v45 = @"amfdr is NULL";
LABEL_125:
    CFStringRef formata = v45;
    *(_OWORD *)uint64_t v51 = 0u;
    *(_OWORD *)CFStringRef v53 = 0u;
    *(_OWORD *)valuea = 0u;
    uint64_t v46 = (uint64_t)a6;
LABEL_130:
    AMFDRErrorPushInternal(v46, 1, 0, 0, 0, 0, 0, 0, valuea[0], valuea[1], v51[0], v51[1], v53[0], v53[1], (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", formata, v56);
LABEL_131:
    CFArrayRef v17 = 0;
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef v15 = 0;
    CFMutableArrayRef v14 = 0;
    CFMutableArrayRef cf = 0;
    uint64_t v30 = 0;
    goto LABEL_86;
  }
  CFArrayRef v7 = theArray;
  if (!theArray)
  {
    CFAllocatorRef v45 = @"dataClassArray is NULL";
    goto LABEL_125;
  }
  if (!a3)
  {
    CFAllocatorRef v45 = @"dataInstanceArray is NULL";
    goto LABEL_125;
  }
  if (!a4)
  {
    CFAllocatorRef v45 = @"valueDataArray is NULL";
    goto LABEL_125;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFAllocatorRef v47 = @"Invalid dataClassArray count";
LABEL_129:
    CFStringRef formata = v47;
    *(_OWORD *)uint64_t v51 = 0u;
    *(_OWORD *)CFStringRef v53 = 0u;
    *(_OWORD *)valuea = 0u;
    uint64_t v46 = (uint64_t)a6;
    goto LABEL_130;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFAllocatorRef v47 = @"Invalid dataInstanceArray count";
    goto LABEL_129;
  }
  if (CFArrayGetCount(a4) != v11)
  {
    CFAllocatorRef v47 = @"Invalid dataValueArray count";
    goto LABEL_129;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v12, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"multiRequestErrors is NULL", v56);
    goto LABEL_131;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a6) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"AMFDRDataHTTPLoadPersistent failed", v56);
LABEL_135:
    CFRelease(theDict);
    goto LABEL_131;
  }
  unint64_t v57 = _AMFDRCreateUrlWithKey((uint64_t)a1, @"DSURL", @"dm/bulk/data", 0, 0);
  if (!v57)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"serverURL is NULL", v56);
    goto LABEL_135;
  }
  if (!_AMFDRGetMultiRequestMaxAttempts((uint64_t)a1))
  {
    CFDataRef v18 = 0;
    CFArrayRef v17 = 0;
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef v15 = 0;
    CFMutableArrayRef v14 = 0;
    CFMutableArrayRef cf = 0;
    CFStringRef v13 = 0;
    goto LABEL_72;
  }
  CFIndex v65 = v11;
  CFStringRef v13 = 0;
  unsigned int v60 = 0;
  CFMutableArrayRef cf = 0;
  CFMutableArrayRef v14 = 0;
  CFMutableArrayRef v15 = 0;
  CFMutableArrayRef Mutable = 0;
  CFArrayRef v17 = 0;
  CFDataRef v18 = 0;
  do
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v15) {
      CFRelease(v15);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v18) {
      CFRelease(v18);
    }
    CFIndex v19 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    if (v71)
    {
      CFRelease(v71);
      CFTypeRef v71 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
    CFAllocatorRef v20 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v20, 0, v19);
    if (!Mutable)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"dataClassToRequest is NULL", v56);
      CFDataRef v18 = 0;
      CFMutableArrayRef v15 = 0;
LABEL_102:
      CFMutableArrayRef v14 = 0;
LABEL_116:
      CFMutableArrayRef cf = 0;
      goto LABEL_117;
    }
    CFAllocatorRef v21 = CFGetAllocator(a1);
    CFMutableArrayRef v15 = CFArrayCreateMutable(v21, 0, v19);
    if (!v15)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"dataInstanceToRequest is NULL", v56);
      CFDataRef v18 = 0;
      goto LABEL_102;
    }
    CFAllocatorRef v22 = CFGetAllocator(a1);
    CFMutableArrayRef v14 = CFArrayCreateMutable(v22, 0, v19);
    if (!v14)
    {
      CFStringRef v44 = @"valueToRequest is NULL";
      goto LABEL_115;
    }
    if (a5)
    {
      CFAllocatorRef v23 = CFGetAllocator(a1);
      CFMutableArrayRef v24 = CFArrayCreateMutable(v23, 0, MEMORY[0x263EFFF70]);
      if (!v24)
      {
        CFStringRef v44 = @"optionsToRequest is NULL";
LABEL_115:
        AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", v44, v56);
        CFDataRef v18 = 0;
        goto LABEL_116;
      }
    }
    else
    {
      CFMutableArrayRef v24 = 0;
    }
    CFMutableArrayRef cf = v24;
    char v62 = Mutable;
    CFArrayRef v63 = v14;
    int v64 = v15;
    if (v60)
    {
      unsigned int v25 = _AMFDRGetMultiRequestBackoff((uint64_t)a1) * v60;
      AMSupportLogInternal();
      sleep(v25);
    }
    for (CFIndex i = 0; i != v65; ++i)
    {
      if (v13) {
        CFRelease(v13);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, i);
      if (!ValueAtIndex)
      {
        CFStringRef v40 = @"dataClassStr is NULL";
        goto LABEL_80;
      }
      CFStringRef v28 = ValueAtIndex;
      if (!CFStringGetLength(ValueAtIndex))
      {
        CFStringRef v40 = @"dataClassStr length is 0";
        goto LABEL_80;
      }
      CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(a3, i);
      CFDataRef v18 = (const __CFData *)v29;
      if (!v29)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"dataInstanceStr is NULL", v56);
        goto LABEL_82;
      }
      if ((*(unsigned char *)(a1[4].info + 8) & 2) != 0)
      {
        result.location = 0xAAAAAAAAAAAAAAAALL;
        result.CFIndex length = 0xAAAAAAAAAAAAAAAALL;
        v77.location = 0;
        v77.CFIndex length = 4;
        if (CFStringFindWithOptions(v29, @"sik-", v77, 8uLL, &result))
        {
          AMFDRErrorPushInternal((uint64_t)a6, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"Station AMFDRDataHTTPMultiPut with sik format is forbidden. %@-%@", (char)v28);
LABEL_81:
          CFDataRef v18 = 0;
LABEL_82:
          uint64_t v30 = 0;
LABEL_83:
          CFMutableArrayRef Mutable = v62;
          CFMutableArrayRef v14 = v63;
          CFMutableArrayRef v15 = v64;
          goto LABEL_84;
        }
      }
      uint64_t v30 = (uint64_t)CFArrayGetValueAtIndex(a4, i);
      if (!v30)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"valueData is NULL", v56);
        CFDataRef v18 = 0;
        goto LABEL_83;
      }
      CFArrayRef v31 = v7;
      if (a5)
      {
        unsigned int v32 = CFArrayGetValueAtIndex(a5, i);
        if (!v32)
        {
          CFStringRef v40 = @"options is NULL";
LABEL_80:
          AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", v40, v56);
          goto LABEL_81;
        }
      }
      else
      {
        unsigned int v32 = 0;
      }
      CFAllocatorRef v33 = CFGetAllocator(a1);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v33, (uint64_t)v28, (uint64_t)v18);
      if (!FullKey)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"currDataInstance is NULL", v56);
        goto LABEL_81;
      }
      CFStringRef v13 = FullKey;
      if (v17)
      {
        v76.CFIndex length = CFArrayGetCount(v17);
        v76.location = 0;
        if (!CFArrayContainsValue(v17, v76, v13)) {
          goto LABEL_53;
        }
        CFDictionaryRemoveValue(theDict, v13);
        AMSupportLogInternal();
      }
      CFArrayAppendValue(v62, v28);
      CFArrayAppendValue(v64, v18);
      CFArrayAppendValue(v63, (const void *)v30);
      if (a5) {
        CFArrayAppendValue(cf, v32);
      }
LABEL_53:
      CFArrayRef v7 = v31;
    }
    BOOL v35 = a6;
    CFMutableArrayRef Mutable = v62;
    CFMutableArrayRef v14 = v63;
    CFMutableArrayRef v15 = v64;
    CFDataRef v18 = AMFDRDataHTTPCreateMultiRequest(a1, 2u, v62, v64, v63, cf, 0, 0, (uint64_t)a6);
    if (!v18)
    {
      CFStringRef format = @"httpRequestData is NULL";
      *(_OWORD *)CFStringRef v50 = 0u;
      *(_OWORD *)int v52 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)a6;
      goto LABEL_108;
    }
    if (a6 && *a6)
    {
      CFRelease(*a6);
      BOOL v35 = a6;
      *a6 = 0;
    }
    *(void *)&long long v72 = v62;
    *((void *)&v72 + 1) = v64;
    *(void *)&long long v73 = v63;
    *((void *)&v73 + 1) = cf;
    if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v57, @"MultiPut", @"POST", 0, v18, &v71, 0, 0, 0, (uint64_t (*)(CFDictionaryRef *, uint64_t, CFTypeRef *))AMFDRDataHTTPMultiCopyForPut, (uint64_t)&v72, v35) & 1) == 0|| v35 && *v35)
    {
      AMSupportLogInternal();
LABEL_120:
      uint64_t v30 = 0;
LABEL_74:
      CFRelease(v13);
      goto LABEL_84;
    }
    if (!v71)
    {
      CFStringRef format = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
      *(_OWORD *)CFStringRef v50 = 0u;
      *(_OWORD *)int v52 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)v35;
      goto LABEL_113;
    }
    if (v17) {
      CFRelease(v17);
    }
    CFAllocatorRef v36 = CFGetAllocator(a1);
    CFMutableArrayRef v37 = CFArrayCreateMutable(v36, 0, MEMORY[0x263EFFF70]);
    CFArrayRef v17 = v37;
    if (!v37)
    {
      CFStringRef format = @"dataClassInstanceToRetry is NULL";
      *(_OWORD *)CFStringRef v50 = 0u;
      *(_OWORD *)int v52 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)a6;
LABEL_108:
      CFIndex v43 = 2;
LABEL_114:
      AMFDRErrorPushInternal(v42, v43, 0, 0, 0, 0, 0, 0, value[0], value[1], v50[0], v50[1], v52[0], v52[1], (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", format, v56);
      goto LABEL_120;
    }
    long long v72 = (unint64_t)a1;
    *(void *)&long long v73 = theDict;
    *((void *)&v73 + 1) = v37;
    CFAllocatorRef v74 = &v69;
    uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)v71);
    unsigned int Length = CFDataGetLength((CFDataRef)v71);
    if (AMFDRDecodeMultiResponse((uint64_t)BytePtr, Length, &v70, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiResponseCallback, (uint64_t)&v72))
    {
      CFStringRef format = @"AMFDRDecodeMultiResponse failed";
      *(_OWORD *)CFStringRef v50 = 0u;
      *(_OWORD *)int v52 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)a6;
LABEL_111:
      CFIndex v43 = 12;
      goto LABEL_114;
    }
    if (v70 != 2)
    {
      char v56 = v70;
      CFStringRef format = @"actionCode returned is %d";
      *(_OWORD *)CFStringRef v50 = 0u;
      *(_OWORD *)int v52 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)a6;
      goto LABEL_111;
    }
    if ((_AMFDRSavePersistentCookie((uint64_t)a1, (uint64_t)a6) & 1) == 0)
    {
      CFStringRef format = @"_AMFDRSavePersistentCookie failed";
      *(_OWORD *)CFStringRef v50 = 0u;
      *(_OWORD *)int v52 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)a6;
LABEL_113:
      CFIndex v43 = 8;
      goto LABEL_114;
    }
    if (!CFArrayGetCount(v17)) {
      break;
    }
    ++v60;
  }
  while (v60 < _AMFDRGetMultiRequestMaxAttempts((uint64_t)a1));
LABEL_72:
  if (CFDictionaryGetCount(theDict))
  {
    AMFDRErrorPushInternal((uint64_t)a6, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiPutWithOptions", @"got multiRequestErrors", v56);
LABEL_117:
    uint64_t v30 = 0;
    if (!v13) {
      goto LABEL_84;
    }
    goto LABEL_74;
  }
  uint64_t v30 = 1;
  if (v13) {
    goto LABEL_74;
  }
LABEL_84:
  CFRelease(theDict);
  CFRelease(v57);
  if (v18) {
    CFRelease(v18);
  }
LABEL_86:
  if (v71)
  {
    CFRelease(v71);
    CFTypeRef v71 = 0;
  }
  if (v17) {
    CFRelease(v17);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v30;
}

uint64_t AMFDRDataHTTPMultiDelete(__CFString *a1, CFArrayRef theArray, const __CFArray *a3, CFTypeRef *a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  char v51 = 0;
  CFStringRef v55 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v5;
  long long v54 = v5;
  int v50 = 6;
  if (!a1)
  {
    CFStringRef v43 = @"amfdr is NULL";
LABEL_97:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", v43, v44);
LABEL_102:
    CFArrayRef v14 = 0;
    CFMutableArrayRef Mutable = 0;
    CFAllocatorRef v12 = 0;
    uint64_t v27 = 0;
    goto LABEL_66;
  }
  if (!theArray)
  {
    CFStringRef v43 = @"dataClassArray is NULL";
    goto LABEL_97;
  }
  if (!a3)
  {
    CFStringRef v43 = @"dataInstanceArray is NULL";
    goto LABEL_97;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v43 = @"Invalid dataClassArray count";
    goto LABEL_97;
  }
  CFIndex v9 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v43 = @"Invalid dataInstanceArray count";
    goto LABEL_97;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v10, v9, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", @"multiRequestErrors is NULL", v44);
    goto LABEL_102;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", @"AMFDRDataHTTPLoadPersistent failed", v44);
LABEL_101:
    CFRelease(theDict);
    goto LABEL_102;
  }
  uint64_t v46 = _AMFDRCreateUrlWithKey((uint64_t)a1, @"DSURL", @"dm/bulk/data", 0, 0);
  if (!v46)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", @"serverURL is NULL", v44);
    goto LABEL_101;
  }
  if (!_AMFDRGetMultiRequestMaxAttempts((uint64_t)a1))
  {
    CFStringRef v16 = 0;
    CFDataRef v15 = 0;
    CFArrayRef v14 = 0;
    CFMutableArrayRef Mutable = 0;
    CFAllocatorRef v12 = 0;
LABEL_54:
    if (!CFDictionaryGetCount(theDict))
    {
      uint64_t v27 = 1;
      if (v16) {
        goto LABEL_56;
      }
      goto LABEL_64;
    }
    AMFDRErrorPushInternal((uint64_t)a4, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", @"got multiRequestErrors", v44);
LABEL_78:
    uint64_t v27 = 0;
    if (v16) {
      goto LABEL_56;
    }
    goto LABEL_64;
  }
  int v11 = 0;
  CFAllocatorRef v12 = 0;
  CFMutableArrayRef Mutable = 0;
  CFArrayRef v14 = 0;
  CFDataRef v15 = 0;
  CFStringRef v16 = 0;
  CFAllocatorRef v45 = a4;
  while (1)
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFArrayRef v17 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFAllocatorRef v18 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v18, 0, v17);
    if (!Mutable)
    {
      CFStringRef v39 = @"dataClassToRequest is NULL";
LABEL_77:
      AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", v39, v44);
      CFDataRef v15 = 0;
      CFAllocatorRef v12 = 0;
      goto LABEL_78;
    }
    CFAllocatorRef v19 = CFGetAllocator(a1);
    CFMutableArrayRef v20 = CFArrayCreateMutable(v19, 0, v17);
    if (!v20)
    {
      CFStringRef v39 = @"dataInstanceToRequest is NULL";
      goto LABEL_77;
    }
    CFAllocatorRef v21 = v20;
    CFAllocatorRef v22 = Mutable;
    int v23 = v11;
    if (v11)
    {
      unsigned int v24 = _AMFDRGetMultiRequestBackoff((uint64_t)a1) * v11;
      AMSupportLogInternal();
      sleep(v24);
    }
    int v48 = v23;
    for (CFIndex i = 0; i != v9; ++i)
    {
      if (v16) {
        CFRelease(v16);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      uint64_t v27 = (uint64_t)ValueAtIndex;
      if (!ValueAtIndex)
      {
        AMFDRErrorPushInternal((uint64_t)v45, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", @"dataClassStr is NULL", v44);
LABEL_63:
        CFMutableArrayRef Mutable = v22;
        CFAllocatorRef v12 = v21;
        CFDataRef v15 = 0;
        goto LABEL_64;
      }
      if (!CFStringGetLength(ValueAtIndex))
      {
        CFStringRef format = @"dataClassStr length is 0";
        goto LABEL_60;
      }
      CFStringRef v28 = CFArrayGetValueAtIndex(a3, i);
      if (!v28)
      {
        CFStringRef format = @"dataInstanceStr is NULL";
LABEL_60:
        AMFDRErrorPushInternal((uint64_t)v45, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", format, v44);
LABEL_62:
        uint64_t v27 = 0;
        goto LABEL_63;
      }
      CFStringRef v29 = v28;
      CFAllocatorRef v30 = CFGetAllocator(a1);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v30, v27, (uint64_t)v29);
      if (!FullKey)
      {
        AMFDRErrorPushInternal((uint64_t)v45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", @"currDataInstance is NULL", v44);
        goto LABEL_62;
      }
      CFStringRef v16 = FullKey;
      if (v14)
      {
        v57.CFIndex length = CFArrayGetCount(v14);
        v57.location = 0;
        if (!CFArrayContainsValue(v14, v57, v16)) {
          continue;
        }
        CFDictionaryRemoveValue(theDict, v16);
        AMSupportLogInternal();
      }
      CFArrayAppendValue(v22, (const void *)v27);
      CFArrayAppendValue(v21, v29);
    }
    a4 = v45;
    CFMutableArrayRef Mutable = v22;
    CFArrayRef v32 = v22;
    CFAllocatorRef v12 = v21;
    CFDataRef v15 = AMFDRDataHTTPCreateMultiRequest(a1, 4u, v32, v21, 0, 0, 0, 0, (uint64_t)v45);
    if (!v15)
    {
      CFStringRef v40 = @"httpRequestData is NULL";
LABEL_84:
      AMFDRErrorPushInternal((uint64_t)v45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", v40, v44);
      goto LABEL_91;
    }
    if (v45) {
      break;
    }
    if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v46, @"MultiDelete", @"POST", 0, v15, &cf, 0, 0, 0, 0, 0, 0) & 1) == 0)goto LABEL_90; {
LABEL_43:
    }
    if (!cf)
    {
      CFStringRef v41 = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
LABEL_89:
      AMFDRErrorPushInternal((uint64_t)v45, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", v41, v44);
      goto LABEL_91;
    }
    if (v14) {
      CFRelease(v14);
    }
    CFAllocatorRef v33 = CFGetAllocator(a1);
    CFMutableArrayRef v34 = CFArrayCreateMutable(v33, 0, MEMORY[0x263EFFF70]);
    CFArrayRef v14 = v34;
    if (!v34)
    {
      CFStringRef v40 = @"dataClassInstanceToRetry is NULL";
      goto LABEL_84;
    }
    long long v53 = (unint64_t)a1;
    *(void *)&long long v54 = theDict;
    *((void *)&v54 + 1) = v34;
    CFStringRef v55 = &v50;
    uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)cf);
    unsigned int Length = CFDataGetLength((CFDataRef)cf);
    if (AMFDRDecodeMultiResponse((uint64_t)BytePtr, Length, &v51, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiResponseCallback, (uint64_t)&v53))
    {
      CFStringRef v42 = @"AMFDRDecodeMultiResponse failed";
LABEL_87:
      AMFDRErrorPushInternal((uint64_t)v45, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiDelete", v42, v44);
      goto LABEL_91;
    }
    if (v51 != 4)
    {
      char v44 = v51;
      CFStringRef v42 = @"actionCode returned is %d";
      goto LABEL_87;
    }
    if ((_AMFDRSavePersistentCookie((uint64_t)a1, (uint64_t)v45) & 1) == 0)
    {
      CFStringRef v41 = @"_AMFDRSavePersistentCookie failed";
      goto LABEL_89;
    }
    if (CFArrayGetCount(v14))
    {
      int v11 = v48 + 1;
      if (v48 + 1 < _AMFDRGetMultiRequestMaxAttempts((uint64_t)a1)) {
        continue;
      }
    }
    goto LABEL_54;
  }
  if (*v45)
  {
    CFRelease(*v45);
    CFTypeRef *v45 = 0;
  }
  if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v46, @"MultiDelete", @"POST", 0, v15, &cf, 0, 0, 0, 0, 0, v45) & 1) != 0&& !*v45)
  {
    goto LABEL_43;
  }
LABEL_90:
  AMSupportLogInternal();
LABEL_91:
  uint64_t v27 = 0;
LABEL_56:
  CFRelease(v16);
LABEL_64:
  CFRelease(theDict);
  CFRelease(v46);
  if (v15) {
    CFRelease(v15);
  }
LABEL_66:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v14) {
    CFRelease(v14);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v27;
}

uint64_t AMFDRDataHTTPMultiExport(uint64_t a1, CFArrayRef theArray, const __CFArray *a3, CFTypeRef *a4)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  char v67 = 0;
  long long v73 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v71 = v5;
  long long v72 = v5;
  int v66 = 7;
  if (!a1)
  {
    CFStringRef v54 = @"amfdr is NULL";
LABEL_115:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", v54, v55);
    goto LABEL_121;
  }
  if (!theArray)
  {
    CFStringRef v54 = @"dataClassArray is NULL";
    goto LABEL_115;
  }
  if (!a3)
  {
    CFStringRef v54 = @"dataInstanceArray is NULL";
    goto LABEL_115;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v54 = @"Invalid dataClassArray count";
    goto LABEL_115;
  }
  CFIndex v9 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v54 = @"Invalid dataInstanceArray count";
    goto LABEL_115;
  }
  CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, v9, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"multiRequestErrors is NULL", v55);
LABEL_121:
    CFArrayRef v16 = 0;
    CFMutableArrayRef v15 = 0;
    CFArrayRef v14 = 0;
    CFTypeRef v58 = 0;
    uint64_t v38 = 0;
    goto LABEL_81;
  }
  CFMutableDictionaryRef value = Mutable;
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"AMFDRDataHTTPLoadPersistent failed", v55);
LABEL_120:
    CFRelease(value);
    goto LABEL_121;
  }
  CFIndex v59 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/bulk/export", 0, 0);
  if (!v59)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"serverURL is NULL", v55);
    goto LABEL_120;
  }
  if (!_AMFDRGetMultiRequestMaxAttempts(a1))
  {
    CFStringRef v18 = 0;
    CFDataRef v17 = 0;
    CFArrayRef v16 = 0;
    CFMutableArrayRef v15 = 0;
    CFArrayRef v14 = 0;
    CFTypeRef v58 = 0;
LABEL_69:
    if (!CFDictionaryGetCount(value))
    {
      uint64_t v38 = 1;
      goto LABEL_71;
    }
    AMFDRErrorPushInternal((uint64_t)a4, 21, 0, 0, 0, 0, 0, 0, value, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"got multiRequestErrors", v55);
LABEL_107:
    uint64_t v38 = 0;
    goto LABEL_71;
  }
  CFIndex v64 = v9;
  int v13 = 0;
  CFTypeRef v58 = 0;
  *(void *)unsigned int v60 = 0;
  CFArrayRef v14 = 0;
  CFMutableArrayRef v15 = 0;
  CFArrayRef v16 = 0;
  CFDataRef v17 = 0;
  CFStringRef v18 = 0;
  uint64_t v56 = value;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v62 = (uint64_t)a4;
  while (1)
  {
    if (v15) {
      CFRelease(v15);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v17) {
      CFRelease(v17);
    }
    CFAllocatorRef v19 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFAllocatorRef v20 = CFGetAllocator((CFTypeRef)a1);
    CFMutableArrayRef v15 = CFArrayCreateMutable(v20, 0, v19);
    if (!v15)
    {
      CFStringRef v51 = @"dataClassToRequest is NULL";
LABEL_95:
      AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", v51, v55);
      CFDataRef v17 = 0;
      CFArrayRef v14 = 0;
      goto LABEL_107;
    }
    CFAllocatorRef v21 = CFGetAllocator((CFTypeRef)a1);
    CFMutableArrayRef v22 = CFArrayCreateMutable(v21, 0, v19);
    if (!v22)
    {
      CFStringRef v51 = @"dataInstanceToRequest is NULL";
      goto LABEL_95;
    }
    int v23 = v22;
    unsigned int v24 = v15;
    int v25 = v13;
    if (v13)
    {
      unsigned int v26 = _AMFDRGetMultiRequestBackoff(a1) * v13;
      AMSupportLogInternal();
      sleep(v26);
    }
    int v63 = v25;
    for (CFIndex i = 0; i != v64; ++i)
    {
      if (v18) {
        CFRelease(v18);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      if (!ValueAtIndex)
      {
        CFStringRef format = @"dataClassStr is NULL";
        goto LABEL_76;
      }
      CFStringRef v29 = ValueAtIndex;
      if (!CFStringGetLength(ValueAtIndex))
      {
        CFStringRef format = @"dataClassStr length is 0";
        goto LABEL_76;
      }
      CFAllocatorRef v30 = CFArrayGetValueAtIndex(a3, i);
      if (!v30)
      {
        CFStringRef format = @"dataInstanceStr is NULL";
LABEL_76:
        AMFDRErrorPushInternal(v62, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", format, v55);
LABEL_78:
        uint64_t v38 = 0;
        CFMutableArrayRef v15 = v24;
        CFDataRef v17 = 0;
        CFArrayRef v14 = v23;
        goto LABEL_79;
      }
      CFArrayRef v31 = v30;
      CFAllocatorRef v32 = CFGetAllocator((CFTypeRef)a1);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v32, (uint64_t)v29, (uint64_t)v31);
      if (!FullKey)
      {
        AMFDRErrorPushInternal(v62, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"currDataInstance is NULL", v55);
        goto LABEL_78;
      }
      CFStringRef v18 = FullKey;
      if (v16)
      {
        v75.CFIndex length = CFArrayGetCount(v16);
        v75.location = 0;
        if (!CFArrayContainsValue(v16, v75, v18)) {
          continue;
        }
        CFDictionaryRemoveValue(value, v18);
        AMSupportLogInternal();
      }
      CFArrayAppendValue(v24, v29);
      CFArrayAppendValue(v23, v31);
    }
    CFMutableArrayRef v15 = v24;
    CFDataRef v61 = AMFDRDataHTTPCreateMultiRequest((__CFString *)a1, 3u, v24, v23, 0, 0, 0, 0, v62);
    if (!v61)
    {
      AMFDRErrorPushInternal(v62, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"httpRequestData is NULL", v55);
      uint64_t v38 = 0;
      CFDataRef v17 = 0;
      CFArrayRef v14 = v23;
      goto LABEL_72;
    }
    CFMutableArrayRef v34 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"ExportDestination");
    if (!v34)
    {
      CFArrayRef v14 = v23;
      CFDataRef v17 = v61;
      a4 = (CFTypeRef *)v62;
      uint64_t v38 = *(void *)v60;
      goto LABEL_51;
    }
    BOOL v35 = v34;
    CFTypeID v36 = CFGetTypeID(v34);
    if (v36 == CFStringGetTypeID())
    {
      CFMutableArrayRef v37 = (void *)CFRetain(v35);
      goto LABEL_49;
    }
    CFTypeID v39 = CFGetTypeID(v35);
    if (v39 != CFArrayGetTypeID())
    {
      CFMutableArrayRef v37 = (void *)v58;
LABEL_49:
      CFArrayRef v14 = v23;
      CFDataRef v17 = v61;
      if (!v37)
      {
        AMFDRErrorPushInternal(v62, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"export destination has wrong type", v55);
        uint64_t v38 = 0;
        CFTypeRef v58 = 0;
        goto LABEL_72;
      }
      goto LABEL_50;
    }
    CFIndex v40 = CFArrayGetCount((CFArrayRef)v35);
    if (v40 >= 1) {
      break;
    }
LABEL_46:
    CFMutableArrayRef v37 = (void *)CFStringCreateByCombiningStrings(alloc, (CFArrayRef)v35, @",");
    CFMutableDictionaryRef value = v56;
    CFMutableArrayRef v15 = v24;
    CFArrayRef v14 = v23;
    CFDataRef v17 = v61;
    if (!v37)
    {
      AMFDRErrorPushInternal(v62, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"exportDestination is NULL", v55);
      CFTypeRef v58 = 0;
      goto LABEL_107;
    }
LABEL_50:
    values = v37;
    keys = @"x-fdr-internal-export-destination";
    CFTypeRef v58 = v37;
    uint64_t v38 = (uint64_t)CFDictionaryCreate(alloc, (const void **)&keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    a4 = (CFTypeRef *)v62;
    if (!v38)
    {
      AMFDRErrorPushInternal(v62, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"Unable to create HTTP header extension dictionary", v55);
      goto LABEL_71;
    }
LABEL_51:
    if (a4)
    {
      if (*a4)
      {
        CFRelease(*a4);
        *a4 = 0;
      }
      if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v59, @"MultiExport", @"POST", (const void *)v38, v17, &cf, 0, 0, 0, 0, 0, a4) & 1) == 0|| *a4)
      {
LABEL_106:
        AMSupportLogInternal();
        goto LABEL_107;
      }
    }
    else if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v59, @"MultiExport", @"POST", (const void *)v38, v17, &cf, 0, 0, 0, 0, 0, 0) & 1) == 0)
    {
      goto LABEL_106;
    }
    if (!cf)
    {
      CFStringRef v52 = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
LABEL_104:
      AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", v52, v55);
      goto LABEL_107;
    }
    if (v16) {
      CFRelease(v16);
    }
    CFAllocatorRef v45 = CFGetAllocator((CFTypeRef)a1);
    CFMutableArrayRef v46 = CFArrayCreateMutable(v45, 0, MEMORY[0x263EFFF70]);
    CFArrayRef v16 = v46;
    if (!v46)
    {
      AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"dataClassInstanceToRetry is NULL", v55);
      goto LABEL_107;
    }
    *(void *)unsigned int v60 = v38;
    long long v71 = (unint64_t)a1;
    *(void *)&long long v72 = value;
    *((void *)&v72 + 1) = v46;
    long long v73 = &v66;
    uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)cf);
    unsigned int Length = CFDataGetLength((CFDataRef)cf);
    if (AMFDRDecodeMultiResponse((uint64_t)BytePtr, Length, &v67, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiResponseCallback, (uint64_t)&v71))
    {
      CFStringRef v53 = @"AMFDRDecodeMultiResponse failed";
LABEL_102:
      AMFDRErrorPushInternal((uint64_t)a4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", v53, v55);
      goto LABEL_107;
    }
    if (v67 != 3)
    {
      char v55 = v67;
      CFStringRef v53 = @"actionCode returned is %d";
      goto LABEL_102;
    }
    if ((_AMFDRSavePersistentCookie(a1, (uint64_t)a4) & 1) == 0)
    {
      CFStringRef v52 = @"_AMFDRSavePersistentCookie failed";
      goto LABEL_104;
    }
    if (CFArrayGetCount(v16))
    {
      int v13 = v63 + 1;
      if (v63 + 1 < _AMFDRGetMultiRequestMaxAttempts(a1)) {
        continue;
      }
    }
    goto LABEL_69;
  }
  CFIndex v41 = v40;
  CFIndex v42 = 0;
  while (CFArrayGetValueAtIndex((CFArrayRef)v35, v42))
  {
    CFStringRef v43 = CFArrayGetValueAtIndex((CFArrayRef)v35, v42);
    CFTypeID v44 = CFGetTypeID(v43);
    if (v44 != CFStringGetTypeID()) {
      break;
    }
    if (v41 == ++v42) {
      goto LABEL_46;
    }
  }
  AMFDRErrorPushInternal(v62, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiExport", @"malformed export destination", v55);
  uint64_t v38 = 0;
  CFMutableDictionaryRef value = v56;
  CFMutableArrayRef v15 = v24;
  CFArrayRef v14 = v23;
  CFDataRef v17 = v61;
LABEL_71:
  if (v18) {
LABEL_72:
  }
    CFRelease(v18);
LABEL_79:
  CFRelease(value);
  CFRelease(v59);
  if (v17) {
    CFRelease(v17);
  }
LABEL_81:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v38;
}

CFTypeRef AMFDRDataHTTPMultiMake(__CFString *a1, CFArrayRef theArray, const __CFArray *a3, CFTypeRef *a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  CFTypeRef v59 = 0;
  char v58 = 0;
  uint64_t v62 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v60 = v5;
  long long v61 = v5;
  int v57 = 0;
  if (!a1)
  {
    CFStringRef v44 = @"amfdr is NULL";
LABEL_108:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", v44, v49);
LABEL_109:
    CFTypeRef v27 = 0;
    CFMutableArrayRef theArraya = 0;
    CFMutableArrayRef cf = 0;
    CFArrayRef v18 = 0;
    goto LABEL_80;
  }
  if (!theArray)
  {
    CFStringRef v44 = @"dataClassArray is NULL";
    goto LABEL_108;
  }
  if (!a3)
  {
    CFStringRef v44 = @"dataInstanceArray is NULL";
    goto LABEL_108;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v44 = @"Invalid dataClassArray count";
    goto LABEL_108;
  }
  CFIndex v10 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v44 = @"Invalid dataInstanceArray count";
    goto LABEL_108;
  }
  CFAllocatorRef v11 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, v10, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"valueDataDict is NULL", v49);
    goto LABEL_109;
  }
  int v13 = Mutable;
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v14, v10, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"multiRequestErrors is NULL", v49);
LABEL_113:
    CFMutableArrayRef v15 = 0;
    goto LABEL_115;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"AMFDRDataHTTPLoadPersistent failed", v49);
    goto LABEL_113;
  }
  CFMutableArrayRef v15 = _AMFDRCreateUrlWithKey((uint64_t)a1, @"DSURL", @"dm/bulk/make", 0, 0);
  if (!v15)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"serverURL is NULL", v49);
LABEL_115:
    CFDataRef v53 = 0;
    CFArrayRef v18 = 0;
    CFMutableArrayRef theArraya = 0;
    CFMutableArrayRef cf = 0;
LABEL_59:
    CFTypeRef v27 = 0;
    goto LABEL_73;
  }
  CFTypeRef v51 = v13;
  if (!_AMFDRGetMultiRequestMaxAttempts((uint64_t)a1))
  {
    int v13 = 0;
    CFDataRef v53 = 0;
    CFArrayRef v18 = 0;
    CFDataRef v17 = 0;
    CFMutableArrayRef cf = 0;
    goto LABEL_61;
  }
  int v16 = 0;
  CFMutableArrayRef cf = 0;
  CFDataRef v17 = 0;
  CFArrayRef v18 = 0;
  CFStringRef v52 = a4;
  CFDataRef v53 = 0;
  int v13 = 0;
  CFURLRef v50 = (const __CFURL *)v15;
  while (2)
  {
    if (v17) {
      CFRelease(v17);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v53) {
      CFRelease(v53);
    }
    if (v59)
    {
      CFRelease(v59);
      CFTypeRef v59 = 0;
    }
    CFAllocatorRef v19 = CFGetAllocator(a1);
    CFAllocatorRef v20 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    CFMutableArrayRef v21 = CFArrayCreateMutable(v19, 0, MEMORY[0x263EFFF70]);
    if (!v21)
    {
      AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"dataClassToRequest is NULL", v49);
      CFTypeRef v27 = 0;
      CFMutableArrayRef theArraya = 0;
      CFMutableArrayRef cf = 0;
LABEL_91:
      CFDataRef v53 = 0;
      CFTypeID v39 = v51;
      goto LABEL_64;
    }
    CFMutableArrayRef theArraya = v21;
    CFAllocatorRef v22 = CFGetAllocator(a1);
    CFMutableArrayRef v23 = CFArrayCreateMutable(v22, 0, v20);
    if (!v23)
    {
      AMFDRErrorPushInternal((uint64_t)a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"dataInstanceToRequest is NULL", v49);
      CFTypeRef v27 = 0;
      CFMutableArrayRef cf = 0;
      goto LABEL_91;
    }
    CFMutableArrayRef cf = v23;
    if (v16)
    {
      unsigned int v24 = _AMFDRGetMultiRequestBackoff((uint64_t)a1) * v16;
      AMSupportLogInternal();
      sleep(v24);
    }
    for (CFIndex i = 0; i != v10; ++i)
    {
      if (v13) {
        CFRelease(v13);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      CFTypeRef v27 = ValueAtIndex;
      if (!ValueAtIndex)
      {
        AMFDRErrorPushInternal((uint64_t)v52, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"dataClassStr is NULL", v49);
        CFDataRef v53 = 0;
LABEL_72:
        CFMutableArrayRef v15 = (__CFString *)v50;
        int v13 = v51;
LABEL_73:
        CFRelease(v13);
        goto LABEL_74;
      }
      if (!CFStringGetLength(ValueAtIndex))
      {
        CFStringRef v40 = @"dataClassStr length is 0";
LABEL_69:
        AMFDRErrorPushInternal((uint64_t)v52, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", v40, v49);
LABEL_71:
        CFDataRef v53 = 0;
        CFTypeRef v27 = 0;
        goto LABEL_72;
      }
      CFStringRef v28 = CFArrayGetValueAtIndex(a3, i);
      if (!v28)
      {
        CFStringRef v40 = @"dataInstanceStr is NULL";
        goto LABEL_69;
      }
      CFStringRef v29 = v28;
      CFAllocatorRef v30 = CFGetAllocator(a1);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v30, (uint64_t)v27, (uint64_t)v29);
      if (!FullKey)
      {
        AMFDRErrorPushInternal((uint64_t)v52, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"currDataInstance is NULL", v49);
        goto LABEL_71;
      }
      int v13 = FullKey;
      if (v18)
      {
        v64.CFIndex length = CFArrayGetCount(v18);
        v64.location = 0;
        if (!CFArrayContainsValue(v18, v64, v13)) {
          continue;
        }
        CFDictionaryRemoveValue(theDict, v13);
        AMSupportLogInternal();
      }
      CFArrayAppendValue(theArraya, v27);
      CFArrayAppendValue(cf, v29);
    }
    if (!CFArrayGetCount(theArraya))
    {
      AMFDRErrorPushInternal((uint64_t)v52, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"got multiRequestErrors", v49);
      CFDataRef v53 = 0;
      CFMutableArrayRef v15 = (__CFString *)v50;
LABEL_58:
      CFRelease(v51);
      goto LABEL_59;
    }
    uint64_t v32 = (uint64_t)v52;
    CFDataRef v33 = AMFDRDataHTTPCreateMultiRequest(a1, 0xCu, theArraya, cf, 0, 0, 0, 0, (uint64_t)v52);
    if (!v33)
    {
      AMFDRErrorPushInternal((uint64_t)v52, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"httpRequestData is NULL", v49);
      CFDataRef v53 = 0;
      CFMutableArrayRef v15 = (__CFString *)v50;
      goto LABEL_58;
    }
    CFDataRef v53 = v33;
    if (v52)
    {
      if (*v52)
      {
        CFRelease(*v52);
        CFTypeRef *v52 = 0;
      }
      CFMutableArrayRef v15 = (__CFString *)v50;
      if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, v50, @"MultiMake", @"POST", 0, v53, &v59, 0, 0, 0, 0, 0, v52) & 1) == 0|| *v52)
      {
LABEL_102:
        AMSupportLogInternal();
        goto LABEL_58;
      }
    }
    else
    {
      CFMutableArrayRef v15 = (__CFString *)v50;
      uint64_t v32 = 0;
      if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, v50, @"MultiMake", @"POST", 0, v33, &v59, 0, 0, 0, 0, 0, 0) & 1) == 0)goto LABEL_102; {
    }
      }
    if (!v59)
    {
      CFStringRef format = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
      *(_OWORD *)CFMutableArrayRef v46 = 0u;
      *(_OWORD *)CFAllocatorRef v47 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = v32;
      goto LABEL_100;
    }
    if (v18) {
      CFRelease(v18);
    }
    CFAllocatorRef v34 = CFGetAllocator(a1);
    CFMutableArrayRef v35 = CFArrayCreateMutable(v34, 0, MEMORY[0x263EFFF70]);
    CFArrayRef v18 = v35;
    if (!v35)
    {
      AMFDRErrorPushInternal(v32, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"dataClassInstanceToRetry is NULL", v49);
      goto LABEL_58;
    }
    *(void *)&long long v60 = a1;
    *((void *)&v60 + 1) = v51;
    *(void *)&long long v61 = theDict;
    *((void *)&v61 + 1) = v35;
    uint64_t v62 = &v57;
    uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)v59);
    unsigned int Length = CFDataGetLength((CFDataRef)v59);
    if (AMFDRDecodeMultiResponse((uint64_t)BytePtr, Length, &v58, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiResponseCallback, (uint64_t)&v60))
    {
      CFStringRef format = @"AMFDRDecodeMultiResponse failed";
      *(_OWORD *)CFMutableArrayRef v46 = 0u;
      *(_OWORD *)CFAllocatorRef v47 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)v52;
      goto LABEL_98;
    }
    a4 = v52;
    if (v58 != 12)
    {
      char v49 = v58;
      CFStringRef format = @"actionCode returned is %d";
      *(_OWORD *)CFMutableArrayRef v46 = 0u;
      *(_OWORD *)CFAllocatorRef v47 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)v52;
LABEL_98:
      CFIndex v43 = 12;
LABEL_101:
      AMFDRErrorPushInternal(v42, v43, 0, 0, 0, 0, 0, 0, value[0], value[1], v46[0], v46[1], v47[0], v47[1], (uint64_t)"AMFDRDataHTTPMultiMake", format, v49);
      goto LABEL_58;
    }
    if ((_AMFDRSavePersistentCookie((uint64_t)a1, (uint64_t)v52) & 1) == 0)
    {
      CFStringRef format = @"_AMFDRSavePersistentCookie failed";
      *(_OWORD *)CFMutableArrayRef v46 = 0u;
      *(_OWORD *)CFAllocatorRef v47 = 0u;
      *(_OWORD *)CFMutableDictionaryRef value = 0u;
      uint64_t v42 = (uint64_t)v52;
LABEL_100:
      CFIndex v43 = 8;
      goto LABEL_101;
    }
    if (CFArrayGetCount(v18))
    {
      BOOL v38 = ++v16 >= _AMFDRGetMultiRequestMaxAttempts((uint64_t)a1);
      CFDataRef v17 = theArraya;
      if (v38) {
        goto LABEL_61;
      }
      continue;
    }
    break;
  }
  CFDataRef v17 = theArraya;
LABEL_61:
  CFMutableArrayRef theArraya = v17;
  if (CFDictionaryGetCount(theDict) >= 1) {
    AMFDRErrorPushInternal((uint64_t)a4, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiMake", @"got multiRequestErrors", v49);
  }
  CFTypeID v39 = v51;
  CFTypeRef v27 = CFRetain(v51);
LABEL_64:
  CFRelease(v39);
  if (v13) {
    goto LABEL_73;
  }
LABEL_74:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v53) {
    CFRelease(v53);
  }
LABEL_80:
  if (v59)
  {
    CFRelease(v59);
    CFTypeRef v59 = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  if (theArraya) {
    CFRelease(theArraya);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v27;
}

CFTypeRef AMFDRDataHTTPPopulate(__CFString *a1, const __CFString *a2, const __CFString *a3, uint64_t a4, CFTypeRef *a5)
{
  return AMFDRDataHTTPCopy(a1, a2, a3, a5);
}

__CFString *AMFDRDataHTTPMultiPopulate(__CFString *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  return _AMFDRDataHTTPMultiCopyInternal(a1, a2, a3, 0, a5);
}

uint64_t AMFDRDataHTTPCommit(int a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCommit", @"AMFDRDataHTTPCommit is not implemented", vars0);
  return 0;
}

__CFString *AMFDRDataHTTPMultiCopyDigest(__CFString *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataHTTPMultiCopyInternal(a1, a2, a3, 2u, a4);
}

uint64_t AMFDRDataHTTPCopyManifest(int a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPCopyManifest", @"AMFDRDataHTTPCopyManifest is not implemented", vars0);
  return 0;
}

__CFString *AMFDRDataHTTPMultiCopyManifest(__CFString *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataHTTPMultiCopyInternal(a1, a2, a3, 3u, a4);
}

CFArrayRef AMFDRDataHTTPPatch(__CFString *a1, void *a2, void *a3, const __CFArray *a4, void *a5, const __CFArray *a6, CFTypeRef *a7)
{
  return _AMFDRDataHTTPPatchInternal(a1, a2, a3, a4, 0, a5, a6, a7);
}

__CFString *AMFDRDataHTTPMultiPatch(__CFString *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, uint64_t a7)
{
  return _AMFDRDataHTTPMultiPatchInternal(a1, a2, a3, a4, 0, a5, a6, a7);
}

CFArrayRef AMFDRDataHTTPCommitPatch(__CFString *a1, void *a2, void *a3, const __CFArray *a4, void *a5, const __CFArray *a6, CFTypeRef *a7)
{
  return _AMFDRDataHTTPPatchInternal(a1, a2, a3, 0, a4, a5, a6, a7);
}

__CFString *AMFDRDataHTTPMultiCommitPatch(__CFString *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, uint64_t a7)
{
  return _AMFDRDataHTTPMultiPatchInternal(a1, a2, a3, 0, a4, a5, a6, a7);
}

uint64_t AMFDRDataHTTPUpdateMetadataWithOptions(uint64_t a1, uint64_t a2, const __CFString *a3, CFTypeRef cf, CFDictionaryRef a5, CFTypeRef *a6)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  result.location = 0xAAAAAAAAAAAAAAAALL;
  result.CFIndex length = 0xAAAAAAAAAAAAAAAALL;
  if (!a1)
  {
    CFStringRef v26 = @"amfdr is NULL";
    goto LABEL_37;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v26 = @"amfdr->optionsDict is NULL";
    goto LABEL_37;
  }
  if (!a2)
  {
    CFStringRef v26 = @"dataClassStr is NULL";
    goto LABEL_37;
  }
  if (!cf || (CFTypeID v12 = CFGetTypeID(cf), v12 != CFDictionaryGetTypeID()))
  {
    CFStringRef v26 = @"metaDataDict is of incorrect type";
LABEL_37:
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPUpdateMetadataWithOptions", v26, v28);
    return 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 136) + 8) & 2) != 0)
  {
    v32.location = 0;
    v32.CFIndex length = 4;
    if (CFStringFindWithOptions(a3, @"sik-", v32, 8uLL, &result))
    {
      AMFDRErrorPushInternal((uint64_t)a6, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPUpdateMetadataWithOptions", @"Station AMFDRDataHTTPUpdateMeta with sik format is forbidden. %@-%@", a2);
      return 0;
    }
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a6) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPUpdateMetadataWithOptions", @"AMFDRDataHTTPLoadPersistent failed", v28);
    return 0;
  }
  int v13 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/updateMetadata", a2, a3);
  if (!v13)
  {
    CFStringRef v26 = @"serverURL is NULL";
    goto LABEL_37;
  }
  CFAllocatorRef v14 = v13;
  if (!a5)
  {
LABEL_16:
    CFStringRef v19 = 0;
    goto LABEL_23;
  }
  CFTypeID v15 = CFGetTypeID(a5);
  if (v15 != CFDictionaryGetTypeID())
  {
    a5 = 0;
    goto LABEL_16;
  }
  CFStringRef Value = CFDictionaryGetValue(a5, @"MetadataType");
  if (!Value) {
    goto LABEL_19;
  }
  CFDataRef v17 = Value;
  if (CFEqual(Value, @"System"))
  {
    CFArrayRef v18 = @"x-fdr-metadata-";
    goto LABEL_20;
  }
  if (CFEqual(v17, @"User")) {
    CFArrayRef v18 = @"x-fdr-user-metadata-";
  }
  else {
LABEL_19:
  }
    CFArrayRef v18 = 0;
LABEL_20:
  CFAllocatorRef v20 = (void *)CFDictionaryGetValue((CFDictionaryRef)cf, @"asid");
  if (!v20)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPUpdateMetadataWithOptions", @"metadataValue is NULL", v28);
LABEL_45:
    CFRelease(v14);
    return 0;
  }
  CFMutableArrayRef v21 = v20;
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@%@", v18, @"asid");
  if (!v23)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPUpdateMetadataWithOptions", @"httpHeader is NULL", v28);
    goto LABEL_45;
  }
  CFStringRef v19 = v23;
  values = v21;
  keys[0] = (void *)v23;
  a5 = CFDictionaryCreate(v22, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (a5)
  {
LABEL_23:
    if (_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v14, @"UpdateMetaData", @"PUT", a5, 0, 0, 0, 0, 0, 0, 0, a6))
    {
      if (_AMFDRSavePersistentCookie(a1, (uint64_t)a6))
      {
        uint64_t v24 = 1;
        goto LABEL_26;
      }
      CFStringRef v27 = @"_AMFDRSavePersistentCookie failed";
    }
    else
    {
      CFStringRef v27 = @"AMFDRDataHTTPUpdateMetaData failed";
    }
    AMFDRErrorPushInternal((uint64_t)a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPUpdateMetadataWithOptions", v27, v28);
    uint64_t v24 = 0;
LABEL_26:
    CFRelease(v14);
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  AMFDRErrorPushInternal((uint64_t)a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPUpdateMetadataWithOptions", @"Unable to create HTTP metadata Headers dictionary", v28);
  CFRelease(v14);
  uint64_t v24 = 0;
LABEL_27:
  CFRelease(v19);
LABEL_28:
  if (a5) {
    CFRelease(a5);
  }
  return v24;
}

uint64_t AMFDRDataHTTPMultiUpdateMetadataWithOptions(__CFString *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, CFTypeRef *a6)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  CFTypeRef v63 = 0;
  char v62 = 0;
  int v66 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v64 = v6;
  long long v65 = v6;
  int v61 = 8;
  if (!a1)
  {
    CFStringRef v46 = @"amfdr is NULL";
LABEL_134:
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", v46, v47);
    goto LABEL_135;
  }
  CFArrayRef v7 = theArray;
  if (!theArray)
  {
    CFStringRef v46 = @"dataClassArray is NULL";
    goto LABEL_134;
  }
  if (!a3)
  {
    CFStringRef v46 = @"dataInstanceArray is NULL";
    goto LABEL_134;
  }
  if (!a4)
  {
    CFStringRef v46 = @"metaDataArray is NULL";
    goto LABEL_134;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v46 = @"Invalid dataClassArray count";
    goto LABEL_134;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v46 = @"Invalid dataInstanceArray count";
    goto LABEL_134;
  }
  if (CFArrayGetCount(a4) != v11)
  {
    CFStringRef v46 = @"Invalid metaDataArray count";
    goto LABEL_134;
  }
  if (a5 && CFArrayGetCount(a5) != v11)
  {
    CFStringRef v46 = @"Invalid optionsArray or count";
    goto LABEL_134;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v12, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"multiRequestErrors is NULL", v47);
LABEL_135:
    CFArrayRef v17 = 0;
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef v15 = 0;
    CFMutableArrayRef cf = 0;
    CFAllocatorRef v14 = 0;
    uint64_t v31 = 0;
    goto LABEL_89;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a6) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"AMFDRDataHTTPLoadPersistent failed", v47);
LABEL_132:
    CFRelease(theDict);
    goto LABEL_135;
  }
  int v48 = _AMFDRCreateUrlWithKey((uint64_t)a1, @"DSURL", @"dm/bulk/metadata", 0, 0);
  if (!v48)
  {
    AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"serverURL is NULL", v47);
    goto LABEL_132;
  }
  if (!_AMFDRGetMultiRequestMaxAttempts((uint64_t)a1))
  {
    CFDataRef v18 = 0;
    CFArrayRef v17 = 0;
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef v15 = 0;
    CFMutableArrayRef cf = 0;
    CFAllocatorRef v14 = 0;
    CFStringRef v13 = 0;
LABEL_75:
    if (!CFDictionaryGetCount(theDict))
    {
      uint64_t v31 = 1;
      if (v13) {
        goto LABEL_77;
      }
      goto LABEL_87;
    }
    AMFDRErrorPushInternal((uint64_t)a6, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"got multiRequestErrors", v47);
LABEL_109:
    uint64_t v31 = 0;
    if (v13) {
      goto LABEL_77;
    }
    goto LABEL_87;
  }
  CFIndex v56 = v11;
  CFStringRef v13 = 0;
  int v51 = 0;
  CFAllocatorRef v14 = 0;
  CFMutableArrayRef cf = 0;
  CFMutableArrayRef v15 = 0;
  CFMutableArrayRef Mutable = 0;
  CFArrayRef v17 = 0;
  CFDataRef v18 = 0;
  while (1)
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v15) {
      CFRelease(v15);
    }
    if (cf) {
      CFRelease(cf);
    }
    CFStringRef v19 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    if (v18) {
      CFRelease(v18);
    }
    if (v63)
    {
      CFRelease(v63);
      CFTypeRef v63 = 0;
    }
    if (v14) {
      CFRelease(v14);
    }
    CFAllocatorRef v20 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v20, 0, v19);
    if (!Mutable)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"dataClassToRequest is NULL", v47);
      CFDataRef v18 = 0;
      CFMutableArrayRef v15 = 0;
LABEL_107:
      CFMutableArrayRef cf = 0;
      goto LABEL_108;
    }
    CFAllocatorRef v21 = CFGetAllocator(a1);
    CFMutableArrayRef v15 = CFArrayCreateMutable(v21, 0, v19);
    if (!v15)
    {
      CFStringRef v43 = @"dataInstanceToRequest is NULL";
LABEL_106:
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", v43, v47);
      CFDataRef v18 = 0;
      goto LABEL_107;
    }
    CFAllocatorRef v22 = CFGetAllocator(a1);
    CFMutableArrayRef cf = CFArrayCreateMutable(v22, 0, v19);
    if (!cf)
    {
      CFStringRef v43 = @"metaDataToRequest is NULL";
      goto LABEL_106;
    }
    if (a5)
    {
      CFAllocatorRef v23 = CFGetAllocator(a1);
      CFMutableArrayRef v24 = CFArrayCreateMutable(v23, 0, MEMORY[0x263EFFF70]);
      if (!v24)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"optionsToRequest is NULL", v47);
        CFDataRef v18 = 0;
LABEL_108:
        CFAllocatorRef v14 = 0;
        goto LABEL_109;
      }
    }
    else
    {
      CFMutableArrayRef v24 = 0;
    }
    CFStringRef v52 = v24;
    CFArrayRef v59 = v17;
    CFStringRef v54 = Mutable;
    char v55 = v15;
    if (v51)
    {
      unsigned int v25 = _AMFDRGetMultiRequestBackoff((uint64_t)a1) * v51;
      AMSupportLogInternal();
      sleep(v25);
    }
    CFIndex v26 = 0;
    CFStringRef v27 = cf;
    do
    {
      if (v13) {
        CFRelease(v13);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v26);
      if (!ValueAtIndex)
      {
        CFStringRef format = @"dataClassStr is NULL";
        goto LABEL_83;
      }
      CFStringRef v29 = ValueAtIndex;
      if (!CFStringGetLength(ValueAtIndex))
      {
        CFStringRef format = @"dataClassStr length is 0";
        goto LABEL_83;
      }
      CFStringRef v30 = (const __CFString *)CFArrayGetValueAtIndex(a3, v26);
      CFDataRef v18 = (const __CFData *)v30;
      if (!v30)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"dataInstanceStr is NULL", v47);
        goto LABEL_85;
      }
      if ((*(unsigned char *)(a1[4].info + 8) & 2) != 0)
      {
        result.location = 0xAAAAAAAAAAAAAAAALL;
        result.CFIndex length = 0xAAAAAAAAAAAAAAAALL;
        v69.location = 0;
        v69.CFIndex length = 4;
        if (CFStringFindWithOptions(v30, @"sik-", v69, 8uLL, &result))
        {
          AMFDRErrorPushInternal((uint64_t)a6, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"Station AMFDRDataHTTPMultiPut with sik format is forbidden. %@-%@", (char)v29);
LABEL_84:
          CFDataRef v18 = 0;
LABEL_85:
          uint64_t v31 = 0;
LABEL_86:
          CFMutableArrayRef Mutable = v54;
          CFMutableArrayRef v15 = v55;
          CFArrayRef v17 = v59;
          CFAllocatorRef v14 = v52;
          goto LABEL_87;
        }
      }
      uint64_t v31 = (uint64_t)CFArrayGetValueAtIndex(a4, v26);
      if (!v31)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"metaDict is NULL", v47);
        CFDataRef v18 = 0;
        goto LABEL_86;
      }
      CFArrayRef v32 = v7;
      if (a5)
      {
        CFDataRef v33 = CFArrayGetValueAtIndex(a5, v26);
        if (!v33)
        {
          CFStringRef format = @"options is NULL";
LABEL_83:
          AMFDRErrorPushInternal((uint64_t)a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", format, v47);
          goto LABEL_84;
        }
      }
      else
      {
        CFDataRef v33 = 0;
      }
      CFAllocatorRef v34 = CFGetAllocator(a1);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v34, (uint64_t)v29, (uint64_t)v18);
      if (!FullKey)
      {
        AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"currDataInstance is NULL", v47);
        goto LABEL_84;
      }
      CFStringRef v13 = FullKey;
      if (v59)
      {
        v68.CFIndex length = CFArrayGetCount(v59);
        CFStringRef v27 = cf;
        v68.location = 0;
        if (!CFArrayContainsValue(v59, v68, v13)) {
          goto LABEL_55;
        }
        CFDictionaryRemoveValue(theDict, v13);
        AMSupportLogInternal();
      }
      CFArrayAppendValue(v54, v29);
      CFArrayAppendValue(v55, v18);
      CFArrayAppendValue(v27, (const void *)v31);
      if (a5) {
        CFArrayAppendValue(v52, v33);
      }
LABEL_55:
      ++v26;
      CFArrayRef v7 = v32;
    }
    while (v56 != v26);
    CFTypeID v36 = a6;
    CFMutableArrayRef Mutable = v54;
    CFMutableArrayRef v15 = v55;
    CFDataRef v18 = AMFDRDataHTTPCreateMultiRequest(a1, 7u, v54, v55, 0, v52, v27, 0, (uint64_t)a6);
    if (!v18)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"httpRequestData is NULL", v47);
      uint64_t v31 = 0;
      CFArrayRef v17 = v59;
      CFAllocatorRef v14 = v52;
      goto LABEL_77;
    }
    CFArrayRef v17 = v59;
    if (a6) {
      break;
    }
    CFAllocatorRef v14 = v52;
    if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v48, @"MultiUpdateMetaData", @"POST", 0, v18, &v63, 0, 0, 0, 0, 0, 0) & 1) == 0)goto LABEL_120; {
LABEL_64:
    }
    if (!v63)
    {
      CFStringRef v44 = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
LABEL_119:
      AMFDRErrorPushInternal((uint64_t)a6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", v44, v47);
      goto LABEL_121;
    }
    if (v59) {
      CFRelease(v59);
    }
    CFAllocatorRef v37 = CFGetAllocator(a1);
    CFMutableArrayRef v38 = CFArrayCreateMutable(v37, 0, MEMORY[0x263EFFF70]);
    CFArrayRef v17 = v38;
    if (!v38)
    {
      AMFDRErrorPushInternal((uint64_t)a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", @"dataClassInstanceToRetry is NULL", v47);
      goto LABEL_121;
    }
    long long v64 = (unint64_t)a1;
    *(void *)&long long v65 = theDict;
    *((void *)&v65 + 1) = v38;
    int v66 = &v61;
    uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)v63);
    unsigned int Length = CFDataGetLength((CFDataRef)v63);
    if (AMFDRDecodeMultiResponse((uint64_t)BytePtr, Length, &v62, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiResponseCallback, (uint64_t)&v64))
    {
      CFStringRef v45 = @"AMFDRDecodeMultiResponse failed";
LABEL_117:
      AMFDRErrorPushInternal((uint64_t)a6, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPMultiUpdateMetadataWithOptions", v45, v47);
      goto LABEL_121;
    }
    if (v62 != 7)
    {
      char v47 = v62;
      CFStringRef v45 = @"actionCode returned is %d";
      goto LABEL_117;
    }
    if ((_AMFDRSavePersistentCookie((uint64_t)a1, (uint64_t)a6) & 1) == 0)
    {
      CFStringRef v44 = @"_AMFDRSavePersistentCookie failed";
      goto LABEL_119;
    }
    if (CFArrayGetCount(v17))
    {
      if (++v51 < _AMFDRGetMultiRequestMaxAttempts((uint64_t)a1)) {
        continue;
      }
    }
    goto LABEL_75;
  }
  CFAllocatorRef v14 = v52;
  if (*a6)
  {
    CFRelease(*a6);
    CFTypeID v36 = a6;
    *a6 = 0;
  }
  if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v48, @"MultiUpdateMetaData", @"POST", 0, v18, &v63, 0, 0, 0, 0, 0, v36) & 1) != 0&& !*a6)
  {
    goto LABEL_64;
  }
LABEL_120:
  AMSupportLogInternal();
LABEL_121:
  uint64_t v31 = 0;
LABEL_77:
  CFRelease(v13);
LABEL_87:
  CFRelease(theDict);
  CFRelease(v48);
  if (v18) {
    CFRelease(v18);
  }
LABEL_89:
  if (v63)
  {
    CFRelease(v63);
    CFTypeRef v63 = 0;
  }
  if (v17) {
    CFRelease(v17);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v31;
}

__CFString *AMFDRDataHTTPMultiCopyAsidMetadata(__CFString *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataHTTPMultiCopyInternal(a1, a2, a3, 4u, a4);
}

uint64_t AMFDRDataHTTPRevert(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  if (!a1)
  {
    CFStringRef v12 = @"amfdr is NULL";
LABEL_18:
    AMFDRErrorPushInternal((uint64_t)a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPRevert", v12, v14);
    return 0;
  }
  if (!*(void *)(a1 + 16))
  {
    CFStringRef v12 = @"amfdr->optionsDict is NULL";
    goto LABEL_18;
  }
  if (!a2)
  {
    CFStringRef v12 = @"sealedDataClass is NULL";
    goto LABEL_18;
  }
  if (!a3)
  {
    CFStringRef v12 = @"sealedDataInstance is NULL";
    goto LABEL_18;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)a1, a4) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPRevert", @"AMFDRDataHTTPLoadPersistent failed", v14);
    return 0;
  }
  CFStringRef v8 = _AMFDRCreateUrlWithKey(a1, @"DSURL", @"dm/revert", a2, a3);
  if (!v8)
  {
    CFStringRef v12 = @"serverURL is NULL";
    goto LABEL_18;
  }
  CFIndex v9 = v8;
  if (!_AMFDRHttpRequestSendSync((CFDictionaryRef *)a1, (const __CFURL *)v8, @"Revert", @"POST", 0, 0, 0, 0, 0, 0, 0, 0, a4))
  {
    CFStringRef v13 = @"AMFDRDataHTTPRevert failed";
LABEL_22:
    AMFDRErrorPushInternal((uint64_t)a4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPRevert", v13, v14);
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  if ((_AMFDRSavePersistentCookie(a1, (uint64_t)a4) & 1) == 0)
  {
    CFStringRef v13 = @"_AMFDRSavePersistentCookie failed";
    goto LABEL_22;
  }
  uint64_t v10 = 1;
LABEL_10:
  CFRelease(v9);
  return v10;
}

uint64_t AMFDRCertificateSigningRequest(CFDictionaryRef *a1, const __CFData *a2, uint64_t a3, CFTypeRef *a4, uint64_t *a5)
{
  int v20 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCertificateSigningRequest", @"internalHttpXHeaders is NULL", v19);
    return 0;
  }
  CFIndex v11 = Mutable;
  CFDictionaryRef v12 = a1[2];
  if (v12 && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v12, @"CertifyHeaders")) != 0)
  {
    CFDictionaryRef v14 = Value;
    if (CFDictionaryContainsKey(Value, @"x-fdr-client-id"))
    {
      CFMutableArrayRef v15 = 0;
    }
    else
    {
      CFMutableArrayRef v15 = (const void *)AMFDRCopyCertifyClientId(a1);
      if (v15) {
        CFDictionarySetValue(v11, @"x-fdr-client-id", v15);
      }
    }
    if (CFDictionaryContainsKey(v14, @"x-fdr-client-id-sik")) {
      goto LABEL_16;
    }
  }
  else
  {
    CFMutableArrayRef v15 = (const void *)AMFDRCopyCertifyClientId(a1);
    if (v15) {
      CFDictionarySetValue(v11, @"x-fdr-client-id", v15);
    }
  }
  if ((*((unsigned char *)a1[17] + 8) & 2) == 0)
  {
    CFStringRef v16 = 0;
    if (AMFDRDataGetSigningVersion((uint64_t)a1, &v20))
    {
      if (v20 == 2)
      {
        CFStringRef v16 = AMFDRCopyCertifyClientIdSik(a1);
        if (v16) {
          CFDictionarySetValue(v11, @"x-fdr-client-id-sik", v16);
        }
      }
    }
    goto LABEL_17;
  }
LABEL_16:
  CFStringRef v16 = 0;
LABEL_17:
  uint64_t v17 = _AMFDRCertificateSigningRequestInternal(a1, a2, a3, v11, a4, a5);
  CFRelease(v11);
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v17;
}

uint64_t _AMFDRCertificateSigningRequestInternal(CFDictionaryRef *a1, const __CFData *a2, uint64_t a3, const void *a4, CFTypeRef *a5, uint64_t *a6)
{
  CFTypeRef cf = 0;
  CFMutableDictionaryRef value = 0;
  uint64_t v37 = -1;
  if (!a1)
  {
    CFStringRef v29 = @"amfdr is NULL";
LABEL_42:
    AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCertificateSigningRequestInternal", v29, v36);
    CFURLRef v14 = 0;
LABEL_44:
    CFDataRef PemFromData = 0;
    goto LABEL_46;
  }
  CFDataRef PemFromData = a2;
  if (!a2)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCertificateSigningRequestInternal", @"csrDERData is NULL", v36);
    CFURLRef v14 = 0;
    goto LABEL_46;
  }
  CFDictionaryRef v9 = a1[2];
  if (!v9)
  {
    CFStringRef v29 = @"amfdr->optionsDict is NULL";
    goto LABEL_42;
  }
  if (CFDictionaryGetValue(v9, @"CertifyURL"))
  {
    CFGetAllocator(a1);
    uint64_t URLFromString = AMSupportCreateURLFromString();
  }
  else
  {
    uint64_t URLFromString = (uint64_t)_AMFDRCreateUrlWithKey((uint64_t)a1, @"CAURL", @"ca/authorize", 0, 0);
  }
  CFURLRef v14 = (const __CFURL *)URLFromString;
  if (!URLFromString)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCertificateSigningRequestInternal", @"serverURL is NULL", v36);
    goto LABEL_44;
  }
  CFMutableArrayRef v15 = CFDictionaryGetValue(a1[2], @"CertifyBase64");
  BOOL v18 = v15
     && (CFStringRef v16 = v15, TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v16))
     && CFBooleanGetValue((CFBooleanRef)v16) == 1;
  CFDataRef PemFromData = AMFDRCryptoCreatePemFromData((uint64_t)PemFromData, !v18);
  if (PemFromData)
  {
    CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a1[2], @"CertifyHeaders");
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (v19) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v20, 0, v19);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v20, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    }
    CFAllocatorRef v22 = MutableCopy;
    if (MutableCopy)
    {
      CFTypeID v23 = CFGetTypeID(MutableCopy);
      if (v23 == CFDictionaryGetTypeID())
      {
        if (a4)
        {
          CFTypeID v24 = CFGetTypeID(a4);
          if (v24 != CFDictionaryGetTypeID())
          {
            CFStringRef v30 = @"internalHeaders is not dictionary";
            goto LABEL_53;
          }
          if ((_CFDictionaryAddDictionary(v22, (CFDictionaryRef)a4) & 1) == 0)
          {
            CFStringRef v30 = @"_CFDictionaryAddDictionary fail to add dictionary";
            goto LABEL_53;
          }
        }
        if (!a3)
        {
LABEL_25:
          uint64_t v26 = 1;
          if (_AMFDRHttpRequestSendSyncNoRetry((uint64_t)a1, v14, @"CertificateSigning", @"POST", @"application/x-pem-file", v22, PemFromData, a5, 0, 1, 0, 0, &v37, (uint64_t)&cf))goto LABEL_26; {
          CFStringRef v35 = @"AMFDRCertificateSigningRequest failed";
          }
          *(_OWORD *)CFDataRef v33 = 0u;
          *(_OWORD *)CFAllocatorRef v34 = 0u;
          *(_OWORD *)CFArrayRef v32 = 0u;
          CFIndex v31 = 8;
          goto LABEL_54;
        }
        CFAllocatorRef v25 = CFGetAllocator(a1);
        if (_AMFDRSupportBase64Encode((uint64_t)v25, a3, (uint64_t)&value))
        {
          if (!value)
          {
            AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCertificateSigningRequestInternal", @"base64CsrSignature is NULL", v36);
            goto LABEL_55;
          }
          CFDictionarySetValue(v22, @"x-fdr-csr-signature", value);
          goto LABEL_25;
        }
        CFStringRef v30 = @"_AMFDRSupportBase64Encode failed";
      }
      else
      {
        CFStringRef v30 = @"httpXHeaders is not dictionary";
      }
    }
    else
    {
      CFStringRef v30 = @"Unable to create HTTP header extension dictionary";
    }
LABEL_53:
    CFStringRef v35 = v30;
    *(_OWORD *)CFDataRef v33 = 0u;
    *(_OWORD *)CFAllocatorRef v34 = 0u;
    *(_OWORD *)CFArrayRef v32 = 0u;
    CFIndex v31 = 10;
LABEL_54:
    AMFDRErrorPushInternal((uint64_t)&cf, v31, 0, 0, 0, 0, 0, 0, v32[0], v32[1], v33[0], v33[1], (void *)v34[0], (void *)v34[1], (uint64_t)"_AMFDRCertificateSigningRequestInternal", v35, v36);
    goto LABEL_55;
  }
  AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRCertificateSigningRequestInternal", @"csrData is NULL", v36);
LABEL_46:
  CFAllocatorRef v22 = 0;
LABEL_55:
  if (cf) {
    AMSupportLogInternal();
  }
  uint64_t v26 = 0;
LABEL_26:
  CFTypeRef v27 = cf;
  if (a6)
  {
    *a6 = AMSupportSafeRetain();
    CFTypeRef v27 = cf;
  }
  if (v27)
  {
    CFRelease(v27);
    CFTypeRef cf = 0;
  }
  if (v14) {
    CFRelease(v14);
  }
  if (PemFromData) {
    CFRelease(PemFromData);
  }
  if (value)
  {
    CFRelease(value);
    CFMutableDictionaryRef value = 0;
  }
  if (v22) {
    CFRelease(v22);
  }
  return v26;
}

uint64_t AMFDRCertificationRequest(uint64_t a1, const __CFData *a2, uint64_t a3, uint64_t *a4)
{
  CFMutableDictionaryRef value = 0;
  CFTypeRef cf = 0;
  if ((!a1 || (*(unsigned char *)(*(void *)(a1 + 136) + 8) & 2) == 0)
    && AMFDRSealingMapGetFDRDataVersionForDeviceInternal(a1) == 2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      uint64_t SikPub = (const void *)AMFDRCryptoGetSikPub(a1);
      if (SikPub)
      {
        CFDictionarySetValue(Mutable, @"x-fdr-client-id-sik", SikPub);
        goto LABEL_8;
      }
      AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCertificationRequest", @"sik is NULL", (char)value);
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCertificationRequest", @"internalHttpXHeaders is NULL", (char)value);
    }
    uint64_t v15 = 0;
    goto LABEL_15;
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_8:
  CFDictionaryRef v10 = (const __CFDictionary *)AMFDRGetOptions(a1);
  CFIndex v11 = _CFDictionaryCopyValue(v10, @"CertifyManifestSigCert");
  if (!v11)
  {
    uint64_t v15 = _AMFDRCertificateSigningRequestInternal((CFDictionaryRef *)a1, a2, a3, Mutable, &cf, a4);
    goto LABEL_15;
  }
  CFDictionaryRef v12 = v11;
  CFTypeID v13 = CFGetTypeID(v11);
  if (v13 == CFDataGetTypeID())
  {
    CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)a1);
    if (_AMFDRSupportBase64Encode((uint64_t)v14, (uint64_t)v12, (uint64_t)&value))
    {
      CFDictionarySetValue(Mutable, @"x-fdr-partial-im4m", value);
      uint64_t v15 = _AMFDRCertificateSigningRequestInternal((CFDictionaryRef *)a1, a2, a3, Mutable, &cf, a4);
      goto LABEL_12;
    }
    CFStringRef v17 = @"cannot convert partialIm4mData to base64 string";
  }
  else
  {
    CFStringRef v17 = @"partialIm4mData is in malformed format";
  }
  AMFDRErrorPushInternal((uint64_t)a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRCertificationRequest", v17, (char)value);
  uint64_t v15 = 0;
LABEL_12:
  CFRelease(v12);
  if (value)
  {
    CFRelease(value);
    CFMutableDictionaryRef value = 0;
  }
LABEL_15:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

uint64_t AMFDRModuleCreateSignedCSR(const void **a1, const void *a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t)a1;
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRModuleCreateSignedCSR", @"certificationCtx is NULL", v31);
    return v5;
  }
  long long v6 = *a1;
  if (!*(void *)v5) {
    goto LABEL_33;
  }
  CFTypeID v9 = CFGetTypeID(v6);
  if (v9 != CFStringGetTypeID())
  {
    uint64_t v28 = *(void *)v5;
    goto LABEL_39;
  }
  CFDictionaryRef v10 = *(const void **)(v5 + 24);
  if (!v10)
  {
LABEL_33:
    LOBYTE(v28) = 0;
LABEL_39:
    char v31 = v28;
    CFStringRef v29 = @"moduleDataInstanceStr has wrong type: %@";
    goto LABEL_49;
  }
  CFTypeID v11 = CFGetTypeID(v10);
  if (v11 != CFStringGetTypeID())
  {
    uint64_t v28 = *(void *)(v5 + 24);
    goto LABEL_39;
  }
  CFDictionaryRef v12 = *(const void **)(v5 + 32);
  if (!v12)
  {
    LOBYTE(v30) = 0;
LABEL_42:
    char v31 = v30;
    CFStringRef v29 = @"moduleRawPublicKey has wrong type: %@";
    goto LABEL_49;
  }
  CFTypeID v13 = CFGetTypeID(v12);
  if (v13 != CFDataGetTypeID())
  {
    uint64_t v30 = *(void *)(v5 + 32);
    goto LABEL_42;
  }
  if (!*(void *)(v5 + 40))
  {
    CFStringRef v29 = @"csrSign is NULL";
    goto LABEL_49;
  }
  if (!a2 || (CFTypeID v14 = CFGetTypeID(a2), v14 != CFDictionaryGetTypeID()))
  {
    char v31 = (char)a2;
    CFStringRef v29 = @"certificationOptions has wrong type: %@";
LABEL_49:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRModuleCreateSignedCSR", v29, v31);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v29 = @"outSignedCsr is NULL";
    goto LABEL_49;
  }
  if (!a4)
  {
    AMFDRErrorPushInternal(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRModuleCreateSignedCSR", @"outError is NULL", v31);
    return 0;
  }
  CFStringRef v15 = *(const __CFString **)(v5 + 24);
  if (!v15 || (CFTypeID v16 = CFGetTypeID(*(CFTypeRef *)(v5 + 24)), v16 != CFStringGetTypeID()))
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateInternalCertificationOptions", @"moduleChipName has wrong type: %@", (char)v15);
LABEL_48:
    CFStringRef v29 = @"internalCertificationOptions is NULL";
    goto LABEL_49;
  }
  CFTypeID v17 = CFGetTypeID(a2);
  if (v17 != CFDictionaryGetTypeID())
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateInternalCertificationOptions", @"certificationOptions has wrong type: %@", (char)a2);
    goto LABEL_48;
  }
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, (CFDictionaryRef)a2);
  if (!MutableCopy)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateInternalCertificationOptions", @"failed to create internalCertificationOptions", v31);
    goto LABEL_48;
  }
  CFMutableDictionaryRef v20 = MutableCopy;
  if (CFStringCompare(v15, @"brunor", 0))
  {
    uint64_t v21 = 0;
    CFStringRef v22 = 0;
    goto LABEL_23;
  }
  CFStringRef v23 = AMFDRSealingMapCallMGCopyAnswer(@"ProductType", 0);
  if (!v23)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateInternalCertificationOptions", @"can't get productType\n", v31);
    CFRelease(v20);
    goto LABEL_48;
  }
  CFStringRef v22 = v23;
  CFDictionarySetValue(v20, @"CertifyPartNumber", v23);
  CFDictionarySetValue(v20, @"CertifyNoClientID", (const void *)*MEMORY[0x263EFFB40]);
  if (CFStringCompare(v15, @"brunor", 0))
  {
    uint64_t v21 = 0;
  }
  else
  {
    CFDictionarySetValue(v20, @"CertifyComponentType", @"iPhone FCAM IR");
    uint64_t v21 = 67586;
  }
LABEL_23:
  CFTypeRef v24 = CFRetain(v20);
  CFRelease(v20);
  if (v22) {
    CFRelease(v22);
  }
  if (!v24) {
    goto LABEL_48;
  }
  CFAllocatorRef v25 = (__CFString *)AMFDRCreateTypeWithOptions(v18, @"Local", 0);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v5 = _AMFDRModuleCreateSignedCSR(v25, v5, v24, &cf, v21, a4);
    if (v5) {
      *a3 = CFRetain(cf);
    }
    else {
      AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRModuleCreateSignedCSR", @"Failed to create csr, _AMFDRModuleCreateSignedCSR failed.", v31);
    }
    CFRelease(v26);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  else
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRModuleCreateSignedCSR", @"amfdr is NULL", v31);
    uint64_t v5 = 0;
  }
  CFRelease(v24);
  return v5;
}

uint64_t _AMFDRModuleCreateSignedCSR(__CFString *a1, uint64_t a2, const void *a3, CFTypeRef *a4, uint64_t a5, uint64_t a6)
{
  UInt8 bytes = 4;
  if (!a1)
  {
    CFStringRef v35 = @"amfdr is NULL";
LABEL_42:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateSignedCSR", v35, v40);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v35 = @"CertificationCtx is NULL";
    goto LABEL_42;
  }
  if (!*(void *)a2)
  {
    LOBYTE(v36) = 0;
LABEL_32:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateSignedCSR", @"moduleDataInstanceStr has wrong type: %@", (char)v36);
    return 0;
  }
  CFTypeID v12 = CFGetTypeID(*(CFTypeRef *)a2);
  if (v12 != CFStringGetTypeID())
  {
    CFTypeRef v36 = *(CFTypeRef *)a2;
    goto LABEL_32;
  }
  CFTypeID v13 = *(const void **)(a2 + 24);
  if (!v13)
  {
    LOBYTE(v37) = 0;
LABEL_35:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateSignedCSR", @"moduleChipNameStr has wrong type: %@", v37);
    return 0;
  }
  CFTypeID v14 = CFGetTypeID(v13);
  if (v14 != CFStringGetTypeID())
  {
    uint64_t v37 = *(void *)(a2 + 24);
    goto LABEL_35;
  }
  CFStringRef v15 = *(const void **)(a2 + 32);
  if (!v15)
  {
    LOBYTE(v38) = 0;
LABEL_38:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateSignedCSR", @"moduleRawPublicKey has wrong type: %@", v38);
    return 0;
  }
  CFTypeID v16 = CFGetTypeID(v15);
  if (v16 != CFDataGetTypeID())
  {
    uint64_t v38 = *(void *)(a2 + 32);
    goto LABEL_38;
  }
  if (!*(void *)(a2 + 40))
  {
    CFStringRef v35 = @"csrSign is NULL";
    goto LABEL_42;
  }
  if (!a5)
  {
    CFStringRef v35 = @"cryptoVersion is undefined";
    goto LABEL_42;
  }
  if (!a4)
  {
    CFStringRef v35 = @"outSignedCsr is NULL";
    goto LABEL_42;
  }
  if (a3)
  {
    CFTypeID v17 = CFGetTypeID(a3);
    if (v17 == CFDictionaryGetTypeID())
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a3, @"CertifyRawPublicKey");
      if (Value)
      {
        CFBooleanRef v19 = Value;
        CFTypeID v20 = CFGetTypeID(Value);
        if (v20 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v19))
          {
            if ((CFDataGetLength(*(CFDataRef *)(a2 + 32)) & 1) == 0)
            {
              CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFIndex Length = CFDataGetLength(*(CFDataRef *)(a2 + 32));
              CFMutableDictionaryRef Mutable = CFDataCreateMutable(v21, Length + 1);
              if (Mutable)
              {
                CFTypeRef v24 = Mutable;
                CFDataAppendBytes(Mutable, &bytes, 1);
                uint64_t BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 32));
                CFIndex v26 = CFDataGetLength(*(CFDataRef *)(a2 + 32));
                CFDataAppendBytes(v24, BytePtr, v26);
                AMSupportLogInternal();
                CFTypeRef v27 = v24;
                goto LABEL_21;
              }
            }
          }
        }
        AMSupportLogInternal();
        return 0;
      }
    }
  }
  CFTypeRef v24 = 0;
  CFTypeRef v27 = *(__CFData **)(a2 + 32);
LABEL_21:
  CFTypeRef v41 = *(CFTypeRef *)a2;
  uint64_t v42 = @"Components";
  uint64_t v28 = *(void *)(a2 + 40);
  CFStringRef v43 = v27;
  uint64_t v44 = v28;
  uint64_t v45 = 0;
  CFDictionaryRef data = (const __CFDictionary *)a1->data;
  if (!data)
  {
    CFStringRef v39 = @"amfdr->optionsDict is NULL";
    goto LABEL_46;
  }
  uint64_t v30 = (__CFString *)CFDictionaryGetValue(data, @"OrganizationalUnit");
  if (v30) {
    uint64_t v42 = v30;
  }
  ModuleCFDataRef SignedCsr = AMFDRCryptoCreateModuleSignedCsr(a1, a5, (uint64_t)&v41, (const __CFDictionary *)a3, *(void *)(a2 + 56));
  if (!ModuleSignedCsr)
  {
    CFStringRef v39 = @"Failed to create csr, AMFDRCryptoCreateModuleSignedCsr failed.";
LABEL_46:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRModuleCreateSignedCSR", v39, v40);
    uint64_t v33 = 0;
    if (!v24) {
      return v33;
    }
    goto LABEL_26;
  }
  CFDataRef v32 = ModuleSignedCsr;
  *a4 = CFRetain(ModuleSignedCsr);
  CFRelease(v32);
  uint64_t v33 = 1;
  if (v24) {
LABEL_26:
  }
    CFRelease(v24);
  return v33;
}

uint64_t AMFDRModuleCertification(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t *a4)
{
  return AMFDRModuleCertificationWithOptions(a1, a2, 0, a3, a4);
}

uint64_t AMFDRModuleCertificationWithOptions(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4, uint64_t *a5)
{
  CFDataRef v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  if (!a1
    || !a2
    || !*(void *)a2
    || !*(void *)(a2 + 24)
    || !*(void *)(a2 + 32)
    || !*(void *)(a2 + 40)
    || !*(void *)(a2 + 48))
  {
    goto LABEL_32;
  }
  if ((_AMFDRModuleCreateSignedCSR((__CFString *)a1, a2, a3, (CFTypeRef *)&v19, 514, (uint64_t)a5) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRModuleCertificationWithOptions", @"Failed to create csr, _AMFDRModuleCreateSignedCSR failed.", v17);
LABEL_33:
    uint64_t v15 = 0;
    goto LABEL_21;
  }
  if (((*(uint64_t (**)(uint64_t, const __CFData *, uint64_t *, void))(a2 + 48))(4, v19, &v18, *(void *)(a2 + 56)) & 1) == 0)
  {
LABEL_32:
    AMSupportLogInternal();
    goto LABEL_33;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(Mutable, @"x-fdr-chip-name", *(const void **)(a2 + 24));
  CFDictionaryRef v10 = *(const void **)(a2 + 16);
  if (v10) {
    CFDictionarySetValue(Mutable, @"x-fdr-metadata-ChipID", v10);
  }
  CFTypeID v11 = *(const void **)(a2 + 8);
  if (v11) {
    CFDictionarySetValue(Mutable, @"x-fdr-client-auth-kcv", v11);
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"CertifyHeaders");
  if (!Value
    || (CFDictionaryRef v13 = Value, v14 = CFGetTypeID(Value), v14 == CFDictionaryGetTypeID())
    && !CFDictionaryContainsKey(v13, @"x-fdr-certification-type"))
  {
    CFDictionarySetValue(Mutable, @"x-fdr-certification-type", @"component");
  }
  if (Mutable && (_AMFDRCertificateSigningRequestInternal((CFDictionaryRef *)a1, v19, v18, Mutable, a4, &v20) & 1) != 0)
  {
    uint64_t v15 = 1;
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v15 = 0;
  }
LABEL_21:
  if (a5) {
    *a5 = AMSupportSafeRetain();
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v15;
}

uint64_t AMFDRSensorAuthCertification(CFDictionaryRef *a1, CFTypeRef cf, CFTypeRef *a3, uint64_t *a4)
{
  uint64_t v19 = 0;
  if (!a1)
  {
    CFStringRef v17 = @"amfdr is NULL";
LABEL_17:
    AMFDRErrorPushInternal((uint64_t)&v19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSensorAuthCertification", v17, v18);
LABEL_18:
    uint64_t v15 = 0;
    if (!a4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (!cf || (CFTypeID v8 = CFGetTypeID(cf), v8 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)&v19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSensorAuthCertification", @"certificationOptions has wrong type: %@", (char)cf);
    goto LABEL_18;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"CertifySaltAttestationSignature");
  uint64_t v10 = (uint64_t)Value;
  if (!Value || (CFTypeID v11 = CFGetTypeID(Value), v11 != CFDataGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)&v19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSensorAuthCertification", @"saltWtihAttestationSignature has wrong type: %@", v10);
    goto LABEL_18;
  }
  CFDataRef v12 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"CertifySignedCSR");
  CFDataRef v13 = v12;
  if (!v12 || (CFTypeID v14 = CFGetTypeID(v12), v14 != CFDataGetTypeID()))
  {
    AMFDRErrorPushInternal((uint64_t)&v19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSensorAuthCertification", @"csrDerData has wrong type: %@", (char)v13);
    goto LABEL_18;
  }
  if ((_AMFDRCertificateSigningRequestInternal(a1, v13, v10, 0, a3, &v19) & 1) == 0)
  {
    char v18 = v19;
    CFStringRef v17 = @"_AMFDRCertificateSigningRequestInternal() failed: %@";
    goto LABEL_17;
  }
  uint64_t v15 = 1;
  if (a4) {
LABEL_10:
  }
    *a4 = AMSupportSafeRetain();
LABEL_11:
  AMSupportSafeRelease();
  return v15;
}

const void *AMFDRChipCertifyForRestore(int a1, const void *a2, const __CFData *a3, uint64_t a4, const void *a5, const void *a6, const __CFString *SikPubDigestIfNecessary, CFTypeRef *a8, uint64_t *a9)
{
  valuePtr[0] = a1;
  long long v65 = 0;
  if ((a1 - 3) <= 0xFFFFFFFD)
  {
    AMFDRErrorPushInternal((uint64_t)a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"invalid fdrVersion: %d", a1);
    return 0;
  }
  CFTypeID v9 = a2;
  if (!a2)
  {
    AMFDRErrorPushInternal((uint64_t)a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"certifyUrl is NULL", v57);
    goto LABEL_81;
  }
  if (a3)
  {
    CFDictionaryRef v15 = (const __CFDictionary *)AMFDRGetRestorePeriodOptions();
    CFDictionaryRef v16 = v15;
    if (!v15) {
      goto LABEL_7;
    }
    CFTypeID v17 = CFGetTypeID(v15);
    if (v17 == CFDictionaryGetTypeID())
    {
      CFDictionaryGetCount(v16);
      AMSupportLogInternal();
LABEL_7:
      uint64_t v58 = a4;
      CFArrayRef v59 = a8;
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v19 = (CFDictionaryRef *)AMFDRCreateTypeWithOptions((CFAllocatorRef)*MEMORY[0x263EFFB08], @"Remote", v16);
      if (v19)
      {
        uint64_t v20 = v19;
        if (v19[2])
        {
          if (AMFDREnableRestorePeriodSsoCallback((uint64_t)v19)) {
            AMSupportLogInternal();
          }
          CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v18, 0, v20[2]);
          if (MutableCopy)
          {
            CFDictionaryRef v22 = MutableCopy;
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"CertifyHeaders");
            if (Value && (CFDictionaryRef v24 = Value, v25 = CFGetTypeID(Value), v25 == CFDictionaryGetTypeID())) {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(v18, 0, v24);
            }
            else {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            }
            CFTypeRef v27 = Mutable;
            if (Mutable)
            {
              CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(v22, @"Metadata");
              if (v28 && (v29 = v28, CFTypeID v30 = CFGetTypeID(v28), v30 == CFDictionaryGetTypeID())) {
                CFMutableDictionaryRef v31 = CFDictionaryCreateMutableCopy(v18, 0, v29);
              }
              else {
                CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              }
              CFMutableDictionaryRef v32 = v31;
              if (v31)
              {
                CFNumberRef v33 = CFNumberCreate(v18, kCFNumberIntType, valuePtr);
                if (v33)
                {
                  CFDictionarySetValue(v22, @"DataVersion", v33);
                  CFDictionarySetValue(v22, @"CertifyURL", v9);
                  CFDictionarySetValue(v22, @"CertifyBase64", (const void *)*MEMORY[0x263EFFB40]);
                  CFDictionarySetValue(v27, @"x-fdr-attestation", @"true");
                  if (valuePtr[0] == 1)
                  {
                    if (a5) {
                      CFDictionarySetValue(v27, @"x-fdr-chip-name", a5);
                    }
                    if (a6) {
                      CFDictionarySetValue(v27, @"x-fdr-csr-DataClassRequest", a6);
                    }
                    CFDictionarySetValue(v27, @"x-fdr-certification-type", @"component");
                  }
                  if (!SikPubDigestIfNecessary)
                  {
                    CFAllocatorRef v34 = 0;
                    uint64_t v42 = 0;
                    long long v64 = 0;
                    CFStringRef v50 = 0;
                    if (valuePtr[0] != 2)
                    {
LABEL_54:
                      CFStringRef v61 = v50;
                      CFStringRef v63 = SikPubDigestIfNecessary;
                      char v62 = v34;
                      if (CFDictionaryGetCount(v32))
                      {
                        CFStringRef SikPubDigestIfNecessary = 0;
LABEL_61:
                        CFDictionaryRemoveValue(v22, @"CertifyHeaders");
                        CFDictionarySetValue(v22, @"Metadata", v32);
                        AMFDRSetOptions((uint64_t)v20, v22);
                        CFTypeID v9 = (const void *)_AMFDRCertificateSigningRequestInternal(v20, a3, v58, v27, v59, a9);
                      }
                      else
                      {
                        uint64_t v51 = 0;
                        CFStringRef SikPubDigestIfNecessary = 0;
                        while (1)
                        {
                          if (SikPubDigestIfNecessary) {
                            CFRelease(SikPubDigestIfNecessary);
                          }
                          CFStringRef v52 = off_2642D15C8[v51];
                          CFStringRef SikPubDigestIfNecessary = AMFDRSealingMapCallMGCopyAnswer(v52, 0);
                          if (!SikPubDigestIfNecessary) {
                            break;
                          }
                          CFDictionarySetValue(v32, off_2642D15B0[v51++], SikPubDigestIfNecessary);
                          if (v51 == 3) {
                            goto LABEL_61;
                          }
                        }
                        AMFDRErrorPushInternal((uint64_t)a9, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"failed to query %@", (char)v52);
                        CFTypeID v9 = 0;
                      }
                      CFAllocatorRef v34 = v62;
                      CFStringRef v53 = v61;
                      goto LABEL_63;
                    }
                    goto LABEL_50;
                  }
                  CFAllocatorRef v34 = CFDictionaryCreateMutableCopy(v18, 0, (CFDictionaryRef)SikPubDigestIfNecessary);
                  if (v34)
                  {
                    CFDictionaryRef v35 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)SikPubDigestIfNecessary, @"CertifyHeaders");
                    if (v35)
                    {
                      CFDictionaryRef v36 = v35;
                      CFTypeID v37 = CFGetTypeID(v35);
                      if (v37 == CFDictionaryGetTypeID())
                      {
                        _CFDictionaryAddDictionary(v27, v36);
                        CFDictionaryRemoveValue(v34, @"CertifyHeaders");
                      }
                    }
                    CFDictionaryRef v38 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)SikPubDigestIfNecessary, @"Metadata");
                    if (v38)
                    {
                      CFDictionaryRef v39 = v38;
                      CFTypeID v40 = CFGetTypeID(v38);
                      if (v40 == CFDictionaryGetTypeID())
                      {
                        _CFDictionaryAddDictionary(v32, v39);
                        CFDictionaryRemoveValue(v34, @"Metadata");
                      }
                    }
                    long long v64 = _CFDictionaryCopyValue((const __CFDictionary *)SikPubDigestIfNecessary, @"CertifySikPub");
                    if (v64) {
                      CFDictionaryRemoveValue(v34, @"CertifySikPub");
                    }
                    CFTypeRef v41 = _CFDictionaryCopyValue((const __CFDictionary *)SikPubDigestIfNecessary, @"CertifyManifestSigCert");
                    uint64_t v42 = v41;
                    if (v41)
                    {
                      CFTypeID v43 = CFGetTypeID(v41);
                      if (v43 != CFDataGetTypeID())
                      {
                        CFStringRef v56 = @"partialIm4mData is in malformed format";
LABEL_104:
                        AMFDRErrorPushInternal((uint64_t)a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", v56, v57);
                        goto LABEL_105;
                      }
                      CFDictionaryRemoveValue(v34, @"CertifyManifestSigCert");
                      CFAllocatorRef v44 = CFGetAllocator(v20);
                      if ((_AMFDRSupportBase64Encode((uint64_t)v44, (uint64_t)v42, (uint64_t)&v65) & 1) == 0)
                      {
                        AMSupportLogInternal();
LABEL_105:
                        CFTypeID v9 = 0;
                        CFStringRef SikPubDigestIfNecessary = 0;
                        goto LABEL_106;
                      }
                      CFDictionarySetValue(v27, @"x-fdr-partial-im4m", v65);
                    }
                    _CFDictionaryAddDictionary(v22, v34);
                    if (valuePtr[0] != 2)
                    {
                      CFStringRef SikPubDigestIfNecessary = 0;
                      CFStringRef v50 = 0;
                      goto LABEL_54;
                    }
                    if (v64)
                    {
                      CFTypeID v45 = CFGetTypeID(v64);
                      if (v45 == CFDataGetTypeID())
                      {
                        uint64_t BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)v64);
                        CFIndex Length = CFDataGetLength((CFDataRef)v64);
                        CFStringRef SikPubDigestIfNecessary = (const __CFString *)AMFDRDataCreateSikPubDigestIfNecessary(v18, BytePtr, Length);
                        if (SikPubDigestIfNecessary)
                        {
                          CFStringRef v48 = AMFDRCreateInstanceString(v18, SikPubDigestIfNecessary);
                          uint64_t SikPub = v48;
                          if (v48)
                          {
                            CFStringRef v50 = v48;
LABEL_52:
                            CFDictionarySetValue(v27, @"x-fdr-client-id-sik", SikPub);
                            goto LABEL_54;
                          }
                          CFStringRef v63 = SikPubDigestIfNecessary;
                          AMFDRErrorPushInternal((uint64_t)a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"sikDigestString is NULL", v57);
                          CFTypeID v9 = 0;
                          CFStringRef SikPubDigestIfNecessary = 0;
                          goto LABEL_107;
                        }
                        AMFDRErrorPushInternal((uint64_t)a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"sikDigest is NULL", v57);
                        CFTypeID v9 = 0;
LABEL_106:
                        CFStringRef v63 = 0;
LABEL_107:
                        CFStringRef v53 = 0;
                        goto LABEL_63;
                      }
                      CFStringRef v56 = @"sikData is in malformed format";
                      goto LABEL_104;
                    }
LABEL_50:
                    uint64_t SikPub = (const void *)AMFDRCryptoGetSikPub((uint64_t)v20);
                    if (SikPub)
                    {
                      long long v64 = 0;
                      CFStringRef SikPubDigestIfNecessary = 0;
                      CFStringRef v50 = 0;
                      goto LABEL_52;
                    }
                    AMFDRErrorPushInternal((uint64_t)a9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"sikPubString is NULL", v57);
                    CFTypeID v9 = 0;
                    CFStringRef SikPubDigestIfNecessary = 0;
                    long long v64 = 0;
                    goto LABEL_106;
                  }
                  AMFDRErrorPushInternal((uint64_t)a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"extraOptionsCopy is NULL", v57);
                  CFTypeID v9 = 0;
                }
                else
                {
                  AMFDRErrorPushInternal((uint64_t)a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"fdrVersionNumber is NULL", v57);
                  CFTypeID v9 = 0;
                  CFAllocatorRef v34 = 0;
                }
LABEL_99:
                CFStringRef SikPubDigestIfNecessary = 0;
                CFStringRef v63 = 0;
                long long v64 = 0;
                CFStringRef v53 = 0;
                uint64_t v42 = 0;
LABEL_63:
                CFRelease(v20);
                CFRelease(v22);
                if (v27) {
                  CFRelease(v27);
                }
                if (v32) {
                  CFRelease(v32);
                }
                if (v34) {
                  CFRelease(v34);
                }
                if (v33) {
                  CFRelease(v33);
                }
                if (SikPubDigestIfNecessary) {
                  CFRelease(SikPubDigestIfNecessary);
                }
                if (v64) {
                  CFRelease(v64);
                }
                if (v63) {
                  CFRelease(v63);
                }
                if (v53) {
                  CFRelease(v53);
                }
                if (v42) {
                  CFRelease(v42);
                }
                goto LABEL_81;
              }
              AMFDRErrorPushInternal((uint64_t)a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"metadataDict is NULL", v57);
              CFTypeID v9 = 0;
              CFAllocatorRef v34 = 0;
            }
            else
            {
              AMFDRErrorPushInternal((uint64_t)a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"certifyHeaders is NULL", v57);
              CFTypeID v9 = 0;
              CFAllocatorRef v34 = 0;
              CFMutableDictionaryRef v32 = 0;
            }
            CFNumberRef v33 = 0;
            goto LABEL_99;
          }
          CFStringRef format = @"fdrOptions is NULL";
        }
        else
        {
          CFStringRef format = @"amfdr->optionsDict is NULL";
        }
        AMFDRErrorPushInternal((uint64_t)a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", format, v57);
        CFRelease(v20);
      }
      else
      {
        AMFDRErrorPushInternal((uint64_t)a9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"amfdr is NULL", v57);
      }
      goto LABEL_97;
    }
    AMFDRErrorPushInternal((uint64_t)a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"fdrRestoreOptions is malformed", v57);
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRChipCertifyForRestore", @"csrData is NULL", v57);
  }
LABEL_97:
  CFTypeID v9 = 0;
LABEL_81:
  if (v65) {
    CFRelease(v65);
  }
  return v9;
}

CFDataRef AMFDRDataCreateMultiDataAsMultiResponse(const __CFArray *a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v26 = 0;
  memset(length, 0, sizeof(length));
  int v6 = AMFDREncodeMultiResponseBegin((uint64_t)&v26);
  if (v6)
  {
    AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateMultiDataAsMultiResponse", @"AMFDREncodeMultiRequestBegin failed 0x%X", v6);
LABEL_18:
    CFDataRef v21 = 0;
  }
  else
  {
    uint64_t v24 = a3;
    CFIndex Count = CFArrayGetCount(a1);
    CFTypeID v8 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
    if (Count >= 1)
    {
      CFIndex v9 = 0;
      CFDataRef v10 = 0;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      while (1)
      {
        if (v10) {
          CFRelease(v10);
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v9);
        CFDataRef v13 = (const __CFData *)CFArrayGetValueAtIndex(a2, v9);
        CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v11, ValueAtIndex, 0x8000100u, 0x5Fu);
        if (!ExternalRepresentation)
        {
          AMFDRErrorPushInternal(v24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateMultiDataAsMultiResponse", @"failed to create data class instance data", v23);
          goto LABEL_18;
        }
        CFDataRef v10 = ExternalRepresentation;
        uint64_t BytePtr = CFDataGetBytePtr(ExternalRepresentation);
        int v16 = CFDataGetLength(v10);
        CFTypeID v17 = CFDataGetBytePtr(v13);
        int v18 = CFDataGetLength(v13);
        int v19 = AMFDREncodeMultiResponseAddRecord((uint64_t)&v26, (uint64_t)BytePtr, v16, (uint64_t)v17, v18, 0, 0, 0, 0);
        if (v19) {
          break;
        }
        if (++v9 >= CFArrayGetCount(a1)) {
          goto LABEL_11;
        }
      }
      AMFDRErrorPushInternal(v24, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateMultiDataAsMultiResponse", @"AMFDREncodeMultiRequestAddRecord failed 0x%X", v19);
      CFDataRef v21 = 0;
      goto LABEL_15;
    }
    CFDataRef v10 = 0;
LABEL_11:
    int v20 = AMFDREncodeMultiResponseEnd(&v26, &length[1], length);
    if (v20)
    {
      AMFDRErrorPushInternal(v24, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateMultiDataAsMultiResponse", @"AMFDREncodeMultiRequestEnd failed 0x%X", v20);
      CFDataRef v21 = 0;
    }
    else
    {
      CFDataRef v21 = CFDataCreate(*v8, *(const UInt8 **)&length[1], length[0]);
      if (!v21) {
        AMFDRErrorPushInternal(v24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataCreateMultiDataAsMultiResponse", @"outData is NULL", v23);
      }
    }
    if (v10) {
LABEL_15:
    }
      CFRelease(v10);
  }
  AMFDREncodeMultiRequestDestroy((uint64_t)&v26);
  return v21;
}

CFTypeRef _CopyPersistentDataPath(CFDictionaryRef *a1, const void *a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1[2], a2);
  if (Value)
  {
    CFStringRef v4 = Value;
    MEMORY[0x21D45A650]();
    return CFRetain(v4);
  }
  else
  {
    return (CFTypeRef)AMFDRPlatformCopyDefaultDataDirectoryAppendingPathComponent(a1);
  }
}

void ___thr_AMFDRSavePersistent(uint64_t a1)
{
  uint64_t v1 = *(CFDictionaryRef **)a1;
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  CFTypeRef v3 = _CopyPersistentDataPath(*(CFDictionaryRef **)a1, *(const void **)(a1 + 8));
  if (v3)
  {
    CFStringRef v4 = v3;
    CFGetAllocator(v1);
    if (AMSupportWriteDataToFileURL()) {
      AMSupportLogInternal();
    }
    else {
      *uint64_t v2 = 1;
    }
    CFRelease(v4);
  }
  else
  {
    AMSupportLogInternal();
  }
}

void _InsertHeader(const void *a1, const void *a2, uint64_t a3)
{
  CFStringRef value = 0;
  if (a1)
  {
    if (!a2
      || (uint64_t v5 = *(__CFHTTPMessage **)a3) == 0
      || (CFTypeID v7 = CFGetTypeID(*(CFTypeRef *)a3), v7 != CFHTTPMessageGetTypeID())
      || (CFTypeID v8 = CFGetTypeID(a1), v8 != CFStringGetTypeID()))
    {
      AMSupportLogInternal();
      goto LABEL_19;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@%@", *(void *)(a3 + 8), a1);
    CFTypeID v11 = CFGetTypeID(a2);
    if (v11 == CFStringGetTypeID())
    {
      CFStringRef v12 = (const __CFString *)CFRetain(a2);
    }
    else
    {
      CFTypeID v13 = CFGetTypeID(a2);
      if (v13 == CFDataGetTypeID())
      {
        if ((_AMFDRSupportBase64Encode((uint64_t)v9, (uint64_t)a2, (uint64_t)&value) & 1) == 0) {
          goto LABEL_17;
        }
        CFStringRef v12 = value;
        if (!value) {
          goto LABEL_17;
        }
        goto LABEL_14;
      }
      CFStringRef v12 = CFStringCreateWithFormat(v9, 0, @"%@", a2);
    }
    CFStringRef value = v12;
LABEL_14:
    if (CFStringGetLength(v12))
    {
      CFHTTPMessageSetHeaderFieldValue(v5, v10, value);
      if (!v10)
      {
LABEL_19:
        if (value) {
          CFRelease(value);
        }
        return;
      }
LABEL_18:
      CFRelease(v10);
      goto LABEL_19;
    }
LABEL_17:
    AMSupportLogInternal();
    if (!v10) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  AMSupportLogInternal();
}

uint64_t _AMFDRHttpMessageSendSync(CFDictionaryRef *a1, CFHTTPMessageRef request, CFTypeRef *a3, CFTypeRef *a4, void *a5, SInt32 a6, unsigned int a7, uint64_t (*a8)(CFDictionaryRef *, __CFHTTPMessage *, __CFDictionary *, uint64_t, uint64_t), uint64_t (*a9)(CFDictionaryRef *, CFHTTPMessageRef, CFDictionaryRef *, CFTypeRef *, uint64_t *, void, CFErrorRef *), uint64_t a10, uint64_t a11)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  SInt32 v105 = a6;
  uint64_t v103 = -1;
  CFErrorRef v104 = 0;
  CFDictionaryRef v101 = 0;
  CFTypeRef v102 = 0;
  if (!request)
  {
    AMFDRErrorPushInternal(a11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"httpRequest is NULL", (char)v88);
    uint64_t v48 = 0;
    CFAllocatorRef v44 = 0;
    CFURLRef v16 = 0;
    CFTypeID v25 = 0;
    goto LABEL_149;
  }
  CFURLRef v16 = CFHTTPMessageCopyRequestURL(request);
  if (!v16)
  {
    AMFDRErrorPushInternal(a11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"No URL in request", (char)v88);
    goto LABEL_36;
  }
  CFTypeRef cf = a1;
  if (!_AMFDRHttpProxyIsEnabled((uint64_t)a1)) {
    goto LABEL_34;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"EnableProxy");
  if (Value)
  {
    CFBooleanRef v18 = Value;
    CFTypeID v19 = CFGetTypeID(Value);
    BOOL v20 = v19 == CFBooleanGetTypeID();
    a1 = cf;
    if (v20)
    {
      if (CFBooleanGetValue(v18))
      {
        CFDataRef v21 = dispatch_semaphore_create(0);
        uint64_t v106 = 0;
        CFStringRef v107 = &v106;
        uint64_t v108 = 0x2000000000;
        char v109 = 0;
        if (cf[2])
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFDictionaryAddValue(Mutable, @"TestReachability", (const void *)*MEMORY[0x263EFFB38]);
          *(void *)&long long valuePtr = MEMORY[0x263EF8330];
          *((void *)&valuePtr + 1) = 0x40000000;
          *(void *)&long long v111 = ___AMFDRHttpCopyPurpleReverseProxyInformation_block_invoke;
          *((void *)&v111 + 1) = &unk_2642D1678;
          char v112 = &v106;
          char v113 = v21;
          char v23 = (const void *)RPRegisterForAvailability();
          if (v23
            && (RPRegistrationResume(),
                dispatch_time_t v24 = dispatch_time(0, 5000000000),
                dispatch_semaphore_wait(v21, v24),
                RPRegistrationInvalidate(),
                *((unsigned char *)v107 + 24)))
          {
            CFTypeID v25 = (__CFDictionary *)RPCopyProxyDictionaryWithOptions();
            if (!v21) {
              goto LABEL_29;
            }
          }
          else
          {
            AMSupportLogInternal();
            CFTypeID v25 = 0;
            if (!v21) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          AMSupportLogInternal();
          CFTypeID v25 = 0;
          CFMutableDictionaryRef Mutable = 0;
          char v23 = 0;
          if (!v21)
          {
LABEL_29:
            if (v23) {
              CFRelease(v23);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            _Block_object_dispose(&v106, 8);
            a1 = cf;
            if (!v25) {
              goto LABEL_34;
            }
LABEL_26:
            char v38 = 0;
            goto LABEL_38;
          }
        }
        dispatch_release(v21);
        goto LABEL_29;
      }
    }
  }
  uint64_t v26 = CFDictionaryGetValue(a1[2], @"UseSOCKSHost");
  if (v26)
  {
    CFTypeID v27 = CFGetTypeID(v26);
    if (v27 == CFStringGetTypeID())
    {
      LODWORD(valuePtr) = 1080;
      CFDictionaryRef v28 = a1[2];
      if (!v28)
      {
        AMSupportLogInternal();
        CFTypeID v25 = 0;
LABEL_25:
        AMSupportSafeRelease();
        if (v25) {
          goto LABEL_26;
        }
        goto LABEL_34;
      }
      CFDictionaryRef v29 = CFDictionaryGetValue(v28, @"UseSOCKSHost");
      if (!v29 || (CFTypeID v30 = v29, v31 = CFGetTypeID(v29), v31 != CFStringGetTypeID()))
      {
        AMSupportLogInternal();
        CFTypeID v25 = 0;
LABEL_24:
        a1 = cf;
        goto LABEL_25;
      }
      CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(cf[2], @"UseSOCKSPort");
      if (v32)
      {
        CFNumberRef v33 = v32;
        CFRetain(v32);
      }
      else
      {
        CFAllocatorRef v34 = CFGetAllocator(cf);
        CFNumberRef v33 = CFNumberCreate(v34, kCFNumberSInt32Type, &valuePtr);
        if (!v33)
        {
LABEL_170:
          AMSupportLogInternal();
          CFTypeID v25 = 0;
          goto LABEL_24;
        }
      }
      CFTypeID v35 = CFGetTypeID(v33);
      if (v35 == CFNumberGetTypeID())
      {
        CFAllocatorRef v36 = CFGetAllocator(cf);
        CFTypeID v37 = CFDictionaryCreateMutable(v36, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFTypeID v25 = v37;
        if (v37)
        {
          CFDictionaryAddValue(v37, @"SOCKSProxy", v30);
          CFDictionaryAddValue(v25, @"SOCKSPort", v33);
        }
        else
        {
          AMSupportLogInternal();
        }
        goto LABEL_24;
      }
      goto LABEL_170;
    }
  }
LABEL_34:
  if (_AMFDRHttpProxyIsEnabled((uint64_t)a1))
  {
    AMFDRErrorPushInternal(a11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"Failed to copy proxy information and proxy is enabled.", (char)v88);
LABEL_36:
    CFTypeID v25 = 0;
LABEL_51:
    CFAllocatorRef v44 = 0;
    uint64_t v48 = 0;
    goto LABEL_147;
  }
  CFTypeID v25 = 0;
  char v38 = 1;
LABEL_38:
  CFAllocatorRef v39 = CFGetAllocator(a1);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v39, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a11, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"Failed to create connection options dictionary.", (char)v88);
    goto LABEL_51;
  }
  if ((v38 & 1) == 0) {
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F8BDF8], v25);
  }
  CFBooleanRef v40 = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"EnableSslValidation");
  if (v40)
  {
    CFBooleanRef v41 = v40;
    CFTypeID v42 = CFGetTypeID(v40);
    BOOL v20 = v42 == CFBooleanGetTypeID();
    a1 = cf;
    if (v20 && !CFBooleanGetValue(v41)) {
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F8BDF0], (const void *)*MEMORY[0x263EFFB40]);
    }
  }
  CFAllocatorRef v43 = CFGetAllocator(a1);
  CFAllocatorRef v44 = CFArrayCreateMutable(v43, 0, MEMORY[0x263EFFF70]);
  if (!v44)
  {
    AMFDRErrorPushInternal(a11, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"sslRoots is NULL", (char)v88);
    uint64_t v48 = 0;
LABEL_166:
    CFArrayRef v59 = theDict;
    goto LABEL_146;
  }
  CFTypeID v45 = CFDictionaryGetValue(a1[2], @"ExtraSslRoots");
  if (v45)
  {
    CFStringRef v46 = v45;
    CFTypeID v47 = CFGetTypeID(v45);
    if (v47 == CFDataGetTypeID())
    {
      CFArrayAppendValue(v44, v46);
      a1 = cf;
    }
    else
    {
      CFTypeID v49 = CFGetTypeID(v46);
      BOOL v20 = v49 == CFArrayGetTypeID();
      a1 = cf;
      if (v20)
      {
        v115.CFIndex length = CFArrayGetCount((CFArrayRef)v46);
        v115.location = 0;
        CFArrayAppendArray(v44, (CFArrayRef)v46, v115);
      }
    }
  }
  CFDataRef v50 = (const __CFData *)CFDictionaryGetValue(a1[2], @"TrustObject");
  if (!v50)
  {
    AMSupportLogInternal();
    goto LABEL_59;
  }
  CFDataRef v51 = v50;
  CFAllocatorRef v52 = CFGetAllocator(a1);
  CFArrayRef v53 = AMFDRDataCopySslRoots(v52, v51, a11);
  uint64_t v48 = (uint64_t)v53;
  if (!v53)
  {
    AMFDRErrorPushInternal(a11, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"No SSL Root found in trust object", (char)v88);
    goto LABEL_166;
  }
  v116.CFIndex length = CFArrayGetCount(v53);
  v116.location = 0;
  CFArrayAppendArray(v44, (CFArrayRef)v48, v116);
  CFRelease((CFTypeRef)v48);
LABEL_59:
  if (CFArrayGetCount(v44) >= 1) {
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F8BE08], v44);
  }
  int v54 = 1;
  LODWORD(valuePtr) = 1;
  CFDictionaryRef v55 = a1[2];
  CFRange v91 = a3;
  CFTypeID v92 = a4;
  if (v55)
  {
    CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v55, @"HTTPBackoff");
    if (v56)
    {
      CFNumberRef v57 = v56;
      CFTypeID v58 = CFGetTypeID(v56);
      if (v58 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v57, kCFNumberSInt32Type, &valuePtr)) {
          int v54 = valuePtr;
        }
        else {
          int v54 = 1;
        }
      }
      else
      {
        int v54 = 1;
      }
      a1 = cf;
    }
  }
  CFArrayRef v59 = theDict;
  if (!a7)
  {
    CFNumberRef v98 = 0;
LABEL_132:
    if (v101)
    {
      if (v91 && v102) {
        *CFRange v91 = CFRetain(v102);
      }
      if (v92) {
        *CFTypeID v92 = CFRetain(v101);
      }
      *a5 = v103;
      uint64_t v48 = 1;
    }
    else
    {
      AMFDRErrorPushInternal(a11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"HTTP request failed, httpResponseDict is NULL", (char)v88);
      uint64_t v48 = 0;
    }
    CFNumberRef v64 = v98;
    if (v98) {
      goto LABEL_145;
    }
    goto LABEL_146;
  }
  CFStringRef v89 = v25;
  CFDictionaryRef v88 = a5;
  CFURLRef v90 = v16;
  int key = (void *)*MEMORY[0x263F8BE00];
  unsigned int v60 = 1;
  CFAllocatorRef v93 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  char v62 = request;
  CFStringRef v61 = a8;
  do
  {
    CFAllocatorRef v63 = CFGetAllocator(a1);
    CFNumberRef v64 = CFNumberCreate(v63, kCFNumberSInt32Type, &v105);
    if (v64)
    {
      CFDictionarySetValue(v59, key, v64);
      if (!v61) {
        goto LABEL_75;
      }
    }
    else
    {
      AMSupportLogInternal();
      if (!v61) {
        goto LABEL_75;
      }
    }
    if ((v61(a1, v62, v59, a10, a11) & 1) == 0)
    {
      CFStringRef format = @"AMFDRHttpMessagePreAction failed";
      goto LABEL_143;
    }
LABEL_75:
    AMSupportLogInternal();
    _AMFDRHttpLogRequest(v62, 0, 0);
    AMSupportLogInternal();
    if (v104)
    {
      CFRelease(v104);
      CFErrorRef v104 = 0;
    }
    int v65 = AMSupportHttpSendSync();
    if (v65)
    {
      if (v65 == 23)
      {
        AMFDRErrorPushInternal(a11, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"SSL trust evaluation failed", (char)v88);
        goto LABEL_144;
      }
      AMSupportLogInternal();
      int v65 = 1;
    }
    if (v104)
    {
      AMSupportLogInternal();
      int v65 = 1;
    }
    if (!v101)
    {
      AMSupportLogInternal();
      int v65 = 1;
    }
    if (((unint64_t)(v103 - 401) > 0x12 || ((1 << (v103 + 111)) & 0x4000D) == 0)
      && v103 != 200
      && v103 != 202)
    {
      AMSupportLogInternal();
      AMFDRSetStat(a1, @"FDRLastUnexpectedResponse", v103);
      goto LABEL_108;
    }
    if (v65) {
      goto LABEL_108;
    }
    int v94 = v54;
    CFNumberRef v98 = v64;
    AMSupportLogInternal();
    CFDictionaryRef v67 = v101;
    CFDataRef v66 = (const __CFData *)v102;
    CFIndex Count = CFDictionaryGetCount(v101);
    CFRange v69 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    char v70 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(v67, v69, v70);
    AMSupportLogInternal();
    long long v71 = v69;
    long long v72 = v70;
    if (Count >= 1)
    {
      do
      {
        ++v71;
        ++v72;
        AMSupportLogInternal();
        --Count;
      }
      while (Count);
    }
    CFNumberRef v64 = v98;
    CFArrayRef v59 = theDict;
    if (v66)
    {
      uint64_t BytePtr = CFDataGetBytePtr(v66);
      CFIndex Length = CFDataGetLength(v66);
      CFStringRef v75 = CFStringCreateWithBytes(v93, BytePtr, Length, 0x8000100u, 0);
      if (v75)
      {
        CFRange v76 = v75;
        AMSupportLogInternal();
LABEL_98:
        CFRelease(v76);
        goto LABEL_99;
      }
      *(void *)&long long v77 = -1;
      *((void *)&v77 + 1) = -1;
      long long valuePtr = v77;
      long long v111 = v77;
      CFDataGetBytePtr(v66);
      CFDataGetLength(v66);
      AMSupportDigestSha256();
      CFDataRef v78 = CFDataCreate(v93, (const UInt8 *)&valuePtr, 32);
      CFRange v76 = (const void *)AMSupportCopyHexStringFromData();
      CFDataGetLength(v66);
      AMSupportLogInternal();
      if (v78) {
        CFRelease(v78);
      }
      CFArrayRef v59 = theDict;
      if (v76) {
        goto LABEL_98;
      }
    }
LABEL_99:
    if (v69) {
      free(v69);
    }
    char v62 = request;
    CFStringRef v61 = a8;
    if (v70) {
      free(v70);
    }
    AMSupportLogInternal();
    a1 = cf;
    if (!a9) {
      goto LABEL_131;
    }
    if (v104)
    {
      CFRelease(v104);
      CFErrorRef v104 = 0;
    }
    int v54 = v94;
    if (a9(cf, request, &v101, &v102, &v103, *(void *)(a10 + 8), &v104))
    {
LABEL_131:
      CFTypeID v25 = v89;
      CFURLRef v16 = v90;
      a5 = v88;
      goto LABEL_132;
    }
    AMSupportLogInternal();
    if (AMFDRGetUnderlyingErrorCode((uint64_t)cf, &v104) != 11)
    {
      CFStringRef format = @"AMFDRHttpMessagePostAction failed";
LABEL_143:
      AMFDRErrorPushInternal(a11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", format, (char)v88);
      goto LABEL_144;
    }
LABEL_108:
    AMFDRIncrementStat(a1, @"FDRTotalHTTPFailures");
    if (v60 < a7)
    {
      CFDictionaryRef v79 = v101;
      if (v101)
      {
        CFStringRef v80 = (const __CFString *)CFDictionaryGetValue(v101, @"x-fdr-retry-backoff");
        if (v80)
        {
          IntCFBooleanRef Value = CFStringGetIntValue(v80);
          if ((IntValue - 1) < 0x12C) {
            int v54 = IntValue;
          }
        }
        CFStringRef v82 = (const __CFString *)CFDictionaryGetValue(v79, @"x-fdr-retry-attempts");
        if (v82)
        {
          SInt32 v83 = CFStringGetIntValue(v82);
          if ((v83 - 1) < 0x64) {
            a7 = v83;
          }
        }
        CFStringRef v84 = (const __CFString *)CFDictionaryGetValue(v79, @"x-fdr-retry-timeout");
        if (v84)
        {
          SInt32 v85 = CFStringGetIntValue(v84);
          if ((v85 - 1) <= 0x257) {
            SInt32 v105 = v85;
          }
        }
      }
      AMSupportLogInternal();
      sleep(v54 * v60);
      uint64_t v103 = -1;
      if (v101)
      {
        CFRelease(v101);
        CFDictionaryRef v101 = 0;
      }
      a1 = cf;
      if (v102)
      {
        CFRelease(v102);
        CFTypeRef v102 = 0;
      }
      if (v64) {
        CFRelease(v64);
      }
      CFNumberRef v64 = 0;
      CFDictionaryRef v101 = 0;
      CFTypeRef v102 = 0;
    }
    ++v60;
  }
  while (v60 <= a7);
  if (a7 >= 2) {
    AMSupportLogInternal();
  }
  AMFDRErrorPushInternal(a11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessageSendSync", @"got http failures", (char)v88);
LABEL_144:
  uint64_t v48 = 0;
  CFTypeID v25 = v89;
  CFURLRef v16 = v90;
  if (v64) {
LABEL_145:
  }
    CFRelease(v64);
LABEL_146:
  CFRelease(v59);
LABEL_147:
  if (v101)
  {
    CFRelease(v101);
    CFDictionaryRef v101 = 0;
  }
LABEL_149:
  if (v102)
  {
    CFRelease(v102);
    CFTypeRef v102 = 0;
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v104)
  {
    CFRelease(v104);
    CFErrorRef v104 = 0;
  }
  if (v44) {
    CFRelease(v44);
  }
  return v48;
}

uint64_t _AMFDRGetHttpTimeout(uint64_t a1)
{
  uint64_t v1 = 120;
  unsigned int valuePtr = 120;
  if (a1)
  {
    CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16);
    if (v2)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v2, @"HTTPTimeout");
      if (Value)
      {
        CFNumberRef v4 = Value;
        CFTypeID v5 = CFGetTypeID(Value);
        if (v5 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr)) {
            return valuePtr;
          }
          else {
            return 120;
          }
        }
      }
    }
  }
  return v1;
}

uint64_t _AMFDRHttpMessagePreAction(const __CFString *cf, __CFHTTPMessage *a2, int a3, unsigned char *a4, uint64_t a5)
{
  CFStringRef v6 = cf;
  CFTypeRef v24 = 0;
  CFStringRef value = 0;
  if (!cf)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessagePreAction", @"amfdr is NULL", (char)value);
    uint64_t v14 = 0;
    CFUUIDRef v12 = 0;
    goto LABEL_14;
  }
  if (!a2)
  {
    CFStringRef v22 = @"httpRequest is NULL";
    *(_OWORD *)BOOL v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)CFTypeID v19 = 0u;
    uint64_t v16 = a5;
    CFIndex v17 = 1;
    goto LABEL_32;
  }
  if (!a4)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessagePreAction", @"ctx is NULL", (char)value);
LABEL_33:
    uint64_t v14 = 0;
    CFUUIDRef v12 = 0;
    goto LABEL_34;
  }
  if (!*a4) {
    goto LABEL_11;
  }
  if (cf[1].length)
  {
    AMSupportLogInternal();
    CFIndex length = (unsigned int (*)(CFAllocatorRef, CFTypeRef *, void *))v6[1].length;
    CFAllocatorRef v9 = CFGetAllocator(v6);
    if (length(v9, &v24, v6[2].isa))
    {
      CFBooleanRef v18 = @"FDR failed to create SSO data.";
    }
    else
    {
      if (v24)
      {
        CFAllocatorRef v10 = CFGetAllocator(v6);
        if (_AMFDRSupportBase64Encode((uint64_t)v10, (uint64_t)v24, (uint64_t)&value))
        {
          AMSupportLogInternal();
          CFHTTPMessageSetHeaderFieldValue(a2, @"x-fdr-metadata-authuserid", value);
          goto LABEL_11;
        }
        CFStringRef v22 = @"ssoData base64 conversion failed";
        *(_OWORD *)BOOL v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)CFTypeID v19 = 0u;
        uint64_t v16 = a5;
        CFIndex v17 = 3;
        goto LABEL_32;
      }
      CFBooleanRef v18 = @"FDR failed to create SSO data. (ssoData is NULL).";
    }
    CFStringRef v22 = v18;
    *(_OWORD *)BOOL v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)CFTypeID v19 = 0u;
    uint64_t v16 = a5;
    CFIndex v17 = 15;
LABEL_32:
    AMFDRErrorPushInternal(v16, v17, 0, 0, 0, 0, 0, 0, v19[0], v19[1], v20[0], v20[1], (void *)v21, *((void **)&v21 + 1), (uint64_t)"_AMFDRHttpMessagePreAction", v22, (char)value);
    goto LABEL_33;
  }
  AMSupportLogInternal();
LABEL_11:
  CFAllocatorRef v11 = CFGetAllocator(v6);
  CFUUIDRef v12 = CFUUIDCreate(v11);
  if (!v12)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessagePreAction", @"failed to create uuid", (char)value);
    uint64_t v14 = 0;
LABEL_34:
    CFStringRef v6 = 0;
    goto LABEL_14;
  }
  CFAllocatorRef v13 = CFGetAllocator(v6);
  CFStringRef v6 = CFUUIDCreateString(v13, v12);
  if (v6)
  {
    CFHTTPMessageSetHeaderFieldValue(a2, @"x-fdr-request-uuid", v6);
    uint64_t v14 = 1;
  }
  else
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMessagePreAction", @"failed to create uuid", (char)value);
    uint64_t v14 = 0;
  }
LABEL_14:
  if (v24)
  {
    CFRelease(v24);
    CFTypeRef v24 = 0;
  }
  if (value)
  {
    CFRelease(value);
    CFStringRef value = 0;
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v14;
}

uint64_t _AMFDRHttpAuthenticationCallback(uint64_t a1, __CFHTTPMessage *a2, CFDictionaryRef *a3, CFTypeRef *a4, uint64_t *a5, void (*a6)(CFDataRef, CFTypeRef *, CFTypeRef *, int *), uint64_t a7)
{
  uint64_t v8 = a1;
  uint64_t v112 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticationCallback", @"amfdr is NULL", v84);
    return v8;
  }
  if (!a2)
  {
    CFStringRef v78 = @"httpRequest is NULL";
LABEL_116:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticationCallback", v78, v84);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v78 = @"inOutHttpResponseHeader is NULL";
    goto LABEL_116;
  }
  if (!*a3)
  {
    CFStringRef v78 = @"*inOutHttpResponseHeader is NULL";
    goto LABEL_116;
  }
  if (!a4)
  {
    CFStringRef v78 = @"inOutHttpResponseData is NULL";
    goto LABEL_116;
  }
  if (!a5)
  {
    CFStringRef v78 = @"inOutHttpStatus is NULL";
    goto LABEL_116;
  }
  if (*a5 != 419 && *a5 != 401) {
    return 1;
  }
  AMSupportLogInternal();
  if (*a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  int v107 = -1;
  CFTypeRef v105 = 0;
  CFDataRef v106 = 0;
  CFTypeRef v103 = 0;
  CFTypeRef v104 = 0;
  CFTypeRef v102 = 0;
  CFTypeRef v100 = 0;
  CFTypeRef v101 = 0;
  uint64_t v98 = -1;
  CFTypeRef v99 = 0;
  if (!*a3)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"*inOutHttpResponseHeader is NULL", v84);
LABEL_121:
    CFDataRef v95 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFDataRef cf = 0;
    CFStringRef Value = 0;
    goto LABEL_122;
  }
  CFURLRef v90 = (CFTypeRef *)a3;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*a3, @"www-authenticate");
  if (!Value)
  {
    AMFDRErrorPushInternal(a7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"authenticationStr is NULL", v84);
    CFDataRef v95 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFDataRef cf = 0;
LABEL_122:
    CFURLRef v41 = 0;
    CFStringRef v42 = 0;
    CFDataRef RandomNumber = 0;
    uint64_t Count = 0;
    uint64_t v8 = 0;
    goto LABEL_68;
  }
  CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)v8);
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v14, Value, @",");
  if (!ArrayBySeparatingStrings)
  {
    AMFDRErrorPushInternal(a7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"responseParts is NULL", v84);
    goto LABEL_121;
  }
  CFArrayRef v16 = ArrayBySeparatingStrings;
  uint64_t Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (!Count)
  {
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"arrayCount is 0", v84);
    CFDataRef v95 = 0;
    CFDictionaryRef v36 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFStringRef v92 = 0;
    CFDataRef cf = 0;
    CFURLRef v41 = 0;
    CFStringRef v42 = 0;
    goto LABEL_167;
  }
  CFAllocatorRef v18 = CFGetAllocator((CFTypeRef)v8);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"responseParts is NULL", v84);
    CFDataRef v95 = 0;
    CFDictionaryRef v36 = 0;
    goto LABEL_126;
  }
  CFDictionaryRef v88 = a5;
  CFStringRef v89 = a4;
  request = a2;
  CFDictionaryRef theDict = Mutable;
  uint64_t v91 = a7;
  if (Count < 1)
  {
LABEL_25:
    CFDictionaryRef v36 = theDict;
    CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(theDict, @"nonce");
    CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(theDict, @"qop");
    CFAllocatorRef v39 = CFDictionaryGetValue(theDict, @"realm");
    if (CFStringCompare(v38, @"auth", 1uLL) == kCFCompareEqualTo)
    {
      CFURLRef v40 = CFHTTPMessageCopyRequestURL(request);
      CFURLRef v41 = v40;
      if (v40)
      {
        CFStringRef v42 = CFURLCopyPath(v40);
        if (v42)
        {
          CFAllocatorRef v43 = CFGetAllocator((CFTypeRef)v8);
          if (AMFDRSupportBase64Decode(v43, v37, (uint64_t)&v106))
          {
            if (v106)
            {
              CFDataRef RandomNumber = (const __CFData *)AMSupportCreateRandomNumber();
              if (!RandomNumber)
              {
                AMFDRErrorPushInternal(v91, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"salt is NULL", v84);
                CFDataRef v95 = 0;
                CFDictionaryRef MutableCopy = 0;
                CFStringRef v92 = 0;
                CFDataRef cf = 0;
                goto LABEL_151;
              }
              unsigned int v87 = v39;
              CFAllocatorRef v45 = CFGetAllocator((CFTypeRef)v8);
              CFIndex Length = CFDataGetLength(v106);
              CFIndex v47 = CFDataGetLength(RandomNumber);
              CFDictionaryRef MutableCopy = CFDataCreateMutableCopy(v45, v47 + Length, v106);
              CFDataRef cf = RandomNumber;
              if (MutableCopy)
              {
                uint64_t BytePtr = CFDataGetBytePtr(RandomNumber);
                CFIndex v50 = CFDataGetLength(RandomNumber);
                CFDataAppendBytes(MutableCopy, BytePtr, v50);
                CFAllocatorRef v51 = CFGetAllocator((CFTypeRef)v8);
                if ((_AMFDRSupportBase64Encode((uint64_t)v51, (uint64_t)RandomNumber, (uint64_t)&v99) & 1) == 0)
                {
                  AMFDRErrorPushInternal(v91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"_AMFDRSupportBase64Encode failed", v84);
                  goto LABEL_145;
                }
                if (!v99)
                {
                  AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"base64EncodedSalt is NULL", v84);
                  goto LABEL_145;
                }
                CFIndex v109 = 0;
                *(void *)UInt8 bytes = 0;
                int v108 = 0;
                if (AMFDRCryptoGetCryptoVersion(v8, 1u, &v108))
                {
                  uint64_t v80 = v91;
                  AMFDRErrorPushInternal(v91, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpNonceSign", @"AMFDRCryptoGetCryptoVersion failed", v84);
                }
                else
                {
                  int v52 = v108;
                  CFArrayRef v53 = CFDataGetBytePtr(MutableCopy);
                  CFIndex v54 = CFDataGetLength(MutableCopy);
                  if (AMFDRCryptoCreateDataSignature(v52, (uint64_t)v53, v54, (void **)bytes, &v109, (CFTypeRef)v8) == 100)
                  {
                    if (*(void *)bytes)
                    {
                      if (v109)
                      {
                        CFAllocatorRef v55 = CFGetAllocator((CFTypeRef)v8);
                        CFDataRef v95 = CFDataCreateWithBytesNoCopy(v55, *(const UInt8 **)bytes, v109, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
                        if (v95)
                        {
                          *(void *)UInt8 bytes = 0;
                          AMSupportSafeFree();
                          CFAllocatorRef v56 = CFGetAllocator((CFTypeRef)v8);
                          if (_AMFDRSupportBase64Encode((uint64_t)v56, (uint64_t)v95, (uint64_t)&v105))
                          {
                            if (!v105)
                            {
                              CFStringRef v82 = @"base64EncodedNonceSignature is NULL";
LABEL_148:
                              AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", v82, v84);
                              goto LABEL_149;
                            }
                            CFAllocatorRef v57 = CFGetAllocator((CFTypeRef)v8);
                            if (_AMFDRSupportBase64Encode((uint64_t)v57, *(void *)(v8 + 32), (uint64_t)&v100))
                            {
                              if (v100)
                              {
                                if (a6)
                                {
                                  *(void *)&long long v58 = -1;
                                  *((void *)&v58 + 1) = -1;
                                  *(_OWORD *)UInt8 bytes = v58;
                                  long long v111 = v58;
                                  CFAllocatorRef v59 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
                                  CFIndex v60 = CFDataGetLength(MutableCopy);
                                  CFIndex v61 = CFDataGetLength(*(CFDataRef *)(v8 + 32));
                                  CFDataRef RandomNumber = CFDataCreateMutableCopy(v59, v61 + v60, MutableCopy);
                                  if (RandomNumber)
                                  {
                                    char v62 = CFDataGetBytePtr(*(CFDataRef *)(v8 + 32));
                                    CFIndex v63 = CFDataGetLength(*(CFDataRef *)(v8 + 32));
                                    CFDataAppendBytes(RandomNumber, v62, v63);
                                    CFDataGetBytePtr(RandomNumber);
                                    CFDataGetLength(RandomNumber);
                                    AMSupportDigestSha256();
                                    CFAllocatorRef v64 = CFGetAllocator((CFTypeRef)v8);
                                    CFDataRef v65 = CFDataCreate(v64, bytes, 32);
                                    if (v65)
                                    {
                                      CFDataRef v66 = v65;
                                      a6(v65, &v104, &v103, &v107);
                                      CFStringRef v92 = (const __CFString *)v66;
                                      if (v107)
                                      {
                                        AMFDRErrorPushInternal(v91, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"ChallengeClaim callback fail with authError: %d", v107);
                                      }
                                      else
                                      {
                                        if (v104)
                                        {
                                          CFDictionaryRef v36 = theDict;
                                          if (v103)
                                          {
                                            CFAllocatorRef v67 = CFGetAllocator((CFTypeRef)v8);
                                            if (_AMFDRSupportBase64Encode((uint64_t)v67, (uint64_t)v104, (uint64_t)&v102))
                                            {
                                              if (!v102)
                                              {
                                                CFStringRef v83 = @"base64EncodedComponentSignature is NULL";
LABEL_164:
                                                AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", v83, v84);
                                                goto LABEL_151;
                                              }
                                              CFAllocatorRef v68 = CFGetAllocator((CFTypeRef)v8);
                                              if (_AMFDRSupportBase64Encode((uint64_t)v68, (uint64_t)v103, (uint64_t)&v101))
                                              {
                                                if (v101)
                                                {
                                                  CFAllocatorRef v69 = CFGetAllocator((CFTypeRef)v8);
                                                  CFStringRef v70 = CFStringCreateWithFormat(v69, 0, @"Digest realm=\"%@\", nonce=\"%@\", salt=\"%@\", uri=\"%@\", response=\"%@\", qop=auth, cert=%@, componentSig=%@, componentNonce=%@", v87, v37, v99, v42, v105, v100, v102, v101);
                                                  if (v70)
                                                  {
                                                    uint64_t Count = (uint64_t)v70;
                                                    CFDictionaryRef v71 = theDict;
                                                    CFStringRef v72 = v42;
LABEL_58:
                                                    CFHTTPMessageSetHeaderFieldValue(request, @"Authorization", (CFStringRef)Count);
                                                    if (*v90)
                                                    {
                                                      CFRelease(*v90);
                                                      *CFURLRef v90 = 0;
                                                    }
                                                    SInt32 v74 = _AMFDRGetHttpTimeout(v8);
                                                    char v75 = _AMFDRHttpMessageSendSync((CFDictionaryRef *)v8, request, v89, v90, &v98, v74, 1u, 0, 0, 0, v91);
                                                    CFHTTPMessageSetHeaderFieldValue(request, @"Authorization", 0);
                                                    if (v75)
                                                    {
                                                      if (*v90)
                                                      {
                                                        *CFDictionaryRef v88 = v98;
                                                        uint64_t v8 = 1;
                                                      }
                                                      else
                                                      {
                                                        AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"*inOutHttpResponseHeader is NULL", v84);
                                                        uint64_t v8 = 0;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      AMFDRErrorPushInternal(v91, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"_AMFDRHttpMessageSendSync failed", v84);
                                                      uint64_t v8 = 0;
                                                    }
                                                    CFStringRef v42 = v72;
                                                    CFDictionaryRef v36 = v71;
                                                    goto LABEL_64;
                                                  }
                                                  AMFDRErrorPushInternal(v91, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"authorizationResponseStr is NULL", v84);
                                                  goto LABEL_151;
                                                }
                                                CFStringRef v83 = @"base64EncodedComponentNonce is NULL";
                                                goto LABEL_164;
                                              }
                                            }
                                            AMFDRErrorPushInternal(v91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"_AMFDRSupportBase64Encode failed", v84);
                                          }
                                          else
                                          {
                                            AMFDRErrorPushInternal(v91, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"ChallengeClaim callback return NULL componentNonce", v84);
                                          }
LABEL_151:
                                          uint64_t Count = 0;
LABEL_152:
                                          uint64_t v8 = 0;
                                          goto LABEL_64;
                                        }
                                        AMFDRErrorPushInternal(v91, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"ChallengeClaim callback return NULL componentSignature", v84);
                                      }
LABEL_160:
                                      CFDictionaryRef v36 = theDict;
                                      goto LABEL_151;
                                    }
                                    AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"Unable to create challengeDigest", v84);
                                  }
                                  else
                                  {
                                    AMFDRErrorPushInternal(v91, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"dataToBeSigned is NULL", v84);
                                  }
                                  CFStringRef v92 = 0;
                                  goto LABEL_160;
                                }
                                CFAllocatorRef v73 = CFGetAllocator((CFTypeRef)v8);
                                uint64_t Count = (uint64_t)CFStringCreateWithFormat(v73, 0, @"Digest realm=\"%@\", nonce=\"%@\", salt=\"%@\", uri=\"%@\", response=\"%@\", qop=auth, cert=%@", v87, v37, v99, v42, v105, v100);
                                if (Count)
                                {
                                  CFDictionaryRef v71 = theDict;
                                  CFStringRef v72 = v42;
                                  CFStringRef v92 = 0;
                                  CFDataRef RandomNumber = 0;
                                  goto LABEL_58;
                                }
                                AMFDRErrorPushInternal(v91, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"authorizationResponseStr is NULL", v84);
                                CFStringRef v92 = 0;
LABEL_167:
                                CFDataRef RandomNumber = 0;
                                goto LABEL_152;
                              }
                              CFStringRef v82 = @"base64EncodedCert is NULL";
                              goto LABEL_148;
                            }
                          }
                          AMFDRErrorPushInternal(v91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"_AMFDRSupportBase64Encode failed", v84);
LABEL_149:
                          CFStringRef v92 = 0;
                          goto LABEL_150;
                        }
                        CFStringRef v81 = @"*outNonceSignature is NULL";
                      }
                      else
                      {
                        CFStringRef v81 = @"nonceSignatureBufferLength is 0";
                      }
                    }
                    else
                    {
                      CFStringRef v81 = @"nonceSignatureBuffer is NULL";
                    }
                    AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpNonceSign", v81, v84);
                    AMSupportSafeFree();
                    AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"nonceSignature is NULL", v86);
LABEL_145:
                    CFDataRef v95 = 0;
                    goto LABEL_149;
                  }
                  uint64_t v80 = v91;
                  AMFDRErrorPushInternal(v91, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpNonceSign", @"AMFDRCryptoCreateDataSignature failed", v84);
                }
                AMSupportSafeFree();
                AMFDRErrorPushInternal(v80, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"_AMFDRHttpAuthenticateSign failed", v85);
                goto LABEL_145;
              }
              AMFDRErrorPushInternal(v91, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"saltedNonce is NULL", v84);
              goto LABEL_145;
            }
            AMFDRErrorPushInternal(v91, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"nonce is NULL", v84);
LABEL_133:
            CFDataRef v95 = 0;
            CFDictionaryRef MutableCopy = 0;
            CFDataRef cf = 0;
            goto LABEL_149;
          }
          CFStringRef v79 = @"_AMFDRSupportBase64Decode failed";
        }
        else
        {
          CFStringRef v79 = @"uri is NULL";
        }
        AMFDRErrorPushInternal(v91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", v79, v84);
        goto LABEL_133;
      }
      AMFDRErrorPushInternal(v91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"requestURL is NULL", v84);
      CFDataRef v95 = 0;
      CFDictionaryRef MutableCopy = 0;
      CFStringRef v92 = 0;
      CFDataRef cf = 0;
LABEL_128:
      CFStringRef v42 = 0;
LABEL_150:
      CFDataRef RandomNumber = 0;
      goto LABEL_151;
    }
    AMFDRErrorPushInternal(v91, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"unexpected qop: %@", (char)v38);
    CFDataRef v95 = 0;
LABEL_126:
    CFDictionaryRef MutableCopy = 0;
    CFStringRef v92 = 0;
    CFDataRef cf = 0;
    CFURLRef v41 = 0;
    goto LABEL_128;
  }
  CFIndex v20 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v16, v20);
    CFIndex location = CFStringFind(ValueAtIndex, @"=", 0).location;
    if (location != -1) {
      break;
    }
LABEL_24:
    if (Count == ++v20) {
      goto LABEL_25;
    }
  }
  CFIndex v23 = location;
  CFArrayRef v24 = v16;
  CFIndex v25 = CFStringGetLength(ValueAtIndex);
  CFAllocatorRef v26 = CFGetAllocator((CFTypeRef)v8);
  v113.CFIndex location = 0;
  v113.CFIndex length = v23;
  CFStringRef v27 = CFStringCreateWithSubstring(v26, ValueAtIndex, v113);
  if (!v27)
  {
    AMFDRErrorPushInternal(v91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", @"key is NULL", v84);
    CFDataRef v95 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFStringRef v92 = 0;
    CFDataRef cf = 0;
    CFURLRef v41 = 0;
    CFStringRef v42 = 0;
    CFDataRef RandomNumber = 0;
    uint64_t Count = 0;
    uint64_t v8 = 0;
    CFDictionaryRef v36 = theDict;
    goto LABEL_64;
  }
  CFStringRef v28 = v27;
  CFAllocatorRef v29 = CFGetAllocator((CFTypeRef)v8);
  v114.CFIndex location = v23 + 1;
  v114.CFIndex length = v25 + ~v23;
  CFStringRef v30 = CFStringCreateWithSubstring(v29, ValueAtIndex, v114);
  if (!v30)
  {
    CFMutableStringRef v32 = 0;
    CFStringRef format = @"value is NULL";
    goto LABEL_105;
  }
  CFAllocatorRef v31 = CFGetAllocator((CFTypeRef)v8);
  CFMutableStringRef v32 = CFStringCreateMutableCopy(v31, 0, v28);
  if (!v32)
  {
    CFStringRef format = @"mutableKey is NULL";
    goto LABEL_105;
  }
  CFAllocatorRef v33 = CFGetAllocator((CFTypeRef)v8);
  CFMutableStringRef v34 = CFStringCreateMutableCopy(v33, 0, v30);
  if (v34)
  {
    CFTypeID v35 = v34;
    CFStringTrimWhitespace(v32);
    CFStringTrimWhitespace(v35);
    v115.CFIndex length = CFStringGetLength(v32);
    v115.CFIndex location = 0;
    CFStringFindAndReplace(v32, @"Digest ", &stru_26C899958, v115, 0);
    v116.CFIndex length = CFStringGetLength(v32);
    v116.CFIndex location = 0;
    CFStringFindAndReplace(v32, @"\"", &stru_26C899958, v116, 0);
    v117.CFIndex length = CFStringGetLength(v35);
    v117.CFIndex location = 0;
    CFStringFindAndReplace(v35, @"\"", &stru_26C899958, v117, 0);
    CFDictionarySetValue(theDict, v32, v35);
    CFRelease(v28);
    CFRelease(v30);
    CFRelease(v32);
    CFRelease(v35);
    CFArrayRef v16 = v24;
    goto LABEL_24;
  }
  CFStringRef format = @"mutableValue is NULL";
LABEL_105:
  AMFDRErrorPushInternal(v91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpAuthenticateSendSync", format, v84);
  CFRelease(v24);
  CFRelease(v28);
  if (v30) {
    CFRelease(v30);
  }
  CFDataRef v95 = 0;
  CFDictionaryRef MutableCopy = 0;
  CFStringRef v92 = 0;
  CFDataRef cf = 0;
  CFURLRef v41 = 0;
  CFStringRef v42 = 0;
  CFDataRef RandomNumber = 0;
  uint64_t Count = 0;
  uint64_t v8 = 0;
  CFArrayRef v16 = (const __CFArray *)v32;
  CFDictionaryRef v36 = theDict;
  if (v32) {
LABEL_64:
  }
    CFRelease(v16);
  if (v36) {
    CFRelease(v36);
  }
  CFStringRef Value = v92;
LABEL_68:
  if (v106)
  {
    CFRelease(v106);
    CFDataRef v106 = 0;
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v95) {
    CFRelease(v95);
  }
  if (v105)
  {
    CFRelease(v105);
    CFTypeRef v105 = 0;
  }
  if (v100)
  {
    CFRelease(v100);
    CFTypeRef v100 = 0;
  }
  if (v99)
  {
    CFRelease(v99);
    CFTypeRef v99 = 0;
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (Count) {
    CFRelease((CFTypeRef)Count);
  }
  if (RandomNumber) {
    CFRelease(RandomNumber);
  }
  if (Value) {
    CFRelease(Value);
  }
  if (v104)
  {
    CFRelease(v104);
    CFTypeRef v104 = 0;
  }
  if (v103)
  {
    CFRelease(v103);
    CFTypeRef v103 = 0;
  }
  if (v102)
  {
    CFRelease(v102);
    CFTypeRef v102 = 0;
  }
  if (v101) {
    CFRelease(v101);
  }
  return v8;
}

void _AMFDRHttpHandleHeaderMessage(CFMutableDictionaryRef *a1, CFDictionaryRef theDict, CFIndex a3, const __CFData *a4, uint64_t a5)
{
  if (!a1)
  {
    CFStringRef format = @"amfdr is NULL";
LABEL_19:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpHandleHeaderMessage", format, v18);
    return;
  }
  if (!theDict)
  {
    CFStringRef format = @"httpResponseHeader is NULL";
    goto LABEL_19;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"x-fdr-message");
  if (Value)
  {
    CFStringRef v10 = Value;
    AMFDRErrorPushInternal(a5, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpHandleHeaderMessage", @"%s returned status %d. x-fdr-message: '%@'", (char)"_AMFDRHttpHandleHeaderMessage");
    AMFDRCopyStatString(a1, @"FDRXFDRMessage", v10);
  }
  else if (a4)
  {
    CFIndex Length = CFDataGetLength(a4);
    if (Length >= 80) {
      CFIndex v12 = 80;
    }
    else {
      CFIndex v12 = Length;
    }
    CFAllocatorRef v13 = CFGetAllocator(a1);
    uint64_t BytePtr = CFDataGetBytePtr(a4);
    CFStringRef v15 = CFStringCreateWithBytes(v13, BytePtr, v12, 0x8000100u, 0);
    if (v15)
    {
      CFStringRef v16 = v15;
      AMFDRCopyStatString(a1, @"FDRXFDRMessage", v15);
      AMFDRErrorPushInternal(a5, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpHandleHeaderMessage", @"%s returned status %d. ResponseBody: '%@'", (char)"_AMFDRHttpHandleHeaderMessage");
      CFRelease(v16);
    }
  }
  else
  {
    AMFDRErrorPushInternal(a5, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpHandleHeaderMessage", @"%s returned status %d. ResponseBody: '%@'", (char)"_AMFDRHttpHandleHeaderMessage");
  }
}

void ___thr_AMFDRHttpRequestStatisticsRecord(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  CFAllocatorRef v1 = *(const __CFAllocator **)a1;
  CFURLRef v2 = *(const __CFURL **)(a1 + 8);
  CFNumberRef v4 = *(void **)(a1 + 16);
  CFTypeRef v3 = *(CFIndex **)(a1 + 24);
  double valuePtr = CFAbsoluteTimeGetCurrent() + *MEMORY[0x263EFFAF8];
  pid_t v17 = 0;
  if (!v2 || !v4 || (CFStringRef v5 = CFURLGetString(v2), (v6 = CFNumberCreate(v1, kCFNumberDoubleType, &valuePtr)) == 0))
  {
    AMSupportLogInternal();
LABEL_23:
    AMSupportLogInternal();
    return;
  }
  CFNumberRef v7 = v6;
  CFUUIDRef v8 = CFUUIDCreate(v1);
  if (!v8)
  {
    AMSupportLogInternal();
    CFRelease(v7);
    goto LABEL_23;
  }
  CFUUIDRef v9 = v8;
  CFStringRef v10 = CFUUIDCreateString(v1, v8);
  if (v10)
  {
    CFNumberRef v11 = (CFNumberRef)_HttpRequestStatisticCreate_pidNumber;
    if (_HttpRequestStatisticCreate_pidNumber
      || (pid_t v17 = getpid(),
          CFNumberRef v11 = CFNumberCreate(v1, kCFNumberIntType, &v17),
          (_HttpRequestStatisticCreate_pidNumber = (uint64_t)v11) != 0))
    {
      CFStringRef v12 = (CFStringRef)_HttpRequestStatisticCreate_procNameStr;
      if (_HttpRequestStatisticCreate_procNameStr)
      {
LABEL_13:
        *(_OWORD *)keys = xmmword_2642D1640;
        long long v21 = *(_OWORD *)&off_2642D1650;
        long long v22 = xmmword_2642D1660;
        values[0] = v7;
        values[1] = (void *)v10;
        values[2] = v11;
        values[3] = (void *)v12;
        values[4] = (void *)v5;
        values[5] = v4;
        CFDictionaryRef v15 = CFDictionaryCreate(v1, (const void **)keys, (const void **)values, 6, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        goto LABEL_14;
      }
      CFAllocatorRef v13 = (const char **)_CFGetProgname();
      if (v13)
      {
        if (*v13)
        {
          CFStringRef v14 = CFStringCreateWithCString(v1, *v13, 0x8000100u);
          _HttpRequestStatisticCreate_procNameStr = (uint64_t)v14;
          if (v14)
          {
            CFStringRef v12 = v14;
            CFNumberRef v11 = (CFNumberRef)_HttpRequestStatisticCreate_pidNumber;
            goto LABEL_13;
          }
        }
      }
    }
  }
  AMSupportLogInternal();
  CFDictionaryRef v15 = 0;
LABEL_14:
  CFRelease(v7);
  CFRelease(v9);
  if (v10) {
    CFRelease(v10);
  }
  if (!v15) {
    goto LABEL_23;
  }
  CFMutableDictionaryRef Mutable = (__CFArray *)gHttpRequestStatisticsArray;
  if (gHttpRequestStatisticsArray
    || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v1, 0, MEMORY[0x263EFFF70]),
        (gHttpRequestStatisticsArray = (uint64_t)Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, v15);
    *CFTypeRef v3 = CFArrayGetCount((CFArrayRef)gHttpRequestStatisticsArray);
  }
  else
  {
    AMSupportLogInternal();
  }
  CFRelease(v15);
}

uint64_t _AMFDRHttpProxyIsEnabled(uint64_t a1)
{
  if (a1 && (CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16)) != 0)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v2, @"EnableProxy");
    if (Value)
    {
      CFBooleanRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue(v4)) {
          return 1;
        }
      }
    }
    CFNumberRef v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"UseSOCKSHost");
    if (v6)
    {
      CFTypeID v7 = CFGetTypeID(v6);
      if (v7 == CFStringGetTypeID()) {
        return 1;
      }
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  return 0;
}

void _AMFDRHttpLogRequest(__CFHTTPMessage *a1, const void *a2, int a3)
{
  int v3 = a3;
  uint64_t v30 = *MEMORY[0x263EF8340];
  CFStringRef cf = 0;
  if (a1)
  {
    CFURLRef v6 = CFHTTPMessageCopyRequestURL(a1);
    CFDictionaryRef v7 = CFHTTPMessageCopyAllHeaderFields(a1);
    CFIndex Count = CFDictionaryGetCount(v7);
    CFUUIDRef v9 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFStringRef v10 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryRef v26 = v7;
    CFDictionaryRef v11 = v7;
    CFStringRef v12 = v9;
    CFAllocatorRef v13 = v10;
    CFDictionaryGetKeysAndValues(v11, v9, v10);
    if (v6) {
      AMSupportLogInternal();
    }
    if (Count >= 1)
    {
      CFStringRef v14 = v13;
      do
      {
        ++v9;
        ++v14;
        AMSupportLogInternal();
        --Count;
      }
      while (Count);
    }
    if (!a2)
    {
      CFDataRef v18 = CFHTTPMessageCopyBody(a1);
      CFDictionaryRef v15 = v13;
      CFStringRef v16 = v12;
      CFDictionaryRef v17 = v26;
      int v3 = a3;
      if (v18) {
        goto LABEL_11;
      }
      goto LABEL_32;
    }
    CFDictionaryRef v15 = v13;
    CFStringRef v16 = v12;
    CFDictionaryRef v17 = v26;
    int v3 = a3;
  }
  else
  {
    CFURLRef v6 = 0;
    CFDictionaryRef v15 = 0;
    CFStringRef v16 = 0;
    CFDictionaryRef v17 = 0;
    if (!a2) {
      goto LABEL_22;
    }
  }
  CFDataRef v18 = (const __CFData *)CFRetain(a2);
  if (v18)
  {
LABEL_11:
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t BytePtr = CFDataGetBytePtr(v18);
    CFIndex Length = CFDataGetLength(v18);
    CFStringRef v22 = CFStringCreateWithBytes(v19, BytePtr, Length, 0x8000100u, 0);
    CFStringRef cf = v22;
    if (v3 >= 1 && !v22)
    {
      if (CFDataGetLength(v18) >= v3) {
        goto LABEL_18;
      }
      AMSupportLogInternal();
      AMSupportBase64Encode();
      CFStringRef v22 = cf;
    }
    if (v22)
    {
      AMSupportLogInternal();
      CFDataRef v23 = 0;
      if (!v6)
      {
LABEL_20:
        CFRelease(v18);
        if (!v23) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
LABEL_19:
      CFRelease(v6);
      goto LABEL_20;
    }
LABEL_18:
    *(void *)&long long v24 = -1;
    *((void *)&v24 + 1) = -1;
    *(_OWORD *)UInt8 bytes = v24;
    long long v29 = v24;
    CFDataGetBytePtr(v18);
    CFDataGetLength(v18);
    AMSupportDigestSha256();
    CFDataRef v23 = CFDataCreate(v19, bytes, 32);
    CFStringRef cf = (const __CFString *)AMSupportCopyHexStringFromData();
    CFDataGetLength(v18);
    AMSupportLogInternal();
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_32:
  CFDataRef v23 = v6;
  if (v6) {
LABEL_21:
  }
    CFRelease(v23);
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    free(v16);
  }
  if (v15) {
    free(v15);
  }
}

uint64_t _AMFDRDataPermAllowed(CFDictionaryRef *a1, const __CFString *a2)
{
  CFArrayRef v27 = 0;
  CFArrayRef theArray = 0;
  CFArrayRef v26 = 0;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1[2], @"Permissions");
  if (!Value)
  {
    AMSupportLogInternal();
    CFArrayRef v8 = 0;
LABEL_20:
    CFArrayRef v13 = 0;
    goto LABEL_22;
  }
  CFStringRef v5 = Value;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v6, a2, @"/");
  CFArrayRef v8 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings || CFArrayGetCount(ArrayBySeparatingStrings) != 2)
  {
    AMSupportLogInternal();
    goto LABEL_20;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
  CFStringRef v10 = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
  CFAllocatorRef v11 = CFGetAllocator(a1);
  CFArrayRef v12 = CFStringCreateArrayBySeparatingStrings(v11, v10, @":");
  CFArrayRef v13 = v12;
  if (!v12
    || CFArrayGetCount(v12) != 2
    || (CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex(v13, 0),
        CFStringRef v15 = (const __CFString *)CFArrayGetValueAtIndex(v13, 1),
        CFAllocatorRef v16 = CFGetAllocator(a1),
        !AMFDRDecomposePermissionString(v16, v5, (CFTypeRef *)&theArray, (CFTypeRef *)&v27, (CFTypeRef *)&v26)))
  {
    AMSupportLogInternal();
    goto LABEL_22;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_22:
    uint64_t v23 = 0;
    goto LABEL_23;
  }
  CFIndex v18 = Count;
  CFArrayRef cf = v8;
  CFIndex v19 = 0;
  while (1)
  {
    CFStringRef v20 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v19);
    CFStringRef v21 = (const __CFString *)CFArrayGetValueAtIndex(v27, v19);
    CFStringRef v22 = (const __CFString *)CFArrayGetValueAtIndex(v26, v19);
    if (CFEqual(v20, ValueAtIndex)
      && (CFEqual(v21, @"*")
       || CFEqual(v21, v14))
      && (CFEqual(v22, v15) || CFStringFind(v22, @"*", 0).location != -1))
    {
      break;
    }
    if (v18 == ++v19)
    {
      uint64_t v23 = 0;
      goto LABEL_17;
    }
  }
  uint64_t v23 = 1;
LABEL_17:
  CFArrayRef v8 = cf;
LABEL_23:
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v27)
  {
    CFRelease(v27);
    CFArrayRef v27 = 0;
  }
  if (v26)
  {
    CFRelease(v26);
    CFArrayRef v26 = 0;
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v23;
}

CFTypeRef _AMFDRDataHTTPCopyForPut(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMFDRDataCopyForPut(a1, *(const __CFString **)a2, *(const void **)(a2 + 8), *(const __CFData **)(a2 + 16), *(__CFString **)(a2 + 24), a3);
}

__CFString *_AMFDRDataHTTPMultiCopyInternal(__CFString *a1, CFArrayRef theArray, const __CFArray *a3, unsigned int a4, uint64_t a5)
{
  CFStringRef v5 = (CFTypeRef *)a5;
  CFAllocatorRef v6 = a1;
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v69 = a4;
  CFTypeRef v68 = 0;
  unsigned __int8 v67 = 0;
  CFStringRef v72 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v70 = v7;
  long long v71 = v7;
  if (!a1)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", @"amfdr is NULL", v59);
LABEL_100:
    CFStringRef v20 = 0;
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v18 = 0;
    goto LABEL_22;
  }
  if (!theArray)
  {
    CFStringRef v50 = @"dataClassArray is NULL";
LABEL_98:
    AMFDRErrorPushInternal((uint64_t)v5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", v50, v59);
LABEL_99:
    CFAllocatorRef v6 = 0;
    goto LABEL_100;
  }
  if (!a3)
  {
    CFStringRef v50 = @"dataInstanceArray is NULL";
    goto LABEL_98;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v50 = @"Invalid dataClassArray count";
    goto LABEL_98;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v50 = @"Invalid dataInstanceArray count";
    goto LABEL_98;
  }
  CFAllocatorRef v12 = CFGetAllocator(v6);
  CFMutableDictionaryRef cf = CFDictionaryCreateMutable(v12, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!cf)
  {
    AMFDRErrorPushInternal((uint64_t)v5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", @"valueDataDict is NULL", v59);
    goto LABEL_99;
  }
  CFAllocatorRef v13 = CFGetAllocator(v6);
  CFDictionaryRef theDict = CFDictionaryCreateMutable(v13, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal((uint64_t)v5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", @"multiRequestErrors is NULL", v59);
LABEL_104:
    CFStringRef v15 = 0;
    goto LABEL_14;
  }
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)v6, v5) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v5, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", @"AMFDRDataHTTPLoadPersistent failed", v59);
    goto LABEL_104;
  }
  CFStringRef v14 = _AMFDRCreateUrlWithKey((uint64_t)v6, @"DSURL", @"dm/bulk/data", 0, 0);
  CFStringRef v15 = v14;
  if (!v14)
  {
    CFStringRef v16 = @"serverURL is NULL";
    goto LABEL_13;
  }
  if (a4 >= 5 || ((0x1Du >> a4) & 1) == 0)
  {
    char v59 = a4;
    CFStringRef v16 = @"unsupported multi action: %d";
LABEL_13:
    AMFDRErrorPushInternal((uint64_t)v5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", v16, v59);
LABEL_14:
    CFDataRef v17 = 0;
    CFArrayRef v18 = 0;
    CFMutableArrayRef Mutable = 0;
    CFStringRef v20 = 0;
    CFAllocatorRef v6 = 0;
    CFStringRef v21 = cf;
    CFStringRef v22 = theDict;
LABEL_15:
    CFRelease(v21);
    goto LABEL_16;
  }
  CFURLRef v61 = (const __CFURL *)v14;
  if (!_AMFDRGetMultiRequestMaxAttempts((uint64_t)v6))
  {
    CFStringRef v21 = 0;
    CFDataRef v17 = 0;
    CFArrayRef v18 = 0;
    CFMutableArrayRef Mutable = 0;
    CFStringRef v20 = 0;
    goto LABEL_77;
  }
  int v24 = 0;
  CFStringRef v20 = 0;
  CFMutableArrayRef Mutable = 0;
  CFArrayRef v18 = 0;
  CFStringRef v21 = 0;
  char v25 = 8 * a4;
  CFDataRef v17 = 0;
  unint64_t v62 = 0xD0E0D0101uLL >> v25;
  CFIndex v60 = v5;
  do
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v17) {
      CFRelease(v17);
    }
    CFArrayRef v26 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    if (v68)
    {
      CFRelease(v68);
      CFTypeRef v68 = 0;
    }
    CFAllocatorRef v27 = CFGetAllocator(v6);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v27, 0, v26);
    if (!Mutable)
    {
      CFStringRef v49 = @"dataClassToRequest is NULL";
LABEL_92:
      AMFDRErrorPushInternal((uint64_t)v5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", v49, v59);
      CFAllocatorRef v6 = 0;
      CFStringRef v20 = 0;
      CFDataRef v17 = 0;
      CFStringRef v22 = theDict;
      CFStringRef v15 = v61;
      CFMutableDictionaryRef v47 = cf;
      goto LABEL_80;
    }
    CFAllocatorRef v28 = CFGetAllocator(v6);
    CFMutableArrayRef v29 = CFArrayCreateMutable(v28, 0, v26);
    if (!v29)
    {
      CFStringRef v49 = @"dataInstanceToRequest is NULL";
      goto LABEL_92;
    }
    uint64_t v30 = v29;
    CFAllocatorRef v31 = Mutable;
    int v32 = v24;
    if (v24)
    {
      unsigned int v33 = _AMFDRGetMultiRequestBackoff((uint64_t)v6) * v24;
      AMSupportLogInternal();
      sleep(v33);
    }
    int v64 = v32;
    for (CFIndex i = 0; i != v11; ++i)
    {
      if (v21) {
        CFRelease(v21);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      if (!ValueAtIndex)
      {
        CFStringRef v48 = @"dataClassStr is NULL";
LABEL_87:
        AMFDRErrorPushInternal((uint64_t)v60, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", v48, v59);
LABEL_89:
        CFDataRef v17 = 0;
        CFAllocatorRef v6 = 0;
        CFStringRef v21 = cf;
        CFStringRef v22 = theDict;
        CFStringRef v15 = v61;
        CFMutableArrayRef Mutable = v31;
        CFStringRef v20 = v30;
        goto LABEL_15;
      }
      CFStringRef v36 = ValueAtIndex;
      if (!CFStringGetLength(ValueAtIndex))
      {
        CFStringRef v48 = @"dataClassStr length is 0";
        goto LABEL_87;
      }
      CFStringRef v37 = CFArrayGetValueAtIndex(a3, i);
      if (!v37)
      {
        CFStringRef v48 = @"dataInstanceStr is NULL";
        goto LABEL_87;
      }
      CFStringRef v38 = v37;
      CFAllocatorRef v39 = CFGetAllocator(v6);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v39, (uint64_t)v36, (uint64_t)v38);
      if (!FullKey)
      {
        AMFDRErrorPushInternal((uint64_t)v60, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", @"currDataInstance is NULL", v59);
        goto LABEL_89;
      }
      CFStringRef v21 = FullKey;
      if (v18)
      {
        v74.CFIndex length = CFArrayGetCount(v18);
        v74.CFIndex location = 0;
        if (!CFArrayContainsValue(v18, v74, v21)) {
          continue;
        }
        CFDictionaryRemoveValue(theDict, v21);
        AMSupportLogInternal();
      }
      CFArrayAppendValue(v31, v36);
      CFArrayAppendValue(v30, v38);
    }
    CFMutableArrayRef Mutable = v31;
    if (!CFArrayGetCount(v31))
    {
      CFStringRef v22 = theDict;
      AMFDRErrorPushInternal((uint64_t)v60, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", @"got multiRequestErrors", v59);
      CFDataRef v17 = 0;
      CFStringRef v20 = v30;
      goto LABEL_83;
    }
    CFArrayRef v41 = v31;
    CFStringRef v20 = v30;
    CFDataRef v17 = AMFDRDataHTTPCreateMultiRequest(v6, v62, v41, v30, 0, 0, 0, 0, (uint64_t)v60);
    if (!v17)
    {
      CFStringRef format = @"httpRequestData is NULL";
      *(_OWORD *)CFAllocatorRef v56 = 0u;
      *(_OWORD *)CFAllocatorRef v57 = 0u;
      *(_OWORD *)CFStringRef value = 0u;
      uint64_t v51 = (uint64_t)v60;
      goto LABEL_110;
    }
    CFStringRef v5 = v60;
    if (v60)
    {
      if (*v60)
      {
        CFRelease(*v60);
        *CFIndex v60 = 0;
      }
      if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)v6, v61, @"MultiCopy", @"POST", 0, v17, &v68, 0, 0, 0, 0, 0, v60) & 1) == 0|| *v60)
      {
LABEL_117:
        AMSupportLogInternal();
LABEL_118:
        CFStringRef v22 = theDict;
LABEL_83:
        CFRelease(cf);
        CFAllocatorRef v6 = 0;
        CFStringRef v15 = v61;
        goto LABEL_15;
      }
    }
    else if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)v6, v61, @"MultiCopy", @"POST", 0, v17, &v68, 0, 0, 0, 0, 0, 0) & 1) == 0)
    {
      goto LABEL_117;
    }
    if (!v68)
    {
      int v52 = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
      goto LABEL_115;
    }
    if (v18) {
      CFRelease(v18);
    }
    CFAllocatorRef v42 = CFGetAllocator(v6);
    CFMutableArrayRef v43 = CFArrayCreateMutable(v42, 0, MEMORY[0x263EFFF70]);
    CFArrayRef v18 = v43;
    if (!v43)
    {
      CFStringRef format = @"dataClassInstanceToRetry is NULL";
      *(_OWORD *)CFAllocatorRef v56 = 0u;
      *(_OWORD *)CFAllocatorRef v57 = 0u;
      *(_OWORD *)CFStringRef value = 0u;
      uint64_t v51 = (uint64_t)v60;
LABEL_110:
      CFIndex v53 = 2;
      goto LABEL_116;
    }
    *(void *)&long long v70 = v6;
    *((void *)&v70 + 1) = cf;
    *(void *)&long long v71 = theDict;
    *((void *)&v71 + 1) = v43;
    CFStringRef v72 = &v69;
    uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)v68);
    unsigned int Length = CFDataGetLength((CFDataRef)v68);
    if (AMFDRDecodeMultiResponse((uint64_t)BytePtr, Length, &v67, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiResponseCallback, (uint64_t)&v70))
    {
      CFStringRef v54 = @"AMFDRDecodeMultiResponse failed";
LABEL_113:
      AMFDRErrorPushInternal((uint64_t)v60, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", v54, v59);
      goto LABEL_118;
    }
    if (v67 != v62)
    {
      char v59 = v67;
      CFStringRef v54 = @"actionCode returned is %d";
      goto LABEL_113;
    }
    if ((_AMFDRSavePersistentCookie((uint64_t)v6, (uint64_t)v60) & 1) == 0)
    {
      int v52 = @"_AMFDRSavePersistentCookie failed";
LABEL_115:
      CFStringRef format = v52;
      *(_OWORD *)CFAllocatorRef v56 = 0u;
      *(_OWORD *)CFAllocatorRef v57 = 0u;
      *(_OWORD *)CFStringRef value = 0u;
      uint64_t v51 = (uint64_t)v60;
      CFIndex v53 = 8;
LABEL_116:
      AMFDRErrorPushInternal(v51, v53, 0, 0, 0, 0, 0, 0, value[0], value[1], v56[0], v56[1], v57[0], v57[1], (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", format, v59);
      goto LABEL_118;
    }
    if (!CFArrayGetCount(v18)) {
      break;
    }
    int v24 = v64 + 1;
  }
  while (v64 + 1 < _AMFDRGetMultiRequestMaxAttempts((uint64_t)v6));
LABEL_77:
  CFStringRef v22 = theDict;
  CFStringRef v15 = v61;
  if (CFDictionaryGetCount(theDict) >= 1)
  {
    char MultiActionDescription = AMFDRDataGetMultiActionDescription(v69);
    AMFDRErrorPushInternal((uint64_t)v5, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiCopyInternal", @"got multiRequestErrors for %@", MultiActionDescription);
  }
  CFMutableDictionaryRef v47 = cf;
  CFAllocatorRef v6 = (__CFString *)CFRetain(cf);
LABEL_80:
  CFRelease(v47);
  if (v21) {
    goto LABEL_15;
  }
LABEL_16:
  if (v22) {
    CFRelease(v22);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
LABEL_22:
  if (v68)
  {
    CFRelease(v68);
    CFTypeRef v68 = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v6;
}

uint64_t _AMFDRHttpMultiResponseCallback(const UInt8 *a1, unsigned int a2, const UInt8 *a3, unsigned int a4, unint64_t a5, unsigned int a6, int a7, __CFDictionary *Mutable, int a9, const char *a10, unsigned int a11, uint64_t a12)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  CFTypeRef v58 = 0;
  CFTypeRef v59 = 0;
  CFTypeRef v56 = 0;
  CFStringRef value = 0;
  p_CFStringRef value = 0;
  CFTypeRef v55 = 0;
  CFIndex v53 = 0;
  char v52 = 0;
  unint64_t v88 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v86 = v12;
  long long v87 = v12;
  long long v84 = v12;
  long long v85 = v12;
  long long v82 = v12;
  long long v83 = v12;
  long long v80 = v12;
  long long v81 = v12;
  long long v78 = v12;
  long long v79 = v12;
  long long v76 = v12;
  long long v77 = v12;
  long long v74 = v12;
  long long v75 = v12;
  long long v72 = v12;
  long long v73 = v12;
  long long v70 = v12;
  long long v71 = v12;
  long long v68 = v12;
  long long v69 = v12;
  long long v66 = v12;
  long long v67 = v12;
  long long v65 = v12;
  long long v63 = v12;
  long long v64 = v12;
  long long v61 = v12;
  long long v62 = v12;
  long long v60 = v12;
  if (!a1) {
    goto LABEL_118;
  }
  if (!a2) {
    goto LABEL_118;
  }
  unsigned int v14 = **(_DWORD **)(a12 + 32);
  if (v14 >= 9) {
    goto LABEL_118;
  }
  CFStringRef v21 = *(const void **)a12;
  uint64_t v20 = *(void *)(a12 + 8);
  unsigned int v22 = v14 - 5;
  if (v14 - 5 <= 3 && (a3 || a4)) {
    goto LABEL_118;
  }
  if (!*(void *)(a12 + 16) || !v21) {
    goto LABEL_118;
  }
  if (v22 > 3)
  {
    if (v14 <= 4 && v14 != 1 && !v20) {
      goto LABEL_118;
    }
  }
  else if (v20)
  {
LABEL_118:
    AMSupportLogInternal();
    CFMutableArrayRef Mutable = 0;
    uint64_t v29 = 1;
    goto LABEL_87;
  }
  if (!*(void *)(a12 + 24)) {
    goto LABEL_118;
  }
  CFDictionaryRef theDict = *(__CFDictionary **)(a12 + 8);
  CFStringRef v50 = *(__CFDictionary **)(a12 + 16);
  CFArrayRef theArray = *(__CFArray **)(a12 + 24);
  CFAllocatorRef v24 = CFGetAllocator(v21);
  CFStringRef v25 = CFStringCreateWithBytes(v24, a1, a2, 0x8000100u, 0);
  if (!v25)
  {
    AMSupportLogInternal();
LABEL_117:
    CFMutableArrayRef Mutable = 0;
    uint64_t v29 = 2;
    goto LABEL_87;
  }
  CFStringRef v26 = v25;
  CFTypeRef v27 = _AMFDRDataHTTPConvertMultiResponseKey(v21, v25);
  if (!v27)
  {
    AMSupportLogInternal();
    CFRelease(v26);
    goto LABEL_117;
  }
  CFAllocatorRef v28 = v27;
  AMSupportLogInternal();
  CFStringRef cf = v26;
  if (!a5)
  {
    uint64_t v29 = 2;
    goto LABEL_30;
  }
  if (v14 == 4)
  {
    p_CFStringRef value = &value;
  }
  else if (v14 == 2)
  {
    CFIndex v53 = &v58;
  }
  else
  {
    if (v22 <= 3)
    {
      unint64_t v30 = a5;
      unsigned int v31 = a6;
      int v32 = 0;
      goto LABEL_29;
    }
    uint64_t v29 = 2;
    if (v14 > 4 || v14 == 1) {
      goto LABEL_101;
    }
  }
  int v32 = &v53;
  unint64_t v30 = a5;
  unsigned int v31 = a6;
LABEL_29:
  uint64_t v29 = AMFDRDecodeMetadata(v30, v31, (uint64_t (*)(void, void, void, void, uint64_t))_AMFDRHttpMetadataLog, (uint64_t)v32);
  if (v29) {
    goto LABEL_101;
  }
LABEL_30:
  if (v14 == 4)
  {
    if (a7 && !value)
    {
      char v52 = 1;
      unsigned int v33 = 31;
      CFMutableStringRef v34 = "missing data asid from metadata";
LABEL_38:
      CFMutableArrayRef Mutable = (__CFDictionary *)&v52;
      if (!v34) {
        goto LABEL_54;
      }
      goto LABEL_39;
    }
  }
  else if (v14 == 2)
  {
    if (a7 && !v58)
    {
      char v52 = 1;
      unsigned int v33 = 31;
      CFMutableStringRef v34 = "missing data hash from metadata";
      goto LABEL_38;
    }
    if (a7)
    {
      if (!Mutable)
      {
        CFDictionarySetValue(theDict, v28, v58);
        uint64_t v29 = 0;
LABEL_66:
        CFDataRef v40 = 0;
LABEL_108:
        CFStringRef v37 = 0;
        goto LABEL_83;
      }
      goto LABEL_101;
    }
    goto LABEL_67;
  }
  if (a7)
  {
    if (!Mutable)
    {
      if (v14 == 4)
      {
        CFDictionarySetValue(theDict, v28, value);
LABEL_79:
        uint64_t v29 = 0;
LABEL_80:
        CFDataRef v40 = 0;
LABEL_81:
        CFStringRef v37 = 0;
LABEL_82:
        CFMutableArrayRef Mutable = 0;
        goto LABEL_83;
      }
      if (v14 != 3 && v14) {
        goto LABEL_79;
      }
      if (!a3 || !a4) {
        goto LABEL_68;
      }
      CFAllocatorRef v41 = CFGetAllocator(v21);
      CFDataRef v42 = CFDataCreate(v41, a3, a4);
      CFDataRef v40 = v42;
      if (!v42)
      {
        AMSupportLogInternal();
        goto LABEL_81;
      }
      CFDataGetLength(v42);
      AMSupportLogInternal();
      if (v14 != 3)
      {
        CFDictionarySetValue(theDict, v28, v40);
        uint64_t v29 = 0;
        goto LABEL_81;
      }
      CFAllocatorRef v43 = CFGetAllocator(v21);
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v43, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        if (!Img4DecodeInitManifest())
        {
          CFTypeRef v45 = CFRetain(v40);
          CFTypeRef v56 = v45;
          CFAllocatorRef v44 = theDict;
          goto LABEL_103;
        }
        CFAllocatorRef v44 = theDict;
        if (AMFDRDataCopyExtraManifests(v21, v40, &v56, &v55, (uint64_t)&v59))
        {
          CFTypeRef v45 = v56;
LABEL_103:
          if (v45) {
            CFDictionarySetValue(Mutable, @"mandev", v45);
          }
          if (v55) {
            CFDictionarySetValue(Mutable, @"mansta", v55);
          }
          CFDictionarySetValue(v44, v28, Mutable);
          uint64_t v29 = 0;
          goto LABEL_108;
        }
      }
      AMSupportLogInternal();
      goto LABEL_108;
    }
LABEL_101:
    AMSupportLogInternal();
    goto LABEL_80;
  }
  if (v14 > 4 || v14 == 1) {
    goto LABEL_51;
  }
LABEL_67:
  if (!a3 && !a4)
  {
LABEL_51:
    if (!Mutable)
    {
      AMSupportLogInternal();
      goto LABEL_66;
    }
    if (a9 == 1)
    {
      unsigned int v33 = a11;
      CFMutableStringRef v34 = a10;
      if (!a10) {
        goto LABEL_54;
      }
LABEL_39:
      if (v33)
      {
        CFAllocatorRef v35 = CFGetAllocator(v21);
        CFStringRef v36 = CFStringCreateWithBytes(v35, (const UInt8 *)v34, v33, 0x8000100u, 0);
        if (v36)
        {
          CFStringRef v37 = v36;
          AMSupportLogInternal();
          if ((*(unsigned char *)Mutable - 1) >= 5u) {
            CFIndex v38 = 799;
          }
          else {
            CFIndex v38 = (*(unsigned char *)Mutable - 1) + 701;
          }
          AMFDRErrorPushInternal((uint64_t)&v59, v38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMultiResponseCallback", @"multi-response error %d : %@", *(unsigned char *)Mutable);
LABEL_58:
          if (v59)
          {
            CFDictionarySetValue(v50, v28, v59);
            if (*(unsigned char *)Mutable == 3) {
              CFArrayAppendValue(theArray, v28);
            }
            uint64_t v29 = 0;
          }
          else
          {
            AMSupportLogInternal();
          }
          CFDataRef v40 = 0;
          goto LABEL_82;
        }
      }
LABEL_54:
      AMSupportLogInternal();
      if ((*(unsigned char *)Mutable - 1) >= 5u) {
        CFIndex v39 = 799;
      }
      else {
        CFIndex v39 = (*(unsigned char *)Mutable - 1) + 701;
      }
      AMFDRErrorPushInternal((uint64_t)&v59, v39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRHttpMultiResponseCallback", @"multi-response error %d without an error message", *(unsigned char *)Mutable);
      CFStringRef v37 = 0;
      goto LABEL_58;
    }
    goto LABEL_101;
  }
LABEL_68:
  AMSupportLogInternal();
  CFDataRef v40 = 0;
  CFStringRef v37 = 0;
  CFMutableArrayRef Mutable = 0;
  uint64_t v29 = 1;
LABEL_83:
  CFRelease(cf);
  CFRelease(v28);
  if (v40) {
    CFRelease(v40);
  }
  if (v37) {
    CFRelease(v37);
  }
LABEL_87:
  if (v59)
  {
    CFRelease(v59);
    CFTypeRef v59 = 0;
  }
  if (v58)
  {
    CFRelease(v58);
    CFTypeRef v58 = 0;
  }
  if (value)
  {
    CFRelease(value);
    CFStringRef value = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v56)
  {
    CFRelease(v56);
    CFTypeRef v56 = 0;
  }
  if (v55) {
    CFRelease(v55);
  }
  return v29;
}

uint64_t _AMFDRGetMultiRequestMaxAttempts(uint64_t a1)
{
  uint64_t result = 3;
  unsigned int valuePtr = 3;
  if (a1)
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 16);
    if (v3
      && (CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(v3, @"MultiRequestMaxAttempts")) != 0
      && (CFNumberRef v5 = v4, v6 = CFGetTypeID(v4), v6 == CFNumberGetTypeID()))
    {
      int Value = CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr) {
        unsigned int v8 = valuePtr;
      }
      else {
        unsigned int v8 = 3;
      }
      if (Value) {
        return v8;
      }
      else {
        return valuePtr;
      }
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t _AMFDRGetMultiRequestBackoff(uint64_t a1)
{
  uint64_t result = 1;
  unsigned int valuePtr = 1;
  if (a1)
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 16);
    if (v3
      && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, @"MultiRequestBackoff")) != 0
      && (CFNumberRef v5 = Value, v6 = CFGetTypeID(Value), v6 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

CFDataRef AMFDRDataHTTPMultiCopyForPut(__CFString *a1, CFArrayRef *a2, uint64_t a3)
{
  return AMFDRDataHTTPCreateMultiRequest(a1, 2u, *a2, a2[1], a2[2], a2[3], 0, 1, a3);
}

CFArrayRef _AMFDRDataHTTPPatchInternal(__CFString *a1, void *a2, void *a3, const __CFArray *a4, const __CFArray *a5, void *a6, const __CFArray *a7, CFTypeRef *a8)
{
  values[1] = *(void **)MEMORY[0x263EF8340];
  CFErrorRef err = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", @"amfdr is NULL", v43);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v38 = @"dataClassArray is NULL";
LABEL_35:
    AMFDRErrorPushInternal((uint64_t)a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", v38, v43);
    goto LABEL_37;
  }
  if (!a3)
  {
    CFStringRef v38 = @"dataInstanceArray is NULL";
    goto LABEL_35;
  }
  CFArrayRef v11 = a5;
  CFArrayRef v12 = a4;
  if (!((unint64_t)a4 | (unint64_t)a5))
  {
    CFStringRef v38 = @"originalData and expectedData are NULL";
    goto LABEL_35;
  }
  if (a6)
  {
    CFArrayRef v13 = a7;
    CFStringRef v50 = a3;
    values[0] = a2;
    CFStringRef v48 = a5;
    CFStringRef v49 = a4;
    CFStringRef v46 = a7;
    CFMutableDictionaryRef v47 = a6;
    CFAllocatorRef v15 = CFGetAllocator(a1);
    CFStringRef v16 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    CFArrayRef v17 = CFArrayCreate(v15, (const void **)values, 1, MEMORY[0x263EFFF70]);
    CFAllocatorRef v18 = CFGetAllocator(a1);
    CFArrayRef v19 = CFArrayCreate(v18, (const void **)&v50, 1, v16);
    CFAllocatorRef v20 = CFGetAllocator(a1);
    CFArrayRef v21 = CFArrayCreate(v20, (const void **)&v47, 1, v16);
    CFArrayRef v22 = v21;
    if (!v17)
    {
      AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", @"dataClassArray is NULL", v43);
      CFDictionaryRef v32 = 0;
      CFStringRef FullKey = 0;
      CFAllocatorRef v28 = 0;
      CFArrayRef v13 = 0;
      CFArrayRef v11 = 0;
      CFArrayRef v12 = 0;
LABEL_55:
      if (v19) {
        CFRelease(v19);
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v22) {
        CFRelease(v22);
      }
      if (v13) {
        CFRelease(v13);
      }
      if (v28) {
        CFRelease(v28);
      }
      if (FullKey) {
        CFRelease(FullKey);
      }
      goto LABEL_69;
    }
    CFArrayRef cf = v17;
    if (v19)
    {
      if (v21)
      {
        if (!v12
          || (v23 = CFGetAllocator(a1), (CFArrayRef v12 = CFArrayCreate(v23, (const void **)&v49, 1, MEMORY[0x263EFFF70])) != 0))
        {
          if (!v11
            || (CFAllocatorRef v24 = CFGetAllocator(a1),
                (CFArrayRef v11 = CFArrayCreate(v24, (const void **)&v48, 1, MEMORY[0x263EFFF70])) != 0))
          {
            if (!v13
              || (CFAllocatorRef v25 = CFGetAllocator(a1),
                  (CFArrayRef v13 = CFArrayCreate(v25, (const void **)&v46, 1, MEMORY[0x263EFFF70])) != 0))
            {
              CFAllocatorRef v26 = CFGetAllocator(a1);
              CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v26, (uint64_t)a2, (uint64_t)a3);
              if (FullKey)
              {
                CFAllocatorRef v28 = _AMFDRDataHTTPMultiPatchInternal(a1, v17, v19, v12, v11, v22, v13, (uint64_t)&err);
                uint64_t v29 = err;
                if (err)
                {
                  if (a8)
                  {
                    if (*a8)
                    {
                      CFRelease(*a8);
                      *a8 = 0;
                      uint64_t v29 = err;
                    }
                    if (CFErrorGetCode(v29) != 21)
                    {
                      CFTypeRef v30 = CFRetain(err);
                      CFArrayRef v17 = 0;
                      unsigned int v31 = a8;
                      CFDictionaryRef v32 = 0;
                      *unsigned int v31 = v30;
LABEL_54:
                      CFRelease(cf);
                      goto LABEL_55;
                    }
LABEL_26:
                    CFMutableStringRef v34 = a8;
                    CFDictionaryRef v35 = CFErrorCopyUserInfo(err);
                    CFDictionaryRef v32 = v35;
                    if (v35)
                    {
                      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v35, @"MultiRequestErrors");
                      if (Value)
                      {
                        CFStringRef v37 = CFDictionaryGetValue(Value, FullKey);
                        if (v37)
                        {
                          if (v34)
                          {
                            CFArrayRef v17 = 0;
                            *CFMutableStringRef v34 = CFRetain(v37);
                            goto LABEL_54;
                          }
LABEL_78:
                          CFArrayRef v17 = 0;
                          goto LABEL_54;
                        }
                        CFStringRef v42 = @"missing multi request error";
                      }
                      else
                      {
                        CFStringRef v42 = @"MultiRequestErrors not in userInfo";
                      }
                    }
                    else
                    {
                      CFStringRef v42 = @"userInfo is NULL";
                    }
                    AMFDRErrorPushInternal((uint64_t)v34, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", v42, v43);
                    goto LABEL_78;
                  }
                  if (CFErrorGetCode(err) == 21) {
                    goto LABEL_26;
                  }
                  goto LABEL_52;
                }
                if (v28)
                {
                  unsigned int v33 = CFDictionaryGetValue((CFDictionaryRef)v28, FullKey);
                  if (v33)
                  {
                    CFArrayRef v17 = (const __CFArray *)CFRetain(v33);
LABEL_53:
                    CFDictionaryRef v32 = 0;
                    goto LABEL_54;
                  }
                  CFStringRef v40 = @"valueData is NULL";
                }
                else
                {
                  CFStringRef v40 = @"multiResponse is NULL";
                }
                AMFDRErrorPushInternal((uint64_t)a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", v40, v43);
LABEL_52:
                CFArrayRef v17 = 0;
                goto LABEL_53;
              }
              AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", @"dataClassInstance is NULL", v43);
              CFArrayRef v17 = 0;
              CFAllocatorRef v28 = 0;
              goto LABEL_53;
            }
            AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", @"metadataDictArray is NULL", v43);
            CFArrayRef v17 = 0;
LABEL_46:
            CFAllocatorRef v28 = 0;
            CFStringRef FullKey = 0;
            goto LABEL_53;
          }
          AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", @"expectedDataArray is NULL", v43);
          CFArrayRef v17 = 0;
LABEL_45:
          CFArrayRef v13 = 0;
          goto LABEL_46;
        }
        AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", @"originalDataArray is NULL", v43);
        CFArrayRef v17 = 0;
LABEL_44:
        CFArrayRef v11 = 0;
        goto LABEL_45;
      }
      CFStringRef v39 = @"patchDictArray is NULL";
    }
    else
    {
      CFStringRef v39 = @"dataInstanceArray is NULL";
    }
    AMFDRErrorPushInternal((uint64_t)a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", v39, v43);
    CFArrayRef v17 = 0;
    CFArrayRef v12 = 0;
    goto LABEL_44;
  }
  AMFDRErrorPushInternal((uint64_t)a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchInternal", @"patchDict is NULL", v43);
LABEL_37:
  CFArrayRef v17 = 0;
  CFDictionaryRef v32 = 0;
LABEL_69:
  if (err)
  {
    CFRelease(err);
    CFErrorRef err = 0;
  }
  if (v32) {
    CFRelease(v32);
  }
  return v17;
}

__CFString *_AMFDRDataHTTPMultiPatchInternal(__CFString *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, const __CFArray *a7, uint64_t a8)
{
  CFUUIDRef v9 = a1;
  uint64_t v161 = *MEMORY[0x263EF8340];
  char v155 = 0;
  CFTypeRef v160 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long context = v10;
  long long v159 = v10;
  int v154 = 0;
  CFTypeRef v152 = 0;
  unsigned int v153 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"amfdr is NULL", v114);
LABEL_328:
    v149 = 0;
    CFDataRef v106 = 0;
    CFDictionaryRef v122 = 0;
    CFArrayRef v117 = 0;
    CFMutableArrayRef v137 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    char v135 = 0;
    CFArrayRef v72 = 0;
    uint64_t v98 = 0;
    CFArrayRef Mutable = 0;
    goto LABEL_329;
  }
  CFArrayRef v11 = theArray;
  if (!theArray)
  {
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"dataClassArray is NULL", v114);
    CFUUIDRef v9 = 0;
    v149 = 0;
    CFDataRef v106 = 0;
    CFDictionaryRef v122 = 0;
    CFArrayRef v117 = 0;
    CFMutableArrayRef v137 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    char v135 = 0;
    CFArrayRef v72 = 0;
    uint64_t v98 = 0;
    CFArrayRef Mutable = 0;
LABEL_330:
    CFURLRef v119 = 0;
    CFDictionaryRef theDict = 0;
    CFStringRef FullKey = 0;
    CFMutableDictionaryRef v107 = 0;
    CFStringRef v128 = 0;
    CFTypeRef v103 = 0;
    CFTypeRef v105 = 0;
    goto LABEL_243;
  }
  if (!a3)
  {
    CFStringRef v112 = @"dataInstanceArray is NULL";
LABEL_327:
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", v112, v114);
    CFUUIDRef v9 = 0;
    goto LABEL_328;
  }
  if (!a6)
  {
    CFStringRef v112 = @"patchDictArray is NULL";
    goto LABEL_327;
  }
  CFArrayRef v12 = a4;
  if (!a4) {
    CFArrayRef v12 = a5;
  }
  CFArrayRef v116 = v12;
  if (!v12)
  {
    CFStringRef v112 = @"input data array is NULL";
    goto LABEL_327;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v112 = @"Invalid dataClassArray count";
    goto LABEL_327;
  }
  CFIndex v14 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v112 = @"Invalid dataInstanceArray count";
    goto LABEL_327;
  }
  if (CFArrayGetCount(v116) != v14)
  {
    CFStringRef v112 = @"Invalid inputDataArray count";
    goto LABEL_327;
  }
  if (CFArrayGetCount(a6) != v14)
  {
    CFStringRef v112 = @"Invalid patchDictArray count";
    goto LABEL_327;
  }
  if (a7 && CFArrayGetCount(a7) != v14)
  {
    CFStringRef v112 = @"Invalid metadataDictArray count";
    goto LABEL_327;
  }
  CFAllocatorRef v15 = CFGetAllocator(v9);
  CFArrayRef Mutable = CFArrayCreateMutable(v15, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    CFStringRef v113 = @"valueDataArray is NULL";
LABEL_316:
    AMFDRErrorPushInternal(a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", v113, v114);
    CFUUIDRef v9 = 0;
    v149 = 0;
    CFDataRef v106 = 0;
    CFDictionaryRef v122 = 0;
    CFArrayRef v117 = 0;
    CFMutableArrayRef v137 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    char v135 = 0;
    CFArrayRef v72 = 0;
    uint64_t v98 = 0;
LABEL_329:
    CFArrayRef v11 = 0;
    goto LABEL_330;
  }
  CFAllocatorRef v17 = CFGetAllocator(v9);
  v146 = CFArrayCreateMutable(v17, 0, MEMORY[0x263EFFF70]);
  if (!v146)
  {
    CFStringRef v113 = @"originalDigestArray is NULL";
    goto LABEL_316;
  }
  CFAllocatorRef v18 = CFGetAllocator(v9);
  CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v19)
  {
    AMFDRErrorPushInternal(a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"patchedPayloadDict is NULL", v114);
    CFUUIDRef v9 = 0;
    v149 = 0;
    CFDataRef v106 = 0;
    CFDictionaryRef theDict = 0;
    CFDictionaryRef v122 = 0;
    CFArrayRef v117 = 0;
    CFURLRef v119 = 0;
    CFMutableArrayRef v137 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    char v135 = 0;
    CFArrayRef v72 = 0;
    CFArrayRef v11 = 0;
    CFStringRef FullKey = 0;
    CFMutableDictionaryRef v107 = 0;
    CFStringRef v128 = 0;
    CFTypeRef v103 = 0;
    CFTypeRef v105 = 0;
    uint64_t v98 = v146;
    goto LABEL_243;
  }
  CFIndex capacity = v14;
  CFTypeRef v148 = v9;
  CFDictionaryRef theDict = v19;
  CFIndex v20 = 0;
  v149 = 0;
  uint64_t v127 = 0;
  CFStringRef FullKey = 0;
  CFArrayRef v22 = 0;
  CFTypeRef v23 = 0;
  CFDataRef v132 = 0;
  CFStringRef v133 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v24 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef v147 = Mutable;
  CFTypeRef v26 = 0;
  uint64_t v142 = a8;
  CFArrayRef v143 = v11;
  do
  {
    CFStringRef v128 = v22;
    CFTypeRef v129 = v24;
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v116, v20);
    CFDictionaryRef v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(a6, v20);
    CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(v11, v20);
    CFTypeRef v30 = CFArrayGetValueAtIndex(a3, v20);
    CFDictionaryRef v31 = a7;
    if (a7) {
      CFDictionaryRef v31 = (const __CFDictionary *)CFArrayGetValueAtIndex(a7, v20);
    }
    char v151 = 0;
    CFTypeRef v126 = v26;
    if (!ValueAtIndex)
    {
      AMFDRErrorPushInternal(v142, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"inputData %ld is NULL", v20);
LABEL_207:
      CFTypeRef v99 = cf;
      CFTypeRef v100 = v133;
      CFTypeRef v24 = v129;
      goto LABEL_230;
    }
    if (!v28)
    {
      AMFDRErrorPushInternal(v142, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"patchDict %ld is NULL", v20);
      goto LABEL_207;
    }
    if (!v29)
    {
      AMFDRErrorPushInternal(v142, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"dataClassStr %ld is NULL", v20);
      goto LABEL_207;
    }
    if (!v30)
    {
      AMFDRErrorPushInternal(v142, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"dataInstanceStr %ld is NULL", v20);
      goto LABEL_207;
    }
    CFDictionaryRef v134 = v31;
    if (v23) {
      CFRelease(v23);
    }
    if (cf) {
      CFRelease(cf);
    }
    CFDataRef v140 = ValueAtIndex;
    CFDictionaryRef v32 = v25;
    if (v153)
    {
      CFRelease(v153);
      unsigned int v153 = 0;
    }
    CFAllocatorRef v33 = CFGetAllocator(v148);
    CFTypeRef v23 = _AMFDRDataCreateUnsignedValueNoCopy(v33, v140, &v151, v142);
    if (!v23)
    {
      AMFDRErrorPushInternal(v142, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"failed to strip data for %@-%@", (char)v29);
      goto LABEL_210;
    }
    CFAllocatorRef v34 = CFGetAllocator(v148);
    uint64_t v35 = AMFDRSysconfigCreateFromData(v34, (CFDataRef)v23, v142);
    if (!v35)
    {
      AMFDRErrorPushInternal(v142, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"failed to decode as internal Sysconfig format", v114);
LABEL_210:
      CFTypeRef v99 = 0;
      CFTypeRef v100 = v133;
      CFTypeRef v24 = v129;
LABEL_230:
      uint64_t v98 = v146;
      CFArrayRef Mutable = v147;
      goto LABEL_231;
    }
    CFArrayRef Mutable = v147;
    CFTypeRef cf = (CFTypeRef)v35;
    if (v151)
    {
      CFStringRef v36 = FullKey;
      uint64_t v37 = v35;
      if (CFArrayGetCount(*(CFArrayRef *)(v35 + 32)) || CFArrayGetCount(*(CFArrayRef *)(v37 + 40)))
      {
        int v123 = 0;
      }
      else
      {
        AMSupportLogInternal();
        int v123 = 1;
      }
      CFStringRef FullKey = v36;
    }
    else
    {
      int v123 = 0;
    }
    if (a4) {
      CFDataRef v38 = (const __CFData *)v23;
    }
    else {
      CFDataRef v38 = 0;
    }
    if (FullKey) {
      CFRelease(FullKey);
    }
    CFDataRef v136 = v38;
    if (v133) {
      CFRelease(v133);
    }
    if (v132) {
      CFRelease(v132);
    }
    if (v32) {
      CFRelease(v32);
    }
    if (v129) {
      CFRelease(v129);
    }
    CFStringRef v39 = (CFTypeRef *)v142;
    if (v126) {
      CFRelease(v126);
    }
    if (v128) {
      CFRelease(v128);
    }
    if (v149) {
      CFRelease(v149);
    }
    if (v127) {
      free(v127);
    }
    CFAllocatorRef v40 = CFGetAllocator(v148);
    CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v40, (uint64_t)v29, (uint64_t)v30);
    if (!FullKey)
    {
      CFStringRef v102 = @"currDataInstance is NULL";
LABEL_213:
      AMFDRErrorPushInternal(v142, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", v102, v114);
      CFTypeRef v126 = 0;
      uint64_t v127 = 0;
      CFTypeRef v25 = 0;
      CFTypeRef v24 = 0;
      CFTypeRef v100 = 0;
      CFDataRef v132 = 0;
      CFStringRef v128 = 0;
      v149 = 0;
      CFTypeRef v99 = cf;
      goto LABEL_226;
    }
    CFGetAllocator(v148);
    AMFDRSysconfigCreate();
    if (!v41)
    {
      CFStringRef v102 = @"sysconfig is NULL";
      goto LABEL_213;
    }
    CFStringRef v133 = (void *)v41;
    AMFDRSysconfigSetDataClass(v41, v29);
    CFIndex v42 = CFDictionaryGetCount(v28);
    CFTypeRef v131 = v23;
    if (v42 >= 1)
    {
      CFIndex v43 = v42;
      CFAllocatorRef v44 = (const void **)malloc_type_calloc(1uLL, 8 * v42, 0x6004044C4A2DFuLL);
      if (v44)
      {
        CFTypeRef v45 = v44;
        CFDictionaryGetKeysAndValues(v28, v44, 0);
        CFAllocatorRef v46 = CFGetAllocator(v148);
        CFDictionaryRef MutableCopy = CFStringCreateMutableCopy(v46, 0, v29);
        uint64_t v127 = v45;
        if (MutableCopy)
        {
          CFStringRef v48 = FullKey;
          v149 = MutableCopy;
          CFStringAppend(MutableCopy, @":");
          uint64_t v49 = 0;
          while (1)
          {
            CFStringRef v50 = (const __CFString *)v45[v49];
            if (!v50) {
              break;
            }
            CFTypeID v51 = CFGetTypeID(v45[v49]);
            if (v51 != CFStringGetTypeID()) {
              break;
            }
            CFStringAppend(v149, @"/");
            CFStringAppend(v149, v50);
            if (v43 == ++v49)
            {
              AMSupportLogInternal();
              CFArrayRef Mutable = v147;
              CFTypeRef v23 = v131;
              CFStringRef v39 = (CFTypeRef *)v142;
              goto LABEL_70;
            }
          }
          AMFDRErrorPushInternal(v142, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"patchDict key is not a string", v114);
          CFTypeRef v126 = 0;
          CFTypeRef v24 = 0;
          CFDataRef v132 = 0;
          CFStringRef v128 = 0;
          CFArrayRef Mutable = v147;
          uint64_t v98 = v146;
          CFTypeRef v23 = v131;
          CFTypeRef v99 = cf;
          CFTypeRef v100 = v133;
          CFTypeRef v25 = 0;
          goto LABEL_231;
        }
        AMFDRErrorPushInternal(v142, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"Could not create patchItemKeysString", v114);
        CFTypeRef v126 = 0;
      }
      else
      {
        AMFDRErrorPushInternal(v142, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"keysInPatchDict is NULL", v114);
        CFTypeRef v126 = 0;
        uint64_t v127 = 0;
      }
      CFTypeRef v25 = 0;
      CFTypeRef v24 = 0;
      CFDataRef v132 = 0;
      CFStringRef v128 = 0;
      v149 = 0;
      goto LABEL_225;
    }
    CFStringRef v48 = FullKey;
    uint64_t v127 = 0;
    v149 = 0;
LABEL_70:
    if (!AMFDRSysconfigSetValues((CFArrayRef *)v133, v28, (uint64_t)v39))
    {
      AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"failed to set patch data %@", (char)v48);
      CFTypeRef v126 = 0;
      CFTypeRef v24 = 0;
      CFDataRef v132 = 0;
      CFStringRef v128 = 0;
      CFTypeRef v99 = cf;
      CFTypeRef v100 = v133;
      CFStringRef FullKey = v48;
      CFTypeRef v25 = 0;
      goto LABEL_226;
    }
    CFDataRef EncodedData = AMFDRSysconfigCreateEncodedData(v133, (uint64_t)v39);
    if (!EncodedData)
    {
      CFStringRef FullKey = v48;
      AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"failed to encode patch data %@", (char)v48);
      CFTypeRef v126 = 0;
      CFTypeRef v25 = 0;
      CFTypeRef v24 = 0;
      CFDataRef v132 = 0;
      CFStringRef v128 = 0;
LABEL_225:
      CFTypeRef v99 = cf;
      CFTypeRef v100 = v133;
LABEL_226:
      uint64_t v98 = v146;
LABEL_231:
      CFDictionaryRef v122 = 0;
      CFMutableDictionaryRef value = 0;
      CFArrayRef v117 = 0;
      CFURLRef v119 = 0;
      CFArrayRef v11 = 0;
      CFArrayRef v72 = 0;
      char v135 = 0;
      CFMutableArrayRef v137 = 0;
      CFMutableArrayRef v139 = 0;
      CFMutableArrayRef v141 = 0;
      CFUUIDRef v9 = 0;
      goto LABEL_232;
    }
    result.CFIndex location = 0;
    CFTypeRef v156 = 0;
    CFTypeRef v157 = 0;
    CFStringRef FullKey = v48;
    CFDataRef v132 = EncodedData;
    if (!v136)
    {
      if (!a4)
      {
        CFDataRef v56 = (const __CFData *)CFRetain(v23);
        CFTypeRef v25 = 0;
        CFTypeRef v55 = 0;
LABEL_81:
        unsigned int v57 = AMFDRDataLocalPatchCreatePayloadAndDigest(v148, v29, v56, (CFTypeRef *)&result, &v156, (uint64_t)v39) ^ 1;
        if (!result.location) {
          unsigned int v57 = 1;
        }
        if (v156) {
          int v58 = v57;
        }
        else {
          int v58 = 1;
        }
        if (v58 == 1)
        {
          AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPatchCopyDigestAndPayload", @"failed to copy patched digest and payload", v114);
          CFTypeRef v26 = 0;
          CFTypeRef v24 = 0;
        }
        else
        {
          CFTypeRef v24 = CFRetain(v156);
          CFTypeRef v26 = CFRetain((CFTypeRef)result.location);
        }
        char v59 = v58 ^ 1;
        if (!v55) {
          goto LABEL_90;
        }
        goto LABEL_89;
      }
      AMFDRErrorPushInternal((uint64_t)v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPatchCopyDigestAndPayload", @"expectedData is NULL", v114);
LABEL_124:
      CFTypeRef v26 = 0;
      CFTypeRef v25 = 0;
      CFTypeRef v24 = 0;
      char v59 = 0;
      goto LABEL_92;
    }
    CFAllocatorRef v53 = CFGetAllocator(v148);
    CFStringRef v54 = (CFArrayRef *)AMFDRSysconfigCreateFromData(v53, v136, (uint64_t)v39);
    if (!v54)
    {
      AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPatchCopyDigestAndPayload", @"failed to decode original data", v114);
      goto LABEL_124;
    }
    CFTypeRef v55 = v54;
    if (AMFDRSysconfigSetValues(v54, v28, (uint64_t)v39))
    {
      CFDataRef v56 = AMFDRSysconfigCreateEncodedData(v55, (uint64_t)v39);
      if (v56)
      {
        if (AMFDRDataLocalPatchCreatePayloadAndDigest(v148, v29, v136, 0, &v157, (uint64_t)v39) && v157)
        {
          CFTypeRef v25 = CFRetain(v157);
          goto LABEL_81;
        }
        CFStringRef format = @"failed to copy original digest";
      }
      else
      {
        CFStringRef format = @"failed to encode patched data";
      }
    }
    else
    {
      CFDataRef v56 = 0;
      CFStringRef format = @"failed to patch data";
    }
    AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataHTTPPatchCopyDigestAndPayload", format, v114);
    CFTypeRef v26 = 0;
    CFTypeRef v25 = 0;
    CFTypeRef v24 = 0;
    char v59 = 0;
LABEL_89:
    CFRelease(v55);
LABEL_90:
    if (v56) {
      CFRelease(v56);
    }
LABEL_92:
    CFArrayRef v11 = v143;
    if (result.location)
    {
      CFRelease((CFTypeRef)result.location);
      result.CFIndex location = 0;
    }
    if (v157)
    {
      CFRelease(v157);
      CFTypeRef v157 = 0;
    }
    if (v156) {
      CFRelease(v156);
    }
    if ((v59 & 1) == 0)
    {
      CFTypeRef v126 = v26;
      AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"failed to obtain digests for patched data %@", (char)FullKey);
      goto LABEL_218;
    }
    if (a4 && !v25)
    {
      CFTypeRef v126 = v26;
      AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"failed to obtain original digest", v114);
LABEL_218:
      CFStringRef v128 = 0;
      CFTypeRef v23 = v131;
LABEL_229:
      CFTypeRef v99 = cf;
      CFTypeRef v100 = v133;
      goto LABEL_230;
    }
    CFTypeRef v23 = v131;
    if (!v24 || !v26)
    {
      CFTypeRef v126 = v26;
      AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"failed to obtain valid patched digest and data", v114);
LABEL_221:
      CFStringRef v128 = 0;
      goto LABEL_229;
    }
    CFDictionarySetValue(theDict, FullKey, v26);
    CFAllocatorRef v60 = CFGetAllocator(v148);
    if (v134) {
      long long v61 = CFDictionaryCreateMutableCopy(v60, 0, v134);
    }
    else {
      long long v61 = CFDictionaryCreateMutable(v60, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    }
    CFArrayRef v22 = v61;
    if (!v61)
    {
      CFTypeRef v126 = v26;
      AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"metadataDict is NULL", v114);
      goto LABEL_221;
    }
    if ((*(unsigned char *)(v148[4].info + 8) & 0x40) == 0 && v25) {
      CFDictionarySetValue(v61, @"x-fdr-jmet-payload-dgst", v25);
    }
    CFDictionarySetValue(v22, @"x-fdr-jmet-payload-dgst-expected", v24);
    if (v123)
    {
      CFAllocatorRef v62 = CFGetAllocator(v148);
      if ((_AMFDRSupportBase64Encode((uint64_t)v62, (uint64_t)v140, (uint64_t)&v153) & 1) == 0)
      {
        CFStringRef v128 = v22;
        CFTypeRef v126 = v26;
        AMFDRErrorPushInternal((uint64_t)v39, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"_AMFDRSupportBase64Encode failed", v114);
        goto LABEL_229;
      }
      if (!v153)
      {
        CFStringRef v128 = v22;
        CFTypeRef v126 = v26;
        AMFDRErrorPushInternal((uint64_t)v39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"basePayload is NULL", v114);
        goto LABEL_229;
      }
      CFDictionarySetValue(v22, @"x-fdr-patch-base-payload", v153);
    }
    CFArrayAppendValue(v147, v132);
    CFArrayAppendValue(v146, v22);
    ++v20;
  }
  while (v20 != capacity);
  CFAllocatorRef v64 = CFGetAllocator(v148);
  CFMutableDictionaryRef v65 = CFDictionaryCreateMutable(v64, capacity, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef v126 = v26;
  CFStringRef v128 = v22;
  if (!v65)
  {
    AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"valueDataDict is NULL", v114);
    CFMutableDictionaryRef value = 0;
    CFArrayRef v117 = 0;
    CFURLRef v119 = 0;
LABEL_320:
    CFArrayRef v11 = 0;
    CFArrayRef v72 = 0;
    char v135 = 0;
    CFMutableArrayRef v137 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    CFDictionaryRef v122 = 0;
LABEL_322:
    CFUUIDRef v9 = 0;
    CFTypeRef v99 = cf;
    CFTypeRef v100 = v133;
    uint64_t v98 = v146;
    CFArrayRef Mutable = v147;
    goto LABEL_232;
  }
  CFArrayRef v117 = v65;
  CFAllocatorRef v66 = CFGetAllocator(v148);
  CFMutableDictionaryRef v67 = CFDictionaryCreateMutable(v66, capacity, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v67)
  {
    AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"manifestDataDict is NULL", v114);
    CFMutableDictionaryRef value = 0;
    CFURLRef v119 = 0;
    goto LABEL_320;
  }
  CFDictionaryRef v122 = v67;
  CFAllocatorRef v68 = CFGetAllocator(v148);
  CFMutableDictionaryRef value = CFDictionaryCreateMutable(v68, capacity, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!value)
  {
    AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"multiRequestErrors is NULL", v114);
    CFMutableDictionaryRef value = 0;
    CFURLRef v119 = 0;
    CFArrayRef v11 = 0;
    CFArrayRef v72 = 0;
    char v135 = 0;
    CFMutableArrayRef v137 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    goto LABEL_322;
  }
  CFArrayRef Mutable = v147;
  if ((AMFDRDataHTTPLoadPersistent((CFDataRef *)v148, v39) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v39, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"AMFDRDataHTTPLoadPersistent failed", v114);
LABEL_325:
    CFURLRef v119 = 0;
    CFArrayRef v11 = 0;
    CFArrayRef v72 = 0;
    char v135 = 0;
    CFMutableArrayRef v137 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    CFUUIDRef v9 = 0;
    CFTypeRef v99 = cf;
    CFTypeRef v100 = v133;
    uint64_t v98 = v146;
    goto LABEL_232;
  }
  long long v69 = _AMFDRCreateUrlWithKey((uint64_t)v148, @"DSURL", @"dm/bulk/data", 0, 0);
  if (!v69)
  {
    AMFDRErrorPushInternal((uint64_t)v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"serverURL is NULL", v114);
    goto LABEL_325;
  }
  CFURLRef v119 = (const __CFURL *)v69;
  if (!_AMFDRGetMultiRequestMaxAttempts((uint64_t)v148))
  {
    CFDataRef v73 = 0;
    CFArrayRef v72 = 0;
    long long v71 = 0;
    CFMutableArrayRef v139 = 0;
    CFMutableArrayRef v141 = 0;
    CFMutableArrayRef v137 = 0;
LABEL_185:
    char v135 = v71;
    *(void *)&long long context = v148;
    *((void *)&context + 1) = v117;
    *(void *)&long long v159 = value;
    *((void *)&v159 + 1) = theDict;
    CFDictionaryApplyFunction(v122, (CFDictionaryApplierFunction)_AMFDRDataHTTPPatchCreateImg4Callback, &context);
    if (CFDictionaryGetCount(value) >= 1) {
      AMFDRErrorPushInternal((uint64_t)v39, 21, 0, 0, 0, 0, 0, 0, value, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"got multiRequestErrors", v114);
    }
    CFArrayRef v11 = v73;
    CFUUIDRef v9 = (__CFString *)CFRetain(v117);
    goto LABEL_188;
  }
  int v70 = 0;
  CFMutableArrayRef v137 = 0;
  CFMutableArrayRef v139 = 0;
  CFMutableArrayRef v141 = 0;
  long long v71 = 0;
  CFArrayRef v72 = 0;
  CFDataRef v73 = 0;
  CFTypeRef v130 = v24;
  CFTypeRef v115 = v25;
  while (2)
  {
    if (v71) {
      CFRelease(v71);
    }
    if (v141) {
      CFRelease(v141);
    }
    if (v139) {
      CFRelease(v139);
    }
    if (v137) {
      CFRelease(v137);
    }
    if (v73) {
      CFRelease(v73);
    }
    if (v152)
    {
      CFRelease(v152);
      CFTypeRef v152 = 0;
    }
    CFAllocatorRef v74 = CFGetAllocator(v148);
    long long v75 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    CFMutableArrayRef v76 = CFArrayCreateMutable(v74, 0, MEMORY[0x263EFFF70]);
    if (!v76)
    {
      AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"dataClassToRequest is NULL", v114);
      CFArrayRef v11 = 0;
      char v135 = 0;
LABEL_288:
      CFMutableArrayRef v141 = 0;
LABEL_290:
      CFMutableArrayRef v139 = 0;
LABEL_292:
      CFMutableArrayRef v137 = 0;
      CFUUIDRef v9 = 0;
      uint64_t v98 = v146;
      CFTypeRef v23 = v131;
      CFTypeRef v99 = cf;
      CFTypeRef v100 = v133;
      CFTypeRef v25 = v115;
      goto LABEL_232;
    }
    char v135 = v76;
    CFAllocatorRef v77 = CFGetAllocator(v148);
    CFMutableArrayRef v78 = CFArrayCreateMutable(v77, 0, v75);
    if (!v78)
    {
      AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"dataInstanceToRequest is NULL", v114);
      CFArrayRef v11 = 0;
      goto LABEL_288;
    }
    CFMutableArrayRef v141 = v78;
    CFAllocatorRef v79 = CFGetAllocator(v148);
    CFMutableArrayRef v80 = CFArrayCreateMutable(v79, 0, v75);
    if (!v80)
    {
      AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"valueToRequest is NULL", v114);
      CFArrayRef v11 = 0;
      goto LABEL_290;
    }
    CFMutableArrayRef v139 = v80;
    CFAllocatorRef v81 = CFGetAllocator(v148);
    CFMutableArrayRef v82 = CFArrayCreateMutable(v81, 0, v75);
    if (!v82)
    {
      AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"metadataToRequest is NULL", v114);
      CFArrayRef v11 = 0;
      goto LABEL_292;
    }
    CFMutableArrayRef v137 = v82;
    CFTypeRef v25 = v115;
    if (v70)
    {
      unsigned int v83 = _AMFDRGetMultiRequestBackoff((uint64_t)v148) * v70;
      AMSupportLogInternal();
      sleep(v83);
    }
    CFIndex v84 = 0;
    while (2)
    {
      CFRelease(FullKey);
      CFStringRef v85 = (const __CFString *)CFArrayGetValueAtIndex(v11, v84);
      if (!v85)
      {
        CFStringRef v101 = @"dataClassStr is NULL";
LABEL_192:
        AMFDRErrorPushInternal((uint64_t)v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", v101, v114);
        goto LABEL_193;
      }
      CFStringRef v86 = v85;
      if (!CFStringGetLength(v85))
      {
        CFStringRef v101 = @"dataClassStr length is 0";
        goto LABEL_192;
      }
      CFStringRef v87 = (const __CFString *)CFArrayGetValueAtIndex(a3, v84);
      if (!v87)
      {
        CFStringRef v101 = @"dataInstanceStr is NULL";
        goto LABEL_192;
      }
      CFStringRef v88 = v87;
      if ((*(unsigned char *)(v148[4].info + 8) & 2) != 0)
      {
        result.CFIndex location = 0xAAAAAAAAAAAAAAAALL;
        result.CFIndex length = 0xAAAAAAAAAAAAAAAALL;
        v163.CFIndex location = 0;
        v163.CFIndex length = 4;
        if (CFStringFindWithOptions(v87, @"sik-", v163, 8uLL, &result))
        {
          AMFDRErrorPushInternal((uint64_t)v39, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"Station AMFDRDataHTTPMultiPatch with sik format is forbidden. %@-%@", (char)v86);
LABEL_193:
          CFStringRef FullKey = 0;
LABEL_194:
          CFArrayRef v11 = 0;
LABEL_196:
          CFUUIDRef v9 = 0;
          goto LABEL_200;
        }
      }
      CFArrayRef v11 = (const __CFArray *)CFArrayGetValueAtIndex(Mutable, v84);
      if (!v11)
      {
        AMFDRErrorPushInternal((uint64_t)v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"valueData is NULL", v114);
        CFStringRef FullKey = 0;
        goto LABEL_196;
      }
      uint64_t v89 = CFArrayGetValueAtIndex(v146, v84);
      if (!v89)
      {
        AMFDRErrorPushInternal((uint64_t)v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"currMetadata is NULL", v114);
        CFStringRef FullKey = 0;
        goto LABEL_199;
      }
      CFURLRef v90 = v89;
      CFAllocatorRef v91 = CFGetAllocator(v148);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v91, (uint64_t)v86, (uint64_t)v88);
      if (!FullKey)
      {
        AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"currDataInstance is NULL", v114);
LABEL_199:
        CFArrayRef v11 = 0;
        CFUUIDRef v9 = 0;
        CFArrayRef Mutable = v147;
LABEL_200:
        uint64_t v98 = v146;
        CFTypeRef v24 = v130;
        CFTypeRef v23 = v131;
        goto LABEL_201;
      }
      if (v72)
      {
        v162.CFIndex length = CFArrayGetCount(v72);
        v162.CFIndex location = 0;
        if (CFArrayContainsValue(v72, v162, FullKey))
        {
          CFDictionaryRemoveValue(value, FullKey);
          CFStringRef v39 = (CFTypeRef *)v142;
          AMSupportLogInternal();
          goto LABEL_162;
        }
      }
      else
      {
LABEL_162:
        CFArrayAppendValue(v135, v86);
        CFArrayAppendValue(v141, v88);
        CFArrayAppendValue(v139, v11);
        CFArrayAppendValue(v137, v90);
      }
      ++v84;
      CFArrayRef v11 = v143;
      CFArrayRef Mutable = v147;
      if (capacity != v84) {
        continue;
      }
      break;
    }
    CFDataRef v92 = AMFDRDataHTTPCreateMultiRequest(v148, 0x10u, v135, v141, v139, 0, v137, 1, (uint64_t)v39);
    if (!v92)
    {
      AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"httpRequestData is NULL", v114);
      goto LABEL_194;
    }
    CFDataRef v73 = v92;
    CFTypeRef v24 = v130;
    if (v39 && *v39)
    {
      CFRelease(*v39);
      *CFStringRef v39 = 0;
    }
    *(void *)&long long context = v135;
    *((void *)&context + 1) = v141;
    *(void *)&long long v159 = v139;
    *((void *)&v159 + 1) = v137;
    if ((_AMFDRHttpRequestSendSync((CFDictionaryRef *)v148, v119, @"MultiPatch", @"POST", 0, v73, &v152, 0, 0, 0, (uint64_t (*)(CFDictionaryRef *, uint64_t, CFTypeRef *))AMFDRDataHTTPMultiCopyForPatch, (uint64_t)&context, v39) & 1) == 0)
    {
      CFArrayRef v11 = v73;
      goto LABEL_303;
    }
    if (v39 && *v39)
    {
      CFArrayRef v11 = v73;
LABEL_303:
      AMSupportLogInternal();
      goto LABEL_304;
    }
    if (!v152)
    {
      CFArrayRef v11 = v73;
      CFStringRef v110 = @"_AMFDRHttpRequestSendSync failed: httpReturnData is NULL";
LABEL_301:
      AMFDRErrorPushInternal((uint64_t)v39, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", v110, v114);
      goto LABEL_304;
    }
    if (v72) {
      CFRelease(v72);
    }
    CFAllocatorRef v93 = CFGetAllocator(v148);
    CFMutableArrayRef v94 = CFArrayCreateMutable(v93, 0, MEMORY[0x263EFFF70]);
    CFArrayRef v72 = v94;
    if (!v94)
    {
      CFArrayRef v11 = v73;
      AMFDRErrorPushInternal((uint64_t)v39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", @"dataClassInstanceToRetry is NULL", v114);
      goto LABEL_304;
    }
    *(void *)&long long context = v148;
    *((void *)&context + 1) = v122;
    *(void *)&long long v159 = value;
    *((void *)&v159 + 1) = v94;
    CFTypeRef v160 = &v154;
    uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)v152);
    unsigned int Length = CFDataGetLength((CFDataRef)v152);
    if (AMFDRDecodeMultiResponse((uint64_t)BytePtr, Length, &v155, (uint64_t (*)(void, void, uint64_t, uint64_t, void, void, uint64_t, void, _DWORD, void, _DWORD, uint64_t))_AMFDRHttpMultiResponseCallback, (uint64_t)&context))
    {
      CFArrayRef v11 = v73;
      CFStringRef v111 = @"AMFDRDecodeMultiResponse failed";
      goto LABEL_299;
    }
    if (v155 == 16)
    {
      if ((_AMFDRSavePersistentCookie((uint64_t)v148, (uint64_t)v39) & 1) == 0)
      {
        CFArrayRef v11 = v73;
        CFStringRef v110 = @"_AMFDRSavePersistentCookie failed";
        goto LABEL_301;
      }
      if (!CFArrayGetCount(v72))
      {
        long long v71 = v135;
        goto LABEL_185;
      }
      BOOL v97 = ++v70 >= _AMFDRGetMultiRequestMaxAttempts((uint64_t)v148);
      long long v71 = v135;
      if (v97) {
        goto LABEL_185;
      }
      continue;
    }
    break;
  }
  CFArrayRef v11 = v73;
  char v114 = v155;
  CFStringRef v111 = @"actionCode returned is %d";
LABEL_299:
  AMFDRErrorPushInternal((uint64_t)v39, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPMultiPatchInternal", v111, v114);
LABEL_304:
  CFUUIDRef v9 = 0;
LABEL_188:
  uint64_t v98 = v146;
  CFTypeRef v23 = v131;
LABEL_201:
  CFTypeRef v99 = cf;
  CFTypeRef v100 = v133;
LABEL_232:
  CFTypeRef v103 = v24;
  if (v100)
  {
    CFTypeRef v104 = v99;
    CFRelease(v100);
    CFTypeRef v99 = v104;
  }
  if (v99) {
    CFRelease(v99);
  }
  if (v132) {
    CFRelease(v132);
  }
  if (v126) {
    CFRelease(v126);
  }
  CFTypeRef v105 = v25;
  if (v23) {
    CFRelease(v23);
  }
  CFDataRef v106 = v127;
  CFMutableDictionaryRef v107 = value;
LABEL_243:
  int v108 = v106;
  if (v153)
  {
    CFRelease(v153);
    CFDataRef v106 = v108;
    unsigned int v153 = 0;
  }
  if (v105)
  {
    CFRelease(v105);
    CFDataRef v106 = v108;
  }
  if (v103)
  {
    CFRelease(v103);
    CFDataRef v106 = v108;
  }
  if (theDict)
  {
    CFRelease(theDict);
    CFDataRef v106 = v108;
  }
  if (v128)
  {
    CFRelease(v128);
    CFDataRef v106 = v108;
  }
  if (FullKey)
  {
    CFRelease(FullKey);
    CFDataRef v106 = v108;
  }
  if (v107)
  {
    CFRelease(v107);
    CFDataRef v106 = v108;
  }
  if (v119)
  {
    CFRelease(v119);
    CFDataRef v106 = v108;
  }
  if (v11)
  {
    CFRelease(v11);
    CFDataRef v106 = v108;
  }
  if (v152)
  {
    CFRelease(v152);
    CFDataRef v106 = v108;
    CFTypeRef v152 = 0;
  }
  if (Mutable)
  {
    CFRelease(Mutable);
    CFDataRef v106 = v108;
  }
  if (v98)
  {
    CFRelease(v98);
    CFDataRef v106 = v108;
  }
  if (v72)
  {
    CFRelease(v72);
    CFDataRef v106 = v108;
  }
  if (v135)
  {
    CFRelease(v135);
    CFDataRef v106 = v108;
  }
  if (v141)
  {
    CFRelease(v141);
    CFDataRef v106 = v108;
  }
  if (v139)
  {
    CFRelease(v139);
    CFDataRef v106 = v108;
  }
  if (v137)
  {
    CFRelease(v137);
    CFDataRef v106 = v108;
  }
  if (v117)
  {
    CFRelease(v117);
    CFDataRef v106 = v108;
  }
  if (v122)
  {
    CFRelease(v122);
    CFDataRef v106 = v108;
  }
  if (v149)
  {
    CFRelease(v149);
    CFDataRef v106 = v108;
  }
  if (v106) {
    free(v106);
  }
  return v9;
}

CFDataRef AMFDRDataHTTPMultiCopyForPatch(__CFString *a1, CFArrayRef *a2, uint64_t a3)
{
  return AMFDRDataHTTPCreateMultiRequest(a1, 0x10u, *a2, a2[1], a2[2], 0, a2[3], 1, a3);
}

void _AMFDRDataHTTPPatchCreateImg4Callback(const void *a1, const __CFData *a2, uint64_t a3)
{
  CFNumberRef v4 = *(const void **)a3;
  CFNumberRef v5 = *(__CFDictionary **)(a3 + 8);
  CFTypeID v6 = *(__CFDictionary **)(a3 + 16);
  CFDictionaryRef v7 = *(const __CFDictionary **)(a3 + 24);
  CFArrayRef v13 = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)&v13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchCreateImg4Callback", @"dataClassInstance is NULL", v12);
    goto LABEL_13;
  }
  SignedCFDataRef Data = a2;
  if (a2)
  {
    if (v4)
    {
      if (v5)
      {
        if (v7)
        {
          int v9 = CFGetAllocator(v4);
          CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v7, a1);
          SignedCFDataRef Data = (const __CFData *)AMFDRDataLocalPatchCreateSignedData(v9, Value, SignedData, (uint64_t)&v13);
          if (SignedData) {
            CFDictionarySetValue(v5, a1, SignedData);
          }
          else {
            AMFDRErrorPushInternal((uint64_t)&v13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchCreateImg4Callback", @"failed to created img4 for %@", (char)a1);
          }
          goto LABEL_8;
        }
        CFStringRef format = @"payloadDict is NULL";
      }
      else
      {
        CFStringRef format = @"outDict is NULL";
      }
    }
    else
    {
      CFStringRef format = @"amfdr is NULL";
    }
    AMFDRErrorPushInternal((uint64_t)&v13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchCreateImg4Callback", format, v12);
    SignedCFDataRef Data = 0;
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)&v13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataHTTPPatchCreateImg4Callback", @"manifestData is NULL", v12);
  }
LABEL_8:
  if (v13 && v6) {
    CFDictionarySetValue(v6, a1, v13);
  }
  if (SignedData) {
    CFRelease(SignedData);
  }
LABEL_13:
  if (v13) {
    CFRelease(v13);
  }
}

CFDictionaryRef AMFDRCreateLocalPending(const __CFAllocator *a1)
{
  return CFDictionaryCreate(a1, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
}

uint64_t AMFDRDataPutForSysCfgKey()
{
  return 1;
}

uint64_t AMFDRCryptoGetPrivateKey(uint64_t a1)
{
  if (a1
    && (CFAllocatorRef v1 = *(void **)(a1 + 136), *v1 >= 0x61uLL)
    && (CFDictionaryRef v2 = (uint64_t (*)(uint64_t, void))v1[12]) != 0)
  {
    return v2(a1, *(void *)(a1 + 144));
  }
  else
  {
    return 0;
  }
}

CFTypeRef AMFDRCryptoGetCert(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(a1 + 32);
  if (!result)
  {
    CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"Certificate");
    if (Value)
    {
      CFTypeRef result = CFRetain(Value);
      *(void *)(a1 + 32) = result;
    }
    else
    {
      return *(CFTypeRef *)(a1 + 32);
    }
  }
  return result;
}

uint64_t AMFDRCryptoGetCryptoVersion(uint64_t a1, unsigned int a2, int *a3)
{
  int v9 = 0;
  if (!a1 || !a3 || (AMFDRDataGetSigningVersion(a1, &v9) & 1) == 0)
  {
    AMSupportLogInternal();
    return 199;
  }
  if (!a2)
  {
    if (v9 != 2)
    {
      if (v9 == 1)
      {
        uint64_t result = 0;
        int v7 = 257;
        goto LABEL_18;
      }
      return 9;
    }
    uint64_t result = 0;
    BOOL v8 = (*(void *)(*(void *)(a1 + 136) + 8) & 2) == 0;
    int v7 = 1025;
LABEL_16:
    if (v8) {
      int v7 = 66050;
    }
    goto LABEL_18;
  }
  if (a2 > 2) {
    return 0;
  }
  if (v9 == 2)
  {
    uint64_t result = 0;
    BOOL v8 = (*(void *)(*(void *)(a1 + 136) + 8) & 2) == 0;
    int v7 = 513;
    goto LABEL_16;
  }
  if (v9 != 1) {
    return 9;
  }
  uint64_t result = 0;
  int v7 = 513;
LABEL_18:
  *a3 = v7;
  return result;
}

uint64_t AMFDRCryptoCreateFDRSignature(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  return AMFDRCryptoCreateFDRSignatureInternal(a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef))AMFDRCryptoCreateDataSignature, a6);
}

uint64_t AMFDRCryptoCreateFDRSignatureInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef), CFTypeRef cf)
{
  unsigned int v16 = 0;
  if (cf && (CFTypeID v12 = CFGetTypeID(cf), v12 == AMFDRGetTypeID()) && a5)
  {
    uint64_t CryptoVersion = AMFDRCryptoGetCryptoVersion((uint64_t)cf, 0, (int *)&v16);
    if (CryptoVersion)
    {
      uint64_t v14 = CryptoVersion;
      AMSupportLogInternal();
    }
    else
    {
      return a5(v16, a1, a2, a3, a4, cf);
    }
  }
  else
  {
    AMSupportLogInternal();
    return 103;
  }
  return v14;
}

uint64_t AMFDRCryptoCreateLocalSignedFDRSignature(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  return AMFDRCryptoCreateFDRSignatureInternal(a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef))AMFDRCryptoCreateLocalSignedDataSignature, a6);
}

uint64_t AMFDRCryptoCreateFDRCertificateData(void *a1, _DWORD *a2, CFDataRef *cf)
{
  CFTypeRef v14 = 0;
  if (cf
    && (CFTypeID v6 = CFGetTypeID(cf), v6 == AMFDRGetTypeID())
    && a1
    && a2
    && (AMFDRDataHTTPLoadPersistent(cf, &v14) & 1) != 0
    && (CFDataRef v7 = cf[4]) != 0
    && (Length = CFDataGetLength(v7), int v9 = malloc_type_calloc(1uLL, Length, 0x73A55033uLL), (*a1 = v9) != 0))
  {
    long long v10 = v9;
    uint64_t BytePtr = CFDataGetBytePtr(cf[4]);
    memcpy(v10, BytePtr, Length);
    uint64_t v12 = 0;
    *a2 = Length;
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v12 = 199;
  }
  AMSupportSafeRelease();
  return v12;
}

uint64_t AMFDRCryptoCreateLocalSignedFDRCertificateData(void *a1, _DWORD *a2, CFTypeRef cf)
{
  int v10 = 0;
  if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == AMFDRGetTypeID()))
  {
    uint64_t CryptoVersion = AMFDRCryptoGetCryptoVersion((uint64_t)cf, 0, &v10);
    if (CryptoVersion)
    {
      uint64_t v8 = CryptoVersion;
      AMSupportLogInternal();
    }
    else
    {
      return AMFDRCryptoCreateLocalSignedCertificateData(v10, a1, a2);
    }
  }
  else
  {
    AMSupportLogInternal();
    return 199;
  }
  return v8;
}

CFDataRef AMFDRCryptoCreatePemFromData(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (AMSupportBase64Encode())
  {
    CFNumberRef v5 = 0;
    goto LABEL_20;
  }
  CFArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFNumberRef v5 = Mutable;
  if (!Mutable)
  {
LABEL_20:
    CFDataRef ExternalRepresentation = 0;
    goto LABEL_16;
  }
  if (a2) {
    CFStringAppend(Mutable, @"-----BEGIN CERTIFICATE REQUEST-----\n");
  }
  if (CFStringGetLength(0) >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v18 = v7;
      long long v19 = v7;
      long long v16 = v7;
      long long v17 = v7;
      long long v14 = v7;
      long long v15 = v7;
      *(_OWORD *)buffer = v7;
      long long v13 = v7;
      CFIndex Length = CFStringGetLength(0);
      if (Length - v6 >= 64) {
        CFIndex v9 = 64;
      }
      else {
        CFIndex v9 = Length - v6;
      }
      v21.CFIndex location = v6;
      v21.CFIndex length = v9;
      CFStringGetCharacters(0, v21, buffer);
      CFStringAppendCharacters(v5, buffer, v9);
      if (a2) {
        CFStringAppend(v5, @"\n");
      }
      v6 += v9;
    }
    while (v6 < CFStringGetLength(0));
  }
  if (a2) {
    CFStringAppend(v5, @"-----END CERTIFICATE REQUEST-----");
  }
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v3, v5, 0x8000100u, 0x20u);
LABEL_16:
  if (v5) {
    CFRelease(v5);
  }
  return ExternalRepresentation;
}

CFDataRef AMFDRCryptoCreateSignedCsr(const __CFDictionary **a1, uint64_t a2, const __CFString *a3, const __CFData *a4, uint64_t (*a5)(void, void, void, void), uint64_t a6)
{
  long long v7 = a5;
  CFDataRef v8 = a4;
  uint64_t v10 = a2;
  CFDataRef v11 = (CFDataRef)a1;
  uint64_t v151 = *MEMORY[0x263EF8340];
  CFDataRef theData = 0;
  memset(v128, 0, sizeof(v128));
  *(void *)&length[1] = 0;
  length[0] = 0;
  CFDataRef v126 = 0;
  if ((int)a2 <= 1025)
  {
    if ((int)a2 <= 513)
    {
      if (a2 != 257)
      {
        if (a2 == 513)
        {
          uint64_t v12 = 0;
          char v13 = 0;
          long long v14 = "1.2.840.113549.1.1.11";
          goto LABEL_149;
        }
LABEL_151:
        AMSupportLogInternal();
        goto LABEL_152;
      }
      uint64_t v12 = 0;
      char v13 = 0;
      long long v14 = "1.2.840.113549.1.1.5";
LABEL_149:
      long long v15 = "1.2.840.113549.1.1.1";
      if (!a1) {
        goto LABEL_150;
      }
      goto LABEL_19;
    }
    if (a2 != 514)
    {
      if (a2 != 1025) {
        goto LABEL_151;
      }
      uint64_t v12 = 0;
      char v13 = 0;
      long long v14 = "1.2.840.113549.1.1.12";
      goto LABEL_149;
    }
    goto LABEL_16;
  }
  if ((int)a2 <= 66561)
  {
    if (a2 != 1026)
    {
      if (a2 != 66050) {
        goto LABEL_151;
      }
LABEL_16:
      char v13 = 1;
      long long v14 = "1.2.840.10045.4.3.2";
      uint64_t v12 = "1.2.840.10045.3.1.7";
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (a2 == 66562)
  {
LABEL_17:
    char v13 = 1;
    long long v14 = "1.2.840.10045.4.3.3";
    uint64_t v12 = "1.3.132.0.34";
    goto LABEL_18;
  }
  if (a2 != 67586) {
    goto LABEL_151;
  }
  char v13 = 1;
  long long v14 = "1.2.840.10045.4.3.2";
  uint64_t v12 = "1.3.132.0.33";
LABEL_18:
  long long v15 = "1.2.840.10045.2.1";
  if (!a1)
  {
LABEL_150:
    AMSupportLogInternal();
    CFDataRef v99 = 0;
    goto LABEL_139;
  }
LABEL_19:
  if (!a4 || !a5) {
    goto LABEL_151;
  }
  int v123 = (char *)v15;
  CFStringRef v124 = (char *)v12;
  uint64_t v121 = (char *)v14;
  char v122 = v13;
  CFDictionaryRef v16 = a1[2];
  if (!v16
    || (CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v16, @"CSRFormatOverride")) == 0
    || (CFDictionaryRef v18 = v17, v19 = CFGetTypeID(v17), v19 != CFDictionaryGetTypeID())
    || CFDictionaryGetCount(v18) < 1)
  {
    v131[0] = 0;
    int v130 = 2;
    if ((AMFDRDataGetSigningVersion((uint64_t)v11, &v130) & 1) == 0) {
      goto LABEL_73;
    }
    if (AMFDREncodeCertificateRequestBegin((uint64_t)v131)
      || AMFDREncodeCertificateRequestAddSubject((uint64_t)v131, "2.5.4.6", 19, (uint64_t)"US", 2)
      || AMFDREncodeCertificateRequestAddSubject((uint64_t)v131, "2.5.4.10", 12, (uint64_t)"Apple Inc.", 10))
    {
      goto LABEL_74;
    }
    CFStringRef v45 = (const __CFString *)_CFDictionaryCopyValue(*((const __CFDictionary **)v11 + 2), @"OrganizationalUnit");
    if (!v45)
    {
      CFDataRef v56 = (void *)*((void *)v11 + 17);
      if (*v56 < 0x71uLL
        || (unsigned int v57 = (uint64_t (*)(CFDataRef, void))v56[14]) == 0
        || (CFStringRef v45 = (const __CFString *)v57(v11, *((void *)v11 + 18))) == 0)
      {
LABEL_73:
        AMSupportLogInternal();
LABEL_74:
        CFDataRef v44 = 0;
LABEL_131:
        CFDataRef v95 = v131;
        goto LABEL_132;
      }
    }
    CFTypeID v46 = CFGetTypeID(v45);
    if (v46 != CFStringGetTypeID())
    {
      AMSupportLogInternal();
      CFRelease(v45);
      goto LABEL_74;
    }
    CFAllocatorRef v47 = CFGetAllocator(v11);
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v47, v45, 0x8000100u, 0x20u);
    CFDataRef v44 = ExternalRepresentation;
    if (!ExternalRepresentation)
    {
      AMSupportLogInternal();
      CFRelease(v45);
      goto LABEL_131;
    }
    uint64_t BytePtr = CFDataGetBytePtr(ExternalRepresentation);
    int v50 = CFDataGetLength(v44);
    CFStringRef v120 = v7;
    CFDataRef cfa = v44;
    uint64_t v116 = a6;
    unsigned int v118 = v10;
    if (!AMFDREncodeCertificateRequestAddSubject((uint64_t)v131, "2.5.4.11", 12, (uint64_t)BytePtr, v50))
    {
      if (!a3)
      {
        CFDataRef v111 = 0;
        goto LABEL_76;
      }
      CFAllocatorRef v51 = CFGetAllocator(v11);
      CFDataRef v52 = CFStringCreateExternalRepresentation(v51, a3, 0x8000100u, 0x20u);
      if (v52)
      {
        CFDataRef v53 = v52;
        CFStringRef v54 = CFDataGetBytePtr(v52);
        CFDataRef v111 = v53;
        int v55 = CFDataGetLength(v53);
        if (AMFDREncodeCertificateRequestAddAttribute((uint64_t)v131, "1.2.840.113635.100.6.16", 0, (uint64_t)v54, v55, 0))
        {
          CFDataRef v44 = 0;
          CFTypeRef v113 = 0;
LABEL_209:
          CFStringRef v62 = 0;
          goto LABEL_210;
        }
LABEL_76:
        int v58 = (void *)*((void *)v11 + 17);
        if (*v58 >= 0x59uLL && (char v59 = (uint64_t (*)(CFDataRef, void))v58[11]) != 0) {
          uint64_t v60 = v59(v11, *((void *)v11 + 18));
        }
        else {
          uint64_t v60 = 0;
        }
        CFTypeRef v113 = (CFTypeRef)v60;
        if (v130 != 2 || (*(unsigned char *)(*((void *)v11 + 17) + 8) & 2) != 0) {
          uint64_t SikInstanceStringInternal = AMSupportSafeRetain();
        }
        else {
          uint64_t SikInstanceStringInternal = (uint64_t)AMFDRDataCreateSikInstanceStringInternal((__CFString *)v11, 0, v60);
        }
        CFStringRef v62 = (const __CFString *)SikInstanceStringInternal;
        if (!SikInstanceStringInternal)
        {
          AMSupportLogInternal();
          CFDataRef v44 = 0;
LABEL_210:
          CFDataRef v65 = 0;
          goto LABEL_211;
        }
        CFAllocatorRef v63 = CFGetAllocator(v11);
        CFDataRef v64 = CFStringCreateExternalRepresentation(v63, v62, 0x8000100u, 0x20u);
        CFDataRef v65 = v64;
        if (v64)
        {
          CFAllocatorRef v66 = CFDataGetBytePtr(v64);
          int v67 = CFDataGetLength(v65);
          if (!AMFDREncodeCertificateRequestAddAttribute((uint64_t)v131, "1.2.840.113635.100.6.17", 0, (uint64_t)v66, v67, 0))
          {
            CFStringRef v68 = (const __CFString *)_CFDictionaryCopyValue(*((const __CFDictionary **)v11 + 2), @"CertifyCustomCommonName");
            CFStringRef v69 = v68;
            if (v68)
            {
              CFTypeID v70 = CFGetTypeID(v68);
              if (v70 != CFStringGetTypeID())
              {
                AMSupportLogInternal();
                CFDataRef v44 = 0;
                CFDataRef v94 = 0;
                goto LABEL_212;
              }
              CFAllocatorRef v71 = CFGetAllocator(v11);
              CFDataRef v72 = CFStringCreateExternalRepresentation(v71, v69, 0x8000100u, 0x20u);
              CFDataRef v73 = v72;
              if (!v72)
              {
                AMSupportLogInternal();
LABEL_216:
                CFDataRef v44 = 0;
                CFDataRef v94 = 0;
                goto LABEL_213;
              }
              CFAllocatorRef v74 = CFDataGetBytePtr(v72);
              int v75 = CFDataGetLength(v73);
              if (AMFDREncodeCertificateRequestAddSubject((uint64_t)v131, "2.5.4.3", 12, (uint64_t)v74, v75))goto LABEL_216; {
            }
              }
            else
            {
              CFMutableArrayRef v76 = CFDataGetBytePtr(v65);
              int v77 = CFDataGetLength(v65);
              CFDataRef v73 = 0;
              if (AMFDREncodeCertificateRequestAddSubject((uint64_t)v131, "2.5.4.3", 12, (uint64_t)v76, v77))
              {
                CFDataRef v44 = 0;
                CFDataRef v94 = 0;
                CFStringRef v69 = 0;
                CFDataRef v83 = 0;
                CFStringRef v79 = 0;
                goto LABEL_112;
              }
            }
            CFStringRef v78 = (const __CFString *)_CFDictionaryCopyValue(*((const __CFDictionary **)v11 + 2), @"CertifyClassFKey");
            CFStringRef v79 = v78;
            if (v78)
            {
              CFTypeID v80 = CFGetTypeID(v78);
              if (v80 != CFStringGetTypeID())
              {
                AMSupportLogInternal();
                CFDataRef v44 = 0;
                CFDataRef v94 = 0;
                CFDataRef v83 = 0;
                goto LABEL_112;
              }
              CFAllocatorRef v81 = CFGetAllocator(v11);
              CFDataRef v82 = CFStringCreateExternalRepresentation(v81, v79, 0x8000100u, 0x20u);
              CFDataRef v83 = v82;
              if (!v82)
              {
                AMSupportLogInternal();
LABEL_219:
                CFDataRef v44 = 0;
                CFDataRef v94 = 0;
                goto LABEL_112;
              }
              CFIndex v84 = CFDataGetBytePtr(v82);
              int v85 = CFDataGetLength(v83);
              if (AMFDREncodeCertificateRequestAddAttribute((uint64_t)v131, "1.2.840.113635.100.6.74.4", 0, (uint64_t)v84, v85, 0))goto LABEL_219; {
            }
              }
            else
            {
              CFDataRef v83 = 0;
            }
            if (v130 != 1 || (*(unsigned char *)(*((void *)v11 + 17) + 8) & 1) != 0)
            {
              CFDataRef v94 = 0;
              goto LABEL_111;
            }
            unint64_t v150 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v86 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v86 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v148 = v86;
            long long v149 = v86;
            long long v146 = v86;
            long long v147 = v86;
            long long v144 = v86;
            long long v145 = v86;
            long long v142 = v86;
            long long v143 = v86;
            long long v140 = v86;
            long long v141 = v86;
            long long v138 = v86;
            long long v139 = v86;
            v137[14] = v86;
            v137[15] = v86;
            v137[12] = v86;
            v137[13] = v86;
            v137[10] = v86;
            v137[11] = v86;
            v137[8] = v86;
            v137[9] = v86;
            v137[6] = v86;
            v137[7] = v86;
            v137[4] = v86;
            v137[5] = v86;
            v137[2] = v86;
            v137[3] = v86;
            v137[0] = v86;
            v137[1] = v86;
            memset((char *)&v131[1] + 4, 0, 12);
            CFDictionaryRef v87 = (const __CFDictionary *)*((void *)v11 + 2);
            if (!v87) {
              goto LABEL_224;
            }
            CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v87, @"APTicket");
            if (!Value) {
              goto LABEL_224;
            }
            CFDataRef v89 = Value;
            CFDataGetBytePtr(Value);
            CFDataGetLength(v89);
            if (Img4DecodeInitManifest()) {
              goto LABEL_224;
            }
            CFURLRef v90 = (void *)*((void *)&v138 + 1);
            if (!*((void *)&v138 + 1) || !(void)v139) {
              goto LABEL_224;
            }
            int v136 = 0;
            int v135 = 1295273289;
            values = 0;
            memset(v133, 170, sizeof(v133));
            memset(keys, 170, sizeof(keys));
            unint64_t v91 = v139;
            if (!v139)
            {
              int v93 = 101;
              goto LABEL_187;
            }
            if (DEREncoderCreate())
            {
              int v92 = DEREncoderAddDataNoCopy();
              if (v92)
              {
                int v93 = v92;
                goto LABEL_186;
              }
              int v104 = DEREncoderAddUInt32();
              if (v104)
              {
                int v93 = v104;
                goto LABEL_186;
              }
              _OWORD keys[2] = v90;
              keys[3] = (void *)v91;
              memset(v133, 0, sizeof(v133));
              if (DERDecodeSeqContentInit((unint64_t *)&keys[2], (unint64_t *)keys))
              {
                int v93 = 103;
                goto LABEL_186;
              }
              if (DERDecodeSeqNext((unint64_t *)keys, (unint64_t *)v133))
              {
                int v93 = 103;
                goto LABEL_186;
              }
              int v105 = DEREncoderAddDataNoCopy();
              if (v105)
              {
                int v93 = v105;
                goto LABEL_186;
              }
              int EncodedBuffer = DEREncoderCreateEncodedBuffer();
              if (EncodedBuffer)
              {
                int v93 = EncodedBuffer;
                goto LABEL_186;
              }
              if (DEREncoderCreate())
              {
                int v109 = DEREncoderAddDataNoCopy();
                if (v109)
                {
                  int v93 = v109;
                }
                else
                {
                  int v110 = DEREncoderCreateEncodedBuffer();
                  if (!v110)
                  {
                    int v93 = 100;
LABEL_187:
                    DEREncoderDestroy();
                    DEREncoderDestroy();
                    if (values) {
                      free(values);
                    }
                    if (v93 == 100 && v131[2] && HIDWORD(v131[1]))
                    {
                      CFDataRef v94 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v131[2], HIDWORD(v131[1]));
                      if (!v94) {
                        AMSupportLogInternal();
                      }
LABEL_194:
                      if (v131[2]) {
                        free((void *)v131[2]);
                      }
                      if (v94)
                      {
                        AMSupportLogInternal();
                        CFMutableDictionaryRef v107 = CFDataGetBytePtr(v94);
                        int v108 = CFDataGetLength(v94);
                        if (AMFDREncodeCertificateRequestAddAttribute((uint64_t)v131, "1.2.840.113635.100.6.8", 1, (uint64_t)v107, v108, 0))
                        {
                          CFDataRef v44 = 0;
                          goto LABEL_112;
                        }
                      }
                      else
                      {
                        AMSupportLogInternal();
                      }
LABEL_111:
                      CFDataRef v44 = (const __CFData *)v131[0];
                      v131[0] = 0;
LABEL_112:
                      CFRelease(v45);
                      CFRelease(cfa);
                      if (v111) {
                        CFRelease(v111);
                      }
                      if (v65) {
                        CFRelease(v65);
                      }
                      if (v94) {
                        CFRelease(v94);
                      }
                      if (v62) {
                        CFRelease(v62);
                      }
                      long long v7 = v120;
                      if (v113) {
                        CFRelease(v113);
                      }
                      uint64_t v10 = v118;
                      if (v73) {
                        CFRelease(v73);
                      }
                      if (v69) {
                        CFRelease(v69);
                      }
                      if (v79) {
                        CFRelease(v79);
                      }
                      a6 = v116;
                      if (v83) {
                        CFRelease(v83);
                      }
                      CFDataRef v8 = a4;
                      goto LABEL_131;
                    }
LABEL_224:
                    AMSupportLogInternal();
                    CFDataRef v94 = 0;
                    goto LABEL_194;
                  }
                  int v93 = v110;
                }
LABEL_186:
                AMSupportLogInternal();
                goto LABEL_187;
              }
            }
            int v93 = 2;
            goto LABEL_186;
          }
        }
        else
        {
          AMSupportLogInternal();
        }
        CFDataRef v44 = 0;
LABEL_211:
        CFDataRef v94 = 0;
        CFStringRef v69 = 0;
LABEL_212:
        CFDataRef v73 = 0;
LABEL_213:
        CFDataRef v83 = 0;
        CFStringRef v79 = 0;
        goto LABEL_112;
      }
      AMSupportLogInternal();
    }
    CFDataRef v44 = 0;
    CFDataRef v111 = 0;
    CFTypeRef v113 = 0;
    goto LABEL_209;
  }
  unsigned int v117 = v10;
  CFURLRef v119 = v7;
  AMSupportLogInternal();
  *(void *)&v137[0] = 0;
  v133[0] = 0;
  _OWORD keys[2] = 0;
  if (AMFDREncodeCertificateRequestBegin((uint64_t)v137))
  {
    CFDataRef v44 = 0;
    goto LABEL_158;
  }
  uint64_t v20 = 0;
  CFRange v21 = 0;
  char v22 = 1;
  CFDictionaryRef v112 = v18;
  while (1)
  {
    char v23 = v22;
    CFTypeRef v24 = off_2642D16C0[v20];
    CFArrayRef v25 = (const __CFArray *)CFDictionaryGetValue(v18, v24);
    char cf = v23;
    if (v25)
    {
      CFArrayRef v26 = v25;
      CFTypeID v27 = CFGetTypeID(v25);
      if (v27 != CFArrayGetTypeID())
      {
        AMSupportLogInternal();
        CFDataRef v44 = 0;
        goto LABEL_156;
      }
      if (CFArrayGetCount(v26) >= 1) {
        break;
      }
    }
LABEL_56:
    char v22 = 0;
    uint64_t v20 = 1;
    CFDataRef v8 = a4;
    CFDictionaryRef v18 = v112;
    if ((cf & 1) == 0)
    {
      CFDataRef v44 = *(const __CFData **)&v137[0];
      *(void *)&v137[0] = 0;
      goto LABEL_156;
    }
  }
  CFIndex v28 = 0;
  while (1)
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v26, v28);
    keys[0] = 0;
    values = 0;
    if (v133[0])
    {
      free(v133[0]);
      v133[0] = 0;
    }
    if (v21) {
      CFRelease(v21);
    }
    if (!ValueAtIndex
      || (CFTypeID v30 = CFGetTypeID(ValueAtIndex), v30 != CFDictionaryGetTypeID())
      || CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex) != 1
      || (CFDictionaryGetKeysAndValues((CFDictionaryRef)ValueAtIndex, (const void **)keys, (const void **)&values),
          !keys[0])
      || (CFTypeID v31 = CFGetTypeID(keys[0]), v31 != CFStringGetTypeID())
      || AMSupportCreateCStringFromCFString()
      || !keys[2]
      || ((int v32 = *(unsigned __int8 *)v133[0], v32 == 33) ? (v33 = (char *)v133[0] + 1) : (v33 = (char *)v133[0]), !values))
    {
LABEL_154:
      AMSupportLogInternal();
      CFRange v21 = 0;
      goto LABEL_155;
    }
    CFTypeID v34 = CFGetTypeID(values);
    CFTypeID TypeID = CFDataGetTypeID();
    if (v34 == TypeID)
    {
      CFRange v21 = CFRetain(values);
      goto LABEL_50;
    }
    CFTypeID v36 = CFGetTypeID(values);
    if (v36 != CFStringGetTypeID()) {
      goto LABEL_154;
    }
    CFAllocatorRef v37 = CFGetAllocator(v11);
    CFRange v21 = CFStringCreateExternalRepresentation(v37, (CFStringRef)values, 0x8000100u, 0x20u);
    if (!v21) {
      break;
    }
LABEL_50:
    if (CFStringCompare(v24, @"Subjects", 0))
    {
      if (CFEqual(v24, @"Attributes"))
      {
        BOOL v38 = v34 == TypeID;
        BOOL v39 = v32 == 33;
        CFAllocatorRef v40 = CFDataGetBytePtr((CFDataRef)v21);
        int v41 = CFDataGetLength((CFDataRef)v21);
        if (AMFDREncodeCertificateRequestAddAttribute((uint64_t)v137, v33, v38, (uint64_t)v40, v41, v39)) {
          break;
        }
      }
    }
    else
    {
      CFIndex v42 = CFDataGetBytePtr((CFDataRef)v21);
      int v43 = CFDataGetLength((CFDataRef)v21);
      if (AMFDREncodeCertificateRequestAddSubject((uint64_t)v137, v33, 12, (uint64_t)v42, v43)) {
        goto LABEL_155;
      }
    }
    if (CFArrayGetCount(v26) <= ++v28) {
      goto LABEL_56;
    }
  }
  AMSupportLogInternal();
LABEL_155:
  CFDataRef v44 = 0;
  CFDataRef v8 = a4;
LABEL_156:
  if (v21) {
    CFRelease(v21);
  }
LABEL_158:
  long long v7 = v119;
  uint64_t v10 = v117;
  if (v133[0])
  {
    free(v133[0]);
    v133[0] = 0;
  }
  CFDataRef v95 = v137;
LABEL_132:
  AMFDREncodeMultiRequestDestroy((uint64_t)v95);
  CFDataRef v126 = v44;
  if (!v44) {
    goto LABEL_151;
  }
  CFAllocatorRef v96 = CFDataGetBytePtr(v8);
  unsigned int v97 = CFDataGetLength(v8);
  if (AMFDREncodeCertificateRequestCreateUnsginedData((uint64_t)&v126, v96, v97, v123, v124, &length[1], length))
  {
LABEL_152:
    CFDataRef v99 = 0;
    goto LABEL_153;
  }
  CFAllocatorRef v98 = CFGetAllocator(v11);
  CFDataRef v99 = CFDataCreateWithBytesNoCopy(v98, *(const UInt8 **)&length[1], length[0], (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (!v99 || (v7(v10, v99, &theData, a6) & 1) == 0)
  {
    AMSupportLogInternal();
    goto LABEL_153;
  }
  CFTypeRef v100 = CFDataGetBytePtr(theData);
  unsigned int v101 = CFDataGetLength(theData);
  if (AMFDREncodeCertificateRequestEnd((uint64_t)&v126, v100, v101, v121, 0, v122, &v128[1], v128))
  {
LABEL_153:
    CFDataRef v11 = 0;
    goto LABEL_139;
  }
  CFAllocatorRef v102 = CFGetAllocator(v11);
  CFDataRef v11 = CFDataCreateWithBytesNoCopy(v102, *(const UInt8 **)&v128[1], v128[0], (CFAllocatorRef)*MEMORY[0x263EFFB18]);
  if (v11) {
    *(void *)&v128[1] = 0;
  }
  else {
    AMSupportLogInternal();
  }
LABEL_139:
  if (*(void *)&length[1])
  {
    free(*(void **)&length[1]);
    *(void *)&length[1] = 0;
  }
  if (*(void *)&v128[1])
  {
    free(*(void **)&v128[1]);
    *(void *)&v128[1] = 0;
  }
  if (theData)
  {
    CFRelease(theData);
    CFDataRef theData = 0;
  }
  if (v99) {
    CFRelease(v99);
  }
  AMFDREncodeMultiRequestDestroy((uint64_t)&v126);
  return v11;
}

CFDataRef AMFDRCryptoCreateModuleSignedCsr(__CFString *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t v177 = *MEMORY[0x263EF8340];
  v173 = 0;
  CFDataRef v174 = 0;
  unsigned int v172 = 0;
  v171 = 0;
  unsigned int v170 = 0;
  v169 = 0;
  int v168 = 0;
  uint64_t v167 = 0;
  int v166 = 2;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)UInt8 bytes = v10;
  long long v176 = v10;
  if ((int)a2 > 1025)
  {
    if (a2 == 1026)
    {
      char v11 = 1;
      uint64_t v12 = "1.2.840.10045.4.3.3";
      char v13 = "1.3.132.0.34";
LABEL_16:
      long long v14 = "1.2.840.10045.2.1";
      if (!a1) {
        goto LABEL_89;
      }
      goto LABEL_17;
    }
    if (a2 != 66050)
    {
      if (a2 != 67586)
      {
LABEL_89:
        AMSupportLogInternal();
LABEL_90:
        CFTypeRef v24 = 0;
        CFDataRef v75 = 0;
        CFDataRef v17 = 0;
LABEL_91:
        CFDataRef v162 = 0;
        CFDataRef v163 = 0;
        CFDataRef v160 = 0;
        CFDataRef v161 = 0;
        CFDataRef v159 = 0;
        CFDataRef v76 = 0;
        CFAllocatorRef v63 = 0;
        CFStringRef v25 = 0;
        goto LABEL_205;
      }
      char v11 = 1;
      uint64_t v12 = "1.2.840.10045.4.3.2";
      char v13 = "1.3.132.0.33";
      goto LABEL_16;
    }
LABEL_10:
    char v11 = 1;
    uint64_t v12 = "1.2.840.10045.4.3.2";
    char v13 = "1.2.840.10045.3.1.7";
    goto LABEL_16;
  }
  switch(a2)
  {
    case 0x101:
      char v13 = 0;
      char v11 = 0;
      uint64_t v12 = "1.2.840.113549.1.1.5";
      break;
    case 0x201:
      char v13 = 0;
      char v11 = 0;
      uint64_t v12 = "1.2.840.113549.1.1.11";
      break;
    case 0x202:
      goto LABEL_10;
    default:
      goto LABEL_89;
  }
  long long v14 = "1.2.840.113549.1.1.1";
  if (!a1) {
    goto LABEL_89;
  }
LABEL_17:
  if (!*(void *)a3
    || !*(void *)(a3 + 16)
    || !*(void *)(a3 + 24)
    || !*(void *)(a3 + 8)
    || (AMFDRDataGetSigningVersion((uint64_t)a1, &v166) & 1) == 0)
  {
    goto LABEL_89;
  }
  if (AMFDREncodeCertificateRequestBegin((uint64_t)&v167)
    || AMFDREncodeCertificateRequestAddSubject((uint64_t)&v167, "2.5.4.6", 19, (uint64_t)"US", 2)
    || AMFDREncodeCertificateRequestAddSubject((uint64_t)&v167, "2.5.4.10", 12, (uint64_t)"Apple Inc.", 10))
  {
    goto LABEL_90;
  }
  CFArrayRef v158 = (char *)v14;
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v15, *(CFStringRef *)(a3 + 8), 0x8000100u, 0x20u);
  CFDataRef v17 = ExternalRepresentation;
  if (!ExternalRepresentation)
  {
    AMSupportLogInternal();
    goto LABEL_242;
  }
  CFTypeRef v156 = (char *)v13;
  uint64_t BytePtr = CFDataGetBytePtr(ExternalRepresentation);
  int Length = CFDataGetLength(v17);
  if (AMFDREncodeCertificateRequestAddSubject((uint64_t)&v167, "2.5.4.11", 12, (uint64_t)BytePtr, Length))
  {
LABEL_242:
    CFTypeRef v24 = 0;
    CFDataRef v75 = 0;
    goto LABEL_91;
  }
  char v153 = v11;
  if (!a4 || (CFDictionaryRef data = a4, CFDictionaryGetCount(a4) <= 0)) {
    CFDictionaryRef data = (const __CFDictionary *)a1->data;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(data, @"CertifyNoClientID");
  CFTypeRef v152 = (char *)v12;
  uint64_t v154 = a5;
  if (Value)
  {
    CFBooleanRef v22 = Value;
    CFTypeID v23 = CFGetTypeID(Value);
    if (v23 != CFBooleanGetTypeID() || CFBooleanGetValue(v22))
    {
      CFTypeRef v24 = 0;
      CFDataRef v163 = 0;
      CFStringRef v25 = 0;
      goto LABEL_44;
    }
  }
  info = (void *)a1[4].info;
  if (*info >= 0x59uLL && (CFTypeID v27 = (uint64_t (*)(__CFString *, char *))info[11]) != 0) {
    CFTypeRef v24 = (const void *)v27(a1, a1[4].data);
  }
  else {
    CFTypeRef v24 = 0;
  }
  if (v166 == 2) {
    uint64_t SikInstanceStringInternal = (uint64_t)AMFDRDataCreateSikInstanceStringInternal(a1, 0, (uint64_t)v24);
  }
  else {
    uint64_t SikInstanceStringInternal = AMSupportSafeRetain();
  }
  CFStringRef v25 = (const __CFString *)SikInstanceStringInternal;
  if (!SikInstanceStringInternal
    || (v29 = CFGetAllocator(a1), (CFDataRef v30 = CFStringCreateExternalRepresentation(v29, v25, 0x8000100u, 0x20u)) == 0))
  {
    AMSupportLogInternal();
    CFDataRef v75 = 0;
    CFDataRef v163 = 0;
LABEL_269:
    CFDataRef v162 = 0;
    goto LABEL_270;
  }
  CFDataRef v31 = v30;
  int v32 = CFDataGetBytePtr(v30);
  CFDataRef v163 = v31;
  int v33 = CFDataGetLength(v31);
  if (AMFDREncodeCertificateRequestAddAttribute((uint64_t)&v167, "1.2.840.113635.100.6.17", 0, (uint64_t)v32, v33, 0))
  {
    CFDataRef v75 = 0;
    goto LABEL_269;
  }
LABEL_44:
  CFAllocatorRef v34 = CFGetAllocator(a1);
  CFDataRef v35 = CFStringCreateExternalRepresentation(v34, *(CFStringRef *)a3, 0x8000100u, 0x20u);
  CFTypeID v36 = CFDataGetBytePtr(v35);
  CFDataRef v162 = v35;
  int v37 = CFDataGetLength(v35);
  if (AMFDREncodeCertificateRequestAddSubject((uint64_t)&v167, "2.5.4.3", 12, (uint64_t)v36, v37))
  {
LABEL_250:
    CFDataRef v75 = 0;
LABEL_270:
    CFDataRef v161 = 0;
    goto LABEL_271;
  }
  CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(data, @"CertifyComponentType");
  if (!v38)
  {
    CFDataRef v161 = 0;
    goto LABEL_50;
  }
  CFStringRef v39 = v38;
  CFAllocatorRef v40 = CFGetAllocator(a1);
  CFDataRef v41 = CFStringCreateExternalRepresentation(v40, v39, 0x8000100u, 0x20u);
  if (!v41)
  {
    AMSupportLogInternal();
    goto LABEL_250;
  }
  CFDataRef v42 = v41;
  int v43 = CFDataGetBytePtr(v41);
  CFDataRef v161 = v42;
  int v44 = CFDataGetLength(v42);
  if (AMFDREncodeCertificateRequestAddAttribute((uint64_t)&v167, "1.2.840.113635.100.11.1", 0, (uint64_t)v43, v44, 1))goto LABEL_252; {
LABEL_50:
  }
  CFStringRef v45 = (const __CFString *)CFDictionaryGetValue(data, @"CertifyPartNumber");
  CFStringRef v164 = a1;
  if (v45)
  {
    CFStringRef v46 = v45;
    CFAllocatorRef v47 = CFGetAllocator(a1);
    CFDataRef v48 = CFStringCreateExternalRepresentation(v47, v46, 0x8000100u, 0x20u);
    if (!v48)
    {
      AMSupportLogInternal();
LABEL_252:
      CFDataRef v75 = 0;
LABEL_271:
      CFDataRef v160 = 0;
      goto LABEL_272;
    }
    CFDataRef v49 = v48;
    int v50 = CFDataGetBytePtr(v48);
    CFDataRef v160 = v49;
    int v51 = CFDataGetLength(v49);
    if (AMFDREncodeCertificateRequestAddAttribute((uint64_t)&v167, "1.2.840.113635.100.11.2", 0, (uint64_t)v50, v51, 1))
    {
LABEL_244:
      CFDataRef v75 = 0;
LABEL_272:
      CFDataRef v159 = 0;
      CFDataRef v76 = 0;
      CFAllocatorRef v63 = 0;
      goto LABEL_205;
    }
  }
  else
  {
    CFDataRef v160 = 0;
  }
  CFDataRef v52 = CFDictionaryGetValue(data, @"CertifyComponentAttributes");
  unint64_t v53 = (unint64_t)CFDictionaryGetValue(data, @"CertifyComponentAttributesCritical");
  unint64_t v54 = (unint64_t)CFDictionaryGetValue(a4, @"CertifyComponentAttributesCriticalProductionMode");
  int v55 = (const void *)v54;
  if (v53 && v54 || v52 && v53 | v54)
  {
    AMSupportLogInternal();
    goto LABEL_244;
  }
  CFStringRef v165 = v25;
  if (!v52 || (CFTypeID v56 = CFGetTypeID(v52), v56 != CFDictionaryGetTypeID()))
  {
    uint64_t v60 = v164;
    if (!v55)
    {
LABEL_71:
      BOOL v58 = 1;
      char v59 = (const void *)v53;
      goto LABEL_72;
    }
LABEL_68:
    CFTypeID v61 = CFGetTypeID(v55);
    if (v61 == CFBooleanGetTypeID())
    {
      CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFAllocatorRef v63 = Mutable;
      if (!Mutable)
      {
        AMSupportLogInternal();
        goto LABEL_274;
      }
      CFDictionarySetValue(Mutable, @"ComponentAttributeProductionMode", v55);
      BOOL v58 = 1;
      char v59 = v63;
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v52);
  BOOL v58 = Count == 0;
  if (Count) {
    char v59 = v52;
  }
  else {
    char v59 = (const void *)v53;
  }
  if (Count)
  {
    uint64_t v60 = v164;
    goto LABEL_72;
  }
  uint64_t v60 = v164;
  if (v55) {
    goto LABEL_68;
  }
LABEL_72:
  CFAllocatorRef v63 = 0;
  if (!v59) {
    goto LABEL_145;
  }
LABEL_73:
  int v149 = v58;
  CFTypeID v64 = CFGetTypeID(v59);
  if (v64 == CFDictionaryGetTypeID() && CFDictionaryGetCount((CFDictionaryRef)v59) >= 1)
  {
    uint64_t v65 = DEREncoderCreate();
    uint64_t v66 = DEREncoderCreate();
    unint64_t v150 = v63;
    uint64_t v147 = v65;
    uint64_t v148 = v66;
    CFDataRef v146 = v17;
    if (!v65 || !v66)
    {
      CFIndex v84 = v24;
      AMSupportLogInternal();
      CFDataRef v143 = 0;
      CFDataRef v144 = 0;
      CFDataRef cf = 0;
      uint64_t v67 = 0;
      CFDataRef v94 = 0;
      CFDataRef v95 = 0;
      CFDataRef v96 = 0;
      uint64_t v97 = 0;
      int v85 = 199;
      if (!v148)
      {
LABEL_132:
        if (v147) {
          DEREncoderDestroy();
        }
        CFAllocatorRef v63 = v150;
        if (v97) {
          DEREncoderDestroy();
        }
        if (v96) {
          CFRelease(v96);
        }
        CFTypeRef v24 = v84;
        if (v95) {
          CFRelease(v95);
        }
        uint64_t v60 = v164;
        if (v94) {
          CFRelease(v94);
        }
        if (v85)
        {
          AMSupportLogInternal();
        }
        else if (!AMFDREncodeCertificateRequestAddAttribute((uint64_t)&v167, "1.2.840.113635.100.11.3", 1, (uint64_t)v169, v168, v149))
        {
          CFDataRef v17 = v146;
          goto LABEL_145;
        }
        CFDataRef v75 = 0;
        CFDataRef v159 = 0;
        CFDataRef v76 = 0;
        CFDataRef v17 = v146;
        goto LABEL_281;
      }
LABEL_131:
      DEREncoderDestroy();
      CFDataRef v94 = v143;
      CFDataRef v95 = v144;
      CFDataRef v96 = cf;
      uint64_t v97 = v67;
      goto LABEL_132;
    }
    if (CFDictionaryContainsKey((CFDictionaryRef)v59, @"ComponentAttributeProductionMode"))
    {
      uint64_t v67 = DEREncoderCreate();
      if (!v67) {
        goto LABEL_276;
      }
      CFBooleanRef v68 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v59, @"ComponentAttributeProductionMode");
      if (!v68 || (CFBooleanRef v69 = v68, v70 = CFGetTypeID(v68), v70 != CFBooleanGetTypeID()))
      {
        CFIndex v84 = v24;
        CFDataRef v143 = 0;
        CFDataRef v144 = 0;
        CFDataRef cf = 0;
        goto LABEL_109;
      }
      CFBooleanGetValue(v69);
      if (DEREncoderAddBoolean())
      {
        CFIndex v84 = v24;
        CFDataRef v143 = 0;
        CFDataRef v144 = 0;
        CFDataRef cf = 0;
        goto LABEL_109;
      }
      if (DEREncoderAddDataFromEncoder())
      {
        CFIndex v84 = v24;
        CFDataRef v143 = 0;
        CFDataRef v144 = 0;
        CFDataRef cf = 0;
        goto LABEL_109;
      }
      DEREncoderDestroy();
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)v59, @"ComponentAttributeBatteryPackIdentifier"))
    {
      CFDataRef cf = 0;
      goto LABEL_100;
    }
    uint64_t v67 = DEREncoderCreate();
    if (v67)
    {
      CFStringRef v71 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v59, @"ComponentAttributeBatteryPackIdentifier");
      if (v71)
      {
        CFStringRef v72 = v71;
        CFTypeID v73 = CFGetTypeID(v71);
        if (v73 == CFStringGetTypeID())
        {
          CFDataRef v74 = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x263EFFB08], v72, 0x8000100u, 0x20u);
LABEL_96:
          if (!v74)
          {
            CFIndex v84 = v24;
            CFDataRef v143 = 0;
            CFDataRef v144 = 0;
            CFDataRef cf = 0;
            goto LABEL_109;
          }
          CFDataRef v78 = v74;
          CFDataGetBytePtr(v74);
          CFDataRef cf = v78;
          CFDataGetLength(v78);
          if (DEREncoderAddDataNoCopy())
          {
            CFIndex v84 = v24;
            CFDataRef v143 = 0;
            CFDataRef v144 = 0;
            goto LABEL_109;
          }
          if (DEREncoderAddDataFromEncoder())
          {
            CFIndex v84 = v24;
            CFDataRef v143 = 0;
            CFDataRef v144 = 0;
            goto LABEL_109;
          }
          DEREncoderDestroy();
LABEL_100:
          if (CFDictionaryContainsKey((CFDictionaryRef)v59, @"ComponentAttributeBoardType"))
          {
            uint64_t v67 = DEREncoderCreate();
            if (!v67)
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              CFDataRef v144 = 0;
              goto LABEL_109;
            }
            CFStringRef v79 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v59, @"ComponentAttributeBoardType");
            if (!v79 || (CFStringRef v80 = v79, v81 = CFGetTypeID(v79), v81 != CFStringGetTypeID()))
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              CFDataRef v144 = 0;
              goto LABEL_109;
            }
            CFDataRef v82 = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x263EFFB08], v80, 0x8000100u, 0x20u);
            if (!v82)
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              CFDataRef v144 = 0;
              goto LABEL_109;
            }
            CFDataRef v83 = v82;
            CFDataGetBytePtr(v82);
            CFDataRef v144 = v83;
            CFDataGetLength(v83);
            if (DEREncoderAddData())
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              goto LABEL_109;
            }
            if (DEREncoderAddDataFromEncoder())
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              goto LABEL_109;
            }
            DEREncoderDestroy();
          }
          else
          {
            CFDataRef v144 = 0;
          }
          if (CFDictionaryContainsKey((CFDictionaryRef)v59, @"ComponentAttributeSoCECID"))
          {
            uint64_t v67 = DEREncoderCreate();
            if (!v67)
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              goto LABEL_109;
            }
            CFStringRef v86 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v59, @"ComponentAttributeSoCECID");
            if (!v86 || (CFStringRef v87 = v86, v88 = CFGetTypeID(v86), v88 != CFStringGetTypeID()))
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              goto LABEL_109;
            }
            CFDataRef v89 = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x263EFFB08], v87, 0x8000100u, 0x20u);
            if (!v89)
            {
              CFIndex v84 = v24;
              CFDataRef v143 = 0;
              goto LABEL_109;
            }
            CFDataRef v90 = v89;
            CFDataGetBytePtr(v89);
            CFDataRef v143 = v90;
            CFDataGetLength(v90);
            if (DEREncoderAddData())
            {
              CFIndex v84 = v24;
              goto LABEL_109;
            }
            if (DEREncoderAddDataFromEncoder())
            {
              CFIndex v84 = v24;
              goto LABEL_109;
            }
            DEREncoderDestroy();
          }
          else
          {
            CFDataRef v143 = 0;
          }
          if (CFDictionaryContainsKey((CFDictionaryRef)v59, @"ComponentAttributeSoCChipIDECID"))
          {
            uint64_t v67 = DEREncoderCreate();
            if (!v67)
            {
              CFIndex v84 = v24;
              goto LABEL_109;
            }
            CFDataRef v91 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v59, @"ComponentAttributeSoCChipIDECID");
            if (!v91 || (CFDataRef v92 = v91, v93 = CFGetTypeID(v91), v93 != CFDataGetTypeID()))
            {
              CFIndex v84 = v24;
              goto LABEL_109;
            }
            CFDataGetBytePtr(v92);
            CFDataGetLength(v92);
            if (DEREncoderAddDataNoCopy())
            {
              CFIndex v84 = v24;
              goto LABEL_109;
            }
            if (DEREncoderAddDataFromEncoder())
            {
              CFIndex v84 = v24;
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v67 = 0;
          }
          CFIndex v84 = v24;
          if (!DEREncoderAddSequenceFromEncoder() && !DEREncoderCreateEncodedBuffer())
          {
            int v85 = 0;
            goto LABEL_131;
          }
          goto LABEL_109;
        }
        CFTypeID v77 = CFGetTypeID(v72);
        if (v77 == CFDataGetTypeID())
        {
          CFDataRef v74 = (const __CFData *)AMSupportSafeRetain();
          goto LABEL_96;
        }
      }
      CFIndex v84 = v24;
      CFDataRef v143 = 0;
      CFDataRef v144 = 0;
      CFDataRef cf = 0;
LABEL_109:
      AMSupportLogInternal();
      int v85 = 199;
      goto LABEL_131;
    }
LABEL_276:
    CFIndex v84 = v24;
    CFDataRef v143 = 0;
    CFDataRef v144 = 0;
    CFDataRef cf = 0;
    goto LABEL_109;
  }
LABEL_145:
  CFAllocatorRef v98 = CFDataGetBytePtr(*(CFDataRef *)(a3 + 16));
  unsigned int v99 = CFDataGetLength(*(CFDataRef *)(a3 + 16));
  if (AMFDREncodeCertificateRequestCreateUnsginedData((uint64_t)&v167, v98, v99, v158, v156, &v171, &v170))
  {
LABEL_274:
    CFDataRef v75 = 0;
    CFDataRef v159 = 0;
    CFDataRef v76 = 0;
    goto LABEL_281;
  }
  CFAllocatorRef v100 = CFGetAllocator(v60);
  CFDataRef v76 = CFDataCreateWithBytesNoCopy(v100, v171, v170, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  CFStringRef v25 = v165;
  if (!v76)
  {
    AMSupportLogInternal();
    CFDataRef v75 = 0;
    CFDataRef v159 = 0;
    goto LABEL_205;
  }
  CFBooleanRef v101 = (const __CFBoolean *)CFDictionaryGetValue(data, @"CertifyChallengeSupport128b");
  if (v101)
  {
    CFBooleanRef v102 = v101;
    CFTypeRef v103 = v63;
    CFDataRef v104 = v17;
    int v105 = v24;
    CFDataRef v106 = v76;
    CFTypeID v107 = CFGetTypeID(v101);
    if (v107 == CFBooleanGetTypeID() && CFBooleanGetValue(v102))
    {
      CFDataRef v76 = v106;
      CFDataGetBytePtr(v106);
      CFDataGetLength(v106);
      if (!AMSupportDigestSha256())
      {
        CFDataRef v108 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 16);
        CFDataRef v159 = v108;
        CFTypeRef v24 = v105;
        CFDataRef v17 = v104;
        CFAllocatorRef v63 = v103;
        CFStringRef v25 = v165;
        goto LABEL_153;
      }
      AMSupportLogInternal();
      CFDataRef v75 = 0;
      CFDataRef v159 = 0;
    }
    else
    {
      AMSupportLogInternal();
      CFDataRef v75 = 0;
      CFDataRef v159 = 0;
      CFDataRef v76 = v106;
    }
    CFTypeRef v24 = v105;
    CFDataRef v17 = v104;
    CFAllocatorRef v63 = v103;
LABEL_281:
    CFStringRef v25 = v165;
    goto LABEL_205;
  }
  CFDataRef v159 = 0;
  CFDataRef v108 = v76;
LABEL_153:
  if (((*(uint64_t (**)(uint64_t, CFDataRef, CFDataRef *, uint64_t))(a3 + 24))(a2, v108, &v174, v154) & 1) == 0
    || !v174)
  {
LABEL_258:
    AMSupportLogInternal();
LABEL_259:
    CFDataRef v75 = 0;
    goto LABEL_205;
  }
  CFBooleanRef v109 = (const __CFBoolean *)CFDictionaryGetValue(data, @"CertifyRawECDSASignature");
  int v110 = (CFAllocatorRef *)MEMORY[0x263EFFB18];
  if (v109)
  {
    CFBooleanRef v111 = v109;
    CFTypeID v112 = CFGetTypeID(v109);
    if (v112 == CFBooleanGetTypeID() && CFBooleanGetValue(v111))
    {
      char v155 = v24;
      CFTypeRef v113 = CFDataGetBytePtr(v174);
      unsigned int v114 = CFDataGetLength(v174);
      uint64_t v115 = DEREncoderCreate();
      CFDataRef v157 = v76;
      if (v115)
      {
        uint64_t v116 = DEREncoderCreate();
        if (v116)
        {
          uint64_t v151 = v63;
          unint64_t v117 = (unint64_t)v114 >> 1;
          unsigned int v118 = (char *)malloc_type_calloc(1uLL, (v117 + 1), 0x100004077774924uLL);
          CFURLRef v119 = (char *)malloc_type_calloc(1uLL, (v117 + 1), 0x100004077774924uLL);
          CFStringRef v120 = v119;
          if (*(char *)v113 < 0)
          {
            CFDataRef v121 = v17;
            if (v114 >= 2)
            {
              if (v117 <= 1) {
                uint64_t v127 = 1;
              }
              else {
                uint64_t v127 = v117;
              }
              CFStringRef v128 = v118 + 1;
              CFTypeRef v129 = v113;
              do
              {
                char v130 = *v129++;
                *v128++ = v130;
                --v127;
              }
              while (v127);
            }
          }
          else
          {
            CFDataRef v121 = v17;
            if (v114 >= 2)
            {
              if (v117 <= 1) {
                uint64_t v122 = 1;
              }
              else {
                uint64_t v122 = v117;
              }
              int v123 = v113;
              CFStringRef v124 = v118;
              do
              {
                char v125 = *v123++;
                *v124++ = v125;
                --v122;
              }
              while (v122);
            }
          }
          if ((char)v113[v117] < 0)
          {
            if (v114 >= 2)
            {
              if (v117 <= 1) {
                uint64_t v135 = 1;
              }
              else {
                uint64_t v135 = v117;
              }
              int v136 = v119 + 1;
              CFMutableArrayRef v137 = &v113[v117];
              do
              {
                char v138 = *v137++;
                *v136++ = v138;
                --v135;
              }
              while (v135);
            }
          }
          else if (v114 >= 2)
          {
            if (v117 <= 1) {
              uint64_t v131 = 1;
            }
            else {
              uint64_t v131 = v117;
            }
            CFDataRef v132 = &v113[v117];
            CFStringRef v133 = v119;
            do
            {
              char v134 = *v132++;
              *v133++ = v134;
              --v131;
            }
            while (v131);
          }
          if (DEREncoderAddData())
          {
            CFDataRef v17 = v121;
            CFTypeRef v24 = v155;
          }
          else
          {
            CFTypeRef v24 = v155;
            if (!DEREncoderAddData())
            {
              CFDataRef v17 = v121;
              CFStringRef v25 = v165;
              if (!DEREncoderAddSequenceFromEncoder())
              {
                CFAllocatorRef v63 = v151;
                if (!DEREncoderCreateEncodedBuffer()) {
                  goto LABEL_265;
                }
                goto LABEL_264;
              }
              goto LABEL_263;
            }
            CFDataRef v17 = v121;
          }
          CFStringRef v25 = v165;
LABEL_263:
          CFAllocatorRef v63 = v151;
          goto LABEL_264;
        }
        unsigned int v118 = 0;
        CFStringRef v120 = 0;
      }
      else
      {
        unsigned int v118 = 0;
        CFStringRef v120 = 0;
        uint64_t v116 = 0;
      }
      CFTypeRef v24 = v155;
LABEL_264:
      AMSupportLogInternal();
LABEL_265:
      AMSupportLogInternal();
      if (v115) {
        DEREncoderDestroy();
      }
      if (v116) {
        DEREncoderDestroy();
      }
      if (v118) {
        free(v118);
      }
      if (v120) {
        free(v120);
      }
      AMSupportLogInternal();
      CFDataRef v76 = v157;
      goto LABEL_259;
    }
    goto LABEL_258;
  }
  CFDataRef v126 = v174;
  long long v139 = CFDataGetBytePtr(v174);
  unsigned int v140 = CFDataGetLength(v126);
  if (AMFDREncodeCertificateRequestEnd((uint64_t)&v167, v139, v140, v152, 0, v153, &v173, &v172)) {
    goto LABEL_259;
  }
  CFAllocatorRef v141 = CFGetAllocator(v60);
  CFDataRef v75 = CFDataCreateWithBytesNoCopy(v141, v173, v172, *v110);
  if (v75) {
    v173 = 0;
  }
  else {
    AMSupportLogInternal();
  }
LABEL_205:
  if (v171)
  {
    free(v171);
    v171 = 0;
  }
  if (v173)
  {
    free(v173);
    v173 = 0;
  }
  if (v169)
  {
    free(v169);
    v169 = 0;
  }
  if (v174)
  {
    CFRelease(v174);
    CFDataRef v174 = 0;
  }
  if (v76) {
    CFRelease(v76);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v163) {
    CFRelease(v163);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v162) {
    CFRelease(v162);
  }
  if (v161) {
    CFRelease(v161);
  }
  if (v160) {
    CFRelease(v160);
  }
  if (v159) {
    CFRelease(v159);
  }
  if (v63) {
    CFRelease(v63);
  }
  AMFDREncodeMultiRequestDestroy((uint64_t)&v167);
  return v75;
}

uint64_t AMFDRCryptoCreateCsrSignature(int a1, CFDataRef theData, uint64_t a3, const void *a4)
{
  CFIndex length = 0;
  UInt8 bytes = 0;
  if (!theData)
  {
    AMSupportLogInternal();
LABEL_8:
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = a3;
  if (!a3)
  {
    AMSupportLogInternal();
    goto LABEL_6;
  }
  uint64_t BytePtr = CFDataGetBytePtr(theData);
  CFIndex v9 = CFDataGetLength(theData);
  if (AMFDRCryptoCreateDataSignature(a1, (uint64_t)BytePtr, v9, (void **)&bytes, &length, a4) != 100) {
    goto LABEL_8;
  }
  CFDataRef v10 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, length, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
  *(void *)uint64_t v4 = v10;
  if (v10)
  {
    UInt8 bytes = 0;
    uint64_t v4 = 1;
  }
  else
  {
    AMSupportLogInternal();
    uint64_t v4 = 0;
  }
LABEL_6:
  AMSupportSafeFree();
  return v4;
}

uint64_t AMFDRCryptoGetSikPub(uint64_t a1)
{
  if (a1
    && (uint64_t v1 = *(void *)(a1 + 136), (*(unsigned char *)(v1 + 8) & 2) == 0)
    && *(void *)v1 >= 0x49uLL
    && (CFDictionaryRef v2 = *(uint64_t (**)(uint64_t, void))(v1 + 72)) != 0)
  {
    return v2(a1, *(void *)(a1 + 144));
  }
  else
  {
    return 0;
  }
}

uint64_t AMFDRPlatformSetImplementation(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1 && (!a2 || *a2))
  {
    uint64_t v6 = *(void *)(a1 + 136);
    if (v6)
    {
      long long v7 = *(void (**)(void))(v6 + 24);
      if (v7)
      {
        if (*(void *)(a1 + 144))
        {
          v7();
          *(void *)(a1 + 144) = 0;
        }
      }
    }
    CFDataRef v8 = &kAMFDRPlatformImplementationNative;
    if (a2) {
      CFDataRef v8 = a2;
    }
    *(void *)(a1 + 136) = v8;
    CFIndex v9 = (uint64_t (*)(uint64_t))v8[2];
    if (v9) {
      a3 = v9(a3);
    }
    *(void *)(a1 + 144) = a3;
    return 1;
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

void *_AMFDRPlatformDefaultRetain(uint64_t a1)
{
  CFDictionaryRef v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xE0040CF218873uLL);
  CFAllocatorRef v3 = v2;
  if (a1 && v2)
  {
    *CFDictionaryRef v2 = AMSupportSafeRetain();
    v3[1] = AMSupportSafeRetain();
  }
  return v3;
}

void _AMFDRPlatformDefaultRelease(void *a1)
{
  if (a1)
  {
    AMSupportSafeRelease();
    AMSupportSafeRelease();
    free(a1);
  }
  else
  {
    AMSupportLogInternal();
  }
}

uint64_t _AMFDRPlatformDefaultCopyProductTypeNative()
{
  if (_AMFDRPlatformDefaultCopyProductTypeNative_onceToken != -1) {
    dispatch_once(&_AMFDRPlatformDefaultCopyProductTypeNative_onceToken, &__block_literal_global_3);
  }

  return AMSupportSafeRetain();
}

CFTypeRef _AMFDRPlatformDefaultCopyRefKeyPub(const __CFDictionary **a1, uint64_t a2)
{
  uint64_t v2 = _AMFDRPlatformDefaultCopyRefKey(a1, a2);
  if (v2 && (PublicKey = (const void *)AMFDRDeviceRefKeyGetPublicKey(v2)) != 0)
  {
    return CFRetain(PublicKey);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

CFTypeRef _AMFDRPlatformDefaultCopyRefKeyAttest(const __CFDictionary **a1, uint64_t a2)
{
  uint64_t v2 = _AMFDRPlatformDefaultCopyRefKey(a1, a2);
  if (v2)
  {
    return AMFDRDeviceRefKeyCopyAttestation(v2);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
}

uint64_t _AMFDRPlatformDefaultRefKeySign(const __CFDictionary **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = _AMFDRPlatformDefaultCopyRefKey(a1, a6);
  if (v10)
  {
    return AMFDRDeviceRefKeySign(v10, a2, a3, a4, a5);
  }
  else
  {
    AMSupportLogInternal();
    return 199;
  }
}

uint64_t _AMFDRPlatformDefaultHMACSign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a4 && a5)
  {
    uint64_t result = aks_fdr_hmac_data();
    if (result)
    {
      AMSupportLogInternal();
      return 6;
    }
  }
  else
  {
    AMSupportLogInternal();
    return 1;
  }
  return result;
}

uint64_t _AMFDRPlatformDefaultGetSikPub(uint64_t a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___AMFDRPlatformDefaultGetSikPub_block_invoke;
  block[3] = &__block_descriptor_tmp_18;
  block[4] = a1;
  if (_AMFDRPlatformDefaultGetSikPub_onceToken != -1) {
    dispatch_once(&_AMFDRPlatformDefaultGetSikPub_onceToken, block);
  }
  return _AMFDRPlatformDefaultGetSikPub_key;
}

uint64_t _AMFDRPlatformDefaultCopyDeviceKeys(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a4)
  {
    uint64_t result = AMFDRCopyDeviceKeys(*MEMORY[0x263F16FE0], a2, a3);
    if (!result)
    {
      AMSupportSafeRelease();
      uint64_t v6 = AMSupportSafeRetain();
      uint64_t result = 0;
      *a4 = v6;
    }
  }
  else
  {
    AMSupportLogInternal();
    return 199;
  }
  return result;
}

uint64_t _AMFDRPlatformGetPrivateKeyNative(const __CFDictionary **cf, uint64_t a2)
{
  if (a2 && cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == AMFDRGetTypeID()))
  {
    uint64_t result = *(void *)a2;
    if (*(void *)a2) {
      return result;
    }
    uint64_t v6 = _CFDictionaryCopyValue(cf[2], @"PrivateKey");
    if (v6)
    {
      long long v7 = v6;
      *(void *)a2 = CFRetain(v6);
      CFRelease(v7);
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  return *(void *)a2;
}

CFURLRef _AMFDRPlatformDefaultCopyDefaultDataPathNative(uint64_t a1)
{
  if (AMFDRDataIsDiagnosticMode())
  {
    return AMFDRPlatformCopyDefaultDataStoragePath();
  }
  else
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___AMFDRPlatformDefaultCopyDefaultDataPathNative_block_invoke;
    block[3] = &__block_descriptor_tmp_22;
    block[4] = a1;
    if (_AMFDRPlatformDefaultCopyDefaultDataPathNative_onceToken != -1) {
      dispatch_once(&_AMFDRPlatformDefaultCopyDefaultDataPathNative_onceToken, block);
    }
    return (CFURLRef)AMSupportSafeRetain();
  }
}

__CFString *_AMFDRPlatformCopyOrganizationalUnitNative()
{
  return @"Devices";
}

CFStringRef _AMFDRPlatformDefaultCopyProductTypeStation()
{
  return AMFDRSealingMapCallMGCopyAnswer(@"ProductType", 0);
}

uint64_t _AMFDRPlatformDefaultCopyDisposableKeys(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3, uint64_t *a4)
{
  if (a4)
  {
    uint64_t result = AMFDRCopyDisposableKeys(*MEMORY[0x263F16FE0], a2, a3);
    if (!result)
    {
      AMSupportSafeRelease();
      uint64_t v6 = AMSupportSafeRetain();
      uint64_t result = 0;
      *a4 = v6;
    }
  }
  else
  {
    AMSupportLogInternal();
    return 199;
  }
  return result;
}

CFTypeRef _AMFDRPlatformCopyClientIdStation(void *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)a1[2];
  if (!v2) {
    return 0;
  }
  CFBooleanRef Value = CFDictionaryGetValue(v2, @"ClientId");
  if (Value)
  {
    CFTypeRef v4 = Value;
    CFRetain(Value);
  }
  else
  {
    CFTypeRef v4 = AMFDRPlatformCopyDefaultClientIdByInterface(a1);
    if (v4) {
      AMSupportLogInternal();
    }
  }
  return v4;
}

uint64_t _AMFDRPlatformGetPrivateKeyStation(const __CFDictionary **cf, uint64_t a2)
{
  CFDataRef theData = 0;
  if (!a2) {
    goto LABEL_14;
  }
  if (!cf) {
    goto LABEL_14;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != AMFDRGetTypeID()) {
    goto LABEL_14;
  }
  uint64_t result = *(void *)a2;
  if (*(void *)a2) {
    return result;
  }
  CFDataRef v6 = (const __CFData *)_CFDictionaryCopyValue(cf[2], @"PrivateKey");
  CFDataRef theData = v6;
  if (v6) {
    goto LABEL_9;
  }
  if (!AMFDRLoadPersistent((uint64_t)cf, @"PrivateKeyFile", @"privatekey", (uint64_t)&theData)|| (CFDataGetBytePtr(theData), CFDataGetLength(theData), AMSupportRsaCreatePrivateKeyFromPEMBuffer()))
  {
LABEL_14:
    AMSupportLogInternal();
    goto LABEL_10;
  }
  CFDataRef v6 = theData;
LABEL_9:
  *(void *)a2 = CFRetain(v6);
LABEL_10:
  if (theData) {
    CFRelease(theData);
  }
  return *(void *)a2;
}

uint64_t _AMFDRPlatformDefaultCopyDefaultDataPathStation(const void *a1)
{
  return AMFDRPlatformCopyDefaultDataDirectoryAppendingPathComponent(a1);
}

__CFString *_AMFDRPlatformCopyOrganizationalUnitStation()
{
  return @"Stations";
}

uint64_t _AMFDRPlatformDefaultCopyRefKey(const __CFDictionary **cf, uint64_t a2)
{
  if (!a2) {
    goto LABEL_11;
  }
  if (!cf) {
    goto LABEL_11;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != AMFDRGetTypeID()) {
    goto LABEL_11;
  }
  CFDictionaryRef v5 = cf[2];
  if (!v5) {
    goto LABEL_11;
  }
  if (!*(void *)(a2 + 8))
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v5, @"RefKeyBlob");
    CFAllocatorRef v7 = CFGetAllocator(cf);
    if (Value)
    {
      CFDataRef v8 = AMFDRDeviceRefKeyCreateWithData(v7, Value);
      *(void *)(a2 + 8) = v8;
      if (!v8) {
LABEL_11:
      }
        AMSupportLogInternal();
    }
    else
    {
      CFIndex v9 = AMFDRDeviceRefKeyCreate(v7);
      *(void *)(a2 + 8) = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
  }
  return *(void *)(a2 + 8);
}

uint64_t AMFDRDiagnosticGenerateReport(const __CFDictionary *a1, CFTypeRef *a2, uint64_t a3)
{
  uint64_t v283 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  CFTypeRef v242 = 0;
  AMFDRSealingMapSetKeyQueryRetry(0);
  uint64_t EntriesForDevice = AMFDRSealingMapGetEntriesForDevice();
  if (!EntriesForDevice)
  {
    CFStringRef v195 = @"This device is not FDR supported";
LABEL_589:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDiagnosticGenerateReport", v195, v200);
LABEL_591:
    AMFDRSealingMapSetKeyQueryRetry(1);
LABEL_593:
    v203 = 0;
    CFArrayRef v204 = 0;
    CFStringRef v205 = 0;
    CFTypeRef v206 = 0;
    CFDictionaryRef v177 = 0;
    CFDictionaryRef v190 = 0;
    v191 = 0;
    uint64_t v147 = 0;
    CFTypeRef v212 = 0;
    CFDictionaryRef v137 = 0;
    uint64_t v193 = 0;
    goto LABEL_553;
  }
  if (!a2)
  {
    CFStringRef v195 = @"outReport is NULL";
    goto LABEL_589;
  }
  CFArrayRef v7 = (const __CFArray *)EntriesForDevice;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDiagnosticGenerateReport", @"Failed to allocate report.", v200);
    goto LABEL_591;
  }
  CFArrayRef theArray = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (!theArray)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDiagnosticGenerateReport", @"Failed to allocate dataFailedToReport.", v200);
    AMFDRSealingMapSetKeyQueryRetry(1);
    CFRelease(theDict);
    goto LABEL_593;
  }
  AMSupportLogInternal();
  CFDictionaryRef v207 = a1;
  CFIndex v9 = (CFDictionaryRef *)AMFDRCreateTypeWithOptions(v8, @"Local", a1);
  if ((AMFDRDataApTicketPopulate((uint64_t)v9) & 1) == 0) {
    AMSupportLogInternal();
  }
  uint64_t v10 = theArray;
  if (v9 && (CFDictionaryRef v11 = v9[2]) != 0) {
    CFDataRef v12 = (const __CFData *)CFDictionaryGetValue(v11, @"APTicket");
  }
  else {
    CFDataRef v12 = 0;
  }
  v202 = a2;
  if (AMFDRDataApTicketIsTrusted((uint64_t)v9, (uint64_t)v12))
  {
    CFStringRef v13 = @"Trusted";
  }
  else
  {
    int IsAppleSigned = _AMFDRApTicketIsAppleSigned(v12);
    CFAllocatorRef v15 = @"WarningMessage";
    if (IsAppleSigned) {
      CFAllocatorRef v15 = @"FailureReason";
    }
    CFDictionaryRef v16 = @"and is NOT Apple signed.";
    if (!IsAppleSigned) {
      CFDictionaryRef v16 = @"but is Apple signed.";
    }
    CFStringRef v13 = CFStringCreateWithFormat(v8, 0, @"%@: ApTicket is NOT trusted, %@", v15, v16);
  }
  CFDictionaryAddValue(theDict, @"ApTicket", v13);
  CFAllocatorRef allocator = v8;
  CFArrayRef v214 = v7;
  if (!v12) {
    goto LABEL_32;
  }
  unint64_t v279 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v277 = v17;
  long long v278 = v17;
  long long v275 = v17;
  long long v276 = v17;
  long long v273 = v17;
  long long v274 = v17;
  long long v271 = v17;
  long long v272 = v17;
  long long v269 = v17;
  long long v270 = v17;
  long long v267 = v17;
  long long v268 = v17;
  long long v265 = v17;
  long long v266 = v17;
  long long v263 = v17;
  long long v264 = v17;
  long long v261 = v17;
  long long v262 = v17;
  long long v259 = v17;
  long long v260 = v17;
  long long v257 = v17;
  long long v258 = v17;
  long long v255 = v17;
  long long v256 = v17;
  long long v253 = v17;
  long long v254 = v17;
  *(_OWORD *)values = v17;
  long long v252 = v17;
  CFDataGetBytePtr(v12);
  CFDataGetLength(v12);
  if (Img4DecodeInitManifest())
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyEntitlementsFromAPTicket", @"failed to parse AP ticket", v200);
LABEL_32:
    values[0] = @"EntitlementReadFailed";
    if (cf) {
      values[0] = (void *)CFStringCreateWithFormat(v8, 0, @"%@: %@", @"EntitlementReadFailed", cf);
    }
    CFArrayAppendValue(v10, @"Entitlements");
    CFArrayRef v23 = CFArrayCreate(v8, (const void **)values, 1, MEMORY[0x263EFFF70]);
    if (values[0]) {
      CFRelease(values[0]);
    }
    BOOL v218 = 0;
    goto LABEL_39;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyEntitlementsFromAPTicket", @"Failed to allocate entitlements", v200);
    goto LABEL_32;
  }
  CFMutableArrayRef v19 = Mutable;
  LOBYTE(url) = 0;
  uint64_t BytePtr = (void *)0xAAAAAAAAAAAAAAAALL;
  if (!_stringTagToDERTag(@"esca", &BytePtr))
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyEntitlementsFromAPTicket", @"_stringTagToDERTag failed for '%@'", (char)@"esca");
    CFRelease(v19);
    goto LABEL_32;
  }
  uint64_t v20 = @"esca";
  uint64_t v21 = 1;
  do
  {
    if (Img4DecodeGetBooleanFromSection()) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = url == 0;
    }
    if (v22) {
      AMSupportLogInternal();
    }
    else {
      CFArrayAppendValue(v19, v20);
    }
    if (v21 == 6)
    {
      CFArrayRef v24 = (const __CFArray *)CFRetain(v19);
      CFMutableArrayRef v25 = v19;
      CFArrayRef v23 = v24;
      CFRelease(v25);
      goto LABEL_38;
    }
    LOBYTE(url) = 0;
    uint64_t BytePtr = (void *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v20 = *(&kFDREntitlements + v21++);
  }
  while (_stringTagToDERTag(v20, &BytePtr));
  AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyEntitlementsFromAPTicket", @"_stringTagToDERTag failed for '%@'", (char)v20);
  CFRelease(v19);
  CFArrayRef v23 = 0;
  uint64_t v10 = theArray;
  if ((unint64_t)(v21 - 2) < 5) {
    goto LABEL_32;
  }
LABEL_38:
  v284.CFIndex length = CFArrayGetCount(v23);
  v284.CFIndex location = 0;
  BOOL v218 = CFArrayContainsValue(v23, v284, @"faus") != 0;
LABEL_39:
  CFDictionaryAddValue(theDict, @"Entitlements", v23);
  AMSupportLogInternal();
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFTypeRef v211 = AMFDRDataLocalCopyDataDirectoryPath(v9, (uint64_t)&cf);
  if (cf)
  {
    CFTypeRef v212 = _copyUnderlyingErrors((__CFError *)cf);
    AMSupportLogInternal();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  else
  {
    CFTypeRef v212 = 0;
  }
  CFArrayRef v204 = v23;
  CFStringRef v205 = v13;
  CFURLRef url = 0;
  values[0] = 0;
  uint64_t BytePtr = 0;
  CFTypeRef v249 = 0;
  v210 = v9;
  if (!v211)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyLocalFullKeys", @"localDataDirURL is NULL", v200);
    CFTypeRef v206 = 0;
    char v31 = 0;
    CFArrayRef v26 = 0;
LABEL_599:
    CFTypeID v27 = 0;
    goto LABEL_65;
  }
  CFArrayRef v26 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (!v26)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyLocalFullKeys", @"Failed to allocate localFullKeys", v200);
    CFTypeRef v206 = 0;
    char v31 = 0;
    goto LABEL_599;
  }
  CFTypeID v27 = (const void *)MEMORY[0x21D45AE10](v8, v211, 0, 0);
  if (v27)
  {
    CFTypeRef v206 = 0;
    while (1)
    {
      uint64_t v28 = MEMORY[0x21D45AE20](v27, &url, &v249);
      if (v28 == 2)
      {
        char v31 = 1;
        goto LABEL_65;
      }
      if (v28 == 3) {
        break;
      }
      CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
      if (PathComponent)
      {
        CFStringRef v30 = PathComponent;
        AMSupportLogInternal();
        if (values[0])
        {
          CFRelease(values[0]);
          values[0] = 0;
        }
        if (BytePtr)
        {
          CFRelease(BytePtr);
          uint64_t BytePtr = 0;
        }
        if (AMFDRDataLocalDecomposeFullKey(v8, v30, (CFTypeRef *)values, (CFTypeRef *)&BytePtr)
          && (CFStringGetLength((CFStringRef)values[0]) == 4
           || CFEqual((CFStringRef)values[0], @"minimal-manifest")))
        {
          CFArrayAppendValue(v26, v30);
          if (CFEqual((CFStringRef)values[0], @"seal"))
          {
            CFTypeRef v206 = (CFTypeRef)AMSupportSafeRetain();
            AMSupportLogInternal();
          }
        }
        CFRelease(v30);
      }
      CFIndex v9 = v210;
      if (v249)
      {
        CFRelease(v249);
        CFTypeRef v249 = 0;
      }
    }
    AMFDRErrorPushInternal((uint64_t)&cf, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyLocalFullKeys", @"Error enumerating %@, error: %@", (char)url);
    char v31 = 0;
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyLocalFullKeys", @"local data dir enumerator is NULL", v200);
    CFTypeRef v206 = 0;
    char v31 = 0;
  }
LABEL_65:
  CFArrayRef v208 = (const __CFArray *)AMSupportSafeRetain();
  if (v249)
  {
    CFRelease(v249);
    CFTypeRef v249 = 0;
  }
  if (values[0])
  {
    CFRelease(values[0]);
    values[0] = 0;
  }
  if (BytePtr)
  {
    CFRelease(BytePtr);
    uint64_t BytePtr = 0;
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v27) {
    CFRelease(v27);
  }
  if ((v31 & 1) == 0) {
    AMSupportLogInternal();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  int v32 = AMFDRSealingMapPopulateSealingManifest((uint64_t)v9, 0, (uint64_t)&cf);
  int v33 = (__CFError *)cf;
  CFAllocatorRef v34 = theArray;
  if (!v32 || cf)
  {
    if (v212)
    {
      CFRelease(v212);
      int v33 = (__CFError *)cf;
    }
    CFTypeRef v212 = _copyUnderlyingErrors(v33);
    AMSupportLogInternal();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  int v35 = AMFDRSealingMapPopulateMinimalSealingManifest(v9, 0, (uint64_t)&cf);
  CFTypeID v36 = (__CFError *)cf;
  if (!v35 || cf)
  {
    if (v212)
    {
      CFRelease(v212);
      CFTypeID v36 = (__CFError *)cf;
    }
    CFTypeRef v212 = _copyUnderlyingErrors(v36);
    AMSupportLogInternal();
  }
  AMSupportLogInternal();
  if (v9 && (CFDictionaryRef v37 = v9[2]) != 0) {
    CFDataRef v38 = (const __CFData *)CFDictionaryGetValue(v37, @"SealingManifest");
  }
  else {
    CFDataRef v38 = 0;
  }
  CFURLRef url = 0;
  values[0] = 0;
  uint64_t BytePtr = (void *)0xAAAAAAAAAAAAAAAALL;
  int Length = (__CFString *)0xAAAAAAAAAAAAAAAALL;
  values[1] = 0;
  *(void *)&long long v252 = 0;
  if (_copySealingManifestProperty(v38, @"time", &url)
    && url
    && (uint64_t BytePtr = (void *)CFDataGetBytePtr(url),
        int Length = (__CFString *)CFDataGetLength(url),
        !DERDecodeItem((uint64_t)&BytePtr, (unint64_t *)values)))
  {
    CFStringRef v39 = CFStringCreateWithBytes(v8, (const UInt8 *)values[1], v252, 0x8000100u, 0);
    if (v39)
    {
      CFLocaleRef v40 = CFLocaleCreate(v8, @"en_US");
      if (!v40)
      {
        CFDataRef v48 = (__CFString *)CFRetain(v39);
LABEL_110:
        CFAllocatorRef v34 = theArray;
        goto LABEL_111;
      }
      CFLocaleRef v41 = v40;
      CFTimeZoneRef v42 = CFTimeZoneCreateWithTimeIntervalFromGMT(v8, 0.0);
      int v43 = CFDateFormatterCreate(v8, v41, kCFDateFormatterShortStyle, kCFDateFormatterMediumStyle);
      int v44 = v43;
      if (v42 && v43)
      {
        CFDateFormatterSetFormat(v43, @"yyMMddHHmmss'Z'");
        CFDateFormatterSetProperty(v44, (CFStringRef)*MEMORY[0x263EFFC10], v42);
        DateFromCFStringRef String = CFDateFormatterCreateDateFromString(v8, v44, v39, 0);
        if (DateFromString)
        {
          CFDateRef v46 = DateFromString;
          CFDateFormatterSetFormat(v44, @"dd/MM/yyyy HH:mm:ss zzz");
          CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v8, v44, v46);
          CFRelease(v46);
        }
        else
        {
          CFStringRef StringWithDate = 0;
        }
        CFArrayRef v7 = v214;
      }
      else
      {
        CFStringRef StringWithDate = 0;
        CFDataRef v49 = 0;
        if (!v42)
        {
          if (!v44)
          {
LABEL_107:
            if (!v49) {
              CFDataRef v49 = (__CFString *)CFRetain(v39);
            }
            CFDataRef v48 = v49;
            CFRelease(v41);
            goto LABEL_110;
          }
LABEL_106:
          int v50 = v49;
          CFRelease(v44);
          CFDataRef v49 = v50;
          goto LABEL_107;
        }
      }
      CFRelease(v42);
      CFDataRef v49 = (__CFString *)StringWithDate;
      if (!v44) {
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    AMSupportLogInternal();
    CFDataRef v48 = 0;
  }
  else
  {
    AMSupportLogInternal();
    CFDataRef v48 = 0;
    CFStringRef v39 = 0;
  }
LABEL_111:
  if (url)
  {
    CFRelease(url);
    CFURLRef url = 0;
  }
  if (v39) {
    CFRelease(v39);
  }
  if (!v48)
  {
    CFArrayAppendValue(v34, @"SealDate");
    CFDataRef v48 = @"SealDateParseFail";
  }
  v203 = v48;
  CFDictionaryAddValue(theDict, @"SealDate", v48);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFURLRef url = 0;
  values[0] = 0;
  uint64_t BytePtr = 0;
  if (!v38)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopySealedFullKeysAndProperties", @"sealingManifest is NULL", v200);
    CFArrayRef v56 = 0;
LABEL_602:
    CFDictionaryRef v54 = v207;
    goto LABEL_140;
  }
  CFMutableArrayRef v51 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (!v51)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopySealedFullKeysAndProperties", @"Failed to allocate sealedFullKeys", v200);
    CFArrayRef v56 = 0;
    LOBYTE(v38) = 0;
    goto LABEL_602;
  }
  CFDataRef v52 = v51;
  if ((AMFDRSealingManifestCopyDataClassesInstancesAndProperties(v38, &v242, (CFTypeRef *)&BytePtr, (CFTypeRef *)&url, &cf) & 1) == 0)
  {
    CFStringRef v196 = @"AMFDRSealingManifestCopyDataClassesInstancesAndProperties failed";
LABEL_614:
    AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopySealedFullKeysAndProperties", v196, v200);
    CFArrayRef v56 = 0;
    LOBYTE(v38) = 0;
    CFDictionaryRef v54 = v207;
    goto LABEL_138;
  }
  if ((_createFullKeysForDataInstances(url, BytePtr, (CFTypeRef *)values) & 1) == 0)
  {
    CFStringRef v196 = @"_createFullKeysForDataInstances failed";
    goto LABEL_614;
  }
  if (values[0] && CFArrayGetCount((CFArrayRef)values[0]) >= 1)
  {
    CFArrayRef v53 = (const __CFArray *)values[0];
    v293.CFIndex length = CFArrayGetCount((CFArrayRef)values[0]);
    v293.CFIndex location = 0;
    CFArrayAppendArray(v52, v53, v293);
  }
  if (url)
  {
    CFRelease(url);
    CFURLRef url = 0;
  }
  if (values[0])
  {
    CFRelease(values[0]);
    values[0] = 0;
  }
  CFDictionaryRef v54 = v207;
  if (!AMFDRSealingManifestCopyMinimalManifestClassesAndInstances(v9, (uint64_t *)&url, 0, 0, &cf)
    || !url
    || CFArrayGetCount(url) < 1)
  {
    goto LABEL_137;
  }
  if (_createFullKeysForDataInstances(url, @"minimal-manifest", (CFTypeRef *)values))
  {
    if (values[0] && CFArrayGetCount((CFArrayRef)values[0]) >= 1)
    {
      CFArrayRef v55 = (const __CFArray *)values[0];
      v294.CFIndex length = CFArrayGetCount((CFArrayRef)values[0]);
      v294.CFIndex location = 0;
      CFArrayAppendArray(v52, v55, v294);
    }
LABEL_137:
    CFArrayRef v56 = (const __CFArray *)CFRetain(v52);
    LOBYTE(v38) = 1;
    goto LABEL_138;
  }
  AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopySealedFullKeysAndProperties", @"_createFullKeysForDataInstances failed", v200);
  CFArrayRef v56 = 0;
  LOBYTE(v38) = 0;
LABEL_138:
  CFRelease(v52);
  if (values[0])
  {
    CFRelease(values[0]);
    values[0] = 0;
  }
LABEL_140:
  if (BytePtr)
  {
    CFRelease(BytePtr);
    uint64_t BytePtr = 0;
  }
  if (url) {
    CFRelease(url);
  }
  unsigned int v57 = (__CFError *)cf;
  if (cf) {
    char v58 = 0;
  }
  else {
    char v58 = (char)v38;
  }
  if ((v58 & 1) == 0)
  {
    if (v212)
    {
      CFRelease(v212);
      unsigned int v57 = (__CFError *)cf;
    }
    CFTypeRef v212 = _copyUnderlyingErrors(v57);
    AMSupportLogInternal();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  CFTypeRef v248 = 0;
  CFTypeRef v249 = 0;
  CFTypeRef v246 = 0;
  CFTypeRef v247 = 0;
  CFTypeRef v244 = 0;
  CFTypeRef v245 = 0;
  CFArrayRef v201 = v56;
  if (!v208)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"localFullKeys is NULL", v200);
    CFDictionaryRef v137 = 0;
    CFArrayRef v56 = 0;
LABEL_604:
    CFBooleanRef v68 = 0;
    CFTypeRef v69 = 0;
    char v138 = 0;
    CFTypeRef v220 = 0;
    goto LABEL_419;
  }
  if (!v56)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"sealedFullKeys is NULL", v200);
    CFDictionaryRef v137 = 0;
    goto LABEL_604;
  }
  CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(v8, 0, v208);
  CFMutableArrayRef v60 = CFArrayCreateMutableCopy(v8, 0, v56);
  CFArrayRef v233 = MutableCopy;
  CFArrayRef v236 = v60;
  if (!MutableCopy || !v60)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"Failed to allocate localFullKeysToVerify/sealedFullKeysToVerify", v200);
    CFTypeRef v220 = 0;
    char v138 = 0;
    CFTypeRef v69 = 0;
    CFBooleanRef v68 = 0;
    CFArrayRef v56 = 0;
    CFDictionaryRef v140 = 0;
    CFDictionaryRef v137 = 0;
    if (MutableCopy) {
      goto LABEL_414;
    }
    goto LABEL_415;
  }
  CFTypeID v61 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef v62 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  CFMutableArrayRef v63 = CFArrayCreateMutable(v8, 0, v61);
  v229 = v62;
  v225 = v63;
  if (!v62 || !v63)
  {
    AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"Failed to allocate failureData/verifiedData", v200);
    CFTypeRef v220 = 0;
    CFDictionaryRef v221 = 0;
    char v138 = 0;
    CFTypeRef v69 = 0;
    CFBooleanRef v68 = 0;
    CFArrayRef v228 = 0;
    CFDictionaryRef v139 = 0;
    CFDictionaryRef v140 = 0;
    CFDictionaryRef v137 = 0;
    CFMutableArrayRef MutableCopy = v233;
    int v136 = v229;
    if (v229) {
      goto LABEL_406;
    }
    goto LABEL_407;
  }
  CFTypeID v64 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v221 = v64;
  if (!v64)
  {
    CFStringRef v197 = @"CFDictionaryCreateMutable failed for copyLocalDataOptions";
LABEL_620:
    AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", v197, v200);
    CFDictionaryRef v137 = 0;
    CFDictionaryRef v140 = 0;
    CFDictionaryRef v139 = 0;
    CFArrayRef v228 = 0;
    CFBooleanRef v68 = 0;
    CFTypeRef v69 = 0;
    char v138 = 0;
    CFTypeRef v220 = 0;
    CFMutableArrayRef MutableCopy = v233;
    int v136 = v229;
    goto LABEL_406;
  }
  uint64_t v65 = v64;
  _CFDictionaryAddDictionary(v64, v54);
  CFDictionarySetValue(v65, @"VerifyData", (const void *)*MEMORY[0x263EFFB40]);
  CFDictionarySetValue(v65, @"StripImg4", (const void *)*MEMORY[0x263EFFB38]);
  CFDictionaryRef v216 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], &kCFDictionaryValueCallBacksAllowNULL);
  if (!v216)
  {
    CFStringRef v197 = @"CFDictionaryCreateMutable failed for queryCache";
    goto LABEL_620;
  }
  v222 = (CFDictionaryRef *)AMFDRCreateTypeWithOptions(v8, @"Local", v54);
  if (CFArrayGetCount(v7) < 1)
  {
    CFTypeRef v220 = 0;
    CFTypeRef v69 = 0;
    CFBooleanRef v68 = 0;
    CFArrayRef v67 = 0;
    CFDictionaryRef v66 = 0;
LABEL_376:
    CFArrayRef v228 = v67;
    CFArrayRef v129 = v236;
    if (CFArrayGetCount(v236) >= 1)
    {
      CFIndex v130 = 0;
      uint64_t v131 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      do
      {
        if (v66) {
          CFRelease(v66);
        }
        if (v249)
        {
          CFRelease(v249);
          CFTypeRef v249 = 0;
        }
        if (v248)
        {
          CFRelease(v248);
          CFTypeRef v248 = 0;
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v129, v130);
        AMSupportLogInternal();
        if (AMFDRDataLocalDecomposeFullKey(allocator, ValueAtIndex, &v249, &v248))
        {
          *(_OWORD *)values = xmmword_2642D1780;
          uint64_t BytePtr = (void *)v248;
          int Length = @"Sealed key not found with live queries based on sealing map";
          CFDictionaryRef v66 = CFDictionaryCreate(allocator, (const void **)values, (const void **)&BytePtr, 2, MEMORY[0x263EFFF88], v131);
          _buildReportWithKeyAndMessage(v249, @"Sealed key not found with live queries based on sealing map", v66, v229, 0, theArray);
        }
        else
        {
          CFDictionaryRef v66 = 0;
        }
        v290.CFIndex length = CFArrayGetCount(v233);
        v290.CFIndex location = 0;
        FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v233, v290, ValueAtIndex);
        if (FirstIndexOfValue != -1) {
          CFArrayRemoveValueAtIndex(v233, FirstIndexOfValue);
        }
        ++v130;
        CFArrayRef v129 = v236;
      }
      while (v130 < CFArrayGetCount(v236));
    }
    if (CFArrayGetCount(v233) >= 1)
    {
      CFIndex v134 = 0;
      uint64_t v135 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      do
      {
        if (v66) {
          CFRelease(v66);
        }
        if (v249)
        {
          CFRelease(v249);
          CFTypeRef v249 = 0;
        }
        if (v248)
        {
          CFRelease(v248);
          CFTypeRef v248 = 0;
        }
        CFStringRef value = (const __CFString *)CFArrayGetValueAtIndex(v233, v134);
        AMSupportLogInternal();
        if (AMFDRDataLocalDecomposeFullKey(allocator, value, &v249, &v248))
        {
          *(_OWORD *)values = xmmword_2642D1790;
          uint64_t BytePtr = (void *)v248;
          int Length = @"Local data not sealed";
          CFDictionaryRef v66 = CFDictionaryCreate(allocator, (const void **)values, (const void **)&BytePtr, 2, MEMORY[0x263EFFF88], v135);
          _buildReportWithKeyAndMessage(v249, @"Local data not sealed", v66, v229, 0, theArray);
        }
        else
        {
          CFDictionaryRef v66 = 0;
        }
        ++v134;
      }
      while (v134 < CFArrayGetCount(v233));
    }
    *(_OWORD *)values = xmmword_2642D17A0;
    int v136 = v229;
    uint64_t BytePtr = v229;
    int Length = (__CFString *)v225;
    CFAllocatorRef v8 = allocator;
    CFDictionaryRef v137 = CFDictionaryCreate(allocator, (const void **)values, (const void **)&BytePtr, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v137) {
      AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"Failed to create outDataReport", v200);
    }
    CFMutableArrayRef MutableCopy = v233;
    char v138 = v222;
    goto LABEL_405;
  }
  CFDictionaryRef v66 = 0;
  CFArrayRef v67 = 0;
  CFBooleanRef v68 = 0;
  CFTypeRef v69 = 0;
  CFTypeRef v220 = 0;
  CFIndex v70 = 0;
  BOOL v71 = v218;
  if (v206) {
    BOOL v71 = 0;
  }
  BOOL v209 = v71;
  while (1)
  {
    CFIndex v217 = v70;
    CFDictionaryRef v72 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v70);
    CFDictionaryRef v73 = v72;
    if (!v72 || (CFTypeID v74 = CFGetTypeID(v72), v74 != CFDictionaryGetTypeID()))
    {
      CFArrayRef v228 = v67;
      AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"unexpected type sealingMapEntry: '%@'", (char)v73);
      goto LABEL_584;
    }
    CFStringRef v75 = (const __CFString *)CFDictionaryGetValue(v73, @"Tag");
    if (!v75)
    {
      CFArrayRef v228 = v67;
      AMFDRErrorPushInternal((uint64_t)&cf, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"Missing key '%@' in sealing map entry", (char)@"Tag");
      goto LABEL_584;
    }
    CFStringRef v76 = v75;
    v224 = CFDictionaryGetValue(v73, @"MinimalSealingManifest");
    v230 = (void *)CFStringCompare(v76, @"seal", 0);
    CFTypeRef v238 = CFDictionaryGetValue(v73, @"SubCCList");
    if (v244)
    {
      CFRelease(v244);
      CFTypeRef v244 = 0;
    }
    if (v220) {
      CFRelease(v220);
    }
    CFStringRef v77 = AMFDRSealingMapCopyDataInstanceForSealingMapEntry(v8, v73, v216, (uint64_t)&v247);
    CFTypeRef v244 = v77;
    if (!v77) {
      goto LABEL_217;
    }
    CFTypeID v78 = CFGetTypeID(v77);
    if (v78 != CFStringGetTypeID()) {
      break;
    }
    CFStringRef v79 = CFArrayCreate(v8, &v244, 1, MEMORY[0x263EFFF70]);
    if (v79) {
      goto LABEL_178;
    }
LABEL_217:
    AMSupportLogInternal();
    if (v66) {
      CFRelease(v66);
    }
    if (v68) {
      CFRelease(v68);
    }
    CFStringRef v87 = (__CFError *)v247;
    if (v247)
    {
      if (v69)
      {
        CFRelease(v69);
        CFStringRef v87 = (__CFError *)v247;
      }
      CFTypeRef v69 = _copyUnderlyingErrors(v87);
      CFBooleanRef v68 = (__CFString *)CFStringCreateWithFormat(v8, 0, @"%@: %@", @"MissingLiveData", v69);
      if (v247)
      {
        CFRelease(v247);
        CFTypeRef v247 = 0;
      }
    }
    else
    {
      CFBooleanRef v68 = @"MissingLiveData";
    }
    values[0] = @"FailureReason";
    uint64_t BytePtr = v68;
    CFDictionaryRef v66 = CFDictionaryCreate(v8, (const void **)values, (const void **)&BytePtr, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    _buildReportWithKeyAndMessage(v76, (uint64_t)v68, v66, v229, 0, theArray);
    CFTypeRef v220 = 0;
LABEL_228:
    CFIndex Count = CFArrayGetCount(v7);
    CFIndex v70 = v217 + 1;
    if (v217 + 1 >= Count) {
      goto LABEL_376;
    }
  }
  if (!v244) {
    goto LABEL_217;
  }
  CFTypeID v80 = CFGetTypeID(v244);
  if (v80 != CFArrayGetTypeID()) {
    goto LABEL_217;
  }
  CFStringRef v79 = (void *)CFRetain(v244);
  if (!v79) {
    goto LABEL_217;
  }
LABEL_178:
  CFTypeRef v220 = v79;
  if (v67) {
    CFRelease(v67);
  }
  CFMutableArrayRef v81 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (v81)
  {
    CFArrayRef v67 = v81;
    if (v246)
    {
      CFRelease(v246);
      CFTypeRef v246 = 0;
    }
    if ((_createFullKeysForDataInstances((CFArrayRef)v220, v76, &v246) & 1) == 0) {
      AMSupportLogInternal();
    }
    if (v246)
    {
      if (CFArrayGetCount((CFArrayRef)v246) >= 1)
      {
        CFArrayRef v82 = (const __CFArray *)v246;
        v295.CFIndex length = CFArrayGetCount((CFArrayRef)v246);
        v295.CFIndex location = 0;
        CFArrayAppendArray(v67, v82, v295);
      }
      if (v246)
      {
        CFRelease(v246);
        CFTypeRef v246 = 0;
      }
    }
    if (v245)
    {
      CFRelease(v245);
      CFTypeRef v245 = 0;
    }
    CFURLRef url = 0;
    values[0] = 0;
    uint64_t BytePtr = 0;
    CFTypeID v83 = CFGetTypeID(v73);
    if (v83 == CFDictionaryGetTypeID())
    {
      if (v222)
      {
        CFArrayRef v84 = (const __CFArray *)CFDictionaryGetValue(v73, @"MinimalSealingManifest");
        if (!v84)
        {
          int v86 = 1;
          goto LABEL_215;
        }
        CFArrayRef v85 = v84;
        if (_AMFDRSealingMapCopyDataClassesAndInstancesInternal(v222, v84, 1, 0, 0, 0, 0, 0, 0, (CFTypeRef *)values, (CFTypeRef *)&BytePtr, (CFTypeRef *)&url, 0, 0, (uint64_t)&v247))
        {
          if (values[0]
            && CFArrayGetCount((CFArrayRef)values[0]) >= 1
            && BytePtr
            && CFArrayGetCount((CFArrayRef)BytePtr) >= 1
            && (_createFullKeysForDataInstances((CFArrayRef)BytePtr, values[0], &v246) & 1) == 0)
          {
            CFStringRef v128 = @"_createFullKeysForDataInstances failed";
          }
          else
          {
            if (url && CFArrayGetCount(url) >= 1) {
              AMSupportLogInternal();
            }
            if (values[0])
            {
              CFRelease(values[0]);
              values[0] = 0;
            }
            if (BytePtr)
            {
              CFRelease(BytePtr);
              uint64_t BytePtr = 0;
            }
            if (_AMFDRSealingMapCopyDataClassesAndInstancesInternal(v222, v85, 1, @"RequiredToSeal", 0, 0, 0, 0, 0, (CFTypeRef *)values, (CFTypeRef *)&BytePtr, 0, 0, 0, (uint64_t)&v247))
            {
              if (values[0])
              {
                int v86 = 1;
                if (CFArrayGetCount((CFArrayRef)values[0]) >= 1
                  && BytePtr
                  && CFArrayGetCount((CFArrayRef)BytePtr) >= 1
                  && (_createFullKeysForDataInstances((CFArrayRef)BytePtr, values[0], &v245) & 1) == 0)
                {
                  AMSupportLogInternal();
                }
LABEL_215:
                if (values[0])
                {
                  CFRelease(values[0]);
                  values[0] = 0;
                }
              }
              else
              {
                int v86 = 1;
              }
              if (BytePtr)
              {
                CFRelease(BytePtr);
                uint64_t BytePtr = 0;
              }
              if (url) {
                CFRelease(url);
              }
              if (v86)
              {
                if (v246 && CFArrayGetCount((CFArrayRef)v246) >= 1)
                {
                  CFArrayRef v89 = (const __CFArray *)v246;
                  v296.CFIndex length = CFArrayGetCount((CFArrayRef)v246);
                  v296.CFIndex location = 0;
                  CFArrayAppendArray(v67, v89, v296);
                }
              }
              else
              {
                AMSupportLogInternal();
                if (v66) {
                  CFRelease(v66);
                }
                if (v68) {
                  CFRelease(v68);
                }
                CFDataRef v90 = (__CFError *)v247;
                if (v247)
                {
                  if (v69)
                  {
                    CFRelease(v69);
                    CFDataRef v90 = (__CFError *)v247;
                  }
                  CFTypeRef v69 = _copyUnderlyingErrors(v90);
                  CFBooleanRef v68 = (__CFString *)CFStringCreateWithFormat(v8, 0, @"%@: %@", @"MissingLiveData", v69);
                  if (v247)
                  {
                    CFRelease(v247);
                    CFTypeRef v247 = 0;
                  }
                }
                else
                {
                  CFBooleanRef v68 = @"MissingLiveData";
                }
                values[0] = @"FailureReason";
                uint64_t BytePtr = v68;
                CFDictionaryRef v66 = CFDictionaryCreate(v8, (const void **)values, (const void **)&BytePtr, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                _buildReportWithKeyAndMessage(@"minimal-manifest", (uint64_t)v68, v66, v229, 0, theArray);
              }
              if (CFArrayGetCount(v67) < 1) {
                goto LABEL_228;
              }
              CFIndex v91 = 0;
              BOOL v92 = v209;
              if (v230) {
                BOOL v92 = 0;
              }
              BOOL v219 = v92;
              CFDictionaryRef v226 = v73;
              CFArrayRef v227 = v67;
              while (2)
              {
                if (v66) {
                  CFRelease(v66);
                }
                if (v68) {
                  CFRelease(v68);
                }
                CFURLRef url = 0;
                CFTypeRef v243 = 0;
                CFStringRef v93 = (const __CFString *)CFArrayGetValueAtIndex(v67, v91);
                if (AMFDRDataLocalDecomposeFullKey(v8, v93, (CFTypeRef *)&url, &v243))
                {
                  AMSupportLogInternal();
                  LODWORD(v94) = AMFDRSealingMapEntryHasAttributeInternal(0, v73, @"RequiredToSeal", 0);
                  if (v230)
                  {
                    if (v224 && CFEqual((CFStringRef)url, @"minimal-manifest"))
                    {
                      CFDataRef v95 = AMFDRSealingMapCopyLocalMinimalManifestForInstance((const __CFString *)v243, (uint64_t)&v247);
                      CFArrayRef v94 = (const __CFArray *)v245;
                      if (v245)
                      {
                        v287.CFIndex length = CFArrayGetCount((CFArrayRef)v245);
                        v287.CFIndex location = 0;
                        LODWORD(v94) = CFArrayContainsValue(v94, v287, v93) != 0;
                      }
                    }
                    else
                    {
                      CFDataRef v95 = (const void *)AMFDRSealingMapCopyLocalData((__CFString *)url, (const __CFString *)v243, v221, (uint64_t)&v247);
                    }
                  }
                  else
                  {
                    AMFDRSealingMapVerifySealing(v222, (CFErrorRef *)&v247);
                    CFIndex v96 = CFArrayGetCount(v236);
                    char v97 = v218;
                    if (v96) {
                      char v97 = 1;
                    }
                    if ((v97 & 1) == 0) {
                      AMFDRErrorPushInternal((uint64_t)&v247, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"No sealed key found and allowUnSeal is false", v200);
                    }
                    CFDataRef v95 = 0;
                  }
                  CFAllocatorRef v98 = (__CFError *)v247;
                  if (v247)
                  {
                    if (v69)
                    {
                      CFRelease(v69);
                      CFAllocatorRef v98 = (__CFError *)v247;
                    }
                    CFTypeRef v99 = _copyUnderlyingErrors(v98);
                    v285.CFIndex length = CFArrayGetCount(v236);
                    v285.CFIndex location = 0;
                    if (CFArrayContainsValue(v236, v285, v93))
                    {
                      CFBooleanRef v68 = (__CFString *)CFStringCreateWithFormat(v8, 0, @"%@: %@", @"DataFailedVerification", v99);
                      *(_OWORD *)values = xmmword_2642D1760;
                      uint64_t BytePtr = (void *)v243;
                      int Length = v68;
                    }
                    else
                    {
                      if (v230) {
                        int v103 = (int)v94;
                      }
                      else {
                        int v103 = 1;
                      }
                      if (v103 == 1)
                      {
                        CFBooleanRef v68 = (__CFString *)CFStringCreateWithFormat(v8, 0, @"%@: %@", @"SealedDataMissing", v99);
                        CFDataRef v104 = @"FailureReason";
                      }
                      else
                      {
                        CFDataRef v104 = @"WarningMessage";
                        CFBooleanRef v68 = @"Key is not required to seal";
                      }
                      values[0] = @"LiveInstance";
                      values[1] = v104;
                      uint64_t BytePtr = (void *)v243;
                      int Length = v68;
                    }
                    CFDictionaryRef v100 = CFDictionaryCreate(v8, (const void **)values, (const void **)&BytePtr, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                    CFTypeRef v69 = v99;
                    if (v247)
                    {
                      CFDictionaryRef v120 = v100;
                      CFRelease(v247);
                      CFDictionaryRef v100 = v120;
                      CFTypeRef v101 = 0;
                      CFTypeRef v102 = 0;
                      CFTypeRef v247 = 0;
                    }
                    else
                    {
                      CFTypeRef v101 = 0;
                      CFTypeRef v102 = 0;
                    }
                    goto LABEL_338;
                  }
                  if (v219)
                  {
                    *(_OWORD *)values = xmmword_2642D1770;
                    uint64_t BytePtr = (void *)v243;
                    int Length = @"Unit is not sealed";
                    CFDictionaryRef v100 = CFDictionaryCreate(v8, (const void **)values, (const void **)&BytePtr, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                    CFTypeRef v101 = 0;
                    CFTypeRef v102 = 0;
                    CFBooleanRef v68 = 0;
                    goto LABEL_338;
                  }
                  values[0] = @"LiveInstance";
                  uint64_t BytePtr = (void *)v243;
                  CFDictionaryRef v105 = CFDictionaryCreate(v8, (const void **)values, (const void **)&BytePtr, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                  CFDictionaryRef v100 = v105;
                  CFTypeRef v101 = 0;
                  if (!v238 || !v95)
                  {
                    CFTypeRef v102 = 0;
                    CFBooleanRef v68 = 0;
                    goto LABEL_332;
                  }
                  CFDictionaryRef v215 = v105;
                  CFTypeID v106 = CFGetTypeID(v238);
                  if (v106 == CFArrayGetTypeID())
                  {
                    CFTypeID v107 = CFGetTypeID(v95);
                    if (v107 == CFDataGetTypeID())
                    {
                      if (v222)
                      {
                        CFMutableArrayRef v108 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
                        if (!v108)
                        {
                          AMFDRErrorPushInternal((uint64_t)&v247, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyAndVerifySubCC", @"failed to allocate missingSubCCList", v200);
                          CFTypeRef v101 = 0;
                          CFTypeRef v102 = 0;
                          goto LABEL_358;
                        }
                        uint64_t v109 = AMFDRDataDictCreateFromData((uint64_t)v222, (const __CFData *)v95, 0, 0);
                        CFArrayRef v110 = (const __CFArray *)v238;
                        if (!v109)
                        {
                          AMFDRErrorPushInternal((uint64_t)&v247, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyAndVerifySubCC", @"AMFDRDataDictCreateFromData failed", v200);
                          goto LABEL_357;
                        }
                        if (CFArrayGetCount((CFArrayRef)v238) < 1)
                        {
LABEL_298:
                          CFArrayRef v119 = *(const __CFArray **)(v109 + 32);
                          if (v119 && CFArrayGetCount(v119) >= 1) {
                            CFTypeRef v101 = CFRetain(*(CFTypeRef *)(v109 + 32));
                          }
                          else {
                            CFTypeRef v101 = 0;
                          }
                          if (CFArrayGetCount(v108) < 1) {
                            CFTypeRef v102 = 0;
                          }
                          else {
                            CFTypeRef v102 = CFRetain(v108);
                          }
                          int v121 = 1;
                        }
                        else
                        {
                          CFIndex v111 = 0;
                          while (1)
                          {
                            CFDictionaryRef v112 = (const __CFDictionary *)CFArrayGetValueAtIndex(v110, v111);
                            CFDictionaryRef v113 = v112;
                            if (!v112 || (CFTypeID v114 = CFGetTypeID(v112), v114 != CFDictionaryGetTypeID()))
                            {
                              AMFDRErrorPushInternal((uint64_t)&v247, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyAndVerifySubCC", @"Unexpected type for subCCListEntry: '%@'", (char)v113);
                              goto LABEL_357;
                            }
                            uint64_t v115 = CFDictionaryGetValue(v113, @"Tag");
                            uint64_t v116 = v115;
                            if (!v115) {
                              break;
                            }
                            CFTypeID v117 = CFGetTypeID(v115);
                            if (v117 != CFStringGetTypeID()) {
                              break;
                            }
                            if (AMFDRSealingMapEntryHasAttributeInternal(0, v113, @"RequiredToSeal", 0))
                            {
                              CFArrayRef v118 = *(const __CFArray **)(v109 + 32);
                              if (!v118
                                || (v286.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(v109 + 32)),
                                    v286.CFIndex location = 0,
                                    !CFArrayContainsValue(v118, v286, v116)))
                              {
                                CFArrayAppendValue(v108, v116);
                              }
                            }
                            ++v111;
                            CFArrayRef v110 = (const __CFArray *)v238;
                            if (v111 >= CFArrayGetCount((CFArrayRef)v238)) {
                              goto LABEL_298;
                            }
                          }
                          AMFDRErrorPushInternal((uint64_t)&v247, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyAndVerifySubCC", @"Unexpected type for subCCDataClass: %@", (char)v116);
LABEL_357:
                          CFTypeRef v101 = 0;
                          CFTypeRef v102 = 0;
LABEL_358:
                          int v121 = 0;
                        }
                        AMSupportSafeRelease();
                        AMSupportSafeRelease();
                        if (v121)
                        {
                          uint64_t v122 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                          if (v122)
                          {
                            int v123 = v122;
                            if (v101) {
                              CFDictionaryAddValue(v122, @"SubCCList", v101);
                            }
                            if (v102)
                            {
                              CFBooleanRef v68 = (__CFString *)CFStringCreateWithFormat(allocator, 0, @"%@: %@", @"SealedSubCCMissing", v102);
                              if (v68) {
                                CFDictionaryAddValue(v123, @"FailureReason", v68);
                              }
                              else {
                                AMFDRErrorPushInternal((uint64_t)&v247, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"failed to report missingSubCCList: %@", (char)v102);
                              }
                            }
                            else
                            {
                              CFBooleanRef v68 = 0;
                            }
                            if (CFDictionaryGetCount(v123) >= 1 && _CFDictionaryAddDictionary(v123, v215))
                            {
                              if (v215) {
                                CFRelease(v215);
                              }
                              CFRetain(v123);
                              CFDictionaryRef v215 = v123;
                            }
                            CFRelease(v123);
LABEL_331:
                            CFAllocatorRef v8 = allocator;
                            CFDictionaryRef v100 = v215;
LABEL_332:
                            CFStringRef v124 = (__CFError *)v247;
                            if (v247)
                            {
                              CFDictionaryRef v125 = v100;
                              if (v69)
                              {
                                CFRelease(v69);
                                CFStringRef v124 = (__CFError *)v247;
                              }
                              CFTypeRef v69 = _copyUnderlyingErrors(v124);
                              AMSupportLogInternal();
                              if (v247)
                              {
                                CFRelease(v247);
                                CFTypeRef v247 = 0;
                              }
                              CFDictionaryRef v100 = v125;
                            }
LABEL_338:
                            CFDictionaryRef v66 = v100;
                            _buildReportWithKeyAndMessage(url, (uint64_t)v68, v100, v229, v225, theArray);
                            v288.CFIndex length = CFArrayGetCount(v233);
                            v288.CFIndex location = 0;
                            CFIndex v126 = CFArrayGetFirstIndexOfValue(v233, v288, v93);
                            if (v126 != -1) {
                              CFArrayRemoveValueAtIndex(v233, v126);
                            }
                            v289.CFIndex length = CFArrayGetCount(v236);
                            v289.CFIndex location = 0;
                            CFIndex v127 = CFArrayGetFirstIndexOfValue(v236, v289, v93);
                            if (v127 != -1) {
                              CFArrayRemoveValueAtIndex(v236, v127);
                            }
                            if (v95) {
                              CFRelease(v95);
                            }
                            if (url)
                            {
                              CFRelease(url);
                              CFURLRef url = 0;
                            }
                            CFDictionaryRef v73 = v226;
                            if (v243)
                            {
                              CFRelease(v243);
                              CFTypeRef v243 = 0;
                            }
                            if (v101) {
                              CFRelease(v101);
                            }
                            if (v102) {
                              CFRelease(v102);
                            }
                            CFArrayRef v67 = v227;
LABEL_353:
                            if (++v91 >= CFArrayGetCount(v67))
                            {
                              CFArrayRef v7 = v214;
                              goto LABEL_228;
                            }
                            continue;
                          }
                          AMFDRErrorPushInternal((uint64_t)&v247, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"failed to create subCCReportDetails", v200);
                        }
                        CFBooleanRef v68 = 0;
                        goto LABEL_331;
                      }
                      AMFDRErrorPushInternal((uint64_t)&v247, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyAndVerifySubCC", @"amfdr is NULL", v200);
                    }
                    else
                    {
                      AMFDRErrorPushInternal((uint64_t)&v247, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyAndVerifySubCC", @"unexpected type for localManifestData: %@", (char)v95);
                    }
                  }
                  else
                  {
                    AMFDRErrorPushInternal((uint64_t)&v247, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyAndVerifySubCC", @"unexpected type for sealingMapSubCCList: %@", (char)v238);
                  }
                  CFTypeRef v101 = 0;
                  CFTypeRef v102 = 0;
                  goto LABEL_358;
                }
                break;
              }
              AMSupportLogInternal();
              CFBooleanRef v68 = 0;
              CFDictionaryRef v66 = 0;
              goto LABEL_353;
            }
            CFStringRef v128 = @"_AMFDRSealingMapCopyDataClassesAndInstancesInternal for required to seal attribute failed";
          }
        }
        else
        {
          CFStringRef v128 = @"_AMFDRSealingMapCopyDataClassesAndInstancesInternal failed";
        }
        AMFDRErrorPushInternal((uint64_t)&v247, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyMinimalSealingManifestFullKeysForSealingMapEntry", v128, v200);
LABEL_373:
        int v86 = 0;
        goto LABEL_215;
      }
      CFStringRef format = @"amfdr is NULL";
    }
    else
    {
      CFStringRef format = @"unexpected type sealingMapEntry: '%@'";
      char v200 = (char)v73;
    }
    AMFDRErrorPushInternal((uint64_t)&v247, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCopyMinimalSealingManifestFullKeysForSealingMapEntry", format, v200);
    goto LABEL_373;
  }
  AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreateDataReport", @"Failed to allocate currLiveFullKeys", v200);
  CFArrayRef v228 = 0;
LABEL_584:
  CFDictionaryRef v137 = 0;
  CFMutableArrayRef MutableCopy = v233;
  char v138 = v222;
  int v136 = v229;
LABEL_405:
  CFDictionaryRef v139 = v216;
  CFDictionaryRef v140 = v66;
  if (v136)
  {
LABEL_406:
    CFAllocatorRef v141 = v136;
    CFDictionaryRef v142 = v140;
    CFRelease(v141);
    CFDictionaryRef v140 = v142;
  }
LABEL_407:
  CFDictionaryRef v143 = v140;
  if (v225)
  {
    CFRelease(v225);
    CFDictionaryRef v140 = v143;
  }
  CFArrayRef v56 = v228;
  if (v221)
  {
    CFRelease(v221);
    CFDictionaryRef v140 = v143;
  }
  if (v139)
  {
    CFRelease(v139);
    CFDictionaryRef v140 = v143;
  }
  if (MutableCopy)
  {
LABEL_414:
    CFMutableArrayRef v144 = MutableCopy;
    CFDictionaryRef v145 = v140;
    CFRelease(v144);
    CFDictionaryRef v140 = v145;
  }
LABEL_415:
  if (v236)
  {
    CFDictionaryRef v146 = v140;
    CFRelease(v236);
    CFDictionaryRef v140 = v146;
  }
  if (v140) {
    CFRelease(v140);
  }
LABEL_419:
  if (v249)
  {
    CFRelease(v249);
    CFTypeRef v249 = 0;
  }
  if (v248)
  {
    CFRelease(v248);
    CFTypeRef v248 = 0;
  }
  if (v138) {
    CFRelease(v138);
  }
  if (v247)
  {
    CFRelease(v247);
    CFTypeRef v247 = 0;
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v246)
  {
    CFRelease(v246);
    CFTypeRef v246 = 0;
  }
  if (v220) {
    CFRelease(v220);
  }
  if (v245)
  {
    CFRelease(v245);
    CFTypeRef v245 = 0;
  }
  if (v244)
  {
    CFRelease(v244);
    CFTypeRef v244 = 0;
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v69) {
    CFRelease(v69);
  }
  uint64_t v147 = v210;
  if (v137 && (CFTypeID v148 = CFGetTypeID(v137), v148 == CFDictionaryGetTypeID())) {
    _CFDictionaryAddDictionary(theDict, v137);
  }
  else {
    AMSupportLogInternal();
  }
  CFArrayRef v149 = theArray;
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFDictionaryRef v239 = (const __CFDictionary *)v242;
  CFTypeRef v249 = 0;
  CFURLRef url = 0;
  unint64_t v150 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef v151 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  CFMutableArrayRef v152 = CFArrayCreateMutable(v8, 0, v150);
  char v153 = 0;
  CFStringRef v154 = @"Failed to allocate verifiedProperties/failureProperties";
  v240 = v152;
  CFTypeRef v155 = 0;
  CFDictionaryRef v156 = 0;
  if (!v151 || !v152) {
    goto LABEL_606;
  }
  int key = v151;
  char v153 = AMFDRCreateTypeWithOptions(allocator, @"Local", v207);
  CFArrayRef v234 = v137;
  if ((AMFDRSealingMapVerifySealingManifestPropertiesInternal(v153, 0, (CFTypeRef *)&url, (uint64_t)&v249) & 1) == 0
    && !url)
  {
    AMSupportLogInternal();
    CFArrayAppendValue(theArray, @"Properties");
    CFTypeRef v155 = 0;
    CFDictionaryRef v156 = 0;
    goto LABEL_501;
  }
  if (!v249)
  {
    CFTypeRef v155 = 0;
    CFDictionaryRef v157 = v239;
    if (v239) {
      goto LABEL_456;
    }
    goto LABEL_466;
  }
  CFTypeRef v155 = _copyUnderlyingErrors((__CFError *)v249);
  AMSupportLogInternal();
  CFDictionaryRef v157 = v239;
  if (v249)
  {
    CFRelease(v249);
    CFTypeRef v249 = 0;
  }
  if (!v239)
  {
LABEL_466:
    CFDictionaryRef v156 = 0;
    goto LABEL_472;
  }
LABEL_456:
  CFIndex v158 = CFDictionaryGetCount(v157);
  CFDataRef v159 = (const void **)malloc_type_malloc(8 * v158, 0x80040B8603338uLL);
  CFDataRef v160 = (const void **)malloc_type_malloc(8 * v158, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(v157, v159, v160);
  v237 = v160;
  v231 = v159;
  CFDictionaryRef v161 = 0;
  if (v158 < 1)
  {
    CFDictionaryRef v156 = 0;
    if (v159) {
      goto LABEL_468;
    }
  }
  else
  {
    CFDataRef v162 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    CFDataRef v163 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    CFStringRef v164 = (void **)v160;
    do
    {
      CFArrayRef v165 = url;
      if (!url || (v291.CFIndex length = CFArrayGetCount(url), v291.location = 0, !CFArrayContainsValue(v165, v291, *v159)))
      {
        if (v161) {
          CFRelease(v161);
        }
        values[0] = @"LiveProperty";
        uint64_t BytePtr = *v164;
        CFDictionaryRef v161 = CFDictionaryCreate(allocator, (const void **)values, (const void **)&BytePtr, 1, v162, v163);
        _buildReportWithKeyAndMessage(*v159, @"VerifiedProperties", v161, 0, key, theArray);
      }
      ++v159;
      ++v164;
      --v158;
    }
    while (v158);
LABEL_468:
    free(v231);
    CFDictionaryRef v156 = v161;
  }
  if (v237) {
    free(v237);
  }
  CFArrayRef v149 = theArray;
  CFDictionaryRef v157 = v239;
LABEL_472:
  if (url && CFArrayGetCount(url) >= 1)
  {
    CFIndex v166 = 0;
    do
    {
      if (v156) {
        CFRelease(v156);
      }
      CFStringRef v167 = (const __CFString *)CFArrayGetValueAtIndex(url, v166);
      BOOL HasAttribute = AMFDRSealingMapPropertyHasAttribute((uint64_t)v153, v167, @"Required", 0);
      if (v157) {
        v169 = (__CFString *)CFDictionaryGetValue(v157, v167);
      }
      else {
        v169 = 0;
      }
      unsigned int v170 = (__CFString *)AMFDRSealingMapCopyPropertyWithTag(v153, v167, (uint64_t)&v249);
      v171 = (__CFError *)v249;
      if (v249)
      {
        if (v155)
        {
          CFRelease(v155);
          v171 = (__CFError *)v249;
        }
        CFTypeRef v155 = _copyUnderlyingErrors(v171);
        AMSupportLogInternal();
        if (v249)
        {
          CFRelease(v249);
          CFTypeRef v249 = 0;
        }
      }
      if (v170 || v169)
      {
        CFStringRef v173 = @"PropertyMismatched";
      }
      else
      {
        BOOL v172 = !HasAttribute;
        CFStringRef v173 = @"PropertyMismatched";
        if (!v172) {
          CFStringRef v173 = CFStringCreateWithFormat(allocator, 0, @"%@: Property is required", @"PropertyMismatched");
        }
      }
      *(_OWORD *)values = xmmword_2642D17B0;
      *(void *)&long long v252 = @"FailureReason";
      if (v170) {
        CFDataRef v174 = v170;
      }
      else {
        CFDataRef v174 = @"(NULL)";
      }
      if (v169) {
        v175 = v169;
      }
      else {
        v175 = @"(NULL)";
      }
      uint64_t BytePtr = v174;
      int Length = v175;
      CFStringRef v282 = v173;
      CFDictionaryRef v156 = CFDictionaryCreate(allocator, (const void **)values, (const void **)&BytePtr, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      _buildReportWithKeyAndMessage(v167, (uint64_t)v173, v156, v240, 0, theArray);
      if (v173) {
        CFRelease(v173);
      }
      if (v170) {
        CFRelease(v170);
      }
      ++v166;
      CFArrayRef v149 = theArray;
      CFDictionaryRef v157 = v239;
    }
    while (v166 < CFArrayGetCount(url));
  }
LABEL_501:
  *(_OWORD *)values = xmmword_2642D17C8;
  CFMutableArrayRef v151 = key;
  uint64_t BytePtr = v240;
  int Length = (__CFString *)key;
  CFDictionaryRef v176 = CFDictionaryCreate(allocator, (const void **)values, (const void **)&BytePtr, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v176)
  {
    CFDictionaryRef v177 = v176;
    uint64_t v147 = v210;
    CFDictionaryRef v137 = v234;
    goto LABEL_503;
  }
  CFStringRef v154 = @"Failed to create outPropertyReport";
  uint64_t v147 = v210;
  CFDictionaryRef v137 = v234;
LABEL_606:
  AMFDRErrorPushInternal((uint64_t)&cf, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDiagnosticCreatePropertiesReport", v154, v200);
  CFDictionaryRef v177 = 0;
LABEL_503:
  if (v240) {
    CFRelease(v240);
  }
  if (v151) {
    CFRelease(v151);
  }
  if (url)
  {
    CFRelease(url);
    CFURLRef url = 0;
  }
  if (v156) {
    CFRelease(v156);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v249)
  {
    CFRelease(v249);
    CFTypeRef v249 = 0;
  }
  if (v155) {
    CFRelease(v155);
  }
  if (v177 && (CFTypeID v178 = CFGetTypeID(v177), v178 == CFDictionaryGetTypeID()))
  {
    _CFDictionaryAddDictionary(theDict, v177);
    CFAllocatorRef v179 = allocator;
  }
  else
  {
    v292.CFIndex length = CFArrayGetCount(v149);
    v292.CFIndex location = 0;
    CFAllocatorRef v179 = allocator;
    if (CFArrayContainsValue(v149, v292, @"Properties")) {
      CFArrayAppendValue(v149, @"Properties");
    }
    AMSupportLogInternal();
  }
  if (v147 && v147[2] && (CFMutableArrayRef v180 = CFArrayCreateMutable(v179, 0, MEMORY[0x263EFFF70])) != 0)
  {
    v181 = v180;
    CFArrayRef v182 = v149;
    CFDataRef v183 = (const __CFData *)CFDictionaryGetValue(v147[2], @"SealingManifest");
    if (v183)
    {
      CFDataRef v184 = v183;
      CFArrayRef v185 = CFArrayCreate(v179, (const void **)&sealingManifestPropertyTagsToQuery, 3, MEMORY[0x263EFFF70]);
      CFDictionaryRef ManifestPropertyValueDict = _createManifestPropertyValueDict(v184, v185, @"seal");
      if (ManifestPropertyValueDict) {
        CFArrayAppendValue(v181, ManifestPropertyValueDict);
      }
    }
    else
    {
      CFDictionaryRef ManifestPropertyValueDict = 0;
      CFArrayRef v185 = 0;
    }
    CFDictionaryRef v187 = (const __CFDictionary *)CFDictionaryGetValue(v147[2], @"MinimalSealingManifests");
    if (v187)
    {
      CFDictionaryRef v188 = v187;
      CFTypeID v189 = CFGetTypeID(v187);
      if (v189 == CFDictionaryGetTypeID())
      {
        CFAllocatorRef v179 = allocator;
        if (CFDictionaryGetCount(v188) >= 1)
        {
          if (v185) {
            CFRelease(v185);
          }
          CFArrayRef v185 = CFArrayCreate(allocator, (const void **)&minimalManifestPropertyTagsToQuery, 3, MEMORY[0x263EFFF70]);
          values[0] = @"minimal-manifest";
          values[1] = v185;
          *(void *)&long long v252 = v181;
          CFDictionaryApplyFunction(v188, (CFDictionaryApplierFunction)_findAndAppendManifestPropertyValueDicts, values);
        }
      }
      else
      {
        CFAllocatorRef v179 = allocator;
      }
    }
    if (CFArrayGetCount(v181) < 1)
    {
      CFDictionaryRef v190 = 0;
    }
    else
    {
      values[0] = @"OtherData";
      uint64_t BytePtr = v181;
      CFDictionaryRef v190 = CFDictionaryCreate(v179, (const void **)values, (const void **)&BytePtr, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    }
    v191 = v211;
    CFRelease(v181);
    if (v185) {
      CFRelease(v185);
    }
    if (ManifestPropertyValueDict) {
      CFRelease(ManifestPropertyValueDict);
    }
    if (v190)
    {
      CFTypeID v192 = CFGetTypeID(v190);
      CFArrayRef v149 = v182;
      if (v192 == CFDictionaryGetTypeID()) {
        _CFDictionaryAddDictionary(theDict, v190);
      }
    }
    else
    {
      CFArrayRef v149 = v182;
    }
  }
  else
  {
    AMSupportLogInternal();
    CFDictionaryRef v190 = 0;
    v191 = v211;
  }
  CFDictionaryAddValue(theDict, @"DataFailedToReport", v149);
  CFTypeRef *v202 = CFRetain(theDict);
  AMFDRSealingMapSetKeyQueryRetry(1);
  CFRelease(theDict);
  if (v208) {
    CFRelease(v208);
  }
  if (v201) {
    CFRelease(v201);
  }
  CFRelease(v149);
  uint64_t v193 = 1;
LABEL_553:
  if (v242)
  {
    CFRelease(v242);
    CFTypeRef v242 = 0;
  }
  if (v204) {
    CFRelease(v204);
  }
  if (v206) {
    CFRelease(v206);
  }
  if (v191) {
    CFRelease(v191);
  }
  if (v203) {
    CFRelease(v203);
  }
  if (v147) {
    CFRelease(v147);
  }
  if (v177) {
    CFRelease(v177);
  }
  if (v137) {
    CFRelease(v137);
  }
  if (v190) {
    CFRelease(v190);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v212) {
    CFRelease(v212);
  }
  if (v205) {
    CFRelease(v205);
  }
  return v193;
}

CFTypeRef _copyUnderlyingErrors(__CFError *a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (Mutable)
  {
    CFAllocatorRef v3 = Mutable;
    if (a1)
    {
      CFTypeID v4 = (const void *)*MEMORY[0x263EFFC48];
      CFDictionaryRef v5 = (const void *)*MEMORY[0x263EFFC88];
      do
      {
        CFIndex Code = CFErrorGetCode(a1);
        CFErrorDomain Domain = CFErrorGetDomain(a1);
        CFDictionaryRef v8 = CFErrorCopyUserInfo(a1);
        CFDictionaryRef v9 = v8;
        if (v8)
        {
          CFDataRef Value = CFDictionaryGetValue(v8, v4);
          a1 = (__CFError *)CFDictionaryGetValue(v9, v5);
        }
        else
        {
          a1 = 0;
          CFDataRef Value = 0;
        }
        if (CFStringGetLength(v3)) {
          CFStringAppendFormat(v3, 0, @"; Domain=%@ Description=%@ code=%ld", Domain, Value, Code);
        }
        else {
          CFStringAppendFormat(v3, 0, @"Domain=%@ Description=%@ code=%ld", Domain, Value, Code);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
      while (a1);
    }
    if (CFStringGetLength(v3) < 1) {
      CFTypeRef v11 = 0;
    }
    else {
      CFTypeRef v11 = CFRetain(v3);
    }
    CFRelease(v3);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
  return v11;
}

BOOL _stringTagToDERTag(CFStringRef theString, void *a2)
{
  if (theString
    && (CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x263EFFB08], theString, 0x8000100u, 0x5Fu)) != 0)
  {
    CFDataRef v4 = ExternalRepresentation;
    CFIndex Length = CFDataGetLength(ExternalRepresentation);
    BOOL v6 = Length == 4;
    if (Length == 4)
    {
      uint64_t BytePtr = (unsigned int *)CFDataGetBytePtr(v4);
      *a2 = AMFDRTagsStringToTag(BytePtr);
    }
    else
    {
      AMSupportLogInternal();
    }
    CFRelease(v4);
  }
  else
  {
    AMSupportLogInternal();
    return 0;
  }
  return v6;
}

uint64_t _copySealingManifestProperty(const __CFData *a1, const __CFString *a2, CFDataRef *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (a3)
    {
      unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v36 = v6;
      long long v37 = v6;
      long long v34 = v6;
      long long v35 = v6;
      long long v32 = v6;
      long long v33 = v6;
      long long v30 = v6;
      long long v31 = v6;
      long long v28 = v6;
      long long v29 = v6;
      long long v26 = v6;
      long long v27 = v6;
      long long v24 = v6;
      long long v25 = v6;
      long long v22 = v6;
      long long v23 = v6;
      long long v20 = v6;
      long long v21 = v6;
      long long v18 = v6;
      long long v19 = v6;
      long long v17 = v6;
      long long v15 = v6;
      long long v16 = v6;
      long long v13 = v6;
      long long v14 = v6;
      long long v11 = v6;
      long long v12 = v6;
      long long v10 = v6;
      CFDataGetBytePtr(a1);
      CFDataGetLength(a1);
      if (!Img4DecodeInitManifest())
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
        if (_stringTagToDERTag(a2, &v9))
        {
          Objectuint64_t PropertyData = Img4DecodeGetObjectPropertyData();
          if (!ObjectPropertyData)
          {
            *a3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)0xAAAAAAAAAAAAAAAALL, 0xAAAAAAAAAAAAAAAALL);
            return 1;
          }
          if (ObjectPropertyData == 1)
          {
            AMSupportLogInternal();
            return 1;
          }
        }
      }
    }
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t _createFullKeysForDataInstances(CFArrayRef theArray, const void *a2, CFTypeRef *a3)
{
  if (!a3
    || !theArray
    || CFArrayGetCount(theArray) <= 0
    || !a2
    || (CFTypeID v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()) && (v7 = CFGetTypeID(a2), v7 != CFArrayGetTypeID())
    || (CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08],
        (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70])) == 0))
  {
    AMSupportLogInternal();
    return 0;
  }
  CFMutableArrayRef v10 = Mutable;
  CFTypeID v11 = CFGetTypeID(a2);
  if (v11 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
    if (Count != CFArrayGetCount(theArray))
    {
      AMSupportLogInternal();
      CFRelease(v10);
      return 0;
    }
  }
  if (CFArrayGetCount(theArray) < 1)
  {
    CFStringRef FullKey = 0;
  }
  else
  {
    CFIndex v13 = 0;
    long long v14 = 0;
    CFStringRef FullKey = 0;
    do
    {
      if (FullKey) {
        CFRelease(FullKey);
      }
      CFTypeID v16 = CFGetTypeID(a2);
      CFStringRef ValueAtIndex = a2;
      if (v16 != CFStringGetTypeID())
      {
        CFTypeID v18 = CFGetTypeID(a2);
        CFStringRef ValueAtIndex = v14;
        if (v18 == CFArrayGetTypeID()) {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v13);
        }
      }
      long long v19 = CFArrayGetValueAtIndex(theArray, v13);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v8, (uint64_t)ValueAtIndex, (uint64_t)v19);
      if (FullKey) {
        CFArrayAppendValue(v10, FullKey);
      }
      else {
        AMSupportLogInternal();
      }
      ++v13;
      long long v14 = ValueAtIndex;
    }
    while (v13 < CFArrayGetCount(theArray));
  }
  *a3 = CFRetain(v10);
  CFRelease(v10);
  if (FullKey) {
    CFRelease(FullKey);
  }
  return 1;
}

void _buildReportWithKeyAndMessage(const void *a1, uint64_t a2, const void *a3, __CFArray *a4, __CFArray *a5, __CFArray *a6)
{
  if (!a3)
  {
    AMSupportLogInternal();
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    goto LABEL_17;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMSupportLogInternal();
    goto LABEL_17;
  }
  long long v14 = Mutable;
  if (CFDictionaryGetCount((CFDictionaryRef)a3) >= 1)
  {
    CFDictionarySetValue(v14, a1, a3);
    if (CFDictionaryContainsKey((CFDictionaryRef)a3, @"WarningMessage")
      || CFDictionaryContainsKey((CFDictionaryRef)a3, @"FailureReason"))
    {
      if (a4)
      {
LABEL_7:
        long long v15 = a4;
LABEL_8:
        CFArrayAppendValue(v15, v14);
        goto LABEL_9;
      }
    }
    else
    {
      a4 = a5;
      if (a5) {
        goto LABEL_7;
      }
    }
    AMSupportLogInternal();
    CFRelease(v14);
LABEL_17:
    CFStringRef v16 = CFStringCreateWithFormat(v12, 0, @"_buildReportWithKey failed for %@: %@", a1, a2);
    if (!v16) {
      return;
    }
    long long v14 = (__CFDictionary *)v16;
    long long v15 = a6;
    goto LABEL_8;
  }
LABEL_9:

  CFRelease(v14);
}

CFDictionaryRef _createManifestPropertyValueDict(const __CFData *a1, const __CFArray *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v8 = 0;
      CFDictionaryRef v9 = 0;
      CFMutableArrayRef v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      while (1)
      {
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v9) {
          CFRelease(v9);
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v8);
        if (_copySealingManifestProperty(a1, ValueAtIndex, (CFDataRef *)&cf))
        {
          if (cf)
          {
            keys[0] = (void *)ValueAtIndex;
            values[0] = (void *)cf;
            CFDictionaryRef v9 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 1, MEMORY[0x263EFFF88], v10);
            if (v9) {
              CFArrayAppendValue(Mutable, v9);
            }
            else {
              AMSupportLogInternal();
            }
            goto LABEL_14;
          }
        }
        else
        {
          AMSupportLogInternal();
        }
        CFDictionaryRef v9 = 0;
LABEL_14:
        if (CFArrayGetCount(a2) <= ++v8) {
          goto LABEL_18;
        }
      }
    }
    CFDictionaryRef v9 = 0;
LABEL_18:
    if (CFArrayGetCount(Mutable) < 1)
    {
      CFDictionaryRef v12 = 0;
    }
    else
    {
      *(_OWORD *)keys = xmmword_2642D1808;
      values[0] = a3;
      values[1] = Mutable;
      CFDictionaryRef v12 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    }
  }
  else
  {
    AMSupportLogInternal();
    CFDictionaryRef v12 = 0;
    CFDictionaryRef v9 = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

void _findAndAppendManifestPropertyValueDicts(uint64_t a1, const __CFData *a2, uint64_t *a3)
{
  CFDataRef v4 = (void *)a1;
  CFArrayRef v5 = (const __CFArray *)a3[1];
  CFAllocatorRef v6 = (__CFArray *)a3[2];
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey((const __CFAllocator *)*MEMORY[0x263EFFB08], *a3, a1);
  if (FullKey) {
    CFDataRef v4 = (void *)FullKey;
  }
  CFDictionaryRef ManifestPropertyValueDict = _createManifestPropertyValueDict(a2, v5, v4);
  if (ManifestPropertyValueDict) {
    CFArrayAppendValue(v6, ManifestPropertyValueDict);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (ManifestPropertyValueDict)
  {
    CFRelease(ManifestPropertyValueDict);
  }
}

uint64_t AMFDRSealedDataGetTypeID()
{
  return _AMFDRSealedDataTypeID;
}

uint64_t _AMFDRSealedDataClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  _AMFDRSealedDataCFTypeID TypeID = result;
  return result;
}

double AMFDRSealedDataCreate()
{
  pthread_once(&_AMFDRSealedDataClassInitializeOnce, (void (*)(void))_AMFDRSealedDataClassInitialize);
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    double result = 0.0;
    Instance[17] = 0u;
    Instance[18] = 0u;
    Instance[15] = 0u;
    Instance[16] = 0u;
    Instance[13] = 0u;
    Instance[14] = 0u;
    Instance[11] = 0u;
    Instance[12] = 0u;
    Instance[9] = 0u;
    Instance[10] = 0u;
    Instance[7] = 0u;
    Instance[8] = 0u;
    Instance[5] = 0u;
    Instance[6] = 0u;
    Instance[3] = 0u;
    Instance[4] = 0u;
    Instance[1] = 0u;
    Instance[2] = 0u;
  }
  return result;
}

uint64_t AMFDRGetUnderlyingErrorCode(uint64_t a1, CFErrorRef *a2)
{
  if (a2 && *a2)
  {
    if (!a1 || !*(void *)(a1 + 16))
    {
      AMSupportLogInternal();
      return 1;
    }
    CFDictionaryRef v4 = CFErrorCopyUserInfo(*a2);
    if (!v4) {
      return 10;
    }
    CFDictionaryRef v5 = v4;
    CFAllocatorRef v6 = (const void *)*MEMORY[0x263EFFC88];
    CFDataRef Value = (__CFError *)CFDictionaryGetValue(v4, (const void *)*MEMORY[0x263EFFC88]);
    if (Value)
    {
      CFIndex v8 = Value;
      while (1)
      {
        CFRelease(v5);
        CFIndex Code = CFErrorGetCode(v8);
        CFDictionaryRef v10 = CFErrorCopyUserInfo(v8);
        if (!v10) {
          return 10;
        }
        CFDictionaryRef v5 = v10;
        CFIndex v8 = (__CFError *)CFDictionaryGetValue(v10, v6);
        if (!v8) {
          goto LABEL_14;
        }
      }
    }
    CFIndex Code = 199;
LABEL_14:
    if (Code != 4)
    {
      if (Code != 7)
      {
LABEL_19:
        if (Code == 199) {
          CFIndex Code = CFErrorGetCode(*a2);
        }
        goto LABEL_22;
      }
      if (!*(void *)(a1 + 80))
      {
        CFIndex Code = 7;
LABEL_22:
        CFRelease(v5);
        return Code;
      }
    }
    if (*(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore) {
      CFIndex Code = 404;
    }
    goto LABEL_19;
  }
  return 199;
}

uint64_t AMFDRSealedDataMultiManifestPopulate(uint64_t a1, uint64_t a2, CFDataRef theData, __CFArray *a4, uint64_t a5)
{
  CFMutableDictionaryRef theDict = 0;
  CFTypeRef v41 = 0;
  CFTypeRef cf = 0;
  if (!a2)
  {
    CFStringRef v37 = @"amfdr is NULL";
LABEL_85:
    AMFDRErrorPushInternal(a5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataMultiManifestPopulate", v37, v38);
LABEL_86:
    uint64_t v34 = 0;
    CFStringRef FullKey = 0;
LABEL_87:
    CFStringRef v10 = 0;
    goto LABEL_88;
  }
  if (!*(void *)(a2 + 16))
  {
    CFStringRef v37 = @"amfdr option is NULL";
    goto LABEL_85;
  }
  if (!theData)
  {
LABEL_9:
    CFStringRef FullKey = 0;
    CFStringRef v10 = 0;
    CFTypeID v11 = 0;
LABEL_60:
    long long v33 = *(const void **)(a1 + 16);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(a1 + 16) = 0;
    }
    *(void *)(a1 + 16) = AMSupportSafeRetain();
    AMFDRSetOption(a2, @"SealingManifest", (const __CFString *)v41);
    uint64_t v34 = 1;
    goto LABEL_63;
  }
  if ((AMFDRDataDecodeAndSetSealingManifest((void *)a2, theData, *(void *)(a1 + 80), &v41, (CFTypeRef *)&theDict, a5) & 1) == 0)
  {
    CFStringRef v37 = @"AMFDRDataDecodeAndSetSealingManifest failed";
    goto LABEL_85;
  }
  if (!*(void *)(a1 + 136) && !*(void *)(a1 + 176)) {
    goto LABEL_9;
  }
  if (theDict)
  {
    CFStringRef FullKey = 0;
    goto LABEL_13;
  }
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a2);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataMultiManifestPopulate", @"valueDataDict is NULL", v38);
    goto LABEL_86;
  }
  CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a2);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v13, @"sreq", *(void *)(a1 + 80));
  if (!FullKey)
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataMultiManifestPopulate", @"failed to create data instance string", v38);
    uint64_t v34 = 0;
    goto LABEL_87;
  }
  CFDictionarySetValue(theDict, FullKey, v41);
LABEL_13:
  if (*(uint64_t (***)(int, int, int, int))(a2 + 48) == AMFDRHTTPStore)
  {
    CFStringRef v10 = 0;
    CFTypeID v11 = 0;
LABEL_57:
    long long v32 = *(const void **)(a1 + 152);
    if (v32)
    {
      CFRelease(v32);
      *(void *)(a1 + 152) = 0;
    }
    *(void *)(a1 + 152) = CFRetain(theDict);
    goto LABEL_60;
  }
  CFArrayRef v14 = *(const __CFArray **)(a1 + 136);
  if (v14)
  {
    CFIndex Count = CFArrayGetCount(v14);
    if (Count >= 1)
    {
      CFIndex v16 = Count;
      CFIndex v17 = 0;
      CFTypeID v11 = 0;
      CFStringRef v10 = 0;
      while (1)
      {
        if (v10) {
          CFRelease(v10);
        }
        if (v11) {
          CFRelease(v11);
        }
        if (FullKey) {
          CFRelease(FullKey);
        }
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v17);
        long long v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), v17);
        CFAllocatorRef v20 = CFGetAllocator((CFTypeRef)a2);
        CFStringRef v10 = CFStringCreateWithFormat(v20, 0, @"%@-%@", @"manifest", ValueAtIndex);
        if (!v10) {
          break;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, CFStringRef, const void *, CFTypeRef *))(*(void *)(a2 + 48) + 16))(a2, v10, v19, &cf);
        CFTypeID v11 = (const void *)v21;
        if (cf || !v21)
        {
          AMSupportLogInternal();
          if (a4)
          {
            CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)a2);
            CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v23, (uint64_t)v10, (uint64_t)v19);
            if (!FullKey)
            {
              CFStringRef format = @"failed to create currDataInstance";
              goto LABEL_81;
            }
            CFArrayAppendValue(a4, FullKey);
          }
          else
          {
            CFStringRef FullKey = 0;
          }
        }
        else
        {
          CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a2);
          CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v22, (uint64_t)ValueAtIndex, (uint64_t)v19);
          if (!FullKey)
          {
            CFStringRef format = @"failed to  create data instance string";
            goto LABEL_81;
          }
          CFDictionarySetValue(theDict, FullKey, v11);
          AMSupportLogInternal();
        }
        if (v16 == ++v17) {
          goto LABEL_37;
        }
      }
      AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataMultiManifestPopulate", @"failed to create multiManifestDataClass", a5);
      uint64_t v34 = 0;
      CFStringRef FullKey = 0;
LABEL_88:
      CFTypeID v11 = 0;
      goto LABEL_63;
    }
  }
  CFStringRef v10 = 0;
  CFTypeID v11 = 0;
LABEL_37:
  CFArrayRef v24 = *(const __CFArray **)(a1 + 176);
  if (!v24) {
    goto LABEL_57;
  }
  CFIndex v25 = CFArrayGetCount(v24);
  if (v25 < 1) {
    goto LABEL_57;
  }
  CFIndex v26 = v25;
  CFIndex v27 = 0;
  while (1)
  {
    if (v11) {
      CFRelease(v11);
    }
    if (FullKey) {
      CFRelease(FullKey);
    }
    long long v28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v27);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v29 = (*(uint64_t (**)(uint64_t, __CFString *, const void *, CFTypeRef *))(*(void *)(a2 + 48) + 16))(a2, @"minimal-manifest", v28, &cf);
    CFTypeID v11 = (const void *)v29;
    if (cf || !v29) {
      break;
    }
    CFAllocatorRef v30 = CFGetAllocator((CFTypeRef)a2);
    CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v30, @"minimal-manifest", (uint64_t)v28);
    if (!FullKey)
    {
      CFStringRef format = @"failed to create data instance string";
      goto LABEL_81;
    }
    CFDictionarySetValue(theDict, FullKey, v11);
    AMSupportLogInternal();
LABEL_54:
    if (v26 == ++v27) {
      goto LABEL_57;
    }
  }
  if (!a4)
  {
    CFStringRef FullKey = 0;
    goto LABEL_54;
  }
  CFAllocatorRef v31 = CFGetAllocator((CFTypeRef)a2);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v31, @"minimal-manifest", (uint64_t)v28);
  if (FullKey)
  {
    AMSupportLogInternal();
    CFArrayAppendValue(a4, FullKey);
    goto LABEL_54;
  }
  CFStringRef format = @"failed to create currDataInstance";
LABEL_81:
  AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataMultiManifestPopulate", format, a5);
  uint64_t v34 = 0;
LABEL_63:
  if (v41)
  {
    CFRelease(v41);
    CFTypeRef v41 = 0;
  }
  if (FullKey) {
    CFRelease(FullKey);
  }
  if (theDict)
  {
    CFRelease(theDict);
    CFMutableDictionaryRef theDict = 0;
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v34;
}

uint64_t AMFDRSealedDataPopulate(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t cf, unint64_t a6, uint64_t a7)
{
  return __AMFDRSealedDataPopulatePrivate(0, a1, a2, a3, a4, cf, a6, a7);
}

uint64_t __AMFDRSealedDataPopulatePrivate(const __CFDictionary *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t cf, unint64_t a7, uint64_t a8)
{
  CFIndex v8 = (CFTypeRef *)a8;
  uint64_t v299 = *MEMORY[0x263EF8340];
  CFTypeRef v293 = 0;
  CFStringRef v294 = 0;
  CFDictionaryRef v291 = 0;
  CFDictionaryRef v292 = 0;
  CFTypeRef v289 = 0;
  CFRange v290 = 0;
  BOOL v288 = 0;
  if (!a2)
  {
    CFStringRef v24 = @"amfdr is NULL";
    goto LABEL_21;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"amfdr is NULL", Count);
    CFIndex v25 = 0;
    CFIndex v26 = 0;
    CFDataRef v264 = 0;
    goto LABEL_443;
  }
  if (!*(void *)(a3 + 16))
  {
    CFStringRef v24 = @"amfdr->optionsDict is NULL";
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a2 + 32);
  if (!(cf | v11)) {
    goto LABEL_102;
  }
  if (!(a7 | *(void *)(a2 + 40))) {
    goto LABEL_487;
  }
  if (!(a4 | *(void *)(a2 + 72)))
  {
    CFStringRef v24 = @"sealedDataClass is NULL";
    goto LABEL_21;
  }
  if (!(a5 | *(void *)(a2 + 80)))
  {
    CFStringRef v24 = @"sealedDataInstance is NULL";
    goto LABEL_21;
  }
  if (cf)
  {
    CFTypeID v16 = CFGetTypeID((CFTypeRef)cf);
    if (v16 != CFArrayGetTypeID())
    {
      CFStringRef v24 = @"dataClassArray must be a CFArray";
      goto LABEL_21;
    }
    if (!a7) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  if (!a7)
  {
    uint64_t v19 = a2;
    if (v11) {
      goto LABEL_25;
    }
LABEL_102:
    CFStringRef v24 = @"dataClassArray is NULL";
    goto LABEL_21;
  }
LABEL_13:
  CFTypeID v17 = CFGetTypeID((CFTypeRef)a7);
  if (v17 != CFArrayGetTypeID())
  {
    CFStringRef v24 = @"dataInstanceArray must be a CFArray";
    goto LABEL_21;
  }
  if (!cf || (CFIndex v18 = CFArrayGetCount((CFArrayRef)cf), v18 != CFArrayGetCount((CFArrayRef)a7)))
  {
LABEL_20:
    char Count = CFArrayGetCount((CFArrayRef)cf);
    CFArrayGetCount((CFArrayRef)a7);
    CFStringRef v24 = @"dataClassArray length (%ld) does not match dataInstanceArray (%ld)";
    goto LABEL_21;
  }
  uint64_t v19 = a2;
  CFArrayRef v20 = *(const __CFArray **)(a2 + 32);
  if (v20)
  {
    CFIndex v21 = CFArrayGetCount(v20);
    CFIndex v22 = CFArrayGetCount((CFArrayRef)cf);
    CFArrayRef v23 = *(const __CFArray **)(a2 + 32);
    if (v21 != v22)
    {
      char Count = CFArrayGetCount(v23);
      CFArrayGetCount((CFArrayRef)cf);
      CFStringRef v24 = @"sealedData->dataClassArray length (%ld) does not match dataClassArray (%ld)";
      goto LABEL_21;
    }
    uint64_t v19 = a2;
    if (!CFEqual(v23, (CFTypeRef)cf))
    {
      CFStringRef v24 = @"sealedData->dataClassArray does not match dataClassArray contents.";
LABEL_21:
      AMFDRErrorPushInternal((uint64_t)v8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v24, Count);
LABEL_22:
      CFIndex v25 = 0;
      CFIndex v26 = 0;
      CFDataRef v264 = 0;
      LOBYTE(v9) = 0;
      goto LABEL_443;
    }
  }
  else
  {
    *(void *)(a2 + 32) = CFRetain((CFTypeRef)cf);
  }
LABEL_25:
  CFArrayRef v27 = *(const __CFArray **)(v19 + 40);
  if (!v27)
  {
    if (a7)
    {
      *(void *)(v19 + 40) = CFRetain((CFTypeRef)a7);
      goto LABEL_32;
    }
LABEL_487:
    CFStringRef v24 = @"dataInstanceArray is NULL";
    goto LABEL_21;
  }
  if (a7)
  {
    CFIndex v28 = CFArrayGetCount(v27);
    CFIndex v29 = CFArrayGetCount((CFArrayRef)a7);
    CFArrayRef v30 = *(const __CFArray **)(v19 + 40);
    if (v28 != v29)
    {
      char Count = CFArrayGetCount(v30);
      CFArrayGetCount((CFArrayRef)a7);
      CFStringRef v24 = @"sealedData->dataInstanceArray length (%ld) does not match dataInstanceArray (%ld)";
      goto LABEL_21;
    }
    uint64_t v19 = a2;
    if (!CFEqual(v30, (CFTypeRef)a7))
    {
      CFStringRef v24 = @"sealedData->dataInstanceArray does not match dataInstanceArray contents.";
      goto LABEL_21;
    }
  }
LABEL_32:
  uint64_t v31 = CFArrayGetCount(*(CFArrayRef *)(v19 + 32));
  CFArrayRef v32 = *(const __CFArray **)(v19 + 64);
  if (v32)
  {
    if (CFArrayGetCount(v32) != v31)
    {
      char Count = CFArrayGetCount(*(CFArrayRef *)(v19 + 64));
      CFStringRef v24 = @"sealedData->dataArray length (%ld) does not match countToSeal (%ld)";
      goto LABEL_21;
    }
  }
  else
  {
    CFAllocatorRef v33 = CFGetAllocator((CFTypeRef)v9);
    *(void *)(v19 + 64) = CFArrayCreateMutable(v33, v31, &kCFArrayCallBacksAllowNULL);
  }
  CFRange v286 = v8;
  if (!*(void *)(v19 + 136) || !*(void *)(v19 + 144))
  {
    CFArrayRef v34 = *(const __CFArray **)(v19 + 288);
    if (v34)
    {
      if (CFArrayGetCount(v34) >= 1)
      {
        CFIndex v35 = CFArrayGetCount(*(CFArrayRef *)(v19 + 288));
        CFAllocatorRef v36 = CFGetAllocator((CFTypeRef)v9);
        CFArrayRef theArray = CFArrayCreateMutable(v36, 0, MEMORY[0x263EFFF70]);
        if (!theArray)
        {
          AMFDRErrorPushInternal((uint64_t)v8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"mutableMultiSealingDataClasses is NULL", Count);
          goto LABEL_22;
        }
        CFTypeRef v252 = (CFTypeRef)v31;
        CFAllocatorRef v37 = CFGetAllocator((CFTypeRef)v9);
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v37, 0, MEMORY[0x263EFFF70]);
        if (!Mutable)
        {
          AMFDRErrorPushInternal((uint64_t)v8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"mutableMultiSealingDataInstances is NULL", Count);
          CFIndex v26 = 0;
          CFDataRef v264 = 0;
          LOBYTE(v9) = 0;
          CFIndex v25 = theArray;
          goto LABEL_443;
        }
        if (v35 >= 1)
        {
          for (CFIndex i = 0; i != v35; ++i)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 288), i);
            CFArrayRef v40 = *(const __CFArray **)(v19 + 32);
            v300.CFIndex length = CFArrayGetCount(v40);
            v300.CFIndex location = 0;
            FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v40, v300, ValueAtIndex);
            if (FirstIndexOfValue == -1)
            {
              AMSupportLogInternal();
            }
            else
            {
              CFTimeZoneRef v42 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 40), FirstIndexOfValue);
              CFArrayAppendValue(theArray, ValueAtIndex);
              CFArrayAppendValue(Mutable, v42);
            }
            uint64_t v19 = a2;
          }
        }
        AMSupportSafeRelease();
        *(void *)(v19 + 136) = CFRetain(theArray);
        AMSupportSafeRelease();
        *(void *)(v19 + 144) = CFRetain(Mutable);
        CFIndex v8 = v286;
        uint64_t v31 = (uint64_t)v252;
        if (!a4) {
          goto LABEL_55;
        }
        goto LABEL_51;
      }
    }
  }
  CFMutableDictionaryRef Mutable = 0;
  CFArrayRef theArray = 0;
  if (a4)
  {
LABEL_51:
    CFTypeID v43 = CFGetTypeID((CFTypeRef)a4);
    uint64_t v19 = a2;
    if (v43 == CFStringGetTypeID())
    {
      int v44 = *(const void **)(a2 + 72);
      if (v44)
      {
        CFRelease(v44);
        *(void *)(a2 + 72) = 0;
      }
      *(void *)(a2 + 72) = CFRetain((CFTypeRef)a4);
    }
  }
LABEL_55:
  if (a5)
  {
    CFTypeID v45 = CFGetTypeID((CFTypeRef)a5);
    uint64_t v19 = a2;
    if (v45 == CFStringGetTypeID())
    {
      CFDateRef v46 = *(const void **)(a2 + 80);
      if (v46)
      {
        CFRelease(v46);
        *(void *)(a2 + 80) = 0;
      }
      *(void *)(a2 + 80) = CFRetain((CFTypeRef)a5);
    }
  }
  CFAllocatorRef v47 = CFGetAllocator((CFTypeRef)v19);
  CFDataRef v48 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef v49 = CFArrayCreateMutable(v47, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v50 = CFGetAllocator((CFTypeRef)v19);
  CFMutableArrayRef v51 = CFArrayCreateMutable(v50, 0, v48);
  CFDataRef v52 = v51;
  CFMutableArrayRef v272 = v49;
  if (!v49 || !v51)
  {
    AMFDRErrorPushInternal((uint64_t)v8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Failed to allocate array", Count);
    goto LABEL_521;
  }
  CFBooleanRef v53 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 16), @"AllowCSRForbidden");
  if (!v53) {
    goto LABEL_67;
  }
  CFBooleanRef v54 = v53;
  CFTypeID v55 = CFGetTypeID(v53);
  if (v55 != CFBooleanGetTypeID())
  {
    char v257 = 0;
    CFIndex v8 = v286;
    uint64_t v56 = a2;
    goto LABEL_69;
  }
  CFIndex v8 = v286;
  if (!CFBooleanGetValue(v54))
  {
LABEL_67:
    char v257 = 0;
    uint64_t v56 = a2;
    goto LABEL_69;
  }
  uint64_t v56 = a2;
  if ((AMFDRAPTicketAllowsIncompleteData(v9) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v286, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Missing entitlement to allow server forbidden error", Count);
    LOBYTE(v9) = 0;
    CFDictionaryRef cfb = 0;
    CFDataRef v264 = 0;
    valuesa = 0;
    CFMutableArrayRef v152 = 0;
    CFArrayRef v183 = 0;
    CFIndex v26 = Mutable;
    CFIndex v25 = theArray;
    CFMutableArrayRef v216 = v272;
    goto LABEL_432;
  }
  char v257 = 1;
LABEL_69:
  CFBooleanRef v57 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 16), @"EnableMultiRequest");
  long long v266 = v52;
  uint64_t v283 = v9;
  if (!a1)
  {
    BOOL v61 = 0;
    BOOL v251 = 0;
    BOOL v267 = 0;
    goto LABEL_98;
  }
  CFBooleanRef v58 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"SkipManifest");
  v61 = v58 && (v59 = v58, CFTypeID v60 = CFGetTypeID(v58), v60 == CFBooleanGetTypeID()) && CFBooleanGetValue(v59) != 0;
  CFBooleanRef v62 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"KeepExistingData");
  BOOL v65 = v62 && (v63 = v62, v64 = CFGetTypeID(v62), v64 == CFBooleanGetTypeID()) && CFBooleanGetValue(v63) != 0;
  CFBooleanRef v66 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"SkipProperties");
  v251 = v66 && (CFBooleanRef v67 = v66, v68 = CFGetTypeID(v66), v68 == CFBooleanGetTypeID()) && CFBooleanGetValue(v67) != 0;
  CFIndex v8 = v286;
  CFBooleanRef v69 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"SkipExtraManifests");
  if (v69 && (v70 = v69, v71 = CFGetTypeID(v69), v120 = v71 == CFBooleanGetTypeID(), CFIndex v8 = v286, v120))
  {
    BOOL v267 = CFBooleanGetValue(v70) != 0;
    uint64_t v56 = a2;
    if (!v65) {
      goto LABEL_98;
    }
  }
  else
  {
    BOOL v267 = 0;
    uint64_t v56 = a2;
    if (!v65) {
      goto LABEL_98;
    }
  }
  if (!AMFDRDigestEnabled(v9, &v288))
  {
    int v281 = 1;
    goto LABEL_234;
  }
  BOOL v72 = v288;
  CFErrorRef v297 = (CFErrorRef)0xAAAAAAAAAAAAAAAALL;
  unint64_t v298 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v295 = 0;
  CFTypeRef v296 = 0;
  CFArrayRef v73 = *(const __CFArray **)(v56 + 64);
  BOOL v249 = v61;
  if (!v73)
  {
    CFStringRef v74 = @"sealedData->dataArray is NULL";
    goto LABEL_95;
  }
  if (!*(void *)(v56 + 32))
  {
    CFStringRef v74 = @"sealedData->dataClassArray is NULL";
    goto LABEL_95;
  }
  if (!*(void *)(v56 + 40))
  {
    CFStringRef v74 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_95;
  }
  if (!*(void *)(v9 + 16))
  {
    CFStringRef v74 = @"amfdr->optionsDict is NULL";
    goto LABEL_95;
  }
  if (*(uint64_t (***)(int, int, int, int))(v9 + 48) != AMFDRHTTPStore)
  {
    CFStringRef v74 = @"amfdr is not a remote store, skipped verifying digests";
LABEL_95:
    AMFDRErrorPushInternal((uint64_t)&v289, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", v74, Count);
LABEL_96:
    CFStringRef v75 = 0;
    v250 = 0;
    values = 0;
    char v273 = 0;
    goto LABEL_226;
  }
  CFIndex v77 = CFArrayGetCount(v73);
  if (v77 <= 0)
  {
    CFStringRef v74 = @"sealedData->dataArray is empty";
    goto LABEL_95;
  }
  CFIndex v78 = v77;
  CFAllocatorRef v79 = CFGetAllocator((CFTypeRef)v56);
  long long v276 = CFArrayCreateMutable(v79, v78, MEMORY[0x263EFFF70]);
  if (!v276)
  {
    AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"dataClassesToVerify is NULL", Count);
    goto LABEL_96;
  }
  CFAllocatorRef v80 = CFGetAllocator((CFTypeRef)v56);
  CFMutableArrayRef v81 = CFArrayCreateMutable(v80, v78, MEMORY[0x263EFFF70]);
  if (!v81)
  {
    AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"dataInstancesToVerify is NULL", Count);
    goto LABEL_578;
  }
  CFStringRef v282 = v81;
  if (v72)
  {
    CFAllocatorRef v82 = CFGetAllocator((CFTypeRef)v56);
    CFArrayRef v248 = CFArrayCreateMutable(v82, v78, MEMORY[0x263EFFF70]);
    if (v248)
    {
      CFAllocatorRef v83 = CFGetAllocator((CFTypeRef)v56);
      CFMutableArrayRef v84 = CFArrayCreateMutable(v83, v78, MEMORY[0x263EFFF70]);
      if (!v84)
      {
        CFStringRef v86 = @"dataInstancesToRetry is NULL";
        goto LABEL_580;
      }
      CFArrayRef v85 = (int *)malloc_type_calloc(1uLL, 4 * v78, 0x100004052888210uLL);
      if (!v85)
      {
        CFStringRef v86 = @"dataIndicesToRetry is NULL";
LABEL_580:
        AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", v86, Count);
        CFStringRef v75 = 0;
        v250 = 0;
        values = 0;
        char v273 = 0;
        goto LABEL_226;
      }
      goto LABEL_112;
    }
    AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"dataClassesToRetry is NULL", Count);
LABEL_578:
    CFStringRef v75 = 0;
    v250 = 0;
    values = 0;
    char v273 = 0;
    goto LABEL_226;
  }
  CFArrayRef v248 = 0;
  CFMutableArrayRef v84 = 0;
  CFArrayRef v85 = 0;
LABEL_112:
  BOOL v278 = v72;
  long long v265 = v85;
  CFTypeRef v247 = v84;
  CFDictionaryRef v87 = *(const __CFDictionary **)(v56 + 160);
  CFBooleanRef v258 = v57;
  if (v87)
  {
    CFIndex v88 = CFDictionaryGetCount(v87);
    if (v88 >= 1)
    {
      CFIndex v89 = v88;
      CFAllocatorRef v90 = CFGetAllocator((CFTypeRef)v9);
      CFMutableDictionaryRef v91 = CFDictionaryCreateMutable(v90, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!v91)
      {
        AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"populateAdditions is NULL", Count);
        v250 = 0;
        values = 0;
        char v273 = 0;
        CFStringRef v75 = v265;
        goto LABEL_226;
      }
      CFMutableDictionaryRef theDict = v91;
      BOOL v92 = (const void **)malloc_type_calloc(1uLL, 8 * v89, 0x80040B8603338uLL);
      CFStringRef v93 = (const void **)malloc_type_calloc(1uLL, 8 * v89, 0x80040B8603338uLL);
      values = (void **)v93;
      v250 = v92;
      if (v92 && v93)
      {
        uint64_t v56 = a2;
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a2 + 160), v92, v93);
        CFArrayRef v94 = values;
        uint64_t v95 = 0;
        CFRange v284 = 0;
        while (1)
        {
          CFDictionaryRef v96 = (const __CFDictionary *)v94[v95];
          if (v96)
          {
            CFTypeID v97 = CFGetTypeID(v94[v95]);
            if (v97 == CFDictionaryGetTypeID())
            {
              uint64_t v56 = a2;
              if (v284) {
                CFRelease(v284);
              }
              CFAllocatorRef v98 = CFGetAllocator((CFTypeRef)a2);
              CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(v98, 0, v96);
              if (!MutableCopy)
              {
                AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"populateInfo is NULL", Count);
                char v273 = 0;
                CFBooleanRef v57 = v258;
LABEL_546:
                CFStringRef v75 = v265;
                goto LABEL_226;
              }
              CFDictionaryRef v100 = MutableCopy;
              CFDictionaryRemoveValue(MutableCopy, @"CombinedManifest");
              CFBooleanRef v57 = v258;
              CFRange v284 = v100;
              if (CFDictionaryGetCount(v100) >= 1) {
                CFDictionarySetValue(theDict, v92[v95], v100);
              }
            }
            else
            {
              uint64_t v56 = a2;
              CFBooleanRef v57 = v258;
            }
            CFArrayRef v94 = values;
          }
          else
          {
            CFBooleanRef v57 = v258;
          }
          if (v89 == ++v95) {
            goto LABEL_131;
          }
        }
      }
      AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"additionKeys or additionValues is NULL", Count);
      char v273 = 0;
      goto LABEL_546;
    }
  }
  CFMutableDictionaryRef theDict = 0;
  CFRange v284 = 0;
  v250 = 0;
  CFArrayRef v94 = 0;
LABEL_131:
  values = v94;
  for (CFIndex j = 0; j != v78; ++j)
  {
    CFTypeRef v102 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 32), j);
    int v103 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 40), j);
    if (!v102)
    {
      AMFDRErrorPushInternal((uint64_t)&v289, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"dataClass %d is NULL", j);
LABEL_499:
      char v273 = 0;
      goto LABEL_500;
    }
    CFDataRef v104 = v103;
    if (!v103)
    {
      AMFDRErrorPushInternal((uint64_t)&v289, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"dataInstance %d is NULL", j);
      goto LABEL_499;
    }
    if (CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 64), j))
    {
      CFArrayAppendValue(v276, v102);
      CFArrayAppendValue(v282, v104);
    }
  }
  if (CFArrayGetCount(v276) <= 0)
  {
    AMFDRErrorPushInternal((uint64_t)&v289, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"no data to verify digests", Count);
    char v273 = 0;
LABEL_500:
    CFStringRef v75 = v265;
    goto LABEL_226;
  }
  CFTypeRef v253 = (CFTypeRef)v31;
  CFDictionaryRef v105 = (const __CFDictionary *)AMFDRDataMultiCopyDigest((void *)v9, (uint64_t)v276, (uint64_t)v282, &v289);
  CFTypeID v106 = theDict;
  if (!v105)
  {
    AMFDRErrorPushInternal((uint64_t)&v289, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"failed to get digests from server", Count);
    char v273 = 0;
    goto LABEL_519;
  }
  CFDictionaryRef v107 = v105;
  CFIndex v108 = 0;
  CFDictionaryRef v274 = 0;
  CFStringRef FullKey = 0;
  CFDictionaryRef v260 = v105;
  while (2)
  {
    CFDataRef v110 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 64), v108);
    CFIndex v111 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 32), v108);
    CFDictionaryRef v112 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 40), v108);
    if (!v110)
    {
LABEL_156:
      CFDataRef v52 = v266;
      if (v78 != ++v108) {
        continue;
      }
      if (v248 && CFArrayGetCount(v248) >= 1) {
        CFDictionaryRef v121 = (const __CFDictionary *)AMFDRDataMultiCopyManifest((void *)v9, (uint64_t)v248, (uint64_t)v247, &v296);
      }
      else {
        CFDictionaryRef v121 = 0;
      }
      CFDictionaryRef v279 = v121;
      if (!v274)
      {
LABEL_218:
        CFArrayRef v149 = *(const void **)(v56 + 160);
        if (v149)
        {
          CFRelease(v149);
          *(void *)(v56 + 160) = 0;
        }
        uint64_t v9 = v283;
        uint64_t v31 = (uint64_t)v253;
        CFBooleanRef v57 = v258;
        if (v106)
        {
          if (CFDictionaryGetCount(v106) >= 1)
          {
            AMSupportLogInternal();
            *(void *)(v56 + 160) = CFRetain(v106);
          }
          char v273 = 1;
        }
        else
        {
          char v273 = 1;
        }
        goto LABEL_225;
      }
      uint64_t v122 = 0;
      CFDataRef cfa = 0;
      while (1)
      {
        CFIndex v123 = v265[v122];
        CFDataRef v124 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 64), v123);
        CFDictionaryRef v125 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 32), v123);
        CFIndex v126 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 40), v123);
        if (!v124)
        {
          CFStringRef v235 = @"unexpected NULL dataValue";
          goto LABEL_515;
        }
        uint64_t v127 = (uint64_t)v126;
        if (v295)
        {
          CFRelease(v295);
          CFTypeRef v295 = 0;
        }
        CFAllocatorRef v128 = CFGetAllocator((CFTypeRef)v56);
        if (AMFDRDataStripExtraManifest(v128, v124, &v295, 0, (uint64_t)&v296)) {
          BOOL v129 = v295 == 0;
        }
        else {
          BOOL v129 = 1;
        }
        if (v129)
        {
          CFStringRef v235 = @"failed to strip fdr2 data";
LABEL_515:
          AMFDRErrorPushInternal((uint64_t)&v289, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", v235, Count);
LABEL_517:
          char v273 = 0;
LABEL_518:
          uint64_t v9 = v283;
          goto LABEL_519;
        }
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v56 + 64), v123, 0);
        if (FullKey) {
          CFRelease(FullKey);
        }
        CFAllocatorRef v130 = CFGetAllocator((CFTypeRef)v56);
        CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v130, (uint64_t)v125, v127);
        if (!FullKey)
        {
          AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"dataClassInstance is NULL", Count);
          goto LABEL_517;
        }
        if (v284) {
          CFRelease(v284);
        }
        if (v106 && (uint64_t v131 = CFDictionaryGetValue(v106, FullKey)) != 0)
        {
          CFDataRef v132 = (__CFDictionary *)CFRetain(v131);
          CFDictionaryRemoveValue(v106, FullKey);
        }
        else
        {
          CFDataRef v132 = 0;
        }
        CFRange v284 = v132;
        if (v279)
        {
          CFDictionaryRef v133 = (const __CFDictionary *)CFDictionaryGetValue(v279, FullKey);
          if (v133)
          {
            CFDictionaryRef v134 = v133;
            CFTypeID v135 = CFGetTypeID(v133);
            if (v135 == CFDictionaryGetTypeID())
            {
              CFDataRef v136 = (const __CFData *)CFDictionaryGetValue(v134, @"mandev");
              CFDataRef v137 = (const __CFData *)CFDictionaryGetValue(v134, @"mansta");
            }
            else
            {
              CFDataRef v136 = 0;
              CFDataRef v137 = 0;
            }
            uint64_t v56 = a2;
          }
          else
          {
            CFDataRef v136 = 0;
            CFDataRef v137 = 0;
          }
          CFTypeID v106 = theDict;
          if ((unint64_t)v136 | (unint64_t)v137)
          {
            if (v136)
            {
              CFArrayRef v138 = *(const __CFArray **)(v56 + 272);
              if (v138)
              {
                v301.CFIndex length = CFArrayGetCount(v138);
                v301.CFIndex location = 0;
                char v139 = CFArrayContainsValue(v138, v301, v125) != 0;
              }
              else
              {
                char v139 = 0;
              }
              uint64_t v56 = a2;
            }
            else
            {
              char v139 = 0;
            }
            if (cfa) {
              CFRelease(cfa);
            }
            CFDataRef DataWithManifests = (const __CFData *)AMFDRDataLocalCreateDataWithManifests((const void *)v283, (const __CFData *)v295, v136, v137, v139, (uint64_t)&v296);
            if (!DataWithManifests)
            {
              CFDataRef cfa = 0;
              CFDataRef v52 = v266;
              CFTypeID v106 = theDict;
              goto LABEL_210;
            }
            CFErrorRef v297 = 0;
            unint64_t v298 = 0;
            CFDataRef v141 = DataWithManifests;
            CFDataGetBytePtr(DataWithManifests);
            CFDataRef cfa = v141;
            CFDataGetLength(v141);
            if (!AMSupportDigestMd5())
            {
              AMFDRErrorPushInternal((uint64_t)&v289, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"failed to compute restitched digest for %@:%@", (char)v125);
              char v273 = 0;
              CFDataRef v52 = v266;
              uint64_t v9 = v283;
              uint64_t v31 = (uint64_t)v253;
              CFBooleanRef v57 = v258;
              goto LABEL_500;
            }
            CFDataRef v142 = (const __CFData *)CFDictionaryGetValue(v260, FullKey);
            CFTypeID v106 = theDict;
            if (!v142
              || (CFDataRef v143 = v142, v144 = CFGetTypeID(v142), v144 != CFDataGetTypeID())
              || CFDataGetLength(v143) != 16)
            {
              AMFDRErrorPushInternal((uint64_t)&v289, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"unexpected invalid hash", Count);
              char v273 = 0;
              CFDataRef v52 = v266;
              goto LABEL_518;
            }
            uint64_t BytePtr = CFDataGetBytePtr(v143);
            if (*(CFErrorRef *)BytePtr != v297 || *((void *)BytePtr + 1) != v298)
            {
              AMSupportLogInternal();
              CFDataRef v52 = v266;
              uint64_t v56 = a2;
              goto LABEL_210;
            }
            uint64_t v56 = a2;
            CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), v123, cfa);
            if (theDict)
            {
              CFDictionaryRef v147 = v132;
              if (v132)
              {
                if (v136)
                {
                  CFDictionaryRemoveValue(v132, @"DeviceManifestMissing");
                  CFDictionaryRef v147 = v132;
                }
                CFDictionaryRef v148 = v147;
                CFDataRef v52 = v266;
                if (CFDictionaryGetCount(v147) >= 1) {
                  CFDictionarySetValue(theDict, FullKey, v148);
                }
                goto LABEL_210;
              }
            }
          }
          CFDataRef v52 = v266;
        }
LABEL_210:
        if (v274 == (CFDictionaryRef)++v122) {
          goto LABEL_218;
        }
      }
    }
    break;
  }
  CFDictionaryRef v113 = v112;
  CFErrorRef v297 = 0;
  unint64_t v298 = 0;
  CFTypeID v114 = CFDataGetBytePtr(v110);
  CFDataGetLength(v110);
  if (!AMFDRDigestMd5((uint64_t)v114))
  {
    AMFDRErrorPushInternal((uint64_t)&v289, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"failed to compute digest for %@:%@", (char)v111);
    goto LABEL_512;
  }
  if (FullKey) {
    CFRelease(FullKey);
  }
  uint64_t v56 = a2;
  CFAllocatorRef v115 = CFGetAllocator((CFTypeRef)a2);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v115, (uint64_t)v111, (uint64_t)v113);
  if (FullKey)
  {
    CFDataRef v116 = (const __CFData *)CFDictionaryGetValue(v107, FullKey);
    if (v116
      && (v117 = v116, v118 = CFGetTypeID(v116), v120 = v118 == CFDataGetTypeID(), uint64_t v56 = a2, v120)
      && CFDataGetLength(v117) == 16)
    {
      CFArrayRef v119 = CFDataGetBytePtr(v117);
      BOOL v120 = *(CFErrorRef *)v119 == v297 && *((void *)v119 + 1) == v298;
      if (!v120)
      {
        if (v278)
        {
          AMSupportLogInternal();
          CFArrayAppendValue(v248, v111);
          CFArrayAppendValue(v247, v113);
          v265[(void)v274] = v108;
          CFDictionaryRef v274 = (CFDictionaryRef)((char *)v274 + 1);
        }
        else
        {
          AMSupportLogInternal();
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), v108, 0);
          if (theDict) {
            CFDictionaryRemoveValue(theDict, FullKey);
          }
        }
      }
    }
    else
    {
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v56 + 64), v108, 0);
    }
    goto LABEL_156;
  }
  AMFDRErrorPushInternal((uint64_t)&v289, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerifyDigest", @"dataClassInstance is NULL", Count);
LABEL_512:
  char v273 = 0;
  CFDataRef v52 = v266;
LABEL_519:
  uint64_t v31 = (uint64_t)v253;
  CFBooleanRef v57 = v258;
LABEL_225:
  CFStringRef v75 = v265;
LABEL_226:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (v75) {
    free(v75);
  }
  CFIndex v8 = v286;
  BOOL v61 = v249;
  if (v250) {
    free(v250);
  }
  if (values) {
    free(values);
  }
  if (v273)
  {
    int v281 = 1;
    uint64_t v56 = a2;
    goto LABEL_234;
  }
  AMSupportLogInternal();
  uint64_t v56 = a2;
LABEL_98:
  CFStringRef v76 = *(const void **)(v56 + 160);
  if (v76)
  {
    CFRelease(v76);
    int v281 = 0;
    *(void *)(v56 + 160) = 0;
  }
  else
  {
    int v281 = 0;
  }
LABEL_234:
  unint64_t v150 = *(const void **)(v56 + 16);
  if (v150)
  {
    CFRelease(v150);
    *(void *)(v56 + 16) = 0;
  }
  if (v57 && !CFBooleanGetValue(v57))
  {
    if (v61)
    {
      AMSupportLogInternal();
      goto LABEL_290;
    }
    *(unsigned char *)(v9 + 41) = 0;
    CFDataRef v229 = AMFDRDataCopy(v9, *(const __CFString **)(v56 + 72), *(const __CFString **)(v56 + 80), (uint64_t)v8);
    CFDataRef v175 = v229;
    if (*(unsigned char *)(v9 + 41))
    {
      if (AMFDRGetUnderlyingErrorCode(v9, (CFErrorRef *)v8) == 403)
      {
        if (!v175)
        {
          if (v257)
          {
            AMSupportLogInternal();
            if (v8 && *v8)
            {
              CFRelease(*v8);
              *CFIndex v8 = 0;
            }
            AMSupportLogInternal();
            CFDictionaryRef cfb = 0;
            int v280 = 0;
            CFMutableArrayRef v152 = 0;
            long long v277 = 0;
            long long v254 = 0;
            CFDictionaryRef v275 = 0;
            CFDataRef v175 = 0;
            goto LABEL_287;
          }
          AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"permissions request failed", Count);
          goto LABEL_521;
        }
        CFDataRef v264 = v175;
        CFStringRef v239 = @"sealedData->sealingIM4M is not NULL";
      }
      else
      {
        CFDataRef v264 = v175;
        CFStringRef v239 = @"unexpected error code";
      }
      AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v239, Count);
      CFDictionaryRef cfb = 0;
      CFArrayRef v183 = 0;
      CFMutableArrayRef v152 = 0;
      valuesa = 0;
LABEL_530:
      LOBYTE(v9) = 0;
      CFIndex v26 = Mutable;
      CFIndex v25 = theArray;
      CFMutableArrayRef v216 = v272;
      if (v272) {
        goto LABEL_432;
      }
      goto LABEL_433;
    }
    if (v229)
    {
      CFDictionaryRef cfb = 0;
      int v280 = 0;
      CFMutableArrayRef v152 = 0;
      LOBYTE(v177) = 0;
      long long v277 = 0;
      long long v254 = 0;
      CFDictionaryRef v275 = 0;
      goto LABEL_296;
    }
    if (AMFDRGetUnderlyingErrorCode(v9, (CFErrorRef *)v8) == 404)
    {
      AMSupportLogInternal();
      if (v8 && *v8)
      {
        CFRelease(*v8);
        CFDictionaryRef cfb = 0;
        int v280 = 0;
        CFMutableArrayRef v152 = 0;
        LOBYTE(v177) = 0;
        long long v277 = 0;
        long long v254 = 0;
        CFDictionaryRef v275 = 0;
        CFDataRef v175 = 0;
        *CFIndex v8 = 0;
        goto LABEL_296;
      }
LABEL_290:
      CFDictionaryRef cfb = 0;
      int v280 = 0;
      CFMutableArrayRef v152 = 0;
      LOBYTE(v177) = 0;
      long long v277 = 0;
      long long v254 = 0;
      CFDictionaryRef v275 = 0;
      CFDataRef v175 = 0;
      goto LABEL_296;
    }
    AMFDRErrorPushInternal((uint64_t)v8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Unexpected error for %@:%@: %ld", *(void *)(v56 + 72));
LABEL_521:
    CFDictionaryRef cfb = 0;
    CFArrayRef v183 = 0;
    CFMutableArrayRef v152 = 0;
LABEL_529:
    valuesa = 0;
    CFDataRef v264 = 0;
    goto LABEL_530;
  }
  CFAllocatorRef v151 = CFGetAllocator((CFTypeRef)v9);
  CFMutableArrayRef v152 = CFArrayCreateMutable(v151, 0, MEMORY[0x263EFFF70]);
  if (!v152)
  {
    AMFDRErrorPushInternal((uint64_t)v8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"dataClassArrayToCopy is NULL", Count);
    CFDictionaryRef cfb = 0;
    CFArrayRef v183 = 0;
    goto LABEL_529;
  }
  CFAllocatorRef v153 = CFGetAllocator((CFTypeRef)v9);
  CFMutableArrayRef v154 = CFArrayCreateMutable(v153, 0, MEMORY[0x263EFFF70]);
  long long v277 = v154;
  if (v61)
  {
    AMSupportLogInternal();
  }
  else
  {
    CFTypeRef v155 = v154;
    CFArrayAppendValue(v152, *(const void **)(v56 + 72));
    CFArrayAppendValue(v155, *(const void **)(v56 + 80));
  }
  long long v254 = v152;
  if (v281)
  {
    if (v31 >= 1)
    {
      CFIndex v156 = 0;
      while (1)
      {
        CFDictionaryRef v157 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 32), v156);
        CFIndex v158 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 40), v156);
        if (!v157)
        {
          CFStringRef v231 = @"dataClass is NULL. Sealing failed.";
          goto LABEL_484;
        }
        CFDataRef v159 = v158;
        if (!v158) {
          break;
        }
        CFDataRef v160 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 64), v156);
        if (!v160 || (v161 = CFGetTypeID(v160), v120 = v161 == CFDataGetTypeID(), uint64_t v56 = a2, !v120))
        {
          CFArrayAppendValue(v152, v157);
          CFArrayAppendValue(v277, v159);
        }
        if (v31 == ++v156) {
          goto LABEL_253;
        }
      }
      CFStringRef v231 = @"dataInstance is NULL. Sealing failed.";
LABEL_484:
      CFIndex v8 = v286;
      AMFDRErrorPushInternal((uint64_t)v286, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v231, Count);
LABEL_485:
      CFDictionaryRef cfb = 0;
      CFDataRef v264 = 0;
      CFArrayRef v183 = 0;
      CFMutableArrayRef v152 = 0;
      valuesa = 0;
      LOBYTE(v9) = 0;
      CFIndex v26 = Mutable;
      CFIndex v25 = theArray;
      CFMutableArrayRef v216 = v272;
      goto LABEL_427;
    }
  }
  else
  {
    CFArrayRef v162 = *(const __CFArray **)(a2 + 32);
    v305.CFIndex length = CFArrayGetCount(v162);
    v305.CFIndex location = 0;
    CFArrayAppendArray(v152, v162, v305);
    CFArrayRef v163 = *(const __CFArray **)(a2 + 40);
    v306.CFIndex length = CFArrayGetCount(v163);
    CFArrayRef v164 = v163;
    uint64_t v56 = a2;
    v306.CFIndex location = 0;
    CFArrayAppendArray(v277, v164, v306);
  }
LABEL_253:
  *(unsigned char *)(v9 + 41) = 0;
  if (CFArrayGetCount(v152))
  {
    CFIndex v8 = v286;
    if (v267) {
      CFDictionaryRef v165 = (const __CFDictionary *)AMFDRDataMultiCopy((void *)v9, (uint64_t)v152, (uint64_t)v277, v286);
    }
    else {
      CFDictionaryRef v165 = (const __CFDictionary *)AMFDRDataMultiPopulate((void *)v9, (uint64_t)v152, (uint64_t)v277, (uint64_t)&v291, v286);
    }
    CFDictionaryRef v166 = v165;
    if (v281)
    {
      if (v291 && CFDictionaryGetCount(v291))
      {
        AMFDRErrorPushInternal((uint64_t)v286, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Unexpected multiAdditions value", Count);
        LOBYTE(v9) = 0;
        CFDictionaryRef cfb = 0;
        CFDataRef v264 = 0;
        valuesa = 0;
        CFMutableArrayRef v152 = 0;
        CFArrayRef v183 = 0;
        CFIndex v26 = Mutable;
        CFIndex v25 = theArray;
        CFMutableArrayRef v216 = v272;
        CFDictionaryRef v227 = v166;
        goto LABEL_425;
      }
      AMSupportLogInternal();
    }
    else
    {
      *(void *)(v56 + 160) = AMSupportSafeRetain();
    }
  }
  else
  {
    CFArrayGetCount(*(CFArrayRef *)(v56 + 32));
    AMSupportLogInternal();
    CFDictionaryRef v166 = 0;
    CFIndex v8 = v286;
  }
  CFDictionaryRef v275 = v166;
  int v167 = *(unsigned __int8 *)(v9 + 41);
  if (!*(unsigned char *)(v9 + 41))
  {
    if (!v8 || !*v8)
    {
LABEL_275:
      CFDictionaryRef cfb = 0;
      goto LABEL_276;
    }
    if (CFErrorGetCode((CFErrorRef)*v8) == 21)
    {
      uint64_t v171 = AMFDRCopyUnderlyingDictionary((__CFError *)*v8, @"MultiRequestErrors");
      BOOL v172 = v8;
      CFDictionaryRef v169 = (const __CFDictionary *)v171;
      unsigned int v170 = *v172;
      CFDictionaryRef cfb = v169;
      if (!*v172) {
        goto LABEL_276;
      }
      goto LABEL_274;
    }
    CFStringRef v236 = @"AMFDRDataMultiCopy got unexpected error";
LABEL_536:
    AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v236, Count);
    LOBYTE(v9) = 0;
    CFDictionaryRef cfb = 0;
    CFDataRef v264 = 0;
    valuesa = 0;
    CFMutableArrayRef v152 = 0;
LABEL_561:
    CFArrayRef v183 = 0;
    goto LABEL_562;
  }
  if (AMFDRGetUnderlyingErrorCode(v9, (CFErrorRef *)v8) != 403)
  {
    CFStringRef v236 = @"unexpected error code";
    goto LABEL_536;
  }
  if (v166)
  {
    AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"valueDataDict is not NULL", Count);
    CFMutableArrayRef v216 = v272;
    CFDictionaryRef v227 = v166;
    CFDictionaryRef cfb = 0;
    CFDataRef v264 = 0;
    CFArrayRef v183 = 0;
    CFMutableArrayRef v152 = 0;
    valuesa = 0;
    LOBYTE(v9) = 0;
    CFIndex v26 = Mutable;
    CFIndex v25 = theArray;
    goto LABEL_426;
  }
  if ((v257 & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"permissions request failed", Count);
    goto LABEL_485;
  }
  AMSupportLogInternal();
  if (!v8) {
    goto LABEL_275;
  }
  int v168 = v8;
  CFDictionaryRef v169 = 0;
  CFDictionaryRef cfb = 0;
  unsigned int v170 = *v168;
  if (*v168)
  {
LABEL_274:
    CFRelease(v170);
    *CFRange v286 = 0;
    CFDictionaryRef cfb = v169;
  }
LABEL_276:
  CFAllocatorRef v173 = CFGetAllocator((CFTypeRef)a2);
  CFMutableArrayRef v152 = (__CFArray *)AMFDRDataLocalCreateFullKey(v173, *(void *)(a2 + 72), *(void *)(a2 + 80));
  if (!v152)
  {
    CFIndex v8 = v286;
    AMFDRErrorPushInternal((uint64_t)v286, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"failed to create data instance string", Count);
LABEL_559:
    LOBYTE(v9) = 0;
    CFDataRef v264 = 0;
    goto LABEL_560;
  }
  CFIndex v8 = v286;
  if (!v166 || (CFDataRef v174 = CFDictionaryGetValue(v166, v152)) == 0)
  {
    CFDataRef v175 = 0;
    if (v167) {
      goto LABEL_286;
    }
LABEL_280:
    if (v175) {
      char v176 = 1;
    }
    else {
      char v176 = v61;
    }
    if (v176)
    {
      LOBYTE(v177) = 0;
      int v280 = 1;
      uint64_t v56 = a2;
      goto LABEL_296;
    }
    CFErrorRef v297 = 0;
    if (cfb)
    {
      CFTypeID v178 = (__CFError *)CFDictionaryGetValue(cfb, v152);
      CFErrorRef v297 = v178;
      uint64_t v56 = a2;
      if (v178)
      {
        CFIndex Code = CFErrorGetCode(v178);
        uint64_t v180 = AMFDRGetUnderlyingErrorCode(v9, &v297);
        if (Code == 701 || v180 == 404)
        {
          AMSupportLogInternal();
          LOBYTE(v177) = 0;
          CFDataRef v175 = 0;
          int v280 = 1;
          CFIndex v8 = v286;
          goto LABEL_296;
        }
        CFStringRef format = @"Unexpected error and underlying error for %@: %ld, %ld";
        char v246 = (char)v152;
        *(_OWORD *)v241 = 0u;
        long long v242 = 0u;
        *(_OWORD *)CFStringRef value = 0u;
        CFIndex v8 = v286;
        uint64_t v237 = (uint64_t)v286;
        CFIndex v238 = 8;
        goto LABEL_558;
      }
      CFStringRef format = @"%@ is missing but multiRequestError is NULL";
      char v246 = 0;
      *(_OWORD *)v241 = 0u;
      long long v242 = 0u;
      *(_OWORD *)CFStringRef value = 0u;
      CFIndex v8 = v286;
    }
    else
    {
      CFStringRef format = @"%@ is missing but multiRequestErrors is NULL";
      char v246 = (char)v152;
      *(_OWORD *)v241 = 0u;
      long long v242 = 0u;
      *(_OWORD *)CFStringRef value = 0u;
    }
    uint64_t v237 = (uint64_t)v8;
    CFIndex v238 = 10;
LABEL_558:
    AMFDRErrorPushInternal(v237, v238, 0, 0, 0, 0, 0, 0, value[0], value[1], v241[0], v241[1], (void *)v242, *((void **)&v242 + 1), (uint64_t)"__AMFDRSealedDataPopulatePrivate", format, v246);
    goto LABEL_559;
  }
  CFDataRef v175 = (const __CFData *)CFRetain(v174);
  if (!v167) {
    goto LABEL_280;
  }
LABEL_286:
  uint64_t v56 = a2;
  AMSupportLogInternal();
  int v280 = 1;
LABEL_287:
  LOBYTE(v177) = 1;
LABEL_296:
  CFDataRef v264 = v175;
  if ((AMFDRSealedDataMultiManifestPopulate(v56, v283, v175, v52, (uint64_t)v8) & 1) == 0)
  {
    AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"AMFDRSealedDataMultiManifestPopulate failed", Count);
    LOBYTE(v9) = 0;
LABEL_560:
    valuesa = 0;
    goto LABEL_561;
  }
  CFIndex v181 = CFArrayGetCount(v52);
  BOOL v261 = v181 > 0;
  BOOL theDicta = v181 < 1;
  AMSupportLogInternal();
  if (*(void *)(v56 + 280))
  {
    CFAllocatorRef v182 = CFGetAllocator((CFTypeRef)v56);
    CFArrayRef v183 = CFArrayCreateMutableCopy(v182, 0, *(CFArrayRef *)(v56 + 280));
    uint64_t v184 = v283;
    if (!v183)
    {
      AMFDRErrorPushInternal((uint64_t)v8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Failed to copy array", Count);
      goto LABEL_300;
    }
  }
  else
  {
    CFArrayRef v183 = 0;
    uint64_t v184 = v283;
    *(unsigned char *)(v283 + 40) = 0;
  }
  CFStringRef v294 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v184 + 16), @"TrustObject");
  if (!v294)
  {
    if (v8 && *v8)
    {
      CFRelease(*v8);
      *CFIndex v8 = 0;
    }
    uint64_t v184 = v283;
    AMFDRDataCopyTrustObject(v283);
    if (v294)
    {
      AMFDRSetOption(v283, @"TrustObject", v294);
      CFRelease(v294);
    }
  }
  if (*(void *)(v184 + 32))
  {
    valuesa = 0;
    uint64_t v185 = a2;
    goto LABEL_315;
  }
  CFDictionaryRef v186 = *(const __CFDictionary **)(v184 + 80);
  if (v186)
  {
    CFDictionaryRef v187 = CFDictionaryGetValue(v186, @"certificate");
    *(void *)(v184 + 32) = v187;
    int DataFromFileURL = 4 * (v187 == 0);
    AMSupportSafeRetain();
    valuesa = 0;
    goto LABEL_314;
  }
  uint64_t v189 = AMFDRDataLocalCopyDataStoragePath((void *)v184, @"certificate", 0, (uint64_t)v8);
  if (!v189)
  {
    AMFDRErrorPushInternal((uint64_t)v8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"missing cert data storage path", Count);
LABEL_300:
    LOBYTE(v9) = 0;
    valuesa = 0;
LABEL_562:
    CFIndex v26 = Mutable;
    CFIndex v25 = theArray;
    CFMutableArrayRef v216 = v272;
    goto LABEL_563;
  }
  CFDictionaryRef v190 = (void **)v189;
  CFGetAllocator((CFTypeRef)v184);
  valuesa = v190;
  int DataFromFileURL = AMSupportCreateDataFromFileURL();
LABEL_314:
  uint64_t v185 = a2;
  if ((DataFromFileURL & 0xFFFFFFFB) != 0)
  {
    AMFDRErrorPushInternal((uint64_t)v8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"failed to read cert data from %@. error %d", (char)valuesa);
LABEL_542:
    LOBYTE(v9) = 0;
    goto LABEL_562;
  }
LABEL_315:
  CFArrayRef v285 = v183;
  if (v31 < 1)
  {
    char v259 = 0;
LABEL_403:
    CFBooleanRef v215 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(v283 + 16), @"SealIdentifiers");
    CFDataRef v52 = v266;
    if (v251) {
      goto LABEL_404;
    }
    CFIndex v217 = (CFTypeRef *)(v185 + 88);
    if (*(void *)(v185 + 88)) {
      goto LABEL_404;
    }
    CFBooleanRef v218 = v215;
    if (!v215) {
      goto LABEL_404;
    }
    CFTypeID v219 = CFGetTypeID(v215);
    if (v219 != CFBooleanGetTypeID() || !CFBooleanGetValue(v218)) {
      goto LABEL_404;
    }
    if (!*(void *)(v283 + 88)) {
      goto LABEL_586;
    }
    if ((AMFDREntitlementIsEntitled(@"com.apple.libFDR.AllowIdentifierOverride") & 1) == 0)
    {
      CFIndex v8 = v286;
      AMFDRErrorPushInternal((uint64_t)v286, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Missing AllowIdentifierOverride entitlement", Count);
      LOBYTE(v9) = 0;
      CFIndex v26 = Mutable;
      CFIndex v25 = theArray;
LABEL_507:
      CFMutableArrayRef v216 = v272;
      CFDictionaryRef v227 = v275;
      CFArrayRef v183 = v285;
      goto LABEL_425;
    }
    CFTypeRef v220 = *(uint64_t (**)(CFAllocatorRef, uint64_t, uint64_t, uint64_t, uint64_t, const __CFDictionary **))(v283 + 88);
    CFAllocatorRef v221 = CFGetAllocator((CFTypeRef)v283);
    uint64_t v222 = *(void *)(a2 + 32);
    uint64_t v223 = *(void *)(a2 + 40);
    uint64_t v224 = *(void *)(a2 + 64);
    uint64_t v225 = AMFDRAllowIncompleteData(v283);
    char v226 = v220(v221, v222, v223, v224, v225, &v292);
    CFArrayRef v183 = v285;
    CFIndex v8 = v286;
    if ((v226 & 1) == 0)
    {
      AMFDRErrorPushInternal((uint64_t)v286, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"copyMGOverride failed", Count);
    }
    else
    {
LABEL_586:
      if (AMFDRSealingMapCopyManifestPropertiesForDevice((CFDictionaryRef *)v283, v292, v217, &v293, (uint64_t)v8))
      {
        if (*v217) {
          AMSupportLogInternal();
        }
        if (v293) {
          AMSupportLogInternal();
        }
LABEL_404:
        CFMutableArrayRef v216 = v272;
        CFIndex v26 = Mutable;
        CFIndex v25 = theArray;
        if (CFArrayGetCount(v272) || CFArrayGetCount(v266))
        {
          if (v259 & 1 | !v261) {
            AMFDRErrorPushInternal((uint64_t)v8, 28, 0, v272, v266, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"kAMFDRErrorMissingNonGeneratedData:Failed to fetch data for instances %@\nFailed to fetch multi-manifest for instances %@", (char)v272);
          }
          else {
            AMFDRErrorPushInternal((uint64_t)v8, 20, 0, v272, v266, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"kAMFDRErrorMissingGeneratedData: Failed to fetch data for instances %@\nFailed to fetch multi-manifest for instances %@", (char)v272);
          }
        }
        if (v183 && CFArrayGetCount(v183) >= 1)
        {
          AMSupportLogInternal();
          *(unsigned char *)(v283 + 40) = 0;
        }
        CFDictionaryRef v227 = v275;
        LOBYTE(v9) = theDicta;
        goto LABEL_425;
      }
    }
    goto LABEL_542;
  }
  CFIndex v191 = 0;
  char v259 = 0;
  while (1)
  {
    uint64_t v192 = v31;
    if (v152) {
      CFRelease(v152);
    }
    CFStringRef v193 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v185 + 32), v191);
    CFStringRef v194 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v185 + 40), v191);
    if (!v193)
    {
      CFStringRef v230 = @"dataClass is NULL. Sealing failed.";
LABEL_480:
      AMFDRErrorPushInternal((uint64_t)v8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v230, Count);
      LOBYTE(v9) = 0;
      CFMutableArrayRef v152 = 0;
      goto LABEL_506;
    }
    CFStringRef v195 = v194;
    if (!v194)
    {
      CFStringRef v230 = @"dataInstance is NULL. Sealing failed.";
      goto LABEL_480;
    }
    CFAllocatorRef v196 = CFGetAllocator((CFTypeRef)v185);
    CFMutableArrayRef v152 = (__CFArray *)AMFDRDataLocalCreateFullKey(v196, (uint64_t)v193, (uint64_t)v195);
    if (!v152)
    {
      AMFDRErrorPushInternal((uint64_t)v8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"failed to create data instance string", Count);
      goto LABEL_505;
    }
    if (v177)
    {
      AMSupportLogInternal();
      goto LABEL_324;
    }
    if (v281)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v185 + 64), v191);
      v198 = (const void *)AMSupportSafeRetain();
      if (v198)
      {
        CFStringRef v197 = v198;
        CFTypeID v199 = CFGetTypeID(v198);
        if (v199 == CFDataGetTypeID())
        {
          AMSupportLogInternal();
          goto LABEL_358;
        }
        CFStringRef v232 = @"Expected data type in sealedData->dataArray";
LABEL_495:
        AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v232, Count);
        CFIndex v26 = Mutable;
        CFIndex v25 = theArray;
        CFDataRef v52 = v266;
        CFMutableArrayRef v216 = v272;
        CFArrayRef v183 = v285;
        goto LABEL_525;
      }
    }
    if (!v280) {
      break;
    }
    if (!v275)
    {
      int v177 = 0;
      CFStringRef v197 = 0;
      goto LABEL_361;
    }
    char v200 = CFDictionaryGetValue(v275, v152);
    CFStringRef v197 = v200;
    uint64_t v185 = a2;
    if (v200) {
      CFRetain(v200);
    }
    int v177 = 0;
LABEL_362:
    CFArrayRef v205 = *(const __CFArray **)(v185 + 264);
    if (v205)
    {
      v302.CFIndex length = CFArrayGetCount(v205);
      v302.CFIndex location = 0;
      BOOL v206 = CFArrayContainsValue(v205, v302, v193) != 0;
    }
    else
    {
      BOOL v206 = 0;
    }
    CFArrayRef v207 = *(const __CFArray **)(a2 + 296);
    if (v207)
    {
      v303.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(a2 + 296));
      v303.CFIndex location = 0;
      BOOL v208 = CFArrayContainsValue(v207, v303, v193) != 0;
    }
    else
    {
      BOOL v208 = 0;
    }
    uint64_t v185 = a2;
    if (v197) {
      goto LABEL_369;
    }
    if (!v177)
    {
      if (v280)
      {
        CFErrorRef v297 = 0;
        if (cfb)
        {
          CFTypeRef v212 = (__CFError *)CFDictionaryGetValue(cfb, v152);
          CFErrorRef v297 = v212;
          if (v212)
          {
            CFIndex v213 = CFErrorGetCode(v212);
            uint64_t v214 = AMFDRGetUnderlyingErrorCode(v283, &v297);
            if (v213 == 701 || v214 == 404) {
              goto LABEL_387;
            }
            CFIndex v8 = v286;
            AMFDRErrorPushInternal((uint64_t)v286, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Unexpected error and underlying error for %@:%@: %ld, %ld", (char)v193);
LABEL_505:
            LOBYTE(v9) = 0;
LABEL_506:
            CFIndex v26 = Mutable;
            CFIndex v25 = theArray;
            CFDataRef v52 = v266;
            goto LABEL_507;
          }
          char v245 = (char)v193;
          CFStringRef v234 = @"%@:%@ is missing but multiRequestError is NULL";
        }
        else
        {
          char v245 = (char)v193;
          CFStringRef v234 = @"%@:%@ is missing but multiRequestErrors is NULL";
        }
        CFIndex v8 = v286;
        AMFDRErrorPushInternal((uint64_t)v286, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v234, v245);
        goto LABEL_505;
      }
      if (AMFDRGetUnderlyingErrorCode(v283, (CFErrorRef *)v286) == 404)
      {
        if (v286 && *v286)
        {
          CFRelease(*v286);
          *CFRange v286 = 0;
        }
        goto LABEL_387;
      }
      AMFDRErrorPushInternal((uint64_t)v286, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Unexpected error for %@:%@: %ld", (char)v193);
      LOBYTE(v9) = 0;
      CFIndex v8 = v286;
      goto LABEL_506;
    }
    AMSupportLogInternal();
LABEL_387:
    if (!v208)
    {
      AMSupportLogInternal();
      CFIndex v8 = v286;
      uint64_t v185 = a2;
      goto LABEL_370;
    }
    uint64_t v185 = a2;
    AMSupportLogInternal();
    CFArrayAppendValue(v272, v152);
    BOOL theDicta = 0;
    if (v206) {
      BOOL v261 = 1;
    }
    else {
      char v259 = 1;
    }
LABEL_369:
    CFIndex v8 = v286;
LABEL_370:
    uint64_t v31 = v192;
    CFArrayRef v183 = v285;
    if (v285)
    {
      if (CFArrayGetCount(v285) >= 1)
      {
        v304.CFIndex length = CFArrayGetCount(v285);
        v304.CFIndex location = 0;
        CFIndex v209 = CFArrayGetFirstIndexOfValue(v285, v304, v193);
        if (v209 != -1)
        {
          *(unsigned char *)(v283 + 40) = 1;
          if (v197) {
            CFArrayRemoveValueAtIndex(v285, v209);
          }
        }
      }
    }
    CFIndex v210 = CFArrayGetCount(*(CFArrayRef *)(v185 + 64));
    CFTypeRef v211 = *(__CFArray **)(v185 + 64);
    if (v210 != v31)
    {
      CFArrayAppendValue(v211, v197);
      if (!v197) {
        goto LABEL_380;
      }
LABEL_379:
      CFRelease(v197);
      goto LABEL_380;
    }
    CFArraySetValueAtIndex(v211, v191, v197);
    if (v197) {
      goto LABEL_379;
    }
LABEL_380:
    if (v8 && *v8)
    {
      CFRelease(*v8);
      *CFIndex v8 = 0;
    }
    if (v31 == ++v191) {
      goto LABEL_403;
    }
  }
  if (v290)
  {
    CFRelease(v290);
    CFRange v290 = 0;
  }
  *(unsigned char *)(v283 + 41) = 0;
  if (v267) {
    CFArrayRef v201 = AMFDRDataCopy(v283, v193, v195, (uint64_t)v8);
  }
  else {
    CFArrayRef v201 = (void *)AMFDRDataPopulate(v283, (uint64_t)v193, (uint64_t)v195, (uint64_t)&v290, (uint64_t)v8);
  }
  CFStringRef v197 = v201;
  char v202 = v281;
  if (!v290) {
    char v202 = 1;
  }
  if ((v202 & 1) != 0 || CFDictionaryGetCount((CFDictionaryRef)v290) < 1)
  {
LABEL_347:
    if (v281)
    {
      if (v290 && CFDictionaryGetCount((CFDictionaryRef)v290))
      {
        CFStringRef v233 = @"Unexpected populateInfo value";
        goto LABEL_523;
      }
      AMSupportLogInternal();
    }
    if (!*(unsigned char *)(v283 + 41))
    {
LABEL_358:
      int v177 = 0;
      goto LABEL_361;
    }
    if (AMFDRGetUnderlyingErrorCode(v283, (CFErrorRef *)v8) == 403)
    {
      if (v197)
      {
        CFStringRef v232 = @"valueData is not NULL";
        goto LABEL_495;
      }
      if ((v257 & 1) == 0)
      {
        AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"permissions request failed", Count);
        goto LABEL_505;
      }
      AMSupportLogInternal();
      if (v8)
      {
        uint64_t v185 = a2;
        if (*v8)
        {
          CFRelease(*v8);
          CFStringRef v197 = 0;
          *CFIndex v8 = 0;
          goto LABEL_325;
        }
LABEL_324:
        CFStringRef v197 = 0;
LABEL_325:
        int v177 = 1;
        goto LABEL_362;
      }
      CFStringRef v197 = 0;
      int v177 = 1;
LABEL_361:
      uint64_t v185 = a2;
      goto LABEL_362;
    }
    CFStringRef v233 = @"unexpected error code";
LABEL_523:
    AMFDRErrorPushInternal((uint64_t)v8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", v233, Count);
    goto LABEL_524;
  }
  v203 = *(__CFDictionary **)(a2 + 160);
  if (v203
    || (CFAllocatorRef v204 = CFGetAllocator((CFTypeRef)v283),
        v203 = CFDictionaryCreateMutable(v204, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]),
        (*(void *)(a2 + 160) = v203) != 0))
  {
    CFDictionarySetValue(v203, v152, v290);
    goto LABEL_347;
  }
  AMFDRErrorPushInternal((uint64_t)v8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"__AMFDRSealedDataPopulatePrivate", @"Failed to allocate populateAdditions", Count);
LABEL_524:
  CFIndex v26 = Mutable;
  CFIndex v25 = theArray;
  CFDataRef v52 = v266;
  CFMutableArrayRef v216 = v272;
  CFArrayRef v183 = v285;
  if (v197) {
LABEL_525:
  }
    CFRelease(v197);
  LOBYTE(v9) = 0;
LABEL_563:
  CFDictionaryRef v227 = v275;
LABEL_425:
  if (v227) {
LABEL_426:
  }
    CFRelease(v227);
LABEL_427:
  if (v254) {
    CFRelease(v254);
  }
  if (v277) {
    CFRelease(v277);
  }
  if (v216) {
LABEL_432:
  }
    CFRelease(v216);
LABEL_433:
  if (v52) {
    CFRelease(v52);
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v152) {
    CFRelease(v152);
  }
  if (valuesa) {
    CFRelease(valuesa);
  }
  if (cfb) {
    CFRelease(cfb);
  }
LABEL_443:
  if (v292)
  {
    CFRelease(v292);
    CFDictionaryRef v292 = 0;
  }
  if (v293)
  {
    CFRelease(v293);
    CFTypeRef v293 = 0;
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v291)
  {
    CFRelease(v291);
    CFDictionaryRef v291 = 0;
  }
  if (v290)
  {
    CFRelease(v290);
    CFRange v290 = 0;
  }
  if (v264) {
    CFRelease(v264);
  }
  if (v289)
  {
    CFRelease(v289);
    CFTypeRef v289 = 0;
  }
  if (v8 != 0 && (v9 & 1) != 0 && *v8)
  {
    CFRelease(*v8);
    *CFIndex v8 = 0;
  }
  return v9 & 1;
}

uint64_t AMFDRSealedDataPopulateWithExistingData(uint64_t a1, CFTypeRef cf, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  CFAllocatorRef v14 = CFGetAllocator(cf);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v16 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, @"KeepExistingData", (const void *)*MEMORY[0x263EFFB40]);
    uint64_t v17 = __AMFDRSealedDataPopulatePrivate(v16, a1, (uint64_t)cf, a3, a4, a5, a6, a7);
  }
  else
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataPopulateWithExistingData", @"failed to allocate privateOptions", v19);
    uint64_t v17 = 0;
  }
  AMSupportSafeRelease();
  return v17;
}

uint64_t AMFDRSealedDataSetDataClassInstance(void *a1, CFTypeRef cf, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  if (!a1)
  {
    CFStringRef v23 = @"sealedData is NULL";
    goto LABEL_28;
  }
  if (!cf || (CFTypeID v12 = CFGetTypeID(cf), v12 != CFStringGetTypeID()))
  {
    CFStringRef v23 = @"sealedDataClass must be a CFString";
LABEL_28:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataSetDataClassInstance", v23, v24);
    return 0;
  }
  if (!a3 || (CFTypeID v13 = CFGetTypeID(a3), v13 != CFStringGetTypeID()))
  {
    CFStringRef v23 = @"sealedDataInstance must be a CFString";
    goto LABEL_28;
  }
  if (!a4 || (CFTypeID v14 = CFGetTypeID(a4), v14 != CFArrayGetTypeID()))
  {
    CFStringRef v23 = @"dataClassArray must be a CFArray";
    goto LABEL_28;
  }
  if (!a5 || (CFTypeID v15 = CFGetTypeID(a5), v15 != CFArrayGetTypeID()))
  {
    CFStringRef v23 = @"dataInstanceArray must be a CFArray";
    goto LABEL_28;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a4);
  if (Count != CFArrayGetCount((CFArrayRef)a5))
  {
    char v24 = CFArrayGetCount((CFArrayRef)a4);
    CFArrayGetCount((CFArrayRef)a5);
    CFStringRef v23 = @"dataClassArray length (%ld) does not match dataInstanceArray (%ld)";
    goto LABEL_28;
  }
  uint64_t v17 = (const void *)a1[4];
  if (v17) {
    CFRelease(v17);
  }
  a1[4] = a4;
  CFRetain(a4);
  CFIndex v18 = (const void *)a1[5];
  if (v18) {
    CFRelease(v18);
  }
  a1[5] = a5;
  CFRetain(a5);
  char v19 = (const void *)a1[8];
  if (v19)
  {
    CFRelease(v19);
    a1[8] = 0;
  }
  CFArrayRef v20 = (const void *)a1[9];
  if (v20) {
    CFRelease(v20);
  }
  a1[9] = cf;
  CFRetain(cf);
  CFIndex v21 = (const void *)a1[10];
  if (v21) {
    CFRelease(v21);
  }
  a1[10] = a3;
  CFRetain(a3);
  return 1;
}

uint64_t AMFDRSealedDataSetIntraFactoryDataClassInstance(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v14 = @"sealedData is NULL";
    goto LABEL_16;
  }
  if (!cf || (CFTypeID v8 = CFGetTypeID(cf), v8 != CFArrayGetTypeID()))
  {
    CFStringRef v14 = @"intraDataClasses must be a CFArray";
LABEL_16:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataSetIntraFactoryDataClassInstance", v14, v15);
    return 0;
  }
  if (!a3 || (CFTypeID v9 = CFGetTypeID(a3), v9 != CFArrayGetTypeID()))
  {
    CFStringRef v14 = @"intraDataInstances must be a CFArray";
    goto LABEL_16;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count != CFArrayGetCount((CFArrayRef)a3))
  {
    char v15 = CFArrayGetCount((CFArrayRef)cf);
    CFArrayGetCount((CFArrayRef)a3);
    CFStringRef v14 = @"intraDataClasses length (%ld) does not match intraDataInstances (%ld)";
    goto LABEL_16;
  }
  uint64_t v11 = *(const void **)(a1 + 48);
  if (v11) {
    CFRelease(v11);
  }
  *(void *)(a1 + 48) = cf;
  CFRetain(cf);
  CFTypeID v12 = *(const void **)(a1 + 56);
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a1 + 56) = a3;
  CFRetain(a3);
  return 1;
}

uint64_t AMFDRSealedDataSetMinimalManifestClassInstance(void *a1, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4, uint64_t a5)
{
  if (!a1)
  {
    CFStringRef v17 = @"sealedData is NULL";
LABEL_25:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataSetMinimalManifestClassInstance", v17, v18);
    return 0;
  }
  if (cf)
  {
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 != CFArrayGetTypeID())
    {
      CFStringRef v17 = @"minimalSealingDataInstances must be a CFArray";
      goto LABEL_25;
    }
  }
  if (a3)
  {
    CFTypeID v11 = CFGetTypeID(a3);
    if (v11 != CFArrayGetTypeID())
    {
      CFStringRef v17 = @"minimalSealedDataClasses must be a CFArray";
      goto LABEL_25;
    }
  }
  if (a4)
  {
    CFTypeID v12 = CFGetTypeID(a4);
    if (v12 != CFArrayGetTypeID())
    {
      CFStringRef v17 = @"minimalSealedDataInstances must be a CFArray";
      goto LABEL_25;
    }
  }
  CFTypeID v13 = (const void *)a1[22];
  if (v13) {
    CFRelease(v13);
  }
  a1[22] = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFStringRef v14 = (const void *)a1[23];
  if (v14) {
    CFRelease(v14);
  }
  a1[23] = a3;
  if (a3) {
    CFRetain(a3);
  }
  char v15 = (const void *)a1[24];
  if (v15) {
    CFRelease(v15);
  }
  a1[24] = a4;
  if (a4) {
    CFRetain(a4);
  }
  return 1;
}

uint64_t AMFDRSealedDataSetRepairConfiguration(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataSetRepairConfiguration", @"sealedData is NULL", v9);
    return 0;
  }
  if (!cf || (CFTypeID v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataSetRepairConfiguration", @"repairConfigurationMap has wrong type %@", (char)cf);
    return 0;
  }
  CFTypeID v7 = *(const void **)(a1 + 224);
  if (v7) {
    CFRelease(v7);
  }
  *(void *)(a1 + 224) = cf;
  CFRetain(cf);
  return 1;
}

BOOL AMFDRSealedDataClear(void *a1, uint64_t a2)
{
  if (a1)
  {
    CFAllocatorRef v3 = (const void *)a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    CFDictionaryRef v4 = (const void *)a1[3];
    if (v4)
    {
      CFRelease(v4);
      a1[3] = 0;
    }
    CFDictionaryRef v5 = (const void *)a1[8];
    if (v5)
    {
      CFRelease(v5);
      a1[8] = 0;
    }
    CFTypeID v6 = (const void *)a1[11];
    if (v6)
    {
      CFRelease(v6);
      a1[11] = 0;
    }
    CFTypeID v7 = (const void *)a1[12];
    if (v7)
    {
      CFRelease(v7);
      a1[12] = 0;
    }
    CFTypeID v8 = (const void *)a1[13];
    if (v8)
    {
      CFRelease(v8);
      a1[13] = 0;
    }
    char v9 = (const void *)a1[14];
    if (v9)
    {
      CFRelease(v9);
      a1[14] = 0;
    }
    CFTypeID v10 = (const void *)a1[15];
    if (v10)
    {
      CFRelease(v10);
      a1[15] = 0;
    }
    CFTypeID v11 = (const void *)a1[19];
    if (v11)
    {
      CFRelease(v11);
      a1[19] = 0;
    }
    CFTypeID v12 = (const void *)a1[20];
    if (v12)
    {
      CFRelease(v12);
      a1[20] = 0;
    }
  }
  else
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataClear", @"sealedData is NULL", v14);
  }
  return a1 != 0;
}

BOOL AMFDRSealedDataPopulatedFromManifest(uint64_t a1, int a2, uint64_t a3)
{
  if (a1)
  {
    CFDictionaryRef v4 = (void *)MEMORY[0x263EFFB40];
    if (!a2) {
      CFDictionaryRef v4 = (void *)MEMORY[0x263EFFB38];
    }
    *(void *)(a1 + 208) = *v4;
  }
  else
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataPopulatedFromManifest", @"sealedData is NULL", v6);
  }
  return a1 != 0;
}

uint64_t AMFDRSealedDataRecover(uint64_t a1, uint64_t cf, uint64_t a3, int a4, CFTypeRef *a5, uint64_t a6)
{
  char v6 = (__CFError **)a6;
  uint64_t v183 = *MEMORY[0x263EF8340];
  char v177 = a4;
  CFArrayRef v175 = 0;
  CFTypeRef v176 = 0;
  CFTypeRef v173 = 0;
  CFArrayRef v174 = 0;
  CFTypeRef v172 = 0;
  int v170 = 0;
  int valuePtr = 1;
  if (!cf)
  {
    CFStringRef v139 = @"amfdrLocal is NULL";
LABEL_343:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", v139, v154);
LABEL_344:
    uint64_t v57 = 0;
    CFDictionaryRef cfb = 0;
    CFMutableDictionaryRef Mutable = 0;
LABEL_345:
    CFDictionaryRef v162 = 0;
    CFMutableDictionaryRef theDict = 0;
    goto LABEL_69;
  }
  if (!a3)
  {
    CFStringRef v139 = @"amfdrRemote is NULL";
    goto LABEL_343;
  }
  if (!a1)
  {
    CFStringRef v139 = @"sealedData is NULL";
    goto LABEL_343;
  }
  if (!*(void *)(a1 + 80))
  {
    CFStringRef v139 = @"sealedData->sealedDataInstance is NULL";
    goto LABEL_343;
  }
  if (!*(void *)(a1 + 32))
  {
    CFStringRef v139 = @"sealedData->dataClassArray is NULL";
    goto LABEL_343;
  }
  if (!*(void *)(a1 + 40))
  {
    CFStringRef v139 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_343;
  }
  CFAllocatorRef v11 = CFGetAllocator((CFTypeRef)cf);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"Failed to allocate fdrInfo.", v154);
    goto LABEL_344;
  }
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)cf);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal((uint64_t)v6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"Failed to allocate privateOptions.", v154);
    uint64_t v57 = 0;
    CFDictionaryRef cfb = 0;
    goto LABEL_345;
  }
  if ((AMFDRSealedDataConfigureOptionsForRecover(a1, (CFTypeRef *)cf, a3, *(const void **)(a1 + 80), (uint64_t)v6) & 1) == 0)
  {
    CFStringRef v140 = @"AMFDRSealedDataConfigureOptionsForRecover failed.";
    goto LABEL_349;
  }
  CFTypeID v13 = *(const void **)(a3 + 16);
  if (!v13)
  {
    CFBooleanRef v54 = @"amfdrRemote->optionsDict is NULL";
    goto LABEL_64;
  }
  CFTypeID v14 = CFGetTypeID(v13);
  if (v14 != CFDictionaryGetTypeID())
  {
    CFBooleanRef v54 = @"amfdrRemote->optionsDict must be a CFDictionaryRef";
    goto LABEL_64;
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ForceSealing")
    && (char v15 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ForceSealing"),
        CFTypeID v16 = CFGetTypeID(v15),
        v16 == CFBooleanGetTypeID()))
  {
    CFBooleanRef v17 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ForceSealing");
    if (CFBooleanGetValue(v17)) {
      int v18 = a4;
    }
    else {
      int v18 = 0;
    }
    int v159 = v18;
  }
  else
  {
    int v159 = 0;
  }
  CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"SealingUpdateProperties");
  CFArrayRef v20 = v19;
  if (v19)
  {
    CFTypeID v21 = CFGetTypeID(v19);
    if (v21 != CFArrayGetTypeID())
    {
      CFBooleanRef v54 = @"kAMFDROptionSealingUpdateProperties is not array";
      goto LABEL_64;
    }
    CFIndex Count = CFArrayGetCount(v20);
    if (Count >= 1)
    {
      CFIndex v23 = Count;
      CFIndex v24 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v20, v24);
        if (!ValueAtIndex) {
          break;
        }
        CFTypeID v26 = CFGetTypeID(ValueAtIndex);
        if (v26 != CFStringGetTypeID()) {
          break;
        }
        if (v23 == ++v24) {
          goto LABEL_26;
        }
      }
      CFBooleanRef v54 = @"malformed property";
      goto LABEL_64;
    }
  }
LABEL_26:
  CFBooleanRef v27 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"SealingUpdateRepairConfigurationAsidMetadata");
  v158 = v27 && (CFBooleanRef v28 = v27, v29 = CFGetTypeID(v27), v29 == CFBooleanGetTypeID()) && CFBooleanGetValue(v28) != 0;
  CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ExportDataClasses");
  CFArrayRef v31 = v30;
  if (v30)
  {
    CFTypeID v32 = CFGetTypeID(v30);
    if (v32 != CFArrayGetTypeID()) {
      goto LABEL_352;
    }
    CFIndex v33 = CFArrayGetCount(v31);
    if (v33 >= 1)
    {
      CFIndex v34 = v33;
      CFIndex v35 = 0;
      do
      {
        CFAllocatorRef v36 = CFArrayGetValueAtIndex(v31, v35);
        if (!v36) {
          goto LABEL_62;
        }
        CFTypeID v37 = CFGetTypeID(v36);
        if (v37 != CFStringGetTypeID()) {
          goto LABEL_62;
        }
      }
      while (v34 != ++v35);
    }
  }
  CFArrayRef v38 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ClaimDataClasses");
  CFTypeID v161 = v6;
  if (!v38)
  {
LABEL_46:
    CFIndex v156 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ExportAfterSealing");
    CFTypeRef v166 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"SealingUpdateDataClasses");
    if ((a4 & 1) == 0) {
      CFDictionaryAddValue(theDict, @"SkipProperties", (const void *)*MEMORY[0x263EFFB40]);
    }
    if ((__AMFDRSealedDataPopulatePrivate(theDict, a1, cf, 0, 0, 0, 0, (uint64_t)v6) & 1) == 0)
    {
      AMSupportLogInternal();
      _AMFDRSealedDataSetFDRInfo(v6, @"MissingDataInstances", Mutable, @"MissingLocalDataInstances");
      AMFDRSetStat((CFMutableDictionaryRef *)cf, @"FDRLocalDataMissing", 1);
      char v6 = v161;
      AMFDRSetStat((CFMutableDictionaryRef *)a3, @"FDRLocalDataMissing", 1);
    }
    if (v6 && *v6)
    {
      CFRelease(*v6);
      const void *v6 = 0;
    }
    unint64_t v46 = (unint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ExportLegacyDataClasses");
    if (v46)
    {
      CFStringRef v157 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"DataVersion");
      CFStringRef v47 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"UseSikDataInstance");
      CFTypeID v48 = CFGetTypeID((CFTypeRef)v46);
      if (v48 != CFArrayGetTypeID())
      {
        CFStringRef format = @"exportLegacyData: kAMFDROptionExportLegacyDataClasses is not array";
        *(_OWORD *)CFDictionaryRef v148 = 0u;
        long long v149 = 0u;
        *(_OWORD *)CFStringRef value = 0u;
        char v6 = v161;
        goto LABEL_65;
      }
      CFIndex v49 = CFArrayGetCount((CFArrayRef)v46);
      char v6 = v161;
      if (v49 >= 1)
      {
        CFIndex v50 = v49;
        CFStringRef cfa = v47;
        CFIndex v51 = 0;
        while (1)
        {
          CFDataRef v52 = CFArrayGetValueAtIndex((CFArrayRef)v46, v51);
          if (!v52) {
            break;
          }
          CFTypeID v53 = CFGetTypeID(v52);
          BOOL v120 = v53 == CFStringGetTypeID();
          char v6 = v161;
          if (!v120) {
            break;
          }
          if (v50 == ++v51)
          {
            CFStringRef v47 = cfa;
            goto LABEL_115;
          }
        }
        CFBooleanRef v54 = @"exportLegacyData: malformed dataClass";
        goto LABEL_64;
      }
    }
    else
    {
      CFStringRef v47 = 0;
      CFStringRef v157 = 0;
    }
LABEL_115:
    CFBooleanRef v65 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"ForceUpdate");
    v68 = v65 && (CFBooleanRef v66 = v65, v67 = CFGetTypeID(v65), v67 == CFBooleanGetTypeID()) && CFBooleanGetValue(v66) != 0;
    CFBooleanRef v69 = (CFTypeRef *)v161;
    if (AMFDRSealedDataVerify((void *)a1, cf, (uint64_t)v161))
    {
      int v70 = a4 ^ 1;
      if (v20) {
        int v71 = 0;
      }
      else {
        int v71 = v159 ^ 1;
      }
      int v72 = v71 & !v158;
      if (v166) {
        int v72 = 0;
      }
      if ((v72 | v70) == 1)
      {
        int v73 = (unint64_t)v31 | v46 ? a4 ^ 1 : 0;
        if (((v68 | v73) & 1) == 0)
        {
          CFStringRef v75 = CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"TrustObject");
          CFStringRef v76 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"TrustObject");
          char v6 = v161;
          if (v76 && v75 && !CFEqual(v75, v76) && (AMFDRDataPutTrustObject(cf) & 1) == 0)
          {
            AMFDRErrorPushInternal((uint64_t)v161, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"Failed to store trust object in local data store", v154);
            goto LABEL_67;
          }
          AMSupportLogInternal();
          CFDictionaryRef v162 = 0;
          CFDictionaryRef cfb = 0;
          CFTypeRef v167 = 0;
          CFBooleanRef v58 = 0;
          CFStringRef v59 = 0;
          goto LABEL_251;
        }
      }
      if (v166) {
        char v74 = a4 ^ 1;
      }
      else {
        char v74 = 1;
      }
      if ((v74 & 1) == 0 || !((v20 == 0) | v70 & 1) || ((!v158 | v70) & 1) == 0 || ((v159 ^ 1 | v70) & 1) == 0) {
        goto LABEL_148;
      }
      if (!((unint64_t)v31 | v46)) {
        int v70 = 0;
      }
      if (v70 != 1)
      {
        CFBooleanRef v69 = (CFTypeRef *)v161;
        if (v68) {
          AMSupportLogInternal();
        }
      }
      else
      {
LABEL_148:
        AMSupportLogInternal();
        CFBooleanRef v69 = (CFTypeRef *)v161;
      }
    }
    else
    {
      AMSupportLogInternal();
      _AMFDRSealedDataSetFDRInfo(v161, @"UnverifiedDataInstances", Mutable, @"UnverifiedLocalDataInstances");
      AMFDRSetStat((CFMutableDictionaryRef *)cf, @"FDRLocalVerifyFail", 1);
      AMFDRSetStat((CFMutableDictionaryRef *)a3, @"FDRLocalVerifyFail", 1);
    }
    CFArrayRef v155 = (const __CFArray *)v46;
    if (v69 && *v69)
    {
      CFRelease(*v69);
      *CFBooleanRef v69 = 0;
    }
    BOOL v77 = AMFDRDigestEnabled(a3, 0);
    if (a4)
    {
      CFIndex v78 = *(const void **)(a1 + 88);
      if (v78)
      {
        CFRelease(v78);
        *(void *)(a1 + 88) = 0;
      }
      CFStringRef v79 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"SealIdentifiers");
      AMFDRSetOption(a3, @"SealIdentifiers", v79);
      *(void *)(a3 + 88) = *(void *)(cf + 88);
      if (v77) {
        char v80 = AMFDRSealedDataPopulateWithExistingData(a1, (CFTypeRef)a3, 0, 0, 0, 0, (uint64_t)v161);
      }
      else {
        char v80 = __AMFDRSealedDataPopulatePrivate(0, a1, a3, 0, 0, 0, 0, (uint64_t)v161);
      }
      char v84 = v80;
      _AMFDRSealedDataSetFDRInfo(v161, @"MissingDataInstances", Mutable, @"MissingDataInstances");
      if ((v84 & 1) == 0
        && (!AMFDRAllowIncompleteData(a3)
         || (AMFDRDataErrorIsBenign(a3, (char)@"AMFDRSealedDataPopulate", v161) & 1) == 0))
      {
        AMFDRSetStat((CFMutableDictionaryRef *)cf, @"FDRRecoveryFail", 1);
        AMFDRSetStat((CFMutableDictionaryRef *)a3, @"FDRRecoveryFail", 1);
        CFStringRef format = @"AMFDRSealedDataPopulate with amfdrRemote failed. Data Recovery failed.";
        *(_OWORD *)CFDictionaryRef v148 = 0u;
        long long v149 = 0u;
        *(_OWORD *)CFStringRef value = 0u;
        char v6 = v161;
LABEL_174:
        uint64_t v55 = (uint64_t)v6;
        CFIndex v56 = 7;
        goto LABEL_66;
      }
      if (AMFDRSealedDataIsEmpty(a1)) {
        goto LABEL_169;
      }
      CFArrayRef v85 = *(const void **)(a1 + 16);
      char v6 = v161;
      if (v85) {
        CFTypeRef v167 = CFRetain(v85);
      }
      else {
        CFTypeRef v167 = 0;
      }
      AMFDRSetOption(a3, @"SealingManifest", 0);
      if (AMFDRSealedDataVerify((void *)a1, a3, (uint64_t)v161))
      {
        AMSupportLogInternal();
        CFDictionaryRef cfb = 0;
LABEL_210:
        CFDictionaryRef v162 = 0;
        goto LABEL_211;
      }
      if (v161 && *v161)
      {
        CFDictionaryRef v93 = CFErrorCopyUserInfo(*v161);
        if (v93)
        {
          CFDictionaryRef cfb = v93;
          CFDictionaryRef v94 = (const __CFDictionary *)CFDictionaryGetValue(v93, @"UnverifiedDataInstances");
          if (!v94) {
            goto LABEL_210;
          }
          CFDictionaryRef v95 = v94;
          CFAllocatorRef v96 = CFGetAllocator((CFTypeRef)a1);
          CFDictionaryRef v97 = CFDictionaryCreateMutable(v96, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          uint64_t context = a3;
          CFAllocatorRef v179 = (CFTypeRef *)a1;
          CFDictionaryRef v180 = v97;
          CFIndex v181 = &v176;
          CFAllocatorRef v182 = &v177;
          CFDictionaryApplyFunction(v95, (CFDictionaryApplierFunction)_checkVerificationError, &context);
          CFDictionaryRef v162 = v97;
          if (v176)
          {
            AMFDRErrorPushInternal((uint64_t)v161, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"failed to verify test station signature, _checkVerificationError %@", (char)v176);
          }
          else
          {
            uint64_t context = a1;
            CFAllocatorRef v179 = &v176;
            CFDictionaryRef v180 = 0;
            CFIndex v181 = 0;
            CFDictionaryApplyFunction(v97, (CFDictionaryApplierFunction)_deleteFromSealedData, &context);
            if (!v176)
            {
              AMSupportLogInternal();
              char v6 = v161;
LABEL_211:
              if (v167)
              {
                CFStringRef v98 = *(const __CFString **)(a1 + 16);
                if (!v98)
                {
                  CFStringRef v98 = (const __CFString *)CFRetain(v167);
                  *(void *)(a1 + 16) = v98;
                }
                AMFDRSetOption(a3, @"SealingManifest", v98);
              }
              int v99 = AMFDRSealedDataVerify((void *)a1, a3, (uint64_t)v6);
              if (v99)
              {
                int v100 = v159;
                if (v20) {
                  int v100 = 1;
                }
                if (((v100 | v158) & 1) == 0)
                {
                  CFDictionaryRef v60 = 0;
                  CFMutableStringRef v61 = 0;
                  CFStringRef v62 = 0;
                  int v103 = v156;
                  goto LABEL_288;
                }
LABEL_230:
                AMSupportLogInternal();
                CFBooleanRef v104 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"DisallowSealing");
                if (v104
                  && (v105 = v104, v106 = CFGetTypeID(v104), v120 = v106 == CFBooleanGetTypeID(), char v6 = v161, v120)
                  && CFBooleanGetValue(v105))
                {
                  CFStringRef v143 = @"Sealing (force sealing or re-sealing) not allowed due to PR Doc setting, restore stopped as requested.";
                }
                else
                {
                  if (!AMFDRAPTicketAllowsUnsealedData(a3))
                  {
                    if (v6 && *v6)
                    {
                      CFRelease(*v6);
                      const void *v6 = 0;
                    }
                    if (AMFDRDataGetSigningVersion(cf, &v170))
                    {
                      if (!v79 || v170 != 2 || !CFBooleanGetValue((CFBooleanRef)v79)) {
                        goto LABEL_260;
                      }
                      CFDictionaryRef v107 = *(const __CFDictionary **)(a1 + 88);
                      if (v107)
                      {
                        CFIndex v108 = CFDictionaryGetValue(v107, @"SrNm");
                        CFDictionaryRef v109 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), @"mlb#");
                        if (v108) {
                          goto LABEL_260;
                        }
                        CFDictionaryRef v60 = v109;
                      }
                      else
                      {
                        CFDictionaryRef v60 = 0;
                      }
                      CFBooleanRef v110 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"AllowSealingWithMLBSerialNumber");
                      if (v110 && CFBooleanGetValue(v110))
                      {
                        if (!v60)
                        {
                          CFStringRef formatc = @"MLBSerialNumber is required for sealing when allowSealingWithMLBSerialNumber is set";
                          goto LABEL_409;
                        }
LABEL_260:
                        CFStringRef v111 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"Permissions");
                        if (!v111)
                        {
                          char v6 = v161;
                          AMFDRErrorPushInternal((uint64_t)v161, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"permStr in amfdrRemote is NULL.", v154);
                          goto LABEL_403;
                        }
                        AMFDRSetOption(cf, @"Permissions", v111);
                        CFDictionaryRef v112 = *(void (**)(uint64_t))(*(void *)(cf + 136) + 24);
                        if (v112)
                        {
                          uint64_t v113 = *(void *)(cf + 144);
                          if (v113)
                          {
                            v112(v113);
                            *(void *)(cf + 144) = 0;
                          }
                        }
                        uint64_t v114 = *(void *)(a3 + 144);
                        CFAllocatorRef v115 = *(uint64_t (**)(uint64_t))(*(void *)(a3 + 136) + 16);
                        CFStringRef v116 = v47;
                        if (v115) {
                          uint64_t v114 = v115(v114);
                        }
                        *(void *)(cf + 144) = v114;
                        CFStringRef v117 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 16), @"TrustObject");
                        CFStringRef v118 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"TrustObject");
                        AMFDRSetOption(cf, @"TrustObject", v118);
                        CFStringRef v119 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"PairedSoCs");
                        AMFDRSetOption(cf, @"PairedSoCs", v119);
                        if (v79) {
                          BOOL v120 = *(void *)(a1 + 232) == 0;
                        }
                        else {
                          BOOL v120 = 1;
                        }
                        BOOL v121 = v158;
                        if (v120) {
                          BOOL v121 = 0;
                        }
                        if (!v121
                          || (CFTypeID v122 = CFGetTypeID(v79), v122 != CFBooleanGetTypeID())
                          || !CFBooleanGetValue((CFBooleanRef)v79))
                        {
                          CFDictionaryRef v60 = 0;
                          CFMutableStringRef v61 = 0;
                          CFStringRef v62 = 0;
                          char v6 = v161;
                          int v103 = v156;
                          goto LABEL_280;
                        }
                        AMSupportLogInternal();
                        CFTypeID v123 = CFGetTypeID(Mutable);
                        int v103 = v156;
                        if (v123 == CFDictionaryGetTypeID()
                          && CFDictionaryContainsKey(Mutable, @"MissingDataInstances"))
                        {
                          CFArrayRef v124 = (const __CFArray *)CFDictionaryGetValue(Mutable, @"MissingDataInstances");
                          CFArrayRef v125 = v124;
                          if (!v124 || (CFTypeID v126 = CFGetTypeID(v124), v126 != CFArrayGetTypeID()))
                          {
                            char v6 = v161;
                            AMFDRErrorPushInternal((uint64_t)v161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"missingDataInstances has wrong type %@", (char)v125);
LABEL_403:
                            uint64_t v57 = 0;
                            goto LABEL_70;
                          }
                        }
                        else
                        {
                          CFArrayRef v125 = 0;
                        }
                        CFArrayRef v134 = *(const __CFArray **)(a1 + 232);
                        char v135 = AMFDRAllowIncompleteData(cf);
                        CFDictionaryRef RepairConfigurationAsidMetadata = (const __CFDictionary *)AMFDRDataCreateRepairConfigurationAsidMetadata(v134, v135, v125, (uint64_t)v161);
                        CFDictionaryRef v60 = RepairConfigurationAsidMetadata;
                        if (RepairConfigurationAsidMetadata)
                        {
                          CFTypeID v137 = CFGetTypeID(RepairConfigurationAsidMetadata);
                          if (v137 == CFDictionaryGetTypeID())
                          {
                            char v6 = v161;
                            if (!CFDictionaryGetCount(v60))
                            {
                              AMSupportLogInternal();
                              CFMutableStringRef v61 = 0;
                              CFStringRef v62 = 0;
                              goto LABEL_280;
                            }
                            if (AMFDRDataCopyAsidMetadataParameters(v60, (CFTypeRef *)&v175, (CFTypeRef *)&v174, &v173, &v172, (uint64_t)v161))
                            {
                              CFStringRef v62 = (const __CFString *)_CFDictionaryCopyValue(*(const __CFDictionary **)(a3 + 16), @"UseSikDataInstance");
                              CFMutableStringRef v61 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
                              if (!v61)
                              {
                                AMFDRErrorPushInternal((uint64_t)v161, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"updateAsidMetadataPermissions allocation failed", v154);
                                goto LABEL_320;
                              }
                              CFStringRef v138 = (const __CFString *)*MEMORY[0x263EFFB40];
                              AMFDRSetOption(a3, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB40]);
                              if (!AMFDRDataAppendPermissionUpdateAsidMetadata(v175, v174, a3, v61, (uint64_t)v161))
                              {
                                CFDictionaryRef v146 = @"sik AMFDRDataAppendPermissionUpdateAsidMetadata failed";
                                goto LABEL_382;
                              }
                              CFStringRef v160 = (const __CFString *)*MEMORY[0x263EFFB38];
                              AMFDRSetOption(a3, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
                              if (!AMFDRDataAppendPermissionUpdateAsidMetadata(v175, v174, a3, v61, (uint64_t)v161))
                              {
                                CFDictionaryRef v146 = @"non-sik AMFDRDataAppendPermissionUpdateAsidMetadata failed";
                                goto LABEL_382;
                              }
                              AMFDRSetOption(a3, @"UseSikDataInstance", v138);
                              if ((AMFDRDataUpdateAsidMetadata(v175, v174, v173, v172, a3, v61, (uint64_t)v161) & 1) == 0)
                              {
                                CFDictionaryRef v146 = @"sik AMFDRDataMultiUpdateMetaDataWithOptions failed";
                                goto LABEL_382;
                              }
                              AMFDRSetOption(a3, @"UseSikDataInstance", v160);
                              int v103 = v156;
                              if ((AMFDRDataUpdateAsidMetadata(v175, v174, v173, v172, a3, v61, (uint64_t)v161) & 1) == 0)
                              {
                                CFDictionaryRef v146 = @"non-sik AMFDRDataMultiUpdateMetaDataWithOptions failed";
                                goto LABEL_382;
                              }
                              AMFDRSetOption(a3, @"UseSikDataInstance", v62);
                              AMSupportLogInternal();
LABEL_280:
                              if ((AMFDRPermissionsRequest(cf, (CFTypeRef *)v6) & 1) == 0)
                              {
                                AMFDRErrorPushInternal((uint64_t)v6, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"Permissions request failed.", v154);
                                goto LABEL_320;
                              }
                              CFStringRef v127 = (const __CFString *)AMFDRGetCert(cf);
                              if (!v127)
                              {
                                AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"clientCert is NULL", v154);
                                goto LABEL_320;
                              }
                              AMFDRSetOption(a3, @"Certificate", v127);
                              AMFDRSetOption(cf, @"TrustObject", v117);
                              if ((AMFDRSealedDataCreateSealingRequest(a1, cf, (uint64_t)v6) & 1) == 0)
                              {
                                CFStringRef formatb = @"AMFDRSealedDataCreateSealingRequest failed. Sealing failed.";
LABEL_380:
                                AMFDRErrorPushInternal((uint64_t)v6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", formatb, v154);
                                goto LABEL_320;
                              }
                              if (*(void *)(a1 + 24))
                              {
                                CFStringRef v47 = v116;
                                CFAllocatorRef v128 = *(const void **)(a1 + 16);
                                if (v128)
                                {
                                  CFRelease(v128);
                                  *(void *)(a1 + 16) = 0;
                                }
                                if (AMFDRSealedDataHTTPSign(a1, (CFDictionaryRef *)a3, (CFTypeRef *)v6))
                                {
                                  AMFDRSetStat((CFMutableDictionaryRef *)cf, @"FDRSealingSuccess", 1);
                                  char v6 = v161;
                                  AMFDRSetStat((CFMutableDictionaryRef *)a3, @"FDRSealingSuccess", 1);
LABEL_288:
                                  AMSupportLogInternal();
                                  if (!v6)
                                  {
LABEL_291:
                                    if (*(void *)(a1 + 16))
                                    {
                                      if (!v103) {
                                        goto LABEL_298;
                                      }
                                      CFTypeID v129 = CFGetTypeID(v103);
                                      BOOL v120 = v129 == CFBooleanGetTypeID();
                                      char v6 = v161;
                                      if (!v120 || !CFBooleanGetValue((CFBooleanRef)v103)) {
                                        goto LABEL_298;
                                      }
                                      if (_AMFDRSealedDataExportExistingData((CFDictionaryRef *)a3, (CFArrayRef *)a1, (CFTypeRef *)v161))
                                      {
                                        AMSupportLogInternal();
LABEL_298:
                                        AMFDRSetOption(cf, @"SealingManifest", *(const __CFString **)(a1 + 16));
                                        if (AMFDRSealedDataCommit(a1, cf, 1, (uint64_t)v6))
                                        {
                                          if (v155)
                                          {
                                            CFStringRef v59 = (const __CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
                                            AMFDRSetOption(a3, @"DataVersion", v59);
                                            AMFDRSetOption(a3, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
                                            if ((_AMFDRSealedDataExport((CFArrayRef *)a1, (CFDictionaryRef *)a3, v155, (uint64_t)v6) & 1) == 0)
                                            {
                                              AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"exportLegacyData: Failed to export legacy data %@.", (char)v155);
                                              goto LABEL_391;
                                            }
                                            AMSupportLogInternal();
                                            AMFDRSetOption(a3, @"DataVersion", v157);
                                            AMFDRSetOption(a3, @"UseSikDataInstance", v47);
                                          }
                                          else
                                          {
                                            CFStringRef v59 = 0;
                                          }
                                          if (AMFDRSealedDataRestoreOptions(a1, cf, a3))
                                          {
                                            CFBooleanRef v58 = (const void *)AMSupportSafeRetain();
                                            if (AMFDRSealedDataClear((void *)a1, (uint64_t)v6))
                                            {
                                              if (AMFDRSealedDataConfigureOptionsForRecover(a1, (CFTypeRef *)cf, a3, *(const void **)(a1 + 80), (uint64_t)v6))
                                              {
                                                *(void *)(a1 + 88) = AMSupportSafeRetain();
                                                if (__AMFDRSealedDataPopulatePrivate(0, a1, cf, 0, 0, 0, 0, (uint64_t)v6) & 1) != 0|| (AMFDRDataErrorIsBenign(cf, (char)@"AMFDRSealedDataPopulate", v6))
                                                {
                                                  if (*(void *)(a1 + 16))
                                                  {
                                                    CFAllocatorRef v130 = v6;
                                                    char v131 = AMFDRSealedDataVerify((void *)a1, cf, (uint64_t)v6);
                                                    _AMFDRSealedDataSetFDRInfo(v130, @"UnverifiedDataInstances", Mutable, @"UnverifiedDataInstances");
                                                    if (v131)
                                                    {
LABEL_312:
                                                      AMSupportLogInternal();
                                                      char v6 = v130;
                                                      goto LABEL_252;
                                                    }
                                                    char v6 = v130;
                                                    if (v130
                                                      && AMFDRSealedDataVerificationErrorIsBenign(v132, (CFDictionaryRef *)cf, 0, 1, 0, *v130))
                                                    {
                                                      if (*v130)
                                                      {
                                                        CFRelease(*v130);
                                                        *CFAllocatorRef v130 = 0;
                                                      }
                                                      goto LABEL_312;
                                                    }
                                                    CFStringRef v133 = @"AMFDRSealedDataVerify with amfdrLocal failed after recovery. Data Recovery failed.";
                                                  }
                                                  else
                                                  {
                                                    if (AMFDRAPTicketAllowsUnsealedData(cf))
                                                    {
                                                      AMSupportLogInternal();
                                                      goto LABEL_252;
                                                    }
                                                    CFStringRef v133 = @"Failed to populate sealedData->sealingIM4M from local data store. Data Recovery failed.";
                                                  }
                                                }
                                                else
                                                {
                                                  CFStringRef v133 = @"Failed to populate sealedData from local data store. Data recovery failed.";
                                                }
                                                AMFDRErrorPushInternal((uint64_t)v6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", v133, v154);
LABEL_324:
                                                uint64_t v57 = 0;
                                                goto LABEL_73;
                                              }
                                              CFStringRef v142 = @"AMFDRSealedDataConfigureOptionsForRecover failed.";
                                            }
                                            else
                                            {
                                              CFStringRef v142 = @"Failed to clear populated data from sealedData. Data Recovery failed.";
                                            }
                                            AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", v142, v154);
                                            goto LABEL_324;
                                          }
                                          AMFDRErrorPushInternal((uint64_t)v6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"AMFDRSealedDataRestoreOptions failed.", v154);
LABEL_391:
                                          uint64_t v57 = 0;
                                          CFBooleanRef v58 = 0;
                                          goto LABEL_73;
                                        }
                                        CFStringRef formatb = @"AMFDRSealedDataCommit with amfdrLocal failed. Data Recovery failed.";
                                        goto LABEL_380;
                                      }
                                      CFDataRef v141 = @"Failed to export sealedData";
                                    }
                                    else
                                    {
                                      CFDataRef v141 = @"sealedData->sealingManifest is NULL. Sealing failed.";
                                    }
                                    CFStringRef formata = v141;
LABEL_383:
                                    AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", formata, v154);
                                    goto LABEL_320;
                                  }
LABEL_289:
                                  if (*v6)
                                  {
                                    CFRelease(*v6);
                                    const void *v6 = 0;
                                  }
                                  goto LABEL_291;
                                }
                                if (AMFDRAPTicketAllowsUnsealedData(a3))
                                {
                                  AMSupportLogInternal();
                                  CFBooleanRef v58 = 0;
                                  CFStringRef v59 = 0;
                                  goto LABEL_252;
                                }
                                AMFDRSetStat((CFMutableDictionaryRef *)cf, @"FDRSealingFail", 1);
                                char v6 = v161;
                                AMFDRSetStat((CFMutableDictionaryRef *)a3, @"FDRSealingFail", 1);
                                AMFDRErrorPushInternal((uint64_t)v161, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"AMFDRSealedDataSign failed. Sealing failed.", v154);
LABEL_320:
                                uint64_t v57 = 0;
                                CFBooleanRef v58 = 0;
                                CFStringRef v59 = 0;
                                goto LABEL_73;
                              }
                              CFDictionaryRef v146 = @"sealedData->sealingRequest is NULL. Sealing failed.";
LABEL_382:
                              CFStringRef formata = v146;
                              goto LABEL_383;
                            }
                            AMFDRErrorPushInternal((uint64_t)v161, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"AMFDRDataCopyAsidMetadataParameters failed", v154);
LABEL_410:
                            uint64_t v57 = 0;
                            CFBooleanRef v58 = 0;
                            CFStringRef v59 = 0;
                            goto LABEL_72;
                          }
                        }
                        CFStringRef formatc = @"AMFDRDataCreateRepairConfigurationAsidMetadata failed";
LABEL_409:
                        char v6 = v161;
                        AMFDRErrorPushInternal((uint64_t)v161, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", formatc, v154);
                        goto LABEL_410;
                      }
                      CFStringRef v144 = @"SerialNumber is required for sealing";
                    }
                    else
                    {
                      CFStringRef v144 = @"failed to get FDR data version";
                    }
                    char v6 = v161;
                    AMFDRErrorPushInternal((uint64_t)v161, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", v144, v154);
                    goto LABEL_403;
                  }
                  CFStringRef v143 = @"Sealing is not allowed if FDRAllowUnsealedData is enabled";
                }
                AMFDRErrorPushInternal((uint64_t)v6, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", v143, v154);
                goto LABEL_403;
              }
              if (!v6 || (AMFDRSealedDataVerificationErrorIsBenign(v99, (CFDictionaryRef *)cf, 0, 0, 1, *v6) & 1) == 0)
              {
                AMSupportLogInternal();
                goto LABEL_403;
              }
              int v101 = v159;
              if (v20) {
                int v101 = 1;
              }
              if (((v101 | v158) & 1) != 0 || !_AMFDRVerificationErrorRemoteDataIsSealed(a3, v6)) {
                goto LABEL_230;
              }
              AMSupportLogInternal();
              if (v167)
              {
                CFStringRef v102 = *(const __CFString **)(a1 + 16);
                int v103 = v156;
                if (!v102)
                {
                  CFStringRef v102 = (const __CFString *)CFRetain(v167);
                  *(void *)(a1 + 16) = v102;
                }
                AMFDRSetOption(a3, @"SealingManifest", v102);
                CFStringRef v62 = 0;
                CFMutableStringRef v61 = 0;
                CFDictionaryRef v60 = 0;
                goto LABEL_289;
              }
              AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"sealingIM4M is NULL", v154);
LABEL_361:
              uint64_t v57 = 0;
              goto LABEL_69;
            }
            AMFDRErrorPushInternal((uint64_t)v161, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"_deleteFromSealedData failed with error %@", (char)v176);
          }
          uint64_t v57 = 0;
LABEL_395:
          CFBooleanRef v58 = 0;
          CFStringRef v59 = 0;
          CFDictionaryRef v60 = 0;
          CFMutableStringRef v61 = 0;
          CFStringRef v62 = 0;
          goto LABEL_170;
        }
        AMFDRErrorPushInternal((uint64_t)v161, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"userInfo is NULL", v154);
      }
      else
      {
        AMFDRErrorPushInternal((uint64_t)v161, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"AMFDRSealedDataVerify failed but outError is NULL.", v154);
      }
      uint64_t v57 = 0;
      CFDictionaryRef v162 = 0;
      CFDictionaryRef cfb = 0;
      goto LABEL_70;
    }
    CFMutableArrayRef v81 = (const void *)*MEMORY[0x263EFFB40];
    CFDictionaryAddValue(theDict, @"SkipManifest", (const void *)*MEMORY[0x263EFFB40]);
    if (v77) {
      CFDictionarySetValue(theDict, @"KeepExistingData", v81);
    }
    char v82 = __AMFDRSealedDataPopulatePrivate(theDict, a1, a3, 0, 0, 0, 0, (uint64_t)v69);
    CFDictionaryRemoveValue(theDict, @"SkipManifest");
    CFDictionaryRemoveValue(theDict, @"KeepExistingData");
    _AMFDRSealedDataSetFDRInfo((__CFError **)v69, @"MissingDataInstances", Mutable, @"MissingDataInstances");
    CFArrayRef v83 = v155;
    if ((v82 & 1) == 0)
    {
      char v6 = (__CFError **)v69;
      if ((AMFDRDataErrorIsBenign(a3, (char)@"AMFDRSealedDataPopulate", (CFErrorRef *)v69) & 1) == 0)
      {
        CFStringRef v140 = @"AMFDRSealedDataPopulate with amfdrRemote failed with a fatal error";
        goto LABEL_349;
      }
      AMSupportLogInternal();
      if (v69 && *v69)
      {
        CFRelease(*v69);
        *CFBooleanRef v69 = 0;
      }
    }
    if (AMFDRSealedDataIsEmpty(a1))
    {
LABEL_169:
      AMSupportLogInternal();
      CFDictionaryRef v162 = 0;
      CFDictionaryRef cfb = 0;
      CFTypeRef v167 = 0;
      CFBooleanRef v58 = 0;
      CFStringRef v59 = 0;
      CFDictionaryRef v60 = 0;
      CFMutableStringRef v61 = 0;
      CFStringRef v62 = 0;
      uint64_t v57 = 1;
LABEL_170:
      char v6 = v161;
      goto LABEL_73;
    }
    AMFDRSetOption(a3, @"SealingManifest", 0);
    char v6 = v161;
    if (AMFDRSealedDataVerify((void *)a1, a3, (uint64_t)v161))
    {
      AMSupportLogInternal();
      CFDictionaryRef cfb = 0;
      goto LABEL_187;
    }
    if (v161 && *v161)
    {
      _AMFDRSealedDataSetFDRInfo(v161, @"UnverifiedDataInstances", Mutable, @"UnverifiedDataInstances");
      CFDictionaryRef v86 = CFErrorCopyUserInfo(*v161);
      if (!v86)
      {
        CFStringRef format = @"userInfo is NULL";
        *(_OWORD *)CFDictionaryRef v148 = 0u;
        long long v149 = 0u;
        *(_OWORD *)CFStringRef value = 0u;
        goto LABEL_174;
      }
      CFDictionaryRef cfb = v86;
      CFDictionaryRef v87 = (const __CFDictionary *)CFDictionaryGetValue(v86, @"UnverifiedDataInstances");
      if (v87)
      {
        CFDictionaryRef v88 = v87;
        CFAllocatorRef v89 = CFGetAllocator((CFTypeRef)a1);
        CFMutableDictionaryRef v90 = CFDictionaryCreateMutable(v89, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!v90)
        {
          char v6 = v161;
          AMFDRErrorPushInternal((uint64_t)v161, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"Failed to allocate dataIntanceToDelete.", v154);
          uint64_t v57 = 0;
          goto LABEL_68;
        }
        uint64_t context = a3;
        CFAllocatorRef v179 = (CFTypeRef *)a1;
        CFDictionaryRef v180 = v90;
        CFIndex v181 = &v176;
        CFAllocatorRef v182 = &v177;
        CFDictionaryRef v91 = v90;
        CFDictionaryApplyFunction(v88, (CFDictionaryApplierFunction)_checkVerificationError, &context);
        CFDictionaryRef v162 = v91;
        if (v176)
        {
          AMFDRErrorPushInternal((uint64_t)v161, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"_checkVerificationError %@", (char)v176);
        }
        else
        {
          uint64_t context = a1;
          CFAllocatorRef v179 = &v176;
          CFDictionaryRef v180 = 0;
          CFIndex v181 = 0;
          CFDictionaryApplyFunction(v91, (CFDictionaryApplierFunction)_deleteFromSealedData, &context);
          if (!v176)
          {
            char v6 = v161;
            CFArrayRef v83 = v155;
            goto LABEL_188;
          }
          AMFDRErrorPushInternal((uint64_t)v161, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"_deleteFromSealedData failed with error %@", (char)v176);
        }
        uint64_t v57 = 0;
        CFTypeRef v167 = 0;
        goto LABEL_395;
      }
LABEL_187:
      CFDictionaryRef v162 = 0;
LABEL_188:
      if ((AMFDRSealedDataCommit(a1, cf, 0, (uint64_t)v6) & 1) == 0)
      {
        AMFDRErrorPushInternal((uint64_t)v6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"AMFDRSealedDataCommit with amfdrLocal failed. Data Recovery failed.", v154);
        goto LABEL_361;
      }
      if (v31)
      {
        if ((_AMFDRSealedDataExport((CFArrayRef *)a1, (CFDictionaryRef *)a3, v31, (uint64_t)v6) & 1) == 0)
        {
          AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"Failed to export data %@.", (char)v31);
          goto LABEL_361;
        }
        AMSupportLogInternal();
      }
      if (v83)
      {
        CFStringRef v59 = (const __CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
        AMFDRSetOption(a3, @"DataVersion", v59);
        AMFDRSetOption(a3, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
        if ((_AMFDRSealedDataExport((CFArrayRef *)a1, (CFDictionaryRef *)a3, v83, (uint64_t)v6) & 1) == 0)
        {
          AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"exportLegacyData: Failed to export legacy data %@.", (char)v83);
          goto LABEL_398;
        }
        AMSupportLogInternal();
        AMFDRSetOption(a3, @"DataVersion", v157);
        AMFDRSetOption(a3, @"UseSikDataInstance", v47);
      }
      else
      {
        CFStringRef v59 = 0;
      }
      CFArrayRef v92 = *(const __CFArray **)(a1 + 48);
      if (!v92 || !CFArrayGetCount(v92)) {
        goto LABEL_250;
      }
      AMSupportLogInternal();
      if (_AMFDRSealedDataCopyAndCommitIntraFactoryData(a1, (const __CFString *)cf, a3, (uint64_t)v6))
      {
        AMSupportLogInternal();
LABEL_250:
        AMSupportLogInternal();
        CFTypeRef v167 = 0;
        CFBooleanRef v58 = 0;
LABEL_251:
        CFDictionaryRef v60 = 0;
        CFMutableStringRef v61 = 0;
        CFStringRef v62 = 0;
LABEL_252:
        uint64_t v57 = 1;
        goto LABEL_73;
      }
      if (v6 && *v6)
      {
        if (CFErrorGetCode(*v6) == 33)
        {
          _AMFDRSealedDataSetFDRInfo(v6, @"MissingDataInstances", Mutable, @"MissingIntraFactoryDataInstances");
          if (*v6)
          {
            CFRelease(*v6);
            const void *v6 = 0;
          }
          goto LABEL_250;
        }
        CFStringRef v145 = @"_AMFDRSealedDataCopyAndCommitIntraFactoryData got unexpected error";
      }
      else
      {
        CFStringRef v145 = @"_AMFDRIntraDataCopyAndCommitInternal failed but outError is NULL.";
      }
      AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", v145, v154);
LABEL_398:
      uint64_t v57 = 0;
      CFTypeRef v167 = 0;
      CFBooleanRef v58 = 0;
      goto LABEL_71;
    }
    CFStringRef v140 = @"AMFDRSealedDataVerify failed but outError is NULL.";
LABEL_349:
    AMFDRErrorPushInternal((uint64_t)v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", v140, v154);
    goto LABEL_67;
  }
  CFArrayRef v39 = v38;
  CFTypeID v40 = CFGetTypeID(v38);
  if (v40 != CFArrayGetTypeID())
  {
LABEL_352:
    CFBooleanRef v54 = @"kAMFDROptionExportDataClasses is not array";
    goto LABEL_64;
  }
  CFIndex v41 = CFArrayGetCount(v39);
  if (v41 < 1)
  {
LABEL_45:
    AMSupportLogInternal();
    if ((_AMFDRDataClaimInternal((const void *)a3, *(const __CFArray **)(a1 + 32), *(const __CFArray **)(a1 + 40), *(const void **)(a1 + 248), *(const void **)(a1 + 256), *(const __CFArray **)(a1 + 240), v39, (CFTypeRef *)v6) & 1) == 0)
    {
      AMFDRErrorPushInternal((uint64_t)v6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataRecover", @"_AMFDRDataClaim failed", v154);
      goto LABEL_67;
    }
    goto LABEL_46;
  }
  CFIndex v42 = v41;
  CFIndex v43 = 0;
  while (1)
  {
    int v44 = CFArrayGetValueAtIndex(v39, v43);
    if (!v44) {
      break;
    }
    CFTypeID v45 = CFGetTypeID(v44);
    BOOL v120 = v45 == CFStringGetTypeID();
    char v6 = v161;
    if (!v120) {
      break;
    }
    if (v42 == ++v43) {
      goto LABEL_45;
    }
  }
LABEL_62:
  CFBooleanRef v54 = @"malformed dataClass";
LABEL_64:
  CFStringRef format = v54;
  *(_OWORD *)CFDictionaryRef v148 = 0u;
  long long v149 = 0u;
  *(_OWORD *)CFStringRef value = 0u;
LABEL_65:
  uint64_t v55 = (uint64_t)v6;
  CFIndex v56 = 1;
LABEL_66:
  AMFDRErrorPushInternal(v55, v56, 0, 0, 0, 0, 0, 0, value[0], value[1], v148[0], v148[1], (void *)v149, *((void **)&v149 + 1), (uint64_t)"AMFDRSealedDataRecover", format, v154);
LABEL_67:
  uint64_t v57 = 0;
  CFDictionaryRef cfb = 0;
LABEL_68:
  CFDictionaryRef v162 = 0;
LABEL_69:
  CFTypeRef v167 = 0;
LABEL_70:
  CFBooleanRef v58 = 0;
  CFStringRef v59 = 0;
LABEL_71:
  CFDictionaryRef v60 = 0;
LABEL_72:
  CFMutableStringRef v61 = 0;
  CFStringRef v62 = 0;
LABEL_73:
  AMFDRSealedDataRestoreOptions(a1, cf, a3);
  if (a5 && Mutable && CFDictionaryGetCount(Mutable) >= 1) {
    *a5 = CFRetain(Mutable);
  }
  if (cfb) {
    CFRelease(cfb);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v176)
  {
    CFRelease(v176);
    CFTypeRef v176 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v162) {
    CFRelease(v162);
  }
  if (v167) {
    CFRelease(v167);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v175)
  {
    CFRelease(v175);
    CFArrayRef v175 = 0;
  }
  if (v174)
  {
    CFRelease(v174);
    CFArrayRef v174 = 0;
  }
  if (v173)
  {
    CFRelease(v173);
    CFTypeRef v173 = 0;
  }
  if (v172)
  {
    CFRelease(v172);
    CFTypeRef v172 = 0;
  }
  if (v62) {
    CFRelease(v62);
  }
  char v63 = v57 ^ 1;
  if (!v6) {
    char v63 = 1;
  }
  if ((v63 & 1) == 0 && *v6)
  {
    CFRelease(*v6);
    const void *v6 = 0;
  }
  return v57;
}

uint64_t AMFDRSealedDataConfigureOptionsForRecover(uint64_t a1, CFTypeRef *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        CFTypeID v10 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          goto LABEL_16;
        }
        CFAllocatorRef v11 = (const void *)AMFDRGetOptions(a3);
        *(void *)(a1 + 120) = CFRetain(v11);
        CFAllocatorRef v12 = *(const void **)(a1 + 104);
        if (v12)
        {
          CFRelease(v12);
          *(void *)(a1 + 104) = 0;
        }
        CFAllocatorRef v13 = CFGetAllocator(a2);
        CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(v13, 0, *(CFDictionaryRef *)(a1 + 120));
        *(void *)(a1 + 104) = MutableCopy;
        if (MutableCopy)
        {
          char v15 = *v10;
          CFDictionarySetValue(MutableCopy, @"VerifyData", *v10);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"SignData", v15);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"GetCombined", v15);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"INST", a4);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"PutCombined", v15);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"CopyAllowUnsealed", v15);
          CFTypeID v16 = *(const void **)(a1 + 16);
          if (v16) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"SealingManifest", v16);
          }
          CFBooleanRef v17 = *(const void **)(a1 + 200);
          if (v17) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"PairedSoCs", v17);
          }
          CFBooleanRef v18 = *(const __CFBoolean **)(a1 + 216);
          if (v18 && CFBooleanGetValue(v18)) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), @"DeprecateV1", *(const void **)(a1 + 216));
          }
          if (AMFDRSetOptions(a3, *(CFTypeRef *)(a1 + 104)))
          {
LABEL_16:
            *(void *)(a1 + 112) = CFRetain(a2[2]);
            CFArrayRef v19 = *(const void **)(a1 + 96);
            if (v19)
            {
              CFRelease(v19);
              *(void *)(a1 + 96) = 0;
            }
            CFAllocatorRef v20 = CFGetAllocator(a2);
            CFTypeID v21 = CFDictionaryCreateMutableCopy(v20, 0, *(CFDictionaryRef *)(a1 + 112));
            *(void *)(a1 + 96) = v21;
            if (v21)
            {
              CFIndex v22 = *v10;
              CFDictionarySetValue(v21, @"VerifyData", *v10);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 96), @"SignData", v22);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 96), @"GetCombined", v22);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 96), @"CopyAllowUnsealed", v22);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 96), @"INST", a4);
              CFIndex v23 = *(const void **)(a1 + 16);
              if (v23) {
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 96), @"SealingManifest", v23);
              }
              CFIndex v24 = *(const void **)(a1 + 200);
              if (v24) {
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 96), @"PairedSoCs", v24);
              }
              if (AMFDRSetOptions((uint64_t)a2, *(CFTypeRef *)(a1 + 96))) {
                return 1;
              }
              CFStringRef v27 = @"AMFDRSetOptions(amfdrLocal) failed.";
            }
            else
            {
              CFStringRef v27 = @"localOptions allocation. Sealing failed.";
            }
            goto LABEL_33;
          }
          CFStringRef v27 = @"AMFDRSetOptions(amfdrRemote) failed.";
        }
        else
        {
          CFStringRef v27 = @"remoteOptions allocation. Sealing failed.";
        }
LABEL_33:
        AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataConfigureOptionsForRecover", v27, v28);
        return 0;
      }
      CFStringRef v26 = @"sealedDataInstance is NULL";
    }
    else
    {
      CFStringRef v26 = @"amfdrLocal is NULL";
    }
  }
  else
  {
    CFStringRef v26 = @"sealedData is NULL";
  }
  AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataConfigureOptionsForRecover", v26, v28);
  return 0;
}

void _AMFDRSealedDataSetFDRInfo(__CFError **a1, const void *a2, __CFDictionary *a3, const void *a4)
{
  if (a1 && a3)
  {
    char v6 = *a1;
    BOOL v7 = !v6 || a2 == 0;
    if (!v7 && a4 != 0)
    {
      char v9 = (const void *)AMFDRCopyUnderlyingDictionary(v6, a2);
      if (v9)
      {
        CFTypeID v10 = v9;
        CFDictionarySetValue(a3, a4, v9);
        CFRelease(v10);
      }
    }
  }
}

uint64_t AMFDRSealedDataVerify(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  CFTypeRef v5 = a1;
  uint64_t v220 = *MEMORY[0x263EF8340];
  uint64_t v182 = 0;
  CFTypeRef cf = 0;
  v180[1] = 0;
  uint64_t v181 = 0;
  v180[0] = 0;
  memset(__s2, 0, sizeof(__s2));
  if (!a2)
  {
    CFStringRef v149 = @"amfdr is NULL";
LABEL_309:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", v149, v154);
LABEL_314:
    BOOL v132 = 0;
    goto LABEL_261;
  }
  if (!*(void *)(a2 + 16))
  {
    CFStringRef v149 = @"amfdr->optionsDict is NULL";
    goto LABEL_309;
  }
  if (!a1)
  {
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", @"sealedData is NULL", v154);
    uint64_t v133 = 0;
    CFArrayRef v134 = @"FDRSealedVerifyFail";
    goto LABEL_266;
  }
  if (!a1[4])
  {
    CFStringRef v149 = @"sealedData->dataClassArray is NULL";
    goto LABEL_309;
  }
  char v6 = (const void *)a1[5];
  if (!v6)
  {
    CFStringRef v149 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_309;
  }
  if (!*((void *)v5 + 8))
  {
    CFStringRef v149 = @"sealedData->dataArray is NULL";
    goto LABEL_309;
  }
  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 != CFArrayGetTypeID())
  {
    CFStringRef v146 = @"dataInstanceArray is not a CFArray";
    goto LABEL_313;
  }
  CFTypeID v8 = (const void *)*((void *)v5 + 8);
  if (!v8 || (CFTypeID v9 = CFGetTypeID(v8), v9 != CFArrayGetTypeID()))
  {
    CFStringRef v146 = @"dataArray is not a CFArray";
LABEL_313:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", v146, v154);
    goto LABEL_314;
  }
  CFIndex Count = CFArrayGetCount(*((CFArrayRef *)v5 + 4));
  if (Count != CFArrayGetCount(*((CFArrayRef *)v5 + 5)))
  {
    CFArrayGetCount(*((CFArrayRef *)v5 + 5));
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", @"dataClassArray length (%ld) does not match dataInstanceArray (%ld)", Count);
    goto LABEL_314;
  }
  if (Count != CFArrayGetCount(*((CFArrayRef *)v5 + 8)))
  {
    char v154 = Count;
    CFArrayGetCount(*((CFArrayRef *)v5 + 8));
    CFStringRef v146 = @"dataClassArray length (%ld) does not match dataArray (%ld)";
    goto LABEL_313;
  }
  CFAllocatorRef v11 = CFGetAllocator(v5);
  CFAllocatorRef v12 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v14 = CFGetAllocator(v5);
  CFArrayRef v157 = CFArrayCreateMutable(v14, 0, v12);
  CFAllocatorRef v15 = CFGetAllocator(v5);
  CFArrayRef v164 = CFArrayCreateMutable(v15, 0, v12);
  CFAllocatorRef v16 = CFGetAllocator(v5);
  CFArrayRef theArray = CFArrayCreateMutable(v16, 0, v12);
  CFAllocatorRef v17 = CFGetAllocator(v5);
  CFTypeID v161 = CFArrayCreateMutable(v17, 0, v12);
  CFAllocatorRef v18 = CFGetAllocator(v5);
  CFIndex v156 = CFArrayCreateMutable(v18, 0, v12);
  CFAllocatorRef v19 = CFGetAllocator(v5);
  CFAllocatorRef v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  CFTypeID v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFDictionaryRef v167 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v22 = CFGetAllocator(v5);
  CFDictionaryRef theDict = CFDictionaryCreateMutable(v22, 0, v20, v21);
  CFAllocatorRef v23 = CFGetAllocator(v5);
  CFDictionaryRef v160 = CFDictionaryCreateMutable(v23, 0, v20, v21);
  CFAllocatorRef v24 = CFGetAllocator(v5);
  int v159 = CFArrayCreateMutable(v24, 0, v12);
  CFDictionaryRef v162 = Mutable;
  if (!Mutable || !v157 || !theArray || !v167 || !theDict || !v164 || !v160 || !v159 || !v161 || !v156)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", @"Failed to allocate arrays or dictionaries", v154);
    BOOL v132 = 0;
    goto LABEL_261;
  }
  CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 16), @"SealingManifest");
  CFStringRef v26 = v25;
  if (v25) {
    CFRetain(v25);
  }
  uint64_t v155 = a3;
  CFStringRef v163 = v26;
  int v168 = (CFDictionaryRef *)v4;
  if (Count >= 1)
  {
    uint64_t v171 = 0;
    CFIndex v172 = Count;
    CFIndex v27 = 0;
    char v28 = 0;
    CFStringRef v29 = 0;
    CFTypeRef v166 = v5;
    while (1)
    {
      if (v29) {
        CFRelease(v29);
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 4), v27);
      CFStringRef v31 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 5), v27);
      if (!ValueAtIndex)
      {
        CFStringRef v142 = @"dataClass is NULL. Verification failed.";
LABEL_282:
        AMFDRErrorPushInternal(v155, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", v142, v154);
        goto LABEL_301;
      }
      CFStringRef v32 = v31;
      if (!v31)
      {
        CFStringRef v142 = @"dataInstance is NULL. Verification failed.";
        goto LABEL_282;
      }
      CFTypeID v33 = CFGetTypeID(ValueAtIndex);
      if (v33 != CFStringGetTypeID())
      {
        CFStringRef v143 = @"dataClass is not a CFString. Verification failed.";
LABEL_285:
        AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", v143, v154);
        goto LABEL_301;
      }
      CFTypeID v34 = CFGetTypeID(v32);
      if (v34 != CFStringGetTypeID())
      {
        CFStringRef v143 = @"dataInstance is not a CFString. Verification failed.";
        goto LABEL_285;
      }
      CFAllocatorRef v35 = CFGetAllocator(v5);
      CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v35, (uint64_t)ValueAtIndex, (uint64_t)v32);
      if (FullKey)
      {
        CFStringRef v37 = FullKey;
        CFDictionaryRef v38 = (const __CFDictionary *)*((void *)v5 + 16);
        if (v38) {
          CFStringRef v175 = (const __CFString *)CFDictionaryGetValue(v38, v37);
        }
        else {
          CFStringRef v175 = 0;
        }
        CFRelease(v37);
      }
      else
      {
        AMSupportLogInternal();
        CFStringRef v175 = 0;
      }
      CFAllocatorRef v39 = CFGetAllocator(v5);
      CFStringRef v29 = AMFDRDataLocalCreateFullKey(v39, (uint64_t)ValueAtIndex, (uint64_t)v32);
      if (!v29)
      {
        AMFDRErrorPushInternal(v155, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", @"failed to create data instance string", v154);
        goto LABEL_301;
      }
      CFDataRef v179 = (const __CFData *)CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 8), v27);
      CFArrayRef v40 = (const __CFArray *)*((void *)v5 + 37);
      if (v40)
      {
        v221.CFIndex length = CFArrayGetCount(*((CFArrayRef *)v5 + 37));
        v221.CFIndex location = 0;
        BOOL v177 = CFArrayContainsValue(v40, v221, ValueAtIndex) != 0;
      }
      else
      {
        BOOL v177 = 0;
      }
      CFArrayRef v41 = (const __CFArray *)*((void *)v5 + 35);
      if (v41)
      {
        v222.CFIndex length = CFArrayGetCount(*((CFArrayRef *)v5 + 35));
        v222.CFIndex location = 0;
        BOOL v173 = CFArrayContainsValue(v41, v222, ValueAtIndex) != 0;
      }
      else
      {
        BOOL v173 = 0;
      }
      if (*(uint64_t (***)(int, int, int, int))(v4 + 48) != AMFDRHTTPStore)
      {
        CFBooleanRef v42 = (const __CFBoolean *)*((void *)v5 + 26);
        if (v42)
        {
          int v43 = CFBooleanGetValue(v42);
          char v44 = v177;
          if (v43) {
            char v45 = v177;
          }
          else {
            char v45 = 1;
          }
          if (v43) {
            char v44 = 1;
          }
          BOOL v177 = v44;
          if ((v45 & 1) == 0)
          {
            AMSupportLogInternal();
            BOOL v177 = 1;
          }
        }
      }
      CFDictionaryRef v46 = *(const __CFDictionary **)(v4 + 112);
      if (v46) {
        CFDataRef v47 = (const __CFData *)CFDictionaryGetValue(v46, v29);
      }
      else {
        CFDataRef v47 = 0;
      }
      if (!v179)
      {
        if (v177) {
          CFArrayAppendValue(v162, v29);
        }
        else {
          AMSupportLogInternal();
        }
        if (v173) {
          *(unsigned char *)(v4 + 40) = 0;
        }
        if (!v47) {
          goto LABEL_148;
        }
        CFBooleanRef v54 = theArray;
        goto LABEL_80;
      }
      if (v180[0])
      {
        CFRelease(v180[0]);
        v180[0] = 0;
      }
      CFTypeID v48 = v47 ? (CFDataRef *)&cf : 0;
      int v170 = AMFDRSealingMapEntryHasSubCCListForClassInternal(v4, ValueAtIndex);
      int v49 = AMFDRDataVerifyInternal(v4, ValueAtIndex, v32, v175, v179, 0, v170, v48, (uint64_t)v180);
      if (v47 && cf)
      {
        int v50 = v49;
        CFStringRef v51 = v29;
        CFDataGetBytePtr((CFDataRef)cf);
        CFDataGetLength((CFDataRef)cf);
        if (AMSupportDigestSha384())
        {
          CFStringRef v145 = @"Failed to compute digest of raw data.";
LABEL_292:
          AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", v145, v154);
          BOOL v132 = 0;
          goto LABEL_261;
        }
        if (CFDataGetLength(v47) != 48)
        {
          CFStringRef v145 = @"The digestValue length is not as expected.";
          goto LABEL_292;
        }
        uint64_t BytePtr = CFDataGetBytePtr(v47);
        CFIndex Length = CFDataGetLength(v47);
        if (!memcmp(BytePtr, __s2, Length))
        {
          CFStringRef v29 = v51;
        }
        else
        {
          CFStringRef v29 = v51;
          CFArrayAppendValue(theArray, v51);
        }
        AMSupportLogInternal();
        int v49 = v50;
      }
      else if (v47 && !cf)
      {
        CFArrayAppendValue(theArray, v29);
      }
      CFDictionaryRef v55 = (const __CFDictionary *)*((void *)v5 + 21);
      if (v55 && CFDictionaryContainsKey(v55, v29))
      {
        if (v28) {
          CFRelease(v28);
        }
        if (v171) {
          CFRelease(v171);
        }
        char v28 = (CFArrayRef *)AMFDRDataDictCreateFromData(v4, v179, 0, 0);
        if (!v28)
        {
          AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", @"decoded of %@ is NULL", (char)ValueAtIndex);
          goto LABEL_301;
        }
        AMSupportLogInternal();
        CFArrayRef v56 = (const __CFArray *)CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 21), v29);
        if (!v56 || (CFArrayRef v57 = v56, v58 = v29, v59 = CFGetTypeID(v56), v59 != CFArrayGetTypeID()))
        {
          CFStringRef v144 = @"unexpected subcclist array type";
          goto LABEL_296;
        }
        int v165 = v49;
        CFAllocatorRef v60 = CFGetAllocator(v166);
        CFMutableArrayRef MutableCopy = CFStringCreateMutableCopy(v60, 0, ValueAtIndex);
        if (!MutableCopy)
        {
          CFStringRef v144 = @"Could not create enforceDataInstanceString";
LABEL_296:
          AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", v144, v154);
          BOOL v132 = 0;
          CFTypeRef v5 = v166;
LABEL_261:
          uint64_t v133 = 0;
          CFArrayRef v134 = @"FDRSealedVerifyFail";
          if (v5 && !v132)
          {
            char v135 = (const void *)*((void *)v5 + 2);
            if (v135) {
              CFRelease(v135);
            }
            uint64_t v133 = 0;
            *((void *)v5 + 2) = 0;
            CFArrayRef v134 = @"FDRSealedVerifyFail";
          }
          goto LABEL_266;
        }
        CFStringRef v62 = MutableCopy;
        CFStringAppend(MutableCopy, @":");
        uint64_t v171 = v62;
        CFStringAppend(v62, v32);
        if (CFArrayGetCount(v57) < 1)
        {
LABEL_103:
          AMSupportLogInternal();
        }
        else
        {
          CFIndex v63 = 0;
          char v64 = 0;
          do
          {
            while (1)
            {
              CFArrayRef v65 = v28[4];
              if (v65)
              {
                CFBooleanRef v66 = v28;
                CFIndex v67 = CFArrayGetCount(v28[4]);
                BOOL v68 = CFArrayGetValueAtIndex(v57, v63);
                v223.CFIndex location = 0;
                v223.CFIndex length = v67;
                char v28 = v66;
                if (CFArrayContainsValue(v65, v223, v68)) {
                  break;
                }
              }
              CFStringAppend(v171, @"/");
              CFStringRef v69 = (const __CFString *)CFArrayGetValueAtIndex(v57, v63);
              CFStringAppend(v171, v69);
              ++v63;
              char v64 = 1;
              if (v63 >= CFArrayGetCount(v57)) {
                goto LABEL_102;
              }
            }
            ++v63;
          }
          while (v63 < CFArrayGetCount(v57));
          if ((v64 & 1) == 0) {
            goto LABEL_103;
          }
LABEL_102:
          CFArrayAppendValue(v161, v171);
        }
        uint64_t v4 = (uint64_t)v168;
        CFStringRef v29 = v58;
        CFTypeRef v5 = v166;
        int v49 = v165;
      }
      if (v49) {
        break;
      }
      if (v177 || *(uint64_t (***)(int, int, int, int))(v4 + 48) == AMFDRHTTPStore) {
        goto LABEL_114;
      }
      AMSupportLogInternal();
      if ((AMFDRDataDelete(v4) & 1) == 0)
      {
        AMSupportLogInternal();
LABEL_114:
        if (v173) {
          *(unsigned char *)(v4 + 40) = 0;
        }
        if (!v180[0])
        {
          CFStringRef format = @"verifyError is NULL";
          goto LABEL_299;
        }
LABEL_117:
        AMFDRGetTrustError((__CFError *)v180[0]);
LABEL_118:
        AMSupportCFDictionarySetInteger64();
      }
LABEL_126:
      CFDictionaryRef v77 = (const __CFDictionary *)*((void *)v5 + 19);
      if (!v77 || !CFDictionaryContainsKey(v77, v29))
      {
        CFArrayRef v80 = (const __CFArray *)*((void *)v5 + 17);
        if (!v80) {
          goto LABEL_148;
        }
        CFIndex v81 = CFArrayGetCount(v80);
        if (v81 < 1) {
          goto LABEL_148;
        }
        CFIndex v82 = v81;
        CFIndex v83 = 0;
        do
        {
          while (1)
          {
            CFStringRef v84 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 17), v83);
            if (CFEqual(ValueAtIndex, v84)) {
              break;
            }
            if (++v83 >= v82) {
              goto LABEL_148;
            }
          }
          CFStringRef v85 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 18), v83);
          CFComparisonResult v86 = CFStringCompare(v32, v85, 0);
          ++v83;
          if (v86) {
            BOOL v87 = v83 < v82;
          }
          else {
            BOOL v87 = 0;
          }
        }
        while (v87);
        if (v86) {
          goto LABEL_148;
        }
        CFBooleanRef v54 = v157;
LABEL_80:
        CFArrayAppendValue(v54, v29);
        goto LABEL_148;
      }
      CFStringRef v78 = (const __CFString *)CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 19), v29);
      AMFDRSetOption(v4, @"SealingManifest", v78);
      char v79 = AMFDRDataVerifyInternal(v4, ValueAtIndex, v32, v175, v179, 0, v170, 0, (uint64_t)v180);
      AMFDRSetOption(v4, @"SealingManifest", v163);
      if ((v79 & 1) == 0)
      {
        if (!v177 && *(uint64_t (***)(int, int, int, int))(v4 + 48) != AMFDRHTTPStore)
        {
          AMSupportLogInternal();
          if (AMFDRDataDelete(v4)) {
            goto LABEL_148;
          }
          AMSupportLogInternal();
        }
        if (v173) {
          *(unsigned char *)(v4 + 40) = 0;
        }
        if (!v180[0])
        {
          CFStringRef format = @"verifyError is NULL";
LABEL_299:
          *(_OWORD *)CFAllocatorRef v151 = 0u;
          *(_OWORD *)CFMutableArrayRef v152 = 0u;
          *(_OWORD *)CFStringRef value = 0u;
          uint64_t v147 = v155;
          CFIndex v148 = 10;
LABEL_300:
          AMFDRErrorPushInternal(v147, v148, 0, 0, 0, 0, 0, 0, value[0], value[1], v151[0], v151[1], v152[0], v152[1], (uint64_t)"AMFDRSealedDataVerify", format, v154);
LABEL_301:
          BOOL v132 = 0;
          goto LABEL_261;
        }
        AMFDRGetTrustError((__CFError *)v180[0]);
        AMSupportCFDictionarySetInteger64();
      }
LABEL_148:
      if (++v27 == v172) {
        goto LABEL_155;
      }
    }
    CFDictionaryRef v70 = (const __CFDictionary *)*((void *)v5 + 20);
    if (!v70) {
      goto LABEL_119;
    }
    CFDictionaryRef v71 = (const __CFDictionary *)CFDictionaryGetValue(v70, v29);
    CFDictionaryRef v72 = v71;
    if (!v71) {
      goto LABEL_120;
    }
    CFTypeID v73 = CFGetTypeID(v71);
    if (v73 == CFDictionaryGetTypeID()) {
      CFDictionaryRef v72 = (const __CFDictionary *)CFDictionaryGetValue(v72, @"CombinedManifest");
    }
    else {
LABEL_119:
    }
      CFDictionaryRef v72 = 0;
LABEL_120:
    CFArrayRef v74 = (const __CFArray *)*((void *)v5 + 34);
    if (v74)
    {
      v224.CFIndex length = CFArrayGetCount(*((CFArrayRef *)v5 + 34));
      v224.CFIndex location = 0;
      int v75 = CFArrayContainsValue(v74, v224, ValueAtIndex);
      if (*(uint64_t (***)(int, int, int, int))(v4 + 48) != AMFDRHTTPStore)
      {
        if (v75)
        {
          if (v180[0])
          {
            CFRelease(v180[0]);
            v180[0] = 0;
          }
          AMFDRSetOption(v4, @"SealingManifest", (const __CFString *)v72);
          char v76 = AMFDRDataVerifyInternal(v4, ValueAtIndex, v32, v175, v179, 0, v170, 0, (uint64_t)v180);
          AMFDRSetOption(v4, @"SealingManifest", v163);
          if ((v76 & 1) == 0)
          {
            if (v180[0]) {
              goto LABEL_117;
            }
            goto LABEL_118;
          }
        }
      }
    }
    goto LABEL_126;
  }
LABEL_155:
  if (!*((void *)v5 + 11) || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v4 + 16), @"SealingManifest")) {
    goto LABEL_160;
  }
  AMSupportLogInternal();
  if ((AMFDRSealingMapCopyPropertyTagsWithAttributeInternal((const void *)v4, @"Required", &v182, v155) & 1) == 0)
  {
    CFStringRef format = @"failed to copy required sealing properties";
    *(_OWORD *)CFAllocatorRef v151 = 0u;
    *(_OWORD *)CFMutableArrayRef v152 = 0u;
    *(_OWORD *)CFStringRef value = 0u;
    uint64_t v147 = v155;
LABEL_319:
    CFIndex v148 = 7;
    goto LABEL_300;
  }
  if ((AMFDRSealingMapCopyPropertyTagsWithAttributeInternal((const void *)v4, @"Matching", &v181, v155) & 1) == 0)
  {
    CFStringRef format = @"failed to copy matching sealing properties";
    *(_OWORD *)CFAllocatorRef v151 = 0u;
    *(_OWORD *)CFMutableArrayRef v152 = 0u;
    *(_OWORD *)CFStringRef value = 0u;
    uint64_t v147 = v155;
    goto LABEL_319;
  }
  *(void *)&long long context = v4;
  *((void *)&context + 1) = v182;
  *(void *)&long long v192 = v181;
  *((void *)&v192 + 1) = v156;
  CFDictionaryApplyFunction(*((CFDictionaryRef *)v5 + 11), (CFDictionaryApplierFunction)_AMFDRSealedDataSealingPropertyCheck, &context);
LABEL_160:
  CFArrayRef v88 = (const __CFArray *)*((void *)v5 + 22);
  if (!v88 || CFArrayGetCount(v88) < 1) {
    goto LABEL_245;
  }
  AMSupportLogInternal();
  CFTypeRef v184 = 0;
  CFTypeRef v185 = 0;
  CFStringRef v89 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 16), @"SealingManifestIsMinimal");
  CFStringRef v90 = v89;
  if (v89) {
    CFRetain(v89);
  }
  CFStringRef v91 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 16), @"MinimalSealingDataInstance");
  CFStringRef v92 = v91;
  if (v91) {
    CFRetain(v91);
  }
  CFStringRef v174 = v92;
  CFStringRef v176 = v90;
  CFIndex v93 = CFArrayGetCount(*((CFArrayRef *)v5 + 22));
  AMFDRSetOption((uint64_t)v168, @"SealingManifestIsMinimal", (const __CFString *)*MEMORY[0x263EFFB40]);
  if (v93 < 1)
  {
    CFStringRef v96 = 0;
    BOOL v94 = 1;
    goto LABEL_214;
  }
  BOOL v94 = 0;
  CFIndex v95 = 0;
  CFStringRef v96 = 0;
  CFIndex v178 = v93;
  while (1)
  {
    CFStringRef v97 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 22), v95);
    if (v96) {
      CFRelease(v96);
    }
    if (v185)
    {
      CFRelease(v185);
      CFTypeRef v185 = 0;
    }
    if (v184)
    {
      CFRelease(v184);
      CFTypeRef v184 = 0;
    }
    if (!v97 || (CFTypeID v98 = CFGetTypeID(v97), v98 != CFStringGetTypeID()))
    {
      AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifest", @"sealingDataInstance is not a string", v154);
      CFStringRef v96 = 0;
      goto LABEL_214;
    }
    CFAllocatorRef v99 = CFGetAllocator(v5);
    CFStringRef v96 = AMFDRDataLocalCreateFullKey(v99, @"minimal-manifest", (uint64_t)v97);
    if (!v96)
    {
      AMFDRErrorPushInternal(v155, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifest", @"failed to create minimal sealing data instance string", v154);
      goto LABEL_214;
    }
    CFDictionaryRef v100 = (const __CFDictionary *)*((void *)v5 + 19);
    if (!v100 || (CFDataRef v101 = (const __CFData *)CFDictionaryGetValue(v100, v96)) == 0)
    {
      CFArrayAppendValue(v164, v96);
      goto LABEL_202;
    }
    CFDataRef v102 = v101;
    AMFDRSetOption((uint64_t)v168, @"MinimalSealingDataInstance", v97);
    char v103 = AMFDRDataVerifySealingManifestInternal((uint64_t)v168, v102, v97, (uint64_t)&v185);
    if (v103)
    {
      AMSupportLogInternal();
      goto LABEL_183;
    }
    if (!v185) {
      break;
    }
LABEL_183:
    CFDictionaryRef v104 = (const __CFDictionary *)CFDictionaryGetValue(v168[2], @"MinimalManifestPropertyCheck");
    if (v104)
    {
      CFDictionaryRef v105 = v104;
      CFTypeID v106 = CFGetTypeID(v104);
      if (v106 == CFDictionaryGetTypeID())
      {
        CFArrayRef v107 = (const __CFArray *)CFDictionaryGetValue(v105, v97);
        if (v107)
        {
          CFArrayRef v108 = v107;
          CFTypeID v109 = CFGetTypeID(v107);
          if (v109 == CFArrayGetTypeID())
          {
            uint64_t v188 = 0;
            CFArrayRef v189 = 0;
            char v187 = 0;
            *(_DWORD *)buffer = 0;
            CFTypeID v110 = CFGetTypeID(v102);
            if (v110 != CFDataGetTypeID())
            {
              CFStringRef v116 = @"invalid manifestData";
LABEL_211:
              AMFDRErrorPushInternal((uint64_t)&v184, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifestProperty", v116, v154);
              goto LABEL_206;
            }
            if (CFArrayGetCount(v108) <= 0)
            {
              CFStringRef v116 = @"no available property tags found";
              goto LABEL_211;
            }
            CFTypeID v111 = CFGetTypeID(v97);
            if (v111 != CFStringGetTypeID())
            {
              CFStringRef v116 = @"invalid dataInstance";
              goto LABEL_211;
            }
            unint64_t v219 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v112 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v112 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v217 = v112;
            long long v218 = v112;
            long long v215 = v112;
            long long v216 = v112;
            long long v213 = v112;
            long long v214 = v112;
            long long v211 = v112;
            long long v212 = v112;
            long long v209 = v112;
            long long v210 = v112;
            long long v207 = v112;
            long long v208 = v112;
            long long v205 = v112;
            long long v206 = v112;
            long long v203 = v112;
            long long v204 = v112;
            long long v201 = v112;
            long long v202 = v112;
            long long v199 = v112;
            long long v200 = v112;
            long long v197 = v112;
            long long v198 = v112;
            long long v195 = v112;
            long long v196 = v112;
            long long v193 = v112;
            long long v194 = v112;
            long long context = v112;
            long long v192 = v112;
            CFDataGetBytePtr(v102);
            CFDataGetLength(v102);
            if (Img4DecodeInitManifest())
            {
              AMFDRErrorPushInternal((uint64_t)&v184, 18, (const __CFNumber *)0x2000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifestProperty", @"trust verification error code=0x%016llX for %@:%@", 0);
              goto LABEL_206;
            }
            if (CFArrayGetCount(v108) >= 1)
            {
              CFIndex v113 = 0;
              while (1)
              {
                CFStringRef v114 = (const __CFString *)CFArrayGetValueAtIndex(v108, v113);
                if (!CFStringGetCString(v114, buffer, 5, 0x8000100u))
                {
                  AMFDRErrorPushInternal((uint64_t)&v184, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifestProperty", @"convert property tag string failed", v154);
                  goto LABEL_206;
                }
                AMFDRTagsStringToTag((unsigned int *)buffer);
                if (Img4DecodeGetObjectPropertyData() || v188 == 0) {
                  break;
                }
                CFArrayGetValueAtIndex(v108, v113);
                AMSupportLogInternal();
                if (++v113 >= CFArrayGetCount(v108)) {
                  goto LABEL_199;
                }
              }
              AMFDRErrorPushInternal((uint64_t)&v184, 18, (const __CFNumber *)0x10000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifestProperty", @"trust verification error code=0x%016llX for %@:%@", 0);
LABEL_206:
              CFIndex v93 = v178;
              if (!v184)
              {
                AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifest", @"verifyPropError is NULL", v154);
                goto LABEL_214;
              }
LABEL_201:
              AMFDRGetTrustError((__CFError *)v185);
              AMFDRGetTrustError((__CFError *)v184);
              AMSupportCFDictionarySetInteger64();
              goto LABEL_202;
            }
LABEL_199:
            AMSupportLogInternal();
          }
        }
      }
    }
    CFIndex v93 = v178;
    if ((v103 & 1) == 0) {
      goto LABEL_201;
    }
LABEL_202:
    BOOL v94 = ++v95 >= v93;
    if (v95 == v93) {
      goto LABEL_214;
    }
  }
  AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataVerifyMinimalManifest", @"verifyError is NULL", v154);
LABEL_214:
  uint64_t v4 = (uint64_t)v168;
  AMFDRSetOption((uint64_t)v168, @"SealingManifestIsMinimal", v176);
  AMFDRSetOption((uint64_t)v168, @"MinimalSealingDataInstance", v174);
  if (v96) {
    CFRelease(v96);
  }
  if (v185)
  {
    CFRelease(v185);
    CFTypeRef v185 = 0;
  }
  if (v184)
  {
    CFRelease(v184);
    CFTypeRef v184 = 0;
  }
  if (v176) {
    CFRelease(v176);
  }
  if (v174) {
    CFRelease(v174);
  }
  if (!v94)
  {
    AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerify", @"failed to verify minimal manifests", v154);
    BOOL v132 = 0;
    goto LABEL_261;
  }
  CFBooleanRef v117 = (const __CFBoolean *)CFDictionaryGetValue(v168[2], @"SealIdentifiers");
  if (v117 && (CFBooleanRef v118 = v117, v119 = CFGetTypeID(v117), v119 == CFBooleanGetTypeID()))
  {
    int v120 = CFBooleanGetValue(v118);
    if ((AMFDRAPTicketAllowsUnsealedData((uint64_t)v168) & 1) == 0 && v120)
    {
      AMSupportLogInternal();
      *(void *)&long long context = 0;
      CFArrayRef v189 = 0;
      if (!v168[2])
      {
        CFStringRef v124 = @"amfdr option is NULL";
        goto LABEL_324;
      }
      CFIndex v121 = CFArrayGetCount(*((CFArrayRef *)v5 + 22));
      if (AMFDRDataCopySealingManifestProperty(v168, @"meta", (uint64_t)&context)
        && (void)context
        && (CFTypeID v122 = CFGetTypeID((CFTypeRef)context), v122 == CFDataGetTypeID()))
      {
        if (!AMFDRDataDecodeMetaProperty((const __CFData *)context, (CFTypeRef *)&v189))
        {
          CFStringRef v124 = @"AMFDRDataDecodeMetaProperty failed";
          goto LABEL_324;
        }
        if (v121 != CFArrayGetCount(v189))
        {
          CFStringRef v124 = @"minimalManifestInstances array count is not equal to sealedData->minimalSealingDataInstances";
          goto LABEL_324;
        }
        if (v121 >= 1)
        {
          CFIndex v123 = 0;
          CFStringRef v124 = @"minimalSealingDataInstance is not a string";
          while (1)
          {
            CFArrayRef v125 = CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 22), v123);
            if (!v125) {
              goto LABEL_324;
            }
            CFTypeID v126 = v125;
            CFTypeID v127 = CFGetTypeID(v125);
            if (v127 != CFStringGetTypeID()) {
              goto LABEL_324;
            }
            CFArrayRef v128 = v189;
            v225.CFIndex length = CFArrayGetCount(v189);
            v225.CFIndex location = 0;
            if (CFArrayContainsValue(v128, v225, v126)) {
              AMSupportLogInternal();
            }
            else {
              CFArrayAppendValue(v159, v126);
            }
            if (v121 == ++v123) {
              goto LABEL_272;
            }
          }
        }
LABEL_273:
        char v141 = 1;
      }
      else
      {
        if (v121 < 1) {
          goto LABEL_273;
        }
        CFIndex v137 = 0;
        CFStringRef v124 = @"minimalSealingDataInstance is not a string";
        while (1)
        {
          CFStringRef v138 = CFArrayGetValueAtIndex(*((CFArrayRef *)v5 + 22), v137);
          if (!v138) {
            break;
          }
          CFStringRef v139 = v138;
          CFTypeID v140 = CFGetTypeID(v138);
          if (v140 != CFStringGetTypeID()) {
            break;
          }
          CFArrayAppendValue(v159, v139);
          if (v121 == ++v137)
          {
LABEL_272:
            char v141 = 1;
            goto LABEL_274;
          }
        }
LABEL_324:
        AMFDRErrorPushInternal(v155, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataMinimalSealingMetaPropertyCheck", v124, v154);
        char v141 = 0;
      }
LABEL_274:
      if ((void)context)
      {
        CFRelease((CFTypeRef)context);
        *(void *)&long long context = 0;
      }
      if (v189) {
        CFRelease(v189);
      }
      if ((v141 & 1) == 0)
      {
        AMSupportLogInternal();
        CFArrayAppendValue(v156, @"meta");
      }
    }
  }
  else
  {
    AMFDRAPTicketAllowsUnsealedData((uint64_t)v168);
  }
LABEL_245:
  if (CFArrayGetCount(v162) > 0
    || CFArrayGetCount(v157) > 0
    || CFArrayGetCount(theArray) > 0
    || CFDictionaryGetCount(theDict) > 0
    || CFDictionaryGetCount(v167) > 0
    || CFArrayGetCount(v164) > 0
    || CFDictionaryGetCount(v160) > 0
    || CFArrayGetCount(v159) > 0
    || CFArrayGetCount(v161) > 0
    || CFArrayGetCount(v156) >= 1)
  {
    AMFDRErrorPushInternal(v155, 100, 0, v162, v157, theArray, theDict, v167, 0, v164, v160, v159, v161, v156, (uint64_t)"AMFDRSealedDataVerify", @"Data instances %@ missing.\nMulti-manifest %@ missing.\nDigest for %@ mismatched.\nCombined manifests %@ did not verify.\nData instances %@ did not verify.\nMinimal manifests %@ missing.\nMinimal manifests %@ did not verify. \nMinimalSealingInstances %@ missing. \nSubCCDataInstances %@ missing. \nmismatchedProperties %@ mismatched. Verification failed.", (char)v162);
    CFBooleanRef v129 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 16), @"PersistIncompleteManifest");
    if (v129)
    {
      CFBooleanRef v130 = v129;
      CFTypeID v131 = CFGetTypeID(v129);
      BOOL v132 = v131 == CFBooleanGetTypeID() && CFBooleanGetValue(v130) != 0;
    }
    else
    {
      BOOL v132 = 0;
    }
    AMSupportLogInternal();
    goto LABEL_261;
  }
  CFArrayRef v134 = @"FDRSealedVerifySuccess";
  uint64_t v133 = 1;
LABEL_266:
  AMFDRIncrementStat((CFMutableDictionaryRef *)v4, v134);
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v133;
}

uint64_t AMFDRSealedDataIsEmpty(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 64);
  if (!v2 || !CFArrayGetCount(v2) || CFArrayGetCount(*(CFArrayRef *)(a1 + 64)) < 1) {
    return 1;
  }
  CFIndex v3 = 0;
  do
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v3);
    BOOL v5 = ValueAtIndex == 0;
    if (ValueAtIndex) {
      break;
    }
    ++v3;
  }
  while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 64)));
  return v5;
}

void _checkVerificationError(const __CFString *a1, CFNumberRef number, uint64_t a3)
{
  char v3 = (char)number;
  CFTypeRef v16 = 0;
  CFTypeRef v17 = 0;
  uint64_t valuePtr = 0;
  BOOL v5 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  CFTypeID v8 = *(__CFDictionary **)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  int v9 = **(unsigned __int8 **)(a3 + 32);
  if (CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr))
  {
    if ((valuePtr & 0xFFFD9FFFFFFFFEFFLL) != 0)
    {
      CFAllocatorRef v10 = CFGetAllocator(v5);
      int v11 = AMFDRDataLocalDecomposeFullKey(v10, a1, &v17, &v16);
      int v12 = v11;
      if (v9) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v11 == 0;
      }
      if (!v13
        && (CFArrayRef v14 = *(const __CFArray **)(v6 + 264)) != 0
        && (v18.CFIndex length = CFArrayGetCount(v14), v18.location = 0, CFArrayContainsValue(v14, v18, v17))
        || v12 && AMFDRAllowIncompleteData((uint64_t)v5))
      {
        AMSupportLogInternal();
        CFDictionaryAddValue(v8, v17, v16);
      }
      else
      {
        AMSupportLogInternal();
        AMFDRErrorPushInternal(v7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_checkVerificationError", @"AMFDRSealedDataVerify failed for %@ with trustError 0x%016llX. (Unsealed errors are ignored.)", (char)a1);
      }
    }
    else
    {
      AMSupportLogInternal();
    }
  }
  else
  {
    AMFDRErrorPushInternal(v7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_checkVerificationError", @"Failed to convert %@ to a uint64.", v3);
  }
  if (v17)
  {
    CFRelease(v17);
    CFTypeRef v17 = 0;
  }
  if (v16) {
    CFRelease(v16);
  }
}

uint64_t _deleteFromSealedData(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  return AMFDRSealedDataDelete(*(CFArrayRef **)a3, a1, a2, *(void *)(a3 + 8));
}

uint64_t AMFDRSealedDataCommit(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = (CFTypeRef *)a4;
  uint64_t v5 = a2;
  CFTypeRef v82 = 0;
  if (!a2)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", @"amfdr is NULL", (char)v74);
    return v5;
  }
  if (!a1)
  {
    CFStringRef v68 = @"sealedData is NULL";
LABEL_131:
    AMFDRErrorPushInternal((uint64_t)v4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", v68, (char)v74);
LABEL_136:
    uint64_t v5 = 0;
    goto LABEL_101;
  }
  if (!*(void *)(a1 + 32))
  {
    CFStringRef v68 = @"sealedData->dataClassArray is NULL";
    goto LABEL_131;
  }
  if (!*(void *)(a1 + 40))
  {
    CFStringRef v68 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_131;
  }
  if (!*(void *)(a1 + 64))
  {
    CFStringRef v68 = @"sealedData->dataArray is NULL";
    goto LABEL_131;
  }
  if (a3 && !*(void *)(a1 + 16))
  {
    CFStringRef v68 = @"sealedData->sealingIM4M is NULL";
    goto LABEL_131;
  }
  AMFDRGetOptions(a2);
  uint64_t v7 = AMSupportSafeRetain();
  if (!v7)
  {
    CFStringRef v68 = @"failed to preserve amfdr options";
    goto LABEL_131;
  }
  CFTypeID v8 = (const void *)v7;
  uint64_t v80 = v5;
  CFDataRef v9 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 16), @"TrustObject");
  if (v9)
  {
    CFDataRef v10 = v9;
    if (v4 && *v4)
    {
      CFRelease(*v4);
      CFTypeRef *v4 = 0;
    }
    if (!AMFDRDataPutTrustObject(v80))
    {
      CFStringRef v69 = @"Failed to store trust object in local data store";
      goto LABEL_135;
    }
    CFIndex Length = CFDataGetLength(v10);
    if (!AMFDRDataPut(v80, @"trustobject", @"current", v10, (uint64_t)v4))
    {
      CFStringRef v69 = @"Failed to store trustobject-current in local data store";
      goto LABEL_135;
    }
    unint64_t v12 = CFDataGetLength(v10) + Length;
  }
  else
  {
    unint64_t v12 = 0;
  }
  CFDictionaryRef v13 = *(const __CFDictionary **)(a1 + 104);
  if (v13)
  {
    CFDataRef v14 = (const __CFData *)CFDictionaryGetValue(v13, @"TrustObject");
    if (v14)
    {
      CFDataRef v15 = v14;
      if (v4 && *v4)
      {
        CFRelease(*v4);
        CFTypeRef *v4 = 0;
      }
      if (AMFDRDataPutTrustObject(v80))
      {
        v12 += CFDataGetLength(v15);
        goto LABEL_24;
      }
      CFStringRef v69 = @"Failed to store remote trust object in local data store";
LABEL_135:
      AMFDRErrorPushInternal((uint64_t)v4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", v69, (char)v74);
      CFRelease(v8);
      goto LABEL_136;
    }
  }
LABEL_24:
  if (!AMFDRShouldPersistData(v80, @"PersistCertificate")) {
    goto LABEL_28;
  }
  CFTypeRef v16 = *(const void **)(v80 + 32);
  if (!v16) {
    goto LABEL_28;
  }
  CFTypeRef v17 = *(__CFDictionary **)(v80 + 80);
  if (v17)
  {
    CFDictionarySetValue(v17, @"certificate", v16);
LABEL_28:
    CFTypeRef cf = 0;
    goto LABEL_29;
  }
  uint64_t v64 = AMFDRDataLocalCopyDataStoragePath((void *)v80, @"certificate", 0, (uint64_t)v4);
  if (!v64)
  {
    CFStringRef v69 = @"missing cert data storage path";
    goto LABEL_135;
  }
  CFTypeRef cf = (CFTypeRef)v64;
  if (AMFDRWriteDataToFileURL((CFTypeRef)v80, *(void *)(v80 + 32), v64, 1))
  {
    AMFDRErrorPushInternal((uint64_t)v4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", @"failed to write cert data to %@", (char)cf);
    CFStringRef v62 = cf;
    uint64_t v5 = 0;
    CFStringRef FullKey = 0;
    goto LABEL_98;
  }
LABEL_29:
  CFTypeRef v75 = v8;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  uint64_t v78 = (uint64_t)v4;
  CFStringRef FullKey = 0;
  if (Count >= 1)
  {
    CFIndex v19 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v19);
      CFTypeID v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v19);
      CFDataRef v22 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v19);
      CFDataRef v23 = *(const __CFData **)(a1 + 16);
      CFIndex v81 = 0;
      if (v22) {
        break;
      }
      AMSupportLogInternal();
LABEL_52:
      if (Count == ++v19) {
        goto LABEL_53;
      }
    }
    CFDataRef v24 = v22;
    if (FullKey) {
      CFRelease(FullKey);
    }
    CFAllocatorRef v25 = CFGetAllocator((CFTypeRef)v80);
    CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v25, (uint64_t)ValueAtIndex, (uint64_t)v21);
    if (!FullKey)
    {
      CFStringRef format = @"failed to create data instance string";
      *(_OWORD *)CFDictionaryRef v71 = 0u;
      long long v72 = 0u;
      *(_OWORD *)CFStringRef value = 0u;
      uint64_t v65 = (uint64_t)v4;
      goto LABEL_109;
    }
    unint64_t v79 = v12;
    CFDictionaryRef v26 = *(const __CFDictionary **)(a1 + 160);
    if (v26) {
      CFIndex v27 = CFDictionaryGetValue(v26, FullKey);
    }
    else {
      CFIndex v27 = 0;
    }
    CFDictionaryRef v28 = *(const __CFDictionary **)(a1 + 152);
    if (v28) {
      CFDataRef v29 = (const __CFData *)CFDictionaryGetValue(v28, FullKey);
    }
    else {
      CFDataRef v29 = 0;
    }
    CFArrayRef v30 = *(const __CFArray **)(a1 + 272);
    if (v30)
    {
      v83.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(a1 + 272));
      v83.CFIndex location = 0;
      int v31 = CFArrayContainsValue(v30, v83, ValueAtIndex);
      BOOL v32 = v31 != 0;
      if (v31 && v29)
      {
        AMSupportLogInternal();
        BOOL v32 = 1;
        uint64_t v4 = (CFTypeRef *)v78;
        goto LABEL_48;
      }
    }
    else
    {
      BOOL v32 = 0;
    }
    uint64_t v4 = (CFTypeRef *)v78;
    if (!v29)
    {
LABEL_49:
      if ((AMFDRDataCommitWithPopulateAddition((void *)v80, ValueAtIndex, v21, v24, v32, v23, v27, &v81, (uint64_t)v4) & 1) == 0) {
        AMSupportLogInternal();
      }
      unint64_t v12 = v81 + v79;
      goto LABEL_52;
    }
LABEL_48:
    CFDataRef v23 = v29;
    goto LABEL_49;
  }
LABEL_53:
  CFDataRef v33 = *(const __CFData **)(a1 + 16);
  if (v33)
  {
    CFTypeID v34 = (const void *)v80;
    if ((AMFDRDataPut(v80, *(const __CFString **)(a1 + 72), *(const void **)(a1 + 80), v33, (uint64_t)v4) & 1) == 0)
    {
      CFArrayRef v74 = *(__CFString **)(a1 + 72);
      CFStringRef format = @"AMFDRDataPut(%@:%@) failed.";
      *(_OWORD *)CFDictionaryRef v71 = 0u;
      long long v72 = 0u;
      *(_OWORD *)CFStringRef value = 0u;
      uint64_t v65 = (uint64_t)v4;
      goto LABEL_117;
    }
    v12 += CFDataGetLength(*(CFDataRef *)(a1 + 16));
  }
  else
  {
    CFTypeID v34 = (const void *)v80;
  }
  if (!*(void *)(a1 + 152)) {
    goto LABEL_86;
  }
  CFArrayRef v35 = *(const __CFArray **)(a1 + 136);
  if (v35)
  {
    CFIndex v36 = CFArrayGetCount(v35);
    if (v36 >= 1)
    {
      CFIndex v37 = v36;
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 144)) != v36)
      {
        AMFDRErrorPushInternal((uint64_t)v4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", @"Invalid sealedData->multiSealingDataInstancesArray count", (char)v74);
        goto LABEL_119;
      }
      CFIndex v38 = 0;
      while (1)
      {
        CFAllocatorRef v39 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v38);
        CFArrayRef v40 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), v38);
        if (!v39) {
          break;
        }
        CFArrayRef v41 = v40;
        if (!v40)
        {
          CFStringRef v67 = @"dataInstance is NULL. MultiSealing failed.";
          goto LABEL_113;
        }
        if (FullKey) {
          CFRelease(FullKey);
        }
        CFAllocatorRef v42 = CFGetAllocator(v34);
        CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v42, (uint64_t)v39, (uint64_t)v41);
        if (!FullKey)
        {
LABEL_107:
          CFStringRef format = @"failed to create data instance string";
          *(_OWORD *)CFDictionaryRef v71 = 0u;
          long long v72 = 0u;
          *(_OWORD *)CFStringRef value = 0u;
          uint64_t v65 = v78;
LABEL_109:
          CFIndex v66 = 2;
          goto LABEL_118;
        }
        CFDataRef v43 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 152), FullKey);
        if (v43)
        {
          CFDataRef v44 = v43;
          unint64_t v45 = v12;
          CFRetain(v43);
          CFAllocatorRef v46 = CFGetAllocator(v34);
          CFStringRef v47 = CFStringCreateWithFormat(v46, 0, @"%@-%@", @"manifest", v39);
          char v48 = AMFDRDataPut((uint64_t)v34, v47, v41, v44, v78);
          CFIndex v49 = CFDataGetLength(v44);
          if (v47) {
            CFRelease(v47);
          }
          CFRelease(v44);
          if ((v48 & 1) == 0)
          {
            LOBYTE(v74) = 0;
            goto LABEL_116;
          }
          unint64_t v12 = v49 + v45;
          CFTypeID v34 = (const void *)v80;
        }
        else
        {
          AMSupportLogInternal();
        }
        if (v37 == ++v38) {
          goto LABEL_74;
        }
      }
      CFStringRef v67 = @"dataClass is NULL. MultiSealing failed.";
LABEL_113:
      AMFDRErrorPushInternal(v78, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", v67, (char)v74);
      goto LABEL_119;
    }
  }
LABEL_74:
  CFArrayRef v50 = *(const __CFArray **)(a1 + 176);
  if (!v50 || (CFIndex v51 = CFArrayGetCount(v50), v51 < 1))
  {
LABEL_86:
    CFTypeID v8 = v75;
    if (AMFDRSetOptions((uint64_t)v34, v75))
    {
      uint64_t LocalStoreMaxSizeInternal = AMFDRSealingMapGetLocalStoreMaxSizeInternal((uint64_t)v34, (uint64_t)&v82);
      AMSupportLogInternal();
      if (v12 > LocalStoreMaxSizeInternal << 20)
      {
        if (!LocalStoreMaxSizeInternal && v82) {
          AMSupportLogInternal();
        }
        if (*(uint64_t (***)(int, int, int, int))(v80 + 48) != AMFDRHTTPStore
          && AMFDROptionsGetBooleanValue(v80, @"CheckStoreSize", 0))
        {
          AMFDRErrorPushInternal(v78, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", @"committed FDR data (%ld bytes) has larger size than estimated (%ld MB)", v12);
LABEL_94:
          uint64_t v5 = 0;
          goto LABEL_97;
        }
        AMSupportLogInternal();
      }
      uint64_t v5 = 1;
      goto LABEL_97;
    }
    AMFDRErrorPushInternal(v78, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCommit", @"failed to restore amfdr options", (char)v74);
    goto LABEL_94;
  }
  CFIndex v52 = v51;
  CFIndex v53 = 0;
  while (1)
  {
    CFBooleanRef v54 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v53);
    if (!v54)
    {
      CFStringRef v67 = @"dataInstance is NULL. minimalSealing failed.";
      goto LABEL_113;
    }
    CFDictionaryRef v55 = v54;
    if (FullKey) {
      CFRelease(FullKey);
    }
    CFAllocatorRef v56 = CFGetAllocator(v34);
    CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v56, @"minimal-manifest", (uint64_t)v55);
    if (!FullKey) {
      goto LABEL_107;
    }
    CFDataRef v57 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 152), FullKey);
    if (!v57)
    {
      AMSupportLogInternal();
      goto LABEL_85;
    }
    CFDataRef v58 = v57;
    CFRetain(v57);
    char v59 = AMFDRDataPut((uint64_t)v34, @"minimal-manifest", v55, v58, v78);
    CFIndex v60 = CFDataGetLength(v58);
    CFRelease(v58);
    if ((v59 & 1) == 0) {
      break;
    }
    v12 += v60;
    CFTypeID v34 = (const void *)v80;
LABEL_85:
    if (v52 == ++v53) {
      goto LABEL_86;
    }
  }
  CFArrayRef v74 = @"minimal-manifest";
LABEL_116:
  CFStringRef format = @"AMFDRDataPut(%@:%@) failed.";
  *(_OWORD *)CFDictionaryRef v71 = 0u;
  long long v72 = 0u;
  *(_OWORD *)CFStringRef value = 0u;
  uint64_t v65 = v78;
LABEL_117:
  CFIndex v66 = 10;
LABEL_118:
  AMFDRErrorPushInternal(v65, v66, 0, 0, 0, 0, 0, 0, value[0], value[1], v71[0], v71[1], (void *)v72, *((void **)&v72 + 1), (uint64_t)"AMFDRSealedDataCommit", format, (char)v74);
LABEL_119:
  uint64_t v5 = 0;
  CFTypeID v8 = v75;
LABEL_97:
  CFStringRef v62 = cf;
  if (cf) {
LABEL_98:
  }
    CFRelease(v62);
  CFRelease(v8);
  if (FullKey) {
    CFRelease(FullKey);
  }
LABEL_101:
  if (v82) {
    CFRelease(v82);
  }
  return v5;
}

uint64_t _AMFDRSealedDataExport(CFArrayRef *a1, CFDictionaryRef *a2, const __CFArray *a3, uint64_t a4)
{
  void context[2] = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  if (!a2)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"amfdr is NULL", v31);
    return 0;
  }
  if (!a2[2])
  {
    CFStringRef v29 = @"amfdr->optionsDict is NULL";
LABEL_59:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", v29, v31);
    goto LABEL_60;
  }
  if (!a1)
  {
    CFStringRef v29 = @"sealedData is NULL";
    goto LABEL_59;
  }
  CFArrayRef v7 = a1[4];
  if (!v7)
  {
    CFStringRef v29 = @"sealedData->dataClassArray is NULL";
    goto LABEL_59;
  }
  if (!a1[5])
  {
    CFStringRef v29 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_59;
  }
  if (!a1[8])
  {
    CFStringRef v29 = @"sealedData->dataArray is NULL";
    goto LABEL_59;
  }
  if (!a3)
  {
    CFStringRef v29 = @"dataClassesToExport is NULL";
    goto LABEL_59;
  }
  CFIndex Count = CFArrayGetCount(v7);
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2[2], @"EnableMultiRequest");
  if (Value && !CFBooleanGetValue(Value))
  {
    CFAllocatorRef v16 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFDataRef v14 = Mutable;
      CFDictionaryRef v13 = 0;
      int v15 = 0;
LABEL_14:
      CFRange v18 = (__CFString *)AMFDRCreateCopy((uint64_t)a2);
      if (v18)
      {
        CFAllocatorRef v19 = CFGetAllocator(a1);
        CFMutableStringRef v20 = CFStringCreateMutable(v19, 0);
        if (!v20)
        {
          AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"permStr is NULL", v31);
          goto LABEL_66;
        }
        CFDictionaryRef theDict = v14;
        CFArrayRef theArray = v13;
        CFDataRef v33 = (CFTypeRef *)a4;
        if (CFArrayGetCount(a3) >= 1)
        {
          CFIndex v21 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, v21);
            if (!ValueAtIndex)
            {
              AMFDRErrorPushInternal((uint64_t)v33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"dataClass is NULL", v31);
              goto LABEL_50;
            }
            CFStringRef v23 = ValueAtIndex;
            v38.CFIndex location = 0;
            v38.CFIndex length = Count;
            FirstIndexOfCFBooleanRef Value = CFArrayGetFirstIndexOfValue(a1[4], v38, ValueAtIndex);
            if (FirstIndexOfValue == -1)
            {
              char v32 = (char)v23;
              CFStringRef v28 = @"%@ is not in sealedData";
LABEL_48:
              AMFDRErrorPushInternal((uint64_t)v33, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", v28, v32);
              goto LABEL_50;
            }
            CFIndex v25 = FirstIndexOfValue;
            uint64_t v26 = (uint64_t)CFArrayGetValueAtIndex(a1[5], FirstIndexOfValue);
            if (!v26)
            {
              AMFDRErrorPushInternal((uint64_t)v33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"dataInstance is NULL", v31);
              goto LABEL_51;
            }
            if (!CFArrayGetValueAtIndex(a1[8], v25))
            {
              char v32 = (char)v23;
              CFStringRef v28 = @"data %@-%@ is missing";
              goto LABEL_48;
            }
            if ((AMFDRDataAppendPermissionsString(v18, 3u, v23, (const __CFString *)v26, v20) & 1) == 0) {
              break;
            }
            if (v15) {
              CFArrayAppendValue(theArray, (const void *)v26);
            }
            else {
              CFDictionaryAddValue(theDict, v23, (const void *)v26);
            }
            if (++v21 >= CFArrayGetCount(a3)) {
              goto LABEL_27;
            }
          }
          AMFDRErrorPushInternal((uint64_t)v33, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"AMFDRDataAppendPermissionsString failed", v31);
LABEL_50:
          uint64_t v26 = 0;
LABEL_51:
          CFDataRef v14 = theDict;
          CFDictionaryRef v13 = theArray;
          goto LABEL_33;
        }
LABEL_27:
        AMFDRSetOption((uint64_t)v18, @"Permissions", v20);
        AMFDRSetOption((uint64_t)v18, @"OrganizationalUnit", @"Devices - Stations");
        AMFDRSetOption((uint64_t)v18, @"PersistCertificate", (const __CFString *)*MEMORY[0x263EFFB38]);
        CFDictionaryRef v13 = theArray;
        if (AMFDRPermissionsRequest((uint64_t)v18, v33))
        {
          CFDataRef v14 = theDict;
          if (v15)
          {
            if ((AMFDRDataMultiExport((uint64_t)v18) & 1) == 0)
            {
              AMSupportLogInternal();
LABEL_66:
              uint64_t v26 = 0;
              goto LABEL_33;
            }
          }
          else
          {
            context[0] = v18;
            context[1] = &cf;
            CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_exportDataInstances, context);
            if (cf)
            {
              AMFDRErrorPushInternal((uint64_t)v33, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"_exportDataInstances failed with error %@", (char)cf);
              goto LABEL_66;
            }
          }
          uint64_t v26 = 1;
        }
        else
        {
          AMFDRErrorPushInternal((uint64_t)v33, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"Permissions request failed.", v31);
          uint64_t v26 = 0;
          CFDataRef v14 = theDict;
        }
LABEL_33:
        if (v13) {
          CFRelease(v13);
        }
        if (v14) {
          CFRelease(v14);
        }
        if (v20) {
          CFRelease(v20);
        }
        goto LABEL_39;
      }
      AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", @"cannot create a separate amfdr object for data export", v31);
      CFMutableStringRef v20 = 0;
      goto LABEL_66;
    }
    CFStringRef v30 = @"exportDict is NULL";
  }
  else
  {
    CFAllocatorRef v11 = CFGetAllocator(a2);
    CFMutableArrayRef v12 = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
    if (v12)
    {
      CFDictionaryRef v13 = v12;
      CFDataRef v14 = 0;
      int v15 = 1;
      goto LABEL_14;
    }
    CFStringRef v30 = @"dataInstancesToExport is NULL";
  }
  AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExport", v30, v31);
LABEL_60:
  uint64_t v26 = 0;
  CFRange v18 = 0;
LABEL_39:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  return v26;
}

uint64_t _AMFDRSealedDataCopyAndCommitIntraFactoryData(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v6 = a2;
  if (!a2)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"amfdrLocal is NULL", v48);
    uint64_t v7 = 0;
    CFDictionaryRef v26 = 0;
LABEL_96:
    CFMutableStringRef cf = 0;
    CFDictionaryRef v59 = 0;
    CFMutableArrayRef Mutable = 0;
LABEL_97:
    CFMutableArrayRef v13 = 0;
LABEL_102:
    CFAllocatorRef v39 = 0;
    CFArrayRef v40 = 0;
    CFStringRef FullKey = 0;
    CFStringRef v42 = 0;
    CFArrayRef v41 = 0;
    goto LABEL_54;
  }
  if (!a3)
  {
    CFStringRef v46 = @"amfdrRemote is NULL";
LABEL_94:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", v46, v48);
    uint64_t v7 = 0;
    goto LABEL_95;
  }
  if (!*(void *)(a3 + 16))
  {
    CFStringRef v46 = @"amfdrRemote->optionsDict is NULL";
    goto LABEL_94;
  }
  uint64_t v7 = a1;
  if (!a1)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"sealedData is NULL", v48);
LABEL_95:
    CFDictionaryRef v26 = 0;
    CFStringRef v6 = 0;
    goto LABEL_96;
  }
  CFArrayRef v8 = *(const __CFArray **)(a1 + 48);
  if (!v8)
  {
    CFStringRef v46 = @"sealedData->intraFactoryDataClasses is NULL";
    goto LABEL_94;
  }
  if (!*(void *)(v7 + 56))
  {
    CFStringRef v46 = @"sealedData->intraFactoryDataInstances is NULL";
    goto LABEL_94;
  }
  CFIndex Count = CFArrayGetCount(v8);
  if (Count != CFArrayGetCount(*(CFArrayRef *)(v7 + 56)))
  {
    CFStringRef v46 = @"count of intraFactoryDataClasses and intraFactoryDataInstances mismatch";
    goto LABEL_94;
  }
  CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a3);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"Failed to allocate missingDataInstances", v48);
    uint64_t v7 = 0;
    CFDictionaryRef v26 = 0;
    CFStringRef v6 = 0;
    CFMutableStringRef cf = 0;
    CFDictionaryRef v59 = 0;
    goto LABEL_97;
  }
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a3);
  CFMutableArrayRef v13 = CFArrayCreateMutable(v12, 0, MEMORY[0x263EFFF70]);
  if (!v13)
  {
    CFStringRef v47 = @"Failed to allocate dataClassesToCommit";
LABEL_101:
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", v47, v48);
    uint64_t v7 = 0;
    CFDictionaryRef v26 = 0;
    CFStringRef v6 = 0;
    CFMutableStringRef cf = 0;
    CFDictionaryRef v59 = 0;
    goto LABEL_102;
  }
  CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)a3);
  CFDataRef v57 = CFArrayCreateMutable(v14, 0, MEMORY[0x263EFFF70]);
  if (!v57)
  {
    CFStringRef v47 = @"Failed to allocate dataInstancesToCommit";
    goto LABEL_101;
  }
  CFAllocatorRef v15 = CFGetAllocator((CFTypeRef)a3);
  CFAllocatorRef v56 = CFArrayCreateMutable(v15, 0, MEMORY[0x263EFFF70]);
  if (v56)
  {
    CFBooleanRef v54 = (CFTypeRef *)a4;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"UseSikDataInstance");
    AMFDRSetOption(a3, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
    CFAllocatorRef v16 = *(const void **)(a3 + 32);
    if (v16) {
      CFRetain(*(CFTypeRef *)(a3 + 32));
    }
    CFIndex v51 = v16;
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), @"Permissions");
    CFStringRef v18 = v17;
    if (v17) {
      CFRetain(v17);
    }
    CFStringRef v52 = v18;
    CFAllocatorRef v19 = CFGetAllocator((CFTypeRef)a3);
    CFMutableStringRef v20 = CFStringCreateMutable(v19, 0);
    CFStringRef FullKey = v20;
    if (!v20)
    {
      AMFDRErrorPushInternal((uint64_t)v54, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"permStr is NULL", v48);
      uint64_t v7 = 0;
      CFDictionaryRef v26 = 0;
      CFMutableStringRef cf = 0;
      CFDictionaryRef v59 = 0;
      goto LABEL_51;
    }
    CFMutableStringRef cf = v20;
    if (Count >= 1)
    {
      CFIndex v22 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 48), v22);
        if (!ValueAtIndex) {
          break;
        }
        CFStringRef v24 = ValueAtIndex;
        CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 56), v22);
        if (!v25)
        {
          AMFDRErrorPushInternal((uint64_t)v54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"dataInstance is NULL", v48);
          goto LABEL_80;
        }
        if ((AMFDRDataAppendPermissionsString((__CFString *)a3, 0, v24, v25, FullKey) & 1) == 0)
        {
          AMFDRErrorPushInternal((uint64_t)v54, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"AMFDRDataAppendPermissionsString failed", v48);
          goto LABEL_80;
        }
        if (Count == ++v22) {
          goto LABEL_23;
        }
      }
      AMFDRErrorPushInternal((uint64_t)v54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"dataClass is NULL", v48);
LABEL_80:
      uint64_t v7 = 0;
      CFDictionaryRef v26 = 0;
      CFDictionaryRef v59 = 0;
      CFStringRef FullKey = 0;
      goto LABEL_51;
    }
LABEL_23:
    CFIndex v49 = (__CFString *)v6;
    AMFDRSetOption(a3, @"Permissions", FullKey);
    CFDictionaryRef v26 = (const __CFDictionary *)AMFDRDataMultiCopy((void *)a3, *(void *)(v7 + 48), *(void *)(v7 + 56), v54);
    CFArrayRef theArray = v13;
    if (v54)
    {
      CFIndex v27 = (__CFError *)*v54;
      if (*v54)
      {
        if (CFErrorGetCode(v27) != 21)
        {
          AMFDRErrorPushInternal((uint64_t)v54, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"AMFDRDataMultiCopy got unexpected error", v48);
          goto LABEL_107;
        }
        CFIndex v27 = (__CFError *)AMFDRCopyUnderlyingDictionary((__CFError *)*v54, @"MultiRequestErrors");
        if (!v27)
        {
          AMFDRErrorPushInternal((uint64_t)v54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"AMFDRDataMultiCopy failed but multiRequestErrors is NULL", v48);
LABEL_107:
          uint64_t v7 = 0;
          CFDictionaryRef v59 = 0;
          CFStringRef FullKey = 0;
          goto LABEL_50;
        }
      }
    }
    else
    {
      CFIndex v27 = 0;
    }
    CFDataRef v58 = Mutable;
    CFDictionaryRef v59 = v27;
    if (Count >= 1)
    {
      CFIndex v28 = 0;
      while (1)
      {
        CFErrorRef v60 = 0;
        CFStringRef v29 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 48), v28);
        if (!v29) {
          break;
        }
        CFStringRef v30 = v29;
        char v31 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 56), v28);
        if (!v31)
        {
          CFStringRef format = @"dataInstance is NULL";
          goto LABEL_83;
        }
        char v32 = v31;
        CFAllocatorRef v33 = CFGetAllocator((CFTypeRef)a3);
        CFStringRef FullKey = (__CFString *)AMFDRDataLocalCreateFullKey(v33, (uint64_t)v30, (uint64_t)v32);
        if (!FullKey)
        {
          AMFDRErrorPushInternal((uint64_t)v54, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"failed to create data instance string", v48);
          goto LABEL_49;
        }
        if (v26 && CFDictionaryContainsKey(v26, FullKey))
        {
          CFTypeID v34 = CFDictionaryGetValue(v26, FullKey);
          if (!v34)
          {
            AMFDRErrorPushInternal((uint64_t)v54, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"valueData is NULL", v48);
            goto LABEL_49;
          }
          CFArrayRef v35 = v34;
          CFRetain(v34);
          CFArrayAppendValue(theArray, v30);
          CFArrayAppendValue(v57, v32);
          CFArrayAppendValue(v56, v35);
          CFRelease(v35);
        }
        else
        {
          CFIndex v36 = (__CFError *)CFDictionaryGetValue(v59, FullKey);
          CFErrorRef v60 = v36;
          if (!v36)
          {
            AMFDRErrorPushInternal((uint64_t)v54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"AMFDRDataMultiCopy failed(%@), but multiRequestError is NULL", (char)FullKey);
            goto LABEL_49;
          }
          CFIndex Code = CFErrorGetCode(v36);
          uint64_t v38 = AMFDRGetUnderlyingErrorCode(a3, &v60);
          if (Code != 701 && v38 != 404)
          {
            AMFDRErrorPushInternal((uint64_t)v54, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"Unexpected error and underlying error for %@: %ld, %ld", (char)FullKey);
LABEL_49:
            uint64_t v7 = 0;
            CFMutableArrayRef Mutable = v58;
LABEL_50:
            CFMutableArrayRef v13 = theArray;
LABEL_51:
            CFArrayRef v40 = v56;
            CFAllocatorRef v39 = v57;
LABEL_52:
            CFArrayRef v41 = v51;
            CFStringRef v6 = v52;
            goto LABEL_53;
          }
          AMSupportLogInternal();
          CFArrayAppendValue(v58, FullKey);
        }
        CFRelease(FullKey);
        if (Count == ++v28) {
          goto LABEL_43;
        }
      }
      CFStringRef format = @"dataClass is NULL";
LABEL_83:
      AMFDRErrorPushInternal((uint64_t)v54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", format, v48);
      CFStringRef FullKey = 0;
      goto LABEL_49;
    }
LABEL_43:
    CFMutableArrayRef v13 = theArray;
    CFArrayRef v40 = v56;
    CFAllocatorRef v39 = v57;
    if (CFArrayGetCount(theArray) >= 1 && (AMFDRDataMultiPut(v49, theArray, v57, v56, (uint64_t)v54) & 1) == 0)
    {
      AMFDRErrorPushInternal((uint64_t)v54, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"AMFDRDataMultiCopy failed. ", v48);
      uint64_t v7 = 0;
      CFStringRef FullKey = 0;
      CFMutableArrayRef Mutable = v58;
      goto LABEL_52;
    }
    CFMutableArrayRef Mutable = v58;
    CFArrayRef v41 = v51;
    CFStringRef v6 = v52;
    if (CFArrayGetCount(v58) < 1)
    {
      CFStringRef FullKey = 0;
      uint64_t v7 = 1;
    }
    else
    {
      AMFDRErrorPushInternal((uint64_t)v54, 33, 0, v58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"Failed to fetch intra factory data for instances %@\n", (char)v58);
      uint64_t v7 = 0;
      CFStringRef FullKey = 0;
    }
LABEL_53:
    CFStringRef v42 = Value;
  }
  else
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCopyAndCommitIntraFactoryData", @"Failed to allocate dataToCommit", v48);
    uint64_t v7 = 0;
    CFDictionaryRef v26 = 0;
    CFStringRef v6 = 0;
    CFMutableStringRef cf = 0;
    CFDictionaryRef v59 = 0;
    CFArrayRef v40 = 0;
    CFStringRef FullKey = 0;
    CFStringRef v42 = 0;
    CFArrayRef v41 = 0;
    CFAllocatorRef v39 = v57;
  }
LABEL_54:
  AMFDRSetOption(a3, @"UseSikDataInstance", v42);
  AMFDRSetOption(a3, @"Permissions", v6);
  CFDataRef v43 = *(const void **)(a3 + 32);
  if (v43) {
    CFRelease(v43);
  }
  *(void *)(a3 + 32) = v41;
  if (v41) {
    CFRetain(v41);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (FullKey) {
    CFRelease(FullKey);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v40) {
    CFRelease(v40);
  }
  return v7;
}

uint64_t AMFDRSealedDataVerificationErrorIsBenign(int a1, CFDictionaryRef *a2, char a3, int a4, char a5, CFErrorRef err)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  CFErrorRef v53 = err;
  if (!a2)
  {
    uint64_t v28 = 1;
    AMFDRErrorPushInternal((uint64_t)&v53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerificationErrorIsBenign", @"amfdr is NULL", v43);
    goto LABEL_99;
  }
  if (!err)
  {
    uint64_t v28 = 1;
    AMFDRErrorPushInternal((uint64_t)&v53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataVerificationErrorIsBenign", @"error is NULL", v43);
    goto LABEL_99;
  }
  CFDictionaryRef v10 = CFErrorCopyUserInfo(err);
  int v11 = AMFDRAPTicketAllowsUnsealedData((uint64_t)a2);
  int v12 = AMFDRAllowIncompleteData((uint64_t)a2);
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2[2], @"AllowPropertyMismatch");
  char v45 = a3;
  if (Value && (CFBooleanRef v14 = Value, v15 = CFGetTypeID(Value), v15 == CFBooleanGetTypeID()))
  {
    int v16 = v12;
    BOOL v44 = CFBooleanGetValue(v14) != 0;
    if (!v10)
    {
LABEL_6:
      CFArrayRef v50 = 0;
      CFArrayRef theArray = 0;
      CFArrayRef v48 = 0;
      CFArrayRef v49 = 0;
      CFArrayRef v17 = 0;
      CFArrayRef v47 = 0;
      CFDictionaryRef v18 = 0;
      CFDictionaryRef v19 = 0;
      CFDictionaryRef v20 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    int v16 = v12;
    BOOL v44 = 0;
    if (!v10) {
      goto LABEL_6;
    }
  }
  CFArrayRef theArray = (const __CFArray *)CFDictionaryGetValue(v10, @"MissingDataInstances");
  CFArrayRef v49 = (const __CFArray *)CFDictionaryGetValue(v10, @"MissingMultiManifests");
  CFArrayRef v48 = (CFArrayRef)CFDictionaryGetValue(v10, @"MissingMinimalManifests");
  CFArrayRef v50 = (const __CFArray *)CFDictionaryGetValue(v10, @"MissingMinimalSealingInstances");
  CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"UnverifiedDataInstances");
  CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"UnverifiedCombinedManifests");
  CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"UnverifiedMinimalManifests");
  CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v10, @"MissingSubCCDataInstances");
  CFArrayRef v47 = (const __CFArray *)CFDictionaryGetValue(v10, @"MismatchedProperties");
LABEL_9:
  if (CFErrorGetCode(err) == 100)
  {
    if (a5)
    {
      if (!v17) {
        goto LABEL_15;
      }
      AMSupportLogInternal();
      if (CFArrayGetCount(v17) < 1) {
        goto LABEL_15;
      }
      if ((v16 | v11))
      {
        AMSupportLogInternal();
LABEL_15:
        CFDictionaryRef v21 = 0;
LABEL_94:
        uint64_t v28 = 1;
        goto LABEL_95;
      }
      AMSupportLogInternal();
      goto LABEL_36;
    }
    if (theArray) {
      AMSupportLogInternal();
    }
    int v22 = v11;
    if (v49) {
      AMSupportLogInternal();
    }
    int v23 = v16;
    if (v48) {
      AMSupportLogInternal();
    }
    if (v18) {
      AMSupportLogInternal();
    }
    if (v50) {
      AMSupportLogInternal();
    }
    if (v18)
    {
      CFIndex Count = CFDictionaryGetCount(v18);
      CFDictionaryRef v21 = 0;
      BOOL v25 = Count > 0;
      if (Count >= 1 && a4)
      {
        if ((v16 | v22) == 1)
        {
          AMSupportLogInternal();
          CFAllocatorRef v26 = CFGetAllocator(a2);
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v26, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFDictionaryRef v21 = Mutable;
          if (!Mutable) {
            goto LABEL_93;
          }
          long long context = a2;
          CFDictionaryRef v55 = (CFTypeRef *)Mutable;
          p_CFTypeRef cf = &cf;
          CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)_getDataClassesAndInstances, &context);
          if (cf) {
            goto LABEL_93;
          }
          CFDictionaryRef v55 = &cf;
          p_CFTypeRef cf = 0;
          CFDictionaryApplyFunction(v21, (CFDictionaryApplierFunction)_deleteUnverifiedDataInstance, &context);
          BOOL v25 = cf != 0;
          if (cf) {
            AMSupportLogInternal();
          }
        }
        else
        {
          CFDictionaryRef v21 = 0;
          BOOL v25 = 1;
        }
      }
    }
    else
    {
      CFDictionaryRef v21 = 0;
      BOOL v25 = 0;
    }
    BOOL v29 = 0;
    if ((v45 & 1) == 0 && v19)
    {
      if (CFDictionaryGetCount(v19) < 1)
      {
        BOOL v29 = 0;
      }
      else
      {
        AMSupportLogInternal();
        BOOL v29 = 1;
        if (a4 && v16 | v22)
        {
          AMSupportLogInternal();
          if (v21) {
            CFRelease(v21);
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          CFAllocatorRef v30 = CFGetAllocator(a2);
          CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v30, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFDictionaryRef v21 = v31;
          if (!v31) {
            goto LABEL_93;
          }
          long long context = a2;
          CFDictionaryRef v55 = (CFTypeRef *)v31;
          p_CFTypeRef cf = &cf;
          CFDictionaryApplyFunction(v19, (CFDictionaryApplierFunction)_getDataClassesAndInstances, &context);
          if (cf) {
            goto LABEL_93;
          }
          CFDictionaryRef v55 = &cf;
          p_CFTypeRef cf = 0;
          CFDictionaryApplyFunction(v21, (CFDictionaryApplierFunction)_deleteUnverifiedDataInstance, &context);
          BOOL v29 = cf != 0;
          if (cf) {
            AMSupportLogInternal();
          }
        }
      }
    }
    if (v20 && CFDictionaryGetCount(v20) >= 1)
    {
      AMSupportLogInternal();
      BOOL v32 = 1;
      if (a4 && v23 | v22)
      {
        AMSupportLogInternal();
        if (v21) {
          CFRelease(v21);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        CFAllocatorRef v33 = CFGetAllocator(a2);
        CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(v33, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFDictionaryRef v21 = v34;
        if (!v34) {
          goto LABEL_93;
        }
        long long context = a2;
        CFDictionaryRef v55 = (CFTypeRef *)v34;
        p_CFTypeRef cf = &cf;
        CFDictionaryApplyFunction(v20, (CFDictionaryApplierFunction)_getDataClassesAndInstances, &context);
        if (cf) {
          goto LABEL_93;
        }
        CFDictionaryRef v55 = &cf;
        p_CFTypeRef cf = 0;
        CFDictionaryApplyFunction(v21, (CFDictionaryApplierFunction)_deleteUnverifiedDataInstance, &context);
        BOOL v32 = cf != 0;
        BOOL v35 = v44;
        CFArrayRef v36 = v48;
        if (cf) {
          AMSupportLogInternal();
        }
        goto LABEL_66;
      }
    }
    else
    {
      BOOL v32 = 0;
    }
    BOOL v35 = v44;
    CFArrayRef v36 = v48;
LABEL_66:
    if (v47) {
      AMSupportLogInternal();
    }
    uint64_t v28 = !v25 && !v29 && !v32;
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1) {
        int v37 = 1;
      }
      else {
        int v37 = v23;
      }
      uint64_t v28 = (v37 | v22) & v28;
    }
    if (v49)
    {
      if (CFArrayGetCount(v49) < 1) {
        int v38 = 1;
      }
      else {
        int v38 = v23;
      }
      uint64_t v28 = (v38 | v22) & v28;
    }
    if (v36)
    {
      if (CFArrayGetCount(v36) < 1) {
        int v39 = 1;
      }
      else {
        int v39 = v23;
      }
      uint64_t v28 = (v39 | v22) & v28;
    }
    if (v50)
    {
      if (CFArrayGetCount(v50) <= 0) {
        uint64_t v28 = v28;
      }
      else {
        uint64_t v28 = v35 & v28;
      }
    }
    if (v47)
    {
      CFIndex v40 = CFArrayGetCount(v47);
      char v41 = v35 & v28;
      if (v40 <= 0) {
        char v41 = v28;
      }
      if ((v41 & 1) == 0)
      {
        uint64_t v28 = 0;
        goto LABEL_95;
      }
    }
    else if (!v28)
    {
      goto LABEL_95;
    }
LABEL_93:
    AMSupportLogInternal();
    goto LABEL_94;
  }
LABEL_36:
  uint64_t v28 = 0;
  CFDictionaryRef v21 = 0;
LABEL_95:
  if (v10) {
    CFRelease(v10);
  }
  if (v21) {
    CFRelease(v21);
  }
LABEL_99:
  if (cf) {
    CFRelease(cf);
  }
  return v28;
}

uint64_t _AMFDRVerificationErrorRemoteDataIsSealed(uint64_t a1, CFErrorRef *a2)
{
  if (!a1
    || !a2
    || !*a2
    || !*(void *)(a1 + 16)
    || *(uint64_t (***)(int, int, int, int))(a1 + 48) != AMFDRHTTPStore)
  {
    goto LABEL_14;
  }
  if (CFErrorGetCode(*a2) != 100) {
    return 0;
  }
  CFDictionaryRef v3 = CFErrorCopyUserInfo(*a2);
  if (!v3)
  {
LABEL_14:
    AMSupportLogInternal();
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v3, @"UnverifiedDataInstances");
  CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(v4, @"UnverifiedMinimalManifests");
  CFDictionaryRef v7 = v6;
  if (!Value)
  {
    BOOL v8 = 1;
    if (v6) {
      goto LABEL_10;
    }
LABEL_12:
    BOOL v9 = 1;
    goto LABEL_13;
  }
  BOOL v8 = CFDictionaryGetCount(Value) == 0;
  if (!v7) {
    goto LABEL_12;
  }
LABEL_10:
  BOOL v9 = CFDictionaryGetCount(v7) == 0;
LABEL_13:
  uint64_t v10 = v8 & v9;
  CFRelease(v4);
  return v10;
}

const void *_CFDictionaryCopyValue(const __CFDictionary *a1, const void *a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, a2);
  CFDictionaryRef v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v3;
}

uint64_t AMFDRSealedDataCreateSealingRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v65 = 0;
  int v64 = 1;
  CFIndex v63 = 0;
  if (!a1)
  {
    CFStringRef v56 = @"sealedData is NULL";
    goto LABEL_119;
  }
  if (!a2)
  {
    CFStringRef v56 = @"amfdr is NULL";
    goto LABEL_119;
  }
  CFDictionaryRef v6 = *(const void **)(a1 + 32);
  if (!v6)
  {
    CFStringRef v56 = @"sealedData->dataClassArray is NULL";
    goto LABEL_119;
  }
  if (!*(void *)(a1 + 40))
  {
    CFStringRef v56 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_119;
  }
  if (!*(void *)(a1 + 64))
  {
    CFStringRef v56 = @"sealedData->dataArray is NULL";
    goto LABEL_119;
  }
  if (!*(void *)(a1 + 80))
  {
    CFStringRef v56 = @"sealedData->sealedDataInstance is NULL";
    goto LABEL_119;
  }
  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 != CFArrayGetTypeID())
  {
    CFStringRef v56 = @"sealedData->dataClassArray is not a CFArray";
    goto LABEL_119;
  }
  BOOL v8 = *(const void **)(a1 + 40);
  if (!v8 || (CFTypeID v9 = CFGetTypeID(v8), v9 != CFArrayGetTypeID()))
  {
    CFStringRef v56 = @"sealedData->dataInstanceArray is not a CFArray";
LABEL_119:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", v56, v58);
LABEL_120:
    uint64_t v52 = 0;
    CFMutableDictionaryRef Mutable = 0;
LABEL_121:
    int v23 = 0;
LABEL_122:
    BOOL v25 = 0;
LABEL_123:
    CFDataRef v48 = 0;
    CFIndex v27 = 0;
    goto LABEL_79;
  }
  uint64_t v10 = *(const void **)(a1 + 64);
  if (!v10 || (CFTypeID v11 = CFGetTypeID(v10), v11 != CFArrayGetTypeID()))
  {
    CFStringRef v56 = @"sealedData->dataArray is not a CFArray";
    goto LABEL_119;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  CFIndex v13 = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  CFIndex v14 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  if (Count != v13)
  {
    char v58 = v14;
    CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
    CFStringRef v56 = @"dataClassArray length (%ld) does not match dataInstanceArray (%ld)";
    goto LABEL_119;
  }
  if (v14 != CFArrayGetCount(*(CFArrayRef *)(a1 + 64)))
  {
    char v58 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
    CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
    CFStringRef v56 = @"dataClassArray length (%ld) does not match dataArray (%ld)";
    goto LABEL_119;
  }
  CFTypeID v15 = *(const void **)(a1 + 80);
  if (!v15 || (CFTypeID v16 = CFGetTypeID(v15), v16 != CFStringGetTypeID()))
  {
    CFStringRef v56 = @"sealedData->sealedDataInstance is not a CFStringRef";
    goto LABEL_119;
  }
  if ((AMFDRDataGetSigningVersion(a2, &v64) & 1) == 0)
  {
    CFStringRef v56 = @"AMFDRDataGetSigningVersion failed";
    goto LABEL_119;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"UseSikDataInstance");
  if ((_AMFDRSealedDataCreateSealingRequestInternal(a1, a2, *(__CFArray **)(a1 + 80), 0, 0, 0, (uint64_t)&v65, a3) & 1) == 0)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", @"_AMFDRSealedDataCreateSealingRequestInternal (Main) failed", v58);
    goto LABEL_120;
  }
  CFArrayRef v18 = *(const __CFArray **)(a1 + 136);
  if (!v18 || CFArrayGetCount(v18) <= 0)
  {
    CFArrayRef v19 = *(const __CFArray **)(a1 + 176);
    if (!v19 || CFArrayGetCount(v19) < 1)
    {
      CFIndex v51 = *(const void **)(a1 + 24);
      if (v51)
      {
        CFRelease(v51);
        *(void *)(a1 + 24) = 0;
      }
      CFTypeRef v50 = CFRetain(v65);
      CFMutableDictionaryRef Mutable = 0;
      int v23 = 0;
      BOOL v25 = 0;
      CFDataRef v48 = 0;
      CFIndex v27 = 0;
LABEL_78:
      *(void *)(a1 + 24) = v50;
      uint64_t v52 = 1;
      goto LABEL_79;
    }
  }
  CFAllocatorRef v20 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v20, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", @"mutableMultiSealingDataClasses is NULL", v58);
    uint64_t v52 = 0;
    goto LABEL_121;
  }
  CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
  int v23 = CFArrayCreateMutable(v22, 0, MEMORY[0x263EFFF70]);
  if (!v23)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", @"mutableMultiSealingDataInstances is NULL", v58);
    uint64_t v52 = 0;
    goto LABEL_122;
  }
  CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
  BOOL v25 = CFArrayCreateMutable(v24, 0, MEMORY[0x263EFFF70]);
  if (!v25)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", @"sealingRequestArray is NULL", v58);
    uint64_t v52 = 0;
    goto LABEL_123;
  }
  CFAllocatorRef v26 = CFGetAllocator((CFTypeRef)a2);
  CFIndex v27 = CFArrayCreateMutable(v26, 0, MEMORY[0x263EFFF70]);
  if (!v27)
  {
    CFStringRef v57 = @"metaDataOptionsArray is NULL";
LABEL_130:
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", v57, v58);
    uint64_t v52 = 0;
    CFDataRef v48 = 0;
    goto LABEL_79;
  }
  CFArrayInsertValueAtIndex(Mutable, 0, @"sreq");
  CFArrayInsertValueAtIndex(v23, 0, *(const void **)(a1 + 80));
  if (!AMFDRSealedDataCreateSealingMetadata((const void *)a1, (CFDictionaryRef *)a2, @"seal", *(void *)(a1 + 80), 0, (uint64_t *)&v63, a3)|| (uint64_t v28 = v63) == 0)
  {
    CFStringRef v57 = @"AMFDRSealedDataCreateSealingMetadata failed";
    goto LABEL_130;
  }
  CFArrayAppendValue(v27, v63);
  if (!v65)
  {
    uint64_t v52 = 0;
    CFDataRef v48 = 0;
    goto LABEL_82;
  }
  CFStringRef v59 = Value;
  CFArrayInsertValueAtIndex(v25, 0, v65);
  CFArrayRef v29 = *(const __CFArray **)(a1 + 136);
  CFMutableStringRef v61 = v25;
  CFArrayRef theArray = v23;
  if (v29)
  {
    CFIndex v30 = CFArrayGetCount(v29);
    if (v30 >= 1)
    {
      CFIndex v31 = v30;
      CFIndex v32 = 0;
      CFAllocatorRef v33 = v28;
      while (1)
      {
        if (v65)
        {
          CFRelease(v65);
          uint64_t v65 = 0;
        }
        if (v33)
        {
          CFRelease(v33);
          uint64_t v28 = 0;
          CFIndex v63 = 0;
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v32);
        CFStringRef v35 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), v32);
        if ((_AMFDRSealedDataCreateSealingRequestInternal(a1, a2, *(__CFArray **)(a1 + 80), 1, ValueAtIndex, v35, (uint64_t)&v65, a3) & 1) == 0)break; {
        if (v65)
        }
        {
          CFArrayAppendValue(Mutable, ValueAtIndex);
          CFArrayAppendValue(theArray, v35);
          CFArrayAppendValue(v61, v65);
          if (!AMFDRSealedDataCreateSealingMetadata((const void *)a1, (CFDictionaryRef *)a2, ValueAtIndex, (uint64_t)v35, 0, (uint64_t *)&v63, a3)|| (uint64_t v28 = v63) == 0)
          {
            CFStringRef v54 = @"AMFDRSealedDataCreateSealingMetadata failed";
            goto LABEL_97;
          }
          CFArrayAppendValue(v27, v63);
          CFAllocatorRef v33 = v28;
        }
        else
        {
          CFAllocatorRef v33 = 0;
        }
        if (v31 == ++v32) {
          goto LABEL_43;
        }
      }
      CFStringRef v54 = @"_AMFDRSealedDataCreateSealingRequestInternal (MultiSealing) failed";
LABEL_97:
      AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", v54, v58);
      uint64_t v52 = 0;
      CFDataRef v48 = 0;
      BOOL v25 = v61;
      int v23 = theArray;
      goto LABEL_79;
    }
  }
LABEL_43:
  CFErrorRef v60 = v27;
  CFArrayRef v36 = *(const __CFArray **)(a1 + 176);
  if (!v36) {
    goto LABEL_71;
  }
  CFIndex v37 = CFArrayGetCount(v36);
  if (v37 < 1) {
    goto LABEL_71;
  }
  CFIndex v38 = v37;
  AMFDRSetOption(a2, @"UseSikDataInstance", (const __CFString *)*MEMORY[0x263EFFB38]);
  CFStringRef v39 = AMFDRSealingMapCallMGCopyAnswer(@"UniqueDeviceID", 0);
  CFIndex v40 = 0;
  char v41 = Mutable;
  do
  {
    if (v65)
    {
      CFRelease(v65);
      uint64_t v65 = 0;
    }
    if (v28)
    {
      CFRelease(v28);
      CFIndex v63 = 0;
    }
    CFStringRef v42 = (__CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v40);
    CFArrayRef v43 = *(const __CFArray **)(a1 + 184);
    if (v43 && CFArrayGetCount(v43) >= 1) {
      CFStringRef v44 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 184), v40);
    }
    else {
      CFStringRef v44 = 0;
    }
    CFArrayRef v45 = *(const __CFArray **)(a1 + 192);
    if (v45
      && CFArrayGetCount(v45) >= 1
      && (CFStringRef v46 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 192), v40), v44)
      && v46)
    {
      char SealingRequestInternal = _AMFDRSealedDataCreateSealingRequestInternal(a1, a2, v42, 2, v44, v46, (uint64_t)&v65, a3);
      CFMutableDictionaryRef Mutable = v41;
      if ((SealingRequestInternal & 1) == 0)
      {
        if (v39) {
LABEL_105:
        }
          CFRelease(v39);
        CFStringRef v55 = @"_AMFDRSealedDataCreateSealingRequestInternal (MinimalSealing) failed";
LABEL_107:
        AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", v55, v58);
LABEL_108:
        uint64_t v52 = 0;
        CFDataRef v48 = 0;
        BOOL v25 = v61;
        int v23 = theArray;
        CFIndex v27 = v60;
        goto LABEL_79;
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = v41;
      if (!v39)
      {
        AMFDRErrorPushInternal(a3, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", @"UniqueDeviceID is NULL", v58);
        goto LABEL_108;
      }
      if ((_AMFDRSealedDataCreateSealingRequestInternal(a1, a2, v42, 2, @"scrt", v39, (uint64_t)&v65, a3) & 1) == 0) {
        goto LABEL_105;
      }
    }
    if (v65)
    {
      CFArrayAppendValue(Mutable, @"minimal-manifest");
      CFArrayAppendValue(theArray, v42);
      CFArrayAppendValue(v61, v65);
      if (!AMFDRSealedDataCreateSealingMetadata((const void *)a1, (CFDictionaryRef *)a2, @"minimal-manifest", (uint64_t)v42, 1, (uint64_t *)&v63, a3)|| (uint64_t v28 = v63) == 0)
      {
        if (v39) {
          CFRelease(v39);
        }
        CFStringRef v55 = @"AMFDRSealedDataCreateSealingMetadata failed";
        goto LABEL_107;
      }
      CFArrayAppendValue(v60, v63);
    }
    else
    {
      uint64_t v28 = 0;
    }
    ++v40;
  }
  while (v38 != v40);
  if (v39) {
    CFRelease(v39);
  }
  AMFDRSetOption(a2, @"UseSikDataInstance", v59);
LABEL_71:
  BOOL v25 = v61;
  int v23 = theArray;
  CFIndex v27 = v60;
  CFDataRef v48 = AMFDRDataHTTPCreateMultiRequest((__CFString *)a2, kAMFDRHTTPMultiRequestActionSealing, Mutable, theArray, v61, 0, v60, 0, a3);
  if (v48)
  {
    CFArrayRef v49 = *(const void **)(a1 + 24);
    if (v49)
    {
      CFRelease(v49);
      *(void *)(a1 + 24) = 0;
    }
    CFTypeRef v50 = CFRetain(v48);
    goto LABEL_78;
  }
  AMFDRErrorPushInternal(a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingRequest", @"AMFDRDataHTTPCreateMultiRequest failed", v58);
  uint64_t v52 = 0;
LABEL_79:
  if (v65)
  {
    CFRelease(v65);
    uint64_t v65 = 0;
  }
  if (v25) {
LABEL_82:
  }
    CFRelease(v25);
  if (v48) {
    CFRelease(v48);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v63)
  {
    CFRelease(v63);
    CFIndex v63 = 0;
  }
  if (v27) {
    CFRelease(v27);
  }
  return v52;
}

uint64_t AMFDRSealedDataHTTPSign(uint64_t a1, CFDictionaryRef *a2, CFTypeRef *a3)
{
  if (!a1)
  {
    CFStringRef v28 = @"sealedData is NULL";
LABEL_30:
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataHTTPSign", v28, v29);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v28 = @"amfdrRemote is NULL";
    goto LABEL_30;
  }
  CFArrayRef v6 = *(const __CFArray **)(a1 + 136);
  if (!v6 || !CFArrayGetCount(v6))
  {
    CFArrayRef v7 = *(const __CFArray **)(a1 + 176);
    if (!v7 || !CFArrayGetCount(v7))
    {
      CFAllocatorRef v26 = *(const void **)(a1 + 16);
      if (v26)
      {
        CFRelease(v26);
        *(void *)(a1 + 16) = 0;
      }
      if (AMFDRDataHTTPSign(a2, *(const void **)(a1 + 80), *(const __CFData **)(a1 + 24), (CFTypeRef *)(a1 + 16), a3)) {
        return 1;
      }
      AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataHTTPSign", @"AMFDRDataHTTPSign(amfdrRemote) failed.", v29);
      return 0;
    }
  }
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataHTTPSign", @"mutableMultiSealingDataClasses is NULL", v29);
    return 0;
  }
  CFMutableArrayRef v10 = Mutable;
  CFAllocatorRef v11 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef v12 = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
  if (!v12)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataHTTPSign", @"mutableMultiSealingDataInstances is NULL", v29);
    CFRelease(v10);
    return 0;
  }
  CFIndex v13 = v12;
  CFArrayInsertValueAtIndex(v10, 0, @"sreq");
  CFArrayInsertValueAtIndex(v13, 0, *(const void **)(a1 + 80));
  CFArrayRef v14 = *(const __CFArray **)(a1 + 136);
  if (v14)
  {
    v30.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
    v30.CFIndex location = 0;
    CFArrayAppendArray(v10, v14, v30);
    CFArrayRef v15 = *(const __CFArray **)(a1 + 144);
    v31.CFIndex length = CFArrayGetCount(v15);
    v31.CFIndex location = 0;
    CFArrayAppendArray(v13, v15, v31);
  }
  CFArrayRef v16 = *(const __CFArray **)(a1 + 176);
  if (v16 && CFArrayGetCount(v16) >= 1)
  {
    CFIndex v17 = 0;
    do
    {
      CFArrayAppendValue(v10, @"minimal-manifest");
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v17);
      CFArrayAppendValue(v13, ValueAtIndex);
      ++v17;
    }
    while (v17 < CFArrayGetCount(*(CFArrayRef *)(a1 + 176)));
  }
  CFArrayRef v19 = *(const void **)(a1 + 152);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 152) = 0;
  }
  if (AMFDRDataHTTPMultiSign((uint64_t)a2, v10, v13, *(const __CFData **)(a1 + 24), (CFTypeRef *)(a1 + 152), a3))
  {
    CFAllocatorRef v20 = CFGetAllocator(a2);
    CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v20, @"sreq", *(void *)(a1 + 80));
    if (FullKey)
    {
      CFStringRef v22 = FullKey;
      int v23 = *(const void **)(a1 + 16);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(a1 + 16) = 0;
      }
      CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 152), v22);
      *(void *)(a1 + 16) = CFRetain(Value);
      CFRelease(v22);
      uint64_t v25 = 1;
      goto LABEL_22;
    }
    AMFDRErrorPushInternal((uint64_t)a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataHTTPSign", @"failed to create data instance string", v29);
  }
  else
  {
    AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataHTTPSign", @"AMFDRDataHTTPMultiSign(amfdrRemote) failed.", v29);
  }
  uint64_t v25 = 0;
LABEL_22:
  CFRelease(v10);
  CFRelease(v13);
  return v25;
}

uint64_t _AMFDRSealedDataExportExistingData(CFDictionaryRef *a1, CFArrayRef *a2, CFTypeRef *a3)
{
  void context[2] = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", @"amfdr is NULL", v32);
    return 0;
  }
  if (!a1[2])
  {
    CFStringRef v30 = @"amfdr->optionsDict is NULL";
LABEL_57:
    AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", v30, v32);
    goto LABEL_58;
  }
  if (!a2)
  {
    CFStringRef v30 = @"sealedData is NULL";
    goto LABEL_57;
  }
  CFArrayRef v6 = a2[4];
  if (!v6)
  {
    CFStringRef v30 = @"sealedData->dataClassArray is NULL";
    goto LABEL_57;
  }
  if (!a2[5])
  {
    CFStringRef v30 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_57;
  }
  if (!a2[8])
  {
    CFStringRef v30 = @"sealedData->dataArray is NULL";
    goto LABEL_57;
  }
  CFIndex Count = CFArrayGetCount(v6);
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1[2], @"EnableMultiRequest");
  if (Value && !CFBooleanGetValue(Value))
  {
    CFAllocatorRef v16 = CFGetAllocator(a2);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFArrayRef v14 = Mutable;
      CFAllocatorRef v11 = 0;
      CFMutableArrayRef v13 = 0;
      int v15 = 0;
      goto LABEL_14;
    }
    CFStringRef v31 = @"exportDict is NULL";
  }
  else
  {
    CFAllocatorRef v9 = CFGetAllocator(a1);
    CFMutableArrayRef v10 = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70]);
    if (v10)
    {
      CFAllocatorRef v11 = v10;
      CFAllocatorRef v12 = CFGetAllocator(a1);
      CFMutableArrayRef v13 = CFArrayCreateMutable(v12, 0, MEMORY[0x263EFFF70]);
      if (!v13)
      {
        AMFDRErrorPushInternal((uint64_t)a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", @"dataInstancesToExport is NULL", v32);
        CFArrayRef v18 = 0;
        CFMutableStringRef v20 = 0;
        CFArrayRef v14 = 0;
        uint64_t v27 = 0;
        goto LABEL_34;
      }
      CFArrayRef v14 = 0;
      int v15 = 1;
LABEL_14:
      CFArrayRef v18 = (__CFString *)AMFDRCreateCopy((uint64_t)a1);
      if (!v18)
      {
        AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", @"cannot create a separate amfdr object for data export", v32);
        uint64_t v27 = 0;
        CFMutableStringRef v20 = 0;
        goto LABEL_33;
      }
      CFAllocatorRef v19 = CFGetAllocator(a2);
      CFMutableStringRef v20 = CFStringCreateMutable(v19, 0);
      if (v20)
      {
        CFArrayRef theArray = v13;
        CFDictionaryRef theDict = v14;
        CFDictionaryRef v21 = v11;
        if (Count >= 1)
        {
          CFIndex v22 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2[4], v22);
            if (!ValueAtIndex) {
              break;
            }
            CFStringRef v24 = ValueAtIndex;
            CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex(a2[5], v22);
            if (!v25)
            {
              CFStringRef v29 = @"dataInstance is NULL";
              goto LABEL_48;
            }
            CFStringRef v26 = v25;
            if (CFArrayGetValueAtIndex(a2[8], v22))
            {
              if ((AMFDRDataAppendPermissionsString(v18, 3u, v24, v26, v20) & 1) == 0)
              {
                AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", @"AMFDRDataAppendPermissionsString failed", v32);
                goto LABEL_50;
              }
              if (v15)
              {
                CFArrayAppendValue(v21, v24);
                CFArrayAppendValue(theArray, v26);
              }
              else
              {
                CFDictionaryAddValue(theDict, v24, v26);
              }
            }
            else
            {
              AMSupportLogInternal();
            }
            if (Count == ++v22) {
              goto LABEL_27;
            }
          }
          CFStringRef v29 = @"dataClass is NULL";
LABEL_48:
          AMFDRErrorPushInternal((uint64_t)a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", v29, v32);
          goto LABEL_50;
        }
LABEL_27:
        AMFDRSetOption((uint64_t)v18, @"Permissions", v20);
        AMFDRSetOption((uint64_t)v18, @"OrganizationalUnit", @"Devices - Stations");
        AMFDRSetOption((uint64_t)v18, @"PersistCertificate", (const __CFString *)*MEMORY[0x263EFFB38]);
        if ((AMFDRPermissionsRequest((uint64_t)v18, a3) & 1) == 0)
        {
          AMFDRErrorPushInternal((uint64_t)a3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", @"Permissions request failed.", v32);
LABEL_50:
          uint64_t v27 = 0;
          CFAllocatorRef v11 = v21;
          CFMutableArrayRef v13 = theArray;
          CFArrayRef v14 = theDict;
LABEL_33:
          if (!v11)
          {
LABEL_35:
            if (v13) {
              CFRelease(v13);
            }
            if (v14) {
              CFRelease(v14);
            }
            if (v20) {
              CFRelease(v20);
            }
            goto LABEL_41;
          }
LABEL_34:
          CFRelease(v11);
          goto LABEL_35;
        }
        CFAllocatorRef v11 = v21;
        if (v15)
        {
          CFMutableArrayRef v13 = theArray;
          CFArrayRef v14 = theDict;
          if ((AMFDRDataMultiExport((uint64_t)v18) & 1) == 0)
          {
            AMSupportLogInternal();
LABEL_65:
            uint64_t v27 = 0;
            goto LABEL_33;
          }
        }
        else
        {
          context[0] = v18;
          context[1] = &cf;
          CFArrayRef v14 = theDict;
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_exportDataInstances, context);
          CFMutableArrayRef v13 = theArray;
          if (cf)
          {
            AMFDRErrorPushInternal((uint64_t)a3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", @"_exportDataInstances failed with error %@", (char)cf);
            goto LABEL_65;
          }
        }
        uint64_t v27 = 1;
        goto LABEL_33;
      }
      AMFDRErrorPushInternal((uint64_t)a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", @"permStr is NULL", v32);
      goto LABEL_65;
    }
    CFStringRef v31 = @"dataClassesToExport is NULL";
  }
  AMFDRErrorPushInternal((uint64_t)a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataExportExistingData", v31, v32);
LABEL_58:
  uint64_t v27 = 0;
  CFArrayRef v18 = 0;
LABEL_41:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  return v27;
}

BOOL AMFDRSealedDataRestoreOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2) {
      AMFDRSetOptions(a2, *(CFTypeRef *)(a1 + 112));
    }
    if (a3) {
      AMFDRSetOptions(a3, *(CFTypeRef *)(a1 + 120));
    }
    uint64_t v5 = *(const void **)(a1 + 112);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 112) = 0;
    }
    CFArrayRef v6 = *(const void **)(a1 + 120);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 120) = 0;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
  return a1 != 0;
}

uint64_t _AMFDRSealedDataSealingPropertyCheck(const __CFString *a1, const __CFString *cf, uint64_t a3)
{
  CFDataRef data = 0;
  uint64_t v5 = *(const void **)a3;
  CFArrayRef v6 = *(const __CFArray **)(a3 + 8);
  CFArrayRef v8 = *(const __CFArray **)(a3 + 16);
  CFArrayRef v7 = *(__CFArray **)(a3 + 24);
  if (cf && (CFTypeID v9 = CFGetTypeID(cf), v9 == CFNumberGetTypeID())) {
    char v10 = AMFDRDataCopySealingManifestIntegerProperty(v5, a1, (uint64_t)&data);
  }
  else {
    char v10 = AMFDRDataCopySealingManifestProperty(v5, a1, (uint64_t)&data);
  }
  char v11 = v10;
  if (v6)
  {
    v20.CFIndex length = CFArrayGetCount(v6);
    v20.CFIndex location = 0;
    LODWORD(v6) = CFArrayContainsValue(v6, v20, a1) != 0;
  }
  if (v8)
  {
    v21.CFIndex length = CFArrayGetCount(v8);
    v21.CFIndex location = 0;
    BOOL v12 = CFArrayContainsValue(v8, v21, a1) != 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  CFDataRef v13 = data;
  if (data) {
    char v14 = v11;
  }
  else {
    char v14 = 0;
  }
  if (v14)
  {
    if (cf)
    {
      CFTypeID v15 = CFGetTypeID(cf);
      if (v15 == CFStringGetTypeID())
      {
        CFAllocatorRef v16 = CFGetAllocator(v5);
        CFStringRef v17 = CFStringCreateFromExternalRepresentation(v16, data, 0x8000100u);
        if ((!v17 || CFStringCompare(v17, cf, 0)) && (v6 | v12) == 1) {
          goto LABEL_19;
        }
LABEL_27:
        AMSupportLogInternal();
        goto LABEL_28;
      }
      CFDataRef v13 = data;
    }
    if (CFEqual(v13, cf) || (v6 | v12) != 1) {
      goto LABEL_27;
    }
  }
  else if ((v6 | v12) != 1)
  {
    goto LABEL_27;
  }
LABEL_19:
  AMSupportLogInternal();
  CFArrayAppendValue(v7, a1);
LABEL_28:
  AMSupportSafeRelease();
  return AMSupportSafeRelease();
}

uint64_t _AMFDRSealedDataCreateSealingRequestInternal(uint64_t a1, uint64_t a2, __CFArray *a3, int a4, const __CFString *a5, const __CFString *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  CFTypeRef v65 = 0;
  CFTypeRef cf = 0;
  int v64 = 1;
  CFIndex v63 = 0;
  if (!a1)
  {
    CFStringRef v53 = @"sealedData is NULL";
    goto LABEL_100;
  }
  uint64_t v8 = a2;
  if (!a2)
  {
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"amfdr is NULL", v55);
LABEL_102:
    CFMutableDictionaryRef Mutable = 0;
LABEL_103:
    a3 = 0;
    goto LABEL_104;
  }
  char v10 = *(const void **)(a1 + 32);
  if (!v10)
  {
    CFStringRef v53 = @"sealedData->dataClassArray is NULL";
    goto LABEL_100;
  }
  if (!*(void *)(a1 + 40))
  {
    CFStringRef v53 = @"sealedData->dataInstanceArray is NULL";
    goto LABEL_100;
  }
  if (!*(void *)(a1 + 64))
  {
    CFStringRef v53 = @"sealedData->dataArray is NULL";
    goto LABEL_100;
  }
  if (!*(void *)(a1 + 80))
  {
    CFStringRef v53 = @"sealedData->sealedDataInstance is NULL";
    goto LABEL_100;
  }
  CFTypeID v14 = CFGetTypeID(v10);
  if (v14 != CFArrayGetTypeID())
  {
    CFStringRef v53 = @"sealedData->dataClassArray is not a CFArray";
    goto LABEL_100;
  }
  CFTypeID v15 = *(const void **)(a1 + 40);
  if (!v15 || (CFTypeID v16 = CFGetTypeID(v15), v16 != CFArrayGetTypeID()))
  {
    CFStringRef v53 = @"sealedData->dataInstanceArray is not a CFArray";
LABEL_100:
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", v53, v55);
    goto LABEL_101;
  }
  CFStringRef v17 = *(const void **)(a1 + 64);
  if (!v17 || (CFTypeID v18 = CFGetTypeID(v17), v18 != CFArrayGetTypeID()))
  {
    CFStringRef v53 = @"sealedData->dataArray is not a CFArray";
    goto LABEL_100;
  }
  CFStringRef v62 = a5;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  CFIndex v20 = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  CFIndex v21 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  if (Count != v20)
  {
    CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"dataClassArray length (%ld) does not match dataInstanceArray (%ld)", v21);
LABEL_101:
    uint64_t v8 = 0;
    goto LABEL_102;
  }
  if (v21 != CFArrayGetCount(*(CFArrayRef *)(a1 + 64)))
  {
    char v54 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
    CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"dataClassArray length (%ld) does not match dataArray (%ld)", v54);
    goto LABEL_101;
  }
  CFIndex v22 = *(const void **)(a1 + 80);
  if (!v22 || (CFTypeID v23 = CFGetTypeID(v22), v23 != CFStringGetTypeID()))
  {
    CFStringRef v53 = @"sealedData->sealedDataInstance is not a CFStringRef";
    goto LABEL_100;
  }
  if (!a3)
  {
    AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"sreqDataInstance is NULL", v55);
    uint64_t v8 = 0;
    CFMutableDictionaryRef Mutable = 0;
LABEL_104:
    CFStringRef FullKey = 0;
    CFDataRef v58 = 0;
    CFStringRef InstanceString = 0;
    goto LABEL_59;
  }
  if ((AMFDRDataGetSigningVersion(v8, &v64) & 1) == 0)
  {
    CFStringRef v53 = @"AMFDRDataGetSigningVersion failed";
    goto LABEL_100;
  }
  CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v24, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"extraProperties is NULL", v55);
    uint64_t v8 = 0;
    goto LABEL_103;
  }
  CFTypeRef v61 = (CFTypeRef)v8;
  CFStringRef InstanceString = AMFDRDataCreateInstanceString((__CFString *)v8, 0, a3);
  if (!InstanceString)
  {
    AMFDRErrorPushInternal(a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"sreqDataInstanceStr is NULL", v55);
LABEL_108:
    uint64_t v8 = 0;
    a3 = 0;
    CFStringRef FullKey = 0;
    CFDataRef v58 = 0;
    goto LABEL_59;
  }
  CFAllocatorRef v27 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v27, InstanceString, 0x8000100u, 0x5Fu);
  if (!ExternalRepresentation)
  {
    AMFDRErrorPushInternal(a8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"sreqDataInstanceData is NULL", v55);
    goto LABEL_108;
  }
  CFStringRef v57 = InstanceString;
  CFDataRef v29 = ExternalRepresentation;
  CFDataGetBytePtr(ExternalRepresentation);
  CFDataRef v58 = v29;
  CFDataGetLength(v29);
  CFAllocatorRef v30 = CFGetAllocator((CFTypeRef)a1);
  CFArrayRef theArray = CFArrayCreateMutable(v30, 0, MEMORY[0x263EFFF70]);
  CFIndex v31 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  if (v31 >= 1)
  {
    CFIndex v32 = v31;
    CFIndex v33 = 0;
    CFStringRef FullKey = 0;
    CFStringRef v35 = v62;
    while (1)
    {
      if (FullKey) {
        CFRelease(FullKey);
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v65)
      {
        CFRelease(v65);
        CFTypeRef v65 = 0;
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v33);
      CFStringRef v37 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v33);
      if (v35 && CFStringCompare(v35, ValueAtIndex, 0) || a6 && CFStringCompare(a6, v37, 0))
      {
        CFStringRef FullKey = 0;
      }
      else
      {
        CFIndex v38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v33);
        unint64_t v95 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v93 = v39;
        long long v94 = v39;
        long long v91 = v39;
        long long v92 = v39;
        long long v89 = v39;
        long long v90 = v39;
        long long v87 = v39;
        long long v88 = v39;
        long long v85 = v39;
        long long v86 = v39;
        long long v83 = v39;
        long long v84 = v39;
        long long v81 = v39;
        long long v82 = v39;
        long long v79 = v39;
        long long v80 = v39;
        long long v77 = v39;
        long long v78 = v39;
        long long v75 = v39;
        long long v76 = v39;
        long long v73 = v39;
        long long v74 = v39;
        long long v71 = v39;
        long long v72 = v39;
        long long v70 = v39;
        long long v68 = v39;
        long long v69 = v39;
        *(_OWORD *)CFStringRef v67 = v39;
        if (!ValueAtIndex)
        {
          CFStringRef v50 = @"dataClassStr is NULL";
LABEL_76:
          AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", v50, v55);
          CFStringRef FullKey = 0;
          goto LABEL_85;
        }
        if (!v37)
        {
          CFStringRef v50 = @"dataInstanceStr is NULL";
          goto LABEL_76;
        }
        CFIndex v40 = v38;
        CFAllocatorRef v41 = CFGetAllocator((CFTypeRef)a1);
        CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v41, (uint64_t)ValueAtIndex, (uint64_t)v37);
        if (!FullKey)
        {
          AMFDRErrorPushInternal(a8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"failed to create data instance string", v55);
          goto LABEL_85;
        }
        CFArrayRef v42 = *(const __CFArray **)(a1 + 296);
        if (!v42)
        {
          CFStringRef v35 = v62;
          if (v40)
          {
LABEL_42:
            CFTypeID v44 = CFGetTypeID(ValueAtIndex);
            if (v44 == CFStringGetTypeID())
            {
              CFTypeID v45 = CFGetTypeID(v37);
              if (v45 == CFStringGetTypeID())
              {
                CFTypeID v46 = CFGetTypeID(v40);
                if (v46 == CFDataGetTypeID())
                {
                  CFAllocatorRef v47 = CFGetAllocator(v61);
                  if (AMFDRDataStripExtraManifest(v47, (CFDataRef)v40, &cf, &v65, a8))
                  {
                    CFDataGetBytePtr((CFDataRef)cf);
                    CFDataGetLength((CFDataRef)cf);
                    if (Img4DecodeInit())
                    {
                      CFStringRef v52 = @"FDR failed to decode Data img4";
                    }
                    else
                    {
                      Img4DecodeGetManifest();
                      CFStringRef v52 = @"FDR failed to get manifest from Data img4";
                    }
                    AMFDRErrorPushInternal(a8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", v52, v55);
                  }
                  else
                  {
                    AMFDRErrorPushInternal(a8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", @"AMFDRDataStripExtraManifest failed", v55);
                  }
                  goto LABEL_85;
                }
                CFStringRef v51 = @"payload is not CFDataRef";
              }
              else
              {
                CFStringRef v51 = @"dataInstance is not CFStringRef";
              }
            }
            else
            {
              CFStringRef v51 = @"dataClass is not CFStringRef";
            }
            AMFDRErrorPushInternal(a8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", v51, v55);
LABEL_85:
            uint64_t v8 = 0;
            a3 = theArray;
            CFStringRef InstanceString = v57;
            goto LABEL_59;
          }
LABEL_48:
          AMSupportLogInternal();
          goto LABEL_49;
        }
        v97.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(a1 + 296));
        v97.CFIndex location = 0;
        int v43 = CFArrayContainsValue(v42, v97, ValueAtIndex);
        CFStringRef v35 = v62;
        if (v40) {
          goto LABEL_42;
        }
        if (!v43) {
          goto LABEL_48;
        }
        CFArrayAppendValue(theArray, FullKey);
      }
LABEL_49:
      if (v32 == ++v33)
      {
        if (a4)
        {
          a3 = theArray;
          CFStringRef InstanceString = v57;
          goto LABEL_53;
        }
        a3 = theArray;
        CFStringRef InstanceString = v57;
LABEL_57:
        CFStringRef format = @"Found no data to seal over";
LABEL_58:
        AMFDRErrorPushInternal(a8, 7, 0, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRSealedDataCreateSealingRequestInternal", format, v55);
        uint64_t v8 = 0;
        goto LABEL_59;
      }
    }
  }
  CFStringRef FullKey = 0;
  a3 = theArray;
  if (!a4) {
    goto LABEL_57;
  }
LABEL_53:
  if (!AMFDRAllowIncompleteData((uint64_t)v61))
  {
    CFStringRef format = @"Missing data to create multi sealing request and incomplete data is not allowed";
    goto LABEL_58;
  }
  AMSupportLogInternal();
  uint64_t v8 = 1;
LABEL_59:
  if (InstanceString) {
    CFRelease(InstanceString);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (FullKey) {
    CFRelease(FullKey);
  }
  if (v65)
  {
    CFRelease(v65);
    CFTypeRef v65 = 0;
  }
  if (a3) {
    CFRelease(a3);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  AMFDREncodeMetadataDestroy(&v63);
  return v8;
}

uint64_t AMFDRSealedDataCreateSealingMetadata(const void *a1, CFDictionaryRef *cf, const __CFString *a3, uint64_t a4, int a5, uint64_t *a6, uint64_t a7)
{
  if (!cf)
  {
    CFStringRef v23 = @"amfdr is NULL";
LABEL_16:
    AMFDRErrorPushInternal(a7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingMetadata", v23, v24);
    return 0;
  }
  if (!a3 || !a4)
  {
    CFStringRef v23 = @"dataClass/dataInstance is NULL";
    goto LABEL_16;
  }
  CFAllocatorRef v14 = CFGetAllocator(cf);
  CFStringRef v15 = CFStringCreateWithFormat(v14, 0, @"%@-%@", a3, a4);
  if (!v15)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingMetadata", @"innerHeaderKey is NULL", v24);
    return 0;
  }
  CFStringRef v16 = v15;
  CFAllocatorRef v17 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v17, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataCreateSealingMetadata", @"mutableMetaDataDict is NULL", v24);
    CFRelease(v16);
    return 0;
  }
  CFAllocatorRef v19 = Mutable;
  if (a5) {
    CFDictionarySetValue(Mutable, @"x-fdr-minimal-seal", @"true");
  }
  if (CFStringCompare(a3, @"seal", 0)) {
    CFDictionarySetValue(v19, @"x-fdr-seal-manifest-version", @"1");
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(cf[2], @"MultiSealingMetadata");
  if (Value)
  {
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(Value, v16);
    if (v21) {
      _CFDictionaryAddDictionary(v19, v21);
    }
  }
  *a6 = AMSupportSafeRetain();
  CFRelease(v16);
  CFRelease(v19);
  return 1;
}

uint64_t AMFDRSealedDataDelete(CFArrayRef *a1, const __CFString *a2, const __CFString *a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v12 = @"sealedData is NULL";
LABEL_15:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataDelete", v12, v13);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v12 = @"dataClass is NULL";
    goto LABEL_15;
  }
  if (!a3)
  {
    CFStringRef v12 = @"dataInstance is NULL";
    goto LABEL_15;
  }
  AMSupportLogInternal();
  if (CFArrayGetCount(a1[8]) < 1)
  {
LABEL_9:
    AMFDRErrorPushInternal(a4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataDelete", @"failed to find %@-%@ from sealedData to delete", (char)a2);
    return 0;
  }
  CFIndex v8 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1[4], v8);
    CFStringRef v10 = (const __CFString *)CFArrayGetValueAtIndex(a1[5], v8);
    if (CFEqual(a2, ValueAtIndex)
      && CFEqual(a3, v10))
    {
      break;
    }
    if (++v8 >= CFArrayGetCount(a1[8])) {
      goto LABEL_9;
    }
  }
  CFArraySetValueAtIndex(a1[8], v8, 0);
  return 1;
}

uint64_t AMFDRSealedDataGetSealingManifest(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return *(void *)(a1 + 16);
  }
  AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataGetSealingManifest", @"sealedData is NULL", vars0);
  return 0;
}

BOOL AMFDRSealedDataClearSealingManifest(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    CFDictionaryRef v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 16) = 0;
    }
  }
  else
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataClearSealingManifest", @"sealedData is NULL", v5);
  }
  return a1 != 0;
}

uint64_t AMFDRSealedDataGetSealingRequest(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return *(void *)(a1 + 24);
  }
  AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSealedDataGetSealingRequest", @"sealedData is NULL", vars0);
  return 0;
}

void _getDataClassesAndInstances(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  CFTypeRef v5 = *(CFTypeRef *)a3;
  CFDictionaryRef v4 = *(const __CFDictionary **)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  CFAllocatorRef v7 = CFGetAllocator(*(CFTypeRef *)a3);
  if (AMFDRDataLocalDecomposeFullKey(v7, a1, &v15, &v14))
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v4, v15);
    if (Value)
    {
      CFTypeID v9 = Value;
      CFTypeID v10 = CFGetTypeID(Value);
      if (v10 == CFArrayGetTypeID())
      {
        CFMutableDictionaryRef Mutable = (__CFArray *)CFRetain(v9);
LABEL_7:
        CFArrayAppendValue(Mutable, v14);
        goto LABEL_8;
      }
    }
    CFAllocatorRef v12 = CFGetAllocator(v5);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      CFDictionarySetValue(v4, v15, Mutable);
      goto LABEL_7;
    }
    AMFDRErrorPushInternal(v6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_getDataClassesAndInstances", @"multiDataInstances is NULL", v13);
  }
  else
  {
    AMFDRErrorPushInternal(v6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_getDataClassesAndInstances", @"Cannot add data class and instance from %@ to dictionary", (char)a1);
    CFMutableDictionaryRef Mutable = 0;
  }
LABEL_8:
  if (v15)
  {
    CFRelease(v15);
    CFTypeRef v15 = 0;
  }
  if (v14)
  {
    CFRelease(v14);
    CFTypeRef v14 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

CFIndex _deleteUnverifiedDataInstance(char a1, CFArrayRef theArray, uint64_t *a3)
{
  uint64_t v6 = *a3;
  CFTypeRef v5 = (__CFError **)a3[1];
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    CFIndex v8 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(theArray, v8);
      AMSupportLogInternal();
      if ((AMFDRDataDelete(v6) & 1) == 0) {
        break;
      }
      ++v8;
      CFIndex result = CFArrayGetCount(theArray);
      if (v8 >= result) {
        return result;
      }
    }
    AMFDRGetTrustError(*v5);
    return AMFDRErrorPushInternal((uint64_t)v5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_deleteUnverifiedDataInstance", @"_deleteUnverifiedDataInstance failed when deleting data %@-%@ with error 0x%016llX.", a1);
  }
  return result;
}

double _AMFDRSealedDataFinalize(void *a1)
{
  if (!a1) {
    _AMFDRSealedDataFinalize_cold_1();
  }
  CFDictionaryRef v3 = a1 + 2;
  CFArrayRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    *CFDictionaryRef v3 = 0;
  }
  CFDictionaryRef v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  CFTypeRef v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  uint64_t v6 = (const void *)a1[5];
  if (v6)
  {
    CFRelease(v6);
    a1[5] = 0;
  }
  CFAllocatorRef v7 = (const void *)a1[8];
  if (v7)
  {
    CFRelease(v7);
    a1[8] = 0;
  }
  CFIndex v8 = (const void *)a1[9];
  if (v8)
  {
    CFRelease(v8);
    a1[9] = 0;
  }
  CFTypeID v9 = (const void *)a1[10];
  if (v9)
  {
    CFRelease(v9);
    a1[10] = 0;
  }
  CFTypeID v10 = (const void *)a1[17];
  if (v10)
  {
    CFRelease(v10);
    a1[17] = 0;
  }
  char v11 = (const void *)a1[18];
  if (v11)
  {
    CFRelease(v11);
    a1[18] = 0;
  }
  CFAllocatorRef v12 = (const void *)a1[19];
  if (v12)
  {
    CFRelease(v12);
    a1[19] = 0;
  }
  char v13 = (const void *)a1[11];
  if (v13)
  {
    CFRelease(v13);
    a1[11] = 0;
  }
  CFTypeRef v14 = (const void *)a1[12];
  if (v14)
  {
    CFRelease(v14);
    a1[12] = 0;
  }
  CFTypeRef v15 = (const void *)a1[13];
  if (v15)
  {
    CFRelease(v15);
    a1[13] = 0;
  }
  CFStringRef v16 = (const void *)a1[20];
  if (v16)
  {
    CFRelease(v16);
    a1[20] = 0;
  }
  CFAllocatorRef v17 = (const void *)a1[22];
  if (v17)
  {
    CFRelease(v17);
    a1[22] = 0;
  }
  CFTypeID v18 = (const void *)a1[23];
  if (v18)
  {
    CFRelease(v18);
    a1[23] = 0;
  }
  CFAllocatorRef v19 = (const void *)a1[24];
  if (v19)
  {
    CFRelease(v19);
    a1[24] = 0;
  }
  CFIndex v20 = (const void *)a1[25];
  if (v20)
  {
    CFRelease(v20);
    a1[25] = 0;
  }
  CFDictionaryRef v21 = (const void *)a1[30];
  if (v21)
  {
    CFRelease(v21);
    a1[30] = 0;
  }
  CFIndex v22 = (const void *)a1[31];
  if (v22)
  {
    CFRelease(v22);
    a1[31] = 0;
  }
  CFStringRef v23 = (const void *)a1[32];
  if (v23)
  {
    CFRelease(v23);
    a1[32] = 0;
  }
  char v24 = (const void *)a1[33];
  if (v24)
  {
    CFRelease(v24);
    a1[33] = 0;
  }
  CFStringRef v25 = (const void *)a1[34];
  if (v25)
  {
    CFRelease(v25);
    a1[34] = 0;
  }
  CFStringRef v26 = (const void *)a1[35];
  if (v26)
  {
    CFRelease(v26);
    a1[35] = 0;
  }
  CFAllocatorRef v27 = (const void *)a1[36];
  if (v27)
  {
    CFRelease(v27);
    a1[36] = 0;
  }
  CFStringRef v28 = (const void *)a1[37];
  if (v28)
  {
    CFRelease(v28);
    a1[37] = 0;
  }
  CFDataRef v29 = (const void *)a1[6];
  if (v29)
  {
    CFRelease(v29);
    a1[6] = 0;
  }
  CFAllocatorRef v30 = (const void *)a1[7];
  if (v30)
  {
    CFRelease(v30);
    a1[7] = 0;
  }
  CFIndex v31 = (const void *)a1[16];
  if (v31)
  {
    CFRelease(v31);
    a1[16] = 0;
  }
  CFIndex v32 = (const void *)a1[21];
  if (v32)
  {
    CFRelease(v32);
    a1[21] = 0;
  }
  CFIndex v33 = (const void *)a1[28];
  if (v33)
  {
    CFRelease(v33);
    a1[28] = 0;
  }
  CFMutableDictionaryRef v34 = (const void *)a1[29];
  if (v34)
  {
    CFRelease(v34);
    a1[29] = 0;
  }
  CFStringRef v35 = (const void *)a1[14];
  if (v35)
  {
    CFRelease(v35);
    a1[14] = 0;
  }
  CFArrayRef v36 = (const void *)a1[15];
  if (v36) {
    CFRelease(v36);
  }
  double result = 0.0;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *(_OWORD *)CFDictionaryRef v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  return result;
}

CFTypeRef *_AMFDRSealedDataEqual(CFTypeRef *result, CFTypeRef *a2)
{
  if (result)
  {
    CFDictionaryRef v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    pthread_once(&_AMFDRSealedDataClassInitializeOnce, (void (*)(void))_AMFDRSealedDataClassInitialize);
    double result = 0;
    if (a2)
    {
      if (v4 == _AMFDRSealedDataTypeID)
      {
        CFTypeID v5 = CFGetTypeID(a2);
        pthread_once(&_AMFDRSealedDataClassInitializeOnce, (void (*)(void))_AMFDRSealedDataClassInitialize);
        if (v5 == _AMFDRSealedDataTypeID)
        {
          double result = (CFTypeRef *)CFEqual(v3[4], a2[4]);
          if (result)
          {
            double result = (CFTypeRef *)CFEqual(v3[5], a2[5]);
            if (result) {
              return (CFTypeRef *)(CFEqual(v3[8], a2[8]) != 0);
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

CFStringRef _AMFDRSealedDataCopyFormattingDescription(void *a1)
{
  if (!a1) {
    _AMFDRSealedDataCopyFormattingDescription_cold_1();
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"sealedDataClass=%@ sealedDataInstance=%@ dataClassArray=%@ dataInstanceArray=%@ dataArray=%@", a1[9], a1[10], a1[4], a1[5], a1[8]);
}

uint64_t _exportDataInstances(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v3 = a1;
  uint64_t v4 = a3[1];
  if (!*a3)
  {
    CFStringRef v6 = @"amfdr is NULL";
    return AMFDRErrorPushInternal(v4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_exportDataInstances", v6, v7);
  }
  if (!a1)
  {
    CFStringRef v6 = @"dataClass is NULL";
    return AMFDRErrorPushInternal(v4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_exportDataInstances", v6, v7);
  }
  if (!a2)
  {
    CFStringRef v6 = @"dataInstance is NULL";
    return AMFDRErrorPushInternal(v4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_exportDataInstances", v6, v7);
  }
  uint64_t result = AMFDRDataExport(*a3);
  if ((result & 1) == 0) {
    return AMFDRErrorPushInternal(v4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_exportDataInstances", @"Fail to export data %@-%@", v3);
  }
  return result;
}

CFDataRef AMFDRDataMemoryCopyDigest(const __CFData *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFDataRef v5 = cf;
  uint64_t v21 = *MEMORY[0x263EF8340];
  memset(bytes, 170, sizeof(bytes));
  if (!cf)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopyDigest", @"amfdr is NULL", v19);
    return v5;
  }
  if (!a2)
  {
    CFStringRef v17 = @"dataClassStr is NULL";
LABEL_16:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopyDigest", v17, v19);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v17 = @"dataInstanceStr is NULL.";
    goto LABEL_16;
  }
  CFAllocatorRef v8 = CFGetAllocator(cf);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v8, a2, a3);
  if (!FullKey)
  {
    CFStringRef v17 = @"fullKey is NULL";
    goto LABEL_16;
  }
  CFStringRef v10 = FullKey;
  CFDictionaryRef Store = AMFDRDataMemoryGetStore(v5);
  if (!Store)
  {
    CFStringRef v18 = @"memoryStore is NULL";
LABEL_20:
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopyDigest", v18, v19);
    goto LABEL_21;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(Store, v10);
  if (Value)
  {
    CFDataRef v13 = Value;
    uint64_t BytePtr = CFDataGetBytePtr(Value);
    CFDataGetLength(v13);
    if (AMFDRDigestMd5((uint64_t)BytePtr))
    {
      CFAllocatorRef v15 = CFGetAllocator(v5);
      CFDataRef v5 = CFDataCreate(v15, bytes, 16);
      if (!v5) {
        AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopyDigest", @"CFDataCreate failed to create md5 data", v19);
      }
      goto LABEL_10;
    }
    CFStringRef v18 = @"Failed to compute md5";
    goto LABEL_20;
  }
  AMFDRErrorPushInternal(a4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopyDigest", @"Failed to read memory data for key %@", (char)v10);
LABEL_21:
  CFDataRef v5 = 0;
LABEL_10:
  CFRelease(v10);
  return v5;
}

BOOL AMFDRDataMemoryPresent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef v14 = @"amfdr is NULL";
LABEL_13:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPresent", v14, v15);
    int v12 = 0;
    return v12 != 0;
  }
  if (!a2)
  {
    CFStringRef v14 = @"dataClassStr is NULL";
    goto LABEL_13;
  }
  if (!a3)
  {
    CFStringRef v14 = @"dataInstanceStr is NULL.";
    goto LABEL_13;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v8, a2, a3);
  if (!FullKey)
  {
    CFStringRef v14 = @"fullKey is NULL";
    goto LABEL_13;
  }
  CFStringRef v10 = FullKey;
  CFDictionaryRef Store = AMFDRDataMemoryGetStore(a1);
  if (Store)
  {
    int v12 = CFDictionaryContainsKey(Store, v10);
  }
  else
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPresent", @"memoryStore is NULL", v15);
    int v12 = 0;
  }
  CFRelease(v10);
  return v12 != 0;
}

CFTypeRef AMFDRDataMemoryCopy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    CFStringRef format = @"amfdr is NULL";
LABEL_14:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopy", format, v16);
    return 0;
  }
  if (!a2)
  {
    CFStringRef format = @"dataClassStr is NULL";
    goto LABEL_14;
  }
  if (!a3)
  {
    CFStringRef format = @"dataInstanceStr is NULL.";
    goto LABEL_14;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v8, a2, a3);
  if (!FullKey)
  {
    CFStringRef format = @"fullKey is NULL";
    goto LABEL_14;
  }
  CFStringRef v10 = FullKey;
  CFDictionaryRef Store = AMFDRDataMemoryGetStore(a1);
  if (!Store)
  {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopy", @"memoryStore is NULL", v16);
LABEL_17:
    CFTypeRef v13 = 0;
    goto LABEL_8;
  }
  CFDataRef Value = CFDictionaryGetValue(Store, v10);
  if (!Value)
  {
    AMFDRErrorPushInternal(a4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopy", @"Failed to read memory data for key %@", (char)v10);
    goto LABEL_17;
  }
  CFTypeRef v13 = CFRetain(Value);
LABEL_8:
  CFRelease(v10);
  return v13;
}

unint64_t AMFDRDataMemoryPutWithOptions(void *cf, uint64_t a2, uint64_t a3, const void *a4, int a5, uint64_t a6)
{
  unint64_t v7 = (unint64_t)cf;
  if (!cf)
  {
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPutWithOptions", @"amfdr is NULL", v17);
    return v7;
  }
  if (!a2)
  {
    CFStringRef v16 = @"dataClassStr is NULL";
LABEL_15:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPutWithOptions", v16, v17);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v16 = @"dataInstanceStr is NULL.";
    goto LABEL_15;
  }
  if (!a4)
  {
    CFStringRef v16 = @"valueData is NULL";
    goto LABEL_15;
  }
  CFAllocatorRef v11 = CFGetAllocator(cf);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v11, a2, a3);
  if (!FullKey)
  {
    CFStringRef v16 = @"fullKey is NULL";
    goto LABEL_15;
  }
  CFStringRef v13 = FullKey;
  CFDictionaryRef Store = AMFDRDataMemoryGetStore((void *)v7);
  unint64_t v7 = Store != 0;
  if (Store) {
    CFDictionarySetValue(Store, v13, a4);
  }
  else {
    AMFDRErrorPushInternal(a6, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPutWithOptions", @"memoryStore is NULL", v17);
  }
  CFRelease(v13);
  return v7;
}

unint64_t AMFDRDataMemoryDelete(void *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (unint64_t)cf;
  if (!cf)
  {
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryDelete", @"amfdr is NULL", v14);
    return v5;
  }
  if (!a2)
  {
    CFStringRef v13 = @"dataClassStr is NULL";
LABEL_13:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryDelete", v13, v14);
    return 0;
  }
  if (!a3)
  {
    CFStringRef v13 = @"dataInstanceStr is NULL.";
    goto LABEL_13;
  }
  CFAllocatorRef v8 = CFGetAllocator(cf);
  CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v8, a2, a3);
  if (!FullKey)
  {
    CFStringRef v13 = @"fullKey is NULL";
    goto LABEL_13;
  }
  CFStringRef v10 = FullKey;
  CFDictionaryRef Store = AMFDRDataMemoryGetStore((void *)v5);
  unint64_t v5 = Store != 0;
  if (Store) {
    CFDictionaryRemoveValue(Store, v10);
  }
  else {
    AMFDRErrorPushInternal(a4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryDelete", @"memoryStore is NULL", v14);
  }
  CFRelease(v10);
  return v5;
}

uint64_t AMFDRDataMemoryPrefetch(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPrefetch", @"AMFDRDataMemoryPrefetch is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryExport(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryExport", @"AMFDRDataMemoryExport is not implemented", vars0);
  return 0;
}

BOOL AMFDRDataMemoryCopyTrustObject(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  CFTypeRef v5 = AMFDRDataMemoryCopy(a1, @"trustobject", @"current", a4);
  if (v5) {
    *a3 = v5;
  }
  return v5 != 0;
}

unint64_t AMFDRDataMemoryPutTrustObject(void *a1, const void *a2, uint64_t a3, uint64_t a4, int a5)
{
  return AMFDRDataMemoryPutWithOptions(a1, @"trustobject", @"current", a2, a5, a3);
}

uint64_t AMFDRDataMemoryIterate(int a1, int a2, uint64_t a3)
{
  AMFDRErrorPushInternal(a3, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryIterate", @"No implementation in AMFDRDataMemory module", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryMake(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMake", @"AMFDRDataMemoryMake is not implemented", vars0);
  return 0;
}

CFTypeRef AMFDRDataMemoryMultiCopy(void *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4)
{
  return _AMFDRDataMemoryMultiCopyInternal(a1, a2, a3, 0, a4);
}

uint64_t AMFDRDataMemoryMultiPutWithOptions(void *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v25 = @"amfdr is NULL";
LABEL_43:
    AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", v25, v26);
    return 0;
  }
  if (!theArray)
  {
    CFStringRef v25 = @"dataClassArray is NULL";
    goto LABEL_43;
  }
  if (!a3)
  {
    CFStringRef v25 = @"dataInstanceArray is NULL";
    goto LABEL_43;
  }
  if (!a4)
  {
    CFStringRef v25 = @"valueDataArray is NULL";
    goto LABEL_43;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v25 = @"Invalid dataClassArray count";
    goto LABEL_43;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v25 = @"Invalid dataInstanceArray count";
    goto LABEL_43;
  }
  if (CFArrayGetCount(a4) != v11)
  {
    CFStringRef v25 = @"Invalid dataValueArray count";
    goto LABEL_43;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFDictionaryRef theDict = CFDictionaryCreateMutable(v12, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!theDict)
  {
    AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", @"multiRequestErrors is NULL", v26);
    return 0;
  }
  CFIndex v13 = 0;
  CFStringRef v14 = 0;
  while (1)
  {
    if (v14) {
      CFRelease(v14);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
    if (!ValueAtIndex)
    {
      CFStringRef format = @"dataClassStr is NULL";
LABEL_30:
      AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", format, v26);
      goto LABEL_33;
    }
    uint64_t v16 = (uint64_t)ValueAtIndex;
    char v17 = CFArrayGetValueAtIndex(a3, v13);
    if (!v17)
    {
      CFStringRef format = @"dataInstanceStr is NULL";
      goto LABEL_30;
    }
    uint64_t v18 = (uint64_t)v17;
    uint64_t v19 = (uint64_t)CFArrayGetValueAtIndex(a4, v13);
    if (!v19)
    {
      AMFDRErrorPushInternal(a6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", @"valueData is NULL", v26);
      goto LABEL_25;
    }
    CFAllocatorRef v20 = CFGetAllocator(a1);
    CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v20, v16, v18);
    if (!FullKey) {
      break;
    }
    CFStringRef v14 = FullKey;
    if ((AMFDRDataMemoryPutWithOptions(a1, v16, v18, (const void *)v19, v22, a6) & 1) == 0)
    {
      AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", @"AMFDRDataMemoryPut failed", v26);
      if (!cf)
      {
        AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", @"internalError is NULL", v26);
        goto LABEL_35;
      }
      CFDictionaryAddValue(theDict, v14, cf);
    }
    if (v11 == ++v13)
    {
      if (!CFDictionaryGetCount(theDict))
      {
        uint64_t v19 = 1;
LABEL_24:
        CFRelease(v14);
        goto LABEL_25;
      }
      AMFDRErrorPushInternal(a6, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", @"got multiRequestErrors", v26);
LABEL_35:
      uint64_t v19 = 0;
      goto LABEL_24;
    }
  }
  AMFDRErrorPushInternal(a6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPutWithOptions", @"currDataInstance is NULL", v26);
LABEL_33:
  uint64_t v19 = 0;
LABEL_25:
  CFRelease(theDict);
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

uint64_t AMFDRDataMemoryMultiDelete(void *a1, CFArrayRef theArray, const __CFArray *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v24 = @"amfdr is NULL";
LABEL_37:
    AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiDelete", v24, v25);
    return 0;
  }
  if (!theArray)
  {
    CFStringRef v24 = @"dataClassStr is NULL";
    goto LABEL_37;
  }
  if (!a3)
  {
    CFStringRef v24 = @"dataInstanceStr is NULL";
    goto LABEL_37;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef v24 = @"Invalid dataClassArray count";
    goto LABEL_37;
  }
  CFIndex v9 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef v24 = @"Invalid dataInstanceArray count";
    goto LABEL_37;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, v9, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiDelete", @"multiRequestErrors is NULL", v25);
    return 0;
  }
  CFStringRef value = Mutable;
  CFIndex v13 = 0;
  CFStringRef v14 = 0;
  while (1)
  {
    if (v14) {
      CFRelease(v14);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
    if (!ValueAtIndex)
    {
      CFStringRef format = @"dataClassStr is NULL";
LABEL_27:
      AMFDRErrorPushInternal(a4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiDelete", format, v25);
      goto LABEL_29;
    }
    uint64_t v16 = (uint64_t)ValueAtIndex;
    char v17 = CFArrayGetValueAtIndex(a3, v13);
    if (!v17)
    {
      CFStringRef format = @"dataInstanceStr is NULL";
      goto LABEL_27;
    }
    uint64_t v18 = (uint64_t)v17;
    CFAllocatorRef v19 = CFGetAllocator(a1);
    CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v19, v16, v18);
    if (!FullKey) {
      break;
    }
    CFStringRef v14 = FullKey;
    if ((AMFDRDataMemoryDelete(a1, v16, v18, a4) & 1) == 0)
    {
      AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiDelete", @"AMFDRDataMemoryDelete failed", v25);
      if (!cf)
      {
        AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiDelete", @"internalError is NULL", v25);
        goto LABEL_31;
      }
      CFDictionaryAddValue(value, v14, cf);
    }
    if (v9 == ++v13)
    {
      if (!CFDictionaryGetCount(value))
      {
        uint64_t v21 = 1;
LABEL_21:
        CFRelease(v14);
        goto LABEL_22;
      }
      AMFDRErrorPushInternal(a4, 21, 0, 0, 0, 0, 0, 0, value, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiDelete", @"got multiRequestErrors", v25);
LABEL_31:
      uint64_t v21 = 0;
      goto LABEL_21;
    }
  }
  AMFDRErrorPushInternal(a4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiDelete", @"currDataInstance is NULL", v25);
LABEL_29:
  uint64_t v21 = 0;
LABEL_22:
  CFRelease(value);
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

uint64_t AMFDRDataMemoryMultiExport(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiExport", @"AMFDRDataLocalMultiExport is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryMultiMake(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiMake", @"AMFDRDataMemoryMultiMake is not implemented", vars0);
  return 0;
}

void *AMFDRDataMemoryPopulate(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v18 = 0;
  int v17 = 0;
  uint64_t v16 = 0;
  unsigned int v15 = 0;
  CFDataRef v7 = (const __CFData *)AMFDRDataMemoryCopy(a1, a2, a3, a5);
  if (v7)
  {
    CFDataRef v8 = v7;
    uint64_t BytePtr = CFDataGetBytePtr(v7);
    unsigned int Length = CFDataGetLength(v8);
    if (!AMFDRDecodeCombined((uint64_t)BytePtr, Length, &v18, &v17, &v16, &v15) && v16 && v15)
    {
      CFAllocatorRef v11 = CFGetAllocator(a1);
      CFAllocatorRef v12 = CFDataCreate(v11, v16, v15);
      if (!v12) {
        AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPopulate", @"Failed to create uncombined data", v14);
      }
    }
    else
    {
      CFAllocatorRef v12 = (void *)CFRetain(v8);
    }
    CFRelease(v8);
  }
  else
  {
    AMFDRErrorPushInternal(a5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPopulate", @"Failed to populate raw data", v14);
    return 0;
  }
  return v12;
}

CFTypeRef AMFDRDataMemoryMultiPopulate(void *a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  return _AMFDRDataMemoryMultiCopyInternal(a1, a2, a3, 1, a5);
}

uint64_t AMFDRDataMemoryMultiCopyDigest(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiCopyDigest", @"AMFDRDataMemoryMultiCopyDigest is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryCopyManifest(int a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCopyManifest", @"AMFDRDataMemoryCopyManifest is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryMultiCopyManifest(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiCopyManifest", @"AMFDRDataMemoryMultiCopyManifest is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryPatch(int a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryPatch", @"AMFDRDataMemoryPatch is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryMultiPatch(int a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiPatch", @"AMFDRDataMemoryMultiPatch is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryCommitPatch(int a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryCommitPatch", @"AMFDRDataMemoryCommitPatch is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryMultiCommitPatch(int a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  AMFDRErrorPushInternal(a7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiCommitPatch", @"AMFDRDataMemoryMultiCommitPatch is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryUpdateMetadataWithOptions(int a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryUpdateMetadataWithOptions", @"AMFDRDataMemoryUpdateMetadataWithOptions is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryMultiUpdateMetadataWithOptions(int a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  AMFDRErrorPushInternal(a6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiUpdateMetadataWithOptions", @"AMFDRDataMemoryMultiUpdateMetadataWithOptions is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryMultiCopyAsidMetadata(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryMultiCopyAsidMetadata", @"AMFDRDataMemoryMultiCopyAsidMetadata is not implemented", vars0);
  return 0;
}

uint64_t AMFDRDataMemoryRevert(int a1, int a2, int a3, uint64_t a4)
{
  AMFDRErrorPushInternal(a4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRDataMemoryRevert", @"AMFDRDataMemoryRevert is not implemented", vars0);
  return 0;
}

CFMutableDictionaryRef AMFDRDataMemoryGetStore(void *cf)
{
  if (!cf) {
    goto LABEL_6;
  }
  CFMutableDictionaryRef result = (CFMutableDictionaryRef)cf[10];
  if (result) {
    return result;
  }
  CFAllocatorRef v3 = CFGetAllocator(cf);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(v3, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!result)
  {
LABEL_6:
    AMSupportLogInternal();
    return 0;
  }
  cf[10] = result;
  return result;
}

CFTypeRef _AMFDRDataMemoryMultiCopyInternal(void *a1, CFArrayRef theArray, const __CFArray *a3, int a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"amfdr is NULL", v32);
    return 0;
  }
  if (!theArray)
  {
    CFStringRef format = @"dataClassArray is NULL";
LABEL_52:
    AMFDRErrorPushInternal(a5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", format, v32);
    goto LABEL_54;
  }
  if (!a3)
  {
    CFStringRef format = @"dataInstanceArray is NULL";
    goto LABEL_52;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    CFStringRef format = @"Invalid dataClassArray count";
    goto LABEL_52;
  }
  CFIndex v11 = Count;
  if (CFArrayGetCount(a3) != Count)
  {
    CFStringRef format = @"Invalid dataInstanceArray count";
    goto LABEL_52;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    char v14 = Mutable;
    CFAllocatorRef v15 = CFGetAllocator(a1);
    CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v15, v11, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (theDict)
    {
      uint64_t v33 = a5;
      CFIndex v16 = 0;
      CFStringRef v17 = 0;
      CFStringRef ValueAtIndex = 0;
      while (1)
      {
        if (v17) {
          CFRelease(v17);
        }
        if (ValueAtIndex) {
          CFRelease(ValueAtIndex);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
        if (!ValueAtIndex)
        {
          AMFDRErrorPushInternal(v33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"dataClassStr is NULL", v32);
          goto LABEL_44;
        }
        CFAllocatorRef v19 = CFArrayGetValueAtIndex(a3, v16);
        if (!v19)
        {
          AMFDRErrorPushInternal(v33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"dataInstanceStr is NULL", v32);
          goto LABEL_43;
        }
        uint64_t v20 = (uint64_t)v19;
        CFAllocatorRef v21 = CFGetAllocator(a1);
        CFStringRef FullKey = AMFDRDataLocalCreateFullKey(v21, (uint64_t)ValueAtIndex, v20);
        if (!FullKey) {
          break;
        }
        CFStringRef v17 = FullKey;
        if (a4 == 1)
        {
          CFStringRef v24 = AMFDRDataMemoryPopulate(a1, (uint64_t)ValueAtIndex, v20, v23, (uint64_t)&cf);
        }
        else
        {
          if (a4)
          {
            AMFDRErrorPushInternal(v33, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"Unsupported multi local action: %d", a4);
            goto LABEL_32;
          }
          CFStringRef v24 = (void *)AMFDRDataMemoryCopy(a1, (uint64_t)ValueAtIndex, v20, (uint64_t)&cf);
        }
        CFStringRef ValueAtIndex = v24;
        if (v24)
        {
          if (cf)
          {
            AMFDRErrorPushInternal(v33, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"internalError is not NULL", v32);
            goto LABEL_33;
          }
          char v25 = v14;
          CFStringRef v26 = v17;
          CFTypeRef v27 = ValueAtIndex;
        }
        else
        {
          AMFDRErrorPushInternal((uint64_t)&cf, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"AMFDRDataMemoryCopy failed", v32);
          CFTypeRef v27 = cf;
          if (!cf)
          {
            AMFDRErrorPushInternal(v33, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"internalError is NULL", v32);
LABEL_32:
            CFStringRef ValueAtIndex = 0;
LABEL_33:
            CFTypeRef v29 = 0;
            CFMutableDictionaryRef v28 = theDict;
LABEL_34:
            CFRelease(v17);
            goto LABEL_35;
          }
          char v25 = theDict;
          CFStringRef v26 = v17;
        }
        CFDictionaryAddValue(v25, v26, v27);
        if (v11 == ++v16)
        {
          CFMutableDictionaryRef v28 = theDict;
          if (CFDictionaryGetCount(theDict) >= 1) {
            AMFDRErrorPushInternal(v33, 21, 0, 0, 0, 0, 0, 0, theDict, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"Previous AMFDRDataMemoryCopy got errors", v32);
          }
          CFTypeRef v29 = CFRetain(v14);
          goto LABEL_34;
        }
      }
      AMFDRErrorPushInternal(v33, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"currDataInstance is NULL", v32);
LABEL_43:
      CFStringRef ValueAtIndex = 0;
LABEL_44:
      CFTypeRef v29 = 0;
      CFMutableDictionaryRef v28 = theDict;
LABEL_35:
      CFRelease(v28);
      CFRelease(v14);
      if (ValueAtIndex) {
        CFRelease(ValueAtIndex);
      }
      goto LABEL_37;
    }
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"errorDict is NULL", v32);
    CFRelease(v14);
  }
  else
  {
    AMFDRErrorPushInternal(a5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"_AMFDRDataMemoryMultiCopyInternal", @"valueDataDict is NULL", v32);
  }
LABEL_54:
  CFTypeRef v29 = 0;
LABEL_37:
  if (cf) {
    CFRelease(cf);
  }
  return v29;
}

uint64_t AMFDRSysconfigGetTypeID()
{
  if (AMFDRSysconfigGetTypeID_onceToken != -1) {
    dispatch_once(&AMFDRSysconfigGetTypeID_onceToken, &__block_literal_global_4);
  }
  return AMFDRSysconfigGetTypeID__AMFDRSysconfigTypeID;
}

double _AMFDRSysconfigClassFinalize(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v3 = a1 + 2;
    CFArrayRef v2 = (const void *)a1[2];
    if (v2)
    {
      CFRelease(v2);
      *CFAllocatorRef v3 = 0;
    }
    uint64_t v4 = (const void *)a1[4];
    if (v4)
    {
      CFRelease(v4);
      a1[4] = 0;
    }
    CFTypeRef v5 = (const void *)a1[5];
    if (v5)
    {
      CFRelease(v5);
      a1[5] = 0;
    }
    CFStringRef v6 = (const void *)a1[6];
    if (v6)
    {
      CFRelease(v6);
      a1[6] = 0;
    }
    CFDataRef v7 = (const void *)a1[7];
    if (v7) {
      CFRelease(v7);
    }
    double result = 0.0;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)CFAllocatorRef v3 = 0u;
  }
  return result;
}

uint64_t _AMFDRSysconfigEqual(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    CFTypeID v4 = CFGetTypeID((CFTypeRef)result);
    if (AMFDRSysconfigGetTypeID_onceToken != -1) {
      dispatch_once(&AMFDRSysconfigGetTypeID_onceToken, &__block_literal_global_4);
    }
    double result = 0;
    if (a2)
    {
      if (v4 == AMFDRSysconfigGetTypeID__AMFDRSysconfigTypeID)
      {
        CFTypeID v5 = CFGetTypeID((CFTypeRef)a2);
        if (AMFDRSysconfigGetTypeID_onceToken != -1) {
          dispatch_once(&AMFDRSysconfigGetTypeID_onceToken, &__block_literal_global_4);
        }
        if (v5 != AMFDRSysconfigGetTypeID__AMFDRSysconfigTypeID || *(_DWORD *)(v3 + 24) != *(_DWORD *)(a2 + 24)) {
          return 0;
        }
        CFStringRef v6 = *(const void **)(v3 + 16);
        CFDataRef v7 = *(const void **)(a2 + 16);
        if (v6)
        {
          if (!v7) {
            return 0;
          }
          double result = CFEqual(v6, v7);
          if (!result) {
            return result;
          }
        }
        else if (v7)
        {
          return 0;
        }
        CFDataRef v8 = *(const void **)(v3 + 32);
        CFIndex v9 = *(const void **)(a2 + 32);
        if (v8)
        {
          if (!v9) {
            return 0;
          }
          double result = CFEqual(v8, v9);
          if (!result) {
            return result;
          }
        }
        else if (v9)
        {
          return 0;
        }
        CFAllocatorRef v10 = *(const void **)(v3 + 40);
        CFIndex v11 = *(const void **)(a2 + 40);
        if (v10)
        {
          if (!v11) {
            return 0;
          }
          double result = CFEqual(v10, v11);
          if (!result) {
            return result;
          }
        }
        else if (v11)
        {
          return 0;
        }
        CFAllocatorRef v12 = *(const void **)(v3 + 48);
        CFIndex v13 = *(const void **)(a2 + 48);
        if (v12)
        {
          if (!v13) {
            return 0;
          }
          double result = CFEqual(v12, v13);
          if (!result) {
            return result;
          }
        }
        else if (v13)
        {
          return 0;
        }
        char v14 = *(const void **)(v3 + 56);
        CFAllocatorRef v15 = *(const void **)(a2 + 56);
        if (v14)
        {
          if (v15 && CFEqual(v14, v15)) {
            return 1;
          }
        }
        else if (!v15)
        {
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

CFStringRef _AMFDRSysconfigCopyFormattingDescription(CFStringRef result)
{
  if (result)
  {
    CFDataRef data = @"NULL";
    if (result->data) {
      CFDataRef data = (__CFString *)result->data;
    }
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"<Sysconfig '%@'>{version=0x%08x}", data, LODWORD(result->length));
  }
  return result;
}

uint64_t __AMFDRSysconfigGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  AMFDRSysconfigGetTypeID__AMFDRSysconfigCFTypeID TypeID = result;
  return result;
}

double AMFDRSysconfigCreate()
{
  if (AMFDRSysconfigGetTypeID_onceToken != -1) {
    dispatch_once(&AMFDRSysconfigGetTypeID_onceToken, &__block_literal_global_4);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    double result = 0.0;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_DWORD *)(Instance + 24) = 196611;
  }
  return result;
}

uint64_t AMFDRSysconfigCreateWithDataClass(uint64_t a1, const void *a2)
{
  AMFDRSysconfigCreate();
  uint64_t v4 = v3;
  if (v3) {
    AMFDRSysconfigSetDataClass(v3, a2);
  }
  return v4;
}

void AMFDRSysconfigSetDataClass(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    if (cf)
    {
      CFTypeID v4 = CFGetTypeID(cf);
      if (v4 == CFStringGetTypeID())
      {
        CFTypeRef v5 = CFRetain(cf);
        CFStringRef v6 = *(const void **)(a1 + 16);
        if (v6) {
          CFRelease(v6);
        }
        *(void *)(a1 + 16) = v5;
      }
    }
  }
}

CFTypeRef AMFDRSysconfigCreateCopy(const __CFAllocator *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  AMFDRSysconfigCreate();
  if (!v4) {
    return 0;
  }
  CFTypeRef v5 = (void *)v4;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
  CFStringRef v6 = *(const __CFString **)(a2 + 16);
  if (v6)
  {
    CFStringRef Copy = CFStringCreateCopy(a1, v6);
    void v5[2] = Copy;
    if (!Copy) {
      goto LABEL_16;
    }
  }
  CFArrayRef v8 = *(const __CFArray **)(a2 + 32);
  if (v8)
  {
    CFArrayRef v9 = CFArrayCreateCopy(a1, v8);
    v5[4] = v9;
    if (!v9) {
      goto LABEL_16;
    }
  }
  CFArrayRef v10 = *(const __CFArray **)(a2 + 40);
  if (v10)
  {
    CFArrayRef v11 = CFArrayCreateCopy(a1, v10);
    v5[5] = v11;
    if (!v11) {
      goto LABEL_16;
    }
  }
  if ((CFArrayRef v12 = *(const __CFArray **)(a2 + 48)) != 0 && (v13 = CFArrayCreateCopy(a1, v12), (v5[6] = v13) == 0)
    || (CFArrayRef v14 = *(const __CFArray **)(a2 + 56)) != 0 && (v15 = CFArrayCreateCopy(a1, v14), (v5[7] = v15) == 0))
  {
LABEL_16:
    CFTypeRef v16 = 0;
  }
  else
  {
    CFTypeRef v16 = CFRetain(v5);
  }
  CFRelease(v5);
  return v16;
}

uint64_t AMFDRSysconfigCreateFromData(const __CFAllocator *a1, CFDataRef theData, uint64_t a3)
{
  *(_DWORD *)UInt8 bytes = 0;
  CFIndex v38 = 0;
  if (!theData)
  {
    CFStringRef v28 = @"data is NULL";
LABEL_54:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", v28, v30);
    CFMutableDictionaryRef Mutable = 0;
LABEL_56:
    CFDataRef v7 = 0;
LABEL_58:
    CFArrayRef v8 = 0;
LABEL_59:
    CFArrayRef v9 = 0;
    goto LABEL_65;
  }
  if (CFDataGetLength(theData) <= 0)
  {
    CFStringRef v28 = @"data is empty";
    goto LABEL_54;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"keys is NULL", v30);
    goto LABEL_56;
  }
  CFDataRef v7 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!v7)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"values is NULL", v30);
    goto LABEL_58;
  }
  CFArrayRef v8 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!v8)
  {
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"metaKeys is NULL", v30);
    goto LABEL_59;
  }
  CFArrayRef v9 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (v9)
  {
    uint64_t BytePtr = CFDataGetBytePtr(theData);
    unsigned int Length = CFDataGetLength(theData);
    uint64_t v12 = AMFDRDecodeIterateSysconfigBegin((uint64_t)BytePtr, Length, &v38, bytes);
    if (v12 || !v38)
    {
      AMFDRErrorPushInternal(a3, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"failed to decode sysconfig data: 0x%llx", v12);
      goto LABEL_65;
    }
    CFStringRef v13 = CFStringCreateWithBytes(a1, bytes, 4, 0x8000100u, 0);
    if (v13)
    {
      CFStringRef v14 = v13;
      uint64_t v31 = a3;
      CFStringRef v15 = 0;
      CFTypeRef v16 = 0;
      char v17 = 0;
      int v32 = *v38[3];
      uint64_t v18 = (const void *)*MEMORY[0x263EFFB38];
      while (1)
      {
        LODWORD(numBytes_4) = 0;
        LOBYTE(numBytes) = 0;
        CFStringRef v37 = 0;
        unsigned int v36 = 0;
        char v35 = 0;
        if (v15) {
          CFRelease(v15);
        }
        if (v16) {
          CFRelease(v16);
        }
        uint64_t v19 = AMFDRDecodeIterateSysconfigPayloadNext((uint64_t)v38, &numBytes_4, &numBytes, &v37, &v36, &v35);
        if (v19 == 0x40000000000000) {
          break;
        }
        if (v19)
        {
          AMFDRErrorPushInternal(v31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"failed to decode payload #%u: 0x%llx", v17);
LABEL_70:
          CFStringRef v15 = 0;
          goto LABEL_75;
        }
        CFStringRef v15 = CFStringCreateWithBytes(a1, (const UInt8 *)&numBytes_4, 4, 0x8000100u, 0);
        if (!v15)
        {
          AMFDRErrorPushInternal(v31, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"payload key #%u is NULL", v17);
LABEL_75:
          uint64_t v26 = 0;
          goto LABEL_41;
        }
        CFArrayAppendValue(Mutable, v15);
        if ((_BYTE)numBytes)
        {
          CFArrayAppendValue(v7, v18);
          CFTypeRef v16 = 0;
        }
        else
        {
          if (v35) {
            uint64_t v20 = CFStringCreateWithBytes(a1, v37, v36, 0x8000100u, 0);
          }
          else {
            uint64_t v20 = CFDataCreate(a1, v37, v36);
          }
          CFTypeRef v16 = v20;
          if (!v20)
          {
            AMFDRErrorPushInternal(v31, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"payload value #%u is NULL", v17);
            goto LABEL_75;
          }
          CFArrayAppendValue(v7, v20);
        }
        ++v17;
      }
      CFStringRef v15 = 0;
      CFAllocatorRef v21 = 0;
      for (char i = 0; ; ++i)
      {
        CFStringRef v37 = 0;
        unsigned int v36 = 0;
        numBytes_4 = 0;
        unsigned int numBytes = 0;
        char v35 = 0;
        if (v15) {
          CFRelease(v15);
        }
        if (v21) {
          CFRelease(v21);
        }
        uint64_t v23 = AMFDRDecodeIterateSysconfigMetadataNext((uint64_t)v38, &v37, &v36, &numBytes_4, &numBytes, &v35);
        if (v23 == 0x40000000000000) {
          break;
        }
        if (v23)
        {
          AMFDRErrorPushInternal(v31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"failed to decode metadata #%u: 0x%llx", i);
          goto LABEL_70;
        }
        CFStringRef v15 = CFStringCreateWithBytes(a1, v37, v36, 0x8000100u, 0);
        if (!v15)
        {
          AMFDRErrorPushInternal(v31, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"metadata key #%u is NULL", i);
          goto LABEL_75;
        }
        CFArrayAppendValue(v8, v15);
        if (v35) {
          CFStringRef v24 = CFStringCreateWithBytes(a1, numBytes_4, numBytes, 0x8000100u, 0);
        }
        else {
          CFStringRef v24 = CFDataCreate(a1, numBytes_4, numBytes);
        }
        CFAllocatorRef v21 = v24;
        if (!v24)
        {
          AMFDRErrorPushInternal(v31, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"metadata value #%u is NULL", i);
          goto LABEL_75;
        }
        CFArrayAppendValue(v9, v24);
      }
      AMFDRSysconfigCreate();
      uint64_t v26 = v25;
      if (v25)
      {
        *(void *)(v25 + 16) = CFRetain(v14);
        *(_DWORD *)(v26 + 24) = v32;
        *(void *)(v26 + 32) = CFRetain(Mutable);
        *(void *)(v26 + 40) = CFRetain(v7);
        *(void *)(v26 + 48) = CFRetain(v8);
        CFStringRef v15 = 0;
        *(void *)(v26 + 56) = CFRetain(v9);
      }
      else
      {
        AMFDRErrorPushInternal(v31, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", @"sysconfigRef is NULL", v30);
        CFStringRef v15 = 0;
      }
LABEL_41:
      AMFDRDecodeIterateSysconfigDestroy((void **)&v38);
      CFRelease(v14);
      goto LABEL_42;
    }
    CFStringRef v29 = @"dataClass is NULL";
  }
  else
  {
    CFStringRef v29 = @"metaValues is NULL";
  }
  AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateFromData", v29, v30);
LABEL_65:
  AMFDRDecodeIterateSysconfigDestroy((void **)&v38);
  CFStringRef v15 = 0;
  uint64_t v26 = 0;
  if (Mutable) {
LABEL_42:
  }
    CFRelease(Mutable);
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v26;
}

uint64_t AMFDRSysconfigGetDeletedMarker()
{
  return *MEMORY[0x263EFFB38];
}

CFDataRef AMFDRSysconfigCreateEncodedData(CFTypeRef cf, uint64_t a2)
{
  long long v88 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  uint64_t v84 = 0;
  long long v83 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  char v80 = 0;
  if (!cf)
  {
    CFStringRef format = @"sysconfig is NULL";
LABEL_123:
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", format, v65);
    return 0;
  }
  if (!*((void *)cf + 2))
  {
    CFStringRef format = @"dataClass is NULL";
    goto LABEL_123;
  }
  CFAllocatorRef allocator = CFGetAllocator(cf);
  CFDataRef EncodedKey = AMFDRSysconfigCreateEncodedKey(allocator, *((CFStringRef *)cf + 2), a2);
  if (!EncodedKey)
  {
    AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode data class", v65);
    return 0;
  }
  CFDataRef v4 = EncodedKey;
  v85[0] = CFDataGetBytePtr(EncodedKey);
  CFIndex Length = CFDataGetLength(v4);
  int v89 = *((_DWORD *)cf + 6);
  v85[1] = Length;
  v85[2] = &v89;
  v85[3] = 4;
  CFArrayRef v6 = (const __CFArray *)*((void *)cf + 4);
  CFDataRef cfa = v4;
  if (v6 && *((void *)cf + 5))
  {
    CFIndex Count = CFArrayGetCount(v6);
    if (Count != CFArrayGetCount(*((CFArrayRef *)cf + 5)))
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"payload keys and values have different numbers", v65);
LABEL_143:
      CFRelease(v4);
      return 0;
    }
    CFIndex v8 = CFArrayGetCount(*((CFArrayRef *)cf + 4));
    uint64_t v9 = v8;
    if (v8 >= 1)
    {
      CFArrayRef v10 = (char *)malloc_type_calloc(1uLL, 16 * v8, 0x1010040FDD9F14CuLL);
      if (v10)
      {
        CFArrayRef v11 = v10;
        uint64_t v12 = (char *)malloc_type_calloc(1uLL, 24 * v9, 0x1000040D248FAB4uLL);
        long long v72 = (void **)v11;
        if (v12)
        {
          uint64_t v13 = 0;
          CFIndex v14 = 0;
          CFDataRef ExternalRepresentation = 0;
          CFDataRef v16 = 0;
          long long v68 = v12;
          char v17 = v12 + 8;
          uint64_t v70 = v9;
          while (1)
          {
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v75 = 0u;
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 4), v14);
            CFStringRef v19 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 5), v14);
            if (!ValueAtIndex)
            {
              AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"payload key #%ld is NULL", v14);
              goto LABEL_84;
            }
            CFStringRef v20 = v19;
            if (!v19)
            {
              AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"payload value #%ld is NULL", v14);
              goto LABEL_84;
            }
            if (v16) {
              CFRelease(v16);
            }
            if (ExternalRepresentation) {
              CFRelease(ExternalRepresentation);
            }
            CFDataRef v21 = AMFDRSysconfigCreateEncodedKey(allocator, ValueAtIndex, a2);
            CFDataRef v16 = v21;
            if (!v21)
            {
              AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode payload key #%ld", v14);
              goto LABEL_83;
            }
            *(void *)&long long v75 = CFDataGetBytePtr(v21);
            *((void *)&v75 + 1) = CFDataGetLength(v16);
            if (AMFDRSysconfigEntryIsDeleted((const __CFBoolean *)v20))
            {
              UInt8 bytes = -1;
              CFDataRef ExternalRepresentation = CFDataCreate(allocator, &bytes, 1);
              int v22 = &v79;
              if (!ExternalRepresentation) {
                goto LABEL_110;
              }
            }
            else
            {
              CFTypeID v23 = CFGetTypeID(v20);
              if (v23 == CFStringGetTypeID())
              {
                CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(allocator, v20, 0x8000100u, 0x20u);
                int v22 = &v78;
                if (!ExternalRepresentation) {
                  goto LABEL_110;
                }
              }
              else
              {
                CFTypeID v24 = CFGetTypeID(v20);
                if (v24 != CFDataGetTypeID())
                {
                  CFGetTypeID(v20);
                  AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"unknown payload value type at #%ld: %lu", v14);
LABEL_83:
                  CFDataRef ExternalRepresentation = 0;
                  goto LABEL_84;
                }
                CFDataRef ExternalRepresentation = CFRetain(v20);
                int v22 = &v77;
                if (!ExternalRepresentation)
                {
LABEL_110:
                  AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"payload valueData is NULL", v65);
                  goto LABEL_113;
                }
              }
            }
            *(void *)int v22 = CFDataGetBytePtr((CFDataRef)ExternalRepresentation);
            *((void *)v22 + 1) = CFDataGetLength((CFDataRef)ExternalRepresentation);
            *(void *)&long long v76 = ".";
            *((void *)&v76 + 1) = 1;
            size_t v25 = DERLengthOfEncodedSequence(0x2000000000000010, (unint64_t)&v75, (unsigned __int16)DERNumSysconfigPayloadItemSpecs, (uint64_t)&DERSysconfigPayloadItemSpecs);
            v72[v13 + 1] = (void *)v25;
            uint64_t v26 = malloc_type_calloc(1uLL, v25, 0x69DB007EuLL);
            v72[v13] = v26;
            if (!v26)
            {
              AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to allocate encoded payload data #%ld", v14);
              goto LABEL_113;
            }
            if (DEREncodeSequence(0x2000000000000010, (unint64_t)&v75, (unsigned __int16)DERNumSysconfigPayloadItemSpecs, (uint64_t)&DERSysconfigPayloadItemSpecs, (unint64_t)v26, (unint64_t *)&v72[v13 + 1]))break; {
            *((void *)v17 - 1) = v13 * 8;
            }
            *(void *)char v17 = 0x2000000000000010;
            *((_WORD *)v17 + 4) = 512;
            ++v14;
            v13 += 2;
            v17 += 24;
            uint64_t v9 = v70;
            if (v70 == v14)
            {
              int v27 = 1;
              CFStringRef v28 = v72;
              CFStringRef v29 = v68;
              goto LABEL_32;
            }
          }
          AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode payload #%ld: %d", v14);
LABEL_113:
          uint64_t v9 = v70;
LABEL_84:
          CFDataRef v58 = 0;
          CFStringRef v56 = 0;
          CFStringRef v53 = 0;
          CFIndex v66 = 0;
          goto LABEL_85;
        }
        CFIndex v66 = 0;
        CFDataRef v16 = 0;
        CFDataRef ExternalRepresentation = 0;
        CFStringRef v64 = @"topLevelSpec for payload is NULL";
        goto LABEL_148;
      }
      AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"encodedItems for payload is NULL", v65);
      goto LABEL_143;
    }
    int v27 = 0;
    CFStringRef v29 = 0;
    CFStringRef v28 = 0;
  }
  else
  {
    int v27 = 0;
    CFStringRef v29 = 0;
    CFStringRef v28 = 0;
    uint64_t v9 = 0;
  }
  CFDataRef v16 = 0;
  CFDataRef ExternalRepresentation = 0;
LABEL_32:
  *((void *)&v86 + 1) = DERLengthOfEncodedSequence(0x2000000000000011, (unint64_t)v28, (unsigned __int16)v9, (uint64_t)v29);
  char v30 = malloc_type_calloc(1uLL, *((size_t *)&v86 + 1), 0xE0F61002uLL);
  CFIndex v66 = v30;
  if (!v30)
  {
    long long v68 = v29;
    long long v72 = v28;
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"encodedPayload is NULL", v65);
LABEL_128:
    CFDataRef v60 = 0;
    CFStringRef v53 = 0;
    goto LABEL_132;
  }
  *(void *)&long long v86 = v30;
  int v31 = DEREncodeSequence(0x2000000000000011, (unint64_t)v28, (unsigned __int16)v9, (uint64_t)v29, (unint64_t)v30, (unint64_t *)&v86 + 1);
  if (v31)
  {
    long long v68 = v29;
    long long v72 = v28;
    AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode top-level payload set: %d", v31);
    goto LABEL_128;
  }
  if (v28)
  {
    if (v27)
    {
      int v32 = v28;
      do
      {
        if (*v32)
        {
          free(*v32);
          *int v32 = 0;
        }
        v32 += 2;
        --v9;
      }
      while (v9);
    }
    free(v28);
  }
  if (v29) {
    free(v29);
  }
  CFArrayRef v33 = (const __CFArray *)*((void *)cf + 6);
  if (!v33 || !*((void *)cf + 7))
  {
    uint64_t v51 = 0;
    unint64_t v50 = 0;
    uint64_t v9 = 0;
LABEL_67:
    *((void *)&v87 + 1) = DERLengthOfEncodedSequence(0x2000000000000011, v50, (unsigned __int16)v9, v51);
    CFStringRef v52 = malloc_type_calloc(1uLL, *((size_t *)&v87 + 1), 0x30437997uLL);
    CFStringRef v53 = v52;
    long long v72 = (void **)v50;
    long long v68 = (void *)v51;
    if (v52)
    {
      *(void *)&long long v87 = v52;
      int v54 = DEREncodeSequence(0x2000000000000011, v50, (unsigned __int16)v9, v51, (unint64_t)v52, (unint64_t *)&v87 + 1);
      if (!v54)
      {
        *(void *)&long long v81 = &v80;
        *((void *)&v81 + 1) = 1;
        *(void *)&long long v82 = &v80;
        *((void *)&v82 + 1) = 1;
        *(void *)&long long v83 = &v80;
        *((void *)&v83 + 1) = 1;
        *((void *)&v88 + 1) = DERLengthOfEncodedSequence(0x2000000000000010, (unint64_t)&v81, (unsigned __int16)DERNumSysconfigManifestItemSpecs, (uint64_t)&DERSysconfigManifestItemSpecs);
        char v55 = malloc_type_calloc(1uLL, *((size_t *)&v88 + 1), 0x294F6391uLL);
        CFStringRef v56 = v55;
        if (v55)
        {
          *(void *)&long long v88 = v55;
          int v57 = DEREncodeSequence(0x2000000000000010, (unint64_t)&v81, (unsigned __int16)DERNumSysconfigManifestItemSpecs, (uint64_t)&DERSysconfigManifestItemSpecs, (unint64_t)v55, (unint64_t *)&v88 + 1);
          if (!v57)
          {
            uint64_t v84 = DERLengthOfEncodedSequence(0x2000000000000010, (unint64_t)v85, (unsigned __int16)DERNumSysconfigItemSpecs, (uint64_t)&DERSysconfigItemSpecs);
            CFDataRef v58 = (UInt8 *)malloc_type_calloc(1uLL, v84, 0xFD5E22A8uLL);
            if (v58)
            {
              int v59 = DEREncodeSequence(0x2000000000000010, (unint64_t)v85, (unsigned __int16)DERNumSysconfigItemSpecs, (uint64_t)&DERSysconfigItemSpecs, (unint64_t)v58, (unint64_t *)&v84);
              if (!v59)
              {
                CFDataRef v60 = CFDataCreateWithBytesNoCopy(allocator, v58, v84, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
                if (v60)
                {
LABEL_74:
                  CFDataRef v58 = 0;
                  goto LABEL_75;
                }
                AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"outData is NULL", v65);
LABEL_75:
                if (!v72)
                {
LABEL_92:
                  if (v68) {
                    free(v68);
                  }
                  goto LABEL_94;
                }
LABEL_86:
                if (v9 <= 0)
                {
LABEL_91:
                  free(v72);
                  goto LABEL_92;
                }
LABEL_87:
                CFTypeRef v61 = v72;
                do
                {
                  if (*v61)
                  {
                    free(*v61);
                    *CFTypeRef v61 = 0;
                  }
                  v61 += 2;
                  --v9;
                }
                while (v9);
                goto LABEL_91;
              }
              AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode sysconfig sequence: %d", v59);
            }
            else
            {
              AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"encodedSysconfig is NULL", v65);
            }
            CFDataRef v60 = 0;
            goto LABEL_75;
          }
          AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode sysconfig manifest: %d", v57);
        }
        else
        {
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"encodedManifest is NULL", v65);
        }
        CFDataRef v60 = 0;
        goto LABEL_74;
      }
      AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode top-level metadata set: %d", v54);
    }
    else
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"encodedMetadata is NULL", v65);
    }
    CFDataRef v60 = 0;
LABEL_132:
    CFStringRef v56 = 0;
    goto LABEL_74;
  }
  CFIndex v34 = CFArrayGetCount(v33);
  if (v34 != CFArrayGetCount(*((CFArrayRef *)cf + 7)))
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"metadata keys and values have different numbers", v65);
    goto LABEL_146;
  }
  CFIndex v35 = CFArrayGetCount(*((CFArrayRef *)cf + 6));
  uint64_t v9 = v35;
  if (v35 < 1)
  {
    uint64_t v51 = 0;
    unint64_t v50 = 0;
    goto LABEL_67;
  }
  unsigned int v36 = (char *)malloc_type_calloc(1uLL, 16 * v35, 0x1010040FDD9F14CuLL);
  if (v36)
  {
    long long v72 = (void **)v36;
    CFStringRef v37 = (char *)malloc_type_calloc(1uLL, 24 * v9, 0x1000040D248FAB4uLL);
    if (v37)
    {
      uint64_t v38 = 0;
      CFIndex v39 = 0;
      long long v68 = v37;
      CFIndex v40 = v37 + 8;
      uint64_t v71 = v9;
      while (1)
      {
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        CFStringRef v41 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 6), v39);
        CFStringRef v42 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 7), v39);
        if (!v41)
        {
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"metadata key #%ld is NULL", v39);
          goto LABEL_81;
        }
        CFStringRef v43 = v42;
        if (!v42)
        {
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"metadata  value #%ld is NULL", v39);
          goto LABEL_81;
        }
        if (v16) {
          CFRelease(v16);
        }
        if (ExternalRepresentation) {
          CFRelease(ExternalRepresentation);
        }
        CFDataRef v44 = CFStringCreateExternalRepresentation(allocator, v41, 0x8000100u, 0x20u);
        CFDataRef v16 = v44;
        if (!v44)
        {
          AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode metadata key #%ld", v39);
          goto LABEL_80;
        }
        *(void *)&long long v75 = CFDataGetBytePtr(v44);
        *((void *)&v75 + 1) = CFDataGetLength(v16);
        CFTypeID v45 = CFGetTypeID(v43);
        if (v45 == CFStringGetTypeID())
        {
          CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(allocator, v43, 0x8000100u, 0x20u);
          CFTypeID v46 = &v77;
          if (!ExternalRepresentation) {
            goto LABEL_117;
          }
        }
        else
        {
          CFTypeID v47 = CFGetTypeID(v43);
          if (v47 != CFDataGetTypeID())
          {
            CFGetTypeID(v43);
            AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"unknown metadata value type at #%ld: %lu", v39);
LABEL_80:
            CFDataRef ExternalRepresentation = 0;
            goto LABEL_81;
          }
          CFDataRef ExternalRepresentation = CFRetain(v43);
          CFTypeID v46 = &v76;
          if (!ExternalRepresentation)
          {
LABEL_117:
            AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"metadata valueData is NULL", v65);
            goto LABEL_120;
          }
        }
        *(void *)CFTypeID v46 = CFDataGetBytePtr((CFDataRef)ExternalRepresentation);
        *((void *)v46 + 1) = CFDataGetLength((CFDataRef)ExternalRepresentation);
        size_t v48 = DERLengthOfEncodedSequence(0x2000000000000010, (unint64_t)&v75, (unsigned __int16)DERNumSysconfigMetadataItemSpecs, (uint64_t)&DERSysconfigMetadataItemSpecs);
        v72[v38 + 1] = (void *)v48;
        CFArrayRef v49 = malloc_type_calloc(1uLL, v48, 0x38B6AB18uLL);
        v72[v38] = v49;
        if (!v49)
        {
          AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to allocate encoded metadata #%ld", v39);
          goto LABEL_120;
        }
        if (DEREncodeSequence(0x2000000000000010, (unint64_t)&v75, (unsigned __int16)DERNumSysconfigMetadataItemSpecs, (uint64_t)&DERSysconfigMetadataItemSpecs, (unint64_t)v49, (unint64_t *)&v72[v38 + 1]))break; {
        *((void *)v40 - 1) = v38 * 8;
        }
        *(void *)CFIndex v40 = 0x2000000000000010;
        *((_WORD *)v40 + 4) = 512;
        ++v39;
        v38 += 2;
        v40 += 24;
        uint64_t v9 = v71;
        if (v71 == v39)
        {
          unint64_t v50 = (unint64_t)v72;
          uint64_t v51 = (uint64_t)v68;
          goto LABEL_67;
        }
      }
      AMFDRErrorPushInternal(a2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"failed to encode metadata #%ld: %d", v39);
LABEL_120:
      uint64_t v9 = v71;
LABEL_81:
      CFDataRef v58 = 0;
      CFStringRef v56 = 0;
      CFStringRef v53 = 0;
LABEL_85:
      CFDataRef v60 = 0;
      goto LABEL_86;
    }
    CFStringRef v64 = @"topLevelSpec for metadata is NULL";
LABEL_148:
    AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", v64, v65);
    CFDataRef v60 = 0;
    long long v68 = 0;
    CFStringRef v53 = 0;
    CFStringRef v56 = 0;
    CFDataRef v58 = 0;
    goto LABEL_87;
  }
  AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedData", @"encodedItems for metadata is NULL", v65);
LABEL_146:
  CFDataRef v60 = 0;
  CFStringRef v53 = 0;
  CFStringRef v56 = 0;
  CFDataRef v58 = 0;
LABEL_94:
  if (v66) {
    free(v66);
  }
  if (v53) {
    free(v53);
  }
  if (v56) {
    free(v56);
  }
  if (v58) {
    free(v58);
  }
  CFRelease(cfa);
  if (v16) {
    CFRelease(v16);
  }
  if (ExternalRepresentation) {
    CFRelease(ExternalRepresentation);
  }
  return v60;
}

CFDataRef AMFDRSysconfigCreateEncodedKey(const __CFAllocator *a1, CFStringRef theString, uint64_t a3)
{
  char v11 = 0;
  *(_DWORD *)buffer = 0;
  if (!theString)
  {
    CFStringRef v7 = @"key to encode is NULL";
LABEL_8:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedKey", v7, v8);
    return 0;
  }
  if (CFStringGetLength(theString) != 4)
  {
    CFStringRef v7 = @"invalid key length";
    goto LABEL_8;
  }
  if (!CFStringGetCString(theString, buffer, 5, 0x8000100u))
  {
    AMFDRErrorPushInternal(a3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCreateEncodedKey", @"failed to get cstring from key", v8);
    return 0;
  }
  *(_DWORD *)UInt8 bytes = bswap32(*(unsigned int *)buffer);
  return CFDataCreate(a1, bytes, 4);
}

CFBooleanRef AMFDRSysconfigEntryIsDeleted(const __CFBoolean *result)
{
  if (result)
  {
    CFBooleanRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFBooleanGetTypeID()) {
      return (const __CFBoolean *)(CFBooleanGetValue(v1) == 0);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AMFDRSysconfigGetDataClass(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

CFTypeRef AMFDRSysconfigCopyValues(CFArrayRef *a1, uint64_t a2)
{
  if (!a1)
  {
    AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCopyValues", @"sysconfig is NULL", v14);
    return 0;
  }
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMFDRErrorPushInternal(a2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCopyValues", @"values is NULL", v14);
    return 0;
  }
  CFArrayRef v6 = Mutable;
  CFArrayRef v7 = a1[4];
  if (v7 && a1[5])
  {
    CFIndex Count = CFArrayGetCount(v7);
    if (Count != CFArrayGetCount(a1[5]))
    {
      AMFDRErrorPushInternal(a2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigCopyValues", @"invalid number of payload values", v14);
      CFTypeRef v12 = 0;
      goto LABEL_10;
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1[4], i);
        char v11 = CFArrayGetValueAtIndex(a1[5], i);
        CFDictionarySetValue(v6, ValueAtIndex, v11);
      }
    }
  }
  CFTypeRef v12 = CFRetain(v6);
LABEL_10:
  CFRelease(v6);
  return v12;
}

BOOL AMFDRSysconfigSetValues(CFArrayRef *a1, const __CFDictionary *a2, uint64_t a3)
{
  if (!a1)
  {
    CFStringRef v36 = @"sysconfig is NULL";
LABEL_52:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetValues", v36, v38);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v36 = @"valueDict is NULL";
    goto LABEL_52;
  }
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFIndex Count = CFDictionaryGetCount(a2);
  if (Count < 1)
  {
    char v8 = 0;
    CFArrayRef v10 = 0;
  }
  else
  {
    char v8 = malloc_type_calloc(1uLL, 8 * Count, 0x6004044C4A2DFuLL);
    uint64_t v9 = (const void **)malloc_type_calloc(1uLL, 8 * Count, 0xC0040B8AA526DuLL);
    CFArrayRef v10 = v9;
    if (!v8)
    {
      AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetValues", @"keysToUpdate is NULL", v38);
      BOOL v22 = 0;
      if (!v10) {
        return v22;
      }
      goto LABEL_44;
    }
    if (!v9)
    {
      AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetValues", @"valuesToUpdate is NULL", v38);
      BOOL v22 = 0;
LABEL_42:
      free(v8);
      goto LABEL_43;
    }
    CFDictionaryGetKeysAndValues(a2, (const void **)v8, v9);
  }
  char v11 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  CFMutableArrayRef v13 = CFArrayCreateMutable(v6, 0, v11);
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v15 = v14;
  if (Mutable)
  {
    if (v13)
    {
      if (v14)
      {
        CFIndex v40 = v13;
        CFStringRef v41 = v10;
        CFDataRef v16 = v8;
        CFArrayRef v17 = a1[4];
        if (v17 && a1[5])
        {
          CFIndex v18 = CFArrayGetCount(v17);
          if (v18 != CFArrayGetCount(a1[5]))
          {
            AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetValues", @"invalid number of payload values", v38);
            BOOL v22 = 0;
LABEL_49:
            CFMutableArrayRef v13 = v40;
            CFArrayRef v10 = v41;
            char v8 = v16;
            goto LABEL_37;
          }
          if (v18 >= 1)
          {
            for (CFIndex i = 0; i != v18; ++i)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1[4], i);
              CFDataRef v21 = CFArrayGetValueAtIndex(a1[5], i);
              if (!CFDictionaryContainsKey(v15, ValueAtIndex)) {
                CFArrayAppendValue(Mutable, ValueAtIndex);
              }
              CFDictionarySetValue(v15, ValueAtIndex, v21);
            }
          }
        }
        if (Count >= 1)
        {
          uint64_t v39 = a3;
          BOOL v22 = 0;
          uint64_t v23 = 0;
          char v8 = v16;
          while (1)
          {
            CFTypeID v24 = (const void *)*((void *)v8 + v23);
            if (!v24 || (v25 = v41[v23], CFTypeID v26 = CFGetTypeID(v24), v26 != CFStringGetTypeID()))
            {
              CFStringRef v35 = @"valueDict key is not a string";
              goto LABEL_48;
            }
            if (!v25) {
              break;
            }
            if (!CFDictionaryContainsKey(v15, v24)) {
              CFArrayAppendValue(Mutable, v24);
            }
            CFDictionarySetValue(v15, v24, v25);
            BOOL v22 = ++v23 >= Count;
            char v8 = v16;
            if (Count == v23) {
              goto LABEL_29;
            }
          }
          CFStringRef v35 = @"valueDict contains NULL value";
LABEL_48:
          AMFDRErrorPushInternal(v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetValues", v35, v38);
          goto LABEL_49;
        }
        BOOL v22 = 1;
        char v8 = v16;
LABEL_29:
        uint64_t v27 = CFArrayGetCount(Mutable);
        CFMutableArrayRef v13 = v40;
        if (v27 >= 1)
        {
          uint64_t v28 = v27;
          v42.CFIndex location = 0;
          v42.CFIndex length = v27;
          CFArraySortValues(Mutable, v42, MEMORY[0x263EFF3C0], 0);
          for (CFIndex j = 0; j != v28; ++j)
          {
            char v30 = CFArrayGetValueAtIndex(Mutable, j);
            CFDataRef Value = CFDictionaryGetValue(v15, v30);
            CFArrayAppendValue(v40, Value);
          }
        }
        CFArrayRef v32 = a1[4];
        if (v32)
        {
          CFRelease(v32);
          a1[4] = 0;
        }
        CFArrayRef v33 = a1[5];
        CFArrayRef v10 = v41;
        if (v33)
        {
          CFRelease(v33);
          a1[5] = 0;
        }
        a1[4] = (CFArrayRef)CFRetain(Mutable);
        a1[5] = (CFArrayRef)CFRetain(v40);
LABEL_37:
        CFRelease(Mutable);
        if (!v13) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      CFStringRef v37 = @"allDict is NULL";
    }
    else
    {
      CFStringRef v37 = @"payloadValues is NULL";
    }
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetValues", v37, v38);
    BOOL v22 = 0;
    goto LABEL_37;
  }
  AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetValues", @"payloadKeys is NULL", v38);
  BOOL v22 = 0;
  if (v13) {
LABEL_38:
  }
    CFRelease(v13);
LABEL_39:
  if (v15) {
    CFRelease(v15);
  }
  if (v8) {
    goto LABEL_42;
  }
LABEL_43:
  if (v10) {
LABEL_44:
  }
    free(v10);
  return v22;
}

BOOL AMFDRSysconfigSetMetaValues(CFArrayRef *a1, const __CFDictionary *a2, uint64_t a3)
{
  if (!a1)
  {
    CFStringRef v36 = @"sysconfig is NULL";
LABEL_52:
    AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetMetaValues", v36, v38);
    return 0;
  }
  if (!a2)
  {
    CFStringRef v36 = @"metaValueDict is NULL";
    goto LABEL_52;
  }
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFIndex Count = CFDictionaryGetCount(a2);
  if (Count < 1)
  {
    char v8 = 0;
    CFArrayRef v10 = 0;
  }
  else
  {
    char v8 = malloc_type_calloc(1uLL, 8 * Count, 0x6004044C4A2DFuLL);
    uint64_t v9 = (const void **)malloc_type_calloc(1uLL, 8 * Count, 0xC0040B8AA526DuLL);
    CFArrayRef v10 = v9;
    if (!v8)
    {
      AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetMetaValues", @"metaKeysToUpdate is NULL", v38);
      BOOL v22 = 0;
      if (!v10) {
        return v22;
      }
      goto LABEL_44;
    }
    if (!v9)
    {
      AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetMetaValues", @"metaValuesToUpdate is NULL", v38);
      BOOL v22 = 0;
LABEL_42:
      free(v8);
      goto LABEL_43;
    }
    CFDictionaryGetKeysAndValues(a2, (const void **)v8, v9);
  }
  char v11 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  CFMutableArrayRef v13 = CFArrayCreateMutable(v6, 0, v11);
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v15 = v14;
  if (Mutable)
  {
    if (v13)
    {
      if (v14)
      {
        CFIndex v40 = v13;
        CFStringRef v41 = v10;
        CFDataRef v16 = v8;
        CFArrayRef v17 = a1[6];
        if (v17 && a1[7])
        {
          CFIndex v18 = CFArrayGetCount(v17);
          if (v18 != CFArrayGetCount(a1[7]))
          {
            AMFDRErrorPushInternal(a3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetMetaValues", @"invalid number of metadata values", v38);
            BOOL v22 = 0;
LABEL_49:
            CFMutableArrayRef v13 = v40;
            CFArrayRef v10 = v41;
            char v8 = v16;
            goto LABEL_37;
          }
          if (v18 >= 1)
          {
            for (CFIndex i = 0; i != v18; ++i)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1[6], i);
              CFDataRef v21 = CFArrayGetValueAtIndex(a1[7], i);
              if (!CFDictionaryContainsKey(v15, ValueAtIndex)) {
                CFArrayAppendValue(Mutable, ValueAtIndex);
              }
              CFDictionarySetValue(v15, ValueAtIndex, v21);
            }
          }
        }
        if (Count >= 1)
        {
          uint64_t v39 = a3;
          BOOL v22 = 0;
          uint64_t v23 = 0;
          char v8 = v16;
          while (1)
          {
            CFTypeID v24 = (const void *)*((void *)v8 + v23);
            if (!v24 || (v25 = v41[v23], CFTypeID v26 = CFGetTypeID(v24), v26 != CFStringGetTypeID()))
            {
              CFStringRef v35 = @"metaValueDict key is not a string";
              goto LABEL_48;
            }
            if (!v25) {
              break;
            }
            if (!CFDictionaryContainsKey(v15, v24)) {
              CFArrayAppendValue(Mutable, v24);
            }
            CFDictionarySetValue(v15, v24, v25);
            BOOL v22 = ++v23 >= Count;
            char v8 = v16;
            if (Count == v23) {
              goto LABEL_29;
            }
          }
          CFStringRef v35 = @"metaValueDict contains NULL value";
LABEL_48:
          AMFDRErrorPushInternal(v39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetMetaValues", v35, v38);
          goto LABEL_49;
        }
        BOOL v22 = 1;
        char v8 = v16;
LABEL_29:
        uint64_t v27 = CFArrayGetCount(Mutable);
        CFMutableArrayRef v13 = v40;
        if (v27 >= 1)
        {
          uint64_t v28 = v27;
          v42.CFIndex location = 0;
          v42.CFIndex length = v27;
          CFArraySortValues(Mutable, v42, MEMORY[0x263EFF3C0], 0);
          for (CFIndex j = 0; j != v28; ++j)
          {
            char v30 = CFArrayGetValueAtIndex(Mutable, j);
            CFDataRef Value = CFDictionaryGetValue(v15, v30);
            CFArrayAppendValue(v40, Value);
          }
        }
        CFArrayRef v32 = a1[6];
        if (v32)
        {
          CFRelease(v32);
          a1[6] = 0;
        }
        CFArrayRef v33 = a1[7];
        CFArrayRef v10 = v41;
        if (v33)
        {
          CFRelease(v33);
          a1[7] = 0;
        }
        a1[6] = (CFArrayRef)CFRetain(Mutable);
        a1[7] = (CFArrayRef)CFRetain(v40);
LABEL_37:
        CFRelease(Mutable);
        if (!v13) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      CFStringRef v37 = @"allDict is NULL";
    }
    else
    {
      CFStringRef v37 = @"metadataValues is NULL";
    }
    AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetMetaValues", v37, v38);
    BOOL v22 = 0;
    goto LABEL_37;
  }
  AMFDRErrorPushInternal(a3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)"AMFDRSysconfigSetMetaValues", @"metadataKeys is NULL", v38);
  BOOL v22 = 0;
  if (v13) {
LABEL_38:
  }
    CFRelease(v13);
LABEL_39:
  if (v15) {
    CFRelease(v15);
  }
  if (v8) {
    goto LABEL_42;
  }
LABEL_43:
  if (v10) {
LABEL_44:
  }
    free(v10);
  return v22;
}

void AMFDRSysconfigRemoveAllValues(void *a1)
{
  CFTypeID v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
  CFAllocatorRef v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0;
  }
  CFTypeRef v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERParseBitString(uint64_t result, unint64_t *a2, unsigned char *a3)
{
  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(void *)(result + 8)) {
    return 3;
  }
  unsigned int v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      unint64_t v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      unint64_t v6 = *(void *)result;
      unint64_t v7 = *(void *)result + v4;
      char v8 = (unsigned __int8 *)(*(void *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        unint64_t v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          double result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t DERParseBooleanWithDefault(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned int v3 = a1[1];
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 == (unsigned __int8 *)1)
  {
    int v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      uint64_t result = 0;
      *a3 = a2;
      return result;
    }
  }
  return 3;
}

unint64_t *DERDecodeSeqContentInit(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    unint64_t v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t DEREncodeSequence(uint64_t result, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) >= a2) {
    return DEREncodeSequenceFromObject(result, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, a5, *a6, a6);
  }
  __break(0x5519u);
  return result;
}

BOOL DEROidCompare(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    size_t v4 = *(void *)(a1 + 8);
    return v4 == *(void *)(a2 + 8) && memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
  }
  return result;
}

void *aks_params_create(uint64_t a1)
{
  unint64_t v2 = calloc(8uLL, 1uLL);
  unint64_t v3 = v2;
  if (v2)
  {
    *unint64_t v2 = 0;
    if (a1)
    {
      if (encode_list_merge_dict((uint64_t)v2))
      {
        memset_s(v3, 8uLL, 0, 8uLL);
        free(v3);
        return 0;
      }
    }
  }
  return v3;
}

void *_params_get_der_key(int a1, int a2)
{
  switch(a1)
  {
    case 1:
      unint64_t v2 = (void **)&der_key_access_groups;
      goto LABEL_28;
    case 2:
      unint64_t v2 = (void **)&der_key_external_data;
      goto LABEL_28;
    case 3:
      unint64_t v2 = (void **)&der_key_acm_handle;
      goto LABEL_28;
    case 4:
      unint64_t v2 = (void **)&der_key_salt;
      goto LABEL_28;
    case 5:
      unint64_t v2 = (void **)&der_key_data;
      goto LABEL_28;
    case 6:
      unint64_t v2 = (void **)&der_key_ecdh_seed;
      goto LABEL_28;
    case 7:
      unint64_t v2 = (void **)&der_key_ecdh_iv;
      goto LABEL_28;
    case 8:
      size_t v4 = (void **)&der_key_raw_output;
      goto LABEL_30;
    case 9:
      size_t v4 = (void **)&der_key_options;
      goto LABEL_30;
    case 10:
      unint64_t v2 = (void **)&der_key_shared_info;
      goto LABEL_28;
    case 11:
      unint64_t v2 = (void **)&der_key_shared_info2;
      goto LABEL_28;
    case 12:
      unint64_t v2 = (void **)&der_key_transcode_shared_info;
      goto LABEL_28;
    case 13:
      unint64_t v2 = (void **)&der_key_transcode_shared_info2;
      goto LABEL_28;
    case 14:
      unint64_t v2 = (void **)&der_key_transcode_ecdh_seed;
      goto LABEL_28;
    case 15:
      unint64_t v2 = (void **)&der_key_persona_uuid;
      goto LABEL_28;
    case 16:
      size_t v4 = (void **)&der_key_sub_key_type;
      goto LABEL_30;
    case 17:
      unint64_t v2 = (void **)&der_key_system_key_client_seed;
      goto LABEL_28;
    case 18:
      size_t v4 = (void **)&der_key_system_key_options;
      goto LABEL_30;
    case 19:
      unint64_t v5 = der_key_system_key_no_img4;
      BOOL v6 = a2 == 3;
      goto LABEL_31;
    case 20:
      size_t v4 = (void **)&der_key_remote_session_signing_key_type;
      goto LABEL_30;
    case 21:
      unint64_t v2 = (void **)&der_key_remote_session_signing_key_certificate;
      goto LABEL_28;
    case 22:
      size_t v4 = (void **)&der_key_gid_ref_key_options;
      goto LABEL_30;
    case 23:
      size_t v4 = (void **)&der_key_pka_flags;
      goto LABEL_30;
    case 24:
      unint64_t v2 = (void **)&der_key_volume_uuid;
      goto LABEL_28;
    case 25:
      unint64_t v2 = (void **)&der_key_seed;
LABEL_28:
      unint64_t v5 = *v2;
      BOOL v6 = a2 == 2;
      goto LABEL_31;
    case 26:
      size_t v4 = (void **)&der_key_test_flags;
LABEL_30:
      unint64_t v5 = *v4;
      BOOL v6 = a2 == 1;
LABEL_31:
      if (v6) {
        BOOL result = v5;
      }
      else {
        BOOL result = 0;
      }
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t aks_params_set_number(void *a1, int a2, uint64_t *a3)
{
  uint64_t v5 = 3758097090;
  der_int key = (unsigned __int8 *)_params_get_der_key(a2, 1);
  if (der_key)
  {
    uint64_t v7 = (uint64_t)der_key;
    if (!encode_list_remove_key(a1, der_key)
      && (!a3 || !encode_list_add_number(a1, v7, *a3)))
    {
      return 0;
    }
  }
  return v5;
}

uint64_t aks_ref_key_create(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, void ***a6)
{
  uint64_t v11 = 3758097090;
  CFTypeRef v12 = der_key_op_create;
  CFMutableArrayRef v13 = (void **)calloc(8uLL, 1uLL);
  *CFMutableArrayRef v13 = 0;
  encode_list_add_key(v13, (uint64_t)der_key_op, (uint64_t)v12);
  size_t v25 = 0;
  size_t v26 = 0;
  uint64_t v23 = 0;
  rsize_t v24 = 0;
  if (!a6) {
    goto LABEL_14;
  }
  CFMutableDictionaryRef v14 = calloc(0x50uLL, 1uLL);
  BOOL v22 = v14;
  if (!v14)
  {
    uint64_t v11 = 3758604298;
    goto LABEL_14;
  }
  CFDictionaryRef v15 = (void **)v14;
  memset_s(v14, 0x50uLL, 0, 0x50uLL);
  if (a4 && encode_list_merge_dict((uint64_t)v13)
    || encode_list_add_number(v13, (uint64_t)der_key_keybag_class, a2)
    || encode_list_add_number(v13, (uint64_t)der_key_type, a3)
    || encode_list_dict(v13, &v25, &v26))
  {
LABEL_17:
    aks_ref_key_free((uint64_t *)&v22);
    goto LABEL_14;
  }
  uint64_t v16 = _aks_operation();
  if (v16)
  {
    uint64_t v11 = v16;
    goto LABEL_17;
  }
  CFArrayRef v17 = (char *)v23;
  rsize_t v18 = v24;
  const void *v15 = v23;
  v15[1] = (void *)v18;
  *((_DWORD *)v15 + 10) = a1;
  void v15[2] = &v17[v18];
  CFStringRef v20 = 0;
  uint64_t v21 = 0;
  if (der_dict_find_value((uint64_t)der_key_ref_key, &v20, &v21)) {
    v15[4] = v20;
  }
  if (der_dict_find_value((uint64_t)der_key_external_data, &v20, &v21)) {
    unint64_t v15[3] = v20;
  }
  uint64_t v11 = 0;
  *a6 = v15;
  uint64_t v23 = 0;
  rsize_t v24 = 0;
LABEL_14:
  encode_list_free(v13);
  memset_s(v13, 8uLL, 0, 8uLL);
  free(v13);
  memset_s(v25, v26, 0, v26);
  free(v25);
  memset_s(v23, v24, 0, v24);
  free(v23);
  return v11;
}

uint64_t aks_ref_key_free(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 3758097090;
  }
  *a1 = 0;
  if (*(void *)v1)
  {
    memset_s(*(void **)v1, *(void *)(v1 + 8), 0, *(void *)(v1 + 8));
    free(*(void **)v1);
  }
  unint64_t v2 = *(void **)(v1 + 48);
  if (v2)
  {
    memset_s(v2, *(void *)(v1 + 56), 0, *(void *)(v1 + 56));
    free(*(void **)(v1 + 48));
  }
  unint64_t v3 = *(void **)(v1 + 64);
  if (v3)
  {
    memset_s(v3, *(void *)(v1 + 72), 0, *(void *)(v1 + 72));
    free(*(void **)(v1 + 64));
  }
  memset_s((void *)v1, 0x50uLL, 0, 0x50uLL);
  free((void *)v1);
  return 0;
}

uint64_t aks_ref_key_get_public_key(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v17 = 0;
  uint64_t v16 = 0;
  if (!a1[4]) {
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (der_dict_find_value((uint64_t)der_key_public_key, &v14, &v15))
  {
    *(void *)&long long v13 = v14;
    *((void *)&v13 + 1) = v14 + v15;
    der_utils_decode_implicit_raw_octet_string(&v13, 4, &v17, &v16);
  }
  int type = aks_ref_key_get_type((uint64_t)a1);
  if ((type - 7) < 2)
  {
    uint64_t v5 = MEMORY[0x21D45B3B0]();
    goto LABEL_9;
  }
  if ((type - 4) <= 1)
  {
    uint64_t v5 = MEMORY[0x21D45B3A0]();
LABEL_9:
    if (v5)
    {
      uint64_t v7 = firebloom_cp_prime_bitlen(v5);
      if (v17 == (unint64_t)(v7 + 7) >> 3)
      {
        if (v16 && !a1[8])
        {
          MEMORY[0x270FA5388]();
          bzero((char *)&v12 - v8, v8);
          ccec_compact_import_pub();
          size_t v9 = (2 * firebloom_cp_prime_size()) | 1;
          unint64_t v10 = calloc(v9, 1uLL);
          a1[8] = v10;
          a1[9] = v9;
          if (v10) {
            ccec_export_pub();
          }
          cc_clear();
        }
        uint64_t v11 = a1[9];
        uint64_t v16 = a1[8];
        unsigned int v17 = v11;
      }
    }
  }
  *a2 = v17;
  return v16;
}

uint64_t aks_ref_key_get_blob(uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a2 = a1[1];
  return result;
}

uint64_t aks_sik_attest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _op_attest(a1, (uint64_t)der_key_op_sik_attest, a2, a3, a4, a5);
}

uint64_t _op_attest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 3758097090;
  uint64_t v12 = (void **)calloc(8uLL, 1uLL);
  void *v12 = 0;
  encode_list_add_key(v12, (uint64_t)der_key_op, a2);
  __s = 0;
  rsize_t __n = 0;
  if (a1)
  {
    if (a5)
    {
      if (a6)
      {
        if (!_get_merged_params((uint64_t)a1, v12, a3))
        {
          encode_list_remove_key(v12, (unsigned __int8 *)der_key_ref_key);
          if (!encode_list_add_der(v12, (uint64_t)der_key_ref_key, *a1, a1[2])
            && !encode_list_dict(v12, &__s, &__n))
          {
            uint64_t v11 = _aks_operation();
          }
        }
      }
    }
  }
  encode_list_free(v12);
  memset_s(v12, 8uLL, 0, 8uLL);
  free(v12);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v11;
}

uint64_t aks_system_key_get_public(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v11 = 3758097090;
  uint64_t v12 = der_key_op_system_key_get_public;
  long long v13 = (void **)calloc(8uLL, 1uLL);
  *long long v13 = 0;
  encode_list_add_key(v13, (uint64_t)der_key_op, (uint64_t)v12);
  __s = 0;
  rsize_t __n = 0;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v13))
    && !encode_list_add_number(v13, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v13, (uint64_t)der_key_system_key_generation, a2)
    && !encode_list_dict(v13, &__s, &__n))
  {
    uint64_t v11 = _aks_operation();
    if (!v11)
    {
      *a5 = 0;
      *a6 = 0;
    }
  }
  encode_list_free(v13);
  memset_s(v13, 8uLL, 0, 8uLL);
  free(v13);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v11;
}

dispatch_queue_t __get_aks_client_dispatch_queue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("aks-client-queue", 0);
  get_aks_client_dispatch_queue_connection_queue = (uint64_t)result;
  return result;
}

uint64_t aks_fdr_hmac_data()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  unint64_t v2 = v1;
  size_t v4 = v3;
  int v6 = v5;
  uint64_t v7 = (const void *)v0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v8 = 3758097090;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v7 && v4 && v2)
    {
      uint64_t v10 = IOConnectCallMethod(aks_client_connection, 0x29u, 0, 0, v7, v6, 0, 0, __src, &__count);
      if (v10)
      {
        uint64_t v8 = v10;
      }
      else
      {
        uint64_t v11 = calloc(__count, 1uLL);
        void *v4 = v11;
        if (v11)
        {
          memcpy(v11, __src, __count);
          uint64_t v8 = 0;
          *unint64_t v2 = __count;
        }
        else
        {
          uint64_t v8 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x263EF8358], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fdr_hmac_data", ":", 1758, "", 0, "", "");
    uint64_t v8 = 3758097084;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v8;
}

unint64_t firebloom_cp_prime_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

double der_utils_decode_implicit_raw_octet_string(long long *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  long long v8 = *a1;
  if (ccder_blob_decode_range())
  {
    *a4 = 0;
    *a3 = 0;
    double result = *(double *)&v8;
    *a1 = v8;
  }
  return result;
}

uint64_t encode_list_add_number(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  v25[1] = *MEMORY[0x263EF8340];
  unint64_t v5 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    uint64_t v10 = 8;
  }
  else
  {
    uint64_t v6 = 9;
    uint64_t v7 = 48;
    uint64_t v8 = 1;
    while ((unint64_t)(v6 - 2) >= 2)
    {
      uint64_t v9 = a3 >> v7;
      --v6;
      v7 -= 8;
      if (v5 != v9)
      {
        uint64_t v8 = v6 - 1;
        goto LABEL_8;
      }
    }
    uint64_t v6 = 2;
LABEL_8:
    if ((((a3 >> (8 * v8 - 8)) ^ v5) & 0x80) != 0) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v8;
    }
  }
  v25[0] = 0;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    size_t v12 = ccder_sizeof();
    long long v13 = (char *)calloc(v12, 1uLL);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = v10;
      do
      {
        *((unsigned char *)v25 + v15 - 1) = v3;
        v3 >>= 8;
        --v15;
      }
      while (v15);
      uint64_t v23 = &v13[v12];
      if ((ccder_blob_encode_body() & 1) == 0 || !ccder_blob_encode_tl()) {
        goto LABEL_30;
      }
      int v16 = ccder_blob_encode_body();
      unsigned int v17 = v23;
      if (!v16) {
        unsigned int v17 = 0;
      }
      rsize_t v24 = v17;
      int v18 = ccder_blob_encode_tl();
      CFStringRef v19 = v24;
      if (!v18) {
        CFStringRef v19 = 0;
      }
      BOOL v20 = v19 && v19 == v14;
      if (v20 && (uint64_t v21 = calloc(0x18uLL, 1uLL)) != 0)
      {
        BOOL v22 = v21;
        uint64_t result = 0;
        v22[1] = v14;
        _OWORD v22[2] = v12;
        *BOOL v22 = *a1;
        *a1 = v22;
      }
      else
      {
LABEL_30:
        memset_s(v14, v12, 0, v12);
        free(v14);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t _qsort_compare(const void **a1, void **a2)
{
  unint64_t v5 = *a1;
  __s2 = *a2;
  if (!ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !v5
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !__s2)
  {
    return 4294967293;
  }
  int v2 = memcmp(v5, __s2, 0);
  if (v2 > 0) {
    return 1;
  }
  else {
    return ((v2 < 0) << 31 >> 31);
  }
}

void _AMFDRDeviceRefKeyClassFinalize_cold_1()
{
  __assert_rtn("_AMFDRDeviceRefKeyClassFinalize", "AMFDRDeviceKey.c", 392, "type != NULL");
}

void _AMFDRDeviceRefKeyCopyFormattingDescription_cold_1()
{
  __assert_rtn("_AMFDRDeviceRefKeyCopyFormattingDescription", "AMFDRDeviceKey.c", 422, "type != NULL");
}

void _AMFDRFinalize_cold_1()
{
  __assert_rtn("_AMFDRFinalize", "AMFDRCreate.c", 232, "type != NULL");
}

void _AMFDRCopyFormattingDescription_cold_1()
{
  __assert_rtn("_AMFDRCopyFormattingDescription", "AMFDRCreate.c", 267, "type != NULL");
}

void AMFDRSealingMapCallMGCopyAnswerInternal_cold_1()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  _AMFDRSealedDataFinalize_cold_1(v0);
}

void _AMFDRSealedDataFinalize_cold_1()
{
  __assert_rtn("_AMFDRSealedDataFinalize", "AMFDRSealedData.c", 46, "type != NULL");
}

void _AMFDRSealedDataCopyFormattingDescription_cold_1()
{
  __assert_rtn("_AMFDRSealedDataCopyFormattingDescription", "AMFDRSealedData.c", 96, "type != NULL");
}

uint64_t AMSupportBase64Decode()
{
  return MEMORY[0x270F97990]();
}

uint64_t AMSupportBase64Encode()
{
  return MEMORY[0x270F97998]();
}

uint64_t AMSupportCFDictionarySetInteger64()
{
  return MEMORY[0x270F979B8]();
}

uint64_t AMSupportCopyDataFromHexString()
{
  return MEMORY[0x270F979C8]();
}

uint64_t AMSupportCopyHexStringFromData()
{
  return MEMORY[0x270F979D8]();
}

uint64_t AMSupportCopyHexStringFromUInt32()
{
  return MEMORY[0x270F979E0]();
}

uint64_t AMSupportCopyHexStringFromUInt64()
{
  return MEMORY[0x270F979E8]();
}

uint64_t AMSupportCopyPreserveFileURL()
{
  return MEMORY[0x270F979F0]();
}

uint64_t AMSupportCopyURLWithAppendedComponent()
{
  return MEMORY[0x270F979F8]();
}

uint64_t AMSupportCreateCStringFromCFString()
{
  return MEMORY[0x270F97A00]();
}

uint64_t AMSupportCreateDataFromFileURL()
{
  return MEMORY[0x270F97A08]();
}

uint64_t AMSupportCreateDictionaryFromFileURL()
{
  return MEMORY[0x270F97A10]();
}

uint64_t AMSupportCreateRandomNumber()
{
  return MEMORY[0x270F97A30]();
}

uint64_t AMSupportCreateURLFromString()
{
  return MEMORY[0x270F97A38]();
}

uint64_t AMSupportDigestMd5()
{
  return MEMORY[0x270F97A40]();
}

uint64_t AMSupportDigestSha1()
{
  return MEMORY[0x270F97A48]();
}

uint64_t AMSupportDigestSha256()
{
  return MEMORY[0x270F97A50]();
}

uint64_t AMSupportDigestSha384()
{
  return MEMORY[0x270F97A58]();
}

uint64_t AMSupportEcDsaCreateSignatureSha256()
{
  return MEMORY[0x270F97A60]();
}

uint64_t AMSupportEcDsaCreateSignatureSha384()
{
  return MEMORY[0x270F97A68]();
}

uint64_t AMSupportEcDsaVerifySignature()
{
  return MEMORY[0x270F97A78]();
}

uint64_t AMSupportFileURLExists()
{
  return MEMORY[0x270F97A80]();
}

uint64_t AMSupportHttpSendSync()
{
  return MEMORY[0x270F97AA0]();
}

uint64_t AMSupportHttpUriEscapeString()
{
  return MEMORY[0x270F97AA8]();
}

uint64_t AMSupportLogDumpMemory()
{
  return MEMORY[0x270F97AB0]();
}

uint64_t AMSupportLogInternal()
{
  return MEMORY[0x270F97AC0]();
}

uint64_t AMSupportMakeDirectory()
{
  return MEMORY[0x270F97AD0]();
}

uint64_t AMSupportPlatformWriteDataToFileURL()
{
  return MEMORY[0x270F97AE8]();
}

uint64_t AMSupportPlatformWriteDataToFileURLUncached()
{
  return MEMORY[0x270F97AF0]();
}

uint64_t AMSupportRemoveFile()
{
  return MEMORY[0x270F97AF8]();
}

uint64_t AMSupportRsaCreateDataFromPem()
{
  return MEMORY[0x270F97B00]();
}

uint64_t AMSupportRsaCreatePemFromData()
{
  return MEMORY[0x270F97B08]();
}

uint64_t AMSupportRsaCreatePrivateKeyFromPEMBuffer()
{
  return MEMORY[0x270F97B10]();
}

uint64_t AMSupportRsaCreatePublicKeyFromPrivateKeyPEMBuffer()
{
  return MEMORY[0x270F97B18]();
}

uint64_t AMSupportRsaVerifySignatureSha1()
{
  return MEMORY[0x270F97B20]();
}

uint64_t AMSupportRsaVerifySignatureSha256()
{
  return MEMORY[0x270F97B28]();
}

uint64_t AMSupportRsaVerifySignatureSha384()
{
  return MEMORY[0x270F97B30]();
}

uint64_t AMSupportSafeFree()
{
  return MEMORY[0x270F97B38]();
}

uint64_t AMSupportSafeRelease()
{
  return MEMORY[0x270F97B40]();
}

uint64_t AMSupportSafeRetain()
{
  return MEMORY[0x270F97B48]();
}

uint64_t AMSupportWriteDataToFileURL()
{
  return MEMORY[0x270F97B50]();
}

uint64_t AMSupportWriteDictionarytoFileURL()
{
  return MEMORY[0x270F97B58]();
}

uint64_t AMSupportX509CreateDerCertFromPEM()
{
  return MEMORY[0x270F97B60]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x270EE42E8](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x270EE42F8](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4310](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x270EE4338](theArray, range.location, range.length, value);
}

CFIndex CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x270EE4340](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E8](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x270EE4870](allocator, locale, dateStyle, timeStyle);
}

CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep)
{
  return (CFDateRef)MEMORY[0x270EE4880](allocator, formatter, string, rangep);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x270EE4898](allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x270EE4910](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4928](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x270EE49B8](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x270EE49D8](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x270EE4A18](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFDictionaryRef CFHTTPMessageCopyAllHeaderFields(CFHTTPMessageRef message)
{
  return (CFDictionaryRef)MEMORY[0x270EE2858](message);
}

CFDataRef CFHTTPMessageCopyBody(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x270EE2860](message);
}

CFURLRef CFHTTPMessageCopyRequestURL(CFHTTPMessageRef request)
{
  return (CFURLRef)MEMORY[0x270EE2878](request);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest(CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x270EE2890](alloc, requestMethod, url, httpVersion);
}

CFTypeID CFHTTPMessageGetTypeID(void)
{
  return MEMORY[0x270EE28A8]();
}

void CFHTTPMessageSetBody(CFHTTPMessageRef message, CFDataRef bodyData)
{
}

void CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField, CFStringRef value)
{
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x270EE4A80](allocator, localeIdentifier);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x270EE4BD0]();
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x270EE4BD8](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return MEMORY[0x270EE4C48](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x270EE4C78](number);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EE4D10](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D40](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x270EE5088](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x270EE5090](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x270EE50A0](alloc, theString, *(void *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50A8](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B8](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x270EE5118](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x270EE5128](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x270EE5148](theString, stringToFind, compareOptions);
  result.CFIndex length = v4;
  result.CFIndex location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5150](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x270EE5160](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x270EE5190](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x270EE51C8](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x270EE5228](theString, prefix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x270EE52F8](allocator, ti);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x270EE5338](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5348](anURL);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE5390](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53C0](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53F0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE5400](allocator, URLString, baseURL);
}

CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(CFAllocatorRef alloc, CFURLRef directoryURL, CFURLEnumeratorOptions option, CFArrayRef propertyKeys)
{
  return (CFURLEnumeratorRef)MEMORY[0x270EE5408](alloc, directoryURL, option, propertyKeys);
}

CFURLEnumeratorResult CFURLEnumeratorGetNextURL(CFURLEnumeratorRef enumerator, CFURLRef *url, CFErrorRef *error)
{
  return MEMORY[0x270EE5410](enumerator, url, error);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5440](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x270EE5448]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x270EE5470](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x270EE5488](alloc, uuid);
}

uint64_t DEREncoderAddBoolean()
{
  return MEMORY[0x270F97B68]();
}

uint64_t DEREncoderAddData()
{
  return MEMORY[0x270F97B70]();
}

uint64_t DEREncoderAddDataFromEncoder()
{
  return MEMORY[0x270F97B78]();
}

uint64_t DEREncoderAddDataNoCopy()
{
  return MEMORY[0x270F97B88]();
}

uint64_t DEREncoderAddSequenceFromEncoder()
{
  return MEMORY[0x270F97B98]();
}

uint64_t DEREncoderAddSetFromEncoder()
{
  return MEMORY[0x270F97BA0]();
}

uint64_t DEREncoderAddUInt32()
{
  return MEMORY[0x270F97BA8]();
}

uint64_t DEREncoderCreate()
{
  return MEMORY[0x270F97BB8]();
}

uint64_t DEREncoderCreateEncodedBuffer()
{
  return MEMORY[0x270F97BC0]();
}

uint64_t DEREncoderDestroy()
{
  return MEMORY[0x270F97BC8]();
}

uint64_t DERImg4DecodeContentFindItemWithTag()
{
  return MEMORY[0x270F97BD0]();
}

uint64_t DERImg4DecodeFindProperty()
{
  return MEMORY[0x270F97BD8]();
}

uint64_t DERImg4DecodeFindPropertyInSequence()
{
  return MEMORY[0x270F97BE0]();
}

uint64_t DERImg4DecodeManifest()
{
  return MEMORY[0x270F97BE8]();
}

uint64_t DERImg4DecodeProperty()
{
  return MEMORY[0x270F97BF0]();
}

uint64_t DERImg4DecodePropertyWithItem()
{
  return MEMORY[0x270F97BF8]();
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x270EF3F30](*(void *)&connection, *(void *)&selector, input, *(void *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x270EF3F40](*(void *)&connection, *(void *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x270EF49E8](*(void *)&mainPort, path);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x270EF4A98](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x270EF4AB0](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x270EF4AE0](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

uint64_t Img4DecodeEvaluateDictionaryProperties()
{
  return MEMORY[0x270F97C00]();
}

uint64_t Img4DecodeGetBooleanFromSection()
{
  return MEMORY[0x270F97C18]();
}

uint64_t Img4DecodeGetManifest()
{
  return MEMORY[0x270F97C28]();
}

uint64_t Img4DecodeGetObjectPropertyData()
{
  return MEMORY[0x270F97C30]();
}

uint64_t Img4DecodeGetObjectPropertyInteger64()
{
  return MEMORY[0x270F97C38]();
}

uint64_t Img4DecodeGetPayload()
{
  return MEMORY[0x270F97C40]();
}

uint64_t Img4DecodeGetPayloadType()
{
  return MEMORY[0x270F97C48]();
}

uint64_t Img4DecodeGetPropertyBoolean()
{
  return MEMORY[0x270F97C50]();
}

uint64_t Img4DecodeGetPropertyData()
{
  return MEMORY[0x270F97C58]();
}

uint64_t Img4DecodeGetPropertyInteger64()
{
  return MEMORY[0x270F97C60]();
}

uint64_t Img4DecodeInit()
{
  return MEMORY[0x270F97C68]();
}

uint64_t Img4DecodeInitManifest()
{
  return MEMORY[0x270F97C70]();
}

uint64_t Img4DecodePerformManifestTrustEvaluationWithCallbacks()
{
  return MEMORY[0x270F97C78]();
}

uint64_t Img4DecodePerformTrustEvaluation()
{
  return MEMORY[0x270F97C88]();
}

uint64_t Img4DecodePerformTrustEvaluationWithCallbacks()
{
  return MEMORY[0x270F97C90]();
}

uint64_t Img4EncodeCreateManifest()
{
  return MEMORY[0x270F97C98]();
}

uint64_t Img4EncodeCreatePayload()
{
  return MEMORY[0x270F97CA0]();
}

uint64_t Img4EncodeItemBegin()
{
  return MEMORY[0x270F97CA8]();
}

uint64_t Img4EncodeItemCopyBuffer()
{
  return MEMORY[0x270F97CB0]();
}

uint64_t Img4EncodeItemDestroy()
{
  return MEMORY[0x270F97CB8]();
}

uint64_t Img4EncodeItemEnd()
{
  return MEMORY[0x270F97CC0]();
}

uint64_t Img4EncodeItemPropertyBool()
{
  return MEMORY[0x270F97CC8]();
}

uint64_t Img4EncodeItemPropertyData()
{
  return MEMORY[0x270F97CD0]();
}

uint64_t Img4EncodeItemPropertyInt64()
{
  return MEMORY[0x270F97CE0]();
}

uint64_t Img4EncodeStitchManifest()
{
  return MEMORY[0x270F97CE8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MGCopyAnswerWithError()
{
  return MEMORY[0x270F95FA8]();
}

uint64_t RPCopyProxyDictionaryWithOptions()
{
  return MEMORY[0x270F96720]();
}

uint64_t RPRegisterForAvailability()
{
  return MEMORY[0x270F96728]();
}

uint64_t RPRegistrationInvalidate()
{
  return MEMORY[0x270F96740]();
}

uint64_t RPRegistrationResume()
{
  return MEMORY[0x270F96750]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

uint64_t ZhuGeCopyValue()
{
  return MEMORY[0x270F0D568]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFGetProgname()
{
  return MEMORY[0x270EE5630]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x270ED85E0]();
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x270ED87B0](__count, __size);
}

uint64_t cc_clear()
{
  return MEMORY[0x270ED87D0]();
}

uint64_t ccder_blob_decode_len()
{
  return MEMORY[0x270ED8890]();
}

uint64_t ccder_blob_decode_range()
{
  return MEMORY[0x270ED88A0]();
}

uint64_t ccder_blob_decode_sequence_tl()
{
  return MEMORY[0x270ED88A8]();
}

uint64_t ccder_blob_decode_tag()
{
  return MEMORY[0x270ED88B0]();
}

uint64_t ccder_blob_decode_tl()
{
  return MEMORY[0x270ED88B8]();
}

uint64_t ccder_blob_encode_body()
{
  return MEMORY[0x270ED88C8]();
}

uint64_t ccder_blob_encode_tl()
{
  return MEMORY[0x270ED88E8]();
}

uint64_t ccder_decode_tl()
{
  return MEMORY[0x270ED8930]();
}

uint64_t ccder_sizeof()
{
  return MEMORY[0x270ED8980]();
}

uint64_t ccdigest()
{
  return MEMORY[0x270ED8A40]();
}

uint64_t ccec_compact_import_pub()
{
  return MEMORY[0x270ED8A68]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x270ED8A98]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x270ED8AA0]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x270ED8AB8]();
}

uint64_t ccmd5_di()
{
  return MEMORY[0x270ED8C28]();
}

uint64_t ccrng()
{
  return MEMORY[0x270ED8C90]();
}

uint64_t ccrsa_ctx_public()
{
  return MEMORY[0x270ED8CA8]();
}

uint64_t ccrsa_export_priv()
{
  return MEMORY[0x270ED8CC0]();
}

uint64_t ccrsa_export_priv_size()
{
  return MEMORY[0x270ED8CC8]();
}

uint64_t ccrsa_export_pub()
{
  return MEMORY[0x270ED8CD0]();
}

uint64_t ccrsa_export_pub_size()
{
  return MEMORY[0x270ED8CD8]();
}

uint64_t ccrsa_generate_key()
{
  return MEMORY[0x270ED8CE8]();
}

uint64_t ccrsa_generate_key_deterministic()
{
  return MEMORY[0x270ED8CF0]();
}

uint64_t ccrsa_import_priv()
{
  return MEMORY[0x270ED8CF8]();
}

uint64_t ccrsa_import_priv_n()
{
  return MEMORY[0x270ED8D00]();
}

uint64_t ccrsa_sign_pkcs1v15()
{
  return MEMORY[0x270ED8D30]();
}

uint64_t ccsha1_di()
{
  return MEMORY[0x270ED8D60]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x270ED8D70]();
}

uint64_t ccsha384_di()
{
  return MEMORY[0x270ED8D78]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x270ED8E70]();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x270ED9C68](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x270ED9D38](*(void *)&a1);
}

uid_t getuid(void)
{
  return MEMORY[0x270ED9DA0]();
}

void if_freenameindex(if_nameindex *a1)
{
}

if_nameindex *if_nameindex(void)
{
  return (if_nameindex *)MEMORY[0x270ED9E78]();
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x270ED9E80](a1);
}

uint64_t lookupPathForPersistentData()
{
  return MEMORY[0x270F49500]();
}

uint64_t lookupPathForPersonalizedData()
{
  return MEMORY[0x270F49508]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x270EDA398](memptr, alignment, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x270EDA4B8](__s, __smax, *(void *)&__c, __n);
}

uint64_t os_variant_is_recovery()
{
  return MEMORY[0x270EDAB58]();
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB3B0](*(void *)&a1, a2, a3, *(void *)&a4);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x270EDB508](*(void *)&a1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x270EDB6D0](__str, __sep, __lasts);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x270EDB7D0](a1, *(void *)&a2, a3, a4, a5, a6);
}

void syslog(int a1, const char *a2, ...)
{
}