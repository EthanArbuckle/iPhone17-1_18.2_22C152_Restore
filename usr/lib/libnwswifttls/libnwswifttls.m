id nwswifttls_copy_definition()
{
  void *v0;
  uint64_t vars8;

  if (nwswifttls_copy_definition_onceToken != -1) {
    dispatch_once(&nwswifttls_copy_definition_onceToken, &__block_literal_global_97);
  }
  v0 = (void *)nwswifttls_copy_definition_definition;

  return v0;
}

uint64_t __nwswifttls_identifier_block_invoke()
{
  qword_1EB79ACF8 = 0;
  g_nwswifttls_identifier = 0u;
  unk_1EB79ACE8 = 0u;
  g_nwswifttls_callbacks = 0u;
  unk_1EB79ABD8 = 0u;
  xmmword_1EB79ABE8 = 0u;
  unk_1EB79ABF8 = 0u;
  xmmword_1EB79AC08 = 0u;
  *(_OWORD *)&qword_1EB79AC18 = 0u;
  xmmword_1EB79AC28 = 0u;
  unk_1EB79AC38 = 0u;
  xmmword_1EB79AC48 = 0u;
  unk_1EB79AC58 = 0u;
  xmmword_1EB79AC68 = 0u;
  *(_OWORD *)&qword_1EB79AC78 = 0u;
  xmmword_1EB79AC88 = 0u;
  unk_1EB79AC98 = 0u;
  xmmword_1EB79ACA8 = 0u;
  unk_1EB79ACB8 = 0u;
  xmmword_1EB79ACC8 = 0u;
  __strlcpy_chk();
  qword_1EB79ACF8 = 0x100000004;
  nw_protocol_set_default_one_to_one_callbacks();
  *(void *)&g_nwswifttls_callbacks = nwswifttls_add_input_handler;
  *((void *)&g_nwswifttls_callbacks + 1) = nwswifttls_remove_input_handler;
  *(void *)&xmmword_1EB79AC08 = nwswifttls_input_available;
  qword_1EB79AC18 = (uint64_t)nwswifttls_get_input_frames;
  *(void *)&xmmword_1EB79ABE8 = nwswifttls_disconnect;
  *((void *)&xmmword_1EB79ABE8 + 1) = nwswifttls_connected;
  *(void *)&xmmword_1EB79ACA8 = nwswifttls_copy_info;
  qword_1EB79AC78 = (uint64_t)nwswifttls_supports_external_data;

  return MEMORY[0x1F40F3B18](&g_nwswifttls_identifier, nwswifttls_create);
}

uint64_t __nwswifttls_copy_definition_block_invoke()
{
  if (nwswifttls_identifier_onceToken != -1) {
    dispatch_once(&nwswifttls_identifier_onceToken, &__block_literal_global_94);
  }
  uint64_t v0 = nw_protocol_definition_create_with_identifier();
  v1 = (void *)nwswifttls_copy_definition_definition;
  nwswifttls_copy_definition_definition = v0;

  nw_protocol_definition_set_options_allocator();
  nw_protocol_definition_set_options_equality_check();
  nw_protocol_definition_set_options_comparator();
  uint64_t v2 = nwswifttls_copy_definition_definition;

  return MEMORY[0x1F40F3A98](v2, nwswifttls_allocate_metadata, nwswifttls_deallocate_metadata);
}

void *nwswifttls_dispatch_data_from_nsdata(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 _createDispatchData];
  }
  return a1;
}

id nwswifttls_serialize_xpc_array(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && MEMORY[0x1BA99F390](v1) == MEMORY[0x1E4F14568])
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
    if (v3)
    {
      char v14 = 0;
      if (xpc_array_get_count(v2))
      {
        size_t v4 = 0;
        uint64_t v5 = MEMORY[0x1E4F145F0];
        do
        {
          uint64_t v6 = xpc_array_get_value(v2, v4);
          v7 = (void *)v6;
          if (v6)
          {
            if (MEMORY[0x1BA99F390](v6) == v5)
            {
              string = xpc_array_get_string(v2, v4);
              if (string)
              {
                v9 = string;
                size_t v10 = strlen(string);
                if (v10 <= 0xFF)
                {
                  size_t v11 = v10;
                  char v14 = v10;
                  [v3 appendBytes:&v14 length:1];
                  [v3 appendBytes:v9 length:v11];
                }
              }
            }
          }

          ++v4;
        }
        while (v4 < xpc_array_get_count(v2));
      }
      id v12 = v3;
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

BOOL nwswifttls_get_encryption_level(uint64_t a1, int *a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = [*(id *)(a1 + 280) getEncryptionLevel] + 1;
    BOOL result = 0;
    switch(v5)
    {
      case 0:
        return result;
      case 1:
        *a2 = 0;
        goto LABEL_11;
      case 2:
        BOOL result = 1;
        *a2 = 1;
        return result;
      case 3:
        int v6 = 2;
        goto LABEL_10;
      case 4:
        int v6 = 3;
LABEL_10:
        *a2 = v6;
LABEL_11:
        BOOL result = 1;
        break;
      default:
        BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (result)
        {
          nwswifttls_get_encryption_level_cold_1();
          BOOL result = 0;
        }
        break;
    }
  }
  return result;
}

void nwswifttls_update_encryption_level(void *a1, int a2, char a3)
{
  uint64_t v5 = a1;
  int v6 = v5;
  if (v5)
  {
    v7 = (const void *)v5[24];
    if (v7)
    {
      if (v6[25])
      {
        v8 = _Block_copy(v7);
        v9 = v6[25];
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = __nwswifttls_update_encryption_level_block_invoke;
        v10[3] = &unk_1E6112428;
        v10[4] = v8;
        int v11 = a2;
        char v12 = a3;
        dispatch_async(v9, v10);
      }
    }
  }
}

uint64_t __nwswifttls_update_encryption_level_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

BOOL nwswifttls_get_encryption_key_label(uint64_t a1, int a2, const char **a3)
{
  BOOL result = 0;
  if (a1)
  {
    if (a3)
    {
      int v12 = 0;
      BOOL result = nwswifttls_get_encryption_level(a1, &v12);
      if (result)
      {
        v7 = "SERVER_TRAFFIC_SECRET_0";
        if (a2) {
          v7 = "CLIENT_TRAFFIC_SECRET_0";
        }
        v8 = "SERVER_HANDSHAKE_TRAFFIC_SECRET";
        if (a2) {
          v8 = "CLIENT_HANDSHAKE_TRAFFIC_SECRET";
        }
        v9 = "SERVER_UNDEFINED_SECRET";
        if (a2) {
          v9 = "CLIENT_UNDEFINED_SECRET";
        }
        size_t v10 = "SERVER_EARLY_TRAFFIC_SECRET";
        if (a2) {
          size_t v10 = "CLIENT_EARLY_TRAFFIC_SECRET";
        }
        if (v12 == 1) {
          v9 = v10;
        }
        if (v12 != 2) {
          v8 = v9;
        }
        if (v12 == 3) {
          int v11 = v7;
        }
        else {
          int v11 = v8;
        }
        *a3 = v11;
      }
    }
  }
  return result;
}

void ssl_log_secret(const char *a1, void *a2, void *a3)
{
  v24[15] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  v7 = v6;
  if (v5 && a1 && v6)
  {
    uint64_t v8 = [v5 length];
    uint64_t v9 = [v5 bytes];
    id v10 = v7;
    uint64_t v11 = [v10 length];
    id v12 = v10;
    uint64_t v13 = [v12 bytes];
    v24[0] = @"%c";
    v24[1] = a1;
    v24[2] = strlen(a1);
    v24[3] = @"%c";
    v24[4] = " ";
    v24[5] = 1;
    v24[6] = @"%02x";
    v24[7] = v9;
    v24[8] = v8;
    v24[9] = @"%c";
    v24[10] = " ";
    v24[11] = 1;
    v24[12] = @"%02x";
    v24[13] = v13;
    v24[14] = v11;
    id v14 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    for (uint64_t i = 0; i != 5; ++i)
    {
      v16 = (id *)&v24[3 * i];
      id v17 = *v16;
      v18 = (char *)v16[2];
      if (v18)
      {
        v19 = (unsigned __int8 *)v16[1];
        do
        {
          unsigned int v20 = *v19++;
          [v14 appendFormat:v17, v20];
          --v18;
        }
        while (v18);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v14;
      _os_log_impl(&dword_1B56C5000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    for (uint64_t j = 12; j != -3; j -= 3)
  }
}

void sub_1B56C7DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  for (uint64_t i = 96; i != -24; i -= 24)

  _Unwind_Resume(a1);
}

void nwswifttls_update_encryption_secret(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a1;
  id v9 = a5;
  id v10 = v9;
  if (v8 && v9)
  {
    id v14 = 0;
    if (*((unsigned char *)v8 + 274) && nwswifttls_get_encryption_key_label((uint64_t)v8, a4, &v14))
    {
      uint64_t v11 = v14;
      id v12 = [v8[35] getClientRandom];
      ssl_log_secret(v11, v12, v10);
    }
    if (v8[10] && v8[23])
    {
      nw_protocol_metadata_access_handle();
      (*((void (**)(id, uint64_t, uint64_t, void *, uint64_t))v8[23] + 2))(v8[23], a2, a4, v10, v13);
    }
  }
}

BOOL __nwswifttls_update_encryption_secret_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    *(_WORD *)(a2 + 34) = *(_WORD *)(a1 + 32);
  }
  return a2 != 0;
}

void nwswifttls_update_quic_transport_parameters(uint64_t a1, void *a2)
{
  id v3 = a2;
  size_t v4 = v3;
  if (a1 && *(void *)(a1 + 80))
  {
    id v5 = v3;
    nw_protocol_metadata_access_handle();
  }
}

BOOL __nwswifttls_update_quic_transport_parameters_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2 && !*(void *)(a2 + 152))
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v3 = (void *)[v3 _createDispatchData];
      size_t v4 = *(void **)(a2 + 152);
    }
    else
    {
      size_t v4 = 0;
    }
    *(void *)(a2 + 152) = v3;
  }
  return a2 != 0;
}

void nwswifttls_update_session_state(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && v1[10] && v1[26] && v1[27])
  {
    uint64_t v10 = MEMORY[0x1E4F143A8];
    uint64_t v11 = 3221225472;
    id v12 = __nwswifttls_update_session_state_block_invoke;
    uint64_t v13 = &unk_1E6112470;
    id v14 = v1;
    nw_protocol_metadata_access_handle();
    id v3 = _Block_copy((const void *)v14[26]);
    id v4 = (id)v14[10];
    id v5 = v14[27];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nwswifttls_update_session_state_block_invoke_2;
    block[3] = &unk_1E6112498;
    id v8 = v4;
    id v9 = v3;
    id v6 = v4;
    dispatch_async(v5, block);
  }
}

BOOL __nwswifttls_update_session_state_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2 && !*(void *)(a2 + 16))
  {
    *(void *)(a2 + 16) = *(void *)(a1 + 32);
    *(void *)(a2 + 24) = nwswifttls_copy_serialized_session;
  }
  return a2 != 0;
}

uint64_t nwswifttls_copy_serialized_session(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = [*(id *)(a1 + 280) getSessionState];
  uint64_t v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 _createDispatchData];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t __nwswifttls_update_session_state_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t nwswifttls_update_early_data_accepted(uint64_t result)
{
  if (result)
  {
    BOOL result = *(void *)(result + 80);
    if (result) {
      return nw_protocol_metadata_access_handle();
    }
  }
  return result;
}

BOOL __nwswifttls_update_early_data_accepted_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    *(_WORD *)(a2 + 328) = *(_WORD *)(a2 + 328) & 0xFFF7 | (8 * (*(unsigned char *)(a1 + 32) & 0x1F));
  }
  return a2 != 0;
}

void nwswifttls_allow_exported_authenticators(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && v1[10])
  {
    uint64_t v3 = v1;
    nw_protocol_metadata_access_handle();
  }
}

BOOL __nwswifttls_allow_exported_authenticators_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2 && !*(void *)(a2 + 352))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a2 + 344) = nwswifttls_copy_copy_authenticator_trust;
    *(void *)(a2 + 352) = v2;
  }
  return a2 != 0;
}

sec_trust_t nwswifttls_copy_copy_authenticator_trust(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sec_trust_t v5 = 0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3)
  {
    uint64_t v10 = a1;
    uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
    id v12 = 0;
    if (a4 && a5) {
      id v12 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:a5];
    }
    uint64_t v13 = [v10[35] validateAuthenticatorWithAuthenticator:v11 context:v12 keyParser:&__block_literal_global];
    if (![v13 count])
    {
      sec_trust_t v5 = 0;
LABEL_24:

      return v5;
    }
    v26 = v10;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v16 = v13;
    uint64_t v17 = [v16 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v29 != v19) {
            objc_enumerationMutation(v16);
          }
          SecCertificateRef v21 = SecCertificateCreateWithData(v14, *(CFDataRef *)(*((void *)&v28 + 1) + 8 * i));
          if (v21)
          {
            SecCertificateRef v22 = v21;
            CFArrayAppendValue(Mutable, v21);
            CFRelease(v22);
          }
        }
        uint64_t v18 = [v16 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }
      while (v18);
    }

    SSLWithKeyUsage = (const void *)SecPolicyCreateSSLWithKeyUsage();
    if (SSLWithKeyUsage)
    {
      v24 = SSLWithKeyUsage;
      SecTrustRef trust = 0;
      SecTrustCreateWithCertificates(Mutable, SSLWithKeyUsage, &trust);
      CFRelease(v24);
      CFRelease(Mutable);
      if (trust)
      {
        sec_trust_t v5 = sec_trust_create(trust);
        CFRelease(trust);
LABEL_23:
        uint64_t v10 = v26;
        goto LABEL_24;
      }
    }
    else
    {
      CFRelease(Mutable);
    }
    sec_trust_t v5 = 0;
    goto LABEL_23;
  }
  return v5;
}

SecKeyRef __nwswifttls_copy_copy_authenticator_trust_block_invoke(uint64_t a1, void *a2)
{
  CFDataRef v2 = a2;
  if (v2 && (uint64_t v3 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2)) != 0)
  {
    id v4 = v3;
    SecKeyRef v5 = SecCertificateCopyKey(v3);
    CFRelease(v4);
    if (v5)
    {
      SecKeyCopyPublicBytes();
      CFRelease(v5);
      SecKeyRef v5 = 0;
    }
  }
  else
  {
    SecKeyRef v5 = 0;
  }

  return v5;
}

uint64_t nwswifttls_disconnect(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(id *)(result + 40))
    {
      uint64_t v2 = *(void *)(v1 + 32);
      if (v2)
      {
        uint64_t v3 = *(void *)(v2 + 24);
        if (v3)
        {
          id v4 = *(void (**)(void))(v3 + 32);
          if (v4) {
            v4();
          }
        }
      }
    }
    return MEMORY[0x1F41817F8]();
  }
  return result;
}

long long *nwswifttls_identifier()
{
  if (nwswifttls_identifier_onceToken != -1) {
    dispatch_once(&nwswifttls_identifier_onceToken, &__block_literal_global_94);
  }
  return &g_nwswifttls_identifier;
}

uint64_t nwswifttls_add_input_handler(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = (char *)*(id *)(a1 + 40);
    if (v4)
    {
      uint64_t v5 = 0;
      if (!a2 || *(void *)(a1 + 48)) {
        goto LABEL_12;
      }
      uint64_t v6 = *(void *)(a2 + 24);
      if (v6)
      {
        v7 = *(void (**)(uint64_t))(v6 + 112);
        if (v7)
        {
          id v8 = v7(a2);
          if (v8
            && (uint64_t v9 = nw_parameters_copy_protocol_options_legacy(),
                uint64_t v10 = (void *)*((void *)v4 + 9),
                *((void *)v4 + 9) = v9,
                v10,
                *((void *)v4 + 9)))
          {
            uint64_t v11 = (void *)nw_protocol_copy_swift_tls_definition();
            uint64_t singleton = nw_protocol_metadata_create_singleton();
            uint64_t v13 = (void *)*((void *)v4 + 10);
            *((void *)v4 + 10) = singleton;

            uuid_copy((unsigned __int8 *)v4 + 8, (const unsigned __int8 *)a2);
            *(void *)(a2 + 32) = v4 + 8;
            *(void *)(a1 + 48) = a2;
            uint64_t v5 = 1;
          }
          else
          {
            uint64_t v5 = 0;
          }

          goto LABEL_12;
        }
      }
    }
    uint64_t v5 = 0;
LABEL_12:

    return v5;
  }
  return 0;
}

uint64_t nwswifttls_remove_input_handler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    id v6 = *(id *)(a1 + 40);
    if (v6 && (*(void *)(a2 + 32) = 0, *(void *)(v3 + 48) == a2))
    {
      uint64_t v7 = 0;
      *(void *)(v3 + 48) = 0;
      uint64_t v8 = MEMORY[0x1E4F143A8];
      do
      {
        nw_frame_array_foreach();
        v7 += 8;
      }
      while (v7 != 32);
      uint64_t v14 = *(void *)(v3 + 32);
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 24);
        if (v15)
        {
          id v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
          if (v16) {
            v16(v14, v3, a3, v9, v10, v11, v12, v13, v8, 3221225472);
          }
        }
      }
      if (a3)
      {
        uint64_t v17 = *(void **)(v3 + 40);
        *(void *)(v3 + 40) = 0;
      }
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  return v3;
}

void nwswifttls_input_available(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    if (v4 && *(void *)(a1 + 48))
    {
      if (v4[11] != a2 && v4[12] != a2 && v4[13] != a2)
      {
        if (v4[14] != a2 || a2 == 0) {
          goto LABEL_19;
        }
        goto LABEL_14;
      }
      if (a2)
      {
LABEL_14:
        uint64_t v7 = *(void *)(a2 + 24);
        if (v7 && *(void *)(v7 + 88) && *(void *)(v7 + 96))
        {
          v9[0] = 0;
          v9[1] = 0;
          nw_frame_array_init();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)(a2 + 24) + 80))(a2, (uint64_t)v5 + 8, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v9))
          {
            id v8 = v5;
            nw_frame_array_foreach();
          }
        }
      }
    }
LABEL_19:
  }
}

uint64_t nwswifttls_get_input_frames()
{
  return 0;
}

void nwswifttls_connected(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  id v4 = (id *)*(id *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6)
      {
        uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
        if (v7)
        {
          v27 = v4;
          v7(v5, a2);
          id v4 = v27;
          if (*(void *)(a1 + 32) == a2)
          {
            if (*((unsigned char *)v27 + 277))
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 + 24) + 40))(v5, a1);
            }
            else
            {
              if (*((unsigned char *)v27 + 276)) {
                goto LABEL_12;
              }
              *((unsigned char *)v27 + 276) = 1;
              id v8 = (*(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 24) + 112))();
              if ((nw_parameters_get_server_mode() & 1) == 0)
              {
                *((_DWORD *)v27 + 62) = nwswifttls_get_transport_protocol(v8);
                if (os_variant_allows_internal_security_policies()
                  && nw_parameters_get_enable_tls_keylog())
                {
                  *((unsigned char *)v27 + 274) = 1;
                }
                if (nwswifttls_configure_with_sec_protocol_options(a1))
                {
                  id v9 = v27[28];
                  id v10 = v27[30];
                  id v11 = nwswifttls_serialize_xpc_array(v27[32]);
                  if (*((unsigned char *)v27 + 272) || *((unsigned char *)v27 + 273))
                  {
                    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                    uint64_t v13 = [NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v27 + 272)];
                    [v12 addObject:v13];

                    uint64_t v14 = [NSNumber numberWithUnsignedInt:*((unsigned __int8 *)v27 + 273)];
                    [v12 addObject:v14];
                  }
                  else
                  {
                    id v12 = 0;
                  }
                  uint64_t v15 = [_TtC10nwswifttls14STLSHandshaker alloc];
                  LOBYTE(v26) = *((unsigned char *)v27 + 275);
                  uint64_t v16 = [(STLSHandshaker *)v15 init:v27[29] serverName:v27[33] quicTransportParameters:v10 alpn:v11 sessionState:v9 ticketRequest:v12 useX25519KeyExchange:v26];
                  id v17 = v27[35];
                  v27[35] = (id)v16;

                  id v18 = v27[29];
                  v27[29] = 0;

                  id v19 = v27[30];
                  v27[30] = 0;

                  id v20 = v27[32];
                  v27[32] = 0;

                  id v21 = v27[33];
                  v27[33] = 0;

                  id v22 = v27[35];
                  if (v22)
                  {
                    id v23 = [v22 startHandshake];
                    v24 = v23;
                    if (v23)
                    {
                      id v25 = v23;
                      nwswifttls_add_message(v27, 0, [v25 bytes], [v25 length]);
                      nwswifttls_send_messages(v27, 0);
                      nwswifttls_update_encryption_secrets(v27);
                    }
                    else
                    {
                      nwswifttls_disconnect(a1);
                    }
                  }
                  else
                  {
                    nwswifttls_disconnect(a1);
                  }
                }
              }
            }
            id v4 = v27;
          }
        }
      }
    }
  }
LABEL_12:
}

uint64_t nwswifttls_copy_info(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  id v4 = *(id *)(a1 + 40);
  if (v4
    && (uint64_t v5 = *(void *)(a1 + 32)) != 0
    && (uint64_t v6 = *(void *)(v5 + 24)) != 0
    && (uint64_t v7 = *(uint64_t (**)(void))(v6 + 224)) != 0)
  {
    if (a2 == 255)
    {
      uint64_t v8 = v7();
      if (!v8) {
        uint64_t v8 = nw_array_create();
      }
      nw_array_append();
    }
    else
    {
      uint64_t v8 = v7();
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t nwswifttls_supports_external_data()
{
  return 1;
}

nw_protocol *nwswifttls_create()
{
  uint64_t v0 = objc_alloc_init(NWConcrete_nwswifttls);
  uint64_t v1 = v0;
  if (v0)
  {
    p_protocol = &v0->protocol;
    v0->protocol.identifier = (nw_protocol_identifier *)&g_nwswifttls_identifier;
    v0->protocol.callbacks = (nw_protocol_callbacks *)&g_nwswifttls_callbacks;
    uint64_t v3 = v0;
    v3->protocol.handle = v3;
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
  }
  else
  {
    p_protocol = 0;
  }

  return p_protocol;
}

void *nwswifttls_allocate_options()
{
  return malloc_type_calloc(1uLL, 0x170uLL, 0x10F00400E22A4EFuLL);
}

char *nwswifttls_copy_options(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (a2)
  {
    id v4 = (char *)malloc_type_calloc(1uLL, 0x170uLL, 0x10F00400E22A4EFuLL);
    if (v4)
    {
      uint64_t v5 = *(const void **)(a2 + 144);
      if (v5)
      {
        uint64_t v6 = _Block_copy(v5);
        uint64_t v7 = (void *)*((void *)v4 + 18);
        *((void *)v4 + 18) = v6;
      }
      uint64_t v8 = *(void **)(a2 + 152);
      if (v8) {
        objc_storeStrong((id *)v4 + 19, v8);
      }
      id v9 = *(const void **)(a2 + 160);
      if (v9)
      {
        id v10 = _Block_copy(v9);
        id v11 = (void *)*((void *)v4 + 20);
        *((void *)v4 + 20) = v10;
      }
      id v12 = *(void **)(a2 + 168);
      if (v12) {
        objc_storeStrong((id *)v4 + 21, v12);
      }
      uint64_t v13 = *(const void **)(a2 + 176);
      if (v13)
      {
        uint64_t v14 = _Block_copy(v13);
        uint64_t v15 = (void *)*((void *)v4 + 22);
        *((void *)v4 + 22) = v14;
      }
      uint64_t v16 = *(void **)(a2 + 184);
      if (v16) {
        objc_storeStrong((id *)v4 + 23, v16);
      }
      id v17 = *(const void **)(a2 + 328);
      if (v17)
      {
        id v18 = _Block_copy(v17);
        id v19 = (void *)*((void *)v4 + 41);
        *((void *)v4 + 41) = v18;
      }
      CFArrayRef v20 = *(const __CFArray **)(a2 + 280);
      if (v20) {
        *((void *)v4 + 35) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v20);
      }
      id v21 = *(void **)(a2 + 48);
      if (v21)
      {
        xpc_object_t v22 = xpc_copy(v21);
        id v23 = (void *)*((void *)v4 + 6);
        *((void *)v4 + 6) = v22;
      }
      v24 = *(void **)(a2 + 40);
      if (v24)
      {
        xpc_object_t v25 = xpc_copy(v24);
        uint64_t v26 = (void *)*((void *)v4 + 5);
        *((void *)v4 + 5) = v25;
      }
      v27 = *(void **)(a2 + 232);
      if (v27)
      {
        xpc_object_t v28 = xpc_copy(v27);
        long long v29 = (void *)*((void *)v4 + 29);
        *((void *)v4 + 29) = v28;
      }
      long long v30 = *(void **)(a2 + 136);
      if (v30) {
        objc_storeStrong((id *)v4 + 17, v30);
      }
      uint64_t v31 = *(unsigned int *)(v4 + 361);
      unint64_t v32 = v31 & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)v4[365] << 32);
      *(_DWORD *)(v4 + 361) = v31 & 0xFF7FFFFF | *(_DWORD *)(a2 + 361) & 0x800000;
      v4[365] = BYTE4(v32);
      uint64_t v33 = *(void **)(a2 + 192);
      if (v33) {
        objc_storeStrong((id *)v4 + 24, v33);
      }
      v34 = *(const char **)(a2 + 8);
      if (v34) {
        *((void *)v4 + 1) = strdup(v34);
      }
      if (*(unsigned char *)(a2 + 296)) {
        v4[296] = *(unsigned char *)(a2 + 296);
      }
      if (*(unsigned char *)(a2 + 297)) {
        v4[297] = *(unsigned char *)(a2 + 297);
      }
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void nwswifttls_deallocate_options(void *a1, uint64_t a2)
{
  id v29 = a1;
  if (a2)
  {
    free(*(void **)(a2 + 8));
    free(*(void **)(a2 + 16));
    id v3 = *(void **)(a2 + 40);
    *(void *)(a2 + 40) = 0;

    id v4 = *(void **)(a2 + 232);
    *(void *)(a2 + 232) = 0;

    uint64_t v5 = *(void **)(a2 + 48);
    *(void *)(a2 + 48) = 0;

    uint64_t v6 = *(void **)(a2 + 56);
    *(void *)(a2 + 56) = 0;

    uint64_t v7 = *(void **)(a2 + 88);
    *(void *)(a2 + 88) = 0;

    uint64_t v8 = *(void **)(a2 + 96);
    *(void *)(a2 + 96) = 0;

    id v9 = *(void **)(a2 + 104);
    *(void *)(a2 + 104) = 0;

    id v10 = *(void **)(a2 + 112);
    *(void *)(a2 + 112) = 0;

    id v11 = *(void **)(a2 + 120);
    *(void *)(a2 + 120) = 0;

    id v12 = *(void **)(a2 + 128);
    *(void *)(a2 + 128) = 0;

    uint64_t v13 = *(void **)(a2 + 176);
    *(void *)(a2 + 176) = 0;

    uint64_t v14 = *(void **)(a2 + 184);
    *(void *)(a2 + 184) = 0;

    uint64_t v15 = *(void **)(a2 + 72);
    *(void *)(a2 + 72) = 0;

    uint64_t v16 = *(void **)(a2 + 192);
    *(void *)(a2 + 192) = 0;

    id v17 = *(void **)(a2 + 136);
    *(void *)(a2 + 136) = 0;

    id v18 = *(void **)(a2 + 144);
    *(void *)(a2 + 144) = 0;

    id v19 = *(void **)(a2 + 152);
    *(void *)(a2 + 152) = 0;

    CFArrayRef v20 = *(void **)(a2 + 160);
    *(void *)(a2 + 160) = 0;

    id v21 = *(void **)(a2 + 168);
    *(void *)(a2 + 168) = 0;

    xpc_object_t v22 = *(void **)(a2 + 176);
    *(void *)(a2 + 176) = 0;

    id v23 = *(void **)(a2 + 184);
    *(void *)(a2 + 184) = 0;

    v24 = *(void **)(a2 + 328);
    *(void *)(a2 + 328) = 0;

    xpc_object_t v25 = *(void **)(a2 + 264);
    *(void *)(a2 + 264) = 0;

    uint64_t v26 = *(void **)(a2 + 256);
    *(void *)(a2 + 256) = 0;

    v27 = *(void **)(a2 + 80);
    *(void *)(a2 + 80) = 0;

    free(*(void **)(a2 + 336));
    *(void *)(a2 + 352) = 0;
    xpc_object_t v28 = *(const void **)(a2 + 280);
    if (v28)
    {
      CFRelease(v28);
      *(void *)(a2 + 280) = 0;
    }
  }
  cc_clear();
  free((void *)a2);
}

uint64_t nwswifttls_options_are_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40F74B0](a2, a3, 0);
}

uint64_t nwswifttls_options_compare(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  return MEMORY[0x1F40F74B0](a2, a3, a4);
}

void *nwswifttls_allocate_metadata()
{
  return malloc_type_calloc(1uLL, 0x168uLL, 0x10D00404C253F0CuLL);
}

void nwswifttls_deallocate_metadata(int a1, void **a2)
{
  if (a2)
  {
    free(a2[5]);
    free(a2[22]);
    free(a2[6]);
    free(a2[7]);
    id v3 = a2[11];
    a2[11] = 0;

    id v4 = a2[13];
    a2[13] = 0;

    uint64_t v5 = a2[14];
    a2[14] = 0;

    uint64_t v6 = a2[17];
    a2[17] = 0;

    uint64_t v7 = a2[18];
    a2[18] = 0;

    uint64_t v8 = a2[19];
    a2[19] = 0;

    id v9 = a2[20];
    a2[20] = 0;

    id v10 = a2[21];
    a2[21] = 0;

    id v11 = a2[10];
    a2[10] = 0;
  }

  free(a2);
}

uint64_t nwswifttls_complete_handshake(void *a1, int a2)
{
  id v3 = a1;
  if (v3)
  {
    uint64_t v8 = v3;
    if (a2)
    {
      v3[277] = 1;
      nwswifttls_allow_exported_authenticators(v3);
      uint64_t v4 = *((void *)v8 + 7);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          uint64_t v6 = *(void (**)(void))(v5 + 40);
          if (v6) {
            v6();
          }
        }
      }
    }
    else
    {
      nwswifttls_send_error(v3, 4294957438);
    }
  }

  return MEMORY[0x1F41817F8]();
}

void nwswifttls_send_error(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (v3[276])
    {
      if (!v3[278])
      {
        uint64_t v4 = *((void *)v3 + 7);
        if (v4)
        {
          uint64_t v5 = *(void *)(v4 + 24);
          if (v5)
          {
            uint64_t v6 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 56);
            if (v6)
            {
              uint64_t v7 = v3 + 8;
              v3[278] = 1;
              uint64_t v8 = v3;
              v6(v4, v3 + 8, a2);
              (*(void (**)(uint64_t, char *))(*(void *)(v4 + 24) + 48))(v4, v7);
              id v3 = v8;
            }
          }
        }
      }
    }
  }
}

uint64_t nwswifttls_add_message(void *a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = v7;
  uint64_t v9 = 0;
  if (v7)
  {
    if (a3)
    {
      if (a2 <= 3)
      {
        uint64_t v9 = *((void *)v7 + a2 + 11);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 24);
          if (v10
            && *(void *)(v10 + 88)
            && (v13[0] = 0, v13[1] = 0, nw_frame_array_init(), !HIDWORD(a4))
            && (*(unsigned int (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void *))(*(void *)(v9 + 24) + 88))(v9, (uint64_t)v8 + 8, a4, a4, 1, v13) == 1)
          {
            id v11 = nw_frame_array_first();
            if (v11)
            {
              nw_frame_unclaimed_bytes();
              uint64_t v9 = a4 == 0;
              if (!a4)
              {
                nw_frame_claim();
                nw_frame_collapse();
                nw_frame_unclaim();
                nw_frame_array_remove();
                nw_frame_array_append();
              }
            }
            else
            {
              uint64_t v9 = 0;
            }
          }
          else
          {
            uint64_t v9 = 0;
          }
        }
      }
    }
  }

  return v9;
}

uint64_t nwswifttls_send_messages(void *a1, unsigned int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  if (v3)
  {
    if (a2 <= 3)
    {
      uint64_t v5 = *((void *)v3 + a2 + 11);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6 && *(void *)(v6 + 96))
        {
          uint64_t v7 = (uint64_t)v3 + 16 * a2 + 120;
          if ((nw_frame_array_is_empty() & 1) == 0) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 + 24) + 96))(v5, v7);
          }
          uint64_t v5 = 1;
        }
        else
        {
          uint64_t v5 = 0;
        }
      }
    }
  }

  return v5;
}

uint64_t nwswifttls_send_alert(void *a1, unsigned int a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2 <= 3)
    {
      uint64_t v4 = v3[a2 + 11];
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          uint64_t v6 = *(void (**)(void))(v5 + 56);
          if (v6) {
            v6();
          }
        }
      }
    }
  }

  return MEMORY[0x1F41817F8]();
}

uint64_t __nwswifttls_finalize_output_frame_arrays_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

BOOL __nwswifttls_input_available_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:nw_frame_unclaimed_bytes() length:0];
  if (v4)
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 280) continueHandshake:v4];
    uint64_t v6 = v5;
    uint64_t v7 = *(id **)(a1 + 32);
    if (v5)
    {
      id v8 = v5;
      nwswifttls_add_message(v7, 2u, [v8 bytes], [v8 length]);
      nwswifttls_send_messages(*(void **)(a1 + 32), 2u);
    }
    else
    {
      uint64_t v9 = [v7[35] getErrorCode];
      if (v9) {
        nwswifttls_send_error(*(void **)(a1 + 32), v9);
      }
    }
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = [*(id *)(v10 + 280) getPeerQUICTransportParameters];
    nwswifttls_update_quic_transport_parameters(v10, v11);

    nwswifttls_update_encryption_secrets(*(void **)(a1 + 32));
    if ([*(id *)(*(void *)(a1 + 32) + 280) hasSessionState]) {
      nwswifttls_update_session_state(*(void **)(a1 + 32));
    }
    uint64_t v12 = *(void *)(a1 + 32);
    [*(id *)(v12 + 280) getEarlyDataAccepted];
    nwswifttls_update_early_data_accepted(v12);
    nw_frame_array_remove();
    nw_frame_finalize();
  }
  else
  {
    nw_frame_array_remove();
    nw_frame_finalize();
    uint64_t v6 = v3;
  }

  return v4 != 0;
}

void nwswifttls_update_encryption_secrets(void *a1)
{
  uint64_t v1 = a1;
  unsigned int v10 = 0;
  if (nwswifttls_get_encryption_level((uint64_t)v1, (int *)&v10))
  {
    unsigned __int16 v2 = [v1[35] getNegotiatedCiphersuite];
    id v3 = [v1[35] getEncryptionSecretWithWrite:0];
    uint64_t v5 = nwswifttls_dispatch_data_from_nsdata(v3, v4);

    uint64_t v6 = v2;
    nwswifttls_update_encryption_secret(v1, v10, v6, 0, v5);
    uint64_t v7 = [v1[35] getEncryptionSecretWithWrite:1];
    uint64_t v9 = nwswifttls_dispatch_data_from_nsdata(v7, v8);

    nwswifttls_update_encryption_secret(v1, v10, v6, 1, v9);
    if (v10 == 3) {
      nwswifttls_complete_handshake(v1, 1);
    }
  }
}

uint64_t nwswifttls_get_transport_protocol(NSObject *a1)
{
  uint64_t v1 = nw_parameters_copy_default_protocol_stack(a1);
  unsigned __int16 v2 = nw_protocol_stack_copy_original_proxied_transport_protocol();
  if (v2 || (unsigned __int16 v2 = nw_protocol_stack_copy_transport_protocol(v1)) != 0)
  {
    nw_protocol_definition_t v3 = nw_protocol_options_copy_definition(v2);
    if (v3)
    {
      uint64_t v4 = (void *)nw_protocol_copy_quic_connection_definition();
      if (MEMORY[0x1BA99EC60](v3, v4))
      {
      }
      else
      {
        uint64_t v6 = (void *)nw_protocol_copy_quic_stream_definition();
        char v7 = MEMORY[0x1BA99EC60](v3, v6);

        if ((v7 & 1) == 0)
        {
          nw_protocol_definition_t v8 = nw_protocol_copy_tcp_definition();
          uint64_t v5 = MEMORY[0x1BA99EC60](v3, v8);

          goto LABEL_11;
        }
      }
      uint64_t v5 = 2;
    }
    else
    {
      uint64_t v5 = 0;
    }
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v5 = 0;
LABEL_12:

  return v5;
}

BOOL nwswifttls_configure_server_name(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    if (a2 && *(void *)(a2 + 8))
    {
      uint64_t v7 = [[NSString alloc] initWithCString:*(void *)(a2 + 8) encoding:4];
      nw_protocol_definition_t v8 = (void *)v6[33];
      v6[33] = v7;
      BOOL v9 = 1;
    }
    else
    {
      nw_protocol_definition_t v8 = v5;
      if (a3
        && ((*(void (**)(void))(*(void *)(*(void *)(a3 + 48) + 24) + 136))(),
            (uint64_t v10 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        id v11 = (void *)v10;
        uint64_t v12 = (void *)nw_endpoint_copy_proxy_original_endpoint();
        uint64_t v13 = v12;
        if (v12)
        {
          id v14 = v12;

          id v11 = v14;
        }
        char v24 = 0;
        endpoint_name = (void *)nwswifttls_get_endpoint_name(v11, &v24);
        uint64_t v16 = v11;
        uint64_t v17 = nw_endpoint_copy_parent_endpoint();
        id v18 = v16;
        if (v17)
        {
          id v19 = (void *)v17;
          CFArrayRef v20 = v16;
          do
          {
            id v18 = v19;

            id v19 = (void *)nw_endpoint_copy_parent_endpoint();
            CFArrayRef v20 = v18;
          }
          while (v19);
        }
        if (nw_endpoint_get_type(v18) == (nw_endpoint_type_url|nw_endpoint_type_address))
        {
          if (v24) {
            free(endpoint_name);
          }
          endpoint_name = (void *)nwswifttls_get_endpoint_name(v18, &v24);
        }
        BOOL v9 = endpoint_name != 0;
        if (endpoint_name)
        {
          uint64_t v21 = [[NSString alloc] initWithCString:endpoint_name encoding:4];
          xpc_object_t v22 = (void *)v8[33];
          v8[33] = v21;

          if (v24) {
            free(endpoint_name);
          }
        }
      }
      else
      {
        BOOL v9 = 0;
      }
    }
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

BOOL nwswifttls_configure_application_protocols(void *a1, uint64_t a2)
{
  id v3 = a1;
  BOOL v4 = 0;
  if (v3 && a2)
  {
    if (!*(void *)(a2 + 48) || (uint64_t v5 = MEMORY[0x1BA99F390](), v6 = MEMORY[0x1E4F14568], v5 != MEMORY[0x1E4F14568]))
    {
      BOOL v4 = 0;
      goto LABEL_23;
    }
    xpc_object_t v7 = xpc_array_create(0, 0);
    nw_protocol_definition_t v8 = (void *)*((void *)v3 + 32);
    *((void *)v3 + 32) = v7;

    if (!xpc_array_get_count(*(xpc_object_t *)(a2 + 48)))
    {
LABEL_22:
      BOOL v4 = xpc_array_get_count(*((xpc_object_t *)v3 + 32)) != 0;
      goto LABEL_23;
    }
    size_t v9 = 0;
    while (1)
    {
      uint64_t v10 = xpc_array_get_value(*(xpc_object_t *)(a2 + 48), v9);
      if (MEMORY[0x1BA99F390]() == v6)
      {
        int uint64 = xpc_array_get_uint64(v10, 1uLL);
        int v14 = *((_DWORD *)v3 + 62);
        if (v14) {
          BOOL v15 = uint64 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && v14 != uint64) {
          goto LABEL_21;
        }
        id v11 = v10;
        size_t v12 = 0;
      }
      else
      {
        id v11 = *(void **)(a2 + 48);
        size_t v12 = v9;
      }
      string = xpc_array_get_string(v11, v12);
      if (string) {
        xpc_array_set_string(*((xpc_object_t *)v3 + 32), 0xFFFFFFFFFFFFFFFFLL, string);
      }
LABEL_21:

      if (++v9 >= xpc_array_get_count(*(xpc_object_t *)(a2 + 48))) {
        goto LABEL_22;
      }
    }
  }
LABEL_23:

  return v4;
}

CFArrayRef nwswifttls_configure_server_raw_public_key_certificate(void *a1, uint64_t a2)
{
  id v3 = a1;
  CFArrayRef v4 = 0;
  if (v3)
  {
    if (a2)
    {
      CFArrayRef v4 = *(const __CFArray **)(a2 + 280);
      if (v4)
      {
        id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        id v6 = v3[29];
        v3[29] = v5;

        if (v3[29])
        {
          if (CFArrayGetCount(v4))
          {
            unint64_t v7 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
              if (ValueAtIndex) {
                [v3[29] addObject:ValueAtIndex];
              }
              ++v7;
            }
            while (v7 < CFArrayGetCount(v4));
          }
          CFArrayRef v4 = (const __CFArray *)([v3[29] count] != 0);
        }
        else
        {
          CFArrayRef v4 = 0;
        }
      }
    }
  }

  return v4;
}

uint64_t nwswifttls_configure_with_sec_protocol_options(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = *(id *)(a1 + 40);
    id v3 = v2;
    if (v2)
    {
      id v5 = v2;
      uint64_t v1 = nw_protocol_options_access_handle();
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  return v1;
}

uint64_t __nwswifttls_configure_with_sec_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = *(void *)(a2 + 328);
  if (result)
  {
    *(void *)(*(void *)(a1 + 32) + 88) = (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
    *(void *)(*(void *)(a1 + 32) + 96) = (*(uint64_t (**)(void))(*(void *)(a2 + 328) + 16))();
    *(void *)(*(void *)(a1 + 32) + 104) = (*(uint64_t (**)(void))(*(void *)(a2 + 328) + 16))();
    *(void *)(*(void *)(a1 + 32) + 112) = (*(uint64_t (**)(void))(*(void *)(a2 + 328) + 16))();
    id v5 = _Block_copy(*(const void **)(a2 + 144));
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void **)(v6 + 184);
    *(void *)(v6 + 184) = v5;

    nw_protocol_definition_t v8 = _Block_copy(*(const void **)(a2 + 160));
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(v9 + 192);
    *(void *)(v9 + 192) = v8;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 200), *(id *)(a2 + 168));
    id v11 = _Block_copy(*(const void **)(a2 + 176));
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 208);
    *(void *)(v12 + 208) = v11;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 216), *(id *)(a2 + 184));
    if ((nwswifttls_configure_server_raw_public_key_certificate(*(void **)(a1 + 32), a2) & 1) == 0)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      BOOL v15 = *(void **)(v14 + 232);
      *(void *)(v14 + 232) = 0;
    }
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 240), *(id *)(a2 + 136));
    if ((*(_DWORD *)(a2 + 361) & 0x800000) != 0) {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 224), *(id *)(a2 + 192));
    }
    if (!nwswifttls_configure_application_protocols(*(void **)(a1 + 32), a2))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void **)(v16 + 256);
      *(void *)(v16 + 256) = 0;
    }
    if (!nwswifttls_configure_server_name(*(void **)(a1 + 32), a2, *(void *)(a1 + 40)))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      id v19 = *(void **)(v18 + 264);
      *(void *)(v18 + 264) = 0;
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 272) = *(unsigned char *)(a2 + 296);
    *(unsigned char *)(*(void *)(a1 + 32) + 273) = *(unsigned char *)(a2 + 297);
    CFArrayRef v20 = *(void **)(a2 + 232);
    if (v20)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nwswifttls_configure_with_sec_protocol_options_block_invoke_2;
      applier[3] = &unk_1E6112588;
      id v22 = *(id *)(a1 + 32);
      xpc_array_apply(v20, applier);
    }
    return 1;
  }
  return result;
}

BOOL __nwswifttls_configure_with_sec_protocol_options_block_invoke_2(uint64_t a1, int a2, xpc_object_t xuint)
{
  uint64_t value = (unsigned __int16)xpc_uint64_get_value(xuint);
  if (value == 29) {
    *(unsigned char *)(*(void *)(a1 + 32) + 275) = 1;
  }
  return value != 29;
}

uint64_t nwswifttls_get_endpoint_name(void *a1, unsigned char *a2)
{
  id v3 = a1;
  *a2 = 0;
  uint64_t parent_endpoint_domain = 0;
  switch(nw_endpoint_get_type(v3))
  {
    case nw_endpoint_type_address:
      uint64_t parent_endpoint_domain = nw_endpoint_get_parent_endpoint_domain();
      if (!parent_endpoint_domain)
      {
        uint64_t parent_endpoint_domain = (uint64_t)nw_endpoint_copy_address_string(v3);
        *a2 = 1;
      }
      break;
    case nw_endpoint_type_host:
      uint64_t hostname = (uint64_t)nw_endpoint_get_hostname(v3);
      goto LABEL_7;
    case nw_endpoint_type_bonjour_service:
      uint64_t hostname = nw_endpoint_get_bonjour_fullname();
      goto LABEL_7;
    case nw_endpoint_type_url|nw_endpoint_type_address:
      uint64_t hostname = nw_endpoint_get_srv_name();
LABEL_7:
      uint64_t parent_endpoint_domain = hostname;
      break;
    default:
      break;
  }

  return parent_endpoint_domain;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

uint64_t variable initialization expression of STLSHandshaker.stateMachine@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of STLSHandshaker.stateMachine((uint64_t (*)(void))type metadata accessor for HandshakeStateMachine, a1);
}

uint64_t variable initialization expression of STLSHandshaker.partialHandshakeResult@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of STLSHandshaker.stateMachine(type metadata accessor for PartialHandshakeResult, a1);
}

uint64_t variable initialization expression of STLSHandshaker.stateMachine@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  CFArrayRef v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of STLSHandshaker.receivedSessionTickets()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t variable initialization expression of STLSHandshaker.latestError()
{
  return 0;
}

Swift::Int __swiftcall STLSHandshaker.isImplemented()()
{
  return 1;
}

id STLSHandshaker.__allocating_init(_:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:)(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned __int16 *a6, int a7)
{
  id v15 = objc_allocWithZone(v7);
  return STLSHandshaker.init(_:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:)(a1, a2, a3, a4, a5, a6, a7);
}

id STLSHandshaker.init(_:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:)(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned __int16 *a6, int a7)
{
  nw_protocol_definition_t v8 = v7;
  LODWORD(v100) = a7;
  v108 = a6;
  id v109 = a5;
  id v112 = a4;
  id v113 = a3;
  id v114 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult?);
  MEMORY[0x1F4188790](v11 - 8);
  v107 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeStateMachine();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v96 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  v95 = (_OWORD *)((char *)&v84 - v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v94 = (uint64_t)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v97 = (uint64_t)&v84 - v21;
  uint64_t v22 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v98 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  char v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v99 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_object_t v28 = *(void (**)(void))(v14 + 56);
  v110 = &v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine];
  uint64_t v106 = v13;
  uint64_t v105 = v14 + 56;
  v101 = v28;
  v28();
  uint64_t v29 = (uint64_t)&v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult];
  uint64_t v30 = type metadata accessor for PartialHandshakeResult(0);
  uint64_t v31 = *(void *)(v30 - 8);
  unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  uint64_t v111 = v29;
  uint64_t v104 = v30;
  v103 = v32;
  uint64_t v102 = v31 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v32)(v29, 1, 1);
  *(void *)&v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets] = MEMORY[0x1E4FBC860];
  uint64_t v33 = OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError;
  *(void *)&v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError] = 0;
  if (a1 && v114 && v113 && v112)
  {
    v92 = (objc_class *)ObjectType;
    v91 = v8;
    id v34 = a1;
    id v88 = v114;
    id v90 = v113;
    id v35 = v112;
    id v89 = v34;
    NSArray.makeIterator()();
    NSFastEnumerationIterator.next()();
    if (v122)
    {
      unint64_t v93 = MEMORY[0x1E4FBC860];
      uint64_t v87 = v98 + 32;
      do
      {
        while (1)
        {
          outlined init with take of Any(&v120, &v116);
          if (swift_dynamicCast()) {
            break;
          }
          NSFastEnumerationIterator.next()();
          if (!v122) {
            goto LABEL_22;
          }
        }
        long long v36 = v115;
        long long v116 = v115;
        outlined copy of Data._Representation(v115, *((unint64_t *)&v115 + 1));
        lazy protocol witness table accessor for type Data and conformance Data();
        P256.Signing.PublicKey.init<A>(derRepresentation:)();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v86 = v35;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v93 + 16) + 1, 1, v93);
        }
        unint64_t v38 = v93;
        unint64_t v40 = *(void *)(v93 + 16);
        unint64_t v39 = *(void *)(v93 + 24);
        unint64_t v41 = v40 + 1;
        if (v40 >= v39 >> 1)
        {
          unint64_t v85 = v40 + 1;
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v93);
          unint64_t v41 = v85;
          unint64_t v38 = v43;
        }
        *(void *)(v38 + 16) = v41;
        unint64_t v42 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        unint64_t v93 = v38;
        (*(void (**)(unint64_t, char *, uint64_t))(v98 + 32))(v38 + v42 + *(void *)(v98 + 72) * v40, v24, v22);
        outlined consume of Data._Representation(v36, *((unint64_t *)&v36 + 1));
        NSFastEnumerationIterator.next()();
        id v35 = v86;
      }
      while (v122);
    }
    else
    {
      unint64_t v93 = MEMORY[0x1E4FBC860];
    }
LABEL_22:
    (*(void (**)(char *, uint64_t))(v99 + 8))(v27, v25);
    if (v108)
    {
      if (*((void *)v108 + 2) == 2)
      {
        LODWORD(v99) = v108[16];
        swift_bridgeObjectRelease();
        LODWORD(v108) = 0;
LABEL_27:
        uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v52;
        id v54 = v90;
        uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v57 = v56;
        id v113 = v54;

        id v114 = (id)v57;
        uint64_t v58 = 0;
        switch(v57 >> 62)
        {
          case 1uLL:
            uint64_t v58 = (int)v55;
            break;
          case 2uLL:
            uint64_t v58 = *(void *)(v55 + 16);
            break;
          default:
            break;
        }
        id v59 = v35;
        uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v62 = v61;
        id v112 = v59;

        uint64_t v63 = 0;
        switch(v62 >> 62)
        {
          case 1uLL:
            uint64_t v63 = (int)v60;
            break;
          case 2uLL:
            uint64_t v63 = *(void *)(v60 + 16);
            break;
          default:
            break;
        }
        *(void *)&long long v120 = v51;
        *((void *)&v120 + 1) = v53;
        unint64_t v121 = v93;
        uint64_t v122 = v55;
        id v123 = v114;
        uint64_t v124 = v58;
        uint64_t v125 = v60;
        unint64_t v126 = v62;
        uint64_t v127 = v63;
        __int16 v128 = v99;
        char v129 = (char)v108;
        char v130 = v100 & 1;
        if (v109)
        {
          unint64_t v64 = v93;
          v108 = (unsigned __int16 *)v109;
          id v109 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v66 = v65;
          uint64_t v67 = (uint64_t)v95;
          _OWORD *v95 = xmmword_1B577F270;
          *(void *)(v67 + 16) = 0;
          v117 = &type metadata for SwiftTLSDefaultClock;
          v118 = &protocol witness table for SwiftTLSDefaultClock;
          swift_bridgeObjectRetain();
          unint64_t v93 = v64;
          swift_bridgeObjectRetain();
          uint64_t v100 = v58;
          outlined copy of ByteBuffer?(v55, (unint64_t)v114);
          outlined copy of ByteBuffer?(v60, v62);
          uint64_t v68 = v96;
          HandshakeStateMachine.init(sessionTicket:configuration:clock:)((uint64_t)v109, v66, (uint64_t)&v120, (uint64_t)&v116, v96);
          id v69 = v89;
          outlined init with take of HandshakeStateMachine(v68, v67, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
          uint64_t v72 = v94;
          outlined init with take of HandshakeStateMachine(v67, v94, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v73 = v112;

          id v74 = v113;
          id v75 = v88;

          outlined consume of ByteBuffer?(v55, (unint64_t)v114);
          unint64_t v76 = v62;
          id v77 = v75;
          id v78 = v73;
          outlined consume of ByteBuffer?(v60, v76);
          id v79 = v108;

          ((void (*)(uint64_t, void, uint64_t, uint64_t))v101)(v72, 0, 1, v106);
          uint64_t v80 = (uint64_t)v110;
          swift_beginAccess();
          outlined assign with take of HandshakeStateMachine?(v72, v80, &demangling cache variable for type metadata for HandshakeStateMachine?);
          swift_endAccess();
        }
        else
        {
          uint64_t v70 = v97;
          HandshakeStateMachine.init(configuration:)((uint64_t)&v120, v97);
          id v78 = v112;

          id v74 = v113;
          id v77 = v88;

          id v69 = v89;
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v101)(v70, 0, 1, v106);
          uint64_t v71 = (uint64_t)v110;
          swift_beginAccess();
          outlined assign with take of HandshakeStateMachine?(v70, v71, &demangling cache variable for type metadata for HandshakeStateMachine?);
          swift_endAccess();
          id v79 = 0;
        }
        uint64_t v81 = (uint64_t)v107;
        v103(v107, 1, 1, v104);
        uint64_t v82 = v111;
        swift_beginAccess();
        outlined assign with take of HandshakeStateMachine?(v81, v82, &demangling cache variable for type metadata for PartialHandshakeResult?);
        swift_endAccess();
        v83 = v91;

        v119.receiver = v83;
        v119.super_class = v92;
        id v49 = [super init];

        return v49;
      }
      swift_bridgeObjectRelease();
    }
    LODWORD(v99) = 0;
    LODWORD(v108) = 1;
    goto LABEL_27;
  }
  v44 = v8;
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)logger);
  v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_1B56C5000, v46, v47, "Cannot start the handshake with NULL parameters", v48, 2u);
    MEMORY[0x1BA99F280](v48, -1, -1);
  }

  outlined destroy of HandshakeStateMachine?((uint64_t)v110, &demangling cache variable for type metadata for HandshakeStateMachine?);
  outlined destroy of HandshakeStateMachine?(v111, &demangling cache variable for type metadata for PartialHandshakeResult?);
  swift_bridgeObjectRelease();

  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

NSData_optional __swiftcall STLSHandshaker.startHandshake()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult?);
  MEMORY[0x1F4188790](v2 - 8);
  CFArrayRef v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PartialHandshakeResult(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  nw_protocol_definition_t v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  uint64_t v10 = type metadata accessor for HandshakeStateMachine();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10) == 1) {
    goto LABEL_12;
  }
  Class isa = 0;
  HandshakeStateMachine.startHandshake()((uint64_t)v8);
  swift_endAccess();
  outlined init with copy of PartialHandshakeResult((uint64_t)v8, (uint64_t)v4, type metadata accessor for PartialHandshakeResult);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  uint64_t v12 = v1 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
  swift_beginAccess();
  outlined assign with take of HandshakeStateMachine?((uint64_t)v4, v12, &demangling cache variable for type metadata for PartialHandshakeResult?);
  swift_endAccess();
  unint64_t v13 = v8[1];
  if (v13 >> 60 != 15)
  {
    uint64_t v14 = *v8;
    uint64_t v15 = v8[2];
    uint64_t v16 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        uint64_t v16 = v14 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v16 = *(void *)(v14 + 24);
LABEL_7:
        outlined copy of Data._Representation(*v8, v8[1]);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v13);
        break;
    }
    if (v16 >= v15)
    {
      uint64_t v17 = Data._Representation.subscript.getter();
      unint64_t v19 = v18;
      outlined consume of ByteBuffer?(v14, v13);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v17, v19);
      goto LABEL_10;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x1B56CBAACLL);
  }
LABEL_10:
  outlined destroy of PartialHandshakeResult((uint64_t)v8, type metadata accessor for PartialHandshakeResult);
  uint64_t v21 = isa;
  result.value.super.Class isa = v21;
  result.is_nil = v20;
  return result;
}

NSData_optional __swiftcall STLSHandshaker.continueHandshake(_:)(NSData a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult?);
  MEMORY[0x1F4188790](v2 - 8);
  CFArrayRef v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)v5;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      break;
    default:
      break;
  }
  uint64_t v46 = v5;
  unint64_t v47 = v6;
  uint64_t v48 = v7;
  uint64_t v40 = v1;
  uint64_t v8 = v1 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  uint64_t v9 = type metadata accessor for HandshakeStateMachine();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v12 = v10 + 48;
  if (v11(v8, 1, v9) == 1)
  {
LABEL_31:
    __break(1u);
    JUMPOUT(0x1B56CC12CLL);
  }
  HandshakeStateMachine.receivedNetworkData(_:)(&v46);
  swift_endAccess();
  uint64_t v13 = OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
  uint64_t v14 = OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets;
  swift_beginAccess();
  if (v11(v8, 1, v9) == 1)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v15 = (uint64_t *)(v40 + v13);
  unint64_t v42 = v4;
  uint64_t v43 = (void *)(v40 + v14);
  uint64_t v41 = v9;
  uint64_t v44 = v12;
  uint64_t v45 = v11;
  while (1)
  {
    HandshakeStateMachine.processHandshake()((uint64_t)v4);
    swift_endAccess();
    swift_beginAccess();
    outlined assign with take of HandshakeStateMachine?((uint64_t)v4, (uint64_t)v15, &demangling cache variable for type metadata for PartialHandshakeResult?);
    swift_endAccess();
    uint64_t v16 = type metadata accessor for PartialHandshakeResult(0);
    uint64_t v17 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    if (v17(v15, 1, v16))
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0xF000000000000000;
    }
    else
    {
      Swift::Bool v20 = (uint64_t *)((char *)v15 + *(int *)(v16 + 24));
      uint64_t v18 = *v20;
      unint64_t v19 = v20[1];
      if (v19 >> 60 != 15)
      {
        uint64_t v21 = (void **)v43;
        swift_beginAccess();
        uint64_t v22 = *v21;
        outlined copy of ByteBuffer?(v18, v19);
        outlined copy of ByteBuffer?(v18, v19);
        outlined copy of Data._Representation(v18, v19);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v21 = v22;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
          *uint64_t v43 = v22;
        }
        unint64_t v25 = v22[2];
        unint64_t v24 = v22[3];
        unint64_t v26 = v25 + 1;
        if (v25 >= v24 >> 1)
        {
          unint64_t v39 = v25 + 1;
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
          unint64_t v26 = v39;
          uint64_t v22 = v29;
          *uint64_t v43 = v29;
        }
        v22[2] = v26;
        v27 = &v22[2 * v25];
        v27[4] = v18;
        v27[5] = v19;
        swift_endAccess();
        outlined consume of ByteBuffer?(v18, v19);
        uint64_t v9 = v41;
        CFArrayRef v4 = v42;
      }
    }
    if (!v17(v15, 1, v16))
    {
      unint64_t v28 = v15[1];
      if (v28 >> 60 != 15)
      {
        uint64_t v33 = *v15;
        uint64_t v34 = v15[2];
        uint64_t v35 = 0;
        switch(v28 >> 62)
        {
          case 1uLL:
            uint64_t v35 = v33 >> 32;
            goto LABEL_26;
          case 2uLL:
            uint64_t v35 = *(void *)(v33 + 24);
LABEL_26:
            outlined copy of Data._Representation(*v15, v15[1]);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v35 = BYTE6(v28);
            break;
        }
        if (v35 >= v34)
        {
          uint64_t v36 = Data._Representation.subscript.getter();
          unint64_t v38 = v37;
          outlined consume of ByteBuffer?(v33, v28);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          outlined consume of Data._Representation(v36, v38);
          outlined consume of ByteBuffer?(v18, v19);
          outlined consume of Data._Representation(v46, v47);
          goto LABEL_21;
        }
        __break(1u);
        goto LABEL_30;
      }
    }
    if (v19 >> 60 == 15) {
      break;
    }
    outlined consume of ByteBuffer?(v18, v19);
    swift_beginAccess();
    if (v45(v8, 1, v9) == 1) {
      goto LABEL_30;
    }
  }
  outlined consume of Data._Representation(v46, v47);
  Class isa = 0;
LABEL_21:
  unint64_t v32 = isa;
  result.value.super.Class isa = v32;
  result.is_nil = v30;
  return result;
}

Swift::Int32 __swiftcall STLSHandshaker.getErrorCode()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError);
  if (v1)
  {
    id v6 = *(id *)(v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError);
    id v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast() && v5 == 1)
    {
      switch(v4)
      {
        case 3:
        case 4:

          LODWORD(v1) = -9856;
          break;
        case 7:

          LODWORD(v1) = -9830;
          break;
        case 11:

          LODWORD(v1) = -9808;
          break;
        default:
          goto LABEL_5;
      }
    }
    else
    {
LABEL_5:

      LODWORD(v1) = -9858;
    }
  }
  return (int)v1;
}

Swift::Int __swiftcall STLSHandshaker.getEncryptionLevel()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for PartialHandshakeResult(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_4:
    outlined destroy of HandshakeStateMachine?((uint64_t)v3, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    return -1;
  }
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v11 + *(int *)(v12 + 20), (uint64_t)v3, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    goto LABEL_4;
  }
  outlined init with take of HandshakeStateMachine((uint64_t)v3, (uint64_t)v10, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
  outlined init with take of HandshakeStateMachine((uint64_t)v10, (uint64_t)v8, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                       + 48)];
      uint64_t v16 = type metadata accessor for SymmetricKey();
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8);
      v17(v15, v16);
      v17(v8, v16);
      return 2;
    }
    else
    {
      unint64_t v19 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                       + 48)];
      uint64_t v20 = type metadata accessor for SymmetricKey();
      uint64_t v21 = *(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8);
      v21(v19, v20);
      v21(v8, v20);
      return 3;
    }
  }
  else
  {
    uint64_t v18 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v8, v18);
    return 1;
  }
}

NSData_optional __swiftcall STLSHandshaker.getClientRandom()()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)v3, &demangling cache variable for type metadata for HandshakeStateMachine?);
  uint64_t v5 = type metadata accessor for HandshakeStateMachine();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1) {
    goto LABEL_43;
  }
  long long v23 = xmmword_1B577F280;
  uint64_t v24 = 0;
  ByteBuffer.writeRandom(_:)(*(void *)&v3[*(int *)(v5 + 32)], *(void *)&v3[*(int *)(v5 + 32) + 8], *(void *)&v3[*(int *)(v5 + 32) + 16], *(void *)&v3[*(int *)(v5 + 32) + 24]);
  unint64_t v7 = *((void *)&v23 + 1);
  int64_t v6 = v23;
  uint64_t v8 = v24;
  outlined destroy of PartialHandshakeResult((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v8) {
        goto LABEL_35;
      }
      if (v8 < (int)v6) {
        goto LABEL_38;
      }
      uint64_t v12 = v7 & 0x3FFFFFFFFFFFFFFFLL;
      if (v8) {
        goto LABEL_10;
      }
      if (!HIDWORD(v6)) {
        goto LABEL_32;
      }
      if (v6 > 0xEFFFFFFFFLL)
      {
LABEL_10:
        if (SHIDWORD(v6) >= (int)v8)
        {
          int64_t v6 = v6 & 0xFFFFFFFF00000000 | v8;
          unint64_t v7 = v12 | 0x4000000000000000;
          goto LABEL_33;
        }
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
      }
      unint64_t v9 = specialized Data.InlineData.init(_:count:)(v6, v12, v6 >> 32);
      uint64_t v16 = v15;
      outlined consume of Data._Representation(v6, v7);
      unint64_t v7 = v16 & 0xFFFFFFFFFFFFFFLL;
LABEL_6:
      int64_t v6 = v9;
LABEL_33:
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v6, v7);
      uint64_t v22 = isa;
      result.value.super.Class isa = v22;
      result.is_nil = v21;
      return result;
    case 2uLL:
      int64_t v13 = *(void *)(v6 + 24);
      if (v13 < v8) {
        goto LABEL_36;
      }
      if (v8 < *(void *)(v6 + 16)) {
        goto LABEL_39;
      }
      uint64_t v14 = v7 & 0x3FFFFFFFFFFFFFFFLL;
      if (v8) {
        goto LABEL_15;
      }
      if (!v13)
      {
LABEL_32:
        outlined consume of Data._Representation(v6, v7);
        int64_t v6 = 0;
        unint64_t v7 = 0xC000000000000000;
        goto LABEL_33;
      }
      if (v13 <= 14)
      {
        swift_retain();
        swift_retain();
        unint64_t v9 = specialized Data.InlineData.init(_:count:)(v6, v7 & 0x3FFFFFFFFFFFFFFFLL, v13);
        uint64_t v18 = v17;
        swift_release();
        swift_release();
        outlined consume of Data._Representation(v6, v7);
        unint64_t v7 = v18 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_6;
      }
LABEL_15:
      if (v8 > 2147483646 || v13 > 2147483646)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v8;
        *(void *)(v19 + 24) = v13;
        swift_retain();
        outlined consume of Data._Representation(v6, v7);
        int64_t v6 = v19;
        unint64_t v7 = v14 | 0x8000000000000000;
        goto LABEL_33;
      }
      if (v8 < (uint64_t)0xFFFFFFFF80000000 || v13 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_41;
      }
      if ((int)v13 >= (int)v8)
      {
        swift_retain();
        outlined consume of Data._Representation(v6, v7);
        int64_t v6 = v8 | ((unint64_t)v13 << 32);
        unint64_t v7 = v14 | 0x4000000000000000;
        goto LABEL_33;
      }
      goto LABEL_42;
    case 3uLL:
      outlined consume of Data._Representation(v6, v7);
      if (v8 > 0) {
        goto LABEL_37;
      }
      if (!v8) {
        goto LABEL_33;
      }
      __break(1u);
      goto LABEL_24;
    default:
      if (BYTE6(v7) >= v8)
      {
        if (!v8)
        {
LABEL_24:
          outlined consume of Data._Representation(v6, v7);
          v7 &= 0xFFFFFFFFFFFFFFuLL;
          goto LABEL_33;
        }
        unint64_t v9 = specialized Data.InlineSlice.init(_:range:)(v6, v7 & 0xFFFFFFFFFFFFFFLL, v8, BYTE6(v7));
        uint64_t v11 = v10;
        outlined consume of Data._Representation(v6, v7);
        unint64_t v7 = v11 | 0x4000000000000000;
        goto LABEL_6;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
  }
}

NSData_optional __swiftcall STLSHandshaker.getEncryptionSecret(write:)(Swift::Bool write)
{
  BOOL v50 = write;
  uint64_t v2 = type metadata accessor for SymmetricKey();
  uint64_t v52 = *(void *)(v2 - 8);
  uint64_t v53 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v51 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  unint64_t v7 = (char *)&v46 - v6;
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v46 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v46 - v21;
  uint64_t v23 = v1 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
  swift_beginAccess();
  uint64_t v24 = type metadata accessor for PartialHandshakeResult(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  }
  else
  {
    uint64_t v48 = v20;
    id v49 = v10;
    uint64_t v25 = v7;
    unint64_t v47 = v12;
    v27 = v51;
    uint64_t v26 = v52;
    uint64_t v28 = v53;
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v23 + *(int *)(v24 + 20), (uint64_t)v15, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      uint64_t v32 = (uint64_t)v15;
      uint64_t v33 = (uint64_t)v22;
      outlined init with take of HandshakeStateMachine(v32, (uint64_t)v22, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
      uint64_t v34 = (uint64_t)v22;
      uint64_t v35 = (uint64_t)v48;
      outlined init with copy of PartialHandshakeResult(v34, (uint64_t)v48, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v36 = v35
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                     + 48);
        uint64_t v37 = v26;
        unint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
        v38(v49, v35, v28);
        v38(v25, v36, v28);
        unint64_t v39 = *(void (**)(char *, uint64_t))(v26 + 8);
        uint64_t v40 = v47;
        if (v50)
        {
          v39(v25, v28);
          uint64_t v41 = v40;
          unint64_t v42 = v49;
        }
        else
        {
          v39(v49, v28);
          uint64_t v41 = v40;
          unint64_t v42 = v25;
        }
        v38(v41, (uint64_t)v42, v28);
      }
      else
      {
        uint64_t v37 = v26;
        uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
        v43(v27, v35, v28);
        if (!v50)
        {
          (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
          outlined destroy of PartialHandshakeResult(v33, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
          goto LABEL_5;
        }
        uint64_t v40 = v47;
        v43(v47, (uint64_t)v27, v28);
      }
      SymmetricKey.withUnsafeBytes<A>(_:)();
      uint64_t v44 = v54;
      unint64_t v45 = v55;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v44, v45);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v28);
      outlined destroy of PartialHandshakeResult(v33, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
      goto LABEL_6;
    }
  }
  outlined destroy of HandshakeStateMachine?((uint64_t)v15, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
LABEL_5:
  Class isa = 0;
LABEL_6:
  uint64_t v31 = isa;
  result.value.super.Class isa = v31;
  result.is_nil = v29;
  return result;
}

uint64_t closure #1 in STLSHandshaker.getEncryptionSecret(write:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x1E4FBB2B8];
  v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = specialized Data.InlineData.init(_:)(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

NSData_optional __swiftcall STLSHandshaker.getPeerQUICTransportParameters()()
{
  uint64_t v1 = type metadata accessor for HandshakeStateMachine();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v1);
  Class isa = 0;
  if (!v6)
  {
    outlined init with copy of PartialHandshakeResult(v5, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
    uint64_t v9 = HandshakeStateMachine.peerQUICTransportParameters.getter();
    unint64_t v11 = v10;
    uint64_t v13 = v12;
    outlined destroy of PartialHandshakeResult((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
    if (v11 >> 60 == 15)
    {
      Class isa = 0;
    }
    else
    {
      uint64_t v14 = 0;
      switch(v11 >> 62)
      {
        case 1uLL:
          uint64_t v14 = v9 >> 32;
          break;
        case 2uLL:
          uint64_t v14 = *(void *)(v9 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v14 = BYTE6(v11);
          break;
      }
      if (v14 < v13)
      {
        __break(1u);
        JUMPOUT(0x1B56CD2A0);
      }
      uint64_t v15 = Data._Representation.subscript.getter();
      unint64_t v17 = v16;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v15, v17);
      outlined consume of ByteBuffer?(v9, v11);
    }
  }
  uint64_t v18 = isa;
  result.value.super.Class isa = v18;
  result.is_nil = v7;
  return result;
}

Swift::Int __swiftcall STLSHandshaker.getNegotiatedCiphersuite()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)v3, &demangling cache variable for type metadata for HandshakeStateMachine?);
  uint64_t v5 = type metadata accessor for HandshakeStateMachine();
  Swift::Int result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    int v7 = HandshakeStateMachine.negotiatedCiphersuite.getter();
    outlined destroy of PartialHandshakeResult((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
    if ((v7 & 0x10000) != 0) {
      return 0;
    }
    else {
      return (unsigned __int16)v7;
    }
  }
  return result;
}

Swift::Bool __swiftcall STLSHandshaker.hasSessionState()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets;
  swift_beginAccess();
  return *(void *)(*(void *)v1 + 16) != 0;
}

NSData_optional __swiftcall STLSHandshaker.getSessionState()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets);
  swift_beginAccess();
  if (*(void *)(*v1 + 16))
  {
    Class isa = (objc_class *)swift_beginAccess();
    uint64_t v4 = *v1;
    if (!*(void *)(*v1 + 16))
    {
      __break(1u);
      goto LABEL_7;
    }
    uint64_t v6 = *(void *)(v4 + 32);
    unint64_t v5 = *(void *)(v4 + 40);
    outlined copy of Data._Representation(v6, v5);
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    swift_endAccess();
    v7.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v6, v5);
  }
  else
  {
    v7.super.Class isa = 0;
  }
  Class isa = v7.super.isa;
LABEL_7:
  result.value.super.Class isa = isa;
  result.is_nil = v2;
  return result;
}

Swift::Bool __swiftcall STLSHandshaker.getEarlyDataAccepted()()
{
  uint64_t v1 = type metadata accessor for HandshakeStateMachine();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v1)) {
    return 0;
  }
  outlined init with copy of PartialHandshakeResult(v5, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
  char v7 = HandshakeStateMachine.earlyDataAccepted.getter();
  outlined destroy of PartialHandshakeResult((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
  return v7 & 1;
}

uint64_t STLSHandshaker.validateAuthenticator(authenticator:context:keyParser:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  return specialized STLSHandshaker.validateAuthenticator(authenticator:context:keyParser:)(a1, a2, a5, a6);
}

uint64_t thunk for @callee_unowned @convention(block) (@unowned NSData) -> (@autoreleased NSData?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v5 = (id)(*(uint64_t (**)(uint64_t, Class))(a3 + 16))(a3, isa);

  if (!v5) {
    return 0;
  }
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

id STLSHandshaker.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void STLSHandshaker.init()()
{
}

id STLSHandshaker.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t outlined assign with take of HandshakeStateMachine?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of ByteBuffer?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of ByteBuffer?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<P256.Signing.PublicKey>);
  uint64_t v10 = *(void *)(type metadata accessor for P256.Signing.PublicKey() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for P256.Signing.PublicKey() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.KeyShare.KeyShareEntry>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CertificateMessage.CertificateEntry>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKey.OfferedPSKs.PSKIdentity>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of HandshakeStateMachine?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of HandshakeStateMachine(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for P256.Signing.PublicKey() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a3 > 0xFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (__DataStorage._bytes.getter() && __OFSUB__(v3, __DataStorage._offset.getter())) {
LABEL_8:
  }
    __break(1u);
  __DataStorage._length.getter();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  return 0;
}

{
  uint64_t v3;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a3 > 0xFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = (int)a1;
  if ((int)a1 > a1 >> 32)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (__DataStorage._bytes.getter() && __OFSUB__(v3, __DataStorage._offset.getter())) {
LABEL_10:
  }
    __break(1u);
  __DataStorage._length.getter();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  return 0;
}

unint64_t specialized Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if ((int)a4 < (int)a3) {
    goto LABEL_10;
  }
  return a3 | ((unint64_t)a4 << 32);
}

uint64_t outlined init with copy of PartialHandshakeResult(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized STLSHandshaker.validateAuthenticator(authenticator:context:keyParser:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v8 = type metadata accessor for ExportedAuthenticator();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for HandshakeStateMachine();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v5 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v18, (uint64_t)v13, &demangling cache variable for type metadata for HandshakeStateMachine?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for HandshakeStateMachine?);
    return MEMORY[0x1E4FBC860];
  }
  else
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
    uint64_t v19 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        uint64_t v19 = (int)a1;
        goto LABEL_6;
      case 2uLL:
        uint64_t v19 = *(void *)(a1 + 16);
LABEL_6:
        outlined copy of Data._Representation(a1, a2);
        break;
      default:
        break;
    }
    uint64_t v25 = a1;
    unint64_t v26 = a2;
    uint64_t v27 = v19;
    outlined init with copy of PartialHandshakeResult((uint64_t)v17, (uint64_t)&v10[*(int *)(v8 + 24)], (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
    *(_OWORD *)uint64_t v10 = xmmword_1B577F270;
    *((void *)v10 + 2) = 0;
    HandshakeMessageParser.appendBytes(_:)(&v25);
    uint64_t v20 = ExportedAuthenticator.validate(keyParser:)(v23, v24);
    outlined destroy of PartialHandshakeResult((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ExportedAuthenticator);
    outlined consume of Data._Representation(v25, v26);
    outlined destroy of PartialHandshakeResult((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
  }
  return v20;
}

uint64_t ObjC metadata update function for STLSHandshaker()
{
  return type metadata accessor for STLSHandshaker();
}

uint64_t type metadata accessor for STLSHandshaker()
{
  uint64_t result = type metadata singleton initialization cache for STLSHandshaker;
  if (!type metadata singleton initialization cache for STLSHandshaker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for STLSHandshaker()
{
  type metadata accessor for HandshakeStateMachine?(319, &lazy cache variable for type metadata for HandshakeStateMachine?, (void (*)(uint64_t))type metadata accessor for HandshakeStateMachine);
  if (v0 <= 0x3F)
  {
    type metadata accessor for HandshakeStateMachine?(319, &lazy cache variable for type metadata for PartialHandshakeResult?, (void (*)(uint64_t))type metadata accessor for PartialHandshakeResult);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for HandshakeStateMachine?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t partial apply for thunk for @callee_unowned @convention(block) (@unowned NSData) -> (@autoreleased NSData?)(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_unowned @convention(block) (@unowned NSData) -> (@autoreleased NSData?)(a1, a2, *(void *)(v2 + 16));
}

uint64_t outlined destroy of PartialHandshakeResult(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t CertificateVerify.algorithm.setter(uint64_t result)
{
  _WORD *v1 = result;
  return result;
}

uint64_t (*CertificateVerify.algorithm.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t CertificateVerify.signature.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a2;
}

uint64_t CertificateVerify.signature.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = outlined consume of Data._Representation(v3[1], v3[2]);
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = a3;
  return result;
}

uint64_t (*CertificateVerify.signature.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t CertificateVerify.hash(into:)(int a1, Swift::UInt16 a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  Hasher._combine(_:)(a2);
  uint64_t v8 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v8 = a3 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 24);
LABEL_5:
      outlined copy of Data._Representation(a3, a4);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = BYTE6(a4);
      break;
  }
  if (v8 < a5)
  {
    __break(1u);
    JUMPOUT(0x1B56CF3DCLL);
  }
  uint64_t v9 = Data._Representation.subscript.getter();
  unint64_t v11 = v10;
  Data.hash(into:)();
  outlined consume of Data._Representation(v9, v11);

  return outlined consume of Data._Representation(a3, a4);
}

uint64_t static CertificateVerify.__derived_struct_equals(_:_:)(__int16 a1, uint64_t a2, unint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  if (a1 == a5) {
    return specialized static ByteBuffer.== infix(_:_:)(a2, a3, a4, a6, a7, a8);
  }
  else {
    return 0;
  }
}

Swift::Int CertificateVerify.hashValue.getter(Swift::UInt16 a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  uint64_t v8 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v8 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = BYTE6(a3);
      break;
  }
  if (v8 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B56CF518);
  }
  uint64_t v9 = Data._Representation.subscript.getter();
  unint64_t v11 = v10;
  Data.hash(into:)();
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateVerify()
{
  return CertificateVerify.hashValue.getter(*(_WORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CertificateVerify()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  Hasher._combine(_:)(*(_WORD *)v0);
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B56CF620);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);

  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateVerify()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt16 v4 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  uint64_t v5 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v5 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v2);
      break;
  }
  if (v5 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B56CF724);
  }
  uint64_t v6 = Data._Representation.subscript.getter();
  unint64_t v8 = v7;
  Data.hash(into:)();
  outlined consume of Data._Representation(v6, v8);
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateVerify(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2) {
    return specialized static ByteBuffer.== infix(_:_:)(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a1 + 3), *((void *)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 3));
  }
  else {
    return 0;
  }
}

uint64_t static CertificateVerify.handshakeType.getter()
{
  return 15;
}

unint64_t CertificateVerify.write(into:)(uint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  __int16 v22 = bswap32(a2) >> 16;
  uint64_t v9 = MEMORY[0x1E4FBB2B8];
  uint64_t v10 = MEMORY[0x1E4F27EF0];
  uint64_t v25 = MEMORY[0x1E4FBB2B8];
  uint64_t v26 = MEMORY[0x1E4F27EF0];
  uint64_t v23 = &v22;
  uint64_t v24 = &v23;
  __swift_project_boxed_opaque_existential_1(&v23, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  uint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  uint64_t v13 = 0;
  switch(v12 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v11 >> 32;
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v11 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v13 = BYTE6(v12);
      break;
  }
  __int16 v22 = 0;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  uint64_t v23 = &v22;
  uint64_t v24 = &v23;
  __swift_project_boxed_opaque_existential_1(&v23, v9);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v15 = (int)a3;
      uint64_t v14 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v14 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v15 = 0;
      uint64_t v14 = BYTE6(a4);
      break;
  }
  if (v14 < a5 || v14 < v15)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  uint64_t v16 = Data._Representation.subscript.getter();
  unint64_t v18 = v17;
  Data.append(_:)();
  switch(v18 >> 62)
  {
    case 1uLL:
      outlined consume of Data._Representation(v16, v18);
      if (__OFSUB__(HIDWORD(v16), v16)) {
        goto LABEL_23;
      }
      unint64_t v18 = HIDWORD(v16) - (int)v16;
LABEL_16:
      if ((v18 & 0x8000000000000000) != 0) {
        goto LABEL_22;
      }
      if (v18 >> 16)
      {
        __break(1u);
LABEL_19:
        outlined consume of Data._Representation(v16, v18);
        unint64_t v18 = 0;
      }
LABEL_20:
      specialized ByteBuffer.setInteger<A>(_:at:as:)(v18, v13);
      return v18 + 4;
    case 2uLL:
      uint64_t v20 = *(void *)(v16 + 16);
      uint64_t v19 = *(void *)(v16 + 24);
      outlined consume of Data._Representation(v16, v18);
      unint64_t v18 = v19 - v20;
      if (!__OFSUB__(v19, v20)) {
        goto LABEL_16;
      }
      goto LABEL_24;
    case 3uLL:
      goto LABEL_19;
    default:
      outlined consume of Data._Representation(v16, v18);
      unint64_t v18 = BYTE6(v18);
      goto LABEL_20;
  }
}

uint64_t CertificateVerify.init(bytes:)(uint64_t *a1)
{
  return specialized CertificateVerify.init(bytes:)(a1);
}

unint64_t protocol witness for HandshakeMessageProtocol.write(into:) in conformance CertificateVerify(uint64_t *a1)
{
  return CertificateVerify.write(into:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2), *((void *)v1 + 3));
}

uint64_t protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance CertificateVerify@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized CertificateVerify.init(bytes:)(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t specialized ByteBuffer.setInteger<A>(_:at:as:)(unsigned int a1, uint64_t a2)
{
  v9[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 2;
  if (__OFADD__(a2, 2))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2[2] > a2)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  uint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v6 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v4 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(v5);
      break;
  }
  if (v6 < v3) {
    goto LABEL_12;
  }
  __int16 v8 = bswap32(a1) >> 16;
  if (v3 < a2) {
    goto LABEL_13;
  }
  v9[3] = MEMORY[0x1E4FBB2B8];
  v9[4] = MEMORY[0x1E4F27EF0];
  v9[0] = &v8;
  v9[1] = v9;
  __swift_project_boxed_opaque_existential_1(v9, MEMORY[0x1E4FBB2B8]);
  Data._Representation.replaceSubrange(_:with:count:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return 2;
}

uint64_t specialized ByteBuffer.setInteger<A>(_:at:as:)(char a1, uint64_t a2)
{
  v9[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2[2] > a2)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  uint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v6 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v4 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(v5);
      break;
  }
  if (v6 < v3) {
    goto LABEL_12;
  }
  char v8 = a1;
  if (v3 < a2) {
    goto LABEL_13;
  }
  v9[3] = MEMORY[0x1E4FBB2B8];
  v9[4] = MEMORY[0x1E4F27EF0];
  v9[0] = &v8;
  v9[1] = v9;
  __swift_project_boxed_opaque_existential_1(v9, MEMORY[0x1E4FBB2B8]);
  Data._Representation.replaceSubrange(_:with:count:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return 1;
}

uint64_t variable initialization expression of ExportedAuthenticator.parser()
{
  return 0;
}

uint64_t variable initialization expression of Extension.EarlyData.maxEarlyDataSize()
{
  return 0x100000000;
}

uint64_t variable initialization expression of HandshakeState.IdleState.sessionToResume@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of HandshakeState.IdleState.sessionToResume((uint64_t (*)(void))type metadata accessor for SessionTicket, a1);
}

uint64_t variable initialization expression of HandshakeState.EncryptedExtensionsState.earlyDataAccepted()
{
  return 0;
}

uint64_t variable initialization expression of HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverName()
{
  return 0;
}

uint64_t variable initialization expression of HandshakeStateMachine.Configuration.ticketRequest()
{
  return 0x10000;
}

uint64_t variable initialization expression of PartialHandshakeResult.newEncryptionLevel@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of HandshakeState.IdleState.sessionToResume(type metadata accessor for PartialHandshakeResult.NewEncryptionLevel, a1);
}

uint64_t variable initialization expression of HandshakeState.IdleState.sessionToResume@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of PartialHandshakeResult.sessionTicket()
{
  return 0;
}

uint64_t closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t specialized CertificateVerify.init(bytes:)(uint64_t *a1)
{
  uint64_t v3 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v3 & 0x10000) != 0) {
    goto LABEL_5;
  }
  uint64_t v1 = v3;
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  outlined copy of Data._Representation(*a1, v4);
  uint64_t v7 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v7 & 0x10000) != 0 || (uint64_t v8 = ByteBuffer.readSlice(length:)((unsigned __int16)v7), v9 >> 60 == 15))
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
LABEL_5:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 0;
    *(unsigned char *)(v11 + 4) = 1;
    goto LABEL_6;
  }
  unint64_t v13 = v9 >> 62;
  uint64_t v14 = 0;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v14 = v8 >> 32;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(v8 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v14 = BYTE6(v9);
      break;
  }
  BOOL v15 = __OFSUB__(v14, v10);
  uint64_t v16 = v14 - v10;
  if (v15)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v17 = v10 + v16;
  if (__OFADD__(v10, v16))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v18 = 0;
  switch((int)v13)
  {
    case 1:
      uint64_t v18 = v8 >> 32;
      break;
    case 2:
      uint64_t v18 = *(void *)(v8 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v18 = BYTE6(v9);
      break;
  }
  if (v18 < v17) {
    goto LABEL_30;
  }
  uint64_t v26 = v13;
  uint64_t v24 = v6;
  if (v17 < v10)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v25 = v8;
  unint64_t v27 = v9;
  uint64_t v19 = Data._Representation.subscript.getter();
  unint64_t v21 = v20;
  uint64_t v22 = 0;
  switch(v26)
  {
    case 1:
      uint64_t v22 = v25 >> 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(v25 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v22 = BYTE6(v27);
      break;
  }
  if (__OFSUB__(v22, v17))
  {
LABEL_32:
    __break(1u);
    JUMPOUT(0x1B56D00D8);
  }
  if (v22 == v17)
  {
    outlined consume of ByteBuffer?(v25, v27);
    outlined consume of Data._Representation(v5, v4);
    return v1;
  }
  uint64_t v1 = v25;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  *(_DWORD *)uint64_t v23 = 1;
  *(unsigned char *)(v23 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(v19, v21);
  outlined consume of Data._Representation(v25, v27);
  outlined consume of Data._Representation(*a1, a1[1]);
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v24;
LABEL_6:
  swift_willThrow();
  return v1;
}

unint64_t lazy protocol witness table accessor for type CertificateVerify and conformance CertificateVerify()
{
  unint64_t result = lazy protocol witness table cache variable for type CertificateVerify and conformance CertificateVerify;
  if (!lazy protocol witness table cache variable for type CertificateVerify and conformance CertificateVerify)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateVerify and conformance CertificateVerify);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CertificateVerify(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for CertificateVerify(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeWithCopy for CertificateVerify(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for CertificateVerify(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for CertificateVerify(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateVerify(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CertificateVerify(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateVerify()
{
  return &type metadata for CertificateVerify;
}

unint64_t lazy protocol witness table accessor for type TLSError and conformance TLSError()
{
  unint64_t result = lazy protocol witness table cache variable for type TLSError and conformance TLSError;
  if (!lazy protocol witness table cache variable for type TLSError and conformance TLSError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TLSError and conformance TLSError);
  }
  return result;
}

uint64_t PeerCertificateBundle.init(expectedCertificateType:peerCertificateMessage:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)logger);
    Swift::Bool v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1B56C5000, v29, v30, "invalid attempt to negotiate x.509 auth", v31, 2u);
      MEMORY[0x1BA99F280](v31, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    int v33 = 6;
    goto LABEL_25;
  }
  if (a1 != 2)
  {
    unint64_t v67 = a3;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)logger);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v68[0] = v38;
      *(_DWORD *)uint64_t v37 = 136446210;
      uint64_t v39 = CertificateType.description.getter(a1);
      v68[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B56C5000, v35, v36, "unsupported certificate type from peer: %{public}s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA99F280](v38, -1, -1);
      MEMORY[0x1BA99F280](v37, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v41 = 4;
    *(unsigned char *)(v41 + 4) = 1;
    swift_willThrow();
    uint64_t v42 = a2;
    unint64_t v43 = v67;
    goto LABEL_26;
  }
  uint64_t v15 = a4[2];
  if (v15 != 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)logger);
    outlined copy of Data._Representation(a2, a3);
    swift_bridgeObjectRetain();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      unint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v47 = 134349056;
      v68[0] = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data._Representation(a2, a3);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B56C5000, v45, v46, "invalid number of public key entries: %{public}ld", v47, 0xCu);
      MEMORY[0x1BA99F280](v47, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(a2, a3);

      swift_bridgeObjectRelease();
    }
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    int v33 = 5;
LABEL_25:
    *(_DWORD *)uint64_t v32 = v33;
    *(unsigned char *)(v32 + 4) = 1;
    swift_willThrow();
    uint64_t v42 = a2;
    unint64_t v43 = a3;
LABEL_26:
    outlined consume of Data._Representation(v42, v43);
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = a4;
  uint64_t v17 = a4[4];
  unint64_t v18 = a4[5];
  unint64_t v19 = v16[7];
  uint64_t v20 = *(void *)(v19 + 16);
  unint64_t v66 = v16;
  if (v20)
  {
    outlined copy of Data._Representation(v17, v18);
    uint64_t v21 = one-time initialization token for logger;
    swift_bridgeObjectRetain();
    uint64_t v22 = v17;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)logger);
    outlined copy of Data._Representation(v17, v18);
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      unint64_t v67 = v19;
      v68[0] = v20;
      unint64_t v27 = v26;
      *(_DWORD *)uint64_t v26 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data._Representation(v22, v18);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B56C5000, v24, v25, "invalid number of extensions: %{public}ld", v27, 0xCu);
      MEMORY[0x1BA99F280](v27, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(v22, v18);

      swift_bridgeObjectRelease();
    }
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v56 = 5;
    *(unsigned char *)(v56 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(a2, a3);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v22, v18);
    return swift_bridgeObjectRelease();
  }
  unint64_t v67 = a3;
  uint64_t v62 = v16[6];
  uint64_t v63 = a2;
  unint64_t v64 = v18;
  uint64_t v65 = v17;
  outlined copy of Data._Representation(v17, v18);
  uint64_t v49 = one-time initialization token for logger;
  swift_bridgeObjectRetain();
  if (v49 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)logger);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl(&dword_1B56C5000, v51, v52, "constructing public key from peer bytes", v53, 2u);
    MEMORY[0x1BA99F280](v53, -1, -1);
  }

  uint64_t v54 = 0;
  unint64_t v55 = v67;
  switch(v18 >> 62)
  {
    case 1uLL:
      uint64_t v54 = v65 >> 32;
      break;
    case 2uLL:
      uint64_t v54 = *(void *)(v65 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v54 = BYTE6(v64);
      break;
  }
  uint64_t v57 = v63;
  if (v54 < v62)
  {
    __break(1u);
    JUMPOUT(0x1B56D0CB4);
  }
  unint64_t v59 = v64;
  uint64_t v58 = v65;
  v68[0] = Data._Representation.subscript.getter();
  v68[1] = v60;
  lazy protocol witness table accessor for type Data and conformance Data();
  P256.Signing.PublicKey.init<A>(derRepresentation:)();
  outlined consume of Data._Representation(v57, v55);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v58, v59);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v6)
  {
    uint64_t v61 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v14, 0, 1, v61);
    return outlined init with take of PeerCertificateBundle.Bundle((uint64_t)v14, a5);
  }
  return result;
}

uint64_t PeerCertificateBundle.verifyServerCertificateVerifySignature(message:validKeys:keyScheduler:)(__int16 a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v79 = a2;
  uint64_t v7 = v6;
  uint64_t v74 = a5;
  uint64_t v76 = a4;
  unint64_t v80 = a3;
  uint64_t v10 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v75 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v77 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  id v73 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v65 - v16;
  uint64_t v18 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v71 = (uint64_t)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v65 - v21;
  uint64_t v72 = v7;
  outlined init with copy of PeerCertificateBundle.Bundle(v7, (uint64_t)&v65 - v21);
  uint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v70(v22, 1, v12) == 1) {
    goto LABEL_37;
  }
  id v69 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v69(v17, v22, v12);
  if (a1 == 1027)
  {
    uint64_t v68 = v10;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v67 = __swift_project_value_buffer(v23, (uint64_t)logger);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled((os_log_t)v24, v25))
    {
      uint64_t v26 = v17;
      uint64_t v27 = v13;
      uint64_t v28 = v12;
      Swift::Bool v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Bool v29 = 0;
      _os_log_impl(&dword_1B56C5000, (os_log_t)v24, v25, "validating signature from peer server", v29, 2u);
      os_log_type_t v30 = v29;
      uint64_t v12 = v28;
      uint64_t v13 = v27;
      uint64_t v17 = v26;
      MEMORY[0x1BA99F280](v30, -1, -1);
    }

    LOBYTE(v24) = a6;
    unint64_t v31 = v78;
    uint64_t v32 = specialized SessionKeyManager.dataToSignInServerCertificateVerify()();
    if (!v31)
    {
      uint64_t v66 = (uint64_t)v32;
      unint64_t v35 = v33;
      uint64_t v36 = v34;
      uint64_t v37 = 0;
      switch(v80 >> 62)
      {
        case 1uLL:
          uint64_t v37 = v79 >> 32;
          break;
        case 2uLL:
          uint64_t v37 = *(void *)(v79 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v37 = BYTE6(v80);
          break;
      }
      unint64_t v78 = v35;
      if (v37 < v76)
      {
        __break(1u);
      }
      else
      {
        uint64_t v50 = v13;
        uint64_t v81 = Data._Representation.subscript.getter();
        unint64_t v82 = v51;
        lazy protocol witness table accessor for type Data and conformance Data();
        P256.Signing.ECDSASignature.init<A>(derRepresentation:)();
        uint64_t v52 = 0;
        switch(v78 >> 62)
        {
          case 1uLL:
            uint64_t v52 = v66 >> 32;
            break;
          case 2uLL:
            uint64_t v52 = *(void *)(v66 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v52 = BYTE6(v78);
            break;
        }
        unint64_t v80 = v12;
        if (v52 >= v36)
        {
          uint64_t v53 = v17;
          uint64_t v54 = Data._Representation.subscript.getter();
          unint64_t v56 = v55;
          uint64_t v81 = v54;
          unint64_t v82 = v55;
          char v57 = P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
          outlined consume of Data._Representation(v54, v56);
          uint64_t v24 = Logger.logObject.getter();
          if ((v57 & 1) == 0)
          {
            os_log_type_t v63 = static os_log_type_t.error.getter();
            if (os_log_type_enabled((os_log_t)v24, v63))
            {
              unint64_t v64 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v64 = 0;
              _os_log_impl(&dword_1B56C5000, (os_log_t)v24, v63, "signature validation failed", v64, 2u);
              MEMORY[0x1BA99F280](v64, -1, -1);
            }
            outlined consume of Data._Representation(v66, v78);

            LOBYTE(v24) = 0;
            unint64_t v60 = v80;
            goto LABEL_34;
          }
          os_log_type_t v58 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled((os_log_t)v24, v58))
          {
            unint64_t v59 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v59 = 0;
            _os_log_impl(&dword_1B56C5000, (os_log_t)v24, v58, "validation succeeded", v59, 2u);
            MEMORY[0x1BA99F280](v59, -1, -1);
          }

          uint64_t v24 = v71;
          outlined init with copy of PeerCertificateBundle.Bundle(v72, v71);
          unint64_t v60 = v80;
          if (v70((char *)v24, 1, v80) != 1)
          {
            uint64_t v61 = v73;
            uint64_t v62 = ((uint64_t (*)(char *, uint64_t, unint64_t))v69)(v73, v24, v60);
            MEMORY[0x1F4188790](v62);
            *(&v65 - 2) = (uint64_t)v61;
            LOBYTE(v24) = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:), (uint64_t)(&v65 - 4), v74);
            (*(void (**)(char *, unint64_t))(v50 + 8))(v61, v60);
            outlined consume of Data._Representation(v66, v78);
LABEL_34:
            (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v68);
            (*(void (**)(char *, unint64_t))(v50 + 8))(v53, v60);
            return v24 & 1;
          }
LABEL_38:
          __break(1u);
          JUMPOUT(0x1B56D1558);
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)logger);
    uint64_t v40 = v79;
    unint64_t v39 = v80;
    outlined copy of Data._Representation(v79, v80);
    outlined copy of Data._Representation(v40, v39);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v24, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v81 = v43;
      unint64_t v78 = (unint64_t)v17;
      *(_DWORD *)uint64_t v42 = 136446210;
      unint64_t v44 = SignatureScheme.description.getter(a1);
      uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v81);
      uint64_t v17 = (char *)v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v47 = v79;
      unint64_t v46 = v80;
      outlined consume of Data._Representation(v79, v80);
      outlined consume of Data._Representation(v47, v46);
      _os_log_impl(&dword_1B56C5000, (os_log_t)v24, v41, "unsupported algorithm from peer: %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA99F280](v43, -1, -1);
      MEMORY[0x1BA99F280](v42, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(v40, v39);
      outlined consume of Data._Representation(v40, v39);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v48 = 6;
    *(unsigned char *)(v48 + 4) = 1;
    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  return v24 & 1;
}

char *specialized SessionKeyManager.dataToSignInServerCertificateVerify()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1F4188790](v1 - 8);
  unsigned int v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)v18 - v8;
  outlined init with copy of SessionKeyManager<SHA384>.State(v0, (uint64_t)v18 - v8);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v9, (uint64_t)v3, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v7 = (char *)specialized SessionKeyManager.State.HandshakeSecret.dataToSignInServerCertificateVerify.getter();
      outlined destroy of HandshakeStateMachine?((uint64_t)v3, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      outlined init with copy of SessionKeyManager<SHA384>.State(v0, (uint64_t)v7);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      unint64_t v12 = 0xE400000000000000;
      unint64_t v13 = 0xEB00000000746572;
      uint64_t v14 = 0x636553796C726165;
      uint64_t v15 = 1701602409;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          unint64_t v13 = 0xEF74657263655365;
          uint64_t v14 = 0x6B616873646E6168;
          goto LABEL_10;
        case 2:
          unint64_t v13 = 0xEC00000074657263;
          uint64_t v14 = 0x655372657473616DLL;
          goto LABEL_10;
        case 3:
          unint64_t v13 = 0xEA00000000007374;
          uint64_t v14 = 0x65726365536C6C61;
          goto LABEL_10;
        case 4:
          goto LABEL_11;
        default:
LABEL_10:
          outlined destroy of HandshakeStateMachine?((uint64_t)v7, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
          uint64_t v15 = v14;
          unint64_t v12 = v13;
LABEL_11:
          Logger.logInvalidStateTransition(stateName:event:)(v15, v12, 0xD00000000000001DLL, 0x80000001B5782680);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v16 = 2;
          *(unsigned char *)(v16 + 4) = 1;
          swift_willThrow();
          break;
      }
      break;
  }
  return v7;
}

Swift::Bool __swiftcall PeerCertificateBundle.wouldBeTrusted(forKeys:)(Swift::OpaquePointer forKeys)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of PeerCertificateBundle.Bundle(v2, (uint64_t)v10);
  int v11 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (v11 == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v10, v4);
    MEMORY[0x1F4188790](v12);
    *(void *)&v15[-16] = v7;
    BOOL v13 = specialized Sequence.contains(where:)((uint64_t (*)(char *))closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)partial apply, (uint64_t)&v15[-32], (uint64_t)forKeys._rawValue);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    LOBYTE(v11) = v13;
  }
  return v11;
}

uint64_t closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)()
{
  uint64_t v0 = MEMORY[0x1BA99E450]();
  unint64_t v2 = v1;
  uint64_t v3 = MEMORY[0x1BA99E450]();
  unint64_t v5 = v4;
  char v6 = specialized static Data.== infix(_:_:)(v0, v2, v3, v4);
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v6 & 1;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v38 = a1;
  uint64_t v39 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v6 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  MEMORY[0x1F4188790](v9 - 8);
  int v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v37 = v14;
    uint64_t v15 = a3 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v34 = v8;
    unint64_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v31 = v16;
    uint64_t v32 = (void (**)(char *))(v13 + 16);
    unint64_t v33 = (void (**)(char *, uint64_t))(v13 - 8);
    v29[2] = a3;
    swift_bridgeObjectRetain();
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 40);
    v29[1] = (v13 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      uint64_t v17 = v39;
      uint64_t v18 = v13;
      v37(v11, v15, v39);
      uint64_t v19 = *v36;
      (*v36)(v11, 0, 1, v17);
      int v20 = (*v35)(v11, 1, v17);
      BOOL v21 = v20 != 1;
      if (v20 == 1) {
        break;
      }
      os_log_type_t v30 = v19;
      uint64_t v22 = v11;
      uint64_t v23 = v34;
      uint64_t v24 = v22;
      (*v32)(v34);
      char v25 = v38(v23);
      if (v4)
      {
        (*v33)(v23, v17);
        swift_bridgeObjectRelease();
        return v21;
      }
      char v26 = v25;
      (*v33)(v23, v17);
      if (v26) {
        break;
      }
      v15 += v31;
      --v12;
      uint64_t v4 = 0;
      uint64_t v13 = v18;
      int v11 = v24;
      if (!v12)
      {
        v30(v24, 1, 1, v39);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v27(v11, 1, 1, v39);
LABEL_9:
    BOOL v21 = 0;
  }
  swift_bridgeObjectRelease();
  return v21;
}

void one-time initialization function for serverCertificateTypes()
{
  static PeerCertificateBundle.serverCertificateTypes = (uint64_t)&outlined read-only object #0 of one-time initialization function for serverCertificateTypes;
  byte_1EB79AD48 = 0;
}

uint64_t *PeerCertificateBundle.serverCertificateTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for serverCertificateTypes != -1) {
    swift_once();
  }
  return &static PeerCertificateBundle.serverCertificateTypes;
}

uint64_t static PeerCertificateBundle.serverCertificateTypes.getter()
{
  if (one-time initialization token for serverCertificateTypes != -1) {
    swift_once();
  }
  uint64_t v0 = static PeerCertificateBundle.serverCertificateTypes;
  outlined copy of Extension.ServerCertificateType(static PeerCertificateBundle.serverCertificateTypes, byte_1EB79AD48);
  return v0;
}

uint64_t ByteBuffer.writePeerCertificateBundle(_:)(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of PeerCertificateBundle.Bundle(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    char v15 = 1;
    uint64_t v18 = MEMORY[0x1E4FBB2B8];
    uint64_t v19 = MEMORY[0x1E4F27EF0];
    uint64_t v16 = &v15;
    uint64_t v17 = &v16;
    __swift_project_boxed_opaque_existential_1(&v16, MEMORY[0x1E4FBB2B8]);
    Data._Representation.append(contentsOf:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(v5, v8, v2);
    char v15 = 0;
    uint64_t v18 = MEMORY[0x1E4FBB2B8];
    uint64_t v19 = MEMORY[0x1E4F27EF0];
    uint64_t v16 = &v15;
    uint64_t v17 = &v16;
    __swift_project_boxed_opaque_existential_1(&v16, MEMORY[0x1E4FBB2B8]);
    Data._Representation.append(contentsOf:)();
    uint64_t v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    uint64_t v11 = MEMORY[0x1BA99E450](v10);
    unint64_t v13 = v12;
    specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(v11, v12);
    outlined consume of Data._Representation(v11, v13);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  void v10[5] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_9:
        __break(1u);
      }
      unint64_t v4 = (int)v4;
LABEL_6:
      if ((v4 & 0x8000000000000000) != 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1B56D225CLL);
      }
LABEL_7:
      unint64_t v9 = bswap64(v4);
      v10[3] = MEMORY[0x1E4FBB2B8];
      v10[4] = MEMORY[0x1E4F27EF0];
      v10[0] = &v9;
      v10[1] = v10;
      __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x1E4FBB2B8]);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      return specialized Data.append<A>(contentsOf:)(a1, a2);
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      unint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v4 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(unint64_t *a1, char *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2 - (char *)a1;
  if (!a1) {
    unint64_t v4 = 0;
  }
  unint64_t v8 = bswap64(v4);
  uint64_t v5 = MEMORY[0x1E4FBB2B8];
  uint64_t v6 = MEMORY[0x1E4F27EF0];
  uint64_t v11 = MEMORY[0x1E4FBB2B8];
  uint64_t v12 = MEMORY[0x1E4F27EF0];
  unint64_t v9 = &v8;
  uint64_t v10 = &v9;
  __swift_project_boxed_opaque_existential_1(&v9, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  uint64_t v11 = v5;
  uint64_t v12 = v6;
  unint64_t v9 = a1;
  uint64_t v10 = (unint64_t **)a2;
  __swift_project_boxed_opaque_existential_1(&v9, v5);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
}

Swift::Int specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  v7[5] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v6 = bswap64(v4);
  v7[3] = MEMORY[0x1E4FBB2B8];
  v7[4] = MEMORY[0x1E4F27EF0];
  v7[0] = &v6;
  v7[1] = v7;
  __swift_project_boxed_opaque_existential_1(v7, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  Swift::Int result = specialized Data.append<A>(contentsOf:)(a1, a2);
  if ((a2 & 0x1000000000000000) != 0) {
    return String.UTF8View._foreignCount()();
  }
  return result;
}

uint64_t ByteBuffer.readPeerCertificateBundle()@<X0>(char *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v6 = *(void *)(v5 - 8);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v53 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  uint64_t v8 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v48 - v12;
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v48 - v14;
  unsigned __int8 v56 = 0;
  uint64_t v16 = v3[2];
  uint64_t v17 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v18 = *v3;
  unint64_t v19 = v3[1];
  switch(v19 >> 62)
  {
    case 1uLL:
      if (v18 >> 32 < v17) {
        goto LABEL_13;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v18 + 24) >= v17) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 3uLL:
      if (v17 > 0) {
        goto LABEL_13;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v19) < v17)
      {
LABEL_13:
        uint64_t v24 = type metadata accessor for PeerCertificateBundle(0);
        char v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
        char v26 = a1;
        return v25((uint64_t)v26, 1, 1, v24);
      }
LABEL_8:
      uint64_t v57 = *v3;
      unint64_t v58 = v19;
      if (v17 < v16) {
        goto LABEL_36;
      }
      uint64_t v51 = v2;
      uint64_t v52 = v6;
      uint64_t v49 = v5;
      uint64_t v50 = a1;
      uint64_t v54 = v16;
      uint64_t v55 = v16 + 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v20 = v56;
      v3[2] = v17;
      if (v20)
      {
        if (v20 == 1)
        {
          BOOL v21 = v50;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v50, 1, 1, v49);
          uint64_t v22 = type metadata accessor for PeerCertificateBundle(0);
          return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
        }
        else
        {
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v36 = 7;
          *(unsigned char *)(v36 + 4) = 1;
          return swift_willThrow();
        }
      }
      unint64_t v27 = specialized ByteBuffer.readInteger<A>(as:)();
      uint64_t v28 = v52;
      if (v29)
      {
        uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
        uint64_t v35 = v49;
        v34(v15, 1, 1, v49);
        goto LABEL_22;
      }
      if ((v27 & 0x8000000000000000) != 0) {
        goto LABEL_37;
      }
      uint64_t v30 = ByteBuffer.readSlice(length:)(v27);
      uint64_t v33 = v51;
      if (v31 >> 60 != 15)
      {
        unint64_t v41 = v31;
        unint64_t v42 = v31 >> 62;
        uint64_t v43 = v30;
        uint64_t v44 = 0;
        switch(v42)
        {
          case 1uLL:
            uint64_t v44 = v30 >> 32;
            break;
          case 2uLL:
            uint64_t v44 = *(void *)(v30 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v44 = BYTE6(v41);
            break;
        }
        if (v44 >= v32)
        {
          uint64_t v57 = Data._Representation.subscript.getter();
          unint64_t v58 = v45;
          P256.Signing.PublicKey.init<A>(rawRepresentation:)();
          if (v33) {
            return outlined consume of ByteBuffer?(v43, v41);
          }
          uint64_t v51 = v43;
          uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
          uint64_t v46 = v49;
          v34(v13, 0, 1, v49);
          uint64_t v35 = v46;
          uint64_t v47 = v52;
          outlined consume of ByteBuffer?(v51, v41);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v13, 1, v35) != 1)
          {
            (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v15, v13, v35);
            v34(v15, 0, 1, v35);
            uint64_t v28 = v47;
            goto LABEL_22;
          }
          outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for P256.Signing.PublicKey?);
          goto LABEL_19;
        }
LABEL_38:
        __break(1u);
      }
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
      uint64_t v35 = v49;
LABEL_19:
      v34(v15, 1, 1, v35);
      uint64_t v28 = v52;
LABEL_22:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v15, (uint64_t)v10, &demangling cache variable for type metadata for P256.Signing.PublicKey?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v35) == 1)
      {
        outlined destroy of HandshakeStateMachine?((uint64_t)v10, &demangling cache variable for type metadata for P256.Signing.PublicKey?);
        uint64_t v24 = type metadata accessor for PeerCertificateBundle(0);
        char v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
        char v26 = v50;
        return v25((uint64_t)v26, 1, 1, v24);
      }
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
      uint64_t v38 = v53;
      v37(v53, v10, v35);
      uint64_t v39 = v50;
      v37(v50, v38, v35);
      v34(v39, 0, 1, v35);
      uint64_t v40 = type metadata accessor for PeerCertificateBundle(0);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
  }
}

uint64_t type metadata accessor for PeerCertificateBundle.Bundle(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for PeerCertificateBundle.Bundle);
}

uint64_t specialized SessionKeyManager.State.HandshakeSecret.dataToSignInServerCertificateVerify.getter()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for SHA384Digest();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v9 = xmmword_1B577F280;
  uint64_t v10 = 0;
  specialized Data.append<A>(contentsOf:)(64);
  specialized Data.append<A>(contentsOf:)(0xD000000000000021, 0x80000001B57826A0);
  if ((0x80000001B57826A0 & 0x1000000000000000) != 0) {
    String.UTF8View._foreignCount()();
  }
  char v7 = 0;
  v8[3] = MEMORY[0x1E4FBB2B8];
  v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = &v7;
  v8[1] = v8;
  __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  type metadata accessor for SHA384();
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  uint64_t v4 = dispatch thunk of HashFunction.finalize()();
  MEMORY[0x1F4188790](v4);
  *(void *)&v6[-16] = &v9;
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return v9;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)()
{
  return closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)() & 1;
}

uint64_t outlined copy of Extension.ServerCertificateType(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized static PeerCertificateBundle.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  int64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PeerCertificateBundle.Bundle, PeerCertificateBundle.Bundle));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PeerCertificateBundle.Bundle(a1, (uint64_t)v14);
  outlined init with copy of PeerCertificateBundle.Bundle(a2, v15);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(a2) = v16(v14, 1, v4);
  uint64_t result = v16((char *)v15, 1, v4);
  if (a2 == 1)
  {
    if (result == 1) {
      return result;
    }
    outlined destroy of PeerCertificateBundle.Bundle(v15);
  }
  else if (result == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  else
  {
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v18(v10, v14, v4);
    uint64_t v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v8, v15, v4);
    uint64_t v20 = MEMORY[0x1BA99E450](v19);
    unint64_t v22 = v21;
    uint64_t v23 = MEMORY[0x1BA99E450]();
    unint64_t v25 = v24;
    char v26 = specialized static Data.== infix(_:_:)(v20, v22, v23, v24);
    outlined consume of Data._Representation(v23, v25);
    outlined consume of Data._Representation(v20, v22);
    unint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
    v27(v8, v4);
    v27(v10, v4);
    if (v26) {
      return 1;
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for PeerCertificateBundle(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for PeerCertificateBundle);
}

uint64_t type metadata accessor for PeerCertificateBundle.Bundle(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PeerCertificateBundle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

void *initializeWithCopy for PeerCertificateBundle(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for PeerCertificateBundle(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for PeerCertificateBundle(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for PeerCertificateBundle(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerCertificateBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B56D4104);
}

uint64_t sub_1B56D4104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PeerCertificateBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B56D4184);
}

uint64_t sub_1B56D4184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PeerCertificateBundle()
{
  uint64_t result = type metadata accessor for PeerCertificateBundle.Bundle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PeerCertificateBundle.Bundle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for PeerCertificateBundle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for PeerCertificateBundle.Bundle(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for PeerCertificateBundle.Bundle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for PeerCertificateBundle.Bundle(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for PeerCertificateBundle.Bundle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B56D49B8);
}

uint64_t sub_1B56D49B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B56D4A38);
}

uint64_t sub_1B56D4A38(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for PeerCertificateBundle.Bundle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.Signing.PublicKey();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata completion function for PeerCertificateBundle.Bundle()
{
  uint64_t result = type metadata accessor for P256.Signing.PublicKey();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t specialized static PeerCertificateBundle.Bundle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int v10 = (char *)&v29 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PeerCertificateBundle.Bundle, PeerCertificateBundle.Bundle));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PeerCertificateBundle.Bundle(a1, (uint64_t)v14);
  outlined init with copy of PeerCertificateBundle.Bundle(a2, v15);
  uint64_t v16 = (uint64_t (*)(char *, uint64_t, uint64_t))v5[6];
  LODWORD(a2) = v16(v14, 1, v4);
  int v17 = v16((char *)v15, 1, v4);
  if (a2 != 1)
  {
    if (v17 != 1)
    {
      uint64_t v19 = (void (*)(char *, char *, uint64_t))v5[4];
      v19(v10, v14, v4);
      uint64_t v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v8, v15, v4);
      uint64_t v21 = MEMORY[0x1BA99E450](v20);
      unint64_t v23 = v22;
      uint64_t v24 = MEMORY[0x1BA99E450]();
      unint64_t v26 = v25;
      char v18 = specialized static Data.== infix(_:_:)(v21, v23, v24, v25);
      outlined consume of Data._Representation(v24, v26);
      outlined consume of Data._Representation(v21, v23);
      unint64_t v27 = (void (*)(char *, uint64_t))v5[1];
      v27(v8, v4);
      v27(v10, v4);
      return v18 & 1;
    }
    ((void (*)(char *, uint64_t))v5[1])(v14, v4);
    goto LABEL_7;
  }
  if (v17 != 1)
  {
    outlined destroy of PeerCertificateBundle.Bundle(v15);
LABEL_7:
    char v18 = 0;
    return v18 & 1;
  }
  char v18 = 1;
  return v18 & 1;
}

uint64_t outlined destroy of PeerCertificateBundle.Bundle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of SessionKeyManager<SHA384>.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of P256.Signing.PublicKey?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in SessionKeyManager.State.HandshakeSecret.dataToSignInServerCertificateVerify.getter(uint64_t a1, uint64_t a2)
{
  return closure #1 in SessionKeyManager.generateHashForAuthenticator(transcript:)(a1, a2);
}

uint64_t lazy protocol witness table accessor for type SHA384 and conformance SHA384(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)partial apply()
{
  return partial apply for closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)() & 1;
}

double LegacySessionID.init<A>(_:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v9 = dispatch thunk of Collection.count.getter();
  int v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v8, a2);
  if (v9 > 32) {
    __break(1u);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  UnsafeMutableRawBufferPointer.copyBytes<A>(from:)();
  uint64_t v11 = dispatch thunk of Collection.count.getter();
  v10(a1, a2);
  double result = *(double *)&v14;
  long long v13 = v15;
  *(_OWORD *)a3 = v14;
  *(_OWORD *)(a3 + 16) = v13;
  *(void *)(a3 + 32) = v11;
  return result;
}

uint64_t static LegacySessionID.random()@<X0>(void *a1@<X8>)
{
  uint64_t v7 = 0;
  MEMORY[0x1BA99F290](&v7, 8);
  uint64_t v2 = v7;
  uint64_t v7 = 0;
  MEMORY[0x1BA99F290](&v7, 8);
  uint64_t v3 = v7;
  uint64_t v7 = 0;
  MEMORY[0x1BA99F290](&v7, 8);
  uint64_t v4 = v7;
  uint64_t v7 = 0;
  uint64_t result = MEMORY[0x1BA99F290](&v7, 8);
  uint64_t v6 = v7;
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v6;
  a1[4] = 32;
  return result;
}

double static LegacySessionID.zero.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

BOOL static LegacySessionID.== infix(_:_:)(int64x2_t *a1, int64x2_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*a1, *a2), (int32x4_t)vceqq_s64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].i64[0] == a2[2].i64[0];
}

void LegacySessionID.hash(into:)()
{
  Hasher._combine(_:)(v0[4]);
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v2 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
}

Swift::Int LegacySessionID.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0[4]);
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v2 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LegacySessionID()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LegacySessionID()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LegacySessionID()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LegacySessionID(int64x2_t *a1, int64x2_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*a1, *a2), (int32x4_t)vceqq_s64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].i64[0] == a2[2].i64[0];
}

unint64_t ByteBuffer.writeLegacySessionID(_:)(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  LOBYTE(v17[0]) = 0;
  uint64_t v20 = MEMORY[0x1E4FBB2B8];
  unint64_t v21 = MEMORY[0x1E4F27EF0];
  v19[0] = v17;
  v19[1] = (char *)v17 + 1;
  __swift_project_boxed_opaque_existential_1(v19, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  long long v6 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v6;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v8 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(0, v7, 32, (uint64_t)v17, (uint64_t)v18);
  if (v9) {
    unint64_t v10 = 32;
  }
  else {
    unint64_t v10 = v8;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  uint64_t v20 = v11;
  unint64_t v21 = lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  uint64_t v12 = (void *)swift_allocObject();
  v19[0] = v12;
  v12[2] = 0;
  uint64_t v12[3] = v10;
  v12[4] = v17;
  v12[5] = v18;
  long long v13 = __swift_project_boxed_opaque_existential_1(v19, v11);
  long long v14 = (_OWORD *)MEMORY[0x1F4188790](v13);
  long long v15 = v14[1];
  v18[0] = *v14;
  v18[1] = v15;
  Slice<>.withUnsafeBytes<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (v10 > 0x20) {
    goto LABEL_14;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v10, v5);
  return v10 + 1;
}

uint64_t ByteBuffer.readLegacySessionID()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  uint64_t v7 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v4 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v8 = *(void *)(v4 + 24);
LABEL_6:
      outlined copy of Data._Representation(v4, v3);
      goto LABEL_7;
    case 3uLL:
      if (v6 >= 1) {
        goto LABEL_12;
      }
      goto LABEL_8;
    default:
      uint64_t v8 = BYTE6(v3);
LABEL_7:
      if (v8 < v6) {
        goto LABEL_12;
      }
LABEL_8:
      uint64_t v44 = v4;
      unint64_t v45 = v3;
      if (v6 < v5) {
        goto LABEL_40;
      }
      uint64_t v41 = v4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      v7[2] = v6;
      uint64_t v9 = ByteBuffer.readSlice(length:)(0);
      if (v10 >> 60 == 15)
      {
LABEL_12:
        uint64_t result = outlined consume of Data._Representation(*v7, v7[1]);
        uint64_t v13 = 0;
        uint64_t *v7 = v4;
        v7[1] = v3;
        long long v14 = 0uLL;
        char v15 = 1;
        long long v16 = 0uLL;
        v7[2] = v5;
LABEL_13:
        *(_OWORD *)a1 = v14;
        *(_OWORD *)(a1 + 16) = v16;
        *(void *)(a1 + 32) = v13;
        *(unsigned char *)(a1 + 40) = v15;
        return result;
      }
      uint64_t v17 = v9;
      unint64_t v18 = v10;
      uint64_t v44 = v9;
      unint64_t v45 = v10;
      unint64_t v19 = v10 >> 62;
      uint64_t v46 = v11;
      uint64_t v20 = 0;
      uint64_t v21 = v41;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = v9 >> 32;
          break;
        case 2uLL:
          uint64_t v20 = *(void *)(v9 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v20 = BYTE6(v10);
          break;
      }
      BOOL v22 = __OFSUB__(v20, v11);
      uint64_t v23 = v20 - v11;
      if (v22) {
        goto LABEL_41;
      }
      if (v23 > 32) {
        goto LABEL_38;
      }
      uint64_t v24 = 0;
      uint64_t v40 = v19;
      switch((int)v19)
      {
        case 1:
          uint64_t v24 = v9 >> 32;
          break;
        case 2:
          uint64_t v24 = *(void *)(v9 + 24);
          break;
        case 3:
          break;
        default:
          uint64_t v24 = BYTE6(v10);
          break;
      }
      if (__OFSUB__(v24, v11)) {
        goto LABEL_42;
      }
      uint64_t v25 = ByteBuffer.readSlice(length:)(v24 - v11);
      if (v26 >> 60 == 15)
      {
        __break(1u);
        JUMPOUT(0x1B56D5BD8);
      }
      unint64_t v28 = v26;
      unint64_t v29 = v26 >> 62;
      uint64_t v30 = 0;
      switch(v29)
      {
        case 1uLL:
          uint64_t v30 = v25 >> 32;
          break;
        case 2uLL:
          uint64_t v30 = *(void *)(v25 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v30 = BYTE6(v28);
          break;
      }
      uint64_t v39 = v17;
      if (v30 < v27) {
        goto LABEL_43;
      }
      uint64_t v31 = v25;
      uint64_t v32 = Data._Representation.subscript.getter();
      unint64_t v34 = v33;
      outlined consume of ByteBuffer?(v31, v28);
      specialized LegacySessionID.init<A>(_:)(v32, v34, (uint64_t)v42);
      long long v38 = v42[0];
      long long v37 = v42[1];
      uint64_t v13 = v43;
      outlined consume of Data._Representation(v32, v34);
      uint64_t v35 = 0;
      uint64_t v21 = v41;
      switch(v40)
      {
        case 1:
          uint64_t v35 = v39 >> 32;
          break;
        case 2:
          uint64_t v35 = *(void *)(v39 + 24);
          break;
        case 3:
          break;
        default:
          uint64_t v35 = BYTE6(v18);
          break;
      }
      if (__OFSUB__(v35, v46)) {
        goto LABEL_44;
      }
      if (v35 == v46)
      {
        outlined consume of ByteBuffer?(v39, v18);
        uint64_t result = outlined consume of Data._Representation(v41, v3);
        char v15 = 0;
        long long v14 = v38;
        long long v16 = v37;
        goto LABEL_13;
      }
LABEL_38:
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v36 = 1;
      *(unsigned char *)(v36 + 4) = 1;
      swift_willThrow();
      outlined consume of Data._Representation(v44, v45);
      outlined consume of Data._Representation(*v7, v7[1]);
      uint64_t *v7 = v21;
      v7[1] = v3;
      v7[2] = v5;
      return swift_willThrow();
  }
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 - a4;
  if (!a4) {
    uint64_t v5 = 0;
  }
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_14:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result) {
    goto LABEL_21;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t sub_1B56D5D1C()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return closure #1 in Data.append<A>(contentsOf:)();
}

double specialized LegacySessionID.init<A>(_:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2 >> 62;
  unsigned __int8 v5 = BYTE6(a2);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_16;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 > 32)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      long long v16 = 0u;
      long long v17 = 0u;
      specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(a1, a2, &v16, (uint64_t)v18);
      if (!v4)
      {
        uint64_t v11 = v5;
        goto LABEL_14;
      }
      if (v4 != 1)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        uint64_t v12 = *(void *)(a1 + 24);
        BOOL v10 = __OFSUB__(v12, v13);
        uint64_t v11 = v12 - v13;
        if (!v10) {
          goto LABEL_14;
        }
LABEL_19:
        __break(1u);
      }
      LODWORD(v11) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      uint64_t v11 = (int)v11;
LABEL_14:
      double result = *(double *)&v16;
      long long v15 = v17;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v15;
      *(void *)(a3 + 32) = v11;
      return result;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_17;
    case 3uLL:
      long long v16 = 0u;
      long long v17 = 0u;
      specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(a1, a2, &v16, (uint64_t)v18);
      uint64_t v11 = 0;
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t lazy protocol witness table accessor for type LegacySessionID and conformance LegacySessionID()
{
  unint64_t result = lazy protocol witness table cache variable for type LegacySessionID and conformance LegacySessionID;
  if (!lazy protocol witness table cache variable for type LegacySessionID and conformance LegacySessionID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacySessionID and conformance LegacySessionID);
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LegacySessionID(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LegacySessionID(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for LegacySessionID()
{
  return &type metadata for LegacySessionID;
}

uint64_t Extension.type.getter()
{
  outlined init with take of Extension(v0, (uint64_t)v2);
  uint64_t result = 10;
  switch(v3)
  {
    case 1:
      return result;
    case 2:
      outlined init with take of Extension.SupportedVersions((uint64_t)v2, (uint64_t)v4);
      uint64_t result = 43;
      break;
    case 3:
    case 9:
      uint64_t result = 16;
      break;
    case 4:
      outlined init with take of Extension.KeyShare((uint64_t)v2, (uint64_t)v4);
      uint64_t result = 51;
      break;
    case 5:
      uint64_t result = 42;
      break;
    case 6:
      uint64_t result = 13;
      break;
    case 7:
      outlined init with take of Extension.ServerCertificateType((uint64_t)v2, (uint64_t)v4);
      uint64_t result = 20;
      break;
    case 8:
      uint64_t result = 57;
      break;
    case 10:
      uint64_t result = 45;
      break;
    case 11:
      outlined init with take of Extension.PreSharedKey((uint64_t)v2, (uint64_t)v4);
      uint64_t result = 41;
      break;
    case 12:
      outlined init with take of Extension.TicketRequest((uint64_t)v2, (uint64_t)v4);
      uint64_t result = 58;
      break;
    case 13:
      uint64_t result = v2[0];
      break;
    default:
      outlined init with take of Extension.ServerName((uint64_t)v2, (uint64_t)v4);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t outlined init with take of Extension(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with take of Extension.TicketRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of Extension.PreSharedKey(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of Extension.ServerCertificateType(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of Extension.KeyShare(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of Extension.SupportedVersions(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of Extension.ServerName(uint64_t a1, uint64_t a2)
{
  return a2;
}

void Extension.hash(into:)(uint64_t a1)
{
  long long v2 = v1;
  outlined init with take of Extension(v2, (uint64_t)v69);
  uint64_t v5 = v69[0];
  unint64_t v4 = v69[1];
  unint64_t v6 = v69[2];
  outlined init with take of Extension(v2, (uint64_t)&v70);
  switch(v73)
  {
    case 1:
      uint64_t v10 = v70;
      Hasher._combine(_:)(1uLL);
      Swift::UInt v11 = *(void *)(v10 + 16);
      Hasher._combine(_:)(v11);
      if (v11)
      {
        uint64_t v12 = (Swift::UInt16 *)(v10 + 32);
        do
        {
          Swift::UInt16 v13 = *v12++;
          Hasher._combine(_:)(v13);
          --v11;
        }
        while (v11);
      }
      return;
    case 2:
      outlined init with take of Extension.SupportedVersions((uint64_t)&v70, (uint64_t)v76);
      Hasher._combine(_:)(2uLL);
      outlined init with take of Extension.SupportedVersions((uint64_t)v76, (uint64_t)&v74);
      if (BYTE8(v74))
      {
        Swift::UInt8 v14 = v74;
        Swift::UInt8 v15 = BYTE1(v74);
        Swift::UInt v16 = 1;
LABEL_51:
        Hasher._combine(_:)(v16);
        Hasher._combine(_:)(v14);
        Hasher._combine(_:)(v15);
      }
      else
      {
        uint64_t v45 = v74;
        Hasher._combine(_:)(0);
        Swift::UInt v46 = *(void *)(v45 + 16);
        Hasher._combine(_:)(v46);
        if (v46)
        {
          uint64_t v47 = (Swift::UInt8 *)(v45 + 33);
          do
          {
            Swift::UInt8 v48 = *(v47 - 1);
            Swift::UInt8 v49 = *v47;
            v47 += 2;
            Hasher._combine(_:)(v48);
            Hasher._combine(_:)(v49);
            --v46;
          }
          while (v46);
        }
      }
      return;
    case 3:
      long long v74 = v70;
      uint64_t v75 = v71;
      Hasher._combine(_:)(3uLL);
      uint64_t v17 = v74;
      uint64_t v18 = v75;
      uint64_t v19 = 0;
      switch(*((void *)&v74 + 1) >> 62)
      {
        case 1:
          uint64_t v19 = (uint64_t)v74 >> 32;
          goto LABEL_56;
        case 2:
          uint64_t v19 = *(void *)(v74 + 24);
LABEL_56:
          outlined copy of Data._Representation(v5, v4);
          outlined retain of Extension.QUICTransportParameters((uint64_t)&v74);
          break;
        case 3:
          break;
        default:
          uint64_t v19 = BYTE14(v74);
          break;
      }
      if (v19 >= v18) {
        goto LABEL_68;
      }
      __break(1u);
LABEL_59:
      uint64_t v32 = v17 >> 32;
LABEL_61:
      outlined copy of Data._Representation(v5, v4);
      outlined retain of Extension.QUICTransportParameters((uint64_t)&v74);
LABEL_62:
      if (v32 < v18)
      {
        __break(1u);
LABEL_64:
        uint64_t v33 = v17 >> 32;
LABEL_66:
        outlined copy of Data._Representation(v5, v4);
        outlined retain of Extension.QUICTransportParameters((uint64_t)&v74);
LABEL_67:
        if (v33 < v18)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
      }
LABEL_68:
      uint64_t v55 = Data._Representation.subscript.getter();
      unint64_t v57 = v56;
      Data.hash(into:)();
      outlined consume of Data._Representation(v55, v57);
      outlined release of Extension((uint64_t)v2, (void (*)(void, void, void, void, void))outlined consume of Extension);
      uint64_t v58 = (uint64_t)v2;
LABEL_75:
      outlined release of Extension(v58, (void (*)(void, void, void, void, void))outlined consume of Extension);
      return;
    case 4:
      uint64_t v20 = *((void *)&v70 + 1);
      uint64_t v21 = v70;
      unint64_t v23 = v71;
      uint64_t v22 = v72;
      Hasher._combine(_:)(4uLL);
      uint64_t v24 = (v23 >> 60) & 3;
      if (v24)
      {
        if (v24 == 1)
        {
          unint64_t v68 = v23 & 0xCFFFFFFFFFFFFFFFLL;
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v21);
          uint64_t v25 = 0;
          switch(v23 >> 62)
          {
            case 1uLL:
              uint64_t v25 = v20 >> 32;
              goto LABEL_84;
            case 2uLL:
              uint64_t v25 = *(void *)(v20 + 24);
LABEL_84:
              outlined copy of Extension.KeyShare(v5, v4, v6);
              outlined copy of Data._Representation(v20, v68);
              outlined copy of Data._Representation(v20, v68);
              break;
            case 3uLL:
              break;
            default:
              uint64_t v25 = BYTE6(v23);
              break;
          }
          if (v25 >= v22)
          {
            uint64_t v65 = Data._Representation.subscript.getter();
            unint64_t v67 = v66;
            Data.hash(into:)();
            outlined consume of Data._Representation(v65, v67);
            outlined release of Extension((uint64_t)v2, (void (*)(void, void, void, void, void))outlined consume of Extension);
            outlined release of Extension((uint64_t)v2, (void (*)(void, void, void, void, void))outlined consume of Extension);
            outlined consume of Extension.KeyShare(v5, v4, v6);
            return;
          }
LABEL_90:
          __break(1u);
          JUMPOUT(0x1B56D6B3CLL);
        }
        Hasher._combine(_:)(2uLL);
        Hasher._combine(_:)(v21);
      }
      else
      {
        Hasher._combine(_:)(0);
        outlined copy of Extension.KeyShare(v5, v4, v6);
        specialized Array<A>.hash(into:)(a1, v21);
      }
      goto LABEL_74;
    case 5:
      Swift::UInt32 v26 = v70;
      char v27 = BYTE4(v70);
      Hasher._combine(_:)(5uLL);
      if (v27)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
      }
      return;
    case 6:
      uint64_t v28 = v70;
      Hasher._combine(_:)(6uLL);
      Swift::UInt v29 = *(void *)(v28 + 16);
      Hasher._combine(_:)(v29);
      if (v29)
      {
        uint64_t v30 = (Swift::UInt16 *)(v28 + 32);
        do
        {
          Swift::UInt16 v31 = *v30++;
          Hasher._combine(_:)(v31);
          --v29;
        }
        while (v29);
      }
      return;
    case 7:
      outlined init with take of Extension.ServerCertificateType((uint64_t)&v70, (uint64_t)v76);
      Hasher._combine(_:)(7uLL);
      outlined init with take of Extension.ServerCertificateType((uint64_t)v76, (uint64_t)&v74);
      if (BYTE8(v74))
      {
        Swift::UInt8 v14 = v74;
LABEL_35:
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v14);
      }
      else
      {
        uint64_t v50 = v74;
        Hasher._combine(_:)(0);
        Swift::UInt v51 = *(void *)(v50 + 16);
        Hasher._combine(_:)(v51);
        if (v51)
        {
          uint64_t v52 = (Swift::UInt8 *)(v50 + 32);
          do
          {
            Swift::UInt8 v53 = *v52++;
            Hasher._combine(_:)(v53);
            --v51;
          }
          while (v51);
        }
      }
      return;
    case 8:
      long long v74 = v70;
      uint64_t v75 = v71;
      Hasher._combine(_:)(8uLL);
      uint64_t v17 = v74;
      uint64_t v18 = v75;
      uint64_t v32 = 0;
      switch(*((void *)&v74 + 1) >> 62)
      {
        case 1:
          goto LABEL_59;
        case 2:
          uint64_t v32 = *(void *)(v74 + 24);
          goto LABEL_61;
        case 3:
          goto LABEL_62;
        default:
          uint64_t v32 = BYTE14(v74);
          break;
      }
      goto LABEL_62;
    case 9:
      long long v74 = v70;
      uint64_t v75 = v71;
      Hasher._combine(_:)(9uLL);
      uint64_t v17 = v74;
      uint64_t v18 = v75;
      uint64_t v33 = 0;
      switch(*((void *)&v74 + 1) >> 62)
      {
        case 1:
          goto LABEL_64;
        case 2:
          uint64_t v33 = *(void *)(v74 + 24);
          goto LABEL_66;
        case 3:
          goto LABEL_67;
        default:
          uint64_t v33 = BYTE14(v74);
          break;
      }
      goto LABEL_67;
    case 10:
      uint64_t v34 = v70;
      Hasher._combine(_:)(0xAuLL);
      Swift::UInt v35 = *(void *)(v34 + 16);
      Hasher._combine(_:)(v35);
      if (v35)
      {
        uint64_t v36 = (Swift::UInt8 *)(v34 + 32);
        do
        {
          Swift::UInt8 v37 = *v36++;
          Hasher._combine(_:)(v37);
          --v35;
        }
        while (v35);
      }
      return;
    case 11:
      outlined init with take of Extension.PreSharedKey((uint64_t)&v70, (uint64_t)v76);
      Hasher._combine(_:)(0xBuLL);
      outlined init with take of Extension.PreSharedKey((uint64_t)v76, (uint64_t)&v74);
      if (v75)
      {
        Swift::UInt16 v38 = v74;
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v38);
      }
      else
      {
        long long v54 = v74;
        Hasher._combine(_:)(0);
        swift_bridgeObjectRetain();
        specialized Array<A>.hash(into:)(a1, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        specialized Array<A>.hash(into:)(a1, *((uint64_t *)&v54 + 1));
        swift_bridgeObjectRelease();
      }
      return;
    case 12:
      outlined init with take of Extension.TicketRequest((uint64_t)&v70, (uint64_t)v76);
      Hasher._combine(_:)(0xCuLL);
      outlined init with take of Extension.TicketRequest((uint64_t)v76, (uint64_t)&v74);
      Swift::UInt8 v14 = v74;
      if (BYTE2(v74)) {
        goto LABEL_35;
      }
      Swift::UInt8 v15 = BYTE1(v74);
      Swift::UInt v16 = 0;
      goto LABEL_51;
    case 13:
      uint64_t v39 = *((void *)&v70 + 1);
      unint64_t v40 = v71;
      uint64_t v41 = v72;
      Swift::UInt16 v42 = v70;
      Hasher._combine(_:)(0xDuLL);
      Hasher._combine(_:)(v42);
      uint64_t v43 = 0;
      switch(v40 >> 62)
      {
        case 1uLL:
          uint64_t v43 = v39 >> 32;
          goto LABEL_71;
        case 2uLL:
          uint64_t v43 = *(void *)(v39 + 24);
LABEL_71:
          outlined copy of Data._Representation(v4, v6);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v43 = BYTE6(v40);
          break;
      }
      if (v43 < v41) {
        goto LABEL_88;
      }
      uint64_t v59 = Data._Representation.subscript.getter();
      unint64_t v61 = v60;
      Data.hash(into:)();
      outlined consume of Data._Representation(v59, v61);
      goto LABEL_74;
    default:
      unint64_t v8 = *((void *)&v70 + 1);
      uint64_t v7 = v70;
      uint64_t v9 = v71;
      Hasher._combine(_:)(0);
      if (v8 >> 60 == 15)
      {
        Hasher._combine(_:)(1uLL);
LABEL_74:
        uint64_t v58 = (uint64_t)v2;
        goto LABEL_75;
      }
      Hasher._combine(_:)(0);
      uint64_t v44 = 0;
      switch(v8 >> 62)
      {
        case 1uLL:
          uint64_t v44 = v7 >> 32;
          goto LABEL_79;
        case 2uLL:
          uint64_t v44 = *(void *)(v7 + 24);
LABEL_79:
          outlined copy of ByteBuffer?(v5, v4);
          outlined copy of Data._Representation(v7, v8);
          outlined copy of Data._Representation(v7, v8);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v44 = BYTE6(v8);
          break;
      }
      if (v44 >= v9)
      {
        uint64_t v62 = Data._Representation.subscript.getter();
        unint64_t v64 = v63;
        Data.hash(into:)();
        outlined consume of Data._Representation(v62, v64);
        outlined release of Extension((uint64_t)v2, (void (*)(void, void, void, void, void))outlined consume of Extension);
        outlined release of Extension((uint64_t)v2, (void (*)(void, void, void, void, void))outlined consume of Extension);
        outlined consume of ByteBuffer?(v5, v4);
        return;
      }
      goto LABEL_89;
  }
}

Swift::Int Extension.hashValue.getter()
{
  Hasher.init(_seed:)();
  Extension.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension()
{
  outlined init with take of Extension(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  Extension.hash(into:)((uint64_t)&v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Extension(uint64_t a1)
{
  outlined init with take of Extension(v1, (uint64_t)v3);
  Extension.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension()
{
  outlined init with take of Extension(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  Extension.hash(into:)((uint64_t)&v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension(long long *a1, long long *a2)
{
  outlined init with take of Extension(a1, (uint64_t)v4);
  outlined init with take of Extension(a2, (uint64_t)v5);
  return specialized static Extension.__derived_enum_equals(_:_:)(v4, v5) & 1;
}

unint64_t ByteBuffer.writeExtension(_:)(long long *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  outlined init with take of Extension(a1, (uint64_t)v17);
  unsigned int v3 = 10;
  switch(v18)
  {
    case 1:
      break;
    case 2:
      outlined init with take of Extension.SupportedVersions((uint64_t)v17, (uint64_t)v19);
      unsigned int v3 = 43;
      break;
    case 3:
    case 9:
      unsigned int v3 = 16;
      break;
    case 4:
      outlined init with take of Extension.KeyShare((uint64_t)v17, (uint64_t)v19);
      unsigned int v3 = 51;
      break;
    case 5:
      unsigned int v3 = 42;
      break;
    case 6:
      unsigned int v3 = 13;
      break;
    case 7:
      outlined init with take of Extension.ServerCertificateType((uint64_t)v17, (uint64_t)v19);
      unsigned int v3 = 20;
      break;
    case 8:
      unsigned int v3 = 57;
      break;
    case 10:
      unsigned int v3 = 45;
      break;
    case 11:
      outlined init with take of Extension.PreSharedKey((uint64_t)v17, (uint64_t)v19);
      unsigned int v3 = 41;
      break;
    case 12:
      outlined init with take of Extension.TicketRequest((uint64_t)v17, (uint64_t)v19);
      unsigned int v3 = 58;
      break;
    case 13:
      unsigned int v3 = v17[0];
      break;
    default:
      outlined init with take of Extension.ServerName((uint64_t)v17, (uint64_t)v19);
      unsigned int v3 = 0;
      break;
  }
  __int16 v12 = __rev16(v3);
  uint64_t v4 = MEMORY[0x1E4FBB2B8];
  uint64_t v5 = MEMORY[0x1E4F27EF0];
  uint64_t v15 = MEMORY[0x1E4FBB2B8];
  uint64_t v16 = MEMORY[0x1E4F27EF0];
  Swift::UInt16 v13 = &v12;
  Swift::UInt8 v14 = &v13;
  __swift_project_boxed_opaque_existential_1(&v13, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  uint64_t v6 = *v1;
  unint64_t v7 = v1[1];
  uint64_t v8 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v6 >> 32;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(v6 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = BYTE6(v7);
      break;
  }
  __int16 v12 = 0;
  uint64_t v15 = v4;
  uint64_t v16 = v5;
  Swift::UInt16 v13 = &v12;
  Swift::UInt8 v14 = &v13;
  __swift_project_boxed_opaque_existential_1(&v13, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  unint64_t v9 = closure #1 in ByteBuffer.writeExtension(_:)(v1, a1);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
  }
  unint64_t v10 = v9;
  if (v9 >> 16) {
    goto LABEL_22;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v9, v8);
  return v10 + 4;
}

uint64_t closure #1 in ByteBuffer.writeExtension(_:)(uint64_t *a1, long long *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  outlined init with take of Extension(a2, (uint64_t)v83);
  uint64_t v5 = v83[0];
  unint64_t v4 = v83[1];
  unint64_t v6 = v83[2];
  outlined init with take of Extension(a2, (uint64_t)&v84);
  switch(v88)
  {
    case 1:
      return ByteBuffer.writeSupportedGroups(_:)(v84);
    case 2:
      outlined init with take of Extension.SupportedVersions((uint64_t)&v84, (uint64_t)v89);
      outlined init with take of Extension.SupportedVersions((uint64_t)v89, (uint64_t)&v90);
      if (v91)
      {
        LOWORD(v11) = v90;
        goto LABEL_14;
      }
      uint64_t v43 = v90;
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
      unint64_t v10 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, v43);
      goto LABEL_32;
    case 3:
      uint64_t v30 = v84;
      unint64_t v20 = v85;
      uint64_t v21 = v86;
      uint64_t v31 = *a1;
      unint64_t v32 = a1[1];
      uint64_t v24 = 0;
      switch(v32 >> 62)
      {
        case 1uLL:
          goto LABEL_43;
        case 2uLL:
          uint64_t v24 = *(void *)(v31 + 24);
          break;
        case 3uLL:
          goto LABEL_45;
        default:
          uint64_t v24 = BYTE6(v32);
          break;
      }
      goto LABEL_45;
    case 4:
      outlined init with take of Extension.KeyShare((uint64_t)&v84, (uint64_t)v89);
      outlined init with take of Extension.KeyShare((uint64_t)v89, (uint64_t)&v90);
      uint64_t v12 = (v92 >> 60) & 3;
      if (!v12)
      {
        v92 &= 0xCFFFFFFFFFFFFFFFLL;
        uint64_t v45 = v90;
        uint64_t v46 = *a1;
        unint64_t v47 = a1[1];
        uint64_t v48 = 0;
        uint64_t v75 = (uint64_t)a2;
        switch(v47 >> 62)
        {
          case 1uLL:
            uint64_t v48 = v46 >> 32;
            break;
          case 2uLL:
            uint64_t v48 = *(void *)(v46 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v48 = BYTE6(v47);
            break;
        }
        uint64_t v73 = v48;
        LOWORD(v77) = 0;
        uint64_t v81 = MEMORY[0x1E4FBB2B8];
        uint64_t v82 = MEMORY[0x1E4F27EF0];
        uint64_t v79 = (uint64_t *)&v77;
        unint64_t v80 = (char *)&v77 + 2;
        __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
        outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
        uint64_t v52 = *(void *)(v45 + 16);
        if (!v52) {
          goto LABEL_80;
        }
        outlined copy of Extension.KeyShare(v5, v4, v6);
        unint64_t v53 = 0;
        long long v54 = (uint64_t *)(v45 + 56);
        while (2)
        {
          unsigned int v55 = *((unsigned __int16 *)v54 - 12);
          uint64_t v57 = *(v54 - 2);
          unint64_t v56 = *(v54 - 1);
          uint64_t v59 = *v54;
          v54 += 4;
          uint64_t v58 = v59;
          LOWORD(v77) = bswap32(v55) >> 16;
          uint64_t v81 = MEMORY[0x1E4FBB2B8];
          uint64_t v82 = MEMORY[0x1E4F27EF0];
          uint64_t v79 = (uint64_t *)&v77;
          unint64_t v80 = (char *)&v77 + 2;
          __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
          outlined copy of Data._Representation(v57, v56);
          Data._Representation.append(contentsOf:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
          uint64_t v60 = 0;
          switch(v56 >> 62)
          {
            case 1uLL:
              uint64_t v60 = v57 >> 32;
              break;
            case 2uLL:
              uint64_t v60 = *(void *)(v57 + 24);
              break;
            case 3uLL:
              break;
            default:
              uint64_t v60 = BYTE6(v56);
              break;
          }
          BOOL v61 = __OFSUB__(v60, v58);
          unint64_t v62 = v60 - v58;
          if (v61)
          {
            __break(1u);
          }
          else
          {
            if ((v62 & 0x8000000000000000) != 0 || v62 >= 0x10000)
            {
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x1B56D7AECLL);
            }
            LOWORD(v77) = bswap32(v62) >> 16;
            uint64_t v81 = MEMORY[0x1E4FBB2B8];
            uint64_t v82 = MEMORY[0x1E4F27EF0];
            uint64_t v79 = (uint64_t *)&v77;
            unint64_t v80 = (char *)&v77 + 2;
            __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
            Data._Representation.append(contentsOf:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
            uint64_t v63 = 0;
            uint64_t v64 = 0;
            switch(v56 >> 62)
            {
              case 1uLL:
                uint64_t v64 = (int)v57;
                uint64_t v63 = v57 >> 32;
                break;
              case 2uLL:
                uint64_t v64 = *(void *)(v57 + 16);
                uint64_t v63 = *(void *)(v57 + 24);
                break;
              case 3uLL:
                break;
              default:
                uint64_t v64 = 0;
                uint64_t v63 = BYTE6(v56);
                break;
            }
            if (v63 >= v58 && v63 >= v64)
            {
              uint64_t v65 = Data._Representation.subscript.getter();
              unint64_t v67 = v66;
              Data.append(_:)();
              switch(v67 >> 62)
              {
                case 1uLL:
                  outlined consume of Data._Representation(v65, v67);
                  outlined consume of Data._Representation(v57, v56);
                  LODWORD(v68) = HIDWORD(v65) - v65;
                  if (__OFSUB__(HIDWORD(v65), v65)) {
                    goto LABEL_87;
                  }
                  uint64_t v68 = (int)v68;
LABEL_74:
                  BOOL v61 = __OFADD__(v68, 4);
                  uint64_t v71 = v68 + 4;
                  if (v61) {
                    goto LABEL_84;
                  }
                  BOOL v61 = __OFADD__(v53, v71);
                  v53 += v71;
                  if (v61) {
                    goto LABEL_85;
                  }
                  if (--v52) {
                    continue;
                  }
                  uint64_t v72 = v75;
                  outlined release of Extension(v75, (void (*)(void, void, void, void, void))outlined consume of Extension);
                  if ((v53 & 0x8000000000000000) != 0) {
                    goto LABEL_91;
                  }
                  if (!(v53 >> 16)) {
                    goto LABEL_81;
                  }
                  __break(1u);
                  break;
                case 2uLL:
                  uint64_t v70 = *(void *)(v65 + 16);
                  uint64_t v69 = *(void *)(v65 + 24);
                  outlined consume of Data._Representation(v65, v67);
                  outlined consume of Data._Representation(v57, v56);
                  uint64_t v68 = v69 - v70;
                  if (!__OFSUB__(v69, v70)) {
                    goto LABEL_74;
                  }
                  goto LABEL_86;
                case 3uLL:
                  outlined consume of Data._Representation(v65, v67);
                  outlined consume of Data._Representation(v57, v56);
                  uint64_t v68 = 0;
                  goto LABEL_74;
                default:
                  outlined consume of Data._Representation(v65, v67);
                  outlined consume of Data._Representation(v57, v56);
                  uint64_t v68 = BYTE6(v67);
                  goto LABEL_74;
              }
LABEL_80:
              unint64_t v53 = 0;
              uint64_t v72 = v75;
LABEL_81:
              specialized ByteBuffer.setInteger<A>(_:at:as:)(v53, v73);
              outlined release of Extension(v72, (void (*)(void, void, void, void, void))outlined consume of Extension);
              return v53 + 2;
            }
          }
          break;
        }
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
      }
      if (v12 == 1)
      {
        v92 &= 0xCFFFFFFFFFFFFFFFLL;
        unint64_t v13 = v92;
        uint64_t v14 = v91;
        long long v74 = a2;
        uint64_t v15 = v93;
        unsigned int v16 = (unsigned __int16)v90;
        outlined copy of Extension.KeyShare(v5, v4, v6);
        uint64_t v17 = ByteBuffer.writeKeyShareEntry(_:)(v16, v14, v13, v15);
        uint64_t v18 = (uint64_t)v74;
LABEL_33:
        outlined release of Extension(v18, (void (*)(void, void, void, void, void))outlined consume of Extension);
      }
      else
      {
        v92 &= 0xCFFFFFFFFFFFFFFFLL;
        LOWORD(v77) = bswap32((unsigned __int16)v90) >> 16;
        uint64_t v81 = MEMORY[0x1E4FBB2B8];
        uint64_t v82 = MEMORY[0x1E4F27EF0];
        uint64_t v79 = (uint64_t *)&v77;
        unint64_t v80 = (char *)&v77 + 2;
        __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
        outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined consume of Extension);
        return 2;
      }
      return v17;
    case 5:
      int v77 = v84;
      char v78 = BYTE4(v84);
      outlined init with take of UInt32?((uint64_t)&v77, (uint64_t)v89);
      outlined init with take of UInt32?((uint64_t)v89, (uint64_t)&v90);
      if ((v90 & 0x100000000) != 0) {
        return 0;
      }
      unsigned int v76 = bswap32(v90);
      uint64_t v81 = MEMORY[0x1E4FBB2B8];
      uint64_t v82 = MEMORY[0x1E4F27EF0];
      uint64_t v79 = (uint64_t *)&v76;
      unint64_t v80 = (char *)&v77;
      __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      return 4;
    case 6:
      return ByteBuffer.writeSignatureAlgorithms(_:)(v84);
    case 7:
      outlined init with take of Extension.ServerCertificateType((uint64_t)&v84, (uint64_t)v89);
      outlined init with take of Extension.ServerCertificateType((uint64_t)v89, (uint64_t)&v90);
      if (v91)
      {
        char v25 = v90;
LABEL_21:
        LOBYTE(v77) = v25;
        uint64_t v81 = MEMORY[0x1E4FBB2B8];
        uint64_t v82 = MEMORY[0x1E4F27EF0];
        uint64_t v79 = (uint64_t *)&v77;
        unint64_t v80 = (char *)&v77 + 1;
        __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
        return 1;
      }
      uint64_t v44 = v90;
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
      unint64_t v10 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, v44);
LABEL_32:
      uint64_t v17 = v10;
      uint64_t v18 = (uint64_t)a2;
      goto LABEL_33;
    case 8:
      uint64_t v33 = v84;
      unint64_t v34 = v85;
      uint64_t v35 = v86;
      outlined copy of Data._Representation(v5, v4);
      uint64_t v36 = v33;
      unint64_t v37 = v34;
      uint64_t v38 = v35;
      goto LABEL_28;
    case 9:
      uint64_t v19 = v84;
      unint64_t v20 = v85;
      uint64_t v21 = v86;
      uint64_t v22 = *a1;
      unint64_t v23 = a1[1];
      uint64_t v24 = 0;
      switch(v23 >> 62)
      {
        case 1uLL:
          uint64_t v24 = v22 >> 32;
          break;
        case 2uLL:
          uint64_t v24 = *(void *)(v22 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v24 = BYTE6(v23);
          break;
      }
      LOWORD(v90) = 0;
      uint64_t v81 = MEMORY[0x1E4FBB2B8];
      uint64_t v82 = MEMORY[0x1E4F27EF0];
      uint64_t v79 = &v90;
      unint64_t v80 = (char *)&v90 + 2;
      __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      unint64_t v49 = ByteBuffer.writeImmutableBuffer(_:)(v19, v20, v21);
      if ((v49 & 0x8000000000000000) != 0) {
        goto LABEL_88;
      }
      uint64_t v30 = v49;
      uint64_t v31 = v49 >> 16;
      if (!(v49 >> 16)) {
        goto LABEL_47;
      }
      __break(1u);
LABEL_43:
      uint64_t v24 = v31 >> 32;
LABEL_45:
      LOWORD(v90) = 0;
      uint64_t v81 = MEMORY[0x1E4FBB2B8];
      uint64_t v82 = MEMORY[0x1E4F27EF0];
      uint64_t v79 = &v90;
      unint64_t v80 = (char *)&v90 + 2;
      __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      unint64_t v50 = ByteBuffer.writeImmutableBuffer(_:)(v30, v20, v21);
      if ((v50 & 0x8000000000000000) != 0) {
        goto LABEL_89;
      }
      uint64_t v30 = v50;
      if (v50 >> 16) {
        goto LABEL_90;
      }
LABEL_47:
      specialized ByteBuffer.setInteger<A>(_:at:as:)(v30, v24);
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined consume of Extension);
      return v30 + 2;
    case 10:
      uint64_t v39 = v84;
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
      unint64_t v10 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, v39);
      goto LABEL_32;
    case 11:
      outlined init with take of Extension.PreSharedKey((uint64_t)&v84, (uint64_t)v89);
      outlined init with take of Extension.PreSharedKey((uint64_t)v89, (uint64_t)&v90);
      if ((v92 & 1) == 0) {
        return ByteBuffer.writeOfferedPSKs(_:)(v90, v91);
      }
      unsigned int v11 = bswap32((unsigned __int16)v90) >> 16;
LABEL_14:
      LOWORD(v77) = v11;
      uint64_t v29 = MEMORY[0x1E4FBB2B8];
      uint64_t v81 = MEMORY[0x1E4FBB2B8];
      uint64_t v82 = MEMORY[0x1E4F27EF0];
      uint64_t v79 = (uint64_t *)&v77;
      unint64_t v80 = (char *)&v77 + 2;
LABEL_15:
      __swift_project_boxed_opaque_existential_1(&v79, v29);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      return 2;
    case 12:
      outlined init with take of Extension.TicketRequest((uint64_t)&v84, (uint64_t)v89);
      outlined init with take of Extension.TicketRequest((uint64_t)v89, (uint64_t)&v90);
      char v25 = v90;
      if ((v90 & 0x10000) != 0) {
        goto LABEL_21;
      }
      char v26 = BYTE1(v90);
      LOBYTE(v77) = v90;
      uint64_t v27 = MEMORY[0x1E4FBB2B8];
      uint64_t v28 = MEMORY[0x1E4F27EF0];
      uint64_t v81 = MEMORY[0x1E4FBB2B8];
      uint64_t v82 = MEMORY[0x1E4F27EF0];
      uint64_t v79 = (uint64_t *)&v77;
      unint64_t v80 = (char *)&v77 + 1;
      __swift_project_boxed_opaque_existential_1(&v79, MEMORY[0x1E4FBB2B8]);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      LOBYTE(v77) = v26;
      uint64_t v81 = v27;
      uint64_t v82 = v28;
      uint64_t v79 = (uint64_t *)&v77;
      unint64_t v80 = (char *)&v77 + 1;
      uint64_t v29 = v27;
      goto LABEL_15;
    case 13:
      uint64_t v40 = v85;
      unint64_t v41 = v86;
      uint64_t v42 = v87;
      outlined copy of Data._Representation(v4, v6);
      uint64_t v36 = v40;
      unint64_t v37 = v41;
      uint64_t v38 = v42;
LABEL_28:
      unint64_t v10 = ByteBuffer.writeImmutableBuffer(_:)(v36, v37, v38);
      goto LABEL_32;
    default:
      uint64_t v7 = v84;
      unint64_t v8 = v85;
      uint64_t v9 = v86;
      outlined copy of ByteBuffer?(v5, v4);
      unint64_t v10 = ByteBuffer.writeServerName(_:)(v7, v8, v9);
      goto LABEL_32;
  }
}

uint64_t ByteBuffer.readExtension(messageType:helloRetryRequest:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v3[2];
  uint64_t v7 = v6 + 2;
  if (__OFADD__(v6, 2))
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  uint64_t v9 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if (v9 >> 32 < v7) {
        goto LABEL_13;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v9 + 24) >= v7) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 3uLL:
      if (v7 > 0) {
        goto LABEL_13;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v8) < v7)
      {
LABEL_13:
        long long v14 = 0uLL;
        char v15 = -1;
        long long v16 = 0uLL;
        goto LABEL_14;
      }
LABEL_8:
      *(void *)&long long v23 = *v3;
      *((void *)&v23 + 1) = v8;
      if (v7 < v6) {
        goto LABEL_26;
      }
      unsigned __int8 v22 = result;
      uint64_t v26 = v6;
      unint64_t v27 = v6 + 2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      v3[2] = v7;
      outlined copy of Data._Representation(v9, v8);
      uint64_t v10 = specialized ByteBuffer.readInteger<A>(as:)();
      if ((v10 & 0x10000) != 0 || (uint64_t v11 = ByteBuffer.readSlice(length:)((unsigned __int16)v10), v12 >> 60 == 15))
      {
        uint64_t result = outlined consume of Data._Representation(*v3, v3[1]);
        *unsigned int v3 = v9;
        v3[1] = v8;
        long long v14 = 0uLL;
        char v15 = -1;
        long long v16 = 0uLL;
        v3[2] = v7;
LABEL_14:
        *(_OWORD *)a3 = v14;
        *(_OWORD *)(a3 + 16) = v16;
        *(unsigned char *)(a3 + 32) = v15;
        return result;
      }
      uint64_t v26 = v11;
      unint64_t v27 = v12;
      uint64_t v28 = v13;
      closure #1 in ByteBuffer.readExtension(messageType:helloRetryRequest:)(&v26, bswap32(0) >> 16, v22, a2 & 1, (uint64_t)&v23);
      uint64_t v17 = v26;
      unint64_t v18 = v27;
      if (v4) {
        goto LABEL_24;
      }
      uint64_t v19 = 0;
      switch(v27 >> 62)
      {
        case 1uLL:
          uint64_t v19 = v26 >> 32;
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v26 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v19 = BYTE6(v27);
          break;
      }
      if (__OFSUB__(v19, v28)) {
        goto LABEL_27;
      }
      if (v19 == v28)
      {
        outlined consume of Data._Representation(v26, v27);
        uint64_t result = outlined consume of Data._Representation(v9, v8);
        long long v14 = v23;
        long long v16 = v24;
        char v15 = v25;
        goto LABEL_14;
      }
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v20 = 1;
      *(unsigned char *)(v20 + 4) = 1;
      swift_willThrow();
      outlined consume of Extension(v23, *((unint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
      uint64_t v17 = v26;
      unint64_t v18 = v27;
LABEL_24:
      outlined consume of Data._Representation(v17, v18);
      outlined consume of Data._Representation(*v3, v3[1]);
      *unsigned int v3 = v9;
      v3[1] = v8;
      v3[2] = v7;
      return swift_willThrow();
  }
}

uint64_t closure #1 in ByteBuffer.readExtension(messageType:helloRetryRequest:)@<X0>(uint64_t *a1@<X0>, unsigned __int16 a2@<W1>, unsigned __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  switch(a2)
  {
    case 0u:
      uint64_t result = ByteBuffer.readServerName(messageType:)(a3);
      if (!v5)
      {
        *(void *)a5 = result;
        *(void *)(a5 + 8) = v9;
        *(void *)(a5 + 16) = v10;
        *(void *)(a5 + 24) = 0;
        *(unsigned char *)(a5 + 32) = 0;
      }
      return result;
    case 0xAu:
      uint64_t result = (uint64_t)ByteBuffer.readSupportedGroups(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      char v15 = 1;
      goto LABEL_38;
    case 0xDu:
      uint64_t result = (uint64_t)ByteBuffer.readSignatureAlgorithms(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      char v15 = 6;
      goto LABEL_38;
    case 0x10u:
      uint64_t result = ByteBuffer.readALPN(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = v16;
      *(void *)(a5 + 16) = v17;
      *(void *)(a5 + 24) = 0;
      char v15 = 3;
      goto LABEL_38;
    case 0x14u:
      uint64_t result = (uint64_t)ByteBuffer.readServerCertificateType(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = v18 & 1;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      char v15 = 7;
      goto LABEL_38;
    case 0x29u:
      uint64_t result = (uint64_t)ByteBuffer.readPreSharedKey(messageType:helloRetryRequest:)(a3, a4 & 1);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = v19;
      *(void *)(a5 + 16) = v20 & 1;
      *(void *)(a5 + 24) = 0;
      char v15 = 11;
      goto LABEL_38;
    case 0x2Au:
      uint64_t result = 0;
      uint64_t v21 = 0x100000000;
      switch(a3)
      {
        case 8u:
          break;
        case 4u:
          uint64_t result = specialized ByteBuffer.readInteger<A>(as:)();
          if ((result & 0x100000000) != 0)
          {
            lazy protocol witness table accessor for type TLSError and conformance TLSError();
            swift_allocError();
            *(_DWORD *)uint64_t v23 = 0;
            char v24 = 1;
            goto LABEL_41;
          }
          uint64_t v21 = 0;
          break;
        case 1u:
          break;
        default:
          int v22 = a3 | 0x330000;
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          char v24 = 0;
          *(_DWORD *)uint64_t v23 = v22;
LABEL_41:
          *(unsigned char *)(v23 + 4) = v24;
          return swift_willThrow();
      }
      *(void *)a5 = v21 | result;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      char v15 = 5;
      goto LABEL_38;
    case 0x2Bu:
      uint64_t result = (uint64_t)ByteBuffer.readSupportedVersions(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = v25 & 1;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      char v15 = 2;
      goto LABEL_38;
    case 0x2Du:
      uint64_t result = (uint64_t)ByteBuffer.readPreSharedKeyKexModes(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      char v15 = 10;
      goto LABEL_38;
    case 0x33u:
      uint64_t result = ByteBuffer.readKeyShare(messageType:helloRetryRequest:)(a3, a4 & 1);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = v26;
      *(void *)(a5 + 16) = v27;
      *(void *)(a5 + 24) = v28;
      char v15 = 4;
      goto LABEL_38;
    case 0x39u:
      uint64_t result = ByteBuffer.readQUICTransportParameters(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result;
      *(void *)(a5 + 8) = v29;
      *(void *)(a5 + 16) = v30;
      *(void *)(a5 + 24) = 0;
      char v15 = 8;
      goto LABEL_38;
    case 0x3Au:
      uint64_t result = ByteBuffer.readTicketRequestExtension(messageType:)(a3);
      if (v5) {
        return result;
      }
      *(void *)a5 = result & 0x1FFFF;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      char v15 = 12;
      goto LABEL_38;
    default:
      uint64_t v11 = *a1;
      unint64_t v12 = a1[1];
      uint64_t v13 = a1[2];
      uint64_t v14 = 0;
      switch(v12 >> 62)
      {
        case 1uLL:
          uint64_t v14 = v11 >> 32;
          break;
        case 2uLL:
          uint64_t v14 = *(void *)(v11 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v14 = BYTE6(v12);
          break;
      }
      if (__OFSUB__(v14, v13))
      {
        __break(1u);
        goto LABEL_43;
      }
      uint64_t result = ByteBuffer.readSlice(length:)(v14 - v13);
      if (v31 >> 60 == 15)
      {
LABEL_43:
        __break(1u);
        JUMPOUT(0x1B56D81B0);
      }
      *(void *)a5 = a2;
      *(void *)(a5 + 8) = result;
      *(void *)(a5 + 16) = v31;
      *(void *)(a5 + 24) = v32;
      char v15 = 13;
LABEL_38:
      *(unsigned char *)(a5 + 32) = v15;
      return result;
  }
}

uint64_t outlined consume of Extension(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      uint64_t result = outlined consume of ByteBuffer?(result, a2);
      break;
    case 1:
    case 6:
    case 10:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 2:
    case 7:
      uint64_t result = outlined consume of Extension.SupportedVersions(result, a2 & 1);
      break;
    case 3:
    case 8:
    case 9:
      uint64_t result = outlined consume of Data._Representation(result, a2);
      break;
    case 4:
      uint64_t result = outlined consume of Extension.KeyShare(result, a2, a3);
      break;
    case 11:
      uint64_t result = outlined consume of Extension.PreSharedKey(result, a2, a3 & 1);
      break;
    case 13:
      uint64_t result = outlined consume of Data._Representation(a2, a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of Extension.SupportedVersions(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of Extension.KeyShare(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (a3 >> 60) & 3;
  if (v3 == 1) {
    return outlined consume of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
  }
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of Extension.PreSharedKey(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a2 + 48);
    do
    {
      uint64_t v5 = *(v4 - 2);
      unint64_t v6 = *(v4 - 1);
      uint64_t v8 = *v4;
      v4 += 3;
      uint64_t v7 = v8;
      uint64_t v9 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          uint64_t v9 = v5 >> 32;
          goto LABEL_7;
        case 2uLL:
          uint64_t v9 = *(void *)(v5 + 24);
LABEL_7:
          outlined copy of Data._Representation(v5, v6);
          outlined copy of Data._Representation(v5, v6);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v9 = BYTE6(v6);
          break;
      }
      if (v9 < v7)
      {
        __break(1u);
        JUMPOUT(0x1B56D84C8);
      }
      uint64_t v10 = Data._Representation.subscript.getter();
      unint64_t v12 = v11;
      Data.hash(into:)();
      outlined consume of Data._Representation(v10, v12);
      outlined consume of Data._Representation(v5, v6);
      outlined consume of Data._Representation(v5, v6);
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::UInt32 v8;
  Swift::UInt32 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (_DWORD *)(a2 + 56);
    do
    {
      uint64_t v5 = *((void *)v4 - 3);
      unint64_t v6 = *((void *)v4 - 2);
      uint64_t v7 = *((void *)v4 - 1);
      uint64_t v9 = *v4;
      v4 += 8;
      uint64_t v8 = v9;
      uint64_t v10 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          uint64_t v10 = v5 >> 32;
          goto LABEL_7;
        case 2uLL:
          uint64_t v10 = *(void *)(v5 + 24);
LABEL_7:
          outlined copy of Data._Representation(v5, v6);
          outlined copy of Data._Representation(v5, v6);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v6);
          break;
      }
      if (v10 < v7)
      {
        __break(1u);
        JUMPOUT(0x1B56D85F4);
      }
      unint64_t v11 = Data._Representation.subscript.getter();
      uint64_t v13 = v12;
      Data.hash(into:)();
      outlined consume of Data._Representation(v11, v13);
      outlined consume of Data._Representation(v5, v6);
      Hasher._combine(_:)(v8);
      outlined consume of Data._Representation(v5, v6);
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a2 + 56);
    do
    {
      uint64_t v5 = *(v4 - 2);
      unint64_t v6 = *(v4 - 1);
      uint64_t v7 = *v4;
      Hasher._combine(_:)(*((_WORD *)v4 - 12));
      v4 += 4;
      uint64_t v8 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          uint64_t v8 = v5 >> 32;
          goto LABEL_7;
        case 2uLL:
          uint64_t v8 = *(void *)(v5 + 24);
LABEL_7:
          outlined copy of Data._Representation(v5, v6);
          outlined copy of Data._Representation(v5, v6);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v8 = BYTE6(v6);
          break;
      }
      if (v8 < v7)
      {
        __break(1u);
        JUMPOUT(0x1B56D8778);
      }
      uint64_t v9 = Data._Representation.subscript.getter();
      unint64_t v11 = v10;
      Data.hash(into:)();
      outlined consume of Data._Representation(v9, v11);
      outlined consume of Data._Representation(v5, v6);
      outlined consume of Data._Representation(v5, v6);
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long *v17;
  unsigned char v18[40];

  uint64_t v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = a2 + 32;
    do
    {
      uint64_t v7 = (uint64_t *)(v6 + 32 * v5);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      unint64_t v11 = v7[2];
      uint64_t v10 = v7[3];
      ++v5;
      unint64_t v12 = 0;
      switch(v9 >> 62)
      {
        case 1uLL:
          unint64_t v12 = v8 >> 32;
          goto LABEL_8;
        case 2uLL:
          unint64_t v12 = *(void *)(v8 + 24);
LABEL_8:
          outlined copy of Data._Representation(*v7, v7[1]);
          break;
        case 3uLL:
          break;
        default:
          unint64_t v12 = BYTE6(v9);
          break;
      }
      if (v12 < v11)
      {
        __break(1u);
        JUMPOUT(0x1B56D8954);
      }
      outlined copy of Data._Representation(v8, v9);
      swift_bridgeObjectRetain();
      uint64_t v13 = Data._Representation.subscript.getter();
      char v15 = v14;
      Data.hash(into:)();
      outlined consume of Data._Representation(v13, v15);
      outlined consume of Data._Representation(v8, v9);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v16 = *(void *)(v10 + 16);
      if (v16)
      {
        uint64_t v17 = (long long *)(v10 + 32);
        swift_bridgeObjectRetain();
        do
        {
          outlined init with take of Extension(v17, (uint64_t)v18);
          outlined release of Extension((uint64_t)v18, (void (*)(void, void, void, void, void))outlined copy of Extension);
          Extension.hash(into:)(a1);
          outlined release of Extension((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Extension);
          uint64_t v17 = (long long *)((char *)v17 + 40);
          --v16;
        }
        while (v16);
        swift_bridgeObjectRelease();
      }
      outlined consume of Data._Representation(v8, v9);
      swift_bridgeObjectRelease();
    }
    while (v5 != v4);
  }
}

uint64_t outlined retain of Extension.QUICTransportParameters(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Extension.KeyShare(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (a3 >> 60) & 3;
  if (v3 == 1) {
    return outlined copy of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
  }
  if (!v3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized static Extension.__derived_enum_equals(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of Extension(a2, (uint64_t)v68);
  uint64_t v4 = v68[0];
  unint64_t v5 = v68[1];
  unint64_t v6 = v68[2];
  outlined init with take of Extension(a1, (uint64_t)&v79);
  switch(v83)
  {
    case 1:
      uint64_t v9 = v79;
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 1) {
        goto LABEL_80;
      }
      goto LABEL_7;
    case 2:
      outlined init with take of Extension.SupportedVersions((uint64_t)&v79, (uint64_t)v84);
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 2) {
        goto LABEL_80;
      }
      outlined init with take of Extension.SupportedVersions((uint64_t)&v74, (uint64_t)v69);
      outlined init with take of Extension.SupportedVersions((uint64_t)v84, (uint64_t)&v85);
      if (v86)
      {
        int v10 = v85;
        int v11 = BYTE1(v85);
        outlined init with take of Extension.SupportedVersions((uint64_t)v69, (uint64_t)&v70);
        if (v71 == 1 && v10 == v70 && v11 == BYTE1(v70)) {
          goto LABEL_78;
        }
        goto LABEL_80;
      }
      uint64_t v50 = v85;
      outlined init with take of Extension.SupportedVersions((uint64_t)v69, (uint64_t)&v70);
      if ((v71 & 1) != 0 || !specialized static Array<A>.== infix(_:_:)(v50, v70)) {
        goto LABEL_80;
      }
      goto LABEL_78;
    case 3:
      uint64_t v12 = v79;
      unint64_t v13 = v80;
      uint64_t v14 = v81;
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 == 3) {
        goto LABEL_36;
      }
      goto LABEL_80;
    case 4:
      outlined init with take of Extension.KeyShare((uint64_t)&v79, (uint64_t)v84);
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 4) {
        goto LABEL_80;
      }
      outlined init with take of Extension.KeyShare((uint64_t)&v74, (uint64_t)v69);
      outlined init with take of Extension.KeyShare((uint64_t)v84, (uint64_t)&v85);
      uint64_t v15 = (v87 >> 60) & 3;
      if (!v15)
      {
        v87 &= 0xCFFFFFFFFFFFFFFFLL;
        uint64_t v62 = v85;
        outlined init with take of Extension.KeyShare((uint64_t)v69, (uint64_t)&v70);
        if ((v72 & 0x3000000000000000) != 0) {
          goto LABEL_80;
        }
        v72 &= 0xCFFFFFFFFFFFFFFFLL;
        uint64_t v63 = v70;
        outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
        outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined copy of Extension);
        char v61 = specialized static Array<A>.== infix(_:_:)(v62, v63);
        goto LABEL_74;
      }
      if (v15 == 1)
      {
        unint64_t v16 = v87 & 0xCFFFFFFFFFFFFFFFLL;
        v87 &= 0xCFFFFFFFFFFFFFFFLL;
        int v17 = (unsigned __int16)v85;
        uint64_t v18 = v86;
        uint64_t v19 = v88;
        outlined init with take of Extension.KeyShare((uint64_t)v69, (uint64_t)&v70);
        if ((v72 & 0x3000000000000000) == 0x1000000000000000)
        {
          unint64_t v20 = v72 & 0xCFFFFFFFFFFFFFFFLL;
          v72 &= 0xCFFFFFFFFFFFFFFFLL;
          if (v17 == (unsigned __int16)v70)
          {
            uint64_t v21 = v73;
            uint64_t v22 = v71;
            outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
            outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined copy of Extension);
            uint64_t v23 = v18;
            unint64_t v24 = v16;
            uint64_t v25 = v19;
            uint64_t v26 = v22;
            unint64_t v27 = v20;
            uint64_t v28 = v21;
            goto LABEL_71;
          }
        }
        goto LABEL_80;
      }
      v87 &= 0xCFFFFFFFFFFFFFFFLL;
      int v65 = (unsigned __int16)v85;
      outlined init with take of Extension.KeyShare((uint64_t)v69, (uint64_t)&v70);
      if ((v72 & 0x3000000000000000) != 0x2000000000000000) {
        goto LABEL_79;
      }
      v72 &= 0xCFFFFFFFFFFFFFFFLL;
      int v66 = (unsigned __int16)v70;
      outlined copy of Extension.KeyShare(v4, v5, v6);
      if (v65 == v66) {
        goto LABEL_78;
      }
      goto LABEL_80;
    case 5:
      int v29 = v79;
      char v30 = BYTE4(v79);
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 5) {
        goto LABEL_80;
      }
      if (v30)
      {
        if ((v74 & 0x100000000) == 0) {
          goto LABEL_80;
        }
        goto LABEL_78;
      }
      if ((v74 & 0x100000000) == 0 && v29 == v74) {
        goto LABEL_78;
      }
      goto LABEL_80;
    case 6:
      uint64_t v9 = v79;
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 6) {
        goto LABEL_80;
      }
LABEL_7:
      char v8 = specialized static Array<A>.== infix(_:_:)(v9, v74);
      return v8 & 1;
    case 7:
      outlined init with take of Extension.ServerCertificateType((uint64_t)&v79, (uint64_t)v84);
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 7) {
        goto LABEL_80;
      }
      outlined init with take of Extension.ServerCertificateType((uint64_t)&v74, (uint64_t)v69);
      outlined init with take of Extension.ServerCertificateType((uint64_t)v84, (uint64_t)&v85);
      if (v86)
      {
        int v31 = v85;
        outlined init with take of Extension.ServerCertificateType((uint64_t)v69, (uint64_t)&v70);
        if (v71 == 1) {
          goto LABEL_47;
        }
        goto LABEL_80;
      }
      uint64_t v51 = v85;
      outlined init with take of Extension.ServerCertificateType((uint64_t)v69, (uint64_t)&v70);
      if ((v71 & 1) != 0 || (specialized static Array<A>.== infix(_:_:)(v51, v70) & 1) == 0) {
        goto LABEL_80;
      }
      goto LABEL_78;
    case 8:
      uint64_t v12 = v79;
      unint64_t v13 = v80;
      uint64_t v14 = v81;
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 == 8) {
        goto LABEL_36;
      }
      goto LABEL_80;
    case 9:
      uint64_t v12 = v79;
      unint64_t v13 = v80;
      uint64_t v14 = v81;
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 9) {
        goto LABEL_80;
      }
LABEL_36:
      uint64_t v32 = v74;
      unint64_t v33 = v75;
      uint64_t v34 = v76;
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
      outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined copy of Extension);
      uint64_t v35 = v12;
      unint64_t v36 = v13;
      uint64_t v37 = v14;
      uint64_t v38 = v32;
      unint64_t v39 = v33;
      uint64_t v40 = v34;
      goto LABEL_52;
    case 10:
      uint64_t v41 = v79;
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 10) {
        goto LABEL_80;
      }
      char v8 = specialized static Array<A>.== infix(_:_:)(v41, v74);
      return v8 & 1;
    case 11:
      outlined init with take of Extension.PreSharedKey((uint64_t)&v79, (uint64_t)v84);
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 11) {
        goto LABEL_80;
      }
      outlined init with take of Extension.PreSharedKey((uint64_t)&v74, (uint64_t)v69);
      outlined init with take of Extension.PreSharedKey((uint64_t)v84, (uint64_t)&v85);
      if (v87)
      {
        int v42 = (unsigned __int16)v85;
        outlined init with take of Extension.PreSharedKey((uint64_t)v69, (uint64_t)&v70);
        if (v72 == 1 && v42 == (unsigned __int16)v70) {
          goto LABEL_78;
        }
        goto LABEL_80;
      }
      uint64_t v53 = v85;
      uint64_t v52 = v86;
      outlined init with take of Extension.PreSharedKey((uint64_t)v69, (uint64_t)&v70);
      if (v72) {
        goto LABEL_80;
      }
      uint64_t v54 = v71;
      if ((specialized static Array<A>.== infix(_:_:)(v53, v70) & 1) == 0
        || (specialized static Array<A>.== infix(_:_:)(v52, v54) & 1) == 0)
      {
        goto LABEL_80;
      }
      goto LABEL_78;
    case 12:
      outlined init with take of Extension.TicketRequest((uint64_t)&v79, (uint64_t)v84);
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78 != 12) {
        goto LABEL_80;
      }
      outlined init with take of Extension.TicketRequest((uint64_t)&v74, (uint64_t)v69);
      outlined init with take of Extension.TicketRequest((uint64_t)v84, (uint64_t)&v85);
      int v31 = v85;
      if ((v85 & 0x10000) != 0)
      {
        outlined init with take of Extension.TicketRequest((uint64_t)v69, (uint64_t)&v70);
        if (BYTE2(v70) != 1) {
          goto LABEL_80;
        }
LABEL_47:
        if (v31 == v70) {
          goto LABEL_78;
        }
      }
      else
      {
        int v55 = BYTE1(v85);
        outlined init with take of Extension.TicketRequest((uint64_t)v69, (uint64_t)&v70);
        if ((v70 & 0x10000) == 0 && v31 == v70 && v55 == BYTE1(v70)) {
          goto LABEL_78;
        }
      }
      goto LABEL_80;
    case 13:
      int v43 = (unsigned __int16)v79;
      uint64_t v44 = v80;
      unint64_t v45 = v81;
      uint64_t v46 = v82;
      outlined init with take of Extension(a2, (uint64_t)&v74);
      char v8 = 0;
      if (v78 != 13 || v43 != (unsigned __int16)v74) {
        return v8 & 1;
      }
      unint64_t v48 = v76;
      uint64_t v47 = v77;
      uint64_t v49 = v75;
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
      outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined copy of Extension);
      uint64_t v35 = v44;
      unint64_t v36 = v45;
      uint64_t v37 = v46;
      uint64_t v38 = v49;
      unint64_t v39 = v48;
      uint64_t v40 = v47;
LABEL_52:
      char v8 = specialized static ByteBuffer.== infix(_:_:)(v35, v36, v37, v38, v39, v40);
      outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined consume of Extension);
      outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined consume of Extension);
      return v8 & 1;
    default:
      outlined init with take of Extension.ServerName((uint64_t)&v79, (uint64_t)v84);
      outlined init with take of Extension(a2, (uint64_t)&v74);
      if (v78) {
        goto LABEL_80;
      }
      outlined init with take of Extension.ServerName((uint64_t)&v74, (uint64_t)v69);
      outlined init with take of Extension.ServerName((uint64_t)v84, (uint64_t)&v85);
      unint64_t v7 = v86;
      if (v86 >> 60 == 15)
      {
        outlined init with take of Extension.ServerName((uint64_t)v69, (uint64_t)&v70);
        if (v71 >> 60 == 15)
        {
          outlined copy of ByteBuffer?(v4, v5);
          char v8 = 1;
          return v8 & 1;
        }
LABEL_79:
        outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined consume of Extension);
      }
      else
      {
        uint64_t v56 = v85;
        uint64_t v57 = v87;
        outlined init with take of Extension.ServerName((uint64_t)v69, (uint64_t)&v70);
        unint64_t v58 = v71;
        if (v71 >> 60 != 15)
        {
          uint64_t v59 = v70;
          uint64_t v60 = v72;
          outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined copy of Extension);
          outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined copy of Extension);
          uint64_t v23 = v56;
          unint64_t v24 = v7;
          uint64_t v25 = v57;
          uint64_t v26 = v59;
          unint64_t v27 = v58;
          uint64_t v28 = v60;
LABEL_71:
          char v61 = specialized static ByteBuffer.== infix(_:_:)(v23, v24, v25, v26, v27, v28);
LABEL_74:
          char v64 = v61;
          outlined release of Extension((uint64_t)a2, (void (*)(void, void, void, void, void))outlined consume of Extension);
          outlined release of Extension((uint64_t)a1, (void (*)(void, void, void, void, void))outlined consume of Extension);
          if (v64)
          {
LABEL_78:
            char v8 = 1;
            return v8 & 1;
          }
        }
      }
LABEL_80:
      char v8 = 0;
      return v8 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type Extension and conformance Extension()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension and conformance Extension;
  if (!lazy protocol witness table cache variable for type Extension and conformance Extension)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension and conformance Extension);
  }
  return result;
}

uint64_t outlined copy of Extension(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      unint64_t result = outlined copy of ByteBuffer?(result, a2);
      break;
    case 1:
    case 6:
    case 10:
      unint64_t result = swift_bridgeObjectRetain();
      break;
    case 2:
    case 7:
      unint64_t result = outlined copy of Extension.ServerCertificateType(result, a2 & 1);
      break;
    case 3:
    case 8:
    case 9:
      unint64_t result = outlined copy of Data._Representation(result, a2);
      break;
    case 4:
      unint64_t result = outlined copy of Extension.KeyShare(result, a2, a3);
      break;
    case 11:
      unint64_t result = outlined copy of Extension.PreSharedKey(result, a2, a3 & 1);
      break;
    case 13:
      unint64_t result = outlined copy of Data._Representation(a2, a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of Extension.PreSharedKey(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Extension(uint64_t a1)
{
  return outlined consume of Extension(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for Extension(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Extension(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for Extension(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Extension(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Extension(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Extension(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of Extension(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF3 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 243);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0xD) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 243;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Extension(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for Extension(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Extension()
{
  return &type metadata for Extension;
}

uint64_t outlined release of Extension(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with take of UInt32?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ProtocolVersion.major.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t ProtocolVersion.minor.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t ProtocolVersion.minor.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*ProtocolVersion.minor.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ProtocolVersion.init(major:minor:)(unsigned __int8 a1, int a2)
{
  return a1 | (a2 << 8);
}

void *ProtocolVersion.sslv3.unsafeMutableAddressor()
{
  return &static ProtocolVersion.sslv3;
}

uint64_t static ProtocolVersion.sslv3.getter()
{
  return 3;
}

void *ProtocolVersion.tlsv10.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv10;
}

uint64_t static ProtocolVersion.tlsv10.getter()
{
  return 259;
}

void *ProtocolVersion.tlsv11.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv11;
}

uint64_t static ProtocolVersion.tlsv11.getter()
{
  return 515;
}

void *ProtocolVersion.tlsv12.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv12;
}

uint64_t static ProtocolVersion.tlsv12.getter()
{
  return 771;
}

void *ProtocolVersion.tlsv13.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv13;
}

uint64_t static ProtocolVersion.tlsv13.getter()
{
  return 1027;
}

void ProtocolVersion.hash(into:)(int a1, __int16 a2)
{
  Swift::UInt8 v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static ProtocolVersion.__derived_struct_equals(_:_:)(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

Swift::Int ProtocolVersion.hashValue.getter(__int16 a1)
{
  Swift::UInt8 v1 = a1;
  Swift::UInt8 v2 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ProtocolVersion()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ProtocolVersion()
{
  Swift::UInt8 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ProtocolVersion()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ProtocolVersion(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

unint64_t ProtocolVersion.description.getter(__int16 a1)
{
  if (a1 == 3)
  {
    int v1 = HIBYTE(a1);
    unint64_t result = 0x33766C73732ELL;
    switch(v1)
    {
      case 0:
        return result;
      case 1:
        unint64_t result = 0x303176736C742ELL;
        break;
      case 2:
        unint64_t result = 0x313176736C742ELL;
        break;
      case 3:
        unint64_t result = 0x323176736C742ELL;
        break;
      case 4:
        unint64_t result = 0x333176736C742ELL;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 0x3A726F6E696D202CLL;
    v4._object = (void *)0xE900000000000020;
    String.append(_:)(v4);
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    return 0xD000000000000017;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProtocolVersion()
{
  return ProtocolVersion.description.getter(*v0);
}

uint64_t ByteBuffer.writeProtocolVersion(_:)(__int16 a1)
{
  v3[5] = *MEMORY[0x1E4F143B8];
  __int16 v2 = a1;
  v3[3] = MEMORY[0x1E4FBB2B8];
  v3[4] = MEMORY[0x1E4F27EF0];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 2;
}

uint64_t ByteBuffer.setProtocolVersion(_:at:)(unsigned int a1, uint64_t a2)
{
  return specialized ByteBuffer.setInteger<A>(_:at:as:)(bswap32(a1) >> 16, a2);
}

uint64_t ByteBuffer.readProtocolVersion()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < v2) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v3 + 24) >= v2) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v4) < v2)
      {
LABEL_11:
        int v5 = 1;
        return (v5 << 16);
      }
LABEL_8:
      if (v2 < v1) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v5 = 0;
      v0[2] = v2;
      return (v5 << 16);
  }
}

unint64_t lazy protocol witness table accessor for type ProtocolVersion and conformance ProtocolVersion()
{
  unint64_t result = lazy protocol witness table cache variable for type ProtocolVersion and conformance ProtocolVersion;
  if (!lazy protocol witness table cache variable for type ProtocolVersion and conformance ProtocolVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtocolVersion and conformance ProtocolVersion);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ProtocolVersion(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for ProtocolVersion(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B56D9D7CLL);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProtocolVersion()
{
  return &type metadata for ProtocolVersion;
}

uint64_t static HashFunction.zeroHash.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of HashFunction.init()();
  dispatch thunk of HashFunction.finalize()();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, a1);
}

uint64_t static HMAC.authenticationCode<A>(bytes:using:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t partial apply for closure #1 in static HMAC.authenticationCode<A>(bytes:using:)()
{
  return static HMAC.authenticationCode<A>(for:using:)();
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

BOOL static Extension.SupportedGroups.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2);
}

unint64_t ByteBuffer.writeSupportedGroups(_:)(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  __int16 v11 = 0;
  uint64_t v6 = MEMORY[0x1E4FBB2B8];
  uint64_t v7 = MEMORY[0x1E4F27EF0];
  uint64_t v14 = MEMORY[0x1E4FBB2B8];
  uint64_t v15 = MEMORY[0x1E4F27EF0];
  char v12 = &v11;
  unint64_t v13 = &v12;
  __swift_project_boxed_opaque_existential_1(&v12, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_12:
    unint64_t v9 = 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = 0;
  do
  {
    __int16 v11 = bswap32(*(unsigned __int16 *)(a1 + v9 + 32)) >> 16;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    char v12 = &v11;
    unint64_t v13 = &v12;
    __swift_project_boxed_opaque_existential_1(&v12, v6);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
    if (v9 == 0x7FFFFFFFFFFFFFFELL)
    {
      __break(1u);
LABEL_15:
      __break(1u);
    }
    v9 += 2;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_15;
  }
  if (v9 >> 16)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v9, v5);
  return v9 + 2;
}

char *ByteBuffer.readSupportedGroups(messageType:)(unsigned __int8 a1)
{
  if (a1 != 8 && a1 != 1)
  {
    int v11 = a1 | 0xA0000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
    *(unsigned char *)(v12 + 4) = 0;
    goto LABEL_9;
  }
  uint64_t v5 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  outlined copy of Data._Representation(*v1, v4);
  uint64_t v7 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v7 & 0x10000) != 0 || (uint64_t v31 = ByteBuffer.readSlice(length:)((unsigned __int16)v7), v8 >> 60 == 15))
  {
    outlined consume of Data._Representation(*v1, v1[1]);
    uint64_t *v1 = v5;
    v1[1] = v4;
    v1[2] = v6;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + 4) = 1;
    goto LABEL_9;
  }
  unint64_t v27 = v4;
  uint64_t v14 = v9;
  uint64_t v15 = 0;
  uint64_t v16 = BYTE6(v8);
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v15 = v31 >> 32;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(v31 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v15 = BYTE6(v8);
      break;
  }
  unint64_t v28 = v8 >> 62;
  unint64_t v30 = v8;
  BOOL v17 = __OFSUB__(v15, v9);
  uint64_t v18 = v15 - v9;
  if (v17) {
    goto LABEL_41;
  }
  uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v18 / 2) & ~((v18 + (v18 < 0)) >> 63), 0, MEMORY[0x1E4FBC860], &demangling cache variable for type metadata for _ContiguousArrayStorage<NamedGroup>);
  uint64_t v29 = v14;
  BOOL v17 = __OFADD__(v14, 2);
  uint64_t v20 = v14 + 2;
  if (v17)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v2 = v19;
  uint64_t v21 = v29;
  while (2)
  {
    uint64_t v22 = v21;
    uint64_t v21 = v20;
    uint64_t v23 = v16;
    switch((int)v28)
    {
      case 1:
        uint64_t v23 = v31 >> 32;
        goto LABEL_20;
      case 2:
        if (*(void *)(v31 + 24) < v20) {
          goto LABEL_31;
        }
        goto LABEL_25;
      case 3:
        if (v20 < 1) {
          goto LABEL_25;
        }
        uint64_t v16 = 0;
        goto LABEL_35;
      default:
LABEL_20:
        if (v23 >= v20)
        {
LABEL_25:
          if (v20 < v22) {
            goto LABEL_40;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
          lazy protocol witness table accessor for type Data and conformance Data();
          lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
          DataProtocol.copyBytes<A>(to:from:)();
          unint64_t v25 = *((void *)v2 + 2);
          unint64_t v24 = *((void *)v2 + 3);
          if (v25 >= v24 >> 1) {
            uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<NamedGroup>);
          }
          *((void *)v2 + 2) = v25 + 1;
          *(_WORD *)&v2[2 * v25 + 32] = bswap32(0) >> 16;
          BOOL v17 = __OFADD__(v20, 2);
          v20 += 2;
          if (v17) {
            goto LABEL_39;
          }
          continue;
        }
LABEL_31:
        if (v28)
        {
          uint64_t v16 = v31 >> 32;
          if (v28 != 1) {
            uint64_t v16 = *(void *)(v31 + 24);
          }
        }
LABEL_35:
        if (__OFSUB__(v16, v22)) {
LABEL_42:
        }
          __break(1u);
        if (v16 == v22)
        {
          outlined consume of ByteBuffer?(v31, v30);
          outlined consume of Data._Representation(v5, v27);
        }
        else
        {
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v26 = 1;
          *(unsigned char *)(v26 + 4) = 1;
          swift_willThrow();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v31, v30);
          outlined consume of Data._Representation(*v1, v1[1]);
          uint64_t *v1 = v5;
          v1[1] = v27;
          v1[2] = v6;
LABEL_9:
          swift_willThrow();
        }
        return v2;
    }
  }
}

uint64_t Extension.SupportedGroups.groups.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

void Extension.SupportedGroups.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    unint64_t v4 = (Swift::UInt16 *)(a2 + 32);
    do
    {
      Swift::UInt16 v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
  {
    return 0;
  }
  Swift::UInt16 v5 = (unsigned __int8 *)(a2 + 35);
  uint64_t v6 = (unsigned __int8 *)(a1 + 35);
  do
  {
    BOOL result = --v2 == 0;
    if (!v2) {
      break;
    }
    int v7 = *(v5 - 1);
    int v9 = *v5;
    v5 += 2;
    int v8 = v9;
    int v10 = *v6;
    int v11 = *(v6 - 1);
    v6 += 2;
  }
  while (v11 == v7 && v10 == v8);
  return result;
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  BOOL result;
  int v7;
  int v8;
  int v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  Swift::UInt v3 = (unsigned __int8 *)(a1 + 33);
  unint64_t v4 = (unsigned __int8 *)(a2 + 33);
  Swift::UInt16 v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  BOOL result;
  int v7;
  int v8;
  int v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32)) {
    return 0;
  }
  Swift::UInt v3 = (unsigned __int16 *)(a1 + 34);
  unint64_t v4 = (unsigned __int16 *)(a2 + 34);
  Swift::UInt16 v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    Swift::UInt v3 = (uint64_t *)(a2 + 56);
    unint64_t v4 = (uint64_t *)(a1 + 56);
    while (1)
    {
      if (*((unsigned __int16 *)v4 - 12) != *((unsigned __int16 *)v3 - 12)) {
        return 0;
      }
      uint64_t v6 = *(v4 - 2);
      unint64_t v5 = *(v4 - 1);
      uint64_t v8 = *v4;
      v4 += 4;
      uint64_t v7 = v8;
      unint64_t v9 = *(v3 - 1);
      uint64_t v110 = *(v3 - 2);
      uint64_t v11 = *v3;
      v3 += 4;
      uint64_t v10 = v11;
      uint64_t v12 = 0;
      switch(v5 >> 62)
      {
        case 1uLL:
          uint64_t v12 = v6 >> 32;
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v12 = BYTE6(v5);
          break;
      }
      if (v12 < v7)
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
      }
      outlined copy of Data._Representation(v6, v5);
      outlined copy of Data._Representation(v110, v9);
      uint64_t v13 = Data._Representation.subscript.getter();
      unint64_t v15 = v14;
      uint64_t v16 = 0;
      switch(v9 >> 62)
      {
        case 1uLL:
          uint64_t v16 = v110 >> 32;
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v110 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v16 = BYTE6(v9);
          break;
      }
      if (v16 < v10) {
        goto LABEL_138;
      }
      unint64_t v109 = v9;
      uint64_t v17 = Data._Representation.subscript.getter();
      uint64_t v19 = v17;
      unint64_t v20 = v18;
      uint64_t v21 = 0;
      switch(v15 >> 62)
      {
        case 1uLL:
          LODWORD(v21) = HIDWORD(v13) - v13;
          if (__OFSUB__(HIDWORD(v13), v13)) {
            goto LABEL_139;
          }
          uint64_t v21 = (int)v21;
          break;
        case 2uLL:
          uint64_t v23 = *(void *)(v13 + 16);
          uint64_t v22 = *(void *)(v13 + 24);
          BOOL v24 = __OFSUB__(v22, v23);
          uint64_t v21 = v22 - v23;
          if (!v24) {
            break;
          }
          goto LABEL_140;
        case 3uLL:
          break;
        default:
          uint64_t v21 = BYTE6(v15);
          break;
      }
      uint64_t v108 = v6;
      unint64_t v25 = v18 >> 62;
      switch(v18 >> 62)
      {
        case 1uLL:
          LODWORD(v26) = HIDWORD(v17) - v17;
          if (__OFSUB__(HIDWORD(v17), v17)) {
            goto LABEL_141;
          }
          uint64_t v26 = (int)v26;
LABEL_29:
          if (v21 != v26)
          {
LABEL_135:
            outlined consume of Data._Representation(v17, v18);
            outlined consume of Data._Representation(v13, v15);
            outlined consume of Data._Representation(v110, v109);
            outlined consume of Data._Representation(v108, v5);
            return 0;
          }
          if (v21 < 1)
          {
LABEL_6:
            outlined consume of Data._Representation(v17, v18);
            outlined consume of Data._Representation(v13, v15);
            outlined consume of Data._Representation(v110, v109);
            outlined consume of Data._Representation(v108, v5);
          }
          else
          {
            switch(v15 >> 62)
            {
              case 1uLL:
                uint64_t v34 = v13;
                unint64_t v35 = v15;
                unint64_t v107 = v5;
                uint64_t v36 = (int)v34;
                if ((int)v34 > v34 >> 32) {
                  goto LABEL_143;
                }
                uint64_t v103 = v34;
                outlined copy of Data._Representation(v34, v35);
                uint64_t v37 = __DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = v37;
                  uint64_t v39 = __DataStorage._offset.getter();
                  if (__OFSUB__(v36, v39)) {
                    goto LABEL_145;
                  }
                  v101 = (void *)(v38 + v36 - v39);
                }
                else
                {
                  v101 = 0;
                }
                unint64_t v5 = v107;
                unint64_t v15 = v35;
                __DataStorage._length.getter();
                if (!v25)
                {
                  __s1[0] = v19;
                  LOWORD(__s1[1]) = v20;
                  BYTE2(__s1[1]) = BYTE2(v20);
                  BYTE3(__s1[1]) = BYTE3(v20);
                  BYTE4(__s1[1]) = BYTE4(v20);
                  BYTE5(__s1[1]) = BYTE5(v20);
                  if (!v101) {
                    goto LABEL_168;
                  }
                  int v51 = memcmp(v101, __s1, BYTE6(v20));
                  uint64_t v13 = v103;
LABEL_93:
                  outlined consume of Data._Representation(v13, v15);
LABEL_94:
                  outlined consume of Data._Representation(v19, v20);
                  uint64_t v76 = v13;
                  unint64_t v77 = v15;
LABEL_121:
                  outlined consume of Data._Representation(v76, v77);
                  outlined consume of Data._Representation(v110, v109);
                  outlined consume of Data._Representation(v108, v5);
                  if (v51) {
                    return 0;
                  }
                  break;
                }
                if (v25 == 1)
                {
                  if (v19 >> 32 < (int)v19) {
                    goto LABEL_154;
                  }
                  swift_retain();
                  uint64_t v56 = (char *)__DataStorage._bytes.getter();
                  if (v56)
                  {
                    uint64_t v57 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v19, v57)) {
                      goto LABEL_161;
                    }
                    v56 += (int)v19 - v57;
                  }
                  unint64_t v15 = v35;
                  uint64_t v58 = __DataStorage._length.getter();
                  if (v58 >= (v19 >> 32) - (int)v19) {
                    size_t v59 = (v19 >> 32) - (int)v19;
                  }
                  else {
                    size_t v59 = v58;
                  }
                  uint64_t v13 = v103;
                  if (!v101) {
                    goto LABEL_164;
                  }
                  unint64_t v5 = v107;
                  if (!v56) {
                    goto LABEL_165;
                  }
                  int v51 = memcmp(v101, v56, v59);
                  outlined consume of Data._Representation(v19, v20);
                  goto LABEL_93;
                }
                uint64_t v78 = *(void *)(v19 + 16);
                uint64_t v100 = *(char **)(v19 + 24);
                swift_retain();
                swift_retain();
                uint64_t v79 = __DataStorage._bytes.getter();
                if (v79)
                {
                  uint64_t v80 = v79;
                  uint64_t v81 = __DataStorage._offset.getter();
                  uint64_t v82 = v78;
                  BOOL v24 = __OFSUB__(v78, v81);
                  uint64_t v83 = v78 - v81;
                  uint64_t v13 = v103;
                  if (v24) {
                    goto LABEL_160;
                  }
                  uint64_t v84 = (const void *)(v80 + v83);
                }
                else
                {
                  uint64_t v82 = v78;
                  uint64_t v84 = 0;
                  uint64_t v13 = v103;
                }
                uint64_t v94 = &v100[-v82];
                if (__OFSUB__(v100, v82)) {
                  goto LABEL_155;
                }
                uint64_t v95 = __DataStorage._length.getter();
                if (v95 >= (uint64_t)v94) {
                  size_t v96 = (size_t)v94;
                }
                else {
                  size_t v96 = v95;
                }
                if (!v101) {
                  goto LABEL_174;
                }
                if (!v84) {
                  goto LABEL_175;
                }
                int v86 = memcmp(v101, v84, v96);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v13, v15);
LABEL_131:
                outlined consume of Data._Representation(v19, v20);
                uint64_t v90 = v13;
                unint64_t v91 = v15;
LABEL_132:
                outlined consume of Data._Representation(v90, v91);
                outlined consume of Data._Representation(v110, v109);
                outlined consume of Data._Representation(v108, v107);
                if (v86) {
                  return 0;
                }
                break;
              case 2uLL:
                uint64_t v40 = v13;
                unint64_t v41 = v15;
                uint64_t v42 = *(void *)(v40 + 16);
                uint64_t v104 = v40;
                unint64_t v107 = v5;
                swift_retain();
                swift_retain();
                uint64_t v43 = __DataStorage._bytes.getter();
                if (v43)
                {
                  uint64_t v44 = v43;
                  uint64_t v45 = __DataStorage._offset.getter();
                  if (__OFSUB__(v42, v45)) {
                    goto LABEL_144;
                  }
                  uint64_t v99 = (void *)(v44 + v42 - v45);
                }
                else
                {
                  uint64_t v99 = 0;
                }
                __DataStorage._length.getter();
                unint64_t v5 = v107;
                if (!v25)
                {
                  __s1[0] = v19;
                  LOWORD(__s1[1]) = v20;
                  BYTE2(__s1[1]) = BYTE2(v20);
                  BYTE3(__s1[1]) = BYTE3(v20);
                  BYTE4(__s1[1]) = BYTE4(v20);
                  BYTE5(__s1[1]) = BYTE5(v20);
                  if (!v99) {
                    goto LABEL_167;
                  }
                  int v51 = memcmp(v99, __s1, BYTE6(v20));
LABEL_120:
                  swift_release();
                  swift_release();
                  outlined consume of Data._Representation(v19, v20);
                  uint64_t v76 = v104;
                  unint64_t v77 = v41;
                  goto LABEL_121;
                }
                if (v25 == 1)
                {
                  if (v19 >> 32 < (int)v19) {
                    goto LABEL_148;
                  }
                  swift_retain();
                  uint64_t v52 = __DataStorage._bytes.getter();
                  if (v52)
                  {
                    uint64_t v53 = v52;
                    uint64_t v54 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v19, v54)) {
                      goto LABEL_159;
                    }
                    int v55 = (const void *)(v53 + (int)v19 - v54);
                  }
                  else
                  {
                    int v55 = 0;
                  }
                  uint64_t v92 = __DataStorage._length.getter();
                  if (v92 >= (v19 >> 32) - (int)v19) {
                    size_t v93 = (v19 >> 32) - (int)v19;
                  }
                  else {
                    size_t v93 = v92;
                  }
                  if (!v99) {
                    goto LABEL_172;
                  }
                  unint64_t v5 = v107;
                  if (!v55) {
                    goto LABEL_173;
                  }
                  int v51 = memcmp(v99, v55, v93);
                  outlined consume of Data._Representation(v19, v20);
                  goto LABEL_120;
                }
                uint64_t v70 = *(void *)(v19 + 16);
                uint64_t v98 = *(void *)(v19 + 24);
                swift_retain();
                swift_retain();
                uint64_t v71 = __DataStorage._bytes.getter();
                if (v71)
                {
                  uint64_t v72 = v71;
                  uint64_t v73 = __DataStorage._offset.getter();
                  if (__OFSUB__(v70, v73)) {
                    goto LABEL_158;
                  }
                  uint64_t v74 = v70;
                  unint64_t v75 = (const void *)(v72 + v70 - v73);
                }
                else
                {
                  uint64_t v74 = v70;
                  unint64_t v75 = 0;
                }
                int64_t v87 = v98 - v74;
                if (__OFSUB__(v98, v74)) {
                  goto LABEL_153;
                }
                uint64_t v88 = __DataStorage._length.getter();
                if (v88 >= v87) {
                  size_t v89 = v87;
                }
                else {
                  size_t v89 = v88;
                }
                if (!v99) {
                  goto LABEL_170;
                }
                if (!v75) {
                  goto LABEL_171;
                }
                int v86 = memcmp(v99, v75, v89);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v19, v20);
                uint64_t v90 = v104;
                unint64_t v91 = v41;
                goto LABEL_132;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v25) {
                  goto LABEL_56;
                }
                unint64_t v107 = v5;
                if (v25 == 1)
                {
                  unint64_t v102 = v15;
                  uint64_t v29 = (v17 >> 32) - (int)v17;
                  if (v17 >> 32 < (int)v17) {
                    goto LABEL_147;
                  }
                  uint64_t v46 = __DataStorage._bytes.getter();
                  if (!v46) {
                    goto LABEL_163;
                  }
                  uint64_t v31 = v46;
                  uint64_t v47 = __DataStorage._offset.getter();
                  uint64_t v33 = (int)v19 - v47;
                  if (__OFSUB__((int)v19, v47)) {
                    goto LABEL_152;
                  }
LABEL_51:
                  uint64_t v48 = __DataStorage._length.getter();
                  if (v48 >= v29) {
                    size_t v49 = v29;
                  }
                  else {
                    size_t v49 = v48;
                  }
                  int v50 = memcmp(__s1, (const void *)(v31 + v33), v49);
                  outlined consume of Data._Representation(v19, v20);
                  outlined consume of Data._Representation(v13, v102);
                  outlined consume of Data._Representation(v110, v109);
                  outlined consume of Data._Representation(v108, v107);
                  if (v50) {
                    return 0;
                  }
                  break;
                }
                uint64_t v66 = *(void *)(v17 + 16);
                uint64_t v106 = *(void *)(v17 + 24);
                swift_retain();
                swift_retain();
                int v65 = (char *)__DataStorage._bytes.getter();
                if (v65)
                {
                  uint64_t v67 = __DataStorage._offset.getter();
                  if (__OFSUB__(v66, v67)) {
                    goto LABEL_157;
                  }
                  v65 += v66 - v67;
                }
                BOOL v24 = __OFSUB__(v106, v66);
                int64_t v68 = v106 - v66;
                if (v24) {
                  goto LABEL_149;
                }
                uint64_t v69 = __DataStorage._length.getter();
                if (!v65) {
                  goto LABEL_166;
                }
LABEL_101:
                if (v69 >= v68) {
                  size_t v85 = v68;
                }
                else {
                  size_t v85 = v69;
                }
                int v86 = memcmp(__s1, v65, v85);
                swift_release();
                swift_release();
                goto LABEL_131;
              default:
                __s1[0] = v13;
                LOWORD(__s1[1]) = v15;
                BYTE2(__s1[1]) = BYTE2(v15);
                BYTE3(__s1[1]) = BYTE3(v15);
                BYTE4(__s1[1]) = BYTE4(v15);
                BYTE5(__s1[1]) = BYTE5(v15);
                if (!v25)
                {
LABEL_56:
                  uint64_t __s2 = v17;
                  __int16 v112 = v18;
                  char v113 = BYTE2(v18);
                  char v114 = BYTE3(v18);
                  char v115 = BYTE4(v18);
                  char v116 = BYTE5(v18);
                  int v51 = memcmp(__s1, &__s2, BYTE6(v18));
                  goto LABEL_94;
                }
                unint64_t v107 = v5;
                if (v25 == 1)
                {
                  unint64_t v102 = v15;
                  uint64_t v29 = (v17 >> 32) - (int)v17;
                  if (v17 >> 32 < (int)v17) {
                    goto LABEL_146;
                  }
                  uint64_t v30 = __DataStorage._bytes.getter();
                  if (!v30)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_163:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    __break(1u);
LABEL_172:
                    __break(1u);
LABEL_173:
                    __break(1u);
LABEL_174:
                    __break(1u);
LABEL_175:
                    __break(1u);
                    JUMPOUT(0x1B56DB190);
                  }
                  uint64_t v31 = v30;
                  uint64_t v32 = __DataStorage._offset.getter();
                  uint64_t v33 = (int)v19 - v32;
                  if (__OFSUB__((int)v19, v32)) {
                    goto LABEL_151;
                  }
                  goto LABEL_51;
                }
                uint64_t v60 = *(void *)(v17 + 16);
                uint64_t v105 = *(void *)(v17 + 24);
                swift_retain();
                swift_retain();
                uint64_t v61 = __DataStorage._bytes.getter();
                if (v61)
                {
                  uint64_t v62 = v61;
                  uint64_t v63 = __DataStorage._offset.getter();
                  if (__OFSUB__(v60, v63)) {
                    goto LABEL_156;
                  }
                  uint64_t v64 = v60;
                  int v65 = (char *)(v62 + v60 - v63);
                }
                else
                {
                  uint64_t v64 = v60;
                  int v65 = 0;
                }
                int64_t v68 = v105 - v64;
                if (__OFSUB__(v105, v64)) {
                  goto LABEL_150;
                }
                uint64_t v69 = __DataStorage._length.getter();
                if (!v65) {
                  goto LABEL_169;
                }
                goto LABEL_101;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v28 = *(void *)(v17 + 16);
          uint64_t v27 = *(void *)(v17 + 24);
          BOOL v24 = __OFSUB__(v27, v28);
          uint64_t v26 = v27 - v28;
          if (!v24) {
            goto LABEL_29;
          }
          goto LABEL_142;
        case 3uLL:
          if (!v21) {
            goto LABEL_6;
          }
          goto LABEL_135;
        default:
          uint64_t v26 = BYTE6(v18);
          goto LABEL_29;
      }
    }
  }
  return 1;
}

{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  int64_t v90;
  uint64_t v91;
  size_t v92;
  uint64_t v93;
  size_t v94;
  char *v95;
  uint64_t v96;
  size_t v97;
  uint64_t result;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t __s2;
  __int16 v117;
  char v118;
  char v119;
  char v120;
  char v121;
  void __s1[3];

  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    Swift::UInt v3 = (_DWORD *)(a1 + 56);
    unint64_t v4 = (_DWORD *)(a2 + 56);
    while (1)
    {
      unint64_t v5 = *((void *)v3 - 3);
      uint64_t v6 = *((void *)v3 - 2);
      uint64_t v7 = *((void *)v3 - 1);
      unint64_t v9 = *v3;
      v3 += 8;
      uint64_t v8 = v9;
      char v115 = *((void *)v4 - 3);
      uint64_t v10 = *((void *)v4 - 1);
      char v113 = v5;
      char v114 = *((void *)v4 - 2);
      uint64_t v12 = *v4;
      v4 += 8;
      uint64_t v11 = v12;
      uint64_t v13 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          unint64_t v14 = v5;
          uint64_t v13 = v5 >> 32;
          goto LABEL_12;
        case 2uLL:
          unint64_t v14 = v5;
          uint64_t v13 = *(void *)(v5 + 24);
LABEL_12:
          outlined copy of Data._Representation(v14, v6);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v6);
          break;
      }
      if (v13 < v7)
      {
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
      }
      outlined copy of Data._Representation(v115, v114);
      unint64_t v15 = Data._Representation.subscript.getter();
      uint64_t v17 = v16;
      unint64_t v18 = 0;
      switch(v114 >> 62)
      {
        case 1uLL:
          unint64_t v18 = v115 >> 32;
          break;
        case 2uLL:
          unint64_t v18 = *(void *)(v115 + 24);
          break;
        case 3uLL:
          break;
        default:
          unint64_t v18 = BYTE6(v114);
          break;
      }
      if (v18 < v10) {
        goto LABEL_139;
      }
      __int16 v112 = v6;
      uint64_t v19 = Data._Representation.subscript.getter();
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      uint64_t v23 = 0;
      switch(v17 >> 62)
      {
        case 1uLL:
          LODWORD(v23) = HIDWORD(v15) - v15;
          if (__OFSUB__(HIDWORD(v15), v15)) {
            goto LABEL_140;
          }
          uint64_t v23 = (int)v23;
          break;
        case 2uLL:
          unint64_t v25 = *(void *)(v15 + 16);
          BOOL v24 = *(void *)(v15 + 24);
          uint64_t v26 = __OFSUB__(v24, v25);
          uint64_t v23 = v24 - v25;
          if (!v26) {
            break;
          }
          goto LABEL_141;
        case 3uLL:
          break;
        default:
          uint64_t v23 = BYTE6(v17);
          break;
      }
      uint64_t v111 = v11;
      uint64_t v27 = v20 >> 62;
      switch(v20 >> 62)
      {
        case 1uLL:
          LODWORD(v28) = HIDWORD(v19) - v19;
          if (__OFSUB__(HIDWORD(v19), v19)) {
            goto LABEL_142;
          }
          uint64_t v28 = (int)v28;
LABEL_29:
          if (v23 != v28)
          {
LABEL_135:
            outlined consume of Data._Representation(v19, v20);
            outlined consume of Data._Representation(v15, v17);
            outlined consume of Data._Representation(v115, v114);
            outlined consume of Data._Representation(v113, v112);
            return 0;
          }
          if (v23 < 1)
          {
LABEL_6:
            outlined consume of Data._Representation(v19, v20);
            outlined consume of Data._Representation(v15, v17);
            outlined consume of Data._Representation(v115, v114);
            outlined consume of Data._Representation(v113, v112);
            if (v8 != v111) {
              return 0;
            }
          }
          else
          {
            switch(v17 >> 62)
            {
              case 1uLL:
                uint64_t v36 = v15;
                uint64_t v37 = v17;
                unint64_t v109 = v8;
                uint64_t v38 = (int)v36;
                if ((int)v36 > v36 >> 32) {
                  goto LABEL_144;
                }
                uint64_t v106 = v36;
                outlined copy of Data._Representation(v36, v37);
                uint64_t v39 = __DataStorage._bytes.getter();
                if (v39)
                {
                  uint64_t v40 = v39;
                  unint64_t v41 = __DataStorage._offset.getter();
                  if (__OFSUB__(v38, v41)) {
                    goto LABEL_146;
                  }
                  v101 = (void *)(v40 + v38 - v41);
                }
                else
                {
                  v101 = 0;
                }
                uint64_t v17 = v37;
                __DataStorage._length.getter();
                uint64_t v8 = v109;
                if (!v27)
                {
                  __s1[0] = v21;
                  LOWORD(__s1[1]) = v22;
                  BYTE2(__s1[1]) = BYTE2(v22);
                  BYTE3(__s1[1]) = BYTE3(v22);
                  BYTE4(__s1[1]) = BYTE4(v22);
                  BYTE5(__s1[1]) = BYTE5(v22);
                  if (!v101) {
                    goto LABEL_169;
                  }
                  uint64_t v52 = memcmp(v101, __s1, BYTE6(v22));
                  outlined consume of Data._Representation(v106, v37);
                  outlined consume of Data._Representation(v21, v22);
                  uint64_t v63 = v106;
LABEL_129:
                  uint64_t v64 = v17;
                  goto LABEL_130;
                }
                if (v27 != 1)
                {
                  uint64_t v82 = *(void *)(v21 + 16);
                  uint64_t v100 = *(char **)(v21 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v83 = __DataStorage._bytes.getter();
                  if (v83)
                  {
                    uint64_t v84 = v83;
                    size_t v85 = __DataStorage._offset.getter();
                    int v86 = v82;
                    uint64_t v26 = __OFSUB__(v82, v85);
                    int64_t v87 = v82 - v85;
                    unint64_t v15 = v106;
                    if (v26) {
                      goto LABEL_161;
                    }
                    uint64_t v88 = (const void *)(v84 + v87);
                  }
                  else
                  {
                    int v86 = v82;
                    uint64_t v88 = 0;
                    unint64_t v15 = v106;
                  }
                  uint64_t v95 = &v100[-v86];
                  if (__OFSUB__(v100, v86)) {
                    goto LABEL_156;
                  }
                  size_t v96 = __DataStorage._length.getter();
                  if (v96 >= (uint64_t)v95) {
                    uint64_t v97 = (size_t)v95;
                  }
                  else {
                    uint64_t v97 = v96;
                  }
                  if (!v101) {
                    goto LABEL_175;
                  }
                  uint64_t v8 = v109;
                  if (!v88) {
                    goto LABEL_176;
                  }
                  uint64_t v52 = memcmp(v101, v88, v97);
                  swift_release();
                  swift_release();
                  outlined consume of Data._Representation(v15, v17);
LABEL_128:
                  outlined consume of Data._Representation(v21, v22);
                  uint64_t v63 = v15;
                  goto LABEL_129;
                }
                if (v21 >> 32 < (int)v21) {
                  goto LABEL_155;
                }
                swift_retain();
                size_t v59 = (char *)__DataStorage._bytes.getter();
                if (v59)
                {
                  uint64_t v60 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v21, v60)) {
                    goto LABEL_162;
                  }
                  v59 += (int)v21 - v60;
                }
                uint64_t v61 = __DataStorage._length.getter();
                if (v61 >= (v21 >> 32) - (int)v21) {
                  uint64_t v62 = (v21 >> 32) - (int)v21;
                }
                else {
                  uint64_t v62 = v61;
                }
                if (!v101) {
                  goto LABEL_165;
                }
                uint64_t v8 = v109;
                if (!v59) {
                  goto LABEL_166;
                }
                uint64_t v52 = memcmp(v101, v59, v62);
                outlined consume of Data._Representation(v21, v22);
                outlined consume of Data._Representation(v106, v37);
                outlined consume of Data._Representation(v21, v22);
                uint64_t v63 = v106;
                uint64_t v64 = v37;
LABEL_130:
                outlined consume of Data._Representation(v63, v64);
                outlined consume of Data._Representation(v115, v114);
                outlined consume of Data._Representation(v113, v112);
LABEL_131:
                BOOL result = 0;
                if (v52 || v8 != v111) {
                  return result;
                }
                break;
              case 2uLL:
                uint64_t v110 = v8;
                uint64_t v42 = v15;
                uint64_t v43 = v17;
                uint64_t v44 = *(void *)(v42 + 16);
                unint64_t v107 = v42;
                swift_retain();
                swift_retain();
                uint64_t v45 = __DataStorage._bytes.getter();
                uint64_t v105 = v43;
                if (v45)
                {
                  uint64_t v46 = v45;
                  uint64_t v47 = __DataStorage._offset.getter();
                  if (__OFSUB__(v44, v47)) {
                    goto LABEL_145;
                  }
                  uint64_t v99 = (void *)(v46 + v44 - v47);
                }
                else
                {
                  uint64_t v99 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v8 = v110;
                if (!v27)
                {
                  __s1[0] = v21;
                  LOWORD(__s1[1]) = v22;
                  BYTE2(__s1[1]) = BYTE2(v22);
                  BYTE3(__s1[1]) = BYTE3(v22);
                  BYTE4(__s1[1]) = BYTE4(v22);
                  BYTE5(__s1[1]) = BYTE5(v22);
                  if (!v99) {
                    goto LABEL_168;
                  }
                  uint64_t v52 = memcmp(v99, __s1, BYTE6(v22));
LABEL_118:
                  swift_release();
                  swift_release();
                  outlined consume of Data._Representation(v21, v22);
                  uint64_t v63 = v107;
                  goto LABEL_119;
                }
                if (v27 == 1)
                {
                  if (v21 >> 32 < (int)v21) {
                    goto LABEL_151;
                  }
                  swift_retain();
                  int v55 = __DataStorage._bytes.getter();
                  if (v55)
                  {
                    uint64_t v56 = v55;
                    uint64_t v57 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v21, v57)) {
                      goto LABEL_160;
                    }
                    uint64_t v58 = (const void *)(v56 + (int)v21 - v57);
                  }
                  else
                  {
                    uint64_t v58 = 0;
                  }
                  size_t v93 = __DataStorage._length.getter();
                  if (v93 >= (v21 >> 32) - (int)v21) {
                    uint64_t v94 = (v21 >> 32) - (int)v21;
                  }
                  else {
                    uint64_t v94 = v93;
                  }
                  if (!v99) {
                    goto LABEL_173;
                  }
                  uint64_t v8 = v110;
                  if (!v58) {
                    goto LABEL_174;
                  }
                  uint64_t v52 = memcmp(v99, v58, v94);
                  outlined consume of Data._Representation(v21, v22);
                  goto LABEL_118;
                }
                uint64_t v76 = *(void *)(v21 + 16);
                unint64_t v75 = *(void *)(v21 + 24);
                swift_retain();
                swift_retain();
                unint64_t v77 = __DataStorage._bytes.getter();
                if (v77)
                {
                  uint64_t v78 = v77;
                  uint64_t v79 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v79)) {
                    goto LABEL_159;
                  }
                  uint64_t v80 = v76;
                  uint64_t v81 = (const void *)(v78 + v76 - v79);
                }
                else
                {
                  uint64_t v80 = v76;
                  uint64_t v81 = 0;
                }
                uint64_t v90 = v75 - v80;
                if (__OFSUB__(v75, v80)) {
                  goto LABEL_154;
                }
                unint64_t v91 = __DataStorage._length.getter();
                if (v91 >= v90) {
                  uint64_t v92 = v90;
                }
                else {
                  uint64_t v92 = v91;
                }
                if (!v99) {
                  goto LABEL_171;
                }
                uint64_t v8 = v110;
                if (!v81) {
                  goto LABEL_172;
                }
                uint64_t v52 = memcmp(v99, v81, v92);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v21, v22);
                uint64_t v63 = v107;
LABEL_119:
                uint64_t v64 = v105;
                goto LABEL_130;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v27) {
                  goto LABEL_55;
                }
                uint64_t v108 = v8;
                if (v27 == 1)
                {
                  uint64_t v104 = v17;
                  uint64_t v31 = (v19 >> 32) - (int)v19;
                  if (v19 >> 32 < (int)v19) {
                    goto LABEL_148;
                  }
                  uint64_t v48 = __DataStorage._bytes.getter();
                  if (!v48) {
                    goto LABEL_164;
                  }
                  uint64_t v33 = v48;
                  size_t v49 = __DataStorage._offset.getter();
                  unint64_t v35 = (int)v21 - v49;
                  if (__OFSUB__((int)v21, v49)) {
                    goto LABEL_150;
                  }
LABEL_51:
                  int v50 = __DataStorage._length.getter();
                  if (v50 >= v31) {
                    int v51 = v31;
                  }
                  else {
                    int v51 = v50;
                  }
                  uint64_t v52 = memcmp(__s1, (const void *)(v33 + v35), v51);
                  outlined consume of Data._Representation(v21, v22);
                  uint64_t v53 = v15;
                  uint64_t v54 = v104;
                }
                else
                {
                  uint64_t v71 = *(void *)(v19 + 16);
                  uint64_t v103 = *(char **)(v19 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v70 = (char *)__DataStorage._bytes.getter();
                  if (v70)
                  {
                    uint64_t v72 = __DataStorage._offset.getter();
                    if (__OFSUB__(v71, v72)) {
                      goto LABEL_158;
                    }
                    v70 += v71 - v72;
                  }
                  uint64_t v26 = __OFSUB__(v103, v71);
                  uint64_t v73 = &v103[-v71];
                  if (v26) {
                    goto LABEL_152;
                  }
                  uint64_t v74 = __DataStorage._length.getter();
                  if (!v70) {
                    goto LABEL_167;
                  }
LABEL_98:
                  if (v74 >= (uint64_t)v73) {
                    size_t v89 = (size_t)v73;
                  }
                  else {
                    size_t v89 = v74;
                  }
                  uint64_t v52 = memcmp(__s1, v70, v89);
                  swift_release();
                  swift_release();
                  outlined consume of Data._Representation(v21, v22);
                  uint64_t v53 = v15;
                  uint64_t v54 = v17;
                }
                outlined consume of Data._Representation(v53, v54);
                outlined consume of Data._Representation(v115, v114);
                outlined consume of Data._Representation(v113, v112);
                uint64_t v8 = v108;
                goto LABEL_131;
              default:
                __s1[0] = v15;
                LOWORD(__s1[1]) = v17;
                BYTE2(__s1[1]) = BYTE2(v17);
                BYTE3(__s1[1]) = BYTE3(v17);
                BYTE4(__s1[1]) = BYTE4(v17);
                BYTE5(__s1[1]) = BYTE5(v17);
                if (!v27)
                {
LABEL_55:
                  uint64_t __s2 = v19;
                  v117 = v20;
                  v118 = BYTE2(v20);
                  objc_super v119 = BYTE3(v20);
                  long long v120 = BYTE4(v20);
                  unint64_t v121 = BYTE5(v20);
                  uint64_t v52 = memcmp(__s1, &__s2, BYTE6(v20));
                  goto LABEL_128;
                }
                uint64_t v108 = v8;
                if (v27 == 1)
                {
                  uint64_t v104 = v17;
                  uint64_t v31 = (v19 >> 32) - (int)v19;
                  if (v19 >> 32 < (int)v19) {
                    goto LABEL_147;
                  }
                  uint64_t v32 = __DataStorage._bytes.getter();
                  if (!v32)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_164:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    __break(1u);
LABEL_172:
                    __break(1u);
LABEL_173:
                    __break(1u);
LABEL_174:
                    __break(1u);
LABEL_175:
                    __break(1u);
LABEL_176:
                    __break(1u);
                    JUMPOUT(0x1B56DBD6CLL);
                  }
                  uint64_t v33 = v32;
                  uint64_t v34 = __DataStorage._offset.getter();
                  unint64_t v35 = (int)v21 - v34;
                  if (__OFSUB__((int)v21, v34)) {
                    goto LABEL_149;
                  }
                  goto LABEL_51;
                }
                int v65 = *(void *)(v19 + 16);
                unint64_t v102 = *(char **)(v19 + 24);
                swift_retain();
                swift_retain();
                uint64_t v66 = __DataStorage._bytes.getter();
                if (v66)
                {
                  uint64_t v67 = v66;
                  int64_t v68 = __DataStorage._offset.getter();
                  if (__OFSUB__(v65, v68)) {
                    goto LABEL_157;
                  }
                  uint64_t v69 = v65;
                  uint64_t v70 = (char *)(v67 + v65 - v68);
                }
                else
                {
                  uint64_t v69 = v65;
                  uint64_t v70 = 0;
                }
                uint64_t v73 = &v102[-v69];
                if (__OFSUB__(v102, v69)) {
                  goto LABEL_153;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (!v70) {
                  goto LABEL_170;
                }
                goto LABEL_98;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v30 = *(void *)(v19 + 16);
          uint64_t v29 = *(void *)(v19 + 24);
          uint64_t v26 = __OFSUB__(v29, v30);
          uint64_t v28 = v29 - v30;
          if (!v26) {
            goto LABEL_29;
          }
          goto LABEL_143;
        case 3uLL:
          if (!v23) {
            goto LABEL_6;
          }
          goto LABEL_135;
        default:
          uint64_t v28 = BYTE6(v20);
          goto LABEL_29;
      }
    }
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  int64_t v85;
  uint64_t v86;
  size_t v87;
  uint64_t v88;
  size_t v89;
  char *v90;
  uint64_t v91;
  size_t v92;
  uint64_t v94;
  void *v95;
  char *v96;
  uint64_t *__s1;
  void *__s1a;
  char *__s1b;
  char *__s1c;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t __s2;
  __int16 v108;
  char v109;
  char v110;
  char v111;
  char v112;
  void v113[3];

  v113[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    Swift::UInt v3 = (uint64_t *)(a1 + 48);
    unint64_t v4 = (uint64_t *)(a2 + 48);
    while (1)
    {
      unint64_t v5 = *(v3 - 2);
      uint64_t v6 = *(v3 - 1);
      uint64_t v8 = *v3;
      v3 += 3;
      uint64_t v7 = v8;
      unint64_t v9 = *(v4 - 1);
      uint64_t v106 = *(v4 - 2);
      uint64_t v12 = *v4;
      uint64_t v11 = v4 + 3;
      uint64_t v10 = v12;
      uint64_t v13 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          uint64_t v13 = v5 >> 32;
          goto LABEL_12;
        case 2uLL:
          uint64_t v13 = *(void *)(v5 + 24);
LABEL_12:
          outlined copy of Data._Representation(v5, v6);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v6);
          break;
      }
      if (v13 < v7)
      {
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
      outlined copy of Data._Representation(v106, v9);
      unint64_t v14 = Data._Representation.subscript.getter();
      uint64_t v16 = v15;
      uint64_t v17 = 0;
      switch(v9 >> 62)
      {
        case 1uLL:
          uint64_t v17 = v106 >> 32;
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v106 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v17 = BYTE6(v9);
          break;
      }
      if (v17 < v10) {
        goto LABEL_135;
      }
      uint64_t v105 = v5;
      unint64_t v18 = Data._Representation.subscript.getter();
      unint64_t v20 = v18;
      uint64_t v21 = v19;
      uint64_t v22 = 0;
      switch(v16 >> 62)
      {
        case 1uLL:
          LODWORD(v22) = HIDWORD(v14) - v14;
          if (__OFSUB__(HIDWORD(v14), v14)) {
            goto LABEL_136;
          }
          uint64_t v22 = (int)v22;
          break;
        case 2uLL:
          BOOL v24 = *(void *)(v14 + 16);
          uint64_t v23 = *(void *)(v14 + 24);
          unint64_t v25 = __OFSUB__(v23, v24);
          uint64_t v22 = v23 - v24;
          if (!v25) {
            break;
          }
          goto LABEL_137;
        case 3uLL:
          break;
        default:
          uint64_t v22 = BYTE6(v16);
          break;
      }
      uint64_t v103 = v11;
      uint64_t v104 = v6;
      uint64_t v26 = v19 >> 62;
      switch(v19 >> 62)
      {
        case 1uLL:
          LODWORD(v27) = HIDWORD(v18) - v18;
          if (__OFSUB__(HIDWORD(v18), v18)) {
            goto LABEL_138;
          }
          uint64_t v27 = (int)v27;
LABEL_29:
          if (v22 != v27)
          {
LABEL_132:
            outlined consume of Data._Representation(v18, v19);
            outlined consume of Data._Representation(v14, v16);
            outlined consume of Data._Representation(v106, v9);
            outlined consume of Data._Representation(v105, v104);
            return 0;
          }
          if (v22 < 1)
          {
LABEL_6:
            outlined consume of Data._Representation(v18, v19);
            outlined consume of Data._Representation(v14, v16);
            outlined consume of Data._Representation(v106, v9);
            outlined consume of Data._Representation(v105, v104);
          }
          else
          {
            switch(v16 >> 62)
            {
              case 1uLL:
                v101 = v16;
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_140;
                }
                outlined copy of Data._Representation(v14, v16);
                unint64_t v35 = (char *)__DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_43;
                }
                uint64_t v36 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v36)) {
                  goto LABEL_142;
                }
                v35 += (int)v14 - v36;
LABEL_43:
                __DataStorage._length.getter();
                if (!v26)
                {
                  v113[0] = v20;
                  LOWORD(v113[1]) = v21;
                  BYTE2(v113[1]) = BYTE2(v21);
                  BYTE3(v113[1]) = BYTE3(v21);
                  BYTE4(v113[1]) = BYTE4(v21);
                  BYTE5(v113[1]) = BYTE5(v21);
                  if (!v35) {
                    goto LABEL_165;
                  }
                  uint64_t v42 = memcmp(v35, v113, BYTE6(v21));
                  uint64_t v43 = v14;
                  unint64_t v41 = v16;
LABEL_91:
                  outlined consume of Data._Representation(v43, v41);
                  outlined consume of Data._Representation(v20, v21);
                  uint64_t v58 = v14;
                  size_t v59 = v41;
                  goto LABEL_121;
                }
                __s1a = v35;
                if (v26 == 1)
                {
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_151;
                  }
                  swift_retain();
                  uint64_t v37 = (char *)__DataStorage._bytes.getter();
                  if (v37)
                  {
                    uint64_t v38 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v20, v38)) {
                      goto LABEL_158;
                    }
                    v37 += (int)v20 - v38;
                  }
                  uint64_t v39 = __DataStorage._length.getter();
                  if (v39 >= (v20 >> 32) - (int)v20) {
                    uint64_t v40 = (v20 >> 32) - (int)v20;
                  }
                  else {
                    uint64_t v40 = v39;
                  }
                  unint64_t v41 = v16;
                  if (!__s1a) {
                    goto LABEL_160;
                  }
                  if (!v37) {
                    goto LABEL_161;
                  }
                  uint64_t v42 = memcmp(__s1a, v37, v40);
                  outlined consume of Data._Representation(v20, v21);
                  uint64_t v43 = v14;
                  goto LABEL_91;
                }
                unint64_t v77 = *(void *)(v20 + 16);
                size_t v96 = *(char **)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v78 = __DataStorage._bytes.getter();
                if (v78)
                {
                  uint64_t v79 = v78;
                  uint64_t v80 = __DataStorage._offset.getter();
                  uint64_t v81 = v77;
                  unint64_t v25 = __OFSUB__(v77, v80);
                  uint64_t v82 = v77 - v80;
                  uint64_t v16 = v101;
                  if (v25) {
                    goto LABEL_157;
                  }
                  uint64_t v83 = (const void *)(v79 + v82);
                }
                else
                {
                  uint64_t v81 = v77;
                  uint64_t v83 = 0;
                  uint64_t v16 = v101;
                }
                uint64_t v90 = &v96[-v81];
                if (__OFSUB__(v96, v81)) {
                  goto LABEL_152;
                }
                unint64_t v91 = __DataStorage._length.getter();
                if (v91 >= (uint64_t)v90) {
                  uint64_t v92 = (size_t)v90;
                }
                else {
                  uint64_t v92 = v91;
                }
                if (!__s1a) {
                  goto LABEL_171;
                }
                if (!v83) {
                  goto LABEL_172;
                }
                uint64_t v70 = memcmp(__s1a, v83, v92);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v14, v16);
LABEL_112:
                outlined consume of Data._Representation(v20, v21);
                outlined consume of Data._Representation(v14, v16);
                outlined consume of Data._Representation(v106, v9);
                outlined consume of Data._Representation(v105, v104);
                if (v70) {
                  return 0;
                }
                break;
              case 2uLL:
                uint64_t v44 = v16;
                uint64_t v45 = v3;
                unint64_t v102 = v44;
                uint64_t v46 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v47 = (char *)__DataStorage._bytes.getter();
                if (!v47) {
                  goto LABEL_58;
                }
                uint64_t v48 = __DataStorage._offset.getter();
                if (__OFSUB__(v46, v48)) {
                  goto LABEL_141;
                }
                v47 += v46 - v48;
LABEL_58:
                Swift::UInt v3 = v45;
                __DataStorage._length.getter();
                uint64_t v16 = v102;
                if (!v26)
                {
                  v113[0] = v20;
                  LOWORD(v113[1]) = v21;
                  BYTE2(v113[1]) = BYTE2(v21);
                  BYTE3(v113[1]) = BYTE3(v21);
                  BYTE4(v113[1]) = BYTE4(v21);
                  BYTE5(v113[1]) = BYTE5(v21);
                  if (!v47) {
                    goto LABEL_164;
                  }
                  uint64_t v70 = memcmp(v47, v113, BYTE6(v21));
                  swift_release();
LABEL_111:
                  swift_release();
                  goto LABEL_112;
                }
                uint64_t v95 = v47;
                if (v26 != 1)
                {
                  uint64_t v71 = *(void *)(v20 + 16);
                  uint64_t v94 = *(void *)(v20 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v72 = __DataStorage._bytes.getter();
                  if (v72)
                  {
                    uint64_t v73 = v72;
                    uint64_t v74 = __DataStorage._offset.getter();
                    if (__OFSUB__(v71, v74)) {
                      goto LABEL_155;
                    }
                    unint64_t v75 = v71;
                    uint64_t v76 = (const void *)(v73 + v71 - v74);
                  }
                  else
                  {
                    unint64_t v75 = v71;
                    uint64_t v76 = 0;
                  }
                  size_t v85 = v94 - v75;
                  if (__OFSUB__(v94, v75)) {
                    goto LABEL_150;
                  }
                  int v86 = __DataStorage._length.getter();
                  if (v86 >= v85) {
                    int64_t v87 = v85;
                  }
                  else {
                    int64_t v87 = v86;
                  }
                  if (!v95) {
                    goto LABEL_167;
                  }
                  uint64_t v16 = v102;
                  if (!v76) {
                    goto LABEL_168;
                  }
                  uint64_t v70 = memcmp(v95, v76, v87);
                  swift_release();
                  swift_release();
LABEL_110:
                  swift_release();
                  goto LABEL_111;
                }
                if (v20 >> 32 < (int)v20) {
                  goto LABEL_145;
                }
                swift_retain();
                size_t v49 = __DataStorage._bytes.getter();
                if (v49)
                {
                  int v50 = v49;
                  int v51 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v20, v51)) {
                    goto LABEL_156;
                  }
                  uint64_t v52 = (const void *)(v50 + (int)v20 - v51);
                }
                else
                {
                  uint64_t v52 = 0;
                }
                uint64_t v88 = __DataStorage._length.getter();
                if (v88 >= (v20 >> 32) - (int)v20) {
                  size_t v89 = (v20 >> 32) - (int)v20;
                }
                else {
                  size_t v89 = v88;
                }
                if (!v47) {
                  goto LABEL_169;
                }
                if (!v52) {
                  goto LABEL_170;
                }
                uint64_t v42 = memcmp(v47, v52, v89);
                outlined consume of Data._Representation(v20, v21);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v20, v21);
                uint64_t v58 = v14;
                size_t v59 = v102;
LABEL_121:
                outlined consume of Data._Representation(v58, v59);
                outlined consume of Data._Representation(v106, v9);
                outlined consume of Data._Representation(v105, v104);
                if (v42) {
                  return 0;
                }
                break;
              case 3uLL:
                memset(v113, 0, 14);
                if (!v26) {
                  goto LABEL_74;
                }
                if (v26 == 1)
                {
                  __s1 = v3;
                  uint64_t v30 = (v18 >> 32) - (int)v18;
                  if (v18 >> 32 < (int)v18) {
                    goto LABEL_144;
                  }
                  uint64_t v53 = __DataStorage._bytes.getter();
                  if (!v53) {
                    goto LABEL_162;
                  }
                  uint64_t v32 = v53;
                  uint64_t v54 = __DataStorage._offset.getter();
                  uint64_t v34 = (int)v20 - v54;
                  if (__OFSUB__((int)v20, v54)) {
                    goto LABEL_149;
                  }
LABEL_69:
                  int v55 = __DataStorage._length.getter();
                  if (v55 >= v30) {
                    uint64_t v56 = v30;
                  }
                  else {
                    uint64_t v56 = v55;
                  }
                  uint64_t v57 = memcmp(v113, (const void *)(v32 + v34), v56);
                  outlined consume of Data._Representation(v20, v21);
                  outlined consume of Data._Representation(v14, v16);
                  outlined consume of Data._Representation(v106, v9);
                  outlined consume of Data._Representation(v105, v104);
                  Swift::UInt v3 = __s1;
                  if (v57) {
                    return 0;
                  }
                  break;
                }
                uint64_t v66 = *(void *)(v18 + 16);
                __s1c = *(char **)(v18 + 24);
                swift_retain();
                swift_retain();
                int v65 = (char *)__DataStorage._bytes.getter();
                if (v65)
                {
                  uint64_t v67 = __DataStorage._offset.getter();
                  if (__OFSUB__(v66, v67)) {
                    goto LABEL_154;
                  }
                  v65 += v66 - v67;
                }
                unint64_t v25 = __OFSUB__(__s1c, v66);
                int64_t v68 = &__s1c[-v66];
                if (v25) {
                  goto LABEL_146;
                }
                uint64_t v69 = __DataStorage._length.getter();
                if (!v65) {
                  goto LABEL_163;
                }
LABEL_98:
                if (v69 >= (uint64_t)v68) {
                  uint64_t v84 = (size_t)v68;
                }
                else {
                  uint64_t v84 = v69;
                }
                uint64_t v70 = memcmp(v113, v65, v84);
                goto LABEL_110;
              default:
                v113[0] = v14;
                LOWORD(v113[1]) = v16;
                BYTE2(v113[1]) = BYTE2(v16);
                BYTE3(v113[1]) = BYTE3(v16);
                BYTE4(v113[1]) = BYTE4(v16);
                BYTE5(v113[1]) = BYTE5(v16);
                if (!v26)
                {
LABEL_74:
                  uint64_t __s2 = v18;
                  uint64_t v108 = v19;
                  unint64_t v109 = BYTE2(v19);
                  uint64_t v110 = BYTE3(v19);
                  uint64_t v111 = BYTE4(v19);
                  __int16 v112 = BYTE5(v19);
                  uint64_t v42 = memcmp(v113, &__s2, BYTE6(v19));
                  outlined consume of Data._Representation(v20, v21);
                  uint64_t v58 = v14;
                  size_t v59 = v16;
                  goto LABEL_121;
                }
                if (v26 == 1)
                {
                  __s1 = v3;
                  uint64_t v30 = (v18 >> 32) - (int)v18;
                  if (v18 >> 32 < (int)v18) {
                    goto LABEL_143;
                  }
                  uint64_t v31 = __DataStorage._bytes.getter();
                  if (!v31)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_160:
                    __break(1u);
LABEL_161:
                    __break(1u);
LABEL_162:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_163:
                    __break(1u);
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    __break(1u);
LABEL_172:
                    __break(1u);
                    JUMPOUT(0x1B56DC894);
                  }
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  uint64_t v34 = (int)v20 - v33;
                  if (__OFSUB__((int)v20, v33)) {
                    goto LABEL_148;
                  }
                  goto LABEL_69;
                }
                uint64_t v60 = *(void *)(v18 + 16);
                __s1b = *(char **)(v18 + 24);
                swift_retain();
                swift_retain();
                uint64_t v61 = __DataStorage._bytes.getter();
                if (v61)
                {
                  uint64_t v62 = v61;
                  uint64_t v63 = __DataStorage._offset.getter();
                  if (__OFSUB__(v60, v63)) {
                    goto LABEL_153;
                  }
                  uint64_t v64 = v60;
                  int v65 = (char *)(v62 + v60 - v63);
                }
                else
                {
                  uint64_t v64 = v60;
                  int v65 = 0;
                }
                int64_t v68 = &__s1b[-v64];
                if (__OFSUB__(__s1b, v64)) {
                  goto LABEL_147;
                }
                uint64_t v69 = __DataStorage._length.getter();
                if (!v65) {
                  goto LABEL_166;
                }
                goto LABEL_98;
            }
          }
          --v2;
          unint64_t v4 = v103;
          if (!v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(v18 + 16);
          uint64_t v28 = *(void *)(v18 + 24);
          unint64_t v25 = __OFSUB__(v28, v29);
          uint64_t v27 = v28 - v29;
          if (!v25) {
            goto LABEL_29;
          }
          goto LABEL_139;
        case 3uLL:
          if (!v22) {
            goto LABEL_6;
          }
          goto LABEL_132;
        default:
          uint64_t v27 = BYTE6(v19);
          goto LABEL_29;
      }
    }
  }
  return 1;
}

{
  uint64_t v2;
  long long *v3;
  long long *v4;
  uint64_t v5;
  char v6;
  BOOL v8;
  long long v10[2];
  long long v11[2];

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      uint64_t v6 = 1;
    }
    else
    {
      Swift::UInt v3 = (long long *)(a1 + 32);
      unint64_t v4 = (long long *)(a2 + 32);
      unint64_t v5 = v2 - 1;
      do
      {
        outlined init with take of Extension(v3, (uint64_t)v10);
        outlined init with take of Extension(v4, (uint64_t)v11);
        outlined retain of Extension((uint64_t)v10, (void (*)(void, void, void, void, void))outlined copy of Extension);
        outlined retain of Extension((uint64_t)v11, (void (*)(void, void, void, void, void))outlined copy of Extension);
        uint64_t v6 = specialized static Extension.__derived_enum_equals(_:_:)(v10, v11);
        outlined retain of Extension((uint64_t)v11, (void (*)(void, void, void, void, void))outlined consume of Extension);
        outlined retain of Extension((uint64_t)v10, (void (*)(void, void, void, void, void))outlined consume of Extension);
        uint64_t v8 = v5-- != 0;
        if ((v6 & 1) == 0) {
          break;
        }
        unint64_t v4 = (long long *)((char *)v4 + 40);
        Swift::UInt v3 = (long long *)((char *)v3 + 40);
      }
      while (v8);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  size_t v74;
  int64_t v75;
  uint64_t v76;
  size_t v77;
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t result;
  char *v85;
  uint64_t v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  char *v91;
  void *__s1;
  char *__s1a;
  char *__s1b;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t __s2;
  __int16 v104;
  char v105;
  char v106;
  char v107;
  char v108;
  void v109[2];
  long long v110[2];
  long long v111[2];
  uint64_t v112;

  __int16 v112 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  Swift::UInt v3 = 0;
  size_t v96 = a2 + 32;
  uint64_t v97 = a1 + 32;
  uint64_t v95 = *(void *)(a1 + 16);
  while (2)
  {
    unint64_t v4 = v3;
    unint64_t v5 = 32 * v3;
    uint64_t v7 = *(void *)(v97 + v5);
    uint64_t v6 = *(void *)(v97 + v5 + 8);
    uint64_t v8 = *(void *)(v97 + v5 + 24);
    unint64_t v9 = *(void *)(v96 + v5 + 16);
    v101 = *(void *)(v96 + v5 + 8);
    unint64_t v102 = *(void *)(v96 + v5);
    uint64_t v10 = *(void *)(v96 + v5 + 24);
    uint64_t v11 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        uint64_t v11 = v7 >> 32;
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(v7 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v11 = BYTE6(v6);
        break;
    }
    if (v11 < *(void *)(v97 + v5 + 16)) {
      goto LABEL_143;
    }
    uint64_t v98 = v4 + 1;
    outlined copy of Data._Representation(v7, v6);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v102, v101);
    swift_bridgeObjectRetain();
    uint64_t v99 = v7;
    uint64_t v100 = v6;
    uint64_t v12 = Data._Representation.subscript.getter();
    unint64_t v14 = v13;
    unint64_t v15 = 0;
    switch(v101 >> 62)
    {
      case 1uLL:
        unint64_t v15 = v102 >> 32;
        break;
      case 2uLL:
        unint64_t v15 = *(void *)(v102 + 24);
        break;
      case 3uLL:
        break;
      default:
        unint64_t v15 = BYTE6(v101);
        break;
    }
    if (v15 < v9) {
      goto LABEL_144;
    }
    uint64_t v16 = Data._Representation.subscript.getter();
    unint64_t v18 = v16;
    uint64_t v19 = v17;
    unint64_t v20 = 0;
    switch(v14 >> 62)
    {
      case 1uLL:
        LODWORD(v20) = HIDWORD(v12) - v12;
        if (__OFSUB__(HIDWORD(v12), v12)) {
          goto LABEL_145;
        }
        unint64_t v20 = (int)v20;
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v12 + 16);
        uint64_t v21 = *(void *)(v12 + 24);
        uint64_t v23 = __OFSUB__(v21, v22);
        unint64_t v20 = v21 - v22;
        if (!v23) {
          break;
        }
        goto LABEL_146;
      case 3uLL:
        break;
      default:
        unint64_t v20 = BYTE6(v14);
        break;
    }
    BOOL v24 = v17 >> 62;
    switch(v17 >> 62)
    {
      case 1uLL:
        LODWORD(v25) = HIDWORD(v16) - v16;
        if (__OFSUB__(HIDWORD(v16), v16)) {
          goto LABEL_147;
        }
        unint64_t v25 = (int)v25;
LABEL_25:
        if (v20 == v25)
        {
          if (v20 < 1)
          {
LABEL_36:
            outlined consume of Data._Representation(v16, v17);
            outlined consume of Data._Representation(v12, v14);
            goto LABEL_120;
          }
          switch(v14 >> 62)
          {
            case 1uLL:
              if ((int)v12 > v12 >> 32) {
                goto LABEL_149;
              }
              outlined copy of Data._Representation(v12, v14);
              uint64_t v33 = (char *)__DataStorage._bytes.getter();
              if (!v33) {
                goto LABEL_41;
              }
              uint64_t v34 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v12, v34)) {
                goto LABEL_151;
              }
              v33 += (int)v12 - v34;
LABEL_41:
              uint64_t v2 = v95;
              __DataStorage._length.getter();
              if (!v24)
              {
                v109[0] = v18;
                LOWORD(v109[1]) = v19;
                BYTE2(v109[1]) = BYTE2(v19);
                BYTE3(v109[1]) = BYTE3(v19);
                BYTE4(v109[1]) = BYTE4(v19);
                BYTE5(v109[1]) = BYTE5(v19);
                if (!v33) {
                  goto LABEL_174;
                }
                uint64_t v39 = memcmp(v33, v109, BYTE6(v19));
LABEL_89:
                outlined consume of Data._Representation(v12, v14);
                goto LABEL_119;
              }
              __s1 = v33;
              if (v24 == 1)
              {
                if (v18 >> 32 < (int)v18) {
                  goto LABEL_159;
                }
                swift_retain();
                unint64_t v35 = (char *)__DataStorage._bytes.getter();
                if (v35)
                {
                  uint64_t v36 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v18, v36)) {
                    goto LABEL_167;
                  }
                  v35 += (int)v18 - v36;
                }
                uint64_t v2 = v95;
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= (v18 >> 32) - (int)v18) {
                  uint64_t v38 = (v18 >> 32) - (int)v18;
                }
                else {
                  uint64_t v38 = v37;
                }
                if (!v33) {
                  goto LABEL_169;
                }
                if (!v35) {
                  goto LABEL_170;
                }
                uint64_t v39 = memcmp(v33, v35, v38);
                outlined consume of Data._Representation(v18, v19);
                goto LABEL_89;
              }
              int64_t v68 = *(void *)(v18 + 16);
              unint64_t v91 = *(char **)(v18 + 24);
              swift_retain();
              swift_retain();
              uint64_t v69 = __DataStorage._bytes.getter();
              if (v69)
              {
                uint64_t v70 = v69;
                uint64_t v71 = __DataStorage._offset.getter();
                if (__OFSUB__(v68, v71)) {
                  goto LABEL_166;
                }
                uint64_t v72 = v68;
                uint64_t v73 = (const void *)(v70 + v68 - v71);
              }
              else
              {
                uint64_t v72 = v68;
                uint64_t v73 = 0;
              }
              size_t v85 = &v91[-v72];
              if (__OFSUB__(v91, v72)) {
                goto LABEL_161;
              }
              int v86 = __DataStorage._length.getter();
              if (v86 >= (uint64_t)v85) {
                int64_t v87 = (size_t)v85;
              }
              else {
                int64_t v87 = v86;
              }
              if (!__s1) {
                goto LABEL_180;
              }
              if (!v73) {
                goto LABEL_181;
              }
              uint64_t v61 = memcmp(__s1, v73, v87);
              swift_release();
              swift_release();
              outlined consume of Data._Representation(v12, v14);
LABEL_110:
              outlined consume of Data._Representation(v18, v19);
              outlined consume of Data._Representation(v12, v14);
              if (v61) {
                goto LABEL_138;
              }
              goto LABEL_120;
            case 2uLL:
              uint64_t v40 = *(void *)(v12 + 16);
              swift_retain();
              swift_retain();
              unint64_t v41 = (char *)__DataStorage._bytes.getter();
              if (!v41) {
                goto LABEL_56;
              }
              uint64_t v42 = __DataStorage._offset.getter();
              if (__OFSUB__(v40, v42)) {
                goto LABEL_150;
              }
              v41 += v40 - v42;
LABEL_56:
              uint64_t v2 = v95;
              __DataStorage._length.getter();
              if (!v24)
              {
                v109[0] = v18;
                LOWORD(v109[1]) = v19;
                BYTE2(v109[1]) = BYTE2(v19);
                BYTE3(v109[1]) = BYTE3(v19);
                BYTE4(v109[1]) = BYTE4(v19);
                BYTE5(v109[1]) = BYTE5(v19);
                if (!v41) {
                  goto LABEL_173;
                }
                uint64_t v61 = memcmp(v41, v109, BYTE6(v19));
                swift_release();
LABEL_109:
                swift_release();
                goto LABEL_110;
              }
              uint64_t v90 = v41;
              if (v24 != 1)
              {
                uint64_t v62 = *(void *)(v18 + 16);
                size_t v89 = *(void *)(v18 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = __DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v64 = v63;
                  int v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v62, v65)) {
                    goto LABEL_164;
                  }
                  uint64_t v66 = v62;
                  uint64_t v67 = (const void *)(v64 + v62 - v65);
                }
                else
                {
                  uint64_t v66 = v62;
                  uint64_t v67 = 0;
                }
                unint64_t v75 = v89 - v66;
                if (__OFSUB__(v89, v66)) {
                  goto LABEL_160;
                }
                uint64_t v76 = __DataStorage._length.getter();
                if (v76 >= v75) {
                  unint64_t v77 = v75;
                }
                else {
                  unint64_t v77 = v76;
                }
                if (!v90) {
                  goto LABEL_176;
                }
                if (!v67) {
                  goto LABEL_177;
                }
                uint64_t v61 = memcmp(v90, v67, v77);
                swift_release();
                swift_release();
LABEL_108:
                swift_release();
                goto LABEL_109;
              }
              if (v18 >> 32 < (int)v18) {
                goto LABEL_154;
              }
              swift_retain();
              uint64_t v43 = __DataStorage._bytes.getter();
              if (v43)
              {
                uint64_t v88 = v43;
                uint64_t v44 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v18, v44)) {
                  goto LABEL_165;
                }
                uint64_t v45 = (const void *)(v88 + (int)v18 - v44);
              }
              else
              {
                uint64_t v45 = 0;
              }
              uint64_t v78 = __DataStorage._length.getter();
              if (v78 >= (v18 >> 32) - (int)v18) {
                uint64_t v79 = (v18 >> 32) - (int)v18;
              }
              else {
                uint64_t v79 = v78;
              }
              if (!v41) {
                goto LABEL_178;
              }
              if (!v45) {
                goto LABEL_179;
              }
              uint64_t v39 = memcmp(v41, v45, v79);
              outlined consume of Data._Representation(v18, v19);
              swift_release();
              swift_release();
LABEL_119:
              outlined consume of Data._Representation(v18, v19);
              outlined consume of Data._Representation(v12, v14);
              if (v39) {
                goto LABEL_138;
              }
LABEL_120:
              uint64_t v80 = *(void *)(v8 + 16);
              if (v80 != *(void *)(v10 + 16)) {
                goto LABEL_138;
              }
              if (v80 && v8 != v10)
              {
                uint64_t v81 = 0;
                uint64_t v82 = 32;
                while (1)
                {
                  outlined init with take of Extension((long long *)(v8 + v82), (uint64_t)v110);
                  if (v81 >= *(void *)(v10 + 16)) {
                    break;
                  }
                  outlined init with take of Extension((long long *)(v10 + v82), (uint64_t)v111);
                  outlined retain of Extension((uint64_t)v110, (void (*)(void, void, void, void, void))outlined copy of Extension);
                  outlined retain of Extension((uint64_t)v111, (void (*)(void, void, void, void, void))outlined copy of Extension);
                  uint64_t v83 = specialized static Extension.__derived_enum_equals(_:_:)(v110, v111);
                  outlined retain of Extension((uint64_t)v111, (void (*)(void, void, void, void, void))outlined consume of Extension);
                  outlined retain of Extension((uint64_t)v110, (void (*)(void, void, void, void, void))outlined consume of Extension);
                  if ((v83 & 1) == 0) {
                    goto LABEL_138;
                  }
                  ++v81;
                  v82 += 40;
                  if (v80 == v81) {
                    goto LABEL_127;
                  }
                }
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
              }
LABEL_127:
              outlined consume of Data._Representation(v102, v101);
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(v99, v100);
              swift_bridgeObjectRelease();
              BOOL result = 1;
              Swift::UInt v3 = v98;
              if (v98 == v2) {
                return result;
              }
              break;
            case 3uLL:
              memset(v109, 0, 14);
              if (!v24) {
                goto LABEL_72;
              }
              if (v24 == 1)
              {
                uint64_t v28 = (v16 >> 32) - (int)v16;
                if (v16 >> 32 < (int)v16) {
                  goto LABEL_153;
                }
                uint64_t v46 = __DataStorage._bytes.getter();
                if (!v46) {
                  goto LABEL_171;
                }
                uint64_t v30 = v46;
                uint64_t v47 = __DataStorage._offset.getter();
                uint64_t v32 = (int)v18 - v47;
                if (__OFSUB__((int)v18, v47)) {
                  goto LABEL_158;
                }
LABEL_67:
                uint64_t v48 = __DataStorage._length.getter();
                if (v48 >= v28) {
                  size_t v49 = v28;
                }
                else {
                  size_t v49 = v48;
                }
                int v50 = memcmp(v109, (const void *)(v30 + v32), v49);
                outlined consume of Data._Representation(v18, v19);
                outlined consume of Data._Representation(v12, v14);
                uint64_t v2 = v95;
                if (v50) {
                  goto LABEL_138;
                }
                goto LABEL_120;
              }
              uint64_t v57 = *(void *)(v16 + 16);
              __s1b = *(char **)(v16 + 24);
              swift_retain();
              swift_retain();
              uint64_t v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v58 = __DataStorage._offset.getter();
                if (__OFSUB__(v57, v58)) {
                  goto LABEL_163;
                }
                v56 += v57 - v58;
              }
              uint64_t v23 = __OFSUB__(__s1b, v57);
              size_t v59 = &__s1b[-v57];
              if (v23) {
                goto LABEL_155;
              }
              uint64_t v60 = __DataStorage._length.getter();
              if (!v56) {
                goto LABEL_172;
              }
LABEL_96:
              if (v60 >= (uint64_t)v59) {
                uint64_t v74 = (size_t)v59;
              }
              else {
                uint64_t v74 = v60;
              }
              uint64_t v61 = memcmp(v109, v56, v74);
              goto LABEL_108;
            default:
              v109[0] = v12;
              LOWORD(v109[1]) = v14;
              BYTE2(v109[1]) = BYTE2(v14);
              BYTE3(v109[1]) = BYTE3(v14);
              BYTE4(v109[1]) = BYTE4(v14);
              BYTE5(v109[1]) = BYTE5(v14);
              if (!v24)
              {
LABEL_72:
                uint64_t __s2 = v16;
                uint64_t v104 = v17;
                uint64_t v105 = BYTE2(v17);
                uint64_t v106 = BYTE3(v17);
                unint64_t v107 = BYTE4(v17);
                uint64_t v108 = BYTE5(v17);
                uint64_t v39 = memcmp(v109, &__s2, BYTE6(v17));
                goto LABEL_119;
              }
              if (v24 == 1)
              {
                uint64_t v28 = (v16 >> 32) - (int)v16;
                if (v16 >> 32 < (int)v16) {
                  goto LABEL_152;
                }
                uint64_t v29 = __DataStorage._bytes.getter();
                if (!v29)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
                  JUMPOUT(0x1B56DD580);
                }
                uint64_t v30 = v29;
                uint64_t v31 = __DataStorage._offset.getter();
                uint64_t v32 = (int)v18 - v31;
                if (__OFSUB__((int)v18, v31)) {
                  goto LABEL_157;
                }
                goto LABEL_67;
              }
              int v51 = *(void *)(v16 + 16);
              __s1a = *(char **)(v16 + 24);
              swift_retain();
              swift_retain();
              uint64_t v52 = __DataStorage._bytes.getter();
              if (v52)
              {
                uint64_t v53 = v52;
                uint64_t v54 = __DataStorage._offset.getter();
                if (__OFSUB__(v51, v54)) {
                  goto LABEL_162;
                }
                int v55 = v51;
                uint64_t v56 = (char *)(v53 + v51 - v54);
              }
              else
              {
                int v55 = v51;
                uint64_t v56 = 0;
              }
              size_t v59 = &__s1a[-v55];
              if (__OFSUB__(__s1a, v55)) {
                goto LABEL_156;
              }
              uint64_t v60 = __DataStorage._length.getter();
              if (!v56) {
                goto LABEL_175;
              }
              goto LABEL_96;
          }
          continue;
        }
LABEL_140:
        outlined consume of Data._Representation(v16, v17);
        outlined consume of Data._Representation(v12, v14);
LABEL_138:
        outlined consume of Data._Representation(v102, v101);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v99, v100);
        swift_bridgeObjectRelease();
        return 0;
      case 2uLL:
        uint64_t v27 = *(void *)(v16 + 16);
        uint64_t v26 = *(void *)(v16 + 24);
        uint64_t v23 = __OFSUB__(v26, v27);
        unint64_t v25 = v26 - v27;
        if (!v23) {
          goto LABEL_25;
        }
        goto LABEL_148;
      case 3uLL:
        if (!v20) {
          goto LABEL_36;
        }
        goto LABEL_140;
      default:
        unint64_t v25 = BYTE6(v17);
        goto LABEL_25;
    }
  }
}

Swift::Int Extension.SupportedGroups.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::UInt v3 = (Swift::UInt16 *)(a1 + 32);
    do
    {
      Swift::UInt16 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.SupportedGroups()
{
  return Extension.SupportedGroups.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.SupportedGroups()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::UInt v3 = (Swift::UInt16 *)(v1 + 32);
    do
    {
      Swift::UInt16 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.SupportedGroups()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::UInt v3 = (Swift::UInt16 *)(v1 + 32);
    do
    {
      Swift::UInt16 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Extension.SupportedGroups(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ProtocolVersion>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      int64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      int64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SignatureScheme>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CertificateType>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKeyKexModes.Mode>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CipherSuite>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (char *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      int64_t v13 = v12 - 32;
      if (v12 < 32) {
        int64_t v13 = v12 - 31;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (char *)MEMORY[0x1E4FBC860];
      unint64_t v14 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 32]) {
          memmove(v14, a4 + 32, 2 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (char *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * v12 - 64;
      int64_t v13 = v11 + 32;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32]) {
          memmove(v13, a4 + 32, v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = (char *)MEMORY[0x1E4FBC860];
      int64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.SupportedGroups and conformance Extension.SupportedGroups()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.SupportedGroups and conformance Extension.SupportedGroups;
  if (!lazy protocol witness table cache variable for type Extension.SupportedGroups and conformance Extension.SupportedGroups)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.SupportedGroups and conformance Extension.SupportedGroups);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.SupportedGroups()
{
  return &type metadata for Extension.SupportedGroups;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v4 < 0 || (unint64_t v5 = a4 + 32 * a1 + 32, v6 = a3 + 32 * v4, v5 < v6) && v5 + 32 * v4 > a3)
  {
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B56DE850);
  }
  swift_arrayInitWithCopy();
  return v6;
}

uint64_t outlined retain of Extension(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

void *specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(uint64_t a1, unint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<Data>.Iterator);
  unint64_t result = (void *)MEMORY[0x1F4188790](v8);
  int64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  if (a3)
  {
    unint64_t result = (void *)MEMORY[0x1F4188790](result);
    *(void *)&v20[-32] = &v27;
    *(void *)&v20[-24] = a3;
    *(void *)&v20[-16] = a4;
    *(void *)&v20[-8] = a3;
    switch(a2 >> 62)
    {
      case 1uLL:
        if (a1 >> 32 < (int)a1) {
          goto LABEL_17;
        }
        outlined copy of Data._Representation(a1, a2);
        char v12 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFytSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_yt_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_nTf4nng_n((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:));
        unint64_t result = (void *)outlined consume of Data._Representation(a1, a2);
        if (v12)
        {
LABEL_8:
          uint64_t v16 = v27;
          unint64_t v17 = v28;
          switch(v28 >> 62)
          {
            case 1uLL:
            case 2uLL:
              outlined copy of Data._Representation(v27, v28);
              outlined copy of Data._Representation(v16, v17);
              break;
            default:
              break;
          }
          Data.Iterator.init(_:at:)();
          outlined consume of Data._Representation(v16, v17);
          type metadata accessor for Data.Iterator();
          lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator();
          dispatch thunk of IteratorProtocol.next()();
          uint64_t v18 = 0;
          if ((__src & 0x100) == 0)
          {
            uint64_t v19 = 0;
            do
            {
              uint64_t v18 = v19 + 1;
              if (__OFADD__(v19, 1))
              {
                __break(1u);
LABEL_17:
                __break(1u);
              }
              a3[v19] = __src;
              dispatch thunk of IteratorProtocol.next()();
              ++v19;
            }
            while (BYTE1(__src) != 1);
          }
          *(void *)&v11[*(int *)(v8 + 36)] = v18;
          unint64_t result = (void *)outlined destroy of EnumeratedSequence<Data>.Iterator((uint64_t)v11);
        }
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(a1 + 16);
        uint64_t v14 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        char v15 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFytSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_yt_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_nTf4nng_n(v13, v14, a2 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:));
        swift_release();
        unint64_t result = (void *)swift_release();
        if (v15) {
          goto LABEL_8;
        }
        return result;
      case 3uLL:
        return result;
      default:
        uint64_t __src = a1;
        __int16 v22 = a2;
        char v23 = BYTE2(a2);
        char v24 = BYTE3(a2);
        char v25 = BYTE4(a2);
        char v26 = BYTE5(a2);
        return memcpy(a3, &__src, BYTE6(a2));
    }
  }
  return result;
}

uint64_t Random.init()()
{
  uint64_t v2 = 0;
  MEMORY[0x1BA99F290](&v2, 8);
  uint64_t v0 = v2;
  uint64_t v2 = 0;
  MEMORY[0x1BA99F290](&v2, 8);
  uint64_t v2 = 0;
  MEMORY[0x1BA99F290](&v2, 8);
  uint64_t v2 = 0;
  MEMORY[0x1BA99F290](&v2, 8);
  return v0;
}

uint64_t Random.init<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, a1, a2);
  uint64_t v7 = dispatch thunk of Collection.count.getter();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  v8(v6, a2);
  if (v7 != 32) {
    __break(1u);
  }
  memset(v10, 0, sizeof(v10));
  UnsafeMutableRawBufferPointer.copyBytes<A>(from:)();
  v8(a1, a2);
  return *(void *)&v10[0];
}

void one-time initialization function for helloRetryRequest()
{
  if (qword_1F0E614A8 == 32)
  {
    static Random.helloRetryRequest = xmmword_1F0E614B8;
    *(_OWORD *)&qword_1EB79AD30 = unk_1F0E614C8;
  }
  else
  {
    __break(1u);
  }
}

void *Random.helloRetryRequest.unsafeMutableAddressor()
{
  if (one-time initialization token for helloRetryRequest != -1) {
    swift_once();
  }
  return &static Random.helloRetryRequest;
}

uint64_t static Random.helloRetryRequest.getter()
{
  if (one-time initialization token for helloRetryRequest != -1) {
    swift_once();
  }
  return static Random.helloRetryRequest;
}

BOOL static Random.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

void Random.hash(into:)(int a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4, Swift::UInt64 a5)
{
}

Swift::Int Random.hashValue.getter(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Random()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Random()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Random()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Random(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t ByteBuffer.writeRandom(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[5] = *MEMORY[0x1E4F143B8];
  v5[0] = a1;
  v5[1] = a2;
  long long v5[2] = a3;
  v5[3] = a4;
  v6[3] = MEMORY[0x1E4FBB2B8];
  v6[4] = MEMORY[0x1E4F27EF0];
  v6[0] = v5;
  v6[1] = v6;
  __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return 32;
}

uint64_t ByteBuffer.readRandom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = v1[2];
  uint64_t v3 = result + 32;
  if (__OFADD__(result, 32))
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    JUMPOUT(0x1B56DF3C0);
  }
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v4 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v7 = *(void *)(v4 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v3 > 0) {
        goto LABEL_10;
      }
      goto LABEL_7;
    default:
      uint64_t v7 = BYTE6(v5);
LABEL_6:
      if (v7 < v3)
      {
LABEL_10:
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        char v16 = 1;
        goto LABEL_15;
      }
LABEL_7:
      if (v3 < result) {
        goto LABEL_17;
      }
      uint64_t v8 = Data._Representation.subscript.getter();
      v1[2] = v3;
      uint64_t v9 = v8;
      unint64_t v11 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v8 = (int)v8;
          uint64_t v17 = v9 >> 32;
          goto LABEL_13;
        case 2uLL:
          uint64_t v8 = *(void *)(v8 + 16);
          uint64_t v17 = *(void *)(v9 + 24);
LABEL_13:
          if (v17 >= v8) {
            goto LABEL_14;
          }
          goto LABEL_18;
        default:
LABEL_14:
          uint64_t v18 = Data._Representation.subscript.getter();
          unint64_t v20 = v19;
          uint64_t v12 = specialized Random.init<A>(_:)(v18, v19);
          uint64_t v13 = v21;
          uint64_t v14 = v22;
          uint64_t v15 = v23;
          outlined consume of Data._Representation(v18, v20);
          uint64_t result = outlined consume of Data._Representation(v9, v11);
          char v16 = 0;
          break;
      }
LABEL_15:
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = v14;
      *(void *)(a1 + 24) = v15;
      *(unsigned char *)(a1 + 32) = v16;
      return result;
  }
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFytSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_yt_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_nTf4nng_n(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = __DataStorage._length.getter();
  if (v8)
  {
    if (v11 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = v8;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  a4(&v14, v13, v12);
  return 0;
}

uint64_t specialized Random.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v2) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_9:
        __break(1u);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (v2 != 32)
      {
LABEL_10:
        __break(1u);
        JUMPOUT(0x1B56DF55CLL);
      }
      memset(v7, 0, sizeof(v7));
      specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(a1, a2, v7, (uint64_t)v8);
      return *(void *)&v7[0];
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v3 = *(void *)(a1 + 24);
      BOOL v5 = __OFSUB__(v3, v4);
      uint64_t v2 = v3 - v4;
      if (!v5) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v2 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t lazy protocol witness table accessor for type Random and conformance Random()
{
  unint64_t result = lazy protocol witness table cache variable for type Random and conformance Random;
  if (!lazy protocol witness table cache variable for type Random and conformance Random)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Random and conformance Random);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Random(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Random(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Random()
{
  return &type metadata for Random;
}

void *partial apply for specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
    {
      uint64_t __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v4 = __src;
      BOOL v5 = *(void **)(v2 + 40);
      return memmove(v5, v4, __len);
    }
  }
  return __src;
}

unint64_t lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator;
  if (!lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator)
  {
    type metadata accessor for Data.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator);
  }
  return result;
}

uint64_t outlined destroy of EnumeratedSequence<Data>.Iterator(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<Data>.Iterator);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL static Extension.ServerName.__derived_enum_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a2 >> 60 == 15) {
    return a5 >> 60 == 15;
  }
  if (a5 >> 60 == 15) {
    return 0;
  }
  outlined copy of ByteBuffer?(a1, a2);
  outlined copy of ByteBuffer?(a4, a5);
  char v13 = specialized static ByteBuffer.== infix(_:_:)(a1, a2, a3, a4, a5, a6);
  outlined consume of ByteBuffer?(a4, a5);
  outlined consume of ByteBuffer?(a1, a2);
  return v13 & 1;
}

unint64_t ByteBuffer.writeServerName(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a2 >> 60 == 15) {
    return 0;
  }
  uint64_t v5 = *v3;
  unint64_t v6 = v3[1];
  uint64_t v10 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v10 = v5 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(v5 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = BYTE6(v6);
      break;
  }
  __int16 v18 = 0;
  uint64_t v11 = MEMORY[0x1E4FBB2B8];
  uint64_t v12 = MEMORY[0x1E4F27EF0];
  uint64_t v21 = MEMORY[0x1E4FBB2B8];
  uint64_t v22 = MEMORY[0x1E4F27EF0];
  unint64_t v19 = &v18;
  unint64_t v20 = &v19;
  __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E4FBB2B8]);
  outlined copy of Data._Representation(a1, a2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  LOBYTE(v18) = 0;
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  unint64_t v19 = &v18;
  unint64_t v20 = (__int16 **)((char *)&v18 + 1);
  __swift_project_boxed_opaque_existential_1(&v19, v11);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  uint64_t v13 = *v3;
  unint64_t v14 = v3[1];
  uint64_t v15 = 0;
  switch(v14 >> 62)
  {
    case 1uLL:
      uint64_t v15 = v13 >> 32;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(v13 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v15 = BYTE6(v14);
      break;
  }
  __int16 v18 = 0;
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  unint64_t v19 = &v18;
  unint64_t v20 = &v19;
  __swift_project_boxed_opaque_existential_1(&v19, v11);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  unint64_t v16 = ByteBuffer.writeImmutableBuffer(_:)(a1, a2, a3);
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v17 = v16;
  if (v16 >> 16)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v16, v15);
  if (v17 > 0xFFFC) {
    goto LABEL_18;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v17 + 3, v10);
  outlined consume of ByteBuffer?(a1, a2);
  return v17 + 5;
}

uint64_t ByteBuffer.readServerName(messageType:)(unsigned __int8 a1)
{
  if (a1 == 8)
  {
    uint64_t v11 = *v1;
    unint64_t v12 = v1[1];
    uint64_t v13 = v1[2];
    uint64_t v14 = 0;
    switch(v12 >> 62)
    {
      case 1uLL:
        uint64_t v14 = v11 >> 32;
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(v11 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v14 = BYTE6(v12);
        break;
    }
    if (!__OFSUB__(v14, v13))
    {
      if (v14 == v13) {
        return 0;
      }
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v10 = 5;
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_28;
  }
  if (a1 != 1)
  {
    int v15 = a1;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = v15;
    *(unsigned char *)(v16 + 4) = 0;
    return swift_willThrow();
  }
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  outlined copy of Data._Representation(*v1, v3);
  uint64_t v6 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v6 & 0x10000) != 0 || (uint64_t v7 = ByteBuffer.readSlice(length:)((unsigned __int16)v6), v8 >> 60 == 15))
  {
    outlined consume of Data._Representation(*v1, v1[1]);
    uint64_t *v1 = v4;
    v1[1] = v3;
    v1[2] = v5;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 0;
LABEL_18:
    *(unsigned char *)(v10 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v21 = v7;
  unint64_t v22 = v8;
  uint64_t v23 = v9;
  closure #1 in ByteBuffer.readServerName(messageType:)((uint64_t)&v21, v20);
  if (v2)
  {
LABEL_26:
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(*v1, v1[1]);
    uint64_t *v1 = v4;
    v1[1] = v3;
    v1[2] = v5;
    return swift_willThrow();
  }
  uint64_t v17 = 0;
  switch(v22 >> 62)
  {
    case 1uLL:
      uint64_t v17 = v21 >> 32;
      break;
    case 2uLL:
      uint64_t v17 = *(void *)(v21 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v17 = BYTE6(v22);
      break;
  }
  if (__OFSUB__(v17, v23))
  {
LABEL_28:
    __break(1u);
    JUMPOUT(0x1B56DFD00);
  }
  if (v17 != v23)
  {
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v19 = 1;
    *(unsigned char *)(v19 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(v20[0], v20[1]);
    goto LABEL_26;
  }
  outlined consume of Data._Representation(v21, v22);
  outlined consume of Data._Representation(v4, v3);
  return v20[0];
}

uint64_t Extension.ServerName.Names.hostName.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t Extension.ServerName.Names.hostName.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = outlined consume of Data._Representation(*v3, v3[1]);
  *unint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

void Extension.ServerName.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 >> 60 == 15)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v7 = 0;
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v7 = a2 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v7 = *(void *)(a2 + 24);
LABEL_7:
        outlined copy of Data._Representation(a2, a3);
        outlined copy of Data._Representation(a2, a3);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v7 = BYTE6(a3);
        break;
    }
    if (v7 < a4)
    {
      __break(1u);
      JUMPOUT(0x1B56DFED0);
    }
    uint64_t v8 = Data._Representation.subscript.getter();
    unint64_t v10 = v9;
    Data.hash(into:)();
    outlined consume of Data._Representation(v8, v10);
    outlined consume of ByteBuffer?(a2, a3);
    outlined consume of ByteBuffer?(a2, a3);
  }
}

Swift::Int Extension.ServerName.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  if (a2 >> 60 == 15)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v6 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        uint64_t v6 = a1 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v6 = *(void *)(a1 + 24);
LABEL_7:
        outlined copy of Data._Representation(a1, a2);
        outlined copy of Data._Representation(a1, a2);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v6 = BYTE6(a2);
        break;
    }
    if (v6 < a3)
    {
      __break(1u);
      JUMPOUT(0x1B56E0014);
    }
    uint64_t v7 = Data._Representation.subscript.getter();
    unint64_t v9 = v8;
    Data.hash(into:)();
    outlined consume of Data._Representation(v7, v9);
    outlined consume of ByteBuffer?(a1, a2);
    outlined consume of ByteBuffer?(a1, a2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.ServerName()
{
  return Extension.ServerName.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance Extension.ServerName(uint64_t a1)
{
  Extension.ServerName.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.ServerName()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v4 = 0;
    switch(v2 >> 62)
    {
      case 1uLL:
        uint64_t v4 = v1 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v4 = *(void *)(v1 + 24);
LABEL_7:
        outlined copy of Data._Representation(v1, v2);
        outlined copy of Data._Representation(v1, v2);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v4 = BYTE6(v2);
        break;
    }
    if (v4 < v3)
    {
      __break(1u);
      JUMPOUT(0x1B56E0164);
    }
    uint64_t v5 = Data._Representation.subscript.getter();
    unint64_t v7 = v6;
    Data.hash(into:)();
    outlined consume of Data._Representation(v5, v7);
    outlined consume of ByteBuffer?(v1, v2);
    outlined consume of ByteBuffer?(v1, v2);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Extension.ServerName(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  BOOL v4 = v3 >> 60 == 15 && v2 >> 60 == 15;
  if (v2 >> 60 == 15 || v3 >> 60 == 15) {
    return v4;
  }
  uint64_t v6 = a2[2];
  uint64_t v7 = *a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  outlined copy of ByteBuffer?(*a1, v2);
  outlined copy of ByteBuffer?(v7, v3);
  char v10 = specialized static ByteBuffer.== infix(_:_:)(v9, v2, v8, v7, v3, v6);
  outlined consume of ByteBuffer?(v7, v3);
  outlined consume of ByteBuffer?(v9, v2);
  return v10 & 1;
}

uint64_t Extension.ServerName.Names.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = BYTE6(a3);
      break;
  }
  if (v7 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B56E0330);
  }
  uint64_t v8 = Data._Representation.subscript.getter();
  unint64_t v10 = v9;
  Data.hash(into:)();
  outlined consume of Data._Representation(v8, v10);

  return outlined consume of Data._Representation(a2, a3);
}

Swift::Int Extension.ServerName.Names.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
LABEL_5:
      outlined copy of Data._Representation(a1, a2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  if (v6 < a3)
  {
    __break(1u);
    JUMPOUT(0x1B56E0424);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v9);
  outlined consume of Data._Representation(a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.ServerName.Names()
{
  return Extension.ServerName.Names.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Extension.ServerName.Names()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(*v0, v0[1]);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B56E051CLL);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);

  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.ServerName.Names()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B56E0610);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.ServerName.Names(uint64_t a1, uint64_t a2)
{
  return specialized static ByteBuffer.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t closure #1 in ByteBuffer.readServerName(messageType:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2 = (uint64_t *)result;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = 0xF000000000000000;
  while (2)
  {
    unint64_t v43 = v5;
    uint64_t v42 = v3;
    uint64_t v7 = *v2;
    unint64_t v6 = v2[1];
    uint64_t v8 = v2[2];
    unint64_t v9 = v6 >> 62;
    uint64_t v10 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        uint64_t v10 = v7 >> 32;
        break;
      case 2uLL:
        uint64_t v10 = *(void *)(v7 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v10 = BYTE6(v6);
        break;
    }
    BOOL v11 = __OFSUB__(v10, v8);
    uint64_t v12 = v10 - v8;
    if (v11)
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
    }
    if (v12 < 1)
    {
      if (v5 >> 60 == 15)
      {
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v37 = 5;
        *(unsigned char *)(v37 + 4) = 1;
        return swift_willThrow();
      }
      else
      {
        *a2 = v3;
        a2[1] = v5;
        a2[2] = v4;
      }
    }
    else
    {
      uint64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_74;
      }
      uint64_t v14 = v9;
      switch((int)v9)
      {
        case 1:
          if (v7 >> 32 < v13) {
            goto LABEL_71;
          }
          goto LABEL_17;
        case 2:
          if (*(void *)(v7 + 24) < v13) {
            goto LABEL_71;
          }
          goto LABEL_17;
        case 3:
          if (v13 <= 0) {
            goto LABEL_17;
          }
          goto LABEL_71;
        default:
          if (BYTE6(v6) < v13) {
            goto LABEL_71;
          }
LABEL_17:
          if (v13 < v8) {
            goto LABEL_75;
          }
          unint64_t v44 = v2[1];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
          lazy protocol witness table accessor for type Data and conformance Data();
          lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
          DataProtocol.copyBytes<A>(to:from:)();
          v2[2] = v13;
          uint64_t v15 = v13 + 2;
          if (__OFADD__(v13, 2)) {
            goto LABEL_76;
          }
          break;
      }
      unint64_t v17 = v44;
      switch(v14)
      {
        case 1:
          uint64_t v18 = v7 >> 32;
          goto LABEL_26;
        case 2:
          uint64_t v18 = *(void *)(v7 + 24);
          swift_retain();
          unint64_t v17 = v44;
LABEL_26:
          swift_retain();
          goto LABEL_27;
        case 3:
          if (v15 < 1) {
            goto LABEL_30;
          }
          goto LABEL_69;
        default:
          uint64_t v18 = BYTE6(v44);
LABEL_27:
          if (v18 < v15)
          {
            outlined consume of Data._Representation(v7, v17);
            unint64_t v17 = v44;
LABEL_69:
            uint64_t v22 = v7;
            goto LABEL_70;
          }
LABEL_30:
          if (v15 < v13) {
            goto LABEL_77;
          }
          DataProtocol.copyBytes<A>(to:from:)();
          uint64_t v19 = bswap32(0) >> 16;
          v2[2] = v15;
          uint64_t v20 = v15 + v19;
          if (__OFADD__(v15, v19)) {
            goto LABEL_78;
          }
          break;
      }
      uint64_t v21 = v14;
      uint64_t v22 = v7;
      unint64_t v17 = v44;
      switch(v21)
      {
        case 1:
          uint64_t v23 = v7 >> 32;
          goto LABEL_36;
        case 2:
          uint64_t v23 = *(void *)(v7 + 24);
          goto LABEL_36;
        case 3:
          if (v20 <= 0) {
            goto LABEL_39;
          }
          goto LABEL_70;
        default:
          uint64_t v23 = BYTE6(v44);
LABEL_36:
          if (v23 >= v20)
          {
LABEL_39:
            if (v20 < v15) {
              goto LABEL_79;
            }
            uint64_t v41 = Data._Representation.subscript.getter();
            v2[2] = v20;
            unint64_t v25 = v24 >> 62;
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            switch(v24 >> 62)
            {
              case 1uLL:
                uint64_t v27 = (int)v41;
                uint64_t v26 = v41 >> 32;
                break;
              case 2uLL:
                uint64_t v27 = *(void *)(v41 + 16);
                uint64_t v26 = *(void *)(v41 + 24);
                break;
              case 3uLL:
                break;
              default:
                uint64_t v27 = 0;
                uint64_t v26 = BYTE6(v24);
                break;
            }
            BOOL v11 = __OFSUB__(v26, v27);
            uint64_t v28 = v26 - v27;
            if (v11) {
              goto LABEL_80;
            }
            uint64_t v29 = v27 + v28;
            if (__OFADD__(v27, v28)) {
              goto LABEL_81;
            }
            uint64_t v30 = v25;
            switch((int)v25)
            {
              case 1:
                uint64_t v31 = v41 >> 32;
                goto LABEL_50;
              case 2:
                uint64_t v31 = *(void *)(v41 + 24);
                goto LABEL_50;
              case 3:
                if (v29 <= 0) {
                  goto LABEL_53;
                }
                goto LABEL_85;
              default:
                uint64_t v31 = BYTE6(v24);
LABEL_50:
                if (v31 < v29) {
                  goto LABEL_84;
                }
LABEL_53:
                if (v29 < v27) {
                  goto LABEL_82;
                }
                unint64_t v32 = v24;
                uint64_t v33 = Data._Representation.subscript.getter();
                uint64_t v3 = v33;
                unint64_t v5 = v34;
                uint64_t v4 = 0;
                switch(v34 >> 62)
                {
                  case 1uLL:
                    uint64_t v4 = (int)v33;
                    break;
                  case 2uLL:
                    uint64_t v4 = *(void *)(v33 + 16);
                    break;
                  default:
                    break;
                }
                uint64_t v35 = 0;
                switch(v30)
                {
                  case 1:
                    uint64_t v35 = v41 >> 32;
                    break;
                  case 2:
                    uint64_t v35 = *(void *)(v41 + 24);
                    break;
                  case 3:
                    break;
                  default:
                    uint64_t v35 = BYTE6(v32);
                    break;
                }
                if (__OFSUB__(v35, v29)) {
                  goto LABEL_83;
                }
                if (v35 != v29)
                {
                  lazy protocol witness table accessor for type TLSError and conformance TLSError();
                  swift_allocError();
                  *(_DWORD *)uint64_t v38 = 1;
                  *(unsigned char *)(v38 + 4) = 1;
                  swift_willThrow();
                  outlined consume of Data._Representation(v3, v5);
                  outlined consume of Data._Representation(v41, v32);
                  outlined consume of Data._Representation(*v2, v2[1]);
                  *unint64_t v2 = v7;
                  v2[1] = v44;
                  v2[2] = v13;
                  goto LABEL_72;
                }
                outlined consume of Data._Representation(v41, v32);
                uint64_t result = outlined consume of Data._Representation(v7, v44);
                if (v43 >> 60 == 15) {
                  continue;
                }
                lazy protocol witness table accessor for type TLSError and conformance TLSError();
                swift_allocError();
                *(_DWORD *)uint64_t v36 = 5;
                *(unsigned char *)(v36 + 4) = 1;
                outlined copy of Data._Representation(v3, v5);
                swift_willThrow();
                outlined consume of ByteBuffer?(v42, v43);
                outlined consume of Data._Representation(v3, v5);
                uint64_t result = outlined consume of Data._Representation(v3, v5);
                break;
            }
          }
          else
          {
            outlined consume of Data._Representation(v7, v44);
            unint64_t v17 = v44;
LABEL_70:
            *unint64_t v2 = v22;
            v2[1] = v17;
            v2[2] = v13;
LABEL_71:
            lazy protocol witness table accessor for type TLSError and conformance TLSError();
            swift_allocError();
            *(_DWORD *)uint64_t v39 = 0;
            *(unsigned char *)(v39 + 4) = 1;
LABEL_72:
            swift_willThrow();
            uint64_t result = outlined consume of ByteBuffer?(v42, v43);
          }
          break;
      }
    }
    return result;
  }
}

unint64_t lazy protocol witness table accessor for type Extension.ServerName and conformance Extension.ServerName()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.ServerName and conformance Extension.ServerName;
  if (!lazy protocol witness table cache variable for type Extension.ServerName and conformance Extension.ServerName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.ServerName and conformance Extension.ServerName);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.ServerName.Names and conformance Extension.ServerName.Names()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.ServerName.Names and conformance Extension.ServerName.Names;
  if (!lazy protocol witness table cache variable for type Extension.ServerName.Names and conformance Extension.ServerName.Names)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.ServerName.Names and conformance Extension.ServerName.Names);
  }
  return result;
}

uint64_t *destroy for Extension.ServerName(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0) {
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Extension.ServerName(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  if ((v4 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t *assignWithCopy for Extension.ServerName(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) != 0)
  {
    if (!v6)
    {
      uint64_t v7 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v5;
LABEL_8:
      a1[2] = a2[2];
      return a1;
    }
  }
  else
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      outlined consume of Data._Representation(v10, v11);
      goto LABEL_8;
    }
    outlined consume of Data._Representation(*a1, v4);
  }
  long long v8 = *(_OWORD *)a2;
  a1[2] = a2[2];
  *(_OWORD *)a1 = v8;
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for Extension.ServerName(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v7, v4);
      goto LABEL_5;
    }
    outlined consume of Data._Representation(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_5:
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.ServerName(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 12);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  if (v3 + 1 >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Extension.ServerName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 12;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for Extension.ServerName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * v1) & 0xC) != 0) {
    return 16 - ((4 * v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for Extension.ServerName(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    result[1] = 0;
    result[2] = 0;
    *__n128 result = a2 - 13;
  }
  else if (a2)
  {
    *__n128 result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.ServerName()
{
  return &type metadata for Extension.ServerName;
}

uint64_t destroy for Extension.ServerName.Names(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *initializeBufferWithCopyOfBuffer for Extension.ServerName.Names(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for Extension.ServerName.Names(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for Extension.ServerName.Names(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.ServerName.Names(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Extension.ServerName.Names(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.ServerName.Names()
{
  return &type metadata for Extension.ServerName.Names;
}

uint64_t ExportedAuthenticator.init(authenticator:handshakeStateMachine:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_1B577F270;
  *(void *)(a3 + 16) = 0;
  HandshakeMessageParser.appendBytes(_:)(a1);
  uint64_t v5 = type metadata accessor for ExportedAuthenticator();
  return _s8SwiftTLS21HandshakeStateMachineVWObTm_0(a2, a3 + *(int *)(v5 + 24), (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
}

uint64_t type metadata accessor for ExportedAuthenticator()
{
  uint64_t result = type metadata singleton initialization cache for ExportedAuthenticator;
  if (!type metadata singleton initialization cache for ExportedAuthenticator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ExportedAuthenticator.validate(keyParser:)(uint64_t (*a1)(void), uint64_t a2)
{
  v305 = a1;
  uint64_t v306 = a2;
  uint64_t v3 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v299 = v3;
  uint64_t v300 = v4;
  MEMORY[0x1F4188790](v3);
  v301 = (char *)&v258 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v307 = (uint64_t)&v258 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v303 = v8;
  uint64_t v304 = v9;
  MEMORY[0x1F4188790](v8);
  v302 = (char *)&v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  unint64_t v311 = (unint64_t)&v258 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v312 = type metadata accessor for HandshakeState(0);
  uint64_t v12 = MEMORY[0x1F4188790](v312);
  uint64_t v297 = (uint64_t)&v258 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v298 = (uint64_t)&v258 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v308 = (unint64_t)&v258 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v309 = (unint64_t)&v258 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v258 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  unint64_t v25 = (char *)&v258 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v258 - v26;
  uint64_t v28 = type metadata accessor for SymmetricKey();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v32 = (char *)&v258 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  unint64_t v34 = (char *)&v258 - v33;
  uint64_t v35 = v351;
  HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v322);
  if (v35) {
    return v2;
  }
  unint64_t v292 = (unint64_t)v21;
  uint64_t v293 = (uint64_t)v27;
  v290 = v25;
  uint64_t v351 = 0;
  v291 = v32;
  uint64_t v294 = v28;
  v295 = v34;
  uint64_t v296 = v29;
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v322, (uint64_t)v321, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v322, (uint64_t)v341, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v341) == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1B56C5000, v37, v38, "incomplete message, invalid", v39, 2u);
      MEMORY[0x1BA99F280](v39, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    uint64_t v2 = swift_allocError();
    *(_DWORD *)uint64_t v40 = 9;
    *(unsigned char *)(v40 + 4) = 1;
    swift_willThrow();
    return v2;
  }
  v344[4] = v341[5];
  v344[5] = v341[6];
  v344[6] = v341[7];
  v344[0] = v341[1];
  v344[1] = v341[2];
  v344[2] = v341[3];
  v344[3] = v341[4];
  char v345 = v342;
  long long v343 = v341[0];
  outlined init with take of HandshakeMessage((uint64_t)v344 + 8, (uint64_t)v346);
  outlined init with take of HandshakeMessage((uint64_t)v346, (uint64_t)v348);
  if (v350 != 4)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)logger);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v321, (uint64_t)v319, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v321, (uint64_t)v320, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)v320);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)v319);
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      unint64_t v46 = 0xEB000000006F6C6CLL;
      uint64_t v47 = 0x6548746E65696C63;
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(void *)&long long v317 = v49;
      *(_DWORD *)uint64_t v48 = 136446210;
      outlined init with take of HandshakeMessage((uint64_t)v346, (uint64_t)v347);
      switch(v347[104])
      {
        case 1:
          uint64_t v47 = 0x6548726576726573;
          break;
        case 2:
          uint64_t v47 = 0xD000000000000013;
          uint64_t v69 = "encryptedExtensions";
          goto LABEL_35;
        case 3:
          uint64_t v47 = 0xD000000000000012;
          uint64_t v69 = "certificateRequest";
          goto LABEL_35;
        case 4:
          uint64_t v47 = 0x6369666974726563;
          unint64_t v46 = 0xEB00000000657461;
          break;
        case 5:
          uint64_t v47 = 0xD000000000000011;
          uint64_t v69 = "certificateVerify";
LABEL_35:
          unint64_t v46 = (unint64_t)(v69 - 32) | 0x8000000000000000;
          break;
        case 6:
          unint64_t v46 = 0xE800000000000000;
          uint64_t v47 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v46 = 0x80000001B57829C0;
          uint64_t v47 = 0xD000000000000010;
          break;
        default:
          break;
      }
      uint64_t v314 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
      _os_log_impl(&dword_1B56C5000, v44, v45, "unexpected message %{public}s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA99F280](v49, -1, -1);
      MEMORY[0x1BA99F280](v48, -1, -1);
    }
    else
    {
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    uint64_t v2 = swift_allocError();
    *(_DWORD *)uint64_t v70 = 9;
    *(unsigned char *)(v70 + 4) = 1;
    swift_willThrow();
    goto LABEL_39;
  }
  uint64_t v41 = v349;
  outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
  outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
  swift_bridgeObjectRetain();
  uint64_t v42 = v351;
  HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v323);
  if (v42)
  {
    uint64_t v2 = (uint64_t)outlined consume of HandshakeMessage;
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    return v2;
  }
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v323, (uint64_t)v320, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v323, (uint64_t)v327, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v327) == 1)
  {
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)logger);
    int v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl(&dword_1B56C5000, v51, v52, "incomplete message, invalid", v53, 2u);
      MEMORY[0x1BA99F280](v53, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    uint64_t v2 = swift_allocError();
    *(_DWORD *)uint64_t v54 = 9;
    *(unsigned char *)(v54 + 4) = 1;
    swift_willThrow();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    goto LABEL_39;
  }
  uint64_t v55 = v340;
  if (v340 != 5)
  {
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)logger);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v320, (uint64_t)&v317, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v320, (uint64_t)v319, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)v319);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)&v317);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      unint64_t v64 = 0xEB000000006F6C6CLL;
      uint64_t v65 = 0x6548746E65696C63;
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      uint64_t v314 = v67;
      *(_DWORD *)uint64_t v66 = 136446210;
      uint64_t v68 = v67;
      switch(v55)
      {
        case 1:
          uint64_t v65 = 0x6548726576726573;
          break;
        case 2:
          uint64_t v65 = 0xD000000000000013;
          uint64_t v111 = "encryptedExtensions";
          goto LABEL_59;
        case 3:
          uint64_t v65 = 0xD000000000000012;
          uint64_t v111 = "certificateRequest";
LABEL_59:
          unint64_t v64 = (unint64_t)(v111 - 32) | 0x8000000000000000;
          break;
        case 4:
          uint64_t v65 = 0x6369666974726563;
          unint64_t v64 = 0xEB00000000657461;
          break;
        case 5:
LABEL_183:
          __break(1u);
          JUMPOUT(0x1B56E4BD8);
        case 6:
          unint64_t v64 = 0xE800000000000000;
          uint64_t v65 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v64 = 0x80000001B57829C0;
          uint64_t v65 = 0xD000000000000010;
          break;
        default:
          break;
      }
      uint64_t v316 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v64, &v314);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
      _os_log_impl(&dword_1B56C5000, v62, v63, "unexpected message %{public}s", v66, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA99F280](v68, -1, -1);
      MEMORY[0x1BA99F280](v66, -1, -1);
    }
    else
    {
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    uint64_t v2 = swift_allocError();
    *(_DWORD *)uint64_t v112 = 9;
    *(unsigned char *)(v112 + 4) = 1;
    swift_willThrow();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
    uint64_t v71 = v323;
    goto LABEL_40;
  }
  uint64_t v276 = v327[0];
  uint64_t v277 = v327[2];
  uint64_t v56 = v328;
  unint64_t v57 = v329;
  uint64_t v282 = v330;
  uint64_t v283 = v327[3];
  unint64_t v278 = v327[1];
  uint64_t v279 = v331;
  unint64_t v281 = v332;
  uint64_t v284 = v333;
  uint64_t v58 = v334;
  uint64_t v289 = v336;
  uint64_t v287 = v335;
  uint64_t v288 = v337;
  uint64_t v59 = v338;
  uint64_t v60 = v339;
  outlined copy of Data._Representation(v328, v329);
  outlined copy of Data._Representation(v56, v57);
  HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v324);
  uint64_t v351 = 0;
  uint64_t v280 = v58;
  uint64_t v285 = v60;
  uint64_t v286 = v59;
  uint64_t v73 = v58;
  unint64_t v274 = v57;
  int64_t v275 = v56;
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v324, (uint64_t)v319, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v324, (uint64_t)v325, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  int v74 = _s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v325);
  if (v74 == 1)
  {
    uint64_t v75 = v58;
    uint64_t v76 = v287;
    unint64_t v77 = v274;
    unint64_t v78 = v275;
    uint64_t v79 = v282;
    uint64_t v80 = v279;
    unint64_t v81 = v281;
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v75, v287, v289, v288, v286, v285, 5);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    __swift_project_value_buffer(v82, (uint64_t)logger);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      size_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)size_t v85 = 0;
      _os_log_impl(&dword_1B56C5000, v83, v84, "incomplete message, invalid", v85, 2u);
      int v86 = v85;
      uint64_t v76 = v287;
      MEMORY[0x1BA99F280](v86, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    uint64_t v2 = swift_allocError();
    *(_DWORD *)uint64_t v87 = 9;
    *(unsigned char *)(v87 + 4) = 1;
    swift_willThrow();
    outlined consume of HandshakeMessage(v283, v78, v77, v79, v80, v81, v284, v280, v76, v289, v288, v286, v285, 5);
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
LABEL_79:
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
LABEL_39:
    uint64_t v71 = v322;
LABEL_40:
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v71);
    return v2;
  }
  uint64_t v88 = v326;
  uint64_t v89 = v282;
  unint64_t v90 = v274;
  if (v326 != 6)
  {
    uint64_t v100 = v73;
    uint64_t v101 = v283;
    uint64_t v102 = v279;
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v100, v287, v289, v288, v286, v285, 5);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)logger);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v319, (uint64_t)&v314, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v319, (uint64_t)&v317, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)&v317);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)&v314);
    uint64_t v104 = Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v105))
    {
      unint64_t v106 = 0xEB000000006F6C6CLL;
      uint64_t v107 = 0x6548746E65696C63;
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      uint64_t v316 = v109;
      *(_DWORD *)uint64_t v108 = 136446210;
      uint64_t v110 = v109;
      switch(v88)
      {
        case 1:
          uint64_t v107 = 0x6548726576726573;
          goto LABEL_88;
        case 2:
          uint64_t v107 = 0xD000000000000013;
          v133 = "encryptedExtensions";
          goto LABEL_86;
        case 3:
          uint64_t v107 = 0xD000000000000012;
          v133 = "certificateRequest";
          goto LABEL_86;
        case 4:
          uint64_t v107 = 0x6369666974726563;
          unint64_t v106 = 0xEB00000000657461;
          goto LABEL_88;
        case 5:
          uint64_t v107 = 0xD000000000000011;
          v133 = "certificateVerify";
LABEL_86:
          unint64_t v106 = (unint64_t)(v133 - 32) | 0x8000000000000000;
          goto LABEL_88;
        case 6:
          goto LABEL_183;
        case 7:
          unint64_t v106 = 0x80000001B57829C0;
          uint64_t v107 = 0xD000000000000010;
          goto LABEL_88;
        default:
LABEL_88:
          uint64_t v313 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v106, &v316);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
          outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
          _os_log_impl(&dword_1B56C5000, v104, v105, "unexpected message %{public}s", v108, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA99F280](v110, -1, -1);
          MEMORY[0x1BA99F280](v108, -1, -1);

          uint64_t v101 = v283;
          uint64_t v120 = v284;
          uint64_t v102 = v279;
          unint64_t v90 = v274;
          break;
      }
    }
    else
    {
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);

      uint64_t v120 = v284;
    }
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    uint64_t v2 = swift_allocError();
    *(_DWORD *)uint64_t v134 = 9;
    *(unsigned char *)(v134 + 4) = 1;
    swift_willThrow();
    outlined consume of HandshakeMessage(v101, v275, v90, v89, v102, v281, v120, v280, v287, v289, v288, v286, v285, 5);
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
    uint64_t v71 = v324;
    goto LABEL_40;
  }
  uint64_t v91 = v325[3];
  unint64_t v92 = v325[4];
  int64_t v267 = v325[5];
  uint64_t v261 = v325[6];
  uint64_t v262 = v325[7];
  unint64_t v263 = v325[8];
  uint64_t v264 = v325[9];
  uint64_t v265 = v325[10];
  uint64_t v272 = v325[12];
  uint64_t v273 = v325[11];
  uint64_t v270 = v325[14];
  uint64_t v271 = v325[13];
  uint64_t v269 = v325[15];
  uint64_t v93 = v2 + *(int *)(type metadata accessor for ExportedAuthenticator() + 24);
  uint64_t v259 = v93 + *(int *)(type metadata accessor for HandshakeStateMachine() + 24);
  uint64_t v94 = v292;
  outlined init with copy of HandshakeState(v259, v292);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v266 = v91;
  v260 = v41;
  if (EnumCaseMultiPayload == 6)
  {
    uint64_t v96 = v311;
    _s8SwiftTLS21HandshakeStateMachineVWObTm_0(v94, v311, type metadata accessor for HandshakeState.ReadyState);
    outlined copy of Data._Representation(v91, v92);
    outlined copy of Data._Representation(v91, v92);
    uint64_t v97 = v293;
    specialized SessionKeyManager.generateTLSExporterKey(label:)(0xD00000000000002FLL, 0x80000001B5782A40, v293);
    outlined destroy of HandshakeState(v96, type metadata accessor for HandshakeState.ReadyState);
    uint64_t v98 = v296;
    uint64_t v99 = v294;
  }
  else
  {
    uint64_t v113 = v94;
    uint64_t v98 = v296;
    uint64_t v97 = v293;
    uint64_t v99 = v294;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v296 + 56))(v293, 1, 1, v294);
    outlined copy of Data._Representation(v91, v92);
    outlined copy of Data._Representation(v91, v92);
    outlined destroy of HandshakeState(v113, type metadata accessor for HandshakeState);
  }
  char v114 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  int v115 = v114(v97, 1, v99);
  unint64_t v268 = v92;
  if (v115 == 1)
  {
    unint64_t v116 = v281;
    uint64_t v117 = v279;
    uint64_t v118 = v283;
    uint64_t v119 = v287;
LABEL_74:
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    outlined consume of HandshakeMessage(v118, v275, v90, v282, v117, v116, v284, v280, v119, v289, v288, v286, v285, 5);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined destroy of HandshakeStateMachine?(v97, &demangling cache variable for type metadata for SymmetricKey?);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v124 = type metadata accessor for Logger();
    __swift_project_value_buffer(v124, (uint64_t)logger);
    uint64_t v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v125, v126))
    {
      uint64_t v127 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v127 = 0;
      _os_log_impl(&dword_1B56C5000, v125, v126, "failed to export keys", v127, 2u);
      __int16 v128 = v127;
      uint64_t v119 = v287;
      MEMORY[0x1BA99F280](v128, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    uint64_t v2 = swift_allocError();
    *(_DWORD *)uint64_t v129 = 10;
    *(unsigned char *)(v129 + 4) = 1;
    swift_willThrow();
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    outlined consume of HandshakeMessage(v118, v275, v90, v282, v117, v116, v284, v280, v119, v289, v288, v286, v285, 5);
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
    goto LABEL_79;
  }
  uint64_t v293 = *(void *)(v98 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v293)(v295, v97, v99);
  uint64_t v121 = v309;
  outlined init with copy of HandshakeState(v259, v309);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v122 = v121;
    uint64_t v121 = v311;
    _s8SwiftTLS21HandshakeStateMachineVWObTm_0(v122, v311, type metadata accessor for HandshakeState.ReadyState);
    uint64_t v97 = (uint64_t)v290;
    specialized SessionKeyManager.generateTLSExporterKey(label:)(0xD00000000000002ALL, 0x80000001B5782A70, (uint64_t)v290);
    uint64_t v98 = v296;
    id v123 = type metadata accessor for HandshakeState.ReadyState;
  }
  else
  {
    uint64_t v97 = (uint64_t)v290;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v290, 1, 1, v99);
    id v123 = type metadata accessor for HandshakeState;
  }
  outlined destroy of HandshakeState(v121, v123);
  uint64_t v119 = v287;
  if (v114(v97, 1, v99) == 1)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v295, v99);
    unint64_t v116 = v281;
    uint64_t v117 = v279;
    uint64_t v118 = v283;
    goto LABEL_74;
  }
  unint64_t v309 = v90 >> 62;
  uint64_t v130 = ((uint64_t (*)(char *, uint64_t, uint64_t))v293)(v291, v97, v99);
  long long v317 = xmmword_1B577F280;
  uint64_t v318 = 0;
  MEMORY[0x1F4188790](v130);
  uint64_t v131 = v351;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v132 = 0;
  switch(*((void *)&v343 + 1) >> 62)
  {
    case 1:
      uint64_t v132 = (uint64_t)v343 >> 32;
      break;
    case 2:
      uint64_t v132 = *(void *)(v343 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v132 = BYTE14(v343);
      break;
  }
  if (v132 < *(uint64_t *)&v344[0])
  {
    __break(1u);
    goto LABEL_173;
  }
  uint64_t v135 = Data._Representation.subscript.getter();
  unint64_t v137 = v136;
  specialized Data.append<A>(contentsOf:)(v135, v136);
  outlined consume of Data._Representation(v135, v137);
  long long v138 = v317;
  uint64_t v139 = v318;
  uint64_t v140 = v308;
  outlined init with copy of HandshakeState(v259, v308);
  if (swift_getEnumCaseMultiPayload() != 6)
  {
    outlined destroy of HandshakeState(v140, type metadata accessor for HandshakeState);
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger == -1)
    {
LABEL_97:
      uint64_t v167 = type metadata accessor for Logger();
      __swift_project_value_buffer(v167, (uint64_t)logger);
      v168 = Logger.logObject.getter();
      os_log_type_t v169 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v168, v169))
      {
        v170 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v170 = 0;
        _os_log_impl(&dword_1B56C5000, v168, v169, "failed to create authenticator hash", v170, 2u);
        MEMORY[0x1BA99F280](v170, -1, -1);
      }

      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v171 = 10;
      *(unsigned char *)(v171 + 4) = 1;
      swift_willThrow();
      outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
      outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
      outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
      goto LABEL_100;
    }
LABEL_173:
    swift_once();
    goto LABEL_97;
  }
  uint64_t v141 = v311;
  _s8SwiftTLS21HandshakeStateMachineVWObTm_0(v140, v311, type metadata accessor for HandshakeState.ReadyState);
  outlined copy of Data._Representation(v138, *((unint64_t *)&v138 + 1));
  uint64_t v142 = specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(v138, *((unint64_t *)&v138 + 1), v139);
  unint64_t v144 = v143;
  uint64_t v146 = v145;
  outlined destroy of HandshakeState(v141, type metadata accessor for HandshakeState.ReadyState);
  outlined consume of Data._Representation(v138, *((unint64_t *)&v138 + 1));
  v290 = (char *)v142;
  unint64_t v292 = v144;
  uint64_t v293 = ExportedAuthenticator.generateDataToSignInAuthenticatorCertificateVerify(authenticatorTranscriptHash:)(v142, v144, v146);
  unint64_t v308 = v147;
  uint64_t v149 = v148;
  uint64_t v150 = v307;
  ExportedAuthenticator.extractKey(certificateMessage:keyParser:)(v260, v305, v307);
  uint64_t v351 = v131;
  if (v131)
  {
    uint64_t v312 = (uint64_t)outlined consume of HandshakeMessage;
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    uint64_t v151 = v282;
    uint64_t v152 = v283;
    unint64_t v154 = v274;
    unint64_t v153 = v275;
    uint64_t v156 = v279;
    uint64_t v155 = v280;
    unint64_t v157 = v281;
    uint64_t v158 = v284;
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
    outlined consume of HandshakeMessage(v152, v153, v154, v151, v156, v157, v158, v155, v287, v289, v288, v286, v285, 5);
    uint64_t v159 = v266;
    unint64_t v160 = v267;
    unint64_t v161 = v268;
    uint64_t v163 = v261;
    uint64_t v162 = v262;
    unint64_t v165 = v263;
    uint64_t v164 = v264;
    uint64_t v166 = v265;
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    outlined consume of HandshakeMessage(v159, v161, v160, v163, v162, v165, v164, v166, v273, v272, v271, v270, v269, 6);
    outlined consume of Data._Representation(v293, v308);
    outlined consume of Data._Representation((uint64_t)v290, v292);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
    swift_bridgeObjectRelease();
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))v312);
LABEL_101:
    uint64_t v2 = *(void *)(v296 + 8);
    uint64_t v172 = v294;
    ((void (*)(char *, uint64_t))v2)(v291, v294);
    ((void (*)(char *, uint64_t))v2)(v295, v172);
    outlined consume of Data._Representation(v317, *((unint64_t *)&v317 + 1));
    return v2;
  }
  outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v304 + 48))(v150, 1, v303) == 1)
  {
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
    swift_bridgeObjectRelease();
    outlined destroy of HandshakeStateMachine?(v307, &demangling cache variable for type metadata for P256.Signing.PublicKey?);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v173 = type metadata accessor for Logger();
    __swift_project_value_buffer(v173, (uint64_t)logger);
    v174 = Logger.logObject.getter();
    os_log_type_t v175 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v174, v175))
    {
      v176 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v176 = 0;
      _os_log_impl(&dword_1B56C5000, v174, v175, "failed to extract key from certificate", v176, 2u);
      MEMORY[0x1BA99F280](v176, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v177 = 9;
    *(unsigned char *)(v177 + 4) = 1;
    swift_willThrow();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    outlined consume of Data._Representation(v293, v308);
    outlined consume of Data._Representation((uint64_t)v290, v292);
LABEL_100:
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
    goto LABEL_101;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v304 + 32))(v302, v307, v303);
  uint64_t v178 = 0;
  switch((int)v309)
  {
    case 1:
      uint64_t v178 = v275 >> 32;
      break;
    case 2:
      uint64_t v178 = *(void *)(v275 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v178 = BYTE6(v274);
      break;
  }
  if (v178 < v282)
  {
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  uint64_t v179 = v282;
  unint64_t v181 = v274;
  unint64_t v180 = v275;
  uint64_t v182 = Data._Representation.subscript.getter();
  unint64_t v184 = v183;
  outlined consume of HandshakeMessage(v283, v180, v181, v179, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
  uint64_t v314 = v182;
  unint64_t v315 = v184;
  lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v185 = v351;
  P256.Signing.ECDSASignature.init<A>(derRepresentation:)();
  uint64_t v351 = v185;
  if (v185)
  {
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
    uint64_t v186 = v266;
    unint64_t v187 = v267;
    unint64_t v188 = v268;
    uint64_t v190 = v261;
    uint64_t v189 = v262;
    unint64_t v192 = v263;
    uint64_t v191 = v264;
    uint64_t v193 = v265;
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    outlined consume of HandshakeMessage(v186, v188, v187, v190, v189, v192, v191, v193, v273, v272, v271, v270, v269, 6);
    outlined consume of Data._Representation(v293, v308);
    outlined consume of Data._Representation((uint64_t)v290, v292);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
    swift_bridgeObjectRelease();
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
    (*(void (**)(char *, uint64_t))(v304 + 8))(v302, v303);
    goto LABEL_101;
  }
  uint64_t v194 = 0;
  switch(v308 >> 62)
  {
    case 1uLL:
      uint64_t v194 = v293 >> 32;
      break;
    case 2uLL:
      uint64_t v194 = *(void *)(v293 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v194 = BYTE6(v308);
      break;
  }
  if (v194 < v149) {
    goto LABEL_176;
  }
  uint64_t v195 = Data._Representation.subscript.getter();
  unint64_t v197 = v196;
  uint64_t v314 = v195;
  unint64_t v315 = v196;
  char v198 = P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
  outlined consume of Data._Representation(v195, v197);
  if ((v198 & 1) == 0)
  {
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger == -1)
    {
LABEL_124:
      uint64_t v200 = type metadata accessor for Logger();
      __swift_project_value_buffer(v200, (uint64_t)logger);
      v201 = Logger.logObject.getter();
      os_log_type_t v202 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v201, v202))
      {
        v203 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v203 = 0;
        _os_log_impl(&dword_1B56C5000, v201, v202, "signature validation failed", v203, 2u);
        MEMORY[0x1BA99F280](v203, -1, -1);
      }

      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      int v205 = 9;
LABEL_138:
      *(_DWORD *)uint64_t v204 = v205;
      *(unsigned char *)(v204 + 4) = 1;
      swift_willThrow();
      outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
      outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
      outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
LABEL_139:
      outlined consume of Data._Representation(v293, v308);
      outlined consume of Data._Representation((uint64_t)v290, v292);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
      outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
      (*(void (**)(char *, uint64_t))(v300 + 8))(v301, v299);
      (*(void (**)(char *, uint64_t))(v304 + 8))(v302, v303);
      goto LABEL_101;
    }
LABEL_177:
    swift_once();
    goto LABEL_124;
  }
  uint64_t v199 = 0;
  switch(v278 >> 62)
  {
    case 1uLL:
      uint64_t v199 = v276 >> 32;
      break;
    case 2uLL:
      uint64_t v199 = *(void *)(v276 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v199 = BYTE6(v278);
      break;
  }
  if (v199 < v277)
  {
    __break(1u);
    goto LABEL_179;
  }
  uint64_t v206 = Data._Representation.subscript.getter();
  unint64_t v208 = v207;
  specialized Data.append<A>(contentsOf:)(v206, v207);
  outlined consume of Data._Representation(v206, v208);
  long long v209 = v317;
  uint64_t v210 = v318;
  outlined init with copy of HandshakeState(v259, v298);
  if (swift_getEnumCaseMultiPayload() != 6)
  {
    outlined destroy of HandshakeState(v298, type metadata accessor for HandshakeState);
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger == -1)
    {
LABEL_135:
      uint64_t v221 = type metadata accessor for Logger();
      __swift_project_value_buffer(v221, (uint64_t)logger);
      v222 = Logger.logObject.getter();
      os_log_type_t v223 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v222, v223))
      {
        v224 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v224 = 0;
        _os_log_impl(&dword_1B56C5000, v222, v223, "failed to create finished authenticator hash", v224, 2u);
        MEMORY[0x1BA99F280](v224, -1, -1);
      }

      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      int v205 = 10;
      goto LABEL_138;
    }
LABEL_179:
    swift_once();
    goto LABEL_135;
  }
  uint64_t v211 = v311;
  _s8SwiftTLS21HandshakeStateMachineVWObTm_0(v298, v311, type metadata accessor for HandshakeState.ReadyState);
  outlined copy of Data._Representation(v209, *((unint64_t *)&v209 + 1));
  uint64_t v307 = specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(v209, *((unint64_t *)&v209 + 1), v210);
  unint64_t v309 = v212;
  uint64_t v214 = v213;
  outlined destroy of HandshakeState(v211, type metadata accessor for HandshakeState.ReadyState);
  outlined consume of Data._Representation(v209, *((unint64_t *)&v209 + 1));
  outlined init with copy of HandshakeState(v259, v297);
  if (swift_getEnumCaseMultiPayload() != 6)
  {
    outlined destroy of HandshakeState(v297, type metadata accessor for HandshakeState);
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v225 = type metadata accessor for Logger();
    __swift_project_value_buffer(v225, (uint64_t)logger);
    v226 = Logger.logObject.getter();
    os_log_type_t v227 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v226, v227))
    {
      v228 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v228 = 0;
      _os_log_impl(&dword_1B56C5000, v226, v227, "failed to create finished authenticator HMAC", v228, 2u);
      MEMORY[0x1BA99F280](v228, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v229 = 10;
    *(unsigned char *)(v229 + 4) = 1;
    swift_willThrow();
    outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
    outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
    outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
    goto LABEL_169;
  }
  uint64_t v215 = v311;
  _s8SwiftTLS21HandshakeStateMachineVWObTm_0(v297, v311, type metadata accessor for HandshakeState.ReadyState);
  uint64_t v312 = specialized SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(v307, v309, v214, (uint64_t)v291);
  unint64_t v217 = v216;
  uint64_t v219 = v218;
  outlined destroy of HandshakeState(v215, type metadata accessor for HandshakeState.ReadyState);
  unint64_t v311 = v217;
  uint64_t v220 = 0;
  switch(v217 >> 62)
  {
    case 1uLL:
      uint64_t v220 = v312 >> 32;
      break;
    case 2uLL:
      uint64_t v220 = *(void *)(v312 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v220 = BYTE6(v311);
      break;
  }
  if (v220 < v219)
  {
    __break(1u);
LABEL_181:
    __break(1u);
    goto LABEL_182;
  }
  uint64_t v230 = Data._Representation.subscript.getter();
  unint64_t v232 = v231;
  uint64_t v233 = 0;
  switch(v268 >> 62)
  {
    case 1uLL:
      uint64_t v233 = v266 >> 32;
      break;
    case 2uLL:
      uint64_t v233 = *(void *)(v266 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v233 = BYTE6(v268);
      break;
  }
  if (v233 < v267) {
    goto LABEL_181;
  }
  uint64_t v235 = v266;
  unint64_t v234 = v267;
  unint64_t v236 = v268;
  uint64_t v237 = Data._Representation.subscript.getter();
  unint64_t v239 = v238;
  outlined consume of HandshakeMessage(v235, v236, v234, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
  LOBYTE(v234) = specialized static Data.== infix(_:_:)(v230, v232, v237, v239);
  outlined consume of Data._Representation(v237, v239);
  outlined consume of Data._Representation(v230, v232);
  if ((v234 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger == -1)
    {
LABEL_166:
      uint64_t v251 = type metadata accessor for Logger();
      __swift_project_value_buffer(v251, (uint64_t)logger);
      v252 = Logger.logObject.getter();
      os_log_type_t v253 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v252, v253))
      {
        v254 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v254 = 0;
        _os_log_impl(&dword_1B56C5000, v252, v253, "invalid finished payload", v254, 2u);
        MEMORY[0x1BA99F280](v254, -1, -1);
      }

      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v255 = 9;
      *(unsigned char *)(v255 + 4) = 1;
      swift_willThrow();
      outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
      outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
      outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
      outlined consume of Data._Representation(v312, v311);
LABEL_169:
      outlined consume of Data._Representation(v307, v309);
      goto LABEL_139;
    }
LABEL_182:
    swift_once();
    goto LABEL_166;
  }
  if (v260[2])
  {
    int64_t v240 = v260[2];
    uint64_t v314 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v240, 0);
    uint64_t v2 = v314;
    v241 = v260 + 7;
    while (1)
    {
      uint64_t v242 = *(v241 - 3);
      unint64_t v243 = *(v241 - 2);
      uint64_t v244 = 0;
      switch(v243 >> 62)
      {
        case 1uLL:
          uint64_t v244 = v242 >> 32;
          break;
        case 2uLL:
          uint64_t v244 = *(void *)(v242 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v244 = BYTE6(v243);
          break;
      }
      if (v244 < *(v241 - 1)) {
        goto LABEL_175;
      }
      outlined copy of Data._Representation(*(v241 - 3), *(v241 - 2));
      swift_bridgeObjectRetain();
      uint64_t v245 = Data._Representation.subscript.getter();
      uint64_t v247 = v246;
      outlined consume of Data._Representation(v242, v243);
      swift_bridgeObjectRelease();
      uint64_t v314 = v2;
      unint64_t v249 = *(void *)(v2 + 16);
      unint64_t v248 = *(void *)(v2 + 24);
      if (v249 >= v248 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v248 > 1, v249 + 1, 1);
        uint64_t v2 = v314;
      }
      *(void *)(v2 + 16) = v249 + 1;
      uint64_t v250 = v2 + 16 * v249;
      *(void *)(v250 + 32) = v245;
      *(void *)(v250 + 40) = v247;
      v241 += 4;
      if (!--v240)
      {
        outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
        outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
        outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
        outlined consume of Data._Representation(v312, v311);
        outlined consume of Data._Representation(v307, v309);
        outlined consume of Data._Representation(v293, v308);
        outlined consume of Data._Representation((uint64_t)v290, v292);
        goto LABEL_171;
      }
    }
  }
  outlined retain of HandshakeMessage((uint64_t)v346, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
  outlined consume of HandshakeMessage(v283, v275, v274, v282, v279, v281, v284, v280, v287, v289, v288, v286, v285, 5);
  outlined consume of HandshakeMessage(v266, v268, v267, v261, v262, v263, v264, v265, v273, v272, v271, v270, v269, 6);
  outlined consume of Data._Representation(v312, v311);
  outlined consume of Data._Representation(v307, v309);
  outlined consume of Data._Representation(v293, v308);
  outlined consume of Data._Representation((uint64_t)v290, v292);
  uint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_171:
  outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v324);
  outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v323);
  outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v322);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v300 + 8))(v301, v299);
  (*(void (**)(char *, uint64_t))(v304 + 8))(v302, v303);
  v256 = *(void (**)(char *, uint64_t))(v296 + 8);
  uint64_t v257 = v294;
  v256(v291, v294);
  v256(v295, v257);
  outlined consume of Data._Representation(v317, *((unint64_t *)&v317 + 1));
  return v2;
}

uint64_t closure #1 in ExportedAuthenticator.validate(keyParser:)(uint64_t a1, uint64_t a2)
{
  v3[3] = MEMORY[0x1E4FBB2B8];
  v3[4] = MEMORY[0x1E4F27EF0];
  v3[0] = a1;
  v3[1] = a2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t ExportedAuthenticator.generateDataToSignInAuthenticatorCertificateVerify(authenticatorTranscriptHash:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = xmmword_1B577F280;
  uint64_t v14 = 0;
  specialized Data.append<A>(contentsOf:)(64);
  specialized Data.append<A>(contentsOf:)(0xD000000000000016, 0x80000001B5782AA0);
  if ((0x80000001B5782AA0 & 0x1000000000000000) != 0) {
    String.UTF8View._foreignCount()();
  }
  char v11 = 0;
  uint64_t v12[3] = MEMORY[0x1E4FBB2B8];
  v12[4] = MEMORY[0x1E4F27EF0];
  v12[0] = &v11;
  v12[1] = v12;
  __swift_project_boxed_opaque_existential_1(v12, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  if (v6 < a3) {
    __break(1u);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  specialized Data.append<A>(contentsOf:)(v7, v8);
  outlined consume of Data._Representation(v7, v9);
  return v13;
}

uint64_t ExportedAuthenticator.extractKey(certificateMessage:keyParser:)@<X0>(void *a1@<X3>, uint64_t (*a2)(void)@<X4>, uint64_t a3@<X8>)
{
  if (!a1[2]) {
    goto LABEL_10;
  }
  uint64_t v6 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v6 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v9 = *(void *)(v6 + 24);
LABEL_6:
      outlined copy of Data._Representation(a1[4], a1[5]);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v9 = BYTE6(v5);
      break;
  }
  if (v9 < v7)
  {
    __break(1u);
    JUMPOUT(0x1B56E50A8);
  }
  uint64_t v10 = Data._Representation.subscript.getter();
  unint64_t v12 = v11;
  uint64_t v13 = a2();
  unint64_t v15 = v14;
  outlined consume of Data._Representation(v10, v12);
  if (v15 >> 60 == 15)
  {
    outlined consume of Data._Representation(v6, v5);
LABEL_10:
    uint64_t v16 = type metadata accessor for P256.Signing.PublicKey();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
  outlined copy of Data._Representation(v13, v15);
  P256.Signing.PublicKey.init<A>(x963Representation:)();
  if (v3)
  {
    outlined consume of ByteBuffer?(v13, v15);
    return outlined consume of Data._Representation(v6, v5);
  }
  else
  {
    outlined consume of Data._Representation(v6, v5);
    outlined consume of ByteBuffer?(v13, v15);
    uint64_t v18 = type metadata accessor for P256.Signing.PublicKey();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a3, 0, 1, v18);
  }
}

unint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of ContiguousBytes(v39, (uint64_t)&v41);
    uint64_t v3 = __swift_project_boxed_opaque_existential_1(&v41, v43);
    MEMORY[0x1F4188790](v3);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  }
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  outlined destroy of HandshakeStateMachine?((uint64_t)v39, &demangling cache variable for type metadata for ContiguousBytes?);
  unint64_t result = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
  if ((result & 1) == 0) {
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_62;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
LABEL_8:
  uint64_t v6 = *v2;
  unint64_t v7 = v2[1];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v6), v6)) {
        goto LABEL_69;
      }
      uint64_t v9 = HIDWORD(v6) - (int)v6;
      uint64_t v8 = v6 >> 32;
LABEL_13:
      if (__OFADD__(v8, v5))
      {
        __break(1u);
        goto LABEL_64;
      }
      if (v8 + v5 < v8)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      if (v8 < 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      uint64_t v12 = Data._Representation.resetBytes(in:)();
      MEMORY[0x1F4188790](v12);
      unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.append<A>(contentsOf:));
      uint64_t v17 = v14;
      if (v16 != v5)
      {
        uint64_t v29 = *v2;
        unint64_t v30 = v2[1];
        uint64_t v31 = 0;
        switch(v30 >> 62)
        {
          case 1uLL:
            uint64_t v31 = (int)v29;
            break;
          case 2uLL:
            uint64_t v31 = *(void *)(v29 + 16);
            break;
          default:
            break;
        }
        BOOL v32 = __OFADD__(v31, v9);
        uint64_t v33 = v31 + v9;
        if (!v32)
        {
          if (!__OFADD__(v33, v16))
          {
            uint64_t v34 = 0;
            switch(v30 >> 62)
            {
              case 1uLL:
                uint64_t v34 = v29 >> 32;
                break;
              case 2uLL:
                uint64_t v34 = *(void *)(v29 + 24);
                break;
              case 3uLL:
                break;
              default:
                uint64_t v34 = BYTE6(v30);
                break;
            }
            if (v34 >= v33 + v16)
            {
              Data._Representation.replaceSubrange(_:with:count:)();
              return swift_bridgeObjectRelease();
            }
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
          }
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v18 = v13;
      unint64_t v19 = v15;
      if ((v14 & 0x2000000000000000) != 0) {
        unint64_t v20 = HIBYTE(v14) & 0xF;
      }
      else {
        unint64_t v20 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)v39 + 7) = 0;
      *(void *)&v39[0] = 0;
      if (4 * v20 != v15 >> 14)
      {
        LOBYTE(v21) = 0;
        uint64_t v22 = (v13 >> 59) & 1;
        if ((v14 & 0x1000000000000000) == 0) {
          LOBYTE(v22) = 1;
        }
        uint64_t v23 = 4 << v22;
        uint64_t v35 = (v14 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v36 = v14 & 0xFFFFFFFFFFFFFFLL;
        while (1)
        {
          unint64_t v24 = v19 & 0xC;
          unint64_t v25 = v19;
          if (v24 == v23) {
            unint64_t v25 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v18, v17);
          }
          unint64_t v26 = v25 >> 16;
          if (v25 >> 16 >= v20)
          {
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            uint64_t v5 = String.UTF8View._foreignCount()();
            goto LABEL_8;
          }
          if ((v17 & 0x1000000000000000) != 0)
          {
            char v28 = String.UTF8View._foreignSubscript(position:)();
            if (v24 != v23) {
              goto LABEL_35;
            }
          }
          else if ((v17 & 0x2000000000000000) != 0)
          {
            uint64_t v41 = v18;
            uint64_t v42 = v36;
            char v28 = *((unsigned char *)&v41 + v26);
            if (v24 != v23) {
              goto LABEL_35;
            }
          }
          else
          {
            uint64_t v27 = v35;
            if ((v18 & 0x1000000000000000) == 0) {
              uint64_t v27 = _StringObject.sharedUTF8.getter();
            }
            char v28 = *(unsigned char *)(v27 + v26);
            if (v24 != v23)
            {
LABEL_35:
              if ((v17 & 0x1000000000000000) != 0) {
                goto LABEL_39;
              }
              goto LABEL_36;
            }
          }
          unint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v18, v17);
          if ((v17 & 0x1000000000000000) != 0)
          {
LABEL_39:
            if (v20 <= v19 >> 16) {
              goto LABEL_61;
            }
            unint64_t v19 = String.UTF8View._foreignIndex(after:)();
            goto LABEL_41;
          }
LABEL_36:
          unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_41:
          *((unsigned char *)v39 + v21) = v28;
          unsigned int v21 = v21 + 1;
          if ((v21 >> 8)) {
            goto LABEL_60;
          }
          BYTE14(v39[0]) = v21;
          if (v21 == 14)
          {
            uint64_t v41 = *(void *)&v39[0];
            LODWORD(v42) = DWORD2(v39[0]);
            WORD2(v42) = WORD6(v39[0]);
            Data._Representation.append(contentsOf:)();
            LOBYTE(v21) = 0;
            BYTE14(v39[0]) = 0;
          }
          if (4 * v20 == v19 >> 14)
          {
            if ((_BYTE)v21)
            {
              uint64_t v41 = *(void *)&v39[0];
              LODWORD(v42) = DWORD2(v39[0]);
              WORD2(v42) = WORD6(v39[0]);
              Data._Representation.append(contentsOf:)();
            }
            return swift_bridgeObjectRelease();
          }
        }
      }
      return swift_bridgeObjectRelease();
    case 2uLL:
      uint64_t v11 = v6 + 16;
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v8 = *(void *)(v11 + 8);
      uint64_t v9 = v8 - v10;
      if (!__OFSUB__(v8, v10)) {
        goto LABEL_13;
      }
      goto LABEL_70;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v8 = BYTE6(v7);
      uint64_t v9 = BYTE6(v7);
      goto LABEL_13;
  }
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of ContiguousBytes(v26, (uint64_t)v28);
    uint64_t v2 = __swift_project_boxed_opaque_existential_1(v28, v28[3]);
    MEMORY[0x1F4188790](v2);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  outlined destroy of HandshakeStateMachine?((uint64_t)v26, &demangling cache variable for type metadata for ContiguousBytes?);
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_43;
      }
      uint64_t v7 = HIDWORD(v4) - (int)v4;
      uint64_t v6 = v4 >> 32;
LABEL_8:
      if (__OFADD__(v6, a1)) {
        goto LABEL_37;
      }
      if (v6 + a1 < v6) {
        goto LABEL_38;
      }
      if (v6 < 0) {
        goto LABEL_39;
      }
      uint64_t v10 = Data._Representation.resetBytes(in:)();
      MEMORY[0x1F4188790](v10);
      uint64_t result = (uint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.append<A>(contentsOf:));
      if (v13 == a1)
      {
        uint64_t v14 = result;
        uint64_t v15 = v12;
        memset(v28, 0, 15);
        if (v12 != result)
        {
          if ((v12 & 0x8000000000000000) == 0 && v12 < result)
          {
            char v16 = v11;
            LOBYTE(v17) = 0;
            uint64_t v18 = result - 1;
            do
            {
              *((unsigned char *)v28 + v17) = v16;
              __int16 v17 = v17 + 1;
              if ((v17 & 0x100) != 0) {
                goto LABEL_36;
              }
              if (v17 == 14)
              {
                *(void *)&v26[0] = v28[0];
                DWORD2(v26[0]) = v28[1];
                WORD6(v26[0]) = WORD2(v28[1]);
                uint64_t result = Data._Representation.append(contentsOf:)();
                if (v18 == v15) {
                  return result;
                }
                LOBYTE(v17) = 0;
              }
              else if (v18 == v15)
              {
                *(void *)&v26[0] = v28[0];
                DWORD2(v26[0]) = v28[1];
                WORD6(v26[0]) = WORD2(v28[1]);
                return Data._Representation.append(contentsOf:)();
              }
              ++v15;
            }
            while (v15 < v14);
          }
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v19 = *v1;
        unint64_t v20 = v1[1];
        uint64_t v21 = 0;
        switch(v20 >> 62)
        {
          case 1uLL:
            uint64_t v21 = (int)v19;
            break;
          case 2uLL:
            uint64_t v21 = *(void *)(v19 + 16);
            break;
          default:
            break;
        }
        BOOL v22 = __OFADD__(v21, v7);
        uint64_t v23 = v21 + v7;
        if (v22)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (__OFADD__(v23, v13))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }
        uint64_t v24 = 0;
        switch(v20 >> 62)
        {
          case 1uLL:
            uint64_t v24 = v19 >> 32;
            break;
          case 2uLL:
            uint64_t v24 = *(void *)(v19 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v24 = BYTE6(v20);
            break;
        }
        if (v24 < v23 + v13) {
          goto LABEL_42;
        }
        return Data._Representation.replaceSubrange(_:with:count:)();
      }
      return result;
    case 2uLL:
      uint64_t v9 = v4 + 16;
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v6 = *(void *)(v9 + 8);
      uint64_t v7 = v6 - v8;
      if (!__OFSUB__(v6, v8)) {
        goto LABEL_8;
      }
      goto LABEL_44;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(v5);
      uint64_t v7 = BYTE6(v5);
      goto LABEL_8;
  }
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  void v10[5] = *MEMORY[0x1E4F143B8];
  v10[3] = MEMORY[0x1E4F277C0];
  v10[4] = MEMORY[0x1E4F277B0];
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(v5, v6);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v5, v5 >> 32);
      outlined consume of Data._Representation(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      outlined copy of Data._Representation(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t specialized static HKDF.tlsExporter<A>(secret:label:context:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v24 = a4;
  Swift::Int v21 = a2;
  unint64_t v22 = a3;
  uint64_t v20 = a1;
  uint64_t v5 = type metadata accessor for SHA384();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SHA384Digest();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SymmetricKey();
  uint64_t v13 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s9CryptoKit6SHA384VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  dispatch thunk of HashFunction.init()();
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s9CryptoKit6SHA384VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  unint64_t v16 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v20, v21, v22, (uint64_t)v12, v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  unint64_t v17 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)((uint64_t)v15, 0x726574726F707865, 0xE800000000000000, v24, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v19);
}

uint64_t specialized SessionKeyManager.generateTLSExporterKey(label:)@<X0>(Swift::Int a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Swift::Int v38 = a1;
  unint64_t v39 = a2;
  uint64_t v41 = a3;
  uint64_t v4 = type metadata accessor for SHA384();
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v33 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SHA384Digest();
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  MEMORY[0x1F4188790](v6);
  BOOL v32 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SymmetricKey();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v40 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SessionKeyManager<SHA384>.State(v3, (uint64_t)v16);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v16, (uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v19, &v13[*(int *)(v11 + 56)], v20);
      uint64_t v25 = (uint64_t)v13;
      unint64_t v26 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret;
      goto LABEL_6;
    case 3u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v16, (uint64_t)v10, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v19, &v10[*(int *)(v8 + 40)], v20);
      uint64_t v25 = (uint64_t)v10;
      unint64_t v26 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets;
LABEL_6:
      outlined destroy of HandshakeStateMachine?(v25, v26);
      uint64_t v24 = v41;
      uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
      v23(v19, 0, 1, v20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
        goto LABEL_7;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v40, v19, v20);
      _s9CryptoKit6SHA384VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      char v28 = v33;
      uint64_t v29 = v37;
      dispatch thunk of HashFunction.init()();
      uint64_t v30 = (uint64_t)v32;
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v29);
      uint64_t v31 = v40;
      specialized static HKDF.tlsExporter<A>(secret:label:context:)(v40, v38, v39, v30, v24);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v30, v35);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v31, v20);
      uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v23)(v24, 0, 1, v20);
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v16, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
      v23(v19, 1, 1, v20);
      uint64_t v24 = v41;
LABEL_7:
      outlined destroy of HandshakeStateMachine?((uint64_t)v19, &demangling cache variable for type metadata for SymmetricKey?);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v24, 1, 1, v20);
      break;
  }
  return result;
}

uint64_t specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for SHA384Digest();
  uint64_t v24 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SHA384();
  uint64_t v23 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v26 = xmmword_1B577F280;
  uint64_t v27 = 0;
  _s9CryptoKit6SHA384VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  dispatch thunk of HashFunction.init()();
  uint64_t v12 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v12 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v12 = BYTE6(a2);
      break;
  }
  if (v12 < a3)
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  uint64_t v13 = Data._Representation.subscript.getter();
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  uint64_t v22 = v6;
  switch(v14 >> 62)
  {
    case 1uLL:
      if (v13 >> 32 < (int)v13) {
        goto LABEL_15;
      }
      outlined copy of Data._Representation(v13, v14);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v15, v15 >> 32);
      break;
    case 2uLL:
      uint64_t v18 = *(void *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 24);
      outlined copy of Data._Representation(v13, v14);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v18, v17);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v25, 0, 14);
      goto LABEL_12;
    default:
      v25[0] = v13;
      LOWORD(v25[1]) = v14;
      BYTE2(v25[1]) = BYTE2(v14);
      BYTE3(v25[1]) = BYTE3(v14);
      BYTE4(v25[1]) = BYTE4(v14);
      BYTE5(v25[1]) = BYTE5(v14);
LABEL_12:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(v15, v16);
  outlined consume of Data._Representation(v15, v16);
  uint64_t v19 = dispatch thunk of HashFunction.finalize()();
  MEMORY[0x1F4188790](v19);
  *(&v22 - 2) = (uint64_t)&v26;
  _s9CryptoKit6SHA384VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  uint64_t v20 = v22;
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v20);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
  return v26;
}

uint64_t specialized SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v12 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v12 = BYTE6(a2);
      break;
  }
  if (v12 < a3)
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  uint64_t v13 = Data._Representation.subscript.getter();
  unint64_t v15 = v14;
  MEMORY[0x1F4188790](v13);
  v22[-2] = a4;
  switch(v16 >> 62)
  {
    case 1uLL:
      if (v13 >> 32 < (int)v13) {
        goto LABEL_15;
      }
      v22[0] = 0;
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v13, v13 >> 32, (uint64_t (*)(uint64_t, uint64_t))partial apply for specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:));
      outlined consume of Data._Representation(v13, v15);
      break;
    case 2uLL:
      v22[0] = 0;
      uint64_t v17 = *(void *)(v13 + 16);
      uint64_t v18 = *(void *)(v13 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v17, v18, (uint64_t (*)(uint64_t, uint64_t))partial apply for specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:));
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v23, 0, 14);
      uint64_t v24 = v23;
      uint64_t v25 = (char *)v23;
      goto LABEL_12;
    default:
      v23[0] = v13;
      LOWORD(v23[1]) = v15;
      BYTE2(v23[1]) = BYTE2(v15);
      BYTE3(v23[1]) = BYTE3(v15);
      BYTE4(v23[1]) = BYTE4(v15);
      BYTE5(v23[1]) = BYTE5(v15);
      uint64_t v24 = v23;
      uint64_t v25 = (char *)v23 + BYTE6(v15);
LABEL_12:
      type metadata accessor for SHA384();
      _s9CryptoKit6SHA384VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      static HMAC.authenticationCode<A>(for:using:)();
      break;
  }
  outlined consume of Data._Representation(v13, v15);
  uint64_t v26 = v8;
  unint64_t v27 = lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, v8);
  __swift_project_boxed_opaque_existential_1(&v24, v26);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  uint64_t v20 = v23[0];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v20;
}

uint64_t _s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 128);
  if (v1 > 7) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t outlined init with take of HandshakeMessage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of HandshakeMessageParser.ParseResult(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v12 = *(_OWORD *)(a1 + 104);
  long long v13 = *(_OWORD *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 120);
  char v10 = *(unsigned char *)(a1 + 128);
  outlined copy of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  outlined copy of HandshakeMessage(v14, v2, v3, v4, v5, v6, v7, v8, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t outlined copy of HandshakeMessage(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  switch(a14)
  {
    case 0:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 1:
    case 2:
      goto LABEL_9;
    case 3:
    case 4:
      outlined copy of Data._Representation(result, a2);
      goto LABEL_9;
    case 5:
      uint64_t result = a2;
      a2 = a3;
      goto LABEL_5;
    case 6:
LABEL_5:
      uint64_t result = outlined copy of Data._Representation(result, a2);
      break;
    case 7:
      outlined copy of Data._Representation(a2, a3);
      outlined copy of Data._Representation(a5, a6);
LABEL_9:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined release of HandshakeMessageParser.ParseResult?(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of HandshakeMessageParser.ParseResult?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255)
  {
    outlined consume of Data._Representation(result, a2);
    return outlined consume of HandshakeMessage(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t outlined consume of HandshakeMessage(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  switch(a14)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 1:
    case 2:
      goto LABEL_9;
    case 3:
    case 4:
      outlined consume of Data._Representation(result, a2);
      goto LABEL_9;
    case 5:
      uint64_t result = a2;
      a2 = a3;
      goto LABEL_5;
    case 6:
LABEL_5:
      uint64_t result = outlined consume of Data._Representation(result, a2);
      break;
    case 7:
      outlined consume of Data._Representation(a2, a3);
      outlined consume of Data._Representation(a5, a6);
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined retain of HandshakeMessage(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 104);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), v4);
  return a1;
}

uint64_t outlined init with copy of HandshakeState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HandshakeState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ExportedAuthenticator.validate(keyParser:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ExportedAuthenticator.validate(keyParser:)(a1, a2);
}

uint64_t _s8SwiftTLS21HandshakeStateMachineVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of HandshakeState(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    char v10 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    a3 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  if (a3 < 0) {
    goto LABEL_33;
  }
  if (!a4)
  {
    a3 = 0;
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      uint64_t v5 = 1;
LABEL_30:
      *(void *)uint64_t result = a4;
      *(unsigned char *)(result + 8) = a5;
      *(void *)(result + 16) = v5;
      return a3;
    }
    unint64_t v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1;
      uint64_t v5 = 1;
      goto LABEL_30;
    }
    unint64_t v7 = a4 - 2;
    if (a4 - 2 >= (unint64_t)(a3 - 2)) {
      unint64_t v7 = a3 - 2;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 >= 0x11)
    {
      uint64_t v12 = v8 & 0xF;
      if ((v8 & 0xF) == 0) {
        uint64_t v12 = 16;
      }
      unint64_t v13 = v8 - v12;
      uint64_t v10 = v8 - v12 + 1;
      int64_t v11 = &a2[v13];
      uint64_t v9 = v13 + 2;
      int8x16_t v14 = vdupq_n_s8(a5);
      unint64_t v15 = (int8x16_t *)(a2 + 1);
      do
      {
        *v15++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
    else
    {
      uint64_t v9 = 2;
      uint64_t v10 = 1;
      int64_t v11 = a2;
    }
    uint64_t v16 = 0;
    uint64_t v17 = v10 - a4;
    uint64_t v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        uint64_t v5 = v10 + v16 + 1;
        goto LABEL_30;
      }
      if (v10 - a3 + v16 == -1) {
        goto LABEL_32;
      }
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        uint64_t v5 = a4;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 & 0x1000000000000000;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
      _StringObject.sharedUTF8.getter();
    }
    Data._Representation.append(contentsOf:)();
  }
  return v2 >> 60;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.replaceSubrange(_:with:count:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA384();
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return a3(v7, v13);
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1B56E7CC8);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ExportedAuthenticator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      *uint64_t v4 = v9;
      v4[1] = v7;
    }
    long long v4[2] = a2[2];
    uint64_t v10 = *(int *)(a3 + 24);
    BOOL v11 = (char *)v4 + v10;
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    unint64_t v13 = *(uint64_t *)((char *)a2 + v10 + 8);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)BOOL v11 = *(_OWORD *)v12;
    }
    else
    {
      uint64_t v14 = *v12;
      outlined copy of Data._Representation(*v12, v13);
      *(void *)BOOL v11 = v14;
      *((void *)v11 + 1) = v13;
    }
    *((void *)v11 + 2) = v12[2];
    uint64_t v15 = type metadata accessor for HandshakeStateMachine();
    uint64_t v16 = *(int *)(v15 + 24);
    char v17 = &v11[v16];
    uint64_t v18 = (char *)v12 + v16;
    type metadata accessor for HandshakeState(0);
    v408 = v12;
    v409 = v11;
    v407 = (int *)v15;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v21 = *((void *)v18 + 1);
        *(void *)char v17 = *(void *)v18;
        *((void *)v17 + 1) = v21;
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v22 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        }
        else
        {
          uint64_t v35 = *((void *)v18 + 3);
          outlined copy of Data._Representation(v35, v22);
          *((void *)v17 + 3) = v35;
          *((void *)v17 + 4) = v22;
        }
        *((void *)v17 + 5) = *((void *)v18 + 5);
        unint64_t v36 = *((void *)v18 + 7);
        if (v36 >> 60 == 15)
        {
          *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
        }
        else
        {
          uint64_t v55 = *((void *)v18 + 6);
          outlined copy of Data._Representation(v55, *((void *)v18 + 7));
          *((void *)v17 + 6) = v55;
          *((void *)v17 + 7) = v36;
        }
        *((void *)v17 + 8) = *((void *)v18 + 8);
        *((_DWORD *)v17 + 18) = *((_DWORD *)v18 + 18);
        long long v56 = *((_OWORD *)v18 + 6);
        *((_OWORD *)v17 + 5) = *((_OWORD *)v18 + 5);
        *((_OWORD *)v17 + 6) = v56;
        uint64_t v57 = *((void *)v18 + 15);
        *((void *)v17 + 14) = *((void *)v18 + 14);
        *((void *)v17 + 15) = v57;
        *((void *)v17 + 16) = *((void *)v18 + 16);
        long long v58 = *((_OWORD *)v18 + 10);
        *((_OWORD *)v17 + 10) = v58;
        uint64_t v59 = v58;
        uint64_t v60 = **(void (***)(char *, char *, uint64_t))(v58 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60(v17 + 136, v18 + 136, v59);
        uint64_t v61 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v62 = *(int *)(v61 + 36);
        os_log_type_t v63 = &v17[v62];
        unint64_t v64 = &v18[v62];
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        v404 = v4;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v66 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v63, v64, v66);
            uint64_t v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v68 = v67[9];
            uint64_t v69 = &v63[v68];
            uint64_t v70 = &v64[v68];
            uint64_t v398 = v61;
            uint64_t v71 = type metadata accessor for SymmetricKey();
            uint64_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16);
            v72(v69, v70, v71);
            v72(&v63[v67[10]], &v64[v67[10]], v71);
            v72(&v63[v67[11]], &v64[v67[11]], v71);
            uint64_t v73 = v71;
            uint64_t v61 = v398;
            v72(&v63[v67[12]], &v64[v67[12]], v73);
            goto LABEL_109;
          case 1u:
            uint64_t v233 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 16))(v63, v64, v233);
            unint64_t v234 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v235 = v234[9];
            unint64_t v236 = &v63[v235];
            uint64_t v237 = &v64[v235];
            uint64_t v401 = v61;
            uint64_t v238 = type metadata accessor for SymmetricKey();
            unint64_t v239 = *(void (**)(char *, char *, uint64_t))(*(void *)(v238 - 8) + 16);
            v239(v236, v237, v238);
            v239(&v63[v234[10]], &v64[v234[10]], v238);
            uint64_t v240 = v238;
            uint64_t v61 = v401;
            v239(&v63[v234[11]], &v64[v234[11]], v240);
            goto LABEL_109;
          case 2u:
            uint64_t v241 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 16))(v63, v64, v241);
            uint64_t v242 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v243 = v242[9];
            uint64_t v244 = &v63[v243];
            uint64_t v245 = &v64[v243];
            uint64_t v402 = v61;
            uint64_t v246 = type metadata accessor for SymmetricKey();
            uint64_t v247 = *(void (**)(char *, char *, uint64_t))(*(void *)(v246 - 8) + 16);
            v247(v244, v245, v246);
            v247(&v63[v242[10]], &v64[v242[10]], v246);
            v247(&v63[v242[11]], &v64[v242[11]], v246);
            v247(&v63[v242[12]], &v64[v242[12]], v246);
            v247(&v63[v242[13]], &v64[v242[13]], v246);
            uint64_t v248 = v246;
            uint64_t v61 = v402;
            v247(&v63[v242[14]], &v64[v242[14]], v248);
            goto LABEL_109;
          case 3u:
            uint64_t v249 = type metadata accessor for SymmetricKey();
            uint64_t v250 = *(void (**)(char *, char *, uint64_t))(*(void *)(v249 - 8) + 16);
            v250(v63, v64, v249);
            uint64_t v251 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v250(&v63[v251[9]], &v64[v251[9]], v249);
            v250(&v63[v251[10]], &v64[v251[10]], v249);
            v250(&v63[v251[11]], &v64[v251[11]], v249);
LABEL_109:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
            break;
        }
        uint64_t v252 = *(int *)(v61 + 40);
        os_log_type_t v253 = &v17[v252];
        v254 = &v18[v252];
        uint64_t v255 = (int *)type metadata accessor for SessionTicket();
        uint64_t v256 = *((void *)v255 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v256 + 48))(v254, 1, v255))
        {
          uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v253, v254, *(void *)(*(void *)(v257 - 8) + 64));
        }
        else
        {
          uint64_t v258 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v258 - 8) + 16))(v253, v254, v258);
          *(_DWORD *)&v253[v255[5]] = *(_DWORD *)&v254[v255[5]];
          *(_DWORD *)&v253[v255[6]] = *(_DWORD *)&v254[v255[6]];
          uint64_t v259 = v255[7];
          v260 = (uint64_t *)&v253[v259];
          uint64_t v261 = &v254[v259];
          uint64_t v262 = *(void *)&v254[v259];
          unint64_t v263 = *(void *)&v254[v259 + 8];
          outlined copy of Data._Representation(v262, v263);
          uint64_t *v260 = v262;
          v260[1] = v263;
          v260[2] = *((void *)v261 + 2);
          uint64_t v264 = v255[8];
          uint64_t v265 = (uint64_t *)&v253[v264];
          uint64_t v266 = &v254[v264];
          uint64_t v267 = *(void *)&v254[v264];
          unint64_t v268 = *(void *)&v254[v264 + 8];
          outlined copy of Data._Representation(v267, v268);
          *uint64_t v265 = v267;
          v265[1] = v268;
          v265[2] = *((void *)v266 + 2);
          uint64_t v269 = v255[9];
          uint64_t v270 = &v253[v269];
          uint64_t v271 = &v254[v269];
          uint64_t v272 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v272 - 8) + 16))(v270, v271, v272);
          *(_DWORD *)&v253[v255[10]] = *(_DWORD *)&v254[v255[10]];
          *(_WORD *)&v253[v255[11]] = *(_WORD *)&v254[v255[11]];
          *(_WORD *)&v253[v255[12]] = *(_WORD *)&v254[v255[12]];
          uint64_t v273 = v255[13];
          unint64_t v274 = &v253[v273];
          int64_t v275 = (uint64_t *)&v254[v273];
          unint64_t v276 = *(void *)&v254[v273 + 8];
          if (v276 >> 60 == 15)
          {
            *(_OWORD *)unint64_t v274 = *(_OWORD *)v275;
          }
          else
          {
            uint64_t v347 = *v275;
            outlined copy of Data._Representation(*v275, v276);
            *(void *)unint64_t v274 = v347;
            *((void *)v274 + 1) = v276;
          }
          *((void *)v274 + 2) = v275[2];
          uint64_t v348 = v255[14];
          v349 = &v253[v348];
          char v350 = &v254[v348];
          uint64_t v351 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v352 = *(void *)(v351 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v352 + 48))(v350, 1, v351))
          {
            uint64_t v353 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v349, v350, *(void *)(*(void *)(v353 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v352 + 16))(v349, v350, v351);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v352 + 56))(v349, 0, 1, v351);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v256 + 56))(v253, 0, 1, v255);
        }
        uint64_t v4 = v404;
        goto LABEL_159;
      case 2u:
        uint64_t v23 = *((void *)v18 + 1);
        *(void *)char v17 = *(void *)v18;
        *((void *)v17 + 1) = v23;
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v24 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v24 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        }
        else
        {
          uint64_t v37 = *((void *)v18 + 3);
          outlined copy of Data._Representation(v37, v24);
          *((void *)v17 + 3) = v37;
          *((void *)v17 + 4) = v24;
        }
        *((void *)v17 + 5) = *((void *)v18 + 5);
        unint64_t v38 = *((void *)v18 + 7);
        if (v38 >> 60 == 15)
        {
          *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
        }
        else
        {
          uint64_t v74 = *((void *)v18 + 6);
          outlined copy of Data._Representation(v74, *((void *)v18 + 7));
          *((void *)v17 + 6) = v74;
          *((void *)v17 + 7) = v38;
        }
        *((void *)v17 + 8) = *((void *)v18 + 8);
        *((_DWORD *)v17 + 18) = *((_DWORD *)v18 + 18);
        uint64_t v75 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v76 = v75[5];
        unint64_t v77 = &v17[v76];
        unint64_t v78 = &v18[v76];
        type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        v399 = v75;
        v405 = v4;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v79 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
          uint64_t v80 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v77[v80[5]] = *(_DWORD *)&v78[v80[5]];
          *(_DWORD *)&v77[v80[6]] = *(_DWORD *)&v78[v80[6]];
          uint64_t v81 = v80[7];
          uint64_t v82 = (uint64_t *)&v77[v81];
          uint64_t v83 = &v78[v81];
          uint64_t v84 = *(void *)&v78[v81];
          unint64_t v85 = *(void *)&v78[v81 + 8];
          outlined copy of Data._Representation(v84, v85);
          *uint64_t v82 = v84;
          v82[1] = v85;
          v82[2] = *((void *)v83 + 2);
          uint64_t v86 = v80[8];
          uint64_t v87 = (uint64_t *)&v77[v86];
          uint64_t v88 = &v78[v86];
          uint64_t v89 = *(void *)&v78[v86];
          unint64_t v90 = *(void *)&v78[v86 + 8];
          outlined copy of Data._Representation(v89, v90);
          *uint64_t v87 = v89;
          v87[1] = v90;
          v87[2] = *((void *)v88 + 2);
          uint64_t v91 = v80[9];
          unint64_t v92 = &v77[v91];
          uint64_t v93 = &v78[v91];
          uint64_t v94 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16))(v92, v93, v94);
          *(_DWORD *)&v77[v80[10]] = *(_DWORD *)&v78[v80[10]];
          *(_WORD *)&v77[v80[11]] = *(_WORD *)&v78[v80[11]];
          *(_WORD *)&v77[v80[12]] = *(_WORD *)&v78[v80[12]];
          uint64_t v95 = v80[13];
          uint64_t v96 = &v77[v95];
          uint64_t v97 = (uint64_t *)&v78[v95];
          unint64_t v98 = *(void *)&v78[v95 + 8];
          if (v98 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
          }
          else
          {
            uint64_t v219 = *v97;
            outlined copy of Data._Representation(*v97, v98);
            *(void *)uint64_t v96 = v219;
            *((void *)v96 + 1) = v98;
          }
          *((void *)v96 + 2) = v97[2];
          uint64_t v220 = v80[14];
          uint64_t v221 = &v77[v220];
          v222 = &v78[v220];
          uint64_t v223 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v224 = *(void *)(v223 - 8);
          uint64_t v75 = v399;
          uint64_t v4 = v405;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v224 + 48))(v222, 1, v223))
          {
            uint64_t v225 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v221, v222, *(void *)(*(void *)(v225 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v224 + 16))(v221, v222, v223);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v224 + 56))(v221, 0, 1, v223);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v77 = *(_DWORD *)v78;
          *((void *)v77 + 1) = *((void *)v78 + 1);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v284 = v75[6];
        uint64_t v285 = &v17[v284];
        uint64_t v286 = &v18[v284];
        uint64_t v287 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v288 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v288 - 8) + 16))(v285, v286, v288);
            uint64_t v289 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v290 = v289[9];
            v291 = &v285[v290];
            unint64_t v292 = &v286[v290];
            uint64_t v293 = type metadata accessor for SymmetricKey();
            uint64_t v294 = *(void (**)(char *, char *, uint64_t))(*(void *)(v293 - 8) + 16);
            v294(v291, v292, v293);
            v294(&v285[v289[10]], &v286[v289[10]], v293);
            v294(&v285[v289[11]], &v286[v289[11]], v293);
            uint64_t v295 = v293;
            uint64_t v75 = v399;
            v294(&v285[v289[12]], &v286[v289[12]], v295);
            uint64_t v4 = v405;
            goto LABEL_124;
          case 1u:
            uint64_t v296 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v296 - 8) + 16))(v285, v286, v296);
            uint64_t v297 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v298 = v297[9];
            uint64_t v299 = &v285[v298];
            uint64_t v300 = &v286[v298];
            uint64_t v301 = type metadata accessor for SymmetricKey();
            v302 = *(void (**)(char *, char *, uint64_t))(*(void *)(v301 - 8) + 16);
            v302(v299, v300, v301);
            v302(&v285[v297[10]], &v286[v297[10]], v301);
            uint64_t v303 = v301;
            uint64_t v75 = v399;
            v302(&v285[v297[11]], &v286[v297[11]], v303);
            uint64_t v4 = v405;
            goto LABEL_124;
          case 2u:
            uint64_t v304 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v304 - 8) + 16))(v285, v286, v304);
            v305 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v306 = v305[9];
            uint64_t v307 = &v285[v306];
            unint64_t v308 = &v286[v306];
            uint64_t v309 = type metadata accessor for SymmetricKey();
            v310 = *(void (**)(char *, char *, uint64_t))(*(void *)(v309 - 8) + 16);
            v310(v307, v308, v309);
            v310(&v285[v305[10]], &v286[v305[10]], v309);
            v310(&v285[v305[11]], &v286[v305[11]], v309);
            v310(&v285[v305[12]], &v286[v305[12]], v309);
            v310(&v285[v305[13]], &v286[v305[13]], v309);
            uint64_t v311 = v309;
            uint64_t v75 = v399;
            v310(&v285[v305[14]], &v286[v305[14]], v311);
            uint64_t v4 = v405;
            goto LABEL_124;
          case 3u:
            uint64_t v312 = type metadata accessor for SymmetricKey();
            uint64_t v313 = *(void (**)(char *, char *, uint64_t))(*(void *)(v312 - 8) + 16);
            v313(v285, v286, v312);
            uint64_t v314 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v313(&v285[v314[9]], &v286[v314[9]], v312);
            v313(&v285[v314[10]], &v286[v314[10]], v312);
            v313(&v285[v314[11]], &v286[v314[11]], v312);
LABEL_124:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v285, v286, *(void *)(*(void *)(v287 - 8) + 64));
            break;
        }
        uint64_t v316 = v408;
        unint64_t v315 = v409;
        long long v317 = v407;
        *(_WORD *)&v17[v75[7]] = *(_WORD *)&v18[v75[7]];
        *(_WORD *)&v17[v75[8]] = *(_WORD *)&v18[v75[8]];
        goto LABEL_160;
      case 3u:
        uint64_t v25 = *((void *)v18 + 1);
        *(void *)char v17 = *(void *)v18;
        *((void *)v17 + 1) = v25;
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v26 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v26 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        }
        else
        {
          uint64_t v39 = *((void *)v18 + 3);
          outlined copy of Data._Representation(v39, v26);
          *((void *)v17 + 3) = v39;
          *((void *)v17 + 4) = v26;
        }
        *((void *)v17 + 5) = *((void *)v18 + 5);
        unint64_t v40 = *((void *)v18 + 7);
        if (v40 >> 60 == 15)
        {
          *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
        }
        else
        {
          uint64_t v99 = *((void *)v18 + 6);
          outlined copy of Data._Representation(v99, *((void *)v18 + 7));
          *((void *)v17 + 6) = v99;
          *((void *)v17 + 7) = v40;
        }
        *((void *)v17 + 8) = *((void *)v18 + 8);
        *((_DWORD *)v17 + 18) = *((_DWORD *)v18 + 18);
        uint64_t v100 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v101 = v100[5];
        uint64_t v102 = &v17[v101];
        uint64_t v103 = &v18[v101];
        type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        v406 = v4;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v104 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
          os_log_type_t v105 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v102[v105[5]] = *(_DWORD *)&v103[v105[5]];
          *(_DWORD *)&v102[v105[6]] = *(_DWORD *)&v103[v105[6]];
          uint64_t v106 = v105[7];
          uint64_t v107 = (uint64_t *)&v102[v106];
          uint64_t v108 = &v103[v106];
          uint64_t v109 = *(void *)&v103[v106];
          unint64_t v110 = *(void *)&v103[v106 + 8];
          outlined copy of Data._Representation(v109, v110);
          uint64_t *v107 = v109;
          v107[1] = v110;
          v107[2] = *((void *)v108 + 2);
          uint64_t v111 = v105[8];
          uint64_t v112 = (uint64_t *)&v102[v111];
          uint64_t v113 = &v103[v111];
          uint64_t v114 = *(void *)&v103[v111];
          unint64_t v115 = *(void *)&v103[v111 + 8];
          outlined copy of Data._Representation(v114, v115);
          *uint64_t v112 = v114;
          v112[1] = v115;
          v112[2] = *((void *)v113 + 2);
          uint64_t v116 = v105[9];
          uint64_t v117 = &v102[v116];
          uint64_t v118 = &v103[v116];
          uint64_t v119 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16))(v117, v118, v119);
          *(_DWORD *)&v102[v105[10]] = *(_DWORD *)&v103[v105[10]];
          *(_WORD *)&v102[v105[11]] = *(_WORD *)&v103[v105[11]];
          *(_WORD *)&v102[v105[12]] = *(_WORD *)&v103[v105[12]];
          uint64_t v120 = v105[13];
          uint64_t v121 = &v102[v120];
          uint64_t v122 = (uint64_t *)&v103[v120];
          unint64_t v123 = *(void *)&v103[v120 + 8];
          if (v123 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
          }
          else
          {
            uint64_t v226 = *v122;
            outlined copy of Data._Representation(*v122, v123);
            *(void *)uint64_t v121 = v226;
            *((void *)v121 + 1) = v123;
          }
          *((void *)v121 + 2) = v122[2];
          uint64_t v227 = v105[14];
          v228 = &v102[v227];
          uint64_t v229 = &v103[v227];
          uint64_t v230 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v231 = *(void *)(v230 - 8);
          uint64_t v4 = v406;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48))(v229, 1, v230))
          {
            uint64_t v232 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v228, v229, *(void *)(*(void *)(v232 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v231 + 16))(v228, v229, v230);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v231 + 56))(v228, 0, 1, v230);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v102 = *(_DWORD *)v103;
          v102[4] = v103[4];
          uint64_t v145 = *((void *)v103 + 2);
          *((void *)v102 + 1) = *((void *)v103 + 1);
          *((void *)v102 + 2) = v145;
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v318 = v100[6];
        v319 = &v17[v318];
        v320 = (uint64_t *)&v18[v318];
        unint64_t v321 = *(void *)&v18[v318 + 8];
        if (v321 >> 60 == 15)
        {
          *(_OWORD *)v319 = *(_OWORD *)v320;
        }
        else
        {
          uint64_t v322 = *v320;
          outlined copy of Data._Representation(*v320, v321);
          *(void *)v319 = v322;
          *((void *)v319 + 1) = v321;
        }
        *((void *)v319 + 2) = v320[2];
        uint64_t v323 = v100[7];
        v324 = &v17[v323];
        v325 = (uint64_t *)&v18[v323];
        unint64_t v326 = *(void *)&v18[v323 + 8];
        if (v326 >> 60 == 15)
        {
          *(_OWORD *)v324 = *(_OWORD *)v325;
        }
        else
        {
          uint64_t v327 = *v325;
          outlined copy of Data._Representation(*v325, v326);
          *(void *)v324 = v327;
          *((void *)v324 + 1) = v326;
        }
        *((void *)v324 + 2) = v325[2];
        v17[v100[8]] = v18[v100[8]];
        uint64_t v328 = v100[9];
        uint64_t v186 = &v17[v328];
        unint64_t v187 = &v18[v328];
        uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v329 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v329 - 8) + 16))(v186, v187, v329);
            os_log_type_t v202 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v330 = v202[9];
            uint64_t v204 = &v186[v330];
            int v205 = &v187[v330];
            uint64_t v206 = type metadata accessor for SymmetricKey();
            goto LABEL_135;
          case 1u:
            uint64_t v337 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v337 - 8) + 16))(v186, v187, v337);
            unint64_t v208 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v338 = v208[9];
            uint64_t v210 = &v186[v338];
            uint64_t v211 = &v187[v338];
            uint64_t v212 = type metadata accessor for SymmetricKey();
            goto LABEL_140;
          case 2u:
            uint64_t v342 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v342 - 8) + 16))(v186, v187, v342);
            uint64_t v214 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v343 = v214[9];
            unint64_t v216 = &v186[v343];
            unint64_t v217 = &v187[v343];
            uint64_t v218 = type metadata accessor for SymmetricKey();
            goto LABEL_143;
          case 3u:
            goto LABEL_137;
          default:
            goto LABEL_152;
        }
      case 4u:
        uint64_t v27 = *((void *)v18 + 1);
        *(void *)char v17 = *(void *)v18;
        *((void *)v17 + 1) = v27;
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v28 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v28 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        }
        else
        {
          uint64_t v41 = *((void *)v18 + 3);
          outlined copy of Data._Representation(v41, v28);
          *((void *)v17 + 3) = v41;
          *((void *)v17 + 4) = v28;
        }
        *((void *)v17 + 5) = *((void *)v18 + 5);
        unint64_t v42 = *((void *)v18 + 7);
        if (v42 >> 60 == 15)
        {
          *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
        }
        else
        {
          uint64_t v124 = *((void *)v18 + 6);
          outlined copy of Data._Representation(v124, *((void *)v18 + 7));
          *((void *)v17 + 6) = v124;
          *((void *)v17 + 7) = v42;
        }
        *((void *)v17 + 8) = *((void *)v18 + 8);
        int v125 = *((_DWORD *)v18 + 19);
        *((_DWORD *)v17 + 18) = *((_DWORD *)v18 + 18);
        *((_DWORD *)v17 + 19) = v125;
        unint64_t v126 = *((void *)v18 + 11);
        if (v126 >> 60 == 15)
        {
          *((_OWORD *)v17 + 5) = *((_OWORD *)v18 + 5);
        }
        else
        {
          uint64_t v146 = *((void *)v18 + 10);
          outlined copy of Data._Representation(v146, *((void *)v18 + 11));
          *((void *)v17 + 10) = v146;
          *((void *)v17 + 11) = v126;
        }
        *((void *)v17 + 12) = *((void *)v18 + 12);
        unint64_t v147 = *((void *)v18 + 14);
        if (v147 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 104) = *(_OWORD *)(v18 + 104);
        }
        else
        {
          uint64_t v148 = *((void *)v18 + 13);
          outlined copy of Data._Representation(v148, *((void *)v18 + 14));
          *((void *)v17 + 13) = v148;
          *((void *)v17 + 14) = v147;
        }
        *((void *)v17 + 15) = *((void *)v18 + 15);
        v17[128] = v18[128];
        uint64_t v149 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v150 = *(int *)(v149 + 40);
        uint64_t v151 = &v17[v150];
        uint64_t v152 = &v18[v150];
        uint64_t v153 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v154 = *(void *)(v153 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
        {
          uint64_t v155 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v151, v152, *(void *)(*(void *)(v155 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v151, v152, v153);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
        }
        uint64_t v200 = *(int *)(v149 + 44);
        uint64_t v186 = &v17[v200];
        unint64_t v187 = &v18[v200];
        uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_96;
          case 1u:
            goto LABEL_97;
          case 2u:
            goto LABEL_98;
          case 3u:
            goto LABEL_137;
          default:
            goto LABEL_152;
        }
      case 5u:
        uint64_t v29 = *((void *)v18 + 1);
        *(void *)char v17 = *(void *)v18;
        *((void *)v17 + 1) = v29;
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v30 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        }
        else
        {
          uint64_t v43 = *((void *)v18 + 3);
          outlined copy of Data._Representation(v43, v30);
          *((void *)v17 + 3) = v43;
          *((void *)v17 + 4) = v30;
        }
        *((void *)v17 + 5) = *((void *)v18 + 5);
        unint64_t v44 = *((void *)v18 + 7);
        if (v44 >> 60 == 15)
        {
          *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
        }
        else
        {
          uint64_t v127 = *((void *)v18 + 6);
          outlined copy of Data._Representation(v127, *((void *)v18 + 7));
          *((void *)v17 + 6) = v127;
          *((void *)v17 + 7) = v44;
        }
        *((void *)v17 + 8) = *((void *)v18 + 8);
        int v128 = *((_DWORD *)v18 + 19);
        *((_DWORD *)v17 + 18) = *((_DWORD *)v18 + 18);
        *((_DWORD *)v17 + 19) = v128;
        uint64_t v129 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v130 = v129[7];
        uint64_t v131 = &v17[v130];
        uint64_t v132 = &v18[v130];
        uint64_t v133 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v134 = *(void *)(v133 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
        {
          uint64_t v135 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v131, v132, v133);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
        }
        uint64_t v175 = v129[8];
        v176 = &v17[v175];
        uint64_t v177 = (uint64_t *)&v18[v175];
        unint64_t v178 = *(void *)&v18[v175 + 8];
        if (v178 >> 60 == 15)
        {
          *(_OWORD *)v176 = *(_OWORD *)v177;
        }
        else
        {
          uint64_t v179 = *v177;
          outlined copy of Data._Representation(*v177, v178);
          *(void *)v176 = v179;
          *((void *)v176 + 1) = v178;
        }
        *((void *)v176 + 2) = v177[2];
        uint64_t v180 = v129[9];
        unint64_t v181 = &v17[v180];
        uint64_t v182 = (uint64_t *)&v18[v180];
        unint64_t v183 = *(void *)&v18[v180 + 8];
        if (v183 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v181 = *(_OWORD *)v182;
        }
        else
        {
          uint64_t v184 = *v182;
          outlined copy of Data._Representation(*v182, v183);
          *(void *)unint64_t v181 = v184;
          *((void *)v181 + 1) = v183;
        }
        *((void *)v181 + 2) = v182[2];
        v17[v129[10]] = v18[v129[10]];
        uint64_t v185 = v129[11];
        uint64_t v186 = &v17[v185];
        unint64_t v187 = &v18[v185];
        uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_96;
          case 1u:
            goto LABEL_97;
          case 2u:
            goto LABEL_98;
          case 3u:
            goto LABEL_137;
          default:
            goto LABEL_152;
        }
      case 6u:
        uint64_t v31 = *((void *)v18 + 1);
        *(void *)char v17 = *(void *)v18;
        *((void *)v17 + 1) = v31;
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v32 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        }
        else
        {
          uint64_t v45 = *((void *)v18 + 3);
          outlined copy of Data._Representation(v45, v32);
          *((void *)v17 + 3) = v45;
          *((void *)v17 + 4) = v32;
        }
        *((void *)v17 + 5) = *((void *)v18 + 5);
        unint64_t v46 = *((void *)v18 + 7);
        if (v46 >> 60 == 15)
        {
          *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
        }
        else
        {
          uint64_t v136 = *((void *)v18 + 6);
          outlined copy of Data._Representation(v136, *((void *)v18 + 7));
          *((void *)v17 + 6) = v136;
          *((void *)v17 + 7) = v46;
        }
        *((void *)v17 + 8) = *((void *)v18 + 8);
        int v137 = *((_DWORD *)v18 + 19);
        *((_DWORD *)v17 + 18) = *((_DWORD *)v18 + 18);
        *((_DWORD *)v17 + 19) = v137;
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v139 = ready[7];
        uint64_t v140 = &v17[v139];
        uint64_t v141 = &v18[v139];
        uint64_t v142 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v143 = *(void *)(v142 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
        {
          uint64_t v144 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v140, v141, v142);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v140, 0, 1, v142);
        }
        uint64_t v189 = ready[8];
        uint64_t v190 = &v17[v189];
        uint64_t v191 = (uint64_t *)&v18[v189];
        unint64_t v192 = *(void *)&v18[v189 + 8];
        if (v192 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v190 = *(_OWORD *)v191;
        }
        else
        {
          uint64_t v193 = *v191;
          outlined copy of Data._Representation(*v191, v192);
          *(void *)uint64_t v190 = v193;
          *((void *)v190 + 1) = v192;
        }
        *((void *)v190 + 2) = v191[2];
        uint64_t v194 = ready[9];
        uint64_t v195 = &v17[v194];
        unint64_t v196 = (uint64_t *)&v18[v194];
        unint64_t v197 = *(void *)&v18[v194 + 8];
        if (v197 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v195 = *(_OWORD *)v196;
        }
        else
        {
          uint64_t v198 = *v196;
          outlined copy of Data._Representation(*v196, v197);
          *(void *)uint64_t v195 = v198;
          *((void *)v195 + 1) = v197;
        }
        *((void *)v195 + 2) = v196[2];
        v17[ready[10]] = v18[ready[10]];
        uint64_t v199 = ready[11];
        uint64_t v186 = &v17[v199];
        unint64_t v187 = &v18[v199];
        uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
LABEL_96:
            uint64_t v201 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 16))(v186, v187, v201);
            os_log_type_t v202 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v203 = v202[9];
            uint64_t v204 = &v186[v203];
            int v205 = &v187[v203];
            uint64_t v206 = type metadata accessor for SymmetricKey();
            v406 = v4;
LABEL_135:
            uint64_t v331 = v206;
            unint64_t v332 = *(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 16);
            v332(v204, v205, v206);
            v332(&v186[v202[10]], &v187[v202[10]], v331);
            v332(&v186[v202[11]], &v187[v202[11]], v331);
            uint64_t v333 = v331;
            uint64_t v4 = v406;
            v332(&v186[v202[12]], &v187[v202[12]], v333);
            goto LABEL_144;
          case 1u:
LABEL_97:
            uint64_t v207 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v207 - 8) + 16))(v186, v187, v207);
            unint64_t v208 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v209 = v208[9];
            uint64_t v210 = &v186[v209];
            uint64_t v211 = &v187[v209];
            uint64_t v212 = type metadata accessor for SymmetricKey();
            v406 = v4;
LABEL_140:
            uint64_t v339 = v212;
            unsigned __int8 v340 = *(void (**)(char *, char *, uint64_t))(*(void *)(v212 - 8) + 16);
            v340(v210, v211, v212);
            v340(&v186[v208[10]], &v187[v208[10]], v339);
            uint64_t v341 = v339;
            uint64_t v4 = v406;
            v340(&v186[v208[11]], &v187[v208[11]], v341);
            goto LABEL_144;
          case 2u:
LABEL_98:
            uint64_t v213 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v213 - 8) + 16))(v186, v187, v213);
            uint64_t v214 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v215 = v214[9];
            unint64_t v216 = &v186[v215];
            unint64_t v217 = &v187[v215];
            uint64_t v218 = type metadata accessor for SymmetricKey();
            v406 = v4;
LABEL_143:
            uint64_t v344 = v218;
            char v345 = *(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 16);
            v345(v216, v217, v218);
            v345(&v186[v214[10]], &v187[v214[10]], v344);
            v345(&v186[v214[11]], &v187[v214[11]], v344);
            v345(&v186[v214[12]], &v187[v214[12]], v344);
            v345(&v186[v214[13]], &v187[v214[13]], v344);
            uint64_t v346 = v344;
            uint64_t v4 = v406;
            v345(&v186[v214[14]], &v187[v214[14]], v346);
            goto LABEL_144;
          case 3u:
LABEL_137:
            uint64_t v334 = type metadata accessor for SymmetricKey();
            uint64_t v335 = *(void (**)(char *, char *, uint64_t))(*(void *)(v334 - 8) + 16);
            v335(v186, v187, v334);
            uint64_t v336 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v335(&v186[v336[9]], &v187[v336[9]], v334);
            v335(&v186[v336[10]], &v187[v336[10]], v334);
            v335(&v186[v336[11]], &v187[v336[11]], v334);
            goto LABEL_144;
          default:
            goto LABEL_152;
        }
      default:
        uint64_t v19 = *((void *)v18 + 1);
        *(void *)char v17 = *(void *)v18;
        *((void *)v17 + 1) = v19;
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v20 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v20 >> 60 == 15)
        {
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        }
        else
        {
          uint64_t v33 = *((void *)v18 + 3);
          outlined copy of Data._Representation(v33, v20);
          *((void *)v17 + 3) = v33;
          *((void *)v17 + 4) = v20;
        }
        *((void *)v17 + 5) = *((void *)v18 + 5);
        unint64_t v34 = *((void *)v18 + 7);
        v403 = v4;
        if (v34 >> 60 == 15)
        {
          *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
        }
        else
        {
          uint64_t v47 = *((void *)v18 + 6);
          outlined copy of Data._Representation(v47, v34);
          *((void *)v17 + 6) = v47;
          *((void *)v17 + 7) = v34;
        }
        *((void *)v17 + 8) = *((void *)v18 + 8);
        *((_DWORD *)v17 + 18) = *((_DWORD *)v18 + 18);
        uint64_t v48 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v49 = *(int *)(v48 + 20);
        uint64_t v50 = &v17[v49];
        int v51 = &v18[v49];
        os_log_type_t v52 = (int *)type metadata accessor for SessionTicket();
        uint64_t v53 = *((void *)v52 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          uint64_t v397 = v53;
          uint64_t v400 = v48;
          uint64_t v156 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 16))(v50, v51, v156);
          *(_DWORD *)&v50[v52[5]] = *(_DWORD *)&v51[v52[5]];
          *(_DWORD *)&v50[v52[6]] = *(_DWORD *)&v51[v52[6]];
          uint64_t v157 = v52[7];
          uint64_t v158 = (uint64_t *)&v50[v157];
          uint64_t v159 = &v51[v157];
          uint64_t v160 = *(void *)&v51[v157];
          unint64_t v161 = *(void *)&v51[v157 + 8];
          outlined copy of Data._Representation(v160, v161);
          *uint64_t v158 = v160;
          v158[1] = v161;
          v158[2] = *((void *)v159 + 2);
          uint64_t v162 = v52[8];
          uint64_t v163 = (uint64_t *)&v50[v162];
          uint64_t v164 = &v51[v162];
          uint64_t v165 = *(void *)&v51[v162];
          unint64_t v166 = *(void *)&v51[v162 + 8];
          outlined copy of Data._Representation(v165, v166);
          *uint64_t v163 = v165;
          v163[1] = v166;
          v163[2] = *((void *)v164 + 2);
          uint64_t v167 = v52[9];
          v168 = &v50[v167];
          os_log_type_t v169 = &v51[v167];
          uint64_t v170 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v170 - 8) + 16))(v168, v169, v170);
          *(_DWORD *)&v50[v52[10]] = *(_DWORD *)&v51[v52[10]];
          *(_WORD *)&v50[v52[11]] = *(_WORD *)&v51[v52[11]];
          *(_WORD *)&v50[v52[12]] = *(_WORD *)&v51[v52[12]];
          uint64_t v171 = v52[13];
          uint64_t v172 = &v50[v171];
          uint64_t v173 = (uint64_t *)&v51[v171];
          unint64_t v174 = *(void *)&v51[v171 + 8];
          if (v174 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v172 = *(_OWORD *)v173;
          }
          else
          {
            uint64_t v277 = *v173;
            outlined copy of Data._Representation(*v173, v174);
            *(void *)uint64_t v172 = v277;
            *((void *)v172 + 1) = v174;
          }
          *((void *)v172 + 2) = v173[2];
          uint64_t v48 = v400;
          uint64_t v278 = v52[14];
          uint64_t v279 = &v50[v278];
          uint64_t v280 = &v51[v278];
          uint64_t v281 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v282 = *(void *)(v281 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v281))
          {
            uint64_t v283 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v279, v280, *(void *)(*(void *)(v283 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v279, v280, v281);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v279, 0, 1, v281);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v397 + 56))(v50, 0, 1, v52);
        }
        uint64_t v4 = v403;
        uint64_t v354 = *(int *)(v48 + 24);
        uint64_t v186 = &v17[v354];
        unint64_t v187 = &v18[v354];
        uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v355 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v355 - 8) + 16))(v186, v187, v355);
            v356 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v357 = v356[9];
            v358 = &v186[v357];
            v359 = &v187[v357];
            uint64_t v360 = type metadata accessor for SymmetricKey();
            v361 = *(void (**)(char *, char *, uint64_t))(*(void *)(v360 - 8) + 16);
            v362 = v359;
            uint64_t v4 = v403;
            v361(v358, v362, v360);
            v361(&v186[v356[10]], &v187[v356[10]], v360);
            v361(&v186[v356[11]], &v187[v356[11]], v360);
            v361(&v186[v356[12]], &v187[v356[12]], v360);
            goto LABEL_144;
          case 1u:
            uint64_t v363 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v363 - 8) + 16))(v186, v187, v363);
            v364 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v365 = v364[9];
            v366 = &v186[v365];
            v367 = &v187[v365];
            uint64_t v368 = type metadata accessor for SymmetricKey();
            v369 = *(void (**)(char *, char *, uint64_t))(*(void *)(v368 - 8) + 16);
            v370 = v367;
            uint64_t v4 = v403;
            v369(v366, v370, v368);
            v369(&v186[v364[10]], &v187[v364[10]], v368);
            v369(&v186[v364[11]], &v187[v364[11]], v368);
            goto LABEL_144;
          case 2u:
            uint64_t v371 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v371 - 8) + 16))(v186, v187, v371);
            v372 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v373 = v372[9];
            v374 = &v186[v373];
            v375 = &v187[v373];
            uint64_t v376 = type metadata accessor for SymmetricKey();
            v377 = *(void (**)(char *, char *, uint64_t))(*(void *)(v376 - 8) + 16);
            v378 = v375;
            uint64_t v4 = v403;
            v377(v374, v378, v376);
            v377(&v186[v372[10]], &v187[v372[10]], v376);
            v377(&v186[v372[11]], &v187[v372[11]], v376);
            v377(&v186[v372[12]], &v187[v372[12]], v376);
            v377(&v186[v372[13]], &v187[v372[13]], v376);
            v377(&v186[v372[14]], &v187[v372[14]], v376);
            goto LABEL_144;
          case 3u:
            uint64_t v379 = type metadata accessor for SymmetricKey();
            v380 = *(void (**)(char *, char *, uint64_t))(*(void *)(v379 - 8) + 16);
            v380(v186, v187, v379);
            v381 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v380(&v186[v381[9]], &v187[v381[9]], v379);
            v380(&v186[v381[10]], &v187[v381[10]], v379);
            v380(&v186[v381[11]], &v187[v381[11]], v379);
LABEL_144:
            swift_storeEnumTagMultiPayload();
            break;
          default:
LABEL_152:
            memcpy(v186, v187, *(void *)(*(void *)(v188 - 8) + 64));
            break;
        }
LABEL_159:
        uint64_t v316 = v408;
        unint64_t v315 = v409;
        long long v317 = v407;
LABEL_160:
        swift_storeEnumTagMultiPayload();
        uint64_t v382 = v317[7];
        long long v383 = *(_OWORD *)((char *)v316 + v382 + 24);
        *(_OWORD *)&v315[v382 + 24] = v383;
        (**(void (***)(void))(v383 - 8))();
        uint64_t v384 = v317[8];
        v385 = &v315[v384];
        v386 = (_OWORD *)((char *)v316 + v384);
        long long v387 = v386[1];
        *(_OWORD *)v385 = *v386;
        *((_OWORD *)v385 + 1) = v387;
        uint64_t v388 = v317[9];
        v389 = &v315[v388];
        uint64_t v390 = (uint64_t)v316 + v388;
        uint64_t v391 = *(uint64_t *)((char *)v316 + v388 + 8);
        *(void *)v389 = *(uint64_t *)((char *)v316 + v388);
        *((void *)v389 + 1) = v391;
        *((void *)v389 + 2) = *(uint64_t *)((char *)v316 + v388 + 16);
        unint64_t v392 = *(uint64_t *)((char *)v316 + v388 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v392 >> 60 == 15)
        {
          *(_OWORD *)(v389 + 24) = *(_OWORD *)(v390 + 24);
        }
        else
        {
          uint64_t v393 = *(void *)(v390 + 24);
          outlined copy of Data._Representation(v393, v392);
          *((void *)v389 + 3) = v393;
          *((void *)v389 + 4) = v392;
        }
        *((void *)v389 + 5) = *(void *)(v390 + 40);
        unint64_t v394 = *(void *)(v390 + 56);
        if (v394 >> 60 == 15)
        {
          *((_OWORD *)v389 + 3) = *(_OWORD *)(v390 + 48);
        }
        else
        {
          uint64_t v395 = *(void *)(v390 + 48);
          outlined copy of Data._Representation(v395, *(void *)(v390 + 56));
          *((void *)v389 + 6) = v395;
          *((void *)v389 + 7) = v394;
        }
        *((void *)v389 + 8) = *(void *)(v390 + 64);
        *((_DWORD *)v389 + 18) = *(_DWORD *)(v390 + 72);
        break;
    }
  }
  return v4;
}

uint64_t destroy for ExportedAuthenticator(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    outlined consume of Data._Representation(*a1, v4);
  }
  int v5 = (uint64_t *)((char *)a1 + *(int *)(a2 + 24));
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    outlined consume of Data._Representation(*v5, v6);
  }
  unint64_t v7 = (int *)type metadata accessor for HandshakeStateMachine();
  uint64_t v8 = (uint64_t *)((char *)v5 + v7[6]);
  type metadata accessor for HandshakeState(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v9 = v8[4];
      if (v9 >> 60 != 15) {
        outlined consume of Data._Representation(v8[3], v9);
      }
      unint64_t v10 = v8[7];
      if (v10 >> 60 != 15) {
        outlined consume of Data._Representation(v8[6], v10);
      }
      uint64_t v11 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v12 = (char *)v8 + *(int *)(v11 + 20);
      unint64_t v13 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v13 - 1) + 48))(v12, 1, v13))
      {
        uint64_t v14 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v12, v14);
        outlined consume of Data._Representation(*(void *)&v12[v13[7]], *(void *)&v12[v13[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v12[v13[8]], *(void *)&v12[v13[8] + 8]);
        uint64_t v15 = &v12[v13[9]];
        uint64_t v16 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
        char v17 = (uint64_t *)&v12[v13[13]];
        unint64_t v18 = v17[1];
        if (v18 >> 60 != 15) {
          outlined consume of Data._Representation(*v17, v18);
        }
        uint64_t v19 = &v12[v13[14]];
        uint64_t v20 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v21 = *(void *)(v20 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
          (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
        }
      }
      unint64_t v22 = (char *)v8 + *(int *)(v11 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v23 = v8[4];
      if (v23 >> 60 != 15) {
        outlined consume of Data._Representation(v8[3], v23);
      }
      unint64_t v24 = v8[7];
      if (v24 >> 60 != 15) {
        outlined consume of Data._Representation(v8[6], v24);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v8 + 17));
      uint64_t v25 = type metadata accessor for HandshakeState.ClientHelloState(0);
      unint64_t v26 = (char *)v8 + *(int *)(v25 + 36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v27 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
          unint64_t v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v29 = &v26[v28[9]];
          uint64_t v30 = type metadata accessor for SymmetricKey();
          uint64_t v31 = *(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8);
          v31(v29, v30);
          v31(&v26[v28[10]], v30);
          v31(&v26[v28[11]], v30);
          uint64_t v32 = v28[12];
          goto LABEL_88;
        case 1u:
          uint64_t v106 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v106 - 8) + 8))(v26, v106);
          uint64_t v107 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v108 = &v26[v107[9]];
          uint64_t v30 = type metadata accessor for SymmetricKey();
          uint64_t v31 = *(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8);
          v31(v108, v30);
          v31(&v26[v107[10]], v30);
          uint64_t v32 = v107[11];
          goto LABEL_88;
        case 2u:
          uint64_t v109 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v109 - 8) + 8))(v26, v109);
          unint64_t v110 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v111 = &v26[v110[9]];
          uint64_t v30 = type metadata accessor for SymmetricKey();
          uint64_t v31 = *(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8);
          v31(v111, v30);
          v31(&v26[v110[10]], v30);
          v31(&v26[v110[11]], v30);
          v31(&v26[v110[12]], v30);
          v31(&v26[v110[13]], v30);
          uint64_t v32 = v110[14];
LABEL_88:
          v31(&v26[v32], v30);
          break;
        case 3u:
          uint64_t v112 = type metadata accessor for SymmetricKey();
          uint64_t v113 = *(void (**)(char *, uint64_t))(*(void *)(v112 - 8) + 8);
          v113(v26, v112);
          uint64_t v114 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v113(&v26[v114[9]], v112);
          v113(&v26[v114[10]], v112);
          v113(&v26[v114[11]], v112);
          break;
        default:
          break;
      }
      unint64_t v115 = (char *)v8 + *(int *)(v25 + 40);
      uint64_t v116 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v116 - 1) + 48))(v115, 1, v116))
      {
        uint64_t v117 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v117 - 8) + 8))(v115, v117);
        outlined consume of Data._Representation(*(void *)&v115[v116[7]], *(void *)&v115[v116[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v115[v116[8]], *(void *)&v115[v116[8] + 8]);
        uint64_t v118 = &v115[v116[9]];
        uint64_t v119 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v119 - 8) + 8))(v118, v119);
        uint64_t v120 = (uint64_t *)&v115[v116[13]];
        unint64_t v121 = v120[1];
        if (v121 >> 60 != 15) {
          outlined consume of Data._Representation(*v120, v121);
        }
        uint64_t v122 = &v115[v116[14]];
        uint64_t v123 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v124 = *(void *)(v123 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123)) {
          (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
        }
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v33 = v8[4];
      if (v33 >> 60 != 15) {
        outlined consume of Data._Representation(v8[3], v33);
      }
      unint64_t v34 = v8[7];
      if (v34 >> 60 != 15) {
        outlined consume of Data._Representation(v8[6], v34);
      }
      uint64_t v35 = type metadata accessor for HandshakeState.ServerHelloState(0);
      unint64_t v36 = (char *)v8 + *(int *)(v35 + 20);
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v37 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v36, v37);
        unint64_t v38 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(void *)&v36[v38[7]], *(void *)&v36[v38[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v36[v38[8]], *(void *)&v36[v38[8] + 8]);
        uint64_t v39 = &v36[v38[9]];
        uint64_t v40 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(v39, v40);
        uint64_t v41 = (uint64_t *)&v36[v38[13]];
        unint64_t v42 = v41[1];
        if (v42 >> 60 != 15) {
          outlined consume of Data._Representation(*v41, v42);
        }
        uint64_t v43 = &v36[v38[14]];
        uint64_t v44 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v45 = *(void *)(v44 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44)) {
          (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v22 = (char *)v8 + *(int *)(v35 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v46 = v8[4];
      if (v46 >> 60 != 15) {
        outlined consume of Data._Representation(v8[3], v46);
      }
      unint64_t v47 = v8[7];
      if (v47 >> 60 != 15) {
        outlined consume of Data._Representation(v8[6], v47);
      }
      uint64_t v48 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v49 = (char *)v8 + v48[5];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v50 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
        int v51 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(void *)&v49[v51[7]], *(void *)&v49[v51[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v49[v51[8]], *(void *)&v49[v51[8] + 8]);
        os_log_type_t v52 = &v49[v51[9]];
        uint64_t v53 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v53 - 8) + 8))(v52, v53);
        uint64_t v54 = (uint64_t *)&v49[v51[13]];
        unint64_t v55 = v54[1];
        if (v55 >> 60 != 15) {
          outlined consume of Data._Representation(*v54, v55);
        }
        long long v56 = &v49[v51[14]];
        uint64_t v57 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v58 = *(void *)(v57 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57)) {
          (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v87 = (uint64_t *)((char *)v8 + v48[6]);
      unint64_t v88 = v87[1];
      if (v88 >> 60 != 15) {
        outlined consume of Data._Representation(*v87, v88);
      }
      uint64_t v89 = (uint64_t *)((char *)v8 + v48[7]);
      unint64_t v90 = v89[1];
      if (v90 >> 60 != 15) {
        outlined consume of Data._Representation(*v89, v90);
      }
      unint64_t v22 = (char *)v8 + v48[9];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v59 = v8[4];
      if (v59 >> 60 != 15) {
        outlined consume of Data._Representation(v8[3], v59);
      }
      unint64_t v60 = v8[7];
      if (v60 >> 60 != 15) {
        outlined consume of Data._Representation(v8[6], v60);
      }
      unint64_t v61 = v8[11];
      if (v61 >> 60 != 15) {
        outlined consume of Data._Representation(v8[10], v61);
      }
      unint64_t v62 = v8[14];
      if (v62 >> 60 != 15) {
        outlined consume of Data._Representation(v8[13], v62);
      }
      uint64_t v63 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      unint64_t v64 = (char *)v8 + *(int *)(v63 + 40);
      uint64_t v65 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v66 = *(void *)(v65 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
        (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
      }
      unint64_t v22 = (char *)v8 + *(int *)(v63 + 44);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v67 = v8[4];
      if (v67 >> 60 != 15) {
        outlined consume of Data._Representation(v8[3], v67);
      }
      unint64_t v68 = v8[7];
      if (v68 >> 60 != 15) {
        outlined consume of Data._Representation(v8[6], v68);
      }
      uint64_t v69 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v70 = (char *)v8 + v69[7];
      uint64_t v71 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v72 = *(void *)(v71 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71)) {
        (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v71);
      }
      uint64_t v73 = (uint64_t *)((char *)v8 + v69[8]);
      unint64_t v74 = v73[1];
      if (v74 >> 60 != 15) {
        outlined consume of Data._Representation(*v73, v74);
      }
      uint64_t v75 = (uint64_t *)((char *)v8 + v69[9]);
      unint64_t v76 = v75[1];
      if (v76 >> 60 != 15) {
        outlined consume of Data._Representation(*v75, v76);
      }
      unint64_t v22 = (char *)v8 + v69[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v77 = v8[4];
      if (v77 >> 60 != 15) {
        outlined consume of Data._Representation(v8[3], v77);
      }
      unint64_t v78 = v8[7];
      if (v78 >> 60 != 15) {
        outlined consume of Data._Representation(v8[6], v78);
      }
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v80 = (char *)v8 + ready[7];
      uint64_t v81 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v82 = *(void *)(v81 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81)) {
        (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v81);
      }
      uint64_t v83 = (uint64_t *)((char *)v8 + ready[8]);
      unint64_t v84 = v83[1];
      if (v84 >> 60 != 15) {
        outlined consume of Data._Representation(*v83, v84);
      }
      unint64_t v85 = (uint64_t *)((char *)v8 + ready[9]);
      unint64_t v86 = v85[1];
      if (v86 >> 60 != 15) {
        outlined consume of Data._Representation(*v85, v86);
      }
      unint64_t v22 = (char *)v8 + ready[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_81:
          uint64_t v91 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v91 - 8) + 8))(v22, v91);
          unint64_t v92 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v93 = &v22[v92[9]];
          uint64_t v94 = type metadata accessor for SymmetricKey();
          uint64_t v95 = *(void (**)(char *, uint64_t))(*(void *)(v94 - 8) + 8);
          v95(v93, v94);
          v95(&v22[v92[10]], v94);
          v95(&v22[v92[11]], v94);
          uint64_t v96 = v92[12];
          goto LABEL_84;
        case 1u:
LABEL_82:
          uint64_t v97 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v97 - 8) + 8))(v22, v97);
          unint64_t v98 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v99 = &v22[v98[9]];
          uint64_t v94 = type metadata accessor for SymmetricKey();
          uint64_t v95 = *(void (**)(char *, uint64_t))(*(void *)(v94 - 8) + 8);
          v95(v99, v94);
          v95(&v22[v98[10]], v94);
          uint64_t v96 = v98[11];
          goto LABEL_84;
        case 2u:
LABEL_83:
          uint64_t v100 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v100 - 8) + 8))(v22, v100);
          uint64_t v101 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v102 = &v22[v101[9]];
          uint64_t v94 = type metadata accessor for SymmetricKey();
          uint64_t v95 = *(void (**)(char *, uint64_t))(*(void *)(v94 - 8) + 8);
          v95(v102, v94);
          v95(&v22[v101[10]], v94);
          v95(&v22[v101[11]], v94);
          v95(&v22[v101[12]], v94);
          v95(&v22[v101[13]], v94);
          uint64_t v96 = v101[14];
LABEL_84:
          v95(&v22[v96], v94);
          break;
        case 3u:
LABEL_85:
          uint64_t v103 = type metadata accessor for SymmetricKey();
          uint64_t v104 = *(void (**)(char *, uint64_t))(*(void *)(v103 - 8) + 8);
          v104(v22, v103);
          os_log_type_t v105 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v104(&v22[v105[9]], v103);
          v104(&v22[v105[10]], v103);
          v104(&v22[v105[11]], v103);
          break;
        default:
          goto LABEL_95;
      }
      break;
    default:
      break;
  }
LABEL_95:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5 + v7[7]);
  int v125 = (uint64_t *)((char *)v5 + v7[9]);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v127 = v125[4];
  if (v127 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(v125[3], v127);
  }
  unint64_t v128 = v125[7];
  if (v128 >> 60 != 15)
  {
    uint64_t v129 = v125[6];
    return outlined consume of Data._Representation(v129, v128);
  }
  return result;
}

uint64_t *initializeWithCopy for ExportedAuthenticator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = a1;
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *int v5 = v7;
    v5[1] = v6;
  }
  long long v5[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  unint64_t v9 = (char *)v5 + v8;
  unint64_t v10 = (uint64_t *)((char *)a2 + v8);
  unint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = *v10;
    outlined copy of Data._Representation(*v10, v11);
    *(void *)unint64_t v9 = v12;
    *((void *)v9 + 1) = v11;
  }
  *((void *)v9 + 2) = v10[2];
  uint64_t v13 = type metadata accessor for HandshakeStateMachine();
  uint64_t v14 = *(int *)(v13 + 24);
  uint64_t v15 = &v9[v14];
  uint64_t v16 = (char *)v10 + v14;
  v407 = (int *)v13;
  v408 = v10;
  type metadata accessor for HandshakeState(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v19 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v19;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v20 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      }
      else
      {
        uint64_t v33 = *((void *)v16 + 3);
        outlined copy of Data._Representation(v33, v20);
        *((void *)v15 + 3) = v33;
        *((void *)v15 + 4) = v20;
      }
      *((void *)v15 + 5) = *((void *)v16 + 5);
      unint64_t v34 = *((void *)v16 + 7);
      v404 = v9;
      if (v34 >> 60 == 15)
      {
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      }
      else
      {
        uint64_t v53 = *((void *)v16 + 6);
        outlined copy of Data._Representation(v53, v34);
        *((void *)v15 + 6) = v53;
        *((void *)v15 + 7) = v34;
      }
      *((void *)v15 + 8) = *((void *)v16 + 8);
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      long long v54 = *((_OWORD *)v16 + 6);
      *((_OWORD *)v15 + 5) = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 6) = v54;
      uint64_t v55 = *((void *)v16 + 15);
      *((void *)v15 + 14) = *((void *)v16 + 14);
      *((void *)v15 + 15) = v55;
      *((void *)v15 + 16) = *((void *)v16 + 16);
      long long v56 = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 10) = v56;
      uint64_t v57 = v56;
      uint64_t v58 = **(void (***)(char *, char *, uint64_t))(v56 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58(v15 + 136, v16 + 136, v57);
      uint64_t v59 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v60 = *(int *)(v59 + 36);
      unint64_t v61 = &v15[v60];
      unint64_t v62 = &v16[v60];
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t v401 = v5;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v64 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v61, v62, v64);
          uint64_t v65 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v66 = v65[9];
          unint64_t v67 = &v61[v66];
          unint64_t v68 = &v62[v66];
          uint64_t v394 = v59;
          uint64_t v69 = type metadata accessor for SymmetricKey();
          uint64_t v70 = *(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16);
          v70(v67, v68, v69);
          v70(&v61[v65[10]], &v62[v65[10]], v69);
          v70(&v61[v65[11]], &v62[v65[11]], v69);
          uint64_t v71 = v69;
          uint64_t v59 = v394;
          v70(&v61[v65[12]], &v62[v65[12]], v71);
          goto LABEL_107;
        case 1u:
          uint64_t v234 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v234 - 8) + 16))(v61, v62, v234);
          uint64_t v235 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v236 = v235[9];
          uint64_t v237 = &v61[v236];
          uint64_t v238 = &v62[v236];
          uint64_t v397 = v59;
          uint64_t v239 = type metadata accessor for SymmetricKey();
          uint64_t v240 = *(void (**)(char *, char *, uint64_t))(*(void *)(v239 - 8) + 16);
          v240(v237, v238, v239);
          v240(&v61[v235[10]], &v62[v235[10]], v239);
          uint64_t v241 = v239;
          uint64_t v59 = v397;
          v240(&v61[v235[11]], &v62[v235[11]], v241);
          goto LABEL_107;
        case 2u:
          uint64_t v242 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v242 - 8) + 16))(v61, v62, v242);
          uint64_t v243 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v244 = v243[9];
          uint64_t v245 = &v61[v244];
          uint64_t v246 = &v62[v244];
          uint64_t v398 = v59;
          uint64_t v247 = type metadata accessor for SymmetricKey();
          uint64_t v248 = *(void (**)(char *, char *, uint64_t))(*(void *)(v247 - 8) + 16);
          v248(v245, v246, v247);
          v248(&v61[v243[10]], &v62[v243[10]], v247);
          v248(&v61[v243[11]], &v62[v243[11]], v247);
          v248(&v61[v243[12]], &v62[v243[12]], v247);
          v248(&v61[v243[13]], &v62[v243[13]], v247);
          uint64_t v249 = v247;
          uint64_t v59 = v398;
          v248(&v61[v243[14]], &v62[v243[14]], v249);
          goto LABEL_107;
        case 3u:
          uint64_t v250 = type metadata accessor for SymmetricKey();
          uint64_t v251 = *(void (**)(char *, char *, uint64_t))(*(void *)(v250 - 8) + 16);
          v251(v61, v62, v250);
          uint64_t v252 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v251(&v61[v252[9]], &v62[v252[9]], v250);
          v251(&v61[v252[10]], &v62[v252[10]], v250);
          v251(&v61[v252[11]], &v62[v252[11]], v250);
LABEL_107:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
          break;
      }
      unint64_t v9 = v404;
      uint64_t v253 = *(int *)(v59 + 40);
      v254 = &v15[v253];
      uint64_t v255 = &v16[v253];
      uint64_t v256 = (int *)type metadata accessor for SessionTicket();
      uint64_t v257 = *((void *)v256 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v257 + 48))(v255, 1, v256))
      {
        uint64_t v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v254, v255, *(void *)(*(void *)(v258 - 8) + 64));
      }
      else
      {
        uint64_t v259 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v259 - 8) + 16))(v254, v255, v259);
        *(_DWORD *)&v254[v256[5]] = *(_DWORD *)&v255[v256[5]];
        *(_DWORD *)&v254[v256[6]] = *(_DWORD *)&v255[v256[6]];
        uint64_t v260 = v256[7];
        uint64_t v261 = (uint64_t *)&v254[v260];
        uint64_t v262 = &v255[v260];
        uint64_t v263 = *(void *)&v255[v260];
        unint64_t v264 = *(void *)&v255[v260 + 8];
        outlined copy of Data._Representation(v263, v264);
        *uint64_t v261 = v263;
        v261[1] = v264;
        v261[2] = *((void *)v262 + 2);
        uint64_t v265 = v256[8];
        uint64_t v266 = (uint64_t *)&v254[v265];
        uint64_t v267 = &v255[v265];
        uint64_t v268 = *(void *)&v255[v265];
        unint64_t v269 = *(void *)&v255[v265 + 8];
        outlined copy of Data._Representation(v268, v269);
        *uint64_t v266 = v268;
        v266[1] = v269;
        v266[2] = *((void *)v267 + 2);
        uint64_t v270 = v256[9];
        uint64_t v271 = &v254[v270];
        uint64_t v272 = &v255[v270];
        uint64_t v273 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v273 - 8) + 16))(v271, v272, v273);
        *(_DWORD *)&v254[v256[10]] = *(_DWORD *)&v255[v256[10]];
        *(_WORD *)&v254[v256[11]] = *(_WORD *)&v255[v256[11]];
        *(_WORD *)&v254[v256[12]] = *(_WORD *)&v255[v256[12]];
        uint64_t v274 = v256[13];
        int64_t v275 = &v254[v274];
        unint64_t v276 = (uint64_t *)&v255[v274];
        unint64_t v277 = *(void *)&v255[v274 + 8];
        if (v277 >> 60 == 15)
        {
          *(_OWORD *)int64_t v275 = *(_OWORD *)v276;
        }
        else
        {
          uint64_t v341 = *v276;
          outlined copy of Data._Representation(*v276, v277);
          *(void *)int64_t v275 = v341;
          *((void *)v275 + 1) = v277;
        }
        *((void *)v275 + 2) = v276[2];
        uint64_t v342 = v256[14];
        uint64_t v343 = &v254[v342];
        uint64_t v344 = &v255[v342];
        uint64_t v345 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v346 = *(void *)(v345 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v346 + 48))(v344, 1, v345))
        {
          uint64_t v347 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v343, v344, *(void *)(*(void *)(v347 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v346 + 16))(v343, v344, v345);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v346 + 56))(v343, 0, 1, v345);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v257 + 56))(v254, 0, 1, v256);
      }
      int v5 = v401;
      goto LABEL_157;
    case 2u:
      uint64_t v21 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v21;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v22 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      }
      else
      {
        uint64_t v35 = *((void *)v16 + 3);
        outlined copy of Data._Representation(v35, v22);
        *((void *)v15 + 3) = v35;
        *((void *)v15 + 4) = v22;
      }
      *((void *)v15 + 5) = *((void *)v16 + 5);
      unint64_t v36 = *((void *)v16 + 7);
      uint64_t v400 = v5;
      v405 = v9;
      if (v36 >> 60 == 15)
      {
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      }
      else
      {
        uint64_t v72 = *((void *)v16 + 6);
        outlined copy of Data._Representation(v72, v36);
        *((void *)v15 + 6) = v72;
        *((void *)v15 + 7) = v36;
      }
      *((void *)v15 + 8) = *((void *)v16 + 8);
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      uint64_t v73 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v74 = v73[5];
      uint64_t v75 = &v15[v74];
      unint64_t v76 = &v16[v74];
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      uint64_t v395 = v73;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v77 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v75, v76, v77);
        unint64_t v78 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v75[v78[5]] = *(_DWORD *)&v76[v78[5]];
        *(_DWORD *)&v75[v78[6]] = *(_DWORD *)&v76[v78[6]];
        uint64_t v79 = v78[7];
        uint64_t v80 = (uint64_t *)&v75[v79];
        uint64_t v81 = &v76[v79];
        uint64_t v82 = *(void *)&v76[v79];
        unint64_t v83 = *(void *)&v76[v79 + 8];
        outlined copy of Data._Representation(v82, v83);
        *uint64_t v80 = v82;
        v80[1] = v83;
        v80[2] = *((void *)v81 + 2);
        uint64_t v84 = v78[8];
        unint64_t v85 = (uint64_t *)&v75[v84];
        unint64_t v86 = &v76[v84];
        uint64_t v87 = *(void *)&v76[v84];
        unint64_t v88 = *(void *)&v76[v84 + 8];
        outlined copy of Data._Representation(v87, v88);
        *unint64_t v85 = v87;
        v85[1] = v88;
        v85[2] = *((void *)v86 + 2);
        uint64_t v89 = v78[9];
        unint64_t v90 = &v75[v89];
        uint64_t v91 = &v76[v89];
        uint64_t v92 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 16))(v90, v91, v92);
        *(_DWORD *)&v75[v78[10]] = *(_DWORD *)&v76[v78[10]];
        *(_WORD *)&v75[v78[11]] = *(_WORD *)&v76[v78[11]];
        *(_WORD *)&v75[v78[12]] = *(_WORD *)&v76[v78[12]];
        uint64_t v93 = v78[13];
        uint64_t v94 = &v75[v93];
        uint64_t v95 = (uint64_t *)&v76[v93];
        unint64_t v96 = *(void *)&v76[v93 + 8];
        if (v96 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
        }
        else
        {
          uint64_t v220 = *v95;
          outlined copy of Data._Representation(*v95, v96);
          *(void *)uint64_t v94 = v220;
          *((void *)v94 + 1) = v96;
        }
        *((void *)v94 + 2) = v95[2];
        uint64_t v221 = v78[14];
        v222 = &v75[v221];
        uint64_t v223 = &v76[v221];
        uint64_t v224 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v225 = *(void *)(v224 - 8);
        uint64_t v73 = v395;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v225 + 48))(v223, 1, v224))
        {
          uint64_t v226 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v222, v223, *(void *)(*(void *)(v226 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v222, v223, v224);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v225 + 56))(v222, 0, 1, v224);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
        *((void *)v75 + 1) = *((void *)v76 + 1);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v285 = v73[6];
      uint64_t v286 = &v15[v285];
      uint64_t v287 = &v16[v285];
      uint64_t v288 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v289 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v289 - 8) + 16))(v286, v287, v289);
          uint64_t v290 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v291 = v290[9];
          unint64_t v292 = &v286[v291];
          uint64_t v293 = &v287[v291];
          uint64_t v294 = type metadata accessor for SymmetricKey();
          uint64_t v295 = *(void (**)(char *, char *, uint64_t))(*(void *)(v294 - 8) + 16);
          v295(v292, v293, v294);
          v295(&v286[v290[10]], &v287[v290[10]], v294);
          v295(&v286[v290[11]], &v287[v290[11]], v294);
          uint64_t v296 = v294;
          uint64_t v73 = v395;
          v295(&v286[v290[12]], &v287[v290[12]], v296);
          goto LABEL_122;
        case 1u:
          uint64_t v297 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v297 - 8) + 16))(v286, v287, v297);
          uint64_t v298 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v299 = v298[9];
          uint64_t v300 = &v286[v299];
          uint64_t v301 = &v287[v299];
          uint64_t v302 = type metadata accessor for SymmetricKey();
          uint64_t v303 = *(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16);
          v303(v300, v301, v302);
          v303(&v286[v298[10]], &v287[v298[10]], v302);
          uint64_t v304 = v302;
          uint64_t v73 = v395;
          v303(&v286[v298[11]], &v287[v298[11]], v304);
          goto LABEL_122;
        case 2u:
          uint64_t v305 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v305 - 8) + 16))(v286, v287, v305);
          uint64_t v306 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v307 = v306[9];
          unint64_t v308 = &v286[v307];
          uint64_t v309 = &v287[v307];
          uint64_t v310 = type metadata accessor for SymmetricKey();
          uint64_t v311 = *(void (**)(char *, char *, uint64_t))(*(void *)(v310 - 8) + 16);
          v311(v308, v309, v310);
          v311(&v286[v306[10]], &v287[v306[10]], v310);
          v311(&v286[v306[11]], &v287[v306[11]], v310);
          v311(&v286[v306[12]], &v287[v306[12]], v310);
          v311(&v286[v306[13]], &v287[v306[13]], v310);
          uint64_t v312 = v310;
          uint64_t v73 = v395;
          v311(&v286[v306[14]], &v287[v306[14]], v312);
          goto LABEL_122;
        case 3u:
          uint64_t v313 = type metadata accessor for SymmetricKey();
          uint64_t v314 = *(void (**)(char *, char *, uint64_t))(*(void *)(v313 - 8) + 16);
          v314(v286, v287, v313);
          unint64_t v315 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v314(&v286[v315[9]], &v287[v315[9]], v313);
          v314(&v286[v315[10]], &v287[v315[10]], v313);
          v314(&v286[v315[11]], &v287[v315[11]], v313);
LABEL_122:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v286, v287, *(void *)(*(void *)(v288 - 8) + 64));
          break;
      }
      int v5 = v400;
      unint64_t v9 = v405;
      long long v317 = v407;
      uint64_t v316 = v408;
      *(_WORD *)&v15[v73[7]] = *(_WORD *)&v16[v73[7]];
      *(_WORD *)&v15[v73[8]] = *(_WORD *)&v16[v73[8]];
      goto LABEL_158;
    case 3u:
      uint64_t v23 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v23;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v24 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v24 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      }
      else
      {
        uint64_t v37 = *((void *)v16 + 3);
        outlined copy of Data._Representation(v37, v24);
        *((void *)v15 + 3) = v37;
        *((void *)v15 + 4) = v24;
      }
      *((void *)v15 + 5) = *((void *)v16 + 5);
      unint64_t v38 = *((void *)v16 + 7);
      v406 = v9;
      if (v38 >> 60 == 15)
      {
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      }
      else
      {
        uint64_t v97 = *((void *)v16 + 6);
        outlined copy of Data._Representation(v97, v38);
        *((void *)v15 + 6) = v97;
        *((void *)v15 + 7) = v38;
      }
      *((void *)v15 + 8) = *((void *)v16 + 8);
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      unint64_t v98 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v99 = v98[5];
      uint64_t v100 = &v15[v99];
      uint64_t v101 = &v16[v99];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      uint64_t v402 = v5;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v102 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 16))(v100, v101, v102);
        uint64_t v103 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v100[v103[5]] = *(_DWORD *)&v101[v103[5]];
        *(_DWORD *)&v100[v103[6]] = *(_DWORD *)&v101[v103[6]];
        uint64_t v104 = v103[7];
        os_log_type_t v105 = (uint64_t *)&v100[v104];
        uint64_t v106 = &v101[v104];
        uint64_t v107 = *(void *)&v101[v104];
        unint64_t v108 = *(void *)&v101[v104 + 8];
        outlined copy of Data._Representation(v107, v108);
        *os_log_type_t v105 = v107;
        v105[1] = v108;
        v105[2] = *((void *)v106 + 2);
        uint64_t v109 = v103[8];
        unint64_t v110 = (uint64_t *)&v100[v109];
        uint64_t v111 = &v101[v109];
        uint64_t v112 = *(void *)&v101[v109];
        unint64_t v113 = *(void *)&v101[v109 + 8];
        outlined copy of Data._Representation(v112, v113);
        uint64_t *v110 = v112;
        v110[1] = v113;
        v110[2] = *((void *)v111 + 2);
        uint64_t v114 = v103[9];
        unint64_t v115 = &v100[v114];
        uint64_t v116 = &v101[v114];
        uint64_t v117 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v117 - 8) + 16))(v115, v116, v117);
        *(_DWORD *)&v100[v103[10]] = *(_DWORD *)&v101[v103[10]];
        *(_WORD *)&v100[v103[11]] = *(_WORD *)&v101[v103[11]];
        *(_WORD *)&v100[v103[12]] = *(_WORD *)&v101[v103[12]];
        uint64_t v118 = v103[13];
        uint64_t v119 = &v100[v118];
        uint64_t v120 = (uint64_t *)&v101[v118];
        unint64_t v121 = *(void *)&v101[v118 + 8];
        if (v121 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
        }
        else
        {
          uint64_t v227 = *v120;
          outlined copy of Data._Representation(*v120, v121);
          *(void *)uint64_t v119 = v227;
          *((void *)v119 + 1) = v121;
        }
        *((void *)v119 + 2) = v120[2];
        uint64_t v228 = v103[14];
        uint64_t v229 = &v100[v228];
        uint64_t v230 = &v101[v228];
        uint64_t v231 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v232 = *(void *)(v231 - 8);
        int v5 = v402;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v230, 1, v231))
        {
          uint64_t v233 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v229, v230, *(void *)(*(void *)(v233 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v232 + 16))(v229, v230, v231);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v232 + 56))(v229, 0, 1, v231);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
        v100[4] = v101[4];
        uint64_t v143 = *((void *)v101 + 2);
        *((void *)v100 + 1) = *((void *)v101 + 1);
        *((void *)v100 + 2) = v143;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v318 = v98[6];
      v319 = &v15[v318];
      v320 = (uint64_t *)&v16[v318];
      unint64_t v321 = *(void *)&v16[v318 + 8];
      if (v321 >> 60 == 15)
      {
        *(_OWORD *)v319 = *(_OWORD *)v320;
      }
      else
      {
        uint64_t v322 = *v320;
        outlined copy of Data._Representation(*v320, v321);
        *(void *)v319 = v322;
        *((void *)v319 + 1) = v321;
      }
      *((void *)v319 + 2) = v320[2];
      unint64_t v9 = v406;
      uint64_t v323 = v98[7];
      v324 = &v15[v323];
      v325 = (uint64_t *)&v16[v323];
      unint64_t v326 = *(void *)&v16[v323 + 8];
      if (v326 >> 60 == 15)
      {
        *(_OWORD *)v324 = *(_OWORD *)v325;
      }
      else
      {
        uint64_t v327 = *v325;
        outlined copy of Data._Representation(*v325, v326);
        *(void *)v324 = v327;
        *((void *)v324 + 1) = v326;
      }
      *((void *)v324 + 2) = v325[2];
      v15[v98[8]] = v16[v98[8]];
      uint64_t v328 = v98[9];
      uint64_t v184 = &v15[v328];
      uint64_t v185 = &v16[v328];
      uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v329 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v329 - 8) + 16))(v184, v185, v329);
          uint64_t v200 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v330 = v200[9];
          os_log_type_t v202 = &v184[v330];
          uint64_t v203 = &v185[v330];
          uint64_t v204 = type metadata accessor for SymmetricKey();
          int v205 = *(void (**)(char *, char *, uint64_t))(*(void *)(v204 - 8) + 16);
          goto LABEL_133;
        case 1u:
          uint64_t v335 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v335 - 8) + 16))(v184, v185, v335);
          uint64_t v207 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v336 = v207[9];
          uint64_t v209 = &v184[v336];
          uint64_t v210 = &v185[v336];
          uint64_t v211 = type metadata accessor for SymmetricKey();
          uint64_t v212 = *(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 16);
          goto LABEL_138;
        case 2u:
          uint64_t v338 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v338 - 8) + 16))(v184, v185, v338);
          uint64_t v214 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v339 = v214[9];
          unint64_t v216 = &v184[v339];
          unint64_t v217 = &v185[v339];
          uint64_t v218 = type metadata accessor for SymmetricKey();
          uint64_t v219 = *(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 16);
          goto LABEL_141;
        case 3u:
          goto LABEL_135;
        default:
          goto LABEL_150;
      }
    case 4u:
      uint64_t v25 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v25;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v26 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v26 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      }
      else
      {
        uint64_t v39 = *((void *)v16 + 3);
        outlined copy of Data._Representation(v39, v26);
        *((void *)v15 + 3) = v39;
        *((void *)v15 + 4) = v26;
      }
      *((void *)v15 + 5) = *((void *)v16 + 5);
      unint64_t v40 = *((void *)v16 + 7);
      if (v40 >> 60 == 15)
      {
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      }
      else
      {
        uint64_t v122 = *((void *)v16 + 6);
        outlined copy of Data._Representation(v122, *((void *)v16 + 7));
        *((void *)v15 + 6) = v122;
        *((void *)v15 + 7) = v40;
      }
      *((void *)v15 + 8) = *((void *)v16 + 8);
      int v123 = *((_DWORD *)v16 + 19);
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      *((_DWORD *)v15 + 19) = v123;
      unint64_t v124 = *((void *)v16 + 11);
      if (v124 >> 60 == 15)
      {
        *((_OWORD *)v15 + 5) = *((_OWORD *)v16 + 5);
      }
      else
      {
        uint64_t v144 = *((void *)v16 + 10);
        outlined copy of Data._Representation(v144, *((void *)v16 + 11));
        *((void *)v15 + 10) = v144;
        *((void *)v15 + 11) = v124;
      }
      *((void *)v15 + 12) = *((void *)v16 + 12);
      unint64_t v145 = *((void *)v16 + 14);
      if (v145 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 104) = *(_OWORD *)(v16 + 104);
      }
      else
      {
        uint64_t v146 = *((void *)v16 + 13);
        outlined copy of Data._Representation(v146, *((void *)v16 + 14));
        *((void *)v15 + 13) = v146;
        *((void *)v15 + 14) = v145;
      }
      *((void *)v15 + 15) = *((void *)v16 + 15);
      v15[128] = v16[128];
      uint64_t v147 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v148 = *(int *)(v147 + 40);
      uint64_t v149 = &v15[v148];
      uint64_t v150 = &v16[v148];
      uint64_t v151 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v152 = *(void *)(v151 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
      {
        uint64_t v153 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v149, v150, v151);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v152 + 56))(v149, 0, 1, v151);
      }
      uint64_t v198 = *(int *)(v147 + 44);
      uint64_t v184 = &v15[v198];
      uint64_t v185 = &v16[v198];
      uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_94;
        case 1u:
          goto LABEL_95;
        case 2u:
          goto LABEL_96;
        case 3u:
          goto LABEL_135;
        default:
          goto LABEL_150;
      }
    case 5u:
      uint64_t v27 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v27;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v28 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      }
      else
      {
        uint64_t v41 = *((void *)v16 + 3);
        outlined copy of Data._Representation(v41, v28);
        *((void *)v15 + 3) = v41;
        *((void *)v15 + 4) = v28;
      }
      *((void *)v15 + 5) = *((void *)v16 + 5);
      unint64_t v42 = *((void *)v16 + 7);
      if (v42 >> 60 == 15)
      {
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      }
      else
      {
        uint64_t v125 = *((void *)v16 + 6);
        outlined copy of Data._Representation(v125, *((void *)v16 + 7));
        *((void *)v15 + 6) = v125;
        *((void *)v15 + 7) = v42;
      }
      *((void *)v15 + 8) = *((void *)v16 + 8);
      int v126 = *((_DWORD *)v16 + 19);
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      *((_DWORD *)v15 + 19) = v126;
      unint64_t v127 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v128 = v127[7];
      uint64_t v129 = &v15[v128];
      uint64_t v130 = &v16[v128];
      uint64_t v131 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v132 = *(void *)(v131 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
      {
        uint64_t v133 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v129, v130, *(void *)(*(void *)(v133 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, v130, v131);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
      }
      uint64_t v173 = v127[8];
      unint64_t v174 = &v15[v173];
      uint64_t v175 = (uint64_t *)&v16[v173];
      unint64_t v176 = *(void *)&v16[v173 + 8];
      if (v176 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v174 = *(_OWORD *)v175;
      }
      else
      {
        uint64_t v177 = *v175;
        outlined copy of Data._Representation(*v175, v176);
        *(void *)unint64_t v174 = v177;
        *((void *)v174 + 1) = v176;
      }
      *((void *)v174 + 2) = v175[2];
      uint64_t v178 = v127[9];
      uint64_t v179 = &v15[v178];
      uint64_t v180 = (uint64_t *)&v16[v178];
      unint64_t v181 = *(void *)&v16[v178 + 8];
      if (v181 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
      }
      else
      {
        uint64_t v182 = *v180;
        outlined copy of Data._Representation(*v180, v181);
        *(void *)uint64_t v179 = v182;
        *((void *)v179 + 1) = v181;
      }
      *((void *)v179 + 2) = v180[2];
      v15[v127[10]] = v16[v127[10]];
      uint64_t v183 = v127[11];
      uint64_t v184 = &v15[v183];
      uint64_t v185 = &v16[v183];
      uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_94;
        case 1u:
          goto LABEL_95;
        case 2u:
          goto LABEL_96;
        case 3u:
          goto LABEL_135;
        default:
          goto LABEL_150;
      }
    case 6u:
      uint64_t v29 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v29;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v30 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      }
      else
      {
        uint64_t v43 = *((void *)v16 + 3);
        outlined copy of Data._Representation(v43, v30);
        *((void *)v15 + 3) = v43;
        *((void *)v15 + 4) = v30;
      }
      *((void *)v15 + 5) = *((void *)v16 + 5);
      unint64_t v44 = *((void *)v16 + 7);
      if (v44 >> 60 == 15)
      {
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      }
      else
      {
        uint64_t v134 = *((void *)v16 + 6);
        outlined copy of Data._Representation(v134, *((void *)v16 + 7));
        *((void *)v15 + 6) = v134;
        *((void *)v15 + 7) = v44;
      }
      *((void *)v15 + 8) = *((void *)v16 + 8);
      int v135 = *((_DWORD *)v16 + 19);
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      *((_DWORD *)v15 + 19) = v135;
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v137 = ready[7];
      long long v138 = &v15[v137];
      uint64_t v139 = &v16[v137];
      uint64_t v140 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v141 = *(void *)(v140 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
      {
        uint64_t v142 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v138, v139, v140);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
      }
      uint64_t v187 = ready[8];
      uint64_t v188 = &v15[v187];
      uint64_t v189 = (uint64_t *)&v16[v187];
      unint64_t v190 = *(void *)&v16[v187 + 8];
      if (v190 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
      }
      else
      {
        uint64_t v191 = *v189;
        outlined copy of Data._Representation(*v189, v190);
        *(void *)uint64_t v188 = v191;
        *((void *)v188 + 1) = v190;
      }
      *((void *)v188 + 2) = v189[2];
      uint64_t v192 = ready[9];
      uint64_t v193 = &v15[v192];
      uint64_t v194 = (uint64_t *)&v16[v192];
      unint64_t v195 = *(void *)&v16[v192 + 8];
      if (v195 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v193 = *(_OWORD *)v194;
      }
      else
      {
        uint64_t v196 = *v194;
        outlined copy of Data._Representation(*v194, v195);
        *(void *)uint64_t v193 = v196;
        *((void *)v193 + 1) = v195;
      }
      *((void *)v193 + 2) = v194[2];
      v15[ready[10]] = v16[ready[10]];
      uint64_t v197 = ready[11];
      uint64_t v184 = &v15[v197];
      uint64_t v185 = &v16[v197];
      uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_94:
          uint64_t v199 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 16))(v184, v185, v199);
          uint64_t v200 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v201 = v200[9];
          os_log_type_t v202 = &v184[v201];
          uint64_t v203 = &v185[v201];
          uint64_t v402 = v5;
          uint64_t v204 = type metadata accessor for SymmetricKey();
          int v205 = *(void (**)(char *, char *, uint64_t))(*(void *)(v204 - 8) + 16);
          v406 = v9;
LABEL_133:
          v205(v202, v203, v204);
          v205(&v184[v200[10]], &v185[v200[10]], v204);
          v205(&v184[v200[11]], &v185[v200[11]], v204);
          uint64_t v331 = v204;
          int v5 = v402;
          v205(&v184[v200[12]], &v185[v200[12]], v331);
          unint64_t v9 = v406;
          goto LABEL_142;
        case 1u:
LABEL_95:
          uint64_t v206 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 16))(v184, v185, v206);
          uint64_t v207 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v208 = v207[9];
          uint64_t v209 = &v184[v208];
          uint64_t v210 = &v185[v208];
          uint64_t v402 = v5;
          uint64_t v211 = type metadata accessor for SymmetricKey();
          uint64_t v212 = *(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 16);
          v406 = v9;
LABEL_138:
          v212(v209, v210, v211);
          v212(&v184[v207[10]], &v185[v207[10]], v211);
          uint64_t v337 = v211;
          int v5 = v402;
          v212(&v184[v207[11]], &v185[v207[11]], v337);
          unint64_t v9 = v406;
          goto LABEL_142;
        case 2u:
LABEL_96:
          uint64_t v213 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v213 - 8) + 16))(v184, v185, v213);
          uint64_t v214 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v215 = v214[9];
          unint64_t v216 = &v184[v215];
          unint64_t v217 = &v185[v215];
          uint64_t v402 = v5;
          uint64_t v218 = type metadata accessor for SymmetricKey();
          uint64_t v219 = *(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 16);
          v406 = v9;
LABEL_141:
          v219(v216, v217, v218);
          v219(&v184[v214[10]], &v185[v214[10]], v218);
          v219(&v184[v214[11]], &v185[v214[11]], v218);
          v219(&v184[v214[12]], &v185[v214[12]], v218);
          v219(&v184[v214[13]], &v185[v214[13]], v218);
          uint64_t v340 = v218;
          int v5 = v402;
          v219(&v184[v214[14]], &v185[v214[14]], v340);
          unint64_t v9 = v406;
          goto LABEL_142;
        case 3u:
LABEL_135:
          uint64_t v332 = type metadata accessor for SymmetricKey();
          uint64_t v333 = *(void (**)(char *, char *, uint64_t))(*(void *)(v332 - 8) + 16);
          v333(v184, v185, v332);
          uint64_t v334 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v333(&v184[v334[9]], &v185[v334[9]], v332);
          v333(&v184[v334[10]], &v185[v334[10]], v332);
          v333(&v184[v334[11]], &v185[v334[11]], v332);
          goto LABEL_142;
        default:
          goto LABEL_150;
      }
    default:
      uint64_t v17 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v17;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v18 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      }
      else
      {
        uint64_t v31 = *((void *)v16 + 3);
        outlined copy of Data._Representation(v31, v18);
        *((void *)v15 + 3) = v31;
        *((void *)v15 + 4) = v18;
      }
      *((void *)v15 + 5) = *((void *)v16 + 5);
      unint64_t v32 = *((void *)v16 + 7);
      v399 = v5;
      v403 = v9;
      if (v32 >> 60 == 15)
      {
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      }
      else
      {
        uint64_t v45 = *((void *)v16 + 6);
        outlined copy of Data._Representation(v45, v32);
        *((void *)v15 + 6) = v45;
        *((void *)v15 + 7) = v32;
      }
      *((void *)v15 + 8) = *((void *)v16 + 8);
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      uint64_t v46 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v47 = *(int *)(v46 + 20);
      uint64_t v48 = &v15[v47];
      uint64_t v49 = &v16[v47];
      uint64_t v50 = (int *)type metadata accessor for SessionTicket();
      uint64_t v51 = *((void *)v50 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v51 + 48))(v49, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v396 = v46;
        uint64_t v154 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v154 - 8) + 16))(v48, v49, v154);
        *(_DWORD *)&v48[v50[5]] = *(_DWORD *)&v49[v50[5]];
        *(_DWORD *)&v48[v50[6]] = *(_DWORD *)&v49[v50[6]];
        uint64_t v155 = v50[7];
        uint64_t v156 = (uint64_t *)&v48[v155];
        uint64_t v157 = &v49[v155];
        uint64_t v158 = *(void *)&v49[v155];
        unint64_t v159 = *(void *)&v49[v155 + 8];
        outlined copy of Data._Representation(v158, v159);
        *uint64_t v156 = v158;
        v156[1] = v159;
        v156[2] = *((void *)v157 + 2);
        uint64_t v160 = v50[8];
        unint64_t v161 = (uint64_t *)&v48[v160];
        uint64_t v162 = &v49[v160];
        uint64_t v163 = *(void *)&v49[v160];
        unint64_t v164 = *(void *)&v49[v160 + 8];
        outlined copy of Data._Representation(v163, v164);
        *unint64_t v161 = v163;
        v161[1] = v164;
        v161[2] = *((void *)v162 + 2);
        uint64_t v165 = v50[9];
        unint64_t v166 = &v48[v165];
        uint64_t v167 = &v49[v165];
        uint64_t v168 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v168 - 8) + 16))(v166, v167, v168);
        *(_DWORD *)&v48[v50[10]] = *(_DWORD *)&v49[v50[10]];
        *(_WORD *)&v48[v50[11]] = *(_WORD *)&v49[v50[11]];
        *(_WORD *)&v48[v50[12]] = *(_WORD *)&v49[v50[12]];
        uint64_t v169 = v50[13];
        uint64_t v170 = &v48[v169];
        uint64_t v171 = (uint64_t *)&v49[v169];
        unint64_t v172 = *(void *)&v49[v169 + 8];
        if (v172 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
        }
        else
        {
          uint64_t v278 = *v171;
          outlined copy of Data._Representation(*v171, v172);
          *(void *)uint64_t v170 = v278;
          *((void *)v170 + 1) = v172;
        }
        *((void *)v170 + 2) = v171[2];
        uint64_t v46 = v396;
        uint64_t v279 = v50[14];
        uint64_t v280 = &v48[v279];
        uint64_t v281 = &v49[v279];
        uint64_t v282 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v283 = *(void *)(v282 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48))(v281, 1, v282))
        {
          uint64_t v284 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v280, v281, *(void *)(*(void *)(v284 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v283 + 16))(v280, v281, v282);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v283 + 56))(v280, 0, 1, v282);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v51 + 56))(v48, 0, 1, v50);
      }
      unint64_t v9 = v403;
      uint64_t v348 = *(int *)(v46 + 24);
      uint64_t v184 = &v15[v348];
      uint64_t v185 = &v16[v348];
      uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      int v5 = v399;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v349 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v349 - 8) + 16))(v184, v185, v349);
          char v350 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v351 = v350[9];
          uint64_t v352 = &v184[v351];
          uint64_t v353 = &v185[v351];
          uint64_t v354 = type metadata accessor for SymmetricKey();
          uint64_t v355 = *(void (**)(char *, char *, uint64_t))(*(void *)(v354 - 8) + 16);
          v356 = v353;
          int v5 = v399;
          v355(v352, v356, v354);
          v355(&v184[v350[10]], &v185[v350[10]], v354);
          v355(&v184[v350[11]], &v185[v350[11]], v354);
          uint64_t v357 = v354;
          unint64_t v9 = v403;
          v355(&v184[v350[12]], &v185[v350[12]], v357);
          goto LABEL_142;
        case 1u:
          uint64_t v358 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v358 - 8) + 16))(v184, v185, v358);
          v359 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v360 = v359[9];
          v361 = &v184[v360];
          v362 = &v185[v360];
          uint64_t v363 = type metadata accessor for SymmetricKey();
          v364 = *(void (**)(char *, char *, uint64_t))(*(void *)(v363 - 8) + 16);
          uint64_t v365 = v362;
          int v5 = v399;
          v364(v361, v365, v363);
          v364(&v184[v359[10]], &v185[v359[10]], v363);
          uint64_t v366 = v363;
          unint64_t v9 = v403;
          v364(&v184[v359[11]], &v185[v359[11]], v366);
          goto LABEL_142;
        case 2u:
          uint64_t v367 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v367 - 8) + 16))(v184, v185, v367);
          uint64_t v368 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v369 = v368[9];
          v370 = &v184[v369];
          uint64_t v371 = &v185[v369];
          uint64_t v372 = type metadata accessor for SymmetricKey();
          uint64_t v373 = *(void (**)(char *, char *, uint64_t))(*(void *)(v372 - 8) + 16);
          v374 = v371;
          int v5 = v399;
          v373(v370, v374, v372);
          v373(&v184[v368[10]], &v185[v368[10]], v372);
          v373(&v184[v368[11]], &v185[v368[11]], v372);
          v373(&v184[v368[12]], &v185[v368[12]], v372);
          v373(&v184[v368[13]], &v185[v368[13]], v372);
          uint64_t v375 = v372;
          unint64_t v9 = v403;
          v373(&v184[v368[14]], &v185[v368[14]], v375);
          goto LABEL_142;
        case 3u:
          uint64_t v376 = type metadata accessor for SymmetricKey();
          v377 = *(void (**)(char *, char *, uint64_t))(*(void *)(v376 - 8) + 16);
          v377(v184, v185, v376);
          v378 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v377(&v184[v378[9]], &v185[v378[9]], v376);
          v377(&v184[v378[10]], &v185[v378[10]], v376);
          v377(&v184[v378[11]], &v185[v378[11]], v376);
LABEL_142:
          swift_storeEnumTagMultiPayload();
          break;
        default:
LABEL_150:
          memcpy(v184, v185, *(void *)(*(void *)(v186 - 8) + 64));
          break;
      }
LABEL_157:
      long long v317 = v407;
      uint64_t v316 = v408;
LABEL_158:
      swift_storeEnumTagMultiPayload();
      uint64_t v379 = v317[7];
      long long v380 = *(_OWORD *)((char *)v316 + v379 + 24);
      *(_OWORD *)&v9[v379 + 24] = v380;
      (**(void (***)(void))(v380 - 8))();
      uint64_t v381 = v317[8];
      uint64_t v382 = &v9[v381];
      long long v383 = (_OWORD *)((char *)v316 + v381);
      long long v384 = v383[1];
      *(_OWORD *)uint64_t v382 = *v383;
      *((_OWORD *)v382 + 1) = v384;
      uint64_t v385 = v317[9];
      v386 = &v9[v385];
      uint64_t v387 = (uint64_t)v316 + v385;
      uint64_t v388 = *(void *)(v387 + 8);
      *(void *)v386 = *(void *)v387;
      *((void *)v386 + 1) = v388;
      *((void *)v386 + 2) = *(void *)(v387 + 16);
      unint64_t v389 = *(void *)(v387 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v389 >> 60 == 15)
      {
        *(_OWORD *)(v386 + 24) = *(_OWORD *)(v387 + 24);
      }
      else
      {
        uint64_t v390 = *(void *)(v387 + 24);
        outlined copy of Data._Representation(v390, v389);
        *((void *)v386 + 3) = v390;
        *((void *)v386 + 4) = v389;
      }
      *((void *)v386 + 5) = *(void *)(v387 + 40);
      unint64_t v391 = *(void *)(v387 + 56);
      if (v391 >> 60 == 15)
      {
        *((_OWORD *)v386 + 3) = *(_OWORD *)(v387 + 48);
      }
      else
      {
        uint64_t v392 = *(void *)(v387 + 48);
        outlined copy of Data._Representation(v392, *(void *)(v387 + 56));
        *((void *)v386 + 6) = v392;
        *((void *)v386 + 7) = v391;
      }
      *((void *)v386 + 8) = *(void *)(v387 + 64);
      *((_DWORD *)v386 + 18) = *(_DWORD *)(v387 + 72);
      return v5;
  }
}

uint64_t *assignWithCopy for ExportedAuthenticator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = (uint64_t *)a1;
  unint64_t v6 = a2[1];
  if (*(void *)(a1 + 8) >> 60 == 15)
  {
    if (v6 >> 60 == 15)
    {
      long long v7 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)a1 = v7;
      goto LABEL_10;
    }
    uint64_t v9 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *int v5 = v9;
    v5[1] = v6;
    goto LABEL_8;
  }
  if (v6 >> 60 != 15)
  {
    uint64_t v10 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    uint64_t v11 = *v5;
    unint64_t v12 = v5[1];
    *int v5 = v10;
    v5[1] = v6;
    outlined consume of Data._Representation(v11, v12);
LABEL_8:
    uint64_t v8 = a2[2];
    goto LABEL_9;
  }
  outlined destroy of ByteBuffer(a1);
  uint64_t v8 = a2[2];
  *(_OWORD *)int v5 = *(_OWORD *)a2;
LABEL_9:
  long long v5[2] = v8;
LABEL_10:
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t)v5 + v13;
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  unint64_t v16 = *(uint64_t *)((char *)a2 + v13 + 8);
  if (*(unint64_t *)((char *)v5 + v13 + 8) >> 60 == 15)
  {
    if (v16 >> 60 == 15)
    {
      long long v17 = *(_OWORD *)v15;
      *(void *)(v14 + 16) = v15[2];
      *(_OWORD *)uint64_t v14 = v17;
      goto LABEL_19;
    }
    uint64_t v19 = *v15;
    outlined copy of Data._Representation(*v15, v16);
    *(void *)uint64_t v14 = v19;
    *(void *)(v14 + 8) = v16;
    goto LABEL_17;
  }
  if (v16 >> 60 != 15)
  {
    uint64_t v20 = *v15;
    outlined copy of Data._Representation(*v15, v16);
    uint64_t v21 = *(void *)v14;
    unint64_t v22 = *(void *)(v14 + 8);
    *(void *)uint64_t v14 = v20;
    *(void *)(v14 + 8) = v16;
    outlined consume of Data._Representation(v21, v22);
LABEL_17:
    uint64_t v18 = v15[2];
    goto LABEL_18;
  }
  outlined destroy of ByteBuffer(v14);
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
LABEL_18:
  *(void *)(v14 + 16) = v18;
LABEL_19:
  uint64_t v23 = type metadata accessor for HandshakeStateMachine();
  unint64_t v24 = (int *)v23;
  if (v5 != a2)
  {
    v431 = v15;
    v432 = v5;
    v430 = (int *)v23;
    uint64_t v25 = *(int *)(v23 + 24);
    uint64_t v26 = v14 + v25;
    uint64_t v27 = (char *)v15 + v25;
    outlined destroy of HandshakeState(v14 + v25, type metadata accessor for HandshakeState);
    type metadata accessor for HandshakeState(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)uint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = *((void *)v27 + 1);
        *(void *)(v26 + 16) = *((void *)v27 + 2);
        unint64_t v30 = *((void *)v27 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30 >> 60 == 15)
        {
          long long v31 = *(_OWORD *)(v27 + 24);
          *(void *)(v26 + 40) = *((void *)v27 + 5);
          *(_OWORD *)(v26 + 24) = v31;
        }
        else
        {
          uint64_t v45 = *((void *)v27 + 3);
          outlined copy of Data._Representation(v45, v30);
          *(void *)(v26 + 24) = v45;
          *(void *)(v26 + 32) = v30;
          *(void *)(v26 + 40) = *((void *)v27 + 5);
        }
        unint64_t v46 = *((void *)v27 + 7);
        if (v46 >> 60 == 15)
        {
          long long v47 = *((_OWORD *)v27 + 3);
          *(void *)(v26 + 64) = *((void *)v27 + 8);
          *(_OWORD *)(v26 + 48) = v47;
        }
        else
        {
          uint64_t v72 = *((void *)v27 + 6);
          outlined copy of Data._Representation(v72, *((void *)v27 + 7));
          *(void *)(v26 + 48) = v72;
          *(void *)(v26 + 56) = v46;
          *(void *)(v26 + 64) = *((void *)v27 + 8);
        }
        __int16 v73 = *((_WORD *)v27 + 36);
        *(unsigned char *)(v26 + 74) = v27[74];
        *(_WORD *)(v26 + 72) = v73;
        *(unsigned char *)(v26 + 75) = v27[75];
        long long v74 = *((_OWORD *)v27 + 5);
        long long v75 = *((_OWORD *)v27 + 6);
        *(void *)(v26 + 112) = *((void *)v27 + 14);
        *(_OWORD *)(v26 + 80) = v74;
        *(_OWORD *)(v26 + 96) = v75;
        *(void *)(v26 + 120) = *((void *)v27 + 15);
        *(void *)(v26 + 128) = *((void *)v27 + 16);
        uint64_t v76 = *((void *)v27 + 20);
        *(void *)(v26 + 160) = v76;
        *(void *)(v26 + 168) = *((void *)v27 + 21);
        uint64_t v77 = **(void (***)(uint64_t, char *, uint64_t))(v76 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v77(v26 + 136, v27 + 136, v76);
        uint64_t v78 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v79 = *(int *)(v78 + 36);
        uint64_t v80 = (char *)(v26 + v79);
        uint64_t v81 = &v27[v79];
        uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v83 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v80, v81, v83);
            uint64_t v84 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v85 = v84[9];
            v415 = &v80[v85];
            unint64_t v86 = &v81[v85];
            uint64_t v421 = v78;
            uint64_t v87 = type metadata accessor for SymmetricKey();
            unint64_t v88 = *(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16);
            v88(v415, v86, v87);
            v88(&v80[v84[10]], &v81[v84[10]], v87);
            v88(&v80[v84[11]], &v81[v84[11]], v87);
            uint64_t v89 = v87;
            uint64_t v78 = v421;
            v88(&v80[v84[12]], &v81[v84[12]], v89);
            goto LABEL_117;
          case 1u:
            uint64_t v241 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 16))(v80, v81, v241);
            uint64_t v242 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v243 = v242[9];
            v416 = &v80[v243];
            uint64_t v244 = &v81[v243];
            uint64_t v423 = v78;
            uint64_t v245 = type metadata accessor for SymmetricKey();
            uint64_t v246 = *(void (**)(char *, char *, uint64_t))(*(void *)(v245 - 8) + 16);
            v246(v416, v244, v245);
            v246(&v80[v242[10]], &v81[v242[10]], v245);
            uint64_t v247 = v245;
            uint64_t v78 = v423;
            v246(&v80[v242[11]], &v81[v242[11]], v247);
            goto LABEL_117;
          case 2u:
            uint64_t v248 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v248 - 8) + 16))(v80, v81, v248);
            uint64_t v249 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v250 = v249[9];
            v417 = &v80[v250];
            uint64_t v251 = &v81[v250];
            uint64_t v424 = v78;
            uint64_t v252 = type metadata accessor for SymmetricKey();
            uint64_t v253 = *(void (**)(char *, char *, uint64_t))(*(void *)(v252 - 8) + 16);
            v253(v417, v251, v252);
            v253(&v80[v249[10]], &v81[v249[10]], v252);
            v253(&v80[v249[11]], &v81[v249[11]], v252);
            v253(&v80[v249[12]], &v81[v249[12]], v252);
            v253(&v80[v249[13]], &v81[v249[13]], v252);
            uint64_t v254 = v252;
            uint64_t v78 = v424;
            v253(&v80[v249[14]], &v81[v249[14]], v254);
            goto LABEL_117;
          case 3u:
            uint64_t v255 = type metadata accessor for SymmetricKey();
            uint64_t v256 = *(void (**)(char *, char *, uint64_t))(*(void *)(v255 - 8) + 16);
            v256(v80, v81, v255);
            uint64_t v257 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v256(&v80[v257[9]], &v81[v257[9]], v255);
            v256(&v80[v257[10]], &v81[v257[10]], v255);
            v256(&v80[v257[11]], &v81[v257[11]], v255);
LABEL_117:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v80, v81, *(void *)(*(void *)(v82 - 8) + 64));
            break;
        }
        uint64_t v258 = *(int *)(v78 + 40);
        uint64_t v259 = (char *)(v26 + v258);
        uint64_t v260 = &v27[v258];
        uint64_t v261 = (int *)type metadata accessor for SessionTicket();
        uint64_t v262 = (unsigned int (**)(void, uint64_t, int *))*((void *)v261 - 1);
        if (((unsigned int (**)(char *, uint64_t, int *))v262)[6](v260, 1, v261))
        {
          size_t v263 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                       - 8)
                           + 64);
          unint64_t v264 = v259;
          uint64_t v265 = v260;
LABEL_147:
          memcpy(v264, v265, v263);
        }
        else
        {
          __dstc = (void (**)(void *, void, uint64_t, int *))v262;
          uint64_t v266 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v266 - 8) + 16))(v259, v260, v266);
          *(_DWORD *)&v259[v261[5]] = *(_DWORD *)&v260[v261[5]];
          *(_DWORD *)&v259[v261[6]] = *(_DWORD *)&v260[v261[6]];
          uint64_t v267 = v261[7];
          uint64_t v268 = (uint64_t *)&v259[v267];
          unint64_t v269 = &v260[v267];
          uint64_t v270 = *(void *)&v260[v267];
          unint64_t v271 = *(void *)&v260[v267 + 8];
          outlined copy of Data._Representation(v270, v271);
          *uint64_t v268 = v270;
          v268[1] = v271;
          v268[2] = *((void *)v269 + 2);
          uint64_t v272 = v261[8];
          uint64_t v273 = (uint64_t *)&v259[v272];
          uint64_t v274 = &v260[v272];
          uint64_t v275 = *(void *)&v260[v272];
          unint64_t v276 = *(void *)&v260[v272 + 8];
          outlined copy of Data._Representation(v275, v276);
          *uint64_t v273 = v275;
          v273[1] = v276;
          v273[2] = *((void *)v274 + 2);
          uint64_t v277 = v261[9];
          uint64_t v278 = &v259[v277];
          uint64_t v279 = &v260[v277];
          uint64_t v280 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v280 - 8) + 16))(v278, v279, v280);
          *(_DWORD *)&v259[v261[10]] = *(_DWORD *)&v260[v261[10]];
          *(_WORD *)&v259[v261[11]] = *(_WORD *)&v260[v261[11]];
          *(_WORD *)&v259[v261[12]] = *(_WORD *)&v260[v261[12]];
          uint64_t v281 = v261[13];
          uint64_t v282 = &v259[v281];
          uint64_t v283 = (uint64_t *)&v260[v281];
          unint64_t v284 = *(void *)&v260[v281 + 8];
          if (v284 >> 60 == 15)
          {
            long long v285 = *(_OWORD *)v283;
            *((void *)v282 + 2) = v283[2];
            *(_OWORD *)uint64_t v282 = v285;
          }
          else
          {
            uint64_t v357 = *v283;
            outlined copy of Data._Representation(*v283, v284);
            *(void *)uint64_t v282 = v357;
            *((void *)v282 + 1) = v284;
            *((void *)v282 + 2) = v283[2];
          }
          uint64_t v358 = v261[14];
          v359 = &v259[v358];
          uint64_t v360 = &v260[v358];
          uint64_t v361 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v362 = *(void *)(v361 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v362 + 48))(v360, 1, v361))
          {
            uint64_t v363 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v359, v360, *(void *)(*(void *)(v363 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v362 + 16))(v359, v360, v361);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v362 + 56))(v359, 0, 1, v361);
          }
          __dstc[7](v259, 0, 1, v261);
        }
        goto LABEL_167;
      case 2u:
        *(void *)uint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = *((void *)v27 + 1);
        *(void *)(v26 + 16) = *((void *)v27 + 2);
        unint64_t v32 = *((void *)v27 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32 >> 60 == 15)
        {
          long long v33 = *(_OWORD *)(v27 + 24);
          *(void *)(v26 + 40) = *((void *)v27 + 5);
          *(_OWORD *)(v26 + 24) = v33;
        }
        else
        {
          uint64_t v48 = *((void *)v27 + 3);
          outlined copy of Data._Representation(v48, v32);
          *(void *)(v26 + 24) = v48;
          *(void *)(v26 + 32) = v32;
          *(void *)(v26 + 40) = *((void *)v27 + 5);
        }
        unint64_t v49 = *((void *)v27 + 7);
        if (v49 >> 60 == 15)
        {
          long long v50 = *((_OWORD *)v27 + 3);
          *(void *)(v26 + 64) = *((void *)v27 + 8);
          *(_OWORD *)(v26 + 48) = v50;
        }
        else
        {
          uint64_t v90 = *((void *)v27 + 6);
          outlined copy of Data._Representation(v90, *((void *)v27 + 7));
          *(void *)(v26 + 48) = v90;
          *(void *)(v26 + 56) = v49;
          *(void *)(v26 + 64) = *((void *)v27 + 8);
        }
        __int16 v91 = *((_WORD *)v27 + 36);
        *(unsigned char *)(v26 + 74) = v27[74];
        *(_WORD *)(v26 + 72) = v91;
        *(unsigned char *)(v26 + 75) = v27[75];
        uint64_t v92 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v93 = v92[5];
        uint64_t v94 = v26 + v93;
        uint64_t v95 = &v27[v93];
        type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        __dst = v92;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v96 = type metadata accessor for Date();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v96 - 8) + 16))(v94, v95, v96);
          uint64_t v97 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)(v94 + v97[5]) = *(_DWORD *)&v95[v97[5]];
          *(_DWORD *)(v94 + v97[6]) = *(_DWORD *)&v95[v97[6]];
          uint64_t v98 = v97[7];
          uint64_t v99 = (uint64_t *)(v94 + v98);
          uint64_t v100 = &v95[v98];
          uint64_t v101 = *(void *)&v95[v98];
          unint64_t v102 = *(void *)&v95[v98 + 8];
          outlined copy of Data._Representation(v101, v102);
          *uint64_t v99 = v101;
          v99[1] = v102;
          v99[2] = *((void *)v100 + 2);
          uint64_t v103 = v97[8];
          uint64_t v104 = (uint64_t *)(v94 + v103);
          os_log_type_t v105 = &v95[v103];
          uint64_t v106 = *(void *)&v95[v103];
          unint64_t v107 = *(void *)&v95[v103 + 8];
          outlined copy of Data._Representation(v106, v107);
          *uint64_t v104 = v106;
          v104[1] = v107;
          v104[2] = *((void *)v105 + 2);
          uint64_t v108 = v97[9];
          uint64_t v109 = v94 + v108;
          unint64_t v110 = &v95[v108];
          uint64_t v111 = type metadata accessor for SymmetricKey();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v111 - 8) + 16))(v109, v110, v111);
          *(_DWORD *)(v94 + v97[10]) = *(_DWORD *)&v95[v97[10]];
          *(_WORD *)(v94 + v97[11]) = *(_WORD *)&v95[v97[11]];
          *(_WORD *)(v94 + v97[12]) = *(_WORD *)&v95[v97[12]];
          uint64_t v112 = v97[13];
          uint64_t v113 = v94 + v112;
          uint64_t v114 = (uint64_t *)&v95[v112];
          unint64_t v115 = *(void *)&v95[v112 + 8];
          if (v115 >> 60 == 15)
          {
            long long v116 = *(_OWORD *)v114;
            *(void *)(v113 + 16) = v114[2];
            *(_OWORD *)uint64_t v113 = v116;
          }
          else
          {
            uint64_t v227 = *v114;
            outlined copy of Data._Representation(*v114, v115);
            *(void *)uint64_t v113 = v227;
            *(void *)(v113 + 8) = v115;
            *(void *)(v113 + 16) = v114[2];
          }
          uint64_t v228 = v97[14];
          uint64_t v229 = (void *)(v94 + v228);
          uint64_t v230 = &v95[v228];
          uint64_t v231 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v232 = *(void *)(v231 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v230, 1, v231))
          {
            uint64_t v233 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v229, v230, *(void *)(*(void *)(v233 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v232 + 16))(v229, v230, v231);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v232 + 56))(v229, 0, 1, v231);
          }
          uint64_t v92 = __dst;
        }
        else
        {
          *(_WORD *)uint64_t v94 = *(_WORD *)v95;
          *(_WORD *)(v94 + 2) = *((_WORD *)v95 + 1);
          *(void *)(v94 + 8) = *((void *)v95 + 1);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v292 = v92[6];
        uint64_t v293 = (char *)(v26 + v292);
        uint64_t v294 = &v27[v292];
        uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v296 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v296 - 8) + 16))(v293, v294, v296);
            uint64_t v297 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v298 = v297[9];
            v418 = &v293[v298];
            uint64_t v299 = &v294[v298];
            uint64_t v300 = type metadata accessor for SymmetricKey();
            uint64_t v301 = *(void (**)(char *, char *, uint64_t))(*(void *)(v300 - 8) + 16);
            v301(v418, v299, v300);
            v301(&v293[v297[10]], &v294[v297[10]], v300);
            v301(&v293[v297[11]], &v294[v297[11]], v300);
            v301(&v293[v297[12]], &v294[v297[12]], v300);
            uint64_t v92 = __dst;
            goto LABEL_133;
          case 1u:
            uint64_t v302 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16))(v293, v294, v302);
            uint64_t v303 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v304 = v303[9];
            v419 = &v293[v304];
            uint64_t v305 = &v294[v304];
            uint64_t v306 = type metadata accessor for SymmetricKey();
            uint64_t v307 = *(void (**)(char *, char *, uint64_t))(*(void *)(v306 - 8) + 16);
            v307(v419, v305, v306);
            v307(&v293[v303[10]], &v294[v303[10]], v306);
            v307(&v293[v303[11]], &v294[v303[11]], v306);
            uint64_t v92 = __dst;
            goto LABEL_133;
          case 2u:
            uint64_t v308 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v308 - 8) + 16))(v293, v294, v308);
            uint64_t v309 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v310 = v309[9];
            v420 = &v293[v310];
            uint64_t v311 = &v294[v310];
            uint64_t v312 = type metadata accessor for SymmetricKey();
            uint64_t v313 = *(void (**)(char *, char *, uint64_t))(*(void *)(v312 - 8) + 16);
            v313(v420, v311, v312);
            v313(&v293[v309[10]], &v294[v309[10]], v312);
            v313(&v293[v309[11]], &v294[v309[11]], v312);
            v313(&v293[v309[12]], &v294[v309[12]], v312);
            v313(&v293[v309[13]], &v294[v309[13]], v312);
            v313(&v293[v309[14]], &v294[v309[14]], v312);
            uint64_t v92 = __dst;
            goto LABEL_133;
          case 3u:
            uint64_t v314 = type metadata accessor for SymmetricKey();
            unint64_t v315 = *(void (**)(char *, char *, uint64_t))(*(void *)(v314 - 8) + 16);
            v315(v293, v294, v314);
            uint64_t v316 = v92;
            long long v317 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v315(&v293[v317[9]], &v294[v317[9]], v314);
            v315(&v293[v317[10]], &v294[v317[10]], v314);
            uint64_t v318 = v317[11];
            uint64_t v92 = v316;
            v315(&v293[v318], &v294[v318], v314);
LABEL_133:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v293, v294, *(void *)(*(void *)(v295 - 8) + 64));
            break;
        }
        unint64_t v24 = v430;
        *(_WORD *)(v26 + v92[7]) = *(_WORD *)&v27[v92[7]];
        *(_WORD *)(v26 + v92[8]) = *(_WORD *)&v27[v92[8]];
        uint64_t v15 = v431;
        int v5 = v432;
        goto LABEL_168;
      case 3u:
        *(void *)uint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = *((void *)v27 + 1);
        *(void *)(v26 + 16) = *((void *)v27 + 2);
        unint64_t v34 = *((void *)v27 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v34 >> 60 == 15)
        {
          long long v35 = *(_OWORD *)(v27 + 24);
          *(void *)(v26 + 40) = *((void *)v27 + 5);
          *(_OWORD *)(v26 + 24) = v35;
        }
        else
        {
          uint64_t v51 = *((void *)v27 + 3);
          outlined copy of Data._Representation(v51, v34);
          *(void *)(v26 + 24) = v51;
          *(void *)(v26 + 32) = v34;
          *(void *)(v26 + 40) = *((void *)v27 + 5);
        }
        unint64_t v52 = *((void *)v27 + 7);
        if (v52 >> 60 == 15)
        {
          long long v53 = *((_OWORD *)v27 + 3);
          *(void *)(v26 + 64) = *((void *)v27 + 8);
          *(_OWORD *)(v26 + 48) = v53;
        }
        else
        {
          uint64_t v117 = *((void *)v27 + 6);
          outlined copy of Data._Representation(v117, *((void *)v27 + 7));
          *(void *)(v26 + 48) = v117;
          *(void *)(v26 + 56) = v52;
          *(void *)(v26 + 64) = *((void *)v27 + 8);
        }
        __int16 v118 = *((_WORD *)v27 + 36);
        *(unsigned char *)(v26 + 74) = v27[74];
        *(_WORD *)(v26 + 72) = v118;
        *(unsigned char *)(v26 + 75) = v27[75];
        uint64_t v119 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v120 = v119[5];
        uint64_t v121 = v26 + v120;
        uint64_t v122 = &v27[v120];
        type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          __dsta = v119;
          uint64_t v123 = type metadata accessor for Date();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v123 - 8) + 16))(v121, v122, v123);
          unint64_t v124 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)(v121 + v124[5]) = *(_DWORD *)&v122[v124[5]];
          *(_DWORD *)(v121 + v124[6]) = *(_DWORD *)&v122[v124[6]];
          uint64_t v125 = v124[7];
          int v126 = (uint64_t *)(v121 + v125);
          unint64_t v127 = &v122[v125];
          uint64_t v128 = *(void *)&v122[v125];
          unint64_t v129 = *(void *)&v122[v125 + 8];
          outlined copy of Data._Representation(v128, v129);
          *int v126 = v128;
          v126[1] = v129;
          v126[2] = *((void *)v127 + 2);
          uint64_t v130 = v124[8];
          uint64_t v131 = (uint64_t *)(v121 + v130);
          uint64_t v132 = &v122[v130];
          uint64_t v133 = *(void *)&v122[v130];
          unint64_t v134 = *(void *)&v122[v130 + 8];
          outlined copy of Data._Representation(v133, v134);
          *uint64_t v131 = v133;
          v131[1] = v134;
          v131[2] = *((void *)v132 + 2);
          uint64_t v135 = v124[9];
          uint64_t v136 = v121 + v135;
          uint64_t v137 = &v122[v135];
          uint64_t v138 = type metadata accessor for SymmetricKey();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v136, v137, v138);
          *(_DWORD *)(v121 + v124[10]) = *(_DWORD *)&v122[v124[10]];
          *(_WORD *)(v121 + v124[11]) = *(_WORD *)&v122[v124[11]];
          *(_WORD *)(v121 + v124[12]) = *(_WORD *)&v122[v124[12]];
          uint64_t v139 = v124[13];
          uint64_t v140 = v121 + v139;
          uint64_t v141 = (uint64_t *)&v122[v139];
          unint64_t v142 = *(void *)&v122[v139 + 8];
          if (v142 >> 60 == 15)
          {
            long long v143 = *(_OWORD *)v141;
            *(void *)(v140 + 16) = v141[2];
            *(_OWORD *)uint64_t v140 = v143;
          }
          else
          {
            uint64_t v234 = *v141;
            outlined copy of Data._Representation(*v141, v142);
            *(void *)uint64_t v140 = v234;
            *(void *)(v140 + 8) = v142;
            *(void *)(v140 + 16) = v141[2];
          }
          uint64_t v235 = v124[14];
          uint64_t v236 = (void *)(v121 + v235);
          uint64_t v237 = &v122[v235];
          uint64_t v238 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v239 = *(void *)(v238 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238))
          {
            uint64_t v240 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v236, v237, *(void *)(*(void *)(v240 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v239 + 16))(v236, v237, v238);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v239 + 56))(v236, 0, 1, v238);
          }
          uint64_t v119 = __dsta;
        }
        else
        {
          *(_WORD *)uint64_t v121 = *(_WORD *)v122;
          *(_WORD *)(v121 + 2) = *((_WORD *)v122 + 1);
          *(unsigned char *)(v121 + 4) = v122[4];
          *(void *)(v121 + 8) = *((void *)v122 + 1);
          *(void *)(v121 + 16) = *((void *)v122 + 2);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v319 = v119[6];
        uint64_t v320 = v26 + v319;
        unint64_t v321 = (uint64_t *)&v27[v319];
        unint64_t v322 = *(void *)&v27[v319 + 8];
        if (v322 >> 60 == 15)
        {
          long long v323 = *(_OWORD *)v321;
          *(void *)(v320 + 16) = v321[2];
          *(_OWORD *)uint64_t v320 = v323;
        }
        else
        {
          uint64_t v324 = *v321;
          outlined copy of Data._Representation(*v321, v322);
          *(void *)uint64_t v320 = v324;
          *(void *)(v320 + 8) = v322;
          *(void *)(v320 + 16) = v321[2];
        }
        uint64_t v325 = v119[7];
        uint64_t v326 = v26 + v325;
        uint64_t v327 = (uint64_t *)&v27[v325];
        unint64_t v328 = *(void *)&v27[v325 + 8];
        if (v328 >> 60 == 15)
        {
          long long v329 = *(_OWORD *)v327;
          *(void *)(v326 + 16) = v327[2];
          *(_OWORD *)uint64_t v326 = v329;
        }
        else
        {
          uint64_t v330 = *v327;
          outlined copy of Data._Representation(*v327, v328);
          *(void *)uint64_t v326 = v330;
          *(void *)(v326 + 8) = v328;
          *(void *)(v326 + 16) = v327[2];
        }
        *(unsigned char *)(v26 + v119[8]) = v27[v119[8]];
        uint64_t v331 = v119[9];
        uint64_t v210 = (char *)(v26 + v331);
        uint64_t v211 = &v27[v331];
        uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_144;
          case 1u:
            goto LABEL_148;
          case 2u:
            goto LABEL_150;
          case 3u:
            goto LABEL_152;
          default:
            goto LABEL_146;
        }
      case 4u:
        *(void *)uint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = *((void *)v27 + 1);
        *(void *)(v26 + 16) = *((void *)v27 + 2);
        unint64_t v36 = *((void *)v27 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36 >> 60 == 15)
        {
          long long v37 = *(_OWORD *)(v27 + 24);
          *(void *)(v26 + 40) = *((void *)v27 + 5);
          *(_OWORD *)(v26 + 24) = v37;
        }
        else
        {
          uint64_t v54 = *((void *)v27 + 3);
          outlined copy of Data._Representation(v54, v36);
          *(void *)(v26 + 24) = v54;
          *(void *)(v26 + 32) = v36;
          *(void *)(v26 + 40) = *((void *)v27 + 5);
        }
        unint64_t v55 = *((void *)v27 + 7);
        if (v55 >> 60 == 15)
        {
          long long v56 = *((_OWORD *)v27 + 3);
          *(void *)(v26 + 64) = *((void *)v27 + 8);
          *(_OWORD *)(v26 + 48) = v56;
        }
        else
        {
          uint64_t v144 = *((void *)v27 + 6);
          outlined copy of Data._Representation(v144, *((void *)v27 + 7));
          *(void *)(v26 + 48) = v144;
          *(void *)(v26 + 56) = v55;
          *(void *)(v26 + 64) = *((void *)v27 + 8);
        }
        __int16 v145 = *((_WORD *)v27 + 36);
        *(unsigned char *)(v26 + 74) = v27[74];
        *(_WORD *)(v26 + 72) = v145;
        *(unsigned char *)(v26 + 75) = v27[75];
        *(_WORD *)(v26 + 76) = *((_WORD *)v27 + 38);
        *(_WORD *)(v26 + 78) = *((_WORD *)v27 + 39);
        unint64_t v146 = *((void *)v27 + 11);
        if (v146 >> 60 == 15)
        {
          long long v147 = *((_OWORD *)v27 + 5);
          *(void *)(v26 + 96) = *((void *)v27 + 12);
          *(_OWORD *)(v26 + 80) = v147;
        }
        else
        {
          uint64_t v166 = *((void *)v27 + 10);
          outlined copy of Data._Representation(v166, *((void *)v27 + 11));
          *(void *)(v26 + 80) = v166;
          *(void *)(v26 + 88) = v146;
          *(void *)(v26 + 96) = *((void *)v27 + 12);
        }
        unint64_t v167 = *((void *)v27 + 14);
        if (v167 >> 60 == 15)
        {
          long long v168 = *(_OWORD *)(v27 + 104);
          *(void *)(v26 + 120) = *((void *)v27 + 15);
          *(_OWORD *)(v26 + 104) = v168;
        }
        else
        {
          uint64_t v169 = *((void *)v27 + 13);
          outlined copy of Data._Representation(v169, *((void *)v27 + 14));
          *(void *)(v26 + 104) = v169;
          *(void *)(v26 + 112) = v167;
          *(void *)(v26 + 120) = *((void *)v27 + 15);
        }
        *(unsigned char *)(v26 + 128) = v27[128];
        uint64_t v170 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v171 = *(int *)(v170 + 40);
        unint64_t v172 = (void *)(v26 + v171);
        uint64_t v173 = &v27[v171];
        uint64_t v174 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v175 = *(void *)(v174 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(v173, 1, v174))
        {
          uint64_t v176 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v172, v173, *(void *)(*(void *)(v176 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v175 + 16))(v172, v173, v174);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v174);
        }
        uint64_t v226 = *(int *)(v170 + 44);
        uint64_t v210 = (char *)(v26 + v226);
        uint64_t v211 = &v27[v226];
        uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_144;
          case 1u:
            goto LABEL_148;
          case 2u:
            goto LABEL_150;
          case 3u:
            goto LABEL_152;
          default:
            goto LABEL_146;
        }
      case 5u:
        *(void *)uint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = *((void *)v27 + 1);
        *(void *)(v26 + 16) = *((void *)v27 + 2);
        unint64_t v38 = *((void *)v27 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v38 >> 60 == 15)
        {
          long long v39 = *(_OWORD *)(v27 + 24);
          *(void *)(v26 + 40) = *((void *)v27 + 5);
          *(_OWORD *)(v26 + 24) = v39;
        }
        else
        {
          uint64_t v57 = *((void *)v27 + 3);
          outlined copy of Data._Representation(v57, v38);
          *(void *)(v26 + 24) = v57;
          *(void *)(v26 + 32) = v38;
          *(void *)(v26 + 40) = *((void *)v27 + 5);
        }
        unint64_t v58 = *((void *)v27 + 7);
        if (v58 >> 60 == 15)
        {
          long long v59 = *((_OWORD *)v27 + 3);
          *(void *)(v26 + 64) = *((void *)v27 + 8);
          *(_OWORD *)(v26 + 48) = v59;
        }
        else
        {
          uint64_t v148 = *((void *)v27 + 6);
          outlined copy of Data._Representation(v148, *((void *)v27 + 7));
          *(void *)(v26 + 48) = v148;
          *(void *)(v26 + 56) = v58;
          *(void *)(v26 + 64) = *((void *)v27 + 8);
        }
        __int16 v149 = *((_WORD *)v27 + 36);
        *(unsigned char *)(v26 + 74) = v27[74];
        *(_WORD *)(v26 + 72) = v149;
        *(unsigned char *)(v26 + 75) = v27[75];
        *(_WORD *)(v26 + 76) = *((_WORD *)v27 + 38);
        *(_WORD *)(v26 + 78) = *((_WORD *)v27 + 39);
        uint64_t v150 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v151 = v150[7];
        uint64_t v152 = (void *)(v26 + v151);
        uint64_t v153 = &v27[v151];
        uint64_t v154 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v155 = *(void *)(v154 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
        {
          uint64_t v156 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v155 + 16))(v152, v153, v154);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
        }
        uint64_t v197 = v150[8];
        uint64_t v198 = v26 + v197;
        uint64_t v199 = (uint64_t *)&v27[v197];
        unint64_t v200 = *(void *)&v27[v197 + 8];
        if (v200 >> 60 == 15)
        {
          long long v201 = *(_OWORD *)v199;
          *(void *)(v198 + 16) = v199[2];
          *(_OWORD *)uint64_t v198 = v201;
        }
        else
        {
          uint64_t v202 = *v199;
          outlined copy of Data._Representation(*v199, v200);
          *(void *)uint64_t v198 = v202;
          *(void *)(v198 + 8) = v200;
          *(void *)(v198 + 16) = v199[2];
        }
        uint64_t v203 = v150[9];
        uint64_t v204 = v26 + v203;
        int v205 = (uint64_t *)&v27[v203];
        unint64_t v206 = *(void *)&v27[v203 + 8];
        if (v206 >> 60 == 15)
        {
          long long v207 = *(_OWORD *)v205;
          *(void *)(v204 + 16) = v205[2];
          *(_OWORD *)uint64_t v204 = v207;
        }
        else
        {
          uint64_t v208 = *v205;
          outlined copy of Data._Representation(*v205, v206);
          *(void *)uint64_t v204 = v208;
          *(void *)(v204 + 8) = v206;
          *(void *)(v204 + 16) = v205[2];
        }
        *(unsigned char *)(v26 + v150[10]) = v27[v150[10]];
        uint64_t v209 = v150[11];
        uint64_t v210 = (char *)(v26 + v209);
        uint64_t v211 = &v27[v209];
        uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_144;
          case 1u:
            goto LABEL_148;
          case 2u:
            goto LABEL_150;
          case 3u:
            goto LABEL_152;
          default:
            goto LABEL_146;
        }
      case 6u:
        *(void *)uint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = *((void *)v27 + 1);
        *(void *)(v26 + 16) = *((void *)v27 + 2);
        unint64_t v40 = *((void *)v27 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v40 >> 60 == 15)
        {
          long long v41 = *(_OWORD *)(v27 + 24);
          *(void *)(v26 + 40) = *((void *)v27 + 5);
          *(_OWORD *)(v26 + 24) = v41;
        }
        else
        {
          uint64_t v60 = *((void *)v27 + 3);
          outlined copy of Data._Representation(v60, v40);
          *(void *)(v26 + 24) = v60;
          *(void *)(v26 + 32) = v40;
          *(void *)(v26 + 40) = *((void *)v27 + 5);
        }
        unint64_t v61 = *((void *)v27 + 7);
        if (v61 >> 60 == 15)
        {
          long long v62 = *((_OWORD *)v27 + 3);
          *(void *)(v26 + 64) = *((void *)v27 + 8);
          *(_OWORD *)(v26 + 48) = v62;
        }
        else
        {
          uint64_t v157 = *((void *)v27 + 6);
          outlined copy of Data._Representation(v157, *((void *)v27 + 7));
          *(void *)(v26 + 48) = v157;
          *(void *)(v26 + 56) = v61;
          *(void *)(v26 + 64) = *((void *)v27 + 8);
        }
        __int16 v158 = *((_WORD *)v27 + 36);
        *(unsigned char *)(v26 + 74) = v27[74];
        *(_WORD *)(v26 + 72) = v158;
        *(unsigned char *)(v26 + 75) = v27[75];
        *(_WORD *)(v26 + 76) = *((_WORD *)v27 + 38);
        *(_WORD *)(v26 + 78) = *((_WORD *)v27 + 39);
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v160 = ready[7];
        unint64_t v161 = (void *)(v26 + v160);
        uint64_t v162 = &v27[v160];
        uint64_t v163 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v164 = *(void *)(v163 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
        {
          uint64_t v165 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v161, v162, *(void *)(*(void *)(v165 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v164 + 16))(v161, v162, v163);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
        }
        uint64_t v213 = ready[8];
        uint64_t v214 = v26 + v213;
        uint64_t v215 = (uint64_t *)&v27[v213];
        unint64_t v216 = *(void *)&v27[v213 + 8];
        if (v216 >> 60 == 15)
        {
          long long v217 = *(_OWORD *)v215;
          *(void *)(v214 + 16) = v215[2];
          *(_OWORD *)uint64_t v214 = v217;
        }
        else
        {
          uint64_t v218 = *v215;
          outlined copy of Data._Representation(*v215, v216);
          *(void *)uint64_t v214 = v218;
          *(void *)(v214 + 8) = v216;
          *(void *)(v214 + 16) = v215[2];
        }
        uint64_t v219 = ready[9];
        uint64_t v220 = v26 + v219;
        uint64_t v221 = (uint64_t *)&v27[v219];
        unint64_t v222 = *(void *)&v27[v219 + 8];
        if (v222 >> 60 == 15)
        {
          long long v223 = *(_OWORD *)v221;
          *(void *)(v220 + 16) = v221[2];
          *(_OWORD *)uint64_t v220 = v223;
        }
        else
        {
          uint64_t v224 = *v221;
          outlined copy of Data._Representation(*v221, v222);
          *(void *)uint64_t v220 = v224;
          *(void *)(v220 + 8) = v222;
          *(void *)(v220 + 16) = v221[2];
        }
        *(unsigned char *)(v26 + ready[10]) = v27[ready[10]];
        uint64_t v225 = ready[11];
        uint64_t v210 = (char *)(v26 + v225);
        uint64_t v211 = &v27[v225];
        uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
LABEL_144:
            uint64_t v332 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v332 - 8) + 16))(v210, v211, v332);
            uint64_t v333 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v334 = v333[9];
            uint64_t v335 = &v210[v334];
            uint64_t v336 = &v211[v334];
            uint64_t v337 = type metadata accessor for SymmetricKey();
            uint64_t v338 = *(void (**)(char *, char *, uint64_t))(*(void *)(v337 - 8) + 16);
            v338(v335, v336, v337);
            v338(&v210[v333[10]], &v211[v333[10]], v337);
            v338(&v210[v333[11]], &v211[v333[11]], v337);
            uint64_t v339 = v333[12];
            uint64_t v340 = &v210[v339];
            uint64_t v341 = &v211[v339];
            goto LABEL_151;
          case 1u:
LABEL_148:
            uint64_t v342 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v342 - 8) + 16))(v210, v211, v342);
            uint64_t v343 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v344 = v343[9];
            uint64_t v345 = &v210[v344];
            uint64_t v346 = &v211[v344];
            uint64_t v337 = type metadata accessor for SymmetricKey();
            uint64_t v338 = *(void (**)(char *, char *, uint64_t))(*(void *)(v337 - 8) + 16);
            v338(v345, v346, v337);
            v338(&v210[v343[10]], &v211[v343[10]], v337);
            uint64_t v347 = v343[11];
            uint64_t v340 = &v210[v347];
            uint64_t v341 = &v211[v347];
            goto LABEL_151;
          case 2u:
LABEL_150:
            uint64_t v348 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v348 - 8) + 16))(v210, v211, v348);
            uint64_t v349 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v350 = v349[9];
            uint64_t v351 = &v210[v350];
            uint64_t v352 = &v211[v350];
            uint64_t v337 = type metadata accessor for SymmetricKey();
            uint64_t v338 = *(void (**)(char *, char *, uint64_t))(*(void *)(v337 - 8) + 16);
            v338(v351, v352, v337);
            v338(&v210[v349[10]], &v211[v349[10]], v337);
            v338(&v210[v349[11]], &v211[v349[11]], v337);
            v338(&v210[v349[12]], &v211[v349[12]], v337);
            v338(&v210[v349[13]], &v211[v349[13]], v337);
            uint64_t v353 = v349[14];
            uint64_t v340 = &v210[v353];
            uint64_t v341 = &v211[v353];
            goto LABEL_151;
          case 3u:
LABEL_152:
            uint64_t v354 = type metadata accessor for SymmetricKey();
            uint64_t v355 = *(void (**)(char *, char *, uint64_t))(*(void *)(v354 - 8) + 16);
            v355(v210, v211, v354);
            v356 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v355(&v210[v356[9]], &v211[v356[9]], v354);
            v355(&v210[v356[10]], &v211[v356[10]], v354);
            v355(&v210[v356[11]], &v211[v356[11]], v354);
            goto LABEL_153;
          default:
LABEL_146:
            size_t v263 = *(void *)(*(void *)(v212 - 8) + 64);
            unint64_t v264 = v210;
            uint64_t v265 = v211;
            goto LABEL_147;
        }
      default:
        *(void *)uint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = *((void *)v27 + 1);
        *(void *)(v26 + 16) = *((void *)v27 + 2);
        unint64_t v28 = *((void *)v27 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v28 >> 60 == 15)
        {
          long long v29 = *(_OWORD *)(v27 + 24);
          *(void *)(v26 + 40) = *((void *)v27 + 5);
          *(_OWORD *)(v26 + 24) = v29;
        }
        else
        {
          uint64_t v42 = *((void *)v27 + 3);
          outlined copy of Data._Representation(v42, v28);
          *(void *)(v26 + 24) = v42;
          *(void *)(v26 + 32) = v28;
          *(void *)(v26 + 40) = *((void *)v27 + 5);
        }
        unint64_t v43 = *((void *)v27 + 7);
        if (v43 >> 60 == 15)
        {
          long long v44 = *((_OWORD *)v27 + 3);
          *(void *)(v26 + 64) = *((void *)v27 + 8);
          *(_OWORD *)(v26 + 48) = v44;
        }
        else
        {
          uint64_t v63 = *((void *)v27 + 6);
          outlined copy of Data._Representation(v63, *((void *)v27 + 7));
          *(void *)(v26 + 48) = v63;
          *(void *)(v26 + 56) = v43;
          *(void *)(v26 + 64) = *((void *)v27 + 8);
        }
        __int16 v64 = *((_WORD *)v27 + 36);
        *(unsigned char *)(v26 + 74) = v27[74];
        *(_WORD *)(v26 + 72) = v64;
        *(unsigned char *)(v26 + 75) = v27[75];
        uint64_t v65 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v66 = *(int *)(v65 + 20);
        unint64_t v67 = (char *)(v26 + v66);
        unint64_t v68 = &v27[v66];
        uint64_t v69 = (int *)type metadata accessor for SessionTicket();
        uint64_t v70 = *((void *)v69 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v70 + 48))(v68, 1, v69))
        {
          uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          uint64_t v422 = v70;
          __dstb = (void *)v65;
          uint64_t v177 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v177 - 8) + 16))(v67, v68, v177);
          *(_DWORD *)&v67[v69[5]] = *(_DWORD *)&v68[v69[5]];
          *(_DWORD *)&v67[v69[6]] = *(_DWORD *)&v68[v69[6]];
          uint64_t v178 = v69[7];
          uint64_t v179 = (uint64_t *)&v67[v178];
          uint64_t v180 = &v68[v178];
          uint64_t v181 = *(void *)&v68[v178];
          unint64_t v182 = *(void *)&v68[v178 + 8];
          outlined copy of Data._Representation(v181, v182);
          *uint64_t v179 = v181;
          v179[1] = v182;
          v179[2] = *((void *)v180 + 2);
          uint64_t v183 = v69[8];
          uint64_t v184 = (uint64_t *)&v67[v183];
          uint64_t v185 = &v68[v183];
          uint64_t v186 = *(void *)&v68[v183];
          unint64_t v187 = *(void *)&v68[v183 + 8];
          outlined copy of Data._Representation(v186, v187);
          *uint64_t v184 = v186;
          v184[1] = v187;
          v184[2] = *((void *)v185 + 2);
          uint64_t v188 = v69[9];
          uint64_t v189 = &v67[v188];
          unint64_t v190 = &v68[v188];
          uint64_t v191 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v191 - 8) + 16))(v189, v190, v191);
          *(_DWORD *)&v67[v69[10]] = *(_DWORD *)&v68[v69[10]];
          *(_WORD *)&v67[v69[11]] = *(_WORD *)&v68[v69[11]];
          *(_WORD *)&v67[v69[12]] = *(_WORD *)&v68[v69[12]];
          uint64_t v192 = v69[13];
          uint64_t v193 = &v67[v192];
          uint64_t v194 = (uint64_t *)&v68[v192];
          unint64_t v195 = *(void *)&v68[v192 + 8];
          if (v195 >> 60 == 15)
          {
            long long v196 = *(_OWORD *)v194;
            *((void *)v193 + 2) = v194[2];
            *(_OWORD *)uint64_t v193 = v196;
          }
          else
          {
            uint64_t v286 = *v194;
            outlined copy of Data._Representation(*v194, v195);
            *(void *)uint64_t v193 = v286;
            *((void *)v193 + 1) = v195;
            *((void *)v193 + 2) = v194[2];
          }
          uint64_t v65 = (uint64_t)__dstb;
          uint64_t v287 = v69[14];
          __dstd = &v67[v287];
          uint64_t v288 = &v68[v287];
          uint64_t v289 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v290 = *(void *)(v289 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v290 + 48))(v288, 1, v289))
          {
            uint64_t v291 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(__dstd, v288, *(void *)(*(void *)(v291 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v290 + 16))(__dstd, v288, v289);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v290 + 56))(__dstd, 0, 1, v289);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v422 + 56))(v67, 0, 1, v69);
        }
        uint64_t v364 = *(int *)(v65 + 24);
        uint64_t v365 = (char *)(v26 + v364);
        uint64_t v366 = &v27[v364];
        uint64_t v367 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v368 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v368 - 8) + 16))(v365, v366, v368);
            uint64_t v369 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v370 = v369[9];
            uint64_t v371 = &v365[v370];
            uint64_t v372 = &v366[v370];
            uint64_t v337 = type metadata accessor for SymmetricKey();
            uint64_t v338 = *(void (**)(char *, char *, uint64_t))(*(void *)(v337 - 8) + 16);
            v338(v371, v372, v337);
            v338(&v365[v369[10]], &v366[v369[10]], v337);
            v338(&v365[v369[11]], &v366[v369[11]], v337);
            uint64_t v373 = v369[12];
            uint64_t v340 = &v365[v373];
            uint64_t v341 = &v366[v373];
            goto LABEL_151;
          case 1u:
            uint64_t v374 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v374 - 8) + 16))(v365, v366, v374);
            uint64_t v375 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v376 = v375[9];
            v377 = &v365[v376];
            v378 = &v366[v376];
            uint64_t v337 = type metadata accessor for SymmetricKey();
            uint64_t v338 = *(void (**)(char *, char *, uint64_t))(*(void *)(v337 - 8) + 16);
            v338(v377, v378, v337);
            v338(&v365[v375[10]], &v366[v375[10]], v337);
            uint64_t v379 = v375[11];
            uint64_t v340 = &v365[v379];
            uint64_t v341 = &v366[v379];
            goto LABEL_151;
          case 2u:
            uint64_t v380 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v380 - 8) + 16))(v365, v366, v380);
            uint64_t v381 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v382 = v381[9];
            long long v383 = &v365[v382];
            long long v384 = &v366[v382];
            uint64_t v337 = type metadata accessor for SymmetricKey();
            uint64_t v338 = *(void (**)(char *, char *, uint64_t))(*(void *)(v337 - 8) + 16);
            v338(v383, v384, v337);
            v338(&v365[v381[10]], &v366[v381[10]], v337);
            v338(&v365[v381[11]], &v366[v381[11]], v337);
            v338(&v365[v381[12]], &v366[v381[12]], v337);
            v338(&v365[v381[13]], &v366[v381[13]], v337);
            uint64_t v385 = v381[14];
            uint64_t v340 = &v365[v385];
            uint64_t v341 = &v366[v385];
LABEL_151:
            v338(v340, v341, v337);
            swift_storeEnumTagMultiPayload();
            break;
          case 3u:
            uint64_t v386 = type metadata accessor for SymmetricKey();
            uint64_t v387 = *(void (**)(char *, char *, uint64_t))(*(void *)(v386 - 8) + 16);
            v387(v365, v366, v386);
            uint64_t v388 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v387(&v365[v388[9]], &v366[v388[9]], v386);
            v387(&v365[v388[10]], &v366[v388[10]], v386);
            v387(&v365[v388[11]], &v366[v388[11]], v386);
LABEL_153:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            size_t v263 = *(void *)(*(void *)(v367 - 8) + 64);
            unint64_t v264 = v365;
            uint64_t v265 = v366;
            goto LABEL_147;
        }
LABEL_167:
        uint64_t v15 = v431;
        int v5 = v432;
        unint64_t v24 = v430;
LABEL_168:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v14 + v24[7]), (uint64_t *)((char *)v15 + v24[7]));
  uint64_t v389 = v24[8];
  uint64_t v390 = (void *)(v14 + v389);
  unint64_t v391 = (uint64_t *)((char *)v15 + v389);
  *uint64_t v390 = *v391;
  v390[1] = v391[1];
  v390[2] = v391[2];
  v390[3] = v391[3];
  uint64_t v392 = v24[9];
  uint64_t v393 = v14 + v392;
  uint64_t v394 = (char *)v15 + v392;
  *(void *)uint64_t v393 = *(uint64_t *)((char *)v15 + v392);
  *(void *)(v393 + 8) = *(uint64_t *)((char *)v15 + v392 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v393 + 16) = *((void *)v394 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v395 = (long long *)(v393 + 24);
  uint64_t v396 = (long long *)(v394 + 24);
  unint64_t v397 = *((void *)v394 + 4);
  if (*(void *)(v393 + 32) >> 60 == 15)
  {
    if (v397 >> 60 == 15)
    {
      long long v398 = *v396;
      *(void *)(v393 + 40) = *((void *)v394 + 5);
      *uint64_t v395 = v398;
      goto LABEL_177;
    }
    uint64_t v400 = *((void *)v394 + 3);
    outlined copy of Data._Representation(v400, *((void *)v394 + 4));
    *(void *)(v393 + 24) = v400;
    *(void *)(v393 + 32) = v397;
  }
  else
  {
    if (v397 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v393 + 24);
      uint64_t v399 = *((void *)v394 + 5);
      *uint64_t v395 = *v396;
      *(void *)(v393 + 40) = v399;
      goto LABEL_177;
    }
    uint64_t v401 = *((void *)v394 + 3);
    outlined copy of Data._Representation(v401, *((void *)v394 + 4));
    uint64_t v402 = *(void *)(v393 + 24);
    unint64_t v403 = *(void *)(v393 + 32);
    *(void *)(v393 + 24) = v401;
    *(void *)(v393 + 32) = v397;
    outlined consume of Data._Representation(v402, v403);
  }
  *(void *)(v393 + 40) = *((void *)v394 + 5);
LABEL_177:
  v404 = (_OWORD *)(v393 + 48);
  v405 = v394 + 48;
  unint64_t v406 = *((void *)v394 + 7);
  if (*(void *)(v393 + 56) >> 60 != 15)
  {
    if (v406 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v393 + 48);
      uint64_t v408 = *((void *)v394 + 8);
      _OWORD *v404 = *v405;
      *(void *)(v393 + 64) = v408;
      goto LABEL_185;
    }
    uint64_t v410 = *((void *)v394 + 6);
    outlined copy of Data._Representation(v410, *((void *)v394 + 7));
    uint64_t v411 = *(void *)(v393 + 48);
    unint64_t v412 = *(void *)(v393 + 56);
    *(void *)(v393 + 48) = v410;
    *(void *)(v393 + 56) = v406;
    outlined consume of Data._Representation(v411, v412);
LABEL_184:
    *(void *)(v393 + 64) = *((void *)v394 + 8);
    goto LABEL_185;
  }
  if (v406 >> 60 != 15)
  {
    uint64_t v409 = *((void *)v394 + 6);
    outlined copy of Data._Representation(v409, *((void *)v394 + 7));
    *(void *)(v393 + 48) = v409;
    *(void *)(v393 + 56) = v406;
    goto LABEL_184;
  }
  long long v407 = *v405;
  *(void *)(v393 + 64) = *((void *)v394 + 8);
  _OWORD *v404 = v407;
LABEL_185:
  __int16 v413 = *((_WORD *)v394 + 36);
  *(unsigned char *)(v393 + 74) = v394[74];
  *(_WORD *)(v393 + 72) = v413;
  *(unsigned char *)(v393 + 75) = v394[75];
  return v5;
}

uint64_t outlined destroy of ByteBuffer(uint64_t a1)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for ExportedAuthenticator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + v4);
  *(void *)(v5 + 16) = *(void *)(a2 + v4 + 16);
  uint64_t v7 = type metadata accessor for HandshakeStateMachine();
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = v5 + v8;
  uint64_t v10 = v6 + v8;
  uint64_t v320 = v3;
  type metadata accessor for HandshakeState(0);
  unint64_t v321 = (int *)v7;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v317 = v6;
      long long v20 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 48) = v20;
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
      long long v21 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v21;
      long long v22 = *(_OWORD *)(v10 + 96);
      *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
      *(_OWORD *)(v9 + 96) = v22;
      *(void *)(v9 + 112) = *(void *)(v10 + 112);
      *(_OWORD *)(v9 + 120) = *(_OWORD *)(v10 + 120);
      *(void *)(v9 + 168) = *(void *)(v10 + 168);
      *(_OWORD *)(v9 + 152) = *(_OWORD *)(v10 + 152);
      *(_OWORD *)(v9 + 136) = *(_OWORD *)(v10 + 136);
      uint64_t v23 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v24 = *(int *)(v23 + 36);
      uint64_t v25 = (char *)(v9 + v24);
      uint64_t v26 = (char *)(v10 + v24);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v28 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v25, v26, v28);
          long long v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v30 = v29[9];
          uint64_t v305 = &v25[v30];
          long long v31 = &v26[v30];
          uint64_t v32 = type metadata accessor for SymmetricKey();
          uint64_t v311 = v23;
          long long v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
          v33(v305, v31, v32);
          v33(&v25[v29[10]], &v26[v29[10]], v32);
          v33(&v25[v29[11]], &v26[v29[11]], v32);
          v33(&v25[v29[12]], &v26[v29[12]], v32);
          uint64_t v23 = v311;
          goto LABEL_35;
        case 1u:
          uint64_t v175 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v175 - 8) + 32))(v25, v26, v175);
          uint64_t v176 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v177 = v176[9];
          uint64_t v306 = &v25[v177];
          uint64_t v178 = &v26[v177];
          uint64_t v179 = type metadata accessor for SymmetricKey();
          uint64_t v312 = v23;
          uint64_t v180 = *(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32);
          v180(v306, v178, v179);
          v180(&v25[v176[10]], &v26[v176[10]], v179);
          v180(&v25[v176[11]], &v26[v176[11]], v179);
          uint64_t v23 = v312;
          goto LABEL_35;
        case 2u:
          uint64_t v181 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v181 - 8) + 32))(v25, v26, v181);
          unint64_t v182 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v183 = v182[9];
          uint64_t v307 = &v25[v183];
          uint64_t v184 = &v26[v183];
          uint64_t v185 = type metadata accessor for SymmetricKey();
          uint64_t v313 = v23;
          uint64_t v186 = *(void (**)(char *, char *, uint64_t))(*(void *)(v185 - 8) + 32);
          v186(v307, v184, v185);
          v186(&v25[v182[10]], &v26[v182[10]], v185);
          v186(&v25[v182[11]], &v26[v182[11]], v185);
          v186(&v25[v182[12]], &v26[v182[12]], v185);
          v186(&v25[v182[13]], &v26[v182[13]], v185);
          v186(&v25[v182[14]], &v26[v182[14]], v185);
          uint64_t v23 = v313;
          goto LABEL_35;
        case 3u:
          uint64_t v187 = type metadata accessor for SymmetricKey();
          uint64_t v188 = *(void (**)(char *, char *, uint64_t))(*(void *)(v187 - 8) + 32);
          v188(v25, v26, v187);
          uint64_t v189 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v188(&v25[v189[9]], &v26[v189[9]], v187);
          v188(&v25[v189[10]], &v26[v189[10]], v187);
          v188(&v25[v189[11]], &v26[v189[11]], v187);
LABEL_35:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
          break;
      }
      uint64_t v6 = v317;
      uint64_t v190 = *(int *)(v23 + 40);
      uint64_t v138 = (char *)(v9 + v190);
      uint64_t v139 = (char *)(v10 + v190);
      uint64_t v191 = (int *)type metadata accessor for SessionTicket();
      uint64_t v192 = *((void *)v191 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v192 + 48))(v139, 1, v191))
      {
        size_t v193 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                     - 8)
                         + 64);
LABEL_69:
        memcpy(v138, v139, v193);
      }
      else
      {
        uint64_t v194 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v194 - 8) + 32))(v138, v139, v194);
        *(_DWORD *)&v138[v191[5]] = *(_DWORD *)&v139[v191[5]];
        *(_DWORD *)&v138[v191[6]] = *(_DWORD *)&v139[v191[6]];
        uint64_t v195 = v191[7];
        long long v196 = &v138[v195];
        uint64_t v197 = &v139[v195];
        *(_OWORD *)long long v196 = *(_OWORD *)v197;
        *((void *)v196 + 2) = *((void *)v197 + 2);
        uint64_t v198 = v191[8];
        uint64_t v199 = &v138[v198];
        unint64_t v200 = &v139[v198];
        *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
        *((void *)v199 + 2) = *((void *)v200 + 2);
        uint64_t v201 = v191[9];
        uint64_t v202 = &v138[v201];
        uint64_t v203 = &v139[v201];
        uint64_t v204 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v204 - 8) + 32))(v202, v203, v204);
        *(_DWORD *)&v138[v191[10]] = *(_DWORD *)&v139[v191[10]];
        *(_WORD *)&v138[v191[11]] = *(_WORD *)&v139[v191[11]];
        *(_WORD *)&v138[v191[12]] = *(_WORD *)&v139[v191[12]];
        uint64_t v205 = v191[13];
        unint64_t v206 = &v138[v205];
        long long v207 = &v139[v205];
        *((void *)v206 + 2) = *((void *)v207 + 2);
        *(_OWORD *)unint64_t v206 = *(_OWORD *)v207;
        uint64_t v208 = v191[14];
        uint64_t v209 = &v138[v208];
        uint64_t v210 = &v139[v208];
        uint64_t v211 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v212 = *(void *)(v211 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v210, 1, v211))
        {
          uint64_t v213 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v209, v210, *(void *)(*(void *)(v213 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v212 + 32))(v209, v210, v211);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v212 + 56))(v209, 0, 1, v211);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v192 + 56))(v138, 0, 1, v191);
      }
      goto LABEL_70;
    case 2u:
      uint64_t v318 = v6;
      long long v34 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 48) = v34;
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
      long long v35 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v35;
      unint64_t v36 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v37 = v36[5];
      unint64_t v38 = (char *)(v9 + v37);
      long long v39 = (char *)(v10 + v37);
      uint64_t v40 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      __dst = v36;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v41 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v38, v39, v41);
        uint64_t v42 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v38[v42[5]] = *(_DWORD *)&v39[v42[5]];
        *(_DWORD *)&v38[v42[6]] = *(_DWORD *)&v39[v42[6]];
        uint64_t v43 = v42[7];
        long long v44 = &v38[v43];
        uint64_t v45 = &v39[v43];
        *(_OWORD *)long long v44 = *(_OWORD *)v45;
        *((void *)v44 + 2) = *((void *)v45 + 2);
        uint64_t v46 = v42[8];
        long long v47 = &v38[v46];
        uint64_t v48 = &v39[v46];
        *(_OWORD *)long long v47 = *(_OWORD *)v48;
        *((void *)v47 + 2) = *((void *)v48 + 2);
        uint64_t v49 = v42[9];
        long long v50 = &v38[v49];
        uint64_t v51 = &v39[v49];
        uint64_t v52 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v50, v51, v52);
        *(_DWORD *)&v38[v42[10]] = *(_DWORD *)&v39[v42[10]];
        *(_WORD *)&v38[v42[11]] = *(_WORD *)&v39[v42[11]];
        *(_WORD *)&v38[v42[12]] = *(_WORD *)&v39[v42[12]];
        uint64_t v53 = v42[13];
        uint64_t v54 = &v38[v53];
        unint64_t v55 = &v39[v53];
        *((void *)v54 + 2) = *((void *)v55 + 2);
        *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
        uint64_t v56 = v42[14];
        uint64_t v57 = &v38[v56];
        unint64_t v58 = &v39[v56];
        uint64_t v59 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v60 = *(void *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        }
        unint64_t v36 = __dst;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
      }
      uint64_t v214 = v36[6];
      uint64_t v215 = (char *)(v9 + v214);
      unint64_t v216 = (char *)(v10 + v214);
      uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v218 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 32))(v215, v216, v218);
          uint64_t v219 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v220 = v219[9];
          uint64_t v308 = &v215[v220];
          uint64_t v221 = &v216[v220];
          uint64_t v222 = type metadata accessor for SymmetricKey();
          long long v223 = *(void (**)(char *, char *, uint64_t))(*(void *)(v222 - 8) + 32);
          v223(v308, v221, v222);
          v223(&v215[v219[10]], &v216[v219[10]], v222);
          v223(&v215[v219[11]], &v216[v219[11]], v222);
          uint64_t v224 = v222;
          uint64_t v3 = v320;
          v223(&v215[v219[12]], &v216[v219[12]], v224);
          unint64_t v36 = __dst;
          goto LABEL_48;
        case 1u:
          uint64_t v225 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 32))(v215, v216, v225);
          uint64_t v226 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v227 = v226[9];
          uint64_t v309 = &v215[v227];
          uint64_t v228 = &v216[v227];
          uint64_t v229 = type metadata accessor for SymmetricKey();
          uint64_t v230 = *(void (**)(char *, char *, uint64_t))(*(void *)(v229 - 8) + 32);
          v230(v309, v228, v229);
          v230(&v215[v226[10]], &v216[v226[10]], v229);
          uint64_t v231 = v229;
          uint64_t v3 = v320;
          v230(&v215[v226[11]], &v216[v226[11]], v231);
          unint64_t v36 = __dst;
          goto LABEL_48;
        case 2u:
          uint64_t v232 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v232 - 8) + 32))(v215, v216, v232);
          uint64_t v233 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v234 = v233[9];
          uint64_t v310 = &v215[v234];
          uint64_t v235 = &v216[v234];
          uint64_t v236 = type metadata accessor for SymmetricKey();
          uint64_t v237 = *(void (**)(char *, char *, uint64_t))(*(void *)(v236 - 8) + 32);
          v237(v310, v235, v236);
          v237(&v215[v233[10]], &v216[v233[10]], v236);
          v237(&v215[v233[11]], &v216[v233[11]], v236);
          v237(&v215[v233[12]], &v216[v233[12]], v236);
          v237(&v215[v233[13]], &v216[v233[13]], v236);
          uint64_t v238 = v236;
          uint64_t v3 = v320;
          v237(&v215[v233[14]], &v216[v233[14]], v238);
          unint64_t v36 = __dst;
          goto LABEL_48;
        case 3u:
          uint64_t v239 = type metadata accessor for SymmetricKey();
          uint64_t v240 = *(void (**)(char *, char *, uint64_t))(*(void *)(v239 - 8) + 32);
          v240(v215, v216, v239);
          uint64_t v241 = v36;
          uint64_t v242 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v240(&v215[v242[9]], &v216[v242[9]], v239);
          v240(&v215[v242[10]], &v216[v242[10]], v239);
          uint64_t v243 = v242[11];
          unint64_t v36 = v241;
          v240(&v215[v243], &v216[v243], v239);
LABEL_48:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v215, v216, *(void *)(*(void *)(v217 - 8) + 64));
          break;
      }
      uint64_t v6 = v318;
      uint64_t v244 = v321;
      *(_WORD *)(v9 + v36[7]) = *(_WORD *)(v10 + v36[7]);
      *(_WORD *)(v9 + v36[8]) = *(_WORD *)(v10 + v36[8]);
      goto LABEL_71;
    case 3u:
      uint64_t v319 = v6;
      long long v62 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 48) = v62;
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
      long long v63 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v63;
      __int16 v64 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v65 = v64[5];
      uint64_t v66 = (char *)(v9 + v65);
      unint64_t v67 = (char *)(v10 + v65);
      uint64_t v68 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v69 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v66, v67, v69);
        uint64_t v70 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v66[v70[5]] = *(_DWORD *)&v67[v70[5]];
        *(_DWORD *)&v66[v70[6]] = *(_DWORD *)&v67[v70[6]];
        uint64_t v71 = v70[7];
        uint64_t v72 = &v66[v71];
        __int16 v73 = &v67[v71];
        *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
        *((void *)v72 + 2) = *((void *)v73 + 2);
        uint64_t v74 = v70[8];
        long long v75 = &v66[v74];
        uint64_t v76 = &v67[v74];
        *(_OWORD *)long long v75 = *(_OWORD *)v76;
        *((void *)v75 + 2) = *((void *)v76 + 2);
        uint64_t v77 = v70[9];
        uint64_t v78 = &v66[v77];
        uint64_t v79 = &v67[v77];
        uint64_t v80 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
        *(_DWORD *)&v66[v70[10]] = *(_DWORD *)&v67[v70[10]];
        *(_WORD *)&v66[v70[11]] = *(_WORD *)&v67[v70[11]];
        *(_WORD *)&v66[v70[12]] = *(_WORD *)&v67[v70[12]];
        uint64_t v81 = v70[13];
        uint64_t v82 = &v66[v81];
        uint64_t v83 = &v67[v81];
        *((void *)v82 + 2) = *((void *)v83 + 2);
        *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
        uint64_t v84 = v70[14];
        uint64_t v85 = &v66[v84];
        unint64_t v86 = &v67[v84];
        uint64_t v87 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v88 = *(void *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          uint64_t v89 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
        }
        uint64_t v6 = v319;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
        uint64_t v6 = v319;
      }
      uint64_t v245 = v64[6];
      uint64_t v246 = v9 + v245;
      uint64_t v247 = v10 + v245;
      *(_OWORD *)uint64_t v246 = *(_OWORD *)v247;
      *(void *)(v246 + 16) = *(void *)(v247 + 16);
      uint64_t v248 = v64[7];
      uint64_t v249 = v9 + v248;
      uint64_t v250 = v10 + v248;
      *(void *)(v249 + 16) = *(void *)(v250 + 16);
      *(_OWORD *)uint64_t v249 = *(_OWORD *)v250;
      *(unsigned char *)(v9 + v64[8]) = *(unsigned char *)(v10 + v64[8]);
      uint64_t v251 = v64[9];
      uint64_t v138 = (char *)(v9 + v251);
      uint64_t v139 = (char *)(v10 + v251);
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v252 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v252 - 8) + 32))(v138, v139, v252);
          uint64_t v156 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v253 = v156[9];
          __int16 v158 = &v138[v253];
          unint64_t v159 = &v139[v253];
          uint64_t v160 = type metadata accessor for SymmetricKey();
          goto LABEL_54;
        case 1u:
          uint64_t v259 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v259 - 8) + 32))(v138, v139, v259);
          uint64_t v162 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v260 = v162[9];
          uint64_t v164 = &v138[v260];
          uint64_t v165 = &v139[v260];
          uint64_t v166 = type metadata accessor for SymmetricKey();
          unint64_t v167 = *(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 32);
          goto LABEL_59;
        case 2u:
          uint64_t v261 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 32))(v138, v139, v261);
          uint64_t v169 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v262 = v169[9];
          uint64_t v171 = &v138[v262];
          unint64_t v172 = &v139[v262];
          uint64_t v173 = type metadata accessor for SymmetricKey();
          uint64_t v174 = *(void (**)(char *, char *, uint64_t))(*(void *)(v173 - 8) + 32);
          goto LABEL_62;
        case 3u:
          goto LABEL_56;
        default:
          goto LABEL_68;
      }
    case 4u:
      long long v90 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 48) = v90;
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
      long long v91 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v91;
      *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
      *(void *)(v9 + 96) = *(void *)(v10 + 96);
      *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
      long long v92 = *(_OWORD *)(v10 + 104);
      *(void *)(v9 + 120) = *(void *)(v10 + 120);
      *(_OWORD *)(v9 + 104) = v92;
      *(unsigned char *)(v9 + 128) = *(unsigned char *)(v10 + 128);
      uint64_t v93 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v94 = *(int *)(v93 + 40);
      uint64_t v95 = (void *)(v9 + v94);
      uint64_t v96 = (const void *)(v10 + v94);
      uint64_t v97 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v98 = *(void *)(v97 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        uint64_t v99 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v95, v96, v97);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      uint64_t v137 = *(int *)(v93 + 44);
      uint64_t v138 = (char *)(v9 + v137);
      uint64_t v139 = (char *)(v10 + v137);
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_28;
        case 1u:
          goto LABEL_29;
        case 2u:
          goto LABEL_30;
        case 3u:
          goto LABEL_56;
        default:
          goto LABEL_68;
      }
    case 5u:
      long long v100 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 48) = v100;
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
      long long v101 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v101;
      *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
      unint64_t v102 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v103 = v102[7];
      uint64_t v104 = (void *)(v9 + v103);
      os_log_type_t v105 = (const void *)(v10 + v103);
      uint64_t v106 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v107 = *(void *)(v106 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
      {
        uint64_t v108 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v107 + 32))(v104, v105, v106);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
      }
      uint64_t v141 = v102[8];
      uint64_t v142 = v9 + v141;
      uint64_t v143 = v10 + v141;
      *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      uint64_t v144 = v102[9];
      uint64_t v145 = v9 + v144;
      uint64_t v146 = v10 + v144;
      *(void *)(v145 + 16) = *(void *)(v146 + 16);
      *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
      *(unsigned char *)(v9 + v102[10]) = *(unsigned char *)(v10 + v102[10]);
      uint64_t v147 = v102[11];
      uint64_t v138 = (char *)(v9 + v147);
      uint64_t v139 = (char *)(v10 + v147);
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_28;
        case 1u:
          goto LABEL_29;
        case 2u:
          goto LABEL_30;
        case 3u:
          goto LABEL_56;
        default:
          goto LABEL_68;
      }
    case 6u:
      long long v109 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 48) = v109;
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
      long long v110 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v110;
      *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v112 = ready[7];
      uint64_t v113 = (void *)(v9 + v112);
      uint64_t v114 = (const void *)(v10 + v112);
      uint64_t v115 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v116 = *(void *)(v115 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
      {
        uint64_t v117 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v113, v114, v115);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
      }
      uint64_t v148 = ready[8];
      uint64_t v149 = v9 + v148;
      uint64_t v150 = v10 + v148;
      *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
      *(void *)(v149 + 16) = *(void *)(v150 + 16);
      uint64_t v151 = ready[9];
      uint64_t v152 = v9 + v151;
      uint64_t v153 = v10 + v151;
      *(void *)(v152 + 16) = *(void *)(v153 + 16);
      *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
      *(unsigned char *)(v9 + ready[10]) = *(unsigned char *)(v10 + ready[10]);
      uint64_t v154 = ready[11];
      uint64_t v138 = (char *)(v9 + v154);
      uint64_t v139 = (char *)(v10 + v154);
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_28:
          uint64_t v155 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 32))(v138, v139, v155);
          uint64_t v156 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v157 = v156[9];
          __int16 v158 = &v138[v157];
          unint64_t v159 = &v139[v157];
          uint64_t v160 = type metadata accessor for SymmetricKey();
          uint64_t v319 = v6;
LABEL_54:
          uint64_t v254 = v160;
          uint64_t v255 = *(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 32);
          v255(v158, v159, v160);
          v255(&v138[v156[10]], &v139[v156[10]], v254);
          v255(&v138[v156[11]], &v139[v156[11]], v254);
          v255(&v138[v156[12]], &v139[v156[12]], v254);
          uint64_t v6 = v319;
          goto LABEL_63;
        case 1u:
LABEL_29:
          uint64_t v161 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v161 - 8) + 32))(v138, v139, v161);
          uint64_t v162 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v163 = v162[9];
          uint64_t v164 = &v138[v163];
          uint64_t v165 = &v139[v163];
          uint64_t v166 = type metadata accessor for SymmetricKey();
          unint64_t v167 = *(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 32);
          uint64_t v319 = v6;
LABEL_59:
          v167(v164, v165, v166);
          v167(&v138[v162[10]], &v139[v162[10]], v166);
          v167(&v138[v162[11]], &v139[v162[11]], v166);
          uint64_t v6 = v319;
          goto LABEL_63;
        case 2u:
LABEL_30:
          uint64_t v168 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v168 - 8) + 32))(v138, v139, v168);
          uint64_t v169 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v170 = v169[9];
          uint64_t v171 = &v138[v170];
          unint64_t v172 = &v139[v170];
          uint64_t v173 = type metadata accessor for SymmetricKey();
          uint64_t v174 = *(void (**)(char *, char *, uint64_t))(*(void *)(v173 - 8) + 32);
          uint64_t v319 = v6;
LABEL_62:
          v174(v171, v172, v173);
          v174(&v138[v169[10]], &v139[v169[10]], v173);
          v174(&v138[v169[11]], &v139[v169[11]], v173);
          v174(&v138[v169[12]], &v139[v169[12]], v173);
          v174(&v138[v169[13]], &v139[v169[13]], v173);
          v174(&v138[v169[14]], &v139[v169[14]], v173);
          uint64_t v6 = v319;
          goto LABEL_63;
        case 3u:
LABEL_56:
          uint64_t v256 = type metadata accessor for SymmetricKey();
          uint64_t v257 = *(void (**)(char *, char *, uint64_t))(*(void *)(v256 - 8) + 32);
          v257(v138, v139, v256);
          uint64_t v258 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v257(&v138[v258[9]], &v139[v258[9]], v256);
          v257(&v138[v258[10]], &v139[v258[10]], v256);
          v257(&v138[v258[11]], &v139[v258[11]], v256);
          goto LABEL_63;
        default:
          goto LABEL_68;
      }
    default:
      uint64_t v316 = v6;
      long long v11 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 48) = v11;
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
      long long v12 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v12;
      uint64_t v13 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v14 = *(int *)(v13 + 20);
      uint64_t v15 = (char *)(v9 + v14);
      unint64_t v16 = (char *)(v10 + v14);
      long long v17 = (int *)type metadata accessor for SessionTicket();
      uint64_t v18 = *((void *)v17 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        uint64_t v118 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 32))(v15, v16, v118);
        *(_DWORD *)&v15[v17[5]] = *(_DWORD *)&v16[v17[5]];
        *(_DWORD *)&v15[v17[6]] = *(_DWORD *)&v16[v17[6]];
        uint64_t v119 = v17[7];
        uint64_t v120 = &v15[v119];
        uint64_t v121 = &v16[v119];
        *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
        *((void *)v120 + 2) = *((void *)v121 + 2);
        uint64_t v122 = v17[8];
        uint64_t v123 = &v15[v122];
        unint64_t v124 = &v16[v122];
        *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
        *((void *)v123 + 2) = *((void *)v124 + 2);
        uint64_t v125 = v17[9];
        int v126 = &v15[v125];
        unint64_t v127 = &v16[v125];
        uint64_t v128 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 32))(v126, v127, v128);
        *(_DWORD *)&v15[v17[10]] = *(_DWORD *)&v16[v17[10]];
        *(_WORD *)&v15[v17[11]] = *(_WORD *)&v16[v17[11]];
        *(_WORD *)&v15[v17[12]] = *(_WORD *)&v16[v17[12]];
        uint64_t v129 = v17[13];
        uint64_t v130 = &v15[v129];
        uint64_t v131 = &v16[v129];
        *((void *)v130 + 2) = *((void *)v131 + 2);
        *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
        uint64_t v132 = v17[14];
        __dsta = &v15[v132];
        uint64_t v133 = &v16[v132];
        uint64_t v134 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v135 = *(void *)(v134 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
        {
          uint64_t v136 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(__dsta, v133, *(void *)(*(void *)(v136 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v135 + 32))(__dsta, v133, v134);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(__dsta, 0, 1, v134);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v6 = v316;
      uint64_t v263 = *(int *)(v13 + 24);
      uint64_t v138 = (char *)(v9 + v263);
      uint64_t v139 = (char *)(v10 + v263);
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v264 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v264 - 8) + 32))(v138, v139, v264);
          uint64_t v265 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v266 = v265[9];
          uint64_t v267 = &v138[v266];
          uint64_t v268 = &v139[v266];
          uint64_t v269 = type metadata accessor for SymmetricKey();
          uint64_t v270 = *(void (**)(char *, char *, uint64_t))(*(void *)(v269 - 8) + 32);
          v270(v267, v268, v269);
          v270(&v138[v265[10]], &v139[v265[10]], v269);
          v270(&v138[v265[11]], &v139[v265[11]], v269);
          uint64_t v271 = v269;
          uint64_t v6 = v316;
          v270(&v138[v265[12]], &v139[v265[12]], v271);
          break;
        case 1u:
          uint64_t v286 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v286 - 8) + 32))(v138, v139, v286);
          uint64_t v287 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v288 = v287[9];
          uint64_t v289 = &v138[v288];
          uint64_t v290 = &v139[v288];
          uint64_t v291 = type metadata accessor for SymmetricKey();
          uint64_t v292 = *(void (**)(char *, char *, uint64_t))(*(void *)(v291 - 8) + 32);
          v292(v289, v290, v291);
          v292(&v138[v287[10]], &v139[v287[10]], v291);
          uint64_t v293 = v291;
          uint64_t v6 = v316;
          v292(&v138[v287[11]], &v139[v287[11]], v293);
          break;
        case 2u:
          uint64_t v294 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v294 - 8) + 32))(v138, v139, v294);
          uint64_t v295 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v296 = v295[9];
          uint64_t v297 = &v138[v296];
          uint64_t v298 = &v139[v296];
          uint64_t v299 = type metadata accessor for SymmetricKey();
          uint64_t v300 = *(void (**)(char *, char *, uint64_t))(*(void *)(v299 - 8) + 32);
          v300(v297, v298, v299);
          v300(&v138[v295[10]], &v139[v295[10]], v299);
          v300(&v138[v295[11]], &v139[v295[11]], v299);
          v300(&v138[v295[12]], &v139[v295[12]], v299);
          v300(&v138[v295[13]], &v139[v295[13]], v299);
          uint64_t v301 = v299;
          uint64_t v6 = v316;
          v300(&v138[v295[14]], &v139[v295[14]], v301);
          break;
        case 3u:
          uint64_t v302 = type metadata accessor for SymmetricKey();
          uint64_t v303 = *(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 32);
          v303(v138, v139, v302);
          uint64_t v304 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v303(&v138[v304[9]], &v139[v304[9]], v302);
          v303(&v138[v304[10]], &v139[v304[10]], v302);
          v303(&v138[v304[11]], &v139[v304[11]], v302);
          break;
        default:
LABEL_68:
          size_t v193 = *(void *)(*(void *)(v140 - 8) + 64);
          goto LABEL_69;
      }
LABEL_63:
      swift_storeEnumTagMultiPayload();
LABEL_70:
      uint64_t v3 = v320;
      uint64_t v244 = v321;
LABEL_71:
      swift_storeEnumTagMultiPayload();
      uint64_t v272 = v244[7];
      uint64_t v273 = v5 + v272;
      uint64_t v274 = v6 + v272;
      long long v275 = *(_OWORD *)(v274 + 16);
      *(_OWORD *)uint64_t v273 = *(_OWORD *)v274;
      *(_OWORD *)(v273 + 16) = v275;
      *(void *)(v273 + 32) = *(void *)(v274 + 32);
      uint64_t v276 = v244[8];
      uint64_t v277 = (_OWORD *)(v5 + v276);
      uint64_t v278 = (_OWORD *)(v6 + v276);
      long long v279 = v278[1];
      *uint64_t v277 = *v278;
      v277[1] = v279;
      uint64_t v280 = v244[9];
      uint64_t v281 = (_OWORD *)(v5 + v280);
      uint64_t v282 = (_OWORD *)(v6 + v280);
      *(_OWORD *)((char *)v281 + 60) = *(_OWORD *)((char *)v282 + 60);
      long long v283 = v282[3];
      v281[2] = v282[2];
      v281[3] = v283;
      long long v284 = v282[1];
      *uint64_t v281 = *v282;
      v281[1] = v284;
      return v3;
  }
}

uint64_t assignWithTake for ExportedAuthenticator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v6);
LABEL_6:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  unint64_t v12 = *(void *)(a1 + v9 + 8);
  if (v12 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    goto LABEL_11;
  }
  unint64_t v13 = *(void *)(v11 + 8);
  if (v13 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v10);
    goto LABEL_9;
  }
  uint64_t v14 = *(void *)v10;
  *(void *)uint64_t v10 = *(void *)v11;
  *(void *)(v10 + 8) = v13;
  outlined consume of Data._Representation(v14, v12);
LABEL_11:
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  uint64_t v15 = type metadata accessor for HandshakeStateMachine();
  unint64_t v16 = (int *)v15;
  if (a1 != a2)
  {
    unint64_t v328 = (int *)v15;
    uint64_t v329 = v11;
    uint64_t v17 = *(int *)(v15 + 24);
    uint64_t v18 = v10 + v17;
    uint64_t v19 = v11 + v17;
    outlined destroy of HandshakeState(v10 + v17, type metadata accessor for HandshakeState);
    type metadata accessor for HandshakeState(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v29 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v18 + 48) = v29;
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(v19 + 60);
        long long v30 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v30;
        long long v31 = *(_OWORD *)(v19 + 96);
        *(_OWORD *)(v18 + 80) = *(_OWORD *)(v19 + 80);
        *(_OWORD *)(v18 + 96) = v31;
        *(void *)(v18 + 112) = *(void *)(v19 + 112);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(v19 + 120);
        *(void *)(v18 + 168) = *(void *)(v19 + 168);
        *(_OWORD *)(v18 + 152) = *(_OWORD *)(v19 + 152);
        *(_OWORD *)(v18 + 136) = *(_OWORD *)(v19 + 136);
        uint64_t v32 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v33 = *(int *)(v32 + 36);
        long long v34 = (char *)(v18 + v33);
        long long v35 = (char *)(v19 + v33);
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        __dst = (void *)v32;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v37 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v34, v35, v37);
            unint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v39 = v38[9];
            uint64_t v306 = &v35[v39];
            uint64_t v312 = &v34[v39];
            uint64_t v40 = type metadata accessor for SymmetricKey();
            uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32);
            v41(v312, v306, v40);
            v41(&v34[v38[10]], &v35[v38[10]], v40);
            v41(&v34[v38[11]], &v35[v38[11]], v40);
            uint64_t v42 = v38[12];
            uint64_t v32 = (uint64_t)__dst;
            v41(&v34[v42], &v35[v42], v40);
            goto LABEL_43;
          case 1u:
            uint64_t v164 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v164 - 8) + 32))(v34, v35, v164);
            uint64_t v165 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v166 = v165[9];
            uint64_t v307 = &v35[v166];
            uint64_t v313 = &v34[v166];
            uint64_t v167 = type metadata accessor for SymmetricKey();
            uint64_t v168 = *(void (**)(char *, char *, uint64_t))(*(void *)(v167 - 8) + 32);
            v168(v313, v307, v167);
            v168(&v34[v165[10]], &v35[v165[10]], v167);
            uint64_t v169 = v165[11];
            uint64_t v32 = (uint64_t)__dst;
            v168(&v34[v169], &v35[v169], v167);
            goto LABEL_43;
          case 2u:
            uint64_t v170 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v170 - 8) + 32))(v34, v35, v170);
            uint64_t v171 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v172 = v171[9];
            uint64_t v308 = &v35[v172];
            uint64_t v314 = &v34[v172];
            uint64_t v173 = type metadata accessor for SymmetricKey();
            uint64_t v174 = *(void (**)(char *, char *, uint64_t))(*(void *)(v173 - 8) + 32);
            v174(v314, v308, v173);
            v174(&v34[v171[10]], &v35[v171[10]], v173);
            v174(&v34[v171[11]], &v35[v171[11]], v173);
            v174(&v34[v171[12]], &v35[v171[12]], v173);
            v174(&v34[v171[13]], &v35[v171[13]], v173);
            uint64_t v175 = v171[14];
            uint64_t v32 = (uint64_t)__dst;
            v174(&v34[v175], &v35[v175], v173);
            goto LABEL_43;
          case 3u:
            uint64_t v176 = type metadata accessor for SymmetricKey();
            uint64_t v177 = *(void (**)(char *, char *, uint64_t))(*(void *)(v176 - 8) + 32);
            v177(v34, v35, v176);
            uint64_t v178 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v177(&v34[v178[9]], &v35[v178[9]], v176);
            v177(&v34[v178[10]], &v35[v178[10]], v176);
            uint64_t v179 = v176;
            uint64_t v32 = (uint64_t)__dst;
            v177(&v34[v178[11]], &v35[v178[11]], v179);
LABEL_43:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
            break;
        }
        uint64_t v180 = *(int *)(v32 + 40);
        uint64_t v181 = (char *)(v18 + v180);
        unint64_t v182 = (char *)(v19 + v180);
        uint64_t v183 = (int *)type metadata accessor for SessionTicket();
        uint64_t v184 = *((void *)v183 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v184 + 48))(v182, 1, v183))
        {
          size_t v185 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                       - 8)
                           + 64);
          uint64_t v186 = v181;
          uint64_t v187 = v182;
LABEL_64:
          memcpy(v186, v187, v185);
        }
        else
        {
          uint64_t v188 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 32))(v181, v182, v188);
          *(_DWORD *)&v181[v183[5]] = *(_DWORD *)&v182[v183[5]];
          *(_DWORD *)&v181[v183[6]] = *(_DWORD *)&v182[v183[6]];
          uint64_t v189 = v183[7];
          uint64_t v190 = &v181[v189];
          uint64_t v191 = &v182[v189];
          *(_OWORD *)uint64_t v190 = *(_OWORD *)v191;
          *((void *)v190 + 2) = *((void *)v191 + 2);
          uint64_t v192 = v183[8];
          size_t v193 = &v181[v192];
          uint64_t v194 = &v182[v192];
          *(_OWORD *)size_t v193 = *(_OWORD *)v194;
          *((void *)v193 + 2) = *((void *)v194 + 2);
          uint64_t v195 = v183[9];
          long long v196 = &v181[v195];
          uint64_t v197 = &v182[v195];
          uint64_t v198 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v198 - 8) + 32))(v196, v197, v198);
          *(_DWORD *)&v181[v183[10]] = *(_DWORD *)&v182[v183[10]];
          *(_WORD *)&v181[v183[11]] = *(_WORD *)&v182[v183[11]];
          *(_WORD *)&v181[v183[12]] = *(_WORD *)&v182[v183[12]];
          uint64_t v199 = v183[13];
          unint64_t v200 = &v181[v199];
          uint64_t v201 = &v182[v199];
          *((void *)v200 + 2) = *((void *)v201 + 2);
          *(_OWORD *)unint64_t v200 = *(_OWORD *)v201;
          uint64_t v202 = v183[14];
          uint64_t v203 = &v181[v202];
          uint64_t v204 = &v182[v202];
          uint64_t v205 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v206 = *(void *)(v205 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v204, 1, v205))
          {
            uint64_t v207 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v203, v204, *(void *)(*(void *)(v207 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v203, v204, v205);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v206 + 56))(v203, 0, 1, v205);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v184 + 56))(v181, 0, 1, v183);
        }
        goto LABEL_81;
      case 2u:
        long long v43 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v18 + 48) = v43;
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(v19 + 60);
        long long v44 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v44;
        uint64_t v45 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v46 = v45[5];
        long long v47 = (char *)(v18 + v46);
        uint64_t v48 = (char *)(v19 + v46);
        uint64_t v49 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        __dsta = v45;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v50 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v47, v48, v50);
          uint64_t v51 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v47[v51[5]] = *(_DWORD *)&v48[v51[5]];
          *(_DWORD *)&v47[v51[6]] = *(_DWORD *)&v48[v51[6]];
          uint64_t v52 = v51[7];
          uint64_t v53 = &v47[v52];
          uint64_t v54 = &v48[v52];
          *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
          *((void *)v53 + 2) = *((void *)v54 + 2);
          uint64_t v55 = v51[8];
          uint64_t v56 = &v47[v55];
          uint64_t v57 = &v48[v55];
          *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
          *((void *)v56 + 2) = *((void *)v57 + 2);
          uint64_t v58 = v51[9];
          uint64_t v59 = &v47[v58];
          uint64_t v60 = &v48[v58];
          uint64_t v61 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v59, v60, v61);
          *(_DWORD *)&v47[v51[10]] = *(_DWORD *)&v48[v51[10]];
          *(_WORD *)&v47[v51[11]] = *(_WORD *)&v48[v51[11]];
          *(_WORD *)&v47[v51[12]] = *(_WORD *)&v48[v51[12]];
          uint64_t v62 = v51[13];
          long long v63 = &v47[v62];
          __int16 v64 = &v48[v62];
          *((void *)v63 + 2) = *((void *)v64 + 2);
          *(_OWORD *)long long v63 = *(_OWORD *)v64;
          uint64_t v65 = v51[14];
          uint64_t v66 = &v47[v65];
          unint64_t v67 = &v48[v65];
          uint64_t v68 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v69 = *(void *)(v68 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
          {
            uint64_t v70 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
          }
          uint64_t v45 = __dsta;
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
        }
        uint64_t v208 = v45[6];
        uint64_t v209 = (char *)(v18 + v208);
        uint64_t v210 = (char *)(v19 + v208);
        uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v212 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v212 - 8) + 32))(v209, v210, v212);
            uint64_t v213 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v214 = v213[9];
            uint64_t v309 = &v210[v214];
            unint64_t v315 = &v209[v214];
            uint64_t v215 = type metadata accessor for SymmetricKey();
            unint64_t v216 = *(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 32);
            v216(v315, v309, v215);
            v216(&v209[v213[10]], &v210[v213[10]], v215);
            v216(&v209[v213[11]], &v210[v213[11]], v215);
            uint64_t v217 = v213[12];
            uint64_t v45 = __dsta;
            v216(&v209[v217], &v210[v217], v215);
            goto LABEL_56;
          case 1u:
            uint64_t v218 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 32))(v209, v210, v218);
            uint64_t v219 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v220 = v219[9];
            uint64_t v310 = &v210[v220];
            uint64_t v316 = &v209[v220];
            uint64_t v221 = type metadata accessor for SymmetricKey();
            uint64_t v222 = *(void (**)(char *, char *, uint64_t))(*(void *)(v221 - 8) + 32);
            v222(v316, v310, v221);
            v222(&v209[v219[10]], &v210[v219[10]], v221);
            uint64_t v223 = v219[11];
            uint64_t v45 = __dsta;
            v222(&v209[v223], &v210[v223], v221);
            goto LABEL_56;
          case 2u:
            uint64_t v224 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v224 - 8) + 32))(v209, v210, v224);
            uint64_t v225 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v226 = v225[9];
            uint64_t v311 = &v210[v226];
            uint64_t v317 = &v209[v226];
            uint64_t v227 = type metadata accessor for SymmetricKey();
            uint64_t v228 = *(void (**)(char *, char *, uint64_t))(*(void *)(v227 - 8) + 32);
            v228(v317, v311, v227);
            v228(&v209[v225[10]], &v210[v225[10]], v227);
            v228(&v209[v225[11]], &v210[v225[11]], v227);
            v228(&v209[v225[12]], &v210[v225[12]], v227);
            v228(&v209[v225[13]], &v210[v225[13]], v227);
            uint64_t v229 = v225[14];
            uint64_t v45 = __dsta;
            v228(&v209[v229], &v210[v229], v227);
            goto LABEL_56;
          case 3u:
            uint64_t v230 = type metadata accessor for SymmetricKey();
            uint64_t v231 = *(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 32);
            v231(v209, v210, v230);
            uint64_t v232 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v231(&v209[v232[9]], &v210[v232[9]], v230);
            v231(&v209[v232[10]], &v210[v232[10]], v230);
            uint64_t v233 = v230;
            uint64_t v45 = __dsta;
            v231(&v209[v232[11]], &v210[v232[11]], v233);
LABEL_56:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v209, v210, *(void *)(*(void *)(v211 - 8) + 64));
            break;
        }
        unint64_t v16 = v328;
        *(_WORD *)(v18 + v45[7]) = *(_WORD *)(v19 + v45[7]);
        *(_WORD *)(v18 + v45[8]) = *(_WORD *)(v19 + v45[8]);
        uint64_t v11 = v329;
        goto LABEL_82;
      case 3u:
        long long v71 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v18 + 48) = v71;
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(v19 + 60);
        long long v72 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v72;
        __int16 v73 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v74 = v73[5];
        long long v75 = (char *)(v18 + v74);
        uint64_t v76 = (char *)(v19 + v74);
        uint64_t v77 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v78 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32))(v75, v76, v78);
          uint64_t v79 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v75[v79[5]] = *(_DWORD *)&v76[v79[5]];
          *(_DWORD *)&v75[v79[6]] = *(_DWORD *)&v76[v79[6]];
          uint64_t v80 = v79[7];
          uint64_t v81 = &v75[v80];
          uint64_t v82 = &v76[v80];
          *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
          *((void *)v81 + 2) = *((void *)v82 + 2);
          uint64_t v83 = v79[8];
          uint64_t v84 = &v75[v83];
          uint64_t v85 = &v76[v83];
          *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
          *((void *)v84 + 2) = *((void *)v85 + 2);
          uint64_t v86 = v79[9];
          uint64_t v87 = &v75[v86];
          uint64_t v88 = &v76[v86];
          uint64_t v89 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32))(v87, v88, v89);
          *(_DWORD *)&v75[v79[10]] = *(_DWORD *)&v76[v79[10]];
          *(_WORD *)&v75[v79[11]] = *(_WORD *)&v76[v79[11]];
          *(_WORD *)&v75[v79[12]] = *(_WORD *)&v76[v79[12]];
          uint64_t v90 = v79[13];
          long long v91 = &v75[v90];
          long long v92 = &v76[v90];
          *((void *)v91 + 2) = *((void *)v92 + 2);
          *(_OWORD *)long long v91 = *(_OWORD *)v92;
          uint64_t v93 = v79[14];
          uint64_t v94 = &v75[v93];
          uint64_t v95 = &v76[v93];
          uint64_t v96 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v97 = *(void *)(v96 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            uint64_t v98 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v94, v95, v96);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
        }
        uint64_t v234 = v73[6];
        uint64_t v235 = v18 + v234;
        uint64_t v236 = v19 + v234;
        *(_OWORD *)uint64_t v235 = *(_OWORD *)v236;
        *(void *)(v235 + 16) = *(void *)(v236 + 16);
        uint64_t v237 = v73[7];
        uint64_t v238 = v18 + v237;
        uint64_t v239 = v19 + v237;
        *(void *)(v238 + 16) = *(void *)(v239 + 16);
        *(_OWORD *)uint64_t v238 = *(_OWORD *)v239;
        *(unsigned char *)(v18 + v73[8]) = *(unsigned char *)(v19 + v73[8]);
        uint64_t v240 = v73[9];
        uint64_t v147 = (char *)(v18 + v240);
        uint64_t v148 = (char *)(v19 + v240);
        uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_61;
          case 1u:
            goto LABEL_65;
          case 2u:
            goto LABEL_67;
          case 3u:
            goto LABEL_69;
          default:
            goto LABEL_63;
        }
      case 4u:
        long long v99 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v18 + 48) = v99;
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(v19 + 60);
        long long v100 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v100;
        *(_DWORD *)(v18 + 76) = *(_DWORD *)(v19 + 76);
        *(void *)(v18 + 96) = *(void *)(v19 + 96);
        *(_OWORD *)(v18 + 80) = *(_OWORD *)(v19 + 80);
        long long v101 = *(_OWORD *)(v19 + 104);
        *(void *)(v18 + 120) = *(void *)(v19 + 120);
        *(_OWORD *)(v18 + 104) = v101;
        *(unsigned char *)(v18 + 128) = *(unsigned char *)(v19 + 128);
        uint64_t v102 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v103 = *(int *)(v102 + 40);
        uint64_t v104 = (void *)(v18 + v103);
        os_log_type_t v105 = (const void *)(v19 + v103);
        uint64_t v106 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v107 = *(void *)(v106 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
        {
          uint64_t v108 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v107 + 32))(v104, v105, v106);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
        }
        uint64_t v146 = *(int *)(v102 + 44);
        uint64_t v147 = (char *)(v18 + v146);
        uint64_t v148 = (char *)(v19 + v146);
        uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_61;
          case 1u:
            goto LABEL_65;
          case 2u:
            goto LABEL_67;
          case 3u:
            goto LABEL_69;
          default:
            goto LABEL_63;
        }
      case 5u:
        long long v109 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v18 + 48) = v109;
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(v19 + 60);
        long long v110 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v110;
        *(_DWORD *)(v18 + 76) = *(_DWORD *)(v19 + 76);
        uint64_t v111 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v112 = v111[7];
        uint64_t v113 = (void *)(v18 + v112);
        uint64_t v114 = (const void *)(v19 + v112);
        uint64_t v115 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v116 = *(void *)(v115 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
        {
          uint64_t v117 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v113, v114, v115);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
        }
        uint64_t v150 = v111[8];
        uint64_t v151 = v18 + v150;
        uint64_t v152 = v19 + v150;
        *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
        *(void *)(v151 + 16) = *(void *)(v152 + 16);
        uint64_t v153 = v111[9];
        uint64_t v154 = v18 + v153;
        uint64_t v155 = v19 + v153;
        *(void *)(v154 + 16) = *(void *)(v155 + 16);
        *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
        *(unsigned char *)(v18 + v111[10]) = *(unsigned char *)(v19 + v111[10]);
        uint64_t v156 = v111[11];
        uint64_t v147 = (char *)(v18 + v156);
        uint64_t v148 = (char *)(v19 + v156);
        uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_61;
          case 1u:
            goto LABEL_65;
          case 2u:
            goto LABEL_67;
          case 3u:
            goto LABEL_69;
          default:
            goto LABEL_63;
        }
      case 6u:
        long long v118 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v18 + 48) = v118;
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(v19 + 60);
        long long v119 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v119;
        *(_DWORD *)(v18 + 76) = *(_DWORD *)(v19 + 76);
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v121 = ready[7];
        uint64_t v122 = (void *)(v18 + v121);
        uint64_t v123 = (const void *)(v19 + v121);
        uint64_t v124 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v125 = *(void *)(v124 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
        {
          uint64_t v126 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v122, v123, *(void *)(*(void *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v125 + 32))(v122, v123, v124);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
        }
        uint64_t v157 = ready[8];
        uint64_t v158 = v18 + v157;
        uint64_t v159 = v19 + v157;
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
        *(void *)(v158 + 16) = *(void *)(v159 + 16);
        uint64_t v160 = ready[9];
        uint64_t v161 = v18 + v160;
        uint64_t v162 = v19 + v160;
        *(void *)(v161 + 16) = *(void *)(v162 + 16);
        *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
        *(unsigned char *)(v18 + ready[10]) = *(unsigned char *)(v19 + ready[10]);
        uint64_t v163 = ready[11];
        uint64_t v147 = (char *)(v18 + v163);
        uint64_t v148 = (char *)(v19 + v163);
        uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
LABEL_61:
            uint64_t v241 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 32))(v147, v148, v241);
            uint64_t v242 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v243 = v242[9];
            uint64_t v319 = &v147[v243];
            uint64_t v244 = &v148[v243];
            uint64_t v245 = type metadata accessor for SymmetricKey();
            uint64_t v246 = *(void (**)(char *, char *, uint64_t))(*(void *)(v245 - 8) + 32);
            v246(v319, v244, v245);
            v246(&v147[v242[10]], &v148[v242[10]], v245);
            v246(&v147[v242[11]], &v148[v242[11]], v245);
            v246(&v147[v242[12]], &v148[v242[12]], v245);
            goto LABEL_70;
          case 1u:
LABEL_65:
            uint64_t v247 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v247 - 8) + 32))(v147, v148, v247);
            uint64_t v248 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v249 = v248[9];
            uint64_t v320 = &v147[v249];
            uint64_t v250 = &v148[v249];
            uint64_t v251 = type metadata accessor for SymmetricKey();
            uint64_t v252 = *(void (**)(char *, char *, uint64_t))(*(void *)(v251 - 8) + 32);
            v252(v320, v250, v251);
            v252(&v147[v248[10]], &v148[v248[10]], v251);
            v252(&v147[v248[11]], &v148[v248[11]], v251);
            goto LABEL_70;
          case 2u:
LABEL_67:
            uint64_t v253 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v253 - 8) + 32))(v147, v148, v253);
            uint64_t v254 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v255 = v254[9];
            unint64_t v321 = &v147[v255];
            uint64_t v256 = &v148[v255];
            uint64_t v257 = type metadata accessor for SymmetricKey();
            uint64_t v258 = *(void (**)(char *, char *, uint64_t))(*(void *)(v257 - 8) + 32);
            v258(v321, v256, v257);
            v258(&v147[v254[10]], &v148[v254[10]], v257);
            v258(&v147[v254[11]], &v148[v254[11]], v257);
            v258(&v147[v254[12]], &v148[v254[12]], v257);
            v258(&v147[v254[13]], &v148[v254[13]], v257);
            v258(&v147[v254[14]], &v148[v254[14]], v257);
            goto LABEL_70;
          case 3u:
LABEL_69:
            uint64_t v259 = type metadata accessor for SymmetricKey();
            uint64_t v260 = *(void (**)(char *, char *, uint64_t))(*(void *)(v259 - 8) + 32);
            v260(v147, v148, v259);
            uint64_t v261 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v260(&v147[v261[9]], &v148[v261[9]], v259);
            v260(&v147[v261[10]], &v148[v261[10]], v259);
            v260(&v147[v261[11]], &v148[v261[11]], v259);
            goto LABEL_70;
          default:
LABEL_63:
            size_t v185 = *(void *)(*(void *)(v149 - 8) + 64);
            uint64_t v186 = v147;
            uint64_t v187 = v148;
            goto LABEL_64;
        }
      default:
        long long v20 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v18 + 48) = v20;
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(v19 + 60);
        long long v21 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v21;
        uint64_t v22 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v23 = *(int *)(v22 + 20);
        uint64_t v24 = (char *)(v18 + v23);
        uint64_t v25 = (char *)(v19 + v23);
        uint64_t v26 = (int *)type metadata accessor for SessionTicket();
        uint64_t v27 = *((void *)v26 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v318 = v22;
          uint64_t v127 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 32))(v24, v25, v127);
          *(_DWORD *)&v24[v26[5]] = *(_DWORD *)&v25[v26[5]];
          *(_DWORD *)&v24[v26[6]] = *(_DWORD *)&v25[v26[6]];
          uint64_t v128 = v26[7];
          uint64_t v129 = &v24[v128];
          uint64_t v130 = &v25[v128];
          *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
          *((void *)v129 + 2) = *((void *)v130 + 2);
          uint64_t v131 = v26[8];
          uint64_t v132 = &v24[v131];
          uint64_t v133 = &v25[v131];
          *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
          *((void *)v132 + 2) = *((void *)v133 + 2);
          uint64_t v134 = v26[9];
          uint64_t v135 = &v24[v134];
          uint64_t v136 = &v25[v134];
          uint64_t v137 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32))(v135, v136, v137);
          *(_DWORD *)&v24[v26[10]] = *(_DWORD *)&v25[v26[10]];
          *(_WORD *)&v24[v26[11]] = *(_WORD *)&v25[v26[11]];
          *(_WORD *)&v24[v26[12]] = *(_WORD *)&v25[v26[12]];
          uint64_t v138 = v26[13];
          uint64_t v139 = &v24[v138];
          uint64_t v140 = &v25[v138];
          *((void *)v139 + 2) = *((void *)v140 + 2);
          *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
          uint64_t v141 = v26[14];
          __dstb = &v24[v141];
          uint64_t v142 = &v25[v141];
          uint64_t v143 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v144 = *(void *)(v143 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
          {
            uint64_t v145 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(__dstb, v142, *(void *)(*(void *)(v145 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v144 + 32))(__dstb, v142, v143);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v144 + 56))(__dstb, 0, 1, v143);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
          uint64_t v22 = v318;
        }
        uint64_t v262 = *(int *)(v22 + 24);
        uint64_t v263 = (char *)(v18 + v262);
        uint64_t v264 = (char *)(v19 + v262);
        uint64_t v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v266 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v266 - 8) + 32))(v263, v264, v266);
            uint64_t v267 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v268 = v267[9];
            unint64_t v322 = &v263[v268];
            uint64_t v269 = &v264[v268];
            uint64_t v270 = type metadata accessor for SymmetricKey();
            uint64_t v271 = *(void (**)(char *, char *, uint64_t))(*(void *)(v270 - 8) + 32);
            v271(v322, v269, v270);
            v271(&v263[v267[10]], &v264[v267[10]], v270);
            v271(&v263[v267[11]], &v264[v267[11]], v270);
            v271(&v263[v267[12]], &v264[v267[12]], v270);
            break;
          case 1u:
            uint64_t v272 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v272 - 8) + 32))(v263, v264, v272);
            uint64_t v273 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v274 = v273[9];
            long long v323 = &v263[v274];
            long long v275 = &v264[v274];
            uint64_t v276 = type metadata accessor for SymmetricKey();
            uint64_t v277 = *(void (**)(char *, char *, uint64_t))(*(void *)(v276 - 8) + 32);
            v277(v323, v275, v276);
            v277(&v263[v273[10]], &v264[v273[10]], v276);
            v277(&v263[v273[11]], &v264[v273[11]], v276);
            break;
          case 2u:
            uint64_t v278 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v278 - 8) + 32))(v263, v264, v278);
            long long v279 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v280 = v279[9];
            uint64_t v324 = &v263[v280];
            uint64_t v281 = &v264[v280];
            uint64_t v282 = type metadata accessor for SymmetricKey();
            long long v283 = *(void (**)(char *, char *, uint64_t))(*(void *)(v282 - 8) + 32);
            v283(v324, v281, v282);
            v283(&v263[v279[10]], &v264[v279[10]], v282);
            v283(&v263[v279[11]], &v264[v279[11]], v282);
            v283(&v263[v279[12]], &v264[v279[12]], v282);
            v283(&v263[v279[13]], &v264[v279[13]], v282);
            v283(&v263[v279[14]], &v264[v279[14]], v282);
            break;
          case 3u:
            uint64_t v284 = type metadata accessor for SymmetricKey();
            long long v285 = *(void (**)(char *, char *, uint64_t))(*(void *)(v284 - 8) + 32);
            v285(v263, v264, v284);
            uint64_t v286 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v285(&v263[v286[9]], &v264[v286[9]], v284);
            v285(&v263[v286[10]], &v264[v286[10]], v284);
            v285(&v263[v286[11]], &v264[v286[11]], v284);
            break;
          default:
            size_t v185 = *(void *)(*(void *)(v265 - 8) + 64);
            uint64_t v186 = v263;
            uint64_t v187 = v264;
            goto LABEL_64;
        }
LABEL_70:
        swift_storeEnumTagMultiPayload();
LABEL_81:
        unint64_t v16 = v328;
        uint64_t v11 = v329;
LABEL_82:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  uint64_t v287 = v16[7];
  uint64_t v288 = v10 + v287;
  uint64_t v289 = v11 + v287;
  __swift_destroy_boxed_opaque_existential_1(v10 + v287);
  long long v290 = *(_OWORD *)(v289 + 16);
  *(_OWORD *)uint64_t v288 = *(_OWORD *)v289;
  *(_OWORD *)(v288 + 16) = v290;
  *(void *)(v288 + 32) = *(void *)(v289 + 32);
  uint64_t v291 = v16[8];
  uint64_t v292 = (_OWORD *)(v10 + v291);
  uint64_t v293 = (_OWORD *)(v11 + v291);
  long long v294 = v293[1];
  *uint64_t v292 = *v293;
  v292[1] = v294;
  uint64_t v295 = v16[9];
  uint64_t v296 = v10 + v295;
  uint64_t v297 = v11 + v295;
  uint64_t v298 = *(void *)(v11 + v295 + 8);
  *(void *)uint64_t v296 = *(void *)(v11 + v295);
  *(void *)(v296 + 8) = v298;
  swift_bridgeObjectRelease();
  *(void *)(v296 + 16) = *(void *)(v297 + 16);
  swift_bridgeObjectRelease();
  unint64_t v299 = *(void *)(v296 + 32);
  if (v299 >> 60 == 15) {
    goto LABEL_86;
  }
  unint64_t v300 = *(void *)(v297 + 32);
  if (v300 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v296 + 24);
LABEL_86:
    *(_OWORD *)(v296 + 24) = *(_OWORD *)(v297 + 24);
    *(void *)(v296 + 40) = *(void *)(v297 + 40);
    goto LABEL_88;
  }
  uint64_t v301 = *(void *)(v296 + 24);
  *(void *)(v296 + 24) = *(void *)(v297 + 24);
  *(void *)(v296 + 32) = v300;
  outlined consume of Data._Representation(v301, v299);
  *(void *)(v296 + 40) = *(void *)(v297 + 40);
LABEL_88:
  unint64_t v302 = *(void *)(v296 + 56);
  if (v302 >> 60 != 15)
  {
    unint64_t v303 = *(void *)(v297 + 56);
    if (v303 >> 60 != 15)
    {
      uint64_t v304 = *(void *)(v296 + 48);
      *(void *)(v296 + 48) = *(void *)(v297 + 48);
      *(void *)(v296 + 56) = v303;
      outlined consume of Data._Representation(v304, v302);
      *(void *)(v296 + 64) = *(void *)(v297 + 64);
      goto LABEL_93;
    }
    outlined destroy of ByteBuffer(v296 + 48);
  }
  *(_OWORD *)(v296 + 48) = *(_OWORD *)(v297 + 48);
  *(void *)(v296 + 64) = *(void *)(v297 + 64);
LABEL_93:
  *(_WORD *)(v296 + 72) = *(_WORD *)(v297 + 72);
  *(unsigned char *)(v296 + 74) = *(unsigned char *)(v297 + 74);
  *(unsigned char *)(v296 + 75) = *(unsigned char *)(v297 + 75);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExportedAuthenticator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B56F6488);
}

uint64_t sub_1B56F6488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 11)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    BOOL v5 = ((4 * v4) & 0xC) == 0;
    unsigned int v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for HandshakeStateMachine();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for ExportedAuthenticator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B56F6550);
}

void *sub_1B56F6550(void *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 11)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for HandshakeStateMachine();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ExportedAuthenticator()
{
  uint64_t result = type metadata accessor for HandshakeStateMachine();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, *(void *)(v3 + 16), **(void **)(v3 + 32), *(void *)(*(void *)(v3 + 32) + 8));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return result;
}

uint64_t outlined init with take of ContiguousBytes(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    if (__OFSUB__(a2 - result, a3))
    {
      __break(1u);
      goto LABEL_9;
    }
    uint64_t v7 = result + a3;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = a5;
  if (!v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _StringGuts.copyUTF8(into:)();
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1B56F67D0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, *(void *)(v3 + 16), **(void **)(v3 + 32), *(unsigned char *)(*(void *)(v3 + 32) + 8));
  if (!v4)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(void *)(a3 + 24) = v9;
  }
  return result;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!result) {
    return a4;
  }
  if (!__OFSUB__(a2 - result, a3))
  {
    specialized Sequence._copyContents(initializing:)((uint64_t)&v5, (unsigned char *)(result + a3), a2 - result - a3, a4, a5);
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)()
{
  return specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)();
}

{
  return specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)();
}

unint64_t lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>;
  if (!lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t _s9CryptoKit6SHA384VAcA12HashFunctionAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in Data.append<A>(contentsOf:)partial apply()
{
  return partial apply for closure #1 in Data.append<A>(contentsOf:)();
}

void *ExtensionType.serverName.unsafeMutableAddressor()
{
  return &static ExtensionType.serverName;
}

void *ExtensionType.supportedGroups.unsafeMutableAddressor()
{
  return &static ExtensionType.supportedGroups;
}

void *ExtensionType.supportedVersions.unsafeMutableAddressor()
{
  return &static ExtensionType.supportedVersions;
}

void *ExtensionType.applicationLayerProtocolNegotiation.unsafeMutableAddressor()
{
  return &static ExtensionType.applicationLayerProtocolNegotiation;
}

void *ExtensionType.keyShare.unsafeMutableAddressor()
{
  return &static ExtensionType.keyShare;
}

void *ExtensionType.earlyData.unsafeMutableAddressor()
{
  return &static ExtensionType.earlyData;
}

void *ExtensionType.signatureAlgorithms.unsafeMutableAddressor()
{
  return &static ExtensionType.signatureAlgorithms;
}

void *ExtensionType.serverCertificateType.unsafeMutableAddressor()
{
  return &static ExtensionType.serverCertificateType;
}

void *ExtensionType.quicTransportParameters.unsafeMutableAddressor()
{
  return &static ExtensionType.quicTransportParameters;
}

void *ExtensionType.preSharedKeyKexModes.unsafeMutableAddressor()
{
  return &static ExtensionType.preSharedKeyKexModes;
}

void *ExtensionType.preSharedKey.unsafeMutableAddressor()
{
  return &static ExtensionType.preSharedKey;
}

void *ExtensionType.ticketRequest.unsafeMutableAddressor()
{
  return &static ExtensionType.ticketRequest;
}

uint64_t ByteBuffer.writeExtensionType(_:)(unsigned int a1)
{
  void v3[5] = *MEMORY[0x1E4F143B8];
  __int16 v2 = bswap32(a1) >> 16;
  v3[3] = MEMORY[0x1E4FBB2B8];
  v3[4] = MEMORY[0x1E4F27EF0];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 2;
}

uint64_t ByteBuffer.readExtensionType()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < v2) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v3 + 24) >= v2) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v4) < v2)
      {
LABEL_11:
        unsigned int v6 = 0;
        int v5 = 1;
        return v6 | (v5 << 16);
      }
LABEL_8:
      if (v2 < v1) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v5 = 0;
      unsigned int v6 = bswap32(0) >> 16;
      v0[2] = v2;
      return v6 | (v5 << 16);
  }
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ExtensionType@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ExtensionType(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t static ExtensionType.supportedGroups.getter()
{
  return 10;
}

uint64_t static ExtensionType.signatureAlgorithms.getter()
{
  return 13;
}

uint64_t static ExtensionType.applicationLayerProtocolNegotiation.getter()
{
  return 16;
}

uint64_t static ExtensionType.serverCertificateType.getter()
{
  return 20;
}

uint64_t static ExtensionType.earlyData.getter()
{
  return 42;
}

uint64_t static ExtensionType.supportedVersions.getter()
{
  return 43;
}

uint64_t static ExtensionType.keyShare.getter()
{
  return 51;
}

uint64_t static ExtensionType.quicTransportParameters.getter()
{
  return 57;
}

uint64_t static ExtensionType.preSharedKeyKexModes.getter()
{
  return 45;
}

uint64_t static ExtensionType.preSharedKey.getter()
{
  return 41;
}

uint64_t static ExtensionType.ticketRequest.getter()
{
  return 58;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExtensionType()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExtensionType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExtensionType()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExtensionType(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t ExtensionType.description.getter(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t result = 0x4E7265767265732ELL;
  switch(v1)
  {
    case 0:
      return result;
    case 10:
      uint64_t result = 0xD000000000000010;
      break;
    case 13:
      uint64_t result = 0xD000000000000014;
      break;
    case 16:
      uint64_t result = 0xD000000000000024;
      break;
    case 20:
      uint64_t result = 0xD000000000000016;
      break;
    case 41:
      unsigned int v5 = 1701998638;
      goto LABEL_13;
    case 42:
      uint64_t result = 0x6144796C7261652ELL;
      break;
    case 43:
      uint64_t result = 0xD000000000000012;
      break;
    case 45:
      uint64_t result = 0xD000000000000015;
      break;
    case 51:
      unsigned int v5 = 2036689710;
LABEL_13:
      uint64_t result = v5 | 0x7261685300000000;
      break;
    case 57:
      uint64_t result = 0xD000000000000018;
      break;
    case 58:
      uint64_t result = 0x5274656B6369742ELL;
      break;
    default:
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      uint64_t result = 0xD000000000000018;
      break;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExtensionType()
{
  return ExtensionType.description.getter(*v0);
}

unint64_t lazy protocol witness table accessor for type ExtensionType and conformance ExtensionType()
{
  unint64_t result = lazy protocol witness table cache variable for type ExtensionType and conformance ExtensionType;
  if (!lazy protocol witness table cache variable for type ExtensionType and conformance ExtensionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtensionType and conformance ExtensionType);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionType()
{
  return &type metadata for ExtensionType;
}

int64_t TLSMessageSerializer.writeHandshakeMessage(_:into:)(uint64_t a1)
{
  outlined init with take of HandshakeMessage(a1, (uint64_t)v19);
  uint64_t v3 = v19[0];
  unint64_t v2 = v19[1];
  unint64_t v4 = v19[2];
  uint64_t v5 = v19[4];
  unint64_t v6 = v19[5];
  outlined init with take of HandshakeMessage(a1, (uint64_t)&v20);
  switch(v27)
  {
    case 1:
      long long v30 = v22;
      long long v31 = v23;
      long long v32 = v24;
      long long v33 = v25;
      long long v28 = v20;
      long long v29 = v21;
      return specialized ByteBuffer.writeHandshakeMessage<A>(_:)();
    case 2:
      return specialized ByteBuffer.writeHandshakeMessage<A>(_:)(v20);
    case 3:
      long long v8 = v20;
      long long v9 = v21;
      outlined copy of Data._Representation(v3, v2);
      swift_bridgeObjectRetain();
      int64_t v10 = specialized ByteBuffer.writeHandshakeMessage<A>(_:)(v8, *((unint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1));
      goto LABEL_10;
    case 4:
      long long v11 = v20;
      long long v12 = v21;
      outlined copy of Data._Representation(v3, v2);
      swift_bridgeObjectRetain();
      int64_t v10 = specialized ByteBuffer.writeHandshakeMessage<A>(_:)(v11, *((unint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1));
      goto LABEL_10;
    case 5:
      uint64_t v13 = *((void *)&v20 + 1);
      long long v14 = v21;
      unsigned int v15 = (unsigned __int16)v20;
      outlined copy of Data._Representation(v2, v4);
      int64_t v10 = specialized ByteBuffer.writeHandshakeMessage<A>(_:)(v15, v13, v14, *((uint64_t *)&v14 + 1));
      goto LABEL_10;
    case 6:
      long long v16 = v20;
      uint64_t v17 = v21;
      outlined copy of Data._Representation(v3, v2);
      int64_t v10 = specialized ByteBuffer.writeHandshakeMessage<A>(_:)(v16, *((unint64_t *)&v16 + 1), v17);
      goto LABEL_10;
    case 7:
      long long v28 = v20;
      long long v29 = v21;
      long long v30 = v22;
      long long v31 = v23;
      outlined copy of Data._Representation(v2, v4);
      outlined copy of Data._Representation(v5, v6);
      swift_bridgeObjectRetain();
      int64_t v10 = specialized ByteBuffer.writeHandshakeMessage<A>(_:)();
LABEL_10:
      int64_t v7 = v10;
      outlined release of HandshakeMessage(a1);
      break;
    default:
      long long v32 = v24;
      long long v33 = v25;
      uint64_t v34 = v26;
      long long v28 = v20;
      long long v29 = v21;
      long long v30 = v22;
      long long v31 = v23;
      int64_t v7 = specialized ByteBuffer.writeHandshakeMessage<A>(_:)();
      break;
  }
  return v7;
}

int64_t specialized ByteBuffer.writeHandshakeMessage<A>(_:)()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  LOBYTE(v10) = 1;
  uint64_t v1 = MEMORY[0x1E4FBB2B8];
  uint64_t v2 = MEMORY[0x1E4F27EF0];
  uint64_t v13 = MEMORY[0x1E4FBB2B8];
  uint64_t v14 = MEMORY[0x1E4F27EF0];
  long long v11 = &v10;
  long long v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  uint64_t v5 = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v4);
      break;
  }
  LOBYTE(v10) = 0;
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v11 = &v10;
  long long v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, v1);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  __int16 v10 = 0;
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v11 = &v10;
  long long v12 = &v11;
  __swift_project_boxed_opaque_existential_1(&v11, v1);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  int64_t v6 = ClientHello.write(into:)(v0);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  int64_t v7 = v6;
  uint64_t v8 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v6), v5);
  if (__OFADD__(v5, v8)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v5 + v8);
  return v7 + 4;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  __int16 v10;
  __int16 *v11;
  __int16 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v15 = *MEMORY[0x1E4F143B8];
  LOBYTE(v10) = 2;
  uint64_t v1 = MEMORY[0x1E4FBB2B8];
  uint64_t v2 = MEMORY[0x1E4F27EF0];
  uint64_t v13 = MEMORY[0x1E4FBB2B8];
  uint64_t v14 = MEMORY[0x1E4F27EF0];
  long long v11 = &v10;
  long long v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  uint64_t v5 = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v4);
      break;
  }
  LOBYTE(v10) = 0;
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v11 = &v10;
  long long v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, v1);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  __int16 v10 = 0;
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v11 = &v10;
  long long v12 = &v11;
  __swift_project_boxed_opaque_existential_1(&v11, v1);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  int64_t v6 = ServerHello.write(into:)(v0);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  int64_t v7 = v6;
  uint64_t v8 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v6), v5);
  if (__OFADD__(v5, v8)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v5 + v8);
  return v7 + 4;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  __int16 v10;
  __int16 *v11;
  __int16 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v15 = *MEMORY[0x1E4F143B8];
  LOBYTE(v10) = 4;
  uint64_t v1 = MEMORY[0x1E4FBB2B8];
  uint64_t v2 = MEMORY[0x1E4F27EF0];
  uint64_t v13 = MEMORY[0x1E4FBB2B8];
  uint64_t v14 = MEMORY[0x1E4F27EF0];
  long long v11 = &v10;
  long long v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  uint64_t v5 = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v4);
      break;
  }
  LOBYTE(v10) = 0;
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v11 = &v10;
  long long v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, v1);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  __int16 v10 = 0;
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v11 = &v10;
  long long v12 = &v11;
  __swift_project_boxed_opaque_existential_1(&v11, v1);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  int64_t v6 = NewSessionTicket.write(into:)(v0);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  int64_t v7 = v6;
  uint64_t v8 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v6), v5);
  if (__OFADD__(v5, v8)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v5 + v8);
  return v7 + 4;
}

int64_t specialized ByteBuffer.writeHandshakeMessage<A>(_:)(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LOBYTE(v12) = 8;
  uint64_t v3 = MEMORY[0x1E4FBB2B8];
  uint64_t v4 = MEMORY[0x1E4F27EF0];
  uint64_t v15 = MEMORY[0x1E4FBB2B8];
  uint64_t v16 = MEMORY[0x1E4F27EF0];
  uint64_t v13 = &v12;
  uint64_t v14 = (__int16 **)((char *)&v12 + 1);
  __swift_project_boxed_opaque_existential_1(&v13, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  uint64_t v5 = *v1;
  unint64_t v6 = v1[1];
  uint64_t v7 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v5 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = BYTE6(v6);
      break;
  }
  LOBYTE(v12) = 0;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  uint64_t v13 = &v12;
  uint64_t v14 = (__int16 **)((char *)&v12 + 1);
  __swift_project_boxed_opaque_existential_1(&v13, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  __int16 v12 = 0;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  uint64_t v13 = &v12;
  uint64_t v14 = &v13;
  __swift_project_boxed_opaque_existential_1(&v13, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  int64_t v8 = EncryptedExtensions.write(into:)(v1, a1);
  if (v8 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  int64_t v9 = v8;
  uint64_t v10 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v8), v7);
  if (__OFADD__(v7, v10)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v9, v7 + v10);
  return v9 + 4;
}

int64_t specialized ByteBuffer.writeHandshakeMessage<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  LOBYTE(v18) = 13;
  uint64_t v9 = MEMORY[0x1E4FBB2B8];
  uint64_t v10 = MEMORY[0x1E4F27EF0];
  uint64_t v21 = MEMORY[0x1E4FBB2B8];
  uint64_t v22 = MEMORY[0x1E4F27EF0];
  uint64_t v19 = &v18;
  long long v20 = (__int16 **)((char *)&v18 + 1);
  __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  uint64_t v11 = *v4;
  unint64_t v12 = v4[1];
  uint64_t v13 = 0;
  switch(v12 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v11 >> 32;
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v11 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v13 = BYTE6(v12);
      break;
  }
  LOBYTE(v18) = 0;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  uint64_t v19 = &v18;
  long long v20 = (__int16 **)((char *)&v18 + 1);
  __swift_project_boxed_opaque_existential_1(&v19, v9);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  __int16 v18 = 0;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  uint64_t v19 = &v18;
  long long v20 = &v19;
  __swift_project_boxed_opaque_existential_1(&v19, v9);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  int64_t v14 = CertificateRequest.write(into:)(v4, a1, a2, a3, a4);
  if (v14 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  int64_t v15 = v14;
  uint64_t v16 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v14), v13);
  if (__OFADD__(v13, v16)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v15, v13 + v16);
  return v15 + 4;
}

uint64_t specialized ByteBuffer.writeHandshakeMessage<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  LOBYTE(v19) = 11;
  uint64_t v9 = MEMORY[0x1E4FBB2B8];
  uint64_t v10 = MEMORY[0x1E4F27EF0];
  uint64_t v22 = MEMORY[0x1E4FBB2B8];
  uint64_t v23 = MEMORY[0x1E4F27EF0];
  long long v20 = &v19;
  uint64_t v21 = (__int16 **)((char *)&v19 + 1);
  __swift_project_boxed_opaque_existential_1(&v20, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  uint64_t v11 = *v4;
  unint64_t v12 = v4[1];
  uint64_t v13 = 0;
  switch(v12 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v11 >> 32;
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v11 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v13 = BYTE6(v12);
      break;
  }
  LOBYTE(v19) = 0;
  uint64_t v22 = v9;
  uint64_t v23 = v10;
  long long v20 = &v19;
  uint64_t v21 = (__int16 **)((char *)&v19 + 1);
  __swift_project_boxed_opaque_existential_1(&v20, v9);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  __int16 v19 = 0;
  uint64_t v22 = v9;
  uint64_t v23 = v10;
  long long v20 = &v19;
  uint64_t v21 = &v20;
  __swift_project_boxed_opaque_existential_1(&v20, v9);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(v4, a1, a2, a3);
  outlined consume of Data._Representation(a1, a2);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(v4, a1, a2, a3, a4);
  outlined consume of Data._Representation(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v16 > 0xFFFFFF)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  uint64_t v17 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v16), v13);
  if (__OFADD__(v13, v17)) {
    goto LABEL_11;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v14 + v15, v13 + v17);
  return v16 + 4;
}

int64_t specialized ByteBuffer.writeHandshakeMessage<A>(_:)(unsigned int a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  LOBYTE(v18) = 15;
  uint64_t v9 = MEMORY[0x1E4FBB2B8];
  uint64_t v10 = MEMORY[0x1E4F27EF0];
  uint64_t v21 = MEMORY[0x1E4FBB2B8];
  uint64_t v22 = MEMORY[0x1E4F27EF0];
  __int16 v19 = &v18;
  long long v20 = (__int16 **)((char *)&v18 + 1);
  __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  uint64_t v11 = *v4;
  unint64_t v12 = v4[1];
  uint64_t v13 = 0;
  switch(v12 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v11 >> 32;
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v11 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v13 = BYTE6(v12);
      break;
  }
  LOBYTE(v18) = 0;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  __int16 v19 = &v18;
  long long v20 = (__int16 **)((char *)&v18 + 1);
  __swift_project_boxed_opaque_existential_1(&v19, v9);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  __int16 v18 = 0;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  __int16 v19 = &v18;
  long long v20 = &v19;
  __swift_project_boxed_opaque_existential_1(&v19, v9);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  int64_t v14 = CertificateVerify.write(into:)(v4, a1, a2, a3, a4);
  if (v14 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  int64_t v15 = v14;
  uint64_t v16 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v14), v13);
  if (__OFADD__(v13, v16)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v15, v13 + v16);
  return v15 + 4;
}

uint64_t specialized ByteBuffer.writeHandshakeMessage<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  LOBYTE(v16) = 20;
  uint64_t v7 = MEMORY[0x1E4FBB2B8];
  uint64_t v8 = MEMORY[0x1E4F27EF0];
  uint64_t v19 = MEMORY[0x1E4FBB2B8];
  uint64_t v20 = MEMORY[0x1E4F27EF0];
  uint64_t v17 = &v16;
  __int16 v18 = (__int16 **)((char *)&v16 + 1);
  __swift_project_boxed_opaque_existential_1(&v17, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  uint64_t v9 = *v3;
  unint64_t v10 = v3[1];
  uint64_t v11 = 0;
  switch(v10 >> 62)
  {
    case 1uLL:
      uint64_t v11 = v9 >> 32;
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(v9 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v11 = BYTE6(v10);
      break;
  }
  LOBYTE(v16) = 0;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  uint64_t v17 = &v16;
  __int16 v18 = (__int16 **)((char *)&v16 + 1);
  __swift_project_boxed_opaque_existential_1(&v17, v7);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  __int16 v16 = 0;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  uint64_t v17 = &v16;
  __int16 v18 = &v17;
  __swift_project_boxed_opaque_existential_1(&v17, v7);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  uint64_t v12 = ByteBuffer.writeImmutableBuffer(_:)(a1, a2, a3);
  if (v12 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  uint64_t v13 = v12;
  uint64_t v14 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v12), v11);
  if (__OFADD__(v11, v14)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v13, v11 + v14);
  return v13 + 4;
}

uint64_t outlined release of HandshakeMessage(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for TLSMessageSerializer()
{
  return &type metadata for TLSMessageSerializer;
}

uint64_t HandshakeStateMachine.generateTLSExporterKey(label:)@<X0>(Swift::Int a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v3 + *(int *)(v13 + 24), (uint64_t)v12, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of HandshakeState.ReadyState((uint64_t)v12, (uint64_t)v9, type metadata accessor for HandshakeState.ReadyState);
    specialized SessionKeyManager.generateTLSExporterKey(label:)(a1, a2, a3);
    uint64_t v14 = type metadata accessor for HandshakeState.ReadyState;
    uint64_t v15 = (uint64_t)v9;
  }
  else
  {
    uint64_t v16 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 1, 1, v16);
    uint64_t v14 = type metadata accessor for HandshakeState;
    uint64_t v15 = (uint64_t)v12;
  }
  return _s8SwiftTLS14HandshakeStateOWOhTm_0(v15, v14);
}

uint64_t type metadata accessor for HandshakeStateMachine()
{
  uint64_t result = type metadata singleton initialization cache for HandshakeStateMachine;
  if (!type metadata singleton initialization cache for HandshakeStateMachine) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HandshakeStateMachine.generateHashForAuthenticator(transcript:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v3 + *(int *)(v13 + 24), (uint64_t)v12, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of HandshakeState.ReadyState((uint64_t)v12, (uint64_t)v9, type metadata accessor for HandshakeState.ReadyState);
    uint64_t v14 = specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(a1, a2, a3);
    _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v9, type metadata accessor for HandshakeState.ReadyState);
  }
  else
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v12, type metadata accessor for HandshakeState);
    return 0;
  }
  return v14;
}

uint64_t HandshakeStateMachine.generateHMACForAuthenticator(transcript:key:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v4 + *(int *)(v15 + 24), (uint64_t)v14, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of HandshakeState.ReadyState((uint64_t)v14, (uint64_t)v11, type metadata accessor for HandshakeState.ReadyState);
    uint64_t v16 = specialized SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(a1, a2, a3, a4);
    _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v11, type metadata accessor for HandshakeState.ReadyState);
  }
  else
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v14, type metadata accessor for HandshakeState);
    return 0;
  }
  return v16;
}

uint64_t HandshakeStateMachine.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for HandshakeState.IdleState(0) - 8;
  MEMORY[0x1F4188790]();
  unint64_t v6 = (_OWORD *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1F4188790]();
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)a2 = xmmword_1B577F270;
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = (int *)type metadata accessor for HandshakeStateMachine();
  uint64_t v10 = a2 + v9[7];
  *(void *)(v10 + 24) = &type metadata for SwiftTLSDefaultClock;
  *(void *)(v10 + 32) = &protocol witness table for SwiftTLSDefaultClock;
  uint64_t v27 = 0;
  MEMORY[0x1BA99F290](&v27, 8);
  uint64_t v11 = v27;
  uint64_t v27 = 0;
  MEMORY[0x1BA99F290](&v27, 8);
  uint64_t v12 = v27;
  uint64_t v27 = 0;
  MEMORY[0x1BA99F290](&v27, 8);
  uint64_t v13 = v27;
  uint64_t v27 = 0;
  MEMORY[0x1BA99F290](&v27, 8);
  uint64_t v14 = v27;
  uint64_t v15 = (void *)(a2 + v9[8]);
  *uint64_t v15 = v11;
  v15[1] = v12;
  v15[2] = v13;
  v15[3] = v14;
  uint64_t v16 = (_OWORD *)(a2 + v9[9]);
  long long v17 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v17;
  *(_OWORD *)((char *)v16 + 60) = *(_OWORD *)(a1 + 60);
  long long v18 = *(_OWORD *)(a1 + 16);
  _OWORD *v16 = *(_OWORD *)a1;
  v16[1] = v18;
  uint64_t v19 = a2 + v9[6];
  uint64_t v20 = type metadata accessor for SessionTicket();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v8, 1, 1, v20);
  uint64_t v22 = (uint64_t)v6 + *(int *)(v4 + 28);
  v21((char *)v22, 1, 1, v20);
  long long v23 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v23;
  *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)(a1 + 60);
  long long v24 = *(_OWORD *)(a1 + 16);
  *unint64_t v6 = *(_OWORD *)a1;
  v6[1] = v24;
  outlined retain of HandshakeStateMachine.Configuration((void *)a1);
  outlined assign with take of SessionTicket?((uint64_t)v8, v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  swift_storeEnumTagMultiPayload();
  outlined init with take of HandshakeState.ReadyState((uint64_t)v6, v19, type metadata accessor for HandshakeState.IdleState);
  type metadata accessor for HandshakeState(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t HandshakeStateMachine.init(sessionTicket:configuration:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for HandshakeStateMachine();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_OWORD *)a4 = xmmword_1B577F270;
  *(void *)(a4 + 16) = 0;
  uint64_t v15 = &type metadata for SwiftTLSDefaultClock;
  uint64_t v16 = &protocol witness table for SwiftTLSDefaultClock;
  uint64_t result = HandshakeStateMachine.init(sessionTicket:configuration:clock:)(a1, a2, a3, (uint64_t)v14, (uint64_t)v11);
  if (!v4) {
    return outlined init with take of HandshakeState.ReadyState((uint64_t)v11, a4, (uint64_t (*)(void))type metadata accessor for HandshakeStateMachine);
  }
  return result;
}

uint64_t HandshakeStateMachine.init(sessionTicket:configuration:clock:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v47 = a4;
  uint64_t v42 = type metadata accessor for HandshakeState.IdleState(0);
  MEMORY[0x1F4188790](v42);
  uint64_t v11 = (_OWORD *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v41 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v44);
  uint64_t v43 = (uint64_t)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SessionTicket();
  uint64_t v40 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)a5 = xmmword_1B577F270;
  uint64_t v18 = a5;
  *(void *)(a5 + 16) = 0;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v45 = a1;
  unint64_t v46 = a2;
  SessionTicket.init(serialized:)(a1, a2, (uint64_t)v17);
  if (v5)
  {
    outlined release of HandshakeStateMachine.Configuration((void *)a3);
    outlined consume of Data._Representation(v45, v46);
    __swift_destroy_boxed_opaque_existential_1(v47);
    return outlined consume of ByteBuffer?(0, 0xF000000000000000);
  }
  else
  {
    uint64_t v20 = (int *)type metadata accessor for HandshakeStateMachine();
    uint64_t v21 = v18 + v20[7];
    uint64_t v39 = 0;
    outlined init with copy of SwiftTLSClock(v47, v21);
    uint64_t v48 = 0;
    MEMORY[0x1BA99F290](&v48, 8);
    uint64_t v22 = v48;
    uint64_t v48 = 0;
    MEMORY[0x1BA99F290](&v48, 8);
    uint64_t v23 = v48;
    uint64_t v48 = 0;
    MEMORY[0x1BA99F290](&v48, 8);
    uint64_t v24 = v48;
    uint64_t v48 = 0;
    MEMORY[0x1BA99F290](&v48, 8);
    uint64_t v25 = v48;
    uint64_t v37 = v18;
    unint64_t v38 = v20;
    uint64_t v26 = (void *)(v18 + v20[8]);
    void *v26 = v22;
    v26[1] = v23;
    long long v26[2] = v24;
    v26[3] = v25;
    uint64_t v27 = (_OWORD *)(v18 + v20[9]);
    long long v28 = *(_OWORD *)(a3 + 48);
    v27[2] = *(_OWORD *)(a3 + 32);
    v27[3] = v28;
    *(_OWORD *)((char *)v27 + 60) = *(_OWORD *)(a3 + 60);
    long long v29 = *(_OWORD *)(a3 + 16);
    _OWORD *v27 = *(_OWORD *)a3;
    v27[1] = v29;
    uint64_t v30 = v41;
    outlined init with copy of HandshakeState((uint64_t)v17, v41, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    long long v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
    v31(v30, 0, 1, v15);
    uint64_t v32 = (uint64_t)v11 + *(int *)(v42 + 20);
    v31(v32, 1, 1, v15);
    long long v33 = *(_OWORD *)(a3 + 48);
    v11[2] = *(_OWORD *)(a3 + 32);
    v11[3] = v33;
    *(_OWORD *)((char *)v11 + 60) = *(_OWORD *)(a3 + 60);
    long long v34 = *(_OWORD *)(a3 + 16);
    *uint64_t v11 = *(_OWORD *)a3;
    v11[1] = v34;
    outlined retain of HandshakeStateMachine.Configuration((void *)a3);
    outlined assign with take of SessionTicket?(v30, v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    swift_storeEnumTagMultiPayload();
    uint64_t v35 = v43;
    outlined init with take of HandshakeState.ReadyState((uint64_t)v11, v43, type metadata accessor for HandshakeState.IdleState);
    outlined consume of Data._Representation(v45, v46);
    __swift_destroy_boxed_opaque_existential_1(v47);
    _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    swift_storeEnumTagMultiPayload();
    return outlined init with take of HandshakeState.ReadyState(v35, v37 + v38[6], type metadata accessor for HandshakeState);
  }
}

uint64_t HandshakeStateMachine.startHandshake()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PartialHandshakeResult(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v153 = type metadata accessor for SessionTicket();
  uint64_t v150 = *(void *)(v153 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v153);
  uint64_t v143 = (uint64_t)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v144 = (uint64_t)&v134 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v145 = (char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v156 = (char *)&v134 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v134 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v146 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v158 = (char *)&v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for HandshakeState.IdleState(0);
  MEMORY[0x1F4188790](v149);
  uint64_t v175 = (uint64_t)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HandshakeState(0);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v134 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v134 - v23;
  uint64_t v154 = (int *)type metadata accessor for HandshakeStateMachine();
  uint64_t v155 = v1;
  uint64_t v161 = (char *)v1 + v154[6];
  outlined init with copy of HandshakeState((uint64_t)v161, (uint64_t)v24, type metadata accessor for HandshakeState);
  *(void *)&long long v160 = v19;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v26 = 0xE400000000000000;
  uint64_t v27 = 1701602409;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v28 = 0x746E65696C63;
      goto LABEL_4;
    case 2:
      uint64_t v28 = 0x726576726573;
LABEL_4:
      uint64_t v27 = v28 & 0xFFFFFFFFFFFFLL | 0x6548000000000000;
      unint64_t v26 = 0xEB000000006F6C6CLL;
      break;
    case 3:
      uint64_t v27 = 0xD000000000000019;
      long long v29 = "serverEncryptedExtensions";
      goto LABEL_8;
    case 4:
      unint64_t v26 = 0x80000001B5782BF0;
      uint64_t v27 = 0xD000000000000011;
      break;
    case 5:
      uint64_t v27 = 0xD000000000000017;
      long long v29 = "serverCertificateVerify";
LABEL_8:
      unint64_t v26 = (unint64_t)(v29 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v26 = 0xEC00000061746144;
      uint64_t v27 = 0x726F467964616572;
      break;
    default:
      break;
  }
  uint64_t v157 = v27;
  uint64_t v152 = v15;
  _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v24, type metadata accessor for HandshakeState);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v31 = __swift_project_value_buffer(v30, (uint64_t)logger);
  swift_bridgeObjectRetain_n();
  uint64_t v159 = v31;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v142 = a1;
  uint64_t v148 = v5;
  uint64_t v151 = v16;
  if (v34)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(void *)&v162[0] = v36;
    *(_DWORD *)uint64_t v35 = 136446210;
    swift_bridgeObjectRetain();
    v164[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v26, (uint64_t *)v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B56C5000, v32, v33, "startHandshake in state %{public}s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA99F280](v36, -1, -1);
    MEMORY[0x1BA99F280](v35, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  outlined init with copy of HandshakeState((uint64_t)v161, (uint64_t)v22, type metadata accessor for HandshakeState);
  int v37 = swift_getEnumCaseMultiPayload();
  uint64_t v38 = v175;
  if (v37)
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v22, type metadata accessor for HandshakeState);
    swift_bridgeObjectRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(void *)&v162[0] = v42;
      *(_DWORD *)uint64_t v41 = 136446210;
      swift_bridgeObjectRetain();
      v164[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v26, (uint64_t *)v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B56C5000, v39, v40, "invalid state for startHandshake: %{public}s", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA99F280](v42, -1, -1);
      MEMORY[0x1BA99F280](v41, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v43 = 2;
    *(unsigned char *)(v43 + 4) = 1;
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with take of HandshakeState.ReadyState((uint64_t)v22, v38, type metadata accessor for HandshakeState.IdleState);
    if (*((unsigned char *)v155 + v154[9] + 75) == 1)
    {
      uint64_t v165 = type metadata accessor for Curve25519EphemeralKey(0);
      uint64_t v166 = &protocol witness table for Curve25519EphemeralKey;
      __swift_allocate_boxed_opaque_existential_1(v164);
      Curve25519.KeyAgreement.PrivateKey.init()();
    }
    else
    {
      uint64_t v165 = type metadata accessor for P384EphemeralKey(0);
      uint64_t v166 = (char **)&protocol witness table for P384EphemeralKey;
      __swift_allocate_boxed_opaque_existential_1(v164);
      P384.KeyAgreement.PrivateKey.init()();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1B577F930;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NamedGroup>);
    uint64_t v46 = swift_allocObject();
    long long v160 = xmmword_1B577F940;
    *(_OWORD *)(v46 + 16) = xmmword_1B577F940;
    uint64_t v47 = v165;
    uint64_t v48 = v166;
    __swift_project_boxed_opaque_existential_1(v164, v165);
    *(_WORD *)(v46 + 32) = ((uint64_t (*)(uint64_t, char **))v48[1])(v47, v48);
    *(void *)(v45 + 32) = v46;
    *(void *)(v45 + 40) = 0;
    *(void *)(v45 + 48) = 0;
    *(void *)(v45 + 56) = 0;
    *(unsigned char *)(v45 + 64) = 1;
    *(void *)(v45 + 72) = &outlined read-only object #0 of HandshakeStateMachine.startHandshake();
    *(void *)(v45 + 80) = 0;
    *(void *)(v45 + 88) = 0;
    *(void *)(v45 + 96) = 0;
    *(unsigned char *)(v45 + 104) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.KeyShare.KeyShareEntry>);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = v160;
    uint64_t v50 = v165;
    uint64_t v51 = v166;
    __swift_project_boxed_opaque_existential_1(v164, v165);
    __int16 v52 = ((uint64_t (*)(uint64_t, char **))v51[1])(v50, v51);
    uint64_t v53 = v165;
    uint64_t v54 = v166;
    __swift_project_boxed_opaque_existential_1(v164, v165);
    uint64_t v55 = ((uint64_t (*)(uint64_t, char **))v54[2])(v53, v54);
    uint64_t v57 = 0;
    switch(v56 >> 62)
    {
      case 1uLL:
        uint64_t v57 = (int)v55;
        break;
      case 2uLL:
        uint64_t v57 = *(void *)(v55 + 16);
        break;
      default:
        break;
    }
    *(_WORD *)(v49 + 32) = v52;
    *(void *)(v49 + 40) = v55;
    *(void *)(v49 + 48) = v56;
    *(void *)(v49 + 56) = v57;
    *(void *)(v45 + 112) = v49;
    *(void *)(v45 + 120) = 0;
    *(void *)(v45 + 128) = 0;
    *(void *)(v45 + 136) = 0;
    *(unsigned char *)(v45 + 144) = 4;
    *(void *)(v45 + 152) = &outlined read-only object #1 of HandshakeStateMachine.startHandshake();
    *(void *)(v45 + 160) = 0;
    *(void *)(v45 + 168) = 0;
    *(void *)(v45 + 176) = 0;
    *(unsigned char *)(v45 + 184) = 6;
    if (one-time initialization token for serverCertificateTypes != -1) {
      swift_once();
    }
    uint64_t v58 = static PeerCertificateBundle.serverCertificateTypes;
    uint64_t v59 = byte_1EB79AD48;
    *(void *)(v45 + 192) = static PeerCertificateBundle.serverCertificateTypes;
    *(void *)(v45 + 200) = v59;
    *(void *)(v45 + 208) = 0;
    *(void *)(v45 + 216) = 0;
    *(unsigned char *)(v45 + 224) = 7;
    *(void *)(v45 + 232) = &outlined read-only object #2 of HandshakeStateMachine.startHandshake();
    *(void *)(v45 + 240) = 0;
    *(void *)(v45 + 248) = 0;
    *(void *)(v45 + 256) = 0;
    *(unsigned char *)(v45 + 264) = 10;
    unint64_t v60 = *(void *)v38;
    unint64_t v61 = *(void *)(v38 + 8);
    uint64_t v62 = (uint64_t)v156;
    unint64_t v139 = *(void *)v38;
    if (v61)
    {
      outlined copy of Extension.ServerCertificateType(v58, v59);
      swift_bridgeObjectRetain();
      uint64_t v63 = specialized Data.init<A>(_:)(v60, v61);
      uint64_t v64 = v63;
      unint64_t v66 = v65;
      uint64_t v67 = 0;
      switch(v65 >> 62)
      {
        case 1uLL:
          uint64_t v67 = (int)v63;
          break;
        case 2uLL:
          uint64_t v67 = *(void *)(v63 + 16);
          break;
        default:
          break;
      }
      unint64_t v69 = *(void *)(v45 + 16);
      unint64_t v68 = *(void *)(v45 + 24);
      if (v69 >= v68 >> 1) {
        uint64_t v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, (void *)v45);
      }
      *(void *)(v45 + 16) = v69 + 1;
      uint64_t v70 = v45 + 40 * v69;
      *(void *)(v70 + 32) = v64;
      *(void *)(v70 + 40) = v66;
      *(void *)(v70 + 48) = v67;
      *(void *)(v70 + 56) = 0;
      *(unsigned char *)(v70 + 64) = 0;
      uint64_t v62 = (uint64_t)v156;
    }
    else
    {
      outlined copy of Extension.ServerCertificateType(v58, v59);
    }
    uint64_t v72 = *(void *)(v38 + 24);
    unint64_t v71 = *(void *)(v38 + 32);
    uint64_t v157 = *(void *)(v38 + 40);
    if (v71 >> 60 != 15)
    {
      outlined copy of ByteBuffer?(v72, v71);
      outlined copy of Data._Representation(v72, v71);
      unint64_t v74 = *(void *)(v45 + 16);
      unint64_t v73 = *(void *)(v45 + 24);
      if (v74 >= v73 >> 1) {
        uint64_t v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, (void *)v45);
      }
      *(void *)(v45 + 16) = v74 + 1;
      uint64_t v75 = v45 + 40 * v74;
      *(void *)(v75 + 32) = v72;
      *(void *)(v75 + 40) = v71;
      *(void *)(v75 + 48) = v157;
      *(void *)(v75 + 56) = 0;
      *(unsigned char *)(v75 + 64) = 8;
      outlined consume of ByteBuffer?(v72, v71);
    }
    uint64_t v76 = *(void *)(v38 + 48);
    unint64_t v77 = *(void *)(v38 + 56);
    uint64_t v78 = *(void *)(v38 + 64);
    unint64_t v140 = v71;
    *(void *)&long long v160 = v78;
    if (v77 >> 60 != 15)
    {
      outlined copy of ByteBuffer?(v76, v77);
      uint64_t v79 = v76;
      uint64_t v80 = v76;
      unint64_t v81 = v77;
      outlined copy of Data._Representation(v80, v77);
      unint64_t v83 = *(void *)(v45 + 16);
      unint64_t v82 = *(void *)(v45 + 24);
      if (v83 >= v82 >> 1) {
        uint64_t v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v82 > 1), v83 + 1, 1, (void *)v45);
      }
      *(void *)(v45 + 16) = v83 + 1;
      uint64_t v84 = v45 + 40 * v83;
      unint64_t v77 = v81;
      uint64_t v76 = v79;
      *(void *)(v84 + 32) = v79;
      *(void *)(v84 + 40) = v77;
      *(void *)(v84 + 48) = v160;
      *(void *)(v84 + 56) = 0;
      *(unsigned char *)(v84 + 64) = 3;
      outlined consume of ByteBuffer?(v79, v77);
      uint64_t v62 = (uint64_t)v156;
    }
    uint64_t v85 = *(unsigned __int16 *)(v38 + 72);
    int v136 = *(unsigned __int8 *)(v38 + 74);
    uint64_t v137 = v85;
    uint64_t v138 = v72;
    unint64_t v141 = v77;
    if (v136)
    {
      unint64_t v86 = v61;
    }
    else
    {
      unint64_t v88 = *(void *)(v45 + 16);
      unint64_t v87 = *(void *)(v45 + 24);
      if (v88 >= v87 >> 1)
      {
        uint64_t v131 = (void *)v45;
        uint64_t v132 = v85;
        uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v131);
        uint64_t v85 = v132;
        uint64_t v45 = (uint64_t)v133;
      }
      unint64_t v86 = v61;
      *(void *)(v45 + 16) = v88 + 1;
      uint64_t v89 = v45 + 40 * v88;
      *(void *)(v89 + 32) = v85;
      *(void *)(v89 + 40) = 0;
      *(void *)(v89 + 48) = 0;
      *(void *)(v89 + 56) = 0;
      *(unsigned char *)(v89 + 64) = 12;
    }
    uint64_t v90 = (_OWORD *)((char *)v155 + v154[8]);
    *(_WORD *)uint64_t v167 = 771;
    long long v91 = v90[1];
    *(_OWORD *)&v167[8] = *v90;
    *(_OWORD *)&v167[24] = v91;
    memset(&v167[40], 0, 32);
    uint64_t v168 = 0;
    *(void *)&long long v169 = &outlined read-only object #3 of HandshakeStateMachine.startHandshake();
    *((void *)&v169 + 1) = &outlined read-only object #4 of HandshakeStateMachine.startHandshake();
    uint64_t v170 = v45;
    uint64_t v163 = (void *)v45;
    v162[4] = 0uLL;
    v162[5] = v169;
    v162[2] = *(_OWORD *)&v167[32];
    v162[3] = *(_OWORD *)&v167[48];
    v162[0] = *(_OWORD *)v167;
    v162[1] = *(_OWORD *)&v167[16];
    long long v92 = (void *)((char *)v155 + v154[7]);
    uint64_t v93 = v92[3];
    uint64_t v94 = v92[4];
    __swift_project_boxed_opaque_existential_1(v92, v93);
    uint64_t v95 = (uint64_t)v158;
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v94);
    uint64_t v96 = v175;
    uint64_t v97 = (uint64_t)v152;
    outlined init with copy of SessionTicket?(v175 + *(int *)(v149 + 20), (uint64_t)v152);
    outlined init with copy of SessionTicket?(v97, v62);
    uint64_t v98 = (int *)(v150 + 48);
    uint64_t v155 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48);
    if (v155(v62, 1, v153) == 1)
    {
      outlined destroy of HandshakeStateMachine?(v62, &demangling cache variable for type metadata for SessionTicket?);
      long long v99 = v148;
      uint64_t v100 = v151;
      uint64_t v101 = v153;
      uint64_t v102 = (uint64_t)v145;
    }
    else
    {
      uint64_t v154 = v98;
      outlined init with take of HandshakeState.ReadyState(v62, v144, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      uint64_t v103 = *(void *)(v96 + 16);
      char v104 = *(unsigned char *)(v96 + 75);
      uint64_t v105 = v138;
      v171[0] = v139;
      v171[1] = v86;
      v171[2] = v103;
      v171[3] = v138;
      uint64_t v106 = v76;
      unint64_t v107 = v140;
      v171[4] = v140;
      v171[5] = v157;
      v171[6] = v76;
      uint64_t v135 = v76;
      unint64_t v108 = v141;
      v171[7] = v141;
      v171[8] = v160;
      __int16 v172 = v137;
      char v173 = v136;
      char v174 = v104;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ByteBuffer?(v105, v107);
      outlined copy of ByteBuffer?(v106, v108);
      uint64_t v109 = v95;
      uint64_t v110 = v144;
      LOBYTE(v106) = SessionTicket.isCompatibleWith(_:configuration:currentTime:)((uint64_t)v167, (uint64_t)v171, v109);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ByteBuffer?(v105, v140);
      outlined consume of ByteBuffer?(v135, v141);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v106)
      {
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v110, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        long long v99 = v148;
        uint64_t v100 = v151;
        uint64_t v97 = (uint64_t)v152;
        uint64_t v95 = (uint64_t)v158;
        uint64_t v101 = v153;
      }
      else
      {
        uint64_t v111 = Logger.logObject.getter();
        os_log_type_t v112 = static os_log_type_t.debug.getter();
        BOOL v113 = os_log_type_enabled(v111, v112);
        long long v99 = v148;
        uint64_t v100 = v151;
        uint64_t v97 = (uint64_t)v152;
        if (v113)
        {
          uint64_t v114 = v151;
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v115 = 0;
          _os_log_impl(&dword_1B56C5000, v111, v112, "unable to resume session, incompatible with current handshake", v115, 2u);
          uint64_t v116 = v115;
          uint64_t v100 = v114;
          MEMORY[0x1BA99F280](v116, -1, -1);
        }

        _s8SwiftTLS14HandshakeStateOWOhTm_0(v110, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        outlined destroy of HandshakeStateMachine?(v97, &demangling cache variable for type metadata for SessionTicket?);
        uint64_t v101 = v153;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 56))(v97, 1, 1, v153);
        uint64_t v95 = (uint64_t)v158;
      }
      uint64_t v102 = (uint64_t)v145;
    }
    uint64_t v117 = v155;
    outlined init with copy of SessionTicket?(v97, v102);
    if (v117(v102, 1, v101) == 1)
    {
      outlined destroy of HandshakeStateMachine?(v102, &demangling cache variable for type metadata for SessionTicket?);
      uint64_t v119 = v146;
      uint64_t v118 = v147;
    }
    else
    {
      uint64_t v120 = v102;
      uint64_t v121 = v143;
      outlined init with take of HandshakeState.ReadyState(v120, v143, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      uint64_t v119 = v146;
      uint64_t v118 = v147;
      if (*(_DWORD *)(v121 + *(int *)(v101 + 40)))
      {
        uint64_t v122 = v163;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122[2] + 1, 1, v122);
        }
        uint64_t v123 = v143;
        unint64_t v125 = v122[2];
        unint64_t v124 = v122[3];
        if (v125 >= v124 >> 1) {
          uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v124 > 1), v125 + 1, 1, v122);
        }
        v122[2] = v125 + 1;
        uint64_t v126 = &v122[5 * v125];
        v126[4] = 0x100000000;
        v126[5] = 0;
        v126[6] = 0;
        v126[7] = 0;
        *((unsigned char *)v126 + 64) = 5;
        uint64_t v163 = v122;
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v123, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        uint64_t v95 = (uint64_t)v158;
        uint64_t v100 = v151;
      }
      else
      {
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v121, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      }
    }
    HandshakeState.sendingClientHello(_:sessionToResume:diffieHellmanKey:currentTime:)((uint64_t)v162, v97, (uint64_t)v164, v95, v99);
    if (v118)
    {
      outlined destroy of HandshakeStateMachine?(v97, &demangling cache variable for type metadata for SessionTicket?);
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v95, v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8SwiftTLS14HandshakeStateOWOhTm_0(v175, type metadata accessor for HandshakeState.IdleState);
    }
    else
    {
      uint64_t v127 = v100;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v128 = Logger.logObject.getter();
      os_log_type_t v129 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v128, v129))
      {
        uint64_t v130 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v130 = 0;
        _os_log_impl(&dword_1B56C5000, v128, v129, "beginning TLS handshake", v130, 2u);
        MEMORY[0x1BA99F280](v130, -1, -1);
      }

      outlined destroy of HandshakeStateMachine?(v97, &demangling cache variable for type metadata for SessionTicket?);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v158, v127);
      _s8SwiftTLS14HandshakeStateOWOhTm_0(v175, type metadata accessor for HandshakeState.IdleState);
      outlined init with take of HandshakeState.ReadyState((uint64_t)v99, v142, type metadata accessor for PartialHandshakeResult);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v164);
  }
}

uint64_t HandshakeStateMachine.receivedNetworkData(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (__OFSUB__(v4, a1[2]))
  {
    __break(1u);
  }
  else if (one-time initialization token for logger == -1)
  {
    goto LABEL_7;
  }
  swift_once();
LABEL_7:
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)logger);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B56C5000, v6, v7, "received network data (%{public}ld bytes)", v8, 0xCu);
    MEMORY[0x1BA99F280](v8, -1, -1);
  }

  return HandshakeMessageParser.appendBytes(_:)(a1);
}

uint64_t HandshakeStateMachine.processHandshake()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v203 = a1;
  uint64_t v3 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v224 = (uint64_t)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v223 = (uint64_t)&v198 - v6;
  uint64_t v212 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v212);
  uint64_t v211 = (uint64_t)&v198 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  uint64_t v8 = MEMORY[0x1F4188790](v210);
  uint64_t v220 = (uint64_t)&v198 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v219 = (uint64_t)&v198 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v198 - v12;
  uint64_t v14 = type metadata accessor for HandshakeState.ServerHelloState(0);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v222 = (uint64_t)&v198 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v221 = (uint64_t)&v198 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine.ProcessStep<PartialHandshakeResult>);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v202 = (_OWORD *)((char *)&v198 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v201 = (_OWORD *)((char *)&v198 - v22);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v199 = (uint64_t)&v198 - v24;
  MEMORY[0x1F4188790](v23);
  unint64_t v200 = (_OWORD *)((char *)&v198 - v25);
  uint64_t v240 = type metadata accessor for HandshakeState(0);
  uint64_t v26 = MEMORY[0x1F4188790](v240);
  uint64_t v207 = (uint64_t)&v198 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v209 = (uint64_t)&v198 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v204 = (uint64_t)&v198 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v205 = (uint64_t)&v198 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v206 = (uint64_t)&v198 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v208 = (uint64_t)&v198 - v37;
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (char *)&v198 - v38;
  uint64_t v239 = (uint64_t)v1 + *(int *)(type metadata accessor for HandshakeStateMachine() + 24);
  uint64_t v234 = v1;
  uint64_t v235 = v39;
  uint64_t v233 = v13;
  while (2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = __swift_project_value_buffer(v43, (uint64_t)logger);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl(&dword_1B56C5000, v45, v46, "attempting process step", v47, 2u);
      MEMORY[0x1BA99F280](v47, -1, -1);
    }

    outlined init with copy of HandshakeState(v239, (uint64_t)v39, type metadata accessor for HandshakeState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v150 = v200;
        id v151 = v267;
        HandshakeStateMachine.handleReadServerHello()((uint64_t)v200);
        id v267 = v151;
        if (!v151) {
          goto LABEL_52;
        }
        goto LABEL_46;
      case 2u:
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v50 = 0;
          _os_log_impl(&dword_1B56C5000, v48, v49, "expecting encryptedExtensions", v50, 2u);
          MEMORY[0x1BA99F280](v50, -1, -1);
        }

        unint64_t v51 = v2[1];
        if (v51 >> 60 == 15) {
          goto LABEL_39;
        }
        uint64_t v52 = *v2;
        uint64_t v53 = v2[2];
        outlined copy of Data._Representation(*v2, v2[1]);
        id v54 = v267;
        closure #1 in HandshakeMessageParser.parseHandshakeMessage()(v2, (uint64_t)v260);
        id v267 = v54;
        if (v54) {
          goto LABEL_37;
        }
        outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v260, (uint64_t)v258);
        outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v258, (uint64_t)v259);
        if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v259) == 1) {
          goto LABEL_38;
        }
        uint64_t v55 = v39;
        uint64_t v232 = v44;
        outlined consume of Data._Representation(v52, v51);
        outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v258, (uint64_t)&v241);
        uint64_t v56 = v244;
        unint64_t v57 = v249;
        unint64_t v59 = v250;
        unint64_t v58 = v251;
        uint64_t v60 = v252;
        v261[0] = v244;
        v261[1] = v245;
        v261[2] = v246;
        v261[3] = v247;
        v261[4] = v248;
        v261[5] = v249;
        v261[6] = v250;
        v261[7] = v251;
        v261[8] = v252;
        v261[9] = v253;
        v261[10] = v254;
        v261[11] = v255;
        v261[12] = v256;
        char v262 = v257;
        if (v257 != 2)
        {
          HandshakeStateMachine.logUnexpectedMessage(message:)((uint64_t)v261);
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          uint64_t v158 = (void *)swift_allocError();
          *(_DWORD *)uint64_t v159 = 4;
          *(unsigned char *)(v159 + 4) = 1;
          id v267 = v158;
          swift_willThrow();
          outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
          uint64_t v183 = type metadata accessor for HandshakeState;
          uint64_t v39 = v55;
          goto LABEL_71;
        }
        uint64_t v61 = v256;
        uint64_t v236 = v255;
        unint64_t v237 = v254;
        uint64_t v238 = v253;
        uint64_t v226 = v252;
        unint64_t v227 = v245;
        unint64_t v228 = v246;
        uint64_t v229 = v247;
        uint64_t v230 = v250;
        uint64_t v231 = v248;
        unint64_t v217 = v241;
        unint64_t v218 = v251;
        unint64_t v216 = v242;
        uint64_t v215 = v243;
        uint64_t v62 = v208;
        outlined init with copy of HandshakeState(v239, v208, type metadata accessor for HandshakeState);
        if (swift_getEnumCaseMultiPayload() != 2)
        {
          outlined copy of HandshakeMessage(v56, v227, v228, v229, v231, v57, v230, v218, v226, v238, v237, v236, v61, 2);
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v62, type metadata accessor for HandshakeState);
          __break(1u);
LABEL_82:
          outlined copy of HandshakeMessage(v226, v57, v58, v225, v236, v237, v227, v238, v231, v230, v229, (uint64_t)v2, v228, 4);
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v61, type metadata accessor for HandshakeState);
          __break(1u);
LABEL_83:
          outlined copy of HandshakeMessage(v227, v59, v56, v226, v236, v237, v228, v238, v231, v230, v229, (uint64_t)v2, v60, 5);
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v61, type metadata accessor for HandshakeState);
          __break(1u);
          JUMPOUT(0x1B56FBFE8);
        }
        uint64_t v63 = v221;
        outlined init with take of HandshakeState.ReadyState(v62, v221, type metadata accessor for HandshakeState.ServerHelloState);
        outlined init with copy of HandshakeState(v63, v222, type metadata accessor for HandshakeState.ServerHelloState);
        uint64_t v225 = v61;
        uint64_t v194 = v61;
        uint64_t v64 = v226;
        uint64_t v65 = v56;
        uint64_t v213 = v56;
        unint64_t v66 = v227;
        unint64_t v67 = v228;
        uint64_t v68 = v229;
        uint64_t v69 = v231;
        unint64_t v70 = v57;
        unint64_t v71 = v57;
        uint64_t v72 = v230;
        uint64_t v73 = v218;
        outlined copy of HandshakeMessage(v65, v227, v228, v229, v231, v71, v230, v218, v226, v238, v237, v236, v194, 2);
        unint64_t v74 = v66;
        uint64_t v75 = v213;
        unint64_t v214 = v70;
        outlined copy of HandshakeMessage(v213, v74, v67, v68, v69, v70, v72, v73, v64, v238, v237, v236, v225, 2);
        unint64_t v77 = v216;
        uint64_t v76 = v217;
        outlined copy of Data._Representation(v217, v216);
        uint64_t v78 = v206;
        id v79 = v267;
        HandshakeState.EncryptedExtensionsState.init(originalState:encryptedExtensions:extensionBytes:)(v222, v75, v76, v77, v215, v206);
        id v267 = v79;
        if (v79)
        {
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v221, type metadata accessor for HandshakeState.ServerHelloState);
          outlined consume of HandshakeMessage(v75, v227, v228, v229, v231, v214, v230, v73, v226, v238, v237, v236, v225, 2);
LABEL_65:
          outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
LABEL_68:
          long long v169 = type metadata accessor for HandshakeState;
LABEL_69:
          uint64_t v183 = v169;
LABEL_70:
          uint64_t v39 = v235;
LABEL_71:
          _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v39, v183);
          id v170 = v267;
          id v171 = v267;
          id v172 = v170;
          char v173 = Logger.logObject.getter();
          os_log_type_t v174 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v173, v174))
          {
            uint64_t v175 = (uint8_t *)swift_slowAlloc();
            uint64_t v176 = swift_slowAlloc();
            v260[0] = v176;
            *(_DWORD *)uint64_t v175 = 136446210;
            id v177 = v267;
            v259[0] = v267;
            id v178 = v267;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
            uint64_t v179 = String.init<A>(describing:)();
            v259[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v180, v260);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_1B56C5000, v173, v174, "processing message failed due to error %{public}s", v175, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA99F280](v176, -1, -1);
            MEMORY[0x1BA99F280](v175, -1, -1);
          }
          else
          {
            id v181 = v267;
          }
          return swift_willThrow();
        }
        uint64_t v80 = v239;
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v239, type metadata accessor for HandshakeState);
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v221, type metadata accessor for HandshakeState.ServerHelloState);
        swift_storeEnumTagMultiPayload();
        outlined init with take of HandshakeState.ReadyState(v78, v80, type metadata accessor for HandshakeState);
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
        outlined consume of HandshakeMessage(v75, v227, v228, v229, v231, v214, v230, v73, v226, v238, v237, v236, v225, 2);
        uint64_t v39 = v235;
        uint64_t v41 = (uint64_t)v235;
        uint64_t v42 = type metadata accessor for HandshakeState;
        goto LABEL_3;
      case 3u:
        outlined init with copy of HandshakeState((uint64_t)v39, (uint64_t)v13, type metadata accessor for HandshakeState.EncryptedExtensionsState);
        uint64_t v81 = v211;
        outlined init with copy of HandshakeState((uint64_t)&v13[*(int *)(v210 + 20)], v211, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v81, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
        if (EnumCaseMultiPayload != 1)
        {
          _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v13, type metadata accessor for HandshakeState.EncryptedExtensionsState);
          unint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v83, v84))
          {
            uint64_t v85 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v85 = 0;
            _os_log_impl(&dword_1B56C5000, v83, v84, "expecting certificate", v85, 2u);
            MEMORY[0x1BA99F280](v85, -1, -1);
          }

          unint64_t v86 = v2[1];
          if (v86 >> 60 == 15) {
            goto LABEL_59;
          }
          uint64_t v87 = *v2;
          uint64_t v88 = v2[2];
          outlined copy of Data._Representation(*v2, v2[1]);
          id v89 = v267;
          closure #1 in HandshakeMessageParser.parseHandshakeMessage()(v2, (uint64_t)v260);
          id v267 = v89;
          if (v89)
          {
            outlined consume of Data._Representation(*v2, v2[1]);
            *unint64_t v2 = v87;
            v2[1] = v86;
            v2[2] = v88;
            swift_willThrow();
            uint64_t v183 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
            goto LABEL_71;
          }
          outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v260, (uint64_t)v258);
          outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v258, (uint64_t)v259);
          if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v259) == 1)
          {
            outlined consume of Data._Representation(*v2, v2[1]);
            *unint64_t v2 = v87;
            v2[1] = v86;
            v2[2] = v88;
LABEL_59:
            long long v160 = Logger.logObject.getter();
            os_log_type_t v161 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v160, v161))
            {
              uint64_t v162 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v162 = 0;
              _os_log_impl(&dword_1B56C5000, v160, v161, "incomplete message, waiting for more data", v162, 2u);
              MEMORY[0x1BA99F280](v162, -1, -1);
            }

            uint64_t v163 = type metadata accessor for PartialHandshakeResult(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v163 - 8) + 56))(v203, 1, 1, v163);
            goto LABEL_62;
          }
          uint64_t v232 = v44;
          outlined consume of Data._Representation(v87, v86);
          outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v258, (uint64_t)&v241);
          uint64_t v56 = v244;
          unint64_t v57 = v245;
          unint64_t v58 = v246;
          uint64_t v60 = v248;
          unint64_t v59 = v254;
          unint64_t v2 = (uint64_t *)v255;
          v263[0] = v244;
          v263[1] = v245;
          v263[2] = v246;
          v263[3] = v247;
          v263[4] = v248;
          v263[5] = v249;
          v263[6] = v250;
          v263[7] = v251;
          v263[8] = v252;
          v263[9] = v253;
          v263[10] = v254;
          v263[11] = v255;
          v263[12] = v256;
          char v264 = v257;
          if (v257 != 4)
          {
            HandshakeStateMachine.logUnexpectedMessage(message:)((uint64_t)v263);
            lazy protocol witness table accessor for type TLSError and conformance TLSError();
            uint64_t v167 = (void *)swift_allocError();
            *(_DWORD *)uint64_t v168 = 4;
            *(unsigned char *)(v168 + 4) = 1;
            id v267 = v167;
            swift_willThrow();
            outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
            long long v169 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
            goto LABEL_69;
          }
          unint64_t v227 = v250;
          unint64_t v228 = v256;
          unint64_t v237 = v249;
          uint64_t v238 = v251;
          uint64_t v229 = v254;
          uint64_t v230 = v253;
          uint64_t v231 = v252;
          uint64_t v225 = v247;
          uint64_t v226 = v244;
          uint64_t v236 = v248;
          unint64_t v217 = v242;
          unint64_t v218 = v241;
          unint64_t v216 = v243;
          uint64_t v61 = v205;
          outlined init with copy of HandshakeState(v239, v205, type metadata accessor for HandshakeState);
          if (swift_getEnumCaseMultiPayload() != 3) {
            goto LABEL_82;
          }
          uint64_t v90 = v219;
          outlined init with take of HandshakeState.ReadyState(v61, v219, type metadata accessor for HandshakeState.EncryptedExtensionsState);
          outlined init with copy of HandshakeState(v90, v220, type metadata accessor for HandshakeState.EncryptedExtensionsState);
          unint64_t v91 = v228;
          uint64_t v192 = (uint64_t)v2;
          uint64_t v92 = (uint64_t)v2;
          uint64_t v93 = v229;
          uint64_t v94 = v230;
          uint64_t v95 = v231;
          unint64_t v96 = v57;
          unint64_t v214 = v57;
          unint64_t v97 = v58;
          unint64_t v98 = v58;
          uint64_t v99 = v225;
          uint64_t v100 = v236;
          outlined copy of HandshakeMessage(v226, v96, v98, v225, v236, v237, v227, v238, v231, v230, v229, v192, v228, 4);
          uint64_t v195 = v91;
          uint64_t v215 = v92;
          uint64_t v190 = v94;
          uint64_t v101 = v226;
          uint64_t v102 = v227;
          unint64_t v103 = v97;
          uint64_t v104 = v99;
          uint64_t v105 = v100;
          uint64_t v106 = (void *)v99;
          unint64_t v107 = v97;
          unint64_t v108 = v214;
          outlined copy of HandshakeMessage(v226, v214, v103, v104, v105, v237, v227, v238, v95, v190, v93, v92, v195, 4);
          unint64_t v110 = v217;
          uint64_t v109 = v218;
          outlined copy of Data._Representation(v218, v217);
          uint64_t v111 = v204;
          id v112 = v267;
          HandshakeState.ServerCertificateState.init(originalState:serverCertificate:certificateBytes:)(v220, v101, v108, v107, v106, v109, v110, v216, v204);
          id v267 = v112;
          if (v112)
          {
            uint64_t v183 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
            _s8SwiftTLS14HandshakeStateOWOhTm_0(v219, type metadata accessor for HandshakeState.EncryptedExtensionsState);
            outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
            outlined consume of HandshakeMessage(v101, v108, v107, (uint64_t)v106, v236, v237, v102, v238, v231, v230, v229, v215, v228, 4);
            goto LABEL_70;
          }
          uint64_t v40 = v239;
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v239, type metadata accessor for HandshakeState);
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v219, type metadata accessor for HandshakeState.EncryptedExtensionsState);
          swift_storeEnumTagMultiPayload();
          outlined init with take of HandshakeState.ReadyState(v111, v40, type metadata accessor for HandshakeState);
          outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
          outlined consume of HandshakeMessage(v101, v108, v107, (uint64_t)v106, v236, v237, v102, v238, v231, v230, v229, v215, v228, 4);
          uint64_t v39 = v235;
          uint64_t v41 = (uint64_t)v235;
          uint64_t v42 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
LABEL_3:
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v41, v42);
          uint64_t v13 = v233;
          unint64_t v2 = v234;
          continue;
        }
        uint64_t v156 = v199;
        id v157 = v267;
        HandshakeStateMachine.handleReadServerFinished()(v199);
        id v267 = v157;
        if (v157)
        {
          uint64_t v183 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
          _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v13, type metadata accessor for HandshakeState.EncryptedExtensionsState);
          goto LABEL_71;
        }
        _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v13, type metadata accessor for HandshakeState.EncryptedExtensionsState);
        uint64_t v186 = type metadata accessor for PartialHandshakeResult(0);
        uint64_t v187 = *(void *)(v186 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v156, 1, v186) == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v187 + 56))(v203, 1, 1, v186);
        }
        else
        {
          uint64_t v188 = v156;
          uint64_t v189 = v203;
          outlined init with take of HandshakeState.ReadyState(v188, v203, type metadata accessor for PartialHandshakeResult);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v187 + 56))(v189, 0, 1, v186);
        }
LABEL_62:
        uint64_t v164 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
        return _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v39, v164);
      case 4u:
        BOOL v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v115 = 0;
          _os_log_impl(&dword_1B56C5000, v113, v114, "expecting certificateVerify", v115, 2u);
          MEMORY[0x1BA99F280](v115, -1, -1);
        }

        unint64_t v51 = v2[1];
        if (v51 >> 60 == 15) {
          goto LABEL_39;
        }
        uint64_t v52 = *v2;
        uint64_t v53 = v2[2];
        outlined copy of Data._Representation(*v2, v2[1]);
        id v116 = v267;
        closure #1 in HandshakeMessageParser.parseHandshakeMessage()(v2, (uint64_t)v260);
        id v267 = v116;
        if (v116)
        {
LABEL_37:
          outlined consume of Data._Representation(*v2, v2[1]);
          *unint64_t v2 = v52;
          v2[1] = v51;
          v2[2] = v53;
LABEL_45:
          swift_willThrow();
LABEL_46:
          uint64_t v183 = type metadata accessor for HandshakeState;
          goto LABEL_71;
        }
        outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v260, (uint64_t)v258);
        outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v258, (uint64_t)v259);
        if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v259) == 1)
        {
LABEL_38:
          outlined consume of Data._Representation(*v2, v2[1]);
          *unint64_t v2 = v52;
          v2[1] = v51;
          v2[2] = v53;
LABEL_39:
          unint64_t v141 = Logger.logObject.getter();
          os_log_type_t v142 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v141, v142))
          {
            uint64_t v143 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v143 = 0;
            _os_log_impl(&dword_1B56C5000, v141, v142, "incomplete message, waiting for more data", v143, 2u);
            MEMORY[0x1BA99F280](v143, -1, -1);
          }

          uint64_t v144 = type metadata accessor for PartialHandshakeResult(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 56))(v203, 1, 1, v144);
LABEL_76:
          uint64_t v164 = type metadata accessor for HandshakeState;
          return _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v39, v164);
        }
        uint64_t v232 = v44;
        outlined consume of Data._Representation(v52, v51);
        outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v258, (uint64_t)&v241);
        unint64_t v59 = v245;
        uint64_t v56 = v246;
        unint64_t v2 = (uint64_t *)v255;
        uint64_t v60 = v256;
        v265[0] = v244;
        v265[1] = v245;
        v265[2] = v246;
        v265[3] = v247;
        v265[4] = v248;
        v265[5] = v249;
        v265[6] = v250;
        v265[7] = v251;
        v265[8] = v252;
        v265[9] = v253;
        v265[10] = v254;
        v265[11] = v255;
        v265[12] = v256;
        char v266 = v257;
        if (v257 != 5)
        {
          HandshakeStateMachine.logUnexpectedMessage(message:)((uint64_t)v265);
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          uint64_t v165 = (void *)swift_allocError();
          *(_DWORD *)uint64_t v166 = 4;
          *(unsigned char *)(v166 + 4) = 1;
          id v267 = v165;
          swift_willThrow();
          goto LABEL_65;
        }
        unint64_t v228 = v250;
        uint64_t v229 = v254;
        unint64_t v237 = v249;
        uint64_t v238 = v251;
        uint64_t v230 = v253;
        uint64_t v231 = v252;
        uint64_t v226 = v247;
        unint64_t v227 = v244;
        uint64_t v236 = v248;
        uint64_t v225 = v241;
        unint64_t v218 = v242;
        unint64_t v217 = v243;
        uint64_t v61 = v209;
        outlined init with copy of HandshakeState(v239, v209, type metadata accessor for HandshakeState);
        if (swift_getEnumCaseMultiPayload() != 4) {
          goto LABEL_83;
        }
        uint64_t v117 = v223;
        outlined init with take of HandshakeState.ReadyState(v61, v223, type metadata accessor for HandshakeState.ServerCertificateState);
        outlined init with copy of HandshakeState(v117, v224, type metadata accessor for HandshakeState.ServerCertificateState);
        uint64_t v118 = v60;
        uint64_t v193 = (uint64_t)v2;
        uint64_t v196 = v60;
        uint64_t v119 = (uint64_t)v2;
        uint64_t v120 = v229;
        uint64_t v121 = v230;
        uint64_t v122 = v231;
        unint64_t v123 = v59;
        unint64_t v214 = v59;
        unint64_t v124 = v56;
        unint64_t v125 = v56;
        uint64_t v126 = v226;
        uint64_t v127 = v236;
        outlined copy of HandshakeMessage(v227, v123, v125, v226, v236, v237, v228, v238, v231, v230, v229, v193, v196, 5);
        uint64_t v215 = v118;
        uint64_t v197 = v118;
        unint64_t v216 = v119;
        uint64_t v191 = v121;
        unint64_t v128 = v227;
        uint64_t v129 = v228;
        unint64_t v130 = v124;
        uint64_t v131 = v126;
        uint64_t v132 = v127;
        uint64_t v133 = v126;
        unint64_t v134 = v124;
        unint64_t v135 = v214;
        outlined copy of HandshakeMessage(v227, v214, v130, v131, v132, v237, v228, v238, v122, v191, v120, v119, v197, 5);
        uint64_t v136 = v225;
        unint64_t v137 = v218;
        outlined copy of Data._Representation(v225, v218);
        uint64_t v138 = v207;
        id v139 = v267;
        HandshakeState.ServerCertificateVerifyState.init(originalState:certificateVerify:certificateVerifyBytes:)(v224, v128, v135, v134, v133, v136, v137, v217, v207);
        id v267 = v139;
        if (v139)
        {
          _s8SwiftTLS14HandshakeStateOWOhTm_0(v223, type metadata accessor for HandshakeState.ServerCertificateState);
          outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
          outlined consume of HandshakeMessage(v128, v135, v134, v133, v236, v237, v129, v238, v231, v230, v229, v216, v215, 5);
          goto LABEL_68;
        }
        uint64_t v140 = v239;
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v239, type metadata accessor for HandshakeState);
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v223, type metadata accessor for HandshakeState.ServerCertificateState);
        swift_storeEnumTagMultiPayload();
        outlined init with take of HandshakeState.ReadyState(v138, v140, type metadata accessor for HandshakeState);
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v258);
        outlined consume of HandshakeMessage(v128, v135, v134, v133, v236, v237, v129, v238, v231, v230, v229, v216, v215, 5);
        uint64_t v39 = v235;
        uint64_t v41 = (uint64_t)v235;
        uint64_t v42 = type metadata accessor for HandshakeState;
        goto LABEL_3;
      case 5u:
        uint64_t v150 = v201;
        id v152 = v267;
        HandshakeStateMachine.handleReadServerFinished()((uint64_t)v201);
        id v267 = v152;
        if (!v152) {
          goto LABEL_52;
        }
        goto LABEL_46;
      case 6u:
        uint64_t v150 = v202;
        id v153 = v267;
        HandshakeStateMachine.handleReadNewSessionTicket()(v202);
        id v267 = v153;
        if (v153) {
          goto LABEL_46;
        }
LABEL_52:
        uint64_t v154 = type metadata accessor for PartialHandshakeResult(0);
        uint64_t v155 = *(void *)(v154 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v155 + 48))(v150, 1, v154) == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v155 + 56))(v203, 1, 1, v154);
        }
        else
        {
          uint64_t v184 = (uint64_t)v150;
          uint64_t v185 = v203;
          outlined init with take of HandshakeState.ReadyState(v184, v203, type metadata accessor for PartialHandshakeResult);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v155 + 56))(v185, 0, 1, v154);
        }
        goto LABEL_76;
      default:
        uint64_t v145 = Logger.logObject.getter();
        os_log_type_t v146 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v145, v146))
        {
          uint64_t v147 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v147 = 0;
          _os_log_impl(&dword_1B56C5000, v145, v146, "processHandshake called in idle state", v147, 2u);
          MEMORY[0x1BA99F280](v147, -1, -1);
        }

        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        uint64_t v148 = (void *)swift_allocError();
        *(_DWORD *)uint64_t v149 = 3;
        *(unsigned char *)(v149 + 4) = 1;
        id v267 = v148;
        goto LABEL_45;
    }
  }
}

uint64_t HandshakeStateMachine.handleReadServerHello()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v35 = a1;
  uint64_t v4 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  uint64_t v24 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1B56C5000, v8, v9, "expecting serverHello", v10, 2u);
    MEMORY[0x1BA99F280](v10, -1, -1);
  }

  uint64_t result = HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v25);
  if (!v2)
  {
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v25, (uint64_t)v26);
    if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v26) == 1)
    {
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl(&dword_1B56C5000, v12, v13, "incomplete message, waiting for more data", v14, 2u);
        MEMORY[0x1BA99F280](v14, -1, -1);
      }

      uint64_t v15 = type metadata accessor for PartialHandshakeResult(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v35, 1, 1, v15);
    }
    else
    {
      v29[5] = v26[6];
      v29[6] = v26[7];
      char v30 = v27;
      v29[1] = v26[2];
      v29[2] = v26[3];
      void v29[3] = v26[4];
      v29[4] = v26[5];
      long long v28 = v26[0];
      v29[0] = v26[1];
      outlined init with take of HandshakeMessage((uint64_t)v29 + 8, (uint64_t)v31);
      outlined init with take of HandshakeMessage((uint64_t)v31, (uint64_t)v33);
      if (v34 == 1)
      {
        v32[2] = v33[2];
        v32[3] = v33[3];
        v32[4] = v33[4];
        v32[5] = v33[5];
        v32[0] = v33[0];
        v32[1] = v33[1];
        unint64_t v16 = *((void *)&v28 + 1);
        uint64_t v23 = v28;
        uint64_t v17 = *(void *)&v29[0];
        uint64_t v18 = v3 + *(int *)(type metadata accessor for HandshakeStateMachine() + 28);
        swift_bridgeObjectRetain();
        HandshakeState.receivedServerHello(_:bytes:clock:)((uint64_t)v32, v23, v16, v17, v18, v6);
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v25);
        outlined release of HandshakeMessage((uint64_t)v31);
        uint64_t v19 = type metadata accessor for PartialHandshakeResult(0);
        uint64_t v20 = v35;
        uint64_t v21 = v35 + *(int *)(v19 + 20);
        outlined init with take of HandshakeState.ReadyState((uint64_t)v6, v21, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v4);
        *(_OWORD *)uint64_t v20 = xmmword_1B577F270;
        *(void *)(v20 + 16) = 0;
        *(_OWORD *)(v20 + *(int *)(v19 + 24)) = xmmword_1B577F270;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v20, 0, 1, v19);
      }
      else
      {
        HandshakeStateMachine.logUnexpectedMessage(message:)((uint64_t)v31);
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v22 = 4;
        *(unsigned char *)(v22 + 4) = 1;
        swift_willThrow();
        return outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v25);
      }
    }
  }
  return result;
}

uint64_t HandshakeStateMachine.handleReadServerFinished()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v2 = type metadata accessor for PartialHandshakeResult(0);
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (unint64_t *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)logger);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B56C5000, v6, v7, "expecting finished", v8, 2u);
    MEMORY[0x1BA99F280](v8, -1, -1);
  }

  uint64_t result = HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v30);
  if (!v1)
  {
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v30, (uint64_t)v31);
    if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v31) == 1)
    {
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_1B56C5000, v10, v11, "incomplete message, waiting for more data", v12, 2u);
        MEMORY[0x1BA99F280](v12, -1, -1);
      }

      uint64_t v13 = 1;
      uint64_t v14 = v45;
      uint64_t v15 = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, v13, 1, v2);
    }
    long long v39 = v31[6];
    long long v40 = v31[7];
    char v41 = v32;
    long long v35 = v31[2];
    long long v36 = v31[3];
    long long v37 = v31[4];
    long long v38 = v31[5];
    long long v33 = v31[0];
    long long v34 = v31[1];
    outlined init with take of HandshakeMessage((uint64_t)&v34 + 8, (uint64_t)v42);
    uint64_t v16 = *((void *)&v34 + 1);
    unint64_t v17 = v35;
    outlined init with take of HandshakeMessage((uint64_t)v42, (uint64_t)v43);
    if (v44 == 6)
    {
      char v27 = (uint64_t (*)(uint64_t))v43[1];
      uint64_t v28 = v43[0];
      uint64_t v25 = v33;
      uint64_t v26 = (void (*)(char *, uint64_t, uint64_t))v43[2];
      unint64_t v23 = v34;
      unint64_t v24 = *((void *)&v33 + 1);
      type metadata accessor for HandshakeStateMachine();
      outlined copy of Data._Representation(v16, v17);
      HandshakeState.receievedServerFinished(serverFinished:serverFinishedBytes:serializer:)(v28, v27, v26, v25, v24, v23, v4);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_1B56C5000, v19, v20, "completed TLS handshake", v21, 2u);
        MEMORY[0x1BA99F280](v21, -1, -1);
        outlined release of HandshakeMessage((uint64_t)v42);

        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v30);
      }
      else
      {
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v30);
        outlined release of HandshakeMessage((uint64_t)v42);
      }
      uint64_t v15 = v29;
      uint64_t v14 = v45;
      outlined init with take of HandshakeState.ReadyState((uint64_t)v4, v45, type metadata accessor for PartialHandshakeResult);
      uint64_t v13 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, v13, 1, v2);
    }
    HandshakeStateMachine.logUnexpectedMessage(message:)((uint64_t)v42);
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 4;
    *(unsigned char *)(v18 + 4) = 1;
    swift_willThrow();
    return outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v30);
  }
  return result;
}

uint64_t HandshakeStateMachine.handleReadNewSessionTicket()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v56 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)logger);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = v10;
    uint64_t v14 = v4;
    uint64_t v15 = v7;
    uint64_t v16 = v6;
    unint64_t v17 = a1;
    uint64_t v18 = v13;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1B56C5000, v11, v12, "expecting newSessionTicket", v13, 2u);
    uint64_t v19 = v18;
    a1 = v17;
    uint64_t v6 = v16;
    uint64_t v7 = v15;
    uint64_t v4 = v14;
    uint64_t v3 = v2;
    MEMORY[0x1BA99F280](v19, -1, -1);
  }

  uint64_t result = HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v40);
  if (!v3)
  {
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v40, (uint64_t)v41);
    if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v41) == 1)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v23 = 0;
        _os_log_impl(&dword_1B56C5000, v21, v22, "incomplete message, waiting for more data", v23, 2u);
        MEMORY[0x1BA99F280](v23, -1, -1);
      }

      uint64_t v24 = type metadata accessor for PartialHandshakeResult(0);
      return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a1, 1, 1, v24);
    }
    else
    {
      long long v49 = v41[6];
      long long v50 = v41[7];
      char v51 = v42;
      long long v45 = v41[2];
      long long v46 = v41[3];
      long long v47 = v41[4];
      long long v48 = v41[5];
      long long v43 = v41[0];
      long long v44 = v41[1];
      outlined init with take of HandshakeMessage((uint64_t)&v44 + 8, (uint64_t)v52);
      long long v38 = v45;
      uint64_t v25 = *((void *)&v46 + 1);
      unint64_t v26 = v47;
      uint64_t v39 = v48;
      outlined init with take of HandshakeMessage((uint64_t)v52, (uint64_t)v54);
      if (v55 > 6u)
      {
        v53[0] = v54[0];
        v53[1] = v54[1];
        v53[2] = v54[2];
        v53[3] = v54[3];
        uint64_t v36 = type metadata accessor for HandshakeStateMachine();
        long long v37 = a1;
        uint64_t v28 = (void *)(v4 + *(int *)(v36 + 28));
        uint64_t v29 = v28[4];
        uint64_t v35 = v28[3];
        uint64_t v33 = v29;
        __swift_project_boxed_opaque_existential_1(v28, v35);
        long long v34 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
        outlined copy of Data._Representation(v38, *((unint64_t *)&v38 + 1));
        outlined copy of Data._Representation(v25, v26);
        swift_bridgeObjectRetain();
        uint64_t v30 = (uint64_t)v56;
        uint64_t v31 = v37;
        v34(v35, v33);
        HandshakeState.receivedNewSessionTicket(newSessionTicket:currentTime:)(v53, v30, v31);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v30, v6);
        outlined release of HandshakeMessage((uint64_t)v52);
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v40);
        uint64_t v32 = type metadata accessor for PartialHandshakeResult(0);
        return (*(uint64_t (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 0, 1, v32);
      }
      else
      {
        HandshakeStateMachine.logUnexpectedMessage(message:)((uint64_t)v52);
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v27 = 4;
        *(unsigned char *)(v27 + 4) = 1;
        swift_willThrow();
        return outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v40);
      }
    }
  }
  return result;
}

uint64_t HandshakeStateMachine.peerQUICTransportParameters.getter()
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v0 + *(int *)(v16 + 24), (uint64_t)v15, type metadata accessor for HandshakeState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      uint64_t v18 = &v12[*(int *)(v10 + 28)];
      uint64_t v17 = *(void *)v18;
      outlined copy of ByteBuffer?(*(void *)v18, *((void *)v18 + 1));
      uint64_t v19 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
      uint64_t v20 = (uint64_t)v12;
      goto LABEL_7;
    case 4u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v9, type metadata accessor for HandshakeState.ServerCertificateState);
      uint64_t v17 = *((void *)v9 + 13);
      outlined copy of ByteBuffer?(v17, *((void *)v9 + 14));
      uint64_t v19 = type metadata accessor for HandshakeState.ServerCertificateState;
      uint64_t v20 = (uint64_t)v9;
      goto LABEL_7;
    case 5u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v6, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      uint64_t v21 = &v6[*(int *)(v4 + 36)];
      uint64_t v17 = *(void *)v21;
      outlined copy of ByteBuffer?(*(void *)v21, *((void *)v21 + 1));
      uint64_t v19 = type metadata accessor for HandshakeState.ServerCertificateVerifyState;
      uint64_t v20 = (uint64_t)v6;
      goto LABEL_7;
    case 6u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v3, type metadata accessor for HandshakeState.ReadyState);
      os_log_type_t v22 = &v3[*(int *)(ready + 36)];
      uint64_t v17 = *(void *)v22;
      outlined copy of ByteBuffer?(*(void *)v22, *((void *)v22 + 1));
      uint64_t v19 = type metadata accessor for HandshakeState.ReadyState;
      uint64_t v20 = (uint64_t)v3;
LABEL_7:
      _s8SwiftTLS14HandshakeStateOWOhTm_0(v20, v19);
      break;
    default:
      _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v15, type metadata accessor for HandshakeState);
      uint64_t v17 = 0;
      break;
  }
  return v17;
}

uint64_t HandshakeStateMachine.peerALPN.getter()
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v0 + *(int *)(v16 + 24), (uint64_t)v15, type metadata accessor for HandshakeState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      uint64_t v18 = &v12[*(int *)(v10 + 24)];
      uint64_t v17 = *(void *)v18;
      outlined copy of ByteBuffer?(*(void *)v18, *((void *)v18 + 1));
      uint64_t v19 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
      uint64_t v20 = (uint64_t)v12;
      goto LABEL_7;
    case 4u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v9, type metadata accessor for HandshakeState.ServerCertificateState);
      uint64_t v17 = *((void *)v9 + 10);
      outlined copy of ByteBuffer?(v17, *((void *)v9 + 11));
      uint64_t v19 = type metadata accessor for HandshakeState.ServerCertificateState;
      uint64_t v20 = (uint64_t)v9;
      goto LABEL_7;
    case 5u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v6, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      uint64_t v21 = &v6[*(int *)(v4 + 32)];
      uint64_t v17 = *(void *)v21;
      outlined copy of ByteBuffer?(*(void *)v21, *((void *)v21 + 1));
      uint64_t v19 = type metadata accessor for HandshakeState.ServerCertificateVerifyState;
      uint64_t v20 = (uint64_t)v6;
      goto LABEL_7;
    case 6u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v3, type metadata accessor for HandshakeState.ReadyState);
      os_log_type_t v22 = &v3[*(int *)(ready + 32)];
      uint64_t v17 = *(void *)v22;
      outlined copy of ByteBuffer?(*(void *)v22, *((void *)v22 + 1));
      uint64_t v19 = type metadata accessor for HandshakeState.ReadyState;
      uint64_t v20 = (uint64_t)v3;
LABEL_7:
      _s8SwiftTLS14HandshakeStateOWOhTm_0(v20, v19);
      break;
    default:
      _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v15, type metadata accessor for HandshakeState);
      uint64_t v17 = 0;
      break;
  }
  return v17;
}

uint64_t HandshakeStateMachine.negotiatedCiphersuite.getter()
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready - 8);
  long long v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v36 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v39 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SessionTicket();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v35 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v38);
  uint64_t v9 = (unsigned __int16 *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeState.ServerHelloState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v42 + *(int *)(v25 + 24), (uint64_t)v24, type metadata accessor for HandshakeState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v21, type metadata accessor for HandshakeState.ClientHelloState);
      outlined init with copy of SessionTicket?((uint64_t)&v21[*(int *)(v19 + 40)], (uint64_t)v18);
      _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v21, type metadata accessor for HandshakeState.ClientHelloState);
      uint64_t v26 = v41;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v18, 1, v41) == 1)
      {
        outlined destroy of HandshakeStateMachine?((uint64_t)v18, &demangling cache variable for type metadata for SessionTicket?);
        goto LABEL_5;
      }
      int v27 = *(unsigned __int16 *)&v18[*(int *)(v26 + 44)];
      uint64_t v32 = (uint64_t (*)(uint64_t))type metadata accessor for SessionTicket;
      goto LABEL_13;
    case 2u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v15, type metadata accessor for HandshakeState.ServerHelloState);
      int v27 = *(unsigned __int16 *)&v15[*(int *)(v13 + 28)];
      uint64_t v29 = type metadata accessor for HandshakeState.ServerHelloState;
      uint64_t v30 = (uint64_t)v15;
      goto LABEL_16;
    case 3u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      outlined init with copy of HandshakeState((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v9, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = v35;
        outlined init with take of HandshakeState.ReadyState((uint64_t)v9, v35, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        int v27 = *(unsigned __int16 *)(v31 + *(int *)(v41 + 44));
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      }
      else
      {
        int v27 = *v9;
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
      uint64_t v30 = (uint64_t)v12;
      goto LABEL_16;
    case 4u:
      uint64_t v18 = v39;
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v39, type metadata accessor for HandshakeState.ServerCertificateState);
      int v27 = *((unsigned __int16 *)v18 + 38);
      uint64_t v32 = type metadata accessor for HandshakeState.ServerCertificateState;
      goto LABEL_13;
    case 5u:
      uint64_t v18 = v36;
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v36, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      int v27 = *((unsigned __int16 *)v18 + 38);
      uint64_t v32 = type metadata accessor for HandshakeState.ServerCertificateVerifyState;
      goto LABEL_13;
    case 6u:
      uint64_t v18 = v37;
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v37, type metadata accessor for HandshakeState.ReadyState);
      int v27 = *((unsigned __int16 *)v18 + 38);
      uint64_t v32 = type metadata accessor for HandshakeState.ReadyState;
LABEL_13:
      uint64_t v29 = v32;
      uint64_t v30 = (uint64_t)v18;
LABEL_16:
      _s8SwiftTLS14HandshakeStateOWOhTm_0(v30, v29);
      int v28 = 0;
      break;
    default:
      _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v24, type metadata accessor for HandshakeState);
LABEL_5:
      int v27 = 0;
      int v28 = 1;
      break;
  }
  return v27 | (v28 << 16);
}

uint64_t HandshakeStateMachine.negotiatedGroup.getter()
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready - 8);
  long long v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v36 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v39 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SessionTicket();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v35 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v38);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeState.ServerHelloState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v42 + *(int *)(v25 + 24), (uint64_t)v24, type metadata accessor for HandshakeState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v21, type metadata accessor for HandshakeState.ClientHelloState);
      outlined init with copy of SessionTicket?((uint64_t)&v21[*(int *)(v19 + 40)], (uint64_t)v18);
      _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v21, type metadata accessor for HandshakeState.ClientHelloState);
      uint64_t v26 = v41;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v18, 1, v41) == 1)
      {
        outlined destroy of HandshakeStateMachine?((uint64_t)v18, &demangling cache variable for type metadata for SessionTicket?);
        goto LABEL_5;
      }
      int v27 = *(unsigned __int16 *)&v18[*(int *)(v26 + 48)];
      uint64_t v32 = (uint64_t (*)(uint64_t))type metadata accessor for SessionTicket;
      goto LABEL_13;
    case 2u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v15, type metadata accessor for HandshakeState.ServerHelloState);
      int v27 = *(unsigned __int16 *)&v15[*(int *)(v13 + 32)];
      uint64_t v29 = type metadata accessor for HandshakeState.ServerHelloState;
      uint64_t v30 = (uint64_t)v15;
      goto LABEL_16;
    case 3u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      outlined init with copy of HandshakeState((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v9, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = v35;
        outlined init with take of HandshakeState.ReadyState((uint64_t)v9, v35, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        int v27 = *(unsigned __int16 *)(v31 + *(int *)(v41 + 48));
        _s8SwiftTLS14HandshakeStateOWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      }
      else
      {
        int v27 = *((unsigned __int16 *)v9 + 1);
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
      uint64_t v30 = (uint64_t)v12;
      goto LABEL_16;
    case 4u:
      uint64_t v18 = v39;
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v39, type metadata accessor for HandshakeState.ServerCertificateState);
      int v27 = *((unsigned __int16 *)v18 + 39);
      uint64_t v32 = type metadata accessor for HandshakeState.ServerCertificateState;
      goto LABEL_13;
    case 5u:
      uint64_t v18 = v36;
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v36, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      int v27 = *((unsigned __int16 *)v18 + 39);
      uint64_t v32 = type metadata accessor for HandshakeState.ServerCertificateVerifyState;
      goto LABEL_13;
    case 6u:
      uint64_t v18 = v37;
      outlined init with take of HandshakeState.ReadyState((uint64_t)v24, (uint64_t)v37, type metadata accessor for HandshakeState.ReadyState);
      int v27 = *((unsigned __int16 *)v18 + 39);
      uint64_t v32 = type metadata accessor for HandshakeState.ReadyState;
LABEL_13:
      uint64_t v29 = v32;
      uint64_t v30 = (uint64_t)v18;
LABEL_16:
      _s8SwiftTLS14HandshakeStateOWOhTm_0(v30, v29);
      int v28 = 0;
      break;
    default:
      _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v24, type metadata accessor for HandshakeState);
LABEL_5:
      int v27 = 0;
      int v28 = 1;
      break;
  }
  return v27 | (v28 << 16);
}

uint64_t HandshakeStateMachine.earlyDataAccepted.getter()
{
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v0 + *(int *)(v16 + 24), (uint64_t)v15, type metadata accessor for HandshakeState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      uint64_t v17 = v12[*(int *)(v10 + 32)];
      uint64_t v18 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
      uint64_t v19 = (uint64_t)v12;
      goto LABEL_7;
    case 4u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v9, type metadata accessor for HandshakeState.ServerCertificateState);
      uint64_t v17 = v9[128];
      uint64_t v18 = type metadata accessor for HandshakeState.ServerCertificateState;
      uint64_t v19 = (uint64_t)v9;
      goto LABEL_7;
    case 5u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v6, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      uint64_t v17 = v6[*(int *)(v4 + 40)];
      uint64_t v18 = type metadata accessor for HandshakeState.ServerCertificateVerifyState;
      uint64_t v19 = (uint64_t)v6;
      goto LABEL_7;
    case 6u:
      outlined init with take of HandshakeState.ReadyState((uint64_t)v15, (uint64_t)v3, type metadata accessor for HandshakeState.ReadyState);
      uint64_t v17 = v3[*(int *)(ready + 40)];
      uint64_t v18 = type metadata accessor for HandshakeState.ReadyState;
      uint64_t v19 = (uint64_t)v3;
LABEL_7:
      _s8SwiftTLS14HandshakeStateOWOhTm_0(v19, v18);
      break;
    default:
      _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v15, type metadata accessor for HandshakeState);
      uint64_t v17 = 2;
      break;
  }
  return v17;
}

uint64_t HandshakeStateMachine.clientRandom.getter()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v7 = xmmword_1B577F280;
  uint64_t v8 = 0;
  uint64_t v1 = (_OWORD *)(v0 + *(int *)(type metadata accessor for HandshakeStateMachine() + 32));
  long long v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  v6[3] = MEMORY[0x1E4FBB2B8];
  v6[4] = MEMORY[0x1E4F27EF0];
  v6[0] = v4;
  v6[1] = &v5;
  __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v7;
}

void HandshakeStateMachine.logUnexpectedMessage(message:)(uint64_t a1)
{
  unint64_t v3 = 0xEB000000006F6C6CLL;
  uint64_t v4 = 0x6548746E65696C63;
  uint64_t v5 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v5);
  long long v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of HandshakeState(v1 + *(int *)(v8 + 24), (uint64_t)v7, type metadata accessor for HandshakeState);
  unint64_t v9 = 0xE400000000000000;
  unint64_t v10 = 1701602409;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = 0x746E65696C63;
      goto LABEL_4;
    case 2u:
      uint64_t v11 = 0x726576726573;
LABEL_4:
      unint64_t v10 = v11 & 0xFFFFFFFFFFFFLL | 0x6548000000000000;
      unint64_t v9 = 0xEB000000006F6C6CLL;
      break;
    case 3u:
      unint64_t v10 = 0xD000000000000019;
      os_log_type_t v12 = "serverEncryptedExtensions";
      goto LABEL_8;
    case 4u:
      unint64_t v9 = 0x80000001B5782BF0;
      unint64_t v10 = 0xD000000000000011;
      break;
    case 5u:
      unint64_t v10 = 0xD000000000000017;
      os_log_type_t v12 = "serverCertificateVerify";
LABEL_8:
      unint64_t v9 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      break;
    case 6u:
      unint64_t v9 = 0xEC00000061746144;
      unint64_t v10 = 0x726F467964616572;
      break;
    default:
      break;
  }
  _s8SwiftTLS14HandshakeStateOWOhTm_0((uint64_t)v7, type metadata accessor for HandshakeState);
  outlined init with take of HandshakeMessage(a1, (uint64_t)v21);
  switch(v21[104])
  {
    case 1:
      uint64_t v4 = 0x6548726576726573;
      break;
    case 2:
      uint64_t v4 = 0xD000000000000013;
      uint64_t v13 = "encryptedExtensions";
      goto LABEL_18;
    case 3:
      uint64_t v4 = 0xD000000000000012;
      uint64_t v13 = "certificateRequest";
      goto LABEL_18;
    case 4:
      unint64_t v3 = 0xEB00000000657461;
      uint64_t v4 = 0x6369666974726563;
      break;
    case 5:
      unint64_t v3 = 0x80000001B57829E0;
      uint64_t v4 = 0xD000000000000011;
      break;
    case 6:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v4 = 0x64656873696E6966;
      break;
    case 7:
      uint64_t v4 = 0xD000000000000010;
      uint64_t v13 = "newSessionTicket";
LABEL_18:
      unint64_t v3 = (unint64_t)(v13 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v20 = v18;
    *(_DWORD *)uint64_t v17 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B56C5000, v15, v16, "unexpected message %{public}s in state %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA99F280](v18, -1, -1);
    MEMORY[0x1BA99F280](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t Collection<>.confirmNegotiated(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = Sequence<>.contains(_:)();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  if (v4)
  {
    uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, a1, AssociatedTypeWitness);
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);

  return v8(a2, v7, 1, AssociatedTypeWitness);
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of ContiguousBytes(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined destroy of HandshakeStateMachine?((uint64_t)v38, &demangling cache variable for type metadata for ContiguousBytes?);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = specialized Data._Representation.init(_:)(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = specialized Data._Representation.init(count:)(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x1F4188790](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:));
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    outlined consume of ByteBuffer?(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  outlined consume of ByteBuffer?((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

void *outlined retain of HandshakeStateMachine.Configuration(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ByteBuffer?(v2, v3);
  outlined copy of ByteBuffer?(v4, v5);
  return a1;
}

uint64_t outlined assign with take of SessionTicket?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *outlined release of HandshakeStateMachine.Configuration(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ByteBuffer?(v2, v3);
  outlined consume of ByteBuffer?(v4, v5);
  return a1;
}

uint64_t outlined init with copy of SwiftTLSClock(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of SessionTicket?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of HandshakeMessageParser.ParseResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of HandshakeState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8SwiftTLS14HandshakeStateOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_1B577F280;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        uint64_t *v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        uint64_t *v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      uint64_t *v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *result;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_1B577F280;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v15 = *v1;
      uint64_t v16 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v15 + 16), *(void *)(v15 + 24), a1);
      unint64_t v12 = v16 | 0x8000000000000000;
      if (v2)
      {
        uint64_t *v1 = v15;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        uint64_t *v1 = v15;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v14, 0, 15);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14);
      if (!v2) {
        return (char *)v15;
      }
      return result;
    default:
      v14[0] = *v1;
      LOWORD(v14[1]) = v3;
      BYTE2(v14[1]) = BYTE2(v3);
      BYTE3(v14[1]) = BYTE3(v3);
      BYTE4(v14[1]) = BYTE4(v3);
      BYTE5(v14[1]) = BYTE5(v3);
      BYTE6(v14[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v15;
      }
      unint64_t v8 = LODWORD(v14[1]) | ((unint64_t)BYTE4(v14[1]) << 32) | ((unint64_t)BYTE5(v14[1]) << 40) | ((unint64_t)BYTE6(v14[1]) << 48);
      uint64_t *v1 = v14[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HandshakeStateMachine(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
      *uint64_t v4 = v9;
      v4[1] = v7;
    }
    _OWORD v4[2] = *(void *)(v3 + 16);
    uint64_t v400 = a3;
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = v3 + v10;
    type metadata accessor for HandshakeState(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v15 = *(void *)(v12 + 8);
        *(void *)uint64_t v11 = *(void *)v12;
        *((void *)v11 + 1) = v15;
        *((void *)v11 + 2) = *(void *)(v12 + 16);
        unint64_t v16 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v16 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        }
        else
        {
          uint64_t v29 = *(void *)(v12 + 24);
          outlined copy of Data._Representation(v29, v16);
          *((void *)v11 + 3) = v29;
          *((void *)v11 + 4) = v16;
        }
        *((void *)v11 + 5) = *(void *)(v12 + 40);
        unint64_t v30 = *(void *)(v12 + 56);
        if (v30 >> 60 == 15)
        {
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 + 48);
        }
        else
        {
          uint64_t v49 = *(void *)(v12 + 48);
          outlined copy of Data._Representation(v49, *(void *)(v12 + 56));
          *((void *)v11 + 6) = v49;
          *((void *)v11 + 7) = v30;
        }
        *((void *)v11 + 8) = *(void *)(v12 + 64);
        *((_DWORD *)v11 + 18) = *(_DWORD *)(v12 + 72);
        long long v50 = *(_OWORD *)(v12 + 96);
        *((_OWORD *)v11 + 5) = *(_OWORD *)(v12 + 80);
        *((_OWORD *)v11 + 6) = v50;
        uint64_t v51 = *(void *)(v12 + 120);
        *((void *)v11 + 14) = *(void *)(v12 + 112);
        *((void *)v11 + 15) = v51;
        *((void *)v11 + 16) = *(void *)(v12 + 128);
        long long v52 = *(_OWORD *)(v12 + 160);
        *((_OWORD *)v11 + 10) = v52;
        uint64_t v53 = v52;
        id v54 = **(void (***)(char *, uint64_t, uint64_t))(v52 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v54(v11 + 136, v12 + 136, v53);
        uint64_t v55 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v56 = *(int *)(v55 + 36);
        unint64_t v57 = &v11[v56];
        unint64_t v58 = (char *)(v12 + v56);
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        uint64_t v399 = v3;
        __dst = (void *)v55;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v60 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v57, v58, v60);
            uint64_t v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v62 = v61[9];
            long long v384 = &v57[v62];
            uint64_t v63 = &v58[v62];
            uint64_t v64 = type metadata accessor for SymmetricKey();
            uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
            unint64_t v66 = v63;
            uint64_t v3 = v399;
            v65(v384, v66, v64);
            v65(&v57[v61[10]], &v58[v61[10]], v64);
            v65(&v57[v61[11]], &v58[v61[11]], v64);
            v65(&v57[v61[12]], &v58[v61[12]], v64);
            uint64_t v55 = (uint64_t)__dst;
            goto LABEL_106;
          case 1u:
            uint64_t v226 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(v57, v58, v226);
            unint64_t v227 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v228 = v227[9];
            uint64_t v385 = &v57[v228];
            uint64_t v229 = &v58[v228];
            uint64_t v230 = type metadata accessor for SymmetricKey();
            uint64_t v231 = *(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 16);
            uint64_t v232 = v229;
            uint64_t v3 = v399;
            v231(v385, v232, v230);
            v231(&v57[v227[10]], &v58[v227[10]], v230);
            v231(&v57[v227[11]], &v58[v227[11]], v230);
            uint64_t v55 = (uint64_t)__dst;
            goto LABEL_106;
          case 2u:
            uint64_t v233 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 16))(v57, v58, v233);
            uint64_t v234 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v235 = v234[9];
            uint64_t v386 = &v57[v235];
            uint64_t v236 = &v58[v235];
            uint64_t v237 = type metadata accessor for SymmetricKey();
            uint64_t v238 = *(void (**)(char *, char *, uint64_t))(*(void *)(v237 - 8) + 16);
            uint64_t v239 = v236;
            uint64_t v3 = v399;
            v238(v386, v239, v237);
            v238(&v57[v234[10]], &v58[v234[10]], v237);
            v238(&v57[v234[11]], &v58[v234[11]], v237);
            v238(&v57[v234[12]], &v58[v234[12]], v237);
            v238(&v57[v234[13]], &v58[v234[13]], v237);
            v238(&v57[v234[14]], &v58[v234[14]], v237);
            uint64_t v55 = (uint64_t)__dst;
            goto LABEL_106;
          case 3u:
            uint64_t v240 = type metadata accessor for SymmetricKey();
            uint64_t v241 = *(void (**)(char *, char *, uint64_t))(*(void *)(v240 - 8) + 16);
            v241(v57, v58, v240);
            unint64_t v242 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v241(&v57[v242[9]], &v58[v242[9]], v240);
            v241(&v57[v242[10]], &v58[v242[10]], v240);
            v241(&v57[v242[11]], &v58[v242[11]], v240);
            uint64_t v55 = (uint64_t)__dst;
LABEL_106:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
            break;
        }
        uint64_t v243 = *(int *)(v55 + 40);
        unint64_t v244 = &v11[v243];
        unint64_t v245 = (char *)(v12 + v243);
        unint64_t v246 = (int *)type metadata accessor for SessionTicket();
        uint64_t v247 = *((void *)v246 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v247 + 48))(v245, 1, v246))
        {
          size_t v248 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                       - 8)
                           + 64);
          unint64_t v249 = v244;
          uint64_t v250 = v245;
LABEL_137:
          memcpy(v249, v250, v248);
        }
        else
        {
          uint64_t v251 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v251 - 8) + 16))(v244, v245, v251);
          *(_DWORD *)&v244[v246[5]] = *(_DWORD *)&v245[v246[5]];
          *(_DWORD *)&v244[v246[6]] = *(_DWORD *)&v245[v246[6]];
          uint64_t v252 = v246[7];
          uint64_t v253 = (uint64_t *)&v244[v252];
          unint64_t v254 = &v245[v252];
          uint64_t v255 = *(void *)&v245[v252];
          unint64_t v256 = *(void *)&v245[v252 + 8];
          outlined copy of Data._Representation(v255, v256);
          *uint64_t v253 = v255;
          v253[1] = v256;
          v253[2] = *((void *)v254 + 2);
          uint64_t v257 = v246[8];
          uint64_t v258 = (uint64_t *)&v244[v257];
          uint64_t v259 = &v245[v257];
          uint64_t v260 = *(void *)&v245[v257];
          unint64_t v261 = *(void *)&v245[v257 + 8];
          outlined copy of Data._Representation(v260, v261);
          *uint64_t v258 = v260;
          v258[1] = v261;
          v258[2] = *((void *)v259 + 2);
          uint64_t v262 = v246[9];
          uint64_t v263 = &v244[v262];
          char v264 = &v245[v262];
          uint64_t v265 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v265 - 8) + 16))(v263, v264, v265);
          *(_DWORD *)&v244[v246[10]] = *(_DWORD *)&v245[v246[10]];
          *(_WORD *)&v244[v246[11]] = *(_WORD *)&v245[v246[11]];
          *(_WORD *)&v244[v246[12]] = *(_WORD *)&v245[v246[12]];
          uint64_t v266 = v246[13];
          id v267 = &v244[v266];
          uint64_t v268 = (uint64_t *)&v245[v266];
          unint64_t v269 = *(void *)&v245[v266 + 8];
          if (v269 >> 60 == 15)
          {
            *(_OWORD *)id v267 = *(_OWORD *)v268;
          }
          else
          {
            uint64_t v331 = *v268;
            outlined copy of Data._Representation(*v268, v269);
            *(void *)id v267 = v331;
            *((void *)v267 + 1) = v269;
          }
          *((void *)v267 + 2) = v268[2];
          uint64_t v332 = v246[14];
          uint64_t v333 = &v244[v332];
          uint64_t v334 = &v245[v332];
          uint64_t v335 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v336 = *(void *)(v335 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v336 + 48))(v334, 1, v335))
          {
            uint64_t v337 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v333, v334, *(void *)(*(void *)(v337 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v333, v334, v335);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v336 + 56))(v333, 0, 1, v335);
          }
          uint64_t v3 = v399;
          (*(void (**)(char *, void, uint64_t, int *))(v247 + 56))(v244, 0, 1, v246);
        }
        goto LABEL_159;
      case 2u:
        uint64_t v17 = *(void *)(v12 + 8);
        *(void *)uint64_t v11 = *(void *)v12;
        *((void *)v11 + 1) = v17;
        *((void *)v11 + 2) = *(void *)(v12 + 16);
        unint64_t v18 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        }
        else
        {
          uint64_t v31 = *(void *)(v12 + 24);
          outlined copy of Data._Representation(v31, v18);
          *((void *)v11 + 3) = v31;
          *((void *)v11 + 4) = v18;
        }
        *((void *)v11 + 5) = *(void *)(v12 + 40);
        unint64_t v32 = *(void *)(v12 + 56);
        uint64_t v397 = v3;
        if (v32 >> 60 == 15)
        {
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 + 48);
        }
        else
        {
          uint64_t v67 = *(void *)(v12 + 48);
          outlined copy of Data._Representation(v67, v32);
          *((void *)v11 + 6) = v67;
          *((void *)v11 + 7) = v32;
        }
        *((void *)v11 + 8) = *(void *)(v12 + 64);
        *((_DWORD *)v11 + 18) = *(_DWORD *)(v12 + 72);
        uint64_t v68 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v69 = v68[5];
        unint64_t v70 = &v11[v69];
        uint64_t v71 = v12 + v69;
        type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        __dsta = v68;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v72 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
          uint64_t v73 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v70[v73[5]] = *(_DWORD *)(v71 + v73[5]);
          *(_DWORD *)&v70[v73[6]] = *(_DWORD *)(v71 + v73[6]);
          uint64_t v74 = v73[7];
          uint64_t v75 = (uint64_t *)&v70[v74];
          uint64_t v76 = v71 + v74;
          uint64_t v77 = *(void *)(v71 + v74);
          unint64_t v78 = *(void *)(v71 + v74 + 8);
          outlined copy of Data._Representation(v77, v78);
          *uint64_t v75 = v77;
          v75[1] = v78;
          v75[2] = *(void *)(v76 + 16);
          uint64_t v79 = v73[8];
          uint64_t v80 = (uint64_t *)&v70[v79];
          uint64_t v81 = v71 + v79;
          uint64_t v82 = *(void *)(v71 + v79);
          unint64_t v83 = *(void *)(v71 + v79 + 8);
          outlined copy of Data._Representation(v82, v83);
          *uint64_t v80 = v82;
          v80[1] = v83;
          v80[2] = *(void *)(v81 + 16);
          uint64_t v84 = v73[9];
          uint64_t v85 = &v70[v84];
          uint64_t v86 = v71 + v84;
          uint64_t v87 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
          *(_DWORD *)&v70[v73[10]] = *(_DWORD *)(v71 + v73[10]);
          *(_WORD *)&v70[v73[11]] = *(_WORD *)(v71 + v73[11]);
          *(_WORD *)&v70[v73[12]] = *(_WORD *)(v71 + v73[12]);
          uint64_t v88 = v73[13];
          id v89 = &v70[v88];
          uint64_t v90 = (uint64_t *)(v71 + v88);
          unint64_t v91 = *(void *)(v71 + v88 + 8);
          if (v91 >> 60 == 15)
          {
            *(_OWORD *)id v89 = *(_OWORD *)v90;
          }
          else
          {
            uint64_t v212 = *v90;
            outlined copy of Data._Representation(*v90, v91);
            *(void *)id v89 = v212;
            *((void *)v89 + 1) = v91;
          }
          *((void *)v89 + 2) = v90[2];
          uint64_t v213 = v73[14];
          unint64_t v214 = &v70[v213];
          uint64_t v215 = (const void *)(v71 + v213);
          uint64_t v216 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v217 = *(void *)(v216 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216))
          {
            uint64_t v218 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v214, v215, *(void *)(*(void *)(v218 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v217 + 16))(v214, v215, v216);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
          }
          uint64_t v68 = __dsta;
        }
        else
        {
          *(_DWORD *)unint64_t v70 = *(_DWORD *)v71;
          *((void *)v70 + 1) = *(void *)(v71 + 8);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v276 = v68[6];
        uint64_t v277 = &v11[v276];
        uint64_t v278 = (char *)(v12 + v276);
        uint64_t v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v280 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v280 - 8) + 16))(v277, v278, v280);
            uint64_t v281 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v282 = v281[9];
            uint64_t v387 = &v277[v282];
            long long v283 = &v278[v282];
            uint64_t v284 = type metadata accessor for SymmetricKey();
            long long v285 = *(void (**)(char *, char *, uint64_t))(*(void *)(v284 - 8) + 16);
            v285(v387, v283, v284);
            v285(&v277[v281[10]], &v278[v281[10]], v284);
            v285(&v277[v281[11]], &v278[v281[11]], v284);
            v285(&v277[v281[12]], &v278[v281[12]], v284);
            uint64_t v68 = __dsta;
            goto LABEL_122;
          case 1u:
            uint64_t v286 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v286 - 8) + 16))(v277, v278, v286);
            uint64_t v287 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v288 = v287[9];
            uint64_t v388 = &v277[v288];
            uint64_t v289 = &v278[v288];
            uint64_t v290 = type metadata accessor for SymmetricKey();
            uint64_t v291 = *(void (**)(char *, char *, uint64_t))(*(void *)(v290 - 8) + 16);
            v291(v388, v289, v290);
            v291(&v277[v287[10]], &v278[v287[10]], v290);
            v291(&v277[v287[11]], &v278[v287[11]], v290);
            uint64_t v68 = __dsta;
            goto LABEL_122;
          case 2u:
            uint64_t v292 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v292 - 8) + 16))(v277, v278, v292);
            uint64_t v293 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v294 = v293[9];
            uint64_t v389 = &v277[v294];
            uint64_t v295 = &v278[v294];
            uint64_t v296 = type metadata accessor for SymmetricKey();
            uint64_t v297 = *(void (**)(char *, char *, uint64_t))(*(void *)(v296 - 8) + 16);
            v297(v389, v295, v296);
            v297(&v277[v293[10]], &v278[v293[10]], v296);
            v297(&v277[v293[11]], &v278[v293[11]], v296);
            v297(&v277[v293[12]], &v278[v293[12]], v296);
            v297(&v277[v293[13]], &v278[v293[13]], v296);
            v297(&v277[v293[14]], &v278[v293[14]], v296);
            uint64_t v68 = __dsta;
            goto LABEL_122;
          case 3u:
            uint64_t v298 = type metadata accessor for SymmetricKey();
            unint64_t v299 = *(void (**)(char *, char *, uint64_t))(*(void *)(v298 - 8) + 16);
            v299(v277, v278, v298);
            unint64_t v300 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v299(&v277[v300[9]], &v278[v300[9]], v298);
            v299(&v277[v300[10]], &v278[v300[10]], v298);
            v299(&v277[v300[11]], &v278[v300[11]], v298);
LABEL_122:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v277, v278, *(void *)(*(void *)(v279 - 8) + 64));
            break;
        }
        uint64_t v3 = v397;
        uint64_t v301 = v400;
        *(_WORD *)&v11[v68[7]] = *(_WORD *)(v12 + v68[7]);
        *(_WORD *)&v11[v68[8]] = *(_WORD *)(v12 + v68[8]);
        goto LABEL_160;
      case 3u:
        uint64_t v19 = *(void *)(v12 + 8);
        *(void *)uint64_t v11 = *(void *)v12;
        *((void *)v11 + 1) = v19;
        *((void *)v11 + 2) = *(void *)(v12 + 16);
        unint64_t v20 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v20 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        }
        else
        {
          uint64_t v33 = *(void *)(v12 + 24);
          outlined copy of Data._Representation(v33, v20);
          *((void *)v11 + 3) = v33;
          *((void *)v11 + 4) = v20;
        }
        *((void *)v11 + 5) = *(void *)(v12 + 40);
        unint64_t v34 = *(void *)(v12 + 56);
        uint64_t v398 = v3;
        if (v34 >> 60 == 15)
        {
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 + 48);
        }
        else
        {
          uint64_t v92 = *(void *)(v12 + 48);
          outlined copy of Data._Representation(v92, v34);
          *((void *)v11 + 6) = v92;
          *((void *)v11 + 7) = v34;
        }
        *((void *)v11 + 8) = *(void *)(v12 + 64);
        *((_DWORD *)v11 + 18) = *(_DWORD *)(v12 + 72);
        uint64_t v93 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v94 = v93[5];
        uint64_t v95 = &v11[v94];
        uint64_t v96 = v12 + v94;
        type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          __dstb = v93;
          uint64_t v97 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
          unint64_t v98 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v95[v98[5]] = *(_DWORD *)(v96 + v98[5]);
          *(_DWORD *)&v95[v98[6]] = *(_DWORD *)(v96 + v98[6]);
          uint64_t v99 = v98[7];
          uint64_t v100 = (uint64_t *)&v95[v99];
          uint64_t v101 = v96 + v99;
          uint64_t v103 = *(void *)(v96 + v99);
          unint64_t v102 = *(void *)(v96 + v99 + 8);
          outlined copy of Data._Representation(v103, v102);
          *uint64_t v100 = v103;
          v100[1] = v102;
          v100[2] = *(void *)(v101 + 16);
          uint64_t v104 = v98[8];
          uint64_t v105 = (uint64_t *)&v95[v104];
          uint64_t v106 = v96 + v104;
          uint64_t v107 = *(void *)(v96 + v104);
          unint64_t v108 = *(void *)(v96 + v104 + 8);
          outlined copy of Data._Representation(v107, v108);
          *uint64_t v105 = v107;
          v105[1] = v108;
          v105[2] = *(void *)(v106 + 16);
          uint64_t v109 = v98[9];
          unint64_t v110 = &v95[v109];
          uint64_t v111 = v96 + v109;
          uint64_t v112 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v112 - 8) + 16))(v110, v111, v112);
          *(_DWORD *)&v95[v98[10]] = *(_DWORD *)(v96 + v98[10]);
          *(_WORD *)&v95[v98[11]] = *(_WORD *)(v96 + v98[11]);
          *(_WORD *)&v95[v98[12]] = *(_WORD *)(v96 + v98[12]);
          uint64_t v113 = v98[13];
          os_log_type_t v114 = &v95[v113];
          uint64_t v115 = (uint64_t *)(v96 + v113);
          unint64_t v116 = *(void *)(v96 + v113 + 8);
          if (v116 >> 60 == 15)
          {
            *(_OWORD *)os_log_type_t v114 = *(_OWORD *)v115;
          }
          else
          {
            uint64_t v219 = *v115;
            outlined copy of Data._Representation(*v115, v116);
            *(void *)os_log_type_t v114 = v219;
            *((void *)v114 + 1) = v116;
          }
          *((void *)v114 + 2) = v115[2];
          uint64_t v220 = v98[14];
          uint64_t v221 = &v95[v220];
          uint64_t v222 = (const void *)(v96 + v220);
          uint64_t v223 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v224 = *(void *)(v223 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v224 + 48))(v222, 1, v223))
          {
            uint64_t v225 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v221, v222, *(void *)(*(void *)(v225 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v224 + 16))(v221, v222, v223);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v224 + 56))(v221, 0, 1, v223);
          }
          uint64_t v93 = __dstb;
        }
        else
        {
          *(_DWORD *)uint64_t v95 = *(_DWORD *)v96;
          v95[4] = *(unsigned char *)(v96 + 4);
          uint64_t v138 = *(void *)(v96 + 16);
          *((void *)v95 + 1) = *(void *)(v96 + 8);
          *((void *)v95 + 2) = v138;
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v302 = v93[6];
        unint64_t v303 = &v11[v302];
        uint64_t v304 = (uint64_t *)(v12 + v302);
        unint64_t v305 = *(void *)(v12 + v302 + 8);
        if (v305 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v303 = *(_OWORD *)v304;
        }
        else
        {
          uint64_t v306 = *v304;
          outlined copy of Data._Representation(*v304, v305);
          *(void *)unint64_t v303 = v306;
          *((void *)v303 + 1) = v305;
        }
        *((void *)v303 + 2) = v304[2];
        uint64_t v3 = v398;
        uint64_t v307 = v93[7];
        uint64_t v308 = &v11[v307];
        uint64_t v309 = (uint64_t *)(v12 + v307);
        unint64_t v310 = *(void *)(v12 + v307 + 8);
        if (v310 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v308 = *(_OWORD *)v309;
        }
        else
        {
          uint64_t v311 = *v309;
          outlined copy of Data._Representation(*v309, v310);
          *(void *)uint64_t v308 = v311;
          *((void *)v308 + 1) = v310;
        }
        *((void *)v308 + 2) = v309[2];
        v11[v93[8]] = *(unsigned char *)(v12 + v93[8]);
        uint64_t v312 = v93[9];
        uint64_t v179 = &v11[v312];
        unint64_t v180 = (char *)(v12 + v312);
        uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v313 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v313 - 8) + 16))(v179, v180, v313);
            uint64_t v195 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v314 = v195[9];
            uint64_t v197 = &v179[v314];
            uint64_t v198 = &v180[v314];
            uint64_t v199 = type metadata accessor for SymmetricKey();
            goto LABEL_134;
          case 1u:
            uint64_t v321 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v321 - 8) + 16))(v179, v180, v321);
            uint64_t v201 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v322 = v201[9];
            uint64_t v203 = &v179[v322];
            uint64_t v204 = &v180[v322];
            uint64_t v205 = type metadata accessor for SymmetricKey();
            goto LABEL_141;
          case 2u:
            uint64_t v326 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v326 - 8) + 16))(v179, v180, v326);
            uint64_t v207 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v327 = v207[9];
            uint64_t v209 = &v179[v327];
            uint64_t v210 = &v180[v327];
            uint64_t v211 = type metadata accessor for SymmetricKey();
            goto LABEL_144;
          case 3u:
            goto LABEL_138;
          default:
            goto LABEL_136;
        }
      case 4u:
        uint64_t v21 = *(void *)(v12 + 8);
        *(void *)uint64_t v11 = *(void *)v12;
        *((void *)v11 + 1) = v21;
        *((void *)v11 + 2) = *(void *)(v12 + 16);
        unint64_t v22 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        }
        else
        {
          uint64_t v35 = *(void *)(v12 + 24);
          outlined copy of Data._Representation(v35, v22);
          *((void *)v11 + 3) = v35;
          *((void *)v11 + 4) = v22;
        }
        *((void *)v11 + 5) = *(void *)(v12 + 40);
        unint64_t v36 = *(void *)(v12 + 56);
        if (v36 >> 60 == 15)
        {
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 + 48);
        }
        else
        {
          uint64_t v117 = *(void *)(v12 + 48);
          outlined copy of Data._Representation(v117, *(void *)(v12 + 56));
          *((void *)v11 + 6) = v117;
          *((void *)v11 + 7) = v36;
        }
        *((void *)v11 + 8) = *(void *)(v12 + 64);
        int v118 = *(_DWORD *)(v12 + 76);
        *((_DWORD *)v11 + 18) = *(_DWORD *)(v12 + 72);
        *((_DWORD *)v11 + 19) = v118;
        unint64_t v119 = *(void *)(v12 + 88);
        if (v119 >> 60 == 15)
        {
          *((_OWORD *)v11 + 5) = *(_OWORD *)(v12 + 80);
        }
        else
        {
          uint64_t v139 = *(void *)(v12 + 80);
          outlined copy of Data._Representation(v139, *(void *)(v12 + 88));
          *((void *)v11 + 10) = v139;
          *((void *)v11 + 11) = v119;
        }
        *((void *)v11 + 12) = *(void *)(v12 + 96);
        unint64_t v140 = *(void *)(v12 + 112);
        if (v140 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 104) = *(_OWORD *)(v12 + 104);
        }
        else
        {
          uint64_t v141 = *(void *)(v12 + 104);
          outlined copy of Data._Representation(v141, *(void *)(v12 + 112));
          *((void *)v11 + 13) = v141;
          *((void *)v11 + 14) = v140;
        }
        *((void *)v11 + 15) = *(void *)(v12 + 120);
        v11[128] = *(unsigned char *)(v12 + 128);
        uint64_t v142 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v143 = *(int *)(v142 + 40);
        uint64_t v144 = &v11[v143];
        uint64_t v145 = (const void *)(v12 + v143);
        uint64_t v146 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v147 = *(void *)(v146 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
        {
          uint64_t v148 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v147 + 16))(v144, v145, v146);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
        }
        uint64_t v193 = *(int *)(v142 + 44);
        uint64_t v179 = &v11[v193];
        unint64_t v180 = (char *)(v12 + v193);
        uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_93;
          case 1u:
            goto LABEL_94;
          case 2u:
            goto LABEL_95;
          case 3u:
            goto LABEL_138;
          default:
            goto LABEL_136;
        }
      case 5u:
        uint64_t v23 = *(void *)(v12 + 8);
        *(void *)uint64_t v11 = *(void *)v12;
        *((void *)v11 + 1) = v23;
        *((void *)v11 + 2) = *(void *)(v12 + 16);
        unint64_t v24 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v24 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        }
        else
        {
          uint64_t v37 = *(void *)(v12 + 24);
          outlined copy of Data._Representation(v37, v24);
          *((void *)v11 + 3) = v37;
          *((void *)v11 + 4) = v24;
        }
        *((void *)v11 + 5) = *(void *)(v12 + 40);
        unint64_t v38 = *(void *)(v12 + 56);
        if (v38 >> 60 == 15)
        {
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 + 48);
        }
        else
        {
          uint64_t v120 = *(void *)(v12 + 48);
          outlined copy of Data._Representation(v120, *(void *)(v12 + 56));
          *((void *)v11 + 6) = v120;
          *((void *)v11 + 7) = v38;
        }
        *((void *)v11 + 8) = *(void *)(v12 + 64);
        int v121 = *(_DWORD *)(v12 + 76);
        *((_DWORD *)v11 + 18) = *(_DWORD *)(v12 + 72);
        *((_DWORD *)v11 + 19) = v121;
        uint64_t v122 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v123 = v122[7];
        unint64_t v124 = &v11[v123];
        unint64_t v125 = (const void *)(v12 + v123);
        uint64_t v126 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v127 = *(void *)(v126 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
        {
          uint64_t v128 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v127 + 16))(v124, v125, v126);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
        }
        uint64_t v168 = v122[8];
        long long v169 = &v11[v168];
        id v170 = (uint64_t *)(v12 + v168);
        unint64_t v171 = *(void *)(v12 + v168 + 8);
        if (v171 >> 60 == 15)
        {
          *(_OWORD *)long long v169 = *(_OWORD *)v170;
        }
        else
        {
          uint64_t v172 = *v170;
          outlined copy of Data._Representation(*v170, v171);
          *(void *)long long v169 = v172;
          *((void *)v169 + 1) = v171;
        }
        *((void *)v169 + 2) = v170[2];
        uint64_t v173 = v122[9];
        os_log_type_t v174 = &v11[v173];
        uint64_t v175 = (uint64_t *)(v12 + v173);
        unint64_t v176 = *(void *)(v12 + v173 + 8);
        if (v176 >> 60 == 15)
        {
          *(_OWORD *)os_log_type_t v174 = *(_OWORD *)v175;
        }
        else
        {
          uint64_t v177 = *v175;
          outlined copy of Data._Representation(*v175, v176);
          *(void *)os_log_type_t v174 = v177;
          *((void *)v174 + 1) = v176;
        }
        *((void *)v174 + 2) = v175[2];
        v11[v122[10]] = *(unsigned char *)(v12 + v122[10]);
        uint64_t v178 = v122[11];
        uint64_t v179 = &v11[v178];
        unint64_t v180 = (char *)(v12 + v178);
        uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_93;
          case 1u:
            goto LABEL_94;
          case 2u:
            goto LABEL_95;
          case 3u:
            goto LABEL_138;
          default:
            goto LABEL_136;
        }
      case 6u:
        uint64_t v25 = *(void *)(v12 + 8);
        *(void *)uint64_t v11 = *(void *)v12;
        *((void *)v11 + 1) = v25;
        *((void *)v11 + 2) = *(void *)(v12 + 16);
        unint64_t v26 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v26 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        }
        else
        {
          uint64_t v39 = *(void *)(v12 + 24);
          outlined copy of Data._Representation(v39, v26);
          *((void *)v11 + 3) = v39;
          *((void *)v11 + 4) = v26;
        }
        *((void *)v11 + 5) = *(void *)(v12 + 40);
        unint64_t v40 = *(void *)(v12 + 56);
        if (v40 >> 60 == 15)
        {
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 + 48);
        }
        else
        {
          uint64_t v129 = *(void *)(v12 + 48);
          outlined copy of Data._Representation(v129, *(void *)(v12 + 56));
          *((void *)v11 + 6) = v129;
          *((void *)v11 + 7) = v40;
        }
        *((void *)v11 + 8) = *(void *)(v12 + 64);
        int v130 = *(_DWORD *)(v12 + 76);
        *((_DWORD *)v11 + 18) = *(_DWORD *)(v12 + 72);
        *((_DWORD *)v11 + 19) = v130;
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v132 = ready[7];
        uint64_t v133 = &v11[v132];
        unint64_t v134 = (const void *)(v12 + v132);
        uint64_t v135 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v136 = *(void *)(v135 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
        {
          uint64_t v137 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v136 + 16))(v133, v134, v135);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
        }
        uint64_t v182 = ready[8];
        uint64_t v183 = &v11[v182];
        uint64_t v184 = (uint64_t *)(v12 + v182);
        unint64_t v185 = *(void *)(v12 + v182 + 8);
        if (v185 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
        }
        else
        {
          uint64_t v186 = *v184;
          outlined copy of Data._Representation(*v184, v185);
          *(void *)uint64_t v183 = v186;
          *((void *)v183 + 1) = v185;
        }
        *((void *)v183 + 2) = v184[2];
        uint64_t v187 = ready[9];
        uint64_t v188 = &v11[v187];
        uint64_t v189 = (uint64_t *)(v12 + v187);
        unint64_t v190 = *(void *)(v12 + v187 + 8);
        if (v190 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
        }
        else
        {
          uint64_t v191 = *v189;
          outlined copy of Data._Representation(*v189, v190);
          *(void *)uint64_t v188 = v191;
          *((void *)v188 + 1) = v190;
        }
        *((void *)v188 + 2) = v189[2];
        v11[ready[10]] = *(unsigned char *)(v12 + ready[10]);
        uint64_t v192 = ready[11];
        uint64_t v179 = &v11[v192];
        unint64_t v180 = (char *)(v12 + v192);
        uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
LABEL_93:
            uint64_t v194 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v194 - 8) + 16))(v179, v180, v194);
            uint64_t v195 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v196 = v195[9];
            uint64_t v197 = &v179[v196];
            uint64_t v198 = &v180[v196];
            uint64_t v199 = type metadata accessor for SymmetricKey();
            uint64_t v398 = v3;
LABEL_134:
            uint64_t v315 = v199;
            uint64_t v316 = *(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 16);
            v316(v197, v198, v199);
            v316(&v179[v195[10]], &v180[v195[10]], v315);
            v316(&v179[v195[11]], &v180[v195[11]], v315);
            uint64_t v317 = v315;
            uint64_t v3 = v398;
            v316(&v179[v195[12]], &v180[v195[12]], v317);
            goto LABEL_145;
          case 1u:
LABEL_94:
            uint64_t v200 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v200 - 8) + 16))(v179, v180, v200);
            uint64_t v201 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v202 = v201[9];
            uint64_t v203 = &v179[v202];
            uint64_t v204 = &v180[v202];
            uint64_t v205 = type metadata accessor for SymmetricKey();
            uint64_t v398 = v3;
LABEL_141:
            uint64_t v323 = v205;
            uint64_t v324 = *(void (**)(char *, char *, uint64_t))(*(void *)(v205 - 8) + 16);
            v324(v203, v204, v205);
            v324(&v179[v201[10]], &v180[v201[10]], v323);
            uint64_t v325 = v323;
            uint64_t v3 = v398;
            v324(&v179[v201[11]], &v180[v201[11]], v325);
            goto LABEL_145;
          case 2u:
LABEL_95:
            uint64_t v206 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 16))(v179, v180, v206);
            uint64_t v207 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v208 = v207[9];
            uint64_t v209 = &v179[v208];
            uint64_t v210 = &v180[v208];
            uint64_t v211 = type metadata accessor for SymmetricKey();
            uint64_t v398 = v3;
LABEL_144:
            uint64_t v328 = v211;
            uint64_t v329 = *(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 16);
            v329(v209, v210, v211);
            v329(&v179[v207[10]], &v180[v207[10]], v328);
            v329(&v179[v207[11]], &v180[v207[11]], v328);
            v329(&v179[v207[12]], &v180[v207[12]], v328);
            v329(&v179[v207[13]], &v180[v207[13]], v328);
            uint64_t v330 = v328;
            uint64_t v3 = v398;
            v329(&v179[v207[14]], &v180[v207[14]], v330);
            goto LABEL_145;
          case 3u:
LABEL_138:
            uint64_t v318 = type metadata accessor for SymmetricKey();
            uint64_t v319 = *(void (**)(char *, char *, uint64_t))(*(void *)(v318 - 8) + 16);
            v319(v179, v180, v318);
            uint64_t v320 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v319(&v179[v320[9]], &v180[v320[9]], v318);
            v319(&v179[v320[10]], &v180[v320[10]], v318);
            v319(&v179[v320[11]], &v180[v320[11]], v318);
            goto LABEL_145;
          default:
LABEL_136:
            size_t v248 = *(void *)(*(void *)(v181 - 8) + 64);
            unint64_t v249 = v179;
            uint64_t v250 = v180;
            goto LABEL_137;
        }
      default:
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)uint64_t v11 = *(void *)v12;
        *((void *)v11 + 1) = v13;
        *((void *)v11 + 2) = *(void *)(v12 + 16);
        unint64_t v14 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >> 60 == 15)
        {
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        }
        else
        {
          uint64_t v27 = *(void *)(v12 + 24);
          outlined copy of Data._Representation(v27, v14);
          *((void *)v11 + 3) = v27;
          *((void *)v11 + 4) = v14;
        }
        *((void *)v11 + 5) = *(void *)(v12 + 40);
        unint64_t v28 = *(void *)(v12 + 56);
        uint64_t v396 = v3;
        if (v28 >> 60 == 15)
        {
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 + 48);
        }
        else
        {
          uint64_t v41 = *(void *)(v12 + 48);
          outlined copy of Data._Representation(v41, v28);
          *((void *)v11 + 6) = v41;
          *((void *)v11 + 7) = v28;
        }
        *((void *)v11 + 8) = *(void *)(v12 + 64);
        *((_DWORD *)v11 + 18) = *(_DWORD *)(v12 + 72);
        uint64_t v42 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v43 = *(int *)(v42 + 20);
        uint64_t v44 = &v11[v43];
        long long v45 = (char *)(v12 + v43);
        long long v46 = (int *)type metadata accessor for SessionTicket();
        uint64_t v47 = *((void *)v46 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v47 + 48))(v45, 1, v46))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          uint64_t v390 = v47;
          __dstc = (void *)v42;
          uint64_t v149 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 16))(v44, v45, v149);
          *(_DWORD *)&v44[v46[5]] = *(_DWORD *)&v45[v46[5]];
          *(_DWORD *)&v44[v46[6]] = *(_DWORD *)&v45[v46[6]];
          uint64_t v150 = v46[7];
          id v151 = (uint64_t *)&v44[v150];
          id v152 = &v45[v150];
          uint64_t v154 = *(void *)&v45[v150];
          unint64_t v153 = *(void *)&v45[v150 + 8];
          outlined copy of Data._Representation(v154, v153);
          *id v151 = v154;
          v151[1] = v153;
          v151[2] = *((void *)v152 + 2);
          uint64_t v155 = v46[8];
          uint64_t v156 = (uint64_t *)&v44[v155];
          id v157 = &v45[v155];
          uint64_t v158 = *(void *)&v45[v155];
          unint64_t v159 = *(void *)&v45[v155 + 8];
          outlined copy of Data._Representation(v158, v159);
          *uint64_t v156 = v158;
          v156[1] = v159;
          v156[2] = *((void *)v157 + 2);
          uint64_t v160 = v46[9];
          os_log_type_t v161 = &v44[v160];
          uint64_t v162 = &v45[v160];
          uint64_t v163 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v163 - 8) + 16))(v161, v162, v163);
          *(_DWORD *)&v44[v46[10]] = *(_DWORD *)&v45[v46[10]];
          *(_WORD *)&v44[v46[11]] = *(_WORD *)&v45[v46[11]];
          *(_WORD *)&v44[v46[12]] = *(_WORD *)&v45[v46[12]];
          uint64_t v164 = v46[13];
          uint64_t v165 = &v44[v164];
          uint64_t v166 = (uint64_t *)&v45[v164];
          unint64_t v167 = *(void *)&v45[v164 + 8];
          if (v167 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
          }
          else
          {
            uint64_t v270 = *v166;
            outlined copy of Data._Representation(*v166, v167);
            *(void *)uint64_t v165 = v270;
            *((void *)v165 + 1) = v167;
          }
          *((void *)v165 + 2) = v166[2];
          uint64_t v42 = (uint64_t)__dstc;
          uint64_t v271 = v46[14];
          __dstd = &v44[v271];
          uint64_t v272 = &v45[v271];
          uint64_t v273 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v274 = *(void *)(v273 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v274 + 48))(v272, 1, v273))
          {
            uint64_t v275 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(__dstd, v272, *(void *)(*(void *)(v275 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v274 + 16))(__dstd, v272, v273);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v274 + 56))(__dstd, 0, 1, v273);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v390 + 56))(v44, 0, 1, v46);
        }
        uint64_t v3 = v396;
        uint64_t v338 = *(int *)(v42 + 24);
        uint64_t v339 = &v11[v338];
        uint64_t v340 = (char *)(v12 + v338);
        uint64_t v341 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v342 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v342 - 8) + 16))(v339, v340, v342);
            uint64_t v343 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v344 = v343[9];
            uint64_t v345 = &v339[v344];
            uint64_t v346 = &v340[v344];
            uint64_t v347 = type metadata accessor for SymmetricKey();
            uint64_t v348 = *(void (**)(char *, char *, uint64_t))(*(void *)(v347 - 8) + 16);
            uint64_t v349 = v346;
            uint64_t v3 = v396;
            v348(v345, v349, v347);
            v348(&v339[v343[10]], &v340[v343[10]], v347);
            v348(&v339[v343[11]], &v340[v343[11]], v347);
            v348(&v339[v343[12]], &v340[v343[12]], v347);
            break;
          case 1u:
            uint64_t v350 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v350 - 8) + 16))(v339, v340, v350);
            uint64_t v351 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v352 = v351[9];
            uint64_t v353 = &v339[v352];
            uint64_t v354 = &v340[v352];
            uint64_t v355 = type metadata accessor for SymmetricKey();
            v356 = *(void (**)(char *, char *, uint64_t))(*(void *)(v355 - 8) + 16);
            v356(v353, v354, v355);
            v356(&v339[v351[10]], &v340[v351[10]], v355);
            uint64_t v357 = v355;
            uint64_t v3 = v396;
            v356(&v339[v351[11]], &v340[v351[11]], v357);
            break;
          case 2u:
            uint64_t v358 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v358 - 8) + 16))(v339, v340, v358);
            v359 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v360 = v359[9];
            uint64_t v361 = &v339[v360];
            uint64_t v362 = &v340[v360];
            uint64_t v363 = type metadata accessor for SymmetricKey();
            uint64_t v364 = *(void (**)(char *, char *, uint64_t))(*(void *)(v363 - 8) + 16);
            v364(v361, v362, v363);
            v364(&v339[v359[10]], &v340[v359[10]], v363);
            v364(&v339[v359[11]], &v340[v359[11]], v363);
            v364(&v339[v359[12]], &v340[v359[12]], v363);
            v364(&v339[v359[13]], &v340[v359[13]], v363);
            uint64_t v365 = v363;
            uint64_t v3 = v396;
            v364(&v339[v359[14]], &v340[v359[14]], v365);
            break;
          case 3u:
            uint64_t v366 = type metadata accessor for SymmetricKey();
            uint64_t v367 = *(void (**)(char *, char *, uint64_t))(*(void *)(v366 - 8) + 16);
            v367(v339, v340, v366);
            uint64_t v368 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v367(&v339[v368[9]], &v340[v368[9]], v366);
            v367(&v339[v368[10]], &v340[v368[10]], v366);
            v367(&v339[v368[11]], &v340[v368[11]], v366);
            break;
          default:
            size_t v248 = *(void *)(*(void *)(v341 - 8) + 64);
            unint64_t v249 = v339;
            uint64_t v250 = v340;
            goto LABEL_137;
        }
LABEL_145:
        swift_storeEnumTagMultiPayload();
LABEL_159:
        uint64_t v301 = v400;
LABEL_160:
        swift_storeEnumTagMultiPayload();
        uint64_t v369 = v301[7];
        long long v370 = *(_OWORD *)(v3 + v369 + 24);
        *(_OWORD *)((char *)v4 + v369 + 24) = v370;
        (**(void (***)(void))(v370 - 8))();
        uint64_t v371 = v301[8];
        uint64_t v372 = v301[9];
        uint64_t v373 = (_OWORD *)((char *)v4 + v371);
        uint64_t v374 = (_OWORD *)(v3 + v371);
        long long v375 = v374[1];
        *uint64_t v373 = *v374;
        v373[1] = v375;
        uint64_t v376 = (char *)v4 + v372;
        uint64_t v377 = v3 + v372;
        uint64_t v378 = *(void *)(v3 + v372 + 8);
        *(void *)uint64_t v376 = *(void *)(v3 + v372);
        *((void *)v376 + 1) = v378;
        *((void *)v376 + 2) = *(void *)(v3 + v372 + 16);
        unint64_t v379 = *(void *)(v3 + v372 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v379 >> 60 == 15)
        {
          *(_OWORD *)(v376 + 24) = *(_OWORD *)(v377 + 24);
        }
        else
        {
          uint64_t v380 = *(void *)(v377 + 24);
          outlined copy of Data._Representation(v380, v379);
          *((void *)v376 + 3) = v380;
          *((void *)v376 + 4) = v379;
        }
        *((void *)v376 + 5) = *(void *)(v377 + 40);
        unint64_t v381 = *(void *)(v377 + 56);
        if (v381 >> 60 == 15)
        {
          *((_OWORD *)v376 + 3) = *(_OWORD *)(v377 + 48);
        }
        else
        {
          uint64_t v382 = *(void *)(v377 + 48);
          outlined copy of Data._Representation(v382, *(void *)(v377 + 56));
          *((void *)v376 + 6) = v382;
          *((void *)v376 + 7) = v381;
        }
        *((void *)v376 + 8) = *(void *)(v377 + 64);
        *((_DWORD *)v376 + 18) = *(_DWORD *)(v377 + 72);
        break;
    }
  }
  return v4;
}

uint64_t destroy for HandshakeStateMachine(uint64_t *a1, int *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    outlined consume of Data._Representation(*a1, v4);
  }
  int v5 = (uint64_t *)((char *)a1 + a2[6]);
  type metadata accessor for HandshakeState(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v6 = v5[4];
      if (v6 >> 60 != 15) {
        outlined consume of Data._Representation(v5[3], v6);
      }
      unint64_t v7 = v5[7];
      if (v7 >> 60 != 15) {
        outlined consume of Data._Representation(v5[6], v7);
      }
      uint64_t v8 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v9 = (char *)v5 + *(int *)(v8 + 20);
      uint64_t v10 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v10 - 1) + 48))(v9, 1, v10))
      {
        uint64_t v11 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
        outlined consume of Data._Representation(*(void *)&v9[v10[7]], *(void *)&v9[v10[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v9[v10[8]], *(void *)&v9[v10[8] + 8]);
        uint64_t v12 = &v9[v10[9]];
        uint64_t v13 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
        unint64_t v14 = (uint64_t *)&v9[v10[13]];
        unint64_t v15 = v14[1];
        if (v15 >> 60 != 15) {
          outlined consume of Data._Representation(*v14, v15);
        }
        unint64_t v16 = &v9[v10[14]];
        uint64_t v17 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v18 = *(void *)(v17 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
          (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
        }
      }
      uint64_t v19 = (char *)v5 + *(int *)(v8 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v20 = v5[4];
      if (v20 >> 60 != 15) {
        outlined consume of Data._Representation(v5[3], v20);
      }
      unint64_t v21 = v5[7];
      if (v21 >> 60 != 15) {
        outlined consume of Data._Representation(v5[6], v21);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v5 + 17));
      uint64_t v22 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v23 = (char *)v5 + *(int *)(v22 + 36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v24 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
          uint64_t v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          unint64_t v26 = &v23[v25[9]];
          uint64_t v27 = type metadata accessor for SymmetricKey();
          unint64_t v28 = *(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8);
          v28(v26, v27);
          v28(&v23[v25[10]], v27);
          v28(&v23[v25[11]], v27);
          uint64_t v29 = v25[12];
          goto LABEL_86;
        case 1u:
          uint64_t v103 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v103 - 8) + 8))(v23, v103);
          uint64_t v104 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v105 = &v23[v104[9]];
          uint64_t v27 = type metadata accessor for SymmetricKey();
          unint64_t v28 = *(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8);
          v28(v105, v27);
          v28(&v23[v104[10]], v27);
          uint64_t v29 = v104[11];
          goto LABEL_86;
        case 2u:
          uint64_t v106 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v106 - 8) + 8))(v23, v106);
          uint64_t v107 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          unint64_t v108 = &v23[v107[9]];
          uint64_t v27 = type metadata accessor for SymmetricKey();
          unint64_t v28 = *(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8);
          v28(v108, v27);
          v28(&v23[v107[10]], v27);
          v28(&v23[v107[11]], v27);
          v28(&v23[v107[12]], v27);
          v28(&v23[v107[13]], v27);
          uint64_t v29 = v107[14];
LABEL_86:
          v28(&v23[v29], v27);
          break;
        case 3u:
          uint64_t v109 = type metadata accessor for SymmetricKey();
          unint64_t v110 = *(void (**)(char *, uint64_t))(*(void *)(v109 - 8) + 8);
          v110(v23, v109);
          uint64_t v111 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v110(&v23[v111[9]], v109);
          v110(&v23[v111[10]], v109);
          v110(&v23[v111[11]], v109);
          break;
        default:
          break;
      }
      uint64_t v112 = (char *)v5 + *(int *)(v22 + 40);
      uint64_t v113 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v113 - 1) + 48))(v112, 1, v113))
      {
        uint64_t v114 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v114 - 8) + 8))(v112, v114);
        outlined consume of Data._Representation(*(void *)&v112[v113[7]], *(void *)&v112[v113[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v112[v113[8]], *(void *)&v112[v113[8] + 8]);
        uint64_t v115 = &v112[v113[9]];
        uint64_t v116 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v116 - 8) + 8))(v115, v116);
        uint64_t v117 = (uint64_t *)&v112[v113[13]];
        unint64_t v118 = v117[1];
        if (v118 >> 60 != 15) {
          outlined consume of Data._Representation(*v117, v118);
        }
        unint64_t v119 = &v112[v113[14]];
        uint64_t v120 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v121 = *(void *)(v120 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120)) {
          (*(void (**)(char *, uint64_t))(v121 + 8))(v119, v120);
        }
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v30 = v5[4];
      if (v30 >> 60 != 15) {
        outlined consume of Data._Representation(v5[3], v30);
      }
      unint64_t v31 = v5[7];
      if (v31 >> 60 != 15) {
        outlined consume of Data._Representation(v5[6], v31);
      }
      uint64_t v32 = type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v33 = (char *)v5 + *(int *)(v32 + 20);
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v34 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
        uint64_t v35 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(void *)&v33[v35[7]], *(void *)&v33[v35[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v33[v35[8]], *(void *)&v33[v35[8] + 8]);
        unint64_t v36 = &v33[v35[9]];
        uint64_t v37 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v36, v37);
        unint64_t v38 = (uint64_t *)&v33[v35[13]];
        unint64_t v39 = v38[1];
        if (v39 >> 60 != 15) {
          outlined consume of Data._Representation(*v38, v39);
        }
        unint64_t v40 = &v33[v35[14]];
        uint64_t v41 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v42 = *(void *)(v41 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v19 = (char *)v5 + *(int *)(v32 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v43 = v5[4];
      if (v43 >> 60 != 15) {
        outlined consume of Data._Representation(v5[3], v43);
      }
      unint64_t v44 = v5[7];
      if (v44 >> 60 != 15) {
        outlined consume of Data._Representation(v5[6], v44);
      }
      long long v45 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      long long v46 = (char *)v5 + v45[5];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v47 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8))(v46, v47);
        uint64_t v48 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(void *)&v46[v48[7]], *(void *)&v46[v48[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v46[v48[8]], *(void *)&v46[v48[8] + 8]);
        uint64_t v49 = &v46[v48[9]];
        uint64_t v50 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
        uint64_t v51 = (uint64_t *)&v46[v48[13]];
        unint64_t v52 = v51[1];
        if (v52 >> 60 != 15) {
          outlined consume of Data._Representation(*v51, v52);
        }
        uint64_t v53 = &v46[v48[14]];
        uint64_t v54 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v55 = *(void *)(v54 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54)) {
          (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v84 = (uint64_t *)((char *)v5 + v45[6]);
      unint64_t v85 = v84[1];
      if (v85 >> 60 != 15) {
        outlined consume of Data._Representation(*v84, v85);
      }
      uint64_t v86 = (uint64_t *)((char *)v5 + v45[7]);
      unint64_t v87 = v86[1];
      if (v87 >> 60 != 15) {
        outlined consume of Data._Representation(*v86, v87);
      }
      uint64_t v19 = (char *)v5 + v45[9];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v56 = v5[4];
      if (v56 >> 60 != 15) {
        outlined consume of Data._Representation(v5[3], v56);
      }
      unint64_t v57 = v5[7];
      if (v57 >> 60 != 15) {
        outlined consume of Data._Representation(v5[6], v57);
      }
      unint64_t v58 = v5[11];
      if (v58 >> 60 != 15) {
        outlined consume of Data._Representation(v5[10], v58);
      }
      unint64_t v59 = v5[14];
      if (v59 >> 60 != 15) {
        outlined consume of Data._Representation(v5[13], v59);
      }
      uint64_t v60 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v61 = (char *)v5 + *(int *)(v60 + 40);
      uint64_t v62 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v63 = *(void *)(v62 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62)) {
        (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v62);
      }
      uint64_t v19 = (char *)v5 + *(int *)(v60 + 44);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v64 = v5[4];
      if (v64 >> 60 != 15) {
        outlined consume of Data._Representation(v5[3], v64);
      }
      unint64_t v65 = v5[7];
      if (v65 >> 60 != 15) {
        outlined consume of Data._Representation(v5[6], v65);
      }
      unint64_t v66 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v67 = (char *)v5 + v66[7];
      uint64_t v68 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v69 = *(void *)(v68 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68)) {
        (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
      }
      unint64_t v70 = (uint64_t *)((char *)v5 + v66[8]);
      unint64_t v71 = v70[1];
      if (v71 >> 60 != 15) {
        outlined consume of Data._Representation(*v70, v71);
      }
      uint64_t v72 = (uint64_t *)((char *)v5 + v66[9]);
      unint64_t v73 = v72[1];
      if (v73 >> 60 != 15) {
        outlined consume of Data._Representation(*v72, v73);
      }
      uint64_t v19 = (char *)v5 + v66[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v74 = v5[4];
      if (v74 >> 60 != 15) {
        outlined consume of Data._Representation(v5[3], v74);
      }
      unint64_t v75 = v5[7];
      if (v75 >> 60 != 15) {
        outlined consume of Data._Representation(v5[6], v75);
      }
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v77 = (char *)v5 + ready[7];
      uint64_t v78 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v79 = *(void *)(v78 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78)) {
        (*(void (**)(char *, uint64_t))(v79 + 8))(v77, v78);
      }
      uint64_t v80 = (uint64_t *)((char *)v5 + ready[8]);
      unint64_t v81 = v80[1];
      if (v81 >> 60 != 15) {
        outlined consume of Data._Representation(*v80, v81);
      }
      uint64_t v82 = (uint64_t *)((char *)v5 + ready[9]);
      unint64_t v83 = v82[1];
      if (v83 >> 60 != 15) {
        outlined consume of Data._Representation(*v82, v83);
      }
      uint64_t v19 = (char *)v5 + ready[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_79:
          uint64_t v88 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v88 - 8) + 8))(v19, v88);
          id v89 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v90 = &v19[v89[9]];
          uint64_t v91 = type metadata accessor for SymmetricKey();
          uint64_t v92 = *(void (**)(char *, uint64_t))(*(void *)(v91 - 8) + 8);
          v92(v90, v91);
          v92(&v19[v89[10]], v91);
          v92(&v19[v89[11]], v91);
          uint64_t v93 = v89[12];
          goto LABEL_82;
        case 1u:
LABEL_80:
          uint64_t v94 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v94 - 8) + 8))(v19, v94);
          uint64_t v95 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v96 = &v19[v95[9]];
          uint64_t v91 = type metadata accessor for SymmetricKey();
          uint64_t v92 = *(void (**)(char *, uint64_t))(*(void *)(v91 - 8) + 8);
          v92(v96, v91);
          v92(&v19[v95[10]], v91);
          uint64_t v93 = v95[11];
          goto LABEL_82;
        case 2u:
LABEL_81:
          uint64_t v97 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v97 - 8) + 8))(v19, v97);
          unint64_t v98 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v99 = &v19[v98[9]];
          uint64_t v91 = type metadata accessor for SymmetricKey();
          uint64_t v92 = *(void (**)(char *, uint64_t))(*(void *)(v91 - 8) + 8);
          v92(v99, v91);
          v92(&v19[v98[10]], v91);
          v92(&v19[v98[11]], v91);
          v92(&v19[v98[12]], v91);
          v92(&v19[v98[13]], v91);
          uint64_t v93 = v98[14];
LABEL_82:
          v92(&v19[v93], v91);
          break;
        case 3u:
LABEL_83:
          uint64_t v100 = type metadata accessor for SymmetricKey();
          uint64_t v101 = *(void (**)(char *, uint64_t))(*(void *)(v100 - 8) + 8);
          v101(v19, v100);
          unint64_t v102 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v101(&v19[v102[9]], v100);
          v101(&v19[v102[10]], v100);
          v101(&v19[v102[11]], v100);
          break;
        default:
          goto LABEL_93;
      }
      break;
    default:
      break;
  }
LABEL_93:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + a2[7]);
  uint64_t v122 = (uint64_t *)((char *)a1 + a2[9]);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v124 = v122[4];
  if (v124 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(v122[3], v124);
  }
  unint64_t v125 = v122[7];
  if (v125 >> 60 != 15)
  {
    uint64_t v126 = v122[6];
    return outlined consume of Data._Representation(v126, v125);
  }
  return result;
}

uint64_t *initializeWithCopy for HandshakeStateMachine(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = a1;
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *int v5 = v7;
    v5[1] = v6;
  }
  long long v5[2] = a2[2];
  uint64_t v399 = a3;
  uint64_t v400 = a2;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)v5 + v8;
  uint64_t v10 = (char *)a2 + v8;
  type metadata accessor for HandshakeState(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v13;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      unint64_t v14 = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      }
      else
      {
        uint64_t v27 = *((void *)v10 + 3);
        outlined copy of Data._Representation(v27, v14);
        *((void *)v9 + 3) = v27;
        *((void *)v9 + 4) = v14;
      }
      *((void *)v9 + 5) = *((void *)v10 + 5);
      unint64_t v28 = *((void *)v10 + 7);
      if (v28 >> 60 == 15)
      {
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
      }
      else
      {
        uint64_t v47 = *((void *)v10 + 6);
        outlined copy of Data._Representation(v47, *((void *)v10 + 7));
        *((void *)v9 + 6) = v47;
        *((void *)v9 + 7) = v28;
      }
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      long long v48 = *((_OWORD *)v10 + 6);
      *((_OWORD *)v9 + 5) = *((_OWORD *)v10 + 5);
      *((_OWORD *)v9 + 6) = v48;
      uint64_t v49 = *((void *)v10 + 15);
      *((void *)v9 + 14) = *((void *)v10 + 14);
      *((void *)v9 + 15) = v49;
      *((void *)v9 + 16) = *((void *)v10 + 16);
      long long v50 = *((_OWORD *)v10 + 10);
      *((_OWORD *)v9 + 10) = v50;
      uint64_t v51 = v50;
      unint64_t v52 = **(void (***)(char *, char *, uint64_t))(v50 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v52(v9 + 136, v10 + 136, v51);
      uint64_t v53 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v54 = *(int *)(v53 + 36);
      uint64_t v55 = &v9[v54];
      unint64_t v56 = &v10[v54];
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t v398 = v5;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v58 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v55, v56, v58);
          unint64_t v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v60 = v59[9];
          uint64_t v61 = &v55[v60];
          uint64_t v391 = v53;
          uint64_t v62 = &v56[v60];
          uint64_t v63 = type metadata accessor for SymmetricKey();
          unint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
          unint64_t v65 = v62;
          uint64_t v53 = v391;
          v64(v61, v65, v63);
          v64(&v55[v59[10]], &v56[v59[10]], v63);
          v64(&v55[v59[11]], &v56[v59[11]], v63);
          uint64_t v66 = v63;
          int v5 = v398;
          v64(&v55[v59[12]], &v56[v59[12]], v66);
          goto LABEL_104;
        case 1u:
          uint64_t v226 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(v55, v56, v226);
          unint64_t v227 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v228 = v227[9];
          uint64_t v229 = &v55[v228];
          uint64_t v392 = v53;
          uint64_t v230 = &v56[v228];
          uint64_t v231 = type metadata accessor for SymmetricKey();
          uint64_t v232 = *(void (**)(char *, char *, uint64_t))(*(void *)(v231 - 8) + 16);
          uint64_t v233 = v230;
          uint64_t v53 = v392;
          v232(v229, v233, v231);
          v232(&v55[v227[10]], &v56[v227[10]], v231);
          uint64_t v234 = v231;
          int v5 = v398;
          v232(&v55[v227[11]], &v56[v227[11]], v234);
          goto LABEL_104;
        case 2u:
          uint64_t v235 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v235 - 8) + 16))(v55, v56, v235);
          uint64_t v236 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v237 = v236[9];
          uint64_t v238 = &v55[v237];
          uint64_t v393 = v53;
          uint64_t v239 = &v56[v237];
          uint64_t v240 = type metadata accessor for SymmetricKey();
          uint64_t v241 = *(void (**)(char *, char *, uint64_t))(*(void *)(v240 - 8) + 16);
          unint64_t v242 = v239;
          uint64_t v53 = v393;
          v241(v238, v242, v240);
          v241(&v55[v236[10]], &v56[v236[10]], v240);
          v241(&v55[v236[11]], &v56[v236[11]], v240);
          v241(&v55[v236[12]], &v56[v236[12]], v240);
          v241(&v55[v236[13]], &v56[v236[13]], v240);
          uint64_t v243 = v240;
          int v5 = v398;
          v241(&v55[v236[14]], &v56[v236[14]], v243);
          goto LABEL_104;
        case 3u:
          uint64_t v244 = type metadata accessor for SymmetricKey();
          unint64_t v245 = *(void (**)(char *, char *, uint64_t))(*(void *)(v244 - 8) + 16);
          v245(v55, v56, v244);
          unint64_t v246 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v245(&v55[v246[9]], &v56[v246[9]], v244);
          v245(&v55[v246[10]], &v56[v246[10]], v244);
          v245(&v55[v246[11]], &v56[v246[11]], v244);
LABEL_104:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
          break;
      }
      uint64_t v247 = *(int *)(v53 + 40);
      size_t v248 = &v9[v247];
      unint64_t v249 = &v10[v247];
      uint64_t v250 = (int *)type metadata accessor for SessionTicket();
      uint64_t v251 = *((void *)v250 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v251 + 48))(v249, 1, v250))
      {
        size_t v252 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                     - 8)
                         + 64);
        uint64_t v253 = v248;
        unint64_t v254 = v249;
LABEL_134:
        memcpy(v253, v254, v252);
      }
      else
      {
        uint64_t v255 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v255 - 8) + 16))(v248, v249, v255);
        *(_DWORD *)&v248[v250[5]] = *(_DWORD *)&v249[v250[5]];
        *(_DWORD *)&v248[v250[6]] = *(_DWORD *)&v249[v250[6]];
        uint64_t v256 = v250[7];
        uint64_t v257 = (uint64_t *)&v248[v256];
        uint64_t v258 = &v249[v256];
        uint64_t v259 = *(void *)&v249[v256];
        unint64_t v260 = *(void *)&v249[v256 + 8];
        outlined copy of Data._Representation(v259, v260);
        *uint64_t v257 = v259;
        v257[1] = v260;
        v257[2] = *((void *)v258 + 2);
        uint64_t v261 = v250[8];
        uint64_t v262 = (uint64_t *)&v248[v261];
        uint64_t v263 = &v249[v261];
        uint64_t v264 = *(void *)&v249[v261];
        unint64_t v265 = *(void *)&v249[v261 + 8];
        outlined copy of Data._Representation(v264, v265);
        *uint64_t v262 = v264;
        v262[1] = v265;
        v262[2] = *((void *)v263 + 2);
        uint64_t v266 = v250[9];
        id v267 = &v248[v266];
        uint64_t v268 = &v249[v266];
        uint64_t v269 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v269 - 8) + 16))(v267, v268, v269);
        *(_DWORD *)&v248[v250[10]] = *(_DWORD *)&v249[v250[10]];
        *(_WORD *)&v248[v250[11]] = *(_WORD *)&v249[v250[11]];
        *(_WORD *)&v248[v250[12]] = *(_WORD *)&v249[v250[12]];
        uint64_t v270 = v250[13];
        uint64_t v271 = &v248[v270];
        uint64_t v272 = (uint64_t *)&v249[v270];
        unint64_t v273 = *(void *)&v249[v270 + 8];
        if (v273 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v271 = *(_OWORD *)v272;
        }
        else
        {
          uint64_t v345 = *v272;
          outlined copy of Data._Representation(*v272, v273);
          *(void *)uint64_t v271 = v345;
          *((void *)v271 + 1) = v273;
        }
        *((void *)v271 + 2) = v272[2];
        uint64_t v346 = v250[14];
        uint64_t v347 = &v248[v346];
        uint64_t v348 = &v249[v346];
        uint64_t v349 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v350 = *(void *)(v349 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v350 + 48))(v348, 1, v349))
        {
          uint64_t v351 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v347, v348, *(void *)(*(void *)(v351 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v350 + 16))(v347, v348, v349);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v350 + 56))(v347, 0, 1, v349);
        }
        int v5 = v398;
        (*(void (**)(char *, void, uint64_t, int *))(v251 + 56))(v248, 0, 1, v250);
      }
      goto LABEL_156;
    case 2u:
      uint64_t v15 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v15;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      unint64_t v16 = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v16 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      }
      else
      {
        uint64_t v29 = *((void *)v10 + 3);
        outlined copy of Data._Representation(v29, v16);
        *((void *)v9 + 3) = v29;
        *((void *)v9 + 4) = v16;
      }
      *((void *)v9 + 5) = *((void *)v10 + 5);
      unint64_t v30 = *((void *)v10 + 7);
      uint64_t v397 = v5;
      if (v30 >> 60 == 15)
      {
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
      }
      else
      {
        uint64_t v67 = *((void *)v10 + 6);
        outlined copy of Data._Representation(v67, v30);
        *((void *)v9 + 6) = v67;
        *((void *)v9 + 7) = v30;
      }
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      uint64_t v68 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v69 = v68[5];
      unint64_t v70 = &v9[v69];
      unint64_t v71 = &v10[v69];
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      uint64_t v394 = v68;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v72 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
        unint64_t v73 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v70[v73[5]] = *(_DWORD *)&v71[v73[5]];
        *(_DWORD *)&v70[v73[6]] = *(_DWORD *)&v71[v73[6]];
        uint64_t v74 = v73[7];
        unint64_t v75 = (uint64_t *)&v70[v74];
        uint64_t v76 = &v71[v74];
        uint64_t v77 = *(void *)&v71[v74];
        unint64_t v78 = *(void *)&v71[v74 + 8];
        outlined copy of Data._Representation(v77, v78);
        *unint64_t v75 = v77;
        v75[1] = v78;
        v75[2] = *((void *)v76 + 2);
        uint64_t v79 = v73[8];
        uint64_t v80 = (uint64_t *)&v70[v79];
        unint64_t v81 = &v71[v79];
        uint64_t v82 = *(void *)&v71[v79];
        unint64_t v83 = *(void *)&v71[v79 + 8];
        outlined copy of Data._Representation(v82, v83);
        *uint64_t v80 = v82;
        v80[1] = v83;
        v80[2] = *((void *)v81 + 2);
        uint64_t v84 = v73[9];
        unint64_t v85 = &v70[v84];
        uint64_t v86 = &v71[v84];
        uint64_t v87 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
        *(_DWORD *)&v70[v73[10]] = *(_DWORD *)&v71[v73[10]];
        *(_WORD *)&v70[v73[11]] = *(_WORD *)&v71[v73[11]];
        *(_WORD *)&v70[v73[12]] = *(_WORD *)&v71[v73[12]];
        uint64_t v88 = v73[13];
        id v89 = &v70[v88];
        uint64_t v90 = (uint64_t *)&v71[v88];
        unint64_t v91 = *(void *)&v71[v88 + 8];
        if (v91 >> 60 == 15)
        {
          *(_OWORD *)id v89 = *(_OWORD *)v90;
        }
        else
        {
          uint64_t v212 = *v90;
          outlined copy of Data._Representation(*v90, v91);
          *(void *)id v89 = v212;
          *((void *)v89 + 1) = v91;
        }
        *((void *)v89 + 2) = v90[2];
        uint64_t v213 = v73[14];
        unint64_t v214 = &v70[v213];
        uint64_t v215 = &v71[v213];
        uint64_t v216 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v217 = *(void *)(v216 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216))
        {
          uint64_t v218 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v214, v215, *(void *)(*(void *)(v218 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v214, v215, v216);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
        }
        uint64_t v68 = v394;
      }
      else
      {
        *(_DWORD *)unint64_t v70 = *(_DWORD *)v71;
        *((void *)v70 + 1) = *((void *)v71 + 1);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v281 = v68[6];
      uint64_t v282 = &v9[v281];
      long long v283 = &v10[v281];
      uint64_t v284 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v285 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v285 - 8) + 16))(v282, v283, v285);
          uint64_t v286 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v287 = v286[9];
          uint64_t v288 = &v282[v287];
          uint64_t v289 = &v283[v287];
          uint64_t v290 = type metadata accessor for SymmetricKey();
          uint64_t v291 = *(void (**)(char *, char *, uint64_t))(*(void *)(v290 - 8) + 16);
          uint64_t v292 = v289;
          uint64_t v68 = v394;
          v291(v288, v292, v290);
          v291(&v282[v286[10]], &v283[v286[10]], v290);
          v291(&v282[v286[11]], &v283[v286[11]], v290);
          v291(&v282[v286[12]], &v283[v286[12]], v290);
          goto LABEL_120;
        case 1u:
          uint64_t v293 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v293 - 8) + 16))(v282, v283, v293);
          uint64_t v294 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v295 = v294[9];
          uint64_t v296 = &v282[v295];
          uint64_t v297 = &v283[v295];
          uint64_t v298 = type metadata accessor for SymmetricKey();
          unint64_t v299 = *(void (**)(char *, char *, uint64_t))(*(void *)(v298 - 8) + 16);
          unint64_t v300 = v297;
          uint64_t v68 = v394;
          v299(v296, v300, v298);
          v299(&v282[v294[10]], &v283[v294[10]], v298);
          v299(&v282[v294[11]], &v283[v294[11]], v298);
          goto LABEL_120;
        case 2u:
          uint64_t v301 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v301 - 8) + 16))(v282, v283, v301);
          uint64_t v302 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v303 = v302[9];
          uint64_t v304 = &v282[v303];
          unint64_t v305 = &v283[v303];
          uint64_t v306 = type metadata accessor for SymmetricKey();
          uint64_t v307 = *(void (**)(char *, char *, uint64_t))(*(void *)(v306 - 8) + 16);
          uint64_t v308 = v305;
          uint64_t v68 = v394;
          v307(v304, v308, v306);
          v307(&v282[v302[10]], &v283[v302[10]], v306);
          v307(&v282[v302[11]], &v283[v302[11]], v306);
          v307(&v282[v302[12]], &v283[v302[12]], v306);
          v307(&v282[v302[13]], &v283[v302[13]], v306);
          v307(&v282[v302[14]], &v283[v302[14]], v306);
          goto LABEL_120;
        case 3u:
          uint64_t v309 = type metadata accessor for SymmetricKey();
          unint64_t v310 = *(void (**)(char *, char *, uint64_t))(*(void *)(v309 - 8) + 16);
          v310(v282, v283, v309);
          uint64_t v311 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v310(&v282[v311[9]], &v283[v311[9]], v309);
          v310(&v282[v311[10]], &v283[v311[10]], v309);
          v310(&v282[v311[11]], &v283[v311[11]], v309);
LABEL_120:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v282, v283, *(void *)(*(void *)(v284 - 8) + 64));
          break;
      }
      int v5 = v397;
      uint64_t v312 = v399;
      *(_WORD *)&v9[v68[7]] = *(_WORD *)&v10[v68[7]];
      *(_WORD *)&v9[v68[8]] = *(_WORD *)&v10[v68[8]];
      uint64_t v313 = v400;
      goto LABEL_157;
    case 3u:
      uint64_t v17 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v17;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      unint64_t v18 = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      }
      else
      {
        uint64_t v31 = *((void *)v10 + 3);
        outlined copy of Data._Representation(v31, v18);
        *((void *)v9 + 3) = v31;
        *((void *)v9 + 4) = v18;
      }
      *((void *)v9 + 5) = *((void *)v10 + 5);
      unint64_t v32 = *((void *)v10 + 7);
      uint64_t v396 = v5;
      if (v32 >> 60 == 15)
      {
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
      }
      else
      {
        uint64_t v92 = *((void *)v10 + 6);
        outlined copy of Data._Representation(v92, v32);
        *((void *)v9 + 6) = v92;
        *((void *)v9 + 7) = v32;
      }
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      uint64_t v93 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v94 = v93[5];
      uint64_t v95 = &v9[v94];
      uint64_t v96 = &v10[v94];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v97 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
        unint64_t v98 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v95[v98[5]] = *(_DWORD *)&v96[v98[5]];
        *(_DWORD *)&v95[v98[6]] = *(_DWORD *)&v96[v98[6]];
        uint64_t v99 = v98[7];
        uint64_t v100 = (uint64_t *)&v95[v99];
        uint64_t v101 = &v96[v99];
        uint64_t v102 = *(void *)&v96[v99];
        unint64_t v103 = *(void *)&v96[v99 + 8];
        outlined copy of Data._Representation(v102, v103);
        *uint64_t v100 = v102;
        v100[1] = v103;
        v100[2] = *((void *)v101 + 2);
        uint64_t v104 = v98[8];
        uint64_t v105 = (uint64_t *)&v95[v104];
        uint64_t v106 = &v96[v104];
        uint64_t v107 = *(void *)&v96[v104];
        unint64_t v108 = *(void *)&v96[v104 + 8];
        outlined copy of Data._Representation(v107, v108);
        *uint64_t v105 = v107;
        v105[1] = v108;
        v105[2] = *((void *)v106 + 2);
        uint64_t v109 = v98[9];
        unint64_t v110 = &v95[v109];
        uint64_t v111 = &v96[v109];
        uint64_t v112 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 16))(v110, v111, v112);
        *(_DWORD *)&v95[v98[10]] = *(_DWORD *)&v96[v98[10]];
        *(_WORD *)&v95[v98[11]] = *(_WORD *)&v96[v98[11]];
        *(_WORD *)&v95[v98[12]] = *(_WORD *)&v96[v98[12]];
        uint64_t v113 = v98[13];
        uint64_t v114 = &v95[v113];
        uint64_t v115 = (uint64_t *)&v96[v113];
        unint64_t v116 = *(void *)&v96[v113 + 8];
        if (v116 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
        }
        else
        {
          uint64_t v219 = *v115;
          outlined copy of Data._Representation(*v115, v116);
          *(void *)uint64_t v114 = v219;
          *((void *)v114 + 1) = v116;
        }
        *((void *)v114 + 2) = v115[2];
        uint64_t v220 = v98[14];
        uint64_t v221 = &v95[v220];
        uint64_t v222 = &v96[v220];
        uint64_t v223 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v224 = *(void *)(v223 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v224 + 48))(v222, 1, v223))
        {
          uint64_t v225 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v221, v222, *(void *)(*(void *)(v225 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v224 + 16))(v221, v222, v223);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v224 + 56))(v221, 0, 1, v223);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v95 = *(_DWORD *)v96;
        v95[4] = v96[4];
        uint64_t v138 = *((void *)v96 + 2);
        *((void *)v95 + 1) = *((void *)v96 + 1);
        *((void *)v95 + 2) = v138;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v314 = v93[6];
      uint64_t v315 = &v9[v314];
      uint64_t v316 = (uint64_t *)&v10[v314];
      unint64_t v317 = *(void *)&v10[v314 + 8];
      if (v317 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v315 = *(_OWORD *)v316;
      }
      else
      {
        uint64_t v318 = *v316;
        outlined copy of Data._Representation(*v316, v317);
        *(void *)uint64_t v315 = v318;
        *((void *)v315 + 1) = v317;
      }
      *((void *)v315 + 2) = v316[2];
      int v5 = v396;
      uint64_t v319 = v93[7];
      uint64_t v320 = &v9[v319];
      uint64_t v321 = (uint64_t *)&v10[v319];
      unint64_t v322 = *(void *)&v10[v319 + 8];
      if (v322 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v320 = *(_OWORD *)v321;
      }
      else
      {
        uint64_t v323 = *v321;
        outlined copy of Data._Representation(*v321, v322);
        *(void *)uint64_t v320 = v323;
        *((void *)v320 + 1) = v322;
      }
      *((void *)v320 + 2) = v321[2];
      v9[v93[8]] = v10[v93[8]];
      uint64_t v324 = v93[9];
      uint64_t v179 = &v9[v324];
      unint64_t v180 = &v10[v324];
      uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v325 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16))(v179, v180, v325);
          uint64_t v195 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v326 = v195[9];
          uint64_t v197 = &v179[v326];
          uint64_t v198 = &v180[v326];
          uint64_t v199 = type metadata accessor for SymmetricKey();
          goto LABEL_131;
        case 1u:
          uint64_t v338 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v338 - 8) + 16))(v179, v180, v338);
          uint64_t v201 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v339 = v201[9];
          uint64_t v203 = &v179[v339];
          uint64_t v204 = &v180[v339];
          uint64_t v205 = type metadata accessor for SymmetricKey();
          goto LABEL_138;
        case 2u:
          uint64_t v341 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v341 - 8) + 16))(v179, v180, v341);
          uint64_t v207 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v342 = v207[9];
          uint64_t v209 = &v179[v342];
          uint64_t v210 = &v180[v342];
          uint64_t v211 = type metadata accessor for SymmetricKey();
          goto LABEL_141;
        case 3u:
          goto LABEL_135;
        default:
          goto LABEL_133;
      }
    case 4u:
      uint64_t v19 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v19;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      unint64_t v20 = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      }
      else
      {
        uint64_t v33 = *((void *)v10 + 3);
        outlined copy of Data._Representation(v33, v20);
        *((void *)v9 + 3) = v33;
        *((void *)v9 + 4) = v20;
      }
      *((void *)v9 + 5) = *((void *)v10 + 5);
      unint64_t v34 = *((void *)v10 + 7);
      if (v34 >> 60 == 15)
      {
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
      }
      else
      {
        uint64_t v117 = *((void *)v10 + 6);
        outlined copy of Data._Representation(v117, *((void *)v10 + 7));
        *((void *)v9 + 6) = v117;
        *((void *)v9 + 7) = v34;
      }
      *((void *)v9 + 8) = *((void *)v10 + 8);
      int v118 = *((_DWORD *)v10 + 19);
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      *((_DWORD *)v9 + 19) = v118;
      unint64_t v119 = *((void *)v10 + 11);
      if (v119 >> 60 == 15)
      {
        *((_OWORD *)v9 + 5) = *((_OWORD *)v10 + 5);
      }
      else
      {
        uint64_t v139 = *((void *)v10 + 10);
        outlined copy of Data._Representation(v139, *((void *)v10 + 11));
        *((void *)v9 + 10) = v139;
        *((void *)v9 + 11) = v119;
      }
      *((void *)v9 + 12) = *((void *)v10 + 12);
      unint64_t v140 = *((void *)v10 + 14);
      if (v140 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 104) = *(_OWORD *)(v10 + 104);
      }
      else
      {
        uint64_t v141 = *((void *)v10 + 13);
        outlined copy of Data._Representation(v141, *((void *)v10 + 14));
        *((void *)v9 + 13) = v141;
        *((void *)v9 + 14) = v140;
      }
      *((void *)v9 + 15) = *((void *)v10 + 15);
      v9[128] = v10[128];
      uint64_t v142 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v143 = *(int *)(v142 + 40);
      uint64_t v144 = &v9[v143];
      uint64_t v145 = &v10[v143];
      uint64_t v146 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v147 = *(void *)(v146 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
      {
        uint64_t v148 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v144, v145, v146);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
      }
      uint64_t v193 = *(int *)(v142 + 44);
      uint64_t v179 = &v9[v193];
      unint64_t v180 = &v10[v193];
      uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_91;
        case 1u:
          goto LABEL_92;
        case 2u:
          goto LABEL_93;
        case 3u:
          goto LABEL_135;
        default:
          goto LABEL_133;
      }
    case 5u:
      uint64_t v21 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v21;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      unint64_t v22 = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      }
      else
      {
        uint64_t v35 = *((void *)v10 + 3);
        outlined copy of Data._Representation(v35, v22);
        *((void *)v9 + 3) = v35;
        *((void *)v9 + 4) = v22;
      }
      *((void *)v9 + 5) = *((void *)v10 + 5);
      unint64_t v36 = *((void *)v10 + 7);
      if (v36 >> 60 == 15)
      {
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
      }
      else
      {
        uint64_t v120 = *((void *)v10 + 6);
        outlined copy of Data._Representation(v120, *((void *)v10 + 7));
        *((void *)v9 + 6) = v120;
        *((void *)v9 + 7) = v36;
      }
      *((void *)v9 + 8) = *((void *)v10 + 8);
      int v121 = *((_DWORD *)v10 + 19);
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      *((_DWORD *)v9 + 19) = v121;
      uint64_t v122 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v123 = v122[7];
      unint64_t v124 = &v9[v123];
      unint64_t v125 = &v10[v123];
      uint64_t v126 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v127 = *(void *)(v126 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
      {
        uint64_t v128 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v124, v125, v126);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
      }
      uint64_t v168 = v122[8];
      long long v169 = &v9[v168];
      id v170 = (uint64_t *)&v10[v168];
      unint64_t v171 = *(void *)&v10[v168 + 8];
      if (v171 >> 60 == 15)
      {
        *(_OWORD *)long long v169 = *(_OWORD *)v170;
      }
      else
      {
        uint64_t v172 = *v170;
        outlined copy of Data._Representation(*v170, v171);
        *(void *)long long v169 = v172;
        *((void *)v169 + 1) = v171;
      }
      *((void *)v169 + 2) = v170[2];
      uint64_t v173 = v122[9];
      os_log_type_t v174 = &v9[v173];
      uint64_t v175 = (uint64_t *)&v10[v173];
      unint64_t v176 = *(void *)&v10[v173 + 8];
      if (v176 >> 60 == 15)
      {
        *(_OWORD *)os_log_type_t v174 = *(_OWORD *)v175;
      }
      else
      {
        uint64_t v177 = *v175;
        outlined copy of Data._Representation(*v175, v176);
        *(void *)os_log_type_t v174 = v177;
        *((void *)v174 + 1) = v176;
      }
      *((void *)v174 + 2) = v175[2];
      v9[v122[10]] = v10[v122[10]];
      uint64_t v178 = v122[11];
      uint64_t v179 = &v9[v178];
      unint64_t v180 = &v10[v178];
      uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_91;
        case 1u:
          goto LABEL_92;
        case 2u:
          goto LABEL_93;
        case 3u:
          goto LABEL_135;
        default:
          goto LABEL_133;
      }
    case 6u:
      uint64_t v23 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v23;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      unint64_t v24 = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v24 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      }
      else
      {
        uint64_t v37 = *((void *)v10 + 3);
        outlined copy of Data._Representation(v37, v24);
        *((void *)v9 + 3) = v37;
        *((void *)v9 + 4) = v24;
      }
      *((void *)v9 + 5) = *((void *)v10 + 5);
      unint64_t v38 = *((void *)v10 + 7);
      if (v38 >> 60 == 15)
      {
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
      }
      else
      {
        uint64_t v129 = *((void *)v10 + 6);
        outlined copy of Data._Representation(v129, *((void *)v10 + 7));
        *((void *)v9 + 6) = v129;
        *((void *)v9 + 7) = v38;
      }
      *((void *)v9 + 8) = *((void *)v10 + 8);
      int v130 = *((_DWORD *)v10 + 19);
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      *((_DWORD *)v9 + 19) = v130;
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v132 = ready[7];
      uint64_t v133 = &v9[v132];
      unint64_t v134 = &v10[v132];
      uint64_t v135 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v136 = *(void *)(v135 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
      {
        uint64_t v137 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v133, v134, v135);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
      }
      uint64_t v182 = ready[8];
      uint64_t v183 = &v9[v182];
      uint64_t v184 = (uint64_t *)&v10[v182];
      unint64_t v185 = *(void *)&v10[v182 + 8];
      if (v185 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
      }
      else
      {
        uint64_t v186 = *v184;
        outlined copy of Data._Representation(*v184, v185);
        *(void *)uint64_t v183 = v186;
        *((void *)v183 + 1) = v185;
      }
      *((void *)v183 + 2) = v184[2];
      uint64_t v187 = ready[9];
      uint64_t v188 = &v9[v187];
      uint64_t v189 = (uint64_t *)&v10[v187];
      unint64_t v190 = *(void *)&v10[v187 + 8];
      if (v190 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
      }
      else
      {
        uint64_t v191 = *v189;
        outlined copy of Data._Representation(*v189, v190);
        *(void *)uint64_t v188 = v191;
        *((void *)v188 + 1) = v190;
      }
      *((void *)v188 + 2) = v189[2];
      v9[ready[10]] = v10[ready[10]];
      uint64_t v192 = ready[11];
      uint64_t v179 = &v9[v192];
      unint64_t v180 = &v10[v192];
      uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_91:
          uint64_t v194 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v194 - 8) + 16))(v179, v180, v194);
          uint64_t v195 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v196 = v195[9];
          uint64_t v197 = &v179[v196];
          uint64_t v198 = &v180[v196];
          uint64_t v199 = type metadata accessor for SymmetricKey();
          uint64_t v396 = v5;
LABEL_131:
          uint64_t v327 = v199;
          uint64_t v328 = *(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 16);
          v328(v197, v198, v199);
          v328(&v179[v195[10]], &v180[v195[10]], v327);
          v328(&v179[v195[11]], &v180[v195[11]], v327);
          uint64_t v329 = v195[12];
          uint64_t v330 = &v179[v329];
          uint64_t v331 = &v180[v329];
          goto LABEL_142;
        case 1u:
LABEL_92:
          uint64_t v200 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v200 - 8) + 16))(v179, v180, v200);
          uint64_t v201 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v202 = v201[9];
          uint64_t v203 = &v179[v202];
          uint64_t v204 = &v180[v202];
          uint64_t v205 = type metadata accessor for SymmetricKey();
          uint64_t v396 = v5;
LABEL_138:
          uint64_t v327 = v205;
          uint64_t v328 = *(void (**)(char *, char *, uint64_t))(*(void *)(v205 - 8) + 16);
          v328(v203, v204, v205);
          v328(&v179[v201[10]], &v180[v201[10]], v327);
          uint64_t v340 = v201[11];
          uint64_t v330 = &v179[v340];
          uint64_t v331 = &v180[v340];
          goto LABEL_142;
        case 2u:
LABEL_93:
          uint64_t v206 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 16))(v179, v180, v206);
          uint64_t v207 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v208 = v207[9];
          uint64_t v209 = &v179[v208];
          uint64_t v210 = &v180[v208];
          uint64_t v211 = type metadata accessor for SymmetricKey();
          uint64_t v396 = v5;
LABEL_141:
          uint64_t v327 = v211;
          uint64_t v328 = *(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 16);
          v328(v209, v210, v211);
          v328(&v179[v207[10]], &v180[v207[10]], v327);
          v328(&v179[v207[11]], &v180[v207[11]], v327);
          v328(&v179[v207[12]], &v180[v207[12]], v327);
          v328(&v179[v207[13]], &v180[v207[13]], v327);
          uint64_t v343 = v207[14];
          uint64_t v330 = &v179[v343];
          uint64_t v331 = &v180[v343];
          goto LABEL_142;
        case 3u:
LABEL_135:
          uint64_t v332 = type metadata accessor for SymmetricKey();
          uint64_t v333 = *(void (**)(char *, char *, uint64_t))(*(void *)(v332 - 8) + 16);
          v333(v179, v180, v332);
          uint64_t v334 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v333(&v179[v334[9]], &v180[v334[9]], v332);
          v333(&v179[v334[10]], &v180[v334[10]], v332);
          uint64_t v335 = v334[11];
          uint64_t v336 = &v179[v335];
          uint64_t v337 = &v180[v335];
          goto LABEL_136;
        default:
LABEL_133:
          size_t v252 = *(void *)(*(void *)(v181 - 8) + 64);
          uint64_t v253 = v179;
          unint64_t v254 = v180;
          goto LABEL_134;
      }
    default:
      uint64_t v11 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v11;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      unint64_t v12 = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      }
      else
      {
        uint64_t v25 = *((void *)v10 + 3);
        outlined copy of Data._Representation(v25, v12);
        *((void *)v9 + 3) = v25;
        *((void *)v9 + 4) = v12;
      }
      *((void *)v9 + 5) = *((void *)v10 + 5);
      unint64_t v26 = *((void *)v10 + 7);
      uint64_t v396 = v5;
      if (v26 >> 60 == 15)
      {
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
      }
      else
      {
        uint64_t v39 = *((void *)v10 + 6);
        outlined copy of Data._Representation(v39, v26);
        *((void *)v9 + 6) = v39;
        *((void *)v9 + 7) = v26;
      }
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      uint64_t v40 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v41 = *(int *)(v40 + 20);
      uint64_t v42 = &v9[v41];
      unint64_t v43 = &v10[v41];
      unint64_t v44 = (int *)type metadata accessor for SessionTicket();
      uint64_t v45 = *((void *)v44 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        uint64_t v395 = v40;
        uint64_t v149 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 16))(v42, v43, v149);
        *(_DWORD *)&v42[v44[5]] = *(_DWORD *)&v43[v44[5]];
        *(_DWORD *)&v42[v44[6]] = *(_DWORD *)&v43[v44[6]];
        uint64_t v150 = v44[7];
        id v151 = (uint64_t *)&v42[v150];
        id v152 = &v43[v150];
        uint64_t v153 = *(void *)&v43[v150];
        unint64_t v154 = *(void *)&v43[v150 + 8];
        outlined copy of Data._Representation(v153, v154);
        *id v151 = v153;
        v151[1] = v154;
        v151[2] = *((void *)v152 + 2);
        uint64_t v155 = v44[8];
        uint64_t v156 = (uint64_t *)&v42[v155];
        id v157 = &v43[v155];
        uint64_t v158 = *(void *)&v43[v155];
        unint64_t v159 = *(void *)&v43[v155 + 8];
        outlined copy of Data._Representation(v158, v159);
        *uint64_t v156 = v158;
        v156[1] = v159;
        v156[2] = *((void *)v157 + 2);
        uint64_t v160 = v44[9];
        os_log_type_t v161 = &v42[v160];
        uint64_t v162 = &v43[v160];
        uint64_t v163 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v163 - 8) + 16))(v161, v162, v163);
        *(_DWORD *)&v42[v44[10]] = *(_DWORD *)&v43[v44[10]];
        *(_WORD *)&v42[v44[11]] = *(_WORD *)&v43[v44[11]];
        *(_WORD *)&v42[v44[12]] = *(_WORD *)&v43[v44[12]];
        uint64_t v164 = v44[13];
        uint64_t v165 = &v42[v164];
        uint64_t v166 = (uint64_t *)&v43[v164];
        unint64_t v167 = *(void *)&v43[v164 + 8];
        if (v167 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
        }
        else
        {
          uint64_t v274 = *v166;
          outlined copy of Data._Representation(*v166, v167);
          *(void *)uint64_t v165 = v274;
          *((void *)v165 + 1) = v167;
        }
        *((void *)v165 + 2) = v166[2];
        uint64_t v40 = v395;
        uint64_t v275 = v44[14];
        uint64_t v276 = &v42[v275];
        uint64_t v277 = &v43[v275];
        uint64_t v278 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v279 = *(void *)(v278 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v279 + 48))(v277, 1, v278))
        {
          uint64_t v280 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v276, v277, *(void *)(*(void *)(v280 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v45 + 56))(v42, 0, 1, v44);
      }
      int v5 = v396;
      uint64_t v352 = *(int *)(v40 + 24);
      uint64_t v353 = &v9[v352];
      uint64_t v354 = &v10[v352];
      uint64_t v355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v356 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v356 - 8) + 16))(v353, v354, v356);
          uint64_t v357 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v358 = v357[9];
          v359 = &v353[v358];
          uint64_t v360 = &v354[v358];
          uint64_t v327 = type metadata accessor for SymmetricKey();
          uint64_t v328 = *(void (**)(char *, char *, uint64_t))(*(void *)(v327 - 8) + 16);
          v328(v359, v360, v327);
          v328(&v353[v357[10]], &v354[v357[10]], v327);
          v328(&v353[v357[11]], &v354[v357[11]], v327);
          uint64_t v361 = v357[12];
          uint64_t v330 = &v353[v361];
          uint64_t v331 = &v354[v361];
          goto LABEL_142;
        case 1u:
          uint64_t v362 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v362 - 8) + 16))(v353, v354, v362);
          uint64_t v363 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v364 = v363[9];
          uint64_t v365 = &v353[v364];
          uint64_t v366 = &v354[v364];
          uint64_t v327 = type metadata accessor for SymmetricKey();
          uint64_t v328 = *(void (**)(char *, char *, uint64_t))(*(void *)(v327 - 8) + 16);
          v328(v365, v366, v327);
          v328(&v353[v363[10]], &v354[v363[10]], v327);
          uint64_t v367 = v363[11];
          uint64_t v330 = &v353[v367];
          uint64_t v331 = &v354[v367];
          goto LABEL_142;
        case 2u:
          uint64_t v368 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v368 - 8) + 16))(v353, v354, v368);
          uint64_t v369 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v370 = v369[9];
          uint64_t v371 = &v353[v370];
          uint64_t v372 = &v354[v370];
          uint64_t v327 = type metadata accessor for SymmetricKey();
          uint64_t v328 = *(void (**)(char *, char *, uint64_t))(*(void *)(v327 - 8) + 16);
          v328(v371, v372, v327);
          v328(&v353[v369[10]], &v354[v369[10]], v327);
          v328(&v353[v369[11]], &v354[v369[11]], v327);
          v328(&v353[v369[12]], &v354[v369[12]], v327);
          v328(&v353[v369[13]], &v354[v369[13]], v327);
          uint64_t v373 = v369[14];
          uint64_t v330 = &v353[v373];
          uint64_t v331 = &v354[v373];
LABEL_142:
          uint64_t v344 = v327;
          int v5 = v396;
          v328(v330, v331, v344);
          swift_storeEnumTagMultiPayload();
          break;
        case 3u:
          uint64_t v332 = type metadata accessor for SymmetricKey();
          uint64_t v333 = *(void (**)(char *, char *, uint64_t))(*(void *)(v332 - 8) + 16);
          v333(v353, v354, v332);
          uint64_t v374 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v333(&v353[v374[9]], &v354[v374[9]], v332);
          v333(&v353[v374[10]], &v354[v374[10]], v332);
          uint64_t v375 = v374[11];
          uint64_t v336 = &v353[v375];
          uint64_t v337 = &v354[v375];
LABEL_136:
          v333(v336, v337, v332);
          swift_storeEnumTagMultiPayload();
          break;
        default:
          size_t v252 = *(void *)(*(void *)(v355 - 8) + 64);
          uint64_t v253 = v353;
          unint64_t v254 = v354;
          goto LABEL_134;
      }
LABEL_156:
      uint64_t v312 = v399;
      uint64_t v313 = v400;
LABEL_157:
      swift_storeEnumTagMultiPayload();
      uint64_t v376 = v312[7];
      long long v377 = *(_OWORD *)((char *)v313 + v376 + 24);
      *(_OWORD *)((char *)v5 + v376 + 24) = v377;
      (**(void (***)(void))(v377 - 8))();
      uint64_t v378 = v312[8];
      uint64_t v379 = v312[9];
      uint64_t v380 = (_OWORD *)((char *)v5 + v378);
      unint64_t v381 = (_OWORD *)((char *)v313 + v378);
      long long v382 = v381[1];
      *uint64_t v380 = *v381;
      v380[1] = v382;
      long long v383 = (char *)v5 + v379;
      uint64_t v384 = (uint64_t)v313 + v379;
      uint64_t v385 = *(uint64_t *)((char *)v313 + v379 + 8);
      *(void *)long long v383 = *(uint64_t *)((char *)v313 + v379);
      *((void *)v383 + 1) = v385;
      *((void *)v383 + 2) = *(uint64_t *)((char *)v313 + v379 + 16);
      unint64_t v386 = *(uint64_t *)((char *)v313 + v379 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v386 >> 60 == 15)
      {
        *(_OWORD *)(v383 + 24) = *(_OWORD *)(v384 + 24);
      }
      else
      {
        uint64_t v387 = *(void *)(v384 + 24);
        outlined copy of Data._Representation(v387, v386);
        *((void *)v383 + 3) = v387;
        *((void *)v383 + 4) = v386;
      }
      *((void *)v383 + 5) = *(void *)(v384 + 40);
      unint64_t v388 = *(void *)(v384 + 56);
      if (v388 >> 60 == 15)
      {
        *((_OWORD *)v383 + 3) = *(_OWORD *)(v384 + 48);
      }
      else
      {
        uint64_t v389 = *(void *)(v384 + 48);
        outlined copy of Data._Representation(v389, *(void *)(v384 + 56));
        *((void *)v383 + 6) = v389;
        *((void *)v383 + 7) = v388;
      }
      *((void *)v383 + 8) = *(void *)(v384 + 64);
      *((_DWORD *)v383 + 18) = *(_DWORD *)(v384 + 72);
      return v5;
  }
}

uint64_t assignWithCopy for HandshakeStateMachine(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = a2[1];
  if (*(void *)(a1 + 8) >> 60 == 15)
  {
    if (v6 >> 60 == 15)
    {
      long long v7 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)a1 = v7;
      if ((uint64_t *)a1 == a2) {
        goto LABEL_160;
      }
      goto LABEL_11;
    }
    uint64_t v9 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    if (v6 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1);
      uint64_t v8 = v4[2];
      *(_OWORD *)a1 = *(_OWORD *)v4;
      goto LABEL_10;
    }
    uint64_t v10 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    uint64_t v11 = *(void *)a1;
    unint64_t v12 = *(void *)(a1 + 8);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v6;
    outlined consume of Data._Representation(v11, v12);
  }
  uint64_t v8 = v4[2];
LABEL_10:
  *(void *)(a1 + 16) = v8;
  if ((uint64_t *)a1 == v4) {
    goto LABEL_160;
  }
LABEL_11:
  v418 = a3;
  v419 = v4;
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (char *)v4 + v13;
  _s8SwiftTLS14HandshakeStateOWOhTm_0(a1 + v13, type metadata accessor for HandshakeState);
  type metadata accessor for HandshakeState(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      unint64_t v18 = *((void *)v15 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 >> 60 == 15)
      {
        long long v19 = *(_OWORD *)(v15 + 24);
        *(void *)(v14 + 40) = *((void *)v15 + 5);
        *(_OWORD *)(v14 + 24) = v19;
      }
      else
      {
        uint64_t v33 = *((void *)v15 + 3);
        outlined copy of Data._Representation(v33, v18);
        *(void *)(v14 + 24) = v33;
        *(void *)(v14 + 32) = v18;
        *(void *)(v14 + 40) = *((void *)v15 + 5);
      }
      unint64_t v34 = *((void *)v15 + 7);
      if (v34 >> 60 == 15)
      {
        long long v35 = *((_OWORD *)v15 + 3);
        *(void *)(v14 + 64) = *((void *)v15 + 8);
        *(_OWORD *)(v14 + 48) = v35;
      }
      else
      {
        uint64_t v60 = *((void *)v15 + 6);
        outlined copy of Data._Representation(v60, *((void *)v15 + 7));
        *(void *)(v14 + 48) = v60;
        *(void *)(v14 + 56) = v34;
        *(void *)(v14 + 64) = *((void *)v15 + 8);
      }
      __int16 v61 = *((_WORD *)v15 + 36);
      *(unsigned char *)(v14 + 74) = v15[74];
      *(_WORD *)(v14 + 72) = v61;
      *(unsigned char *)(v14 + 75) = v15[75];
      long long v62 = *((_OWORD *)v15 + 5);
      long long v63 = *((_OWORD *)v15 + 6);
      *(void *)(v14 + 112) = *((void *)v15 + 14);
      *(_OWORD *)(v14 + 80) = v62;
      *(_OWORD *)(v14 + 96) = v63;
      *(void *)(v14 + 120) = *((void *)v15 + 15);
      *(void *)(v14 + 128) = *((void *)v15 + 16);
      uint64_t v64 = *((void *)v15 + 20);
      *(void *)(v14 + 160) = v64;
      *(void *)(v14 + 168) = *((void *)v15 + 21);
      unint64_t v65 = **(void (***)(uint64_t, char *, uint64_t))(v64 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65(v14 + 136, v15 + 136, v64);
      uint64_t v66 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v67 = *(int *)(v66 + 36);
      uint64_t v68 = (char *)(v14 + v67);
      uint64_t v69 = &v15[v67];
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v71 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v68, v69, v71);
          uint64_t v72 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v73 = v72[9];
          unint64_t v403 = &v68[v73];
          uint64_t v74 = &v69[v73];
          uint64_t v409 = v66;
          uint64_t v75 = type metadata accessor for SymmetricKey();
          uint64_t v76 = *(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 16);
          v76(v403, v74, v75);
          v76(&v68[v72[10]], &v69[v72[10]], v75);
          v76(&v68[v72[11]], &v69[v72[11]], v75);
          uint64_t v77 = v75;
          uint64_t v66 = v409;
          v76(&v68[v72[12]], &v69[v72[12]], v77);
          goto LABEL_108;
        case 1u:
          uint64_t v229 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v229 - 8) + 16))(v68, v69, v229);
          uint64_t v230 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v231 = v230[9];
          v404 = &v68[v231];
          uint64_t v232 = &v69[v231];
          uint64_t v411 = v66;
          uint64_t v233 = type metadata accessor for SymmetricKey();
          uint64_t v234 = *(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 16);
          v234(v404, v232, v233);
          v234(&v68[v230[10]], &v69[v230[10]], v233);
          uint64_t v235 = v233;
          uint64_t v66 = v411;
          v234(&v68[v230[11]], &v69[v230[11]], v235);
          goto LABEL_108;
        case 2u:
          uint64_t v236 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v236 - 8) + 16))(v68, v69, v236);
          uint64_t v237 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v238 = v237[9];
          v405 = &v68[v238];
          uint64_t v239 = &v69[v238];
          uint64_t v412 = v66;
          uint64_t v240 = type metadata accessor for SymmetricKey();
          uint64_t v241 = *(void (**)(char *, char *, uint64_t))(*(void *)(v240 - 8) + 16);
          v241(v405, v239, v240);
          v241(&v68[v237[10]], &v69[v237[10]], v240);
          v241(&v68[v237[11]], &v69[v237[11]], v240);
          v241(&v68[v237[12]], &v69[v237[12]], v240);
          v241(&v68[v237[13]], &v69[v237[13]], v240);
          uint64_t v242 = v240;
          uint64_t v66 = v412;
          v241(&v68[v237[14]], &v69[v237[14]], v242);
          goto LABEL_108;
        case 3u:
          uint64_t v243 = type metadata accessor for SymmetricKey();
          uint64_t v244 = *(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 16);
          v244(v68, v69, v243);
          unint64_t v245 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v244(&v68[v245[9]], &v69[v245[9]], v243);
          v244(&v68[v245[10]], &v69[v245[10]], v243);
          v244(&v68[v245[11]], &v69[v245[11]], v243);
LABEL_108:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
          break;
      }
      uint64_t v246 = *(int *)(v66 + 40);
      uint64_t v247 = (char *)(v14 + v246);
      size_t v248 = &v15[v246];
      unint64_t v249 = (int *)type metadata accessor for SessionTicket();
      uint64_t v250 = (unsigned int (**)(void, uint64_t, int *))*((void *)v249 - 1);
      if (((unsigned int (**)(char *, uint64_t, int *))v250)[6](v248, 1, v249))
      {
        size_t v251 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                     - 8)
                         + 64);
        size_t v252 = v247;
        uint64_t v253 = v248;
LABEL_138:
        memcpy(v252, v253, v251);
      }
      else
      {
        __dstc = (void (**)(void *, void, uint64_t, int *))v250;
        uint64_t v254 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v254 - 8) + 16))(v247, v248, v254);
        *(_DWORD *)&v247[v249[5]] = *(_DWORD *)&v248[v249[5]];
        *(_DWORD *)&v247[v249[6]] = *(_DWORD *)&v248[v249[6]];
        uint64_t v255 = v249[7];
        uint64_t v256 = (uint64_t *)&v247[v255];
        uint64_t v257 = &v248[v255];
        uint64_t v258 = *(void *)&v248[v255];
        unint64_t v259 = *(void *)&v248[v255 + 8];
        outlined copy of Data._Representation(v258, v259);
        *uint64_t v256 = v258;
        v256[1] = v259;
        v256[2] = *((void *)v257 + 2);
        uint64_t v260 = v249[8];
        uint64_t v261 = (uint64_t *)&v247[v260];
        uint64_t v262 = &v248[v260];
        uint64_t v263 = *(void *)&v248[v260];
        unint64_t v264 = *(void *)&v248[v260 + 8];
        outlined copy of Data._Representation(v263, v264);
        *uint64_t v261 = v263;
        v261[1] = v264;
        v261[2] = *((void *)v262 + 2);
        uint64_t v265 = v249[9];
        uint64_t v266 = &v247[v265];
        id v267 = &v248[v265];
        uint64_t v268 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v268 - 8) + 16))(v266, v267, v268);
        *(_DWORD *)&v247[v249[10]] = *(_DWORD *)&v248[v249[10]];
        *(_WORD *)&v247[v249[11]] = *(_WORD *)&v248[v249[11]];
        *(_WORD *)&v247[v249[12]] = *(_WORD *)&v248[v249[12]];
        uint64_t v269 = v249[13];
        uint64_t v270 = &v247[v269];
        uint64_t v271 = (uint64_t *)&v248[v269];
        unint64_t v272 = *(void *)&v248[v269 + 8];
        if (v272 >> 60 == 15)
        {
          long long v273 = *(_OWORD *)v271;
          *((void *)v270 + 2) = v271[2];
          *(_OWORD *)uint64_t v270 = v273;
        }
        else
        {
          uint64_t v345 = *v271;
          outlined copy of Data._Representation(*v271, v272);
          *(void *)uint64_t v270 = v345;
          *((void *)v270 + 1) = v272;
          *((void *)v270 + 2) = v271[2];
        }
        uint64_t v346 = v249[14];
        uint64_t v347 = &v247[v346];
        uint64_t v348 = &v248[v346];
        uint64_t v349 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v350 = *(void *)(v349 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v350 + 48))(v348, 1, v349))
        {
          uint64_t v351 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v347, v348, *(void *)(*(void *)(v351 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v350 + 16))(v347, v348, v349);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v350 + 56))(v347, 0, 1, v349);
        }
        __dstc[7](v247, 0, 1, v249);
      }
      goto LABEL_158;
    case 2u:
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      unint64_t v20 = *((void *)v15 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v20 >> 60 == 15)
      {
        long long v21 = *(_OWORD *)(v15 + 24);
        *(void *)(v14 + 40) = *((void *)v15 + 5);
        *(_OWORD *)(v14 + 24) = v21;
      }
      else
      {
        uint64_t v36 = *((void *)v15 + 3);
        outlined copy of Data._Representation(v36, v20);
        *(void *)(v14 + 24) = v36;
        *(void *)(v14 + 32) = v20;
        *(void *)(v14 + 40) = *((void *)v15 + 5);
      }
      unint64_t v37 = *((void *)v15 + 7);
      if (v37 >> 60 == 15)
      {
        long long v38 = *((_OWORD *)v15 + 3);
        *(void *)(v14 + 64) = *((void *)v15 + 8);
        *(_OWORD *)(v14 + 48) = v38;
      }
      else
      {
        uint64_t v78 = *((void *)v15 + 6);
        outlined copy of Data._Representation(v78, *((void *)v15 + 7));
        *(void *)(v14 + 48) = v78;
        *(void *)(v14 + 56) = v37;
        *(void *)(v14 + 64) = *((void *)v15 + 8);
      }
      __int16 v79 = *((_WORD *)v15 + 36);
      *(unsigned char *)(v14 + 74) = v15[74];
      *(_WORD *)(v14 + 72) = v79;
      *(unsigned char *)(v14 + 75) = v15[75];
      uint64_t v80 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v81 = v80[5];
      uint64_t v82 = v14 + v81;
      unint64_t v83 = &v15[v81];
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      __dst = v80;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v84 = type metadata accessor for Date();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v84 - 8) + 16))(v82, v83, v84);
        unint64_t v85 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)(v82 + v85[5]) = *(_DWORD *)&v83[v85[5]];
        *(_DWORD *)(v82 + v85[6]) = *(_DWORD *)&v83[v85[6]];
        uint64_t v86 = v85[7];
        uint64_t v87 = (uint64_t *)(v82 + v86);
        uint64_t v88 = &v83[v86];
        uint64_t v89 = *(void *)&v83[v86];
        unint64_t v90 = *(void *)&v83[v86 + 8];
        outlined copy of Data._Representation(v89, v90);
        *uint64_t v87 = v89;
        v87[1] = v90;
        v87[2] = *((void *)v88 + 2);
        uint64_t v91 = v85[8];
        uint64_t v92 = (uint64_t *)(v82 + v91);
        uint64_t v93 = &v83[v91];
        uint64_t v94 = *(void *)&v83[v91];
        unint64_t v95 = *(void *)&v83[v91 + 8];
        outlined copy of Data._Representation(v94, v95);
        uint64_t *v92 = v94;
        v92[1] = v95;
        v92[2] = *((void *)v93 + 2);
        uint64_t v96 = v85[9];
        uint64_t v97 = v82 + v96;
        unint64_t v98 = &v83[v96];
        uint64_t v99 = type metadata accessor for SymmetricKey();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v99 - 8) + 16))(v97, v98, v99);
        *(_DWORD *)(v82 + v85[10]) = *(_DWORD *)&v83[v85[10]];
        *(_WORD *)(v82 + v85[11]) = *(_WORD *)&v83[v85[11]];
        *(_WORD *)(v82 + v85[12]) = *(_WORD *)&v83[v85[12]];
        uint64_t v100 = v85[13];
        uint64_t v101 = v82 + v100;
        uint64_t v102 = (uint64_t *)&v83[v100];
        unint64_t v103 = *(void *)&v83[v100 + 8];
        if (v103 >> 60 == 15)
        {
          long long v104 = *(_OWORD *)v102;
          *(void *)(v101 + 16) = v102[2];
          *(_OWORD *)uint64_t v101 = v104;
        }
        else
        {
          uint64_t v215 = *v102;
          outlined copy of Data._Representation(*v102, v103);
          *(void *)uint64_t v101 = v215;
          *(void *)(v101 + 8) = v103;
          *(void *)(v101 + 16) = v102[2];
        }
        uint64_t v216 = v85[14];
        uint64_t v217 = (void *)(v82 + v216);
        uint64_t v218 = &v83[v216];
        uint64_t v219 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v220 = *(void *)(v219 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48))(v218, 1, v219))
        {
          uint64_t v221 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v217, v218, *(void *)(*(void *)(v221 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v220 + 16))(v217, v218, v219);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v220 + 56))(v217, 0, 1, v219);
        }
        uint64_t v80 = __dst;
      }
      else
      {
        *(_WORD *)uint64_t v82 = *(_WORD *)v83;
        *(_WORD *)(v82 + 2) = *((_WORD *)v83 + 1);
        *(void *)(v82 + 8) = *((void *)v83 + 1);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v280 = v80[6];
      uint64_t v281 = (char *)(v14 + v280);
      uint64_t v282 = &v15[v280];
      uint64_t v283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v284 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v284 - 8) + 16))(v281, v282, v284);
          uint64_t v285 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v286 = v285[9];
          unint64_t v406 = &v281[v286];
          uint64_t v287 = &v282[v286];
          uint64_t v288 = type metadata accessor for SymmetricKey();
          uint64_t v289 = *(void (**)(char *, char *, uint64_t))(*(void *)(v288 - 8) + 16);
          v289(v406, v287, v288);
          v289(&v281[v285[10]], &v282[v285[10]], v288);
          v289(&v281[v285[11]], &v282[v285[11]], v288);
          v289(&v281[v285[12]], &v282[v285[12]], v288);
          uint64_t v80 = __dst;
          goto LABEL_124;
        case 1u:
          uint64_t v290 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v290 - 8) + 16))(v281, v282, v290);
          uint64_t v291 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v292 = v291[9];
          long long v407 = &v281[v292];
          uint64_t v293 = &v282[v292];
          uint64_t v294 = type metadata accessor for SymmetricKey();
          uint64_t v295 = *(void (**)(char *, char *, uint64_t))(*(void *)(v294 - 8) + 16);
          v295(v407, v293, v294);
          v295(&v281[v291[10]], &v282[v291[10]], v294);
          v295(&v281[v291[11]], &v282[v291[11]], v294);
          uint64_t v80 = __dst;
          goto LABEL_124;
        case 2u:
          uint64_t v296 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v296 - 8) + 16))(v281, v282, v296);
          uint64_t v297 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v298 = v297[9];
          uint64_t v408 = &v281[v298];
          unint64_t v299 = &v282[v298];
          uint64_t v300 = type metadata accessor for SymmetricKey();
          uint64_t v301 = *(void (**)(char *, char *, uint64_t))(*(void *)(v300 - 8) + 16);
          v301(v408, v299, v300);
          v301(&v281[v297[10]], &v282[v297[10]], v300);
          v301(&v281[v297[11]], &v282[v297[11]], v300);
          v301(&v281[v297[12]], &v282[v297[12]], v300);
          v301(&v281[v297[13]], &v282[v297[13]], v300);
          v301(&v281[v297[14]], &v282[v297[14]], v300);
          uint64_t v80 = __dst;
          goto LABEL_124;
        case 3u:
          uint64_t v302 = type metadata accessor for SymmetricKey();
          uint64_t v303 = *(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16);
          v303(v281, v282, v302);
          uint64_t v304 = v80;
          unint64_t v305 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v303(&v281[v305[9]], &v282[v305[9]], v302);
          v303(&v281[v305[10]], &v282[v305[10]], v302);
          uint64_t v306 = v305[11];
          uint64_t v80 = v304;
          v303(&v281[v306], &v282[v306], v302);
LABEL_124:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v281, v282, *(void *)(*(void *)(v283 - 8) + 64));
          break;
      }
      a3 = v418;
      *(_WORD *)(v14 + v80[7]) = *(_WORD *)&v15[v80[7]];
      *(_WORD *)(v14 + v80[8]) = *(_WORD *)&v15[v80[8]];
      unint64_t v4 = v419;
      goto LABEL_159;
    case 3u:
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      unint64_t v22 = *((void *)v15 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22 >> 60 == 15)
      {
        long long v23 = *(_OWORD *)(v15 + 24);
        *(void *)(v14 + 40) = *((void *)v15 + 5);
        *(_OWORD *)(v14 + 24) = v23;
      }
      else
      {
        uint64_t v39 = *((void *)v15 + 3);
        outlined copy of Data._Representation(v39, v22);
        *(void *)(v14 + 24) = v39;
        *(void *)(v14 + 32) = v22;
        *(void *)(v14 + 40) = *((void *)v15 + 5);
      }
      unint64_t v40 = *((void *)v15 + 7);
      if (v40 >> 60 == 15)
      {
        long long v41 = *((_OWORD *)v15 + 3);
        *(void *)(v14 + 64) = *((void *)v15 + 8);
        *(_OWORD *)(v14 + 48) = v41;
      }
      else
      {
        uint64_t v105 = *((void *)v15 + 6);
        outlined copy of Data._Representation(v105, *((void *)v15 + 7));
        *(void *)(v14 + 48) = v105;
        *(void *)(v14 + 56) = v40;
        *(void *)(v14 + 64) = *((void *)v15 + 8);
      }
      __int16 v106 = *((_WORD *)v15 + 36);
      *(unsigned char *)(v14 + 74) = v15[74];
      *(_WORD *)(v14 + 72) = v106;
      *(unsigned char *)(v14 + 75) = v15[75];
      uint64_t v107 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v108 = v107[5];
      uint64_t v109 = v14 + v108;
      unint64_t v110 = &v15[v108];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        __dsta = v107;
        uint64_t v111 = type metadata accessor for Date();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v111 - 8) + 16))(v109, v110, v111);
        uint64_t v112 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)(v109 + v112[5]) = *(_DWORD *)&v110[v112[5]];
        *(_DWORD *)(v109 + v112[6]) = *(_DWORD *)&v110[v112[6]];
        uint64_t v113 = v112[7];
        uint64_t v114 = (uint64_t *)(v109 + v113);
        uint64_t v115 = &v110[v113];
        uint64_t v116 = *(void *)&v110[v113];
        unint64_t v117 = *(void *)&v110[v113 + 8];
        outlined copy of Data._Representation(v116, v117);
        *uint64_t v114 = v116;
        v114[1] = v117;
        v114[2] = *((void *)v115 + 2);
        uint64_t v118 = v112[8];
        unint64_t v119 = (uint64_t *)(v109 + v118);
        uint64_t v120 = &v110[v118];
        uint64_t v121 = *(void *)&v110[v118];
        unint64_t v122 = *(void *)&v110[v118 + 8];
        outlined copy of Data._Representation(v121, v122);
        *unint64_t v119 = v121;
        v119[1] = v122;
        v119[2] = *((void *)v120 + 2);
        uint64_t v123 = v112[9];
        uint64_t v124 = v109 + v123;
        unint64_t v125 = &v110[v123];
        uint64_t v126 = type metadata accessor for SymmetricKey();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v126 - 8) + 16))(v124, v125, v126);
        *(_DWORD *)(v109 + v112[10]) = *(_DWORD *)&v110[v112[10]];
        *(_WORD *)(v109 + v112[11]) = *(_WORD *)&v110[v112[11]];
        *(_WORD *)(v109 + v112[12]) = *(_WORD *)&v110[v112[12]];
        uint64_t v127 = v112[13];
        uint64_t v128 = v109 + v127;
        uint64_t v129 = (uint64_t *)&v110[v127];
        unint64_t v130 = *(void *)&v110[v127 + 8];
        if (v130 >> 60 == 15)
        {
          long long v131 = *(_OWORD *)v129;
          *(void *)(v128 + 16) = v129[2];
          *(_OWORD *)uint64_t v128 = v131;
        }
        else
        {
          uint64_t v222 = *v129;
          outlined copy of Data._Representation(*v129, v130);
          *(void *)uint64_t v128 = v222;
          *(void *)(v128 + 8) = v130;
          *(void *)(v128 + 16) = v129[2];
        }
        uint64_t v223 = v112[14];
        uint64_t v224 = (void *)(v109 + v223);
        uint64_t v225 = &v110[v223];
        uint64_t v226 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v227 = *(void *)(v226 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v227 + 48))(v225, 1, v226))
        {
          uint64_t v228 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v224, v225, *(void *)(*(void *)(v228 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v227 + 16))(v224, v225, v226);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v227 + 56))(v224, 0, 1, v226);
        }
        uint64_t v107 = __dsta;
      }
      else
      {
        *(_WORD *)uint64_t v109 = *(_WORD *)v110;
        *(_WORD *)(v109 + 2) = *((_WORD *)v110 + 1);
        *(unsigned char *)(v109 + 4) = v110[4];
        *(void *)(v109 + 8) = *((void *)v110 + 1);
        *(void *)(v109 + 16) = *((void *)v110 + 2);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v307 = v107[6];
      uint64_t v308 = v14 + v307;
      uint64_t v309 = (uint64_t *)&v15[v307];
      unint64_t v310 = *(void *)&v15[v307 + 8];
      if (v310 >> 60 == 15)
      {
        long long v311 = *(_OWORD *)v309;
        *(void *)(v308 + 16) = v309[2];
        *(_OWORD *)uint64_t v308 = v311;
      }
      else
      {
        uint64_t v312 = *v309;
        outlined copy of Data._Representation(*v309, v310);
        *(void *)uint64_t v308 = v312;
        *(void *)(v308 + 8) = v310;
        *(void *)(v308 + 16) = v309[2];
      }
      uint64_t v313 = v107[7];
      uint64_t v314 = v14 + v313;
      uint64_t v315 = (uint64_t *)&v15[v313];
      unint64_t v316 = *(void *)&v15[v313 + 8];
      if (v316 >> 60 == 15)
      {
        long long v317 = *(_OWORD *)v315;
        *(void *)(v314 + 16) = v315[2];
        *(_OWORD *)uint64_t v314 = v317;
      }
      else
      {
        uint64_t v318 = *v315;
        outlined copy of Data._Representation(*v315, v316);
        *(void *)uint64_t v314 = v318;
        *(void *)(v314 + 8) = v316;
        *(void *)(v314 + 16) = v315[2];
      }
      *(unsigned char *)(v14 + v107[8]) = v15[v107[8]];
      uint64_t v319 = v107[9];
      uint64_t v198 = (char *)(v14 + v319);
      uint64_t v199 = &v15[v319];
      uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_135;
        case 1u:
          goto LABEL_139;
        case 2u:
          goto LABEL_141;
        case 3u:
          goto LABEL_143;
        default:
          goto LABEL_137;
      }
    case 4u:
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      unint64_t v24 = *((void *)v15 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v24 >> 60 == 15)
      {
        long long v25 = *(_OWORD *)(v15 + 24);
        *(void *)(v14 + 40) = *((void *)v15 + 5);
        *(_OWORD *)(v14 + 24) = v25;
      }
      else
      {
        uint64_t v42 = *((void *)v15 + 3);
        outlined copy of Data._Representation(v42, v24);
        *(void *)(v14 + 24) = v42;
        *(void *)(v14 + 32) = v24;
        *(void *)(v14 + 40) = *((void *)v15 + 5);
      }
      unint64_t v43 = *((void *)v15 + 7);
      if (v43 >> 60 == 15)
      {
        long long v44 = *((_OWORD *)v15 + 3);
        *(void *)(v14 + 64) = *((void *)v15 + 8);
        *(_OWORD *)(v14 + 48) = v44;
      }
      else
      {
        uint64_t v132 = *((void *)v15 + 6);
        outlined copy of Data._Representation(v132, *((void *)v15 + 7));
        *(void *)(v14 + 48) = v132;
        *(void *)(v14 + 56) = v43;
        *(void *)(v14 + 64) = *((void *)v15 + 8);
      }
      __int16 v133 = *((_WORD *)v15 + 36);
      *(unsigned char *)(v14 + 74) = v15[74];
      *(_WORD *)(v14 + 72) = v133;
      *(unsigned char *)(v14 + 75) = v15[75];
      *(_WORD *)(v14 + 76) = *((_WORD *)v15 + 38);
      *(_WORD *)(v14 + 78) = *((_WORD *)v15 + 39);
      unint64_t v134 = *((void *)v15 + 11);
      if (v134 >> 60 == 15)
      {
        long long v135 = *((_OWORD *)v15 + 5);
        *(void *)(v14 + 96) = *((void *)v15 + 12);
        *(_OWORD *)(v14 + 80) = v135;
      }
      else
      {
        uint64_t v154 = *((void *)v15 + 10);
        outlined copy of Data._Representation(v154, *((void *)v15 + 11));
        *(void *)(v14 + 80) = v154;
        *(void *)(v14 + 88) = v134;
        *(void *)(v14 + 96) = *((void *)v15 + 12);
      }
      unint64_t v155 = *((void *)v15 + 14);
      if (v155 >> 60 == 15)
      {
        long long v156 = *(_OWORD *)(v15 + 104);
        *(void *)(v14 + 120) = *((void *)v15 + 15);
        *(_OWORD *)(v14 + 104) = v156;
      }
      else
      {
        uint64_t v157 = *((void *)v15 + 13);
        outlined copy of Data._Representation(v157, *((void *)v15 + 14));
        *(void *)(v14 + 104) = v157;
        *(void *)(v14 + 112) = v155;
        *(void *)(v14 + 120) = *((void *)v15 + 15);
      }
      *(unsigned char *)(v14 + 128) = v15[128];
      uint64_t v158 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v159 = *(int *)(v158 + 40);
      uint64_t v160 = (void *)(v14 + v159);
      os_log_type_t v161 = &v15[v159];
      uint64_t v162 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v163 = *(void *)(v162 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
      {
        uint64_t v164 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v163 + 16))(v160, v161, v162);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
      }
      uint64_t v214 = *(int *)(v158 + 44);
      uint64_t v198 = (char *)(v14 + v214);
      uint64_t v199 = &v15[v214];
      uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_135;
        case 1u:
          goto LABEL_139;
        case 2u:
          goto LABEL_141;
        case 3u:
          goto LABEL_143;
        default:
          goto LABEL_137;
      }
    case 5u:
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      unint64_t v26 = *((void *)v15 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v26 >> 60 == 15)
      {
        long long v27 = *(_OWORD *)(v15 + 24);
        *(void *)(v14 + 40) = *((void *)v15 + 5);
        *(_OWORD *)(v14 + 24) = v27;
      }
      else
      {
        uint64_t v45 = *((void *)v15 + 3);
        outlined copy of Data._Representation(v45, v26);
        *(void *)(v14 + 24) = v45;
        *(void *)(v14 + 32) = v26;
        *(void *)(v14 + 40) = *((void *)v15 + 5);
      }
      unint64_t v46 = *((void *)v15 + 7);
      if (v46 >> 60 == 15)
      {
        long long v47 = *((_OWORD *)v15 + 3);
        *(void *)(v14 + 64) = *((void *)v15 + 8);
        *(_OWORD *)(v14 + 48) = v47;
      }
      else
      {
        uint64_t v136 = *((void *)v15 + 6);
        outlined copy of Data._Representation(v136, *((void *)v15 + 7));
        *(void *)(v14 + 48) = v136;
        *(void *)(v14 + 56) = v46;
        *(void *)(v14 + 64) = *((void *)v15 + 8);
      }
      __int16 v137 = *((_WORD *)v15 + 36);
      *(unsigned char *)(v14 + 74) = v15[74];
      *(_WORD *)(v14 + 72) = v137;
      *(unsigned char *)(v14 + 75) = v15[75];
      *(_WORD *)(v14 + 76) = *((_WORD *)v15 + 38);
      *(_WORD *)(v14 + 78) = *((_WORD *)v15 + 39);
      uint64_t v138 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v139 = v138[7];
      unint64_t v140 = (void *)(v14 + v139);
      uint64_t v141 = &v15[v139];
      uint64_t v142 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v143 = *(void *)(v142 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
      {
        uint64_t v144 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v143 + 16))(v140, v141, v142);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v143 + 56))(v140, 0, 1, v142);
      }
      uint64_t v185 = v138[8];
      uint64_t v186 = v14 + v185;
      uint64_t v187 = (uint64_t *)&v15[v185];
      unint64_t v188 = *(void *)&v15[v185 + 8];
      if (v188 >> 60 == 15)
      {
        long long v189 = *(_OWORD *)v187;
        *(void *)(v186 + 16) = v187[2];
        *(_OWORD *)uint64_t v186 = v189;
      }
      else
      {
        uint64_t v190 = *v187;
        outlined copy of Data._Representation(*v187, v188);
        *(void *)uint64_t v186 = v190;
        *(void *)(v186 + 8) = v188;
        *(void *)(v186 + 16) = v187[2];
      }
      uint64_t v191 = v138[9];
      uint64_t v192 = v14 + v191;
      uint64_t v193 = (uint64_t *)&v15[v191];
      unint64_t v194 = *(void *)&v15[v191 + 8];
      if (v194 >> 60 == 15)
      {
        long long v195 = *(_OWORD *)v193;
        *(void *)(v192 + 16) = v193[2];
        *(_OWORD *)uint64_t v192 = v195;
      }
      else
      {
        uint64_t v196 = *v193;
        outlined copy of Data._Representation(*v193, v194);
        *(void *)uint64_t v192 = v196;
        *(void *)(v192 + 8) = v194;
        *(void *)(v192 + 16) = v193[2];
      }
      *(unsigned char *)(v14 + v138[10]) = v15[v138[10]];
      uint64_t v197 = v138[11];
      uint64_t v198 = (char *)(v14 + v197);
      uint64_t v199 = &v15[v197];
      uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_135;
        case 1u:
          goto LABEL_139;
        case 2u:
          goto LABEL_141;
        case 3u:
          goto LABEL_143;
        default:
          goto LABEL_137;
      }
    case 6u:
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      unint64_t v28 = *((void *)v15 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28 >> 60 == 15)
      {
        long long v29 = *(_OWORD *)(v15 + 24);
        *(void *)(v14 + 40) = *((void *)v15 + 5);
        *(_OWORD *)(v14 + 24) = v29;
      }
      else
      {
        uint64_t v48 = *((void *)v15 + 3);
        outlined copy of Data._Representation(v48, v28);
        *(void *)(v14 + 24) = v48;
        *(void *)(v14 + 32) = v28;
        *(void *)(v14 + 40) = *((void *)v15 + 5);
      }
      unint64_t v49 = *((void *)v15 + 7);
      if (v49 >> 60 == 15)
      {
        long long v50 = *((_OWORD *)v15 + 3);
        *(void *)(v14 + 64) = *((void *)v15 + 8);
        *(_OWORD *)(v14 + 48) = v50;
      }
      else
      {
        uint64_t v145 = *((void *)v15 + 6);
        outlined copy of Data._Representation(v145, *((void *)v15 + 7));
        *(void *)(v14 + 48) = v145;
        *(void *)(v14 + 56) = v49;
        *(void *)(v14 + 64) = *((void *)v15 + 8);
      }
      __int16 v146 = *((_WORD *)v15 + 36);
      *(unsigned char *)(v14 + 74) = v15[74];
      *(_WORD *)(v14 + 72) = v146;
      *(unsigned char *)(v14 + 75) = v15[75];
      *(_WORD *)(v14 + 76) = *((_WORD *)v15 + 38);
      *(_WORD *)(v14 + 78) = *((_WORD *)v15 + 39);
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v148 = ready[7];
      uint64_t v149 = (void *)(v14 + v148);
      uint64_t v150 = &v15[v148];
      uint64_t v151 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v152 = *(void *)(v151 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
      {
        uint64_t v153 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v152 + 16))(v149, v150, v151);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v152 + 56))(v149, 0, 1, v151);
      }
      uint64_t v201 = ready[8];
      uint64_t v202 = v14 + v201;
      uint64_t v203 = (uint64_t *)&v15[v201];
      unint64_t v204 = *(void *)&v15[v201 + 8];
      if (v204 >> 60 == 15)
      {
        long long v205 = *(_OWORD *)v203;
        *(void *)(v202 + 16) = v203[2];
        *(_OWORD *)uint64_t v202 = v205;
      }
      else
      {
        uint64_t v206 = *v203;
        outlined copy of Data._Representation(*v203, v204);
        *(void *)uint64_t v202 = v206;
        *(void *)(v202 + 8) = v204;
        *(void *)(v202 + 16) = v203[2];
      }
      uint64_t v207 = ready[9];
      uint64_t v208 = v14 + v207;
      uint64_t v209 = (uint64_t *)&v15[v207];
      unint64_t v210 = *(void *)&v15[v207 + 8];
      if (v210 >> 60 == 15)
      {
        long long v211 = *(_OWORD *)v209;
        *(void *)(v208 + 16) = v209[2];
        *(_OWORD *)uint64_t v208 = v211;
      }
      else
      {
        uint64_t v212 = *v209;
        outlined copy of Data._Representation(*v209, v210);
        *(void *)uint64_t v208 = v212;
        *(void *)(v208 + 8) = v210;
        *(void *)(v208 + 16) = v209[2];
      }
      *(unsigned char *)(v14 + ready[10]) = v15[ready[10]];
      uint64_t v213 = ready[11];
      uint64_t v198 = (char *)(v14 + v213);
      uint64_t v199 = &v15[v213];
      uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_135:
          uint64_t v320 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v320 - 8) + 16))(v198, v199, v320);
          uint64_t v321 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v322 = v321[9];
          uint64_t v323 = &v198[v322];
          uint64_t v324 = &v199[v322];
          uint64_t v325 = type metadata accessor for SymmetricKey();
          uint64_t v326 = *(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16);
          v326(v323, v324, v325);
          v326(&v198[v321[10]], &v199[v321[10]], v325);
          v326(&v198[v321[11]], &v199[v321[11]], v325);
          uint64_t v327 = v321[12];
          uint64_t v328 = &v198[v327];
          uint64_t v329 = &v199[v327];
          goto LABEL_142;
        case 1u:
LABEL_139:
          uint64_t v330 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v330 - 8) + 16))(v198, v199, v330);
          uint64_t v331 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v332 = v331[9];
          uint64_t v333 = &v198[v332];
          uint64_t v334 = &v199[v332];
          uint64_t v325 = type metadata accessor for SymmetricKey();
          uint64_t v326 = *(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16);
          v326(v333, v334, v325);
          v326(&v198[v331[10]], &v199[v331[10]], v325);
          uint64_t v335 = v331[11];
          uint64_t v328 = &v198[v335];
          uint64_t v329 = &v199[v335];
          goto LABEL_142;
        case 2u:
LABEL_141:
          uint64_t v336 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v336 - 8) + 16))(v198, v199, v336);
          uint64_t v337 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v338 = v337[9];
          uint64_t v339 = &v198[v338];
          uint64_t v340 = &v199[v338];
          uint64_t v325 = type metadata accessor for SymmetricKey();
          uint64_t v326 = *(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16);
          v326(v339, v340, v325);
          v326(&v198[v337[10]], &v199[v337[10]], v325);
          v326(&v198[v337[11]], &v199[v337[11]], v325);
          v326(&v198[v337[12]], &v199[v337[12]], v325);
          v326(&v198[v337[13]], &v199[v337[13]], v325);
          uint64_t v341 = v337[14];
          uint64_t v328 = &v198[v341];
          uint64_t v329 = &v199[v341];
          goto LABEL_142;
        case 3u:
LABEL_143:
          uint64_t v342 = type metadata accessor for SymmetricKey();
          uint64_t v343 = *(void (**)(char *, char *, uint64_t))(*(void *)(v342 - 8) + 16);
          v343(v198, v199, v342);
          uint64_t v344 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v343(&v198[v344[9]], &v199[v344[9]], v342);
          v343(&v198[v344[10]], &v199[v344[10]], v342);
          v343(&v198[v344[11]], &v199[v344[11]], v342);
          goto LABEL_144;
        default:
LABEL_137:
          size_t v251 = *(void *)(*(void *)(v200 - 8) + 64);
          size_t v252 = v198;
          uint64_t v253 = v199;
          goto LABEL_138;
      }
    default:
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      unint64_t v16 = *((void *)v15 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v16 >> 60 == 15)
      {
        long long v17 = *(_OWORD *)(v15 + 24);
        *(void *)(v14 + 40) = *((void *)v15 + 5);
        *(_OWORD *)(v14 + 24) = v17;
      }
      else
      {
        uint64_t v30 = *((void *)v15 + 3);
        outlined copy of Data._Representation(v30, v16);
        *(void *)(v14 + 24) = v30;
        *(void *)(v14 + 32) = v16;
        *(void *)(v14 + 40) = *((void *)v15 + 5);
      }
      unint64_t v31 = *((void *)v15 + 7);
      if (v31 >> 60 == 15)
      {
        long long v32 = *((_OWORD *)v15 + 3);
        *(void *)(v14 + 64) = *((void *)v15 + 8);
        *(_OWORD *)(v14 + 48) = v32;
      }
      else
      {
        uint64_t v51 = *((void *)v15 + 6);
        outlined copy of Data._Representation(v51, *((void *)v15 + 7));
        *(void *)(v14 + 48) = v51;
        *(void *)(v14 + 56) = v31;
        *(void *)(v14 + 64) = *((void *)v15 + 8);
      }
      __int16 v52 = *((_WORD *)v15 + 36);
      *(unsigned char *)(v14 + 74) = v15[74];
      *(_WORD *)(v14 + 72) = v52;
      *(unsigned char *)(v14 + 75) = v15[75];
      uint64_t v53 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v54 = *(int *)(v53 + 20);
      uint64_t v55 = (char *)(v14 + v54);
      unint64_t v56 = &v15[v54];
      uint64_t v57 = (int *)type metadata accessor for SessionTicket();
      uint64_t v58 = *((void *)v57 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v58 + 48))(v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        uint64_t v410 = v58;
        __dstb = (void *)v53;
        uint64_t v165 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16))(v55, v56, v165);
        *(_DWORD *)&v55[v57[5]] = *(_DWORD *)&v56[v57[5]];
        *(_DWORD *)&v55[v57[6]] = *(_DWORD *)&v56[v57[6]];
        uint64_t v166 = v57[7];
        unint64_t v167 = (uint64_t *)&v55[v166];
        uint64_t v168 = &v56[v166];
        uint64_t v169 = *(void *)&v56[v166];
        unint64_t v170 = *(void *)&v56[v166 + 8];
        outlined copy of Data._Representation(v169, v170);
        *unint64_t v167 = v169;
        v167[1] = v170;
        v167[2] = *((void *)v168 + 2);
        uint64_t v171 = v57[8];
        uint64_t v172 = (uint64_t *)&v55[v171];
        uint64_t v173 = &v56[v171];
        uint64_t v174 = *(void *)&v56[v171];
        unint64_t v175 = *(void *)&v56[v171 + 8];
        outlined copy of Data._Representation(v174, v175);
        *uint64_t v172 = v174;
        v172[1] = v175;
        v172[2] = *((void *)v173 + 2);
        uint64_t v176 = v57[9];
        uint64_t v177 = &v55[v176];
        uint64_t v178 = &v56[v176];
        uint64_t v179 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 16))(v177, v178, v179);
        *(_DWORD *)&v55[v57[10]] = *(_DWORD *)&v56[v57[10]];
        *(_WORD *)&v55[v57[11]] = *(_WORD *)&v56[v57[11]];
        *(_WORD *)&v55[v57[12]] = *(_WORD *)&v56[v57[12]];
        uint64_t v180 = v57[13];
        uint64_t v181 = &v55[v180];
        uint64_t v182 = (uint64_t *)&v56[v180];
        unint64_t v183 = *(void *)&v56[v180 + 8];
        if (v183 >> 60 == 15)
        {
          long long v184 = *(_OWORD *)v182;
          *((void *)v181 + 2) = v182[2];
          *(_OWORD *)uint64_t v181 = v184;
        }
        else
        {
          uint64_t v274 = *v182;
          outlined copy of Data._Representation(*v182, v183);
          *(void *)uint64_t v181 = v274;
          *((void *)v181 + 1) = v183;
          *((void *)v181 + 2) = v182[2];
        }
        uint64_t v53 = (uint64_t)__dstb;
        uint64_t v275 = v57[14];
        __dstd = &v55[v275];
        uint64_t v276 = &v56[v275];
        uint64_t v277 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v278 = *(void *)(v277 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v278 + 48))(v276, 1, v277))
        {
          uint64_t v279 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(__dstd, v276, *(void *)(*(void *)(v279 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v278 + 16))(__dstd, v276, v277);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v278 + 56))(__dstd, 0, 1, v277);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v410 + 56))(v55, 0, 1, v57);
      }
      uint64_t v352 = *(int *)(v53 + 24);
      uint64_t v353 = (char *)(v14 + v352);
      uint64_t v354 = &v15[v352];
      uint64_t v355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v356 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v356 - 8) + 16))(v353, v354, v356);
          uint64_t v357 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v358 = v357[9];
          v359 = &v353[v358];
          uint64_t v360 = &v354[v358];
          uint64_t v325 = type metadata accessor for SymmetricKey();
          uint64_t v326 = *(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16);
          v326(v359, v360, v325);
          v326(&v353[v357[10]], &v354[v357[10]], v325);
          v326(&v353[v357[11]], &v354[v357[11]], v325);
          uint64_t v361 = v357[12];
          uint64_t v328 = &v353[v361];
          uint64_t v329 = &v354[v361];
          goto LABEL_142;
        case 1u:
          uint64_t v362 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v362 - 8) + 16))(v353, v354, v362);
          uint64_t v363 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v364 = v363[9];
          uint64_t v365 = &v353[v364];
          uint64_t v366 = &v354[v364];
          uint64_t v325 = type metadata accessor for SymmetricKey();
          uint64_t v326 = *(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16);
          v326(v365, v366, v325);
          v326(&v353[v363[10]], &v354[v363[10]], v325);
          uint64_t v367 = v363[11];
          uint64_t v328 = &v353[v367];
          uint64_t v329 = &v354[v367];
          goto LABEL_142;
        case 2u:
          uint64_t v368 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v368 - 8) + 16))(v353, v354, v368);
          uint64_t v369 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v370 = v369[9];
          uint64_t v371 = &v353[v370];
          uint64_t v372 = &v354[v370];
          uint64_t v325 = type metadata accessor for SymmetricKey();
          uint64_t v326 = *(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16);
          v326(v371, v372, v325);
          v326(&v353[v369[10]], &v354[v369[10]], v325);
          v326(&v353[v369[11]], &v354[v369[11]], v325);
          v326(&v353[v369[12]], &v354[v369[12]], v325);
          v326(&v353[v369[13]], &v354[v369[13]], v325);
          uint64_t v373 = v369[14];
          uint64_t v328 = &v353[v373];
          uint64_t v329 = &v354[v373];
LABEL_142:
          v326(v328, v329, v325);
          swift_storeEnumTagMultiPayload();
          break;
        case 3u:
          uint64_t v374 = type metadata accessor for SymmetricKey();
          uint64_t v375 = *(void (**)(char *, char *, uint64_t))(*(void *)(v374 - 8) + 16);
          v375(v353, v354, v374);
          uint64_t v376 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v375(&v353[v376[9]], &v354[v376[9]], v374);
          v375(&v353[v376[10]], &v354[v376[10]], v374);
          v375(&v353[v376[11]], &v354[v376[11]], v374);
LABEL_144:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          size_t v251 = *(void *)(*(void *)(v355 - 8) + 64);
          size_t v252 = v353;
          uint64_t v253 = v354;
          goto LABEL_138;
      }
LABEL_158:
      a3 = v418;
      unint64_t v4 = v419;
LABEL_159:
      swift_storeEnumTagMultiPayload();
      break;
  }
LABEL_160:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + a3[7]), (uint64_t *)((char *)v4 + a3[7]));
  uint64_t v377 = a3[8];
  uint64_t v378 = (void *)(a1 + v377);
  uint64_t v379 = (uint64_t *)((char *)v4 + v377);
  void *v378 = *v379;
  v378[1] = v379[1];
  v378[2] = v379[2];
  v378[3] = v379[3];
  uint64_t v380 = a3[9];
  uint64_t v381 = a1 + v380;
  long long v382 = (char *)v4 + v380;
  *(void *)uint64_t v381 = *(uint64_t *)((char *)v4 + v380);
  *(void *)(v381 + 8) = *(uint64_t *)((char *)v4 + v380 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v381 + 16) = *((void *)v382 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v383 = (long long *)(v381 + 24);
  uint64_t v384 = (long long *)(v382 + 24);
  unint64_t v385 = *((void *)v382 + 4);
  if (*(void *)(v381 + 32) >> 60 == 15)
  {
    if (v385 >> 60 == 15)
    {
      long long v386 = *v384;
      *(void *)(v381 + 40) = *((void *)v382 + 5);
      *long long v383 = v386;
      goto LABEL_168;
    }
    uint64_t v388 = *((void *)v382 + 3);
    outlined copy of Data._Representation(v388, *((void *)v382 + 4));
    *(void *)(v381 + 24) = v388;
    *(void *)(v381 + 32) = v385;
  }
  else
  {
    if (v385 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v381 + 24);
      uint64_t v387 = *((void *)v382 + 5);
      *long long v383 = *v384;
      *(void *)(v381 + 40) = v387;
      goto LABEL_168;
    }
    uint64_t v389 = *((void *)v382 + 3);
    outlined copy of Data._Representation(v389, *((void *)v382 + 4));
    uint64_t v390 = *(void *)(v381 + 24);
    unint64_t v391 = *(void *)(v381 + 32);
    *(void *)(v381 + 24) = v389;
    *(void *)(v381 + 32) = v385;
    outlined consume of Data._Representation(v390, v391);
  }
  *(void *)(v381 + 40) = *((void *)v382 + 5);
LABEL_168:
  uint64_t v392 = (_OWORD *)(v381 + 48);
  uint64_t v393 = v382 + 48;
  unint64_t v394 = *((void *)v382 + 7);
  if (*(void *)(v381 + 56) >> 60 != 15)
  {
    if (v394 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v381 + 48);
      uint64_t v396 = *((void *)v382 + 8);
      *uint64_t v392 = *v393;
      *(void *)(v381 + 64) = v396;
      goto LABEL_176;
    }
    uint64_t v398 = *((void *)v382 + 6);
    outlined copy of Data._Representation(v398, *((void *)v382 + 7));
    uint64_t v399 = *(void *)(v381 + 48);
    unint64_t v400 = *(void *)(v381 + 56);
    *(void *)(v381 + 48) = v398;
    *(void *)(v381 + 56) = v394;
    outlined consume of Data._Representation(v399, v400);
LABEL_175:
    *(void *)(v381 + 64) = *((void *)v382 + 8);
    goto LABEL_176;
  }
  if (v394 >> 60 != 15)
  {
    uint64_t v397 = *((void *)v382 + 6);
    outlined copy of Data._Representation(v397, *((void *)v382 + 7));
    *(void *)(v381 + 48) = v397;
    *(void *)(v381 + 56) = v394;
    goto LABEL_175;
  }
  long long v395 = *v393;
  *(void *)(v381 + 64) = *((void *)v382 + 8);
  *uint64_t v392 = v395;
LABEL_176:
  __int16 v401 = *((_WORD *)v382 + 36);
  *(unsigned char *)(v381 + 74) = v382[74];
  *(_WORD *)(v381 + 72) = v401;
  *(unsigned char *)(v381 + 75) = v382[75];
  return a1;
}

uint64_t initializeWithTake for HandshakeStateMachine(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for HandshakeState(0);
  uint64_t v331 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v328 = v4;
      long long v18 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v7 + 48) = v18;
      *(_OWORD *)(v7 + 60) = *(_OWORD *)(v8 + 60);
      long long v19 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v19;
      long long v20 = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v7 + 96) = v20;
      *(void *)(v7 + 112) = *(void *)(v8 + 112);
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v8 + 120);
      *(void *)(v7 + 168) = *(void *)(v8 + 168);
      *(_OWORD *)(v7 + 152) = *(_OWORD *)(v8 + 152);
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      uint64_t v21 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v22 = *(int *)(v21 + 36);
      long long v23 = (char *)(v7 + v22);
      unint64_t v24 = (char *)(v8 + v22);
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v26 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v23, v24, v26);
          long long v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v28 = v27[9];
          unint64_t v316 = &v23[v28];
          long long v29 = &v24[v28];
          uint64_t v322 = v21;
          uint64_t v30 = type metadata accessor for SymmetricKey();
          unint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
          v31(v316, v29, v30);
          v31(&v23[v27[10]], &v24[v27[10]], v30);
          v31(&v23[v27[11]], &v24[v27[11]], v30);
          uint64_t v32 = v30;
          uint64_t v21 = v322;
          v31(&v23[v27[12]], &v24[v27[12]], v32);
          goto LABEL_35;
        case 1u:
          uint64_t v172 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v172 - 8) + 32))(v23, v24, v172);
          uint64_t v173 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v174 = v173[9];
          long long v317 = &v23[v174];
          unint64_t v175 = &v24[v174];
          uint64_t v323 = v21;
          uint64_t v176 = type metadata accessor for SymmetricKey();
          uint64_t v177 = *(void (**)(char *, char *, uint64_t))(*(void *)(v176 - 8) + 32);
          v177(v317, v175, v176);
          v177(&v23[v173[10]], &v24[v173[10]], v176);
          uint64_t v178 = v176;
          uint64_t v21 = v323;
          v177(&v23[v173[11]], &v24[v173[11]], v178);
          goto LABEL_35;
        case 2u:
          uint64_t v179 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32))(v23, v24, v179);
          uint64_t v180 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v181 = v180[9];
          uint64_t v318 = &v23[v181];
          uint64_t v182 = &v24[v181];
          uint64_t v324 = v21;
          uint64_t v183 = type metadata accessor for SymmetricKey();
          long long v184 = *(void (**)(char *, char *, uint64_t))(*(void *)(v183 - 8) + 32);
          v184(v318, v182, v183);
          v184(&v23[v180[10]], &v24[v180[10]], v183);
          v184(&v23[v180[11]], &v24[v180[11]], v183);
          v184(&v23[v180[12]], &v24[v180[12]], v183);
          v184(&v23[v180[13]], &v24[v180[13]], v183);
          uint64_t v185 = v183;
          uint64_t v21 = v324;
          v184(&v23[v180[14]], &v24[v180[14]], v185);
          goto LABEL_35;
        case 3u:
          uint64_t v186 = type metadata accessor for SymmetricKey();
          uint64_t v187 = *(void (**)(char *, char *, uint64_t))(*(void *)(v186 - 8) + 32);
          v187(v23, v24, v186);
          unint64_t v188 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v187(&v23[v188[9]], &v24[v188[9]], v186);
          v187(&v23[v188[10]], &v24[v188[10]], v186);
          v187(&v23[v188[11]], &v24[v188[11]], v186);
LABEL_35:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
          break;
      }
      uint64_t v4 = v328;
      uint64_t v189 = *(int *)(v21 + 40);
      uint64_t v190 = (char *)(v7 + v189);
      uint64_t v191 = (char *)(v8 + v189);
      uint64_t v192 = (int *)type metadata accessor for SessionTicket();
      uint64_t v193 = *((void *)v192 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v193 + 48))(v191, 1, v192))
      {
        size_t v194 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                     - 8)
                         + 64);
        long long v195 = v190;
        uint64_t v196 = v191;
LABEL_56:
        memcpy(v195, v196, v194);
      }
      else
      {
        uint64_t v197 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 32))(v190, v191, v197);
        *(_DWORD *)&v190[v192[5]] = *(_DWORD *)&v191[v192[5]];
        *(_DWORD *)&v190[v192[6]] = *(_DWORD *)&v191[v192[6]];
        uint64_t v198 = v192[7];
        uint64_t v199 = &v190[v198];
        uint64_t v200 = &v191[v198];
        *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
        *((void *)v199 + 2) = *((void *)v200 + 2);
        uint64_t v201 = v192[8];
        uint64_t v202 = &v190[v201];
        uint64_t v203 = &v191[v201];
        *(_OWORD *)uint64_t v202 = *(_OWORD *)v203;
        *((void *)v202 + 2) = *((void *)v203 + 2);
        uint64_t v204 = v192[9];
        long long v205 = &v190[v204];
        uint64_t v206 = &v191[v204];
        uint64_t v207 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v207 - 8) + 32))(v205, v206, v207);
        *(_DWORD *)&v190[v192[10]] = *(_DWORD *)&v191[v192[10]];
        *(_WORD *)&v190[v192[11]] = *(_WORD *)&v191[v192[11]];
        *(_WORD *)&v190[v192[12]] = *(_WORD *)&v191[v192[12]];
        uint64_t v208 = v192[13];
        uint64_t v209 = &v190[v208];
        unint64_t v210 = &v191[v208];
        *((void *)v209 + 2) = *((void *)v210 + 2);
        *(_OWORD *)uint64_t v209 = *(_OWORD *)v210;
        uint64_t v211 = v192[14];
        uint64_t v212 = &v190[v211];
        uint64_t v213 = &v191[v211];
        uint64_t v214 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v215 = *(void *)(v214 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
        {
          uint64_t v216 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v212, v213, *(void *)(*(void *)(v216 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v212, v213, v214);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
        }
        uint64_t v4 = v328;
        (*(void (**)(char *, void, uint64_t, int *))(v193 + 56))(v190, 0, 1, v192);
      }
      goto LABEL_73;
    case 2u:
      uint64_t v329 = v4;
      long long v33 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v7 + 48) = v33;
      *(_OWORD *)(v7 + 60) = *(_OWORD *)(v8 + 60);
      long long v34 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v34;
      long long v35 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v36 = v35[5];
      unint64_t v37 = (char *)(v7 + v36);
      long long v38 = (char *)(v8 + v36);
      uint64_t v39 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      __dst = v35;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v40 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v37, v38, v40);
        long long v41 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v37[v41[5]] = *(_DWORD *)&v38[v41[5]];
        *(_DWORD *)&v37[v41[6]] = *(_DWORD *)&v38[v41[6]];
        uint64_t v42 = v41[7];
        unint64_t v43 = &v37[v42];
        long long v44 = &v38[v42];
        *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
        *((void *)v43 + 2) = *((void *)v44 + 2);
        uint64_t v45 = v41[8];
        unint64_t v46 = &v37[v45];
        long long v47 = &v38[v45];
        *(_OWORD *)unint64_t v46 = *(_OWORD *)v47;
        *((void *)v46 + 2) = *((void *)v47 + 2);
        uint64_t v48 = v41[9];
        unint64_t v49 = &v37[v48];
        long long v50 = &v38[v48];
        uint64_t v51 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
        *(_DWORD *)&v37[v41[10]] = *(_DWORD *)&v38[v41[10]];
        *(_WORD *)&v37[v41[11]] = *(_WORD *)&v38[v41[11]];
        *(_WORD *)&v37[v41[12]] = *(_WORD *)&v38[v41[12]];
        uint64_t v52 = v41[13];
        uint64_t v53 = &v37[v52];
        uint64_t v54 = &v38[v52];
        *((void *)v53 + 2) = *((void *)v54 + 2);
        *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
        uint64_t v55 = v41[14];
        unint64_t v56 = &v37[v55];
        uint64_t v57 = &v38[v55];
        uint64_t v58 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          uint64_t v60 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        }
        long long v35 = __dst;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
      }
      uint64_t v217 = v35[6];
      uint64_t v218 = (char *)(v7 + v217);
      uint64_t v219 = (char *)(v8 + v217);
      uint64_t v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v221 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v221 - 8) + 32))(v218, v219, v221);
          uint64_t v222 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v223 = v222[9];
          uint64_t v319 = &v218[v223];
          uint64_t v224 = &v219[v223];
          uint64_t v225 = type metadata accessor for SymmetricKey();
          uint64_t v226 = *(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 32);
          v226(v319, v224, v225);
          v226(&v218[v222[10]], &v219[v222[10]], v225);
          v226(&v218[v222[11]], &v219[v222[11]], v225);
          uint64_t v227 = v222[12];
          long long v35 = __dst;
          v226(&v218[v227], &v219[v227], v225);
          goto LABEL_48;
        case 1u:
          uint64_t v228 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v228 - 8) + 32))(v218, v219, v228);
          uint64_t v229 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v230 = v229[9];
          uint64_t v320 = &v218[v230];
          uint64_t v231 = &v219[v230];
          uint64_t v232 = type metadata accessor for SymmetricKey();
          uint64_t v233 = *(void (**)(char *, char *, uint64_t))(*(void *)(v232 - 8) + 32);
          v233(v320, v231, v232);
          v233(&v218[v229[10]], &v219[v229[10]], v232);
          uint64_t v234 = v229[11];
          long long v35 = __dst;
          v233(&v218[v234], &v219[v234], v232);
          goto LABEL_48;
        case 2u:
          uint64_t v235 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v235 - 8) + 32))(v218, v219, v235);
          uint64_t v236 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v237 = v236[9];
          uint64_t v321 = &v218[v237];
          uint64_t v238 = &v219[v237];
          uint64_t v239 = type metadata accessor for SymmetricKey();
          uint64_t v240 = *(void (**)(char *, char *, uint64_t))(*(void *)(v239 - 8) + 32);
          v240(v321, v238, v239);
          v240(&v218[v236[10]], &v219[v236[10]], v239);
          v240(&v218[v236[11]], &v219[v236[11]], v239);
          v240(&v218[v236[12]], &v219[v236[12]], v239);
          v240(&v218[v236[13]], &v219[v236[13]], v239);
          uint64_t v241 = v236[14];
          long long v35 = __dst;
          v240(&v218[v241], &v219[v241], v239);
          goto LABEL_48;
        case 3u:
          uint64_t v242 = v35;
          uint64_t v243 = type metadata accessor for SymmetricKey();
          uint64_t v244 = *(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 32);
          v244(v218, v219, v243);
          unint64_t v245 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v244(&v218[v245[9]], &v219[v245[9]], v243);
          v244(&v218[v245[10]], &v219[v245[10]], v243);
          uint64_t v246 = v243;
          long long v35 = v242;
          v244(&v218[v245[11]], &v219[v245[11]], v246);
LABEL_48:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v218, v219, *(void *)(*(void *)(v220 - 8) + 64));
          break;
      }
      uint64_t v4 = v329;
      uint64_t v247 = v331;
      *(_WORD *)(v7 + v35[7]) = *(_WORD *)(v8 + v35[7]);
      *(_WORD *)(v7 + v35[8]) = *(_WORD *)(v8 + v35[8]);
      goto LABEL_74;
    case 3u:
      uint64_t v330 = v4;
      long long v61 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v7 + 48) = v61;
      *(_OWORD *)(v7 + 60) = *(_OWORD *)(v8 + 60);
      long long v62 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v62;
      long long v63 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v64 = v63[5];
      unint64_t v65 = (char *)(v7 + v64);
      uint64_t v66 = (char *)(v8 + v64);
      uint64_t v67 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v68 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v65, v66, v68);
        uint64_t v69 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v65[v69[5]] = *(_DWORD *)&v66[v69[5]];
        *(_DWORD *)&v65[v69[6]] = *(_DWORD *)&v66[v69[6]];
        uint64_t v70 = v69[7];
        uint64_t v71 = &v65[v70];
        uint64_t v72 = &v66[v70];
        *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
        *((void *)v71 + 2) = *((void *)v72 + 2);
        uint64_t v73 = v69[8];
        uint64_t v74 = &v65[v73];
        uint64_t v75 = &v66[v73];
        *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
        *((void *)v74 + 2) = *((void *)v75 + 2);
        uint64_t v76 = v69[9];
        uint64_t v77 = &v65[v76];
        uint64_t v78 = &v66[v76];
        uint64_t v79 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 32))(v77, v78, v79);
        *(_DWORD *)&v65[v69[10]] = *(_DWORD *)&v66[v69[10]];
        *(_WORD *)&v65[v69[11]] = *(_WORD *)&v66[v69[11]];
        *(_WORD *)&v65[v69[12]] = *(_WORD *)&v66[v69[12]];
        uint64_t v80 = v69[13];
        uint64_t v81 = &v65[v80];
        uint64_t v82 = &v66[v80];
        *((void *)v81 + 2) = *((void *)v82 + 2);
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
        uint64_t v83 = v69[14];
        uint64_t v84 = &v65[v83];
        unint64_t v85 = &v66[v83];
        uint64_t v86 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v87 = *(void *)(v86 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          uint64_t v88 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
      }
      uint64_t v248 = v63[6];
      uint64_t v249 = v7 + v248;
      uint64_t v250 = v8 + v248;
      *(_OWORD *)uint64_t v249 = *(_OWORD *)v250;
      *(void *)(v249 + 16) = *(void *)(v250 + 16);
      uint64_t v251 = v63[7];
      uint64_t v252 = v7 + v251;
      uint64_t v253 = v8 + v251;
      *(void *)(v252 + 16) = *(void *)(v253 + 16);
      *(_OWORD *)uint64_t v252 = *(_OWORD *)v253;
      *(unsigned char *)(v7 + v63[8]) = *(unsigned char *)(v8 + v63[8]);
      uint64_t v254 = v63[9];
      __int16 v137 = (char *)(v7 + v254);
      uint64_t v138 = (char *)(v8 + v254);
      uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t v4 = v330;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v255 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v255 - 8) + 32))(v137, v138, v255);
          unint64_t v155 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v256 = v155[9];
          uint64_t v157 = &v137[v256];
          uint64_t v158 = &v138[v256];
          uint64_t v159 = type metadata accessor for SymmetricKey();
          goto LABEL_54;
        case 1u:
          uint64_t v263 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v263 - 8) + 32))(v137, v138, v263);
          os_log_type_t v161 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v264 = v161[9];
          uint64_t v163 = &v137[v264];
          uint64_t v164 = &v138[v264];
          uint64_t v165 = type metadata accessor for SymmetricKey();
          goto LABEL_59;
        case 2u:
          uint64_t v268 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v268 - 8) + 32))(v137, v138, v268);
          unint64_t v167 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v269 = v167[9];
          uint64_t v169 = &v137[v269];
          unint64_t v170 = &v138[v269];
          uint64_t v171 = type metadata accessor for SymmetricKey();
          goto LABEL_61;
        case 3u:
          goto LABEL_57;
        default:
          goto LABEL_55;
      }
    case 4u:
      long long v89 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v7 + 48) = v89;
      *(_OWORD *)(v7 + 60) = *(_OWORD *)(v8 + 60);
      long long v90 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v90;
      *(_DWORD *)(v7 + 76) = *(_DWORD *)(v8 + 76);
      *(void *)(v7 + 96) = *(void *)(v8 + 96);
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
      long long v91 = *(_OWORD *)(v8 + 104);
      *(void *)(v7 + 120) = *(void *)(v8 + 120);
      *(_OWORD *)(v7 + 104) = v91;
      *(unsigned char *)(v7 + 128) = *(unsigned char *)(v8 + 128);
      uint64_t v92 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v93 = *(int *)(v92 + 40);
      uint64_t v94 = (void *)(v7 + v93);
      unint64_t v95 = (const void *)(v8 + v93);
      uint64_t v96 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v97 = *(void *)(v96 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
      {
        uint64_t v98 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v94, v95, v96);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      }
      uint64_t v136 = *(int *)(v92 + 44);
      __int16 v137 = (char *)(v7 + v136);
      uint64_t v138 = (char *)(v8 + v136);
      uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_28;
        case 1u:
          goto LABEL_29;
        case 2u:
          goto LABEL_30;
        case 3u:
          goto LABEL_57;
        default:
          goto LABEL_55;
      }
    case 5u:
      long long v99 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v7 + 48) = v99;
      *(_OWORD *)(v7 + 60) = *(_OWORD *)(v8 + 60);
      long long v100 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v100;
      *(_DWORD *)(v7 + 76) = *(_DWORD *)(v8 + 76);
      uint64_t v101 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v102 = v101[7];
      unint64_t v103 = (void *)(v7 + v102);
      long long v104 = (const void *)(v8 + v102);
      uint64_t v105 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v106 = *(void *)(v105 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
      {
        uint64_t v107 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v106 + 32))(v103, v104, v105);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
      }
      uint64_t v140 = v101[8];
      uint64_t v141 = v7 + v140;
      uint64_t v142 = v8 + v140;
      *(_OWORD *)uint64_t v141 = *(_OWORD *)v142;
      *(void *)(v141 + 16) = *(void *)(v142 + 16);
      uint64_t v143 = v101[9];
      uint64_t v144 = v7 + v143;
      uint64_t v145 = v8 + v143;
      *(void *)(v144 + 16) = *(void *)(v145 + 16);
      *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
      *(unsigned char *)(v7 + v101[10]) = *(unsigned char *)(v8 + v101[10]);
      uint64_t v146 = v101[11];
      __int16 v137 = (char *)(v7 + v146);
      uint64_t v138 = (char *)(v8 + v146);
      uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_28;
        case 1u:
          goto LABEL_29;
        case 2u:
          goto LABEL_30;
        case 3u:
          goto LABEL_57;
        default:
          goto LABEL_55;
      }
    case 6u:
      long long v108 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v7 + 48) = v108;
      *(_OWORD *)(v7 + 60) = *(_OWORD *)(v8 + 60);
      long long v109 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v109;
      *(_DWORD *)(v7 + 76) = *(_DWORD *)(v8 + 76);
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v111 = ready[7];
      uint64_t v112 = (void *)(v7 + v111);
      uint64_t v113 = (const void *)(v8 + v111);
      uint64_t v114 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v115 = *(void *)(v114 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
      {
        uint64_t v116 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v115 + 32))(v112, v113, v114);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
      }
      uint64_t v147 = ready[8];
      uint64_t v148 = v7 + v147;
      uint64_t v149 = v8 + v147;
      *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
      *(void *)(v148 + 16) = *(void *)(v149 + 16);
      uint64_t v150 = ready[9];
      uint64_t v151 = v7 + v150;
      uint64_t v152 = v8 + v150;
      *(void *)(v151 + 16) = *(void *)(v152 + 16);
      *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
      *(unsigned char *)(v7 + ready[10]) = *(unsigned char *)(v8 + ready[10]);
      uint64_t v153 = ready[11];
      __int16 v137 = (char *)(v7 + v153);
      uint64_t v138 = (char *)(v8 + v153);
      uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_28:
          uint64_t v154 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v154 - 8) + 32))(v137, v138, v154);
          unint64_t v155 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v156 = v155[9];
          uint64_t v157 = &v137[v156];
          uint64_t v158 = &v138[v156];
          uint64_t v159 = type metadata accessor for SymmetricKey();
          uint64_t v330 = v4;
LABEL_54:
          uint64_t v257 = v159;
          uint64_t v258 = *(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 32);
          v258(v157, v158, v159);
          v258(&v137[v155[10]], &v138[v155[10]], v257);
          v258(&v137[v155[11]], &v138[v155[11]], v257);
          uint64_t v259 = v257;
          uint64_t v4 = v330;
          v258(&v137[v155[12]], &v138[v155[12]], v259);
          swift_storeEnumTagMultiPayload();
          break;
        case 1u:
LABEL_29:
          uint64_t v160 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 32))(v137, v138, v160);
          os_log_type_t v161 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v162 = v161[9];
          uint64_t v163 = &v137[v162];
          uint64_t v164 = &v138[v162];
          uint64_t v165 = type metadata accessor for SymmetricKey();
          uint64_t v330 = v4;
LABEL_59:
          uint64_t v265 = v165;
          uint64_t v266 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 32);
          v266(v163, v164, v165);
          v266(&v137[v161[10]], &v138[v161[10]], v265);
          uint64_t v267 = v265;
          uint64_t v4 = v330;
          v266(&v137[v161[11]], &v138[v161[11]], v267);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
LABEL_30:
          uint64_t v166 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 32))(v137, v138, v166);
          unint64_t v167 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v168 = v167[9];
          uint64_t v169 = &v137[v168];
          unint64_t v170 = &v138[v168];
          uint64_t v171 = type metadata accessor for SymmetricKey();
          uint64_t v330 = v4;
LABEL_61:
          uint64_t v270 = v171;
          uint64_t v271 = *(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 32);
          v271(v169, v170, v171);
          v271(&v137[v167[10]], &v138[v167[10]], v270);
          v271(&v137[v167[11]], &v138[v167[11]], v270);
          v271(&v137[v167[12]], &v138[v167[12]], v270);
          v271(&v137[v167[13]], &v138[v167[13]], v270);
          uint64_t v272 = v270;
          uint64_t v4 = v330;
          v271(&v137[v167[14]], &v138[v167[14]], v272);
          swift_storeEnumTagMultiPayload();
          break;
        case 3u:
LABEL_57:
          uint64_t v260 = type metadata accessor for SymmetricKey();
          uint64_t v261 = *(void (**)(char *, char *, uint64_t))(*(void *)(v260 - 8) + 32);
          v261(v137, v138, v260);
          uint64_t v262 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v261(&v137[v262[9]], &v138[v262[9]], v260);
          v261(&v137[v262[10]], &v138[v262[10]], v260);
          v261(&v137[v262[11]], &v138[v262[11]], v260);
          swift_storeEnumTagMultiPayload();
          break;
        default:
LABEL_55:
          size_t v194 = *(void *)(*(void *)(v139 - 8) + 64);
          long long v195 = v137;
          uint64_t v196 = v138;
          goto LABEL_56;
      }
      goto LABEL_73;
    default:
      uint64_t v327 = v4;
      long long v9 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v7 + 48) = v9;
      *(_OWORD *)(v7 + 60) = *(_OWORD *)(v8 + 60);
      long long v10 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v10;
      uint64_t v11 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v12 = *(int *)(v11 + 20);
      uint64_t v13 = (char *)(v7 + v12);
      uint64_t v14 = (char *)(v8 + v12);
      uint64_t v15 = (int *)type metadata accessor for SessionTicket();
      uint64_t v16 = *((void *)v15 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v117 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v117 - 8) + 32))(v13, v14, v117);
        *(_DWORD *)&v13[v15[5]] = *(_DWORD *)&v14[v15[5]];
        *(_DWORD *)&v13[v15[6]] = *(_DWORD *)&v14[v15[6]];
        uint64_t v118 = v15[7];
        unint64_t v119 = &v13[v118];
        uint64_t v120 = &v14[v118];
        *(_OWORD *)unint64_t v119 = *(_OWORD *)v120;
        *((void *)v119 + 2) = *((void *)v120 + 2);
        uint64_t v121 = v15[8];
        unint64_t v122 = &v13[v121];
        uint64_t v123 = &v14[v121];
        *(_OWORD *)unint64_t v122 = *(_OWORD *)v123;
        *((void *)v122 + 2) = *((void *)v123 + 2);
        uint64_t v124 = v15[9];
        unint64_t v125 = &v13[v124];
        uint64_t v126 = &v14[v124];
        uint64_t v127 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 32))(v125, v126, v127);
        *(_DWORD *)&v13[v15[10]] = *(_DWORD *)&v14[v15[10]];
        *(_WORD *)&v13[v15[11]] = *(_WORD *)&v14[v15[11]];
        *(_WORD *)&v13[v15[12]] = *(_WORD *)&v14[v15[12]];
        uint64_t v128 = v15[13];
        uint64_t v129 = &v13[v128];
        unint64_t v130 = &v14[v128];
        *((void *)v129 + 2) = *((void *)v130 + 2);
        *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
        uint64_t v131 = v15[14];
        __dsta = &v13[v131];
        uint64_t v132 = &v14[v131];
        uint64_t v133 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v134 = *(void *)(v133 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
        {
          uint64_t v135 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(__dsta, v132, *(void *)(*(void *)(v135 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v134 + 32))(__dsta, v132, v133);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(__dsta, 0, 1, v133);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v273 = *(int *)(v11 + 24);
      uint64_t v274 = (char *)(v7 + v273);
      uint64_t v275 = (char *)(v8 + v273);
      uint64_t v276 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v277 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v277 - 8) + 32))(v274, v275, v277);
          uint64_t v278 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v279 = v278[9];
          uint64_t v280 = &v274[v279];
          uint64_t v281 = &v275[v279];
          uint64_t v282 = type metadata accessor for SymmetricKey();
          uint64_t v283 = *(void (**)(char *, char *, uint64_t))(*(void *)(v282 - 8) + 32);
          v283(v280, v281, v282);
          v283(&v274[v278[10]], &v275[v278[10]], v282);
          v283(&v274[v278[11]], &v275[v278[11]], v282);
          v283(&v274[v278[12]], &v275[v278[12]], v282);
          goto LABEL_70;
        case 1u:
          uint64_t v284 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v284 - 8) + 32))(v274, v275, v284);
          uint64_t v285 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v286 = v285[9];
          uint64_t v287 = &v274[v286];
          uint64_t v288 = &v275[v286];
          uint64_t v289 = type metadata accessor for SymmetricKey();
          uint64_t v290 = *(void (**)(char *, char *, uint64_t))(*(void *)(v289 - 8) + 32);
          v290(v287, v288, v289);
          v290(&v274[v285[10]], &v275[v285[10]], v289);
          v290(&v274[v285[11]], &v275[v285[11]], v289);
          goto LABEL_70;
        case 2u:
          uint64_t v291 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v291 - 8) + 32))(v274, v275, v291);
          uint64_t v292 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v293 = v292[9];
          uint64_t v294 = &v274[v293];
          uint64_t v295 = &v275[v293];
          uint64_t v296 = type metadata accessor for SymmetricKey();
          uint64_t v297 = *(void (**)(char *, char *, uint64_t))(*(void *)(v296 - 8) + 32);
          v297(v294, v295, v296);
          v297(&v274[v292[10]], &v275[v292[10]], v296);
          v297(&v274[v292[11]], &v275[v292[11]], v296);
          v297(&v274[v292[12]], &v275[v292[12]], v296);
          v297(&v274[v292[13]], &v275[v292[13]], v296);
          v297(&v274[v292[14]], &v275[v292[14]], v296);
          goto LABEL_70;
        case 3u:
          uint64_t v298 = type metadata accessor for SymmetricKey();
          unint64_t v299 = *(void (**)(char *, char *, uint64_t))(*(void *)(v298 - 8) + 32);
          v299(v274, v275, v298);
          uint64_t v300 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v299(&v274[v300[9]], &v275[v300[9]], v298);
          v299(&v274[v300[10]], &v275[v300[10]], v298);
          v299(&v274[v300[11]], &v275[v300[11]], v298);
LABEL_70:
          swift_storeEnumTagMultiPayload();
          uint64_t v4 = v327;
          break;
        default:
          memcpy(v274, v275, *(void *)(*(void *)(v276 - 8) + 64));
          uint64_t v4 = v327;
          break;
      }
LABEL_73:
      uint64_t v247 = v331;
LABEL_74:
      swift_storeEnumTagMultiPayload();
      uint64_t v301 = v247[7];
      uint64_t v302 = v247[8];
      uint64_t v303 = a1 + v301;
      uint64_t v304 = (long long *)(v4 + v301);
      long long v305 = *v304;
      long long v306 = v304[1];
      *(void *)(v303 + 32) = *((void *)v304 + 4);
      *(_OWORD *)uint64_t v303 = v305;
      *(_OWORD *)(v303 + 16) = v306;
      uint64_t v307 = (_OWORD *)(a1 + v302);
      uint64_t v308 = (_OWORD *)(v4 + v302);
      long long v309 = v308[1];
      *uint64_t v307 = *v308;
      v307[1] = v309;
      uint64_t v310 = v247[9];
      long long v311 = (_OWORD *)(a1 + v310);
      uint64_t v312 = (_OWORD *)(v4 + v310);
      long long v313 = v312[3];
      v311[2] = v312[2];
      v311[3] = v313;
      *(_OWORD *)((char *)v311 + 60) = *(_OWORD *)((char *)v312 + 60);
      long long v314 = v312[1];
      *long long v311 = *v312;
      v311[1] = v314;
      return a1;
  }
}

uint64_t assignWithTake for HandshakeStateMachine(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v6);
LABEL_6:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
    uint64_t v321 = a3;
    uint64_t v9 = a3[6];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    _s8SwiftTLS14HandshakeStateOWOhTm_0(a1 + v9, type metadata accessor for HandshakeState);
    type metadata accessor for HandshakeState(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v21 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v10 + 48) = v21;
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v11 + 60);
        long long v22 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v22;
        long long v23 = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
        *(_OWORD *)(v10 + 96) = v23;
        *(void *)(v10 + 112) = *(void *)(v11 + 112);
        *(_OWORD *)(v10 + 120) = *(_OWORD *)(v11 + 120);
        *(void *)(v10 + 168) = *(void *)(v11 + 168);
        *(_OWORD *)(v10 + 152) = *(_OWORD *)(v11 + 152);
        *(_OWORD *)(v10 + 136) = *(_OWORD *)(v11 + 136);
        uint64_t v24 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v25 = *(int *)(v24 + 36);
        uint64_t v26 = (char *)(v10 + v25);
        long long v27 = (char *)(v11 + v25);
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        __dst = (void *)v24;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v29 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v26, v27, v29);
            uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v31 = v30[9];
            unint64_t v299 = &v27[v31];
            long long v305 = &v26[v31];
            uint64_t v32 = type metadata accessor for SymmetricKey();
            long long v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
            v33(v305, v299, v32);
            v33(&v26[v30[10]], &v27[v30[10]], v32);
            v33(&v26[v30[11]], &v27[v30[11]], v32);
            uint64_t v34 = v30[12];
            uint64_t v24 = (uint64_t)__dst;
            v33(&v26[v34], &v27[v34], v32);
            goto LABEL_38;
          case 1u:
            uint64_t v156 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 32))(v26, v27, v156);
            uint64_t v157 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v158 = v157[9];
            uint64_t v300 = &v27[v158];
            long long v306 = &v26[v158];
            uint64_t v159 = type metadata accessor for SymmetricKey();
            uint64_t v160 = *(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 32);
            v160(v306, v300, v159);
            v160(&v26[v157[10]], &v27[v157[10]], v159);
            uint64_t v161 = v157[11];
            uint64_t v24 = (uint64_t)__dst;
            v160(&v26[v161], &v27[v161], v159);
            goto LABEL_38;
          case 2u:
            uint64_t v162 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v162 - 8) + 32))(v26, v27, v162);
            uint64_t v163 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v164 = v163[9];
            uint64_t v301 = &v27[v164];
            uint64_t v307 = &v26[v164];
            uint64_t v165 = type metadata accessor for SymmetricKey();
            uint64_t v166 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 32);
            v166(v307, v301, v165);
            v166(&v26[v163[10]], &v27[v163[10]], v165);
            v166(&v26[v163[11]], &v27[v163[11]], v165);
            v166(&v26[v163[12]], &v27[v163[12]], v165);
            v166(&v26[v163[13]], &v27[v163[13]], v165);
            uint64_t v167 = v163[14];
            uint64_t v24 = (uint64_t)__dst;
            v166(&v26[v167], &v27[v167], v165);
            goto LABEL_38;
          case 3u:
            uint64_t v168 = type metadata accessor for SymmetricKey();
            uint64_t v169 = *(void (**)(char *, char *, uint64_t))(*(void *)(v168 - 8) + 32);
            v169(v26, v27, v168);
            unint64_t v170 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v169(&v26[v170[9]], &v27[v170[9]], v168);
            v169(&v26[v170[10]], &v27[v170[10]], v168);
            uint64_t v171 = v168;
            uint64_t v24 = (uint64_t)__dst;
            v169(&v26[v170[11]], &v27[v170[11]], v171);
LABEL_38:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
            break;
        }
        uint64_t v172 = *(int *)(v24 + 40);
        uint64_t v173 = (char *)(v10 + v172);
        uint64_t v174 = (char *)(v11 + v172);
        unint64_t v175 = (int *)type metadata accessor for SessionTicket();
        uint64_t v176 = *((void *)v175 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v176 + 48))(v174, 1, v175))
        {
          size_t v177 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                       - 8)
                           + 64);
          uint64_t v178 = v173;
          uint64_t v179 = v174;
LABEL_59:
          memcpy(v178, v179, v177);
        }
        else
        {
          uint64_t v180 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 32))(v173, v174, v180);
          *(_DWORD *)&v173[v175[5]] = *(_DWORD *)&v174[v175[5]];
          *(_DWORD *)&v173[v175[6]] = *(_DWORD *)&v174[v175[6]];
          uint64_t v181 = v175[7];
          uint64_t v182 = &v173[v181];
          uint64_t v183 = &v174[v181];
          *(_OWORD *)uint64_t v182 = *(_OWORD *)v183;
          *((void *)v182 + 2) = *((void *)v183 + 2);
          uint64_t v184 = v175[8];
          uint64_t v185 = &v173[v184];
          uint64_t v186 = &v174[v184];
          *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
          *((void *)v185 + 2) = *((void *)v186 + 2);
          uint64_t v187 = v175[9];
          unint64_t v188 = &v173[v187];
          uint64_t v189 = &v174[v187];
          uint64_t v190 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v190 - 8) + 32))(v188, v189, v190);
          *(_DWORD *)&v173[v175[10]] = *(_DWORD *)&v174[v175[10]];
          *(_WORD *)&v173[v175[11]] = *(_WORD *)&v174[v175[11]];
          *(_WORD *)&v173[v175[12]] = *(_WORD *)&v174[v175[12]];
          uint64_t v191 = v175[13];
          uint64_t v192 = &v173[v191];
          uint64_t v193 = &v174[v191];
          *((void *)v192 + 2) = *((void *)v193 + 2);
          *(_OWORD *)uint64_t v192 = *(_OWORD *)v193;
          uint64_t v194 = v175[14];
          long long v195 = &v173[v194];
          uint64_t v196 = &v174[v194];
          uint64_t v197 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v198 = *(void *)(v197 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v196, 1, v197))
          {
            uint64_t v199 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v195, v196, *(void *)(*(void *)(v199 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v198 + 32))(v195, v196, v197);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v198 + 56))(v195, 0, 1, v197);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v176 + 56))(v173, 0, 1, v175);
        }
        goto LABEL_76;
      case 2u:
        long long v35 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v10 + 48) = v35;
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v11 + 60);
        long long v36 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v36;
        unint64_t v37 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v38 = v37[5];
        uint64_t v39 = (char *)(v10 + v38);
        uint64_t v40 = (char *)(v11 + v38);
        uint64_t v41 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        __dsta = v37;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v42 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v39, v40, v42);
          unint64_t v43 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v39[v43[5]] = *(_DWORD *)&v40[v43[5]];
          *(_DWORD *)&v39[v43[6]] = *(_DWORD *)&v40[v43[6]];
          uint64_t v44 = v43[7];
          uint64_t v45 = &v39[v44];
          unint64_t v46 = &v40[v44];
          *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
          *((void *)v45 + 2) = *((void *)v46 + 2);
          uint64_t v47 = v43[8];
          uint64_t v48 = &v39[v47];
          unint64_t v49 = &v40[v47];
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
          *((void *)v48 + 2) = *((void *)v49 + 2);
          uint64_t v50 = v43[9];
          uint64_t v51 = &v39[v50];
          uint64_t v52 = &v40[v50];
          uint64_t v53 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 32))(v51, v52, v53);
          *(_DWORD *)&v39[v43[10]] = *(_DWORD *)&v40[v43[10]];
          *(_WORD *)&v39[v43[11]] = *(_WORD *)&v40[v43[11]];
          *(_WORD *)&v39[v43[12]] = *(_WORD *)&v40[v43[12]];
          uint64_t v54 = v43[13];
          uint64_t v55 = &v39[v54];
          unint64_t v56 = &v40[v54];
          *((void *)v55 + 2) = *((void *)v56 + 2);
          *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
          uint64_t v57 = v43[14];
          uint64_t v58 = &v39[v57];
          uint64_t v59 = &v40[v57];
          uint64_t v60 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v61 = *(void *)(v60 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
          {
            uint64_t v62 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
          }
          unint64_t v37 = __dsta;
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
        }
        uint64_t v200 = v37[6];
        uint64_t v201 = (char *)(v10 + v200);
        uint64_t v202 = (char *)(v11 + v200);
        uint64_t v203 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v204 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v204 - 8) + 32))(v201, v202, v204);
            long long v205 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v206 = v205[9];
            uint64_t v302 = &v202[v206];
            uint64_t v308 = &v201[v206];
            uint64_t v207 = type metadata accessor for SymmetricKey();
            uint64_t v208 = *(void (**)(char *, char *, uint64_t))(*(void *)(v207 - 8) + 32);
            v208(v308, v302, v207);
            v208(&v201[v205[10]], &v202[v205[10]], v207);
            v208(&v201[v205[11]], &v202[v205[11]], v207);
            uint64_t v209 = v205[12];
            unint64_t v37 = __dsta;
            v208(&v201[v209], &v202[v209], v207);
            goto LABEL_51;
          case 1u:
            uint64_t v210 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v210 - 8) + 32))(v201, v202, v210);
            uint64_t v211 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v212 = v211[9];
            uint64_t v303 = &v202[v212];
            long long v309 = &v201[v212];
            uint64_t v213 = type metadata accessor for SymmetricKey();
            uint64_t v214 = *(void (**)(char *, char *, uint64_t))(*(void *)(v213 - 8) + 32);
            v214(v309, v303, v213);
            v214(&v201[v211[10]], &v202[v211[10]], v213);
            uint64_t v215 = v211[11];
            unint64_t v37 = __dsta;
            v214(&v201[v215], &v202[v215], v213);
            goto LABEL_51;
          case 2u:
            uint64_t v216 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v216 - 8) + 32))(v201, v202, v216);
            uint64_t v217 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v218 = v217[9];
            uint64_t v304 = &v202[v218];
            uint64_t v310 = &v201[v218];
            uint64_t v219 = type metadata accessor for SymmetricKey();
            uint64_t v220 = *(void (**)(char *, char *, uint64_t))(*(void *)(v219 - 8) + 32);
            v220(v310, v304, v219);
            v220(&v201[v217[10]], &v202[v217[10]], v219);
            v220(&v201[v217[11]], &v202[v217[11]], v219);
            v220(&v201[v217[12]], &v202[v217[12]], v219);
            v220(&v201[v217[13]], &v202[v217[13]], v219);
            uint64_t v221 = v217[14];
            unint64_t v37 = __dsta;
            v220(&v201[v221], &v202[v221], v219);
            goto LABEL_51;
          case 3u:
            uint64_t v222 = type metadata accessor for SymmetricKey();
            uint64_t v223 = *(void (**)(char *, char *, uint64_t))(*(void *)(v222 - 8) + 32);
            v223(v201, v202, v222);
            uint64_t v224 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v223(&v201[v224[9]], &v202[v224[9]], v222);
            v223(&v201[v224[10]], &v202[v224[10]], v222);
            uint64_t v225 = v222;
            unint64_t v37 = __dsta;
            v223(&v201[v224[11]], &v202[v224[11]], v225);
LABEL_51:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v201, v202, *(void *)(*(void *)(v203 - 8) + 64));
            break;
        }
        a3 = v321;
        *(_WORD *)(v10 + v37[7]) = *(_WORD *)(v11 + v37[7]);
        *(_WORD *)(v10 + v37[8]) = *(_WORD *)(v11 + v37[8]);
        goto LABEL_77;
      case 3u:
        long long v63 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v10 + 48) = v63;
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v11 + 60);
        long long v64 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v64;
        unint64_t v65 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v66 = v65[5];
        uint64_t v67 = (char *)(v10 + v66);
        uint64_t v68 = (char *)(v11 + v66);
        uint64_t v69 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v70 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32))(v67, v68, v70);
          uint64_t v71 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v67[v71[5]] = *(_DWORD *)&v68[v71[5]];
          *(_DWORD *)&v67[v71[6]] = *(_DWORD *)&v68[v71[6]];
          uint64_t v72 = v71[7];
          uint64_t v73 = &v67[v72];
          uint64_t v74 = &v68[v72];
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
          *((void *)v73 + 2) = *((void *)v74 + 2);
          uint64_t v75 = v71[8];
          uint64_t v76 = &v67[v75];
          uint64_t v77 = &v68[v75];
          *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
          *((void *)v76 + 2) = *((void *)v77 + 2);
          uint64_t v78 = v71[9];
          uint64_t v79 = &v67[v78];
          uint64_t v80 = &v68[v78];
          uint64_t v81 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32))(v79, v80, v81);
          *(_DWORD *)&v67[v71[10]] = *(_DWORD *)&v68[v71[10]];
          *(_WORD *)&v67[v71[11]] = *(_WORD *)&v68[v71[11]];
          *(_WORD *)&v67[v71[12]] = *(_WORD *)&v68[v71[12]];
          uint64_t v82 = v71[13];
          uint64_t v83 = &v67[v82];
          uint64_t v84 = &v68[v82];
          *((void *)v83 + 2) = *((void *)v84 + 2);
          *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
          uint64_t v85 = v71[14];
          uint64_t v86 = &v67[v85];
          uint64_t v87 = &v68[v85];
          uint64_t v88 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v89 = *(void *)(v88 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
          {
            uint64_t v90 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v86, v87, v88);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
        }
        uint64_t v226 = v65[6];
        uint64_t v227 = v10 + v226;
        uint64_t v228 = v11 + v226;
        *(_OWORD *)uint64_t v227 = *(_OWORD *)v228;
        *(void *)(v227 + 16) = *(void *)(v228 + 16);
        uint64_t v229 = v65[7];
        uint64_t v230 = v10 + v229;
        uint64_t v231 = v11 + v229;
        *(void *)(v230 + 16) = *(void *)(v231 + 16);
        *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
        *(unsigned char *)(v10 + v65[8]) = *(unsigned char *)(v11 + v65[8]);
        uint64_t v232 = v65[9];
        uint64_t v139 = (char *)(v10 + v232);
        uint64_t v140 = (char *)(v11 + v232);
        uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_56;
          case 1u:
            goto LABEL_60;
          case 2u:
            goto LABEL_62;
          case 3u:
            goto LABEL_64;
          default:
            goto LABEL_58;
        }
      case 4u:
        long long v91 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v10 + 48) = v91;
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v11 + 60);
        long long v92 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v92;
        *(_DWORD *)(v10 + 76) = *(_DWORD *)(v11 + 76);
        *(void *)(v10 + 96) = *(void *)(v11 + 96);
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
        long long v93 = *(_OWORD *)(v11 + 104);
        *(void *)(v10 + 120) = *(void *)(v11 + 120);
        *(_OWORD *)(v10 + 104) = v93;
        *(unsigned char *)(v10 + 128) = *(unsigned char *)(v11 + 128);
        uint64_t v94 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v95 = *(int *)(v94 + 40);
        uint64_t v96 = (void *)(v10 + v95);
        uint64_t v97 = (const void *)(v11 + v95);
        uint64_t v98 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v99 = *(void *)(v98 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
        {
          uint64_t v100 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v99 + 32))(v96, v97, v98);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
        }
        uint64_t v138 = *(int *)(v94 + 44);
        uint64_t v139 = (char *)(v10 + v138);
        uint64_t v140 = (char *)(v11 + v138);
        uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_56;
          case 1u:
            goto LABEL_60;
          case 2u:
            goto LABEL_62;
          case 3u:
            goto LABEL_64;
          default:
            goto LABEL_58;
        }
      case 5u:
        long long v101 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v10 + 48) = v101;
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v11 + 60);
        long long v102 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v102;
        *(_DWORD *)(v10 + 76) = *(_DWORD *)(v11 + 76);
        unint64_t v103 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v104 = v103[7];
        uint64_t v105 = (void *)(v10 + v104);
        uint64_t v106 = (const void *)(v11 + v104);
        uint64_t v107 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v108 = *(void *)(v107 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
        {
          uint64_t v109 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v108 + 32))(v105, v106, v107);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
        }
        uint64_t v142 = v103[8];
        uint64_t v143 = v10 + v142;
        uint64_t v144 = v11 + v142;
        *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
        *(void *)(v143 + 16) = *(void *)(v144 + 16);
        uint64_t v145 = v103[9];
        uint64_t v146 = v10 + v145;
        uint64_t v147 = v11 + v145;
        *(void *)(v146 + 16) = *(void *)(v147 + 16);
        *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
        *(unsigned char *)(v10 + v103[10]) = *(unsigned char *)(v11 + v103[10]);
        uint64_t v148 = v103[11];
        uint64_t v139 = (char *)(v10 + v148);
        uint64_t v140 = (char *)(v11 + v148);
        uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_56;
          case 1u:
            goto LABEL_60;
          case 2u:
            goto LABEL_62;
          case 3u:
            goto LABEL_64;
          default:
            goto LABEL_58;
        }
      case 6u:
        long long v110 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v10 + 48) = v110;
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v11 + 60);
        long long v111 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v111;
        *(_DWORD *)(v10 + 76) = *(_DWORD *)(v11 + 76);
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v113 = ready[7];
        uint64_t v114 = (void *)(v10 + v113);
        uint64_t v115 = (const void *)(v11 + v113);
        uint64_t v116 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v117 = *(void *)(v116 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
        {
          uint64_t v118 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v117 + 32))(v114, v115, v116);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
        }
        uint64_t v149 = ready[8];
        uint64_t v150 = v10 + v149;
        uint64_t v151 = v11 + v149;
        *(_OWORD *)uint64_t v150 = *(_OWORD *)v151;
        *(void *)(v150 + 16) = *(void *)(v151 + 16);
        uint64_t v152 = ready[9];
        uint64_t v153 = v10 + v152;
        uint64_t v154 = v11 + v152;
        *(void *)(v153 + 16) = *(void *)(v154 + 16);
        *(_OWORD *)uint64_t v153 = *(_OWORD *)v154;
        *(unsigned char *)(v10 + ready[10]) = *(unsigned char *)(v11 + ready[10]);
        uint64_t v155 = ready[11];
        uint64_t v139 = (char *)(v10 + v155);
        uint64_t v140 = (char *)(v11 + v155);
        uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
LABEL_56:
            uint64_t v233 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 32))(v139, v140, v233);
            uint64_t v234 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v235 = v234[9];
            uint64_t v312 = &v139[v235];
            uint64_t v236 = &v140[v235];
            uint64_t v237 = type metadata accessor for SymmetricKey();
            uint64_t v238 = *(void (**)(char *, char *, uint64_t))(*(void *)(v237 - 8) + 32);
            v238(v312, v236, v237);
            v238(&v139[v234[10]], &v140[v234[10]], v237);
            v238(&v139[v234[11]], &v140[v234[11]], v237);
            v238(&v139[v234[12]], &v140[v234[12]], v237);
            goto LABEL_65;
          case 1u:
LABEL_60:
            uint64_t v239 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v239 - 8) + 32))(v139, v140, v239);
            uint64_t v240 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v241 = v240[9];
            long long v313 = &v139[v241];
            uint64_t v242 = &v140[v241];
            uint64_t v243 = type metadata accessor for SymmetricKey();
            uint64_t v244 = *(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 32);
            v244(v313, v242, v243);
            v244(&v139[v240[10]], &v140[v240[10]], v243);
            v244(&v139[v240[11]], &v140[v240[11]], v243);
            goto LABEL_65;
          case 2u:
LABEL_62:
            uint64_t v245 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v245 - 8) + 32))(v139, v140, v245);
            uint64_t v246 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v247 = v246[9];
            long long v314 = &v139[v247];
            uint64_t v248 = &v140[v247];
            uint64_t v249 = type metadata accessor for SymmetricKey();
            uint64_t v250 = *(void (**)(char *, char *, uint64_t))(*(void *)(v249 - 8) + 32);
            v250(v314, v248, v249);
            v250(&v139[v246[10]], &v140[v246[10]], v249);
            v250(&v139[v246[11]], &v140[v246[11]], v249);
            v250(&v139[v246[12]], &v140[v246[12]], v249);
            v250(&v139[v246[13]], &v140[v246[13]], v249);
            v250(&v139[v246[14]], &v140[v246[14]], v249);
            goto LABEL_65;
          case 3u:
LABEL_64:
            uint64_t v251 = type metadata accessor for SymmetricKey();
            uint64_t v252 = *(void (**)(char *, char *, uint64_t))(*(void *)(v251 - 8) + 32);
            v252(v139, v140, v251);
            uint64_t v253 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v252(&v139[v253[9]], &v140[v253[9]], v251);
            v252(&v139[v253[10]], &v140[v253[10]], v251);
            v252(&v139[v253[11]], &v140[v253[11]], v251);
            goto LABEL_65;
          default:
LABEL_58:
            size_t v177 = *(void *)(*(void *)(v141 - 8) + 64);
            uint64_t v178 = v139;
            uint64_t v179 = v140;
            goto LABEL_59;
        }
      default:
        long long v12 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v10 + 48) = v12;
        *(_OWORD *)(v10 + 60) = *(_OWORD *)(v11 + 60);
        long long v13 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v13;
        uint64_t v14 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v15 = *(int *)(v14 + 20);
        uint64_t v16 = (char *)(v10 + v15);
        uint64_t v17 = (char *)(v11 + v15);
        long long v18 = (int *)type metadata accessor for SessionTicket();
        uint64_t v19 = *((void *)v18 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          uint64_t v311 = v14;
          uint64_t v119 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 32))(v16, v17, v119);
          *(_DWORD *)&v16[v18[5]] = *(_DWORD *)&v17[v18[5]];
          *(_DWORD *)&v16[v18[6]] = *(_DWORD *)&v17[v18[6]];
          uint64_t v120 = v18[7];
          uint64_t v121 = &v16[v120];
          unint64_t v122 = &v17[v120];
          *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
          *((void *)v121 + 2) = *((void *)v122 + 2);
          uint64_t v123 = v18[8];
          uint64_t v124 = &v16[v123];
          unint64_t v125 = &v17[v123];
          *(_OWORD *)uint64_t v124 = *(_OWORD *)v125;
          *((void *)v124 + 2) = *((void *)v125 + 2);
          uint64_t v126 = v18[9];
          uint64_t v127 = &v16[v126];
          uint64_t v128 = &v17[v126];
          uint64_t v129 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 32))(v127, v128, v129);
          *(_DWORD *)&v16[v18[10]] = *(_DWORD *)&v17[v18[10]];
          *(_WORD *)&v16[v18[11]] = *(_WORD *)&v17[v18[11]];
          *(_WORD *)&v16[v18[12]] = *(_WORD *)&v17[v18[12]];
          uint64_t v130 = v18[13];
          uint64_t v131 = &v16[v130];
          uint64_t v132 = &v17[v130];
          *((void *)v131 + 2) = *((void *)v132 + 2);
          *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
          uint64_t v133 = v18[14];
          __dstb = &v16[v133];
          uint64_t v134 = &v17[v133];
          uint64_t v135 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v136 = *(void *)(v135 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
          {
            uint64_t v137 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(__dstb, v134, *(void *)(*(void *)(v137 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v136 + 32))(__dstb, v134, v135);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(__dstb, 0, 1, v135);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
          uint64_t v14 = v311;
        }
        uint64_t v254 = *(int *)(v14 + 24);
        uint64_t v255 = (char *)(v10 + v254);
        uint64_t v256 = (char *)(v11 + v254);
        uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v258 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v258 - 8) + 32))(v255, v256, v258);
            uint64_t v259 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v260 = v259[9];
            uint64_t v315 = &v255[v260];
            uint64_t v261 = &v256[v260];
            uint64_t v262 = type metadata accessor for SymmetricKey();
            uint64_t v263 = *(void (**)(char *, char *, uint64_t))(*(void *)(v262 - 8) + 32);
            v263(v315, v261, v262);
            v263(&v255[v259[10]], &v256[v259[10]], v262);
            v263(&v255[v259[11]], &v256[v259[11]], v262);
            v263(&v255[v259[12]], &v256[v259[12]], v262);
            break;
          case 1u:
            uint64_t v264 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v264 - 8) + 32))(v255, v256, v264);
            uint64_t v265 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v266 = v265[9];
            unint64_t v316 = &v255[v266];
            uint64_t v267 = &v256[v266];
            uint64_t v268 = type metadata accessor for SymmetricKey();
            uint64_t v269 = *(void (**)(char *, char *, uint64_t))(*(void *)(v268 - 8) + 32);
            v269(v316, v267, v268);
            v269(&v255[v265[10]], &v256[v265[10]], v268);
            v269(&v255[v265[11]], &v256[v265[11]], v268);
            break;
          case 2u:
            uint64_t v270 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v270 - 8) + 32))(v255, v256, v270);
            uint64_t v271 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v272 = v271[9];
            long long v317 = &v255[v272];
            uint64_t v273 = &v256[v272];
            uint64_t v274 = type metadata accessor for SymmetricKey();
            uint64_t v275 = *(void (**)(char *, char *, uint64_t))(*(void *)(v274 - 8) + 32);
            v275(v317, v273, v274);
            v275(&v255[v271[10]], &v256[v271[10]], v274);
            v275(&v255[v271[11]], &v256[v271[11]], v274);
            v275(&v255[v271[12]], &v256[v271[12]], v274);
            v275(&v255[v271[13]], &v256[v271[13]], v274);
            v275(&v255[v271[14]], &v256[v271[14]], v274);
            break;
          case 3u:
            uint64_t v276 = type metadata accessor for SymmetricKey();
            uint64_t v277 = *(void (**)(char *, char *, uint64_t))(*(void *)(v276 - 8) + 32);
            v277(v255, v256, v276);
            uint64_t v278 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v277(&v255[v278[9]], &v256[v278[9]], v276);
            v277(&v255[v278[10]], &v256[v278[10]], v276);
            v277(&v255[v278[11]], &v256[v278[11]], v276);
            break;
          default:
            size_t v177 = *(void *)(*(void *)(v257 - 8) + 64);
            uint64_t v178 = v255;
            uint64_t v179 = v256;
            goto LABEL_59;
        }
LABEL_65:
        swift_storeEnumTagMultiPayload();
LABEL_76:
        a3 = v321;
LABEL_77:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  uint64_t v279 = a3[7];
  uint64_t v280 = a1 + v279;
  uint64_t v281 = a2 + v279;
  __swift_destroy_boxed_opaque_existential_1(a1 + v279);
  long long v282 = *(_OWORD *)(v281 + 16);
  *(_OWORD *)uint64_t v280 = *(_OWORD *)v281;
  *(_OWORD *)(v280 + 16) = v282;
  *(void *)(v280 + 32) = *(void *)(v281 + 32);
  uint64_t v283 = a3[8];
  uint64_t v284 = a3[9];
  uint64_t v285 = (_OWORD *)(a1 + v283);
  uint64_t v286 = (_OWORD *)(a2 + v283);
  long long v287 = v286[1];
  *uint64_t v285 = *v286;
  v285[1] = v287;
  uint64_t v288 = a1 + v284;
  uint64_t v289 = a2 + v284;
  uint64_t v290 = *(void *)(a2 + v284);
  uint64_t v291 = *(void *)(a2 + v284 + 8);
  *(void *)uint64_t v288 = v290;
  *(void *)(v288 + 8) = v291;
  swift_bridgeObjectRelease();
  *(void *)(v288 + 16) = *(void *)(v289 + 16);
  swift_bridgeObjectRelease();
  unint64_t v292 = *(void *)(v288 + 32);
  if (v292 >> 60 == 15) {
    goto LABEL_81;
  }
  unint64_t v293 = *(void *)(v289 + 32);
  if (v293 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v288 + 24);
LABEL_81:
    *(_OWORD *)(v288 + 24) = *(_OWORD *)(v289 + 24);
    *(void *)(v288 + 40) = *(void *)(v289 + 40);
    goto LABEL_83;
  }
  uint64_t v294 = *(void *)(v288 + 24);
  *(void *)(v288 + 24) = *(void *)(v289 + 24);
  *(void *)(v288 + 32) = v293;
  outlined consume of Data._Representation(v294, v292);
  *(void *)(v288 + 40) = *(void *)(v289 + 40);
LABEL_83:
  unint64_t v295 = *(void *)(v288 + 56);
  if (v295 >> 60 != 15)
  {
    unint64_t v296 = *(void *)(v289 + 56);
    if (v296 >> 60 != 15)
    {
      uint64_t v297 = *(void *)(v288 + 48);
      *(void *)(v288 + 48) = *(void *)(v289 + 48);
      *(void *)(v288 + 56) = v296;
      outlined consume of Data._Representation(v297, v295);
      *(void *)(v288 + 64) = *(void *)(v289 + 64);
      goto LABEL_88;
    }
    outlined destroy of ByteBuffer(v288 + 48);
  }
  *(_OWORD *)(v288 + 48) = *(_OWORD *)(v289 + 48);
  *(void *)(v288 + 64) = *(void *)(v289 + 64);
LABEL_88:
  *(_WORD *)(v288 + 72) = *(_WORD *)(v289 + 72);
  *(unsigned char *)(v288 + 74) = *(unsigned char *)(v289 + 74);
  *(unsigned char *)(v288 + 75) = *(unsigned char *)(v289 + 75);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeStateMachine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B570DC8C);
}

uint64_t sub_1B570DC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HandshakeState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 24);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B570DD68);
}

uint64_t sub_1B570DD68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HandshakeState(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for HandshakeStateMachine()
{
  uint64_t result = type metadata accessor for HandshakeState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t type metadata completion function for HandshakeStateMachine.ProcessStep()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HandshakeStateMachine.ProcessStep(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for HandshakeStateMachine.ProcessStep(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for HandshakeStateMachine.ProcessStep(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    long long v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *initializeWithTake for HandshakeStateMachine.ProcessStep(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for HandshakeStateMachine.ProcessStep(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    long long v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeStateMachine.ProcessStep(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for HandshakeStateMachine.ProcessStep(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1B570EA14);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTag for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t type metadata accessor for HandshakeStateMachine.ProcessStep()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of HandshakeState.ReadyState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unsigned int v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unsigned int v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned char *specialized Data._Representation.init(_:)(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void *CipherSuite.TLS_AES_256_GCM_SHA384.unsafeMutableAddressor()
{
  return &static CipherSuite.TLS_AES_256_GCM_SHA384;
}

uint64_t static CipherSuite.TLS_AES_256_GCM_SHA384.getter()
{
  return 4866;
}

uint64_t CipherSuite.description.getter(__int16 a1)
{
  if (a1 == 4866) {
    return 0xD000000000000016;
  }
  lazy protocol witness table accessor for type UInt16 and conformance UInt16();
  v2._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 30768;
}

unint64_t lazy protocol witness table accessor for type UInt16 and conformance UInt16()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CipherSuite()
{
  return CipherSuite.description.getter(*v0);
}

uint64_t ByteBuffer.readCipherSuite()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < v2) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v3 + 24) >= v2) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v4) < v2)
      {
LABEL_11:
        unsigned int v6 = 0;
        int v5 = 1;
        return v6 | (v5 << 16);
      }
LABEL_8:
      if (v2 < v1) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v5 = 0;
      unsigned int v6 = bswap32(0) >> 16;
      v0[2] = v2;
      return v6 | (v5 << 16);
  }
}

unint64_t lazy protocol witness table accessor for type CipherSuite and conformance CipherSuite()
{
  unint64_t result = lazy protocol witness table cache variable for type CipherSuite and conformance CipherSuite;
  if (!lazy protocol witness table cache variable for type CipherSuite and conformance CipherSuite)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CipherSuite and conformance CipherSuite);
  }
  return result;
}

ValueMetadata *type metadata accessor for CipherSuite()
{
  return &type metadata for CipherSuite;
}

uint64_t FinishedMessage.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = BYTE6(a3);
      break;
  }
  if (v7 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B570F2FCLL);
  }
  uint64_t v8 = Data._Representation.subscript.getter();
  unint64_t v10 = v9;
  Data.hash(into:)();
  outlined consume of Data._Representation(v8, v10);

  return outlined consume of Data._Representation(a2, a3);
}

Swift::Int FinishedMessage.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
LABEL_5:
      outlined copy of Data._Representation(a1, a2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  if (v6 < a3)
  {
    __break(1u);
    JUMPOUT(0x1B570F3F0);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v9);
  outlined consume of Data._Representation(a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FinishedMessage()
{
  return FinishedMessage.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FinishedMessage()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(*v0, v0[1]);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B570F4E8);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);

  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FinishedMessage()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B570F5DCLL);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

uint64_t FinishedMessage.write(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return ByteBuffer.writeImmutableBuffer(_:)(a2, a3, a4);
}

uint64_t FinishedMessage.init(bytes:)(uint64_t *a1)
{
  uint64_t result = specialized FinishedMessage.init(bytes:)(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t protocol witness for HandshakeMessageProtocol.write(into:) in conformance FinishedMessage()
{
  return ByteBuffer.writeImmutableBuffer(_:)(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance FinishedMessage@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized FinishedMessage.init(bytes:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t specialized FinishedMessage.init(bytes:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  BOOL v6 = __OFSUB__(v5, v4);
  uint64_t v7 = v5 - v4;
  if (v6)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    JUMPOUT(0x1B570F7D0);
  }
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v2 >> 32;
      goto LABEL_11;
    case 2uLL:
      uint64_t v9 = *(void *)(v2 + 24);
      goto LABEL_11;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v9 = BYTE6(v3);
LABEL_11:
      if (v9 < v8)
      {
        __break(1u);
LABEL_13:
        if (v8 > 0) {
          goto LABEL_19;
        }
      }
      if (v8 < v4) {
        goto LABEL_18;
      }
      uint64_t result = Data._Representation.subscript.getter();
      a1[2] = v8;
      return result;
  }
}

unint64_t lazy protocol witness table accessor for type FinishedMessage and conformance FinishedMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishedMessage and conformance FinishedMessage;
  if (!lazy protocol witness table cache variable for type FinishedMessage and conformance FinishedMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishedMessage and conformance FinishedMessage);
  }
  return result;
}

ValueMetadata *type metadata accessor for FinishedMessage()
{
  return &type metadata for FinishedMessage;
}

uint64_t ByteBuffer.writeImmutableBuffer(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = BYTE6(a2);
  unint64_t v4 = a2 >> 62;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  switch(v4)
  {
    case 1uLL:
      uint64_t v6 = (int)a1;
      uint64_t v5 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = 0;
      uint64_t v5 = v3;
      break;
  }
  if (v5 < a3 || v5 < v6)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    JUMPOUT(0x1B570F990);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.append(_:)();
  switch(v9 >> 62)
  {
    case 1uLL:
      outlined consume of Data._Representation(v7, v9);
      if (__OFSUB__(HIDWORD(v7), v7)) {
        goto LABEL_17;
      }
      uint64_t result = HIDWORD(v7) - (int)v7;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      outlined consume of Data._Representation(v7, v9);
      uint64_t result = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        return result;
      }
      __break(1u);
LABEL_14:
      outlined consume of Data._Representation(v7, v9);
      uint64_t result = 0;
      break;
    case 3uLL:
      goto LABEL_14;
    default:
      outlined consume of Data._Representation(v7, v9);
      return BYTE6(v9);
  }
  return result;
}

uint64_t ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a3;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v4;
  unint64_t v11 = v4[1];
  uint64_t v12 = 0;
  switch(v11 >> 62)
  {
    case 1uLL:
      uint64_t v12 = v10 >> 32;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(v10 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v12 = BYTE6(v11);
      break;
  }
  uint64_t v20 = v12;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v14 = ByteBuffer.writeInteger<A>(_:as:)((uint64_t)v9, v13, a4);
  int v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a4);
  uint64_t v16 = a2(v4);
  uint64_t v22 = v16;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  CertificateVerify.algorithm.getter(a4);
  ByteBuffer.setInteger<A>(_:at:as:)((uint64_t)v9, v20, v17, a4);
  v15(v9, a4);
  uint64_t result = v14 + v16;
  if (__OFADD__(v14, v16))
  {
    __break(1u);
    JUMPOUT(0x1B570FB88);
  }
  return result;
}

uint64_t ByteBuffer.readableBytes.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v3 = BYTE6(a2);
      break;
  }
  uint64_t result = v3 - a3;
  if (__OFSUB__(v3, a3))
  {
    __break(1u);
    JUMPOUT(0x1B570FBE4);
  }
  return result;
}

uint64_t ByteBuffer.readSlice(length:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v3 + a1;
  if (__OFADD__(v3, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = *v1;
  unint64_t v6 = v1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < v4) {
        return 0;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v5 + 24) >= v4) {
        goto LABEL_8;
      }
      return 0;
    case 3uLL:
      if (v4 > 0) {
        return 0;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v6) >= v4)
      {
LABEL_8:
        if (v4 >= v3)
        {
          uint64_t result = Data._Representation.subscript.getter();
          v1[2] = v4;
          return result;
        }
LABEL_13:
        __break(1u);
        JUMPOUT(0x1B570FCDCLL);
      }
      return 0;
  }
}

uint64_t ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return ByteBuffer.rewindOnNilOrError<A>(_:)((void (*)(uint64_t *))partial apply for closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:), a1, a2);
}

uint64_t ByteBuffer.readableBytesView.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = BYTE6(a2);
  unint64_t v4 = a2 >> 62;
  uint64_t v5 = 0;
  switch(v4)
  {
    case 1uLL:
      uint64_t v5 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = v3;
      break;
  }
  if (v5 < a3)
  {
    __break(1u);
    JUMPOUT(0x1B570FDA0);
  }
  return Data._Representation.subscript.getter();
}

uint64_t ByteBuffer.writeInteger<A>(_:as:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v9 = v8 + 7;
  if (__OFADD__(v8, 7)) {
    __break(1u);
  }
  if (v9 < 0) {
    uint64_t v9 = v8 + 14;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = dispatch thunk of FixedWidthInteger.bigEndian.getter();
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = v3;
  uint64_t v14 = 803;
  _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFTm((uint64_t)v7, (uint64_t)partial apply for closure #1 in ByteBuffer.writeInteger<A>(_:as:), (uint64_t)&v16[-4], a3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
  return v10;
}

uint64_t ByteBuffer.readInteger<A>(as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v23 - v11;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v13 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v14 = v13 + 7;
  if (__OFADD__(v13, 7))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v14 < 0) {
    uint64_t v14 = v13 + 14;
  }
  uint64_t v15 = v4[2];
  uint64_t v16 = v15 + (v14 >> 3);
  if (__OFADD__(v15, v14 >> 3)) {
LABEL_16:
  }
    __break(1u);
  uint64_t v17 = *v4;
  unint64_t v18 = v4[1];
  switch(v18 >> 62)
  {
    case 1uLL:
      if (v17 >> 32 >= v16) {
        goto LABEL_9;
      }
      goto LABEL_13;
    case 2uLL:
      if (*(void *)(v17 + 24) >= v16) {
        goto LABEL_9;
      }
      goto LABEL_13;
    case 3uLL:
      if (v16 > 0) {
        goto LABEL_13;
      }
      goto LABEL_9;
    default:
      if (BYTE6(v18) >= v16)
      {
LABEL_9:
        MEMORY[0x1F4188790](v13);
        uint64_t v22 = v16;
        uint64_t v21 = 4039;
        _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFTm((uint64_t)v12, (uint64_t)partial apply for closure #1 in ByteBuffer.readInteger<A>(as:), (uint64_t)&v23[-4], a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v19);
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, a2);
        dispatch thunk of FixedWidthInteger.init(bigEndian:)();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a2);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, a2);
        _OWORD v4[2] = v16;
      }
      else
      {
LABEL_13:
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a2);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      return result;
  }
}

uint64_t ByteBuffer.writeBytes<A>(_:)()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t ByteBuffer.setInteger<A>(_:at:as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v11 = v10 + 7;
  if (__OFADD__(v10, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v11 < 0) {
    uint64_t v11 = v10 + 14;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = a2 + (v11 >> 3);
  if (__OFADD__(a2, v11 >> 3)) {
    goto LABEL_13;
  }
  if (v4[2] > a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = *v4;
  unint64_t v15 = v4[1];
  uint64_t v16 = 0;
  switch(v15 >> 62)
  {
    case 1uLL:
      uint64_t v16 = v14 >> 32;
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(v14 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v15);
      break;
  }
  if (v16 < v13) {
LABEL_15:
  }
    __break(1u);
  uint64_t v17 = dispatch thunk of FixedWidthInteger.bigEndian.getter();
  MEMORY[0x1F4188790](v17);
  v22[-4] = v12;
  v22[-3] = v4;
  uint64_t v21 = v13;
  uint64_t v20 = 803;
  _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFTm((uint64_t)v9, (uint64_t)partial apply for closure #1 in ByteBuffer.setInteger<A>(_:at:as:), (uint64_t)&v22[-6], a4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
  return v12;
}

uint64_t ByteBuffer.writerIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = a1 >> 32;
      break;
    case 2uLL:
      uint64_t result = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return result;
    default:
      uint64_t result = BYTE6(a2);
      break;
  }
  return result;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(to:)(Swift::Int to)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if (to < (int)v2) {
        goto LABEL_14;
      }
      Swift::Int v4 = v2 >> 32;
      break;
    case 2uLL:
      if (*(void *)(v2 + 16) > to) {
        goto LABEL_15;
      }
      Swift::Int v4 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      if (to < 0) {
        goto LABEL_16;
      }
      Swift::Int v4 = 0;
      break;
    default:
      if (to < 0) {
        goto LABEL_13;
      }
      Swift::Int v4 = BYTE6(v3);
      break;
  }
  if (v4 < to)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    JUMPOUT(0x1B57105B0);
  }
  v1[2] = to;
}

uint64_t ByteBuffer.init<A>(bytes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v6 = Data.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v6;
}

uint64_t ByteBuffer.readerIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t static FixedWidthInteger.byteWidth.getter()
{
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v1 = result + 7;
  if (__OFADD__(result, 7))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0) {
      uint64_t v1 = result + 14;
    }
    return v1 >> 3;
  }
  return result;
}

uint64_t closure #1 in ByteBuffer.writeInteger<A>(_:as:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 - result;
  if (!result) {
    uint64_t v5 = 0;
  }
  if (v5 == a3)
  {
    v6[7] = v3;
    v6[8] = v4;
    v6[3] = MEMORY[0x1E4FBB2B8];
    v6[4] = MEMORY[0x1E4F27EF0];
    v6[0] = result;
    v6[1] = a2;
    __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x1E4FBB2B8]);
    Data._Representation.append(contentsOf:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t closure #1 in ByteBuffer.setInteger<A>(_:at:as:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2 - result;
  if (!result) {
    uint64_t v6 = 0;
  }
  if (v6 == a3)
  {
    if (a6 >= a5)
    {
      v7[3] = MEMORY[0x1E4FBB2B8];
      v7[4] = MEMORY[0x1E4F27EF0];
      v7[0] = result;
      v7[1] = a2;
      __swift_project_boxed_opaque_existential_1(v7, MEMORY[0x1E4FBB2B8]);
      Data._Representation.replaceSubrange(_:with:count:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void closure #1 in ByteBuffer.readInteger<A>(as:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  if (*(void *)(a1 + 16) > a2)
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Data and conformance Data();
    lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
    *a3 = DataProtocol.copyBytes<A>(to:from:)();
  }
}

uint64_t ByteBuffer.setImmutableBuffer(_:at:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      if (*(void *)(v5 + 24) < a4) {
        goto LABEL_44;
      }
      uint64_t v9 = *(void *)(v5 + 16);
      goto LABEL_10;
    case 3uLL:
      if (a4 <= 0) {
        goto LABEL_9;
      }
      goto LABEL_45;
    default:
      if (a4 <= BYTE6(v6))
      {
LABEL_9:
        uint64_t v9 = 0;
      }
      else
      {
        __break(1u);
LABEL_4:
        if (a4 > v5 >> 32)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          JUMPOUT(0x1B5710D0CLL);
        }
        uint64_t v9 = (int)v5;
      }
LABEL_10:
      if (v9 > a4)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          uint64_t v11 = (int)a1;
          uint64_t v10 = a1 >> 32;
          break;
        case 2uLL:
          uint64_t v11 = *(void *)(a1 + 16);
          uint64_t v10 = *(void *)(a1 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v11 = 0;
          uint64_t v10 = BYTE6(a2);
          break;
      }
      if (v10 < a3 || v10 < v11) {
        goto LABEL_41;
      }
      uint64_t v12 = Data._Representation.subscript.getter();
      unint64_t v14 = v13 >> 62;
      uint64_t v15 = v12;
      unint64_t v16 = v13;
      uint64_t v17 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          LODWORD(v17) = HIDWORD(v12) - v12;
          if (__OFSUB__(HIDWORD(v12), v12)) {
            goto LABEL_46;
          }
          uint64_t v17 = (int)v17;
LABEL_22:
          switch(v6 >> 62)
          {
            case 1uLL:
              uint64_t v21 = v5 >> 32;
              goto LABEL_26;
            case 2uLL:
              uint64_t v21 = *(void *)(v5 + 24);
              goto LABEL_26;
            case 3uLL:
              uint64_t v22 = -a4;
              goto LABEL_28;
            default:
              uint64_t v21 = BYTE6(v6);
LABEL_26:
              uint64_t v22 = v17;
              uint64_t v17 = v21 - a4;
LABEL_28:
              if (v17 >= v22) {
                uint64_t v17 = v22;
              }
              if (v17 + a4 < a4) {
                goto LABEL_42;
              }
              specialized Data._Representation.withUnsafeBytes<A>(_:)(v12, v13);
              switch((int)v14)
              {
                case 1:
                  outlined consume of Data._Representation(v15, v16);
                  if (__OFSUB__(HIDWORD(v15), v15)) {
                    goto LABEL_48;
                  }
                  uint64_t result = HIDWORD(v15) - (int)v15;
                  break;
                case 2:
                  uint64_t v25 = *(void *)(v15 + 16);
                  uint64_t v24 = *(void *)(v15 + 24);
                  outlined consume of Data._Representation(v15, v16);
                  uint64_t result = v24 - v25;
                  if (!__OFSUB__(v24, v25)) {
                    return result;
                  }
                  __break(1u);
LABEL_38:
                  outlined consume of Data._Representation(v15, v16);
                  uint64_t result = 0;
                  break;
                case 3:
                  goto LABEL_38;
                default:
                  outlined consume of Data._Representation(v15, v16);
                  return BYTE6(v16);
              }
              return result;
          }
        case 2uLL:
          uint64_t v19 = *(void *)(v12 + 16);
          uint64_t v18 = *(void *)(v12 + 24);
          BOOL v20 = __OFSUB__(v18, v19);
          uint64_t v17 = v18 - v19;
          if (!v20) {
            goto LABEL_22;
          }
          goto LABEL_47;
        case 3uLL:
          goto LABEL_22;
        default:
          uint64_t v17 = BYTE6(v13);
          goto LABEL_22;
      }
  }
}

uint64_t ByteBuffer.writeBuffer(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t result = ByteBuffer.writeImmutableBuffer(_:)(*a1, v3, a1[2]);
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  a1[2] = v5;
  return result;
}

Swift::OpaquePointer_optional __swiftcall ByteBuffer.readBytes(length:)(Swift::Int length)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v3 + length;
  if (__OFADD__(v3, length))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    JUMPOUT(0x1B5710EC4);
  }
  uint64_t v5 = *v1;
  unint64_t v6 = v1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 >= v4) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 2uLL:
      if (*(void *)(v5 + 24) >= v4) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v4 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v6) < v4)
      {
LABEL_11:
        uint64_t v10 = 0;
        goto LABEL_12;
      }
LABEL_8:
      if (v4 < v3) {
        goto LABEL_14;
      }
      uint64_t v7 = Data._Representation.subscript.getter();
      unint64_t v9 = v8;
      uint64_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8);
      outlined consume of Data._Representation(v7, v9);
      v1[2] = v4;
LABEL_12:
      uint64_t v12 = v10;
      result.value._rawValue = v12;
      result.is_nil = v11;
      return result;
  }
}

Swift::Int __swiftcall ByteBuffer.writeBytes(_:)(Swift::OpaquePointer a1)
{
  if (!*((void *)a1._rawValue + 2)) {
    return 0;
  }
  Data._Representation.append(contentsOf:)();
  return *((void *)a1._rawValue + 2);
}

Swift::Void __swiftcall ByteBuffer.moveWriterIndex(forwardBy:)(Swift::Int forwardBy)
{
  if (forwardBy < 0) {
    __break(1u);
  }
  else {
    specialized Data.append<A>(contentsOf:)(forwardBy);
  }
}

uint64_t ByteBuffer.writeVariableLengthVectorUInt24(_:)(uint64_t (*a1)(uint64_t *))
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  LOBYTE(v12) = 0;
  uint64_t v6 = MEMORY[0x1E4FBB2B8];
  uint64_t v7 = MEMORY[0x1E4F27EF0];
  uint64_t v15 = MEMORY[0x1E4FBB2B8];
  uint64_t v16 = MEMORY[0x1E4F27EF0];
  unint64_t v13 = &v12;
  unint64_t v14 = (__int16 **)((char *)&v12 + 1);
  __swift_project_boxed_opaque_existential_1(&v13, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  __int16 v12 = 0;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  unint64_t v13 = &v12;
  unint64_t v14 = &v13;
  __swift_project_boxed_opaque_existential_1(&v13, v6);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  uint64_t v8 = a1(v1);
  if (v8 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  uint64_t v9 = v8;
  uint64_t v10 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v8), v5);
  if (__OFADD__(v5, v10)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v9, v5 + v10);
  return v9 + 3;
}

Swift::Int __swiftcall ByteBuffer.writeUInt24(_:)(Swift::Int a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 > 0xFFFFFF) {
    __break(1u);
  }
  unsigned int v1 = a1;
  LOBYTE(v5) = BYTE2(a1);
  uint64_t v2 = MEMORY[0x1E4FBB2B8];
  uint64_t v3 = MEMORY[0x1E4F27EF0];
  uint64_t v8 = MEMORY[0x1E4FBB2B8];
  uint64_t v9 = MEMORY[0x1E4F27EF0];
  uint64_t v6 = &v5;
  uint64_t v7 = (__int16 **)((char *)&v5 + 1);
  __swift_project_boxed_opaque_existential_1(&v6, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
  __int16 v5 = bswap32(v1) >> 16;
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  uint64_t v6 = &v5;
  uint64_t v7 = &v6;
  __swift_project_boxed_opaque_existential_1(&v6, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
  return 3;
}

Swift::Int __swiftcall ByteBuffer.setUInt24(_:at:)(Swift::Int _, Swift::Int at)
{
  if (_ > 0xFFFFFF)
  {
    __break(1u);
    goto LABEL_6;
  }
  unsigned int v3 = _;
  _ = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(_), at);
  if (__OFADD__(at, _))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  Swift::Int v4 = _;
  uint64_t v5 = specialized ByteBuffer.setInteger<A>(_:at:as:)(v3, at + _);
  BOOL v6 = __OFADD__(v4, v5);
  _ = v4 + v5;
  if (v6) {
LABEL_7:
  }
    __break(1u);
  return _;
}

uint64_t *specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[2];
  uint64_t v4 = v3 + 2;
  if (__OFADD__(v3, 2))
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  uint64_t v5 = result;
  uint64_t v6 = *result;
  unint64_t v7 = result[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v4) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v6 + 24) < v4) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 3uLL:
      if (v4 < 1) {
        goto LABEL_10;
      }
      goto LABEL_12;
    default:
      if (BYTE6(v7) < v4) {
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v19 = (void *)*result;
      unint64_t v20 = v7;
      if (v4 < v3) {
        goto LABEL_22;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      long long v5[2] = v4;
      Swift::OpaquePointer_optional result = (uint64_t *)ByteBuffer.readSlice(length:)(bswap32(0) >> 16);
      if (v8 >> 60 == 15)
      {
LABEL_12:
        *(_OWORD *)a2 = xmmword_1B577F270;
        *(void *)(a2 + 16) = 0;
        return result;
      }
      uint64_t v10 = (uint64_t)result;
      unint64_t v11 = v8;
      uint64_t v19 = result;
      unint64_t v20 = v8;
      uint64_t v21 = v9;
      uint64_t v12 = readEntireBuffer #1 (_:) in NewSessionTicket.init(bytes:)((uint64_t *)&v19);
      unint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t v17 = 0;
      switch(v11 >> 62)
      {
        case 1uLL:
          uint64_t v17 = v10 >> 32;
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v10 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v17 = BYTE6(v11);
          break;
      }
      if (__OFSUB__(v17, v21)) {
        goto LABEL_23;
      }
      if (v17 == v21)
      {
        Swift::OpaquePointer_optional result = (uint64_t *)outlined consume of ByteBuffer?(v10, v11);
        *(void *)a2 = v12;
        *(void *)(a2 + 8) = v14;
        *(void *)(a2 + 16) = v16;
      }
      else
      {
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v18 = 1;
        *(unsigned char *)(v18 + 4) = 1;
        swift_willThrow();
        outlined consume of Data._Representation(v12, v14);
        return (uint64_t *)outlined consume of Data._Representation((uint64_t)v19, v20);
      }
      return result;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[2];
  uint64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  uint64_t v5 = result;
  uint64_t v6 = *result;
  unint64_t v7 = result[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v4) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v6 + 24) < v4) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 3uLL:
      if (v4 < 1) {
        goto LABEL_10;
      }
      goto LABEL_12;
    default:
      if (BYTE6(v7) < v4) {
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v19 = (void *)*result;
      unint64_t v20 = v7;
      if (v4 < v3) {
        goto LABEL_22;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      long long v5[2] = v4;
      Swift::OpaquePointer_optional result = (uint64_t *)ByteBuffer.readSlice(length:)(0);
      if (v8 >> 60 == 15)
      {
LABEL_12:
        *(_OWORD *)a2 = xmmword_1B577F270;
        *(void *)(a2 + 16) = 0;
        return result;
      }
      uint64_t v10 = (uint64_t)result;
      unint64_t v11 = v8;
      uint64_t v19 = result;
      unint64_t v20 = v8;
      uint64_t v21 = v9;
      uint64_t v12 = readEntireBuffer #1 (_:) in NewSessionTicket.init(bytes:)((uint64_t *)&v19);
      unint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t v17 = 0;
      switch(v11 >> 62)
      {
        case 1uLL:
          uint64_t v17 = v10 >> 32;
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v10 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v17 = BYTE6(v11);
          break;
      }
      if (__OFSUB__(v17, v21)) {
        goto LABEL_23;
      }
      if (v17 == v21)
      {
        Swift::OpaquePointer_optional result = (uint64_t *)outlined consume of ByteBuffer?(v10, v11);
        *(void *)a2 = v12;
        *(void *)(a2 + 8) = v14;
        *(void *)(a2 + 16) = v16;
      }
      else
      {
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v18 = 1;
        *(unsigned char *)(v18 + 4) = 1;
        swift_willThrow();
        outlined consume of Data._Representation(v12, v14);
        return (uint64_t *)outlined consume of Data._Representation((uint64_t)v19, v20);
      }
      return result;
  }
}

char *specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      if (v4 >> 32 >= v2) {
        goto LABEL_10;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v4 + 24) >= v2) {
        goto LABEL_10;
      }
      return 0;
    case 3uLL:
      if (v2 < 1) {
        goto LABEL_10;
      }
      return 0;
    default:
      if (BYTE6(v5) < v2) {
        return 0;
      }
LABEL_10:
      if (v2 < v1) {
        goto LABEL_42;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      a1[2] = v2;
      uint64_t v6 = ByteBuffer.readSlice(length:)(0);
      unint64_t v23 = v7;
      uint64_t v24 = v6;
      if (v7 >> 60 == 15) {
        return 0;
      }
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v22 = v6 >> 32;
      uint64_t v12 = BYTE6(v7);
      uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = v8;
      unint64_t v21 = v7 >> 62;
      unint64_t v14 = v7 >> 62;
      while (2)
      {
        uint64_t v15 = v13;
        uint64_t v13 = v11;
        uint64_t v16 = BYTE6(v23);
        switch(v14)
        {
          case 1uLL:
            uint64_t v16 = v22;
            goto LABEL_18;
          case 2uLL:
            if (*(void *)(v24 + 24) < v11) {
              goto LABEL_31;
            }
            goto LABEL_23;
          case 3uLL:
            if (v11 < 1) {
              goto LABEL_23;
            }
            uint64_t v12 = 0;
            goto LABEL_35;
          default:
LABEL_18:
            if (v16 >= v11)
            {
LABEL_23:
              if (v11 < v15) {
                goto LABEL_40;
              }
              DataProtocol.copyBytes<A>(to:from:)();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
              }
              unint64_t v18 = *((void *)v9 + 2);
              unint64_t v17 = *((void *)v9 + 3);
              if (v18 >= v17 >> 1) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v9);
              }
              *((void *)v9 + 2) = v18 + 1;
              v9[v18 + 32] = 0;
              if (__OFADD__(v11++, 1)) {
                goto LABEL_39;
              }
              continue;
            }
LABEL_31:
            if (v21)
            {
              uint64_t v12 = v22;
              if (v21 != 1) {
                uint64_t v12 = *(void *)(v24 + 24);
              }
            }
LABEL_35:
            if (__OFSUB__(v12, v15)) {
              goto LABEL_43;
            }
            if (v12 == v15)
            {
              outlined consume of ByteBuffer?(v24, v23);
            }
            else
            {
              lazy protocol witness table accessor for type TLSError and conformance TLSError();
              swift_allocError();
              *(_DWORD *)uint64_t v20 = 1;
              *(unsigned char *)(v20 + 4) = 1;
              swift_willThrow();
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(v24, v23);
            }
            return v9;
        }
      }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  uint64_t v1 = a1[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2)) {
    goto LABEL_44;
  }
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      if (v4 >> 32 >= v2) {
        goto LABEL_10;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v4 + 24) >= v2) {
        goto LABEL_10;
      }
      return 0;
    case 3uLL:
      if (v2 < 1) {
        goto LABEL_10;
      }
      return 0;
    default:
      if (BYTE6(v5) < v2) {
        return 0;
      }
LABEL_10:
      if (v2 < v1) {
        goto LABEL_45;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      a1[2] = v2;
      uint64_t v25 = ByteBuffer.readSlice(length:)(bswap32(0) >> 16);
      uint64_t v8 = v6;
      if (v6 >> 60 == 15) {
        return 0;
      }
      uint64_t v11 = v7;
      uint64_t v12 = 0;
      uint64_t v13 = BYTE6(v6);
      switch(v6 >> 62)
      {
        case 1uLL:
          uint64_t v12 = v25 >> 32;
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v25 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v12 = BYTE6(v6);
          break;
      }
      uint64_t v24 = v6 >> 62;
      unint64_t v14 = __OFSUB__(v12, v7);
      uint64_t v15 = v12 - v7;
      if (v14) {
        goto LABEL_46;
      }
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v15 / 2) & ~((v15 + (v15 < 0)) >> 63), 0, MEMORY[0x1E4FBC860]);
      unint64_t v17 = v11 + 2;
      if (__OFADD__(v11, 2))
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
      }
      uint64_t v9 = v16;
      unint64_t v18 = v11;
      while (2)
      {
        uint64_t v19 = v18;
        unint64_t v18 = v17;
        uint64_t v20 = v13;
        switch((int)v24)
        {
          case 1:
            uint64_t v20 = v25 >> 32;
            goto LABEL_23;
          case 2:
            if (*(void *)(v25 + 24) < v17) {
              goto LABEL_34;
            }
            goto LABEL_28;
          case 3:
            if (v17 < 1) {
              goto LABEL_28;
            }
            uint64_t v13 = 0;
            goto LABEL_38;
          default:
LABEL_23:
            if (v20 >= v17)
            {
LABEL_28:
              if (v17 < v19) {
                goto LABEL_43;
              }
              DataProtocol.copyBytes<A>(to:from:)();
              uint64_t v22 = *((void *)v9 + 2);
              unint64_t v21 = *((void *)v9 + 3);
              if (v22 >= v21 >> 1) {
                uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v9);
              }
              *((void *)v9 + 2) = v22 + 1;
              *(_WORD *)&v9[2 * v22 + 32] = bswap32(0) >> 16;
              unint64_t v14 = __OFADD__(v17, 2);
              v17 += 2;
              if (v14) {
                goto LABEL_42;
              }
              continue;
            }
LABEL_34:
            if (v24)
            {
              uint64_t v13 = v25 >> 32;
              if (v24 != 1) {
                uint64_t v13 = *(void *)(v25 + 24);
              }
            }
LABEL_38:
            if (__OFSUB__(v13, v19)) {
              goto LABEL_47;
            }
            if (v13 == v19)
            {
              outlined consume of ByteBuffer?(v25, v8);
            }
            else
            {
              lazy protocol witness table accessor for type TLSError and conformance TLSError();
              swift_allocError();
              *(_DWORD *)unint64_t v23 = 1;
              *(unsigned char *)(v23 + 4) = 1;
              swift_willThrow();
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(v25, v8);
            }
            return v9;
        }
      }
  }
}

uint64_t specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(uint64_t *a1)
{
  return specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t (*)(uint64_t *))readBinderEntries #1 (_:) in ByteBuffer.readOfferedPSKs());
}

{
  return specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t (*)(uint64_t *))readIdentities #1 (_:) in ByteBuffer.readOfferedPSKs());
}

{
  return specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t (*)(uint64_t *))readExtensions #1 (_:) in ClientHello.init(bytes:));
}

{
  return specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t (*)(uint64_t *))readExtensions #1 (_:) in EncryptedExtensions.init(bytes:));
}

{
  return specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t (*)(uint64_t *))readExtensions #1 (_:) in CertificateRequest.init(bytes:));
}

{
  return specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t (*)(uint64_t *))readExtensions #1 (_:) in NewSessionTicket.init(bytes:));
}

{
  return specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t (*)(uint64_t *))readExtensions #1 (_:) in ByteBuffer.readCertificateEntry());
}

uint64_t specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[2];
  uint64_t v4 = v3 + 2;
  if (__OFADD__(v3, 2))
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 >= v4) {
        goto LABEL_10;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v6 + 24) >= v4) {
        goto LABEL_10;
      }
      return 0;
    case 3uLL:
      if (v4 < 1) {
        goto LABEL_10;
      }
      return 0;
    default:
      if (BYTE6(v7) < v4) {
        return 0;
      }
LABEL_10:
      uint64_t v18 = *a1;
      unint64_t v19 = v7;
      if (v4 < v3) {
        goto LABEL_25;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      a1[2] = v4;
      uint64_t v9 = ByteBuffer.readSlice(length:)(bswap32(0) >> 16);
      if (v10 >> 60 != 15)
      {
        uint64_t v18 = v9;
        unint64_t v19 = v10;
        uint64_t v20 = v11;
        uint64_t v12 = a2(&v18);
        uint64_t v14 = v18;
        unint64_t v15 = v19;
        if (v2)
        {
LABEL_22:
          outlined consume of Data._Representation(v14, v15);
          return v12;
        }
        uint64_t v16 = 0;
        switch(v19 >> 62)
        {
          case 1uLL:
            uint64_t v16 = v18 >> 32;
            break;
          case 2uLL:
            uint64_t v16 = *(void *)(v18 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v16 = BYTE6(v19);
            break;
        }
        if (!__OFSUB__(v16, v20))
        {
          if (v16 != v20)
          {
            lazy protocol witness table accessor for type TLSError and conformance TLSError();
            swift_allocError();
            *(_DWORD *)uint64_t v17 = 1;
            *(unsigned char *)(v17 + 4) = 1;
            swift_willThrow();
            swift_bridgeObjectRelease();
            uint64_t v14 = v18;
            unint64_t v15 = v19;
          }
          goto LABEL_22;
        }
LABEL_26:
        __break(1u);
      }
      return 0;
  }
}

uint64_t specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)result;
  unint64_t v7 = *(void *)(result + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v4) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v6 + 24) < v4) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 3uLL:
      if (v4 < 1) {
        goto LABEL_10;
      }
      goto LABEL_12;
    default:
      if (BYTE6(v7) < v4) {
        goto LABEL_12;
      }
LABEL_10:
      if (v4 < v3) {
        goto LABEL_24;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      *(void *)(v5 + 16) = v4;
      Swift::OpaquePointer_optional result = ByteBuffer.readSlice(length:)(0);
      if (v8 >> 60 == 15)
      {
LABEL_12:
        *(_OWORD *)a2 = xmmword_1B577F270;
        *(void *)(a2 + 16) = 0;
        return result;
      }
      unint64_t v10 = v8;
      uint64_t v11 = result;
      uint64_t v12 = v9;
      switch(v8 >> 62)
      {
        case 1uLL:
          uint64_t v13 = result >> 32;
          if (result >> 32 < (int)result) {
            goto LABEL_26;
          }
          outlined copy of Data._Representation(result, v8);
          uint64_t v14 = v11 >> 32;
          break;
        case 2uLL:
          uint64_t v13 = *(void *)(result + 24);
          if (v13 < *(void *)(result + 16)) {
            goto LABEL_27;
          }
          outlined copy of Data._Representation(result, v8);
          uint64_t v14 = *(void *)(v11 + 24);
          break;
        case 3uLL:
          goto LABEL_22;
        default:
          uint64_t v13 = BYTE6(v8);
          uint64_t v14 = BYTE6(v8);
          break;
      }
      if (__OFSUB__(v14, v13)) {
        goto LABEL_25;
      }
      if (v14 == v13)
      {
LABEL_22:
        Swift::OpaquePointer_optional result = outlined consume of ByteBuffer?(v11, v10);
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = v10;
        *(void *)(a2 + 16) = v12;
      }
      else
      {
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v15 = 1;
        *(unsigned char *)(v15 + 4) = 1;
        swift_willThrow();
        outlined consume of ByteBuffer?(v11, v10);
        return outlined consume of Data._Representation(v11, v10);
      }
      return result;
  }
}

void *specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[2];
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      if (v4 >> 32 >= v2) {
        goto LABEL_10;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v4 + 24) >= v2) {
        goto LABEL_10;
      }
      return 0;
    case 3uLL:
      if (v2 < 1) {
        goto LABEL_10;
      }
      return 0;
    default:
      if (BYTE6(v5) < v2) {
        return 0;
      }
LABEL_10:
      uint64_t v15 = *a1;
      unint64_t v16 = v5;
      if (v2 < v1) {
        goto LABEL_23;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      a1[2] = v2;
      uint64_t v6 = ByteBuffer.readSlice(length:)(0);
      if (v7 >> 60 == 15) {
        return 0;
      }
      uint64_t v11 = v6;
      unint64_t v12 = v7;
      uint64_t v15 = v6;
      unint64_t v16 = v7;
      uint64_t v17 = v8;
      uint64_t v9 = readCompressionMethods #1 (_:) in ClientHello.init(bytes:)(&v15);
      uint64_t v13 = 0;
      switch(v12 >> 62)
      {
        case 1uLL:
          uint64_t v13 = v11 >> 32;
          break;
        case 2uLL:
          uint64_t v13 = *(void *)(v11 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v12);
          break;
      }
      if (__OFSUB__(v13, v17)) {
        goto LABEL_24;
      }
      if (v13 == v17)
      {
        outlined consume of ByteBuffer?(v11, v12);
      }
      else
      {
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v14 = 1;
        *(unsigned char *)(v14 + 4) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v15, v16);
      }
      return v9;
  }
}

uint64_t closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *)@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v106 = a5;
  uint64_t v94 = a3;
  uint64_t v95 = a2;
  uint64_t v104 = a6;
  uint64_t v105 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v96 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = *(void *)(v9 + 8);
  uint64_t v90 = *(void *)(*(void *)(v102 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v87 = (char *)v82 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v82 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v13);
  uint64_t v88 = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  long long v91 = (char *)v82 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  unint64_t v103 = (char *)v82 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v100 = (char *)v82 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  long long v93 = (char *)v82 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  long long v92 = (char *)v82 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  long long v101 = (char *)v82 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  long long v33 = (char *)v82 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  long long v36 = (char *)v82 - v35;
  uint64_t v99 = a1;
  ByteBuffer.readInteger<A>(as:)(v34, a4, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v104, 1, 1, v106);
  }
  unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v84 = v16 + 32;
  uint64_t v83 = v37;
  v37(v36, v15, a4);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v38(v33, v36, a4);
  char v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v40 = v101;
  uint64_t v86 = v33;
  uint64_t v98 = v38;
  v38(v101, v33, a4);
  uint64_t v85 = v36;
  uint64_t v97 = v16;
  if ((v39 & 1) == 0)
  {
    long long v101 = *(char **)(v16 + 8);
    ((void (*)(char *, uint64_t))v101)(v40, a4);
    uint64_t v44 = v86;
    unint64_t v46 = v103;
    uint64_t v42 = a4;
    goto LABEL_21;
  }
  uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  long long v101 = *(char **)(v16 + 8);
  ((void (*)(char *, uint64_t))v101)(v40, a4);
  uint64_t v42 = a4;
  if (v41 <= 64)
  {
    uint64_t v44 = v86;
    unint64_t v46 = v103;
    goto LABEL_21;
  }
  v82[1] = v16 + 8;
  unint64_t v43 = v92;
  uint64_t v44 = v86;
  v98(v92, v86, a4);
  int64_t v112 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v46 = v103;
    uint64_t v47 = (void (*)(char *, uint64_t))v101;
    if (v45 >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v48 = v43;
      unint64_t v49 = v93;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v53 = dispatch thunk of BinaryInteger._lowWord.getter();
    v47(v43, v42);
    if (v53 < v112) {
      goto LABEL_49;
    }
    goto LABEL_21;
  }
  char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
  unint64_t v46 = v103;
  uint64_t v47 = (void (*)(char *, uint64_t))v101;
  if ((v50 & 1) == 0)
  {
    if (v51 >= 64)
    {
      ((void (*)(char *, uint64_t))v101)(v43, v42);
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v51 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v49 = v93;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v48 = v92;
LABEL_13:
    char v52 = dispatch thunk of static Comparable.< infix(_:_:)();
    v47(v49, v42);
    v47(v48, v42);
    if (v52) {
      goto LABEL_49;
    }
    goto LABEL_21;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v54 = v93;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v55 = v92;
  LODWORD(v90) = dispatch thunk of static Comparable.< infix(_:_:)();
  v47(v54, v42);
  unint64_t v56 = v88;
  v83(v88, v55, v42);
  if (v90)
  {
LABEL_48:
    v47(v56, v42);
    goto LABEL_49;
  }
  long long v92 = (char *)v112;
  uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
  v47(v56, v42);
  if (v57 < (uint64_t)v92)
  {
LABEL_49:
    __break(1u);
    JUMPOUT(0x1B5713474);
  }
LABEL_21:
  uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v59 = v100;
  v98(v100, v44, v42);
  if (v58 < 65)
  {
    uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v47 = (void (*)(char *, uint64_t))v101;
    ((void (*)(char *, uint64_t))v101)(v59, v42);
    if (v65 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v47 = (void (*)(char *, uint64_t))v101;
    ((void (*)(char *, uint64_t))v101)(v59, v42);
  }
  v98(v46, v44, v42);
  int64_t v112 = 0x7FFFFFFFFFFFFFFFLL;
  char v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v61 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v60)
  {
    if (v61 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v62 = v93;
      unint64_t v56 = (char *)v42;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
      v47(v62, v42);
      long long v64 = v46;
      goto LABEL_32;
    }
LABEL_30:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v47(v46, v42);
    goto LABEL_33;
  }
  if (v61 <= 63) {
    goto LABEL_30;
  }
  uint64_t v108 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v66 = v93;
  v83(v93, v46, v42);
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v67 = v91;
  unint64_t v56 = (char *)v42;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
  v47(v67, v42);
  long long v64 = v66;
LABEL_32:
  v47(v64, v42);
  if (v63)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_33:
  uint64_t v68 = dispatch thunk of BinaryInteger._lowWord.getter();
  v47(v44, v42);
  uint64_t v69 = ByteBuffer.readSlice(length:)(v68);
  if (v70 >> 60 == 15)
  {
    v47(v85, v42);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v104, 1, 1, v106);
  }
  uint64_t v109 = v69;
  unint64_t v110 = v70;
  uint64_t v111 = v71;
  uint64_t v73 = v96;
  unint64_t v56 = v94;
  uint64_t v74 = v107;
  v95(&v109);
  uint64_t v75 = v109;
  unint64_t v76 = v110;
  if (v74) {
    goto LABEL_45;
  }
  uint64_t v77 = 0;
  switch(v110 >> 62)
  {
    case 1uLL:
      uint64_t v77 = v109 >> 32;
      break;
    case 2uLL:
      uint64_t v77 = *(void *)(v109 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v77 = BYTE6(v110);
      break;
  }
  if (__OFSUB__(v77, v111)) {
    goto LABEL_47;
  }
  if (v77 == v111)
  {
    outlined consume of Data._Representation(v109, v110);
    v47(v85, v42);
    uint64_t v79 = v104;
    uint64_t v78 = v105;
    uint64_t v80 = v106;
    (*(void (**)(uint64_t, char *, uint64_t))(v105 + 32))(v104, v73, v106);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v79, 0, 1, v80);
  }
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  *(_DWORD *)uint64_t v81 = 1;
  *(unsigned char *)(v81 + 4) = 1;
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v73, v106);
  uint64_t v75 = v109;
  unint64_t v76 = v110;
LABEL_45:
  outlined consume of Data._Representation(v75, v76);
  return ((uint64_t (*)(char *, uint64_t))v47)(v85, v42);
}

uint64_t ByteBuffer.rewindOnNilOrError<A>(_:)@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v10 = *v3;
  unint64_t v9 = v3[1];
  uint64_t v11 = v3[2];
  outlined copy of Data._Representation(*v3, v9);
  uint64_t v12 = v20;
  a1(v3);
  if (v12)
  {
    outlined consume of Data._Representation(*v3, v3[1]);
    *uint64_t v3 = v10;
    v3[1] = v9;
    v3[2] = v11;
    return swift_willThrow();
  }
  else
  {
    uint64_t v20 = v11;
    uint64_t v14 = *(void *)(a2 - 8);
    int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, a2);
    uint64_t v16 = v19;
    if (v15 == 1)
    {
      outlined consume of Data._Representation(*v3, v3[1]);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
      *uint64_t v3 = v10;
      v3[1] = v9;
      uint64_t v17 = 1;
      v3[2] = v20;
    }
    else
    {
      outlined consume of Data._Representation(v10, v9);
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v16, v8, a2);
      uint64_t v17 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v16, v17, 1, a2);
  }
}

uint64_t ByteBuffer.readVariableLengthVectorUInt24<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return ByteBuffer.rewindOnNilOrError<A>(_:)((void (*)(uint64_t *))partial apply for closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:), a1, a2);
}

void *specialized closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 >= v3) {
        goto LABEL_10;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v5 + 24) >= v3) {
        goto LABEL_10;
      }
      return 0;
    case 3uLL:
      if (v3 < 1) {
        goto LABEL_10;
      }
      return 0;
    default:
      if (BYTE6(v6) < v3) {
        return 0;
      }
LABEL_10:
      if (v3 < v2) {
        goto LABEL_26;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      a1[2] = v3;
      uint64_t v7 = specialized ByteBuffer.readInteger<A>(as:)();
      if ((v7 & 0x10000) == 0)
      {
        uint64_t v8 = ByteBuffer.readSlice(length:)((unsigned __int16)v7);
        if (v9 >> 60 != 15)
        {
          uint64_t v17 = v8;
          unint64_t v18 = v9;
          uint64_t v19 = v10;
          uint64_t v11 = readCertificateEntries #1 (_:) in CertificateMessage.init(bytes:)();
          uint64_t v13 = v17;
          unint64_t v14 = v18;
          if (v1)
          {
LABEL_23:
            outlined consume of Data._Representation(v13, v14);
            return v11;
          }
          uint64_t v15 = 0;
          switch(v18 >> 62)
          {
            case 1uLL:
              uint64_t v15 = v17 >> 32;
              break;
            case 2uLL:
              uint64_t v15 = *(void *)(v17 + 24);
              break;
            case 3uLL:
              break;
            default:
              uint64_t v15 = BYTE6(v18);
              break;
          }
          if (!__OFSUB__(v15, v19))
          {
            if (v15 != v19)
            {
              lazy protocol witness table accessor for type TLSError and conformance TLSError();
              swift_allocError();
              *(_DWORD *)uint64_t v16 = 1;
              *(unsigned char *)(v16 + 4) = 1;
              swift_willThrow();
              swift_bridgeObjectRelease();
              uint64_t v13 = v17;
              unint64_t v14 = v18;
            }
            goto LABEL_23;
          }
LABEL_27:
          __break(1u);
        }
      }
      return 0;
  }
}

uint64_t closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v34 = 0;
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  uint64_t v15 = *a1;
  unint64_t v16 = a1[1];
  switch(v16 >> 62)
  {
    case 1uLL:
      if (v15 >> 32 < v14) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v15 + 24) < v14) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      goto LABEL_10;
    case 3uLL:
      if (v14 < 1) {
        goto LABEL_10;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
    default:
      if (BYTE6(v16) < v14) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
LABEL_10:
      uint64_t v35 = *a1;
      unint64_t v36 = v16;
      if (v14 < v13) {
        goto LABEL_25;
      }
      v28[1] = v10;
      uint64_t v29 = v9;
      uint64_t v30 = v12;
      uint64_t v31 = &v35;
      uint64_t v32 = v13;
      uint64_t v33 = v13 + 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      uint64_t v17 = v34;
      a1[2] = v14;
      uint64_t v18 = specialized ByteBuffer.readInteger<A>(as:)();
      if ((v18 & 0x10000) != 0) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      uint64_t v19 = ByteBuffer.readSlice(length:)((unsigned __int16)v18 | (unint64_t)(v17 << 16));
      if (v20 >> 60 == 15) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      uint64_t v35 = v19;
      unint64_t v36 = v20;
      uint64_t v37 = v21;
      uint64_t v23 = v30;
      v29(&v35);
      uint64_t v24 = v35;
      unint64_t v25 = v36;
      if (v3) {
        return outlined consume of Data._Representation(v24, v25);
      }
      uint64_t v26 = 0;
      switch(v36 >> 62)
      {
        case 1uLL:
          uint64_t v26 = v35 >> 32;
          break;
        case 2uLL:
          uint64_t v26 = *(void *)(v35 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v26 = BYTE6(v36);
          break;
      }
      if (__OFSUB__(v26, v37)) {
        goto LABEL_26;
      }
      if (v26 == v37)
      {
        outlined consume of Data._Representation(v35, v36);
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v23, a2);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, a2);
      }
      else
      {
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v27 = 1;
        *(unsigned char *)(v27 + 4) = 1;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v23, a2);
        uint64_t v24 = v35;
        unint64_t v25 = v36;
        return outlined consume of Data._Representation(v24, v25);
      }
  }
}

Swift::Int_optional __swiftcall ByteBuffer.readUInt24()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 >= 1) {
        goto LABEL_15;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 < v2)
      {
LABEL_15:
        Swift::Int v6 = 0;
        Swift::Bool v8 = 1;
        goto LABEL_19;
      }
LABEL_7:
      if (v2 < v1) {
        goto LABEL_18;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      v0[2] = v2;
      Swift::Int v6 = specialized ByteBuffer.readInteger<A>(as:)();
      BOOL v7 = (v6 & 0x10000) == 0;
      if ((v6 & 0x10000) != 0) {
        Swift::Int v6 = 0;
      }
      else {
        Swift::Int v6 = (unsigned __int16)v6;
      }
      Swift::Bool v8 = !v7;
LABEL_19:
      result.uint64_t value = v6;
      result.is_nil = v8;
      return result;
  }
}

uint64_t ByteBuffer.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned __int8 v4 = BYTE6(a3);
  unint64_t v5 = a3 >> 62;
  uint64_t v7 = 0;
  switch(v5)
  {
    case 1uLL:
      uint64_t v7 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = v4;
      break;
  }
  if (v7 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B5713EC0);
  }
  uint64_t v8 = Data._Representation.subscript.getter();
  unint64_t v10 = v9;
  Data.hash(into:)();

  return outlined consume of Data._Representation(v8, v10);
}

Swift::Int ByteBuffer.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  if (v6 < a3)
  {
    __break(1u);
    JUMPOUT(0x1B5713F98);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v9);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ByteBuffer()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B571406CLL);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ByteBuffer()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v3 = BYTE6(v2);
      break;
  }
  if (v3 < v0[2])
  {
    __break(1u);
    JUMPOUT(0x1B5714128);
  }
  uint64_t v4 = Data._Representation.subscript.getter();
  unint64_t v6 = v5;
  Data.hash(into:)();

  return outlined consume of Data._Representation(v4, v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ByteBuffer()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B57141F8);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  return Hasher._finalize()();
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32);
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v5, v6);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = Data._Representation.replaceSubrange(_:with:count:)();
      break;
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          unint64_t v8 = (void *)swift_allocObject();
          size_t v12 = _swift_stdlib_malloc_size(v8);
          void v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        outlined copy of Data._Representation(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        outlined consume of Data._Representation(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1B5714664);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized static ByteBuffer.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unsigned __int8 v7 = BYTE6(a2);
  unint64_t v8 = a2 >> 62;
  uint64_t v11 = 0;
  switch(v8)
  {
    case 1uLL:
      uint64_t v11 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v11 = v7;
      break;
  }
  if (v11 < a3)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v12 = Data._Representation.subscript.getter();
  unint64_t v14 = v13;
  uint64_t v15 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v15 = a4 >> 32;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(a4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v15 = BYTE6(a5);
      break;
  }
  if (v15 < a6)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1B57147A4);
  }
  uint64_t v16 = Data._Representation.subscript.getter();
  unint64_t v18 = v17;
  char v19 = specialized static Data.== infix(_:_:)(v12, v14, v16, v17);
  outlined consume of Data._Representation(v16, v18);
  outlined consume of Data._Representation(v12, v14);
  return v19 & 1;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t partial apply for closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, *(void (**)(uint64_t *))(v2 + 40), *(char **)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in ByteBuffer.writeInteger<A>(_:as:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ByteBuffer.writeInteger<A>(_:as:)(a1, a2, *(void *)(v2 + 16));
}

void partial apply for closure #1 in ByteBuffer.readInteger<A>(as:)(uint64_t *a1@<X8>)
{
  closure #1 in ByteBuffer.readInteger<A>(as:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in ByteBuffer.setInteger<A>(_:at:as:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ByteBuffer.setInteger<A>(_:at:as:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type ByteBuffer and conformance ByteBuffer()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteBuffer and conformance ByteBuffer;
  if (!lazy protocol witness table cache variable for type ByteBuffer and conformance ByteBuffer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteBuffer and conformance ByteBuffer);
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteBuffer()
{
  return &type metadata for ByteBuffer;
}

unint64_t specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  LOBYTE(v11) = 0;
  uint64_t v6 = MEMORY[0x1E4FBB2B8];
  uint64_t v7 = MEMORY[0x1E4F27EF0];
  uint64_t v14 = MEMORY[0x1E4FBB2B8];
  uint64_t v15 = MEMORY[0x1E4F27EF0];
  uint64_t v12 = &v11;
  unint64_t v13 = (__int16 **)((char *)&v11 + 1);
  __swift_project_boxed_opaque_existential_1(&v12, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    do
    {
      __int16 v11 = *(_WORD *)(a2 + v9 + 32);
      uint64_t v14 = v6;
      uint64_t v15 = v7;
      uint64_t v12 = &v11;
      unint64_t v13 = &v12;
      __swift_project_boxed_opaque_existential_1(&v12, v6);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
      if (v9 == 0x7FFFFFFFFFFFFFFELL) {
        __break(1u);
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    if ((v9 & 0x8000000000000000) != 0 || v9 >= 0x100)
    {
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1B5714B48);
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v9, v5);
  return v9 + 1;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  char v11;
  char *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  __int16 v11 = 0;
  uint64_t v6 = MEMORY[0x1E4FBB2B8];
  uint64_t v7 = MEMORY[0x1E4F27EF0];
  uint64_t v14 = MEMORY[0x1E4FBB2B8];
  uint64_t v15 = MEMORY[0x1E4F27EF0];
  uint64_t v12 = &v11;
  unint64_t v13 = &v12;
  __swift_project_boxed_opaque_existential_1(&v12, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v8; ++i)
    {
      __int16 v11 = *(unsigned char *)(a2 + i + 32);
      uint64_t v14 = v6;
      uint64_t v15 = v7;
      uint64_t v12 = &v11;
      unint64_t v13 = &v12;
      __swift_project_boxed_opaque_existential_1(&v12, v6);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
    }
    swift_bridgeObjectRelease();
    if (v8 > 0xFF)
    {
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1B5714D18);
    }
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v8, v5);
  return v8 + 1;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  char v11;
  char *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  __int16 v11 = 0;
  uint64_t v6 = MEMORY[0x1E4FBB2B8];
  uint64_t v7 = MEMORY[0x1E4F27EF0];
  uint64_t v14 = MEMORY[0x1E4FBB2B8];
  uint64_t v15 = MEMORY[0x1E4F27EF0];
  uint64_t v12 = &v11;
  unint64_t v13 = &v12;
  __swift_project_boxed_opaque_existential_1(&v12, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v8; ++i)
    {
      __int16 v11 = *(unsigned char *)(a2 + i + 32);
      uint64_t v14 = v6;
      uint64_t v15 = v7;
      uint64_t v12 = &v11;
      unint64_t v13 = &v12;
      __swift_project_boxed_opaque_existential_1(&v12, v6);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
    }
    swift_bridgeObjectRelease();
    if (v8 > 0xFF)
    {
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1B5714EE8);
    }
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v8, v5);
  return v8 + 1;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v10;
  void v11[6];

  v11[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v6 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(v3);
      break;
  }
  uint64_t v10 = 0;
  v11[3] = MEMORY[0x1E4FBB2B8];
  v11[4] = MEMORY[0x1E4F27EF0];
  v11[0] = &v10;
  v11[1] = v11;
  __swift_project_boxed_opaque_existential_1(v11, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  uint64_t v7 = closure #2 in ClientHello.write(into:)((uint64_t)a1, a2);
  if ((v7 & 0x8000000000000000) != 0 || (uint64_t v8 = v7, v7 >= 0x100))
  {
    outlined release of ClientHello(a2);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B5715098);
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v6);
  return v8 + 1;
}

uint64_t outlined release of ClientHello(uint64_t a1)
{
  return a1;
}

unint64_t specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v13;
  void v14[6];

  void v14[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v9 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      unint64_t v9 = v4 >> 32;
      break;
    case 2uLL:
      unint64_t v9 = *(void *)(v4 + 24);
      break;
    case 3uLL:
      break;
    default:
      unint64_t v9 = BYTE6(v5);
      break;
  }
  unint64_t v13 = 0;
  v14[3] = MEMORY[0x1E4FBB2B8];
  v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = &v13;
  v14[1] = v14;
  __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  uint64_t v10 = ByteBuffer.writeImmutableBuffer(_:)(a2, a3, a4);
  if ((v10 & 0x8000000000000000) != 0 || (__int16 v11 = v10, v10 >= 0x100))
  {
    outlined consume of Data._Representation(a2, a3);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B5715318);
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v10, v9);
  return v11 + 1;
}

unint64_t specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(uint64_t *a1, void *a2)
{
  void v10[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  char v9 = 0;
  v10[3] = MEMORY[0x1E4FBB2B8];
  v10[4] = MEMORY[0x1E4F27EF0];
  v10[0] = &v9;
  v10[1] = v10;
  __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  unint64_t v6 = ByteBuffer.writeImmutableBuffer(_:)(a2[1], a2[2], a2[3]);
  if ((v6 & 0x8000000000000000) != 0 || (unint64_t v7 = v6, v6 >= 0x100))
  {
    outlined release of NewSessionTicket(a2);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B57154C8);
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v5);
  return v7 + 1;
}

uint64_t specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v12 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v12 = v5 >> 32;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(v5 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v12 = BYTE6(v6);
      break;
  }
  LOBYTE(v19) = 0;
  uint64_t v13 = MEMORY[0x1E4FBB2B8];
  uint64_t v14 = MEMORY[0x1E4F27EF0];
  uint64_t v22 = MEMORY[0x1E4FBB2B8];
  uint64_t v23 = MEMORY[0x1E4F27EF0];
  unint64_t v20 = &v19;
  uint64_t v21 = (__int16 **)((char *)&v19 + 1);
  __swift_project_boxed_opaque_existential_1(&v20, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  __int16 v19 = 0;
  uint64_t v22 = v13;
  uint64_t v23 = v14;
  unint64_t v20 = &v19;
  uint64_t v21 = &v20;
  __swift_project_boxed_opaque_existential_1(&v20, v13);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  uint64_t v15 = closure #2 in CertificateMessage.write(into:)(a1, a2, a3, a4, a5);
  if (v15 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  uint64_t v16 = v15;
  uint64_t v17 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v15), v12);
  if (__OFADD__(v12, v17)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v16, v12 + v17);
  return v16 + 3;
}

uint64_t specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v9 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v4 >> 32;
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(v4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v9 = BYTE6(v5);
      break;
  }
  LOBYTE(v16) = 0;
  uint64_t v10 = MEMORY[0x1E4FBB2B8];
  uint64_t v11 = MEMORY[0x1E4F27EF0];
  uint64_t v19 = MEMORY[0x1E4FBB2B8];
  uint64_t v20 = MEMORY[0x1E4F27EF0];
  uint64_t v17 = &v16;
  unint64_t v18 = (__int16 **)((char *)&v16 + 1);
  __swift_project_boxed_opaque_existential_1(&v17, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  __int16 v16 = 0;
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  uint64_t v17 = &v16;
  unint64_t v18 = &v17;
  __swift_project_boxed_opaque_existential_1(&v17, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  uint64_t v12 = ByteBuffer.writeImmutableBuffer(_:)(a2, a3, a4);
  if (v12 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  uint64_t v13 = v12;
  uint64_t v14 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v12), v9);
  if (__OFADD__(v9, v14)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v13, v9 + v14);
  return v13 + 3;
}

void *outlined release of NewSessionTicket(void *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  outlined consume of Data._Representation(a1[1], a1[2]);
  outlined consume of Data._Representation(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t static HKDF.expandLabel<A, B>(secret:label:context:length:)(int64_t a1, Swift::Int a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, char a8)
{
  LOBYTE(v9) = a8;
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E4FBC860]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000) {
    goto LABEL_17;
  }
  uint64_t v8 = v14;
  unint64_t v16 = *((void *)v14 + 2);
  unint64_t v15 = *((void *)v14 + 3);
  int64_t v17 = v15 >> 1;
  unint64_t v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v14);
    unint64_t v15 = *((void *)v8 + 3);
    int64_t v17 = v15 >> 1;
  }
  *((void *)v8 + 2) = v18;
  v8[v16 + 32] = BYTE1(a5);
  int64_t v19 = v16 + 2;
  if (v17 < v19) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v19, 1, v8);
  }
  *((void *)v8 + 2) = v19;
  v8[v18 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v20 = String.UTF8View._foreignCount()();
    if ((v20 & 0x8000000000000000) != 0)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      unint64_t v20 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    unint64_t v20 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v20 >= 0x100) {
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v9 = v20 + 6;
  unint64_t v21 = v9 >> 8;
  if ((v9 & 0x100) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  a7 = *((void *)v8 + 2);
  unint64_t v21 = *((void *)v8 + 3);
  a1 = a7 + 1;
  if (a7 >= v21 >> 1) {
LABEL_19:
  }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), a1, 1, v8);
  *((void *)v8 + 2) = a1;
  v8[a7 + 32] = v9;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  Swift::Int v22 = specialized Array.append<A>(contentsOf:)(a2, a3);
  MEMORY[0x1F4188790](v22);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized Array.append<A>(contentsOf:)(Swift::Int result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = String.UTF8View._foreignCount()();
    uint64_t v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v4;
    if (!isUniquelyReferenced_nonNull_native || *((void *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6) {
        int64_t v8 = v5 + v3;
      }
      else {
        int64_t v8 = v5;
      }
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *uint64_t v2 = v4;
    }
    swift_bridgeObjectRetain();
    unint64_t result = _StringGuts.copyUTF8(into:)();
    if (v9) {
      goto LABEL_22;
    }
    uint64_t v10 = result;
    unint64_t result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *uint64_t v2 = v4;
        return result;
      }
      uint64_t v11 = *((void *)v4 + 2);
      BOOL v12 = __OFADD__(v11, v10);
      uint64_t v13 = v11 + v10;
      if (!v12)
      {
        *((void *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, char *a2)
{
  int64_t v5 = (int64_t)&a2[-result];
  if (result) {
    int64_t v6 = (int64_t)&a2[-result];
  }
  else {
    int64_t v6 = 0;
  }
  uint64_t v7 = *v2;
  int64_t v8 = *(void *)(*v2 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v3 = a2;
  uint64_t v4 = (char *)result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || (int64_t v10 = *(void *)(v7 + 24) >> 1, v10 < v9))
  {
    if (v8 <= v9) {
      int64_t v11 = v8 + v6;
    }
    else {
      int64_t v11 = v8;
    }
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v7);
    uint64_t v7 = result;
    int64_t v10 = *(void *)(result + 24) >> 1;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  int64_t v13 = v10 - v12;
  int64_t v14 = 0;
  if (v4 && v3 && v4 < v3 && v10 != v12)
  {
    if (v5 >= v13) {
      int64_t v14 = v10 - v12;
    }
    else {
      int64_t v14 = v5;
    }
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }
    unint64_t result = (uint64_t)memmove((void *)(v7 + v12 + 32), v4, v14);
    v4 += v14;
  }
  if (v14 < v6) {
    goto LABEL_27;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(v7 + 16);
    BOOL v16 = __OFADD__(v15, v14);
    int64_t v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_33;
    }
    *(void *)(v7 + 16) = v17;
  }
  if (v14 != v13) {
    goto LABEL_25;
  }
LABEL_28:
  int64_t v17 = *(void *)(v7 + 16);
  if (!v4)
  {
LABEL_33:
    if (!v3) {
      goto LABEL_25;
    }
    uint64_t v4 = 0;
    goto LABEL_35;
  }
  if (!v3 || v4 != v3)
  {
LABEL_35:
    char v20 = *v4;
    unint64_t v18 = v4 + 1;
    char v19 = v20;
    while (1)
    {
      while (1)
      {
        unint64_t v21 = *(void *)(v7 + 24);
        int64_t v22 = v21 >> 1;
        uint64_t v23 = v17 + 1;
        if ((uint64_t)(v21 >> 1) >= v17 + 1) {
          break;
        }
        uint64_t v26 = (char *)v7;
        int64_t v27 = v17;
        unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v17 + 1, 1, v26);
        int64_t v17 = v27;
        uint64_t v7 = result;
        int64_t v22 = *(void *)(result + 24) >> 1;
        if (v17 < v22) {
          goto LABEL_39;
        }
LABEL_36:
        *(void *)(v7 + 16) = v17;
      }
      if (v17 >= v22) {
        goto LABEL_36;
      }
LABEL_39:
      *(unsigned char *)(v7 + v17 + 32) = v19;
      if (v3 && v3 == v18)
      {
LABEL_49:
        *(void *)(v7 + 16) = v23;
        break;
      }
      uint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = (uint64_t)&v18[v24 + 1];
        char v19 = v18[v24];
        if (~v17 + v22 == v24) {
          break;
        }
        *(unsigned char *)(v7 + v17 + 33 + v24++) = v19;
        if (v3 && (char *)v25 == v3)
        {
          uint64_t v23 = v17 + v24 + 1;
          goto LABEL_49;
        }
      }
      v18 += v24 + 1;
      int64_t v17 = v22;
      *(void *)(v7 + 16) = v22;
    }
  }
LABEL_25:
  *uint64_t v2 = v7;
  return result;
}

uint64_t closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(uint64_t a1, char *a2, char **a3)
{
  if (a1)
  {
    char v6 = (_BYTE)a2 - a1;
    if ((uint64_t)&a2[-a1] < 256) {
      goto LABEL_5;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  char v6 = 0;
LABEL_5:
  uint64_t v7 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
    *a3 = v7;
  }
  unint64_t v10 = *((void *)v7 + 2);
  unint64_t v9 = *((void *)v7 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v10 + 1;
  v7[v10 + 32] = v6;
  *a3 = v7;
  return specialized Array.append<A>(contentsOf:)(a1, a2);
}

uint64_t static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(int64_t a1, Swift::Int a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unint64_t v12 = dispatch thunk of static Digest.byteCount.getter();
  return static HKDF.expandLabel<A, B>(secret:label:context:length:)(a1, a2, a3, a4, v12, a5, a6, AssociatedTypeWitness);
}

uint64_t static HKDF.tlsExporter<A>(secret:label:context:)@<X0>(int64_t a1@<X0>, Swift::Int a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a4;
  Swift::Int v20 = a2;
  unint64_t v21 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int64_t v13 = (char *)&v20 - v12;
  unint64_t v14 = type metadata accessor for SymmetricKey();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static HashFunction.zeroHash.getter(a5);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(a1, v20, v21, (uint64_t)v13, a5, v22);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  unint64_t v18 = dispatch thunk of static Digest.byteCount.getter();
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
  static HKDF.expandLabel<A, B>(secret:label:context:length:)((int64_t)v17, 0x726574726F707865, 0xE800000000000000, v25, v18, a5, v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v17, v14);
}

uint64_t static HKDF.extract(inputKeyMaterial:salt:)()
{
  return SymmetricKey.withUnsafeBytes<A>(_:)();
}

uint64_t partial apply for closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(uint64_t a1, char *a2)
{
  return closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(a1, a2, *(char ***)(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey()
{
  unint64_t result = lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey;
  if (!lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey)
  {
    type metadata accessor for SymmetricKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey);
  }
  return result;
}

uint64_t partial apply for closure #1 in static HKDF.extract(inputKeyMaterial:salt:)()
{
  return static HKDF.extract<A>(inputKeyMaterial:salt:)();
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1BA99E540](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t ByteBuffer.readQUICTransportParameters(messageType:)(unsigned __int8 a1)
{
  if (a1 == 8 || a1 == 1)
  {
    uint64_t v3 = *v1;
    unint64_t v4 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v6 = 0;
    switch(v4 >> 62)
    {
      case 1uLL:
        uint64_t v6 = v3 >> 32;
        break;
      case 2uLL:
        uint64_t v6 = *(void *)(v3 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v6 = BYTE6(v4);
        break;
    }
    BOOL v10 = __OFSUB__(v6, v5);
    uint64_t v11 = v6 - v5;
    if (v10)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = v5 + v11;
      if (!__OFADD__(v5, v11))
      {
        switch(v4 >> 62)
        {
          case 1uLL:
            if (v3 >> 32 < v12) {
              goto LABEL_21;
            }
            goto LABEL_18;
          case 2uLL:
            if (*(void *)(v3 + 24) >= v12) {
              goto LABEL_18;
            }
            goto LABEL_21;
          case 3uLL:
            if (v12 > 0) {
              goto LABEL_21;
            }
            goto LABEL_18;
          default:
            if (BYTE6(v4) < v12)
            {
LABEL_21:
              lazy protocol witness table accessor for type TLSError and conformance TLSError();
              swift_allocError();
              *(_DWORD *)uint64_t v8 = 0;
              char v9 = 1;
              goto LABEL_22;
            }
LABEL_18:
            if (v12 >= v5)
            {
              uint64_t result = Data._Representation.subscript.getter();
              v1[2] = v12;
              return result;
            }
            break;
        }
LABEL_25:
        __break(1u);
        JUMPOUT(0x1B57166ECLL);
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  int v7 = a1 | 0x390000;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  char v9 = 0;
  *(_DWORD *)uint64_t v8 = v7;
LABEL_22:
  *(unsigned char *)(v8 + 4) = v9;
  return swift_willThrow();
}

uint64_t Extension.QUICTransportParameters.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = BYTE6(a3);
      break;
  }
  if (v7 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B57167FCLL);
  }
  uint64_t v8 = Data._Representation.subscript.getter();
  unint64_t v10 = v9;
  Data.hash(into:)();
  outlined consume of Data._Representation(v8, v10);

  return outlined consume of Data._Representation(a2, a3);
}

Swift::Int Extension.QUICTransportParameters.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
LABEL_5:
      outlined copy of Data._Representation(a1, a2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  if (v6 < a3)
  {
    __break(1u);
    JUMPOUT(0x1B57168F0);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v9);
  outlined consume of Data._Representation(a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.QUICTransportParameters()
{
  return Extension.QUICTransportParameters.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Extension.QUICTransportParameters()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(*v0, v0[1]);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B57169E8);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);

  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.QUICTransportParameters()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B5716ADCLL);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters;
  if (!lazy protocol witness table cache variable for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.QUICTransportParameters()
{
  return &type metadata for Extension.QUICTransportParameters;
}

BOOL static TLSError.__derived_enum_equals(_:_:)(unint64_t a1, unint64_t a2)
{
  return specialized static TLSError.__derived_enum_equals(_:_:)(a1 | ((HIDWORD(a1) & 1) << 32), a2 | ((HIDWORD(a2) & 1) << 32));
}

uint64_t protocol witness for Error._domain.getter in conformance TLSError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance TLSError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance TLSError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance TLSError()
{
  return MEMORY[0x1F4185E00]();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TLSError(unsigned int *a1, unsigned int *a2)
{
  return specialized static TLSError.__derived_enum_equals(_:_:)(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

BOOL specialized static TLSError.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
  {
    switch((int)a1)
    {
      case 1:
        if ((a2 & 0x100000000) == 0 || a2 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if ((a2 & 0x100000000) == 0 || a2 != 2) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if ((a2 & 0x100000000) == 0 || a2 != 3) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if ((a2 & 0x100000000) == 0 || a2 != 4) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if ((a2 & 0x100000000) == 0 || a2 != 5) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 6:
        if ((a2 & 0x100000000) == 0 || a2 != 6) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 7:
        if ((a2 & 0x100000000) == 0 || a2 != 7) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 8:
        if ((a2 & 0x100000000) == 0 || a2 != 8) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 9:
        if ((a2 & 0x100000000) == 0 || a2 != 9) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 10:
        if ((a2 & 0x100000000) == 0 || a2 != 10) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 11:
        if ((a2 & 0x100000000) == 0 || a2 <= 0xA) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if ((a2 & 0x100000000) == 0 || a2) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else if ((a2 & 0x100000000) != 0)
  {
    return 0;
  }
  else
  {
    return a1 == a2 && WORD1(a1) == WORD1(a2);
  }
  return result;
}

uint64_t __swift_memcpy5_2(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)BOOL result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TLSError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TLSError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)BOOL result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t getEnumTag for TLSError(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for TLSError(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)BOOL result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TLSError()
{
  return &type metadata for TLSError;
}

uint64_t ServerHello.legacyVersion.getter()
{
  return *v0;
}

uint64_t ServerHello.random.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ServerHello.random.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[1] = result;
  _OWORD v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
  return result;
}

__n128 ServerHello.legacySessionIDEcho.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 72);
  __n128 result = *(__n128 *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

__n128 ServerHello.legacySessionIDEcho.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 56) = v3;
  *(void *)(v1 + 72) = *(void *)(a1 + 32);
  return result;
}

uint64_t (*ServerHello.legacySessionIDEcho.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ServerHello.cipherSuite.getter()
{
  return *(unsigned __int16 *)(v0 + 80);
}

uint64_t ServerHello.cipherSuite.setter(uint64_t result)
{
  *(_WORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*ServerHello.cipherSuite.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ServerHello.legacyCompressionMethod.getter()
{
  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t ServerHello.legacyCompressionMethod.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 82) = result;
  return result;
}

uint64_t (*ServerHello.legacyCompressionMethod.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ServerHello.extensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ServerHello.extensions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*ServerHello.extensions.modify())()
{
  return CertificateVerify.algorithm.getter;
}

__n128 ServerHello.init(legacyVersion:random:legacySessionIDEcho:cipherSuite:legacyCompressionMethod:extensions:)@<Q0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  __n128 result = *(__n128 *)a6;
  long long v11 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a9 + 40) = *(_OWORD *)a6;
  uint64_t v12 = *(void *)(a6 + 32);
  *(_WORD *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(_OWORD *)(a9 + 56) = v11;
  *(void *)(a9 + 72) = v12;
  *(_WORD *)(a9 + 80) = a7;
  *(unsigned char *)(a9 + 82) = a8;
  *(void *)(a9 + 88) = a10;
  return result;
}

BOOL ServerHello.isHelloRetryRequest.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  if (one-time initialization token for helloRetryRequest != -1) {
    swift_once();
  }
  return v1 == static Random.helloRetryRequest
      && v2 == (void)xmmword_1EB79AD28
      && v4 == *((void *)&xmmword_1EB79AD28 + 1)
      && v3 == qword_1EB79AD38;
}

uint64_t ServerHello.supportedVersion.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    while (*(unsigned char *)(v3 + 32) != 2 || (*(void *)(v3 + 8) & 1) == 0)
    {
      v3 += 40;
      if (!--v2) {
        goto LABEL_9;
      }
    }
    int v5 = (unsigned __int16)*(void *)v3;
    outlined copy of Extension.ServerCertificateType(*(void *)v3, 1);
    int v6 = 0;
  }
  else
  {
LABEL_9:
    int v5 = 0;
    int v6 = 1;
  }
  return v5 | (v6 << 16);
}

void ServerHello.hash(into:)(uint64_t a1)
{
  Swift::UInt8 v3 = *(unsigned char *)(v1 + 1);
  Hasher._combine(_:)(*(unsigned char *)v1);
  Hasher._combine(_:)(v3);
  Swift::UInt64 v4 = *(void *)(v1 + 16);
  Swift::UInt64 v5 = *(void *)(v1 + 24);
  Swift::UInt64 v6 = *(void *)(v1 + 32);
  Hasher._combine(_:)(*(void *)(v1 + 8));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Swift::UInt64 v7 = *(void *)(v1 + 40);
  Swift::UInt64 v8 = *(void *)(v1 + 48);
  Swift::UInt64 v9 = *(void *)(v1 + 56);
  Swift::UInt64 v10 = *(void *)(v1 + 64);
  Hasher._combine(_:)(*(void *)(v1 + 72));
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(*(_WORD *)(v1 + 80));
  Hasher._combine(_:)(*(unsigned char *)(v1 + 82));
  uint64_t v11 = *(void *)(v1 + 88);
  Swift::UInt v12 = *(void *)(v11 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    unint64_t v13 = (long long *)(v11 + 32);
    outlined retain of ServerHello(v1);
    do
    {
      outlined init with take of Extension(v13, (uint64_t)v14);
      outlined retain of Extension((uint64_t)v14, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Extension.hash(into:)(a1);
      outlined retain of Extension((uint64_t)v14, (void (*)(void, void, void, void, void))outlined consume of Extension);
      unint64_t v13 = (long long *)((char *)v13 + 40);
      --v12;
    }
    while (v12);
    outlined release of ServerHello(v1);
  }
}

uint64_t outlined retain of ServerHello(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ServerHello(uint64_t a1)
{
  return a1;
}

Swift::Int ServerHello.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Swift::UInt64 v2 = *(void *)(v0 + 16);
  Swift::UInt64 v3 = *(void *)(v0 + 24);
  Swift::UInt64 v4 = *(void *)(v0 + 32);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Swift::UInt64 v5 = *(void *)(v0 + 40);
  Swift::UInt64 v6 = *(void *)(v0 + 48);
  Swift::UInt64 v7 = *(void *)(v0 + 56);
  Swift::UInt64 v8 = *(void *)(v0 + 64);
  Hasher._combine(_:)(*(void *)(v0 + 72));
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_WORD *)(v0 + 80));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 82));
  uint64_t v9 = *(void *)(v0 + 88);
  Swift::UInt v10 = *(void *)(v9 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    uint64_t v11 = (long long *)(v9 + 32);
    outlined retain of ServerHello(v0);
    do
    {
      outlined init with take of Extension(v11, (uint64_t)v14);
      outlined retain of Extension((uint64_t)v14, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Extension.hash(into:)((uint64_t)&v13);
      outlined retain of Extension((uint64_t)v14, (void (*)(void, void, void, void, void))outlined consume of Extension);
      uint64_t v11 = (long long *)((char *)v11 + 40);
      --v10;
    }
    while (v10);
    outlined release of ServerHello(v0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ServerHello()
{
  return ServerHello.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ServerHello(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ServerHello()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt64 v2 = *(void *)(v0 + 16);
  Swift::UInt64 v3 = *(void *)(v0 + 24);
  Swift::UInt64 v4 = *(void *)(v0 + 32);
  Swift::UInt64 v5 = *(void *)(v0 + 40);
  Swift::UInt64 v13 = *(void *)(v0 + 48);
  Swift::UInt64 v14 = *(void *)(v0 + 56);
  Swift::UInt v6 = *(void *)(v0 + 72);
  Swift::UInt64 v16 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 88);
  Swift::UInt8 v8 = *(unsigned char *)v0;
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 1);
  Swift::UInt16 v15 = *(_WORD *)(v0 + 80);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 82);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v17);
  Swift::UInt v10 = *(void *)(v7 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    uint64_t v11 = (long long *)(v7 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v11, (uint64_t)v19);
      outlined retain of Extension((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Extension.hash(into:)((uint64_t)v18);
      outlined retain of Extension((uint64_t)v19, (void (*)(void, void, void, void, void))outlined consume of Extension);
      uint64_t v11 = (long long *)((char *)v11 + 40);
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ServerHello(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  void v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  _OWORD v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  void v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return specialized static ServerHello.__derived_struct_equals(_:_:)((unsigned __int8 *)v9, (unsigned __int8 *)v10) & 1;
}

uint64_t static ServerHello.handshakeType.getter()
{
  return 2;
}

unint64_t ServerHello.write(into:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  LOWORD(v40) = *(_WORD *)v2;
  uint64_t v4 = MEMORY[0x1E4FBB2B8];
  uint64_t v5 = MEMORY[0x1E4F27EF0];
  *((void *)&v44 + 1) = MEMORY[0x1E4FBB2B8];
  uint64_t v45 = MEMORY[0x1E4F27EF0];
  *(void *)&long long v43 = &v40;
  *((void *)&v43 + 1) = (char *)&v40 + 2;
  __swift_project_boxed_opaque_existential_1(&v43, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  long long v6 = *(_OWORD *)(v2 + 24);
  long long v40 = *(_OWORD *)(v2 + 8);
  long long v41 = v6;
  *((void *)&v44 + 1) = v4;
  uint64_t v45 = v5;
  *(void *)&long long v43 = &v40;
  *((void *)&v43 + 1) = &v42;
  __swift_project_boxed_opaque_existential_1(&v43, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  long long v7 = *(_OWORD *)(v2 + 56);
  long long v43 = *(_OWORD *)(v2 + 40);
  long long v44 = v7;
  uint64_t v45 = *(void *)(v2 + 72);
  unint64_t v8 = ByteBuffer.writeLegacySessionID(_:)((uint64_t)&v43);
  unint64_t v9 = v8 + 34;
  if (__OFADD__(v8, 34))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unsigned __int16 v47 = bswap32(*(unsigned __int16 *)(v2 + 80)) >> 16;
  *((void *)&v41 + 1) = v4;
  uint64_t v42 = v5;
  *(void *)&long long v40 = &v47;
  *((void *)&v40 + 1) = v48;
  __swift_project_boxed_opaque_existential_1(&v40, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  BOOL v10 = __OFADD__(v9, 2);
  unint64_t v11 = v9 + 2;
  if (v10)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  LOBYTE(v47) = *(unsigned char *)(v2 + 82);
  *((void *)&v41 + 1) = v4;
  uint64_t v42 = v5;
  *(void *)&long long v40 = &v47;
  *((void *)&v40 + 1) = (char *)&v47 + 1;
  __swift_project_boxed_opaque_existential_1(&v40, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  BOOL v10 = __OFADD__(v11, 1);
  unint64_t v12 = v11 + 1;
  if (v10)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  uint64_t v15 = 0;
  switch(v14 >> 62)
  {
    case 1uLL:
      uint64_t v15 = v13 >> 32;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(v13 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v15 = BYTE6(v14);
      break;
  }
  unsigned __int16 v47 = 0;
  *((void *)&v41 + 1) = v4;
  uint64_t v42 = MEMORY[0x1E4F27EF0];
  *(void *)&long long v40 = &v47;
  *((void *)&v40 + 1) = v48;
  __swift_project_boxed_opaque_existential_1(&v40, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  uint64_t v16 = *(void *)(v2 + 88);
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
LABEL_42:
    unint64_t v19 = 0;
    goto LABEL_43;
  }
  uint64_t v35 = v15;
  unint64_t v36 = v12;
  uint64_t v18 = v16 + 32;
  outlined retain of ServerHello(v2);
  unint64_t v19 = 0;
  do
  {
    outlined init with take of Extension((long long *)v18, (uint64_t)v46);
    uint64_t v20 = *(void *)v18;
    unint64_t v21 = *(void *)(v18 + 8);
    unint64_t v22 = *(void *)(v18 + 16);
    outlined init with take of Extension(v46, (uint64_t)&v47);
    v18 += 40;
    unsigned int v23 = 42;
    switch(v48[30])
    {
      case 1:
        swift_bridgeObjectRetain();
        unsigned int v23 = 10;
        break;
      case 2:
        outlined init with take of Extension.SupportedVersions((uint64_t)&v47, (uint64_t)v50);
        outlined copy of Extension.ServerCertificateType(v20, v21 & 1);
        unsigned int v23 = 43;
        break;
      case 3:
      case 9:
        outlined copy of Data._Representation(v20, v21);
        unsigned int v23 = 16;
        break;
      case 4:
        outlined init with take of Extension.KeyShare((uint64_t)&v47, (uint64_t)v51);
        outlined copy of Extension.KeyShare(v20, v21, v22);
        unsigned int v23 = 51;
        break;
      case 5:
        break;
      case 6:
        swift_bridgeObjectRetain();
        unsigned int v23 = 13;
        break;
      case 7:
        outlined init with take of Extension.ServerCertificateType((uint64_t)&v47, (uint64_t)v52);
        outlined copy of Extension.ServerCertificateType(v20, v21 & 1);
        unsigned int v23 = 20;
        break;
      case 8:
        outlined copy of Data._Representation(v20, v21);
        unsigned int v23 = 57;
        break;
      case 0xA:
        swift_bridgeObjectRetain();
        unsigned int v23 = 45;
        break;
      case 0xB:
        outlined init with take of Extension.PreSharedKey((uint64_t)&v47, (uint64_t)v53);
        outlined copy of Extension.PreSharedKey(v20, v21, v22 & 1);
        unsigned int v23 = 41;
        break;
      case 0xC:
        outlined init with take of Extension.TicketRequest((uint64_t)&v47, (uint64_t)v39);
        unsigned int v23 = 58;
        break;
      case 0xD:
        unsigned int v23 = v47;
        outlined copy of Data._Representation(v21, v22);
        break;
      default:
        outlined init with take of Extension.ServerName((uint64_t)&v47, (uint64_t)v49);
        outlined copy of ByteBuffer?(v20, v21);
        unsigned int v23 = 0;
        break;
    }
    __int16 v37 = __rev16(v23);
    *((void *)&v41 + 1) = v4;
    uint64_t v24 = MEMORY[0x1E4F27EF0];
    uint64_t v42 = MEMORY[0x1E4F27EF0];
    *(void *)&long long v40 = &v37;
    *((void *)&v40 + 1) = &v38;
    __swift_project_boxed_opaque_existential_1(&v40, v4);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    uint64_t v25 = *a1;
    unint64_t v26 = a1[1];
    uint64_t v27 = 0;
    switch(v26 >> 62)
    {
      case 1uLL:
        uint64_t v27 = v25 >> 32;
        break;
      case 2uLL:
        uint64_t v27 = *(void *)(v25 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v27 = BYTE6(v26);
        break;
    }
    __int16 v37 = 0;
    *((void *)&v41 + 1) = v4;
    uint64_t v42 = v24;
    *(void *)&long long v40 = &v37;
    *((void *)&v40 + 1) = &v38;
    __swift_project_boxed_opaque_existential_1(&v40, v4);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    unint64_t v28 = closure #1 in ByteBuffer.writeExtension(_:)(a1, v46);
    if ((v28 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    unint64_t v29 = v28;
    if (v28 >> 16) {
      goto LABEL_46;
    }
    uint64_t v30 = v27 + 2;
    if (__OFADD__(v27, 2)) {
      goto LABEL_47;
    }
    if (v27 < a1[2]) {
      goto LABEL_48;
    }
    uint64_t v31 = *a1;
    unint64_t v32 = a1[1];
    uint64_t v33 = 0;
    switch(v32 >> 62)
    {
      case 1uLL:
        uint64_t v33 = v31 >> 32;
        break;
      case 2uLL:
        uint64_t v33 = *(void *)(v31 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v33 = BYTE6(v32);
        break;
    }
    if (v33 < v30) {
      goto LABEL_49;
    }
    __int16 v37 = bswap32(v28) >> 16;
    if (v30 < v27) {
      goto LABEL_50;
    }
    *((void *)&v41 + 1) = v4;
    uint64_t v42 = v24;
    *(void *)&long long v40 = &v37;
    *((void *)&v40 + 1) = &v38;
    __swift_project_boxed_opaque_existential_1(&v40, v4);
    Data._Representation.replaceSubrange(_:with:count:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    outlined retain of Extension((uint64_t)v46, (void (*)(void, void, void, void, void))outlined consume of Extension);
    BOOL v10 = __OFADD__(v19, v29 + 4);
    v19 += v29 + 4;
    if (v10) {
      goto LABEL_51;
    }
    --v17;
  }
  while (v17);
  outlined release of ServerHello(v2);
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v15 = v35;
  unint64_t v12 = v36;
  if (v19 >> 16)
  {
    __break(1u);
    goto LABEL_42;
  }
LABEL_43:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v19, v15);
  unint64_t result = v12 + v19 + 2;
  if (__OFADD__(v12, v19 + 2)) {
LABEL_56:
  }
    __break(1u);
  return result;
}

double ServerHello.init(bytes:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized ServerHello.init(bytes:)(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

unint64_t protocol witness for HandshakeMessageProtocol.write(into:) in conformance ServerHello(uint64_t *a1)
{
  return ServerHello.write(into:)(a1);
}

uint64_t specialized static ServerHello.__derived_struct_equals(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2
    && a1[1] == a2[1]
    && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 56), *(int64x2_t *)(a2 + 56)))), 0xFuLL))) & 1) != 0&& *((void *)a1 + 9) == *((void *)a2 + 9)&& *((unsigned __int16 *)a1 + 40) == *((unsigned __int16 *)a2 + 40)&& a1[82] == a2[82])
  {
    return specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 11), *((void *)a2 + 11));
  }
  else
  {
    return 0;
  }
}

uint64_t specialized ServerHello.init(bytes:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v5 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v5 & 0x10000) != 0) {
    goto LABEL_3;
  }
  __int16 v6 = v5;
  ByteBuffer.readRandom()((uint64_t)v73);
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v73, (uint64_t)v77, &demangling cache variable for type metadata for Random?);
  if (v78) {
    goto LABEL_3;
  }
  uint64_t v9 = v77[0];
  unint64_t v10 = v77[1];
  uint64_t v11 = v77[2];
  uint64_t v12 = v77[3];
  uint64_t result = ByteBuffer.readLegacySessionID()((uint64_t)v74);
  if (v2) {
    return result;
  }
  uint64_t v66 = v9;
  uint64_t v64 = v12;
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LegacySessionID?);
  if (v76) {
    goto LABEL_3;
  }
  uint64_t v13 = a2;
  LOWORD(a2) = v6;
  unint64_t v14 = a1;
  uint64_t v15 = v75[0];
  uint64_t v61 = v75[2];
  uint64_t v62 = v75[1];
  uint64_t v59 = v75[4];
  uint64_t v60 = v75[3];
  int v58 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v58 & 0x10000) != 0 || (__int16 v16 = specialized ByteBuffer.readInteger<A>(as:)(), (v16 & 0x100) != 0))
  {
LABEL_3:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 0;
    *(unsigned char *)(v7 + 4) = 1;
    return swift_willThrow();
  }
  char v46 = v16;
  if (one-time initialization token for helloRetryRequest != -1) {
    goto LABEL_75;
  }
  while (1)
  {
    char v52 = 0;
    uint64_t v17 = v11;
    if (v66 == static Random.helloRetryRequest && __PAIR128__(v11, v10) == xmmword_1EB79AD28) {
      char v52 = v64 == qword_1EB79AD38;
    }
    uint64_t v49 = v14[2];
    uint64_t v50 = *v14;
    unint64_t v51 = v14[1];
    outlined copy of Data._Representation(*v14, v51);
    uint64_t v18 = specialized ByteBuffer.readInteger<A>(as:)();
    if ((v18 & 0x10000) != 0
      || (v65 = ByteBuffer.readSlice(length:)((unsigned __int16)v18), unint64_t v63 = v20, v20 >> 60 == 15))
    {
      outlined consume of Data._Representation(*v14, v14[1]);
      *unint64_t v14 = v50;
      v14[1] = v51;
      v14[2] = v49;
      goto LABEL_3;
    }
    uint64_t v21 = v19;
    __int16 v45 = a2;
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x1E4FBC860]);
    a2 = v21 + 2;
    uint64_t v23 = v66;
    if (!__OFADD__(v21, 2)) {
      break;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    swift_once();
  }
  uint64_t v24 = v22;
  unint64_t v47 = v10;
  uint64_t v48 = v11;
  uint64_t v55 = v15;
  while (2)
  {
    unint64_t v56 = v24;
    uint64_t v25 = BYTE6(v63);
    switch(v63 >> 62)
    {
      case 1uLL:
        uint64_t v25 = v65 >> 32;
        goto LABEL_22;
      case 2uLL:
        uint64_t v25 = *(void *)(v65 + 24);
        goto LABEL_22;
      case 3uLL:
        if (a2 < 1) {
          goto LABEL_25;
        }
        goto LABEL_59;
      default:
LABEL_22:
        if (v25 < a2) {
          goto LABEL_59;
        }
LABEL_25:
        *(void *)&long long v67 = v65;
        *((void *)&v67 + 1) = v63;
        if (a2 < v21) {
          goto LABEL_69;
        }
        uint64_t v70 = v21;
        unint64_t v71 = a2;
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
        lazy protocol witness table accessor for type Data and conformance Data();
        unint64_t v10 = lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
        DataProtocol.copyBytes<A>(to:from:)();
        uint64_t v11 = a2 + 2;
        if (__OFADD__(a2, 2)) {
          goto LABEL_70;
        }
        break;
    }
    unsigned int v53 = bswap32(0) >> 16;
    uint64_t v26 = a2;
    uint64_t v27 = v65 >> 32;
    uint64_t v28 = BYTE6(v63);
    switch(v63 >> 62)
    {
      case 1uLL:
        goto LABEL_29;
      case 2uLL:
        uint64_t v27 = *(void *)(v65 + 24);
LABEL_29:
        outlined copy of ByteBuffer?(v65, v63);
        uint64_t v26 = a2;
        uint64_t v28 = v27;
        goto LABEL_30;
      case 3uLL:
        if (v11 < 1) {
          goto LABEL_33;
        }
        goto LABEL_57;
      default:
LABEL_30:
        if (v28 < v11)
        {
LABEL_57:
          uint64_t v21 = v26;
          outlined consume of ByteBuffer?(v65, v63);
          uint64_t v23 = v66;
          unint64_t v10 = v47;
          uint64_t v17 = v48;
          uint64_t v15 = v55;
          goto LABEL_59;
        }
LABEL_33:
        *(void *)&long long v67 = v65;
        *((void *)&v67 + 1) = v63;
        if (v11 < v26) {
          goto LABEL_71;
        }
        uint64_t v70 = v26;
        unint64_t v71 = a2 + 2;
        DataProtocol.copyBytes<A>(to:from:)();
        uint64_t v29 = bswap32(0) >> 16;
        uint64_t v21 = v11 + v29;
        if (__OFADD__(v11, v29)) {
          goto LABEL_72;
        }
        break;
    }
    uint64_t v17 = v48;
    uint64_t v15 = v55;
    uint64_t v30 = BYTE6(v63);
    switch(v63 >> 62)
    {
      case 1uLL:
        uint64_t v30 = v65 >> 32;
        goto LABEL_38;
      case 2uLL:
        uint64_t v30 = *(void *)(v65 + 24);
        goto LABEL_38;
      case 3uLL:
        if (v21 <= 0) {
          goto LABEL_41;
        }
        goto LABEL_58;
      default:
LABEL_38:
        if (v30 >= v21)
        {
LABEL_41:
          if (v21 < v11) {
            goto LABEL_73;
          }
          uint64_t v31 = Data._Representation.subscript.getter();
          uint64_t v33 = 0;
          switch(v32 >> 62)
          {
            case 1uLL:
              uint64_t v33 = (int)v31;
              break;
            case 2uLL:
              uint64_t v33 = *(void *)(v31 + 16);
              break;
            default:
              break;
          }
          uint64_t v70 = v31;
          unint64_t v71 = v32;
          uint64_t v72 = v33;
          closure #1 in ByteBuffer.readExtension(messageType:helloRetryRequest:)(&v70, v53, 2u, v52, (uint64_t)&v67);
          uint64_t v34 = 0;
          switch(v71 >> 62)
          {
            case 1uLL:
              uint64_t v34 = v70 >> 32;
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v70 + 24);
              break;
            case 3uLL:
              break;
            default:
              uint64_t v34 = BYTE6(v71);
              break;
          }
          if (__OFSUB__(v34, v72)) {
            goto LABEL_74;
          }
          if (v34 != v72)
          {
            lazy protocol witness table accessor for type TLSError and conformance TLSError();
            swift_allocError();
            *(_DWORD *)uint64_t v42 = 1;
            *(unsigned char *)(v42 + 4) = 1;
            swift_willThrow();
            outlined consume of Extension(v67, *((unint64_t *)&v67 + 1), v68, *((uint64_t *)&v68 + 1), v69);
            outlined consume of Data._Representation(v70, v71);
            outlined consume of Data._Representation(v65, v63);
            swift_willThrow();
            swift_bridgeObjectRelease();
            outlined consume of ByteBuffer?(v65, v63);
            goto LABEL_67;
          }
          outlined consume of Data._Representation(v70, v71);
          outlined consume of ByteBuffer?(v65, v63);
          long long v35 = v67;
          long long v36 = v68;
          char v37 = v69;
          uint64_t v24 = v56;
          uint64_t v11 = v56[2];
          unint64_t v38 = v56[3];
          if (v11 >= v38 >> 1)
          {
            long long v57 = v67;
            long long v54 = v68;
            long long v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v11 + 1, 1, v24);
            long long v36 = v54;
            long long v35 = v57;
            uint64_t v24 = v40;
          }
          v24[2] = v11 + 1;
          char v39 = &v24[5 * v11];
          *((_OWORD *)v39 + 2) = v35;
          *((_OWORD *)v39 + 3) = v36;
          *((unsigned char *)v39 + 64) = v37;
          a2 = v21 + 2;
          uint64_t v23 = v66;
          unint64_t v10 = v47;
          uint64_t v15 = v55;
          if (__OFADD__(v21, 2)) {
            goto LABEL_68;
          }
          continue;
        }
LABEL_58:
        outlined consume of ByteBuffer?(v65, v63);
        uint64_t v21 = a2;
        uint64_t v23 = v66;
        unint64_t v10 = v47;
LABEL_59:
        uint64_t v41 = 0;
        switch(v63 >> 62)
        {
          case 1uLL:
            uint64_t v41 = v65 >> 32;
            break;
          case 2uLL:
            uint64_t v41 = *(void *)(v65 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v41 = BYTE6(v63);
            break;
        }
        if (__OFSUB__(v41, v21))
        {
          __break(1u);
          JUMPOUT(0x1B5718594);
        }
        if (v41 == v21)
        {
          uint64_t v43 = v23;
          outlined consume of ByteBuffer?(v65, v63);
          uint64_t result = outlined consume of Data._Representation(v50, v51);
          *(unsigned char *)uint64_t v13 = HIBYTE(v45);
          *(unsigned char *)(v13 + 1) = v45;
          *(void *)(v13 + 8) = v43;
          *(void *)(v13 + 16) = v10;
          *(void *)(v13 + 24) = v17;
          *(void *)(v13 + 32) = v64;
          *(void *)(v13 + 40) = v15;
          *(void *)(v13 + 48) = v62;
          *(void *)(v13 + 56) = v61;
          *(void *)(v13 + 64) = v60;
          *(void *)(v13 + 72) = v59;
          *(_WORD *)(v13 + 80) = v58;
          *(unsigned char *)(v13 + 82) = v46;
          *(void *)(v13 + 88) = v56;
        }
        else
        {
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v44 = 1;
          *(unsigned char *)(v44 + 4) = 1;
          swift_willThrow();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v65, v63);
LABEL_67:
          outlined consume of Data._Representation(*v14, v14[1]);
          *unint64_t v14 = v50;
          v14[1] = v51;
          v14[2] = v49;
          return swift_willThrow();
        }
        return result;
    }
  }
}

unint64_t lazy protocol witness table accessor for type ServerHello and conformance ServerHello()
{
  unint64_t result = lazy protocol witness table cache variable for type ServerHello and conformance ServerHello;
  if (!lazy protocol witness table cache variable for type ServerHello and conformance ServerHello)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServerHello and conformance ServerHello);
  }
  return result;
}

uint64_t destroy for ServerHello()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerHello(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerHello(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for ServerHello(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerHello(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerHello(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerHello()
{
  return &type metadata for ServerHello;
}

void *CertificateType.rawPublicKey.unsafeMutableAddressor()
{
  return &static CertificateType.rawPublicKey;
}

void *CertificateType.x509.unsafeMutableAddressor()
{
  return &static CertificateType.x509;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance CertificateType@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CertificateType(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateType()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CertificateType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateType()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CertificateType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CertificateType.description.getter(char a1)
{
  if (!a1) {
    return 0x393035782ELL;
  }
  if (a1 == 2) {
    return 0x6C6275507761722ELL;
  }
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CertificateType()
{
  return CertificateType.description.getter(*v0);
}

uint64_t ByteBuffer.writeCertificateType(_:)(char a1)
{
  void v3[5] = *MEMORY[0x1E4F143B8];
  char v2 = a1;
  v3[3] = MEMORY[0x1E4FBB2B8];
  v3[4] = MEMORY[0x1E4F27EF0];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 1;
}

uint64_t ByteBuffer.readCertificateType()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < v2) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v3 + 24) >= v2) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v4) < v2)
      {
LABEL_11:
        int v5 = 1;
        return (v5 << 8);
      }
LABEL_8:
      if (v2 < v1) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v5 = 0;
      v0[2] = v2;
      return (v5 << 8);
  }
}

unint64_t lazy protocol witness table accessor for type CertificateType and conformance CertificateType()
{
  unint64_t result = lazy protocol witness table cache variable for type CertificateType and conformance CertificateType;
  if (!lazy protocol witness table cache variable for type CertificateType and conformance CertificateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateType and conformance CertificateType);
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateType()
{
  return &type metadata for CertificateType;
}

void *HandshakeType.certificateVerify.unsafeMutableAddressor()
{
  return &static HandshakeType.certificateVerify;
}

void *HandshakeType.clientHello.unsafeMutableAddressor()
{
  return &static HandshakeType.clientHello;
}

void *HandshakeType.encryptedExtensions.unsafeMutableAddressor()
{
  return &static HandshakeType.encryptedExtensions;
}

void *HandshakeType.finished.unsafeMutableAddressor()
{
  return &static HandshakeType.finished;
}

void *HandshakeType.serverHello.unsafeMutableAddressor()
{
  return &static HandshakeType.serverHello;
}

void *HandshakeType.newSessionTicket.unsafeMutableAddressor()
{
  return &static HandshakeType.newSessionTicket;
}

uint64_t static HandshakeType.newSessionTicket.getter()
{
  return 4;
}

void *HandshakeType.endOfEarlyData.unsafeMutableAddressor()
{
  return &static HandshakeType.endOfEarlyData;
}

uint64_t static HandshakeType.endOfEarlyData.getter()
{
  return 5;
}

uint64_t static HandshakeType.encryptedExtensions.getter()
{
  return 8;
}

void *HandshakeType.certificate.unsafeMutableAddressor()
{
  return &static HandshakeType.certificate;
}

uint64_t static HandshakeType.certificate.getter()
{
  return 11;
}

void *HandshakeType.certificateRequest.unsafeMutableAddressor()
{
  return &static HandshakeType.certificateRequest;
}

void *HandshakeType.keyUpdate.unsafeMutableAddressor()
{
  return &static HandshakeType.keyUpdate;
}

uint64_t static HandshakeType.keyUpdate.getter()
{
  return 24;
}

void *HandshakeType.messageHash.unsafeMutableAddressor()
{
  return &static HandshakeType.messageHash;
}

uint64_t static HandshakeType.messageHash.getter()
{
  return 254;
}

unint64_t HandshakeType.description.getter(unsigned __int8 a1)
{
  int v1 = a1;
  int v2 = a1 - 1;
  unint64_t result = 0x48746E65696C632ELL;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x487265767265732ELL;
      break;
    case 2:
    case 5:
    case 6:
    case 8:
    case 9:
    case 11:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
      goto LABEL_5;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x6145664F646E652ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 10:
      unint64_t result = 0x696669747265632ELL;
      break;
    case 12:
      unint64_t result = 0xD000000000000013;
      break;
    case 14:
      unint64_t result = 0xD000000000000012;
      break;
    case 19:
      unint64_t result = 0x656873696E69662ELL;
      break;
    case 23:
      unint64_t result = 0x6164705579656B2ELL;
      break;
    default:
      if (v1 == 254)
      {
        unint64_t result = 0x6567617373656D2ELL;
      }
      else
      {
LABEL_5:
        _StringGuts.grow(_:)(27);
        swift_bridgeObjectRelease();
        v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v4);
        swift_bridgeObjectRelease();
        v5._countAndFlagsBits = 41;
        v5._object = (void *)0xE100000000000000;
        String.append(_:)(v5);
        unint64_t result = 0xD000000000000018;
      }
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandshakeType()
{
  return HandshakeType.description.getter(*v0);
}

uint64_t ByteBuffer.readHandshakeType()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < v2) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v3 + 24) >= v2) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v4) < v2)
      {
LABEL_11:
        int v5 = 1;
        return (v5 << 8);
      }
LABEL_8:
      if (v2 < v1) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v5 = 0;
      v0[2] = v2;
      return (v5 << 8);
  }
}

unint64_t lazy protocol witness table accessor for type HandshakeType and conformance HandshakeType()
{
  unint64_t result = lazy protocol witness table cache variable for type HandshakeType and conformance HandshakeType;
  if (!lazy protocol witness table cache variable for type HandshakeType and conformance HandshakeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandshakeType and conformance HandshakeType);
  }
  return result;
}

ValueMetadata *type metadata accessor for HandshakeType()
{
  return &type metadata for HandshakeType;
}

uint64_t Curve25519EphemeralKey.privateKey.getter@<X0>(uint64_t a1@<X8>)
{
  return Curve25519EphemeralKey.privateKey.getter(MEMORY[0x1E4F24F58], a1);
}

uint64_t Curve25519EphemeralKey.privateKey.setter(uint64_t a1)
{
  return Curve25519EphemeralKey.privateKey.setter(a1, MEMORY[0x1E4F24F58]);
}

uint64_t Curve25519EphemeralKey.namedGroup.getter()
{
  return 29;
}

uint64_t Curve25519EphemeralKey.publicKeyData.getter()
{
  return Curve25519EphemeralKey.publicKeyData.getter(MEMORY[0x1E4F24F38], MEMORY[0x1E4F24F48], MEMORY[0x1E4F24F20]);
}

uint64_t Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  return Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(a1, a2, MEMORY[0x1E4F24F38], MEMORY[0x1E4F24F28], MEMORY[0x1E4F24F40]);
}

uint64_t protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(a1, a2, MEMORY[0x1E4F24F38], MEMORY[0x1E4F24F48], MEMORY[0x1E4F24F20]);
}

uint64_t protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(a1, a2, a3, a4, MEMORY[0x1E4F24F38], MEMORY[0x1E4F24F28], MEMORY[0x1E4F24F40]);
}

uint64_t P384EphemeralKey.privateKey.getter@<X0>(uint64_t a1@<X8>)
{
  return Curve25519EphemeralKey.privateKey.getter(MEMORY[0x1E4F25130], a1);
}

uint64_t Curve25519EphemeralKey.privateKey.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v2, v4);
}

uint64_t P384EphemeralKey.privateKey.setter(uint64_t a1)
{
  return Curve25519EphemeralKey.privateKey.setter(a1, MEMORY[0x1E4F25130]);
}

uint64_t Curve25519EphemeralKey.privateKey.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v2, a1, v4);
}

uint64_t P384EphemeralKey.publicKeyData.getter()
{
  return Curve25519EphemeralKey.publicKeyData.getter(MEMORY[0x1E4F25118], MEMORY[0x1E4F25128], MEMORY[0x1E4F25108]);
}

uint64_t Curve25519EphemeralKey.publicKeyData.getter(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790]();
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = a2(v7);
  uint64_t v11 = a3(v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v11;
}

uint64_t P384EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  return Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(a1, a2, MEMORY[0x1E4F25118], MEMORY[0x1E4F25110], MEMORY[0x1E4F25120]);
}

uint64_t Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, void, void), void (*a5)(char *))
{
  uint64_t v15 = a5;
  uint64_t v9 = a3(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  v16[0] = a1;
  v16[1] = a2;
  outlined copy of Data._Representation(a1, a2);
  uint64_t result = a4(v16, MEMORY[0x1E4F277C0], MEMORY[0x1E4F277B0]);
  if (!v5)
  {
    v15(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance P384EphemeralKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(a1, a2, MEMORY[0x1E4F25118], MEMORY[0x1E4F25128], MEMORY[0x1E4F25108]);
}

uint64_t protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v7 = a3(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790]();
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = a4(v9);
  uint64_t v13 = a5(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v13;
}

uint64_t protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance P384EphemeralKey(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(a1, a2, a3, a4, MEMORY[0x1E4F25118], MEMORY[0x1E4F25110], MEMORY[0x1E4F25120]);
}

uint64_t protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void *, void, void), void (*a7)(char *))
{
  uint64_t v17 = a7;
  uint64_t v11 = a5(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v16 - v13;
  v18[0] = a1;
  v18[1] = a2;
  outlined copy of Data._Representation(a1, a2);
  uint64_t result = a6(v18, MEMORY[0x1E4F277C0], MEMORY[0x1E4F277B0]);
  if (!v7)
  {
    v17(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t destroy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2)
{
  return destroy for Curve25519EphemeralKey(a1, a2, MEMORY[0x1E4F24F58]);
}

uint64_t initializeWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t assignWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t initializeWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t assignWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t getEnumTagSinglePayload for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B5719A94);
}

uint64_t sub_1B5719A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t storeEnumTagSinglePayload for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B5719AC0);
}

uint64_t sub_1B5719AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x1E4F24F58]);
}

uint64_t type metadata accessor for Curve25519EphemeralKey(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for Curve25519EphemeralKey);
}

uint64_t type metadata completion function for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t initializeBufferWithCopyOfBuffer for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);

  return v7(a1, a2, v6);
}

uint64_t destroy for P384EphemeralKey(uint64_t a1, uint64_t a2)
{
  return destroy for Curve25519EphemeralKey(a1, a2, MEMORY[0x1E4F25130]);
}

uint64_t destroy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t initializeWithCopy for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t initializeWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t assignWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t initializeWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t assignWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B5719E2C);
}

uint64_t sub_1B5719E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B5719EC8);
}

uint64_t sub_1B5719EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x1E4F25130]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata accessor for P384EphemeralKey(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for P384EphemeralKey);
}

uint64_t type metadata completion function for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t type metadata completion function for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ByteBuffer.writeKeyShare(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (a3 >> 60) & 3;
  if (v9)
  {
    if (v9 == 1)
    {
      outlined copy of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
      uint64_t v10 = ByteBuffer.writeKeyShareEntry(_:)(a1, a2, a3 & 0xCFFFFFFFFFFFFFFFLL, a4);
      outlined consume of Extension.KeyShare(a1, a2, a3);
      return v10;
    }
    else
    {
      __int16 v39 = bswap32(a1) >> 16;
      uint64_t v42 = MEMORY[0x1E4FBB2B8];
      uint64_t v43 = MEMORY[0x1E4F27EF0];
      long long v40 = &v39;
      uint64_t v41 = &v40;
      __swift_project_boxed_opaque_existential_1(&v40, MEMORY[0x1E4FBB2B8]);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
      return 2;
    }
  }
  uint64_t v12 = *v4;
  unint64_t v13 = v4[1];
  uint64_t v14 = 0;
  switch(v13 >> 62)
  {
    case 1uLL:
      uint64_t v14 = v12 >> 32;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(v12 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v14 = BYTE6(v13);
      break;
  }
  uint64_t v38 = v14;
  __int16 v39 = 0;
  uint64_t v42 = MEMORY[0x1E4FBB2B8];
  uint64_t v43 = MEMORY[0x1E4F27EF0];
  long long v40 = &v39;
  uint64_t v41 = &v40;
  __swift_project_boxed_opaque_existential_1(&v40, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v36 = a2;
    unint64_t v37 = a3;
    swift_bridgeObjectRetain();
    unint64_t v16 = 0;
    uint64_t v35 = a1;
    uint64_t v17 = (uint64_t *)(a1 + 56);
    while (2)
    {
      unsigned int v18 = *((unsigned __int16 *)v17 - 12);
      uint64_t v20 = *(v17 - 2);
      unint64_t v19 = *(v17 - 1);
      uint64_t v22 = *v17;
      v17 += 4;
      uint64_t v21 = v22;
      __int16 v39 = bswap32(v18) >> 16;
      uint64_t v42 = MEMORY[0x1E4FBB2B8];
      uint64_t v43 = MEMORY[0x1E4F27EF0];
      long long v40 = &v39;
      uint64_t v41 = &v40;
      __swift_project_boxed_opaque_existential_1(&v40, MEMORY[0x1E4FBB2B8]);
      outlined copy of Data._Representation(v20, v19);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
      uint64_t v23 = 0;
      switch(v19 >> 62)
      {
        case 1uLL:
          uint64_t v23 = v20 >> 32;
          break;
        case 2uLL:
          uint64_t v23 = *(void *)(v20 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v23 = BYTE6(v19);
          break;
      }
      BOOL v24 = __OFSUB__(v23, v21);
      unint64_t v25 = v23 - v21;
      if (v24)
      {
        __break(1u);
      }
      else
      {
        if ((v25 & 0x8000000000000000) != 0 || v25 >= 0x10000)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1B571A528);
        }
        __int16 v39 = bswap32(v25) >> 16;
        uint64_t v42 = MEMORY[0x1E4FBB2B8];
        uint64_t v43 = MEMORY[0x1E4F27EF0];
        long long v40 = &v39;
        uint64_t v41 = &v40;
        __swift_project_boxed_opaque_existential_1(&v40, MEMORY[0x1E4FBB2B8]);
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        switch(v19 >> 62)
        {
          case 1uLL:
            uint64_t v27 = (int)v20;
            uint64_t v26 = v20 >> 32;
            break;
          case 2uLL:
            uint64_t v27 = *(void *)(v20 + 16);
            uint64_t v26 = *(void *)(v20 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v27 = 0;
            uint64_t v26 = BYTE6(v19);
            break;
        }
        if (v26 >= v21 && v26 >= v27)
        {
          uint64_t v28 = Data._Representation.subscript.getter();
          unint64_t v30 = v29;
          Data.append(_:)();
          switch(v30 >> 62)
          {
            case 1uLL:
              outlined consume of Data._Representation(v28, v30);
              outlined consume of Data._Representation(v20, v19);
              LODWORD(v31) = HIDWORD(v28) - v28;
              if (__OFSUB__(HIDWORD(v28), v28)) {
                goto LABEL_45;
              }
              uint64_t v31 = (int)v31;
LABEL_32:
              BOOL v24 = __OFADD__(v31, 4);
              uint64_t v34 = v31 + 4;
              if (v24) {
                goto LABEL_42;
              }
              BOOL v24 = __OFADD__(v16, v34);
              v16 += v34;
              if (v24) {
                goto LABEL_43;
              }
              if (--v15) {
                continue;
              }
              outlined consume of Extension.KeyShare(v35, v36, v37);
              if ((v16 & 0x8000000000000000) != 0) {
                goto LABEL_46;
              }
              if (!(v16 >> 16)) {
                goto LABEL_39;
              }
              __break(1u);
              break;
            case 2uLL:
              uint64_t v33 = *(void *)(v28 + 16);
              uint64_t v32 = *(void *)(v28 + 24);
              outlined consume of Data._Representation(v28, v30);
              outlined consume of Data._Representation(v20, v19);
              uint64_t v31 = v32 - v33;
              if (!__OFSUB__(v32, v33)) {
                goto LABEL_32;
              }
              goto LABEL_44;
            case 3uLL:
              outlined consume of Data._Representation(v28, v30);
              outlined consume of Data._Representation(v20, v19);
              uint64_t v31 = 0;
              goto LABEL_32;
            default:
              outlined consume of Data._Representation(v28, v30);
              outlined consume of Data._Representation(v20, v19);
              uint64_t v31 = BYTE6(v30);
              goto LABEL_32;
          }
          goto LABEL_38;
        }
      }
      break;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
LABEL_38:
  unint64_t v16 = 0;
LABEL_39:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v16, v38);
  return v16 + 2;
}

uint64_t ByteBuffer.readKeyShare(messageType:helloRetryRequest:)(unsigned __int8 a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1 == 1)
  {
    uint64_t v10 = *v2;
    unint64_t v9 = v2[1];
    uint64_t v11 = v2[2];
    outlined copy of Data._Representation(*v2, v9);
    uint64_t v12 = specialized ByteBuffer.readInteger<A>(as:)();
    if ((v12 & 0x10000) != 0 || (uint64_t v13 = ByteBuffer.readSlice(length:)((unsigned __int16)v12), v14 >> 60 == 15))
    {
      outlined consume of Data._Representation(*v2, v2[1]);
      *uint64_t v2 = v10;
      v2[1] = v9;
      v2[2] = v11;
LABEL_22:
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v21 = 0;
      *(unsigned char *)(v21 + 4) = 1;
      return swift_willThrow();
    }
    uint64_t v25 = v13;
    unint64_t v26 = v14;
    uint64_t v27 = v15;
    closure #1 in ByteBuffer.readKeyShare(messageType:helloRetryRequest:)(&v25, v23);
    if (!v3)
    {
      uint64_t v20 = 0;
      switch(v26 >> 62)
      {
        case 1uLL:
          uint64_t v20 = v25 >> 32;
          break;
        case 2uLL:
          uint64_t v20 = *(void *)(v25 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v20 = BYTE6(v26);
          break;
      }
      if (__OFSUB__(v20, v27)) {
LABEL_33:
      }
        __break(1u);
      if (v20 == v27)
      {
        outlined consume of Data._Representation(v25, v26);
        outlined consume of Data._Representation(v10, v9);
        return v23[0];
      }
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v22 = 1;
      *(unsigned char *)(v22 + 4) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    outlined consume of Data._Representation(v25, v26);
    outlined consume of Data._Representation(*v2, v2[1]);
    *uint64_t v2 = v10;
    v2[1] = v9;
    v2[2] = v11;
    return swift_willThrow();
  }
  if (a1 != 2)
  {
    int v16 = a1 | 0x330000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v17 = v16;
    *(unsigned char *)(v17 + 4) = 0;
    return swift_willThrow();
  }
  if ((a2 & 1) == 0)
  {
    LOWORD(result) = ByteBuffer.readKeyShareEntry()();
    if (v19 >> 60 != 15) {
      return (unsigned __int16)result;
    }
    goto LABEL_22;
  }
  unsigned __int16 v24 = 0;
  uint64_t v4 = v2[2];
  uint64_t v5 = v4 + 2;
  if (__OFADD__(v4, 2))
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v6 = *v2;
  unint64_t v7 = v2[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v6 >> 32;
      goto LABEL_18;
    case 2uLL:
      uint64_t v8 = *(void *)(v6 + 24);
      goto LABEL_18;
    case 3uLL:
      if (v5 > 0) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
      uint64_t v8 = BYTE6(v7);
LABEL_18:
      if (v8 < v5) {
        goto LABEL_22;
      }
LABEL_19:
      uint64_t v25 = *v2;
      unint64_t v26 = v7;
      if (v5 < v4) {
        goto LABEL_32;
      }
      v23[0] = v4;
      v23[1] = v4 + 2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      uint64_t result = bswap32(v24) >> 16;
      v2[2] = v5;
      break;
  }
  return result;
}

void Extension.KeyShare.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (a4 >> 60) & 3;
  if (v7)
  {
    if (v7 == 1)
    {
      unint64_t v11 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a2);
      uint64_t v12 = 0;
      switch(a4 >> 62)
      {
        case 1uLL:
          uint64_t v12 = a3 >> 32;
          goto LABEL_11;
        case 2uLL:
          uint64_t v12 = *(void *)(a3 + 24);
LABEL_11:
          outlined copy of Data._Representation(a3, v11);
          outlined copy of Data._Representation(a3, v11);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v12 = BYTE6(a4);
          break;
      }
      if (v12 < a5)
      {
        __break(1u);
        JUMPOUT(0x1B571AA50);
      }
      uint64_t v13 = Data._Representation.subscript.getter();
      unint64_t v15 = v14;
      Data.hash(into:)();
      outlined consume of Data._Representation(v13, v15);
      outlined consume of Extension.KeyShare(a2, a3, a4);
      outlined consume of Extension.KeyShare(a2, a3, a4);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(a2);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, a2);
  }
}

Swift::Int Extension.KeyShare.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  uint64_t v8 = (a3 >> 60) & 3;
  if (v8)
  {
    if (v8 == 1)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a1);
      uint64_t v9 = 0;
      switch(a3 >> 62)
      {
        case 1uLL:
          uint64_t v9 = a2 >> 32;
          goto LABEL_9;
        case 2uLL:
          uint64_t v9 = *(void *)(a2 + 24);
LABEL_9:
          outlined copy of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
          outlined copy of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v9 = BYTE6(a3);
          break;
      }
      if (v9 < a4)
      {
        __break(1u);
        JUMPOUT(0x1B571ABDCLL);
      }
      uint64_t v10 = Data._Representation.subscript.getter();
      unint64_t v12 = v11;
      Data.hash(into:)();
      outlined consume of Data._Representation(v10, v12);
      outlined consume of Extension.KeyShare(a1, a2, a3);
      outlined consume of Extension.KeyShare(a1, a2, a3);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(a1);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v14, a1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.KeyShare()
{
  return Extension.KeyShare.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance Extension.KeyShare(uint64_t a1)
{
  Extension.KeyShare.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.KeyShare()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  Hasher.init(_seed:)();
  uint64_t v5 = (v3 >> 60) & 3;
  if (v5)
  {
    if (v5 == 1)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v1);
      uint64_t v6 = 0;
      switch(v3 >> 62)
      {
        case 1uLL:
          uint64_t v6 = v2 >> 32;
          goto LABEL_9;
        case 2uLL:
          uint64_t v6 = *(void *)(v2 + 24);
LABEL_9:
          outlined copy of Data._Representation(v2, v3 & 0xCFFFFFFFFFFFFFFFLL);
          outlined copy of Data._Representation(v2, v3 & 0xCFFFFFFFFFFFFFFFLL);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v6 = BYTE6(v3);
          break;
      }
      if (v6 < v4)
      {
        __break(1u);
        JUMPOUT(0x1B571AD74);
      }
      uint64_t v7 = Data._Representation.subscript.getter();
      unint64_t v9 = v8;
      Data.hash(into:)();
      outlined consume of Data._Representation(v7, v9);
      outlined consume of Extension.KeyShare(v1, v2, v3);
      outlined consume of Extension.KeyShare(v1, v2, v3);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v1);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v11, v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.KeyShare(uint64_t a1, uint64_t a2)
{
  return specialized static Extension.KeyShare.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t Extension.KeyShare.KeyShareEntry.hash(into:)(int a1, Swift::UInt16 a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  Hasher._combine(_:)(a2);
  uint64_t v8 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v8 = a3 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 24);
LABEL_5:
      outlined copy of Data._Representation(a3, a4);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = BYTE6(a4);
      break;
  }
  if (v8 < a5)
  {
    __break(1u);
    JUMPOUT(0x1B571AE88);
  }
  uint64_t v9 = Data._Representation.subscript.getter();
  unint64_t v11 = v10;
  Data.hash(into:)();
  outlined consume of Data._Representation(v9, v11);

  return outlined consume of Data._Representation(a3, a4);
}

Swift::Int Extension.KeyShare.KeyShareEntry.hashValue.getter(Swift::UInt16 a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  uint64_t v8 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v8 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = BYTE6(a3);
      break;
  }
  if (v8 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B571AF94);
  }
  uint64_t v9 = Data._Representation.subscript.getter();
  unint64_t v11 = v10;
  Data.hash(into:)();
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.KeyShare.KeyShareEntry()
{
  return Extension.KeyShare.KeyShareEntry.hashValue.getter(*(_WORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Extension.KeyShare.KeyShareEntry()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  Hasher._combine(_:)(*(_WORD *)v0);
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B571B09CLL);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);

  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.KeyShare.KeyShareEntry()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt16 v4 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  uint64_t v5 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v5 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v2);
      break;
  }
  if (v5 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B571B1A0);
  }
  uint64_t v6 = Data._Representation.subscript.getter();
  unint64_t v8 = v7;
  Data.hash(into:)();
  outlined consume of Data._Representation(v6, v8);
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

unint64_t Extension.KeyShare.KeyShareEntry.description.getter(__int16 a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = NamedGroup.description.getter(a1);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x63784579656B202CLL;
  v9._object = (void *)0xEF203A65676E6168;
  String.append(_:)(v9);
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = BYTE6(a3);
      break;
  }
  if (__OFSUB__(v10, a4))
  {
    __break(1u);
    JUMPOUT(0x1B571B308);
  }
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x29736574796220;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  return 0xD000000000000015;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Extension.KeyShare.KeyShareEntry()
{
  return Extension.KeyShare.KeyShareEntry.description.getter(*(_WORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t ByteBuffer.writeKeyShareEntry(_:)(unsigned int a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  __int16 v14 = bswap32(a1) >> 16;
  uint64_t v7 = MEMORY[0x1E4FBB2B8];
  uint64_t v8 = MEMORY[0x1E4F27EF0];
  uint64_t v17 = MEMORY[0x1E4FBB2B8];
  uint64_t v18 = MEMORY[0x1E4F27EF0];
  unint64_t v15 = &v14;
  int v16 = &v15;
  __swift_project_boxed_opaque_existential_1(&v15, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v9 = BYTE6(a3);
      break;
  }
  BOOL v10 = __OFSUB__(v9, a4);
  unint64_t v11 = v9 - a4;
  if (v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v11 & 0x8000000000000000) != 0 || v11 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B571B510);
  }
  __int16 v14 = bswap32(v11) >> 16;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  unint64_t v15 = &v14;
  int v16 = &v15;
  __swift_project_boxed_opaque_existential_1(&v15, v7);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  uint64_t v12 = ByteBuffer.writeImmutableBuffer(_:)(a2, a3, a4);
  BOOL v10 = __OFADD__(v12, 4);
  uint64_t result = v12 + 4;
  if (v10) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t ByteBuffer.readKeyShareEntry()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_8;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_8;
    case 3uLL:
      if (v2 >= 1) {
        return 0;
      }
      goto LABEL_9;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_8:
      if (v5 >= v2)
      {
LABEL_9:
        if (v2 >= v1)
        {
          uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
          unint64_t v8 = lazy protocol witness table accessor for type Data and conformance Data();
          lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
          DataProtocol.copyBytes<A>(to:from:)();
          v0[2] = v2;
          outlined copy of Data._Representation(v3, v4);
          uint64_t v9 = specialized ByteBuffer.readInteger<A>(as:)();
          if ((v9 & 0x10000) != 0 || (uint64_t v10 = ByteBuffer.readSlice(length:)((unsigned __int16)v9), v11 >> 60 == 15))
          {
            outlined consume of Data._Representation(*v0, v0[1]);
            uint64_t v6 = 0;
            *uint64_t v0 = v3;
            v0[1] = v4;
            v0[2] = v2;
            return v6;
          }
          unint64_t v13 = v11;
          uint64_t v6 = bswap32(0) >> 16;
          uint64_t v22 = v10;
          unint64_t v23 = v11;
          uint64_t v24 = v12;
          uint64_t v14 = 0;
          unint64_t v21 = v11 >> 62;
          switch(v11 >> 62)
          {
            case 1uLL:
              uint64_t v14 = v10 >> 32;
              break;
            case 2uLL:
              uint64_t v14 = *(void *)(v10 + 24);
              break;
            case 3uLL:
              break;
            default:
              uint64_t v14 = BYTE6(v11);
              break;
          }
          uint64_t v15 = v10;
          if (!__OFSUB__(v14, v12))
          {
            uint64_t v16 = ByteBuffer.readSlice(length:)(v14 - v12);
            if (v17 >> 60 == 15)
            {
              __break(1u);
              goto LABEL_32;
            }
            uint64_t v7 = v16;
            unint64_t v8 = v17;
            uint64_t v18 = 0;
            switch((int)v21)
            {
              case 1:
                uint64_t v18 = v15 >> 32;
                break;
              case 2:
                uint64_t v18 = *(void *)(v15 + 24);
                break;
              case 3:
                break;
              default:
                uint64_t v18 = BYTE6(v13);
                break;
            }
            if (!__OFSUB__(v18, v24))
            {
              if (v18 == v24)
              {
                outlined consume of ByteBuffer?(v15, v13);
                outlined consume of Data._Representation(v3, v4);
                return v6;
              }
LABEL_32:
              lazy protocol witness table accessor for type TLSError and conformance TLSError();
              swift_allocError();
              *(_DWORD *)uint64_t v20 = 1;
              *(unsigned char *)(v20 + 4) = 1;
              swift_willThrow();
              outlined consume of ByteBuffer?(v7, v8);
              outlined consume of Data._Representation(v22, v23);
              outlined consume of Data._Representation(*v0, v0[1]);
              swift_willThrow();
              swift_unexpectedError();
              __break(1u);
              JUMPOUT(0x1B571B84CLL);
            }
LABEL_30:
            __break(1u);
          }
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      return 0;
  }
}

uint64_t closure #1 in ByteBuffer.readKeyShare(messageType:helloRetryRequest:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  uint64_t v45 = *a1 >> 32;
  uint64_t v48 = BYTE6(v3);
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v6 = *a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(v3);
      break;
  }
  BOOL v7 = __OFSUB__(v6, v4);
  uint64_t v8 = v6 - v4;
  if (v7) {
LABEL_80:
  }
    __break(1u);
  if (v8 >= 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v8 + 31;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v9 >> 5) & ~(v9 >> 63), 0, MEMORY[0x1E4FBC860]);
  char v46 = (void *)result;
  uint64_t v11 = v4 + 2;
  if (__OFADD__(v4, 2))
  {
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  unint64_t v43 = v3;
  unint64_t v47 = v3 >> 62;
  uint64_t v44 = v5;
  uint64_t v49 = v2;
  while (2)
  {
    uint64_t v12 = v48;
    switch(v47)
    {
      case 1uLL:
        uint64_t v12 = v45;
        goto LABEL_14;
      case 2uLL:
        uint64_t v12 = *(void *)(v2 + 24);
        goto LABEL_14;
      case 3uLL:
        if (v11 < 1) {
          goto LABEL_17;
        }
        goto LABEL_67;
      default:
LABEL_14:
        if (v12 < v11) {
          goto LABEL_67;
        }
LABEL_17:
        if (v11 < v4) {
          goto LABEL_69;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
        lazy protocol witness table accessor for type Data and conformance Data();
        lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
        uint64_t result = DataProtocol.copyBytes<A>(to:from:)();
        long long v5[2] = v11;
        uint64_t v13 = v11 + 2;
        if (__OFADD__(v11, 2)) {
          goto LABEL_70;
        }
        break;
    }
    unsigned int v14 = bswap32(0) >> 16;
    uint64_t v15 = v45;
    uint64_t v16 = v48;
    switch(v47)
    {
      case 1uLL:
        goto LABEL_21;
      case 2uLL:
        uint64_t v15 = *(void *)(v49 + 24);
        swift_retain();
LABEL_21:
        swift_retain();
        uint64_t v16 = v15;
        goto LABEL_22;
      case 3uLL:
        if (v13 < 1) {
          goto LABEL_25;
        }
        goto LABEL_64;
      default:
LABEL_22:
        if (v16 < v13)
        {
          uint64_t result = outlined consume of Data._Representation(v49, v3);
LABEL_64:
          uint64_t v19 = v49;
          goto LABEL_66;
        }
LABEL_25:
        if (v13 < v11) {
          goto LABEL_71;
        }
        uint64_t result = DataProtocol.copyBytes<A>(to:from:)();
        uint64_t v17 = bswap32(0) >> 16;
        long long v5[2] = v13;
        uint64_t v4 = v13 + v17;
        if (__OFADD__(v13, v17)) {
          goto LABEL_72;
        }
        break;
    }
    uint64_t v18 = v48;
    uint64_t v19 = v49;
    switch(v47)
    {
      case 1uLL:
        uint64_t v18 = v45;
        goto LABEL_29;
      case 2uLL:
        if (*(void *)(v49 + 24) < v4) {
          goto LABEL_65;
        }
        goto LABEL_34;
      case 3uLL:
        if (v4 <= 0) {
          goto LABEL_34;
        }
        goto LABEL_66;
      default:
LABEL_29:
        if (v18 >= v4)
        {
LABEL_34:
          if (v4 >= v13)
          {
            uint64_t v20 = Data._Representation.subscript.getter();
            long long v5[2] = v4;
            unint64_t v22 = v21 >> 62;
            uint64_t v23 = v20;
            unint64_t v24 = v21;
            uint64_t v25 = 0;
            uint64_t v26 = 0;
            switch(v21 >> 62)
            {
              case 1uLL:
                uint64_t v26 = (int)v23;
                uint64_t v25 = v23 >> 32;
                break;
              case 2uLL:
                uint64_t v26 = *(void *)(v23 + 16);
                uint64_t v25 = *(void *)(v23 + 24);
                break;
              case 3uLL:
                break;
              default:
                uint64_t v26 = 0;
                uint64_t v25 = BYTE6(v21);
                break;
            }
            BOOL v7 = __OFSUB__(v25, v26);
            uint64_t v27 = v25 - v26;
            if (!v7)
            {
              uint64_t v28 = v26 + v27;
              if (!__OFADD__(v26, v27))
              {
                uint64_t v29 = v22;
                switch((int)v22)
                {
                  case 1:
                    uint64_t v30 = v23 >> 32;
                    goto LABEL_47;
                  case 2:
                    uint64_t v30 = *(void *)(v23 + 24);
                    goto LABEL_47;
                  case 3:
                    if (v28 > 0) {
                      goto LABEL_79;
                    }
                    goto LABEL_48;
                  default:
                    uint64_t v30 = BYTE6(v21);
LABEL_47:
                    if (v30 < v28) {
                      goto LABEL_78;
                    }
LABEL_48:
                    if (v28 < v26) {
                      goto LABEL_76;
                    }
                    uint64_t v31 = Data._Representation.subscript.getter();
                    uint64_t v32 = v31;
                    unint64_t v34 = v33;
                    uint64_t v35 = 0;
                    switch(v33 >> 62)
                    {
                      case 1uLL:
                        uint64_t v35 = (int)v31;
                        break;
                      case 2uLL:
                        uint64_t v35 = *(void *)(v31 + 16);
                        break;
                      default:
                        break;
                    }
                    uint64_t v36 = 0;
                    switch(v29)
                    {
                      case 1:
                        uint64_t v36 = v23 >> 32;
                        break;
                      case 2:
                        uint64_t v36 = *(void *)(v23 + 24);
                        break;
                      case 3:
                        break;
                      default:
                        uint64_t v36 = BYTE6(v24);
                        break;
                    }
                    if (__OFSUB__(v36, v28)) {
                      goto LABEL_77;
                    }
                    if (v36 != v28)
                    {
                      lazy protocol witness table accessor for type TLSError and conformance TLSError();
                      swift_allocError();
                      *(_DWORD *)uint64_t v41 = 1;
                      *(unsigned char *)(v41 + 4) = 1;
                      swift_willThrow();
                      outlined consume of Data._Representation(v32, v34);
                      outlined consume of Data._Representation(v23, v24);
                      outlined consume of Data._Representation(*v44, v44[1]);
                      swift_willThrow();
                      swift_unexpectedError();
                      __break(1u);
                      JUMPOUT(0x1B571BE44);
                    }
                    outlined consume of Data._Representation(v23, v24);
                    unint64_t v3 = v43;
                    outlined consume of Data._Representation(v49, v43);
                    outlined copy of Data._Representation(v32, v34);
                    unint64_t v37 = v46;
                    unint64_t v39 = v46[2];
                    unint64_t v38 = v46[3];
                    if (v39 >= v38 >> 1) {
                      unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v46);
                    }
                    v37[2] = v39 + 1;
                    char v46 = v37;
                    long long v40 = &v37[4 * v39];
                    *((_WORD *)v40 + 16) = v14;
                    v40[5] = v32;
                    v40[6] = v34;
                    v40[7] = v35;
                    uint64_t result = outlined consume of Data._Representation(v32, v34);
                    uint64_t v11 = v4 + 2;
                    uint64_t v5 = v44;
                    uint64_t v2 = v49;
                    if (!__OFADD__(v4, 2)) {
                      continue;
                    }
                    goto LABEL_68;
                }
              }
              goto LABEL_75;
            }
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
            goto LABEL_80;
          }
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
LABEL_65:
        uint64_t result = outlined consume of Data._Representation(v49, v3);
LABEL_66:
        *uint64_t v5 = v19;
        v5[1] = v3;
        long long v5[2] = v11;
LABEL_67:
        *a2 = v46;
        return result;
    }
  }
}

uint64_t specialized static Extension.KeyShare.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v11 = (a3 >> 60) & 3;
  if (v11)
  {
    if (v11 == 1)
    {
      if ((a7 & 0x3000000000000000) == 0x1000000000000000 && (unsigned __int16)a1 == (unsigned __int16)a5)
      {
        unint64_t v17 = a3 & 0xCFFFFFFFFFFFFFFFLL;
        outlined copy of Extension.KeyShare(a1, a2, a3);
        outlined copy of Extension.KeyShare(a5, a6, a7);
        LOBYTE(v17) = specialized static ByteBuffer.== infix(_:_:)(a2, v17, a4, a6, a7 & 0xCFFFFFFFFFFFFFFFLL, a8);
        outlined consume of Extension.KeyShare(a5, a6, a7);
        outlined consume of Extension.KeyShare(a1, a2, a3);
        if (v17) {
          return 1;
        }
      }
      return 0;
    }
    return (a7 & 0x3000000000000000) == 0x2000000000000000 && (unsigned __int16)a1 == (unsigned __int16)a5;
  }
  else
  {
    if ((a7 & 0x3000000000000000) != 0) {
      return 0;
    }
    return specialized static Array<A>.== infix(_:_:)(a1, a5);
  }
}

unint64_t lazy protocol witness table accessor for type Extension.KeyShare and conformance Extension.KeyShare()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.KeyShare and conformance Extension.KeyShare;
  if (!lazy protocol witness table cache variable for type Extension.KeyShare and conformance Extension.KeyShare)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.KeyShare and conformance Extension.KeyShare);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry;
  if (!lazy protocol witness table cache variable for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry);
  }
  return result;
}

uint64_t destroy for Extension.KeyShare(uint64_t a1)
{
  return outlined consume of Extension.KeyShare(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t *initializeWithCopy for Extension.KeyShare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of Extension.KeyShare(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for Extension.KeyShare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of Extension.KeyShare(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of Extension.KeyShare(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for Extension.KeyShare(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of Extension.KeyShare(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.KeyShare(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2);
  }
  if ((~*(void *)(a1 + 16) & 0x3000000000000000) != 0) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension.KeyShare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(_OWORD *)(result + 16) = xmmword_1B5780020;
    }
  }
  return result;
}

uint64_t getEnumTag for Extension.KeyShare(uint64_t a1)
{
  return (*(void *)(a1 + 16) >> 60) & 3;
}

uint64_t destructiveProjectEnumData for Extension.KeyShare(uint64_t result)
{
  *(void *)(result + 16) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for Extension.KeyShare(uint64_t result, char a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
  return result;
}

ValueMetadata *type metadata accessor for Extension.KeyShare()
{
  return &type metadata for Extension.KeyShare;
}

ValueMetadata *type metadata accessor for Extension.KeyShare.KeyShareEntry()
{
  return &type metadata for Extension.KeyShare.KeyShareEntry;
}

unint64_t ByteBuffer.writeALPN(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  void v14[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  uint64_t v9 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v4 >> 32;
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(v4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v9 = BYTE6(v5);
      break;
  }
  __int16 v13 = 0;
  v14[3] = MEMORY[0x1E4FBB2B8];
  v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = &v13;
  v14[1] = v14;
  __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  unint64_t v10 = ByteBuffer.writeImmutableBuffer(_:)(a1, a2, a3);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  unint64_t v11 = v10;
  if (v10 >> 16) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v10, v9);
  return v11 + 2;
}

uint64_t ByteBuffer.readALPN(messageType:)(unsigned __int8 a1)
{
  if (a1 != 8 && a1 != 1)
  {
    uint64_t v1 = a1 | 0x100000u;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v1;
    *(unsigned char *)(v12 + 4) = 0;
    goto LABEL_9;
  }
  int v3 = (uint64_t *)v1;
  uint64_t v5 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  outlined copy of Data._Representation(*(void *)v1, v4);
  uint64_t v7 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v7 & 0x10000) != 0 || (uint64_t v8 = ByteBuffer.readSlice(length:)((unsigned __int16)v7), v9 >> 60 == 15))
  {
    outlined consume of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
    *(void *)uint64_t v1 = v5;
    *(void *)(v1 + 8) = v4;
    *(void *)(v1 + 16) = v6;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 0;
    *(unsigned char *)(v11 + 4) = 1;
    goto LABEL_9;
  }
  unint64_t v14 = v9;
  uint64_t v23 = v8;
  unint64_t v24 = v9;
  unint64_t v15 = v9 >> 62;
  uint64_t v25 = v10;
  uint64_t v16 = 0;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v16 = v8 >> 32;
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(v8 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v9);
      break;
  }
  uint64_t v26 = v8;
  uint64_t v22 = v6;
  if (__OFSUB__(v16, v10))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v17 = ByteBuffer.readSlice(length:)(v16 - v10);
  if (v18 >> 60 == 15)
  {
LABEL_27:
    __break(1u);
    JUMPOUT(0x1B571C66CLL);
  }
  uint64_t v1 = v17;
  unint64_t v19 = v18;
  uint64_t v20 = 0;
  switch((int)v15)
  {
    case 1:
      uint64_t v20 = v26 >> 32;
      break;
    case 2:
      uint64_t v20 = *(void *)(v26 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v20 = BYTE6(v14);
      break;
  }
  if (__OFSUB__(v20, v25))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v20 == v25)
  {
    outlined consume of ByteBuffer?(v26, v14);
    outlined consume of Data._Representation(v5, v4);
    return v1;
  }
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  *(_DWORD *)uint64_t v21 = 1;
  *(unsigned char *)(v21 + 4) = 1;
  swift_willThrow();
  outlined consume of ByteBuffer?(v1, v19);
  outlined consume of Data._Representation(v23, v24);
  outlined consume of Data._Representation(*v3, v3[1]);
  *int v3 = v5;
  v3[1] = v4;
  v3[2] = v22;
LABEL_9:
  swift_willThrow();
  return v1;
}

uint64_t Extension.ApplicationLayerProtocolNegotiation.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = BYTE6(a3);
      break;
  }
  if (v7 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B571C76CLL);
  }
  uint64_t v8 = Data._Representation.subscript.getter();
  unint64_t v10 = v9;
  Data.hash(into:)();
  outlined consume of Data._Representation(v8, v10);

  return outlined consume of Data._Representation(a2, a3);
}

Swift::Int Extension.ApplicationLayerProtocolNegotiation.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
LABEL_5:
      outlined copy of Data._Representation(a1, a2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  if (v6 < a3)
  {
    __break(1u);
    JUMPOUT(0x1B571C860);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v9);
  outlined consume of Data._Representation(a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.ApplicationLayerProtocolNegotiation()
{
  return Extension.ApplicationLayerProtocolNegotiation.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Extension.ApplicationLayerProtocolNegotiation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(*v0, v0[1]);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B571C958);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);

  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.ApplicationLayerProtocolNegotiation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
LABEL_5:
      outlined copy of Data._Representation(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1B571CA4CLL);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation;
  if (!lazy protocol witness table cache variable for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.ApplicationLayerProtocolNegotiation()
{
  return &type metadata for Extension.ApplicationLayerProtocolNegotiation;
}

uint64_t NewSessionTicket.ticketLifetime.getter()
{
  return *v0;
}

uint64_t NewSessionTicket.ticketLifetime.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t NewSessionTicket.ticketAgeAdd.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t NewSessionTicket.ticketAgeAdd.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*NewSessionTicket.ticketAgeAdd.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t NewSessionTicket.ticketNonce.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t NewSessionTicket.ticket.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t NewSessionTicket.ticket.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = outlined consume of Data._Representation(v3[4], v3[5]);
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  return result;
}

uint64_t (*NewSessionTicket.ticket.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t NewSessionTicket.extensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NewSessionTicket.extensions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*NewSessionTicket.extensions.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t NewSessionTicket.init(ticketLifetime:ticketAgeAdd:ticketNonce:ticket:extensions:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(_DWORD *)a9 = result;
  *(_DWORD *)(a9 + 4) = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  *(void *)(a9 + 56) = a10;
  return result;
}

void NewSessionTicket.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_DWORD *)v1);
  Hasher._combine(_:)(*(_DWORD *)(v1 + 4));
  long long v18 = *(_OWORD *)(v1 + 8);
  uint64_t v19 = *(void *)(v1 + 24);
  uint64_t v4 = 0;
  switch(*((void *)&v18 + 1) >> 62)
  {
    case 1:
      uint64_t v4 = (uint64_t)v18 >> 32;
      goto LABEL_5;
    case 2:
      uint64_t v4 = *(void *)(v18 + 24);
LABEL_5:
      outlined retain of Extension.QUICTransportParameters((uint64_t)&v18);
      break;
    case 3:
      break;
    default:
      uint64_t v4 = BYTE14(v18);
      break;
  }
  if (v4 < v19)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  outlined release of ByteBuffer((uint64_t)&v18);
  long long v16 = *(_OWORD *)(v2 + 32);
  uint64_t v17 = *(void *)(v2 + 48);
  uint64_t v8 = 0;
  switch(*((void *)&v16 + 1) >> 62)
  {
    case 1:
      uint64_t v8 = (uint64_t)v16 >> 32;
      goto LABEL_11;
    case 2:
      uint64_t v8 = *(void *)(v16 + 24);
LABEL_11:
      outlined retain of Extension.QUICTransportParameters((uint64_t)&v16);
      break;
    case 3:
      break;
    default:
      uint64_t v8 = BYTE14(v16);
      break;
  }
  if (v8 < v17)
  {
LABEL_19:
    __break(1u);
    JUMPOUT(0x1B571CE80);
  }
  uint64_t v9 = Data._Representation.subscript.getter();
  unint64_t v11 = v10;
  Data.hash(into:)();
  outlined consume of Data._Representation(v9, v11);
  outlined release of ByteBuffer((uint64_t)&v16);
  uint64_t v12 = *(void *)(v2 + 56);
  uint64_t v15 = v12;
  Swift::UInt v13 = *(void *)(v12 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    unint64_t v14 = (long long *)(v12 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v14, (uint64_t)v20);
      outlined retain of Extension((uint64_t)v20, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Extension.hash(into:)(a1);
      outlined retain of Extension((uint64_t)v20, (void (*)(void, void, void, void, void))outlined consume of Extension);
      unint64_t v14 = (long long *)((char *)v14 + 40);
      --v13;
    }
    while (v13);
    outlined release of [Extension]((uint64_t)&v15);
  }
}

uint64_t static NewSessionTicket.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || (specialized static ByteBuffer.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0|| (specialized static ByteBuffer.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) == 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a2 + 56);

  return specialized static Array<A>.== infix(_:_:)(v4, v5);
}

Swift::Int NewSessionTicket.hashValue.getter()
{
  Hasher.init(_seed:)();
  NewSessionTicket.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NewSessionTicket()
{
  Hasher.init(_seed:)();
  NewSessionTicket.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NewSessionTicket(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  unint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  if ((specialized static ByteBuffer.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0|| (specialized static ByteBuffer.== infix(_:_:)(v9, v2, v3, v8, v5, v6) & 1) == 0)
  {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v4, v7);
}

unint64_t NewSessionTicket.write(into:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unsigned int v47 = bswap32(*(_DWORD *)v2);
  uint64_t v4 = MEMORY[0x1E4FBB2B8];
  uint64_t v5 = MEMORY[0x1E4F27EF0];
  uint64_t v44 = MEMORY[0x1E4FBB2B8];
  uint64_t v45 = MEMORY[0x1E4F27EF0];
  uint64_t v42 = &v47;
  unint64_t v43 = v48;
  __swift_project_boxed_opaque_existential_1(&v42, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  unsigned int v47 = bswap32(*(_DWORD *)(v2 + 4));
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  uint64_t v42 = &v47;
  unint64_t v43 = v48;
  __swift_project_boxed_opaque_existential_1(&v42, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  outlined retain of NewSessionTicket((void *)v2);
  unint64_t v6 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, (void *)v2);
  outlined release of NewSessionTicket((void *)v2);
  unint64_t v7 = v6 + 8;
  if (__OFADD__(v6, 8))
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v10 = 0;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v10 = v8 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(v8 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = BYTE6(v9);
      break;
  }
  LOWORD(v47) = 0;
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  uint64_t v42 = &v47;
  unint64_t v43 = (char *)&v47 + 2;
  __swift_project_boxed_opaque_existential_1(&v42, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  unint64_t v11 = ByteBuffer.writeImmutableBuffer(_:)(*(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_58;
  }
  unint64_t v12 = v11;
  if (v11 >> 16)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v11, v10);
  unint64_t v13 = v7 + v12 + 2;
  if (__OFADD__(v7, v12 + 2))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v14 = *a1;
  unint64_t v15 = a1[1];
  uint64_t v16 = 0;
  switch(v15 >> 62)
  {
    case 1uLL:
      uint64_t v16 = v14 >> 32;
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(v14 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v15);
      break;
  }
  LOWORD(v47) = 0;
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  uint64_t v42 = &v47;
  unint64_t v43 = (char *)&v47 + 2;
  __swift_project_boxed_opaque_existential_1(&v42, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  uint64_t v17 = *(void *)(v2 + 56);
  uint64_t v40 = v17;
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
LABEL_47:
    unint64_t v20 = 0;
    goto LABEL_48;
  }
  uint64_t v37 = v16;
  unint64_t v38 = v13;
  uint64_t v19 = v17 + 32;
  swift_bridgeObjectRetain();
  unint64_t v20 = 0;
  do
  {
    outlined init with take of Extension((long long *)v19, (uint64_t)v46);
    uint64_t v21 = *(void *)v19;
    unint64_t v22 = *(void *)(v19 + 8);
    unint64_t v23 = *(void *)(v19 + 16);
    outlined init with take of Extension(v46, (uint64_t)&v47);
    v19 += 40;
    unsigned int v24 = 42;
    switch(v48[28])
    {
      case 1:
        swift_bridgeObjectRetain();
        unsigned int v24 = 10;
        break;
      case 2:
        outlined init with take of Extension.SupportedVersions((uint64_t)&v47, (uint64_t)v50);
        outlined copy of Extension.ServerCertificateType(v21, v22 & 1);
        unsigned int v24 = 43;
        break;
      case 3:
      case 9:
        outlined copy of Data._Representation(v21, v22);
        unsigned int v24 = 16;
        break;
      case 4:
        outlined init with take of Extension.KeyShare((uint64_t)&v47, (uint64_t)v51);
        outlined copy of Extension.KeyShare(v21, v22, v23);
        unsigned int v24 = 51;
        break;
      case 5:
        break;
      case 6:
        swift_bridgeObjectRetain();
        unsigned int v24 = 13;
        break;
      case 7:
        outlined init with take of Extension.ServerCertificateType((uint64_t)&v47, (uint64_t)v52);
        outlined copy of Extension.ServerCertificateType(v21, v22 & 1);
        unsigned int v24 = 20;
        break;
      case 8:
        outlined copy of Data._Representation(v21, v22);
        unsigned int v24 = 57;
        break;
      case 0xA:
        swift_bridgeObjectRetain();
        unsigned int v24 = 45;
        break;
      case 0xB:
        outlined init with take of Extension.PreSharedKey((uint64_t)&v47, (uint64_t)v53);
        outlined copy of Extension.PreSharedKey(v21, v22, v23 & 1);
        unsigned int v24 = 41;
        break;
      case 0xC:
        outlined init with take of Extension.TicketRequest((uint64_t)&v47, (uint64_t)v41);
        unsigned int v24 = 58;
        break;
      case 0xD:
        unsigned int v24 = (unsigned __int16)v47;
        outlined copy of Data._Representation(v22, v23);
        break;
      default:
        outlined init with take of Extension.ServerName((uint64_t)&v47, (uint64_t)v49);
        outlined copy of ByteBuffer?(v21, v22);
        unsigned int v24 = 0;
        break;
    }
    __int16 v39 = __rev16(v24);
    uint64_t v44 = v4;
    uint64_t v25 = MEMORY[0x1E4F27EF0];
    uint64_t v45 = MEMORY[0x1E4F27EF0];
    uint64_t v42 = (unsigned int *)&v39;
    unint64_t v43 = (char *)&v40;
    __swift_project_boxed_opaque_existential_1(&v42, v4);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    uint64_t v26 = *a1;
    unint64_t v27 = a1[1];
    uint64_t v28 = 0;
    switch(v27 >> 62)
    {
      case 1uLL:
        uint64_t v28 = v26 >> 32;
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v26 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v28 = BYTE6(v27);
        break;
    }
    __int16 v39 = 0;
    uint64_t v44 = v4;
    uint64_t v45 = v25;
    uint64_t v42 = (unsigned int *)&v39;
    unint64_t v43 = (char *)&v40;
    __swift_project_boxed_opaque_existential_1(&v42, v4);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    unint64_t v29 = closure #1 in ByteBuffer.writeExtension(_:)(a1, v46);
    if ((v29 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    unint64_t v30 = v29;
    if (v29 >> 16) {
      goto LABEL_51;
    }
    uint64_t v31 = v28 + 2;
    if (__OFADD__(v28, 2)) {
      goto LABEL_52;
    }
    if (v28 < a1[2]) {
      goto LABEL_53;
    }
    uint64_t v32 = *a1;
    unint64_t v33 = a1[1];
    uint64_t v34 = 0;
    switch(v33 >> 62)
    {
      case 1uLL:
        uint64_t v34 = v32 >> 32;
        break;
      case 2uLL:
        uint64_t v34 = *(void *)(v32 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v34 = BYTE6(v33);
        break;
    }
    if (v34 < v31) {
      goto LABEL_54;
    }
    __int16 v39 = bswap32(v29) >> 16;
    if (v31 < v28) {
      goto LABEL_55;
    }
    uint64_t v44 = v4;
    uint64_t v45 = v25;
    uint64_t v42 = (unsigned int *)&v39;
    unint64_t v43 = (char *)&v40;
    __swift_project_boxed_opaque_existential_1(&v42, v4);
    Data._Representation.replaceSubrange(_:with:count:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    outlined retain of Extension((uint64_t)v46, (void (*)(void, void, void, void, void))outlined consume of Extension);
    BOOL v35 = __OFADD__(v20, v30 + 4);
    v20 += v30 + 4;
    if (v35) {
      goto LABEL_56;
    }
    --v18;
  }
  while (v18);
  outlined release of [Extension]((uint64_t)&v40);
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v16 = v37;
  unint64_t v13 = v38;
  if (v20 >> 16)
  {
    __break(1u);
    goto LABEL_47;
  }
LABEL_48:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v20, v16);
  unint64_t result = v13 + v20 + 2;
  if (__OFADD__(v13, v20 + 2)) {
LABEL_62:
  }
    __break(1u);
  return result;
}

double NewSessionTicket.init(bytes:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized NewSessionTicket.init(bytes:)(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t readEntireBuffer #1 (_:) in NewSessionTicket.init(bytes:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  BOOL v6 = __OFSUB__(v5, v4);
  uint64_t v7 = v5 - v4;
  if (v6)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    JUMPOUT(0x1B571D86CLL);
  }
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v2 >> 32;
      goto LABEL_11;
    case 2uLL:
      uint64_t v9 = *(void *)(v2 + 24);
      goto LABEL_11;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v9 = BYTE6(v3);
LABEL_11:
      if (v9 < v8)
      {
        __break(1u);
LABEL_13:
        if (v8 > 0) {
          goto LABEL_19;
        }
      }
      if (v8 < v4) {
        goto LABEL_18;
      }
      uint64_t result = Data._Representation.subscript.getter();
      a1[2] = v8;
      return result;
  }
}

void *readExtensions #1 (_:) in NewSessionTicket.init(bytes:)(uint64_t *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v30 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = v3 + 2;
  if (__OFADD__(v3, 2))
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
  }
  uint64_t v5 = v1;
  uint64_t v28 = (void *)MEMORY[0x1E4FBC860];
  while (2)
  {
    uint64_t v6 = BYTE6(v30);
    switch(v30 >> 62)
    {
      case 1uLL:
        uint64_t v6 = v2 >> 32;
        goto LABEL_5;
      case 2uLL:
        if (*(void *)(v2 + 24) < v4) {
          return v28;
        }
        goto LABEL_10;
      case 3uLL:
        if (v4 < 1) {
          goto LABEL_10;
        }
        return v28;
      default:
LABEL_5:
        if (v6 < v4) {
          return v28;
        }
LABEL_10:
        uint64_t v31 = v2;
        unint64_t v32 = v30;
        if (v4 < v3) {
          goto LABEL_50;
        }
        uint64_t v36 = v3;
        unint64_t v37 = v4;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
        lazy protocol witness table accessor for type Data and conformance Data();
        lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
        DataProtocol.copyBytes<A>(to:from:)();
        a1[2] = v4;
        uint64_t v7 = v4 + 2;
        if (__OFADD__(v4, 2)) {
          goto LABEL_51;
        }
        break;
    }
    unsigned int v8 = bswap32(0) >> 16;
    uint64_t v9 = v2 >> 32;
    uint64_t v10 = BYTE6(v30);
    switch(v30 >> 62)
    {
      case 1uLL:
        goto LABEL_14;
      case 2uLL:
        uint64_t v9 = *(void *)(v2 + 24);
        swift_retain();
LABEL_14:
        swift_retain();
        uint64_t v10 = v9;
        goto LABEL_15;
      case 3uLL:
        if (v7 < 1) {
          goto LABEL_18;
        }
        goto LABEL_46;
      default:
LABEL_15:
        if (v10 >= v7)
        {
LABEL_18:
          uint64_t v31 = v2;
          unint64_t v32 = v30;
          if (v7 < v4) {
            goto LABEL_52;
          }
          uint64_t v36 = v4;
          unint64_t v37 = v4 + 2;
          DataProtocol.copyBytes<A>(to:from:)();
          uint64_t v11 = bswap32(0) >> 16;
          a1[2] = v7;
          uint64_t v12 = v7 + v11;
          if (__OFADD__(v7, v11)) {
            goto LABEL_53;
          }
          uint64_t v13 = BYTE6(v30);
          switch(v30 >> 62)
          {
            case 1uLL:
              uint64_t v13 = v2 >> 32;
              goto LABEL_23;
            case 2uLL:
              uint64_t v13 = *(void *)(v2 + 24);
              goto LABEL_23;
            case 3uLL:
              if (v12 <= 0) {
                goto LABEL_26;
              }
              goto LABEL_46;
            default:
LABEL_23:
              if (v13 < v12) {
                goto LABEL_45;
              }
LABEL_26:
              if (v12 < v7) {
                goto LABEL_54;
              }
              uint64_t v14 = Data._Representation.subscript.getter();
              a1[2] = v12;
              uint64_t v16 = 0;
              switch(v15 >> 62)
              {
                case 1uLL:
                  uint64_t v16 = (int)v14;
                  break;
                case 2uLL:
                  uint64_t v16 = *(void *)(v14 + 16);
                  break;
                default:
                  break;
              }
              uint64_t v36 = v14;
              unint64_t v37 = v15;
              uint64_t v38 = v16;
              closure #1 in ByteBuffer.readExtension(messageType:helloRetryRequest:)(&v36, v8, 4u, 0, (uint64_t)&v31);
              if (v5) {
                goto LABEL_47;
              }
              uint64_t v17 = 0;
              switch(v37 >> 62)
              {
                case 1uLL:
                  uint64_t v17 = v36 >> 32;
                  break;
                case 2uLL:
                  uint64_t v17 = *(void *)(v36 + 24);
                  break;
                case 3uLL:
                  break;
                default:
                  uint64_t v17 = BYTE6(v37);
                  break;
              }
              if (__OFSUB__(v17, v38)) {
                goto LABEL_55;
              }
              if (v17 != v38)
              {
                lazy protocol witness table accessor for type TLSError and conformance TLSError();
                swift_allocError();
                *(_DWORD *)uint64_t v26 = 1;
                *(unsigned char *)(v26 + 4) = 1;
                swift_willThrow();
                outlined consume of Extension(v31, v32, v33, v34, v35);
LABEL_47:
                outlined consume of Data._Representation(v36, v37);
                outlined consume of Data._Representation(*a1, a1[1]);
                *a1 = v2;
                a1[1] = v30;
                a1[2] = v4;
                swift_willThrow();
                swift_bridgeObjectRelease();
                return v28;
              }
              outlined consume of Data._Representation(v36, v37);
              outlined consume of Data._Representation(v2, v30);
              uint64_t v18 = v31;
              unint64_t v19 = v32;
              unint64_t v20 = v33;
              uint64_t v21 = v34;
              char v22 = v35;
              outlined copy of Extension(v31, v32, v33, v34, v35);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
              }
              unint64_t v24 = v28[2];
              unint64_t v23 = v28[3];
              if (v24 >= v23 >> 1) {
                uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v28);
              }
              void v28[2] = v24 + 1;
              uint64_t v25 = &v28[5 * v24];
              v25[4] = v18;
              v25[5] = v19;
              v25[6] = v20;
              v25[7] = v21;
              *((unsigned char *)v25 + 64) = v22;
              outlined consume of Extension(v18, v19, v20, v21, v22);
              uint64_t v3 = a1[2];
              uint64_t v4 = v3 + 2;
              if (__OFADD__(v3, 2)) {
                goto LABEL_49;
              }
              break;
          }
          continue;
        }
LABEL_45:
        outlined consume of Data._Representation(v2, v30);
LABEL_46:
        *a1 = v2;
        a1[1] = v30;
        a1[2] = v4;
        return v28;
    }
  }
}

unint64_t protocol witness for HandshakeMessageProtocol.write(into:) in conformance NewSessionTicket(uint64_t *a1)
{
  return NewSessionTicket.write(into:)(a1);
}

uint64_t outlined release of ByteBuffer(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of [Extension](uint64_t a1)
{
  return a1;
}

void *outlined retain of NewSessionTicket(void *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  outlined copy of Data._Representation(a1[1], a1[2]);
  outlined copy of Data._Representation(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized NewSessionTicket.init(bytes:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v5 & 0x100000000) != 0) {
    goto LABEL_8;
  }
  int v6 = v5;
  unint64_t v7 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v7 & 0x100000000) != 0) {
    goto LABEL_8;
  }
  int v8 = v7;
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v11 = a1[2];
  outlined copy of Data._Representation(*a1, v9);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t)&v21);
  if (v2)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v11;
    return swift_willThrow();
  }
  unint64_t v12 = v22;
  if (v22 >> 60 == 15)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
LABEL_7:
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v11;
LABEL_8:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v20 = v21;
  uint64_t v24 = v23;
  outlined consume of Data._Representation(v10, v9);
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v11 = a1[2];
  outlined copy of Data._Representation(*a1, v9);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, (uint64_t)&v21);
  if (v22 >> 60 == 15)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
LABEL_12:
    outlined consume of ByteBuffer?(v20, v12);
    goto LABEL_7;
  }
  uint64_t v17 = v21;
  uint64_t v18 = v23;
  unint64_t v19 = v22;
  outlined consume of Data._Representation(v10, v9);
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v11 = a1[2];
  outlined copy of Data._Representation(*a1, v9);
  uint64_t v15 = specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
  if (!v15)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    outlined consume of ByteBuffer?(v17, v19);
    goto LABEL_12;
  }
  uint64_t v16 = v15;
  uint64_t result = outlined consume of Data._Representation(v10, v9);
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v8;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v19;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v16;
  return result;
}

unint64_t lazy protocol witness table accessor for type NewSessionTicket and conformance NewSessionTicket()
{
  unint64_t result = lazy protocol witness table cache variable for type NewSessionTicket and conformance NewSessionTicket;
  if (!lazy protocol witness table cache variable for type NewSessionTicket and conformance NewSessionTicket)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NewSessionTicket and conformance NewSessionTicket);
  }
  return result;
}

uint64_t destroy for NewSessionTicket(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NewSessionTicket(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  outlined copy of Data._Representation(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  unint64_t v7 = a2[5];
  outlined copy of Data._Representation(v6, v7);
  a1[4] = v6;
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NewSessionTicket(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  outlined consume of Data._Representation(v10, v11);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NewSessionTicket(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  outlined consume of Data._Representation(v6, v7);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NewSessionTicket(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NewSessionTicket(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NewSessionTicket()
{
  return &type metadata for NewSessionTicket;
}

uint64_t CertificateMessage.certificateList.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t (*CertificateMessage.certificateList.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t CertificateMessage.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = BYTE6(a3);
      break;
  }
  if (v10 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B571E53CLL);
  }
  uint64_t v11 = Data._Representation.subscript.getter();
  unint64_t v13 = v12;
  Data.hash(into:)();
  outlined consume of Data._Representation(v11, v13);
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, a5);

  return swift_bridgeObjectRelease();
}

uint64_t static CertificateMessage.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CertificateMessage.__derived_struct_equals(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized static Array<A>.== infix(_:_:)) & 1;
}

Swift::Int CertificateMessage.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 24);
LABEL_5:
      outlined copy of Data._Representation(a1, a2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = BYTE6(a2);
      break;
  }
  if (v8 < a3)
  {
    __break(1u);
    JUMPOUT(0x1B571E690);
  }
  uint64_t v9 = Data._Representation.subscript.getter();
  unint64_t v11 = v10;
  Data.hash(into:)();
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v13, a4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateMessage()
{
  return CertificateMessage.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CertificateMessage(uint64_t a1)
{
  return CertificateMessage.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateMessage()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  uint64_t v5 = 0;
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
LABEL_5:
      outlined copy of Data._Representation(v2, v1);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v1);
      break;
  }
  if (v5 < v4)
  {
    __break(1u);
    JUMPOUT(0x1B571E7B8);
  }
  uint64_t v6 = Data._Representation.subscript.getter();
  unint64_t v8 = v7;
  Data.hash(into:)();
  outlined consume of Data._Representation(v6, v8);
  outlined consume of Data._Representation(v2, v1);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v10, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(a1, a2, a3, a4, specialized static Array<A>.== infix(_:_:));
}

uint64_t CertificateMessage.CertificateEntry.extensions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

void CertificateMessage.CertificateEntry.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = BYTE6(a3);
      break;
  }
  if (v10 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B571E970);
  }
  uint64_t v11 = Data._Representation.subscript.getter();
  unint64_t v13 = v12;
  Data.hash(into:)();
  outlined consume of Data._Representation(v11, v13);
  outlined consume of Data._Representation(a2, a3);
  Swift::UInt v14 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v14);
  if (v14)
  {
    uint64_t v15 = (long long *)(a5 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v15, (uint64_t)v16);
      outlined retain of Extension((uint64_t)v16, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Extension.hash(into:)(a1);
      outlined retain of Extension((uint64_t)v16, (void (*)(void, void, void, void, void))outlined consume of Extension);
      uint64_t v15 = (long long *)((char *)v15 + 40);
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t static CertificateMessage.CertificateEntry.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CertificateMessage.__derived_struct_equals(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized static Array<A>.== infix(_:_:)) & 1;
}

uint64_t static CertificateMessage.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t))
{
  if ((specialized static ByteBuffer.== infix(_:_:)(a1, a2, a3, a5, a6, a7) & 1) == 0) {
    return 0;
  }

  return a9(a4, a8);
}

Swift::Int CertificateMessage.CertificateEntry.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  CertificateMessage.CertificateEntry.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateMessage.CertificateEntry()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  CertificateMessage.CertificateEntry.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CertificateMessage.CertificateEntry(uint64_t a1)
{
  CertificateMessage.CertificateEntry.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateMessage.CertificateEntry()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  CertificateMessage.CertificateEntry.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage.CertificateEntry(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(a1, a2, a3, a4, specialized static Array<A>.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a2[3];
  if ((specialized static ByteBuffer.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]) & 1) == 0) {
    return 0;
  }

  return a5(v5, v6);
}

unint64_t CertificateMessage.write(into:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, a2, a3, a4);
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(a1, a2, a3, a4, a5);
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRelease();
  unint64_t result = v10 + v11;
  if (__OFADD__(v10, v11)) {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in CertificateMessage.write(into:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = *(void *)(a5 + 16);
  if (!v41) {
    return 0;
  }
  uint64_t v42 = a5 + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = MEMORY[0x1E4FBB2B8];
  do
  {
    uint64_t v9 = (uint64_t *)(v42 + 32 * v6);
    uint64_t v10 = *v9;
    uint64_t v47 = v9[2];
    unint64_t v49 = v9[1];
    uint64_t v50 = v9[3];
    uint64_t v11 = *a1;
    unint64_t v12 = a1[1];
    uint64_t v13 = 0;
    switch(v12 >> 62)
    {
      case 1uLL:
        uint64_t v13 = v11 >> 32;
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(v11 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v12);
        break;
    }
    LOBYTE(v51) = 0;
    uint64_t v56 = v8;
    uint64_t v14 = MEMORY[0x1E4F27EF0];
    uint64_t v57 = MEMORY[0x1E4F27EF0];
    uint64_t v54 = &v51;
    uint64_t v55 = (char *)&v51 + 1;
    __swift_project_boxed_opaque_existential_1(&v54, v8);
    outlined copy of Data._Representation(v10, v49);
    swift_bridgeObjectRetain();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    __int16 v51 = 0;
    uint64_t v56 = v8;
    uint64_t v57 = v14;
    uint64_t v54 = &v51;
    uint64_t v55 = &v52;
    __swift_project_boxed_opaque_existential_1(&v54, v8);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    uint64_t v15 = ByteBuffer.writeImmutableBuffer(_:)(v10, v49, v47);
    if (v15 > 0xFFFFFF) {
      goto LABEL_61;
    }
    uint64_t v16 = v15;
    uint64_t v17 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v15), v13);
    if (__OFADD__(v13, v17)) {
      goto LABEL_62;
    }
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v16, v13 + v17);
    uint64_t v18 = v16 + 3;
    uint64_t v19 = *a1;
    unint64_t v20 = a1[1];
    uint64_t v21 = 0;
    switch(v20 >> 62)
    {
      case 1uLL:
        uint64_t v21 = v19 >> 32;
        break;
      case 2uLL:
        uint64_t v21 = *(void *)(v19 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v21 = BYTE6(v20);
        break;
    }
    uint64_t v48 = v10;
    __int16 v51 = 0;
    uint64_t v56 = v8;
    uint64_t v57 = MEMORY[0x1E4F27EF0];
    uint64_t v54 = &v51;
    uint64_t v55 = &v52;
    __swift_project_boxed_opaque_existential_1(&v54, v8);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    uint64_t v22 = *(void *)(v50 + 16);
    if (!v22)
    {
      unint64_t v24 = 0;
      goto LABEL_48;
    }
    uint64_t v43 = v21;
    uint64_t v44 = v18;
    uint64_t v45 = v6;
    uint64_t v46 = v7;
    uint64_t v23 = v50 + 32;
    swift_bridgeObjectRetain();
    unint64_t v24 = 0;
    do
    {
      outlined init with take of Extension((long long *)v23, (uint64_t)v58);
      uint64_t v25 = *(void *)v23;
      unint64_t v26 = *(void *)(v23 + 8);
      unint64_t v27 = *(void *)(v23 + 16);
      outlined init with take of Extension(v58, (uint64_t)v59);
      v23 += 40;
      unsigned int v28 = 42;
      switch(v60)
      {
        case 1:
          swift_bridgeObjectRetain();
          unsigned int v28 = 10;
          break;
        case 2:
          outlined init with take of Extension.SupportedVersions((uint64_t)v59, (uint64_t)v62);
          outlined copy of Extension.ServerCertificateType(v25, v26 & 1);
          unsigned int v28 = 43;
          break;
        case 3:
        case 9:
          outlined copy of Data._Representation(v25, v26);
          unsigned int v28 = 16;
          break;
        case 4:
          outlined init with take of Extension.KeyShare((uint64_t)v59, (uint64_t)v63);
          outlined copy of Extension.KeyShare(v25, v26, v27);
          unsigned int v28 = 51;
          break;
        case 5:
          break;
        case 6:
          swift_bridgeObjectRetain();
          unsigned int v28 = 13;
          break;
        case 7:
          outlined init with take of Extension.ServerCertificateType((uint64_t)v59, (uint64_t)v64);
          outlined copy of Extension.ServerCertificateType(v25, v26 & 1);
          unsigned int v28 = 20;
          break;
        case 8:
          outlined copy of Data._Representation(v25, v26);
          unsigned int v28 = 57;
          break;
        case 10:
          swift_bridgeObjectRetain();
          unsigned int v28 = 45;
          break;
        case 11:
          outlined init with take of Extension.PreSharedKey((uint64_t)v59, (uint64_t)v65);
          outlined copy of Extension.PreSharedKey(v25, v26, v27 & 1);
          unsigned int v28 = 41;
          break;
        case 12:
          outlined init with take of Extension.TicketRequest((uint64_t)v59, (uint64_t)v53);
          unsigned int v28 = 58;
          break;
        case 13:
          unsigned int v28 = v59[0];
          outlined copy of Data._Representation(v26, v27);
          break;
        default:
          outlined init with take of Extension.ServerName((uint64_t)v59, (uint64_t)v61);
          outlined copy of ByteBuffer?(v25, v26);
          unsigned int v28 = 0;
          break;
      }
      __int16 v51 = __rev16(v28);
      uint64_t v56 = v8;
      uint64_t v57 = MEMORY[0x1E4F27EF0];
      uint64_t v54 = &v51;
      uint64_t v55 = &v52;
      __swift_project_boxed_opaque_existential_1(&v54, v8);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      uint64_t v29 = *a1;
      unint64_t v30 = a1[1];
      uint64_t v31 = 0;
      switch(v30 >> 62)
      {
        case 1uLL:
          uint64_t v31 = v29 >> 32;
          break;
        case 2uLL:
          uint64_t v31 = *(void *)(v29 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v31 = BYTE6(v30);
          break;
      }
      __int16 v51 = 0;
      uint64_t v56 = v8;
      uint64_t v57 = MEMORY[0x1E4F27EF0];
      uint64_t v54 = &v51;
      uint64_t v55 = &v52;
      __swift_project_boxed_opaque_existential_1(&v54, v8);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      unint64_t v32 = closure #1 in ByteBuffer.writeExtension(_:)(a1, v58);
      if ((v32 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      unint64_t v33 = v32;
      if (v32 >> 16) {
        goto LABEL_55;
      }
      uint64_t v34 = v31 + 2;
      if (__OFADD__(v31, 2)) {
        goto LABEL_56;
      }
      if (v31 < a1[2]) {
        goto LABEL_57;
      }
      uint64_t v35 = *a1;
      unint64_t v36 = a1[1];
      uint64_t v37 = 0;
      switch(v36 >> 62)
      {
        case 1uLL:
          uint64_t v37 = v35 >> 32;
          break;
        case 2uLL:
          uint64_t v37 = *(void *)(v35 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v37 = BYTE6(v36);
          break;
      }
      if (v37 < v34) {
        goto LABEL_58;
      }
      __int16 v51 = bswap32(v32) >> 16;
      if (v34 < v31) {
        goto LABEL_59;
      }
      uint64_t v56 = v8;
      uint64_t v57 = MEMORY[0x1E4F27EF0];
      uint64_t v54 = &v51;
      uint64_t v55 = &v52;
      __swift_project_boxed_opaque_existential_1(&v54, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      outlined retain of Extension((uint64_t)v58, (void (*)(void, void, void, void, void))outlined consume of Extension);
      BOOL v38 = __OFADD__(v24, v33 + 4);
      v24 += v33 + 4;
      if (v38) {
        goto LABEL_60;
      }
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    uint64_t v6 = v45;
    uint64_t v7 = v46;
    if ((v24 & 0x8000000000000000) != 0) {
      goto LABEL_63;
    }
    uint64_t v21 = v43;
    uint64_t v18 = v44;
    if (v24 >> 16)
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
LABEL_48:
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v24, v21);
    outlined consume of Data._Representation(v48, v49);
    swift_bridgeObjectRelease();
    uint64_t v39 = v18 + v24 + 2;
    if (__OFADD__(v18, v24 + 2)) {
      goto LABEL_65;
    }
    BOOL v38 = __OFADD__(v7, v39);
    v7 += v39;
    if (v38) {
LABEL_66:
    }
      __break(1u);
    ++v6;
  }
  while (v6 != v41);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t ByteBuffer.writeCertificateEntry(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(v4, a1, a2, a3);
  outlined consume of Data._Representation(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v10 = *v4;
  unint64_t v11 = v4[1];
  uint64_t v12 = 0;
  switch(v11 >> 62)
  {
    case 1uLL:
      uint64_t v12 = v10 >> 32;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(v10 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v12 = BYTE6(v11);
      break;
  }
  unsigned __int16 v44 = 0;
  uint64_t v13 = MEMORY[0x1E4FBB2B8];
  uint64_t v41 = MEMORY[0x1E4FBB2B8];
  uint64_t v42 = MEMORY[0x1E4F27EF0];
  uint64_t v39 = &v44;
  uint64_t v40 = v45;
  __swift_project_boxed_opaque_existential_1(&v39, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  uint64_t v14 = *(void *)(a4 + 16);
  if (!v14)
  {
LABEL_39:
    unint64_t v16 = 0;
    goto LABEL_40;
  }
  uint64_t v34 = v12;
  uint64_t v35 = v9;
  uint64_t v15 = a4 + 32;
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  do
  {
    uint64_t v17 = v13;
    outlined init with take of Extension((long long *)v15, (uint64_t)v43);
    uint64_t v18 = *(void *)v15;
    unint64_t v19 = *(void *)(v15 + 8);
    unint64_t v20 = *(void *)(v15 + 16);
    outlined init with take of Extension(v43, (uint64_t)&v44);
    v15 += 40;
    unsigned int v21 = 42;
    switch(v45[30])
    {
      case 1:
        swift_bridgeObjectRetain();
        unsigned int v21 = 10;
        break;
      case 2:
        outlined init with take of Extension.SupportedVersions((uint64_t)&v44, (uint64_t)v47);
        outlined copy of Extension.ServerCertificateType(v18, v19 & 1);
        unsigned int v21 = 43;
        break;
      case 3:
      case 9:
        outlined copy of Data._Representation(v18, v19);
        unsigned int v21 = 16;
        break;
      case 4:
        outlined init with take of Extension.KeyShare((uint64_t)&v44, (uint64_t)v48);
        outlined copy of Extension.KeyShare(v18, v19, v20);
        unsigned int v21 = 51;
        break;
      case 5:
        break;
      case 6:
        swift_bridgeObjectRetain();
        unsigned int v21 = 13;
        break;
      case 7:
        outlined init with take of Extension.ServerCertificateType((uint64_t)&v44, (uint64_t)v49);
        outlined copy of Extension.ServerCertificateType(v18, v19 & 1);
        unsigned int v21 = 20;
        break;
      case 8:
        outlined copy of Data._Representation(v18, v19);
        unsigned int v21 = 57;
        break;
      case 0xA:
        swift_bridgeObjectRetain();
        unsigned int v21 = 45;
        break;
      case 0xB:
        outlined init with take of Extension.PreSharedKey((uint64_t)&v44, (uint64_t)v50);
        outlined copy of Extension.PreSharedKey(v18, v19, v20 & 1);
        unsigned int v21 = 41;
        break;
      case 0xC:
        outlined init with take of Extension.TicketRequest((uint64_t)&v44, (uint64_t)v38);
        unsigned int v21 = 58;
        break;
      case 0xD:
        unsigned int v21 = v44;
        outlined copy of Data._Representation(v19, v20);
        break;
      default:
        outlined init with take of Extension.ServerName((uint64_t)&v44, (uint64_t)v46);
        outlined copy of ByteBuffer?(v18, v19);
        unsigned int v21 = 0;
        break;
    }
    __int16 v36 = __rev16(v21);
    uint64_t v13 = v17;
    uint64_t v41 = v17;
    uint64_t v22 = MEMORY[0x1E4F27EF0];
    uint64_t v42 = MEMORY[0x1E4F27EF0];
    uint64_t v39 = (unsigned __int16 *)&v36;
    uint64_t v40 = &v37;
    __swift_project_boxed_opaque_existential_1(&v39, v17);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
    uint64_t v23 = *v4;
    unint64_t v24 = v4[1];
    uint64_t v25 = 0;
    switch(v24 >> 62)
    {
      case 1uLL:
        uint64_t v25 = v23 >> 32;
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(v23 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v25 = BYTE6(v24);
        break;
    }
    __int16 v36 = 0;
    uint64_t v41 = v17;
    uint64_t v42 = v22;
    uint64_t v39 = (unsigned __int16 *)&v36;
    uint64_t v40 = &v37;
    __swift_project_boxed_opaque_existential_1(&v39, v17);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
    unint64_t v26 = closure #1 in ByteBuffer.writeExtension(_:)(v4, v43);
    if ((v26 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    unint64_t v27 = v26;
    if (v26 >> 16) {
      goto LABEL_43;
    }
    uint64_t v28 = v25 + 2;
    if (__OFADD__(v25, 2)) {
      goto LABEL_44;
    }
    if (v25 < v4[2]) {
      goto LABEL_45;
    }
    uint64_t v29 = *v4;
    unint64_t v30 = v4[1];
    uint64_t v31 = 0;
    switch(v30 >> 62)
    {
      case 1uLL:
        uint64_t v31 = v29 >> 32;
        break;
      case 2uLL:
        uint64_t v31 = *(void *)(v29 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v31 = BYTE6(v30);
        break;
    }
    if (v31 < v28) {
      goto LABEL_46;
    }
    __int16 v36 = bswap32(v26) >> 16;
    if (v28 < v25) {
      goto LABEL_47;
    }
    uint64_t v41 = v17;
    uint64_t v42 = v22;
    uint64_t v39 = (unsigned __int16 *)&v36;
    uint64_t v40 = &v37;
    __swift_project_boxed_opaque_existential_1(&v39, v17);
    Data._Representation.replaceSubrange(_:with:count:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
    outlined retain of Extension((uint64_t)v43, (void (*)(void, void, void, void, void))outlined consume of Extension);
    BOOL v32 = __OFADD__(v16, v27 + 4);
    v16 += v27 + 4;
    if (v32) {
      goto LABEL_48;
    }
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v12 = v34;
  uint64_t v9 = v35;
  if (v16 >> 16)
  {
    __break(1u);
    goto LABEL_39;
  }
LABEL_40:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v16, v12);
  uint64_t result = v9 + v16 + 2;
  if (__OFADD__(v9, v16 + 2)) {
LABEL_50:
  }
    __break(1u);
  return result;
}

uint64_t CertificateMessage.init(bytes:)(uint64_t *a1)
{
  uint64_t result = specialized CertificateMessage.init(bytes:)(a1);
  if (v1) {
    return v3;
  }
  return result;
}

void *readCertificateEntries #1 (_:) in CertificateMessage.init(bytes:)()
{
  uint64_t v1 = ByteBuffer.readCertificateEntry()();
  if (v0)
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = v1;
    unint64_t v8 = v2;
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    while (v10)
    {
      outlined copy of Data._Representation(v7, v8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v12 = v5[2];
      unint64_t v11 = v5[3];
      if (v12 >= v11 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v5);
      }
      long long v5[2] = v12 + 1;
      uint64_t v13 = &v5[4 * v12];
      v13[4] = v7;
      v13[5] = v8;
      v13[6] = v9;
      v13[7] = v10;
      outlined consume of CertificateMessage.CertificateEntry?(v7, v8, v9, v10);
      uint64_t v7 = ByteBuffer.readCertificateEntry()();
      unint64_t v8 = v14;
      uint64_t v9 = v15;
      uint64_t v10 = v16;
    }
  }
  return v5;
}

uint64_t ByteBuffer.readCertificateEntry()()
{
  unint64_t v2 = v0;
  uint64_t v4 = *v0;
  unint64_t v3 = v0[1];
  uint64_t v5 = v0[2];
  outlined copy of Data._Representation(*v0, v3);
  __int16 v6 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v6 & 0x100) != 0
    || (v7 = v6, uint64_t v8 = specialized ByteBuffer.readInteger<A>(as:)(), (v8 & 0x10000) != 0)
    || (uint64_t v9 = ByteBuffer.readSlice(length:)((unsigned __int16)v8 | ((unint64_t)v7 << 16)), v10 >> 60 == 15))
  {
    outlined consume of Data._Representation(*v0, v0[1]);
    uint64_t v12 = 0;
    goto LABEL_5;
  }
  unint64_t v14 = v10;
  uint64_t v24 = v9;
  unint64_t v25 = v10;
  unint64_t v15 = v10 >> 62;
  uint64_t v26 = v11;
  uint64_t v16 = 0;
  switch(v10 >> 62)
  {
    case 1uLL:
      uint64_t v16 = v9 >> 32;
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(v9 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v10);
      break;
  }
  uint64_t v23 = v9;
  if (__OFSUB__(v16, v11))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v17 = ByteBuffer.readSlice(length:)(v16 - v11);
  if (v18 >> 60 == 15)
  {
LABEL_27:
    __break(1u);
    JUMPOUT(0x1B571FD2CLL);
  }
  uint64_t v12 = v17;
  unint64_t v19 = v18;
  uint64_t v20 = 0;
  switch((int)v15)
  {
    case 1:
      uint64_t v20 = v23 >> 32;
      break;
    case 2:
      uint64_t v20 = *(void *)(v23 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v20 = BYTE6(v14);
      break;
  }
  if (__OFSUB__(v20, v26))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v20 != v26)
  {
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 1;
    *(unsigned char *)(v22 + 4) = 1;
    swift_willThrow();
    outlined consume of ByteBuffer?(v12, v19);
    outlined consume of Data._Representation(v24, v25);
    outlined consume of Data._Representation(*v2, v2[1]);
    *unint64_t v2 = v4;
    v2[1] = v3;
    v2[2] = v5;
    swift_willThrow();
    return v12;
  }
  outlined consume of ByteBuffer?(v23, v14);
  outlined consume of Data._Representation(v4, v3);
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2[2];
  outlined copy of Data._Representation(*v2, v3);
  uint64_t v21 = specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(v2);
  if (v1)
  {
    outlined consume of Data._Representation(*v2, v2[1]);
    *unint64_t v2 = v4;
    v2[1] = v3;
    v2[2] = v5;
    swift_willThrow();
    outlined consume of ByteBuffer?(v12, v19);
    return v12;
  }
  if (v21)
  {
    outlined consume of Data._Representation(v4, v3);
    return v12;
  }
  outlined consume of Data._Representation(*v2, v2[1]);
  outlined consume of ByteBuffer?(v12, v19);
  uint64_t v12 = 0;
LABEL_5:
  *unint64_t v2 = v4;
  v2[1] = v3;
  v2[2] = v5;
  return v12;
}

unint64_t protocol witness for HandshakeMessageProtocol.write(into:) in conformance CertificateMessage(uint64_t *a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  outlined copy of Data._Representation(v3, v4);
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, v3, v4, v6);
  outlined consume of Data._Representation(v3, v4);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v3, v4);
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(a1, v3, v4, v6, v5);
  outlined consume of Data._Representation(v3, v4);
  swift_bridgeObjectRelease();
  unint64_t result = v7 + v8;
  if (__OFADD__(v7, v8)) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance CertificateMessage@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized CertificateMessage.init(bytes:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

void *readExtensions #1 (_:) in ByteBuffer.readCertificateEntry()(uint64_t *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v30 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = v3 + 2;
  if (__OFADD__(v3, 2))
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
  }
  uint64_t v5 = v1;
  uint64_t v28 = (void *)MEMORY[0x1E4FBC860];
  while (2)
  {
    uint64_t v6 = BYTE6(v30);
    switch(v30 >> 62)
    {
      case 1uLL:
        uint64_t v6 = v2 >> 32;
        goto LABEL_5;
      case 2uLL:
        if (*(void *)(v2 + 24) < v4) {
          return v28;
        }
        goto LABEL_10;
      case 3uLL:
        if (v4 < 1) {
          goto LABEL_10;
        }
        return v28;
      default:
LABEL_5:
        if (v6 < v4) {
          return v28;
        }
LABEL_10:
        uint64_t v31 = v2;
        unint64_t v32 = v30;
        if (v4 < v3) {
          goto LABEL_50;
        }
        uint64_t v36 = v3;
        unint64_t v37 = v4;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
        lazy protocol witness table accessor for type Data and conformance Data();
        lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
        DataProtocol.copyBytes<A>(to:from:)();
        a1[2] = v4;
        uint64_t v7 = v4 + 2;
        if (__OFADD__(v4, 2)) {
          goto LABEL_51;
        }
        break;
    }
    unsigned int v8 = bswap32(0) >> 16;
    uint64_t v9 = v2 >> 32;
    uint64_t v10 = BYTE6(v30);
    switch(v30 >> 62)
    {
      case 1uLL:
        goto LABEL_14;
      case 2uLL:
        uint64_t v9 = *(void *)(v2 + 24);
        swift_retain();
LABEL_14:
        swift_retain();
        uint64_t v10 = v9;
        goto LABEL_15;
      case 3uLL:
        if (v7 < 1) {
          goto LABEL_18;
        }
        goto LABEL_46;
      default:
LABEL_15:
        if (v10 >= v7)
        {
LABEL_18:
          uint64_t v31 = v2;
          unint64_t v32 = v30;
          if (v7 < v4) {
            goto LABEL_52;
          }
          uint64_t v36 = v4;
          unint64_t v37 = v4 + 2;
          DataProtocol.copyBytes<A>(to:from:)();
          uint64_t v11 = bswap32(0) >> 16;
          a1[2] = v7;
          uint64_t v12 = v7 + v11;
          if (__OFADD__(v7, v11)) {
            goto LABEL_53;
          }
          uint64_t v13 = BYTE6(v30);
          switch(v30 >> 62)
          {
            case 1uLL:
              uint64_t v13 = v2 >> 32;
              goto LABEL_23;
            case 2uLL:
              uint64_t v13 = *(void *)(v2 + 24);
              goto LABEL_23;
            case 3uLL:
              if (v12 <= 0) {
                goto LABEL_26;
              }
              goto LABEL_46;
            default:
LABEL_23:
              if (v13 < v12) {
                goto LABEL_45;
              }
LABEL_26:
              if (v12 < v7) {
                goto LABEL_54;
              }
              uint64_t v14 = Data._Representation.subscript.getter();
              a1[2] = v12;
              uint64_t v16 = 0;
              switch(v15 >> 62)
              {
                case 1uLL:
                  uint64_t v16 = (int)v14;
                  break;
                case 2uLL:
                  uint64_t v16 = *(void *)(v14 + 16);
                  break;
                default:
                  break;
              }
              uint64_t v36 = v14;
              unint64_t v37 = v15;
              uint64_t v38 = v16;
              closure #1 in ByteBuffer.readExtension(messageType:helloRetryRequest:)(&v36, v8, 0xBu, 0, (uint64_t)&v31);
              if (v5) {
                goto LABEL_47;
              }
              uint64_t v17 = 0;
              switch(v37 >> 62)
              {
                case 1uLL:
                  uint64_t v17 = v36 >> 32;
                  break;
                case 2uLL:
                  uint64_t v17 = *(void *)(v36 + 24);
                  break;
                case 3uLL:
                  break;
                default:
                  uint64_t v17 = BYTE6(v37);
                  break;
              }
              if (__OFSUB__(v17, v38)) {
                goto LABEL_55;
              }
              if (v17 != v38)
              {
                lazy protocol witness table accessor for type TLSError and conformance TLSError();
                swift_allocError();
                *(_DWORD *)uint64_t v26 = 1;
                *(unsigned char *)(v26 + 4) = 1;
                swift_willThrow();
                outlined consume of Extension(v31, v32, v33, v34, v35);
LABEL_47:
                outlined consume of Data._Representation(v36, v37);
                outlined consume of Data._Representation(*a1, a1[1]);
                *a1 = v2;
                a1[1] = v30;
                a1[2] = v4;
                swift_willThrow();
                swift_bridgeObjectRelease();
                return v28;
              }
              outlined consume of Data._Representation(v36, v37);
              outlined consume of Data._Representation(v2, v30);
              uint64_t v18 = v31;
              unint64_t v19 = v32;
              unint64_t v20 = v33;
              uint64_t v21 = v34;
              char v22 = v35;
              outlined copy of Extension(v31, v32, v33, v34, v35);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
              }
              unint64_t v24 = v28[2];
              unint64_t v23 = v28[3];
              if (v24 >= v23 >> 1) {
                uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v28);
              }
              void v28[2] = v24 + 1;
              unint64_t v25 = &v28[5 * v24];
              v25[4] = v18;
              v25[5] = v19;
              v25[6] = v20;
              v25[7] = v21;
              *((unsigned char *)v25 + 64) = v22;
              outlined consume of Extension(v18, v19, v20, v21, v22);
              uint64_t v3 = a1[2];
              uint64_t v4 = v3 + 2;
              if (__OFADD__(v3, 2)) {
                goto LABEL_49;
              }
              break;
          }
          continue;
        }
LABEL_45:
        outlined consume of Data._Representation(v2, v30);
LABEL_46:
        *a1 = v2;
        a1[1] = v30;
        a1[2] = v4;
        return v28;
    }
  }
}

uint64_t specialized CertificateMessage.init(bytes:)(uint64_t *a1)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  outlined copy of Data._Representation(*a1, v3);
  uint64_t v6 = (uint64_t)a1;
  __int16 v7 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v7 & 0x100) != 0 || (uint64_t v6 = (uint64_t)a1, v8 = ByteBuffer.readSlice(length:)(v7), v9 >> 60 == 15))
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    goto LABEL_4;
  }
  uint64_t v13 = v8;
  unint64_t v14 = v9;
  uint64_t v25 = v8;
  unint64_t v26 = v9;
  unint64_t v15 = v9 >> 62;
  uint64_t v27 = v10;
  uint64_t v16 = 0;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v16 = v8 >> 32;
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(v8 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v9);
      break;
  }
  if (__OFSUB__(v16, v10))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v24 = v5;
  uint64_t v17 = ByteBuffer.readSlice(length:)(v16 - v10);
  if (v18 >> 60 == 15)
  {
LABEL_27:
    __break(1u);
    JUMPOUT(0x1B572064CLL);
  }
  uint64_t v6 = v17;
  unint64_t v19 = v18;
  uint64_t v20 = 0;
  switch((int)v15)
  {
    case 1:
      uint64_t v20 = v13 >> 32;
      break;
    case 2:
      uint64_t v20 = *(void *)(v13 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v20 = BYTE6(v14);
      break;
  }
  if (__OFSUB__(v20, v27))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v20 != v27)
  {
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v23 = 1;
    *(unsigned char *)(v23 + 4) = 1;
    swift_willThrow();
    outlined consume of ByteBuffer?(v6, v19);
    outlined consume of Data._Representation(v25, v26);
    outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v24;
    goto LABEL_5;
  }
  outlined consume of ByteBuffer?(v13, v14);
  outlined consume of Data._Representation(v4, v3);
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v21 = a1[2];
  outlined copy of Data._Representation(*a1, v3);
  char v22 = specialized closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)(a1);
  if (v1)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v21;
    swift_willThrow();
    outlined consume of ByteBuffer?(v6, v19);
    return v6;
  }
  if (v22)
  {
    outlined consume of Data._Representation(v4, v3);
    return v6;
  }
  outlined consume of Data._Representation(*a1, a1[1]);
  outlined consume of ByteBuffer?(v6, v19);
  uint64_t v5 = v21;
LABEL_4:
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v5;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
LABEL_5:
  swift_willThrow();
  return v6;
}

unint64_t lazy protocol witness table accessor for type CertificateMessage and conformance CertificateMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type CertificateMessage and conformance CertificateMessage;
  if (!lazy protocol witness table cache variable for type CertificateMessage and conformance CertificateMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateMessage and conformance CertificateMessage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry()
{
  unint64_t result = lazy protocol witness table cache variable for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry;
  if (!lazy protocol witness table cache variable for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry);
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateMessage()
{
  return &type metadata for CertificateMessage;
}

uint64_t destroy for CertificateMessage(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for CertificateMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for CertificateMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for CertificateMessage(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateMessage.CertificateEntry()
{
  return &type metadata for CertificateMessage.CertificateEntry;
}

uint64_t outlined consume of CertificateMessage.CertificateEntry?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Data._Representation(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ByteBuffer.writeLengthPrefixedBytes<A>(_:)()
{
  void v3[5] = *MEMORY[0x1E4F143B8];
  unint64_t v0 = dispatch thunk of Collection.count.getter();
  if ((v0 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t v2 = bswap64(v0);
    v3[3] = MEMORY[0x1E4FBB2B8];
    v3[4] = MEMORY[0x1E4F27EF0];
    v3[0] = &v2;
    v3[1] = v3;
    __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E4FBB2B8]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    return ByteBuffer.writeBytes<A>(_:)();
  }
  return result;
}

uint64_t ByteBuffer.readLengthPrefixed<A>(_:)@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)v27 - v13;
  unint64_t v33 = 0;
  uint64_t v15 = v6[2];
  uint64_t v16 = v15 + 8;
  if (__OFADD__(v15, 8))
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  uint64_t v17 = *v6;
  unint64_t v18 = v6[1];
  switch(v18 >> 62)
  {
    case 1uLL:
      if (v17 >> 32 < v16) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 1, 1, a3);
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v17 + 24) >= v16) {
        goto LABEL_8;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 1, 1, a3);
    case 3uLL:
      if (v16 > 0) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 1, 1, a3);
      }
      goto LABEL_8;
    default:
      if (BYTE6(v18) < v16) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 1, 1, a3);
      }
LABEL_8:
      uint64_t v34 = *v6;
      unint64_t v35 = v18;
      if (v16 < v15) {
        goto LABEL_21;
      }
      v27[1] = a2;
      uint64_t v28 = a1;
      v27[0] = v12;
      uint64_t v29 = a4;
      uint64_t v30 = v5;
      uint64_t v31 = v15;
      uint64_t v32 = v15 + 8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      uint64_t v19 = bswap64(v33);
      v6[2] = v16;
      if (v19 < 0) {
        goto LABEL_22;
      }
      uint64_t v20 = ByteBuffer.readSlice(length:)(v19);
      if (v21 >> 60 == 15)
      {
        uint64_t v23 = *(void *)(a3 - 8);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v29, 1, 1, a3);
      }
      uint64_t v34 = v20;
      unint64_t v35 = v21;
      uint64_t v36 = v22;
      uint64_t v25 = v30;
      v28(&v34);
      uint64_t result = outlined consume of Data._Representation(v34, v35);
      if (!v25)
      {
        uint64_t v23 = *(void *)(a3 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, a3) != 1)
        {
          uint64_t v26 = v29;
          (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v29, v14, a3);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, a3);
        }
        (*(void (**)(char *, uint64_t))(v27[0] + 8))(v14, v11);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v29, 1, 1, a3);
      }
      return result;
  }
}

uint64_t SessionTicket.init(serialized:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PeerCertificateBundle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v89 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PeerCertificateBundle(0);
  uint64_t v87 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v86 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v90 = type metadata accessor for SymmetricKey();
  uint64_t v96 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  uint64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SessionTicket();
  uint64_t v19 = *(int *)(v18 + 52);
  uint64_t v85 = a3;
  uint64_t v20 = (uint64_t *)(a3 + v19);
  *(_OWORD *)uint64_t v20 = xmmword_1B577F270;
  uint64_t v20[2] = 0;
  unint64_t v21 = (int *)v18;
  uint64_t v22 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v22 = (int)a1;
      goto LABEL_4;
    case 2uLL:
      uint64_t v22 = *(void *)(a1 + 16);
LABEL_4:
      outlined copy of Data._Representation(a1, a2);
      break;
    default:
      break;
  }
  uint64_t v93 = a1;
  unint64_t v94 = a2;
  uint64_t v95 = v22;
  unint64_t v84 = specialized ByteBuffer.readInteger<A>(as:)();
  if (v23) {
    goto LABEL_29;
  }
  unint64_t v83 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v83 & 0x100000000) != 0) {
    goto LABEL_29;
  }
  unint64_t v82 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v82 & 0x100000000) != 0) {
    goto LABEL_29;
  }
  unint64_t v24 = specialized ByteBuffer.readInteger<A>(as:)();
  if (v25) {
    goto LABEL_29;
  }
  if ((v24 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v26 = ByteBuffer.readSlice(length:)(v24);
  if (v27 >> 60 == 15)
  {
LABEL_29:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)logger);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v49 = 0;
      _os_log_impl(&dword_1B56C5000, v47, v48, "Unable to parse decrypted session ticket", v49, 2u);
      MEMORY[0x1BA99F280](v49, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v50 = 7;
    *(unsigned char *)(v50 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(a1, a2);
    goto LABEL_34;
  }
  uint64_t v79 = v26;
  unint64_t v80 = v27;
  uint64_t v81 = v28;
  unint64_t v29 = specialized ByteBuffer.readInteger<A>(as:)();
  if (v30)
  {
LABEL_14:
    outlined consume of ByteBuffer?(v79, v80);
    goto LABEL_29;
  }
  if ((v29 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v31 = ByteBuffer.readSlice(length:)(v29);
  if (v32 >> 60 == 15) {
    goto LABEL_14;
  }
  uint64_t v76 = v31;
  unint64_t v77 = v32;
  uint64_t v78 = v33;
  unint64_t v34 = specialized ByteBuffer.readInteger<A>(as:)();
  if (v35) {
    goto LABEL_18;
  }
  if ((v34 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v36 = ByteBuffer.readSlice(length:)(v34);
  if (v37 >> 60 == 15)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v15, 1, 1, v90);
LABEL_27:
    outlined consume of ByteBuffer?(v79, v80);
    outlined consume of ByteBuffer?(v76, v77);
    unsigned __int16 v44 = &demangling cache variable for type metadata for SymmetricKey?;
    uint64_t v45 = v15;
LABEL_28:
    outlined destroy of HandshakeStateMachine?((uint64_t)v45, v44);
    goto LABEL_29;
  }
  unint64_t v39 = v37;
  unint64_t v40 = v37 >> 62;
  uint64_t v41 = 0;
  switch(v40)
  {
    case 1uLL:
      uint64_t v41 = v36 >> 32;
      break;
    case 2uLL:
      uint64_t v41 = *(void *)(v36 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v41 = BYTE6(v39);
      break;
  }
  if (v41 < (uint64_t)v38) {
    goto LABEL_56;
  }
  uint64_t v75 = v38;
  unint64_t v74 = v39;
  uint64_t v73 = (void (*)(char *, char *, uint64_t))v36;
  uint64_t v91 = Data._Representation.subscript.getter();
  uint64_t v92 = v42;
  SymmetricKey.init<A>(data:)();
  uint64_t v43 = v90;
  uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56);
  unint64_t v71 = v96 + 56;
  v72(v13, 0, 1, v90);
  outlined consume of ByteBuffer?((uint64_t)v73, v74);
  uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48);
  if (v75(v13, 1, v43) == 1)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SymmetricKey?);
    v72(v15, 1, 1, v90);
    goto LABEL_27;
  }
  char v52 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
  unsigned int v53 = v13;
  uint64_t v54 = v90;
  unint64_t v74 = v96 + 32;
  uint64_t v73 = v52;
  v52(v15, v53, v90);
  v72(v15, 0, 1, v54);
  if (v75(v15, 1, v54) == 1) {
    goto LABEL_27;
  }
  v73(v17, v15, v54);
  unint64_t v55 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v55 & 0x100000000) != 0)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v17, v54);
    goto LABEL_46;
  }
  LODWORD(v15) = v55;
  uint64_t v56 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v56 & 0x10000) != 0) {
    goto LABEL_44;
  }
  LOWORD(v13) = v56;
  LODWORD(v75) = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v75 & 0x10000) != 0) {
    goto LABEL_44;
  }
  __int16 v57 = specialized ByteBuffer.readInteger<A>(as:)();
  if ((v57 & 0x100) != 0) {
    goto LABEL_44;
  }
  if ((_BYTE)v57)
  {
    unint64_t v58 = specialized ByteBuffer.readInteger<A>(as:)();
    if ((v59 & 1) == 0)
    {
      if ((v58 & 0x8000000000000000) == 0)
      {
        uint64_t v70 = ByteBuffer.readSlice(length:)(v58);
        uint64_t v72 = v60;
        unint64_t v71 = v61;
        if (v61 >> 60 == 15) {
          goto LABEL_44;
        }
        goto LABEL_49;
      }
LABEL_57:
      __break(1u);
      JUMPOUT(0x1B5721760);
    }
LABEL_44:
    (*(void (**)(char *, uint64_t))(v96 + 8))(v17, v90);
LABEL_46:
    outlined consume of ByteBuffer?(v79, v80);
    outlined consume of ByteBuffer?(v76, v77);
    goto LABEL_29;
  }
LABEL_48:
  uint64_t v70 = 0;
  uint64_t v72 = 0;
  unint64_t v71 = 0xF000000000000000;
LABEL_49:
  uint64_t v62 = v88;
  ByteBuffer.readPeerCertificateBundle()(v89);
  if (v62)
  {
    outlined consume of ByteBuffer?(v79, v80);
    outlined consume of ByteBuffer?(v76, v77);
    outlined consume of ByteBuffer??(v70, v71);
    outlined consume of Data._Representation(a1, a2);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v17, v90);
LABEL_34:
    outlined consume of Data._Representation(v93, v94);
    return outlined consume of ByteBuffer?(*v20, v20[1]);
  }
LABEL_52:
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v89, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v17, v90);
    outlined consume of ByteBuffer?(v79, v80);
    outlined consume of ByteBuffer?(v76, v77);
    outlined consume of ByteBuffer??(v70, v71);
    unsigned __int16 v44 = &demangling cache variable for type metadata for PeerCertificateBundle?;
    uint64_t v45 = v89;
    goto LABEL_28;
  }
  outlined init with take of PeerCertificateBundle((uint64_t)v89, v86);
  uint64_t v63 = v85;
  Date.init(timeIntervalSinceReferenceDate:)();
  outlined consume of Data._Representation(a1, a2);
  outlined consume of Data._Representation(v93, v94);
  *(_DWORD *)(v63 + v21[5]) = v83;
  *(_DWORD *)(v63 + v21[6]) = v82;
  uint64_t v64 = (void *)(v63 + v21[7]);
  unint64_t v65 = v80;
  *uint64_t v64 = v79;
  v64[1] = v65;
  v64[2] = v81;
  uint64_t v66 = (void *)(v63 + v21[8]);
  unint64_t v67 = v77;
  *uint64_t v66 = v76;
  v66[1] = v67;
  v66[2] = v78;
  v73((char *)(v63 + v21[9]), v17, v90);
  *(_DWORD *)(v63 + v21[10]) = v15;
  *(_WORD *)(v63 + v21[11]) = (_WORD)v13;
  *(_WORD *)(v63 + v21[12]) = (_WORD)v75;
  unint64_t v68 = v71;
  *uint64_t v20 = v70;
  v20[1] = v68;
  uint64_t v20[2] = (uint64_t)v72;
  return outlined init with take of PeerCertificateBundle(v86, v63 + v21[14]);
}

uint64_t SessionTicket.isCompatibleWith(_:configuration:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v80 = a2;
  uint64_t v6 = type metadata accessor for SessionTicket();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v71 - v14;
  uint64_t v16 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v81 = *(void *)(v16 - 8);
  uint64_t v82 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v79 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a1 + 80);
  if (*(void *)(v21 + 16) && *(unsigned __int16 *)(v3 + *(int *)(v6 + 44)) == *(unsigned __int16 *)(v21 + 32))
  {
    unint64_t v77 = v20;
    uint64_t v78 = a3;
    uint64_t v85 = v6;
    uint64_t v75 = v13;
    uint64_t v76 = v10;
    v90[0] = *(void *)(a1 + 96);
    uint64_t v22 = *(void *)(v90[0] + 16);
    uint64_t v83 = v3;
    if (v22)
    {
      uint64_t v72 = v15;
      uint64_t v73 = v8;
      uint64_t v74 = v9;
      uint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v88 = 0;
      unint64_t v24 = (unsigned char *)(v23 + 64);
      do
      {
        if (*v24 == 3)
        {
          uint64_t v27 = *((void *)v24 - 4);
          unint64_t v28 = *((void *)v24 - 3);
          int64_t v30 = *((void *)v24 - 2);
          uint64_t v29 = *((void *)v24 - 1);
          uint64_t v31 = 0;
          switch(v28 >> 62)
          {
            case 1uLL:
              uint64_t v31 = v27 >> 32;
              goto LABEL_12;
            case 2uLL:
              uint64_t v31 = *(void *)(v27 + 24);
LABEL_12:
              outlined copy of Data._Representation(*((void *)v24 - 4), *((void *)v24 - 3));
              break;
            case 3uLL:
              break;
            default:
              uint64_t v31 = BYTE6(v28);
              break;
          }
          if (v31 < v30)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x1B5721E8CLL);
          }
          uint64_t v86 = v29;
          outlined copy of Data._Representation(v27, v28);
          uint64_t v32 = Data._Representation.subscript.getter();
          unint64_t v34 = v33;
          unint64_t v87 = v30;
          uint64_t v35 = v27;
          char v89 = 44;
          uint64_t v36 = MEMORY[0x1F4188790](v32);
          *(&v71 - 2) = (uint64_t)&v89;
          outlined copy of Data._Representation(v36, v37);
          uint64_t v38 = v88;
          unint64_t v39 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (unint64_t)(&v71 - 4), v32, v34);
          uint64_t v88 = v38;
          outlined consume of Data._Representation(v32, v34);
          unint64_t v40 = (uint64_t *)(v3 + *(int *)(v85 + 52));
          unint64_t v41 = v40[1];
          if (v41 >> 60 == 15)
          {
            uint64_t v25 = v86;
            unint64_t v26 = v87;
            outlined consume of Extension(v35, v28, v87, v86, 3);
            swift_bridgeObjectRelease();
            outlined consume of Extension(v35, v28, v26, v25, 3);
          }
          else
          {
            uint64_t v42 = (uint64_t)v39;
            uint64_t v43 = *v40;
            uint64_t v44 = v40[2];
            uint64_t v45 = 0;
            switch(v41 >> 62)
            {
              case 1uLL:
                uint64_t v45 = v43 >> 32;
                goto LABEL_19;
              case 2uLL:
                uint64_t v45 = *(void *)(v43 + 24);
LABEL_19:
                outlined copy of Data._Representation(*v40, v40[1]);
                break;
              case 3uLL:
                break;
              default:
                uint64_t v45 = BYTE6(v41);
                break;
            }
            if (v45 < v44) {
              goto LABEL_34;
            }
            uint64_t v46 = Data._Representation.subscript.getter();
            unint64_t v48 = v47;
            int v84 = specialized Sequence<>.contains(_:)(v46, v47, v42);
            outlined consume of ByteBuffer?(v43, v41);
            uint64_t v49 = v35;
            uint64_t v50 = v35;
            uint64_t v52 = v86;
            unint64_t v51 = v87;
            outlined consume of Extension(v50, v28, v87, v86, 3);
            outlined consume of Extension(v49, v28, v51, v52, 3);
            outlined consume of Data._Representation(v46, v48);
            swift_bridgeObjectRelease();
            uint64_t v3 = v83;
            if ((v84 & 1) == 0)
            {
              outlined release of [Extension]((uint64_t)v90);
              return 0;
            }
          }
        }
        v24 += 40;
        --v22;
      }
      while (v22);
      outlined release of [Extension]((uint64_t)v90);
      uint64_t v8 = v73;
      uint64_t v9 = v74;
      uint64_t v15 = v72;
    }
    else
    {
      uint64_t v88 = 0;
    }
    uint64_t v53 = *(void *)(v80 + 16);
    uint64_t v54 = (uint64_t)v77;
    outlined init with copy of PeerCertificateBundle.Bundle(v3 + *(int *)(v85 + 56), (uint64_t)v77, type metadata accessor for PeerCertificateBundle.Bundle);
    uint64_t v55 = v81;
    uint64_t v56 = v82;
    int v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v54, 1, v82);
    uint64_t v58 = v78;
    if (v57 == 1) {
      goto LABEL_35;
    }
    char v59 = v79;
    uint64_t v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 32))(v79, v54, v56);
    MEMORY[0x1F4188790](v60);
    *(&v71 - 2) = (uint64_t)v59;
    BOOL v61 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:), (uint64_t)(&v71 - 4), v53);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v56);
    if (v61)
    {
      uint64_t v62 = v58;
      uint64_t v63 = v83;
      Date.addingTimeInterval(_:)();
      char v64 = static Date.< infix(_:_:)();
      outlined init with copy of PeerCertificateBundle.Bundle(v63, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      unint64_t v65 = v75;
      uint64_t v66 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v62, v9);
      if (v64)
      {
        lazy protocol witness table accessor for type Date and conformance Date();
        char v67 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v68 = *(void (**)(char *, uint64_t))(v66 + 8);
        v68(v65, v9);
        outlined destroy of SessionTicket((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        v68(v15, v9);
        if ((v67 & 1) == 0) {
          return 1;
        }
      }
      else
      {
        uint64_t v70 = *(void (**)(char *, uint64_t))(v66 + 8);
        v70(v65, v9);
        outlined destroy of SessionTicket((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        v70(v15, v9);
      }
    }
  }
  return 0;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  uint64_t v7 = (char *)(a2 >> 62);
  unint64_t v75 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v78 = v8;
  size_t __n = BYTE6(a2);
  uint64_t v76 = (int)a1;
  size_t v77 = HIDWORD(a1) - (int)a1;
  uint64_t v74 = a1 >> 32;
  uint64_t v70 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)(a3 + 40);
  unint64_t v72 = HIDWORD(v5);
  unint64_t v73 = v5 >> 40;
  uint64_t v80 = v7;
  unint64_t v71 = v5;
  int v79 = (int)v7;
  while (2)
  {
    uint64_t v11 = *(v9 - 1);
    unint64_t v10 = *v9;
    unint64_t v12 = *v9 >> 62;
    v9 += 2;
    uint64_t v13 = 0;
    switch(v12)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
        outlined copy of Data._Representation(v11, v10);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v10);
        break;
    }
    size_t v16 = __n;
    switch(v80)
    {
      case 1:
        size_t v16 = v77;
        if (v78) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        size_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v13) {
          goto LABEL_7;
        }
        goto LABEL_118;
      default:
LABEL_19:
        if (v13 != v16)
        {
LABEL_7:
          outlined consume of Data._Representation(v11, v10);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v13 >= 1)
        {
          switch((int)v12)
          {
            case 1:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_124;
              }
              uint64_t v24 = __DataStorage._bytes.getter();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v11, v26)) {
                  goto LABEL_126;
                }
                uint64_t v27 = (const void *)(v25 + (int)v11 - v26);
              }
              else
              {
                uint64_t v27 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v27) {
                  goto LABEL_154;
                }
                int v34 = memcmp(v27, __s1, __n);
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_135;
                }
                swift_retain();
                unint64_t v41 = (char *)__DataStorage._bytes.getter();
                if (v41)
                {
                  uint64_t v42 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v42)) {
                    goto LABEL_142;
                  }
                  v41 += v76 - v42;
                }
                uint64_t v43 = __DataStorage._length.getter();
                size_t v44 = v70;
                if (v43 < v70) {
                  size_t v44 = v43;
                }
                if (!v27) {
                  goto LABEL_147;
                }
                if (!v41) {
                  goto LABEL_148;
                }
                int v34 = memcmp(v27, v41, v44);
                outlined consume of Data._Representation(a1, v5);
LABEL_101:
                outlined consume of Data._Representation(v11, v10);
LABEL_102:
                if (!v34) {
                  goto LABEL_119;
                }
                goto LABEL_8;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v62 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v64 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v64)) {
                  goto LABEL_141;
                }
                v63 += v61 - v64;
              }
              BOOL v19 = __OFSUB__(v62, v61);
              int64_t v65 = v62 - v61;
              if (v19) {
                goto LABEL_136;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (v66 >= v65) {
                size_t v67 = v65;
              }
              else {
                size_t v67 = v66;
              }
              if (!v27) {
                goto LABEL_155;
              }
              unint64_t v5 = v71;
              LODWORD(v7) = v79;
              if (!v63) {
                goto LABEL_156;
              }
              int v40 = memcmp(v27, v63, v67);
              swift_release();
              swift_release();
LABEL_114:
              outlined consume of Data._Representation(v11, v10);
              if (!v40) {
                goto LABEL_119;
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v11 + 16);
              swift_retain();
              swift_retain();
              uint64_t v29 = (char *)__DataStorage._bytes.getter();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_125;
              }
              v29 += v28 - v30;
LABEL_36:
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v29) {
                  goto LABEL_151;
                }
                int v34 = memcmp(v29, __s1, __n);
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v7 = (char *)__DataStorage._bytes.getter();
                if (v7)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v31)) {
                    goto LABEL_140;
                  }
                  v7 += v76 - v31;
                }
                uint64_t v32 = __DataStorage._length.getter();
                size_t v33 = v70;
                if (v32 < v70) {
                  size_t v33 = v32;
                }
                if (!v29) {
                  goto LABEL_144;
                }
                if (!v7) {
                  goto LABEL_145;
                }
                int v34 = memcmp(v29, v7, v33);
                outlined consume of Data._Representation(a1, v5);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v11, v10);
                LODWORD(v7) = v79;
                goto LABEL_102;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v69 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_139;
                }
                v56 += v55 - v57;
              }
              BOOL v19 = __OFSUB__(v69, v55);
              int64_t v58 = v69 - v55;
              if (v19) {
                goto LABEL_134;
              }
              uint64_t v59 = __DataStorage._length.getter();
              if (v59 >= v58) {
                size_t v60 = v58;
              }
              else {
                size_t v60 = v59;
              }
              if (!v29) {
                goto LABEL_152;
              }
              unint64_t v5 = v71;
              if (!v56) {
                goto LABEL_153;
              }
              int v39 = memcmp(v29, v56, v60);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_96:
              outlined consume of Data._Representation(v11, v10);
LABEL_97:
              LODWORD(v7) = v79;
              if (!v39) {
                goto LABEL_119;
              }
              goto LABEL_8;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_56;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_128;
                }
                outlined copy of Data._Representation(a1, v5);
                uint64_t v35 = __DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_146;
                }
                uint64_t v21 = v35;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v36;
                if (__OFSUB__(v76, v36)) {
                  goto LABEL_133;
                }
LABEL_52:
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= v70) {
                  size_t v38 = v70;
                }
                else {
                  size_t v38 = v37;
                }
                int v39 = memcmp(__s1, (const void *)(v21 + v23), v38);
                outlined consume of Data._Representation(a1, v5);
                goto LABEL_96;
              }
              uint64_t v51 = *(void *)(a1 + 16);
              uint64_t v52 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              unint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v53 = __DataStorage._offset.getter();
                if (__OFSUB__(v51, v53)) {
                  goto LABEL_138;
                }
                v47 += v51 - v53;
              }
              BOOL v19 = __OFSUB__(v52, v51);
              int64_t v49 = v52 - v51;
              if (v19) {
                goto LABEL_131;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_150;
              }
LABEL_80:
              if (v50 >= v49) {
                size_t v54 = v49;
              }
              else {
                size_t v54 = v50;
              }
              int v39 = memcmp(__s1, v47, v54);
              swift_release();
              swift_release();
              outlined consume of Data._Representation(v11, v10);
              unint64_t v5 = v71;
              goto LABEL_97;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v10;
              BYTE2(__s1[1]) = BYTE2(v10);
              BYTE3(__s1[1]) = BYTE3(v10);
              BYTE4(__s1[1]) = BYTE4(v10);
              BYTE5(__s1[1]) = BYTE5(v10);
              if (!v7)
              {
LABEL_56:
                __int16 __s2 = a1;
                char v83 = BYTE2(a1);
                char v84 = BYTE3(a1);
                char v85 = v75;
                char v86 = BYTE5(a1);
                char v87 = BYTE6(a1);
                char v88 = HIBYTE(a1);
                __int16 v89 = v5;
                char v90 = BYTE2(v5);
                char v91 = BYTE3(v5);
                char v92 = v72;
                char v93 = v73;
                int v40 = memcmp(__s1, &__s2, __n);
                goto LABEL_114;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_127;
                }
                outlined copy of Data._Representation(a1, v5);
                uint64_t v20 = __DataStorage._bytes.getter();
                if (!v20)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  JUMPOUT(0x1B57227FCLL);
                }
                uint64_t v21 = v20;
                uint64_t v22 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v22;
                if (__OFSUB__(v76, v22)) {
                  goto LABEL_132;
                }
                goto LABEL_52;
              }
              uint64_t v45 = *(void *)(a1 + 16);
              uint64_t v46 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              unint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v48 = __DataStorage._offset.getter();
                if (__OFSUB__(v45, v48)) {
                  goto LABEL_137;
                }
                v47 += v45 - v48;
              }
              BOOL v19 = __OFSUB__(v46, v45);
              int64_t v49 = v46 - v45;
              if (v19) {
                goto LABEL_130;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_149;
              }
              goto LABEL_80;
          }
          goto LABEL_8;
        }
LABEL_118:
        outlined consume of Data._Representation(v11, v10);
LABEL_119:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

BOOL specialized Sequence<>.contains(_:)(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(_WORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 17; ; ++i)
  {
    uint64_t v5 = i - 15;
    if (__OFADD__(i - 16, 1)) {
      break;
    }
    int v6 = *(unsigned __int16 *)(a2 + 2 * i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t SessionTicket.issued.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t SessionTicket.issued.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t SessionTicket.lifetime.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 20));
}

uint64_t SessionTicket.lifetime.setter(int a1)
{
  uint64_t result = type metadata accessor for SessionTicket();
  *(_DWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*SessionTicket.lifetime.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.ticketAgeAdd.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 24));
}

uint64_t SessionTicket.ticketAgeAdd.setter(int a1)
{
  uint64_t result = type metadata accessor for SessionTicket();
  *(_DWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*SessionTicket.ticketAgeAdd.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.nonce.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SessionTicket() + 28);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t SessionTicket.nonce.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SessionTicket() + 28));
  uint64_t result = outlined consume of Data._Representation(*v7, v7[1]);
  uint64_t *v7 = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  return result;
}

uint64_t (*SessionTicket.nonce.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.ticket.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SessionTicket() + 32);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t SessionTicket.ticket.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SessionTicket() + 32));
  uint64_t result = outlined consume of Data._Representation(*v7, v7[1]);
  uint64_t *v7 = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  return result;
}

uint64_t (*SessionTicket.ticket.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.psk.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SessionTicket() + 36);
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SessionTicket.psk.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SessionTicket() + 36);
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*SessionTicket.psk.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.maxEarlyDataSize.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 40));
}

uint64_t SessionTicket.maxEarlyDataSize.setter(int a1)
{
  uint64_t result = type metadata accessor for SessionTicket();
  *(_DWORD *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*SessionTicket.maxEarlyDataSize.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.cipherSuite.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 44));
}

uint64_t SessionTicket.cipherSuite.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for SessionTicket();
  *(_WORD *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*SessionTicket.cipherSuite.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.group.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 48));
}

uint64_t SessionTicket.group.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for SessionTicket();
  *(_WORD *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*SessionTicket.group.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.alpn.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SessionTicket() + 52);
  uint64_t v2 = *(void *)v1;
  outlined copy of ByteBuffer?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t SessionTicket.alpn.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SessionTicket() + 52));
  uint64_t result = outlined consume of ByteBuffer?(*v7, v7[1]);
  uint64_t *v7 = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  return result;
}

uint64_t (*SessionTicket.alpn.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.certificateBundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SessionTicket();
  return outlined init with copy of PeerCertificateBundle.Bundle(v1 + *(int *)(v3 + 56), a1, type metadata accessor for PeerCertificateBundle);
}

uint64_t SessionTicket.certificateBundle.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SessionTicket() + 56);

  return outlined assign with take of PeerCertificateBundle(a1, v3);
}

uint64_t (*SessionTicket.certificateBundle.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.init(message:psk:cipherSuite:group:alpn:certificateBundle:currentTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v74 = *(void *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(a9, a10, v13);
  if (*(_DWORD *)a1 >= 0x93A80u) {
    int v14 = 604800;
  }
  else {
    int v14 = *(_DWORD *)a1;
  }
  uint64_t v15 = (int *)type metadata accessor for SessionTicket();
  size_t v16 = (uint64_t *)(a9 + v15[13]);
  *(_DWORD *)(a9 + v15[5]) = v14;
  *(_DWORD *)(a9 + v15[6]) = *(_DWORD *)(a1 + 4);
  uint64_t v91 = *(void *)(a1 + 48);
  uint64_t v17 = v91;
  long long v90 = *(_OWORD *)(a1 + 32);
  uint64_t v18 = a9 + v15[8];
  *(_OWORD *)uint64_t v18 = v90;
  uint64_t v72 = v18;
  *(void *)(v18 + 16) = v17;
  long long v19 = *(_OWORD *)(a1 + 8);
  uint64_t v89 = *(void *)(a1 + 24);
  long long v88 = v19;
  uint64_t v20 = a9 + v15[7];
  *(_OWORD *)uint64_t v20 = *(_OWORD *)(a1 + 8);
  uint64_t v70 = v20;
  *(void *)(v20 + 16) = *(void *)(a1 + 24);
  uint64_t v21 = a9 + v15[9];
  uint64_t v22 = type metadata accessor for SymmetricKey();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v71 = v21;
  uint64_t v75 = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);
  *(_WORD *)(a9 + v15[11]) = a3;
  *(_WORD *)(a9 + v15[12]) = a4;
  uint64_t *v16 = a5;
  v16[1] = a6;
  unint64_t v73 = v16;
  void v16[2] = a7;
  size_t v77 = v15;
  uint64_t v69 = a9 + v15[14];
  outlined init with copy of PeerCertificateBundle.Bundle(a8, v69, type metadata accessor for PeerCertificateBundle);
  v87[1] = MEMORY[0x1E4FBC870];
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v92 = v24;
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    outlined retain of Extension.QUICTransportParameters((uint64_t)&v90);
    outlined retain of Extension.QUICTransportParameters((uint64_t)&v88);
    outlined retain of [Extension]((uint64_t)&v92);
    outlined release of NewSessionTicket((void *)a1);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(a10, v13);
    outlined destroy of SessionTicket(a8, type metadata accessor for PeerCertificateBundle);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a2, v22);
    outlined release of [Extension]((uint64_t)&v92);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t v64 = (void *)a1;
  uint64_t v65 = v23;
  uint64_t v67 = a9;
  uint64_t v68 = v22;
  uint64_t v66 = v13;
  outlined retain of Extension.QUICTransportParameters((uint64_t)&v90);
  outlined retain of Extension.QUICTransportParameters((uint64_t)&v88);
  outlined copy of ByteBuffer?(a5, a6);
  outlined retain of [Extension]((uint64_t)&v92);
  int loga = 0;
  uint64_t v26 = (unsigned __int8 *)(v24 + 64);
  char v27 = 1;
  while (2)
  {
    uint64_t v29 = *((void *)v26 - 4);
    unint64_t v28 = *((void *)v26 - 3);
    unint64_t v30 = *((void *)v26 - 2);
    uint64_t v31 = *((void *)v26 - 1);
    int v33 = *v26;
    v26 += 40;
    int v32 = v33;
    Swift::Int v34 = 58;
    switch(v33)
    {
      case 1:
        swift_bridgeObjectRetain();
        Swift::Int v34 = 10;
        goto LABEL_22;
      case 2:
        outlined copy of Extension.ServerCertificateType(v29, v28 & 1);
        Swift::Int v34 = 43;
        goto LABEL_22;
      case 3:
      case 9:
        outlined copy of Data._Representation(v29, v28);
        Swift::Int v34 = 16;
        goto LABEL_22;
      case 4:
        outlined copy of Extension.KeyShare(v29, v28, v30);
        Swift::Int v34 = 51;
        goto LABEL_22;
      case 5:
        if ((specialized Set._Variant.insert(_:)(v87, 42) & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_24;
      case 6:
        swift_bridgeObjectRetain();
        Swift::Int v34 = 13;
        goto LABEL_22;
      case 7:
        outlined copy of Extension.ServerCertificateType(v29, v28 & 1);
        Swift::Int v34 = 20;
        goto LABEL_22;
      case 8:
        outlined copy of Data._Representation(v29, v28);
        Swift::Int v34 = 57;
        goto LABEL_22;
      case 10:
        swift_bridgeObjectRetain();
        Swift::Int v34 = 45;
        goto LABEL_22;
      case 11:
        outlined copy of Extension.PreSharedKey(v29, v28, v30 & 1);
        Swift::Int v34 = 41;
        goto LABEL_22;
      case 12:
        goto LABEL_22;
      case 13:
        outlined copy of Data._Representation(v28, v30);
        Swift::Int v34 = v29;
        goto LABEL_22;
      default:
        outlined copy of ByteBuffer?(v29, v28);
        Swift::Int v34 = 0;
LABEL_22:
        if ((specialized Set._Variant.insert(_:)(v87, v34) & 1) == 0)
        {
LABEL_28:
          outlined release of [Extension]((uint64_t)&v92);
          swift_bridgeObjectRelease();
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v36 = type metadata accessor for Logger();
          __swift_project_value_buffer(v36, (uint64_t)logger);
          outlined copy of Extension(v29, v28, v30, v31, v32);
          outlined copy of Extension(v29, v28, v30, v31, v32);
          uint64_t v37 = Logger.logObject.getter();
          os_log_type_t v38 = static os_log_type_t.error.getter();
          logb = v37;
          uint64_t v39 = v74;
          uint64_t v40 = v68;
          if (os_log_type_enabled(v37, v38))
          {
            unint64_t v41 = (uint8_t *)swift_slowAlloc();
            uint64_t v78 = swift_slowAlloc();
            v87[0] = v78;
            *(_DWORD *)unint64_t v41 = 136446210;
            unsigned __int16 v42 = 0;
            switch(v32)
            {
              case 1:
                unsigned __int16 v42 = 10;
                break;
              case 2:
                unsigned __int16 v42 = 43;
                break;
              case 3:
              case 9:
                unsigned __int16 v42 = 16;
                break;
              case 4:
                unsigned __int16 v42 = 51;
                break;
              case 5:
                unsigned __int16 v42 = 42;
                break;
              case 6:
                unsigned __int16 v42 = 13;
                break;
              case 7:
                unsigned __int16 v42 = 20;
                break;
              case 8:
                unsigned __int16 v42 = 57;
                break;
              case 10:
                unsigned __int16 v42 = 45;
                break;
              case 11:
                unsigned __int16 v42 = 41;
                break;
              case 12:
                unsigned __int16 v42 = 58;
                break;
              case 13:
                unsigned __int16 v42 = v29;
                break;
              default:
                break;
            }
            uint64_t v59 = ExtensionType.description.getter(v42);
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v87);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined consume of Extension(v29, v28, v30, v31, v32);
            outlined consume of Extension(v29, v28, v30, v31, v32);
            _os_log_impl(&dword_1B56C5000, logb, v38, "server offered duplicate extension of type %{public}s on new session ticket", v41, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA99F280](v78, -1, -1);
            MEMORY[0x1BA99F280](v41, -1, -1);

            uint64_t v40 = v68;
          }
          else
          {
            outlined consume of Extension(v29, v28, v30, v31, v32);
            outlined consume of Extension(v29, v28, v30, v31, v32);
          }
          uint64_t v58 = a10;
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v61 = 5;
          *(unsigned char *)(v61 + 4) = 1;
          swift_willThrow();
          outlined consume of ByteBuffer?(a5, a6);
          outlined release of NewSessionTicket(v64);
          outlined consume of Extension(v29, v28, v30, v31, v32);
          uint64_t v53 = v66;
          uint64_t v52 = v67;
          uint64_t v54 = v75;
          uint64_t v55 = a8;
          uint64_t v56 = v65;
LABEL_55:
          uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
          v62(v58, v53);
          outlined destroy of SessionTicket(v55, type metadata accessor for PeerCertificateBundle);
          uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
          v63(v54, v40);
          v62(v52, v53);
          outlined consume of Data._Representation(*(void *)v70, *(void *)(v70 + 8));
          outlined consume of Data._Representation(*(void *)v72, *(void *)(v72 + 8));
          v63(v71, v40);
          outlined consume of ByteBuffer?(*v73, v73[1]);
          return outlined destroy of SessionTicket(v69, type metadata accessor for PeerCertificateBundle);
        }
        if (v32 == 5)
        {
LABEL_24:
          if ((v27 & 1) == 0 || (v29 & 0x100000000) != 0)
          {
            outlined release of [Extension]((uint64_t)&v92);
            swift_bridgeObjectRelease();
            if (one-time initialization token for logger != -1) {
              swift_once();
            }
            uint64_t v44 = type metadata accessor for Logger();
            __swift_project_value_buffer(v44, (uint64_t)logger);
            uint64_t v45 = Logger.logObject.getter();
            os_log_type_t v46 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v45, v46))
            {
              uint64_t v47 = swift_slowAlloc();
              uint64_t v79 = swift_slowAlloc();
              v87[0] = v79;
              *(_DWORD *)uint64_t v47 = 136446466;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
              uint64_t v48 = String.init<A>(describing:)();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v87);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v47 + 12) = 2082;
              uint64_t v50 = String.init<A>(describing:)();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v87);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B56C5000, v45, v46, "invalid early data extension: old value %{public}s new value %{public}s", (uint8_t *)v47, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x1BA99F280](v79, -1, -1);
              MEMORY[0x1BA99F280](v47, -1, -1);
            }

            uint64_t v53 = v66;
            uint64_t v52 = v67;
            uint64_t v39 = v74;
            uint64_t v54 = v75;
            uint64_t v55 = a8;
            uint64_t v40 = v68;
            uint64_t v56 = v65;
            lazy protocol witness table accessor for type TLSError and conformance TLSError();
            swift_allocError();
            *(_DWORD *)uint64_t v57 = 5;
            *(unsigned char *)(v57 + 4) = 1;
            swift_willThrow();
            outlined consume of ByteBuffer?(a5, a6);
            outlined release of NewSessionTicket(v64);
            uint64_t v58 = a10;
            goto LABEL_55;
          }
          char v27 = 0;
          int loga = v29;
        }
        else
        {
          outlined consume of Extension(v29, v28, v30, v31, v32);
        }
        if (--v25) {
          continue;
        }
        outlined consume of ByteBuffer?(a5, a6);
        outlined release of NewSessionTicket(v64);
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(a10, v66);
        outlined destroy of SessionTicket(a8, type metadata accessor for PeerCertificateBundle);
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v75, v68);
        outlined release of [Extension]((uint64_t)&v92);
        uint64_t result = swift_bridgeObjectRelease();
        a9 = v67;
        int v43 = loga;
        if (v27) {
LABEL_34:
        }
          int v43 = 0;
        *(_DWORD *)(a9 + v77[10]) = v43;
        return result;
    }
  }
}

uint64_t SessionTicket.serialize()()
{
  uint64_t v1 = v0;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v55 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v58 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v59 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v66 = xmmword_1B577F280;
  uint64_t v67 = 0;
  Date.timeIntervalSinceReferenceDate.getter();
  unint64_t v61 = bswap64(v9);
  uint64_t v10 = MEMORY[0x1E4FBB2B8];
  uint64_t v11 = MEMORY[0x1E4F27EF0];
  uint64_t v64 = MEMORY[0x1E4FBB2B8];
  uint64_t v65 = MEMORY[0x1E4F27EF0];
  uint64_t v62 = &v61;
  uint64_t v63 = &v62;
  __swift_project_boxed_opaque_existential_1(&v62, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  unint64_t v12 = (int *)type metadata accessor for SessionTicket();
  LODWORD(v61) = bswap32(*(_DWORD *)(v0 + v12[5]));
  uint64_t v64 = v10;
  uint64_t v65 = v11;
  uint64_t v62 = &v61;
  uint64_t v63 = (unint64_t **)((char *)&v61 + 4);
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  LODWORD(v61) = bswap32(*(_DWORD *)(v0 + v12[6]));
  uint64_t v64 = v10;
  uint64_t v65 = v11;
  uint64_t v62 = &v61;
  uint64_t v63 = (unint64_t **)((char *)&v61 + 4);
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  uint64_t v13 = (uint64_t *)(v0 + v12[7]);
  uint64_t v15 = *v13;
  unint64_t v14 = v13[1];
  uint64_t v16 = v13[2];
  uint64_t v17 = 0;
  switch(v14 >> 62)
  {
    case 1uLL:
      uint64_t v17 = v15 >> 32;
      break;
    case 2uLL:
      uint64_t v17 = *(void *)(v15 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v17 = BYTE6(v14);
      break;
  }
  BOOL v18 = __OFSUB__(v17, v16);
  unint64_t v19 = v17 - v16;
  if (v18)
  {
    __break(1u);
    goto LABEL_33;
  }
  if ((v19 & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
  unint64_t v61 = bswap64(v19);
  uint64_t v64 = v10;
  uint64_t v65 = MEMORY[0x1E4F27EF0];
  uint64_t v62 = &v61;
  uint64_t v63 = &v62;
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  ByteBuffer.writeImmutableBuffer(_:)(v15, v14, v16);
  uint64_t v20 = (uint64_t *)(v0 + v12[8]);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  uint64_t v23 = v20[2];
  uint64_t v24 = 0;
  switch(v22 >> 62)
  {
    case 1uLL:
      uint64_t v24 = v21 >> 32;
      break;
    case 2uLL:
      uint64_t v24 = *(void *)(v21 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v24 = BYTE6(v22);
      break;
  }
  BOOL v18 = __OFSUB__(v24, v23);
  unint64_t v25 = v24 - v23;
  if (v18)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v56 = v3;
  uint64_t v57 = v2;
  if ((v25 & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
  unint64_t v61 = bswap64(v25);
  uint64_t v64 = v10;
  uint64_t v65 = MEMORY[0x1E4F27EF0];
  uint64_t v62 = &v61;
  uint64_t v63 = &v62;
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  ByteBuffer.writeImmutableBuffer(_:)(v21, v22, v23);
  uint64_t v26 = v59;
  uint64_t v27 = v60;
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v59, v1 + v12[9], v60);
  MEMORY[0x1F4188790](v28);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v29 = v27;
  uint64_t v30 = MEMORY[0x1E4F27EF0];
  (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v29);
  LODWORD(v61) = bswap32(*(_DWORD *)(v1 + v12[10]));
  uint64_t v64 = v10;
  uint64_t v65 = v30;
  uint64_t v62 = &v61;
  uint64_t v63 = (unint64_t **)((char *)&v61 + 4);
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  LOWORD(v61) = bswap32(*(unsigned __int16 *)(v1 + v12[11])) >> 16;
  uint64_t v64 = v10;
  uint64_t v65 = v30;
  uint64_t v62 = &v61;
  uint64_t v63 = (unint64_t **)((char *)&v61 + 2);
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  LOWORD(v61) = bswap32(*(unsigned __int16 *)(v1 + v12[12])) >> 16;
  uint64_t v64 = v10;
  uint64_t v65 = v30;
  uint64_t v62 = &v61;
  uint64_t v63 = (unint64_t **)((char *)&v61 + 2);
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  uint64_t v31 = (uint64_t *)(v1 + v12[13]);
  unint64_t v32 = v31[1];
  if (v32 >> 60 == 15)
  {
    LOBYTE(v61) = 0;
    uint64_t v64 = v10;
    uint64_t v65 = v30;
    uint64_t v62 = &v61;
    uint64_t v63 = (unint64_t **)((char *)&v61 + 1);
    __swift_project_boxed_opaque_existential_1(&v62, v10);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    uint64_t v33 = v30;
    goto LABEL_22;
  }
  uint64_t v34 = *v31;
  uint64_t v35 = v31[2];
  LOBYTE(v61) = -1;
  uint64_t v64 = v10;
  uint64_t v65 = v30;
  uint64_t v62 = &v61;
  uint64_t v63 = (unint64_t **)((char *)&v61 + 1);
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  outlined copy of Data._Representation(v34, v32);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  uint64_t v36 = 0;
  switch(v32 >> 62)
  {
    case 1uLL:
      uint64_t v36 = v34 >> 32;
      break;
    case 2uLL:
      uint64_t v36 = *(void *)(v34 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v36 = BYTE6(v32);
      break;
  }
  BOOL v18 = __OFSUB__(v36, v35);
  unint64_t v37 = v36 - v35;
  if (v18) {
LABEL_35:
  }
    __break(1u);
  if ((v37 & 0x8000000000000000) != 0)
  {
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B572465CLL);
  }
  unint64_t v61 = bswap64(v37);
  uint64_t v64 = v10;
  uint64_t v38 = MEMORY[0x1E4F27EF0];
  uint64_t v65 = MEMORY[0x1E4F27EF0];
  uint64_t v62 = &v61;
  uint64_t v63 = &v62;
  __swift_project_boxed_opaque_existential_1(&v62, v10);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  ByteBuffer.writeImmutableBuffer(_:)(v34, v32, v35);
  unint64_t v39 = v32;
  uint64_t v33 = v38;
  outlined consume of ByteBuffer?(v34, v39);
LABEL_22:
  uint64_t v40 = v58;
  outlined init with copy of PeerCertificateBundle.Bundle(v1 + v12[14], v58, type metadata accessor for PeerCertificateBundle.Bundle);
  uint64_t v42 = v56;
  uint64_t v41 = v57;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v40, 1, v57) == 1)
  {
    LOBYTE(v61) = 1;
    uint64_t v64 = v10;
    uint64_t v65 = v33;
    uint64_t v62 = &v61;
    uint64_t v63 = (unint64_t **)((char *)&v61 + 1);
    __swift_project_boxed_opaque_existential_1(&v62, v10);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  }
  else
  {
    int v43 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v55, v40, v41);
    LOBYTE(v61) = 0;
    uint64_t v64 = v10;
    uint64_t v65 = v33;
    uint64_t v62 = &v61;
    uint64_t v63 = (unint64_t **)((char *)&v61 + 1);
    __swift_project_boxed_opaque_existential_1(&v62, v10);
    Data._Representation.append(contentsOf:)();
    uint64_t v44 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    uint64_t v45 = MEMORY[0x1BA99E450](v44);
    unint64_t v47 = v46;
    specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(v45, v46);
    outlined consume of Data._Representation(v45, v47);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  }
  unint64_t v49 = *((void *)&v66 + 1);
  uint64_t v48 = v66;
  uint64_t v50 = v67;
  uint64_t v51 = 0;
  switch(*((void *)&v66 + 1) >> 62)
  {
    case 1:
      uint64_t v51 = (uint64_t)v66 >> 32;
      goto LABEL_29;
    case 2:
      uint64_t v51 = *(void *)(v66 + 24);
LABEL_29:
      outlined copy of Data._Representation(v66, *((unint64_t *)&v66 + 1));
      break;
    case 3:
      break;
    default:
      uint64_t v51 = BYTE14(v66);
      break;
  }
  if (v51 < v50) {
    goto LABEL_34;
  }
  uint64_t v52 = Data._Representation.subscript.getter();
  outlined consume of Data._Representation(v48, v49);
  outlined consume of Data._Representation(v48, v49);
  return v52;
}

uint64_t ByteBuffer.writeLengthPrefixedImmutableBuffer(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v11[5] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  BOOL v7 = __OFSUB__(v6, a3);
  unint64_t v8 = v6 - a3;
  if (v7) {
    __break(1u);
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B57247E8);
  }
  unint64_t v10 = bswap64(v8);
  v11[3] = MEMORY[0x1E4FBB2B8];
  v11[4] = MEMORY[0x1E4F27EF0];
  v11[0] = &v10;
  v11[1] = v11;
  __swift_project_boxed_opaque_existential_1(v11, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return ByteBuffer.writeImmutableBuffer(_:)(a1, a2, a3);
}

uint64_t ByteBuffer.writeOptional<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t, unsigned char *), uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v12 = &v17[-v11];
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
    char v18 = 0;
    uint64_t v21 = MEMORY[0x1E4FBB2B8];
    uint64_t v22 = MEMORY[0x1E4F27EF0];
    unint64_t v19 = &v18;
    uint64_t v20 = &v19;
    __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E4FBB2B8]);
    Data._Representation.append(contentsOf:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v15, v12, a4);
    char v18 = -1;
    uint64_t v21 = MEMORY[0x1E4FBB2B8];
    uint64_t v22 = MEMORY[0x1E4F27EF0];
    unint64_t v19 = &v18;
    uint64_t v20 = &v19;
    __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E4FBB2B8]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    a2(v4, v15);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v15, a4);
  }
}

uint64_t ByteBuffer.readOptional<A>(_:)@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v32 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v11);
  char v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v39 = 0;
  uint64_t v19 = v5[2];
  uint64_t v20 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  uint64_t v21 = *v5;
  unint64_t v22 = v5[1];
  switch(v22 >> 62)
  {
    case 1uLL:
      if (v21 >> 32 < v20) {
        goto LABEL_13;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v21 + 24) >= v20) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 3uLL:
      if (v20 > 0) {
        goto LABEL_13;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v22) < v20)
      {
LABEL_13:
        uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 56);
        return v26((uint64_t)a4, 1, 1);
      }
LABEL_8:
      uint64_t v40 = *v5;
      unint64_t v41 = v22;
      if (v20 < v19) {
        goto LABEL_21;
      }
      v32[1] = a2;
      uint64_t v33 = a1;
      uint64_t v34 = a4;
      uint64_t v35 = v15;
      uint64_t v36 = v16;
      uint64_t v37 = v19;
      uint64_t v38 = v19 + 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v23 = v39;
      long long v5[2] = v20;
      if (v23)
      {
        v33(v5);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
        {
          uint64_t v24 = v35;
          (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v35);
          return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v34, 1, 1, v24);
        }
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
        v30(v18, v13, a3);
        uint64_t v31 = v34;
        v30(v34, v18, a3);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, a3);
        uint64_t v28 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56);
        uint64_t v29 = v31;
      }
      else
      {
        uint64_t v27 = v34;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, a3);
        uint64_t v28 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56);
        uint64_t v29 = v27;
      }
      return v28((uint64_t)v29, 0, 1, v35);
  }
}

uint64_t SessionTicket.obfuscatedTicketAge(currentTime:)()
{
  uint64_t result = Date.timeIntervalSince(_:)();
  double v3 = v2 * 1000.0;
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 4294967300.0) {
    return *(_DWORD *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 24)) + v3;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ByteBuffer.writeLengthPrefixedString(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(countAndFlagsBits, (unint64_t)object);

  swift_bridgeObjectRelease();
}

Swift::String_optional __swiftcall ByteBuffer.readLengthPrefixedString()()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v31 = 0;
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 8;
  if (__OFADD__(v1, 8))
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 < v2) {
        goto LABEL_13;
      }
LABEL_7:
      *(void *)&long long v33 = *v0;
      *((void *)&v33 + 1) = v4;
      if (v2 < v1) {
        goto LABEL_35;
      }
      *(void *)&v29[0] = v1;
      *((void *)&v29[0] + 1) = v1 + 8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      uint64_t v6 = bswap64(v31);
      v0[2] = v2;
      if (v6 < 0) {
        goto LABEL_36;
      }
      uint64_t v7 = ByteBuffer.readSlice(length:)(v6);
      if (v8 >> 60 == 15)
      {
LABEL_13:
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        goto LABEL_33;
      }
      unint64_t v10 = v8;
      unint64_t v11 = v8 >> 62;
      uint64_t v12 = v7;
      uint64_t v13 = 0;
      switch(v11)
      {
        case 1uLL:
          uint64_t v13 = v7 >> 32;
          break;
        case 2uLL:
          uint64_t v13 = *(void *)(v7 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v10);
          break;
      }
      if (v13 < v9) {
        goto LABEL_37;
      }
      uint64_t v16 = Data._Representation.subscript.getter();
      uint64_t v18 = v16;
      unint64_t v19 = v17;
      switch(v17 >> 62)
      {
        case 1uLL:
          if (v16 >> 32 < (int)v16) {
            goto LABEL_38;
          }
          swift_retain();
          uint64_t v14 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n((int)v18, v18 >> 32, v19 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
          uint64_t v15 = v22;
          outlined consume of Data._Representation(v18, v19);
          if (v15) {
            goto LABEL_31;
          }
LABEL_23:
          unint64_t v31 = v18;
          unint64_t v32 = v19;
          outlined copy of Data._Representation(v18, v19);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
          if (swift_dynamicCast())
          {
            outlined init with take of ContiguousBytes(v29, (uint64_t)&v33);
            __swift_project_boxed_opaque_existential_1(&v33, v34);
            if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
            {
              outlined consume of Data._Representation(v18, v19);
              __swift_project_boxed_opaque_existential_1(&v33, v34);
              dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
              uint64_t v15 = (void *)*((void *)&v29[0] + 1);
              uint64_t v14 = *(void *)&v29[0];
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
              goto LABEL_32;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
          }
          else
          {
            uint64_t v30 = 0;
            memset(v29, 0, sizeof(v29));
            outlined destroy of HandshakeStateMachine?((uint64_t)v29, &demangling cache variable for type metadata for _HasContiguousBytes?);
          }
          uint64_t v20 = specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v18, v19);
LABEL_30:
          uint64_t v14 = v20;
          uint64_t v15 = v21;
LABEL_31:
          outlined consume of Data._Representation(v18, v19);
LABEL_32:
          outlined consume of ByteBuffer?(v12, v10);
          break;
        case 2uLL:
          uint64_t v23 = *(void *)(v16 + 16);
          uint64_t v24 = *(void *)(v16 + 24);
          swift_retain();
          swift_retain();
          uint64_t v14 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(v23, v24, v19 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
          uint64_t v15 = v25;
          swift_release();
          swift_release();
          if (!v15) {
            goto LABEL_23;
          }
          goto LABEL_31;
        case 3uLL:
          *(void *)((char *)&v33 + 6) = 0;
          *(void *)&long long v33 = 0;
          uint64_t v20 = static String._fromUTF8Repairing(_:)();
          goto LABEL_30;
        default:
          *(void *)&long long v33 = v16;
          WORD4(v33) = v17;
          BYTE10(v33) = BYTE2(v17);
          BYTE11(v33) = BYTE3(v17);
          BYTE12(v33) = BYTE4(v17);
          BYTE13(v33) = BYTE5(v17);
          uint64_t v20 = static String._fromUTF8Repairing(_:)();
          goto LABEL_30;
      }
LABEL_33:
      uint64_t v26 = v14;
      uint64_t v27 = v15;
      result.value._object = v27;
      result.value._uint64_t countAndFlagsBits = v26;
      return result;
  }
}

void *specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *), unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a1 < 0) {
    goto LABEL_74;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = MEMORY[0x1E4FBC860];
  unint64_t v12 = a6 >> 62;
  unint64_t v13 = v11;
  uint64_t v14 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      uint64_t v14 = (int)a5;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(a5 + 16);
      break;
    default:
      break;
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  if (a1)
  {
    uint64_t v16 = 0;
    switch((int)v12)
    {
      case 0:
        if ((a6 & 0xFF000000000000) == 0)
        {
LABEL_13:
          uint64_t v16 = BYTE6(a6);
          goto LABEL_16;
        }
        uint64_t v17 = BYTE6(a6);
LABEL_19:
        char v46 = a2;
        uint64_t v49 = v15;
        unint64_t v45 = v13;
        if (v14 == v17)
        {
          uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
LABEL_21:
          if (v14 == v17 && (v46 & 1) != 0)
          {
            outlined consume of Data._Representation(a5, a6);
          }
          else
          {
            if (v17 < v14) {
              goto LABEL_75;
            }
            unint64_t v13 = Data._Representation.subscript.getter();
            uint64_t v19 = v32;
            outlined consume of Data._Representation(a5, a6);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_71:
            }
              uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
            unint64_t v34 = v18[2];
            unint64_t v33 = v18[3];
            if (v34 >= v33 >> 1) {
              uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v18);
            }
            void v18[2] = v34 + 1;
            uint64_t v35 = &v18[2 * v34];
            v35[4] = v13;
            v35[5] = v19;
            *(void *)(v45 + 16) = v18;
          }
          swift_bridgeObjectRetain();
          swift_release();
          goto LABEL_61;
        }
        uint64_t v37 = a1;
        uint64_t v48 = a6 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v43 = BYTE6(a6);
        uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
        unint64_t v42 = a6 >> 8;
        unint64_t v40 = a6 >> 24;
        unint64_t v41 = a6 >> 16;
        uint64_t v19 = v14;
        unint64_t v38 = a6 >> 40;
        unint64_t v39 = HIDWORD(a6);
        uint64_t v50 = v17;
        unint64_t v47 = a6;
        break;
      case 1:
        if ((a5 ^ (unint64_t)(a5 << 32)) >> 32) {
          goto LABEL_18;
        }
LABEL_14:
        uint64_t v16 = a5 >> 32;
        goto LABEL_16;
      case 2:
        uint64_t v17 = *(void *)(a5 + 24);
        if (*(void *)(a5 + 16) == v17) {
          goto LABEL_12;
        }
        if (v12 != 2) {
LABEL_18:
        }
          uint64_t v17 = a5 >> 32;
        goto LABEL_19;
      case 3:
        goto LABEL_16;
      default:
        JUMPOUT(0);
    }
    while (1)
    {
      if (v12)
      {
        if (v12 == 1)
        {
          if (v19 < (int)a5 || v19 >= a5 >> 32) {
            goto LABEL_67;
          }
          uint64_t v20 = __DataStorage._bytes.getter();
          if (!v20)
          {
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_75:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1B5725A6CLL);
          }
          uint64_t v21 = v20;
          unint64_t v13 = v48;
          uint64_t v22 = __DataStorage._offset.getter();
          uint64_t v23 = v19 - v22;
          if (__OFSUB__(v19, v22)) {
            goto LABEL_69;
          }
        }
        else
        {
          if (v19 < *(void *)(a5 + 16))
          {
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
            goto LABEL_71;
          }
          if (v19 >= *(void *)(a5 + 24)) {
            goto LABEL_68;
          }
          uint64_t v25 = __DataStorage._bytes.getter();
          if (!v25) {
            goto LABEL_73;
          }
          uint64_t v21 = v25;
          unint64_t v13 = v48;
          uint64_t v26 = __DataStorage._offset.getter();
          uint64_t v23 = v19 - v26;
          if (__OFSUB__(v19, v26)) {
            goto LABEL_70;
          }
        }
        char v24 = *(unsigned char *)(v21 + v23);
        a6 = v47;
      }
      else
      {
        if (v19 >= v43) {
          goto LABEL_66;
        }
        uint64_t v53 = a5;
        char v54 = a6;
        char v55 = v42;
        char v56 = v41;
        char v57 = v40;
        char v58 = v39;
        char v59 = v38;
        char v24 = *((unsigned char *)&v53 + v19);
      }
      LOBYTE(v53) = v24;
      unint64_t v13 = a4;
      char v27 = a3(&v53);
      if (v6)
      {
        outlined consume of Data._Representation(a5, a6);
        swift_release();
        swift_release();
        return v18;
      }
      if ((v27 & 1) == 0) {
        break;
      }
      if (v14 == v19 && (v46 & 1) != 0)
      {
        *(void *)(v49 + 16) = ++v19;
        uint64_t v14 = v19;
        goto LABEL_26;
      }
      if (v19 < v14) {
        goto LABEL_75;
      }
      uint64_t v44 = Data._Representation.subscript.getter();
      uint64_t v29 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v13 = v18[2];
      unint64_t v30 = v18[3];
      uint64_t v17 = v50;
      if (v13 >= v30 >> 1)
      {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v13 + 1, 1, v18);
        uint64_t v17 = v50;
      }
      void v18[2] = v13 + 1;
      unint64_t v31 = &v18[2 * v13];
      v31[4] = v44;
      v31[5] = v29;
      *(void *)(v45 + 16) = v18;
      *(void *)(v49 + 16) = ++v19;
      if (v18[2] == v37)
      {
        uint64_t v14 = v19;
        goto LABEL_21;
      }
      uint64_t v14 = v19;
LABEL_27:
      if (v19 == v17) {
        goto LABEL_21;
      }
    }
    ++v19;
LABEL_26:
    uint64_t v17 = v50;
    goto LABEL_27;
  }
LABEL_12:
  uint64_t v16 = 0;
  switch((int)v12)
  {
    case 1:
      goto LABEL_14;
    case 2:
      uint64_t v16 = *(void *)(a5 + 24);
      break;
    case 3:
      break;
    default:
      goto LABEL_13;
  }
LABEL_16:
  specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v16, v15, a2 & 1, v13);
  outlined consume of Data._Representation(a5, a6);
  uint64_t v18 = *(void **)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_release();
LABEL_61:
  swift_release();
  return v18;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = (v5 == a1) & a3;
  if (v6 == 1) {
    return v6 ^ 1u;
  }
  if (v5 <= a1)
  {
    uint64_t v8 = Data._Representation.subscript.getter();
    uint64_t v10 = v9;
    uint64_t v11 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *(void *)(a4 + 16) = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
    }
    v11[2] = v14 + 1;
    uint64_t v15 = &v11[2 * v14];
    v15[4] = v8;
    v15[5] = v10;
    *(void *)(a4 + 16) = v11;
    return v6 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SessionTicket()
{
  uint64_t result = type metadata singleton initialization cache for SessionTicket;
  if (!type metadata singleton initialization cache for SessionTicket) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined consume of ByteBuffer??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return outlined consume of ByteBuffer?(a1, a2);
  }
  return a1;
}

uint64_t outlined init with take of PeerCertificateBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCertificateBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_WORD *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int16 *)(v9 + 2 * v8) != (unsigned __int16)a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int16 *)(v9 + 2 * v8) != (unsigned __int16)a2);
  }
  uint64_t result = 0;
  LOWORD(a2) = *(_WORD *)(*(void *)(*v2 + 48) + 2 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ExtensionType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    Swift::Int v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt16 v18 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_WORD *)(*(void *)(v4 + 48) + 2 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt16 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int16 *)(v10 + 2 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int16 *)(v10 + 2 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_WORD *)(*(void *)(v12 + 48) + 2 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ExtensionType>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_WORD *)(*(void *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ExtensionType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt16 v18 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_WORD *)(*(void *)(v4 + 48) + 2 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  uint64_t v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

void *_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

BOOL partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(unsigned __int8 *a1)
{
  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t outlined init with copy of PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of PeerCertificateBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCertificateBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of [Extension](uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of SessionTicket(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in SessionTicket.serialize()(unint64_t *a1, char *a2)
{
  return specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(a1, a2);
}

uint64_t specialized closure #1 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t specialized static SessionTicket.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for SessionTicket();
  if (*(_DWORD *)(a1 + v4[5]) != *(_DWORD *)(a2 + v4[5])) {
    return 0;
  }
  uint64_t v5 = v4;
  if (*(_DWORD *)(a1 + v4[6]) != *(_DWORD *)(a2 + v4[6])) {
    return 0;
  }
  uint64_t v6 = v4[7];
  if ((specialized static ByteBuffer.== infix(_:_:)(*(void *)(a1 + v6), *(void *)(a1 + v6 + 8), *(void *)(a1 + v6 + 16), *(void *)(a2 + v6), *(void *)(a2 + v6 + 8), *(void *)(a2 + v6 + 16)) & 1) == 0)return 0; {
  uint64_t v7 = v5[8];
  }
  if ((specialized static ByteBuffer.== infix(_:_:)(*(void *)(a1 + v7), *(void *)(a1 + v7 + 8), *(void *)(a1 + v7 + 16), *(void *)(a2 + v7), *(void *)(a2 + v7 + 8), *(void *)(a2 + v7 + 16)) & 1) == 0|| (static SymmetricKey.== infix(_:_:)() & 1) == 0|| *(_DWORD *)(a1 + v5[10]) != *(_DWORD *)(a2 + v5[10])|| *(unsigned __int16 *)(a1 + v5[11]) != *(unsigned __int16 *)(a2 + v5[11])|| *(unsigned __int16 *)(a1 + v5[12]) != *(unsigned __int16 *)(a2 + v5[12]))
  {
    return 0;
  }
  uint64_t v8 = v5[13];
  uint64_t v9 = *(void *)(a1 + v8);
  unint64_t v10 = *(void *)(a1 + v8 + 8);
  uint64_t v11 = *(void *)(a1 + v8 + 16);
  uint64_t v12 = (uint64_t *)(a2 + v8);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  uint64_t v15 = v12[2];
  if (v10 >> 60 == 15)
  {
    if (v14 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v14 >> 60 == 15)
  {
LABEL_14:
    outlined copy of ByteBuffer?(v9, v10);
    outlined copy of ByteBuffer?(v13, v14);
    outlined consume of ByteBuffer?(v9, v10);
    outlined consume of ByteBuffer?(v13, v14);
    return 0;
  }
  outlined copy of ByteBuffer?(v9, v10);
  outlined copy of ByteBuffer?(v13, v14);
  char v16 = specialized static ByteBuffer.== infix(_:_:)(v9, v10, v11, v13, v14, v15);
  outlined consume of ByteBuffer?(v13, v14);
  outlined consume of ByteBuffer?(v9, v10);
  if ((v16 & 1) == 0) {
    return 0;
  }
LABEL_16:
  uint64_t v17 = v5[14];

  return specialized static PeerCertificateBundle.__derived_struct_equals(_:_:)(a1 + v17, a2 + v17);
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionTicket(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    *(_DWORD *)((char *)a1 + v8) = *(_DWORD *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    unint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v9);
    unint64_t v13 = *(uint64_t *)((char *)a2 + v9 + 8);
    outlined copy of Data._Representation(v12, v13);
    *unint64_t v10 = v12;
    v10[1] = v13;
    _OWORD v10[2] = *((void *)v11 + 2);
    uint64_t v14 = a3[8];
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    char v16 = (char *)a2 + v14;
    uint64_t v17 = *(uint64_t *)((char *)a2 + v14);
    unint64_t v18 = *(uint64_t *)((char *)a2 + v14 + 8);
    outlined copy of Data._Representation(v17, v18);
    *uint64_t v15 = v17;
    v15[1] = v18;
    v15[2] = *((void *)v16 + 2);
    uint64_t v19 = a3[9];
    unint64_t v20 = (char *)a1 + v19;
    unint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = a3[11];
    *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
    *(_WORD *)((char *)a1 + v23) = *(_WORD *)((char *)a2 + v23);
    uint64_t v24 = a3[13];
    *(_WORD *)((char *)a1 + a3[12]) = *(_WORD *)((char *)a2 + a3[12]);
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    unint64_t v27 = *(uint64_t *)((char *)a2 + v24 + 8);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v29 = *v26;
      outlined copy of Data._Representation(*v26, *(uint64_t *)((char *)a2 + v24 + 8));
      *(void *)uint64_t v25 = v29;
      *((void *)v25 + 1) = v27;
    }
    *((void *)v25 + 2) = v26[2];
    uint64_t v30 = a3[14];
    unint64_t v31 = (char *)a1 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t destroy for SessionTicket(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  outlined consume of Data._Representation(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  outlined consume of Data._Representation(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  uint64_t v5 = a1 + a2[9];
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = (uint64_t *)(a1 + a2[13]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    outlined consume of Data._Representation(*v7, v8);
  }
  uint64_t v9 = a1 + a2[14];
  uint64_t v10 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

uint64_t initializeWithCopy for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8);
  unint64_t v12 = *(void *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v11, v12);
  uint64_t *v9 = v11;
  v9[1] = v12;
  void v9[2] = *(void *)(v10 + 16);
  uint64_t v13 = a3[8];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13);
  unint64_t v17 = *(void *)(a2 + v13 + 8);
  outlined copy of Data._Representation(v16, v17);
  *uint64_t v14 = v16;
  v14[1] = v17;
  v14[2] = *(void *)(v15 + 16);
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + v22) = *(_WORD *)(a2 + v22);
  uint64_t v23 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  }
  else
  {
    uint64_t v27 = *v25;
    outlined copy of Data._Representation(*v25, *(void *)(a2 + v23 + 8));
    *(void *)uint64_t v24 = v27;
    *(void *)(v24 + 8) = v26;
  }
  *(void *)(v24 + 16) = v25[2];
  uint64_t v28 = a3[14];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (const void *)(a2 + v28);
  uint64_t v31 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithCopy for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7);
  unint64_t v11 = *(void *)(a2 + v7 + 8);
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  uint64_t *v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  void v8[2] = *(void *)(v9 + 16);
  uint64_t v14 = a3[8];
  uint64_t v15 = (uint64_t *)(a1 + v14);
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)(a2 + v14);
  unint64_t v18 = *(void *)(a2 + v14 + 8);
  outlined copy of Data._Representation(v17, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  outlined consume of Data._Representation(v19, v20);
  v15[2] = *(void *)(v16 + 16);
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + a3[11]) = *(_WORD *)(a2 + a3[11]);
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  uint64_t v25 = a3[13];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (uint64_t *)(a2 + v25);
  unint64_t v28 = *(void *)(a2 + v25 + 8);
  if (*(void *)(a1 + v25 + 8) >> 60 == 15)
  {
    if (v28 >> 60 == 15)
    {
      long long v29 = *(_OWORD *)v27;
      *(void *)(v26 + 16) = v27[2];
      *(_OWORD *)uint64_t v26 = v29;
      goto LABEL_10;
    }
    uint64_t v31 = *v27;
    outlined copy of Data._Representation(*v27, v28);
    *(void *)uint64_t v26 = v31;
    *(void *)(v26 + 8) = v28;
    goto LABEL_8;
  }
  if (v28 >> 60 != 15)
  {
    uint64_t v32 = *v27;
    outlined copy of Data._Representation(*v27, v28);
    uint64_t v33 = *(void *)v26;
    unint64_t v34 = *(void *)(v26 + 8);
    *(void *)uint64_t v26 = v32;
    *(void *)(v26 + 8) = v28;
    outlined consume of Data._Representation(v33, v34);
LABEL_8:
    uint64_t v30 = v27[2];
    goto LABEL_9;
  }
  outlined destroy of ByteBuffer(v26);
  uint64_t v30 = v27[2];
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
LABEL_9:
  *(void *)(v26 + 16) = v30;
LABEL_10:
  uint64_t v35 = a3[14];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  uint64_t v38 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v39 = *(void *)(v38 - 8);
  unint64_t v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1, v38);
  int v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 24))(v36, v37, v38);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_15;
  }
  if (v42)
  {
LABEL_15:
    uint64_t v43 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v36, v37, *(void *)(*(void *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 16))(v36, v37, v38);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  return a1;
}

uint64_t initializeWithTake for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  unint64_t v11 = (long long *)(a2 + v8);
  long long v12 = *v11;
  *(void *)(v10 + 16) = *((void *)v11 + 2);
  *(_OWORD *)uint64_t v10 = v12;
  uint64_t v13 = a1 + v9;
  uint64_t v14 = a2 + v9;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  uint64_t v19 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + v19) = *(_WORD *)(a2 + v19);
  uint64_t v20 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  uint64_t v23 = a3[14];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithTake for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a1 + v8);
  unint64_t v12 = *(void *)(a1 + v8 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  outlined consume of Data._Representation(v11, v12);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a1 + v13);
  unint64_t v17 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  outlined consume of Data._Representation(v16, v17);
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  uint64_t v22 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + v22) = *(_WORD *)(a2 + v22);
  uint64_t v23 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  unint64_t v26 = *(void *)(a1 + v23 + 8);
  if (v26 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v27 = *(void *)(v25 + 8);
  if (v27 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v24);
LABEL_4:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_6;
  }
  uint64_t v28 = *(void *)v24;
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8) = v27;
  outlined consume of Data._Representation(v28, v26);
LABEL_6:
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  uint64_t v29 = a3[14];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v33 = *(void *)(v32 - 8);
  unint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 40))(v30, v31, v32);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_11;
  }
  if (v36)
  {
LABEL_11:
    uint64_t v37 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v30, v31, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionTicket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B5727B18);
}

uint64_t sub_1B5727B18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 12)
  {
    uint64_t v11 = *(void *)(a1 + a3[7] + 8) >> 60;
    if (((4 * v11) & 0xC) != 0) {
      return 16 - ((4 * v11) & 0xC | (v11 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v13 = type metadata accessor for SymmetricKey();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v10 = a1 + a3[9];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for PeerCertificateBundle(0);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[14];

  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for SessionTicket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B5727CBC);
}

uint64_t sub_1B5727CBC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 12)
  {
    uint64_t v13 = (void *)(a1 + a4[7]);
    *uint64_t v13 = 0;
    v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v14 = type metadata accessor for SymmetricKey();
  uint64_t v15 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v15 + 84) == a3)
  {
    uint64_t v10 = v14;
    uint64_t v12 = a1 + a4[9];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for PeerCertificateBundle(0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a4[14];

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata completion function for SessionTicket()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SymmetricKey();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PeerCertificateBundle.Bundle(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B5727F84()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B5727FBC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void CertificateRequest.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = a2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 24);
LABEL_5:
      outlined copy of Data._Representation(a2, a3);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = BYTE6(a3);
      break;
  }
  if (v10 < a4)
  {
    __break(1u);
    JUMPOUT(0x1B5728130);
  }
  uint64_t v11 = Data._Representation.subscript.getter();
  unint64_t v13 = v12;
  Data.hash(into:)();
  outlined consume of Data._Representation(v11, v13);
  outlined consume of Data._Representation(a2, a3);
  Swift::UInt v14 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v14);
  if (v14)
  {
    uint64_t v15 = (long long *)(a5 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v15, (uint64_t)v16);
      outlined retain of Extension((uint64_t)v16, (void (*)(void, void, void, void, void))outlined copy of Extension);
      Extension.hash(into:)(a1);
      outlined retain of Extension((uint64_t)v16, (void (*)(void, void, void, void, void))outlined consume of Extension);
      uint64_t v15 = (long long *)((char *)v15 + 40);
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t static CertificateRequest.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((specialized static ByteBuffer.== infix(_:_:)(a1, a2, a3, a5, a6, a7) & 1) == 0) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(a4, a8);
}

Swift::Int CertificateRequest.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  CertificateRequest.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateRequest()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  CertificateRequest.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CertificateRequest(uint64_t a1)
{
  CertificateRequest.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateRequest()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  CertificateRequest.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a2[3];
  if ((specialized static ByteBuffer.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]) & 1) == 0) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

unint64_t CertificateRequest.write(into:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1, a2, a3, a4);
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  uint64_t v13 = 0;
  switch(v12 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v11 >> 32;
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v11 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v13 = BYTE6(v12);
      break;
  }
  unsigned __int16 v45 = 0;
  uint64_t v14 = MEMORY[0x1E4FBB2B8];
  uint64_t v42 = MEMORY[0x1E4FBB2B8];
  uint64_t v43 = MEMORY[0x1E4F27EF0];
  unint64_t v40 = &v45;
  int v41 = v46;
  __swift_project_boxed_opaque_existential_1(&v40, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  uint64_t v15 = *(void *)(a5 + 16);
  if (!v15)
  {
LABEL_39:
    unint64_t v17 = 0;
    goto LABEL_40;
  }
  uint64_t v35 = v13;
  unint64_t v36 = v10;
  uint64_t v16 = a5 + 32;
  swift_bridgeObjectRetain();
  unint64_t v17 = 0;
  do
  {
    uint64_t v18 = v14;
    outlined init with take of Extension((long long *)v16, (uint64_t)v44);
    uint64_t v19 = *(void *)v16;
    unint64_t v20 = *(void *)(v16 + 8);
    unint64_t v21 = *(void *)(v16 + 16);
    outlined init with take of Extension(v44, (uint64_t)&v45);
    v16 += 40;
    unsigned int v22 = 42;
    switch(v46[30])
    {
      case 1:
        swift_bridgeObjectRetain();
        unsigned int v22 = 10;
        break;
      case 2:
        outlined init with take of Extension.SupportedVersions((uint64_t)&v45, (uint64_t)v48);
        outlined copy of Extension.ServerCertificateType(v19, v20 & 1);
        unsigned int v22 = 43;
        break;
      case 3:
      case 9:
        outlined copy of Data._Representation(v19, v20);
        unsigned int v22 = 16;
        break;
      case 4:
        outlined init with take of Extension.KeyShare((uint64_t)&v45, (uint64_t)v49);
        outlined copy of Extension.KeyShare(v19, v20, v21);
        unsigned int v22 = 51;
        break;
      case 5:
        break;
      case 6:
        swift_bridgeObjectRetain();
        unsigned int v22 = 13;
        break;
      case 7:
        outlined init with take of Extension.ServerCertificateType((uint64_t)&v45, (uint64_t)v50);
        outlined copy of Extension.ServerCertificateType(v19, v20 & 1);
        unsigned int v22 = 20;
        break;
      case 8:
        outlined copy of Data._Representation(v19, v20);
        unsigned int v22 = 57;
        break;
      case 0xA:
        swift_bridgeObjectRetain();
        unsigned int v22 = 45;
        break;
      case 0xB:
        outlined init with take of Extension.PreSharedKey((uint64_t)&v45, (uint64_t)v51);
        outlined copy of Extension.PreSharedKey(v19, v20, v21 & 1);
        unsigned int v22 = 41;
        break;
      case 0xC:
        outlined init with take of Extension.TicketRequest((uint64_t)&v45, (uint64_t)v39);
        unsigned int v22 = 58;
        break;
      case 0xD:
        unsigned int v22 = v45;
        outlined copy of Data._Representation(v20, v21);
        break;
      default:
        outlined init with take of Extension.ServerName((uint64_t)&v45, (uint64_t)v47);
        outlined copy of ByteBuffer?(v19, v20);
        unsigned int v22 = 0;
        break;
    }
    __int16 v37 = __rev16(v22);
    uint64_t v14 = v18;
    uint64_t v42 = v18;
    uint64_t v23 = MEMORY[0x1E4F27EF0];
    uint64_t v43 = MEMORY[0x1E4F27EF0];
    unint64_t v40 = (unsigned __int16 *)&v37;
    int v41 = &v38;
    __swift_project_boxed_opaque_existential_1(&v40, v18);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    uint64_t v24 = *a1;
    unint64_t v25 = a1[1];
    uint64_t v26 = 0;
    switch(v25 >> 62)
    {
      case 1uLL:
        uint64_t v26 = v24 >> 32;
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(v24 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v26 = BYTE6(v25);
        break;
    }
    __int16 v37 = 0;
    uint64_t v42 = v18;
    uint64_t v43 = v23;
    unint64_t v40 = (unsigned __int16 *)&v37;
    int v41 = &v38;
    __swift_project_boxed_opaque_existential_1(&v40, v18);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    unint64_t v27 = closure #1 in ByteBuffer.writeExtension(_:)(a1, v44);
    if ((v27 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    unint64_t v28 = v27;
    if (v27 >> 16) {
      goto LABEL_43;
    }
    uint64_t v29 = v26 + 2;
    if (__OFADD__(v26, 2)) {
      goto LABEL_44;
    }
    if (v26 < a1[2]) {
      goto LABEL_45;
    }
    uint64_t v30 = *a1;
    unint64_t v31 = a1[1];
    uint64_t v32 = 0;
    switch(v31 >> 62)
    {
      case 1uLL:
        uint64_t v32 = v30 >> 32;
        break;
      case 2uLL:
        uint64_t v32 = *(void *)(v30 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v32 = BYTE6(v31);
        break;
    }
    if (v32 < v29) {
      goto LABEL_46;
    }
    __int16 v37 = bswap32(v27) >> 16;
    if (v29 < v26) {
      goto LABEL_47;
    }
    uint64_t v42 = v18;
    uint64_t v43 = v23;
    unint64_t v40 = (unsigned __int16 *)&v37;
    int v41 = &v38;
    __swift_project_boxed_opaque_existential_1(&v40, v18);
    Data._Representation.replaceSubrange(_:with:count:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    outlined retain of Extension((uint64_t)v44, (void (*)(void, void, void, void, void))outlined consume of Extension);
    BOOL v33 = __OFADD__(v17, v28 + 4);
    v17 += v28 + 4;
    if (v33) {
      goto LABEL_48;
    }
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v13 = v35;
  unint64_t v10 = v36;
  if (v17 >> 16)
  {
    __break(1u);
    goto LABEL_39;
  }
LABEL_40:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v17, v13);
  unint64_t result = v10 + v17 + 2;
  if (__OFADD__(v10, v17 + 2)) {
LABEL_50:
  }
    __break(1u);
  return result;
}

uint64_t CertificateRequest.init(bytes:)(uint64_t *a1)
{
  uint64_t result = specialized CertificateRequest.init(bytes:)(a1);
  if (v1) {
    return v3;
  }
  return result;
}

void *readExtensions #1 (_:) in CertificateRequest.init(bytes:)(uint64_t *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v30 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = v3 + 2;
  if (__OFADD__(v3, 2))
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
  }
  uint64_t v5 = v1;
  unint64_t v28 = (void *)MEMORY[0x1E4FBC860];
  while (2)
  {
    uint64_t v6 = BYTE6(v30);
    switch(v30 >> 62)
    {
      case 1uLL:
        uint64_t v6 = v2 >> 32;
        goto LABEL_5;
      case 2uLL:
        if (*(void *)(v2 + 24) < v4) {
          return v28;
        }
        goto LABEL_10;
      case 3uLL:
        if (v4 < 1) {
          goto LABEL_10;
        }
        return v28;
      default:
LABEL_5:
        if (v6 < v4) {
          return v28;
        }
LABEL_10:
        uint64_t v31 = v2;
        unint64_t v32 = v30;
        if (v4 < v3) {
          goto LABEL_50;
        }
        uint64_t v36 = v3;
        unint64_t v37 = v4;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
        lazy protocol witness table accessor for type Data and conformance Data();
        lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
        DataProtocol.copyBytes<A>(to:from:)();
        a1[2] = v4;
        uint64_t v7 = v4 + 2;
        if (__OFADD__(v4, 2)) {
          goto LABEL_51;
        }
        break;
    }
    unsigned int v8 = bswap32(0) >> 16;
    uint64_t v9 = v2 >> 32;
    uint64_t v10 = BYTE6(v30);
    switch(v30 >> 62)
    {
      case 1uLL:
        goto LABEL_14;
      case 2uLL:
        uint64_t v9 = *(void *)(v2 + 24);
        swift_retain();
LABEL_14:
        swift_retain();
        uint64_t v10 = v9;
        goto LABEL_15;
      case 3uLL:
        if (v7 < 1) {
          goto LABEL_18;
        }
        goto LABEL_46;
      default:
LABEL_15:
        if (v10 >= v7)
        {
LABEL_18:
          uint64_t v31 = v2;
          unint64_t v32 = v30;
          if (v7 < v4) {
            goto LABEL_52;
          }
          uint64_t v36 = v4;
          unint64_t v37 = v4 + 2;
          DataProtocol.copyBytes<A>(to:from:)();
          uint64_t v11 = bswap32(0) >> 16;
          a1[2] = v7;
          uint64_t v12 = v7 + v11;
          if (__OFADD__(v7, v11)) {
            goto LABEL_53;
          }
          uint64_t v13 = BYTE6(v30);
          switch(v30 >> 62)
          {
            case 1uLL:
              uint64_t v13 = v2 >> 32;
              goto LABEL_23;
            case 2uLL:
              uint64_t v13 = *(void *)(v2 + 24);
              goto LABEL_23;
            case 3uLL:
              if (v12 <= 0) {
                goto LABEL_26;
              }
              goto LABEL_46;
            default:
LABEL_23:
              if (v13 < v12) {
                goto LABEL_45;
              }
LABEL_26:
              if (v12 < v7) {
                goto LABEL_54;
              }
              uint64_t v14 = Data._Representation.subscript.getter();
              a1[2] = v12;
              uint64_t v16 = 0;
              switch(v15 >> 62)
              {
                case 1uLL:
                  uint64_t v16 = (int)v14;
                  break;
                case 2uLL:
                  uint64_t v16 = *(void *)(v14 + 16);
                  break;
                default:
                  break;
              }
              uint64_t v36 = v14;
              unint64_t v37 = v15;
              uint64_t v38 = v16;
              closure #1 in ByteBuffer.readExtension(messageType:helloRetryRequest:)(&v36, v8, 0xDu, 0, (uint64_t)&v31);
              if (v5) {
                goto LABEL_47;
              }
              uint64_t v17 = 0;
              switch(v37 >> 62)
              {
                case 1uLL:
                  uint64_t v17 = v36 >> 32;
                  break;
                case 2uLL:
                  uint64_t v17 = *(void *)(v36 + 24);
                  break;
                case 3uLL:
                  break;
                default:
                  uint64_t v17 = BYTE6(v37);
                  break;
              }
              if (__OFSUB__(v17, v38)) {
                goto LABEL_55;
              }
              if (v17 != v38)
              {
                lazy protocol witness table accessor for type TLSError and conformance TLSError();
                swift_allocError();
                *(_DWORD *)uint64_t v26 = 1;
                *(unsigned char *)(v26 + 4) = 1;
                swift_willThrow();
                outlined consume of Extension(v31, v32, v33, v34, v35);
LABEL_47:
                outlined consume of Data._Representation(v36, v37);
                outlined consume of Data._Representation(*a1, a1[1]);
                *a1 = v2;
                a1[1] = v30;
                a1[2] = v4;
                swift_willThrow();
                swift_bridgeObjectRelease();
                return v28;
              }
              outlined consume of Data._Representation(v36, v37);
              outlined consume of Data._Representation(v2, v30);
              uint64_t v18 = v31;
              unint64_t v19 = v32;
              unint64_t v20 = v33;
              uint64_t v21 = v34;
              char v22 = v35;
              outlined copy of Extension(v31, v32, v33, v34, v35);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
              }
              unint64_t v24 = v28[2];
              unint64_t v23 = v28[3];
              if (v24 >= v23 >> 1) {
                unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v28);
              }
              void v28[2] = v24 + 1;
              unint64_t v25 = &v28[5 * v24];
              v25[4] = v18;
              v25[5] = v19;
              v25[6] = v20;
              v25[7] = v21;
              *((unsigned char *)v25 + 64) = v22;
              outlined consume of Extension(v18, v19, v20, v21, v22);
              uint64_t v3 = a1[2];
              uint64_t v4 = v3 + 2;
              if (__OFADD__(v3, 2)) {
                goto LABEL_49;
              }
              break;
          }
          continue;
        }
LABEL_45:
        outlined consume of Data._Representation(v2, v30);
LABEL_46:
        *a1 = v2;
        a1[1] = v30;
        a1[2] = v4;
        return v28;
    }
  }
}

unint64_t protocol witness for HandshakeMessageProtocol.write(into:) in conformance CertificateRequest(uint64_t *a1)
{
  return CertificateRequest.write(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance CertificateRequest@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized CertificateRequest.init(bytes:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t specialized CertificateRequest.init(bytes:)(uint64_t *a1)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  outlined copy of Data._Representation(*a1, v4);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1, (uint64_t)&v10);
  if (v1)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
  }
  else
  {
    unint64_t v7 = v11;
    if (v11 >> 60 == 15)
    {
      outlined consume of Data._Representation(*a1, a1[1]);
    }
    else
    {
      uint64_t v2 = v10;
      outlined consume of Data._Representation(v5, v4);
      uint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      uint64_t v6 = a1[2];
      outlined copy of Data._Representation(*a1, v4);
      if (specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1))
      {
        outlined consume of Data._Representation(v5, v4);
        return v2;
      }
      outlined consume of Data._Representation(*a1, a1[1]);
      outlined consume of ByteBuffer?(v2, v7);
    }
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 4) = 1;
  }
  swift_willThrow();
  return v2;
}

unint64_t lazy protocol witness table accessor for type CertificateRequest and conformance CertificateRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type CertificateRequest and conformance CertificateRequest;
  if (!lazy protocol witness table cache variable for type CertificateRequest and conformance CertificateRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateRequest and conformance CertificateRequest);
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateRequest()
{
  return &type metadata for CertificateRequest;
}

uint64_t ByteBuffer.readSignatureScheme()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < v2) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v3 + 24) >= v2) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v4) < v2)
      {
LABEL_11:
        unsigned int v6 = 0;
        int v5 = 1;
        return v6 | (v5 << 16);
      }
LABEL_8:
      if (v2 < v1) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v5 = 0;
      unsigned int v6 = bswap32(0) >> 16;
      v0[2] = v2;
      return v6 | (v5 << 16);
  }
}

void *SignatureScheme.ecdsa_secp256r1_sha256.unsafeMutableAddressor()
{
  return &static SignatureScheme.ecdsa_secp256r1_sha256;
}

uint64_t specialized ByteBuffer.readInteger<A>(as:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 >= 1) {
        goto LABEL_10;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 < v2)
      {
LABEL_10:
        unsigned int v7 = 0;
        int v6 = 1;
        return v7 | (v6 << 16);
      }
LABEL_7:
      if (v2 < v1) {
        goto LABEL_13;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v6 = 0;
      unsigned int v7 = bswap32(0) >> 16;
      v0[2] = v2;
      return v7 | (v6 << 16);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 >= 1) {
        goto LABEL_10;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 < v2)
      {
LABEL_10:
        int v6 = 1;
        return (v6 << 8);
      }
LABEL_7:
      if (v2 < v1) {
        goto LABEL_13;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v6 = 0;
      v0[2] = v2;
      return (v6 << 8);
  }
}

unint64_t specialized ByteBuffer.readInteger<A>(as:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 8;
  if (__OFADD__(v1, 8))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 >= 1) {
        return 0;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 >= v2)
      {
LABEL_7:
        if (v2 >= v1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
          lazy protocol witness table accessor for type Data and conformance Data();
          lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
          DataProtocol.copyBytes<A>(to:from:)();
          unint64_t result = bswap64(0);
          v0[2] = v2;
          return result;
        }
LABEL_13:
        __break(1u);
      }
      return 0;
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 4;
  if (__OFADD__(v1, 4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 >= 1) {
        goto LABEL_10;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 < v2)
      {
LABEL_10:
        unsigned int v7 = 0;
        int v6 = 1;
        return v7 | ((unint64_t)v6 << 32);
      }
LABEL_7:
      if (v2 < v1) {
        goto LABEL_13;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v6 = 0;
      unsigned int v7 = bswap32(0);
      v0[2] = v2;
      return v7 | ((unint64_t)v6 << 32);
  }
}

void *SignatureScheme.ecdsa_secp384r1_sha384.unsafeMutableAddressor()
{
  return &static SignatureScheme.ecdsa_secp384r1_sha384;
}

uint64_t static SignatureScheme.ecdsa_secp384r1_sha384.getter()
{
  return 1283;
}

void *SignatureScheme.rsa_pss_rsae_sha256.unsafeMutableAddressor()
{
  return &static SignatureScheme.rsa_pss_rsae_sha256;
}

uint64_t static SignatureScheme.rsa_pss_rsae_sha256.getter()
{
  return 2052;
}

unint64_t SignatureScheme.description.getter(__int16 a1)
{
  unint64_t v1 = 0xD000000000000017;
  if (a1 != 1027)
  {
    if (a1 == 2052)
    {
      return 0xD000000000000014;
    }
    else if (a1 != 1283)
    {
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = 41;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      return 0xD00000000000001ALL;
    }
  }
  return v1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SignatureScheme()
{
  return SignatureScheme.description.getter(*v0);
}

unint64_t lazy protocol witness table accessor for type SignatureScheme and conformance SignatureScheme()
{
  unint64_t result = lazy protocol witness table cache variable for type SignatureScheme and conformance SignatureScheme;
  if (!lazy protocol witness table cache variable for type SignatureScheme and conformance SignatureScheme)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SignatureScheme and conformance SignatureScheme);
  }
  return result;
}

ValueMetadata *type metadata accessor for SignatureScheme()
{
  return &type metadata for SignatureScheme;
}

uint64_t static Extension.EarlyData.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
  {
    if ((a2 & 0x100000000) != 0) {
      return 1;
    }
  }
  else if ((a2 & 0x100000000) == 0 && a1 == a2)
  {
    return 1;
  }
  return 0;
}

uint64_t ByteBuffer.writeEarlyDataExtension(_:)(uint64_t a1)
{
  void v3[5] = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x100000000) != 0) {
    return 0;
  }
  unsigned int v2 = bswap32(a1);
  v3[3] = MEMORY[0x1E4FBB2B8];
  v3[4] = MEMORY[0x1E4F27EF0];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 4;
}

uint64_t ByteBuffer.readEarlyDataExtension(messageType:)(unsigned __int8 a1)
{
  if (a1 == 1 || a1 == 8)
  {
    uint64_t v3 = 0;
    unsigned __int8 v4 = 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  if (a1 == 4)
  {
    uint64_t v6 = v1[2];
    uint64_t v7 = v6 + 4;
    if (__OFADD__(v6, 4))
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    uint64_t v8 = *v1;
    unint64_t v9 = v1[1];
    switch(v9 >> 62)
    {
      case 1uLL:
        if (v8 >> 32 < v7) {
          goto LABEL_20;
        }
        goto LABEL_17;
      case 2uLL:
        if (*(void *)(v8 + 24) >= v7) {
          goto LABEL_17;
        }
        goto LABEL_20;
      case 3uLL:
        if (v7 > 0) {
          goto LABEL_20;
        }
        goto LABEL_17;
      default:
        if (BYTE6(v9) < v7)
        {
LABEL_20:
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v11 = 0;
          char v12 = 1;
          goto LABEL_21;
        }
LABEL_17:
        if (v7 < v6) {
          goto LABEL_23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
        lazy protocol witness table accessor for type Data and conformance Data();
        lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
        DataProtocol.copyBytes<A>(to:from:)();
        unsigned __int8 v4 = 0;
        uint64_t v3 = bswap32(0);
        v1[2] = v7;
        break;
    }
    return v3 | ((unint64_t)v4 << 32);
  }
  int v10 = a1 | 0x330000;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  char v12 = 0;
  *(_DWORD *)uint64_t v11 = v10;
LABEL_21:
  *(unsigned char *)(v11 + 4) = v12;
  return swift_willThrow();
}

uint64_t Extension.EarlyData.maxEarlyDataSize.setter(uint64_t result)
{
  *(_DWORD *)uint64_t v1 = result;
  *(unsigned char *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t Extension.EarlyData.init(maxEarlyDataSize:)(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

void Extension.EarlyData.hash(into:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v2 = a2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int Extension.EarlyData.hashValue.getter(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.EarlyData()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Extension.EarlyData()
{
  if (*(unsigned char *)(v0 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v1 = *(_DWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.EarlyData()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.EarlyData(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4))
  {
    if (*(unsigned char *)(a2 + 4)) {
      return 1;
    }
  }
  else
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2) {
      char v2 = 1;
    }
    if ((v2 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type Extension.EarlyData and conformance Extension.EarlyData()
{
  unint64_t result = lazy protocol witness table cache variable for type Extension.EarlyData and conformance Extension.EarlyData;
  if (!lazy protocol witness table cache variable for type Extension.EarlyData and conformance Extension.EarlyData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.EarlyData and conformance Extension.EarlyData);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for Extension.EarlyData()
{
  return &type metadata for Extension.EarlyData;
}

uint64_t ByteBuffer.writeHandshakeMessage<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  LOBYTE(v15) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v6 = MEMORY[0x1E4FBB2B8];
  uint64_t v7 = MEMORY[0x1E4F27EF0];
  uint64_t v18 = MEMORY[0x1E4FBB2B8];
  uint64_t v19 = MEMORY[0x1E4F27EF0];
  uint64_t v16 = &v15;
  uint64_t v17 = (__int16 **)((char *)&v15 + 1);
  __swift_project_boxed_opaque_existential_1(&v16, MEMORY[0x1E4FBB2B8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  uint64_t v8 = *v3;
  unint64_t v9 = v3[1];
  uint64_t v10 = 0;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v10 = v8 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(v8 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = BYTE6(v9);
      break;
  }
  LOBYTE(v15) = 0;
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  uint64_t v16 = &v15;
  uint64_t v17 = (__int16 **)((char *)&v15 + 1);
  __swift_project_boxed_opaque_existential_1(&v16, v6);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  __int16 v15 = 0;
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  uint64_t v16 = &v15;
  uint64_t v17 = &v16;
  __swift_project_boxed_opaque_existential_1(&v16, v6);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 16))(v3, a2, a3);
  if (v11 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  uint64_t v12 = v11;
  uint64_t v13 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v11), v10);
  if (__OFADD__(v10, v13)) {
    goto LABEL_9;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v12, v10 + v13);
  return v12 + 4;
}

uint64_t ByteBuffer.readNamedGroup()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < v2) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v3 + 24) >= v2) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v2 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v4) < v2)
      {
LABEL_11:
        unsigned int v6 = 0;
        int v5 = 1;
        return v6 | (v5 << 16);
      }
LABEL_8:
      if (v2 < v1) {
        goto LABEL_14;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      DataProtocol.copyBytes<A>(to:from:)();
      int v5 = 0;
      unsigned int v6 = bswap32(0) >> 16;
      v0[2] = v2;
      return v6 | (v5 << 16);
  }
}

void *NamedGroup.x25519.unsafeMutableAddressor()
{
  return &static NamedGroup.x25519;
}

void *NamedGroup.secp384.unsafeMutableAddressor()
{
  return &static NamedGroup.secp384;
}

void *NamedGroup.secp256.unsafeMutableAddressor()
{
  return &static NamedGroup.secp256;
}

uint64_t static NamedGroup.secp256.getter()
{
  return 23;
}

uint64_t NamedGroup.description.getter(__int16 a1)
{
  switch(a1)
  {
    case 23:
      return 0x363532706365732ELL;
    case 29:
      return 0x3931353532782ELL;
    case 24:
      return 0x343833706365732ELL;
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000015;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NamedGroup()
{
  return NamedGroup.description.getter(*v0);
}

unint64_t lazy protocol witness table accessor for type NamedGroup and conformance NamedGroup()
{
  unint64_t result = lazy protocol witness table cache variable for type NamedGroup and conformance NamedGroup;
  if (!lazy protocol witness table cache variable for type NamedGroup and conformance NamedGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedGroup and conformance NamedGroup);
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedGroup()
{
  return &type metadata for NamedGroup;
}

unint64_t HandshakeMessage.logDescription.getter()
{
  outlined init with take of HandshakeMessage(v0, (uint64_t)v2);
  unint64_t result = 0x6548746E65696C63;
  switch(v2[104])
  {
    case 1:
      unint64_t result = 0x6548726576726573;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6369666974726563;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x64656873696E6966;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

void HandshakeMessage.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with take of HandshakeMessage(v1, (uint64_t)v37);
  uint64_t v5 = v37[0];
  unint64_t v4 = v37[1];
  unint64_t v6 = v37[2];
  uint64_t v7 = v37[4];
  unint64_t v8 = v37[5];
  outlined init with take of HandshakeMessage(v1, (uint64_t)&v38);
  switch(v45)
  {
    case 1:
      long long v48 = v40;
      long long v49 = v41;
      *(_OWORD *)uint64_t v50 = v42;
      *(_OWORD *)uint64_t v51 = v43;
      *(_OWORD *)char v46 = v38;
      long long v47 = v39;
      Hasher._combine(_:)(1uLL);
      Swift::UInt8 v9 = v46[1];
      Hasher._combine(_:)(v46[0]);
      Hasher._combine(_:)(v9);
      Swift::UInt64 v11 = *((void *)&v47 + 1);
      Swift::UInt64 v10 = v47;
      Swift::UInt64 v12 = v48;
      Hasher._combine(_:)(*(Swift::UInt64 *)&v46[8]);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Swift::UInt64 v13 = *((void *)&v48 + 1);
      long long v15 = v49;
      Swift::UInt64 v14 = v50[0];
      Hasher._combine(_:)(v50[1]);
      Hasher._combine(_:)(v13);
      Hasher._combine(_:)(v15);
      Hasher._combine(_:)(*((Swift::UInt64 *)&v15 + 1));
      Hasher._combine(_:)(v14);
      Hasher._combine(_:)(v51[0]);
      Hasher._combine(_:)(v51[1]);
      uint64_t v16 = *(void *)&v51[4];
      Swift::UInt v17 = *(void *)(*(void *)&v51[4] + 16);
      Hasher._combine(_:)(v17);
      if (!v17) {
        return;
      }
      uint64_t v18 = (long long *)(v16 + 32);
      outlined retain of ServerHello((uint64_t)v46);
      do
      {
        outlined init with take of Extension(v18, (uint64_t)&v53);
        outlined retain of Extension((uint64_t)&v53, (void (*)(void, void, void, void, void))outlined copy of Extension);
        Extension.hash(into:)(a1);
        outlined retain of Extension((uint64_t)&v53, (void (*)(void, void, void, void, void))outlined consume of Extension);
        uint64_t v18 = (long long *)((char *)v18 + 40);
        --v17;
      }
      while (v17);
      goto LABEL_24;
    case 2:
      uint64_t v19 = v38;
      Hasher._combine(_:)(2uLL);
      Swift::UInt v20 = *(void *)(v19 + 16);
      Hasher._combine(_:)(v20);
      if (!v20) {
        return;
      }
      uint64_t v21 = (long long *)(v19 + 32);
      swift_bridgeObjectRetain();
      do
      {
        outlined init with take of Extension(v21, (uint64_t)v46);
        outlined retain of Extension((uint64_t)v46, (void (*)(void, void, void, void, void))outlined copy of Extension);
        Extension.hash(into:)(a1);
        outlined retain of Extension((uint64_t)v46, (void (*)(void, void, void, void, void))outlined consume of Extension);
        uint64_t v21 = (long long *)((char *)v21 + 40);
        --v20;
      }
      while (v20);
      goto LABEL_24;
    case 3:
      long long v22 = v38;
      long long v23 = v39;
      Hasher._combine(_:)(3uLL);
      outlined copy of Data._Representation(v5, v4);
      swift_bridgeObjectRetain();
      CertificateRequest.hash(into:)(a1, v22, *((unint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1));
      goto LABEL_24;
    case 4:
      long long v53 = v38;
      uint64_t v24 = *((void *)&v39 + 1);
      uint64_t v54 = v39;
      Hasher._combine(_:)(4uLL);
      *(_OWORD *)char v46 = v53;
      *(void *)&long long v47 = v54;
      uint64_t v25 = 0;
      switch(*((void *)&v53 + 1) >> 62)
      {
        case 1:
          uint64_t v25 = *(int *)&v46[4];
          goto LABEL_21;
        case 2:
          uint64_t v25 = *(void *)(*(void *)v46 + 24);
LABEL_21:
          outlined retain of Extension.QUICTransportParameters((uint64_t)v46);
          break;
        case 3:
          break;
        default:
          uint64_t v25 = v46[14];
          break;
      }
      if (v25 < (uint64_t)v47)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1B572AA04);
      }
      outlined copy of Data._Representation(v5, v4);
      swift_bridgeObjectRetain();
      uint64_t v30 = Data._Representation.subscript.getter();
      unint64_t v32 = v31;
      Data.hash(into:)();
      outlined consume of Data._Representation(v30, v32);
      outlined release of ByteBuffer((uint64_t)v46);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v24);
      swift_bridgeObjectRelease();
LABEL_24:
      uint64_t v33 = v2;
      break;
    case 5:
      *(_OWORD *)char v46 = v38;
      long long v47 = v39;
      Hasher._combine(_:)(5uLL);
      Hasher._combine(_:)(*(Swift::UInt16 *)v46);
      uint64_t v26 = *((void *)&v47 + 1);
      uint64_t v27 = 0;
      switch((unint64_t)v47 >> 62)
      {
        case 1uLL:
          uint64_t v27 = *(int *)&v46[12];
          goto LABEL_27;
        case 2uLL:
          uint64_t v27 = *(void *)(*(void *)&v46[8] + 24);
LABEL_27:
          outlined copy of Data._Representation(v4, v6);
          outlined retain of CertificateVerify((uint64_t)v46);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v27 = BYTE6(v47);
          break;
      }
      if (v27 >= v26) {
        goto LABEL_34;
      }
      goto LABEL_38;
    case 6:
      *(_OWORD *)char v46 = v38;
      *(void *)&long long v47 = v39;
      Hasher._combine(_:)(6uLL);
      uint64_t v28 = v47;
      uint64_t v29 = 0;
      switch(*(void *)&v46[8] >> 62)
      {
        case 1:
          uint64_t v29 = *(int *)&v46[4];
          goto LABEL_32;
        case 2:
          uint64_t v29 = *(void *)(*(void *)v46 + 24);
LABEL_32:
          outlined copy of Data._Representation(v5, v4);
          outlined retain of Extension.QUICTransportParameters((uint64_t)v46);
          break;
        case 3:
          break;
        default:
          uint64_t v29 = v46[14];
          break;
      }
      if (v29 < v28) {
        goto LABEL_39;
      }
LABEL_34:
      uint64_t v34 = Data._Representation.subscript.getter();
      unint64_t v36 = v35;
      Data.hash(into:)();
      outlined consume of Data._Representation(v34, v36);
      outlined release of HandshakeMessage(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
      uint64_t v33 = v2;
      break;
    case 7:
      *(_OWORD *)char v46 = v38;
      long long v47 = v39;
      long long v48 = v40;
      long long v49 = v41;
      Hasher._combine(_:)(7uLL);
      outlined copy of Data._Representation(v4, v6);
      outlined copy of Data._Representation(v7, v8);
      swift_bridgeObjectRetain();
      NewSessionTicket.hash(into:)(a1);
      goto LABEL_24;
    default:
      *(_OWORD *)uint64_t v50 = v42;
      *(_OWORD *)uint64_t v51 = v43;
      uint64_t v52 = v44;
      *(_OWORD *)char v46 = v38;
      long long v47 = v39;
      long long v48 = v40;
      long long v49 = v41;
      Hasher._combine(_:)(0);
      ClientHello.hash(into:)(a1);
      return;
  }
  outlined release of HandshakeMessage(v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
}

Swift::Int HandshakeMessage.hashValue.getter()
{
  Hasher.init(_seed:)();
  HandshakeMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HandshakeMessage()
{
  outlined init with take of HandshakeMessage(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  HandshakeMessage.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance HandshakeMessage(uint64_t a1)
{
  outlined init with take of HandshakeMessage(v1, (uint64_t)&v3);
  HandshakeMessage.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HandshakeMessage()
{
  outlined init with take of HandshakeMessage(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  HandshakeMessage.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HandshakeMessage(uint64_t a1, uint64_t a2)
{
  outlined init with take of HandshakeMessage(a1, (uint64_t)v4);
  outlined init with take of HandshakeMessage(a2, (uint64_t)v5);
  return specialized static HandshakeMessage.__derived_enum_equals(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t outlined retain of CertificateVerify(uint64_t a1)
{
  return a1;
}

uint64_t specialized static HandshakeMessage.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of HandshakeMessage(a1, (uint64_t)&v77);
  switch(v86)
  {
    case 1:
      int v12 = v77;
      int v13 = BYTE1(v77);
      int64x2_t v60 = v78;
      int64x2_t v63 = (int64x2_t)v79;
      int64x2_t v55 = v80;
      int64x2_t v58 = v81;
      uint64_t v14 = v82;
      int v15 = (unsigned __int16)v83;
      int v16 = BYTE2(v83);
      uint64_t v17 = v84;
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (v76 == 1
        && v12 == v67
        && v13 == BYTE1(v67)
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v60, v68), (int32x4_t)vceqq_s64(v63, v69))), 0xFuLL))) & 1) != 0&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v55, v70), (int32x4_t)vceqq_s64(v58, v71))), 0xFuLL))) & 1) != 0&& v14 == v72&& v16 == BYTE2(v73)&& v15 == (unsigned __int16)v73&& (specialized static Array<A>.== infix(_:_:)(v17, v74) & 1) != 0)
      {
        goto LABEL_35;
      }
      goto LABEL_44;
    case 2:
      uint64_t v18 = v77;
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (v76 != 2) {
        goto LABEL_44;
      }
      char v19 = specialized static Array<A>.== infix(_:_:)(v18, v67);
      return v19 & 1;
    case 3:
      uint64_t v20 = v77;
      int64x2_t v22 = v78;
      uint64_t v21 = v79;
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (v76 != 3) {
        goto LABEL_44;
      }
      uint64_t v23 = v67;
      int64x2_t v24 = v68;
      uint64_t v64 = v69.i64[0];
      outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      if ((specialized static ByteBuffer.== infix(_:_:)(v20, v22.u64[0], v22.i64[1], v23, v24.u64[0], v24.i64[1]) & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v25 = v21;
      uint64_t v26 = v64;
      goto LABEL_27;
    case 4:
      uint64_t v28 = v77;
      int64x2_t v30 = v78;
      uint64_t v29 = v79;
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (v76 != 4) {
        goto LABEL_44;
      }
      uint64_t v31 = v67;
      int64x2_t v32 = v68;
      uint64_t v65 = v69.i64[0];
      outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      if ((specialized static ByteBuffer.== infix(_:_:)(v28, v30.u64[0], v30.i64[1], v31, v32.u64[0], v32.i64[1]) & 1) == 0) {
        goto LABEL_43;
      }
      char v27 = specialized static Array<A>.== infix(_:_:)(v29, v65);
      goto LABEL_34;
    case 5:
      int v33 = (unsigned __int16)v77;
      int64x2_t v34 = v78;
      uint64_t v35 = v79;
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (v76 != 5 || v33 != (unsigned __int16)v67) {
        goto LABEL_44;
      }
      unint64_t v37 = v68.u64[1];
      uint64_t v36 = v69.i64[0];
      uint64_t v38 = v68.i64[0];
      outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      char v27 = specialized static ByteBuffer.== infix(_:_:)(v34.i64[0], v34.u64[1], v35, v38, v37, v36);
      goto LABEL_34;
    case 6:
      uint64_t v40 = v77;
      int64x2_t v41 = v78;
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (v76 != 6) {
        goto LABEL_44;
      }
      uint64_t v42 = v67;
      int64x2_t v43 = v68;
      outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      char v19 = specialized static ByteBuffer.== infix(_:_:)(v40, v41.u64[0], v41.i64[1], v42, v43.u64[0], v43.i64[1]);
      outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
      outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
      return v19 & 1;
    case 7:
      unsigned int v45 = v77;
      unsigned int v44 = HIDWORD(v77);
      int64x2_t v46 = v78;
      long long v47 = v79;
      int64x2_t v48 = v80;
      uint64_t v66 = v81.i64[0];
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (v76 != 7 || __PAIR64__(v44, v45) != v67) {
        goto LABEL_44;
      }
      uint64_t v53 = v70.i64[1];
      unint64_t v56 = v70.i64[0];
      uint64_t v51 = v71.i64[0];
      uint64_t v52 = v69.i64[1];
      uint64_t v61 = v69.i64[0];
      int64x2_t v49 = v68;
      outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of HandshakeMessage);
      if ((specialized static ByteBuffer.== infix(_:_:)(v46.i64[0], v46.u64[1], v47, v49.i64[0], v49.u64[1], v61) & 1) != 0
        && (specialized static ByteBuffer.== infix(_:_:)(*((uint64_t *)&v47 + 1), v48.u64[0], v48.i64[1], v52, v56, v53) & 1) != 0)
      {
        uint64_t v25 = v66;
        uint64_t v26 = v51;
LABEL_27:
        char v27 = specialized static Array<A>.== infix(_:_:)(v25, v26);
LABEL_34:
        char v39 = v27;
        outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
        outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
        if (v39)
        {
LABEL_35:
          char v19 = 1;
          return v19 & 1;
        }
      }
      else
      {
LABEL_43:
        outlined release of HandshakeMessage(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
        outlined release of HandshakeMessage(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of HandshakeMessage);
      }
LABEL_44:
      char v19 = 0;
      return v19 & 1;
    default:
      int v4 = v77;
      int v5 = BYTE1(v77);
      int64x2_t v59 = v78;
      int64x2_t v62 = (int64x2_t)v79;
      int64x2_t v54 = v80;
      int64x2_t v57 = v81;
      uint64_t v7 = v82;
      uint64_t v6 = v83;
      uint64_t v9 = v84;
      uint64_t v8 = v85;
      outlined init with take of HandshakeMessage(a2, (uint64_t)&v67);
      if (!v76
        && v4 == v67
        && v5 == BYTE1(v67)
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v59, v68), (int32x4_t)vceqq_s64(v62, v69))), 0xFuLL))) & 1) != 0&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v54, v70), (int32x4_t)vceqq_s64(v57, v71))), 0xFuLL))) & 1) != 0&& v7 == v72)
      {
        uint64_t v10 = v74;
        uint64_t v11 = v75;
        if ((specialized static Array<A>.== infix(_:_:)(v6, v73) & 1) != 0
          && specialized static Array<A>.== infix(_:_:)(v9, v10)
          && (specialized static Array<A>.== infix(_:_:)(v8, v11) & 1) != 0)
        {
          goto LABEL_35;
        }
      }
      goto LABEL_44;
  }
}

unint64_t lazy protocol witness table accessor for type HandshakeMessage and conformance HandshakeMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type HandshakeMessage and conformance HandshakeMessage;
  if (!lazy protocol witness table cache variable for type HandshakeMessage and conformance HandshakeMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandshakeMessage and conformance HandshakeMessage);
  }
  return result;
}

uint64_t destroy for HandshakeMessage(uint64_t a1)
{
  return outlined consume of HandshakeMessage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(unsigned char *)(a1 + 104));
}

uint64_t initializeWithCopy for HandshakeMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  char v17 = *(unsigned char *)(a2 + 104);
  outlined copy of HandshakeMessage(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v17;
  return a1;
}

uint64_t assignWithCopy for HandshakeMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 72);
  uint64_t v26 = *(void *)(a2 + 80);
  uint64_t v27 = *(void *)(a2 + 88);
  uint64_t v28 = *(void *)(a2 + 96);
  char v29 = *(unsigned char *)(a2 + 104);
  outlined copy of HandshakeMessage(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8);
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 96);
  char v23 = *(unsigned char *)(a1 + 104);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  *(void *)(a1 + 96) = v28;
  *(unsigned char *)(a1 + 104) = v29;
  outlined consume of HandshakeMessage(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for HandshakeMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 96);
  char v4 = *(unsigned char *)(a2 + 104);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 96);
  char v16 = *(unsigned char *)(a1 + 104);
  long long v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(void *)(a1 + 96) = v3;
  *(unsigned char *)(a1 + 104) = v4;
  outlined consume of HandshakeMessage(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 104) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for HandshakeMessage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t destructiveInjectEnumTag for HandshakeMessage(uint64_t result, char a2)
{
  *(unsigned char *)(result + 104) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HandshakeMessage()
{
  return &type metadata for HandshakeMessage;
}

uint64_t outlined release of HandshakeMessage(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 104);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), v4);
  return a1;
}

uint64_t specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)()
{
  return specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)();
}

{
  type metadata accessor for SHA384();
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  return static HMAC.authenticationCode<A>(for:using:)();
}

uint64_t HandshakeState.IdleState.init(configuration:sessionToResume:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = (uint64_t)a3 + *(int *)(type metadata accessor for HandshakeState.IdleState(0) + 20);
  uint64_t v7 = type metadata accessor for SessionTicket();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  long long v8 = a1[3];
  a3[2] = a1[2];
  a3[3] = v8;
  *(_OWORD *)((char *)a3 + 60) = *(_OWORD *)((char *)a1 + 60);
  long long v9 = a1[1];
  *a3 = *a1;
  a3[1] = v9;
  outlined assign with take of HandshakeStateMachine?(a2, v6, &demangling cache variable for type metadata for SessionTicket?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for HandshakeState.IdleState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.IdleState);
}

uint64_t HandshakeState.logDescription.getter()
{
  uint64_t v1 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v1);
  unsigned int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v0, (uint64_t)v3, type metadata accessor for HandshakeState);
  uint64_t v4 = 1701602409;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v5 = 0x746E65696C63;
      goto LABEL_4;
    case 2u:
      uint64_t v5 = 0x726576726573;
LABEL_4:
      uint64_t v4 = v5 & 0xFFFFFFFFFFFFLL | 0x6548000000000000;
      break;
    case 3u:
      uint64_t v4 = 0xD000000000000019;
      break;
    case 4u:
      uint64_t v4 = 0xD000000000000011;
      break;
    case 5u:
      uint64_t v4 = 0xD000000000000017;
      break;
    case 6u:
      uint64_t v4 = 0x726F467964616572;
      break;
    default:
      break;
  }
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v3, type metadata accessor for HandshakeState);
  return v4;
}

uint64_t type metadata accessor for HandshakeState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState);
}

uint64_t HandshakeState.sendingClientHello(_:sessionToResume:diffieHellmanKey:currentTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v42 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1F4188790](v7 - 8);
  long long v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SymmetricKey();
  uint64_t v43 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int64x2_t v41 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for HandshakeState.ClientHelloState(0);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  long long v17 = (char *)&v40 - v16;
  uint64_t v18 = type metadata accessor for HandshakeState.IdleState(0);
  MEMORY[0x1F4188790](v18 - 8);
  long long v20 = (uint64_t *)((char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v21);
  char v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v6, (uint64_t)v23, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t result = _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v23, type metadata accessor for HandshakeState);
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  outlined init with take of HandshakeState.IdleState((uint64_t)v23, (uint64_t)v20, type metadata accessor for HandshakeState.IdleState);
  uint64_t v24 = v48;
  uint64_t v25 = static HandshakeState.ClientHelloState.sendingClientHello(originalState:clientHello:sessionToResume:diffieHellmanKey:currentTime:)((uint64_t)v15, v20, v44, v45, v46, v47);
  if (v24) {
    return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v20, type metadata accessor for HandshakeState.IdleState);
  }
  uint64_t v46 = v27;
  uint64_t v47 = v26;
  uint64_t v48 = v25;
  outlined init with take of HandshakeState.IdleState((uint64_t)v15, (uint64_t)v17, type metadata accessor for HandshakeState.ClientHelloState);
  specialized SessionKeyManager.clientEarlyTrafficSecret.getter((uint64_t)v9);
  uint64_t v29 = v43;
  uint64_t v30 = v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v9, 1, v10);
  if (result == 1) {
    goto LABEL_8;
  }
  _s8SwiftTLS14HandshakeStateOWOhTm_1(v6, type metadata accessor for HandshakeState);
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v20, type metadata accessor for HandshakeState.IdleState);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  int64x2_t v32 = v41;
  v31(v41, v9, v30);
  outlined init with take of HandshakeState.IdleState((uint64_t)v17, v6, type metadata accessor for HandshakeState.ClientHelloState);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = type metadata accessor for PartialHandshakeResult(0);
  uint64_t v34 = v30;
  uint64_t v35 = v33;
  uint64_t v36 = v42;
  unint64_t v37 = (char *)v42 + *(int *)(v33 + 20);
  v31(v37, v32, v34);
  uint64_t v38 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 0, 1, v38);
  uint64_t v39 = v47;
  *uint64_t v36 = v48;
  v36[1] = v39;
  v36[2] = v46;
  *(_OWORD *)((char *)v36 + *(int *)(v35 + 24)) = xmmword_1B577F270;
  return result;
}

uint64_t type metadata accessor for HandshakeState.ClientHelloState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ClientHelloState);
}

BOOL HandshakeState.EncryptedExtensionsState.isResumption.getter()
{
  uint64_t v1 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v1);
  unsigned int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v0 + *(int *)(v4 + 20), (uint64_t)v3, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 1;
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v3, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  return v5;
}

uint64_t HandshakeState.ReadyState.generateTLSExporterKey(label:)@<X0>(Swift::Int a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized SessionKeyManager.generateTLSExporterKey(label:)(a1, a2, a3);
}

uint64_t HandshakeState.ReadyState.generateHashForAuthenticator(transcript:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(a1, a2, a3);
}

uint64_t HandshakeState.ReadyState.generateHMACForAuthenticator(transcript:key:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(a1, a2, a3, a4);
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.negotiatedCipherSuite.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SessionTicket();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (unsigned __int16 *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v1, (uint64_t)v7, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of HandshakeState.IdleState((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    uint64_t v8 = *(unsigned __int16 *)&v4[*(int *)(v2 + 44)];
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SessionTicket);
  }
  else
  {
    uint64_t v8 = *v7;
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.negotiatedGroup.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SessionTicket();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v1, (uint64_t)v7, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of HandshakeState.IdleState((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    uint64_t v8 = *(unsigned __int16 *)&v4[*(int *)(v2 + 48)];
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SessionTicket);
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)v7 + 1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t HandshakeState.receivedServerHello(_:bytes:clock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v52 = a5;
  unint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v46 = a6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v50 = (uint64_t)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v47 = (uint64_t)v43 - v12;
  uint64_t v13 = type metadata accessor for SymmetricKey();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  uint64_t v49 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v44 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v51 = (char *)v43 - v17;
  uint64_t v18 = type metadata accessor for HandshakeState.ServerHelloState(0);
  MEMORY[0x1F4188790](v18);
  long long v20 = (void *)((char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for HandshakeState.ClientHelloState(0);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)v43 - v25;
  uint64_t v27 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v6;
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v6, (uint64_t)v29, type metadata accessor for HandshakeState);
  v43[1] = v27;
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v29, type metadata accessor for HandshakeState);
    __break(1u);
LABEL_9:
    uint64_t v50 = v18;
LABEL_11:
    uint64_t result = outlined destroy of HandshakeStateMachine?(v50, &demangling cache variable for type metadata for SymmetricKey?);
    __break(1u);
    return result;
  }
  outlined init with take of HandshakeState.IdleState((uint64_t)v29, (uint64_t)v26, type metadata accessor for HandshakeState.ClientHelloState);
  _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)v26, (uint64_t)v24, type metadata accessor for HandshakeState.ClientHelloState);
  outlined init with copy of SwiftTLSClock(v52, (uint64_t)v55);
  outlined retain of ServerHello(a1);
  unint64_t v30 = v53;
  outlined copy of Data._Representation(a2, v53);
  uint64_t v31 = (uint64_t)v56;
  HandshakeState.ServerHelloState.init(originalState:serverHello:serverHelloBytes:clock:)((uint64_t)v24, a1, a2, v30, v54, (uint64_t)v55, v20);
  if (v31) {
    return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v26, type metadata accessor for HandshakeState.ClientHelloState);
  }
  unint64_t v56 = v20;
  uint64_t v18 = v47;
  specialized SessionKeyManager.clientHandshakeTrafficSecret.getter(v47);
  uint64_t v34 = v48;
  uint64_t v33 = v49;
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v35(v18, 1, v48) == 1) {
    goto LABEL_9;
  }
  uint64_t v36 = v18;
  unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
  v37(v51, v36, v34);
  uint64_t v38 = v50;
  specialized SessionKeyManager.serverHandshakeTrafficSecret.getter(v50);
  if (v35(v38, 1, v34) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v34);
    goto LABEL_11;
  }
  uint64_t v39 = v45;
  _s8SwiftTLS14HandshakeStateOWOhTm_1(v45, type metadata accessor for HandshakeState);
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v26, type metadata accessor for HandshakeState.ClientHelloState);
  uint64_t v40 = v44;
  v37(v44, v38, v34);
  outlined init with take of HandshakeState.IdleState((uint64_t)v56, v39, type metadata accessor for HandshakeState.ServerHelloState);
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
  uint64_t v42 = &v46[*(int *)(v41 + 48)];
  v37(v46, (uint64_t)v51, v34);
  v37(v42, (uint64_t)v40, v34);
  type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t HandshakeState.receivedServerEncryptedExtensions(_:extensionBytes:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v22[0] = a4;
  uint64_t v8 = type metadata accessor for HandshakeState.ServerHelloState(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v14 = type metadata accessor for HandshakeState(0);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v22 - v18;
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v4, (uint64_t)v22 - v18, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of HandshakeState.IdleState((uint64_t)v19, (uint64_t)v13, type metadata accessor for HandshakeState.ServerHelloState);
    _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)v13, (uint64_t)v11, type metadata accessor for HandshakeState.ServerHelloState);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(a2, a3);
    uint64_t v20 = v22[1];
    HandshakeState.EncryptedExtensionsState.init(originalState:encryptedExtensions:extensionBytes:)((uint64_t)v11, a1, a2, a3, v22[0], (uint64_t)v17);
    if (v20)
    {
      return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v13, type metadata accessor for HandshakeState.ServerHelloState);
    }
    else
    {
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v4, type metadata accessor for HandshakeState);
      _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v13, type metadata accessor for HandshakeState.ServerHelloState);
      swift_storeEnumTagMultiPayload();
      return outlined init with take of HandshakeState.IdleState((uint64_t)v17, v4, type metadata accessor for HandshakeState);
    }
  }
  else
  {
    uint64_t result = _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v19, type metadata accessor for HandshakeState);
    __break(1u);
  }
  return result;
}

uint64_t HandshakeState.receivedServerCertificate(_:certificateBytes:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  uint64_t v12 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = type metadata accessor for HandshakeState(0);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v29 - v22;
  uint64_t v30 = v8;
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v8, (uint64_t)&v29 - v22, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of HandshakeState.IdleState((uint64_t)v23, (uint64_t)v17, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)v17, (uint64_t)v15, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    outlined copy of Data._Representation(a1, a2);
    swift_bridgeObjectRetain();
    uint64_t v25 = v32;
    unint64_t v24 = v33;
    outlined copy of Data._Representation(v32, v33);
    uint64_t v26 = v35;
    HandshakeState.ServerCertificateState.init(originalState:serverCertificate:certificateBytes:)((uint64_t)v15, a1, a2, v31, a4, v25, v24, v34, (uint64_t)v21);
    if (v26)
    {
      return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v17, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    }
    else
    {
      uint64_t v28 = v30;
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v30, type metadata accessor for HandshakeState);
      _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v17, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      swift_storeEnumTagMultiPayload();
      return outlined init with take of HandshakeState.IdleState((uint64_t)v21, v28, type metadata accessor for HandshakeState);
    }
  }
  else
  {
    uint64_t result = _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v23, type metadata accessor for HandshakeState);
    __break(1u);
  }
  return result;
}

uint64_t HandshakeState.receivedServerCertificateVerify(certificateVerify:certificateVerifyBytes:)(int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v31 = a4;
  int v30 = a1;
  uint64_t v12 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v18 = type metadata accessor for HandshakeState(0);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v28 - v22;
  uint64_t v29 = v8;
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v8, (uint64_t)&v28 - v22, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    outlined init with take of HandshakeState.IdleState((uint64_t)v23, (uint64_t)v17, type metadata accessor for HandshakeState.ServerCertificateState);
    _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)v17, (uint64_t)v15, type metadata accessor for HandshakeState.ServerCertificateState);
    outlined copy of Data._Representation(a2, a3);
    unint64_t v24 = v32;
    outlined copy of Data._Representation(a5, v32);
    uint64_t v25 = v34;
    HandshakeState.ServerCertificateVerifyState.init(originalState:certificateVerify:certificateVerifyBytes:)((uint64_t)v15, v30, a2, a3, v31, a5, v24, v33, (uint64_t)v21);
    if (v25)
    {
      return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v17, type metadata accessor for HandshakeState.ServerCertificateState);
    }
    else
    {
      uint64_t v27 = v29;
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v29, type metadata accessor for HandshakeState);
      _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v17, type metadata accessor for HandshakeState.ServerCertificateState);
      swift_storeEnumTagMultiPayload();
      return outlined init with take of HandshakeState.IdleState((uint64_t)v21, v27, type metadata accessor for HandshakeState);
    }
  }
  else
  {
    uint64_t result = _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v23, type metadata accessor for HandshakeState);
    __break(1u);
  }
  return result;
}

uint64_t HandshakeState.receievedServerFinished(serverFinished:serverFinishedBytes:serializer:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t a1)@<X1>, void (*a3)(char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  uint64_t v8 = v7;
  unint64_t v106 = a5;
  unint64_t v107 = a6;
  uint64_t v104 = a3;
  unint64_t v105 = a4;
  uint64_t v102 = a1;
  unint64_t v103 = a2;
  uint64_t v92 = a7;
  uint64_t v98 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v98);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1F4188790](v97);
  uint64_t v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v89 = (uint64_t)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v101 = (uint64_t)&v87 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v99 = (uint64_t)&v87 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v96 = (uint64_t)&v87 - v20;
  uint64_t v21 = type metadata accessor for SymmetricKey();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v94 = v21;
  uint64_t v95 = v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  char v87 = (char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v100 = (char *)&v87 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  long long v88 = (char *)&v87 - v28;
  MEMORY[0x1F4188790](v27);
  char v93 = (char *)&v87 - v29;
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  uint64_t v31 = MEMORY[0x1F4188790](ready);
  uint64_t v33 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)&v87 - v34;
  uint64_t v36 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1F4188790](v36 - 8);
  uint64_t v38 = (uint64_t *)((char *)&v87 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v39);
  uint64_t v41 = (char *)&v87 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v8;
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v8, (uint64_t)v41, type metadata accessor for HandshakeState);
  uint64_t v90 = v39;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    uint64_t v43 = type metadata accessor for HandshakeState;
    if (EnumCaseMultiPayload == 5)
    {
      outlined init with take of HandshakeState.IdleState((uint64_t)v41, (uint64_t)v38, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      uint64_t v44 = v108;
      uint64_t v45 = static HandshakeState.ReadyState.receivingServerFinished(originalState:serverFinished:serverFinishedBytes:serializer:)((uint64_t)v35, v38, v102, (unint64_t)v103, (uint64_t)v104, v105, v106, v107);
      uint64_t v48 = v99;
      uint64_t v49 = v96;
      if (v44) {
        return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v38, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      }
      unint64_t v105 = v47;
      unint64_t v106 = v46;
      unint64_t v107 = v45;
      uint64_t v108 = 0;
      specialized SessionKeyManager.clientApplicationTrafficSecret.getter(v96);
      uint64_t v58 = v94;
      uint64_t v59 = v95;
      int64x2_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
      int v61 = v60(v49, 1, v94);
      uint64_t v62 = v49;
      if (v61 != 1)
      {
        int64x2_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 32);
        v63(v93, v49, v58);
        specialized SessionKeyManager.serverApplicationTrafficSecret.getter(v48);
        if (v60(v48, 1, v58) != 1)
        {
          uint64_t v64 = v91;
          _s8SwiftTLS14HandshakeStateOWOhTm_1(v91, type metadata accessor for HandshakeState);
          _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v38, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
          uint64_t v65 = v88;
          v63(v88, v48, v58);
          outlined init with take of HandshakeState.IdleState((uint64_t)v35, v64, type metadata accessor for HandshakeState.ReadyState);
          swift_storeEnumTagMultiPayload();
          uint64_t v66 = type metadata accessor for PartialHandshakeResult(0);
          uint64_t v67 = v92;
          int64x2_t v68 = (char *)v92 + *(int *)(v66 + 20);
          int64x2_t v69 = &v68[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                            + 48)];
          v63(v68, (uint64_t)v93, v58);
          v63(v69, (uint64_t)v65, v58);
          uint64_t v70 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
          swift_storeEnumTagMultiPayload();
          uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v68, 0, 1, v70);
          unint64_t v71 = v106;
          *uint64_t v67 = v107;
          v67[1] = v71;
          v67[2] = v105;
          *(_OWORD *)((char *)v67 + *(int *)(v66 + 24)) = xmmword_1B577F270;
          return result;
        }
        (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v58);
        goto LABEL_18;
      }
LABEL_16:
      uint64_t v99 = v62;
LABEL_18:
      outlined destroy of HandshakeStateMachine?(v99, &demangling cache variable for type metadata for SymmetricKey?);
      __break(1u);
LABEL_19:
      uint64_t v89 = v101;
      goto LABEL_21;
    }
LABEL_15:
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v41, v43);
    __break(1u);
    goto LABEL_16;
  }
  _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)v41, (uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
  _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)&v12[*(int *)(v97 + 20)], (uint64_t)v10, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  int v51 = swift_getEnumCaseMultiPayload();
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v10, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (v51 != 1)
  {
    uint64_t v43 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    goto LABEL_15;
  }
  uint64_t v52 = v108;
  uint64_t v53 = static HandshakeState.ReadyState.receivingServerFinished(originalState:serverFinished:serverFinishedBytes:serializer:)((uint64_t)v33, (uint64_t)v12, v102, (unint64_t)v103, (int64_t)v104, v105, v106, v107);
  unint64_t v56 = v100;
  uint64_t v57 = v101;
  if (v52)
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v41, type metadata accessor for HandshakeState.EncryptedExtensionsState);
  }
  unint64_t v105 = v55;
  unint64_t v106 = v54;
  unint64_t v107 = v53;
  uint64_t v108 = 0;
  specialized SessionKeyManager.clientApplicationTrafficSecret.getter(v101);
  uint64_t v72 = v95;
  uint64_t v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
  uint64_t v74 = v57;
  uint64_t v75 = v94;
  if (v73(v74, 1, v94) == 1) {
    goto LABEL_19;
  }
  uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 32);
  v104(v56, v101, v75);
  uint64_t v76 = v89;
  specialized SessionKeyManager.serverApplicationTrafficSecret.getter(v89);
  if (v73(v76, 1, v75) != 1)
  {
    uint64_t v77 = v91;
    _s8SwiftTLS14HandshakeStateOWOhTm_1(v91, type metadata accessor for HandshakeState);
    unint64_t v103 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v12, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    int64x2_t v78 = v87;
    uint64_t v79 = v76;
    int64x2_t v80 = (void (*)(char *, char *, uint64_t))v104;
    v104(v87, v79, v75);
    outlined init with take of HandshakeState.IdleState((uint64_t)v33, v77, type metadata accessor for HandshakeState.ReadyState);
    swift_storeEnumTagMultiPayload();
    uint64_t v81 = type metadata accessor for PartialHandshakeResult(0);
    uint64_t v82 = v92;
    uint64_t v83 = (char *)v92 + *(int *)(v81 + 20);
    uint64_t v84 = &v83[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                      + 48)];
    v80(v83, v100, v75);
    v80(v84, v78, v75);
    uint64_t v85 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v83, 0, 1, v85);
    unint64_t v86 = v106;
    *uint64_t v82 = v107;
    v82[1] = v86;
    void v82[2] = v105;
    *(_OWORD *)((char *)v82 + *(int *)(v81 + 24)) = xmmword_1B577F270;
    return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v41, v103);
  }
  (*(void (**)(char *, uint64_t))(v95 + 8))(v100, v75);
LABEL_21:
  uint64_t result = outlined destroy of HandshakeStateMachine?(v89, &demangling cache variable for type metadata for SymmetricKey?);
  __break(1u);
  return result;
}

uint64_t HandshakeState.receivedNewSessionTicket(newSessionTicket:currentTime:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v57 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v59 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v58 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for SymmetricKey();
  uint64_t v11 = *(void *)(v64 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v64);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v54 - v15;
  uint64_t v17 = type metadata accessor for SessionTicket();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v63 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1F4188790](ready);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v66, (uint64_t)v24, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() < 6)
  {
    uint64_t result = _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v24, type metadata accessor for HandshakeState);
    __break(1u);
  }
  else
  {
    outlined init with take of HandshakeState.IdleState((uint64_t)v24, (uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    uint64_t v25 = v65;
    specialized SessionKeyManager.generateSessionTicketPSK(ticketNonce:)(a1[1], a1[2], a1[3], (unint64_t)v16);
    if (v25) {
      return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    }
    unint64_t v54 = v6;
    uint64_t v26 = v11;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    unint64_t v56 = v14;
    v27(v14, v16, v64);
    uint64_t v28 = *(int *)(ready + 28);
    uint64_t v29 = (uint64_t *)&v21[*(int *)(ready + 32)];
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    uint64_t v32 = v29[2];
    LODWORD(v65) = *((unsigned __int16 *)v21 + 39);
    int v55 = *((unsigned __int16 *)v21 + 38);
    uint64_t v66 = 0;
    uint64_t v33 = v58;
    _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)&v21[v28], v58, type metadata accessor for PeerCertificateBundle);
    uint64_t v34 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v62, v61);
    outlined retain of NewSessionTicket(a1);
    outlined copy of ByteBuffer?(v30, v31);
    uint64_t v35 = v66;
    SessionTicket.init(message:psk:cipherSuite:group:alpn:certificateBundle:currentTime:)((uint64_t)a1, (uint64_t)v56, v55, v65, v30, v31, v32, v33, v63, v34);
    if (v35)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v64);
      return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v64);
    uint64_t v37 = (uint64_t)v54;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)logger);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = v63;
    if (v41)
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_1B56C5000, v39, v40, "generated new session ticket", v43, 2u);
      uint64_t v44 = v43;
      uint64_t v37 = (uint64_t)v54;
      MEMORY[0x1BA99F280](v44, -1, -1);
    }

    uint64_t v45 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v37, 1, 1, v45);
    uint64_t v46 = SessionTicket.serialize()();
    uint64_t v48 = v47;
    _s8SwiftTLS14HandshakeStateOWOhTm_1(v42, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    uint64_t v49 = v57;
    *uint64_t v57 = xmmword_1B577F270;
    *((void *)v49 + 2) = 0;
    uint64_t v50 = type metadata accessor for PartialHandshakeResult(0);
    uint64_t v51 = v37;
    uint64_t v52 = v50;
    uint64_t result = outlined init with take of P256.Signing.PublicKey?(v51, (uint64_t)v49 + *(int *)(v50 + 20), &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    uint64_t v53 = (uint64_t *)((char *)v49 + *(int *)(v52 + 24));
    *uint64_t v53 = v46;
    v53[1] = v48;
  }
  return result;
}

uint64_t specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(uint64_t a1, Swift::Int a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E4FBC860]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000) {
    goto LABEL_17;
  }
  uint64_t v5 = v12;
  unint64_t v14 = *((void *)v12 + 2);
  unint64_t v13 = *((void *)v12 + 3);
  int64_t v15 = v13 >> 1;
  int64_t v6 = v14 + 1;
  if (v13 >> 1 <= v14)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
    unint64_t v13 = *((void *)v5 + 3);
    int64_t v15 = v13 >> 1;
  }
  *((void *)v5 + 2) = v6;
  v5[v14 + 32] = BYTE1(a5);
  int64_t v7 = v14 + 2;
  if (v15 < v7) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v7, 1, v5);
  }
  *((void *)v5 + 2) = v7;
  v5[v6 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v16 = String.UTF8View._foreignCount()();
    if ((v16 & 0x8000000000000000) != 0)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      unint64_t v16 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 >= 0x100) {
    goto LABEL_17;
  }
LABEL_13:
  LODWORD(v7) = v16 + 6;
  unint64_t v17 = v7 >> 8;
  if ((v7 & 0x100) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v8 = *((void *)v5 + 2);
  unint64_t v17 = *((void *)v5 + 3);
  int64_t v6 = v8 + 1;
  if (v8 >= v17 >> 1) {
LABEL_19:
  }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v6, 1, v5);
  *((void *)v5 + 2) = v6;
  v5[v8 + 32] = v7;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  Swift::Int v18 = specialized Array.append<A>(contentsOf:)(a2, a3);
  MEMORY[0x1F4188790](v18);
  type metadata accessor for SHA384Digest();
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  type metadata accessor for SHA384();
  type metadata accessor for SymmetricKey();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x1E4F25000]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

{
  unint64_t v5;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E4FBC860]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000) {
    goto LABEL_25;
  }
  uint64_t v11 = v10;
  unint64_t v13 = *((void *)v10 + 2);
  uint64_t v12 = *((void *)v10 + 3);
  unint64_t v14 = v12 >> 1;
  int64_t v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v10);
    uint64_t v12 = *((void *)v11 + 3);
    unint64_t v14 = v12 >> 1;
  }
  *((void *)v11 + 2) = v15;
  v11[v13 + 32] = BYTE1(a5);
  unint64_t v16 = v13 + 2;
  if (v14 < v16) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v16, 1, v11);
  }
  *((void *)v11 + 2) = v16;
  v11[v15 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v17 = String.UTF8View._foreignCount()();
    if ((v17 & 0x8000000000000000) != 0) {
      goto LABEL_25;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      unint64_t v17 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    unint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 >= 0x100) {
    goto LABEL_25;
  }
LABEL_13:
  Swift::Int v18 = v17;
  uint64_t v19 = v17 + 6;
  if (((v17 + 6) & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *((void *)v11 + 2);
    Swift::Int v18 = *((void *)v11 + 3);
    int64_t v15 = v5 + 1;
    if (v5 < v18 >> 1) {
      goto LABEL_15;
    }
  }
  uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v15, 1, v11);
LABEL_15:
  *((void *)v11 + 2) = v15;
  v11[v5 + 32] = v19;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(a2, a3);
  uint64_t v20 = *(void *)(a4 + 16);
  if (v20 >= 0x100)
  {
LABEL_25:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
  }
  uint64_t v22 = *((void *)v11 + 2);
  uint64_t v21 = *((void *)v11 + 3);
  if (v22 >= v21 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v11);
  }
  *((void *)v11 + 2) = v22 + 1;
  v11[v22 + 32] = v20;
  specialized Array.append<A>(contentsOf:)(a4 + 32, (char *)(a4 + 32 + v20));
  type metadata accessor for SHA384();
  type metadata accessor for SymmetricKey();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x1E4F25000]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

{
  char *v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;

  uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E4FBC860]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000) {
    goto LABEL_17;
  }
  uint64_t v5 = v12;
  unint64_t v14 = *((void *)v12 + 2);
  unint64_t v13 = *((void *)v12 + 3);
  int64_t v15 = v13 >> 1;
  int64_t v6 = v14 + 1;
  if (v13 >> 1 <= v14)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
    unint64_t v13 = *((void *)v5 + 3);
    int64_t v15 = v13 >> 1;
  }
  *((void *)v5 + 2) = v6;
  v5[v14 + 32] = BYTE1(a5);
  int64_t v7 = v14 + 2;
  if (v15 < v7) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v7, 1, v5);
  }
  *((void *)v5 + 2) = v7;
  v5[v6 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v16 = String.UTF8View._foreignCount()();
    if ((v16 & 0x8000000000000000) != 0)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      unint64_t v16 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 >= 0x100) {
    goto LABEL_17;
  }
LABEL_13:
  LODWORD(v7) = v16 + 6;
  unint64_t v17 = v7 >> 8;
  if ((v7 & 0x100) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v8 = *((void *)v5 + 2);
  unint64_t v17 = *((void *)v5 + 3);
  int64_t v6 = v8 + 1;
  if (v8 >= v17 >> 1) {
LABEL_19:
  }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v6, 1, v5);
  *((void *)v5 + 2) = v6;
  v5[v8 + 32] = v7;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  Swift::Int v18 = specialized Array.append<A>(contentsOf:)(a2, a3);
  MEMORY[0x1F4188790](v18);
  type metadata accessor for SHA384Digest();
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  type metadata accessor for SHA384();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)@<X0>(Swift::Int a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t a6@<X8>)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  int64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E4FBC860]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000) {
    goto LABEL_31;
  }
  int64_t v6 = v15;
  unint64_t v17 = *((void *)v15 + 2);
  unint64_t v16 = *((void *)v15 + 3);
  int64_t v18 = v16 >> 1;
  int64_t v7 = v17 + 1;
  if (v16 >> 1 <= v17)
  {
    int64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v15);
    unint64_t v16 = *((void *)v6 + 3);
    int64_t v18 = v16 >> 1;
  }
  *((void *)v6 + 2) = v7;
  v6[v17 + 32] = BYTE1(a5);
  int64_t v8 = v17 + 2;
  if (v18 < v8) {
    int64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v8, 1, v6);
  }
  *((void *)v6 + 2) = v8;
  v6[v7 + 32] = a5;
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = String.UTF8View._foreignCount()();
    if ((v19 & 0x8000000000000000) != 0)
    {
LABEL_31:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_32;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v19 = HIBYTE(a2) & 0xF;
      goto LABEL_13;
    }
    unint64_t v19 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v19 >= 0x100) {
    goto LABEL_31;
  }
LABEL_13:
  unint64_t v20 = v19;
  LOBYTE(v8) = v19 + 6;
  if (((v19 + 6) & 0x100) == 0)
  {
    a6 = *((void *)v6 + 2);
    unint64_t v20 = *((void *)v6 + 3);
    int64_t v7 = a6 + 1;
    if (a6 < v20 >> 1) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  int64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v7, 1, v6);
LABEL_15:
  *((void *)v6 + 2) = v7;
  v6[a6 + 32] = v8;
  uint64_t v34 = v6;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(a1, a2);
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, &v34);
      outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v27 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v28 = *(void *)(a3 + 16);
      uint64_t v29 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v28, v29, v27, &v34);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v35, 0, 14);
      uint64_t v30 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34);
      }
      unint64_t v32 = *((void *)v30 + 2);
      unint64_t v31 = *((void *)v30 + 3);
      if (v32 >= v31 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
      }
      *((void *)v30 + 2) = v32 + 1;
      v30[v32 + 32] = 0;
      uint64_t v34 = v30;
      specialized Array.append<A>(contentsOf:)((uint64_t)v35, (char *)v35);
      break;
    default:
      v35[0] = a3;
      LOWORD(v35[1]) = a4;
      unint64_t v21 = HIDWORD(a4);
      BYTE2(v35[1]) = BYTE2(a4);
      BYTE3(v35[1]) = BYTE3(a4);
      unint64_t v22 = a4 >> 40;
      unint64_t v23 = HIWORD(a4);
      BYTE4(v35[1]) = v21;
      BYTE5(v35[1]) = v22;
      uint64_t v24 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34);
      }
      unint64_t v26 = *((void *)v24 + 2);
      unint64_t v25 = *((void *)v24 + 3);
      if (v26 >= v25 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v24);
      }
      *((void *)v24 + 2) = v26 + 1;
      v24[v26 + 32] = v23;
      uint64_t v34 = v24;
      specialized Array.append<A>(contentsOf:)((uint64_t)v35, (char *)v35 + v23);
      break;
  }
  v35[0] = v34;
  type metadata accessor for SHA384();
  type metadata accessor for SymmetricKey();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x1E4F25000]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in static HKDF.extract(inputKeyMaterial:salt:)()
{
  return static HKDF.extract<A>(inputKeyMaterial:salt:)();
}

uint64_t static HandshakeState.ClientHelloState.sendingClientHello(originalState:clientHello:sessionToResume:diffieHellmanKey:currentTime:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = a6;
  uint64_t v61 = a5;
  uint64_t v64 = (char *)a4;
  uint64_t v62 = a1;
  uint64_t v65 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1F4188790](v65);
  uint64_t v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v77 = (uint64_t)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v63 = (uint64_t)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  unint64_t v22 = (char *)v43 - v21;
  uint64_t v23 = type metadata accessor for HandshakeState.IdleState(0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)a2 + *(int *)(v23 + 24), (uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v22, (uint64_t)v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (swift_getEnumCaseMultiPayload() >= 4)
  {
    uint64_t v60 = specialized static SessionKeyManager.State.EarlySecret.create(clientHello:sessionToResume:currentTime:)((uint64_t)v14, a3, (uint64_t)v64, v60);
    uint64_t v59 = v26;
    uint64_t v58 = v27;
    outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v14, (uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = a2[1];
    uint64_t v57 = *a2;
    v43[1] = v28;
    uint64_t v30 = a2[3];
    uint64_t v44 = a2[2];
    uint64_t v29 = v44;
    unint64_t v31 = a2[4];
    uint64_t v51 = a2[5];
    uint64_t v53 = a2[6];
    uint64_t v32 = a2[8];
    unint64_t v52 = a2[7];
    int v56 = *((unsigned __int16 *)a2 + 36);
    int v55 = *((unsigned __int8 *)a2 + 74);
    int v54 = *((unsigned __int8 *)a2 + 75);
    uint64_t v33 = *(void *)(a3 + 40);
    uint64_t v50 = *(void *)(a3 + 48);
    uint64_t v34 = *(void *)(a3 + 64);
    uint64_t v49 = *(void *)(a3 + 56);
    uint64_t v48 = v34;
    uint64_t v47 = *(void *)(a3 + 72);
    uint64_t v35 = *(void *)(a3 + 96);
    __int16 v67 = *(_WORD *)a3;
    long long v68 = *(_OWORD *)(a3 + 8);
    long long v69 = *(_OWORD *)(a3 + 24);
    uint64_t v70 = v33;
    uint64_t v71 = v50;
    uint64_t v72 = v49;
    uint64_t v73 = v34;
    uint64_t v74 = v47;
    long long v46 = *(_OWORD *)(a3 + 80);
    long long v75 = v46;
    uint64_t v76 = v35;
    uint64_t v45 = specialized ClientHello.serverCertificateTypes.getter();
    outlined init with copy of SwiftTLSClock(v61, (uint64_t)v66);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v22, v63, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v64, v77, &demangling cache variable for type metadata for SessionTicket?);
    uint64_t v64 = &v9[*(int *)(v65 + 40)];
    uint64_t v36 = (uint64_t)v64;
    uint64_t v37 = type metadata accessor for SessionTicket();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
    *(void *)uint64_t v9 = v57;
    *((void *)v9 + 1) = v28;
    *((void *)v9 + 2) = v29;
    *((void *)v9 + 3) = v30;
    uint64_t v38 = v51;
    *((void *)v9 + 4) = v31;
    *((void *)v9 + 5) = v38;
    uint64_t v39 = v53;
    unint64_t v40 = v52;
    *((void *)v9 + 6) = v53;
    *((void *)v9 + 7) = v40;
    *((void *)v9 + 8) = v32;
    *((_WORD *)v9 + 36) = v56;
    v9[74] = v55;
    v9[75] = v54;
    uint64_t v41 = v50;
    *((void *)v9 + 10) = v33;
    *((void *)v9 + 11) = v41;
    uint64_t v42 = v48;
    *((void *)v9 + 12) = v49;
    *((void *)v9 + 13) = v42;
    *((void *)v9 + 14) = v47;
    uint64_t v61 = v46;
    *((void *)v9 + 15) = v46;
    *((void *)v9 + 16) = v45;
    outlined init with take of ContiguousBytes(v66, (uint64_t)(v9 + 136));
    outlined init with take of P256.Signing.PublicKey?(v63, (uint64_t)&v9[*(int *)(v65 + 36)], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ByteBuffer?(v30, v31);
    outlined copy of ByteBuffer?(v39, v40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined assign with take of HandshakeStateMachine?(v77, (uint64_t)v64, &demangling cache variable for type metadata for SessionTicket?);
    outlined init with take of HandshakeState.IdleState((uint64_t)v9, v62, type metadata accessor for HandshakeState.ClientHelloState);
    outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    return v60;
  }
  else
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v24 = 2;
    *(unsigned char *)(v24 + 4) = 1;
    swift_willThrow();
    return outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  }
}

uint64_t _s8SwiftTLS14HandshakeStateOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized SessionKeyManager.clientEarlyTrafficSecret.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  MEMORY[0x1F4188790](v4);
  int64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 3)
  {
    if (!EnumCaseMultiPayload)
    {
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v11 = &v6[*(int *)(v4 + 44)];
      uint64_t v12 = type metadata accessor for SymmetricKey();
      uint64_t v13 = *(void *)(v12 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, v11, v12);
      outlined destroy of HandshakeStateMachine?((uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
  }
  else
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  }
  uint64_t v15 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 1, 1, v15);
}

uint64_t type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.EncryptedExtensionsState.SessionData);
}

uint64_t type metadata accessor for HandshakeState.EncryptedExtensionsState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.EncryptedExtensionsState);
}

uint64_t _s8SwiftTLS14HandshakeStateOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for HandshakeState.ReadyState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerHelloState.init(originalState:serverHello:serverHelloBytes:clock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v222 = a6;
  uint64_t v208 = a5;
  uint64_t v223 = a3;
  unint64_t v224 = a4;
  uint64_t v225 = (uint64_t *)a1;
  uint64_t v217 = a7;
  uint64_t v210 = type metadata accessor for SymmetricKey();
  uint64_t v209 = *(void *)(v210 - 8);
  MEMORY[0x1F4188790](v210);
  uint64_t v212 = (char *)&v190 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1F4188790](v218);
  uint64_t v211 = (uint64_t)&v190 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SharedSecret();
  uint64_t v213 = *(void *)(v10 - 8);
  uint64_t v214 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v207 = (char *)&v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v216 = (char *)&v190 - v13;
  uint64_t v221 = type metadata accessor for SessionTicket();
  uint64_t v14 = *(void *)(v221 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v221);
  uint64_t v204 = (uint64_t)&v190 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v190 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v190 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v205 = (uint64_t)&v190 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v206 = (uint64_t)&v190 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v190 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v32 = (char *)&v190 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v219 = (uint64_t)&v190 - v33;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v220 = v21;
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)logger);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_1B56C5000, v35, v36, "validating server hello", v37, 2u);
    MEMORY[0x1BA99F280](v37, -1, -1);
  }

  int64x2_t v38 = *(int64x2_t *)(a2 + 24);
  int64x2_t v39 = *(int64x2_t *)(a2 + 8);
  if (one-time initialization token for helloRetryRequest != -1)
  {
    long long v203 = *(_OWORD *)(a2 + 8);
    int64x2_t v202 = v38;
    swift_once();
    int64x2_t v38 = v202;
    int64x2_t v39 = (int64x2_t)v203;
  }
  if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v39, (int64x2_t)static Random.helloRetryRequest), (int32x4_t)vceqq_s64(v38, *(int64x2_t *)&qword_1EB79AD30))), 0xFuLL))))goto LABEL_10; {
  if (*(void *)(a2 + 40) != v225[10])
  }
    goto LABEL_10;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a2 + 48), *(int64x2_t *)(v225 + 11)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a2 + 64), *(int64x2_t *)(v225 + 13)))), 0xFuLL))) & 1) == 0)goto LABEL_10; {
  if (*(unsigned char *)a2 != 3)
  }
    goto LABEL_10;
  if (*(unsigned char *)(a2 + 1) != 3) {
    goto LABEL_10;
  }
  if (*(unsigned char *)(a2 + 82)) {
    goto LABEL_10;
  }
  uint64_t v46 = *(void *)(a2 + 88);
  uint64_t v47 = *(void *)(v46 + 16);
  if (!v47) {
    goto LABEL_10;
  }
  uint64_t v48 = (unsigned char *)(v46 + 64);
  uint64_t v49 = *(void *)(v46 + 16);
  while (1)
  {
    unint64_t v50 = *((void *)v48 - 3);
    if (*v48 == 2 && (*((void *)v48 - 3) & 1) != 0) {
      break;
    }
    v48 += 40;
    if (!--v49) {
      goto LABEL_10;
    }
  }
  unint64_t v52 = *((void *)v48 - 2);
  uint64_t v53 = *((void *)v48 - 1);
  if ((unsigned __int16)*((void *)v48 - 4) != 1027)
  {
    outlined copy of Extension(*((void *)v48 - 4), v50, v52, v53, 2);
LABEL_10:
    outlined release of ServerHello(a2);
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_1B56C5000, v40, v41, "server hello invalid for QUIC", v42, 2u);
      MEMORY[0x1BA99F280](v42, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v43 = 5;
    *(unsigned char *)(v43 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(v223, v224);
    uint64_t v44 = v222;
    goto LABEL_13;
  }
  unint64_t v201 = *((void *)v48 - 4);
  v202.i64[0] = v52;
  *(void *)&long long v203 = v53;
  uint64_t v54 = v225[15];
  uint64_t v55 = *(unsigned __int16 *)(a2 + 80);
  int v195 = *(unsigned __int16 *)(a2 + 80);
  if (!specialized Sequence<>.contains(_:)(v55, v54))
  {
    int v75 = v195;
    outlined copy of Extension(v201, v50, v202.u64[0], v203, 2);
    outlined retain of ServerHello(a2);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      int64x2_t v78 = (uint8_t *)swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      uint64_t v232 = v79;
      *(_DWORD *)int64x2_t v78 = 136446210;
      if (v75 == 4866)
      {
        uint64_t v80 = 0xD000000000000016;
        unint64_t v81 = 0x80000001B5782C30;
      }
      else
      {
        uint64_t v227 = 30768;
        unint64_t v228 = 0xE200000000000000;
        LOWORD(v231[0]) = v75;
        lazy protocol witness table accessor for type UInt16 and conformance UInt16();
        v99._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v99);
        swift_bridgeObjectRelease();
        uint64_t v80 = v227;
        unint64_t v81 = v228;
      }
      uint64_t v227 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v232);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ServerHello(a2);
      outlined release of ServerHello(a2);
      _os_log_impl(&dword_1B56C5000, v76, v77, "server hello chose a cipher suite we didn't offer (%{public}s)", v78, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA99F280](v79, -1, -1);
      MEMORY[0x1BA99F280](v78, -1, -1);
    }
    else
    {
      outlined release of ServerHello(a2);
      outlined release of ServerHello(a2);
    }

    uint64_t v100 = v222;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v101 = 6;
    *(unsigned char *)(v101 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(v223, v224);
    uint64_t v44 = v100;
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1(v44);
    return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v225, type metadata accessor for HandshakeState.ClientHelloState);
  }
  uint64_t v191 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
  *(_WORD *)((char *)v217 + v191[7]) = v195;
  uint64_t v192 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v192(v219, 1, 1, v221);
  uint64_t v232 = MEMORY[0x1E4FBC870];
  outlined copy of Extension(v201, v50, v202.u64[0], v203, 2);
  uint64_t v199 = 0;
  uint64_t v198 = 0;
  uint64_t v196 = 0;
  uint64_t v193 = v14 + 56;
  uint64_t v194 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v56 = (unsigned __int8 *)(v46 + 64);
  unint64_t v197 = 0xF000000000000000;
  while (1)
  {
    uint64_t v59 = *((void *)v56 - 4);
    unint64_t v60 = *((void *)v56 - 3);
    *(void *)&long long v203 = *((void *)v56 - 2);
    uint64_t v200 = *((void *)v56 - 1);
    int v62 = *v56;
    v56 += 40;
    int v61 = v62;
    Swift::Int v63 = 42;
    v202.i64[0] = v59;
    switch(v62)
    {
      case 1:
        swift_bridgeObjectRetain();
        Swift::Int v63 = 10;
        break;
      case 2:
        outlined copy of Extension.ServerCertificateType(v59, v60 & 1);
        Swift::Int v63 = 43;
        break;
      case 3:
      case 9:
        outlined copy of Data._Representation(v59, v60);
        Swift::Int v63 = 16;
        break;
      case 4:
        outlined copy of Extension.KeyShare(v59, v60, v203);
        Swift::Int v63 = 51;
        break;
      case 5:
        break;
      case 6:
        swift_bridgeObjectRetain();
        Swift::Int v63 = 13;
        break;
      case 7:
        outlined copy of Extension.ServerCertificateType(v59, v60 & 1);
        Swift::Int v63 = 20;
        break;
      case 8:
        outlined copy of Data._Representation(v59, v60);
        Swift::Int v63 = 57;
        break;
      case 10:
        swift_bridgeObjectRetain();
        Swift::Int v63 = 45;
        break;
      case 11:
        outlined copy of Extension.PreSharedKey(v59, v60, v203 & 1);
        Swift::Int v63 = 41;
        break;
      case 12:
        Swift::Int v63 = 58;
        break;
      case 13:
        outlined copy of Data._Representation(v60, v203);
        Swift::Int v63 = v202.i64[0];
        break;
      default:
        outlined copy of ByteBuffer?(v59, v60);
        Swift::Int v63 = 0;
        break;
    }
    unint64_t v201 = v60;
    if ((specialized Set._Variant.insert(_:)(&v227, v63) & 1) == 0)
    {
      outlined release of ServerHello(a2);
      swift_bridgeObjectRelease();
      uint64_t v82 = v202.i64[0];
      unint64_t v83 = v201;
      int v84 = v61;
      unint64_t v85 = v203;
      uint64_t v86 = v200;
      outlined copy of Extension(v202.i64[0], v201, v203, v200, v84);
      outlined copy of Extension(v82, v83, v85, v86, v84);
      char v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        uint64_t v227 = v90;
        *(_DWORD *)uint64_t v89 = 136446210;
        unsigned __int16 v91 = 0;
        switch(v84)
        {
          case 0:
            break;
          case 1:
            unsigned __int16 v91 = 10;
            break;
          case 2:
            unsigned __int16 v91 = 43;
            break;
          case 3:
          case 9:
            unsigned __int16 v91 = 16;
            break;
          case 4:
            unsigned __int16 v91 = 51;
            break;
          case 5:
            unsigned __int16 v91 = 42;
            break;
          case 6:
            unsigned __int16 v91 = 13;
            break;
          case 7:
            unsigned __int16 v91 = 20;
            break;
          case 8:
            unsigned __int16 v91 = 57;
            break;
          case 10:
            unsigned __int16 v91 = 45;
            break;
          case 11:
            unsigned __int16 v91 = 41;
            break;
          case 12:
            unsigned __int16 v91 = 58;
            break;
          case 13:
            unsigned __int16 v91 = v202.i16[0];
            break;
          default:
            JUMPOUT(0);
        }
        uint64_t v159 = ExtensionType.description.getter(v91);
        v231[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v160, &v227);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v82 = v202.i64[0];
        unint64_t v103 = v201;
        unint64_t v85 = v203;
        outlined consume of Extension(v202.i64[0], v201, v203, v86, v84);
        outlined consume of Extension(v82, v103, v85, v86, v84);
        _os_log_impl(&dword_1B56C5000, v87, v88, "server offered duplicate extension of type %{public}s on server hello", v89, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA99F280](v90, -1, -1);
        MEMORY[0x1BA99F280](v89, -1, -1);

        unint64_t v102 = v197;
      }
      else
      {
        outlined consume of Extension(v82, v83, v85, v86, v84);
        outlined consume of Extension(v82, v83, v85, v86, v84);

        unint64_t v102 = v197;
        unint64_t v103 = v83;
      }
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v161 = 5;
      *(unsigned char *)(v161 + 4) = 1;
      swift_willThrow();
      outlined consume of Data._Representation(v223, v224);
      outlined consume of Extension(v82, v103, v85, v86, v84);
      uint64_t v123 = v199;
      uint64_t v124 = v198;
LABEL_120:
      unint64_t v125 = v102;
LABEL_121:
      outlined consume of Extension.KeyShare.KeyShareEntry?(v123, v124, v125);
      uint64_t v114 = v222;
LABEL_122:
      __swift_destroy_boxed_opaque_existential_1(v114);
      goto LABEL_123;
    }
    if (v61 != 4) {
      break;
    }
    unint64_t v64 = v203;
    if ((v203 & 0x3000000000000000) == 0x1000000000000000)
    {
      unint64_t v66 = v201;
      unint64_t v67 = v203 & 0xCFFFFFFFFFFFFFFFLL;
      outlined consume of Extension.KeyShare.KeyShareEntry?(v199, v198, v197);
      uint64_t v199 = v202.u16[0];
      uint64_t v198 = v66;
      unint64_t v197 = v67;
      uint64_t v196 = v200;
      goto LABEL_32;
    }
    uint64_t v65 = v202.i64[0];
    uint64_t v57 = v200;
    char v58 = 4;
LABEL_31:
    outlined consume of Extension(v65, v201, v64, v57, v58);
LABEL_32:
    if (!--v47)
    {
      outlined release of ServerHello(a2);
      unint64_t v92 = v197;
      uint64_t v93 = v196;
      uint64_t v94 = v199;
      if (v197 >> 60 != 15)
      {
        if ((unsigned __int16)v199 == 24)
        {
          if ((*((unsigned char *)v225 + 75) & 1) == 0) {
            goto LABEL_72;
          }
        }
        else if ((unsigned __int16)v199 == 29 && *((unsigned char *)v225 + 75))
        {
LABEL_72:
          unint64_t v95 = v197 >> 62;
          outlined copy of Data._Representation(v198, v197);
          uint64_t v96 = Logger.logObject.getter();
          os_log_type_t v97 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v98 = 0;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B56C5000, v96, v97, "valid TLS1.3 server hello, constructing shared secret.", v98, 2u);
            MEMORY[0x1BA99F280](v98, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease();
          }
          uint64_t v137 = v225[20];
          uint64_t v136 = v225[21];
          uint64_t v220 = __swift_project_boxed_opaque_existential_1(v225 + 17, v137);
          uint64_t v138 = v95;
          uint64_t v139 = 0;
          unint64_t v140 = v197;
          switch(v138)
          {
            case 1:
              uint64_t v142 = v198;
              uint64_t v139 = v198 >> 32;
              goto LABEL_101;
            case 2:
              uint64_t v142 = v198;
              uint64_t v139 = *(void *)(v198 + 24);
LABEL_101:
              outlined copy of Data._Representation(v142, v197);
              break;
            case 3:
              break;
            default:
              uint64_t v139 = BYTE6(v197);
              break;
          }
          if (v139 < v196)
          {
            __break(1u);
            JUMPOUT(0x1B5731B7CLL);
          }
          uint64_t v143 = v198;
          uint64_t v144 = Data._Representation.subscript.getter();
          unint64_t v145 = v140;
          uint64_t v146 = v144;
          unint64_t v148 = v147;
          uint64_t v149 = v199;
          outlined consume of Extension.KeyShare.KeyShareEntry?(v199, v143, v145);
          unint64_t v150 = v215;
          (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v136 + 24))(v146, v148, v137, v136);
          if (!v150)
          {
            outlined consume of Data._Representation(v146, v148);
            uint64_t v154 = v191[8];
            *(_WORD *)((char *)v217 + v154) = v149;
            outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v219, (uint64_t)v29, &demangling cache variable for type metadata for SessionTicket?);
            uint64_t v155 = *v194;
            if ((*v194)(v29, 1, v221) == 1)
            {
              outlined destroy of HandshakeStateMachine?((uint64_t)v29, &demangling cache variable for type metadata for SessionTicket?);
              uint64_t v156 = (char *)v217 + v191[5];
              __int16 v157 = *(_WORD *)((char *)v217 + v154);
              uint64_t v158 = v225[16];
              *(_WORD *)uint64_t v156 = v195;
              *((_WORD *)v156 + 1) = v157;
              *((void *)v156 + 1) = v158;
              type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
              swift_storeEnumTagMultiPayload();
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v162 = v204;
              outlined init with take of HandshakeState.IdleState((uint64_t)v29, v204, (uint64_t (*)(void))type metadata accessor for SessionTicket);
              outlined init with take of HandshakeState.IdleState(v162, (uint64_t)v217 + v191[5], (uint64_t (*)(void))type metadata accessor for SessionTicket);
              type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
              swift_storeEnumTagMultiPayload();
            }
            uint64_t v163 = v206;
            outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v219, v206, &demangling cache variable for type metadata for SessionTicket?);
            unsigned int v164 = v155((char *)v163, 1, v221);
            outlined destroy of HandshakeStateMachine?(v163, &demangling cache variable for type metadata for SessionTicket?);
            _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)v225, v211, type metadata accessor for HandshakeState.ClientHelloState);
            if (v164 == 1)
            {
              uint64_t v165 = v211;
              uint64_t v166 = v205;
              outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v211 + *(int *)(v218 + 40), v205, &demangling cache variable for type metadata for SessionTicket?);
              _s8SwiftTLS14HandshakeStateOWOhTm_1(v165, type metadata accessor for HandshakeState.ClientHelloState);
              LODWORD(v221) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v155)(v166, 1, v221) != 1;
              outlined destroy of HandshakeStateMachine?(v166, &demangling cache variable for type metadata for SessionTicket?);
            }
            else
            {
              _s8SwiftTLS14HandshakeStateOWOhTm_1(v211, type metadata accessor for HandshakeState.ClientHelloState);
              LODWORD(v221) = 0;
            }
            uint64_t v167 = (uint64_t)v225;
            uint64_t v168 = *v225;
            uint64_t v169 = v225[1];
            uint64_t v171 = v225[2];
            uint64_t v206 = v225[3];
            uint64_t v170 = v206;
            unint64_t v172 = v225[4];
            uint64_t v173 = v225[5];
            unint64_t v175 = v225[7];
            uint64_t v220 = (void *)v225[6];
            uint64_t v174 = v220;
            unint64_t v215 = v175;
            uint64_t v211 = v225[8];
            uint64_t v176 = v211;
            __int16 v177 = *((_WORD *)v225 + 36);
            char v178 = *((unsigned char *)v225 + 74);
            char v179 = *((unsigned char *)v225 + 75);
            uint64_t v180 = v217;
            *uint64_t v217 = v168;
            v180[1] = v169;
            v180[2] = v171;
            v180[3] = v170;
            v180[4] = v172;
            v180[5] = v173;
            v180[6] = v174;
            v180[7] = v175;
            v180[8] = v176;
            *((_WORD *)v180 + 36) = v177;
            *((unsigned char *)v180 + 74) = v178;
            *((unsigned char *)v180 + 75) = v179;
            uint64_t v181 = (uint64_t)v180 + v191[6];
            outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v167 + *(int *)(v218 + 36), v181, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
            (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v207, v216, v214);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of ByteBuffer?(v206, v172);
            outlined copy of ByteBuffer?((uint64_t)v220, v215);
            lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SharedSecret and conformance SharedSecret, MEMORY[0x1E4F24FE8]);
            uint64_t v182 = (uint64_t)v212;
            SymmetricKey.init<A>(data:)();
            int v183 = v221;
            uint64_t v221 = v181;
            specialized SessionKeyManager.postServerHello(ecdheSecret:serverHelloBytes:resumptionFailed:)(v182, v223, v224, v208, v183);
            (*(void (**)(char *, uint64_t))(v209 + 8))(v212, v210);
            uint64_t v184 = Logger.logObject.getter();
            os_log_type_t v185 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v184, v185))
            {
              uint64_t v186 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v186 = 0;
              _os_log_impl(&dword_1B56C5000, v184, v185, "server hello valid", v186, 2u);
              MEMORY[0x1BA99F280](v186, -1, -1);
            }
            outlined consume of Data._Representation(v223, v224);

            uint64_t v187 = v199;
            uint64_t v188 = v198;
            unint64_t v189 = v197;
            outlined consume of Extension.KeyShare.KeyShareEntry?(v199, v198, v197);
            outlined consume of Extension.KeyShare.KeyShareEntry?(v187, v188, v189);
            __swift_destroy_boxed_opaque_existential_1(v222);
            (*(void (**)(char *, uint64_t))(v213 + 8))(v216, v214);
            goto LABEL_123;
          }
          outlined consume of Data._Representation(v146, v148);
          outlined consume of Data._Representation(v223, v224);
          uint64_t v151 = v149;
          uint64_t v152 = v149;
          uint64_t v153 = v198;
          unint64_t v102 = v197;
          outlined consume of Extension.KeyShare.KeyShareEntry?(v151, v198, v197);
          uint64_t v123 = v152;
          uint64_t v124 = v153;
          goto LABEL_120;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v104 = v198;
      outlined copy of Extension.KeyShare.KeyShareEntry?(v94, v198, v92);
      outlined copy of Extension.KeyShare.KeyShareEntry?(v94, v104, v92);
      unint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v105, v106))
      {
        unint64_t v107 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        *(_DWORD *)unint64_t v107 = 136446210;
        uint64_t v230 = v93;
        v231[0] = v108;
        uint64_t v227 = v199;
        unint64_t v228 = v104;
        unint64_t v229 = v92;
        outlined copy of Extension.KeyShare.KeyShareEntry?(v199, v104, v92);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Extension.KeyShare.KeyShareEntry?);
        uint64_t v109 = String.init<A>(describing:)();
        uint64_t v227 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, v231);
        unint64_t v92 = v197;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v104 = v198;
        swift_bridgeObjectRelease();
        outlined consume of Extension.KeyShare.KeyShareEntry?(v199, v104, v92);
        outlined consume of Extension.KeyShare.KeyShareEntry?(v199, v104, v92);
        _os_log_impl(&dword_1B56C5000, v105, v106, "unsupported server key share, expected secp384 or x25519 got %{public}s", v107, 0xCu);
        swift_arrayDestroy();
        uint64_t v111 = v108;
        uint64_t v94 = v199;
        MEMORY[0x1BA99F280](v111, -1, -1);
        MEMORY[0x1BA99F280](v107, -1, -1);
      }
      else
      {
        outlined consume of Extension.KeyShare.KeyShareEntry?(v94, v104, v92);
        outlined consume of Extension.KeyShare.KeyShareEntry?(v94, v104, v92);
      }

      uint64_t v112 = v222;
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v113 = 6;
      *(unsigned char *)(v113 + 4) = 1;
      swift_willThrow();
      outlined consume of Data._Representation(v223, v224);
      outlined consume of Extension.KeyShare.KeyShareEntry?(v94, v104, v92);
      uint64_t v114 = v112;
      goto LABEL_122;
    }
  }
  unint64_t v64 = v203;
  uint64_t v65 = v202.i64[0];
  if (v61 != 11)
  {
    uint64_t v57 = v200;
    char v58 = v61;
    goto LABEL_31;
  }
  if ((v203 & 1) == 0)
  {
    uint64_t v57 = v200;
    char v58 = 11;
    goto LABEL_31;
  }
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v225 + *(int *)(v218 + 40), (uint64_t)v32, &demangling cache variable for type metadata for SessionTicket?);
  if ((*v194)(v32, 1, v221) == 1)
  {
    outlined release of ServerHello(a2);
    swift_bridgeObjectRelease();
    outlined destroy of HandshakeStateMachine?((uint64_t)v32, &demangling cache variable for type metadata for SessionTicket?);
LABEL_85:
    uint64_t v115 = v198;
    uint64_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.error.getter();
    BOOL v118 = os_log_type_enabled(v116, v117);
    unint64_t v119 = v197;
    uint64_t v120 = v200;
    if (v118)
    {
      uint64_t v121 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v121 = 0;
      _os_log_impl(&dword_1B56C5000, v116, v117, "server hello is trying to resume a session we didnt offer", v121, 2u);
      MEMORY[0x1BA99F280](v121, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v122 = 6;
    *(unsigned char *)(v122 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(v223, v224);
    outlined consume of Extension(v202.i64[0], v201, v203, v120, 11);
    uint64_t v123 = v199;
    uint64_t v124 = v115;
    unint64_t v125 = v119;
    goto LABEL_121;
  }
  long long v68 = v220;
  outlined init with take of HandshakeState.IdleState((uint64_t)v32, (uint64_t)v220, (uint64_t (*)(void))type metadata accessor for SessionTicket);
  if (v202.i16[0])
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    outlined release of ServerHello(a2);
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  if (v195 == *(unsigned __int16 *)((char *)v68 + *(int *)(v221 + 44)))
  {
    long long v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      os_log_type_t v72 = v70;
      uint64_t v73 = v71;
      _os_log_impl(&dword_1B56C5000, v69, v72, "resuming session", v71, 2u);
      MEMORY[0x1BA99F280](v73, -1, -1);
    }

    outlined consume of Extension(v202.i64[0], v201, v203, v200, 11);
    uint64_t v74 = v219;
    outlined destroy of HandshakeStateMachine?(v219, &demangling cache variable for type metadata for SessionTicket?);
    outlined init with take of HandshakeState.IdleState((uint64_t)v220, v74, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    v192(v74, 0, 1, v221);
    goto LABEL_32;
  }
  outlined release of ServerHello(a2);
  swift_bridgeObjectRelease();
  _s8SwiftTLS14HandshakeStateOWOcTm_0((uint64_t)v220, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SessionTicket);
  uint64_t v126 = Logger.logObject.getter();
  os_log_type_t v127 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v126, v127))
  {
    uint64_t v218 = 0xD000000000000016;
    uint64_t v128 = swift_slowAlloc();
    uint64_t v129 = swift_slowAlloc();
    v231[0] = v129;
    *(_DWORD *)uint64_t v128 = 136315394;
    unint64_t v130 = 0x80000001B5782C30;
    uint64_t v131 = 0xD000000000000016;
    unint64_t v132 = 0x80000001B5782C30;
    if (v195 != 4866)
    {
      uint64_t v227 = 30768;
      unint64_t v228 = 0xE200000000000000;
      __int16 v226 = v195;
      lazy protocol witness table accessor for type UInt16 and conformance UInt16();
      v133._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v133);
      swift_bridgeObjectRelease();
      uint64_t v131 = v227;
      unint64_t v132 = v228;
    }
    uint64_t v227 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v128 + 12) = 2080;
    int v134 = *(unsigned __int16 *)&v19[*(int *)(v221 + 44)];
    if (v134 != 4866)
    {
      uint64_t v227 = 30768;
      unint64_t v228 = 0xE200000000000000;
      __int16 v226 = v134;
      lazy protocol witness table accessor for type UInt16 and conformance UInt16();
      v135._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v135);
      swift_bridgeObjectRelease();
      unint64_t v130 = v228;
      uint64_t v218 = v227;
    }
    uint64_t v227 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v218, v130, v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    _os_log_impl(&dword_1B56C5000, v126, v127, "server negotiated cipher suite %s, expected %s", (uint8_t *)v128, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA99F280](v129, -1, -1);
    MEMORY[0x1BA99F280](v128, -1, -1);
  }
  else
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SessionTicket);
  }

  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  *(_DWORD *)uint64_t v141 = 6;
  *(unsigned char *)(v141 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(v223, v224);
  outlined consume of Extension(v202.i64[0], v201, v203, v200, 11);
  outlined consume of Extension.KeyShare.KeyShareEntry?(v199, v198, v197);
  __swift_destroy_boxed_opaque_existential_1(v222);
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v220, (uint64_t (*)(void))type metadata accessor for SessionTicket);
LABEL_123:
  outlined destroy of HandshakeStateMachine?(v219, &demangling cache variable for type metadata for SessionTicket?);
  return _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v225, type metadata accessor for HandshakeState.ClientHelloState);
}

uint64_t specialized SessionKeyManager.clientHandshakeTrafficSecret.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1F4188790](v4);
  int64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2, (uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v20 = &v9[*(int *)(v7 + 40)];
      uint64_t v16 = type metadata accessor for SymmetricKey();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v20, v16);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret;
      goto LABEL_6;
    case 2u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v15 = &v6[*(int *)(v4 + 40)];
      uint64_t v16 = type metadata accessor for SymmetricKey();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v15, v16);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret;
LABEL_6:
      outlined destroy of HandshakeStateMachine?(v18, v19);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      uint64_t v13 = type metadata accessor for SymmetricKey();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t specialized SessionKeyManager.serverHandshakeTrafficSecret.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1F4188790](v4);
  int64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2, (uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v20 = &v9[*(int *)(v7 + 44)];
      uint64_t v16 = type metadata accessor for SymmetricKey();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v20, v16);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret;
      goto LABEL_6;
    case 2u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v15 = &v6[*(int *)(v4 + 44)];
      uint64_t v16 = type metadata accessor for SymmetricKey();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v15, v16);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret;
LABEL_6:
      outlined destroy of HandshakeStateMachine?(v18, v19);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      uint64_t v13 = type metadata accessor for SymmetricKey();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t HandshakeState.EncryptedExtensionsState.init(originalState:encryptedExtensions:extensionBytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v132[0] = a5;
  uint64_t v138 = a3;
  uint64_t v148 = a1;
  uint64_t v142 = type metadata accessor for SessionTicket();
  uint64_t v9 = MEMORY[0x1F4188790](v142);
  uint64_t v11 = (char *)v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v141 = (uint64_t)v132 - v12;
  unint64_t v145 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  uint64_t v13 = MEMORY[0x1F4188790](v145);
  uint64_t v143 = (uint64_t)v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v132 - v15;
  uint64_t v17 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  uint64_t v18 = (uint64_t *)(a6 + v17[6]);
  *(_OWORD *)uint64_t v18 = xmmword_1B577F270;
  void v18[2] = 0;
  uint64_t v19 = a6 + v17[7];
  *(_OWORD *)uint64_t v19 = xmmword_1B577F270;
  uint64_t v146 = v18;
  uint64_t v147 = v19;
  *(void *)(v19 + 16) = 0;
  uint64_t v140 = v17[8];
  *(unsigned char *)(a6 + v140) = 0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  Swift::String v133 = v11;
  unint64_t v136 = a4;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v134 = __swift_project_value_buffer(v20, (uint64_t)logger);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1B56C5000, v21, v22, "validating encrypted extensions", v23, 2u);
    MEMORY[0x1BA99F280](v23, -1, -1);
  }

  v151[3] = MEMORY[0x1E4FBC870];
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v137 = v17;
  if (!v24)
  {
    swift_bridgeObjectRelease();
    unsigned int v135 = 0;
    int v139 = 1;
    goto LABEL_41;
  }
  uint64_t v144 = a6;
  unsigned int v135 = 0;
  uint64_t v25 = (unsigned __int8 *)(a2 + 64);
  int v139 = 1;
  while (1)
  {
    uint64_t v28 = *((void *)v25 - 4);
    unint64_t v29 = *((void *)v25 - 3);
    unint64_t v30 = *((void *)v25 - 2);
    uint64_t v149 = *((void *)v25 - 1);
    int v32 = *v25;
    v25 += 40;
    int v31 = v32;
    Swift::Int v33 = 42;
    switch(v32)
    {
      case 1:
        swift_bridgeObjectRetain();
        Swift::Int v33 = 10;
        break;
      case 2:
        outlined copy of Extension.ServerCertificateType(v28, v29 & 1);
        Swift::Int v33 = 43;
        break;
      case 3:
      case 9:
        outlined copy of Data._Representation(v28, v29);
        Swift::Int v33 = 16;
        break;
      case 4:
        outlined copy of Extension.KeyShare(v28, v29, v30);
        Swift::Int v33 = 51;
        break;
      case 5:
        break;
      case 6:
        swift_bridgeObjectRetain();
        Swift::Int v33 = 13;
        break;
      case 7:
        outlined copy of Extension.ServerCertificateType(v28, v29 & 1);
        Swift::Int v33 = 20;
        break;
      case 8:
        outlined copy of Data._Representation(v28, v29);
        Swift::Int v33 = 57;
        break;
      case 10:
        swift_bridgeObjectRetain();
        Swift::Int v33 = 45;
        break;
      case 11:
        outlined copy of Extension.PreSharedKey(v28, v29, v30 & 1);
        Swift::Int v33 = 41;
        break;
      case 12:
        Swift::Int v33 = 58;
        break;
      case 13:
        outlined copy of Data._Representation(v29, v30);
        Swift::Int v33 = v28;
        break;
      default:
        outlined copy of ByteBuffer?(v28, v29);
        Swift::Int v33 = 0;
        break;
    }
    if ((specialized Set._Variant.insert(_:)(v151, v33) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v44 = v30;
      unint64_t v45 = v30;
      uint64_t v46 = v149;
      outlined copy of Extension(v28, v29, v45, v149, v31);
      outlined copy of Extension(v28, v29, v44, v46, v31);
      uint64_t v47 = Logger.logObject.getter();
      int v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, (os_log_type_t)v48))
      {
        LODWORD(v145) = v48;
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        uint64_t v143 = swift_slowAlloc();
        v151[0] = v143;
        *(_DWORD *)uint64_t v49 = 136446210;
        unsigned __int16 v50 = 0;
        switch(v31)
        {
          case 0:
            break;
          case 1:
            unsigned __int16 v50 = 10;
            break;
          case 2:
            unsigned __int16 v50 = 43;
            break;
          case 3:
          case 9:
            unsigned __int16 v50 = 16;
            break;
          case 4:
            unsigned __int16 v50 = 51;
            break;
          case 5:
            unsigned __int16 v50 = 42;
            break;
          case 6:
            unsigned __int16 v50 = 13;
            break;
          case 7:
            unsigned __int16 v50 = 20;
            break;
          case 8:
            unsigned __int16 v50 = 57;
            break;
          case 10:
            unsigned __int16 v50 = 45;
            break;
          case 11:
            unsigned __int16 v50 = 41;
            break;
          case 12:
            unsigned __int16 v50 = 58;
            break;
          case 13:
            unsigned __int16 v50 = v28;
            break;
          default:
            JUMPOUT(0);
        }
        uint64_t v127 = ExtensionType.description.getter(v50);
        uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v127, v128, v151);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Extension(v28, v29, v44, v46, v31);
        outlined consume of Extension(v28, v29, v44, v46, v31);
        _os_log_impl(&dword_1B56C5000, v47, (os_log_type_t)v145, "server offered duplicate extension of type %{public}s on encrypted extensions", v49, 0xCu);
        uint64_t v129 = v143;
        swift_arrayDestroy();
        MEMORY[0x1BA99F280](v129, -1, -1);
        MEMORY[0x1BA99F280](v49, -1, -1);
      }
      else
      {
        outlined consume of Extension(v28, v29, v44, v46, v31);
        outlined consume of Extension(v28, v29, v44, v46, v31);
      }

      unint64_t v130 = v136;
      uint64_t v17 = v137;
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v131 = 5;
      *(unsigned char *)(v131 + 4) = 1;
      swift_willThrow();
      outlined consume of Data._Representation(v138, v130);
      outlined consume of Extension(v28, v29, v44, v46, v31);
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v148, type metadata accessor for HandshakeState.ServerHelloState);
      int v80 = 0;
      a6 = v144;
      goto LABEL_87;
    }
    switch(v31)
    {
      case 3:
        uint64_t v26 = v148;
        if (*(void *)(v148 + 56) >> 60 == 15)
        {
          outlined copy of Data._Representation(v28, v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v114 = Logger.logObject.getter();
          os_log_type_t v115 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v114, v115))
          {
            uint64_t v116 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v116 = 0;
            _os_log_impl(&dword_1B56C5000, v114, v115, "server unexpectedly offered alpn", v116, 2u);
            MEMORY[0x1BA99F280](v116, -1, -1);
          }

          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v117 = 6;
          *(unsigned char *)(v117 + 4) = 1;
          swift_willThrow();
          unint64_t v118 = v30;
          unint64_t v119 = v30;
          uint64_t v120 = v149;
          outlined consume of Extension(v28, v29, v119, v149, 3);
          outlined consume of Data._Representation(v138, v136);
          uint64_t v109 = v28;
          unint64_t v110 = v29;
          unint64_t v111 = v118;
          uint64_t v112 = v120;
          char v113 = 3;
LABEL_68:
          outlined consume of Extension(v109, v110, v111, v112, v113);
          _s8SwiftTLS14HandshakeStateOWOhTm_1(v26, type metadata accessor for HandshakeState.ServerHelloState);
          int v80 = 0;
          a6 = v144;
          uint64_t v17 = v137;
          goto LABEL_87;
        }
        uint64_t v27 = v146;
        break;
      case 5:
        uint64_t v39 = type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v40 = v148;
        uint64_t v41 = v143;
        _s8SwiftTLS14HandshakeStateOWOcTm_0(v148 + *(int *)(v39 + 20), v143, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _s8SwiftTLS14HandshakeStateOWOhTm_1(v41, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
          a6 = v144;
          goto LABEL_71;
        }
        uint64_t v42 = v141;
        outlined init with take of HandshakeState.IdleState(v41, v141, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        int v43 = *(_DWORD *)(v42 + *(int *)(v142 + 40));
        _s8SwiftTLS14HandshakeStateOWOhTm_1(v42, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        a6 = v144;
        if (v43)
        {
          *(unsigned char *)(v144 + v140) = 1;
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_71:
        uint64_t v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.error.getter();
        BOOL v123 = os_log_type_enabled(v121, v122);
        unint64_t v124 = v136;
        if (v123)
        {
          unint64_t v125 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v125 = 0;
          _os_log_impl(&dword_1B56C5000, v121, v122, "server unexpectedly offered early data", v125, 2u);
          MEMORY[0x1BA99F280](v125, -1, -1);
        }

        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v126 = 6;
        *(unsigned char *)(v126 + 4) = 1;
        swift_willThrow();
        outlined consume of Data._Representation(v138, v124);
        _s8SwiftTLS14HandshakeStateOWOhTm_1(v40, type metadata accessor for HandshakeState.ServerHelloState);
        int v80 = 0;
        uint64_t v17 = v137;
LABEL_87:
        outlined consume of ByteBuffer?(*v146, v146[1]);
        uint64_t result = outlined consume of ByteBuffer?(*(void *)v147, *(void *)(v147 + 8));
        if (v80) {
          return outlined destroy of HandshakeStateMachine?(a6 + v17[9], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
        }
        return result;
      case 7:
        if (v29)
        {
          outlined consume of Extension(v28, v29, v30, v149, 7);
          int v139 = 0;
          unsigned int v135 = v28;
        }
        else
        {
          uint64_t v34 = v28;
          unint64_t v35 = v29;
          unint64_t v36 = v30;
          uint64_t v37 = v149;
          char v38 = 7;
LABEL_34:
          outlined consume of Extension(v34, v35, v36, v37, v38);
        }
        goto LABEL_10;
      case 8:
        uint64_t v26 = v148;
        if (*(void *)(v148 + 32) >> 60 == 15)
        {
          outlined copy of Data._Representation(v28, v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v102 = Logger.logObject.getter();
          os_log_type_t v103 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v102, v103))
          {
            uint64_t v104 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v104 = 0;
            _os_log_impl(&dword_1B56C5000, v102, v103, "server unexpectedly offered transport parameters", v104, 2u);
            MEMORY[0x1BA99F280](v104, -1, -1);
          }

          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v105 = 6;
          *(unsigned char *)(v105 + 4) = 1;
          swift_willThrow();
          unint64_t v106 = v30;
          unint64_t v107 = v30;
          uint64_t v108 = v149;
          outlined consume of Extension(v28, v29, v107, v149, 8);
          outlined consume of Data._Representation(v138, v136);
          uint64_t v109 = v28;
          unint64_t v110 = v29;
          unint64_t v111 = v106;
          uint64_t v112 = v108;
          char v113 = 8;
          goto LABEL_68;
        }
        uint64_t v27 = (uint64_t *)v147;
        break;
      default:
        uint64_t v34 = v28;
        unint64_t v35 = v29;
        unint64_t v36 = v30;
        uint64_t v37 = v149;
        char v38 = v31;
        goto LABEL_34;
    }
    outlined consume of ByteBuffer?(*v27, v27[1]);
    uint64_t *v27 = v28;
    v27[1] = v29;
    void v27[2] = v30;
LABEL_10:
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      a6 = v144;
      uint64_t v17 = v137;
LABEL_41:
      swift_bridgeObjectRelease();
      uint64_t v51 = type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v52 = v148;
      _s8SwiftTLS14HandshakeStateOWOcTm_0(v148 + *(int *)(v51 + 20), (uint64_t)v16, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v54 = (uint64_t)v133;
      if (EnumCaseMultiPayload == 1)
      {
        outlined init with take of HandshakeState.IdleState((uint64_t)v16, (uint64_t)v133, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        if (v139)
        {
          outlined init with take of HandshakeState.IdleState(v54, a6 + v17[5], (uint64_t (*)(void))type metadata accessor for SessionTicket);
          type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
          swift_storeEnumTagMultiPayload();
LABEL_49:
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)(v52 + 8);
          uint64_t v63 = *(void *)(v52 + 16);
          uint64_t v64 = *(void *)(v52 + 24);
          unint64_t v66 = *(void *)(v52 + 32);
          uint64_t v65 = *(void *)(v52 + 40);
          unint64_t v68 = *(void *)(v52 + 56);
          uint64_t v149 = *(void *)(v52 + 48);
          uint64_t v67 = v149;
          unint64_t v145 = v68;
          uint64_t v69 = *(void *)(v52 + 64);
          __int16 v70 = *(_WORD *)(v52 + 72);
          char v71 = *(unsigned char *)(v52 + 74);
          char v72 = *(unsigned char *)(v52 + 75);
          *(void *)a6 = v61;
          *(void *)(a6 + 8) = v62;
          *(void *)(a6 + 16) = v63;
          *(void *)(a6 + 24) = v64;
          *(void *)(a6 + 32) = v66;
          *(void *)(a6 + 40) = v65;
          *(void *)(a6 + 48) = v67;
          *(void *)(a6 + 56) = v68;
          *(void *)(a6 + 64) = v69;
          *(_WORD *)(a6 + 72) = v70;
          *(unsigned char *)(a6 + 74) = v71;
          *(unsigned char *)(a6 + 75) = v72;
          outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v52 + *(int *)(v51 + 24), a6 + v137[9], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of ByteBuffer?(v64, v66);
          outlined copy of ByteBuffer?(v149, v145);
          uint64_t v73 = v138;
          unint64_t v74 = v136;
          uint64_t v75 = v132[1];
          specialized SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(v138, v136, v132[0]);
          if (v75)
          {
            outlined consume of Data._Representation(v73, v74);
            _s8SwiftTLS14HandshakeStateOWOhTm_1(v52, type metadata accessor for HandshakeState.ServerHelloState);
            uint64_t v76 = *(void *)(a6 + 24);
            unint64_t v77 = *(void *)(a6 + 32);
            uint64_t v78 = *(void *)(a6 + 48);
            unint64_t v79 = *(void *)(a6 + 56);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of ByteBuffer?(v76, v77);
            outlined consume of ByteBuffer?(v78, v79);
            uint64_t v17 = v137;
            _s8SwiftTLS14HandshakeStateOWOhTm_1(a6 + v137[5], type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
            int v80 = 1;
            goto LABEL_87;
          }
          os_log_type_t v97 = Logger.logObject.getter();
          os_log_type_t v98 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v97, v98))
          {
            Swift::String v99 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)Swift::String v99 = 0;
            _os_log_impl(&dword_1B56C5000, v97, v98, "encrypted extensions valid", v99, 2u);
            uint64_t v100 = v99;
            unint64_t v74 = v136;
            MEMORY[0x1BA99F280](v100, -1, -1);
          }
          outlined consume of Data._Representation(v138, v74);

          return _s8SwiftTLS14HandshakeStateOWOhTm_1(v148, type metadata accessor for HandshakeState.ServerHelloState);
        }
        unint64_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v81, v82))
        {
          unint64_t v83 = v17;
          int v84 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v84 = 0;
          _os_log_impl(&dword_1B56C5000, v81, v82, "server provided server_certificate_type extension while resuming", v84, 2u);
          unint64_t v85 = v84;
          uint64_t v17 = v83;
          uint64_t v54 = (uint64_t)v133;
          MEMORY[0x1BA99F280](v85, -1, -1);
        }

        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v86 = 6;
        *(unsigned char *)(v86 + 4) = 1;
        swift_willThrow();
        outlined consume of Data._Representation(v138, v136);
        _s8SwiftTLS14HandshakeStateOWOhTm_1(v52, type metadata accessor for HandshakeState.ServerHelloState);
        char v87 = (uint64_t (*)(void))type metadata accessor for SessionTicket;
        uint64_t v88 = v54;
      }
      else
      {
        uint64_t v55 = v17;
        __int16 v56 = *(_WORD *)v16;
        __int16 v57 = *((_WORD *)v16 + 1);
        if (v139) {
          uint64_t v58 = 0;
        }
        else {
          uint64_t v58 = v135;
        }
        if (specialized Sequence<>.contains(_:)(v58, *((void *)v16 + 1)))
        {
          uint64_t v59 = v55[5];
          swift_bridgeObjectRelease();
          uint64_t v60 = a6 + v59;
          *(_WORD *)uint64_t v60 = v56;
          *(_WORD *)(v60 + 2) = v57;
          *(unsigned char *)(v60 + 4) = v58;
          type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
          *(void *)(v60 + 8) = 0;
          *(void *)(v60 + 16) = 0;
          swift_storeEnumTagMultiPayload();
          uint64_t v52 = v148;
          goto LABEL_49;
        }
        swift_bridgeObjectRelease();
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          unsigned __int16 v91 = (uint8_t *)swift_slowAlloc();
          uint64_t v92 = swift_slowAlloc();
          v151[0] = v92;
          *(_DWORD *)unsigned __int16 v91 = 136446210;
          uint64_t v93 = CertificateType.description.getter(v58);
          uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v151);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B56C5000, v89, v90, "server chose non-offered certificate type %{public}s", v91, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA99F280](v92, -1, -1);
          MEMORY[0x1BA99F280](v91, -1, -1);
        }

        uint64_t v17 = v55;
        uint64_t v95 = v148;
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v96 = 6;
        *(unsigned char *)(v96 + 4) = 1;
        swift_willThrow();
        outlined consume of Data._Representation(v138, v136);
        char v87 = type metadata accessor for HandshakeState.ServerHelloState;
        uint64_t v88 = v95;
      }
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v88, v87);
      int v80 = 0;
      goto LABEL_87;
    }
  }
}

uint64_t HandshakeState.ServerCertificateState.init(originalState:serverCertificate:certificateBytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v107 = a8;
  unint64_t v116 = a3;
  uint64_t v16 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v109 = (uint64_t)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v112 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v112);
  uint64_t v113 = (uint64_t)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a9 + 80) = xmmword_1B577F270;
  *(void *)(a9 + 96) = 0;
  *(void *)(a9 + 104) = 0;
  *(_OWORD *)(a9 + 112) = xmmword_1B5780810;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v114 = __swift_project_value_buffer(v19, (uint64_t)logger);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v111 = a4;
    uint64_t v23 = a5;
    uint64_t v24 = a1;
    uint64_t v25 = a6;
    unint64_t v26 = a7;
    uint64_t v27 = a2;
    uint64_t v28 = v22;
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl(&dword_1B56C5000, v20, v21, "validating certificate", v22, 2u);
    unint64_t v29 = v28;
    a2 = v27;
    a7 = v26;
    a6 = v25;
    a1 = v24;
    a5 = v23;
    a4 = v111;
    MEMORY[0x1BA99F280](v29, -1, -1);
  }
  uint64_t v115 = a6;

  unint64_t v30 = v116;
  unint64_t v31 = v116 >> 62;
  uint64_t v32 = 0;
  switch(v116 >> 62)
  {
    case 1uLL:
      uint64_t v32 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v32 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v32 = BYTE6(v116);
      break;
  }
  if (__OFSUB__(v32, a4))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v32 != a4)
  {
    unint64_t v112 = a7;
    uint64_t v42 = a4;
    outlined copy of Data._Representation(a2, v116);
    swift_bridgeObjectRetain();
    int v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v43, v44))
    {
      outlined consume of Data._Representation(a2, v30);

      swift_bridgeObjectRelease();
LABEL_27:
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v92 = 5;
      *(unsigned char *)(v92 + 4) = 1;
      swift_willThrow();
      outlined consume of Data._Representation(v115, v112);
      outlined consume of Data._Representation(a2, v30);
LABEL_28:
      swift_bridgeObjectRelease();
      _s8SwiftTLS14HandshakeStateOWOhTm_1(a1, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      BOOL v83 = 0;
LABEL_29:
      outlined consume of ByteBuffer?(*(void *)(a9 + 80), *(void *)(a9 + 88));
      uint64_t result = outlined consume of ByteBuffer?(*(void *)(a9 + 104), *(void *)(a9 + 112));
      if (v83)
      {
        uint64_t v94 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        _s8SwiftTLS14HandshakeStateOWOhTm_1(a9 + *(int *)(v94 + 40), type metadata accessor for PeerCertificateBundle);
        return outlined destroy of HandshakeStateMachine?(a9 + *(int *)(v94 + 44), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      }
      return result;
    }
    unint64_t v110 = a5;
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 134349056;
    uint64_t v47 = v46;
    uint64_t v48 = 0;
    switch((int)v31)
    {
      case 1:
        uint64_t v48 = a2 >> 32;
        break;
      case 2:
        uint64_t v48 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v48 = BYTE6(v116);
        break;
    }
    BOOL v90 = __OFSUB__(v48, v42);
    uint64_t v91 = v48 - v42;
    if (!v90)
    {
      uint64_t v117 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v30 = v116;
      outlined consume of Data._Representation(a2, v116);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B56C5000, v43, v44, "received unexpected context: %{public}ld", v47, 0xCu);
      MEMORY[0x1BA99F280](v47, -1, -1);

      goto LABEL_27;
    }
LABEL_36:
    __break(1u);
    JUMPOUT(0x1B5733CD0);
  }
  unint64_t v110 = a5;
  unint64_t v106 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  uint64_t v33 = v113;
  _s8SwiftTLS14HandshakeStateOWOcTm_0(a1 + v106[5], v113, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1(v33, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = v115;
    if (v36)
    {
      uint64_t v38 = a1;
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1B56C5000, v34, v35, "received server certificate message while resuming session", v39, 2u);
      uint64_t v40 = v39;
      a1 = v38;
      MEMORY[0x1BA99F280](v40, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v41 = 4;
    *(unsigned char *)(v41 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(v37, a7);
    outlined consume of Data._Representation(a2, v116);
    goto LABEL_28;
  }
  unint64_t v112 = a7;
  int v49 = *(_DWORD *)v33;
  uint64_t v104 = *(void *)(v33 + 16);
  uint64_t v105 = a2;
  uint64_t v51 = *(void *)a1;
  uint64_t v50 = *(void *)(a1 + 8);
  uint64_t v52 = *(void *)(a1 + 16);
  uint64_t v53 = *(void *)(a1 + 24);
  unint64_t v55 = *(void *)(a1 + 32);
  uint64_t v54 = *(void *)(a1 + 40);
  uint64_t v56 = a1;
  uint64_t v57 = *(void *)(a1 + 48);
  unint64_t v102 = *(void *)(a1 + 56);
  unint64_t v58 = v102;
  uint64_t v103 = v57;
  uint64_t v59 = *(void *)(a1 + 64);
  __int16 v60 = *(_WORD *)(a1 + 72);
  char v61 = *(unsigned char *)(a1 + 74);
  char v62 = *(unsigned char *)(a1 + 75);
  *(void *)a9 = v51;
  *(void *)(a9 + 8) = v50;
  *(void *)(a9 + 16) = v52;
  *(void *)(a9 + 24) = v53;
  *(void *)(a9 + 32) = v55;
  *(void *)(a9 + 40) = v54;
  *(void *)(a9 + 48) = v57;
  *(void *)(a9 + 56) = v58;
  *(void *)(a9 + 64) = v59;
  *(_WORD *)(a9 + 72) = v60;
  *(unsigned char *)(a9 + 74) = v61;
  *(unsigned char *)(a9 + 75) = v62;
  *(_DWORD *)(a9 + 76) = v49;
  LODWORD(v113) = *(unsigned __int8 *)(v33 + 4);
  uint64_t v63 = (uint64_t *)(a1 + v106[6]);
  uint64_t v111 = a4;
  uint64_t v65 = *v63;
  unint64_t v64 = v63[1];
  uint64_t v66 = v63[2];
  uint64_t v67 = *(void *)(a9 + 80);
  unint64_t v100 = *(void *)(a9 + 88);
  uint64_t v101 = v67;
  uint64_t v99 = *(void *)(a9 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ByteBuffer?(v53, v55);
  outlined copy of ByteBuffer?(v103, v102);
  outlined copy of ByteBuffer?(v65, v64);
  outlined consume of ByteBuffer?(v101, v100);
  *(void *)(a9 + 80) = v65;
  *(void *)(a9 + 88) = v64;
  *(void *)(a9 + 96) = v66;
  unint64_t v68 = v106;
  uint64_t v69 = (uint64_t *)(v56 + v106[7]);
  uint64_t v70 = *v69;
  unint64_t v71 = v69[1];
  uint64_t v72 = v69[2];
  uint64_t v73 = *(void *)(a9 + 104);
  unint64_t v74 = *(void *)(a9 + 112);
  outlined copy of ByteBuffer?(*v69, v71);
  uint64_t v75 = v73;
  unint64_t v76 = v74;
  unint64_t v77 = v110;
  uint64_t v78 = v56;
  outlined consume of ByteBuffer?(v75, v76);
  *(void *)(a9 + 104) = v70;
  *(void *)(a9 + 112) = v71;
  uint64_t v79 = v105;
  *(void *)(a9 + 120) = v72;
  *(unsigned char *)(a9 + 128) = *(unsigned char *)(v56 + v68[8]);
  unint64_t v80 = v116;
  outlined copy of Data._Representation(v79, v116);
  swift_bridgeObjectRetain();
  uint64_t v81 = v108;
  uint64_t v82 = v109;
  PeerCertificateBundle.init(expectedCertificateType:peerCertificateMessage:)(v113, v79, v80, v77, v109);
  BOOL v83 = v81 == 0;
  if (v81)
  {
    uint64_t v113 = v81;
    outlined consume of Data._Representation(v115, v112);
    outlined consume of Data._Representation(v79, v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8SwiftTLS14HandshakeStateOWOhTm_1(v78, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    uint64_t v86 = *(void *)(a9 + 24);
    unint64_t v87 = *(void *)(a9 + 32);
    uint64_t v88 = *(void *)(a9 + 48);
    unint64_t v89 = *(void *)(a9 + 56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ByteBuffer?(v86, v87);
    outlined consume of ByteBuffer?(v88, v89);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  uint64_t v84 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  outlined init with take of HandshakeState.IdleState(v82, a9 + *(int *)(v84 + 40), type metadata accessor for PeerCertificateBundle);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v78 + v106[9], a9 + *(int *)(v84 + 44), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  unint64_t v85 = v112;
  specialized SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(v115, v112, v107);
  uint64_t v113 = 0;
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    os_log_type_t v97 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v97 = 0;
    _os_log_impl(&dword_1B56C5000, v95, v96, "certificate valid", v97, 2u);
    os_log_type_t v98 = v97;
    unint64_t v80 = v116;
    MEMORY[0x1BA99F280](v98, -1, -1);
  }
  outlined consume of Data._Representation(v115, v85);
  outlined consume of Data._Representation(v105, v80);
  swift_bridgeObjectRelease();

  return _s8SwiftTLS14HandshakeStateOWOhTm_1(v78, type metadata accessor for HandshakeState.EncryptedExtensionsState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.init(originalState:certificateVerify:certificateVerifyBytes:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  uint64_t v19 = (uint64_t *)(a9 + *(int *)(v18 + 32));
  *(_OWORD *)uint64_t v19 = xmmword_1B577F270;
  uint64_t v56 = a9;
  uint64_t v57 = v19;
  v19[2] = 0;
  unint64_t v55 = (int *)v18;
  uint64_t v20 = (uint64_t *)(a9 + *(int *)(v18 + 36));
  *(_OWORD *)uint64_t v20 = xmmword_1B577F270;
  unint64_t v58 = v20;
  uint64_t v20[2] = 0;
  uint64_t v21 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  uint64_t v22 = a1 + *(int *)(v21 + 40);
  uint64_t v23 = a1 + *(int *)(v21 + 44);
  LOWORD(v21) = a2;
  unint64_t v24 = a4;
  uint64_t v25 = v23;
  uint64_t v26 = a5;
  uint64_t v27 = *(void *)(a1 + 16);
  char v28 = PeerCertificateBundle.verifyServerCertificateVerifySignature(message:validKeys:keyScheduler:)(v21, a3, v24, v26, v27, v23);
  if (v9)
  {
    outlined consume of Data._Representation(a6, a7);
    outlined consume of Data._Representation(a3, v24);
    _s8SwiftTLS14HandshakeStateOWOhTm_1(a1, type metadata accessor for HandshakeState.ServerCertificateState);
    unint64_t v29 = v57;
  }
  else
  {
    unint64_t v52 = a7;
    uint64_t v53 = a3;
    if (v28)
    {
      unint64_t v48 = *(void *)(a1 + 32);
      uint64_t v49 = *(void *)(a1 + 24);
      uint64_t v46 = *(void *)(a1 + 8);
      uint64_t v47 = *(void *)(a1 + 40);
      uint64_t v51 = *(void *)(a1 + 48);
      uint64_t v30 = *(void *)(a1 + 64);
      unint64_t v50 = *(void *)(a1 + 56);
      __int16 v31 = *(_WORD *)(a1 + 72);
      char v32 = *(unsigned char *)(a1 + 74);
      char v33 = *(unsigned char *)(a1 + 75);
      *(void *)uint64_t v56 = *(void *)a1;
      *(void *)(v56 + 8) = v46;
      *(void *)(v56 + 16) = v27;
      *(void *)(v56 + 24) = v49;
      *(void *)(v56 + 32) = v48;
      *(void *)(v56 + 40) = v47;
      *(void *)(v56 + 48) = v51;
      *(void *)(v56 + 56) = v50;
      *(void *)(v56 + 64) = v30;
      *(_WORD *)(v56 + 72) = v31;
      *(unsigned char *)(v56 + 74) = v32;
      *(unsigned char *)(v56 + 75) = v33;
      *(_DWORD *)(v56 + 76) = *(_DWORD *)(a1 + 76);
      _s8SwiftTLS14HandshakeStateOWOcTm_0(v22, v56 + v55[7], type metadata accessor for PeerCertificateBundle);
      uint64_t v34 = *(void *)(a1 + 80);
      unint64_t v45 = *(void *)(a1 + 88);
      *uint64_t v57 = v34;
      v57[1] = v45;
      uint64_t v35 = *(void *)(a1 + 104);
      v57[2] = *(void *)(a1 + 96);
      uint64_t v43 = v35;
      unint64_t v44 = *(void *)(a1 + 112);
      uint64_t v42 = *(void *)(a1 + 120);
      *unint64_t v58 = v35;
      v58[1] = v44;
      long long v58[2] = v42;
      *(unsigned char *)(v56 + v55[10]) = *(unsigned char *)(a1 + 128);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v25, v56 + v55[11], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ByteBuffer?(v49, v48);
      outlined copy of ByteBuffer?(v51, v50);
      outlined copy of ByteBuffer?(v34, v45);
      outlined copy of ByteBuffer?(v43, v44);
      specialized SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(a6, v52, a8);
      outlined consume of Data._Representation(a6, v52);
      outlined consume of Data._Representation(a3, v24);
      return _s8SwiftTLS14HandshakeStateOWOhTm_1(a1, type metadata accessor for HandshakeState.ServerCertificateState);
    }
    unint64_t v29 = v57;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1B56C5000, v37, v38, "verification failed", v39, 2u);
      MEMORY[0x1BA99F280](v39, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)uint64_t v40 = 11;
    *(unsigned char *)(v40 + 4) = 1;
    swift_willThrow();
    outlined consume of Data._Representation(a6, v52);
    outlined consume of Data._Representation(v53, v24);
    _s8SwiftTLS14HandshakeStateOWOhTm_1(a1, type metadata accessor for HandshakeState.ServerCertificateState);
  }
  outlined consume of ByteBuffer?(*v29, v29[1]);
  return outlined consume of ByteBuffer?(*v58, v58[1]);
}

uint64_t static HandshakeState.ReadyState.receivingServerFinished(originalState:serverFinished:serverFinishedBytes:serializer:)(uint64_t a1, uint64_t *a2, int64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v83 = a7;
  unint64_t v84 = a8;
  uint64_t v82 = a6;
  uint64_t v94 = a5;
  int64_t v86 = a3;
  uint64_t v87 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v65[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v65[-v15];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = &v65[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)a2 + *(int *)(v20 + 44), (uint64_t)v19, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  specialized SessionKeyManager.serverFinishedPayload()((uint64_t)v16);
  if (v8)
  {
    uint64_t v21 = (uint64_t)v19;
LABEL_3:
    outlined destroy of HandshakeStateMachine?(v21, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    return v20;
  }
  uint64_t v79 = (int *)v20;
  unint64_t v80 = v14;
  uint64_t v81 = v19;
  uint64_t v78 = a2;
  uint64_t v23 = v87;
  uint64_t v24 = 0;
  uint64_t v20 = v11;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v24 = v86 >> 32;
      break;
    case 2uLL:
      uint64_t v24 = *(void *)(v86 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v24 = BYTE6(a4);
      break;
  }
  if (v24 < v94)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v25 = Data._Representation.subscript.getter();
  unint64_t v27 = v26;
  *(void *)&long long v90 = v25;
  *((void *)&v90 + 1) = v26;
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  lazy protocol witness table accessor for type Data and conformance Data();
  char v28 = static MessageAuthenticationCode.== infix<A>(_:_:)();
  outlined consume of Data._Representation(v25, v27);
  uint64_t v29 = v85;
  uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v85 + 8);
  v30(v16, v20);
  if ((v28 & 1) == 0)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_14:
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)logger);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl(&dword_1B56C5000, v37, v38, "invalid server finished payload", v39, 2u);
        MEMORY[0x1BA99F280](v39, -1, -1);
      }

      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v40 = 6;
      *(unsigned char *)(v40 + 4) = 1;
      swift_willThrow();
      uint64_t v21 = (uint64_t)v81;
      goto LABEL_3;
    }
LABEL_21:
    swift_once();
    goto LABEL_14;
  }
  specialized SessionKeyManager.postServerFinished(serverFinishedBytes:)(v82, v83, v84);
  uint64_t v31 = (uint64_t)v80;
  specialized SessionKeyManager.clientFinishedPayload()((uint64_t)v80);
  uint64_t v92 = v20;
  uint64_t v93 = lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v90);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v29 + 16))(boxed_opaque_existential_1, v31, v20);
  __swift_project_boxed_opaque_existential_1(&v90, v92);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  v30((unsigned char *)v31, v20);
  uint64_t v33 = v88;
  unint64_t v34 = v89;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
  long long v90 = xmmword_1B577F280;
  uint64_t v91 = 0;
  uint64_t v35 = 0;
  switch(v34 >> 62)
  {
    case 1uLL:
      uint64_t v35 = (int)v33;
      goto LABEL_18;
    case 2uLL:
      uint64_t v35 = *(void *)(v33 + 16);
      swift_retain();
LABEL_18:
      swift_retain();
      break;
    default:
      break;
  }
  specialized ByteBuffer.writeHandshakeMessage<A>(_:)(v33, v34, v35);
  outlined consume of Data._Representation(v33, v34);
  unint64_t v41 = *((void *)&v90 + 1);
  uint64_t v20 = v90;
  uint64_t v42 = v91;
  outlined copy of Data._Representation(v90, *((unint64_t *)&v90 + 1));
  uint64_t v43 = (uint64_t)v81;
  specialized SessionKeyManager.postClientFinished(clientFinishedBytes:)(v20, v41, v42);
  outlined consume of Data._Representation(v33, v34);
  outlined consume of Data._Representation(v20, v41);
  uint64_t v44 = v23;
  unint64_t v45 = v78;
  uint64_t v75 = *v78;
  uint64_t v67 = v78[1];
  uint64_t v68 = v78[2];
  uint64_t v71 = v78[3];
  unint64_t v70 = v78[4];
  uint64_t v69 = v78[5];
  uint64_t v94 = v78[6];
  int64_t v46 = v78[7];
  uint64_t v85 = v78[8];
  int64_t v86 = v46;
  LODWORD(v46) = *((unsigned __int16 *)v78 + 36);
  int v73 = *((unsigned __int8 *)v78 + 74);
  int v74 = v46;
  int v72 = *((unsigned __int8 *)v78 + 75);
  uint64_t v47 = v79;
  unint64_t v84 = (unint64_t)v78 + v79[7];
  int v66 = *((_DWORD *)v78 + 19);
  uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
  _s8SwiftTLS14HandshakeStateOWOcTm_0(v84, v44 + ready[7], type metadata accessor for PeerCertificateBundle);
  uint64_t v49 = v47[9];
  unint64_t v50 = (uint64_t *)((char *)v45 + v47[8]);
  uint64_t v51 = *v50;
  unint64_t v53 = v50[1];
  uint64_t v52 = v50[2];
  uint64_t v76 = v51;
  unint64_t v77 = v53;
  unint64_t v80 = (unsigned char *)v52;
  uint64_t v54 = *(uint64_t *)((char *)v45 + v49);
  unint64_t v55 = *(uint64_t *)((char *)v45 + v49 + 16);
  unint64_t v84 = *(uint64_t *)((char *)v45 + v49 + 8);
  uint64_t v82 = v54;
  unint64_t v83 = v55;
  LODWORD(v79) = *((unsigned __int8 *)v45 + v47[10]);
  outlined init with take of P256.Signing.PublicKey?(v43, v44 + ready[11], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  uint64_t v56 = (void *)(v44 + ready[8]);
  uint64_t v57 = (void *)(v44 + ready[9]);
  uint64_t v58 = v67;
  *(void *)uint64_t v44 = v75;
  *(void *)(v44 + 8) = v58;
  uint64_t v59 = v71;
  *(void *)(v44 + 16) = v68;
  *(void *)(v44 + 24) = v59;
  unint64_t v60 = v70;
  uint64_t v61 = v69;
  *(void *)(v44 + 32) = v70;
  *(void *)(v44 + 40) = v61;
  int64_t v62 = v86;
  *(void *)(v44 + 48) = v94;
  *(void *)(v44 + 56) = v62;
  *(void *)(v44 + 64) = v85;
  *(_WORD *)(v44 + 72) = v74;
  *(unsigned char *)(v44 + 74) = v73;
  *(unsigned char *)(v44 + 75) = v72;
  *(_DWORD *)(v44 + 76) = v66;
  unint64_t v63 = v77;
  *uint64_t v56 = v76;
  v56[1] = v63;
  v56[2] = v80;
  unint64_t v64 = v84;
  *uint64_t v57 = v82;
  v57[1] = v64;
  v57[2] = v83;
  *(unsigned char *)(v44 + ready[10]) = (_BYTE)v79;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ByteBuffer?(v59, v60);
  outlined copy of ByteBuffer?(v94, v86);
  outlined copy of ByteBuffer?(v76, v77);
  outlined copy of ByteBuffer?(v82, v84);
  return v20;
}

uint64_t specialized SessionKeyManager.clientApplicationTrafficSecret.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1F4188790](v4 - 8);
  int64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2, (uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v17 = &v9[*(int *)(v7 + 48)];
      uint64_t v18 = type metadata accessor for SymmetricKey();
      uint64_t v19 = *(void *)(v18 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(a1, v17, v18);
      outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
      break;
    case 3u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      uint64_t v15 = type metadata accessor for SymmetricKey();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(a1, v6, v15);
      outlined destroy of HandshakeStateMachine?((uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      uint64_t v13 = type metadata accessor for SymmetricKey();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
      break;
  }
  return result;
}

uint64_t specialized SessionKeyManager.serverApplicationTrafficSecret.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1F4188790](v4);
  int64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2, (uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v20 = &v9[*(int *)(v7 + 52)];
      uint64_t v16 = type metadata accessor for SymmetricKey();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v20, v16);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret;
      goto LABEL_6;
    case 3u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v12, (uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      uint64_t v15 = &v6[*(int *)(v4 + 36)];
      uint64_t v16 = type metadata accessor for SymmetricKey();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v15, v16);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets;
LABEL_6:
      outlined destroy of HandshakeStateMachine?(v18, v19);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      uint64_t v13 = type metadata accessor for SymmetricKey();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t static HandshakeState.ReadyState.receivingServerFinished(originalState:serverFinished:serverFinishedBytes:serializer:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v97 = a7;
  uint64_t v98 = a8;
  uint64_t v96 = a6;
  int64_t v100 = a5;
  uint64_t v101 = a3;
  unint64_t v108 = a4;
  uint64_t v93 = a1;
  uint64_t v10 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v94 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  uint64_t v99 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v95 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v78 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (uint64_t *)((char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = (void *)type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = (int *)type metadata accessor for SessionTicket();
  MEMORY[0x1F4188790](v92);
  uint64_t v24 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  _s8SwiftTLS14HandshakeStateOWOcTm_0(a2 + *(int *)(v25 + 20), (uint64_t)v22, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of HandshakeState.IdleState((uint64_t)v22, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(a2 + *(int *)(v25 + 36), (uint64_t)v19, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    specialized SessionKeyManager.serverFinishedPayload()((uint64_t)v16);
    if (v8)
    {
      outlined destroy of HandshakeStateMachine?((uint64_t)v19, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      uint64_t v26 = (uint64_t)v24;
LABEL_20:
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v26, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      return v12;
    }
    uint64_t v32 = 0;
    switch(v108 >> 62)
    {
      case 1uLL:
        uint64_t v32 = v101 >> 32;
        break;
      case 2uLL:
        uint64_t v32 = *(void *)(v101 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v32 = BYTE6(v108);
        break;
    }
    uint64_t v88 = (int *)v25;
    uint64_t v89 = a2;
    long long v90 = v24;
    uint64_t v91 = v19;
    if (v32 < v100)
    {
      __break(1u);
    }
    else
    {
      uint64_t v33 = Data._Representation.subscript.getter();
      unint64_t v35 = v34;
      *(void *)&long long v104 = v33;
      *((void *)&v104 + 1) = v34;
      lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
      lazy protocol witness table accessor for type Data and conformance Data();
      char v36 = static MessageAuthenticationCode.== infix<A>(_:_:)();
      outlined consume of Data._Representation(v33, v35);
      uint64_t v37 = v99;
      os_log_type_t v38 = *(void (**)(char *, uint64_t))(v99 + 8);
      v38(v16, v12);
      if (v36)
      {
        specialized SessionKeyManager.postServerFinished(serverFinishedBytes:)(v96, v97, v98);
        uint64_t v46 = v95;
        specialized SessionKeyManager.clientFinishedPayload()(v95);
        uint64_t v106 = v12;
        uint64_t v107 = lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v104);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v46, v12);
        __swift_project_boxed_opaque_existential_1(&v104, v106);
        dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
        v38((char *)v46, v12);
        uint64_t v48 = v102;
        unint64_t v49 = v103;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
        long long v104 = xmmword_1B577F280;
        uint64_t v105 = 0;
        uint64_t v50 = 0;
        switch(v49 >> 62)
        {
          case 1uLL:
            uint64_t v50 = (int)v48;
            goto LABEL_25;
          case 2uLL:
            uint64_t v50 = *(void *)(v48 + 16);
            swift_retain();
LABEL_25:
            swift_retain();
            break;
          default:
            break;
        }
        specialized ByteBuffer.writeHandshakeMessage<A>(_:)(v48, v49, v50);
        outlined consume of Data._Representation(v48, v49);
        unint64_t v51 = *((void *)&v104 + 1);
        uint64_t v12 = v104;
        uint64_t v52 = v105;
        outlined copy of Data._Representation(v104, *((unint64_t *)&v104 + 1));
        specialized SessionKeyManager.postClientFinished(clientFinishedBytes:)(v12, v51, v52);
        outlined consume of Data._Representation(v48, v49);
        outlined consume of Data._Representation(v12, v51);
        uint64_t v53 = v89;
        uint64_t v54 = *(void *)(v89 + 8);
        uint64_t v98 = *(void *)v89;
        uint64_t v86 = v54;
        uint64_t v55 = *(void *)(v89 + 24);
        uint64_t v85 = *(void *)(v89 + 16);
        uint64_t v84 = v55;
        unint64_t v78 = *(void *)(v89 + 32);
        unint64_t v108 = *(void *)(v89 + 40);
        uint64_t v56 = *(void *)(v89 + 48);
        int64_t v100 = *(void *)(v89 + 56);
        uint64_t v101 = v56;
        uint64_t v99 = *(void *)(v89 + 64);
        LODWORD(v97) = *(unsigned __int16 *)(v89 + 72);
        LODWORD(v96) = *(unsigned __int8 *)(v89 + 74);
        LODWORD(v95) = *(unsigned __int8 *)(v89 + 75);
        uint64_t v57 = (uint64_t)v90;
        uint64_t v58 = (uint64_t)&v90[v92[14]];
        uint64_t v59 = v92[12];
        int v87 = *(unsigned __int16 *)&v90[v92[11]];
        LODWORD(v92) = *(unsigned __int16 *)&v90[v59];
        _s8SwiftTLS14HandshakeStateOWOcTm_0(v58, v94, type metadata accessor for PeerCertificateBundle);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v60 = v55;
        unint64_t v61 = v78;
        outlined copy of ByteBuffer?(v60, v78);
        outlined copy of ByteBuffer?(v101, v100);
        _s8SwiftTLS14HandshakeStateOWOhTm_1(v57, (uint64_t (*)(void))type metadata accessor for SessionTicket);
        uint64_t v62 = v88[7];
        unint64_t v63 = (uint64_t *)(v53 + v88[6]);
        uint64_t v79 = *v63;
        unint64_t v65 = v63[1];
        uint64_t v64 = v63[2];
        unint64_t v80 = v65;
        uint64_t v81 = v64;
        uint64_t v66 = *(void *)(v53 + v62);
        unint64_t v82 = *(void *)(v53 + v62 + 8);
        uint64_t v83 = *(void *)(v53 + v62 + 16);
        LODWORD(v90) = *(unsigned __int8 *)(v53 + v88[8]);
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v68 = v93;
        outlined init with take of P256.Signing.PublicKey?((uint64_t)v91, v93 + ready[11], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
        uint64_t v69 = (uint64_t *)(v68 + ready[8]);
        uint64_t v91 = (uint64_t *)(v68 + ready[9]);
        uint64_t v70 = v86;
        *(void *)uint64_t v68 = v98;
        *(void *)(v68 + 8) = v70;
        uint64_t v71 = v84;
        *(void *)(v68 + 16) = v85;
        *(void *)(v68 + 24) = v71;
        unint64_t v72 = v108;
        *(void *)(v68 + 32) = v61;
        *(void *)(v68 + 40) = v72;
        int64_t v73 = v100;
        *(void *)(v68 + 48) = v101;
        *(void *)(v68 + 56) = v73;
        *(void *)(v68 + 64) = v99;
        *(_WORD *)(v68 + 72) = v97;
        *(unsigned char *)(v68 + 74) = v96;
        *(unsigned char *)(v68 + 75) = v95;
        *(_WORD *)(v68 + 76) = v87;
        *(_WORD *)(v68 + 78) = (_WORD)v92;
        outlined init with take of HandshakeState.IdleState(v94, v68 + ready[7], type metadata accessor for PeerCertificateBundle);
        uint64_t v74 = v79;
        unint64_t v75 = v80;
        *uint64_t v69 = v79;
        v69[1] = v75;
        v69[2] = v81;
        uint64_t v76 = v91;
        unint64_t v77 = v82;
        uint64_t *v91 = v66;
        v76[1] = v77;
        v76[2] = v83;
        *(unsigned char *)(v68 + ready[10]) = (_BYTE)v90;
        outlined copy of ByteBuffer?(v74, v75);
        outlined copy of ByteBuffer?(v66, v77);
        return v12;
      }
      uint64_t v20 = v91;
      if (one-time initialization token for logger == -1)
      {
LABEL_17:
        uint64_t v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)logger);
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v42 = 0;
          _os_log_impl(&dword_1B56C5000, v40, v41, "invalid server finished payload", v42, 2u);
          uint64_t v43 = v42;
          uint64_t v20 = v91;
          MEMORY[0x1BA99F280](v43, -1, -1);
        }

        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v44 = 6;
        *(unsigned char *)(v44 + 4) = 1;
        swift_willThrow();
        outlined destroy of HandshakeStateMachine?((uint64_t)v20, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
        uint64_t v26 = (uint64_t)v90;
        goto LABEL_20;
      }
    }
    swift_once();
    goto LABEL_17;
  }
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v22, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)logger);
  char v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_1B56C5000, v28, v29, "received server finished message while not resuming session", v30, 2u);
    MEMORY[0x1BA99F280](v30, -1, -1);
  }

  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  *(_DWORD *)uint64_t v31 = 4;
  *(unsigned char *)(v31 + 4) = 1;
  swift_willThrow();
  return v12;
}

uint64_t HandshakeState.ReadyState.prepareSessionTicket(message:currentTime:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for SymmetricKey();
  uint64_t v33 = *(void *)(v34 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v34);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t ready = type metadata accessor for HandshakeState.ReadyState(0);
  uint64_t result = specialized SessionKeyManager.generateSessionTicketPSK(ticketNonce:)(a1[1], a1[2], a1[3], (unint64_t)v16);
  if (!v4)
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v14, v16, v34);
    uint64_t v19 = *(int *)(ready + 28);
    uint64_t v20 = (uint64_t *)(v3 + *(int *)(ready + 32));
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    uint64_t v26 = v20[2];
    uint64_t v23 = v3 + v19;
    LODWORD(v19) = *(unsigned __int16 *)(v3 + 78);
    int v27 = *(unsigned __int16 *)(v3 + 76);
    int v28 = v19;
    _s8SwiftTLS14HandshakeStateOWOcTm_0(v23, (uint64_t)v11, type metadata accessor for PeerCertificateBundle);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v8, v31, v30);
    outlined retain of NewSessionTicket(a1);
    uint64_t v24 = v26;
    outlined copy of ByteBuffer?(v21, v22);
    SessionTicket.init(message:psk:cipherSuite:group:alpn:certificateBundle:currentTime:)((uint64_t)a1, (uint64_t)v14, v27, v28, v21, v22, v24, (uint64_t)v11, v32, (uint64_t)v8);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v34);
  }
  return result;
}

uint64_t HandshakeState.IdleState.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of HandshakeStateMachine.Configuration(v1, a1);
}

uint64_t HandshakeState.IdleState.configuration.setter(uint64_t a1)
{
  return outlined assign with take of HandshakeStateMachine.Configuration(a1, v1);
}

uint64_t HandshakeState.IdleState.sessionToResume.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.sessionToResume.getter(type metadata accessor for HandshakeState.IdleState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?, a1);
}

uint64_t HandshakeState.IdleState.sessionToResume.setter(uint64_t a1)
{
  return HandshakeState.IdleState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.IdleState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeStateMachine?);
}

uint64_t (*HandshakeState.IdleState.sessionToResume.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.IdleState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.keyScheduler.getter(type metadata accessor for HandshakeState.IdleState, a1);
}

uint64_t HandshakeState.IdleState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.IdleState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.IdleState);
}

uint64_t (*HandshakeState.IdleState.keyScheduler.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

__n128 HandshakeState.ClientHelloState.expectedLegacySessionID.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 112);
  __n128 result = *(__n128 *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

__n128 HandshakeState.ClientHelloState.expectedLegacySessionID.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 96) = v3;
  *(void *)(v1 + 112) = *(void *)(a1 + 32);
  return result;
}

uint64_t HandshakeState.ClientHelloState.allowedCipherSuites.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandshakeState.ClientHelloState.allowedCipherSuites.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 120) = a1;
  return result;
}

uint64_t (*HandshakeState.ClientHelloState.allowedCipherSuites.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.serverCertificateTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandshakeState.ClientHelloState.serverCertificateTypes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 128) = a1;
  return result;
}

uint64_t (*HandshakeState.ClientHelloState.serverCertificateTypes.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.diffieHellmanKey.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SwiftTLSClock(v1 + 136, a1);
}

uint64_t HandshakeState.ClientHelloState.diffieHellmanKey.setter(long long *a1)
{
  uint64_t v3 = v1 + 136;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return outlined init with take of ContiguousBytes(a1, v3);
}

uint64_t (*HandshakeState.ClientHelloState.diffieHellmanKey.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.keyScheduler.getter(type metadata accessor for HandshakeState.ClientHelloState, a1);
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ClientHelloState);
}

uint64_t (*HandshakeState.ClientHelloState.keyScheduler.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.sessionToResume.getter(type metadata accessor for HandshakeState.ClientHelloState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?, a1);
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.ClientHelloState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeStateMachine?);
}

uint64_t (*HandshakeState.ClientHelloState.sessionToResume.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.sessionData.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.sessionToResume.getter(type metadata accessor for HandshakeState.ServerHelloState, (uint64_t)type metadata accessor for HandshakeState.ServerHelloState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s8SwiftTLS14HandshakeStateOWOcTm_0, a1);
}

uint64_t HandshakeState.IdleState.sessionToResume.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 20), a4, a2);
}

uint64_t HandshakeState.ServerHelloState.sessionData.setter(uint64_t a1)
{
  return HandshakeState.IdleState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.ServerHelloState, (uint64_t)type metadata accessor for HandshakeState.ServerHelloState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeState.ServerHelloState.SessionData);
}

uint64_t HandshakeState.IdleState.sessionToResume.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a2(0);
  return a4(a1, v4 + *(int *)(v8 + 20), a3);
}

uint64_t (*HandshakeState.ServerHelloState.sessionData.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.keyScheduler.getter(type metadata accessor for HandshakeState.ServerHelloState, a1);
}

uint64_t HandshakeState.IdleState.keyScheduler.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2 + *(int *)(v4 + 24), a2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t HandshakeState.ServerHelloState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.IdleState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ServerHelloState);
}

uint64_t HandshakeState.IdleState.keyScheduler.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(0);
  return outlined assign with take of HandshakeStateMachine?(a1, v2 + *(int *)(v4 + 24), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t (*HandshakeState.ServerHelloState.keyScheduler.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.negotiatedCipherSuite.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HandshakeState.ServerHelloState(0) + 28));
}

uint64_t HandshakeState.ServerHelloState.negotiatedCipherSuite.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for HandshakeState.ServerHelloState(0);
  *(_WORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*HandshakeState.ServerHelloState.negotiatedCipherSuite.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.negotiatedGroup.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HandshakeState.ServerHelloState(0) + 32));
}

uint64_t HandshakeState.ServerHelloState.negotiatedGroup.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for HandshakeState.ServerHelloState(0);
  *(_WORD *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*HandshakeState.ServerHelloState.negotiatedGroup.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.init(negotiatedCipherSuite:negotiatedGroup:serverCertificateTypes:)(unsigned __int16 a1, unsigned __int16 a2)
{
  return a1 | (a2 << 16);
}

uint64_t specialized SessionKeyManager.postServerHello(ecdheSecret:serverHelloBytes:resumptionFailed:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v40 = a3;
  uint64_t v6 = v5;
  int v41 = a5;
  uint64_t v42 = a4;
  uint64_t v39 = a2;
  uint64_t v44 = a1;
  uint64_t v38 = type metadata accessor for SymmetricKey();
  uint64_t v43 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v38 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v38 - v22;
  uint64_t v45 = v6;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v6, (uint64_t)&v38 - v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 3)
  {
    uint64_t v25 = (uint64_t)v8;
    uint64_t v26 = v43;
    uint64_t v27 = v44;
    if (!EnumCaseMultiPayload)
    {
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v27, v38);
      uint64_t v28 = v39;
      unint64_t v29 = v40;
      outlined copy of Data._Representation(v39, v40);
      specialized SessionKeyManager.State.HandshakeSecret.init(earlySecret:ecdheSecret:serverHelloBytes:resumptionFailed:)((uint64_t)v12, v25, v28, v29, v42, v41 & 1, (uint64_t)v21);
      outlined destroy of HandshakeStateMachine?((uint64_t)v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      swift_storeEnumTagMultiPayload();
      return outlined assign with take of HandshakeStateMachine?((uint64_t)v21, v45, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    }
  }
  else
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v23, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)logger);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v45, (uint64_t)v18, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  int v32 = swift_getEnumCaseMultiPayload();
  unint64_t v33 = 0xE400000000000000;
  unint64_t v34 = 0xEB00000000746572;
  uint64_t v35 = 0x636553796C726165;
  uint64_t v36 = 1701602409;
  switch(v32)
  {
    case 1:
      unint64_t v34 = 0xEF74657263655365;
      uint64_t v35 = 0x6B616873646E6168;
      goto LABEL_11;
    case 2:
      unint64_t v34 = 0xEC00000074657263;
      uint64_t v35 = 0x655372657473616DLL;
      goto LABEL_11;
    case 3:
      unint64_t v34 = 0xEA00000000007374;
      uint64_t v35 = 0x65726365536C6C61;
      goto LABEL_11;
    case 4:
      goto LABEL_12;
    default:
LABEL_11:
      outlined destroy of HandshakeStateMachine?((uint64_t)v18, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t v36 = v35;
      unint64_t v33 = v34;
LABEL_12:
      Logger.logInvalidStateTransition(stateName:event:)(v36, v33, 0x7672655374736F70, 0xEF6F6C6C65487265);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      swift_allocError();
      *(_DWORD *)uint64_t v37 = 2;
      *(unsigned char *)(v37 + 4) = 1;
      uint64_t result = swift_willThrow();
      break;
  }
  return result;
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.negotiatedGroup.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.negotiatedGroup.setter(uint64_t result)
{
  *(_WORD *)(v1 + 2) = result;
  return result;
}

uint64_t (*HandshakeState.ServerHelloState.SessionData.NewSession.negotiatedGroup.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.serverCertificateTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.serverCertificateTypes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t HandshakeState.EncryptedExtensionsState.sessionData.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.sessionToResume.getter(type metadata accessor for HandshakeState.EncryptedExtensionsState, (uint64_t)type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s8SwiftTLS14HandshakeStateOWOcTm_0, a1);
}

uint64_t HandshakeState.EncryptedExtensionsState.sessionData.setter(uint64_t a1)
{
  return HandshakeState.IdleState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.EncryptedExtensionsState, (uint64_t)type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeState.ServerHelloState.SessionData);
}

uint64_t (*HandshakeState.EncryptedExtensionsState.sessionData.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverALPN.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of ByteBuffer?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 24));
  uint64_t result = outlined consume of ByteBuffer?(*v7, v7[1]);
  uint64_t *v7 = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  return result;
}

uint64_t (*HandshakeState.EncryptedExtensionsState.serverALPN.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverQUICTransportParameters.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 28);
  uint64_t v2 = *(void *)v1;
  outlined copy of ByteBuffer?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 28));
  uint64_t result = outlined consume of ByteBuffer?(*v7, v7[1]);
  uint64_t *v7 = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  return result;
}

uint64_t (*HandshakeState.EncryptedExtensionsState.serverQUICTransportParameters.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.earlyDataAccepted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 32));
}

uint64_t HandshakeState.EncryptedExtensionsState.earlyDataAccepted.setter(char a1)
{
  uint64_t result = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*HandshakeState.EncryptedExtensionsState.earlyDataAccepted.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.keyScheduler.getter(type metadata accessor for HandshakeState.EncryptedExtensionsState, a1);
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2 + *(int *)(v4 + 36), a2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t HandshakeState.EncryptedExtensionsState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.EncryptedExtensionsState);
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(0);
  return outlined assign with take of HandshakeStateMachine?(a1, v2 + *(int *)(v4 + 36), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t (*HandshakeState.EncryptedExtensionsState.keyScheduler.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

unint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.init(negotiatedCipherSuite:negotiatedGroup:serverCertificateType:serverName:)(unsigned __int16 a1, unsigned __int16 a2, unsigned __int8 a3)
{
  return a1 | ((unint64_t)a2 << 16) | ((unint64_t)a3 << 32);
}

uint64_t specialized SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v25 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v24 - v14;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)&v24 - v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      specialized SessionKeyManager.State.HandshakeSecret.addMessageToTranscriptHash(_:)(a1, a2, v25);
      outlined destroy of HandshakeStateMachine?(v4, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v9, v4, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v15, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)logger);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      unint64_t v18 = 0xE400000000000000;
      unint64_t v19 = 0xEB00000000746572;
      uint64_t v20 = 0x636553796C726165;
      uint64_t v21 = 1701602409;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          unint64_t v19 = 0xEF74657263655365;
          uint64_t v20 = 0x6B616873646E6168;
          goto LABEL_10;
        case 2:
          unint64_t v19 = 0xEC00000074657263;
          uint64_t v20 = 0x655372657473616DLL;
          goto LABEL_10;
        case 3:
          unint64_t v19 = 0xEA00000000007374;
          uint64_t v20 = 0x65726365536C6C61;
          goto LABEL_10;
        case 4:
          goto LABEL_11;
        default:
LABEL_10:
          outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
          uint64_t v21 = v20;
          unint64_t v18 = v19;
LABEL_11:
          Logger.logInvalidStateTransition(stateName:event:)(v21, v18, 0xD000000000000012, 0x80000001B5782F10);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v23 = 2;
          *(unsigned char *)(v23 + 4) = 1;
          uint64_t result = swift_willThrow();
          break;
      }
      break;
  }
  return result;
}

unint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.negotiatedGroup.getter(unint64_t a1)
{
  return a1 >> 16;
}

unint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverCertificateType.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverCertificateType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverName.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t HandshakeState.ServerCertificateState.negotiatedCipherSuite.getter()
{
  return *(unsigned __int16 *)(v0 + 76);
}

uint64_t HandshakeState.ServerCertificateState.negotiatedCipherSuite.setter(uint64_t result)
{
  *(_WORD *)(v1 + 76) = result;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateState.negotiatedCipherSuite.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.negotiatedGroup.getter()
{
  return *(unsigned __int16 *)(v0 + 78);
}

uint64_t HandshakeState.ServerCertificateState.negotiatedGroup.setter(uint64_t result)
{
  *(_WORD *)(v1 + 78) = result;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateState.negotiatedGroup.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.serverALPN.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  outlined copy of ByteBuffer?(v1, *(void *)(v0 + 88));
  return v1;
}

uint64_t HandshakeState.ServerCertificateState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = outlined consume of ByteBuffer?(v3[10], v3[11]);
  v3[10] = a1;
  v3[11] = a2;
  v3[12] = a3;
  return result;
}

uint64_t HandshakeState.ServerCertificateState.serverQUICTransportParameters.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  outlined copy of ByteBuffer?(v1, *(void *)(v0 + 112));
  return v1;
}

uint64_t HandshakeState.ServerCertificateState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = outlined consume of ByteBuffer?(v3[13], v3[14]);
  v3[13] = a1;
  v3[14] = a2;
  v3[15] = a3;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateState.serverQUICTransportParameters.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.earlyDataAccepted.getter()
{
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t HandshakeState.ServerCertificateState.earlyDataAccepted.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 128) = result;
  return result;
}

uint64_t HandshakeState.ServerCertificateState.certificates.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.sessionToResume.getter(type metadata accessor for HandshakeState.ServerCertificateState, (uint64_t)type metadata accessor for PeerCertificateBundle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s8SwiftTLS14HandshakeStateOWOcTm_0, a1);
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 40), a4, a2);
}

uint64_t HandshakeState.ServerCertificateState.certificates.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.ServerCertificateState, (uint64_t)type metadata accessor for PeerCertificateBundle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeState.ServerHelloState.SessionData);
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a2(0);
  return a4(a1, v4 + *(int *)(v8 + 40), a3);
}

uint64_t (*HandshakeState.ServerCertificateState.certificates.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateState.keyScheduler.getter(type metadata accessor for HandshakeState.ServerCertificateState, a1);
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ServerCertificateState);
}

uint64_t (*HandshakeState.ServerCertificateState.keyScheduler.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState, a1);
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.setter(a1, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.certificates.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.setter(a1, a2, a3, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.serverALPN.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(a1, a2, a3, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.earlyDataAccepted.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for HandshakeState.ServerCertificateVerifyState(0) + 40));
}

uint64_t HandshakeState.ServerCertificateVerifyState.earlyDataAccepted.setter(char a1)
{
  uint64_t result = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.earlyDataAccepted.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateState.keyScheduler.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState, a1);
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2 + *(int *)(v4 + 44), a2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t HandshakeState.ServerCertificateVerifyState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(0);
  return outlined assign with take of HandshakeStateMachine?(a1, v2 + *(int *)(v4 + 44), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.keyScheduler.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.certificates.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.getter(type metadata accessor for HandshakeState.ReadyState, a1);
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return _s8SwiftTLS14HandshakeStateOWOcTm_0(v2 + *(int *)(v4 + 28), a2, type metadata accessor for PeerCertificateBundle);
}

uint64_t HandshakeState.ReadyState.certificates.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.setter(a1, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(0);
  return outlined assign with take of HandshakeState.ServerHelloState.SessionData(a1, v2 + *(int *)(v4 + 28), type metadata accessor for PeerCertificateBundle);
}

uint64_t (*HandshakeState.ReadyState.certificates.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.serverALPN.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.getter(type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  uint64_t v3 = *(void *)v2;
  outlined copy of ByteBuffer?(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t HandshakeState.ReadyState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.setter(a1, a2, a3, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = (uint64_t *)(v4 + *(int *)(a4(0) + 32));
  uint64_t result = outlined consume of ByteBuffer?(*v8, v8[1]);
  uint64_t *v8 = a1;
  v8[1] = a2;
  void v8[2] = a3;
  return result;
}

uint64_t (*HandshakeState.ReadyState.serverALPN.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.serverQUICTransportParameters.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter(type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  uint64_t v3 = *(void *)v2;
  outlined copy of ByteBuffer?(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t HandshakeState.ReadyState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(a1, a2, a3, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = (uint64_t *)(v4 + *(int *)(a4(0) + 36));
  uint64_t result = outlined consume of ByteBuffer?(*v8, v8[1]);
  uint64_t *v8 = a1;
  v8[1] = a2;
  void v8[2] = a3;
  return result;
}

uint64_t (*HandshakeState.ReadyState.serverQUICTransportParameters.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.earlyDataAccepted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HandshakeState.ReadyState(0) + 40));
}

uint64_t HandshakeState.ReadyState.earlyDataAccepted.setter(char a1)
{
  uint64_t result = type metadata accessor for HandshakeState.ReadyState(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*HandshakeState.ReadyState.earlyDataAccepted.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateState.keyScheduler.getter(type metadata accessor for HandshakeState.ReadyState, a1);
}

uint64_t HandshakeState.ReadyState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t (*HandshakeState.ReadyState.keyScheduler.modify())(void)
{
  return CertificateVerify.algorithm.getter;
}

uint64_t specialized SessionKeyManager.generateSessionTicketPSK(ticketNonce:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  unint64_t v35 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v33 - v14;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v5, (uint64_t)&v33 - v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload < 3)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v15, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_6:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v5, (uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    int v22 = swift_getEnumCaseMultiPayload();
    unint64_t v23 = 0xE400000000000000;
    unint64_t v24 = 0xEB00000000746572;
    uint64_t v25 = 0x636553796C726165;
    uint64_t v26 = 1701602409;
    switch(v22)
    {
      case 1:
        unint64_t v24 = 0xEF74657263655365;
        uint64_t v25 = 0x6B616873646E6168;
        goto LABEL_12;
      case 2:
        unint64_t v24 = 0xEC00000074657263;
        uint64_t v25 = 0x655372657473616DLL;
        goto LABEL_12;
      case 3:
        unint64_t v24 = 0xEA00000000007374;
        uint64_t v25 = 0x65726365536C6C61;
        goto LABEL_12;
      case 4:
        goto LABEL_13;
      default:
LABEL_12:
        outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        uint64_t v26 = v25;
        unint64_t v23 = v24;
LABEL_13:
        Logger.logInvalidStateTransition(stateName:event:)(v26, v23, 0xD000000000000018, 0x80000001B5782F30);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        swift_allocError();
        *(_DWORD *)uint64_t v27 = 2;
        *(unsigned char *)(v27 + 4) = 1;
        uint64_t result = swift_willThrow();
        break;
    }
    return result;
  }
  uint64_t v17 = (uint64_t)v9;
  unint64_t v18 = v35;
  if (EnumCaseMultiPayload != 3) {
    goto LABEL_6;
  }
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v15, v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  uint64_t v19 = 0;
  unint64_t v20 = a4;
  switch(v18 >> 62)
  {
    case 1uLL:
      uint64_t v19 = v34 >> 32;
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(v34 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v19 = BYTE6(v18);
      break;
  }
  if (v19 < v33)
  {
    __break(1u);
    JUMPOUT(0x1B57380F4);
  }
  uint64_t v29 = Data._Representation.subscript.getter();
  unint64_t v31 = v30;
  type metadata accessor for SHA384Digest();
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  unint64_t v32 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(0x6974706D75736572, 0xEA00000000006E6FLL, v29, v31, v32, v20);
  outlined consume of Data._Representation(v29, v31);
  return outlined destroy of HandshakeStateMachine?(v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
}

uint64_t specialized SessionKeyManager.serverFinishedPayload()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for SHA384Digest();
  uint64_t v34 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v32 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v29 - v14;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v1, (uint64_t)&v29 - v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 44)];
      unint64_t v23 = (void (*)(uint64_t))MEMORY[0x1E4F24FA0];
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
      unint64_t v24 = dispatch thunk of static Digest.byteCount.getter();
      specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v22, 0x64656873696E6966, 0xE800000000000000, MEMORY[0x1E4FBC860], v24);
      type metadata accessor for SHA384();
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      uint64_t v25 = v32;
      uint64_t v26 = dispatch thunk of HashFunction.finalize()();
      MEMORY[0x1F4188790](v26);
      *(&v29 - 2) = (uint64_t)v6;
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, v23);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v2);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
      uint64_t result = outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v15, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)logger);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v1, (uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      unint64_t v18 = 0xE400000000000000;
      unint64_t v19 = 0xEB00000000746572;
      uint64_t v20 = 0x636553796C726165;
      uint64_t v21 = 1701602409;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          unint64_t v19 = 0xEF74657263655365;
          uint64_t v20 = 0x6B616873646E6168;
          goto LABEL_10;
        case 2:
          unint64_t v19 = 0xEC00000074657263;
          uint64_t v20 = 0x655372657473616DLL;
          goto LABEL_10;
        case 3:
          unint64_t v19 = 0xEA00000000007374;
          uint64_t v20 = 0x65726365536C6C61;
          goto LABEL_10;
        case 4:
          goto LABEL_11;
        default:
LABEL_10:
          outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
          uint64_t v21 = v20;
          unint64_t v18 = v19;
LABEL_11:
          Logger.logInvalidStateTransition(stateName:event:)(v21, v18, 0xD000000000000015, 0x80000001B5782EF0);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v28 = 2;
          *(unsigned char *)(v28 + 4) = 1;
          uint64_t result = swift_willThrow();
          break;
      }
      break;
  }
  return result;
}

uint64_t specialized SessionKeyManager.postServerFinished(serverFinishedBytes:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v29 = a1;
  unint64_t v30 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v29 - v15;
  MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v29 - v17;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, (uint64_t)&v29 - v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v26 = v29;
      unint64_t v25 = v30;
      outlined copy of Data._Representation(v29, v30);
      specialized SessionKeyManager.State.MasterSecret.init(handshakeSecret:serverFinishedBytes:)((uint64_t)v7, v26, v25, v31, (uint64_t)v16);
      outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      swift_storeEnumTagMultiPayload();
      uint64_t result = outlined assign with take of HandshakeStateMachine?((uint64_t)v16, v3, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v18, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)logger);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, (uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      unint64_t v21 = 0xE400000000000000;
      unint64_t v22 = 0xEB00000000746572;
      uint64_t v23 = 0x636553796C726165;
      uint64_t v24 = 1701602409;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          unint64_t v22 = 0xEF74657263655365;
          uint64_t v23 = 0x6B616873646E6168;
          goto LABEL_10;
        case 2:
          unint64_t v22 = 0xEC00000074657263;
          uint64_t v23 = 0x655372657473616DLL;
          goto LABEL_10;
        case 3:
          unint64_t v22 = 0xEA00000000007374;
          uint64_t v23 = 0x65726365536C6C61;
          goto LABEL_10;
        case 4:
          goto LABEL_11;
        default:
LABEL_10:
          outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
          uint64_t v24 = v23;
          unint64_t v21 = v22;
LABEL_11:
          Logger.logInvalidStateTransition(stateName:event:)(v24, v21, 0xD000000000000012, 0x80000001B5782ED0);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v28 = 2;
          *(unsigned char *)(v28 + 4) = 1;
          uint64_t result = swift_willThrow();
          break;
      }
      break;
  }
  return result;
}

uint64_t specialized SessionKeyManager.clientFinishedPayload()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for SHA384Digest();
  uint64_t v34 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v32 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v29 - v14;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v1, (uint64_t)&v29 - v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 40)];
      uint64_t v23 = (void (*)(uint64_t))MEMORY[0x1E4F24FA0];
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
      unint64_t v24 = dispatch thunk of static Digest.byteCount.getter();
      specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v22, 0x64656873696E6966, 0xE800000000000000, MEMORY[0x1E4FBC860], v24);
      type metadata accessor for SHA384();
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      unint64_t v25 = v32;
      uint64_t v26 = dispatch thunk of HashFunction.finalize()();
      MEMORY[0x1F4188790](v26);
      *(&v29 - 2) = (uint64_t)v6;
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, v23);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v2);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
      uint64_t result = outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v15, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)logger);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v1, (uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      unint64_t v18 = 0xE400000000000000;
      unint64_t v19 = 0xEB00000000746572;
      uint64_t v20 = 0x636553796C726165;
      uint64_t v21 = 1701602409;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          unint64_t v19 = 0xEF74657263655365;
          uint64_t v20 = 0x6B616873646E6168;
          goto LABEL_10;
        case 2:
          unint64_t v19 = 0xEC00000074657263;
          uint64_t v20 = 0x655372657473616DLL;
          goto LABEL_10;
        case 3:
          unint64_t v19 = 0xEA00000000007374;
          uint64_t v20 = 0x65726365536C6C61;
          goto LABEL_10;
        case 4:
          goto LABEL_11;
        default:
LABEL_10:
          outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
          uint64_t v21 = v20;
          unint64_t v18 = v19;
LABEL_11:
          Logger.logInvalidStateTransition(stateName:event:)(v21, v18, 0xD000000000000015, 0x80000001B5782EB0);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v28 = 2;
          *(unsigned char *)(v28 + 4) = 1;
          uint64_t result = swift_willThrow();
          break;
      }
      break;
  }
  return result;
}

uint64_t specialized SessionKeyManager.postClientFinished(clientFinishedBytes:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v29 = a1;
  unint64_t v30 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v29 - v15;
  MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v29 - v17;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, (uint64_t)&v29 - v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v26 = v29;
      unint64_t v25 = v30;
      outlined copy of Data._Representation(v29, v30);
      specialized SessionKeyManager.State.AllSecrets.init(masterSecret:clientFinishedBytes:)((uint64_t)v7, v26, v25, v31, (uint64_t)v16);
      outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      swift_storeEnumTagMultiPayload();
      uint64_t result = outlined assign with take of HandshakeStateMachine?((uint64_t)v16, v3, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      break;
    case 4u:
      goto LABEL_3;
    default:
      outlined destroy of HandshakeStateMachine?((uint64_t)v18, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
LABEL_3:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)logger);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, (uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      unint64_t v21 = 0xE400000000000000;
      unint64_t v22 = 0xEB00000000746572;
      uint64_t v23 = 0x636553796C726165;
      uint64_t v24 = 1701602409;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          unint64_t v22 = 0xEF74657263655365;
          uint64_t v23 = 0x6B616873646E6168;
          goto LABEL_10;
        case 2:
          unint64_t v22 = 0xEC00000074657263;
          uint64_t v23 = 0x655372657473616DLL;
          goto LABEL_10;
        case 3:
          unint64_t v22 = 0xEA00000000007374;
          uint64_t v23 = 0x65726365536C6C61;
          goto LABEL_10;
        case 4:
          goto LABEL_11;
        default:
LABEL_10:
          outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
          uint64_t v24 = v23;
          unint64_t v21 = v22;
LABEL_11:
          Logger.logInvalidStateTransition(stateName:event:)(v24, v21, 0xD000000000000013, 0x80000001B5782E90);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          swift_allocError();
          *(_DWORD *)uint64_t v28 = 2;
          *(unsigned char *)(v28 + 4) = 1;
          uint64_t result = swift_willThrow();
          break;
      }
      break;
  }
  return result;
}

uint64_t type metadata accessor for HandshakeState.ServerHelloState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerHelloState);
}

uint64_t type metadata accessor for HandshakeState.ServerCertificateState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerCertificateState);
}

uint64_t type metadata accessor for HandshakeState.ServerCertificateVerifyState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerCertificateVerifyState);
}

uint64_t specialized static SessionKeyManager.State.EarlySecret.create(clientHello:sessionToResume:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v91[1] = a4;
  uint64_t v104 = a2;
  uint64_t v101 = a1;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for SessionTicket();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  v91[0] = (uint64_t)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for SHA384();
  uint64_t v109 = *(void *)(v105 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v105);
  unint64_t v108 = (char *)v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v115 = (char *)v91 - v10;
  uint64_t v11 = type metadata accessor for SHA384Digest();
  uint64_t v116 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  int64_t v100 = (char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v114 = (char *)v91 - v14;
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  uint64_t v113 = (uint64_t)v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v21 = (char *)v91 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for SymmetricKey();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v95 = (char *)v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v107 = (char *)v91 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v106 = (char *)v91 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  unint64_t v112 = (char *)v91 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v111 = (char *)v91 - v35;
  uint64_t v110 = lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  size_t v36 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v37 = specialized Array.init(repeating:count:)(0, v36);
  uint64_t v103 = a3;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(a3, (uint64_t)v21, &demangling cache variable for type metadata for SessionTicket?);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v102 = v6 + 48;
  int v39 = v38(v21, 1, v5);
  uint64_t v97 = v25;
  uint64_t v96 = v26;
  if (v39 == 1)
  {
    uint64_t v40 = v5;
    outlined destroy of HandshakeStateMachine?((uint64_t)v21, &demangling cache variable for type metadata for SessionTicket?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
LABEL_4:
    *(void *)&v123[0] = v37;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
    SymmetricKey.init<A>(data:)();
    outlined destroy of HandshakeStateMachine?((uint64_t)v24, &demangling cache variable for type metadata for SymmetricKey?);
    goto LABEL_6;
  }
  uint64_t v40 = v5;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v24, &v21[*(int *)(v5 + 36)], v25);
  _s8SwiftTLS14HandshakeStateOWOhTm_1((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SessionTicket);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v24, 0, 1, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1) {
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v111, v24, v25);
LABEL_6:
  *(void *)&v123[0] = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  uint64_t v41 = v113;
  uint64_t v42 = v105;
  static HKDF.extract<A>(inputKeyMaterial:salt:)();
  swift_bridgeObjectRelease();
  uint64_t v43 = v115;
  dispatch thunk of HashFunction.init()();
  uint64_t v44 = (uint64_t)v114;
  dispatch thunk of HashFunction.finalize()();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v109 + 8);
  uint64_t v93 = v109 + 8;
  uint64_t v92 = v45;
  v45(v43, v42);
  unint64_t v46 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v47 = (uint64_t)v112;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v41, 0x646E696220736572, 0xEA00000000007265, v44, v46);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
  v116 += 8;
  uint64_t v94 = v48;
  v48(v44, v11);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v103, (uint64_t)v19, &demangling cache variable for type metadata for SessionTicket?);
  if (v38(v19, 1, v40) == 1)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v19, &demangling cache variable for type metadata for SessionTicket?);
    long long v121 = xmmword_1B577F280;
    long long v49 = *(_OWORD *)(v104 + 64);
    long long v50 = *(_OWORD *)(v104 + 80);
    long long v51 = *(_OWORD *)(v104 + 32);
    v123[3] = *(_OWORD *)(v104 + 48);
    v123[4] = v49;
    v123[5] = v50;
    long long v52 = *(_OWORD *)(v104 + 16);
    v123[0] = *(_OWORD *)v104;
    v123[1] = v52;
    uint64_t v122 = 0;
    uint64_t v124 = *(void *)(v104 + 96);
    v123[2] = v51;
    LOBYTE(v117) = 1;
    uint64_t v53 = MEMORY[0x1E4FBB2B8];
    uint64_t v54 = MEMORY[0x1E4F27EF0];
    uint64_t v119 = MEMORY[0x1E4FBB2B8];
    uint64_t v120 = MEMORY[0x1E4F27EF0];
    *(void *)&long long v118 = &v117;
    *((void *)&v118 + 1) = (char *)&v117 + 1;
    __swift_project_boxed_opaque_existential_1(&v118, MEMORY[0x1E4FBB2B8]);
    outlined retain of ClientHello((uint64_t)v123);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
    uint64_t v55 = 0;
    switch(*((void *)&v121 + 1) >> 62)
    {
      case 1:
        uint64_t v55 = (uint64_t)v121 >> 32;
        break;
      case 2:
        uint64_t v55 = *(void *)(v121 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v55 = BYTE14(v121);
        break;
    }
    LOBYTE(v117) = 0;
    uint64_t v119 = v53;
    uint64_t v120 = v54;
    *(void *)&long long v118 = &v117;
    *((void *)&v118 + 1) = (char *)&v117 + 1;
    __swift_project_boxed_opaque_existential_1(&v118, v53);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
    __int16 v117 = 0;
    uint64_t v119 = v53;
    uint64_t v120 = v54;
    *(void *)&long long v118 = &v117;
    *((void *)&v118 + 1) = &v118;
    __swift_project_boxed_opaque_existential_1(&v118, v53);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
    int64_t v63 = ClientHello.write(into:)((uint64_t *)&v121);
    if (v63 > 0xFFFFFF) {
      goto LABEL_31;
    }
    unsigned int v64 = v63;
    uint64_t v65 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v63), v55);
    if (__OFADD__(v55, v65))
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
    }
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v64, v55 + v65);
    outlined release of ClientHello((uint64_t)v123);
  }
  else
  {
    uint64_t v56 = (uint64_t)v19;
    uint64_t v57 = v91[0];
    outlined init with take of HandshakeState.IdleState(v56, v91[0], (uint64_t (*)(void))type metadata accessor for SessionTicket);
    uint64_t v58 = specialized static SessionKeyManager.State.EarlySecret.tryToResume(session:binderSecret:clientHello:currentTime:)(v57, v47, v104);
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    _s8SwiftTLS14HandshakeStateOWOhTm_1(v57, (uint64_t (*)(void))type metadata accessor for SessionTicket);
    *(void *)&long long v121 = v58;
    *((void *)&v121 + 1) = v60;
    uint64_t v122 = v62;
  }
  dispatch thunk of HashFunction.init()();
  unint64_t v67 = *((void *)&v121 + 1);
  uint64_t v66 = v121;
  uint64_t v68 = v122;
  uint64_t v69 = 0;
  switch(*((void *)&v121 + 1) >> 62)
  {
    case 1:
      uint64_t v69 = (uint64_t)v121 >> 32;
      goto LABEL_19;
    case 2:
      uint64_t v69 = *(void *)(v121 + 24);
LABEL_19:
      outlined copy of Data._Representation(v121, *((unint64_t *)&v121 + 1));
      break;
    case 3:
      break;
    default:
      uint64_t v69 = BYTE14(v121);
      break;
  }
  if (v69 < v68)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v70 = Data._Representation.subscript.getter();
  unint64_t v72 = v71;
  outlined consume of Data._Representation(v66, v67);
  switch(v72 >> 62)
  {
    case 1uLL:
      if (v70 >> 32 < (int)v70) {
        goto LABEL_33;
      }
      outlined copy of Data._Representation(v70, v72);
      uint64_t v73 = v109;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v70, v70 >> 32);
LABEL_26:
      outlined consume of Data._Representation(v70, v72);
      outlined consume of Data._Representation(v70, v72);
      break;
    case 2uLL:
      uint64_t v74 = *(void *)(v70 + 16);
      uint64_t v75 = *(void *)(v70 + 24);
      outlined copy of Data._Representation(v70, v72);
      swift_retain();
      swift_retain();
      uint64_t v73 = v109;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v74, v75);
      swift_release();
      swift_release();
      goto LABEL_26;
    case 3uLL:
      *(void *)((char *)&v118 + 6) = 0;
      *(void *)&long long v118 = 0;
      goto LABEL_28;
    default:
      *(void *)&long long v118 = v70;
      WORD4(v118) = v72;
      BYTE10(v118) = BYTE2(v72);
      BYTE11(v118) = BYTE3(v72);
      BYTE12(v118) = BYTE4(v72);
      BYTE13(v118) = BYTE5(v72);
LABEL_28:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      outlined consume of Data._Representation(v70, v72);
      outlined consume of Data._Representation(v70, v72);
      uint64_t v73 = v109;
      break;
  }
  uint64_t v76 = (uint64_t)v114;
  dispatch thunk of HashFunction.finalize()();
  unint64_t v77 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v78 = v113;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v113, 0x6661727420652063, 0xEB00000000636966, v76, v77);
  unint64_t v79 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v78, 0x616D207078652065, 0xEC00000072657473, v76, v79);
  unint64_t v80 = v115;
  dispatch thunk of HashFunction.init()();
  uint64_t v81 = (uint64_t)v100;
  dispatch thunk of HashFunction.finalize()();
  v92(v80, v42);
  unint64_t v82 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v83 = v95;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v78, 0x64657669726564, 0xE700000000000000, v81, v82);
  uint64_t v84 = v94;
  v94(v81, v11);
  v84(v76, v11);
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v78, v99);
  uint64_t v85 = v96;
  uint64_t v86 = v97;
  (*(void (**)(char *, uint64_t))(v96 + 8))(v111, v97);
  uint64_t v87 = v101;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v101, v108, v42);
  uint64_t v88 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  uint64_t v89 = *(void (**)(uint64_t, char *, uint64_t))(v85 + 32);
  v89(v87 + v88[9], v83, v86);
  v89(v87 + v88[10], v112, v86);
  v89(v87 + v88[11], v106, v86);
  v89(v87 + v88[12], v107, v86);
  return v121;
}

uint64_t specialized SessionKeyManager.State.HandshakeSecret.init(earlySecret:ecdheSecret:serverHelloBytes:resumptionFailed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  unint64_t v84 = a4;
  uint64_t v85 = a2;
  uint64_t v82 = a3;
  uint64_t v87 = a7;
  v88[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = type metadata accessor for SHA384();
  uint64_t v11 = *(void (***)(char *, uint64_t))(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v77 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for SHA384Digest();
  uint64_t v80 = *(void *)(v74 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v74);
  unint64_t v71 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v86 = (char *)&v69 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  uint64_t v78 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v81 = (uint64_t)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v69 - v19;
  uint64_t v21 = type metadata accessor for SymmetricKey();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v70 = (void (**)(char *, uint64_t))((char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v73 = (char *)&v69 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v69 - v27;
  uint64_t v29 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret)
               + 36);
  uint64_t v83 = a1;
  uint64_t v75 = v22;
  uint64_t v76 = v21;
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16))(v28, a1 + v29, v21);
  uint64_t v79 = v16;
  unint64_t v72 = v28;
  if (a6)
  {
    lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
    uint64_t v69 = a5;
    uint64_t v31 = v74;
    size_t v32 = dispatch thunk of static Digest.byteCount.getter();
    uint64_t v33 = specialized Array.init(repeating:count:)(0, v32);
    v88[0] = v33;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
    uint64_t v34 = v73;
    SymmetricKey.init<A>(data:)();
    v88[0] = v33;
    lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
    lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
    static HKDF.extract<A>(inputKeyMaterial:salt:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = v77;
    dispatch thunk of HashFunction.init()();
    uint64_t v36 = (uint64_t)v86;
    dispatch thunk of HashFunction.finalize()();
    v11[1](v35, v10);
    unint64_t v37 = dispatch thunk of static Digest.byteCount.getter();
    uint64_t v38 = (char *)v70;
    specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)((uint64_t)v20, 0x64657669726564, 0xE700000000000000, v36, v37);
    uint64_t v39 = v36;
    uint64_t v40 = v79;
    uint64_t v41 = v31;
    a5 = v69;
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v39, v41);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v20, v40);
    uint64_t v43 = v75;
    uint64_t v42 = v76;
    uint64_t v44 = *(void (**)(char *, uint64_t))(v75 + 8);
    uint64_t v45 = v34;
    unint64_t v46 = v72;
    v44(v45, v76);
    v44(v46, v42);
    uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v43 + 32))(v46, v38, v42);
  }
  MEMORY[0x1F4188790](v30);
  *(&v69 - 2) = v85;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  ((void (*)(uint64_t, uint64_t, uint64_t))v11[2])(v87, v83, v10);
  uint64_t v47 = 0;
  switch(v84 >> 62)
  {
    case 1uLL:
      uint64_t v47 = v82 >> 32;
      break;
    case 2uLL:
      uint64_t v47 = *(void *)(v82 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v47 = BYTE6(v84);
      break;
  }
  if (v47 < a5)
  {
    __break(1u);
LABEL_17:
    __break(1u);
  }
  uint64_t v70 = v11;
  uint64_t v48 = Data._Representation.subscript.getter();
  uint64_t v50 = v48;
  unint64_t v51 = v49;
  switch(v49 >> 62)
  {
    case 1uLL:
      if (v48 >> 32 < (int)v48) {
        goto LABEL_17;
      }
      outlined copy of Data._Representation(v48, v49);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v50, v50 >> 32);
      break;
    case 2uLL:
      uint64_t v52 = *(void *)(v48 + 16);
      uint64_t v53 = *(void *)(v48 + 24);
      outlined copy of Data._Representation(v48, v49);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v52, v53);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      memset(v88, 0, 14);
      goto LABEL_14;
    default:
      v88[0] = v48;
      LOWORD(v88[1]) = v49;
      BYTE2(v88[1]) = BYTE2(v49);
      BYTE3(v88[1]) = BYTE3(v49);
      BYTE4(v88[1]) = BYTE4(v49);
      BYTE5(v88[1]) = BYTE5(v49);
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
LABEL_14:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(v50, v51);
  outlined consume of Data._Representation(v50, v51);
  uint64_t v54 = v10;
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  uint64_t v55 = (uint64_t)v86;
  dispatch thunk of HashFunction.finalize()();
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  uint64_t v56 = v74;
  unint64_t v57 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v58 = v81;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v81, 0x6172742073682063, 0xEC00000063696666, v55, v57);
  unint64_t v59 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v58, 0x6172742073682073, 0xEC00000063696666, v55, v59);
  uint64_t v60 = v77;
  dispatch thunk of HashFunction.init()();
  uint64_t v61 = (uint64_t)v71;
  dispatch thunk of HashFunction.finalize()();
  v70[1](v60, v54);
  unint64_t v62 = dispatch thunk of static Digest.byteCount.getter();
  int64_t v63 = v73;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v58, 0x64657669726564, 0xE700000000000000, v61, v62);
  outlined consume of Data._Representation(v82, v84);
  uint64_t v64 = v75;
  uint64_t v65 = v76;
  uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  v66(v85, v76);
  outlined destroy of HandshakeStateMachine?(v83, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  unint64_t v67 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
  v67(v61, v56);
  v67((uint64_t)v86, v56);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v58, v79);
  v66((uint64_t)v72, v65);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v87 + *(int *)(v69 + 36), v63, v65);
}

uint64_t specialized SessionKeyManager.State.HandshakeSecret.addMessageToTranscriptHash(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 >> 62;
  unsigned __int8 v4 = BYTE6(a2);
  uint64_t v5 = 0;
  switch(v3)
  {
    case 1uLL:
      uint64_t v5 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = v4;
      break;
  }
  if (v5 < a3)
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  uint64_t v6 = Data._Representation.subscript.getter();
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < (int)v6) {
        goto LABEL_15;
      }
      outlined copy of Data._Representation(v6, v7);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v8, v8 >> 32);
LABEL_10:
      outlined consume of Data._Representation(v8, v9);
      return outlined consume of Data._Representation(v8, v9);
    case 2uLL:
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v11 = *(void *)(v6 + 24);
      outlined copy of Data._Representation(v6, v7);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v10, v11);
      swift_release();
      swift_release();
      goto LABEL_10;
    default:
      type metadata accessor for SHA384();
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      dispatch thunk of HashFunction.update(bufferPointer:)();
      outlined consume of Data._Representation(v8, v9);
      return outlined consume of Data._Representation(v8, v9);
  }
}

uint64_t specialized SessionKeyManager.State.MasterSecret.init(handshakeSecret:serverFinishedBytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v57 = a4;
  uint64_t v58 = a2;
  uint64_t v8 = 0;
  v59[7] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = type metadata accessor for SHA384Digest();
  uint64_t v56 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v55 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = type metadata accessor for SymmetricKey();
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v52 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v44 - v15;
  uint64_t v50 = lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  size_t v17 = dispatch thunk of static Digest.byteCount.getter();
  v59[0] = specialized Array.init(repeating:count:)(0, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  SymmetricKey.init<A>(data:)();
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  unint64_t v51 = v16;
  v59[5] = v16;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v46 = 0;
  unint64_t v18 = a3;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  uint64_t v20 = a5 + *(int *)(v19 + 36);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  SymmetricKey.init<A>(data:)();
  uint64_t v21 = type metadata accessor for SHA384();
  uint64_t v22 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(a5, a1, v21);
  switch(v18 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v58 >> 32;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(v58 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = BYTE6(v18);
      break;
  }
  if (v8 < v57)
  {
    __break(1u);
LABEL_16:
    __break(1u);
  }
  uint64_t v23 = Data._Representation.subscript.getter();
  uint64_t v25 = v23;
  unint64_t v26 = v24;
  uint64_t v57 = v20;
  uint64_t v47 = v9;
  unint64_t v48 = v18;
  switch(v24 >> 62)
  {
    case 1uLL:
      uint64_t v45 = a1;
      if (v23 >> 32 < (int)v23) {
        goto LABEL_16;
      }
      outlined copy of Data._Representation(v23, v24);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v25, v25 >> 32);
      outlined consume of Data._Representation(v25, v26);
      outlined consume of Data._Representation(v25, v26);
      uint64_t v22 = v45;
      break;
    case 2uLL:
      uint64_t v45 = a1;
      uint64_t v28 = *(void *)(v23 + 16);
      uint64_t v27 = *(void *)(v23 + 24);
      outlined copy of Data._Representation(v23, v24);
      swift_retain();
      swift_retain();
      uint64_t v22 = v45;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v28, v27);
      swift_release();
      swift_release();
      goto LABEL_13;
    case 3uLL:
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      memset(v59, 0, 14);
      goto LABEL_12;
    default:
      v59[0] = v23;
      LOWORD(v59[1]) = v24;
      BYTE2(v59[1]) = BYTE2(v24);
      BYTE3(v59[1]) = BYTE3(v24);
      BYTE4(v59[1]) = BYTE4(v24);
      BYTE5(v59[1]) = BYTE5(v24);
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
LABEL_12:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_13:
      outlined consume of Data._Representation(v25, v26);
      outlined consume of Data._Representation(v25, v26);
      break;
  }
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  uint64_t v29 = (uint64_t)v55;
  dispatch thunk of HashFunction.finalize()();
  uint64_t v30 = v49;
  uint64_t v31 = a5 + *(int *)(v19 + 40);
  uint64_t v32 = a5;
  uint64_t v33 = v19;
  uint64_t v35 = v53;
  uint64_t v34 = v54;
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
  v36(v31, v22 + *(int *)(v49 + 40), v54);
  v36(v32 + *(int *)(v33 + 44), v22 + *(int *)(v30 + 44), v34);
  uint64_t v37 = v47;
  unint64_t v38 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v39 = v57;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v57, 0x6172742070612063, 0xEC00000063696666, v29, v38);
  unint64_t v40 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v39, 0x6172742070612073, 0xEC00000063696666, v29, v40);
  unint64_t v41 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v42 = v52;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v39, 0x7473616D20707865, 0xEA00000000007265, v29, v41);
  outlined consume of Data._Representation(v58, v48);
  outlined destroy of HandshakeStateMachine?(v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v29, v37);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v51, v34);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v32 + *(int *)(v33 + 56), v42, v34);
}

uint64_t specialized SessionKeyManager.State.AllSecrets.init(masterSecret:clientFinishedBytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v56 = a4;
  unint64_t v54 = a3;
  v57[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = type metadata accessor for SymmetricKey();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v50 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SHA384Digest();
  uint64_t v48 = *(void *)(v10 - 8);
  uint64_t v49 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v47 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for SHA384();
  uint64_t v12 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  uint64_t v16 = a1 + v15[12];
  uint64_t v51 = v8;
  size_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v17(a5, v16, v7);
  uint64_t v18 = a1 + v15[13];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  uint64_t v20 = v18;
  unint64_t v21 = v54;
  v17(a5 + *(int *)(v19 + 36), v20, v7);
  uint64_t v43 = v15;
  uint64_t v44 = v19;
  uint64_t v22 = a1 + v15[14];
  uint64_t v23 = *(int *)(v19 + 40);
  unint64_t v24 = v14;
  uint64_t v25 = a1;
  uint64_t v46 = a5;
  uint64_t v52 = v7;
  v17(a5 + v23, v22, v7);
  uint64_t v26 = v53;
  uint64_t v45 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v24, a1, v53);
  uint64_t v27 = 0;
  uint64_t v28 = v55;
  switch(v21 >> 62)
  {
    case 1uLL:
      uint64_t v27 = v55 >> 32;
      break;
    case 2uLL:
      uint64_t v27 = *(void *)(v55 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v27 = BYTE6(v21);
      break;
  }
  if (v27 < v56)
  {
    __break(1u);
LABEL_16:
    __break(1u);
  }
  uint64_t v29 = Data._Representation.subscript.getter();
  uint64_t v31 = v29;
  unint64_t v32 = v30;
  switch(v30 >> 62)
  {
    case 1uLL:
      if (v29 >> 32 < (int)v29) {
        goto LABEL_16;
      }
      outlined copy of Data._Representation(v29, v30);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v31, v31 >> 32);
      outlined consume of Data._Representation(v31, v32);
      outlined consume of Data._Representation(v31, v32);
      uint64_t v28 = v55;
LABEL_11:
      uint64_t v36 = v26;
      break;
    case 2uLL:
      unint64_t v33 = v21;
      uint64_t v35 = *(void *)(v29 + 16);
      uint64_t v34 = *(void *)(v29 + 24);
      outlined copy of Data._Representation(v29, v30);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v35, v34);
      unint64_t v21 = v33;
      uint64_t v28 = v55;
      swift_release();
      swift_release();
      outlined consume of Data._Representation(v31, v32);
      outlined consume of Data._Representation(v31, v32);
      goto LABEL_11;
    case 3uLL:
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
      memset(v57, 0, 14);
      goto LABEL_13;
    default:
      v57[0] = v29;
      LOWORD(v57[1]) = v30;
      BYTE2(v57[1]) = BYTE2(v30);
      BYTE3(v57[1]) = BYTE3(v30);
      BYTE4(v57[1]) = BYTE4(v30);
      BYTE5(v57[1]) = BYTE5(v30);
      lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
LABEL_13:
      uint64_t v36 = v26;
      dispatch thunk of HashFunction.update(bufferPointer:)();
      outlined consume of Data._Representation(v31, v32);
      outlined consume of Data._Representation(v31, v32);
      break;
  }
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
  uint64_t v37 = (uint64_t)v47;
  dispatch thunk of HashFunction.finalize()();
  uint64_t v38 = a1 + v43[9];
  lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  uint64_t v39 = v49;
  unint64_t v40 = dispatch thunk of static Digest.byteCount.getter();
  unint64_t v41 = v50;
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v38, 0x7473616D20736572, 0xEA00000000007265, v37, v40);
  outlined consume of Data._Representation(v28, v21);
  outlined destroy of HandshakeStateMachine?(v25, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v37, v39);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v24, v36);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 32))(v46 + *(int *)(v44 + 44), v41, v52);
}

uint64_t specialized static SessionKeyManager.State.EarlySecret.tryToResume(session:binderSecret:clientHello:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v116 = a3;
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  uint64_t v6 = *(void **)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101);
  uint64_t v106 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SHA384();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v104 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SHA384Digest();
  uint64_t v100 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v105 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.timeIntervalSince(_:)();
  double v17 = v16 * 1000.0;
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_72;
  }
  if (v17 <= -1.0)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (v17 >= 4294967300.0)
  {
LABEL_73:
    __break(1u);
LABEL_74:
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    goto LABEL_8;
  }
  uint64_t v97 = v8;
  uint64_t v98 = v6;
  unsigned int v18 = v17;
  uint64_t v19 = type metadata accessor for SessionTicket();
  unsigned int v20 = *(_DWORD *)(a1 + *(int *)(v19 + 24)) + v18;
  unint64_t v21 = (char **)(a1 + *(int *)(v19 + 32));
  uint64_t v8 = *v21;
  unint64_t v22 = (unint64_t)v21[1];
  uint64_t v110 = v21[2];
  unint64_t v114 = v22;
  outlined copy of Data._Representation((uint64_t)v8, v22);
  uint64_t v107 = lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
  uint64_t v23 = dispatch thunk of static Digest.byteCount.getter();
  uint64_t v123 = specialized Data._Representation.init(count:)(v23);
  *(void *)&long long v124 = v24;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(&v123, 0);
  unint64_t v102 = 0;
  uint64_t v113 = v123;
  unint64_t v111 = v124;
  uint64_t v25 = 0;
  a1 = v9;
  uint64_t v95 = v12;
  uint64_t v103 = v11;
  uint64_t v96 = a2;
  uint64_t v99 = v5;
  switch((unint64_t)v124 >> 62)
  {
    case 1uLL:
      uint64_t v25 = (int)v113;
      break;
    case 2uLL:
      uint64_t v25 = *(void *)(v113 + 16);
      break;
    default:
      break;
  }
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKey.OfferedPSKs.PSKIdentity>);
  uint64_t v26 = swift_allocObject();
  long long v115 = xmmword_1B577F940;
  *(_OWORD *)(v26 + 16) = xmmword_1B577F940;
  unint64_t v27 = v114;
  *(void *)(v26 + 32) = v8;
  *(void *)(v26 + 40) = v27;
  *(void *)(v26 + 48) = v110;
  unsigned int v93 = v20;
  *(_DWORD *)(v26 + 56) = v20;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v115;
  uint64_t v29 = v113;
  unint64_t v30 = v111;
  *(void *)(v28 + 32) = v113;
  *(void *)(v28 + 40) = v30;
  *(void *)(v28 + 48) = v25;
  uint64_t v6 = *(void **)(v116 + 96);
  outlined copy of Data._Representation((uint64_t)v8, v27);
  uint64_t v109 = v26;
  swift_bridgeObjectRetain();
  uint64_t v108 = v28;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v29, v30);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_74;
  }
LABEL_8:
  uint64_t v31 = (uint64_t)&v123;
  unint64_t v33 = v6[2];
  unint64_t v32 = v6[3];
  uint64_t v112 = v14;
  uint64_t v89 = a1;
  uint64_t v94 = v8;
  if (v33 >= v32 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v6);
  }
  v6[2] = v33 + 1;
  uint64_t v34 = &v6[5 * v33];
  uint64_t v35 = v108;
  v34[4] = v109;
  v34[5] = v35;
  v34[6] = 0;
  v34[7] = 0;
  *((unsigned char *)v34 + 64) = 11;
  uint64_t v36 = v116;
  *(void *)(v116 + 96) = v6;
  long long v121 = xmmword_1B577F280;
  uint64_t v122 = 0;
  uint64_t v37 = *(void *)(v36 + 72);
  uint64_t v38 = *(void *)(v36 + 80);
  uint64_t v39 = *(void *)(v36 + 88);
  LOWORD(v123) = *(_WORD *)v36;
  long long v124 = *(_OWORD *)(v36 + 8);
  long long v125 = *(_OWORD *)(v36 + 24);
  long long v126 = *(_OWORD *)(v36 + 40);
  long long v127 = *(_OWORD *)(v36 + 56);
  uint64_t v128 = v37;
  uint64_t v129 = v38;
  uint64_t v130 = v39;
  uint64_t v131 = v6;
  LOBYTE(v117[0]) = 1;
  unint64_t v40 = MEMORY[0x1E4FBB2B8];
  unint64_t v41 = MEMORY[0x1E4F27EF0];
  uint64_t v119 = MEMORY[0x1E4FBB2B8];
  uint64_t v120 = MEMORY[0x1E4F27EF0];
  *(void *)&long long v118 = v117;
  *((void *)&v118 + 1) = (char *)v117 + 1;
  __swift_project_boxed_opaque_existential_1(&v118, MEMORY[0x1E4FBB2B8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
  uint64_t v42 = 0;
  switch(*((void *)&v121 + 1) >> 62)
  {
    case 1:
      uint64_t v42 = (uint64_t)v121 >> 32;
      break;
    case 2:
      uint64_t v42 = *(void *)(v121 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v42 = BYTE14(v121);
      break;
  }
  LOBYTE(v117[0]) = 0;
  uint64_t v43 = v117;
  uint64_t v119 = v40;
  uint64_t v120 = v41;
  *(void *)&long long v118 = v117;
  *((void *)&v118 + 1) = (char *)v117 + 1;
  __swift_project_boxed_opaque_existential_1(&v118, v40);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
  LOWORD(v117[0]) = 0;
  uint64_t v119 = v40;
  uint64_t v120 = v41;
  *(void *)&long long v118 = v117;
  *((void *)&v118 + 1) = (char *)v117 + 2;
  __swift_project_boxed_opaque_existential_1(&v118, v40);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
  uint64_t v44 = &v123;
  int64_t v45 = ClientHello.write(into:)((uint64_t *)&v121);
  if (v45 > 0xFFFFFF)
  {
    __break(1u);
  }
  else
  {
    unint64_t v40 = v45;
    uint64_t v44 = (uint64_t *)&v121;
    uint64_t v46 = specialized ByteBuffer.setInteger<A>(_:at:as:)(SBYTE2(v45), v42);
    if (!__OFADD__(v42, v46))
    {
      specialized ByteBuffer.setInteger<A>(_:at:as:)(v40, v42 + v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = *((void *)&v121 + 1);
      uint64_t v47 = v121;
      uint64_t v49 = v122;
      unint64_t v50 = *((void *)&v121 + 1);
      uint64_t v42 = v112;
      uint64_t v51 = v103;
      unint64_t v90 = *((void *)&v121 + 1) >> 62;
      switch(*((void *)&v121 + 1) >> 62)
      {
        case 1:
          if ((uint64_t)v121 >> 32 < v122) {
            goto LABEL_82;
          }
          if (v122 < (int)v121) {
            goto LABEL_83;
          }
          if (v122) {
            goto LABEL_23;
          }
          if (DWORD1(v121))
          {
            if ((uint64_t)v121 > 0xEFFFFFFFFLL)
            {
LABEL_23:
              if (SDWORD1(v121) < (int)v122)
              {
LABEL_88:
                __break(1u);
LABEL_89:
                __break(1u);
LABEL_90:
                __break(1u);
              }
              uint64_t v52 = v121 & 0xFFFFFFFF00000000 | v122;
              outlined copy of Data._Representation(v121, *((unint64_t *)&v121 + 1));
              unint64_t v50 = v48 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000;
            }
            else
            {
              outlined copy of Data._Representation(v121, *((unint64_t *)&v121 + 1));
              uint64_t v52 = specialized Data.InlineData.init(_:count:)(v47, v48 & 0x3FFFFFFFFFFFFFFFLL, v47 >> 32);
              uint64_t v60 = v59;
              outlined consume of Data._Representation(v47, v50);
              unint64_t v50 = v60 & 0xFFFFFFFFFFFFFFLL;
            }
          }
          else
          {
            uint64_t v52 = 0;
            unint64_t v50 = 0xC000000000000000;
          }
LABEL_48:
          uint64_t v87 = v48;
          uint64_t v88 = v47;
          uint64_t v61 = dispatch thunk of static Digest.byteCount.getter();
          specialized BidirectionalCollection.dropLast(_:)(v61 + 3, v52, v50, (uint64_t *)&v118);
          unint64_t v62 = *((void *)&v118 + 1);
          uint64_t v39 = v118;
          lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
          int64_t v63 = v104;
          dispatch thunk of HashFunction.init()();
          unint64_t v102 = v62;
          switch(v62 >> 62)
          {
            case 1uLL:
              if (v39 >> 32 < (int)v39) {
                goto LABEL_87;
              }
              outlined copy of Data._Representation(v39, v62);
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v39, v39 >> 32);
              break;
            case 2uLL:
              uint64_t v64 = *(void *)(v39 + 16);
              uint64_t v65 = *(void *)(v39 + 24);
              outlined copy of Data._Representation(v39, v62);
              swift_retain();
              swift_retain();
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v64, v65);
              swift_release();
              swift_release();
              break;
            case 3uLL:
              *(void *)((char *)&v118 + 6) = 0;
              *(void *)&long long v118 = 0;
              goto LABEL_54;
            default:
              *(void *)&long long v118 = v39;
              WORD4(v118) = v62;
              BYTE10(v118) = BYTE2(v62);
              BYTE11(v118) = BYTE3(v62);
              BYTE12(v118) = BYTE4(v62);
              BYTE13(v118) = BYTE5(v62);
LABEL_54:
              dispatch thunk of HashFunction.update(bufferPointer:)();
              break;
          }
          outlined consume of Data._Representation(v39, v62);
          uint64_t v43 = v105;
          dispatch thunk of HashFunction.finalize()();
          (*(void (**)(char *, uint64_t))(v95 + 8))(v63, v51);
          unint64_t v66 = dispatch thunk of static Digest.byteCount.getter();
          unint64_t v67 = v106;
          uint64_t v68 = specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v96, 0x64656873696E6966, 0xE800000000000000, MEMORY[0x1E4FBC860], v66);
          MEMORY[0x1F4188790](v68);
          *(&v87 - 2) = (uint64_t)v67;
          lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x1E4F24FA0]);
          uint64_t v69 = v97;
          uint64_t v70 = v99;
          dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
          uint64_t v119 = v70;
          uint64_t v120 = lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v118);
          unint64_t v72 = v98;
          ((void (*)(uint64_t *, char *, uint64_t))v98[2])(boxed_opaque_existential_1, v69, v70);
          __swift_project_boxed_opaque_existential_1(&v118, v119);
          dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
          a1 = v117[0];
          unint64_t v40 = v117[1];
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
          ((void (*)(char *, uint64_t))v72[1])(v69, v70);
          uint64_t v44 = (uint64_t *)(v40 >> 62);
          uint64_t v31 = 0;
          unint64_t v41 = v90;
          switch(v40 >> 62)
          {
            case 1uLL:
              uint64_t v31 = (int)a1;
              break;
            case 2uLL:
              uint64_t v31 = *(void *)(a1 + 16);
              break;
            default:
              break;
          }
          outlined copy of Data._Representation(a1, v40);
          outlined consume of Data._Representation(v113, v111);
          uint64_t v73 = 0;
          switch((int)v41)
          {
            case 1:
              uint64_t v73 = v88 >> 32;
              break;
            case 2:
              uint64_t v73 = *(void *)(v88 + 24);
              break;
            case 3:
              break;
            default:
              uint64_t v73 = BYTE6(v87);
              break;
          }
          uint64_t v74 = 0;
          switch((int)v44)
          {
            case 1:
              uint64_t v74 = a1 >> 32;
              break;
            case 2:
              uint64_t v74 = *(void *)(a1 + 24);
              break;
            case 3:
              break;
            default:
              uint64_t v74 = BYTE6(v40);
              break;
          }
          BOOL v75 = __OFSUB__(v74, v31);
          uint64_t v76 = v74 - v31;
          if (v75) {
            goto LABEL_77;
          }
          ByteBuffer.setImmutableBuffer(_:at:)(a1, v40, v31, v73 - v76);
          uint64_t v44 = *(uint64_t **)(v116 + 96);
          unint64_t v41 = v44[2];
          uint64_t v42 = swift_allocObject();
          *(_OWORD *)(v42 + 16) = v115;
          uint64_t v77 = (uint64_t)v94;
          unint64_t v78 = v114;
          *(void *)(v42 + 32) = v94;
          *(void *)(v42 + 40) = v78;
          *(void *)(v42 + 48) = v110;
          *(_DWORD *)(v42 + 56) = v93;
          uint64_t v43 = (void *)swift_allocObject();
          *((_OWORD *)v43 + 1) = v115;
          v43[4] = a1;
          v43[5] = v40;
          v43[6] = v31;
          uint64_t v31 = v77;
          outlined copy of Data._Representation(v77, v78);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_68;
          }
          goto LABEL_78;
        case 2:
          int64_t v55 = *(void *)(v121 + 24);
          if (v55 < v122) {
            goto LABEL_84;
          }
          if (v122 < *(void *)(v121 + 16)) {
            goto LABEL_85;
          }
          uint64_t v56 = *((void *)&v121 + 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v122) {
            goto LABEL_28;
          }
          if (v55)
          {
            if (v55 > 14)
            {
LABEL_28:
              if (v122 > 2147483646 || v55 > 2147483646)
              {
                type metadata accessor for Data.RangeReference();
                uint64_t v52 = swift_allocObject();
                *(void *)(v52 + 16) = v49;
                *(void *)(v52 + 24) = v55;
                unint64_t v50 = v56 | 0x8000000000000000;
                swift_retain();
              }
              else
              {
                if (v122 < (uint64_t)0xFFFFFFFF80000000 || v55 < (uint64_t)0xFFFFFFFF80000000) {
                  goto LABEL_89;
                }
                if ((int)v55 < (int)v122) {
                  goto LABEL_90;
                }
                unint64_t v50 = v56 | 0x4000000000000000;
                swift_retain();
                uint64_t v52 = v49 | ((unint64_t)v55 << 32);
              }
            }
            else
            {
              swift_retain();
              swift_retain();
              uint64_t v52 = specialized Data.InlineData.init(_:count:)(v47, v48 & 0x3FFFFFFFFFFFFFFFLL, v55);
              uint64_t v58 = v57;
              swift_release();
              swift_release();
              unint64_t v50 = v58 & 0xFFFFFFFFFFFFFFLL;
            }
          }
          else
          {
            uint64_t v52 = 0;
            unint64_t v50 = 0xC000000000000000;
          }
          uint64_t v42 = v112;
          goto LABEL_48;
        case 3:
          outlined consume of Data._Representation(v121, *((unint64_t *)&v121 + 1));
          if (v49 > 0) {
            goto LABEL_86;
          }
          uint64_t v52 = v47;
          if (!v49) {
            goto LABEL_48;
          }
          __break(1u);
LABEL_37:
          outlined consume of Data._Representation(v47, v50);
          unint64_t v50 = v48 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v52 = v47;
          goto LABEL_48;
        default:
          if (BYTE14(v121) < v122) {
            goto LABEL_81;
          }
          if (!v122) {
            goto LABEL_37;
          }
          uint64_t v52 = specialized Data.InlineSlice.init(_:range:)(v121, *((void *)&v121 + 1) & 0xFFFFFFFFFFFFFFLL, v122, BYTE14(v121));
          uint64_t v54 = v53;
          outlined consume of Data._Representation(v47, v50);
          unint64_t v50 = v54 | 0x4000000000000000;
          goto LABEL_48;
      }
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
LABEL_68:
  unint64_t v79 = v102;
  if (!v41)
  {
    __break(1u);
    goto LABEL_80;
  }
  if (v41 > v44[2])
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v80 = &v44[5 * v41];
  uint64_t v81 = *(v80 - 1);
  unint64_t v82 = *v80;
  unint64_t v83 = v80[1];
  uint64_t v84 = v80[2];
  *(v80 - 1) = v42;
  *uint64_t v80 = (uint64_t)v43;
  v80[1] = 0;
  v80[2] = 0;
  char v85 = *((unsigned char *)v80 + 24);
  *((unsigned char *)v80 + 24) = 11;
  outlined consume of Extension(v81, v82, v83, v84, v85);
  outlined consume of Data._Representation(v39, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v31, v114);
  *(void *)(v116 + 96) = v44;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v106, v101);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v105, v112);
  outlined consume of Data._Representation(a1, v40);
  return v121;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = (char *)(v8 + v12);
  if (v8) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  return closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(v8, v14, a4);
}

uint64_t outlined consume of Extension.KeyShare.KeyShareEntry?(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return outlined consume of Data._Representation(a2, a3);
  }
  return result;
}

uint64_t outlined copy of Extension.KeyShare.KeyShareEntry?(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return outlined copy of Data._Representation(a2, a3);
  }
  return result;
}

uint64_t type metadata accessor for HandshakeState.ServerHelloState.SessionData(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerHelloState.SessionData);
}

uint64_t outlined init with copy of HandshakeStateMachine.Configuration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of HandshakeStateMachine.Configuration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = a2[2];
        unint64_t v10 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v10 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        else
        {
          uint64_t v23 = a2[3];
          outlined copy of Data._Representation(v23, v10);
          *(void *)(a1 + 24) = v23;
          *(void *)(a1 + 32) = v10;
        }
        *(void *)(a1 + 40) = a2[5];
        unint64_t v24 = a2[7];
        if (v24 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        else
        {
          uint64_t v43 = a2[6];
          outlined copy of Data._Representation(v43, a2[7]);
          *(void *)(a1 + 48) = v43;
          *(void *)(a1 + 56) = v24;
        }
        *(void *)(a1 + 64) = a2[8];
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        long long v44 = *((_OWORD *)a2 + 6);
        *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
        *(_OWORD *)(a1 + 96) = v44;
        uint64_t v45 = a2[15];
        *(void *)(a1 + 112) = a2[14];
        *(void *)(a1 + 120) = v45;
        *(void *)(a1 + 128) = a2[16];
        long long v46 = *((_OWORD *)a2 + 10);
        *(_OWORD *)(a1 + 160) = v46;
        uint64_t v47 = v46;
        uint64_t v48 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v46 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v48(a1 + 136, a2 + 17, v47);
        uint64_t v49 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v50 = *(int *)(v49 + 36);
        uint64_t v51 = (char *)(a1 + v50);
        uint64_t v52 = (char *)a2 + v50;
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v54 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v51, v52, v54);
            int64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v56 = v55[9];
            uint64_t v57 = &v51[v56];
            uint64_t v437 = v49;
            uint64_t v58 = &v52[v56];
            uint64_t v59 = type metadata accessor for SymmetricKey();
            uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
            uint64_t v61 = v58;
            uint64_t v49 = v437;
            v60(v57, v61, v59);
            v60(&v51[v55[10]], &v52[v55[10]], v59);
            v60(&v51[v55[11]], &v52[v55[11]], v59);
            v60(&v51[v55[12]], &v52[v55[12]], v59);
            goto LABEL_103;
          case 1u:
            uint64_t v230 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 16))(v51, v52, v230);
            uint64_t v231 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v232 = v231[9];
            uint64_t v233 = &v51[v232];
            uint64_t v234 = &v52[v232];
            uint64_t v438 = v49;
            uint64_t v235 = type metadata accessor for SymmetricKey();
            uint64_t v236 = *(void (**)(char *, char *, uint64_t))(*(void *)(v235 - 8) + 16);
            v236(v233, v234, v235);
            v236(&v51[v231[10]], &v52[v231[10]], v235);
            uint64_t v237 = v235;
            uint64_t v49 = v438;
            v236(&v51[v231[11]], &v52[v231[11]], v237);
            goto LABEL_103;
          case 2u:
            uint64_t v238 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v238 - 8) + 16))(v51, v52, v238);
            uint64_t v239 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v240 = v239[9];
            uint64_t v241 = &v51[v240];
            uint64_t v242 = &v52[v240];
            uint64_t v439 = v49;
            uint64_t v243 = type metadata accessor for SymmetricKey();
            uint64_t v244 = *(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 16);
            v244(v241, v242, v243);
            v244(&v51[v239[10]], &v52[v239[10]], v243);
            v244(&v51[v239[11]], &v52[v239[11]], v243);
            v244(&v51[v239[12]], &v52[v239[12]], v243);
            v244(&v51[v239[13]], &v52[v239[13]], v243);
            uint64_t v245 = v243;
            uint64_t v49 = v439;
            v244(&v51[v239[14]], &v52[v239[14]], v245);
            goto LABEL_103;
          case 3u:
            uint64_t v246 = type metadata accessor for SymmetricKey();
            uint64_t v247 = *(void (**)(char *, char *, uint64_t))(*(void *)(v246 - 8) + 16);
            v247(v51, v52, v246);
            uint64_t v248 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v247(&v51[v248[9]], &v52[v248[9]], v246);
            v247(&v51[v248[10]], &v52[v248[10]], v246);
            v247(&v51[v248[11]], &v52[v248[11]], v246);
LABEL_103:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
            break;
        }
        uint64_t v249 = *(int *)(v49 + 40);
        uint64_t v250 = (char *)(a1 + v249);
        uint64_t v251 = (char *)a2 + v249;
        uint64_t v252 = (int *)type metadata accessor for SessionTicket();
        uint64_t v253 = *((void *)v252 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v253 + 48))(v251, 1, v252))
        {
          uint64_t v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v250, v251, *(void *)(*(void *)(v254 - 8) + 64));
        }
        else
        {
          uint64_t v255 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v255 - 8) + 16))(v250, v251, v255);
          *(_DWORD *)&v250[v252[5]] = *(_DWORD *)&v251[v252[5]];
          *(_DWORD *)&v250[v252[6]] = *(_DWORD *)&v251[v252[6]];
          uint64_t v256 = v252[7];
          uint64_t v257 = (uint64_t *)&v250[v256];
          uint64_t v258 = &v251[v256];
          uint64_t v259 = *(void *)&v251[v256];
          unint64_t v260 = *(void *)&v251[v256 + 8];
          outlined copy of Data._Representation(v259, v260);
          *uint64_t v257 = v259;
          v257[1] = v260;
          v257[2] = *((void *)v258 + 2);
          uint64_t v261 = v252[8];
          uint64_t v262 = (uint64_t *)&v250[v261];
          uint64_t v263 = &v251[v261];
          uint64_t v264 = *(void *)&v251[v261];
          unint64_t v265 = *(void *)&v251[v261 + 8];
          outlined copy of Data._Representation(v264, v265);
          *uint64_t v262 = v264;
          v262[1] = v265;
          v262[2] = *((void *)v263 + 2);
          uint64_t v266 = v252[9];
          uint64_t v267 = &v250[v266];
          uint64_t v268 = &v251[v266];
          uint64_t v269 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v269 - 8) + 16))(v267, v268, v269);
          *(_DWORD *)&v250[v252[10]] = *(_DWORD *)&v251[v252[10]];
          *(_WORD *)&v250[v252[11]] = *(_WORD *)&v251[v252[11]];
          *(_WORD *)&v250[v252[12]] = *(_WORD *)&v251[v252[12]];
          uint64_t v270 = v252[13];
          uint64_t v271 = &v250[v270];
          uint64_t v272 = (uint64_t *)&v251[v270];
          unint64_t v273 = *(void *)&v251[v270 + 8];
          if (v273 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v271 = *(_OWORD *)v272;
          }
          else
          {
            uint64_t v401 = *v272;
            outlined copy of Data._Representation(*v272, v273);
            *(void *)uint64_t v271 = v401;
            *((void *)v271 + 1) = v273;
          }
          *((void *)v271 + 2) = v272[2];
          uint64_t v402 = v252[14];
          unint64_t v403 = &v250[v402];
          v404 = &v251[v402];
          uint64_t v405 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v406 = *(void *)(v405 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v406 + 48))(v404, 1, v405))
          {
            uint64_t v407 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v403, v404, *(void *)(*(void *)(v407 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v406 + 16))(v403, v404, v405);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v406 + 56))(v403, 0, 1, v405);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v253 + 56))(v250, 0, 1, v252);
        }
        break;
      case 2u:
        uint64_t v11 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v11;
        *(void *)(a1 + 16) = a2[2];
        unint64_t v12 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v12 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        else
        {
          uint64_t v25 = a2[3];
          outlined copy of Data._Representation(v25, v12);
          *(void *)(a1 + 24) = v25;
          *(void *)(a1 + 32) = v12;
        }
        *(void *)(a1 + 40) = a2[5];
        unint64_t v26 = a2[7];
        if (v26 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        else
        {
          uint64_t v62 = a2[6];
          outlined copy of Data._Representation(v62, a2[7]);
          *(void *)(a1 + 48) = v62;
          *(void *)(a1 + 56) = v26;
        }
        *(void *)(a1 + 64) = a2[8];
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        int64_t v63 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v64 = v63[5];
        uint64_t v65 = a1 + v64;
        uint64_t v66 = (uint64_t)a2 + v64;
        type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        v440 = v63;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v67 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
          uint64_t v68 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)(v65 + v68[5]) = *(_DWORD *)(v66 + v68[5]);
          *(_DWORD *)(v65 + v68[6]) = *(_DWORD *)(v66 + v68[6]);
          uint64_t v69 = v68[7];
          uint64_t v70 = (uint64_t *)(v65 + v69);
          uint64_t v71 = v66 + v69;
          uint64_t v72 = *(void *)(v66 + v69);
          unint64_t v73 = *(void *)(v66 + v69 + 8);
          outlined copy of Data._Representation(v72, v73);
          *uint64_t v70 = v72;
          v70[1] = v73;
          v70[2] = *(void *)(v71 + 16);
          uint64_t v74 = v68[8];
          BOOL v75 = (uint64_t *)(v65 + v74);
          uint64_t v76 = v66 + v74;
          uint64_t v77 = *(void *)(v66 + v74);
          unint64_t v78 = *(void *)(v66 + v74 + 8);
          outlined copy of Data._Representation(v77, v78);
          *BOOL v75 = v77;
          v75[1] = v78;
          v75[2] = *(void *)(v76 + 16);
          uint64_t v79 = v68[9];
          uint64_t v80 = v65 + v79;
          uint64_t v81 = v66 + v79;
          uint64_t v82 = type metadata accessor for SymmetricKey();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 16))(v80, v81, v82);
          *(_DWORD *)(v65 + v68[10]) = *(_DWORD *)(v66 + v68[10]);
          *(_WORD *)(v65 + v68[11]) = *(_WORD *)(v66 + v68[11]);
          *(_WORD *)(v65 + v68[12]) = *(_WORD *)(v66 + v68[12]);
          uint64_t v83 = v68[13];
          uint64_t v84 = v65 + v83;
          char v85 = (uint64_t *)(v66 + v83);
          unint64_t v86 = *(void *)(v66 + v83 + 8);
          if (v86 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
          }
          else
          {
            uint64_t v216 = *v85;
            outlined copy of Data._Representation(*v85, v86);
            *(void *)uint64_t v84 = v216;
            *(void *)(v84 + 8) = v86;
          }
          *(void *)(v84 + 16) = v85[2];
          uint64_t v217 = v68[14];
          uint64_t v218 = (void *)(v65 + v217);
          uint64_t v219 = (const void *)(v66 + v217);
          uint64_t v220 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v221 = *(void *)(v220 - 8);
          int64_t v63 = v440;
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v221 + 48))(v219, 1, v220))
          {
            uint64_t v222 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v218, v219, *(void *)(*(void *)(v222 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v221 + 16))(v218, v219, v220);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v221 + 56))(v218, 0, 1, v220);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v65 = *(_DWORD *)v66;
          *(void *)(v65 + 8) = *(void *)(v66 + 8);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v332 = v63[6];
        uint64_t v333 = (char *)(a1 + v332);
        uint64_t v334 = (char *)a2 + v332;
        uint64_t v335 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v336 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v336 - 8) + 16))(v333, v334, v336);
            uint64_t v337 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v338 = v337[9];
            uint64_t v339 = &v333[v338];
            uint64_t v340 = &v334[v338];
            uint64_t v341 = type metadata accessor for SymmetricKey();
            uint64_t v342 = *(void (**)(char *, char *, uint64_t))(*(void *)(v341 - 8) + 16);
            uint64_t v343 = v340;
            int64_t v63 = v440;
            v342(v339, v343, v341);
            v342(&v333[v337[10]], &v334[v337[10]], v341);
            v342(&v333[v337[11]], &v334[v337[11]], v341);
            v342(&v333[v337[12]], &v334[v337[12]], v341);
            goto LABEL_136;
          case 1u:
            uint64_t v344 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v344 - 8) + 16))(v333, v334, v344);
            uint64_t v345 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v346 = v345[9];
            uint64_t v347 = &v333[v346];
            uint64_t v348 = &v334[v346];
            uint64_t v349 = type metadata accessor for SymmetricKey();
            uint64_t v350 = *(void (**)(char *, char *, uint64_t))(*(void *)(v349 - 8) + 16);
            v350(v347, v348, v349);
            v350(&v333[v345[10]], &v334[v345[10]], v349);
            uint64_t v351 = v349;
            int64_t v63 = v440;
            v350(&v333[v345[11]], &v334[v345[11]], v351);
            goto LABEL_136;
          case 2u:
            uint64_t v352 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v352 - 8) + 16))(v333, v334, v352);
            uint64_t v353 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v354 = v353[9];
            uint64_t v355 = &v333[v354];
            uint64_t v356 = &v334[v354];
            uint64_t v357 = type metadata accessor for SymmetricKey();
            uint64_t v358 = *(void (**)(char *, char *, uint64_t))(*(void *)(v357 - 8) + 16);
            v358(v355, v356, v357);
            v358(&v333[v353[10]], &v334[v353[10]], v357);
            v358(&v333[v353[11]], &v334[v353[11]], v357);
            v358(&v333[v353[12]], &v334[v353[12]], v357);
            v358(&v333[v353[13]], &v334[v353[13]], v357);
            uint64_t v359 = v357;
            int64_t v63 = v440;
            v358(&v333[v353[14]], &v334[v353[14]], v359);
            goto LABEL_136;
          case 3u:
            uint64_t v360 = type metadata accessor for SymmetricKey();
            uint64_t v361 = *(void (**)(char *, char *, uint64_t))(*(void *)(v360 - 8) + 16);
            v361(v333, v334, v360);
            uint64_t v362 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v361(&v333[v362[9]], &v334[v362[9]], v360);
            v361(&v333[v362[10]], &v334[v362[10]], v360);
            v361(&v333[v362[11]], &v334[v362[11]], v360);
LABEL_136:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v333, v334, *(void *)(*(void *)(v335 - 8) + 64));
            break;
        }
        *(_WORD *)(a1 + v63[7]) = *(_WORD *)((char *)a2 + v63[7]);
        *(_WORD *)(a1 + v63[8]) = *(_WORD *)((char *)a2 + v63[8]);
        break;
      case 3u:
        uint64_t v13 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = a2[2];
        unint64_t v14 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        else
        {
          uint64_t v27 = a2[3];
          outlined copy of Data._Representation(v27, v14);
          *(void *)(a1 + 24) = v27;
          *(void *)(a1 + 32) = v14;
        }
        *(void *)(a1 + 40) = a2[5];
        unint64_t v28 = a2[7];
        if (v28 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        else
        {
          uint64_t v87 = a2[6];
          outlined copy of Data._Representation(v87, a2[7]);
          *(void *)(a1 + 48) = v87;
          *(void *)(a1 + 56) = v28;
        }
        *(void *)(a1 + 64) = a2[8];
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        uint64_t v88 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v89 = v88[5];
        uint64_t v90 = a1 + v89;
        uint64_t v91 = (uint64_t)a2 + v89;
        type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v92 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 16))(v90, v91, v92);
          unsigned int v93 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)(v90 + v93[5]) = *(_DWORD *)(v91 + v93[5]);
          *(_DWORD *)(v90 + v93[6]) = *(_DWORD *)(v91 + v93[6]);
          uint64_t v94 = v93[7];
          uint64_t v95 = (uint64_t *)(v90 + v94);
          uint64_t v96 = v91 + v94;
          uint64_t v97 = *(void *)(v91 + v94);
          unint64_t v98 = *(void *)(v91 + v94 + 8);
          outlined copy of Data._Representation(v97, v98);
          uint64_t *v95 = v97;
          v95[1] = v98;
          v95[2] = *(void *)(v96 + 16);
          uint64_t v99 = v93[8];
          uint64_t v100 = (uint64_t *)(v90 + v99);
          uint64_t v101 = v91 + v99;
          uint64_t v102 = *(void *)(v91 + v99);
          unint64_t v103 = *(void *)(v91 + v99 + 8);
          outlined copy of Data._Representation(v102, v103);
          *uint64_t v100 = v102;
          v100[1] = v103;
          v100[2] = *(void *)(v101 + 16);
          uint64_t v104 = v93[9];
          uint64_t v105 = v90 + v104;
          uint64_t v106 = v91 + v104;
          uint64_t v107 = type metadata accessor for SymmetricKey();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 16))(v105, v106, v107);
          *(_DWORD *)(v90 + v93[10]) = *(_DWORD *)(v91 + v93[10]);
          *(_WORD *)(v90 + v93[11]) = *(_WORD *)(v91 + v93[11]);
          *(_WORD *)(v90 + v93[12]) = *(_WORD *)(v91 + v93[12]);
          uint64_t v108 = v93[13];
          uint64_t v109 = v90 + v108;
          uint64_t v110 = (uint64_t *)(v91 + v108);
          unint64_t v111 = *(void *)(v91 + v108 + 8);
          if (v111 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
          }
          else
          {
            uint64_t v223 = *v110;
            outlined copy of Data._Representation(*v110, v111);
            *(void *)uint64_t v109 = v223;
            *(void *)(v109 + 8) = v111;
          }
          *(void *)(v109 + 16) = v110[2];
          uint64_t v224 = v93[14];
          uint64_t v225 = (void *)(v90 + v224);
          __int16 v226 = (const void *)(v91 + v224);
          uint64_t v227 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v228 = *(void *)(v227 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v228 + 48))(v226, 1, v227))
          {
            uint64_t v229 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v225, v226, *(void *)(*(void *)(v229 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v228 + 16))(v225, v226, v227);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v228 + 56))(v225, 0, 1, v227);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
          *(unsigned char *)(v90 + 4) = *(unsigned char *)(v91 + 4);
          uint64_t v133 = *(void *)(v91 + 16);
          *(void *)(v90 + 8) = *(void *)(v91 + 8);
          *(void *)(v90 + 16) = v133;
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v363 = v88[6];
        uint64_t v364 = a1 + v363;
        uint64_t v365 = (uint64_t *)((char *)a2 + v363);
        unint64_t v366 = *(uint64_t *)((char *)a2 + v363 + 8);
        if (v366 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v364 = *(_OWORD *)v365;
        }
        else
        {
          uint64_t v367 = *v365;
          outlined copy of Data._Representation(*v365, v366);
          *(void *)uint64_t v364 = v367;
          *(void *)(v364 + 8) = v366;
        }
        *(void *)(v364 + 16) = v365[2];
        uint64_t v368 = v88[7];
        uint64_t v369 = a1 + v368;
        uint64_t v370 = (uint64_t *)((char *)a2 + v368);
        unint64_t v371 = *(uint64_t *)((char *)a2 + v368 + 8);
        if (v371 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v369 = *(_OWORD *)v370;
        }
        else
        {
          uint64_t v372 = *v370;
          outlined copy of Data._Representation(*v370, v371);
          *(void *)uint64_t v369 = v372;
          *(void *)(v369 + 8) = v371;
        }
        *(void *)(v369 + 16) = v370[2];
        *(unsigned char *)(a1 + v88[8]) = *((unsigned char *)a2 + v88[8]);
        uint64_t v373 = v88[9];
        uint64_t v374 = (char *)(a1 + v373);
        uint64_t v375 = (char *)a2 + v373;
        uint64_t v376 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v377 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v377 - 8) + 16))(v374, v375, v377);
            uint64_t v378 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v379 = v378[9];
            uint64_t v380 = &v374[v379];
            uint64_t v381 = &v375[v379];
            uint64_t v382 = type metadata accessor for SymmetricKey();
            long long v383 = *(void (**)(char *, char *, uint64_t))(*(void *)(v382 - 8) + 16);
            v383(v380, v381, v382);
            v383(&v374[v378[10]], &v375[v378[10]], v382);
            v383(&v374[v378[11]], &v375[v378[11]], v382);
            v383(&v374[v378[12]], &v375[v378[12]], v382);
            goto LABEL_151;
          case 1u:
            uint64_t v384 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v384 - 8) + 16))(v374, v375, v384);
            unint64_t v385 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v386 = v385[9];
            uint64_t v387 = &v374[v386];
            uint64_t v388 = &v375[v386];
            uint64_t v389 = type metadata accessor for SymmetricKey();
            uint64_t v390 = *(void (**)(char *, char *, uint64_t))(*(void *)(v389 - 8) + 16);
            v390(v387, v388, v389);
            v390(&v374[v385[10]], &v375[v385[10]], v389);
            v390(&v374[v385[11]], &v375[v385[11]], v389);
            goto LABEL_151;
          case 2u:
            uint64_t v391 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v391 - 8) + 16))(v374, v375, v391);
            uint64_t v392 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v393 = v392[9];
            unint64_t v394 = &v374[v393];
            long long v395 = &v375[v393];
            uint64_t v396 = type metadata accessor for SymmetricKey();
            uint64_t v397 = *(void (**)(char *, char *, uint64_t))(*(void *)(v396 - 8) + 16);
            v397(v394, v395, v396);
            v397(&v374[v392[10]], &v375[v392[10]], v396);
            v397(&v374[v392[11]], &v375[v392[11]], v396);
            v397(&v374[v392[12]], &v375[v392[12]], v396);
            v397(&v374[v392[13]], &v375[v392[13]], v396);
            v397(&v374[v392[14]], &v375[v392[14]], v396);
            goto LABEL_151;
          case 3u:
            uint64_t v398 = type metadata accessor for SymmetricKey();
            uint64_t v399 = *(void (**)(char *, char *, uint64_t))(*(void *)(v398 - 8) + 16);
            v399(v374, v375, v398);
            unint64_t v400 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v399(&v374[v400[9]], &v375[v400[9]], v398);
            v399(&v374[v400[10]], &v375[v400[10]], v398);
            v399(&v374[v400[11]], &v375[v400[11]], v398);
LABEL_151:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v374, v375, *(void *)(*(void *)(v376 - 8) + 64));
            break;
        }
        break;
      case 4u:
        uint64_t v15 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = a2[2];
        unint64_t v16 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v16 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        else
        {
          uint64_t v29 = a2[3];
          outlined copy of Data._Representation(v29, v16);
          *(void *)(a1 + 24) = v29;
          *(void *)(a1 + 32) = v16;
        }
        *(void *)(a1 + 40) = a2[5];
        unint64_t v30 = a2[7];
        if (v30 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        else
        {
          uint64_t v112 = a2[6];
          outlined copy of Data._Representation(v112, a2[7]);
          *(void *)(a1 + 48) = v112;
          *(void *)(a1 + 56) = v30;
        }
        *(void *)(a1 + 64) = a2[8];
        int v113 = *((_DWORD *)a2 + 19);
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        *(_DWORD *)(a1 + 76) = v113;
        unint64_t v114 = a2[11];
        if (v114 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
        }
        else
        {
          uint64_t v134 = a2[10];
          outlined copy of Data._Representation(v134, a2[11]);
          *(void *)(a1 + 80) = v134;
          *(void *)(a1 + 88) = v114;
        }
        *(void *)(a1 + 96) = a2[12];
        unint64_t v135 = a2[14];
        if (v135 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
        }
        else
        {
          uint64_t v136 = a2[13];
          outlined copy of Data._Representation(v136, a2[14]);
          *(void *)(a1 + 104) = v136;
          *(void *)(a1 + 112) = v135;
        }
        *(void *)(a1 + 120) = a2[15];
        *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
        uint64_t v137 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v138 = *(int *)(v137 + 40);
        int v139 = (void *)(a1 + v138);
        uint64_t v140 = (char *)a2 + v138;
        uint64_t v141 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
        {
          uint64_t v143 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v139, v140, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v142 + 16))(v139, v140, v141);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
        }
        uint64_t v205 = *(int *)(v137 + 44);
        uint64_t v206 = (char *)(a1 + v205);
        uint64_t v207 = (char *)a2 + v205;
        uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v209 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 16))(v206, v207, v209);
            uint64_t v210 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v211 = v210[9];
            uint64_t v212 = &v206[v211];
            uint64_t v213 = &v207[v211];
            uint64_t v214 = type metadata accessor for SymmetricKey();
            unint64_t v215 = *(void (**)(char *, char *, uint64_t))(*(void *)(v214 - 8) + 16);
            v215(v212, v213, v214);
            v215(&v206[v210[10]], &v207[v210[10]], v214);
            v215(&v206[v210[11]], &v207[v210[11]], v214);
            v215(&v206[v210[12]], &v207[v210[12]], v214);
            goto LABEL_124;
          case 1u:
            uint64_t v308 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v308 - 8) + 16))(v206, v207, v308);
            long long v309 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v310 = v309[9];
            uint64_t v311 = &v206[v310];
            uint64_t v312 = &v207[v310];
            uint64_t v313 = type metadata accessor for SymmetricKey();
            long long v314 = *(void (**)(char *, char *, uint64_t))(*(void *)(v313 - 8) + 16);
            v314(v311, v312, v313);
            v314(&v206[v309[10]], &v207[v309[10]], v313);
            v314(&v206[v309[11]], &v207[v309[11]], v313);
            goto LABEL_124;
          case 2u:
            uint64_t v315 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v315 - 8) + 16))(v206, v207, v315);
            unint64_t v316 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v317 = v316[9];
            uint64_t v318 = &v206[v317];
            uint64_t v319 = &v207[v317];
            uint64_t v320 = type metadata accessor for SymmetricKey();
            uint64_t v321 = *(void (**)(char *, char *, uint64_t))(*(void *)(v320 - 8) + 16);
            v321(v318, v319, v320);
            v321(&v206[v316[10]], &v207[v316[10]], v320);
            v321(&v206[v316[11]], &v207[v316[11]], v320);
            v321(&v206[v316[12]], &v207[v316[12]], v320);
            v321(&v206[v316[13]], &v207[v316[13]], v320);
            v321(&v206[v316[14]], &v207[v316[14]], v320);
            goto LABEL_124;
          case 3u:
            uint64_t v322 = type metadata accessor for SymmetricKey();
            uint64_t v323 = *(void (**)(char *, char *, uint64_t))(*(void *)(v322 - 8) + 16);
            v323(v206, v207, v322);
            uint64_t v324 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v323(&v206[v324[9]], &v207[v324[9]], v322);
            v323(&v206[v324[10]], &v207[v324[10]], v322);
            v323(&v206[v324[11]], &v207[v324[11]], v322);
LABEL_124:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v206, v207, *(void *)(*(void *)(v208 - 8) + 64));
            break;
        }
        break;
      case 5u:
        uint64_t v17 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = a2[2];
        unint64_t v18 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        else
        {
          uint64_t v31 = a2[3];
          outlined copy of Data._Representation(v31, v18);
          *(void *)(a1 + 24) = v31;
          *(void *)(a1 + 32) = v18;
        }
        *(void *)(a1 + 40) = a2[5];
        unint64_t v32 = a2[7];
        if (v32 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        else
        {
          uint64_t v115 = a2[6];
          outlined copy of Data._Representation(v115, a2[7]);
          *(void *)(a1 + 48) = v115;
          *(void *)(a1 + 56) = v32;
        }
        *(void *)(a1 + 64) = a2[8];
        int v116 = *((_DWORD *)a2 + 19);
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        *(_DWORD *)(a1 + 76) = v116;
        __int16 v117 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v118 = v117[7];
        uint64_t v119 = (void *)(a1 + v118);
        uint64_t v120 = (char *)a2 + v118;
        uint64_t v121 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v122 = *(void *)(v121 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
        {
          uint64_t v123 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v119, v120, *(void *)(*(void *)(v123 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v122 + 16))(v119, v120, v121);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
        }
        uint64_t v163 = v117[8];
        uint64_t v164 = a1 + v163;
        uint64_t v165 = (uint64_t *)((char *)a2 + v163);
        unint64_t v166 = *(uint64_t *)((char *)a2 + v163 + 8);
        if (v166 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
        }
        else
        {
          uint64_t v167 = *v165;
          outlined copy of Data._Representation(*v165, v166);
          *(void *)uint64_t v164 = v167;
          *(void *)(v164 + 8) = v166;
        }
        *(void *)(v164 + 16) = v165[2];
        uint64_t v168 = v117[9];
        uint64_t v169 = a1 + v168;
        uint64_t v170 = (uint64_t *)((char *)a2 + v168);
        unint64_t v171 = *(uint64_t *)((char *)a2 + v168 + 8);
        if (v171 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v169 = *(_OWORD *)v170;
        }
        else
        {
          uint64_t v172 = *v170;
          outlined copy of Data._Representation(*v170, v171);
          *(void *)uint64_t v169 = v172;
          *(void *)(v169 + 8) = v171;
        }
        *(void *)(v169 + 16) = v170[2];
        *(unsigned char *)(a1 + v117[10]) = *((unsigned char *)a2 + v117[10]);
        uint64_t v173 = v117[11];
        uint64_t v174 = (char *)(a1 + v173);
        unint64_t v175 = (char *)a2 + v173;
        uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v177 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v177 - 8) + 16))(v174, v175, v177);
            char v178 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v179 = v178[9];
            uint64_t v180 = &v174[v179];
            uint64_t v181 = &v175[v179];
            uint64_t v182 = type metadata accessor for SymmetricKey();
            int v183 = *(void (**)(char *, char *, uint64_t))(*(void *)(v182 - 8) + 16);
            v183(v180, v181, v182);
            v183(&v174[v178[10]], &v175[v178[10]], v182);
            v183(&v174[v178[11]], &v175[v178[11]], v182);
            v183(&v174[v178[12]], &v175[v178[12]], v182);
            goto LABEL_112;
          case 1u:
            uint64_t v274 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v274 - 8) + 16))(v174, v175, v274);
            uint64_t v275 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v276 = v275[9];
            uint64_t v277 = &v174[v276];
            uint64_t v278 = &v175[v276];
            uint64_t v279 = type metadata accessor for SymmetricKey();
            uint64_t v280 = *(void (**)(char *, char *, uint64_t))(*(void *)(v279 - 8) + 16);
            v280(v277, v278, v279);
            v280(&v174[v275[10]], &v175[v275[10]], v279);
            v280(&v174[v275[11]], &v175[v275[11]], v279);
            goto LABEL_112;
          case 2u:
            uint64_t v281 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v281 - 8) + 16))(v174, v175, v281);
            long long v282 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v283 = v282[9];
            uint64_t v284 = &v174[v283];
            uint64_t v285 = &v175[v283];
            uint64_t v286 = type metadata accessor for SymmetricKey();
            long long v287 = *(void (**)(char *, char *, uint64_t))(*(void *)(v286 - 8) + 16);
            v287(v284, v285, v286);
            v287(&v174[v282[10]], &v175[v282[10]], v286);
            v287(&v174[v282[11]], &v175[v282[11]], v286);
            v287(&v174[v282[12]], &v175[v282[12]], v286);
            v287(&v174[v282[13]], &v175[v282[13]], v286);
            v287(&v174[v282[14]], &v175[v282[14]], v286);
            goto LABEL_112;
          case 3u:
            uint64_t v288 = type metadata accessor for SymmetricKey();
            uint64_t v289 = *(void (**)(char *, char *, uint64_t))(*(void *)(v288 - 8) + 16);
            v289(v174, v175, v288);
            uint64_t v290 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v289(&v174[v290[9]], &v175[v290[9]], v288);
            v289(&v174[v290[10]], &v175[v290[10]], v288);
            v289(&v174[v290[11]], &v175[v290[11]], v288);
LABEL_112:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v174, v175, *(void *)(*(void *)(v176 - 8) + 64));
            break;
        }
        break;
      case 6u:
        uint64_t v19 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = a2[2];
        unint64_t v20 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v20 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        else
        {
          uint64_t v33 = a2[3];
          outlined copy of Data._Representation(v33, v20);
          *(void *)(a1 + 24) = v33;
          *(void *)(a1 + 32) = v20;
        }
        *(void *)(a1 + 40) = a2[5];
        unint64_t v34 = a2[7];
        if (v34 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        else
        {
          uint64_t v124 = a2[6];
          outlined copy of Data._Representation(v124, a2[7]);
          *(void *)(a1 + 48) = v124;
          *(void *)(a1 + 56) = v34;
        }
        *(void *)(a1 + 64) = a2[8];
        int v125 = *((_DWORD *)a2 + 19);
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        *(_DWORD *)(a1 + 76) = v125;
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v127 = ready[7];
        uint64_t v128 = (void *)(a1 + v127);
        uint64_t v129 = (char *)a2 + v127;
        uint64_t v130 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v131 = *(void *)(v130 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
        {
          uint64_t v132 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v131 + 16))(v128, v129, v130);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
        }
        uint64_t v184 = ready[8];
        uint64_t v185 = a1 + v184;
        uint64_t v186 = (uint64_t *)((char *)a2 + v184);
        unint64_t v187 = *(uint64_t *)((char *)a2 + v184 + 8);
        if (v187 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
        }
        else
        {
          uint64_t v188 = *v186;
          outlined copy of Data._Representation(*v186, v187);
          *(void *)uint64_t v185 = v188;
          *(void *)(v185 + 8) = v187;
        }
        *(void *)(v185 + 16) = v186[2];
        uint64_t v189 = ready[9];
        uint64_t v190 = a1 + v189;
        uint64_t v191 = (uint64_t *)((char *)a2 + v189);
        unint64_t v192 = *(uint64_t *)((char *)a2 + v189 + 8);
        if (v192 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v190 = *(_OWORD *)v191;
        }
        else
        {
          uint64_t v193 = *v191;
          outlined copy of Data._Representation(*v191, v192);
          *(void *)uint64_t v190 = v193;
          *(void *)(v190 + 8) = v192;
        }
        *(void *)(v190 + 16) = v191[2];
        *(unsigned char *)(a1 + ready[10]) = *((unsigned char *)a2 + ready[10]);
        uint64_t v194 = ready[11];
        int v195 = (char *)(a1 + v194);
        uint64_t v196 = (char *)a2 + v194;
        uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v198 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v198 - 8) + 16))(v195, v196, v198);
            uint64_t v199 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v200 = v199[9];
            unint64_t v201 = &v195[v200];
            int64x2_t v202 = &v196[v200];
            uint64_t v203 = type metadata accessor for SymmetricKey();
            uint64_t v204 = *(void (**)(char *, char *, uint64_t))(*(void *)(v203 - 8) + 16);
            v204(v201, v202, v203);
            v204(&v195[v199[10]], &v196[v199[10]], v203);
            v204(&v195[v199[11]], &v196[v199[11]], v203);
            v204(&v195[v199[12]], &v196[v199[12]], v203);
            goto LABEL_118;
          case 1u:
            uint64_t v291 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v291 - 8) + 16))(v195, v196, v291);
            unint64_t v292 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v293 = v292[9];
            uint64_t v294 = &v195[v293];
            unint64_t v295 = &v196[v293];
            uint64_t v296 = type metadata accessor for SymmetricKey();
            uint64_t v297 = *(void (**)(char *, char *, uint64_t))(*(void *)(v296 - 8) + 16);
            v297(v294, v295, v296);
            v297(&v195[v292[10]], &v196[v292[10]], v296);
            v297(&v195[v292[11]], &v196[v292[11]], v296);
            goto LABEL_118;
          case 2u:
            uint64_t v298 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v298 - 8) + 16))(v195, v196, v298);
            unint64_t v299 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v300 = v299[9];
            uint64_t v301 = &v195[v300];
            uint64_t v302 = &v196[v300];
            uint64_t v303 = type metadata accessor for SymmetricKey();
            uint64_t v304 = *(void (**)(char *, char *, uint64_t))(*(void *)(v303 - 8) + 16);
            v304(v301, v302, v303);
            v304(&v195[v299[10]], &v196[v299[10]], v303);
            v304(&v195[v299[11]], &v196[v299[11]], v303);
            v304(&v195[v299[12]], &v196[v299[12]], v303);
            v304(&v195[v299[13]], &v196[v299[13]], v303);
            v304(&v195[v299[14]], &v196[v299[14]], v303);
            goto LABEL_118;
          case 3u:
            uint64_t v305 = type metadata accessor for SymmetricKey();
            long long v306 = *(void (**)(char *, char *, uint64_t))(*(void *)(v305 - 8) + 16);
            v306(v195, v196, v305);
            uint64_t v307 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v306(&v195[v307[9]], &v196[v307[9]], v305);
            v306(&v195[v307[10]], &v196[v307[10]], v305);
            v306(&v195[v307[11]], &v196[v307[11]], v305);
LABEL_118:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v195, v196, *(void *)(*(void *)(v197 - 8) + 64));
            break;
        }
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = a2[2];
        unint64_t v7 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v7 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        else
        {
          uint64_t v21 = a2[3];
          outlined copy of Data._Representation(v21, v7);
          *(void *)(a1 + 24) = v21;
          *(void *)(a1 + 32) = v7;
        }
        *(void *)(a1 + 40) = a2[5];
        unint64_t v22 = a2[7];
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        else
        {
          uint64_t v35 = a2[6];
          outlined copy of Data._Representation(v35, a2[7]);
          *(void *)(a1 + 48) = v35;
          *(void *)(a1 + 56) = v22;
        }
        *(void *)(a1 + 64) = a2[8];
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        uint64_t v36 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v37 = *(int *)(v36 + 20);
        uint64_t v38 = (char *)(a1 + v37);
        uint64_t v39 = (char *)a2 + v37;
        unint64_t v40 = (int *)type metadata accessor for SessionTicket();
        uint64_t v41 = *((void *)v40 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          uint64_t v441 = v36;
          uint64_t v144 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v144 - 8) + 16))(v38, v39, v144);
          *(_DWORD *)&v38[v40[5]] = *(_DWORD *)&v39[v40[5]];
          *(_DWORD *)&v38[v40[6]] = *(_DWORD *)&v39[v40[6]];
          uint64_t v145 = v40[7];
          uint64_t v146 = (uint64_t *)&v38[v145];
          uint64_t v147 = &v39[v145];
          uint64_t v148 = *(void *)&v39[v145];
          unint64_t v149 = *(void *)&v39[v145 + 8];
          outlined copy of Data._Representation(v148, v149);
          *uint64_t v146 = v148;
          v146[1] = v149;
          v146[2] = *((void *)v147 + 2);
          uint64_t v150 = v40[8];
          uint64_t v151 = (uint64_t *)&v38[v150];
          uint64_t v152 = &v39[v150];
          uint64_t v153 = *(void *)&v39[v150];
          unint64_t v154 = *(void *)&v39[v150 + 8];
          outlined copy of Data._Representation(v153, v154);
          *uint64_t v151 = v153;
          v151[1] = v154;
          v151[2] = *((void *)v152 + 2);
          uint64_t v155 = v40[9];
          uint64_t v156 = &v38[v155];
          __int16 v157 = &v39[v155];
          uint64_t v158 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v158 - 8) + 16))(v156, v157, v158);
          *(_DWORD *)&v38[v40[10]] = *(_DWORD *)&v39[v40[10]];
          *(_WORD *)&v38[v40[11]] = *(_WORD *)&v39[v40[11]];
          *(_WORD *)&v38[v40[12]] = *(_WORD *)&v39[v40[12]];
          uint64_t v159 = v40[13];
          unint64_t v160 = &v38[v159];
          uint64_t v161 = (uint64_t *)&v39[v159];
          unint64_t v162 = *(void *)&v39[v159 + 8];
          if (v162 >> 60 == 15)
          {
            *(_OWORD *)unint64_t v160 = *(_OWORD *)v161;
          }
          else
          {
            uint64_t v325 = *v161;
            outlined copy of Data._Representation(*v161, v162);
            *(void *)unint64_t v160 = v325;
            *((void *)v160 + 1) = v162;
          }
          *((void *)v160 + 2) = v161[2];
          uint64_t v36 = v441;
          uint64_t v326 = v40[14];
          uint64_t v327 = &v38[v326];
          uint64_t v328 = &v39[v326];
          uint64_t v329 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v330 = *(void *)(v329 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v330 + 48))(v328, 1, v329))
          {
            uint64_t v331 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v327, v328, *(void *)(*(void *)(v331 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v330 + 16))(v327, v328, v329);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v330 + 56))(v327, 0, 1, v329);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
        }
        uint64_t v408 = *(int *)(v36 + 24);
        uint64_t v409 = (char *)(a1 + v408);
        uint64_t v410 = (char *)a2 + v408;
        uint64_t v411 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v412 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v412 - 8) + 16))(v409, v410, v412);
            __int16 v413 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v414 = v413[9];
            v415 = &v409[v414];
            v416 = &v410[v414];
            uint64_t v417 = type metadata accessor for SymmetricKey();
            v418 = *(void (**)(char *, char *, uint64_t))(*(void *)(v417 - 8) + 16);
            v418(v415, v416, v417);
            v418(&v409[v413[10]], &v410[v413[10]], v417);
            v418(&v409[v413[11]], &v410[v413[11]], v417);
            v418(&v409[v413[12]], &v410[v413[12]], v417);
            goto LABEL_164;
          case 1u:
            uint64_t v419 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v419 - 8) + 16))(v409, v410, v419);
            v420 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v421 = v420[9];
            uint64_t v422 = &v409[v421];
            uint64_t v423 = &v410[v421];
            uint64_t v424 = type metadata accessor for SymmetricKey();
            v425 = *(void (**)(char *, char *, uint64_t))(*(void *)(v424 - 8) + 16);
            v425(v422, v423, v424);
            v425(&v409[v420[10]], &v410[v420[10]], v424);
            v425(&v409[v420[11]], &v410[v420[11]], v424);
            goto LABEL_164;
          case 2u:
            uint64_t v426 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v426 - 8) + 16))(v409, v410, v426);
            v427 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v428 = v427[9];
            v429 = &v409[v428];
            v430 = &v410[v428];
            uint64_t v431 = type metadata accessor for SymmetricKey();
            v432 = *(void (**)(char *, char *, uint64_t))(*(void *)(v431 - 8) + 16);
            v432(v429, v430, v431);
            v432(&v409[v427[10]], &v410[v427[10]], v431);
            v432(&v409[v427[11]], &v410[v427[11]], v431);
            v432(&v409[v427[12]], &v410[v427[12]], v431);
            v432(&v409[v427[13]], &v410[v427[13]], v431);
            v432(&v409[v427[14]], &v410[v427[14]], v431);
            goto LABEL_164;
          case 3u:
            uint64_t v433 = type metadata accessor for SymmetricKey();
            v434 = *(void (**)(char *, char *, uint64_t))(*(void *)(v433 - 8) + 16);
            v434(v409, v410, v433);
            v435 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v434(&v409[v435[9]], &v410[v435[9]], v433);
            v434(&v409[v435[10]], &v410[v435[10]], v433);
            v434(&v409[v435[11]], &v410[v435[11]], v433);
LABEL_164:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v409, v410, *(void *)(*(void *)(v411 - 8) + 64));
            break;
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for HandshakeState(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v3 = a1[4];
      if (v3 >> 60 != 15) {
        outlined consume of Data._Representation(a1[3], v3);
      }
      unint64_t v4 = a1[7];
      if (v4 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v4);
      }
      uint64_t v5 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v6 = (char *)a1 + *(int *)(v5 + 20);
      unint64_t v7 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7))
      {
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
        outlined consume of Data._Representation(*(void *)&v6[v7[7]], *(void *)&v6[v7[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v6[v7[8]], *(void *)&v6[v7[8] + 8]);
        uint64_t v9 = &v6[v7[9]];
        uint64_t v10 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
        uint64_t v11 = (uint64_t *)&v6[v7[13]];
        unint64_t v12 = v11[1];
        if (v12 >> 60 != 15) {
          outlined consume of Data._Representation(*v11, v12);
        }
        uint64_t v13 = &v6[v7[14]];
        uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v15 = *(void *)(v14 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
          (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
        }
      }
      unint64_t v16 = (char *)a1 + *(int *)(v5 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v17 = a1[4];
      if (v17 >> 60 != 15) {
        outlined consume of Data._Representation(a1[3], v17);
      }
      unint64_t v18 = a1[7];
      if (v18 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v18);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 17));
      uint64_t v19 = type metadata accessor for HandshakeState.ClientHelloState(0);
      unint64_t v20 = (char *)a1 + *(int *)(v19 + 36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v21 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
          unint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v23 = &v20[v22[9]];
          uint64_t v24 = type metadata accessor for SymmetricKey();
          uint64_t v25 = *(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8);
          v25(v23, v24);
          v25(&v20[v22[10]], v24);
          v25(&v20[v22[11]], v24);
          uint64_t v26 = v22[12];
          goto LABEL_88;
        case 1u:
          uint64_t v101 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v101 - 8) + 8))(v20, v101);
          uint64_t v102 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          unint64_t v103 = &v20[v102[9]];
          uint64_t v24 = type metadata accessor for SymmetricKey();
          uint64_t v25 = *(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8);
          v25(v103, v24);
          v25(&v20[v102[10]], v24);
          uint64_t v26 = v102[11];
          goto LABEL_88;
        case 2u:
          uint64_t v104 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v104 - 8) + 8))(v20, v104);
          uint64_t v105 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v106 = &v20[v105[9]];
          uint64_t v24 = type metadata accessor for SymmetricKey();
          uint64_t v25 = *(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8);
          v25(v106, v24);
          v25(&v20[v105[10]], v24);
          v25(&v20[v105[11]], v24);
          v25(&v20[v105[12]], v24);
          v25(&v20[v105[13]], v24);
          uint64_t v26 = v105[14];
LABEL_88:
          v25(&v20[v26], v24);
          break;
        case 3u:
          uint64_t v107 = type metadata accessor for SymmetricKey();
          uint64_t v108 = *(void (**)(char *, uint64_t))(*(void *)(v107 - 8) + 8);
          v108(v20, v107);
          uint64_t v109 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v108(&v20[v109[9]], v107);
          v108(&v20[v109[10]], v107);
          v108(&v20[v109[11]], v107);
          break;
        default:
          break;
      }
      uint64_t v110 = (char *)a1 + *(int *)(v19 + 40);
      unint64_t v111 = (int *)type metadata accessor for SessionTicket();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, int *))(*((void *)v111 - 1) + 48))(v110, 1, v111);
      if (!result)
      {
        uint64_t v112 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v112 - 8) + 8))(v110, v112);
        outlined consume of Data._Representation(*(void *)&v110[v111[7]], *(void *)&v110[v111[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v110[v111[8]], *(void *)&v110[v111[8] + 8]);
        int v113 = &v110[v111[9]];
        uint64_t v114 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v114 - 8) + 8))(v113, v114);
        uint64_t v115 = (uint64_t *)&v110[v111[13]];
        unint64_t v116 = v115[1];
        if (v116 >> 60 != 15) {
          outlined consume of Data._Representation(*v115, v116);
        }
        __int16 v117 = &v110[v111[14]];
        uint64_t v118 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v120 = *(void *)(v118 - 8);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48))(v117, 1, v118);
        if (!result)
        {
          uint64_t v100 = *(uint64_t (**)(char *, uint64_t))(v120 + 8);
          uint64_t v96 = v117;
          uint64_t v97 = v118;
LABEL_83:
          uint64_t result = v100(v96, v97);
        }
      }
      break;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v27 = a1[4];
      if (v27 >> 60 != 15) {
        outlined consume of Data._Representation(a1[3], v27);
      }
      unint64_t v28 = a1[7];
      if (v28 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v28);
      }
      uint64_t v29 = type metadata accessor for HandshakeState.ServerHelloState(0);
      unint64_t v30 = (char *)a1 + *(int *)(v29 + 20);
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
        unint64_t v32 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(void *)&v30[v32[7]], *(void *)&v30[v32[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v30[v32[8]], *(void *)&v30[v32[8] + 8]);
        uint64_t v33 = &v30[v32[9]];
        uint64_t v34 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
        uint64_t v35 = (uint64_t *)&v30[v32[13]];
        unint64_t v36 = v35[1];
        if (v36 >> 60 != 15) {
          outlined consume of Data._Representation(*v35, v36);
        }
        uint64_t v37 = &v30[v32[14]];
        uint64_t v38 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v39 = *(void *)(v38 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38)) {
          (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v16 = (char *)a1 + *(int *)(v29 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v40 = a1[4];
      if (v40 >> 60 != 15) {
        outlined consume of Data._Representation(a1[3], v40);
      }
      unint64_t v41 = a1[7];
      if (v41 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v41);
      }
      uint64_t v42 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v43 = (char *)a1 + v42[5];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v44 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
        uint64_t v45 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(void *)&v43[v45[7]], *(void *)&v43[v45[7] + 8]);
        outlined consume of Data._Representation(*(void *)&v43[v45[8]], *(void *)&v43[v45[8] + 8]);
        long long v46 = &v43[v45[9]];
        uint64_t v47 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8))(v46, v47);
        uint64_t v48 = (uint64_t *)&v43[v45[13]];
        unint64_t v49 = v48[1];
        if (v49 >> 60 != 15) {
          outlined consume of Data._Representation(*v48, v49);
        }
        uint64_t v50 = &v43[v45[14]];
        uint64_t v51 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v52 = *(void *)(v51 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v81 = (uint64_t *)((char *)a1 + v42[6]);
      unint64_t v82 = v81[1];
      if (v82 >> 60 != 15) {
        outlined consume of Data._Representation(*v81, v82);
      }
      uint64_t v83 = (uint64_t *)((char *)a1 + v42[7]);
      unint64_t v84 = v83[1];
      if (v84 >> 60 != 15) {
        outlined consume of Data._Representation(*v83, v84);
      }
      unint64_t v16 = (char *)a1 + v42[9];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v53 = a1[4];
      if (v53 >> 60 != 15) {
        outlined consume of Data._Representation(a1[3], v53);
      }
      unint64_t v54 = a1[7];
      if (v54 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v54);
      }
      unint64_t v55 = a1[11];
      if (v55 >> 60 != 15) {
        outlined consume of Data._Representation(a1[10], v55);
      }
      unint64_t v56 = a1[14];
      if (v56 >> 60 != 15) {
        outlined consume of Data._Representation(a1[13], v56);
      }
      uint64_t v57 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v58 = (char *)a1 + *(int *)(v57 + 40);
      uint64_t v59 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v60 = *(void *)(v59 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59)) {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
      }
      unint64_t v16 = (char *)a1 + *(int *)(v57 + 44);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v61 = a1[4];
      if (v61 >> 60 != 15) {
        outlined consume of Data._Representation(a1[3], v61);
      }
      unint64_t v62 = a1[7];
      if (v62 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v62);
      }
      int64_t v63 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v64 = (char *)a1 + v63[7];
      uint64_t v65 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v66 = *(void *)(v65 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
        (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
      }
      uint64_t v67 = (uint64_t *)((char *)a1 + v63[8]);
      unint64_t v68 = v67[1];
      if (v68 >> 60 != 15) {
        outlined consume of Data._Representation(*v67, v68);
      }
      uint64_t v69 = (uint64_t *)((char *)a1 + v63[9]);
      unint64_t v70 = v69[1];
      if (v70 >> 60 != 15) {
        outlined consume of Data._Representation(*v69, v70);
      }
      unint64_t v16 = (char *)a1 + v63[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v71 = a1[4];
      if (v71 >> 60 != 15) {
        outlined consume of Data._Representation(a1[3], v71);
      }
      unint64_t v72 = a1[7];
      if (v72 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v72);
      }
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v74 = (char *)a1 + ready[7];
      uint64_t v75 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v76 = *(void *)(v75 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75)) {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v74, v75);
      }
      uint64_t v77 = (uint64_t *)((char *)a1 + ready[8]);
      unint64_t v78 = v77[1];
      if (v78 >> 60 != 15) {
        outlined consume of Data._Representation(*v77, v78);
      }
      uint64_t v79 = (uint64_t *)((char *)a1 + ready[9]);
      unint64_t v80 = v79[1];
      if (v80 >> 60 != 15) {
        outlined consume of Data._Representation(*v79, v80);
      }
      unint64_t v16 = (char *)a1 + ready[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
LABEL_77:
          uint64_t v85 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v85 - 8) + 8))(v16, v85);
          unint64_t v86 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v87 = &v16[v86[9]];
          uint64_t v88 = type metadata accessor for SymmetricKey();
          uint64_t v119 = *(void (**)(char *, uint64_t))(*(void *)(v88 - 8) + 8);
          ((void (*)(void *__return_ptr, char *, uint64_t))v119)((void *)(v88 - 8), v87, v88);
          v119(&v16[v86[10]], v88);
          v119(&v16[v86[11]], v88);
          uint64_t v89 = v86[12];
          goto LABEL_80;
        case 1:
LABEL_78:
          uint64_t v90 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v90 - 8) + 8))(v16, v90);
          uint64_t v91 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v92 = &v16[v91[9]];
          uint64_t v88 = type metadata accessor for SymmetricKey();
          uint64_t v119 = *(void (**)(char *, uint64_t))(*(void *)(v88 - 8) + 8);
          ((void (*)(void *__return_ptr, char *, uint64_t))v119)((void *)(v88 - 8), v92, v88);
          v119(&v16[v91[10]], v88);
          uint64_t v89 = v91[11];
          goto LABEL_80;
        case 2:
LABEL_79:
          uint64_t v93 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(void *)(v93 - 8) + 8))(v16, v93);
          uint64_t v94 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v95 = &v16[v94[9]];
          uint64_t v88 = type metadata accessor for SymmetricKey();
          uint64_t v119 = *(void (**)(char *, uint64_t))(*(void *)(v88 - 8) + 8);
          ((void (*)(void *__return_ptr, char *, uint64_t))v119)((void *)(v88 - 8), v95, v88);
          v119(&v16[v94[10]], v88);
          v119(&v16[v94[11]], v88);
          v119(&v16[v94[12]], v88);
          v119(&v16[v94[13]], v88);
          uint64_t v89 = v94[14];
LABEL_80:
          uint64_t v96 = &v16[v89];
          uint64_t v97 = v88;
          goto LABEL_82;
        case 3:
LABEL_81:
          uint64_t v98 = type metadata accessor for SymmetricKey();
          uint64_t v119 = *(void (**)(char *, uint64_t))(*(void *)(v98 - 8) + 8);
          ((void (*)(void *__return_ptr, char *, uint64_t))v119)((void *)(v98 - 8), v16, v98);
          uint64_t v99 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v119(&v16[v99[9]], v98);
          v119(&v16[v99[10]], v98);
          uint64_t v96 = &v16[v99[11]];
          uint64_t v97 = v98;
LABEL_82:
          uint64_t v100 = (uint64_t (*)(char *, uint64_t))v119;
          goto LABEL_83;
        default:
          return result;
      }
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      unint64_t v7 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v7 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        uint64_t v20 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v20, v7);
        *(void *)(a1 + 24) = v20;
        *(void *)(a1 + 32) = v7;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      unint64_t v21 = *(void *)(a2 + 56);
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      }
      else
      {
        uint64_t v40 = *(void *)(a2 + 48);
        outlined copy of Data._Representation(v40, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v40;
        *(void *)(a1 + 56) = v21;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      long long v41 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v41;
      uint64_t v42 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v42;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      long long v43 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v43;
      uint64_t v44 = v43;
      uint64_t v45 = **(void (***)(uint64_t, uint64_t, uint64_t))(v43 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(a1 + 136, a2 + 136, v44);
      uint64_t v46 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v47 = *(int *)(v46 + 36);
      uint64_t v48 = (char *)(a1 + v47);
      unint64_t v49 = (char *)(a2 + v47);
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t v352 = v46;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v51 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v48, v49, v51);
          uint64_t v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v53 = v52[9];
          unint64_t v54 = &v48[v53];
          unint64_t v55 = &v49[v53];
          uint64_t v56 = type metadata accessor for SymmetricKey();
          uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
          uint64_t v58 = v55;
          uint64_t v46 = v352;
          v57(v54, v58, v56);
          v57(&v48[v52[10]], &v49[v52[10]], v56);
          v57(&v48[v52[11]], &v49[v52[11]], v56);
          v57(&v48[v52[12]], &v49[v52[12]], v56);
          goto LABEL_98;
        case 1u:
          uint64_t v200 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v200 - 8) + 16))(v48, v49, v200);
          unint64_t v201 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v202 = v201[9];
          uint64_t v203 = &v48[v202];
          uint64_t v204 = &v49[v202];
          uint64_t v205 = type metadata accessor for SymmetricKey();
          uint64_t v206 = *(void (**)(char *, char *, uint64_t))(*(void *)(v205 - 8) + 16);
          v206(v203, v204, v205);
          v206(&v48[v201[10]], &v49[v201[10]], v205);
          uint64_t v207 = v201[11];
          uint64_t v46 = v352;
          v206(&v48[v207], &v49[v207], v205);
          goto LABEL_98;
        case 2u:
          uint64_t v208 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v208 - 8) + 16))(v48, v49, v208);
          uint64_t v209 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v210 = v209[9];
          uint64_t v211 = &v48[v210];
          uint64_t v212 = &v49[v210];
          uint64_t v213 = type metadata accessor for SymmetricKey();
          uint64_t v214 = *(void (**)(char *, char *, uint64_t))(*(void *)(v213 - 8) + 16);
          v214(v211, v212, v213);
          v214(&v48[v209[10]], &v49[v209[10]], v213);
          v214(&v48[v209[11]], &v49[v209[11]], v213);
          v214(&v48[v209[12]], &v49[v209[12]], v213);
          v214(&v48[v209[13]], &v49[v209[13]], v213);
          uint64_t v215 = v209[14];
          uint64_t v46 = v352;
          v214(&v48[v215], &v49[v215], v213);
          goto LABEL_98;
        case 3u:
          uint64_t v216 = type metadata accessor for SymmetricKey();
          uint64_t v217 = *(void (**)(char *, char *, uint64_t))(*(void *)(v216 - 8) + 16);
          v217(v48, v49, v216);
          uint64_t v218 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v217(&v48[v218[9]], &v49[v218[9]], v216);
          v217(&v48[v218[10]], &v49[v218[10]], v216);
          uint64_t v219 = v216;
          uint64_t v46 = v352;
          v217(&v48[v218[11]], &v49[v218[11]], v219);
LABEL_98:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
          break;
      }
      uint64_t v220 = *(int *)(v46 + 40);
      uint64_t v221 = (char *)(a1 + v220);
      uint64_t v222 = (char *)(a2 + v220);
      uint64_t v223 = (int *)type metadata accessor for SessionTicket();
      uint64_t v224 = *((void *)v223 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v224 + 48))(v222, 1, v223))
      {
        uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v221, v222, *(void *)(*(void *)(v225 - 8) + 64));
      }
      else
      {
        uint64_t v226 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(v221, v222, v226);
        *(_DWORD *)&v221[v223[5]] = *(_DWORD *)&v222[v223[5]];
        *(_DWORD *)&v221[v223[6]] = *(_DWORD *)&v222[v223[6]];
        uint64_t v227 = v223[7];
        uint64_t v228 = (uint64_t *)&v221[v227];
        uint64_t v229 = &v222[v227];
        uint64_t v230 = *(void *)&v222[v227];
        unint64_t v231 = *(void *)&v222[v227 + 8];
        outlined copy of Data._Representation(v230, v231);
        uint64_t *v228 = v230;
        v228[1] = v231;
        v228[2] = *((void *)v229 + 2);
        uint64_t v232 = v223[8];
        uint64_t v233 = (uint64_t *)&v221[v232];
        uint64_t v234 = &v222[v232];
        uint64_t v235 = *(void *)&v222[v232];
        unint64_t v236 = *(void *)&v222[v232 + 8];
        outlined copy of Data._Representation(v235, v236);
        *uint64_t v233 = v235;
        v233[1] = v236;
        v233[2] = *((void *)v234 + 2);
        uint64_t v237 = v223[9];
        uint64_t v238 = &v221[v237];
        uint64_t v239 = &v222[v237];
        uint64_t v240 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v240 - 8) + 16))(v238, v239, v240);
        *(_DWORD *)&v221[v223[10]] = *(_DWORD *)&v222[v223[10]];
        *(_WORD *)&v221[v223[11]] = *(_WORD *)&v222[v223[11]];
        *(_WORD *)&v221[v223[12]] = *(_WORD *)&v222[v223[12]];
        uint64_t v241 = v223[13];
        uint64_t v242 = &v221[v241];
        uint64_t v243 = (uint64_t *)&v222[v241];
        unint64_t v244 = *(void *)&v222[v241 + 8];
        if (v244 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v242 = *(_OWORD *)v243;
        }
        else
        {
          uint64_t v319 = *v243;
          outlined copy of Data._Representation(*v243, v244);
          *(void *)uint64_t v242 = v319;
          *((void *)v242 + 1) = v244;
        }
        *((void *)v242 + 2) = v243[2];
        uint64_t v320 = v223[14];
        uint64_t v321 = &v221[v320];
        uint64_t v322 = &v222[v320];
        uint64_t v323 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v324 = *(void *)(v323 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v324 + 48))(v322, 1, v323))
        {
          uint64_t v325 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v321, v322, *(void *)(*(void *)(v325 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v324 + 16))(v321, v322, v323);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v324 + 56))(v321, 0, 1, v323);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v224 + 56))(v221, 0, 1, v223);
      }
      break;
    case 2u:
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        uint64_t v22 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v22, v9);
        *(void *)(a1 + 24) = v22;
        *(void *)(a1 + 32) = v9;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      unint64_t v23 = *(void *)(a2 + 56);
      if (v23 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      }
      else
      {
        uint64_t v59 = *(void *)(a2 + 48);
        outlined copy of Data._Representation(v59, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v59;
        *(void *)(a1 + 56) = v23;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      uint64_t v60 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v61 = v60[5];
      uint64_t v62 = a1 + v61;
      uint64_t v63 = a2 + v61;
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      uint64_t v353 = v60;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v64 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
        uint64_t v65 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)(v62 + v65[5]) = *(_DWORD *)(v63 + v65[5]);
        *(_DWORD *)(v62 + v65[6]) = *(_DWORD *)(v63 + v65[6]);
        uint64_t v66 = v65[7];
        uint64_t v67 = (uint64_t *)(v62 + v66);
        uint64_t v68 = v63 + v66;
        uint64_t v69 = *(void *)(v63 + v66);
        unint64_t v70 = *(void *)(v63 + v66 + 8);
        outlined copy of Data._Representation(v69, v70);
        *uint64_t v67 = v69;
        v67[1] = v70;
        v67[2] = *(void *)(v68 + 16);
        uint64_t v71 = v65[8];
        unint64_t v72 = (uint64_t *)(v62 + v71);
        uint64_t v73 = v63 + v71;
        uint64_t v74 = *(void *)(v63 + v71);
        unint64_t v75 = *(void *)(v63 + v71 + 8);
        outlined copy of Data._Representation(v74, v75);
        *unint64_t v72 = v74;
        v72[1] = v75;
        v72[2] = *(void *)(v73 + 16);
        uint64_t v76 = v65[9];
        uint64_t v77 = v62 + v76;
        uint64_t v78 = v63 + v76;
        uint64_t v79 = type metadata accessor for SymmetricKey();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
        *(_DWORD *)(v62 + v65[10]) = *(_DWORD *)(v63 + v65[10]);
        *(_WORD *)(v62 + v65[11]) = *(_WORD *)(v63 + v65[11]);
        *(_WORD *)(v62 + v65[12]) = *(_WORD *)(v63 + v65[12]);
        uint64_t v80 = v65[13];
        uint64_t v81 = v62 + v80;
        unint64_t v82 = (uint64_t *)(v63 + v80);
        unint64_t v83 = *(void *)(v63 + v80 + 8);
        if (v83 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
        }
        else
        {
          uint64_t v186 = *v82;
          outlined copy of Data._Representation(*v82, v83);
          *(void *)uint64_t v81 = v186;
          *(void *)(v81 + 8) = v83;
        }
        *(void *)(v81 + 16) = v82[2];
        uint64_t v187 = v65[14];
        uint64_t v188 = (void *)(v62 + v187);
        uint64_t v189 = (const void *)(v63 + v187);
        uint64_t v190 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v191 = *(void *)(v190 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v191 + 48))(v189, 1, v190))
        {
          uint64_t v192 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v188, v189, *(void *)(*(void *)(v192 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v191 + 16))(v188, v189, v190);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v191 + 56))(v188, 0, 1, v190);
        }
        uint64_t v60 = v353;
      }
      else
      {
        *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
        *(void *)(v62 + 8) = *(void *)(v63 + 8);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v252 = v60[6];
      uint64_t v253 = (char *)(a1 + v252);
      uint64_t v254 = (char *)(a2 + v252);
      uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v256 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v256 - 8) + 16))(v253, v254, v256);
          uint64_t v257 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v258 = v257[9];
          uint64_t v259 = &v253[v258];
          unint64_t v260 = &v254[v258];
          uint64_t v261 = type metadata accessor for SymmetricKey();
          uint64_t v262 = *(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 16);
          v262(v259, v260, v261);
          v262(&v253[v257[10]], &v254[v257[10]], v261);
          v262(&v253[v257[11]], &v254[v257[11]], v261);
          uint64_t v263 = v257[12];
          uint64_t v60 = v353;
          v262(&v253[v263], &v254[v263], v261);
          goto LABEL_114;
        case 1u:
          uint64_t v264 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v264 - 8) + 16))(v253, v254, v264);
          unint64_t v265 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v266 = v265[9];
          uint64_t v267 = &v253[v266];
          uint64_t v268 = &v254[v266];
          uint64_t v269 = type metadata accessor for SymmetricKey();
          uint64_t v270 = *(void (**)(char *, char *, uint64_t))(*(void *)(v269 - 8) + 16);
          v270(v267, v268, v269);
          v270(&v253[v265[10]], &v254[v265[10]], v269);
          uint64_t v271 = v265[11];
          uint64_t v60 = v353;
          v270(&v253[v271], &v254[v271], v269);
          goto LABEL_114;
        case 2u:
          uint64_t v272 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v272 - 8) + 16))(v253, v254, v272);
          unint64_t v273 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v274 = v273[9];
          uint64_t v275 = &v253[v274];
          uint64_t v276 = &v254[v274];
          uint64_t v277 = type metadata accessor for SymmetricKey();
          uint64_t v278 = *(void (**)(char *, char *, uint64_t))(*(void *)(v277 - 8) + 16);
          v278(v275, v276, v277);
          v278(&v253[v273[10]], &v254[v273[10]], v277);
          v278(&v253[v273[11]], &v254[v273[11]], v277);
          v278(&v253[v273[12]], &v254[v273[12]], v277);
          v278(&v253[v273[13]], &v254[v273[13]], v277);
          uint64_t v279 = v273[14];
          uint64_t v60 = v353;
          v278(&v253[v279], &v254[v279], v277);
          goto LABEL_114;
        case 3u:
          uint64_t v280 = type metadata accessor for SymmetricKey();
          uint64_t v281 = *(void (**)(char *, char *, uint64_t))(*(void *)(v280 - 8) + 16);
          v281(v253, v254, v280);
          long long v282 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v281(&v253[v282[9]], &v254[v282[9]], v280);
          v281(&v253[v282[10]], &v254[v282[10]], v280);
          uint64_t v283 = v280;
          uint64_t v60 = v353;
          v281(&v253[v282[11]], &v254[v282[11]], v283);
LABEL_114:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v253, v254, *(void *)(*(void *)(v255 - 8) + 64));
          break;
      }
      *(_WORD *)(a1 + v60[7]) = *(_WORD *)(a2 + v60[7]);
      *(_WORD *)(a1 + v60[8]) = *(_WORD *)(a2 + v60[8]);
      break;
    case 3u:
      uint64_t v10 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v10;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      unint64_t v11 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        uint64_t v24 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v24, v11);
        *(void *)(a1 + 24) = v24;
        *(void *)(a1 + 32) = v11;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      unint64_t v25 = *(void *)(a2 + 56);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      }
      else
      {
        uint64_t v84 = *(void *)(a2 + 48);
        outlined copy of Data._Representation(v84, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v84;
        *(void *)(a1 + 56) = v25;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      uint64_t v85 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v86 = v85[5];
      uint64_t v87 = a1 + v86;
      uint64_t v88 = a2 + v86;
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v89 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 16))(v87, v88, v89);
        uint64_t v90 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)(v87 + v90[5]) = *(_DWORD *)(v88 + v90[5]);
        *(_DWORD *)(v87 + v90[6]) = *(_DWORD *)(v88 + v90[6]);
        uint64_t v91 = v90[7];
        uint64_t v92 = (uint64_t *)(v87 + v91);
        uint64_t v93 = v88 + v91;
        uint64_t v94 = *(void *)(v88 + v91);
        unint64_t v95 = *(void *)(v88 + v91 + 8);
        outlined copy of Data._Representation(v94, v95);
        uint64_t *v92 = v94;
        v92[1] = v95;
        v92[2] = *(void *)(v93 + 16);
        uint64_t v96 = v90[8];
        uint64_t v97 = (uint64_t *)(v87 + v96);
        uint64_t v98 = v88 + v96;
        uint64_t v99 = *(void *)(v88 + v96);
        unint64_t v100 = *(void *)(v88 + v96 + 8);
        outlined copy of Data._Representation(v99, v100);
        *uint64_t v97 = v99;
        v97[1] = v100;
        v97[2] = *(void *)(v98 + 16);
        uint64_t v101 = v90[9];
        uint64_t v102 = v87 + v101;
        uint64_t v103 = v88 + v101;
        uint64_t v104 = type metadata accessor for SymmetricKey();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
        *(_DWORD *)(v87 + v90[10]) = *(_DWORD *)(v88 + v90[10]);
        *(_WORD *)(v87 + v90[11]) = *(_WORD *)(v88 + v90[11]);
        *(_WORD *)(v87 + v90[12]) = *(_WORD *)(v88 + v90[12]);
        uint64_t v105 = v90[13];
        uint64_t v106 = v87 + v105;
        uint64_t v107 = (uint64_t *)(v88 + v105);
        unint64_t v108 = *(void *)(v88 + v105 + 8);
        if (v108 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
        }
        else
        {
          uint64_t v193 = *v107;
          outlined copy of Data._Representation(*v107, v108);
          *(void *)uint64_t v106 = v193;
          *(void *)(v106 + 8) = v108;
        }
        *(void *)(v106 + 16) = v107[2];
        uint64_t v194 = v90[14];
        int v195 = (void *)(v87 + v194);
        uint64_t v196 = (const void *)(v88 + v194);
        uint64_t v197 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v198 = *(void *)(v197 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v198 + 48))(v196, 1, v197))
        {
          uint64_t v199 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v195, v196, *(void *)(*(void *)(v199 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v198 + 16))(v195, v196, v197);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v198 + 56))(v195, 0, 1, v197);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
        *(unsigned char *)(v87 + 4) = *(unsigned char *)(v88 + 4);
        uint64_t v130 = *(void *)(v88 + 16);
        *(void *)(v87 + 8) = *(void *)(v88 + 8);
        *(void *)(v87 + 16) = v130;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v284 = v85[6];
      uint64_t v285 = a1 + v284;
      uint64_t v286 = (uint64_t *)(a2 + v284);
      unint64_t v287 = *(void *)(a2 + v284 + 8);
      if (v287 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v285 = *(_OWORD *)v286;
      }
      else
      {
        uint64_t v288 = *v286;
        outlined copy of Data._Representation(*v286, v287);
        *(void *)uint64_t v285 = v288;
        *(void *)(v285 + 8) = v287;
      }
      *(void *)(v285 + 16) = v286[2];
      uint64_t v289 = v85[7];
      uint64_t v290 = a1 + v289;
      uint64_t v291 = (uint64_t *)(a2 + v289);
      unint64_t v292 = *(void *)(a2 + v289 + 8);
      if (v292 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v290 = *(_OWORD *)v291;
      }
      else
      {
        uint64_t v293 = *v291;
        outlined copy of Data._Representation(*v291, v292);
        *(void *)uint64_t v290 = v293;
        *(void *)(v290 + 8) = v292;
      }
      *(void *)(v290 + 16) = v291[2];
      *(unsigned char *)(a1 + v85[8]) = *(unsigned char *)(a2 + v85[8]);
      uint64_t v294 = v85[9];
      unint64_t v171 = (char *)(a1 + v294);
      uint64_t v172 = (char *)(a2 + v294);
      uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_124;
        case 1u:
          goto LABEL_128;
        case 2u:
          goto LABEL_130;
        case 3u:
          goto LABEL_126;
        default:
          goto LABEL_139;
      }
    case 4u:
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v12;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      unint64_t v13 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v13 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        uint64_t v26 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v26, v13);
        *(void *)(a1 + 24) = v26;
        *(void *)(a1 + 32) = v13;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      unint64_t v27 = *(void *)(a2 + 56);
      if (v27 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      }
      else
      {
        uint64_t v109 = *(void *)(a2 + 48);
        outlined copy of Data._Representation(v109, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v109;
        *(void *)(a1 + 56) = v27;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      int v110 = *(_DWORD *)(a2 + 76);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 76) = v110;
      unint64_t v111 = *(void *)(a2 + 88);
      if (v111 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      }
      else
      {
        uint64_t v131 = *(void *)(a2 + 80);
        outlined copy of Data._Representation(v131, *(void *)(a2 + 88));
        *(void *)(a1 + 80) = v131;
        *(void *)(a1 + 88) = v111;
      }
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      unint64_t v132 = *(void *)(a2 + 112);
      if (v132 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      }
      else
      {
        uint64_t v133 = *(void *)(a2 + 104);
        outlined copy of Data._Representation(v133, *(void *)(a2 + 112));
        *(void *)(a1 + 104) = v133;
        *(void *)(a1 + 112) = v132;
      }
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      uint64_t v134 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v135 = *(int *)(v134 + 40);
      uint64_t v136 = (void *)(a1 + v135);
      uint64_t v137 = (const void *)(a2 + v135);
      uint64_t v138 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v139 = *(void *)(v138 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
      {
        uint64_t v140 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v139 + 16))(v136, v137, v138);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
      }
      uint64_t v185 = *(int *)(v134 + 44);
      unint64_t v171 = (char *)(a1 + v185);
      uint64_t v172 = (char *)(a2 + v185);
      uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_124;
        case 1u:
          goto LABEL_128;
        case 2u:
          goto LABEL_130;
        case 3u:
          goto LABEL_126;
        default:
          goto LABEL_139;
      }
    case 5u:
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      unint64_t v15 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v15 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        uint64_t v28 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v28, v15);
        *(void *)(a1 + 24) = v28;
        *(void *)(a1 + 32) = v15;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      unint64_t v29 = *(void *)(a2 + 56);
      if (v29 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      }
      else
      {
        uint64_t v112 = *(void *)(a2 + 48);
        outlined copy of Data._Representation(v112, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v112;
        *(void *)(a1 + 56) = v29;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      int v113 = *(_DWORD *)(a2 + 76);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 76) = v113;
      uint64_t v114 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v115 = v114[7];
      unint64_t v116 = (void *)(a1 + v115);
      __int16 v117 = (const void *)(a2 + v115);
      uint64_t v118 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v119 = *(void *)(v118 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
      {
        uint64_t v120 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v119 + 16))(v116, v117, v118);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
      }
      uint64_t v160 = v114[8];
      uint64_t v161 = a1 + v160;
      unint64_t v162 = (uint64_t *)(a2 + v160);
      unint64_t v163 = *(void *)(a2 + v160 + 8);
      if (v163 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
      }
      else
      {
        uint64_t v164 = *v162;
        outlined copy of Data._Representation(*v162, v163);
        *(void *)uint64_t v161 = v164;
        *(void *)(v161 + 8) = v163;
      }
      *(void *)(v161 + 16) = v162[2];
      uint64_t v165 = v114[9];
      uint64_t v166 = a1 + v165;
      uint64_t v167 = (uint64_t *)(a2 + v165);
      unint64_t v168 = *(void *)(a2 + v165 + 8);
      if (v168 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
      }
      else
      {
        uint64_t v169 = *v167;
        outlined copy of Data._Representation(*v167, v168);
        *(void *)uint64_t v166 = v169;
        *(void *)(v166 + 8) = v168;
      }
      *(void *)(v166 + 16) = v167[2];
      *(unsigned char *)(a1 + v114[10]) = *(unsigned char *)(a2 + v114[10]);
      uint64_t v170 = v114[11];
      unint64_t v171 = (char *)(a1 + v170);
      uint64_t v172 = (char *)(a2 + v170);
      uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_124;
        case 1u:
          goto LABEL_128;
        case 2u:
          goto LABEL_130;
        case 3u:
          goto LABEL_126;
        default:
          goto LABEL_139;
      }
    case 6u:
      uint64_t v16 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      unint64_t v17 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        uint64_t v30 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v30, v17);
        *(void *)(a1 + 24) = v30;
        *(void *)(a1 + 32) = v17;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      unint64_t v31 = *(void *)(a2 + 56);
      if (v31 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      }
      else
      {
        uint64_t v121 = *(void *)(a2 + 48);
        outlined copy of Data._Representation(v121, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v121;
        *(void *)(a1 + 56) = v31;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      int v122 = *(_DWORD *)(a2 + 76);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 76) = v122;
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v124 = ready[7];
      int v125 = (void *)(a1 + v124);
      long long v126 = (const void *)(a2 + v124);
      uint64_t v127 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v128 = *(void *)(v127 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
      {
        uint64_t v129 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v128 + 16))(v125, v126, v127);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
      }
      uint64_t v174 = ready[8];
      uint64_t v175 = a1 + v174;
      uint64_t v176 = (uint64_t *)(a2 + v174);
      unint64_t v177 = *(void *)(a2 + v174 + 8);
      if (v177 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v175 = *(_OWORD *)v176;
      }
      else
      {
        uint64_t v178 = *v176;
        outlined copy of Data._Representation(*v176, v177);
        *(void *)uint64_t v175 = v178;
        *(void *)(v175 + 8) = v177;
      }
      *(void *)(v175 + 16) = v176[2];
      uint64_t v179 = ready[9];
      uint64_t v180 = a1 + v179;
      uint64_t v181 = (uint64_t *)(a2 + v179);
      unint64_t v182 = *(void *)(a2 + v179 + 8);
      if (v182 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v180 = *(_OWORD *)v181;
      }
      else
      {
        uint64_t v183 = *v181;
        outlined copy of Data._Representation(*v181, v182);
        *(void *)uint64_t v180 = v183;
        *(void *)(v180 + 8) = v182;
      }
      *(void *)(v180 + 16) = v181[2];
      *(unsigned char *)(a1 + ready[10]) = *(unsigned char *)(a2 + ready[10]);
      uint64_t v184 = ready[11];
      unint64_t v171 = (char *)(a1 + v184);
      uint64_t v172 = (char *)(a2 + v184);
      uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_124:
          uint64_t v295 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v295 - 8) + 16))(v171, v172, v295);
          uint64_t v296 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v297 = v296[9];
          uint64_t v298 = &v171[v297];
          unint64_t v299 = &v172[v297];
          uint64_t v300 = type metadata accessor for SymmetricKey();
          uint64_t v301 = *(void (**)(char *, char *, uint64_t))(*(void *)(v300 - 8) + 16);
          v301(v298, v299, v300);
          v301(&v171[v296[10]], &v172[v296[10]], v300);
          v301(&v171[v296[11]], &v172[v296[11]], v300);
          v301(&v171[v296[12]], &v172[v296[12]], v300);
          goto LABEL_131;
        case 1u:
LABEL_128:
          uint64_t v305 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v305 - 8) + 16))(v171, v172, v305);
          long long v306 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v307 = v306[9];
          uint64_t v308 = &v171[v307];
          long long v309 = &v172[v307];
          uint64_t v310 = type metadata accessor for SymmetricKey();
          uint64_t v311 = *(void (**)(char *, char *, uint64_t))(*(void *)(v310 - 8) + 16);
          v311(v308, v309, v310);
          v311(&v171[v306[10]], &v172[v306[10]], v310);
          v311(&v171[v306[11]], &v172[v306[11]], v310);
          goto LABEL_131;
        case 2u:
LABEL_130:
          uint64_t v312 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v312 - 8) + 16))(v171, v172, v312);
          uint64_t v313 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v314 = v313[9];
          uint64_t v315 = &v171[v314];
          unint64_t v316 = &v172[v314];
          uint64_t v317 = type metadata accessor for SymmetricKey();
          uint64_t v318 = *(void (**)(char *, char *, uint64_t))(*(void *)(v317 - 8) + 16);
          v318(v315, v316, v317);
          v318(&v171[v313[10]], &v172[v313[10]], v317);
          v318(&v171[v313[11]], &v172[v313[11]], v317);
          v318(&v171[v313[12]], &v172[v313[12]], v317);
          v318(&v171[v313[13]], &v172[v313[13]], v317);
          v318(&v171[v313[14]], &v172[v313[14]], v317);
          goto LABEL_131;
        case 3u:
LABEL_126:
          uint64_t v302 = type metadata accessor for SymmetricKey();
          uint64_t v303 = *(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16);
          v303(v171, v172, v302);
          uint64_t v304 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v303(&v171[v304[9]], &v172[v304[9]], v302);
          v303(&v171[v304[10]], &v172[v304[10]], v302);
          v303(&v171[v304[11]], &v172[v304[11]], v302);
          goto LABEL_131;
        default:
          goto LABEL_139;
      }
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      unint64_t v5 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v5 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        uint64_t v18 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v18, v5);
        *(void *)(a1 + 24) = v18;
        *(void *)(a1 + 32) = v5;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      unint64_t v19 = *(void *)(a2 + 56);
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      }
      else
      {
        uint64_t v32 = *(void *)(a2 + 48);
        outlined copy of Data._Representation(v32, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v32;
        *(void *)(a1 + 56) = v19;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      uint64_t v33 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v34 = *(int *)(v33 + 20);
      uint64_t v35 = (char *)(a1 + v34);
      unint64_t v36 = (char *)(a2 + v34);
      uint64_t v37 = (int *)type metadata accessor for SessionTicket();
      uint64_t v38 = *((void *)v37 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        uint64_t v354 = v33;
        uint64_t v141 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 16))(v35, v36, v141);
        *(_DWORD *)&v35[v37[5]] = *(_DWORD *)&v36[v37[5]];
        *(_DWORD *)&v35[v37[6]] = *(_DWORD *)&v36[v37[6]];
        uint64_t v142 = v37[7];
        uint64_t v143 = (uint64_t *)&v35[v142];
        uint64_t v144 = &v36[v142];
        uint64_t v145 = *(void *)&v36[v142];
        unint64_t v146 = *(void *)&v36[v142 + 8];
        outlined copy of Data._Representation(v145, v146);
        *uint64_t v143 = v145;
        v143[1] = v146;
        v143[2] = *((void *)v144 + 2);
        uint64_t v147 = v37[8];
        uint64_t v148 = (uint64_t *)&v35[v147];
        unint64_t v149 = &v36[v147];
        uint64_t v150 = *(void *)&v36[v147];
        unint64_t v151 = *(void *)&v36[v147 + 8];
        outlined copy of Data._Representation(v150, v151);
        *uint64_t v148 = v150;
        v148[1] = v151;
        v148[2] = *((void *)v149 + 2);
        uint64_t v152 = v37[9];
        uint64_t v153 = &v35[v152];
        unint64_t v154 = &v36[v152];
        uint64_t v155 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 16))(v153, v154, v155);
        *(_DWORD *)&v35[v37[10]] = *(_DWORD *)&v36[v37[10]];
        *(_WORD *)&v35[v37[11]] = *(_WORD *)&v36[v37[11]];
        *(_WORD *)&v35[v37[12]] = *(_WORD *)&v36[v37[12]];
        uint64_t v156 = v37[13];
        __int16 v157 = &v35[v156];
        uint64_t v158 = (uint64_t *)&v36[v156];
        unint64_t v159 = *(void *)&v36[v156 + 8];
        if (v159 >> 60 == 15)
        {
          *(_OWORD *)__int16 v157 = *(_OWORD *)v158;
        }
        else
        {
          uint64_t v245 = *v158;
          outlined copy of Data._Representation(*v158, v159);
          *(void *)__int16 v157 = v245;
          *((void *)v157 + 1) = v159;
        }
        *((void *)v157 + 2) = v158[2];
        uint64_t v33 = v354;
        uint64_t v246 = v37[14];
        uint64_t v247 = &v35[v246];
        uint64_t v248 = &v36[v246];
        uint64_t v249 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v250 = *(void *)(v249 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249))
        {
          uint64_t v251 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v247, v248, *(void *)(*(void *)(v251 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v247, v248, v249);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, v249);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
      }
      uint64_t v326 = *(int *)(v33 + 24);
      unint64_t v171 = (char *)(a1 + v326);
      uint64_t v172 = (char *)(a2 + v326);
      uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v327 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v327 - 8) + 16))(v171, v172, v327);
          uint64_t v328 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v329 = v328[9];
          uint64_t v330 = &v171[v329];
          uint64_t v331 = &v172[v329];
          uint64_t v332 = type metadata accessor for SymmetricKey();
          uint64_t v333 = *(void (**)(char *, char *, uint64_t))(*(void *)(v332 - 8) + 16);
          v333(v330, v331, v332);
          v333(&v171[v328[10]], &v172[v328[10]], v332);
          v333(&v171[v328[11]], &v172[v328[11]], v332);
          v333(&v171[v328[12]], &v172[v328[12]], v332);
          goto LABEL_131;
        case 1u:
          uint64_t v334 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v334 - 8) + 16))(v171, v172, v334);
          uint64_t v335 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v336 = v335[9];
          uint64_t v337 = &v171[v336];
          uint64_t v338 = &v172[v336];
          uint64_t v339 = type metadata accessor for SymmetricKey();
          uint64_t v340 = *(void (**)(char *, char *, uint64_t))(*(void *)(v339 - 8) + 16);
          v340(v337, v338, v339);
          v340(&v171[v335[10]], &v172[v335[10]], v339);
          v340(&v171[v335[11]], &v172[v335[11]], v339);
          goto LABEL_131;
        case 2u:
          uint64_t v341 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v341 - 8) + 16))(v171, v172, v341);
          uint64_t v342 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v343 = v342[9];
          uint64_t v344 = &v171[v343];
          uint64_t v345 = &v172[v343];
          uint64_t v346 = type metadata accessor for SymmetricKey();
          uint64_t v347 = *(void (**)(char *, char *, uint64_t))(*(void *)(v346 - 8) + 16);
          v347(v344, v345, v346);
          v347(&v171[v342[10]], &v172[v342[10]], v346);
          v347(&v171[v342[11]], &v172[v342[11]], v346);
          v347(&v171[v342[12]], &v172[v342[12]], v346);
          v347(&v171[v342[13]], &v172[v342[13]], v346);
          v347(&v171[v342[14]], &v172[v342[14]], v346);
          goto LABEL_131;
        case 3u:
          uint64_t v348 = type metadata accessor for SymmetricKey();
          uint64_t v349 = *(void (**)(char *, char *, uint64_t))(*(void *)(v348 - 8) + 16);
          v349(v171, v172, v348);
          uint64_t v350 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v349(&v171[v350[9]], &v172[v350[9]], v348);
          v349(&v171[v350[10]], &v172[v350[10]], v348);
          v349(&v171[v350[11]], &v172[v350[11]], v348);
LABEL_131:
          swift_storeEnumTagMultiPayload();
          break;
        default:
LABEL_139:
          memcpy(v171, v172, *(void *)(*(void *)(v173 - 8) + 64));
          break;
      }
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for HandshakeState(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1(a1, type metadata accessor for HandshakeState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        unint64_t v6 = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v6 >> 60 == 15)
        {
          long long v7 = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v7;
        }
        else
        {
          uint64_t v21 = *(void *)(a2 + 24);
          outlined copy of Data._Representation(v21, v6);
          *(void *)(a1 + 24) = v21;
          *(void *)(a1 + 32) = v6;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
        }
        unint64_t v22 = *(void *)(a2 + 56);
        if (v22 >> 60 == 15)
        {
          long long v23 = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = v23;
        }
        else
        {
          uint64_t v48 = *(void *)(a2 + 48);
          outlined copy of Data._Representation(v48, *(void *)(a2 + 56));
          *(void *)(a1 + 48) = v48;
          *(void *)(a1 + 56) = v22;
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        __int16 v49 = *(_WORD *)(a2 + 72);
        *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
        *(_WORD *)(a1 + 72) = v49;
        *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
        long long v50 = *(_OWORD *)(a2 + 80);
        long long v51 = *(_OWORD *)(a2 + 96);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_OWORD *)(a1 + 80) = v50;
        *(_OWORD *)(a1 + 96) = v51;
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        uint64_t v52 = *(void *)(a2 + 160);
        *(void *)(a1 + 160) = v52;
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        uint64_t v53 = **(void (***)(uint64_t, uint64_t, uint64_t))(v52 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v53(a1 + 136, a2 + 136, v52);
        uint64_t v54 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v55 = *(int *)(v54 + 36);
        uint64_t v56 = (char *)(a1 + v55);
        uint64_t v57 = (char *)(a2 + v55);
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        uint64_t v373 = v54;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v59 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v56, v57, v59);
            uint64_t v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v61 = v60[9];
            uint64_t v62 = &v56[v61];
            uint64_t v63 = &v57[v61];
            uint64_t v64 = type metadata accessor for SymmetricKey();
            uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
            v65(v62, v63, v64);
            v65(&v56[v60[10]], &v57[v60[10]], v64);
            v65(&v56[v60[11]], &v57[v60[11]], v64);
            uint64_t v66 = v64;
            uint64_t v54 = v373;
            v65(&v56[v60[12]], &v57[v60[12]], v66);
            goto LABEL_99;
          case 1u:
            uint64_t v218 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 16))(v56, v57, v218);
            uint64_t v219 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v220 = v219[9];
            uint64_t v221 = &v56[v220];
            uint64_t v222 = &v57[v220];
            uint64_t v223 = type metadata accessor for SymmetricKey();
            uint64_t v224 = *(void (**)(char *, char *, uint64_t))(*(void *)(v223 - 8) + 16);
            v224(v221, v222, v223);
            v224(&v56[v219[10]], &v57[v219[10]], v223);
            uint64_t v225 = v219[11];
            uint64_t v54 = v373;
            v224(&v56[v225], &v57[v225], v223);
            goto LABEL_99;
          case 2u:
            uint64_t v226 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(v56, v57, v226);
            uint64_t v227 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v228 = v227[9];
            uint64_t v229 = &v56[v228];
            uint64_t v230 = &v57[v228];
            uint64_t v231 = type metadata accessor for SymmetricKey();
            uint64_t v232 = *(void (**)(char *, char *, uint64_t))(*(void *)(v231 - 8) + 16);
            v232(v229, v230, v231);
            v232(&v56[v227[10]], &v57[v227[10]], v231);
            v232(&v56[v227[11]], &v57[v227[11]], v231);
            v232(&v56[v227[12]], &v57[v227[12]], v231);
            v232(&v56[v227[13]], &v57[v227[13]], v231);
            uint64_t v233 = v227[14];
            uint64_t v54 = v373;
            v232(&v56[v233], &v57[v233], v231);
            goto LABEL_99;
          case 3u:
            uint64_t v234 = type metadata accessor for SymmetricKey();
            uint64_t v235 = *(void (**)(char *, char *, uint64_t))(*(void *)(v234 - 8) + 16);
            v235(v56, v57, v234);
            unint64_t v236 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v235(&v56[v236[9]], &v57[v236[9]], v234);
            v235(&v56[v236[10]], &v57[v236[10]], v234);
            uint64_t v237 = v234;
            uint64_t v54 = v373;
            v235(&v56[v236[11]], &v57[v236[11]], v237);
LABEL_99:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
            break;
        }
        uint64_t v238 = *(int *)(v54 + 40);
        uint64_t v239 = (char *)(a1 + v238);
        uint64_t v240 = (char *)(a2 + v238);
        uint64_t v241 = (int *)type metadata accessor for SessionTicket();
        uint64_t v242 = *((void *)v241 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v242 + 48))(v240, 1, v241))
        {
          uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v239, v240, *(void *)(*(void *)(v243 - 8) + 64));
        }
        else
        {
          uint64_t v244 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v244 - 8) + 16))(v239, v240, v244);
          *(_DWORD *)&v239[v241[5]] = *(_DWORD *)&v240[v241[5]];
          *(_DWORD *)&v239[v241[6]] = *(_DWORD *)&v240[v241[6]];
          uint64_t v245 = v241[7];
          uint64_t v246 = (uint64_t *)&v239[v245];
          uint64_t v247 = &v240[v245];
          uint64_t v248 = *(void *)&v240[v245];
          unint64_t v249 = *(void *)&v240[v245 + 8];
          outlined copy of Data._Representation(v248, v249);
          *uint64_t v246 = v248;
          v246[1] = v249;
          v246[2] = *((void *)v247 + 2);
          uint64_t v250 = v241[8];
          uint64_t v251 = (uint64_t *)&v239[v250];
          uint64_t v252 = &v240[v250];
          uint64_t v253 = *(void *)&v240[v250];
          unint64_t v254 = *(void *)&v240[v250 + 8];
          outlined copy of Data._Representation(v253, v254);
          *uint64_t v251 = v253;
          v251[1] = v254;
          v251[2] = *((void *)v252 + 2);
          uint64_t v255 = v241[9];
          uint64_t v256 = &v239[v255];
          uint64_t v257 = &v240[v255];
          uint64_t v258 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v258 - 8) + 16))(v256, v257, v258);
          *(_DWORD *)&v239[v241[10]] = *(_DWORD *)&v240[v241[10]];
          *(_WORD *)&v239[v241[11]] = *(_WORD *)&v240[v241[11]];
          *(_WORD *)&v239[v241[12]] = *(_WORD *)&v240[v241[12]];
          uint64_t v259 = v241[13];
          unint64_t v260 = &v239[v259];
          uint64_t v261 = (uint64_t *)&v240[v259];
          unint64_t v262 = *(void *)&v240[v259 + 8];
          if (v262 >> 60 == 15)
          {
            long long v263 = *(_OWORD *)v261;
            *((void *)v260 + 2) = v261[2];
            *(_OWORD *)unint64_t v260 = v263;
          }
          else
          {
            uint64_t v340 = *v261;
            outlined copy of Data._Representation(*v261, v262);
            *(void *)unint64_t v260 = v340;
            *((void *)v260 + 1) = v262;
            *((void *)v260 + 2) = v261[2];
          }
          uint64_t v341 = v241[14];
          uint64_t v342 = &v239[v341];
          uint64_t v343 = &v240[v341];
          uint64_t v344 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v345 = *(void *)(v344 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v345 + 48))(v343, 1, v344))
          {
            uint64_t v346 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v342, v343, *(void *)(*(void *)(v346 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v345 + 16))(v342, v343, v344);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v345 + 56))(v342, 0, 1, v344);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v242 + 56))(v239, 0, 1, v241);
        }
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        unint64_t v8 = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v8 >> 60 == 15)
        {
          long long v9 = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v9;
        }
        else
        {
          uint64_t v24 = *(void *)(a2 + 24);
          outlined copy of Data._Representation(v24, v8);
          *(void *)(a1 + 24) = v24;
          *(void *)(a1 + 32) = v8;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
        }
        unint64_t v25 = *(void *)(a2 + 56);
        if (v25 >> 60 == 15)
        {
          long long v26 = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = v26;
        }
        else
        {
          uint64_t v67 = *(void *)(a2 + 48);
          outlined copy of Data._Representation(v67, *(void *)(a2 + 56));
          *(void *)(a1 + 48) = v67;
          *(void *)(a1 + 56) = v25;
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        __int16 v68 = *(_WORD *)(a2 + 72);
        *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
        *(_WORD *)(a1 + 72) = v68;
        *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
        uint64_t v69 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v70 = v69[5];
        uint64_t v71 = a1 + v70;
        uint64_t v72 = a2 + v70;
        type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        uint64_t v374 = v69;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v73 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16))(v71, v72, v73);
          uint64_t v74 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)(v71 + v74[5]) = *(_DWORD *)(v72 + v74[5]);
          *(_DWORD *)(v71 + v74[6]) = *(_DWORD *)(v72 + v74[6]);
          uint64_t v75 = v74[7];
          uint64_t v76 = (uint64_t *)(v71 + v75);
          uint64_t v77 = v72 + v75;
          uint64_t v78 = *(void *)(v72 + v75);
          unint64_t v79 = *(void *)(v72 + v75 + 8);
          outlined copy of Data._Representation(v78, v79);
          *uint64_t v76 = v78;
          v76[1] = v79;
          v76[2] = *(void *)(v77 + 16);
          uint64_t v80 = v74[8];
          uint64_t v81 = (uint64_t *)(v71 + v80);
          uint64_t v82 = v72 + v80;
          uint64_t v83 = *(void *)(v72 + v80);
          unint64_t v84 = *(void *)(v72 + v80 + 8);
          outlined copy of Data._Representation(v83, v84);
          *uint64_t v81 = v83;
          v81[1] = v84;
          v81[2] = *(void *)(v82 + 16);
          uint64_t v85 = v74[9];
          uint64_t v86 = v71 + v85;
          uint64_t v87 = v72 + v85;
          uint64_t v88 = type metadata accessor for SymmetricKey();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 16))(v86, v87, v88);
          *(_DWORD *)(v71 + v74[10]) = *(_DWORD *)(v72 + v74[10]);
          *(_WORD *)(v71 + v74[11]) = *(_WORD *)(v72 + v74[11]);
          *(_WORD *)(v71 + v74[12]) = *(_WORD *)(v72 + v74[12]);
          uint64_t v89 = v74[13];
          uint64_t v90 = v71 + v89;
          uint64_t v91 = (uint64_t *)(v72 + v89);
          unint64_t v92 = *(void *)(v72 + v89 + 8);
          if (v92 >> 60 == 15)
          {
            long long v93 = *(_OWORD *)v91;
            *(void *)(v90 + 16) = v91[2];
            *(_OWORD *)uint64_t v90 = v93;
          }
          else
          {
            uint64_t v204 = *v91;
            outlined copy of Data._Representation(*v91, v92);
            *(void *)uint64_t v90 = v204;
            *(void *)(v90 + 8) = v92;
            *(void *)(v90 + 16) = v91[2];
          }
          uint64_t v205 = v74[14];
          uint64_t v206 = (void *)(v71 + v205);
          uint64_t v207 = (const void *)(v72 + v205);
          uint64_t v208 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v209 = *(void *)(v208 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
          {
            uint64_t v210 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v206, v207, *(void *)(*(void *)(v210 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v209 + 16))(v206, v207, v208);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
          }
          uint64_t v69 = v374;
        }
        else
        {
          *(_WORD *)uint64_t v71 = *(_WORD *)v72;
          *(_WORD *)(v71 + 2) = *(_WORD *)(v72 + 2);
          *(void *)(v71 + 8) = *(void *)(v72 + 8);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v271 = v69[6];
        uint64_t v272 = (char *)(a1 + v271);
        unint64_t v273 = (char *)(a2 + v271);
        uint64_t v274 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v275 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v275 - 8) + 16))(v272, v273, v275);
            uint64_t v276 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v277 = v276[9];
            uint64_t v278 = &v272[v277];
            uint64_t v279 = &v273[v277];
            uint64_t v280 = type metadata accessor for SymmetricKey();
            uint64_t v281 = *(void (**)(char *, char *, uint64_t))(*(void *)(v280 - 8) + 16);
            v281(v278, v279, v280);
            v281(&v272[v276[10]], &v273[v276[10]], v280);
            v281(&v272[v276[11]], &v273[v276[11]], v280);
            uint64_t v282 = v276[12];
            uint64_t v69 = v374;
            v281(&v272[v282], &v273[v282], v280);
            goto LABEL_115;
          case 1u:
            uint64_t v283 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v283 - 8) + 16))(v272, v273, v283);
            uint64_t v284 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v285 = v284[9];
            uint64_t v286 = &v272[v285];
            unint64_t v287 = &v273[v285];
            uint64_t v288 = type metadata accessor for SymmetricKey();
            uint64_t v289 = *(void (**)(char *, char *, uint64_t))(*(void *)(v288 - 8) + 16);
            v289(v286, v287, v288);
            v289(&v272[v284[10]], &v273[v284[10]], v288);
            uint64_t v290 = v284[11];
            uint64_t v69 = v374;
            v289(&v272[v290], &v273[v290], v288);
            goto LABEL_115;
          case 2u:
            uint64_t v291 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v291 - 8) + 16))(v272, v273, v291);
            unint64_t v292 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v293 = v292[9];
            uint64_t v294 = &v272[v293];
            uint64_t v295 = &v273[v293];
            uint64_t v296 = type metadata accessor for SymmetricKey();
            uint64_t v297 = *(void (**)(char *, char *, uint64_t))(*(void *)(v296 - 8) + 16);
            v297(v294, v295, v296);
            v297(&v272[v292[10]], &v273[v292[10]], v296);
            v297(&v272[v292[11]], &v273[v292[11]], v296);
            v297(&v272[v292[12]], &v273[v292[12]], v296);
            v297(&v272[v292[13]], &v273[v292[13]], v296);
            uint64_t v298 = v292[14];
            uint64_t v69 = v374;
            v297(&v272[v298], &v273[v298], v296);
            goto LABEL_115;
          case 3u:
            uint64_t v299 = type metadata accessor for SymmetricKey();
            uint64_t v300 = *(void (**)(char *, char *, uint64_t))(*(void *)(v299 - 8) + 16);
            v300(v272, v273, v299);
            uint64_t v301 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v300(&v272[v301[9]], &v273[v301[9]], v299);
            v300(&v272[v301[10]], &v273[v301[10]], v299);
            uint64_t v302 = v299;
            uint64_t v69 = v374;
            v300(&v272[v301[11]], &v273[v301[11]], v302);
LABEL_115:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v272, v273, *(void *)(*(void *)(v274 - 8) + 64));
            break;
        }
        *(_WORD *)(a1 + v69[7]) = *(_WORD *)(a2 + v69[7]);
        *(_WORD *)(a1 + v69[8]) = *(_WORD *)(a2 + v69[8]);
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        unint64_t v10 = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v10 >> 60 == 15)
        {
          long long v11 = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v11;
        }
        else
        {
          uint64_t v27 = *(void *)(a2 + 24);
          outlined copy of Data._Representation(v27, v10);
          *(void *)(a1 + 24) = v27;
          *(void *)(a1 + 32) = v10;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
        }
        unint64_t v28 = *(void *)(a2 + 56);
        if (v28 >> 60 == 15)
        {
          long long v29 = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = v29;
        }
        else
        {
          uint64_t v94 = *(void *)(a2 + 48);
          outlined copy of Data._Representation(v94, *(void *)(a2 + 56));
          *(void *)(a1 + 48) = v94;
          *(void *)(a1 + 56) = v28;
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        __int16 v95 = *(_WORD *)(a2 + 72);
        *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
        *(_WORD *)(a1 + 72) = v95;
        *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
        uint64_t v96 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v97 = v96[5];
        uint64_t v98 = a1 + v97;
        uint64_t v99 = a2 + v97;
        type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v100 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 16))(v98, v99, v100);
          uint64_t v101 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)(v98 + v101[5]) = *(_DWORD *)(v99 + v101[5]);
          *(_DWORD *)(v98 + v101[6]) = *(_DWORD *)(v99 + v101[6]);
          uint64_t v102 = v101[7];
          uint64_t v103 = (uint64_t *)(v98 + v102);
          uint64_t v104 = v99 + v102;
          uint64_t v105 = *(void *)(v99 + v102);
          unint64_t v106 = *(void *)(v99 + v102 + 8);
          outlined copy of Data._Representation(v105, v106);
          *uint64_t v103 = v105;
          v103[1] = v106;
          v103[2] = *(void *)(v104 + 16);
          uint64_t v107 = v101[8];
          unint64_t v108 = (uint64_t *)(v98 + v107);
          uint64_t v109 = v99 + v107;
          uint64_t v110 = *(void *)(v99 + v107);
          unint64_t v111 = *(void *)(v99 + v107 + 8);
          outlined copy of Data._Representation(v110, v111);
          uint64_t *v108 = v110;
          v108[1] = v111;
          v108[2] = *(void *)(v109 + 16);
          uint64_t v112 = v101[9];
          uint64_t v113 = v98 + v112;
          uint64_t v114 = v99 + v112;
          uint64_t v115 = type metadata accessor for SymmetricKey();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 16))(v113, v114, v115);
          *(_DWORD *)(v98 + v101[10]) = *(_DWORD *)(v99 + v101[10]);
          *(_WORD *)(v98 + v101[11]) = *(_WORD *)(v99 + v101[11]);
          *(_WORD *)(v98 + v101[12]) = *(_WORD *)(v99 + v101[12]);
          uint64_t v116 = v101[13];
          uint64_t v117 = v98 + v116;
          uint64_t v118 = (uint64_t *)(v99 + v116);
          unint64_t v119 = *(void *)(v99 + v116 + 8);
          if (v119 >> 60 == 15)
          {
            long long v120 = *(_OWORD *)v118;
            *(void *)(v117 + 16) = v118[2];
            *(_OWORD *)uint64_t v117 = v120;
          }
          else
          {
            uint64_t v211 = *v118;
            outlined copy of Data._Representation(*v118, v119);
            *(void *)uint64_t v117 = v211;
            *(void *)(v117 + 8) = v119;
            *(void *)(v117 + 16) = v118[2];
          }
          uint64_t v212 = v101[14];
          uint64_t v213 = (void *)(v98 + v212);
          uint64_t v214 = (const void *)(v99 + v212);
          uint64_t v215 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v216 = *(void *)(v215 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v216 + 48))(v214, 1, v215))
          {
            uint64_t v217 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v213, v214, *(void *)(*(void *)(v217 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v216 + 16))(v213, v214, v215);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v216 + 56))(v213, 0, 1, v215);
          }
        }
        else
        {
          *(_WORD *)uint64_t v98 = *(_WORD *)v99;
          *(_WORD *)(v98 + 2) = *(_WORD *)(v99 + 2);
          *(unsigned char *)(v98 + 4) = *(unsigned char *)(v99 + 4);
          *(void *)(v98 + 8) = *(void *)(v99 + 8);
          *(void *)(v98 + 16) = *(void *)(v99 + 16);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v303 = v96[6];
        uint64_t v304 = a1 + v303;
        uint64_t v305 = (uint64_t *)(a2 + v303);
        unint64_t v306 = *(void *)(a2 + v303 + 8);
        if (v306 >> 60 == 15)
        {
          long long v307 = *(_OWORD *)v305;
          *(void *)(v304 + 16) = v305[2];
          *(_OWORD *)uint64_t v304 = v307;
        }
        else
        {
          uint64_t v308 = *v305;
          outlined copy of Data._Representation(*v305, v306);
          *(void *)uint64_t v304 = v308;
          *(void *)(v304 + 8) = v306;
          *(void *)(v304 + 16) = v305[2];
        }
        uint64_t v309 = v96[7];
        uint64_t v310 = a1 + v309;
        uint64_t v311 = (uint64_t *)(a2 + v309);
        unint64_t v312 = *(void *)(a2 + v309 + 8);
        if (v312 >> 60 == 15)
        {
          long long v313 = *(_OWORD *)v311;
          *(void *)(v310 + 16) = v311[2];
          *(_OWORD *)uint64_t v310 = v313;
        }
        else
        {
          uint64_t v314 = *v311;
          outlined copy of Data._Representation(*v311, v312);
          *(void *)uint64_t v310 = v314;
          *(void *)(v310 + 8) = v312;
          *(void *)(v310 + 16) = v311[2];
        }
        *(unsigned char *)(a1 + v96[8]) = *(unsigned char *)(a2 + v96[8]);
        uint64_t v315 = v96[9];
        uint64_t v187 = (char *)(a1 + v315);
        uint64_t v188 = (char *)(a2 + v315);
        uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_125;
          case 1u:
            goto LABEL_129;
          case 2u:
            goto LABEL_131;
          case 3u:
            goto LABEL_127;
          default:
            goto LABEL_140;
        }
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        unint64_t v12 = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v12 >> 60 == 15)
        {
          long long v13 = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v13;
        }
        else
        {
          uint64_t v30 = *(void *)(a2 + 24);
          outlined copy of Data._Representation(v30, v12);
          *(void *)(a1 + 24) = v30;
          *(void *)(a1 + 32) = v12;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
        }
        unint64_t v31 = *(void *)(a2 + 56);
        if (v31 >> 60 == 15)
        {
          long long v32 = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = v32;
        }
        else
        {
          uint64_t v121 = *(void *)(a2 + 48);
          outlined copy of Data._Representation(v121, *(void *)(a2 + 56));
          *(void *)(a1 + 48) = v121;
          *(void *)(a1 + 56) = v31;
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        __int16 v122 = *(_WORD *)(a2 + 72);
        *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
        *(_WORD *)(a1 + 72) = v122;
        *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
        *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
        *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
        unint64_t v123 = *(void *)(a2 + 88);
        if (v123 >> 60 == 15)
        {
          long long v124 = *(_OWORD *)(a2 + 80);
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
          *(_OWORD *)(a1 + 80) = v124;
        }
        else
        {
          uint64_t v143 = *(void *)(a2 + 80);
          outlined copy of Data._Representation(v143, *(void *)(a2 + 88));
          *(void *)(a1 + 80) = v143;
          *(void *)(a1 + 88) = v123;
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
        }
        unint64_t v144 = *(void *)(a2 + 112);
        if (v144 >> 60 == 15)
        {
          long long v145 = *(_OWORD *)(a2 + 104);
          *(void *)(a1 + 120) = *(void *)(a2 + 120);
          *(_OWORD *)(a1 + 104) = v145;
        }
        else
        {
          uint64_t v146 = *(void *)(a2 + 104);
          outlined copy of Data._Representation(v146, *(void *)(a2 + 112));
          *(void *)(a1 + 104) = v146;
          *(void *)(a1 + 112) = v144;
          *(void *)(a1 + 120) = *(void *)(a2 + 120);
        }
        *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
        uint64_t v147 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v148 = *(int *)(v147 + 40);
        unint64_t v149 = (void *)(a1 + v148);
        uint64_t v150 = (const void *)(a2 + v148);
        uint64_t v151 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v152 = *(void *)(v151 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
        {
          uint64_t v153 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v152 + 16))(v149, v150, v151);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v152 + 56))(v149, 0, 1, v151);
        }
        uint64_t v203 = *(int *)(v147 + 44);
        uint64_t v187 = (char *)(a1 + v203);
        uint64_t v188 = (char *)(a2 + v203);
        uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_125;
          case 1u:
            goto LABEL_129;
          case 2u:
            goto LABEL_131;
          case 3u:
            goto LABEL_127;
          default:
            goto LABEL_140;
        }
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        unint64_t v14 = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >> 60 == 15)
        {
          long long v15 = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v15;
        }
        else
        {
          uint64_t v33 = *(void *)(a2 + 24);
          outlined copy of Data._Representation(v33, v14);
          *(void *)(a1 + 24) = v33;
          *(void *)(a1 + 32) = v14;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
        }
        unint64_t v34 = *(void *)(a2 + 56);
        if (v34 >> 60 == 15)
        {
          long long v35 = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = v35;
        }
        else
        {
          uint64_t v125 = *(void *)(a2 + 48);
          outlined copy of Data._Representation(v125, *(void *)(a2 + 56));
          *(void *)(a1 + 48) = v125;
          *(void *)(a1 + 56) = v34;
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        __int16 v126 = *(_WORD *)(a2 + 72);
        *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
        *(_WORD *)(a1 + 72) = v126;
        *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
        *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
        *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
        uint64_t v127 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v128 = v127[7];
        uint64_t v129 = (void *)(a1 + v128);
        uint64_t v130 = (const void *)(a2 + v128);
        uint64_t v131 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v132 = *(void *)(v131 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
        {
          uint64_t v133 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v129, v130, *(void *)(*(void *)(v133 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v129, v130, v131);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
        }
        uint64_t v174 = v127[8];
        uint64_t v175 = a1 + v174;
        uint64_t v176 = (uint64_t *)(a2 + v174);
        unint64_t v177 = *(void *)(a2 + v174 + 8);
        if (v177 >> 60 == 15)
        {
          long long v178 = *(_OWORD *)v176;
          *(void *)(v175 + 16) = v176[2];
          *(_OWORD *)uint64_t v175 = v178;
        }
        else
        {
          uint64_t v179 = *v176;
          outlined copy of Data._Representation(*v176, v177);
          *(void *)uint64_t v175 = v179;
          *(void *)(v175 + 8) = v177;
          *(void *)(v175 + 16) = v176[2];
        }
        uint64_t v180 = v127[9];
        uint64_t v181 = a1 + v180;
        unint64_t v182 = (uint64_t *)(a2 + v180);
        unint64_t v183 = *(void *)(a2 + v180 + 8);
        if (v183 >> 60 == 15)
        {
          long long v184 = *(_OWORD *)v182;
          *(void *)(v181 + 16) = v182[2];
          *(_OWORD *)uint64_t v181 = v184;
        }
        else
        {
          uint64_t v185 = *v182;
          outlined copy of Data._Representation(*v182, v183);
          *(void *)uint64_t v181 = v185;
          *(void *)(v181 + 8) = v183;
          *(void *)(v181 + 16) = v182[2];
        }
        *(unsigned char *)(a1 + v127[10]) = *(unsigned char *)(a2 + v127[10]);
        uint64_t v186 = v127[11];
        uint64_t v187 = (char *)(a1 + v186);
        uint64_t v188 = (char *)(a2 + v186);
        uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_125;
          case 1u:
            goto LABEL_129;
          case 2u:
            goto LABEL_131;
          case 3u:
            goto LABEL_127;
          default:
            goto LABEL_140;
        }
      case 6u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        unint64_t v16 = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v16 >> 60 == 15)
        {
          long long v17 = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v17;
        }
        else
        {
          uint64_t v36 = *(void *)(a2 + 24);
          outlined copy of Data._Representation(v36, v16);
          *(void *)(a1 + 24) = v36;
          *(void *)(a1 + 32) = v16;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
        }
        unint64_t v37 = *(void *)(a2 + 56);
        if (v37 >> 60 == 15)
        {
          long long v38 = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = v38;
        }
        else
        {
          uint64_t v134 = *(void *)(a2 + 48);
          outlined copy of Data._Representation(v134, *(void *)(a2 + 56));
          *(void *)(a1 + 48) = v134;
          *(void *)(a1 + 56) = v37;
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        __int16 v135 = *(_WORD *)(a2 + 72);
        *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
        *(_WORD *)(a1 + 72) = v135;
        *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
        *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
        *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v137 = ready[7];
        uint64_t v138 = (void *)(a1 + v137);
        uint64_t v139 = (const void *)(a2 + v137);
        uint64_t v140 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v141 = *(void *)(v140 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
        {
          uint64_t v142 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v141 + 16))(v138, v139, v140);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
        }
        uint64_t v190 = ready[8];
        uint64_t v191 = a1 + v190;
        uint64_t v192 = (uint64_t *)(a2 + v190);
        unint64_t v193 = *(void *)(a2 + v190 + 8);
        if (v193 >> 60 == 15)
        {
          long long v194 = *(_OWORD *)v192;
          *(void *)(v191 + 16) = v192[2];
          *(_OWORD *)uint64_t v191 = v194;
        }
        else
        {
          uint64_t v195 = *v192;
          outlined copy of Data._Representation(*v192, v193);
          *(void *)uint64_t v191 = v195;
          *(void *)(v191 + 8) = v193;
          *(void *)(v191 + 16) = v192[2];
        }
        uint64_t v196 = ready[9];
        uint64_t v197 = a1 + v196;
        uint64_t v198 = (uint64_t *)(a2 + v196);
        unint64_t v199 = *(void *)(a2 + v196 + 8);
        if (v199 >> 60 == 15)
        {
          long long v200 = *(_OWORD *)v198;
          *(void *)(v197 + 16) = v198[2];
          *(_OWORD *)uint64_t v197 = v200;
        }
        else
        {
          uint64_t v201 = *v198;
          outlined copy of Data._Representation(*v198, v199);
          *(void *)uint64_t v197 = v201;
          *(void *)(v197 + 8) = v199;
          *(void *)(v197 + 16) = v198[2];
        }
        *(unsigned char *)(a1 + ready[10]) = *(unsigned char *)(a2 + ready[10]);
        uint64_t v202 = ready[11];
        uint64_t v187 = (char *)(a1 + v202);
        uint64_t v188 = (char *)(a2 + v202);
        uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
LABEL_125:
            uint64_t v316 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v316 - 8) + 16))(v187, v188, v316);
            uint64_t v317 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v318 = v317[9];
            uint64_t v319 = &v187[v318];
            uint64_t v320 = &v188[v318];
            uint64_t v321 = type metadata accessor for SymmetricKey();
            uint64_t v322 = *(void (**)(char *, char *, uint64_t))(*(void *)(v321 - 8) + 16);
            v322(v319, v320, v321);
            v322(&v187[v317[10]], &v188[v317[10]], v321);
            v322(&v187[v317[11]], &v188[v317[11]], v321);
            v322(&v187[v317[12]], &v188[v317[12]], v321);
            goto LABEL_132;
          case 1u:
LABEL_129:
            uint64_t v326 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v326 - 8) + 16))(v187, v188, v326);
            uint64_t v327 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v328 = v327[9];
            uint64_t v329 = &v187[v328];
            uint64_t v330 = &v188[v328];
            uint64_t v331 = type metadata accessor for SymmetricKey();
            uint64_t v332 = *(void (**)(char *, char *, uint64_t))(*(void *)(v331 - 8) + 16);
            v332(v329, v330, v331);
            v332(&v187[v327[10]], &v188[v327[10]], v331);
            v332(&v187[v327[11]], &v188[v327[11]], v331);
            goto LABEL_132;
          case 2u:
LABEL_131:
            uint64_t v333 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v333 - 8) + 16))(v187, v188, v333);
            uint64_t v334 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v335 = v334[9];
            uint64_t v336 = &v187[v335];
            uint64_t v337 = &v188[v335];
            uint64_t v338 = type metadata accessor for SymmetricKey();
            uint64_t v339 = *(void (**)(char *, char *, uint64_t))(*(void *)(v338 - 8) + 16);
            v339(v336, v337, v338);
            v339(&v187[v334[10]], &v188[v334[10]], v338);
            v339(&v187[v334[11]], &v188[v334[11]], v338);
            v339(&v187[v334[12]], &v188[v334[12]], v338);
            v339(&v187[v334[13]], &v188[v334[13]], v338);
            v339(&v187[v334[14]], &v188[v334[14]], v338);
            goto LABEL_132;
          case 3u:
LABEL_127:
            uint64_t v323 = type metadata accessor for SymmetricKey();
            uint64_t v324 = *(void (**)(char *, char *, uint64_t))(*(void *)(v323 - 8) + 16);
            v324(v187, v188, v323);
            uint64_t v325 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v324(&v187[v325[9]], &v188[v325[9]], v323);
            v324(&v187[v325[10]], &v188[v325[10]], v323);
            v324(&v187[v325[11]], &v188[v325[11]], v323);
            goto LABEL_132;
          default:
            goto LABEL_140;
        }
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        unint64_t v4 = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v4 >> 60 == 15)
        {
          long long v5 = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v5;
        }
        else
        {
          uint64_t v18 = *(void *)(a2 + 24);
          outlined copy of Data._Representation(v18, v4);
          *(void *)(a1 + 24) = v18;
          *(void *)(a1 + 32) = v4;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
        }
        unint64_t v19 = *(void *)(a2 + 56);
        if (v19 >> 60 == 15)
        {
          long long v20 = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = v20;
        }
        else
        {
          uint64_t v39 = *(void *)(a2 + 48);
          outlined copy of Data._Representation(v39, *(void *)(a2 + 56));
          *(void *)(a1 + 48) = v39;
          *(void *)(a1 + 56) = v19;
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        __int16 v40 = *(_WORD *)(a2 + 72);
        *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
        *(_WORD *)(a1 + 72) = v40;
        *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
        uint64_t v41 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v42 = *(int *)(v41 + 20);
        long long v43 = (char *)(a1 + v42);
        uint64_t v44 = (char *)(a2 + v42);
        uint64_t v45 = (int *)type metadata accessor for SessionTicket();
        uint64_t v46 = *((void *)v45 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
        {
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          uint64_t v375 = v41;
          uint64_t v154 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v154 - 8) + 16))(v43, v44, v154);
          *(_DWORD *)&v43[v45[5]] = *(_DWORD *)&v44[v45[5]];
          *(_DWORD *)&v43[v45[6]] = *(_DWORD *)&v44[v45[6]];
          uint64_t v155 = v45[7];
          uint64_t v156 = (uint64_t *)&v43[v155];
          __int16 v157 = &v44[v155];
          uint64_t v158 = *(void *)&v44[v155];
          unint64_t v159 = *(void *)&v44[v155 + 8];
          outlined copy of Data._Representation(v158, v159);
          *uint64_t v156 = v158;
          v156[1] = v159;
          v156[2] = *((void *)v157 + 2);
          uint64_t v160 = v45[8];
          uint64_t v161 = (uint64_t *)&v43[v160];
          unint64_t v162 = &v44[v160];
          uint64_t v163 = *(void *)&v44[v160];
          unint64_t v164 = *(void *)&v44[v160 + 8];
          outlined copy of Data._Representation(v163, v164);
          *uint64_t v161 = v163;
          v161[1] = v164;
          v161[2] = *((void *)v162 + 2);
          uint64_t v165 = v45[9];
          uint64_t v166 = &v43[v165];
          uint64_t v167 = &v44[v165];
          uint64_t v168 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v168 - 8) + 16))(v166, v167, v168);
          *(_DWORD *)&v43[v45[10]] = *(_DWORD *)&v44[v45[10]];
          *(_WORD *)&v43[v45[11]] = *(_WORD *)&v44[v45[11]];
          *(_WORD *)&v43[v45[12]] = *(_WORD *)&v44[v45[12]];
          uint64_t v169 = v45[13];
          uint64_t v170 = &v43[v169];
          unint64_t v171 = (uint64_t *)&v44[v169];
          unint64_t v172 = *(void *)&v44[v169 + 8];
          if (v172 >> 60 == 15)
          {
            long long v173 = *(_OWORD *)v171;
            *((void *)v170 + 2) = v171[2];
            *(_OWORD *)uint64_t v170 = v173;
          }
          else
          {
            uint64_t v264 = *v171;
            outlined copy of Data._Representation(*v171, v172);
            *(void *)uint64_t v170 = v264;
            *((void *)v170 + 1) = v172;
            *((void *)v170 + 2) = v171[2];
          }
          uint64_t v41 = v375;
          uint64_t v265 = v45[14];
          uint64_t v266 = &v43[v265];
          uint64_t v267 = &v44[v265];
          uint64_t v268 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v269 = *(void *)(v268 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48))(v267, 1, v268))
          {
            uint64_t v270 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v266, v267, *(void *)(*(void *)(v270 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v266, v267, v268);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v266, 0, 1, v268);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
        }
        uint64_t v347 = *(int *)(v41 + 24);
        uint64_t v187 = (char *)(a1 + v347);
        uint64_t v188 = (char *)(a2 + v347);
        uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v348 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v348 - 8) + 16))(v187, v188, v348);
            uint64_t v349 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v350 = v349[9];
            uint64_t v351 = &v187[v350];
            uint64_t v352 = &v188[v350];
            uint64_t v353 = type metadata accessor for SymmetricKey();
            uint64_t v354 = *(void (**)(char *, char *, uint64_t))(*(void *)(v353 - 8) + 16);
            v354(v351, v352, v353);
            v354(&v187[v349[10]], &v188[v349[10]], v353);
            v354(&v187[v349[11]], &v188[v349[11]], v353);
            v354(&v187[v349[12]], &v188[v349[12]], v353);
            goto LABEL_132;
          case 1u:
            uint64_t v355 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v355 - 8) + 16))(v187, v188, v355);
            uint64_t v356 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v357 = v356[9];
            uint64_t v358 = &v187[v357];
            uint64_t v359 = &v188[v357];
            uint64_t v360 = type metadata accessor for SymmetricKey();
            uint64_t v361 = *(void (**)(char *, char *, uint64_t))(*(void *)(v360 - 8) + 16);
            v361(v358, v359, v360);
            v361(&v187[v356[10]], &v188[v356[10]], v360);
            v361(&v187[v356[11]], &v188[v356[11]], v360);
            goto LABEL_132;
          case 2u:
            uint64_t v362 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v362 - 8) + 16))(v187, v188, v362);
            uint64_t v363 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v364 = v363[9];
            uint64_t v365 = &v187[v364];
            unint64_t v366 = &v188[v364];
            uint64_t v367 = type metadata accessor for SymmetricKey();
            uint64_t v368 = *(void (**)(char *, char *, uint64_t))(*(void *)(v367 - 8) + 16);
            v368(v365, v366, v367);
            v368(&v187[v363[10]], &v188[v363[10]], v367);
            v368(&v187[v363[11]], &v188[v363[11]], v367);
            v368(&v187[v363[12]], &v188[v363[12]], v367);
            v368(&v187[v363[13]], &v188[v363[13]], v367);
            v368(&v187[v363[14]], &v188[v363[14]], v367);
            goto LABEL_132;
          case 3u:
            uint64_t v369 = type metadata accessor for SymmetricKey();
            uint64_t v370 = *(void (**)(char *, char *, uint64_t))(*(void *)(v369 - 8) + 16);
            v370(v187, v188, v369);
            unint64_t v371 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v370(&v187[v371[9]], &v188[v371[9]], v369);
            v370(&v187[v371[10]], &v188[v371[10]], v369);
            v370(&v187[v371[11]], &v188[v371[11]], v369);
LABEL_132:
            swift_storeEnumTagMultiPayload();
            break;
          default:
LABEL_140:
            memcpy(v187, v188, *(void *)(*(void *)(v189 - 8) + 64));
            break;
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for HandshakeState(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v13;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      long long v15 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v15;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      uint64_t v16 = type metadata accessor for HandshakeState.ClientHelloState(0);
      uint64_t v17 = *(int *)(v16 + 36);
      uint64_t v18 = (char *)(a1 + v17);
      unint64_t v19 = (char *)(a2 + v17);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      uint64_t v286 = v16;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v21 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
          unint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v23 = v22[9];
          uint64_t v24 = &v18[v23];
          unint64_t v25 = &v19[v23];
          uint64_t v26 = type metadata accessor for SymmetricKey();
          uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
          unint64_t v28 = v25;
          uint64_t v16 = v286;
          v27(v24, v28, v26);
          v27(&v18[v22[10]], &v19[v22[10]], v26);
          v27(&v18[v22[11]], &v19[v22[11]], v26);
          v27(&v18[v22[12]], &v19[v22[12]], v26);
          goto LABEL_32;
        case 1u:
          uint64_t v151 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v151 - 8) + 32))(v18, v19, v151);
          uint64_t v152 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v153 = v152[9];
          uint64_t v154 = &v18[v153];
          uint64_t v155 = &v19[v153];
          uint64_t v156 = type metadata accessor for SymmetricKey();
          __int16 v157 = *(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 32);
          v157(v154, v155, v156);
          v157(&v18[v152[10]], &v19[v152[10]], v156);
          uint64_t v158 = v152[11];
          uint64_t v16 = v286;
          v157(&v18[v158], &v19[v158], v156);
          goto LABEL_32;
        case 2u:
          uint64_t v159 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 32))(v18, v19, v159);
          uint64_t v160 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v161 = v160[9];
          unint64_t v162 = &v18[v161];
          uint64_t v163 = &v19[v161];
          uint64_t v164 = type metadata accessor for SymmetricKey();
          uint64_t v165 = *(void (**)(char *, char *, uint64_t))(*(void *)(v164 - 8) + 32);
          v165(v162, v163, v164);
          v165(&v18[v160[10]], &v19[v160[10]], v164);
          v165(&v18[v160[11]], &v19[v160[11]], v164);
          v165(&v18[v160[12]], &v19[v160[12]], v164);
          v165(&v18[v160[13]], &v19[v160[13]], v164);
          uint64_t v166 = v160[14];
          uint64_t v16 = v286;
          v165(&v18[v166], &v19[v166], v164);
          goto LABEL_32;
        case 3u:
          uint64_t v167 = type metadata accessor for SymmetricKey();
          uint64_t v168 = *(void (**)(char *, char *, uint64_t))(*(void *)(v167 - 8) + 32);
          v168(v18, v19, v167);
          uint64_t v169 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v168(&v18[v169[9]], &v19[v169[9]], v167);
          v168(&v18[v169[10]], &v19[v169[10]], v167);
          uint64_t v170 = v167;
          uint64_t v16 = v286;
          v168(&v18[v169[11]], &v19[v169[11]], v170);
LABEL_32:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
          break;
      }
      uint64_t v171 = *(int *)(v16 + 40);
      unint64_t v172 = (char *)(a1 + v171);
      long long v173 = (char *)(a2 + v171);
      uint64_t v174 = (int *)type metadata accessor for SessionTicket();
      uint64_t v175 = *((void *)v174 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v175 + 48))(v173, 1, v174))
      {
        uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v172, v173, *(void *)(*(void *)(v176 - 8) + 64));
      }
      else
      {
        uint64_t v177 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v177 - 8) + 32))(v172, v173, v177);
        *(_DWORD *)&v172[v174[5]] = *(_DWORD *)&v173[v174[5]];
        *(_DWORD *)&v172[v174[6]] = *(_DWORD *)&v173[v174[6]];
        uint64_t v178 = v174[7];
        uint64_t v179 = &v172[v178];
        uint64_t v180 = &v173[v178];
        *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
        *((void *)v179 + 2) = *((void *)v180 + 2);
        uint64_t v181 = v174[8];
        unint64_t v182 = &v172[v181];
        unint64_t v183 = &v173[v181];
        *(_OWORD *)unint64_t v182 = *(_OWORD *)v183;
        *((void *)v182 + 2) = *((void *)v183 + 2);
        uint64_t v184 = v174[9];
        uint64_t v185 = &v172[v184];
        uint64_t v186 = &v173[v184];
        uint64_t v187 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v187 - 8) + 32))(v185, v186, v187);
        *(_DWORD *)&v172[v174[10]] = *(_DWORD *)&v173[v174[10]];
        *(_WORD *)&v172[v174[11]] = *(_WORD *)&v173[v174[11]];
        *(_WORD *)&v172[v174[12]] = *(_WORD *)&v173[v174[12]];
        uint64_t v188 = v174[13];
        uint64_t v189 = &v172[v188];
        uint64_t v190 = &v173[v188];
        *((void *)v189 + 2) = *((void *)v190 + 2);
        *(_OWORD *)uint64_t v189 = *(_OWORD *)v190;
        uint64_t v191 = v174[14];
        uint64_t v192 = &v172[v191];
        unint64_t v193 = &v173[v191];
        uint64_t v194 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v195 = *(void *)(v194 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v195 + 48))(v193, 1, v194))
        {
          uint64_t v196 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v192, v193, *(void *)(*(void *)(v196 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v195 + 32))(v192, v193, v194);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v195 + 56))(v192, 0, 1, v194);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v175 + 56))(v172, 0, 1, v174);
      }
      break;
    case 2u:
      long long v29 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v29;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      long long v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v30;
      unint64_t v31 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
      uint64_t v32 = v31[5];
      uint64_t v33 = (char *)(a1 + v32);
      unint64_t v34 = (char *)(a2 + v32);
      uint64_t v35 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      unint64_t v287 = v31;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v36 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v33, v34, v36);
        unint64_t v37 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v33[v37[5]] = *(_DWORD *)&v34[v37[5]];
        *(_DWORD *)&v33[v37[6]] = *(_DWORD *)&v34[v37[6]];
        uint64_t v38 = v37[7];
        uint64_t v39 = &v33[v38];
        __int16 v40 = &v34[v38];
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
        *((void *)v39 + 2) = *((void *)v40 + 2);
        uint64_t v41 = v37[8];
        uint64_t v42 = &v33[v41];
        long long v43 = &v34[v41];
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
        *((void *)v42 + 2) = *((void *)v43 + 2);
        uint64_t v44 = v37[9];
        uint64_t v45 = &v33[v44];
        uint64_t v46 = &v34[v44];
        uint64_t v47 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
        *(_DWORD *)&v33[v37[10]] = *(_DWORD *)&v34[v37[10]];
        *(_WORD *)&v33[v37[11]] = *(_WORD *)&v34[v37[11]];
        *(_WORD *)&v33[v37[12]] = *(_WORD *)&v34[v37[12]];
        uint64_t v48 = v37[13];
        __int16 v49 = &v33[v48];
        long long v50 = &v34[v48];
        *((void *)v49 + 2) = *((void *)v50 + 2);
        *(_OWORD *)__int16 v49 = *(_OWORD *)v50;
        uint64_t v51 = v37[14];
        uint64_t v52 = &v33[v51];
        uint64_t v53 = &v34[v51];
        uint64_t v54 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v55 = *(void *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          uint64_t v56 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        unint64_t v31 = v287;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
      }
      uint64_t v197 = v31[6];
      uint64_t v198 = (char *)(a1 + v197);
      unint64_t v199 = (char *)(a2 + v197);
      uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v201 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 32))(v198, v199, v201);
          uint64_t v202 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v203 = v202[9];
          uint64_t v204 = &v198[v203];
          uint64_t v205 = &v199[v203];
          uint64_t v206 = type metadata accessor for SymmetricKey();
          uint64_t v207 = *(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 32);
          v207(v204, v205, v206);
          v207(&v198[v202[10]], &v199[v202[10]], v206);
          v207(&v198[v202[11]], &v199[v202[11]], v206);
          uint64_t v208 = v202[12];
          unint64_t v31 = v287;
          v207(&v198[v208], &v199[v208], v206);
          goto LABEL_45;
        case 1u:
          uint64_t v209 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v198, v199, v209);
          uint64_t v210 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v211 = v210[9];
          uint64_t v212 = &v198[v211];
          uint64_t v213 = &v199[v211];
          uint64_t v214 = type metadata accessor for SymmetricKey();
          uint64_t v215 = *(void (**)(char *, char *, uint64_t))(*(void *)(v214 - 8) + 32);
          v215(v212, v213, v214);
          v215(&v198[v210[10]], &v199[v210[10]], v214);
          uint64_t v216 = v210[11];
          unint64_t v31 = v287;
          v215(&v198[v216], &v199[v216], v214);
          goto LABEL_45;
        case 2u:
          uint64_t v217 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v217 - 8) + 32))(v198, v199, v217);
          uint64_t v218 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v219 = v218[9];
          uint64_t v220 = &v198[v219];
          uint64_t v221 = &v199[v219];
          uint64_t v222 = type metadata accessor for SymmetricKey();
          uint64_t v223 = *(void (**)(char *, char *, uint64_t))(*(void *)(v222 - 8) + 32);
          v223(v220, v221, v222);
          v223(&v198[v218[10]], &v199[v218[10]], v222);
          v223(&v198[v218[11]], &v199[v218[11]], v222);
          v223(&v198[v218[12]], &v199[v218[12]], v222);
          v223(&v198[v218[13]], &v199[v218[13]], v222);
          uint64_t v224 = v218[14];
          unint64_t v31 = v287;
          v223(&v198[v224], &v199[v224], v222);
          goto LABEL_45;
        case 3u:
          uint64_t v225 = type metadata accessor for SymmetricKey();
          uint64_t v226 = *(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 32);
          v226(v198, v199, v225);
          uint64_t v227 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v226(&v198[v227[9]], &v199[v227[9]], v225);
          v226(&v198[v227[10]], &v199[v227[10]], v225);
          uint64_t v228 = v225;
          unint64_t v31 = v287;
          v226(&v198[v227[11]], &v199[v227[11]], v228);
LABEL_45:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
          break;
      }
      *(_WORD *)(a1 + v31[7]) = *(_WORD *)(a2 + v31[7]);
      *(_WORD *)(a1 + v31[8]) = *(_WORD *)(a2 + v31[8]);
      break;
    case 3u:
      long long v57 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v57;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      long long v58 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v58;
      uint64_t v59 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      uint64_t v60 = v59[5];
      uint64_t v61 = (char *)(a1 + v60);
      uint64_t v62 = (char *)(a2 + v60);
      uint64_t v63 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v64 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v61, v62, v64);
        uint64_t v65 = (int *)type metadata accessor for SessionTicket();
        *(_DWORD *)&v61[v65[5]] = *(_DWORD *)&v62[v65[5]];
        *(_DWORD *)&v61[v65[6]] = *(_DWORD *)&v62[v65[6]];
        uint64_t v66 = v65[7];
        uint64_t v67 = &v61[v66];
        __int16 v68 = &v62[v66];
        *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
        *((void *)v67 + 2) = *((void *)v68 + 2);
        uint64_t v69 = v65[8];
        uint64_t v70 = &v61[v69];
        uint64_t v71 = &v62[v69];
        *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
        *((void *)v70 + 2) = *((void *)v71 + 2);
        uint64_t v72 = v65[9];
        uint64_t v73 = &v61[v72];
        uint64_t v74 = &v62[v72];
        uint64_t v75 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v73, v74, v75);
        *(_DWORD *)&v61[v65[10]] = *(_DWORD *)&v62[v65[10]];
        *(_WORD *)&v61[v65[11]] = *(_WORD *)&v62[v65[11]];
        *(_WORD *)&v61[v65[12]] = *(_WORD *)&v62[v65[12]];
        uint64_t v76 = v65[13];
        uint64_t v77 = &v61[v76];
        uint64_t v78 = &v62[v76];
        *((void *)v77 + 2) = *((void *)v78 + 2);
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
        uint64_t v79 = v65[14];
        uint64_t v80 = &v61[v79];
        uint64_t v81 = &v62[v79];
        uint64_t v82 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v83 = *(void *)(v82 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
        {
          uint64_t v84 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v80, v81, v82);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
      }
      uint64_t v229 = v59[6];
      uint64_t v230 = a1 + v229;
      uint64_t v231 = a2 + v229;
      *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
      *(void *)(v230 + 16) = *(void *)(v231 + 16);
      uint64_t v232 = v59[7];
      uint64_t v233 = a1 + v232;
      uint64_t v234 = a2 + v232;
      *(void *)(v233 + 16) = *(void *)(v234 + 16);
      *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
      *(unsigned char *)(a1 + v59[8]) = *(unsigned char *)(a2 + v59[8]);
      uint64_t v235 = v59[9];
      uint64_t v134 = (char *)(a1 + v235);
      __int16 v135 = (char *)(a2 + v235);
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_50;
        case 1u:
          goto LABEL_54;
        case 2u:
          goto LABEL_56;
        case 3u:
          goto LABEL_52;
        default:
          goto LABEL_62;
      }
    case 4u:
      long long v85 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v85;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      long long v86 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v86;
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      long long v87 = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v87;
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      uint64_t v88 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      uint64_t v89 = *(int *)(v88 + 40);
      uint64_t v90 = (void *)(a1 + v89);
      uint64_t v91 = (const void *)(a2 + v89);
      uint64_t v92 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v93 = *(void *)(v92 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        uint64_t v94 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v93 + 32))(v90, v91, v92);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
      }
      uint64_t v133 = *(int *)(v88 + 44);
      uint64_t v134 = (char *)(a1 + v133);
      __int16 v135 = (char *)(a2 + v133);
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_50;
        case 1u:
          goto LABEL_54;
        case 2u:
          goto LABEL_56;
        case 3u:
          goto LABEL_52;
        default:
          goto LABEL_62;
      }
    case 5u:
      long long v95 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v95;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      long long v96 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v96;
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
      uint64_t v97 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      uint64_t v98 = v97[7];
      uint64_t v99 = (void *)(a1 + v98);
      uint64_t v100 = (const void *)(a2 + v98);
      uint64_t v101 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v102 = *(void *)(v101 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
      {
        uint64_t v103 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v102 + 32))(v99, v100, v101);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
      }
      uint64_t v137 = v97[8];
      uint64_t v138 = a1 + v137;
      uint64_t v139 = a2 + v137;
      *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
      *(void *)(v138 + 16) = *(void *)(v139 + 16);
      uint64_t v140 = v97[9];
      uint64_t v141 = a1 + v140;
      uint64_t v142 = a2 + v140;
      *(void *)(v141 + 16) = *(void *)(v142 + 16);
      *(_OWORD *)uint64_t v141 = *(_OWORD *)v142;
      *(unsigned char *)(a1 + v97[10]) = *(unsigned char *)(a2 + v97[10]);
      uint64_t v143 = v97[11];
      uint64_t v134 = (char *)(a1 + v143);
      __int16 v135 = (char *)(a2 + v143);
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_50;
        case 1u:
          goto LABEL_54;
        case 2u:
          goto LABEL_56;
        case 3u:
          goto LABEL_52;
        default:
          goto LABEL_62;
      }
    case 6u:
      long long v104 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v104;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      long long v105 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v105;
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
      uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      uint64_t v107 = ready[7];
      unint64_t v108 = (void *)(a1 + v107);
      uint64_t v109 = (const void *)(a2 + v107);
      uint64_t v110 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v111 = *(void *)(v110 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
      {
        uint64_t v112 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v108, v109, *(void *)(*(void *)(v112 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v111 + 32))(v108, v109, v110);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
      }
      uint64_t v144 = ready[8];
      uint64_t v145 = a1 + v144;
      uint64_t v146 = a2 + v144;
      *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
      *(void *)(v145 + 16) = *(void *)(v146 + 16);
      uint64_t v147 = ready[9];
      uint64_t v148 = a1 + v147;
      uint64_t v149 = a2 + v147;
      *(void *)(v148 + 16) = *(void *)(v149 + 16);
      *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
      *(unsigned char *)(a1 + ready[10]) = *(unsigned char *)(a2 + ready[10]);
      uint64_t v150 = ready[11];
      uint64_t v134 = (char *)(a1 + v150);
      __int16 v135 = (char *)(a2 + v150);
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_50:
          uint64_t v236 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v236 - 8) + 32))(v134, v135, v236);
          uint64_t v237 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v238 = v237[9];
          uint64_t v239 = &v134[v238];
          uint64_t v240 = &v135[v238];
          uint64_t v241 = type metadata accessor for SymmetricKey();
          uint64_t v242 = *(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 32);
          v242(v239, v240, v241);
          v242(&v134[v237[10]], &v135[v237[10]], v241);
          v242(&v134[v237[11]], &v135[v237[11]], v241);
          v242(&v134[v237[12]], &v135[v237[12]], v241);
          goto LABEL_57;
        case 1u:
LABEL_54:
          uint64_t v246 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v246 - 8) + 32))(v134, v135, v246);
          uint64_t v247 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v248 = v247[9];
          unint64_t v249 = &v134[v248];
          uint64_t v250 = &v135[v248];
          uint64_t v251 = type metadata accessor for SymmetricKey();
          uint64_t v252 = *(void (**)(char *, char *, uint64_t))(*(void *)(v251 - 8) + 32);
          v252(v249, v250, v251);
          v252(&v134[v247[10]], &v135[v247[10]], v251);
          v252(&v134[v247[11]], &v135[v247[11]], v251);
          goto LABEL_57;
        case 2u:
LABEL_56:
          uint64_t v253 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v253 - 8) + 32))(v134, v135, v253);
          unint64_t v254 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v255 = v254[9];
          uint64_t v256 = &v134[v255];
          uint64_t v257 = &v135[v255];
          uint64_t v258 = type metadata accessor for SymmetricKey();
          uint64_t v259 = *(void (**)(char *, char *, uint64_t))(*(void *)(v258 - 8) + 32);
          v259(v256, v257, v258);
          v259(&v134[v254[10]], &v135[v254[10]], v258);
          v259(&v134[v254[11]], &v135[v254[11]], v258);
          v259(&v134[v254[12]], &v135[v254[12]], v258);
          v259(&v134[v254[13]], &v135[v254[13]], v258);
          v259(&v134[v254[14]], &v135[v254[14]], v258);
          goto LABEL_57;
        case 3u:
LABEL_52:
          uint64_t v243 = type metadata accessor for SymmetricKey();
          uint64_t v244 = *(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 32);
          v244(v134, v135, v243);
          uint64_t v245 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v244(&v134[v245[9]], &v135[v245[9]], v243);
          v244(&v134[v245[10]], &v135[v245[10]], v243);
          v244(&v134[v245[11]], &v135[v245[11]], v243);
          goto LABEL_57;
        default:
          goto LABEL_62;
      }
    default:
      long long v4 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v4;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      uint64_t v6 = type metadata accessor for HandshakeState.IdleState(0);
      uint64_t v7 = *(int *)(v6 + 20);
      unint64_t v8 = (char *)(a1 + v7);
      long long v9 = (char *)(a2 + v7);
      unint64_t v10 = (int *)type metadata accessor for SessionTicket();
      uint64_t v11 = *((void *)v10 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        uint64_t v113 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 32))(v8, v9, v113);
        *(_DWORD *)&v8[v10[5]] = *(_DWORD *)&v9[v10[5]];
        *(_DWORD *)&v8[v10[6]] = *(_DWORD *)&v9[v10[6]];
        uint64_t v114 = v10[7];
        uint64_t v115 = &v8[v114];
        uint64_t v116 = &v9[v114];
        *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
        *((void *)v115 + 2) = *((void *)v116 + 2);
        uint64_t v117 = v10[8];
        uint64_t v118 = &v8[v117];
        unint64_t v119 = &v9[v117];
        *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
        *((void *)v118 + 2) = *((void *)v119 + 2);
        uint64_t v120 = v10[9];
        uint64_t v121 = &v8[v120];
        __int16 v122 = &v9[v120];
        uint64_t v123 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 32))(v121, v122, v123);
        *(_DWORD *)&v8[v10[10]] = *(_DWORD *)&v9[v10[10]];
        *(_WORD *)&v8[v10[11]] = *(_WORD *)&v9[v10[11]];
        *(_WORD *)&v8[v10[12]] = *(_WORD *)&v9[v10[12]];
        uint64_t v124 = v10[13];
        uint64_t v125 = &v8[v124];
        __int16 v126 = &v9[v124];
        *((void *)v125 + 2) = *((void *)v126 + 2);
        *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
        uint64_t v127 = v10[14];
        uint64_t v128 = &v8[v127];
        uint64_t v129 = &v9[v127];
        uint64_t v130 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v131 = *(void *)(v130 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
        {
          uint64_t v132 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v128, v129, v130);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      }
      uint64_t v260 = *(int *)(v6 + 24);
      uint64_t v134 = (char *)(a1 + v260);
      __int16 v135 = (char *)(a2 + v260);
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v261 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 32))(v134, v135, v261);
          unint64_t v262 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          uint64_t v263 = v262[9];
          uint64_t v264 = &v134[v263];
          uint64_t v265 = &v135[v263];
          uint64_t v266 = type metadata accessor for SymmetricKey();
          uint64_t v267 = *(void (**)(char *, char *, uint64_t))(*(void *)(v266 - 8) + 32);
          v267(v264, v265, v266);
          v267(&v134[v262[10]], &v135[v262[10]], v266);
          v267(&v134[v262[11]], &v135[v262[11]], v266);
          v267(&v134[v262[12]], &v135[v262[12]], v266);
          goto LABEL_57;
        case 1u:
          uint64_t v268 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v268 - 8) + 32))(v134, v135, v268);
          uint64_t v269 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          uint64_t v270 = v269[9];
          uint64_t v271 = &v134[v270];
          uint64_t v272 = &v135[v270];
          uint64_t v273 = type metadata accessor for SymmetricKey();
          uint64_t v274 = *(void (**)(char *, char *, uint64_t))(*(void *)(v273 - 8) + 32);
          v274(v271, v272, v273);
          v274(&v134[v269[10]], &v135[v269[10]], v273);
          v274(&v134[v269[11]], &v135[v269[11]], v273);
          goto LABEL_57;
        case 2u:
          uint64_t v275 = type metadata accessor for SHA384();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v275 - 8) + 32))(v134, v135, v275);
          uint64_t v276 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          uint64_t v277 = v276[9];
          uint64_t v278 = &v134[v277];
          uint64_t v279 = &v135[v277];
          uint64_t v280 = type metadata accessor for SymmetricKey();
          uint64_t v281 = *(void (**)(char *, char *, uint64_t))(*(void *)(v280 - 8) + 32);
          v281(v278, v279, v280);
          v281(&v134[v276[10]], &v135[v276[10]], v280);
          v281(&v134[v276[11]], &v135[v276[11]], v280);
          v281(&v134[v276[12]], &v135[v276[12]], v280);
          v281(&v134[v276[13]], &v135[v276[13]], v280);
          v281(&v134[v276[14]], &v135[v276[14]], v280);
          goto LABEL_57;
        case 3u:
          uint64_t v282 = type metadata accessor for SymmetricKey();
          uint64_t v283 = *(void (**)(char *, char *, uint64_t))(*(void *)(v282 - 8) + 32);
          v283(v134, v135, v282);
          uint64_t v284 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v283(&v134[v284[9]], &v135[v284[9]], v282);
          v283(&v134[v284[10]], &v135[v284[10]], v282);
          v283(&v134[v284[11]], &v135[v284[11]], v282);
LABEL_57:
          swift_storeEnumTagMultiPayload();
          break;
        default:
LABEL_62:
          memcpy(v134, v135, *(void *)(*(void *)(v136 - 8) + 64));
          break;
      }
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for HandshakeState(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1(a1, type metadata accessor for HandshakeState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v13 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v13;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        long long v15 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v15;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
        uint64_t v16 = type metadata accessor for HandshakeState.ClientHelloState(0);
        uint64_t v17 = *(int *)(v16 + 36);
        uint64_t v18 = (char *)(a1 + v17);
        unint64_t v19 = (char *)(a2 + v17);
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        uint64_t v286 = v16;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v21 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
            unint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v23 = v22[9];
            uint64_t v24 = &v18[v23];
            unint64_t v25 = &v19[v23];
            uint64_t v26 = type metadata accessor for SymmetricKey();
            uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
            v27(v24, v25, v26);
            v27(&v18[v22[10]], &v19[v22[10]], v26);
            v27(&v18[v22[11]], &v19[v22[11]], v26);
            uint64_t v28 = v26;
            uint64_t v16 = v286;
            v27(&v18[v22[12]], &v19[v22[12]], v28);
            goto LABEL_33;
          case 1u:
            uint64_t v151 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v151 - 8) + 32))(v18, v19, v151);
            uint64_t v152 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v153 = v152[9];
            uint64_t v154 = &v18[v153];
            uint64_t v155 = &v19[v153];
            uint64_t v156 = type metadata accessor for SymmetricKey();
            __int16 v157 = *(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 32);
            v157(v154, v155, v156);
            v157(&v18[v152[10]], &v19[v152[10]], v156);
            uint64_t v158 = v152[11];
            uint64_t v16 = v286;
            v157(&v18[v158], &v19[v158], v156);
            goto LABEL_33;
          case 2u:
            uint64_t v159 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 32))(v18, v19, v159);
            uint64_t v160 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v161 = v160[9];
            unint64_t v162 = &v18[v161];
            uint64_t v163 = &v19[v161];
            uint64_t v164 = type metadata accessor for SymmetricKey();
            uint64_t v165 = *(void (**)(char *, char *, uint64_t))(*(void *)(v164 - 8) + 32);
            v165(v162, v163, v164);
            v165(&v18[v160[10]], &v19[v160[10]], v164);
            v165(&v18[v160[11]], &v19[v160[11]], v164);
            v165(&v18[v160[12]], &v19[v160[12]], v164);
            v165(&v18[v160[13]], &v19[v160[13]], v164);
            uint64_t v166 = v160[14];
            uint64_t v16 = v286;
            v165(&v18[v166], &v19[v166], v164);
            goto LABEL_33;
          case 3u:
            uint64_t v167 = type metadata accessor for SymmetricKey();
            uint64_t v168 = *(void (**)(char *, char *, uint64_t))(*(void *)(v167 - 8) + 32);
            v168(v18, v19, v167);
            uint64_t v169 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v168(&v18[v169[9]], &v19[v169[9]], v167);
            v168(&v18[v169[10]], &v19[v169[10]], v167);
            uint64_t v170 = v167;
            uint64_t v16 = v286;
            v168(&v18[v169[11]], &v19[v169[11]], v170);
LABEL_33:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
            break;
        }
        uint64_t v171 = *(int *)(v16 + 40);
        unint64_t v172 = (char *)(a1 + v171);
        long long v173 = (char *)(a2 + v171);
        uint64_t v174 = (int *)type metadata accessor for SessionTicket();
        uint64_t v175 = *((void *)v174 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v175 + 48))(v173, 1, v174))
        {
          uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v172, v173, *(void *)(*(void *)(v176 - 8) + 64));
        }
        else
        {
          uint64_t v177 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v177 - 8) + 32))(v172, v173, v177);
          *(_DWORD *)&v172[v174[5]] = *(_DWORD *)&v173[v174[5]];
          *(_DWORD *)&v172[v174[6]] = *(_DWORD *)&v173[v174[6]];
          uint64_t v178 = v174[7];
          uint64_t v179 = &v172[v178];
          uint64_t v180 = &v173[v178];
          *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
          *((void *)v179 + 2) = *((void *)v180 + 2);
          uint64_t v181 = v174[8];
          unint64_t v182 = &v172[v181];
          unint64_t v183 = &v173[v181];
          *(_OWORD *)unint64_t v182 = *(_OWORD *)v183;
          *((void *)v182 + 2) = *((void *)v183 + 2);
          uint64_t v184 = v174[9];
          uint64_t v185 = &v172[v184];
          uint64_t v186 = &v173[v184];
          uint64_t v187 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v187 - 8) + 32))(v185, v186, v187);
          *(_DWORD *)&v172[v174[10]] = *(_DWORD *)&v173[v174[10]];
          *(_WORD *)&v172[v174[11]] = *(_WORD *)&v173[v174[11]];
          *(_WORD *)&v172[v174[12]] = *(_WORD *)&v173[v174[12]];
          uint64_t v188 = v174[13];
          uint64_t v189 = &v172[v188];
          uint64_t v190 = &v173[v188];
          *((void *)v189 + 2) = *((void *)v190 + 2);
          *(_OWORD *)uint64_t v189 = *(_OWORD *)v190;
          uint64_t v191 = v174[14];
          uint64_t v192 = &v172[v191];
          unint64_t v193 = &v173[v191];
          uint64_t v194 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v195 = *(void *)(v194 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v195 + 48))(v193, 1, v194))
          {
            uint64_t v196 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v192, v193, *(void *)(*(void *)(v196 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v195 + 32))(v192, v193, v194);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v195 + 56))(v192, 0, 1, v194);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v175 + 56))(v172, 0, 1, v174);
        }
        break;
      case 2u:
        long long v29 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v29;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        long long v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v30;
        unint64_t v31 = (int *)type metadata accessor for HandshakeState.ServerHelloState(0);
        uint64_t v32 = v31[5];
        uint64_t v33 = (char *)(a1 + v32);
        unint64_t v34 = (char *)(a2 + v32);
        uint64_t v35 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        unint64_t v287 = v31;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v36 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v33, v34, v36);
          unint64_t v37 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v33[v37[5]] = *(_DWORD *)&v34[v37[5]];
          *(_DWORD *)&v33[v37[6]] = *(_DWORD *)&v34[v37[6]];
          uint64_t v38 = v37[7];
          uint64_t v39 = &v33[v38];
          __int16 v40 = &v34[v38];
          *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
          *((void *)v39 + 2) = *((void *)v40 + 2);
          uint64_t v41 = v37[8];
          uint64_t v42 = &v33[v41];
          long long v43 = &v34[v41];
          *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
          *((void *)v42 + 2) = *((void *)v43 + 2);
          uint64_t v44 = v37[9];
          uint64_t v45 = &v33[v44];
          uint64_t v46 = &v34[v44];
          uint64_t v47 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
          *(_DWORD *)&v33[v37[10]] = *(_DWORD *)&v34[v37[10]];
          *(_WORD *)&v33[v37[11]] = *(_WORD *)&v34[v37[11]];
          *(_WORD *)&v33[v37[12]] = *(_WORD *)&v34[v37[12]];
          uint64_t v48 = v37[13];
          __int16 v49 = &v33[v48];
          long long v50 = &v34[v48];
          *((void *)v49 + 2) = *((void *)v50 + 2);
          *(_OWORD *)__int16 v49 = *(_OWORD *)v50;
          uint64_t v51 = v37[14];
          uint64_t v52 = &v33[v51];
          uint64_t v53 = &v34[v51];
          uint64_t v54 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v55 = *(void *)(v54 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
          {
            uint64_t v56 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
          }
          unint64_t v31 = v287;
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
        }
        uint64_t v197 = v31[6];
        uint64_t v198 = (char *)(a1 + v197);
        unint64_t v199 = (char *)(a2 + v197);
        uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v201 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 32))(v198, v199, v201);
            uint64_t v202 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v203 = v202[9];
            uint64_t v204 = &v198[v203];
            uint64_t v205 = &v199[v203];
            uint64_t v206 = type metadata accessor for SymmetricKey();
            uint64_t v207 = *(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 32);
            v207(v204, v205, v206);
            v207(&v198[v202[10]], &v199[v202[10]], v206);
            v207(&v198[v202[11]], &v199[v202[11]], v206);
            uint64_t v208 = v202[12];
            unint64_t v31 = v287;
            v207(&v198[v208], &v199[v208], v206);
            goto LABEL_46;
          case 1u:
            uint64_t v209 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v198, v199, v209);
            uint64_t v210 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v211 = v210[9];
            uint64_t v212 = &v198[v211];
            uint64_t v213 = &v199[v211];
            uint64_t v214 = type metadata accessor for SymmetricKey();
            uint64_t v215 = *(void (**)(char *, char *, uint64_t))(*(void *)(v214 - 8) + 32);
            v215(v212, v213, v214);
            v215(&v198[v210[10]], &v199[v210[10]], v214);
            uint64_t v216 = v210[11];
            unint64_t v31 = v287;
            v215(&v198[v216], &v199[v216], v214);
            goto LABEL_46;
          case 2u:
            uint64_t v217 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v217 - 8) + 32))(v198, v199, v217);
            uint64_t v218 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v219 = v218[9];
            uint64_t v220 = &v198[v219];
            uint64_t v221 = &v199[v219];
            uint64_t v222 = type metadata accessor for SymmetricKey();
            uint64_t v223 = *(void (**)(char *, char *, uint64_t))(*(void *)(v222 - 8) + 32);
            v223(v220, v221, v222);
            v223(&v198[v218[10]], &v199[v218[10]], v222);
            v223(&v198[v218[11]], &v199[v218[11]], v222);
            v223(&v198[v218[12]], &v199[v218[12]], v222);
            v223(&v198[v218[13]], &v199[v218[13]], v222);
            uint64_t v224 = v218[14];
            unint64_t v31 = v287;
            v223(&v198[v224], &v199[v224], v222);
            goto LABEL_46;
          case 3u:
            uint64_t v225 = type metadata accessor for SymmetricKey();
            uint64_t v226 = *(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 32);
            v226(v198, v199, v225);
            uint64_t v227 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v226(&v198[v227[9]], &v199[v227[9]], v225);
            v226(&v198[v227[10]], &v199[v227[10]], v225);
            uint64_t v228 = v225;
            unint64_t v31 = v287;
            v226(&v198[v227[11]], &v199[v227[11]], v228);
LABEL_46:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
            break;
        }
        *(_WORD *)(a1 + v31[7]) = *(_WORD *)(a2 + v31[7]);
        *(_WORD *)(a1 + v31[8]) = *(_WORD *)(a2 + v31[8]);
        break;
      case 3u:
        long long v57 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v57;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        long long v58 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v58;
        uint64_t v59 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
        uint64_t v60 = v59[5];
        uint64_t v61 = (char *)(a1 + v60);
        uint64_t v62 = (char *)(a2 + v60);
        uint64_t v63 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v64 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v61, v62, v64);
          uint64_t v65 = (int *)type metadata accessor for SessionTicket();
          *(_DWORD *)&v61[v65[5]] = *(_DWORD *)&v62[v65[5]];
          *(_DWORD *)&v61[v65[6]] = *(_DWORD *)&v62[v65[6]];
          uint64_t v66 = v65[7];
          uint64_t v67 = &v61[v66];
          __int16 v68 = &v62[v66];
          *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
          *((void *)v67 + 2) = *((void *)v68 + 2);
          uint64_t v69 = v65[8];
          uint64_t v70 = &v61[v69];
          uint64_t v71 = &v62[v69];
          *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
          *((void *)v70 + 2) = *((void *)v71 + 2);
          uint64_t v72 = v65[9];
          uint64_t v73 = &v61[v72];
          uint64_t v74 = &v62[v72];
          uint64_t v75 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v73, v74, v75);
          *(_DWORD *)&v61[v65[10]] = *(_DWORD *)&v62[v65[10]];
          *(_WORD *)&v61[v65[11]] = *(_WORD *)&v62[v65[11]];
          *(_WORD *)&v61[v65[12]] = *(_WORD *)&v62[v65[12]];
          uint64_t v76 = v65[13];
          uint64_t v77 = &v61[v76];
          uint64_t v78 = &v62[v76];
          *((void *)v77 + 2) = *((void *)v78 + 2);
          *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
          uint64_t v79 = v65[14];
          uint64_t v80 = &v61[v79];
          uint64_t v81 = &v62[v79];
          uint64_t v82 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v83 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            uint64_t v84 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v80, v81, v82);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
        }
        uint64_t v229 = v59[6];
        uint64_t v230 = a1 + v229;
        uint64_t v231 = a2 + v229;
        *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
        *(void *)(v230 + 16) = *(void *)(v231 + 16);
        uint64_t v232 = v59[7];
        uint64_t v233 = a1 + v232;
        uint64_t v234 = a2 + v232;
        *(void *)(v233 + 16) = *(void *)(v234 + 16);
        *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
        *(unsigned char *)(a1 + v59[8]) = *(unsigned char *)(a2 + v59[8]);
        uint64_t v235 = v59[9];
        uint64_t v134 = (char *)(a1 + v235);
        __int16 v135 = (char *)(a2 + v235);
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_51;
          case 1u:
            goto LABEL_55;
          case 2u:
            goto LABEL_57;
          case 3u:
            goto LABEL_53;
          default:
            goto LABEL_63;
        }
      case 4u:
        long long v85 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v85;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        long long v86 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v86;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        long long v87 = *(_OWORD *)(a2 + 104);
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v87;
        *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
        uint64_t v88 = type metadata accessor for HandshakeState.ServerCertificateState(0);
        uint64_t v89 = *(int *)(v88 + 40);
        uint64_t v90 = (void *)(a1 + v89);
        uint64_t v91 = (const void *)(a2 + v89);
        uint64_t v92 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v93 = *(void *)(v92 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
        {
          uint64_t v94 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v93 + 32))(v90, v91, v92);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
        }
        uint64_t v133 = *(int *)(v88 + 44);
        uint64_t v134 = (char *)(a1 + v133);
        __int16 v135 = (char *)(a2 + v133);
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_51;
          case 1u:
            goto LABEL_55;
          case 2u:
            goto LABEL_57;
          case 3u:
            goto LABEL_53;
          default:
            goto LABEL_63;
        }
      case 5u:
        long long v95 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v95;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        long long v96 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v96;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
        uint64_t v97 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
        uint64_t v98 = v97[7];
        uint64_t v99 = (void *)(a1 + v98);
        uint64_t v100 = (const void *)(a2 + v98);
        uint64_t v101 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v102 = *(void *)(v101 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
        {
          uint64_t v103 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v102 + 32))(v99, v100, v101);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
        }
        uint64_t v137 = v97[8];
        uint64_t v138 = a1 + v137;
        uint64_t v139 = a2 + v137;
        *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
        *(void *)(v138 + 16) = *(void *)(v139 + 16);
        uint64_t v140 = v97[9];
        uint64_t v141 = a1 + v140;
        uint64_t v142 = a2 + v140;
        *(void *)(v141 + 16) = *(void *)(v142 + 16);
        *(_OWORD *)uint64_t v141 = *(_OWORD *)v142;
        *(unsigned char *)(a1 + v97[10]) = *(unsigned char *)(a2 + v97[10]);
        uint64_t v143 = v97[11];
        uint64_t v134 = (char *)(a1 + v143);
        __int16 v135 = (char *)(a2 + v143);
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            goto LABEL_51;
          case 1u:
            goto LABEL_55;
          case 2u:
            goto LABEL_57;
          case 3u:
            goto LABEL_53;
          default:
            goto LABEL_63;
        }
      case 6u:
        long long v104 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v104;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        long long v105 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v105;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
        uint64_t ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
        uint64_t v107 = ready[7];
        unint64_t v108 = (void *)(a1 + v107);
        uint64_t v109 = (const void *)(a2 + v107);
        uint64_t v110 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v111 = *(void *)(v110 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
        {
          uint64_t v112 = type metadata accessor for PeerCertificateBundle.Bundle(0);
          memcpy(v108, v109, *(void *)(*(void *)(v112 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v111 + 32))(v108, v109, v110);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
        }
        uint64_t v144 = ready[8];
        uint64_t v145 = a1 + v144;
        uint64_t v146 = a2 + v144;
        *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        uint64_t v147 = ready[9];
        uint64_t v148 = a1 + v147;
        uint64_t v149 = a2 + v147;
        *(void *)(v148 + 16) = *(void *)(v149 + 16);
        *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
        *(unsigned char *)(a1 + ready[10]) = *(unsigned char *)(a2 + ready[10]);
        uint64_t v150 = ready[11];
        uint64_t v134 = (char *)(a1 + v150);
        __int16 v135 = (char *)(a2 + v150);
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
LABEL_51:
            uint64_t v236 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v236 - 8) + 32))(v134, v135, v236);
            uint64_t v237 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v238 = v237[9];
            uint64_t v239 = &v134[v238];
            uint64_t v240 = &v135[v238];
            uint64_t v241 = type metadata accessor for SymmetricKey();
            uint64_t v242 = *(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 32);
            v242(v239, v240, v241);
            v242(&v134[v237[10]], &v135[v237[10]], v241);
            v242(&v134[v237[11]], &v135[v237[11]], v241);
            v242(&v134[v237[12]], &v135[v237[12]], v241);
            goto LABEL_58;
          case 1u:
LABEL_55:
            uint64_t v246 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v246 - 8) + 32))(v134, v135, v246);
            uint64_t v247 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v248 = v247[9];
            unint64_t v249 = &v134[v248];
            uint64_t v250 = &v135[v248];
            uint64_t v251 = type metadata accessor for SymmetricKey();
            uint64_t v252 = *(void (**)(char *, char *, uint64_t))(*(void *)(v251 - 8) + 32);
            v252(v249, v250, v251);
            v252(&v134[v247[10]], &v135[v247[10]], v251);
            v252(&v134[v247[11]], &v135[v247[11]], v251);
            goto LABEL_58;
          case 2u:
LABEL_57:
            uint64_t v253 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v253 - 8) + 32))(v134, v135, v253);
            unint64_t v254 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v255 = v254[9];
            uint64_t v256 = &v134[v255];
            uint64_t v257 = &v135[v255];
            uint64_t v258 = type metadata accessor for SymmetricKey();
            uint64_t v259 = *(void (**)(char *, char *, uint64_t))(*(void *)(v258 - 8) + 32);
            v259(v256, v257, v258);
            v259(&v134[v254[10]], &v135[v254[10]], v258);
            v259(&v134[v254[11]], &v135[v254[11]], v258);
            v259(&v134[v254[12]], &v135[v254[12]], v258);
            v259(&v134[v254[13]], &v135[v254[13]], v258);
            v259(&v134[v254[14]], &v135[v254[14]], v258);
            goto LABEL_58;
          case 3u:
LABEL_53:
            uint64_t v243 = type metadata accessor for SymmetricKey();
            uint64_t v244 = *(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 32);
            v244(v134, v135, v243);
            uint64_t v245 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v244(&v134[v245[9]], &v135[v245[9]], v243);
            v244(&v134[v245[10]], &v135[v245[10]], v243);
            v244(&v134[v245[11]], &v135[v245[11]], v243);
            goto LABEL_58;
          default:
            goto LABEL_63;
        }
      default:
        long long v4 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v4;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        long long v5 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v5;
        uint64_t v6 = type metadata accessor for HandshakeState.IdleState(0);
        uint64_t v7 = *(int *)(v6 + 20);
        unint64_t v8 = (char *)(a1 + v7);
        long long v9 = (char *)(a2 + v7);
        unint64_t v10 = (int *)type metadata accessor for SessionTicket();
        uint64_t v11 = *((void *)v10 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
          memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          uint64_t v113 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 32))(v8, v9, v113);
          *(_DWORD *)&v8[v10[5]] = *(_DWORD *)&v9[v10[5]];
          *(_DWORD *)&v8[v10[6]] = *(_DWORD *)&v9[v10[6]];
          uint64_t v114 = v10[7];
          uint64_t v115 = &v8[v114];
          uint64_t v116 = &v9[v114];
          *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
          *((void *)v115 + 2) = *((void *)v116 + 2);
          uint64_t v117 = v10[8];
          uint64_t v118 = &v8[v117];
          unint64_t v119 = &v9[v117];
          *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
          *((void *)v118 + 2) = *((void *)v119 + 2);
          uint64_t v120 = v10[9];
          uint64_t v121 = &v8[v120];
          __int16 v122 = &v9[v120];
          uint64_t v123 = type metadata accessor for SymmetricKey();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 32))(v121, v122, v123);
          *(_DWORD *)&v8[v10[10]] = *(_DWORD *)&v9[v10[10]];
          *(_WORD *)&v8[v10[11]] = *(_WORD *)&v9[v10[11]];
          *(_WORD *)&v8[v10[12]] = *(_WORD *)&v9[v10[12]];
          uint64_t v124 = v10[13];
          uint64_t v125 = &v8[v124];
          __int16 v126 = &v9[v124];
          *((void *)v125 + 2) = *((void *)v126 + 2);
          *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
          uint64_t v127 = v10[14];
          uint64_t v128 = &v8[v127];
          uint64_t v129 = &v9[v127];
          uint64_t v130 = type metadata accessor for P256.Signing.PublicKey();
          uint64_t v131 = *(void *)(v130 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
          {
            uint64_t v132 = type metadata accessor for PeerCertificateBundle.Bundle(0);
            memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v128, v129, v130);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
          }
          (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
        }
        uint64_t v260 = *(int *)(v6 + 24);
        uint64_t v134 = (char *)(a1 + v260);
        __int16 v135 = (char *)(a2 + v260);
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v261 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 32))(v134, v135, v261);
            unint64_t v262 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
            uint64_t v263 = v262[9];
            uint64_t v264 = &v134[v263];
            uint64_t v265 = &v135[v263];
            uint64_t v266 = type metadata accessor for SymmetricKey();
            uint64_t v267 = *(void (**)(char *, char *, uint64_t))(*(void *)(v266 - 8) + 32);
            v267(v264, v265, v266);
            v267(&v134[v262[10]], &v135[v262[10]], v266);
            v267(&v134[v262[11]], &v135[v262[11]], v266);
            v267(&v134[v262[12]], &v135[v262[12]], v266);
            goto LABEL_58;
          case 1u:
            uint64_t v268 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v268 - 8) + 32))(v134, v135, v268);
            uint64_t v269 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
            uint64_t v270 = v269[9];
            uint64_t v271 = &v134[v270];
            uint64_t v272 = &v135[v270];
            uint64_t v273 = type metadata accessor for SymmetricKey();
            uint64_t v274 = *(void (**)(char *, char *, uint64_t))(*(void *)(v273 - 8) + 32);
            v274(v271, v272, v273);
            v274(&v134[v269[10]], &v135[v269[10]], v273);
            v274(&v134[v269[11]], &v135[v269[11]], v273);
            goto LABEL_58;
          case 2u:
            uint64_t v275 = type metadata accessor for SHA384();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v275 - 8) + 32))(v134, v135, v275);
            uint64_t v276 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
            uint64_t v277 = v276[9];
            uint64_t v278 = &v134[v277];
            uint64_t v279 = &v135[v277];
            uint64_t v280 = type metadata accessor for SymmetricKey();
            uint64_t v281 = *(void (**)(char *, char *, uint64_t))(*(void *)(v280 - 8) + 32);
            v281(v278, v279, v280);
            v281(&v134[v276[10]], &v135[v276[10]], v280);
            v281(&v134[v276[11]], &v135[v276[11]], v280);
            v281(&v134[v276[12]], &v135[v276[12]], v280);
            v281(&v134[v276[13]], &v135[v276[13]], v280);
            v281(&v134[v276[14]], &v135[v276[14]], v280);
            goto LABEL_58;
          case 3u:
            uint64_t v282 = type metadata accessor for SymmetricKey();
            uint64_t v283 = *(void (**)(char *, char *, uint64_t))(*(void *)(v282 - 8) + 32);
            v283(v134, v135, v282);
            uint64_t v284 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
            v283(&v134[v284[9]], &v135[v284[9]], v282);
            v283(&v134[v284[10]], &v135[v284[10]], v282);
            v283(&v134[v284[11]], &v135[v284[11]], v282);
LABEL_58:
            swift_storeEnumTagMultiPayload();
            break;
          default:
LABEL_63:
            memcpy(v134, v135, *(void *)(*(void *)(v136 - 8) + 64));
            break;
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for HandshakeState()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for HandshakeState()
{
  uint64_t result = type metadata accessor for HandshakeState.IdleState(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for HandshakeState.ClientHelloState(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for HandshakeState.ServerHelloState(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for HandshakeState.EncryptedExtensionsState(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for HandshakeState.ServerCertificateState(319);
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for HandshakeState.ServerCertificateVerifyState(319);
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for HandshakeState.ReadyState(319);
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.IdleState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    unint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      uint64_t v11 = a2[3];
      outlined copy of Data._Representation(v11, v8);
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v8;
    }
    *(void *)(a1 + 40) = a2[5];
    unint64_t v12 = a2[7];
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      uint64_t v13 = a2[6];
      outlined copy of Data._Representation(v13, a2[7]);
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v12;
    }
    *(void *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    uint64_t v14 = *(int *)(a3 + 20);
    long long v15 = (char *)(a1 + v14);
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = (int *)type metadata accessor for SessionTicket();
    uint64_t v18 = *((void *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v74 = v18;
      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v15, v16, v20);
      *(_DWORD *)&v15[v17[5]] = *(_DWORD *)&v16[v17[5]];
      *(_DWORD *)&v15[v17[6]] = *(_DWORD *)&v16[v17[6]];
      uint64_t v21 = v17[7];
      unint64_t v22 = (uint64_t *)&v15[v21];
      uint64_t v23 = &v16[v21];
      uint64_t v24 = *(void *)&v16[v21];
      unint64_t v25 = *(void *)&v16[v21 + 8];
      outlined copy of Data._Representation(v24, v25);
      *unint64_t v22 = v24;
      v22[1] = v25;
      uint64_t v22[2] = *((void *)v23 + 2);
      uint64_t v26 = v17[8];
      uint64_t v27 = (uint64_t *)&v15[v26];
      uint64_t v28 = &v16[v26];
      uint64_t v29 = *(void *)&v16[v26];
      unint64_t v30 = *(void *)&v16[v26 + 8];
      outlined copy of Data._Representation(v29, v30);
      uint64_t *v27 = v29;
      v27[1] = v30;
      void v27[2] = *((void *)v28 + 2);
      uint64_t v31 = v17[9];
      uint64_t v32 = &v15[v31];
      uint64_t v33 = &v16[v31];
      uint64_t v34 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
      *(_DWORD *)&v15[v17[10]] = *(_DWORD *)&v16[v17[10]];
      *(_WORD *)&v15[v17[11]] = *(_WORD *)&v16[v17[11]];
      *(_WORD *)&v15[v17[12]] = *(_WORD *)&v16[v17[12]];
      uint64_t v35 = v17[13];
      uint64_t v36 = &v15[v35];
      unint64_t v37 = (uint64_t *)&v16[v35];
      unint64_t v38 = *(void *)&v16[v35 + 8];
      if (v38 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      }
      else
      {
        uint64_t v39 = *v37;
        outlined copy of Data._Representation(*v37, v38);
        *(void *)uint64_t v36 = v39;
        *((void *)v36 + 1) = v38;
      }
      *((void *)v36 + 2) = v37[2];
      uint64_t v40 = v17[14];
      uint64_t v41 = &v15[v40];
      uint64_t v42 = &v16[v40];
      uint64_t v43 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      (*(void (**)(char *, void, uint64_t, int *))(v74 + 56))(v15, 0, 1, v17);
    }
    uint64_t v46 = *(int *)(a3 + 24);
    uint64_t v47 = (char *)(a1 + v46);
    uint64_t v48 = (char *)a2 + v46;
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v50 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v47, v48, v50);
        uint64_t v51 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v52 = v51[9];
        uint64_t v53 = &v47[v52];
        uint64_t v54 = &v48[v52];
        uint64_t v55 = type metadata accessor for SymmetricKey();
        uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16);
        v56(v53, v54, v55);
        v56(&v47[v51[10]], &v48[v51[10]], v55);
        v56(&v47[v51[11]], &v48[v51[11]], v55);
        v56(&v47[v51[12]], &v48[v51[12]], v55);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v57 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v47, v48, v57);
        long long v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v59 = v58[9];
        uint64_t v60 = &v47[v59];
        uint64_t v61 = &v48[v59];
        uint64_t v62 = type metadata accessor for SymmetricKey();
        uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
        v63(v60, v61, v62);
        v63(&v47[v58[10]], &v48[v58[10]], v62);
        v63(&v47[v58[11]], &v48[v58[11]], v62);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v64 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v47, v48, v64);
        uint64_t v65 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v66 = v65[9];
        uint64_t v67 = &v47[v66];
        __int16 v68 = &v48[v66];
        uint64_t v69 = type metadata accessor for SymmetricKey();
        uint64_t v70 = *(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16);
        v70(v67, v68, v69);
        v70(&v47[v65[10]], &v48[v65[10]], v69);
        v70(&v47[v65[11]], &v48[v65[11]], v69);
        v70(&v47[v65[12]], &v48[v65[12]], v69);
        v70(&v47[v65[13]], &v48[v65[13]], v69);
        v70(&v47[v65[14]], &v48[v65[14]], v69);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v71 = type metadata accessor for SymmetricKey();
        uint64_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16);
        v72(v47, v48, v71);
        uint64_t v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v72(&v47[v73[9]], &v48[v73[9]], v71);
        v72(&v47[v73[10]], &v48[v73[10]], v71);
        v72(&v47[v73[11]], &v48[v73[11]], v71);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for HandshakeState.IdleState(uint64_t *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = a1[4];
  if (v4 >> 60 != 15) {
    outlined consume of Data._Representation(a1[3], v4);
  }
  unint64_t v5 = a1[7];
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(a1[6], v5);
  }
  unint64_t v6 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v7 = (int *)type metadata accessor for SessionTicket();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    outlined consume of Data._Representation(*(void *)&v6[v7[7]], *(void *)&v6[v7[7] + 8]);
    outlined consume of Data._Representation(*(void *)&v6[v7[8]], *(void *)&v6[v7[8] + 8]);
    uint64_t v9 = &v6[v7[9]];
    uint64_t v10 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    uint64_t v11 = (uint64_t *)&v6[v7[13]];
    unint64_t v12 = v11[1];
    if (v12 >> 60 != 15) {
      outlined consume of Data._Representation(*v11, v12);
    }
    uint64_t v13 = &v6[v7[14]];
    uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    }
  }
  uint64_t v16 = (char *)a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v18 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
      uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v20 = &v16[v19[9]];
      uint64_t v21 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v21 - 8), v20, v21);
      v33(&v16[v19[10]], v21);
      v33(&v16[v19[11]], v21);
      uint64_t v22 = v19[12];
      goto LABEL_14;
    case 1:
      uint64_t v23 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
      uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      unint64_t v25 = &v16[v24[9]];
      uint64_t v21 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v21 - 8), v25, v21);
      v33(&v16[v24[10]], v21);
      uint64_t v22 = v24[11];
      goto LABEL_14;
    case 2:
      uint64_t v26 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v16, v26);
      uint64_t v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v28 = &v16[v27[9]];
      uint64_t v21 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v21 - 8), v28, v21);
      v33(&v16[v27[10]], v21);
      v33(&v16[v27[11]], v21);
      v33(&v16[v27[12]], v21);
      v33(&v16[v27[13]], v21);
      uint64_t v22 = v27[14];
LABEL_14:
      uint64_t v29 = &v16[v22];
      uint64_t v30 = v21;
      goto LABEL_16;
    case 3:
      uint64_t v31 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v31 - 8), v16, v31);
      uint64_t v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v33(&v16[v32[9]], v31);
      v33(&v16[v32[10]], v31);
      uint64_t v29 = &v16[v32[11]];
      uint64_t v30 = v31;
LABEL_16:
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v29, v30);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v7;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(void *)(a2 + 56));
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v11 = *(int *)(a3 + 20);
  unint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for SessionTicket();
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v72 = a3;
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
    *(_DWORD *)&v12[v14[5]] = *(_DWORD *)&v13[v14[5]];
    *(_DWORD *)&v12[v14[6]] = *(_DWORD *)&v13[v14[6]];
    uint64_t v18 = v14[7];
    uint64_t v19 = (uint64_t *)&v12[v18];
    uint64_t v20 = &v13[v18];
    uint64_t v21 = *(void *)&v13[v18];
    unint64_t v22 = *(void *)&v13[v18 + 8];
    outlined copy of Data._Representation(v21, v22);
    uint64_t *v19 = v21;
    v19[1] = v22;
    v19[2] = *((void *)v20 + 2);
    uint64_t v23 = v14[8];
    uint64_t v24 = (uint64_t *)&v12[v23];
    unint64_t v25 = &v13[v23];
    uint64_t v26 = *(void *)&v13[v23];
    unint64_t v27 = *(void *)&v13[v23 + 8];
    outlined copy of Data._Representation(v26, v27);
    uint64_t *v24 = v26;
    v24[1] = v27;
    v24[2] = *((void *)v25 + 2);
    uint64_t v28 = v14[9];
    uint64_t v29 = &v12[v28];
    uint64_t v30 = &v13[v28];
    uint64_t v31 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    *(_DWORD *)&v12[v14[10]] = *(_DWORD *)&v13[v14[10]];
    *(_WORD *)&v12[v14[11]] = *(_WORD *)&v13[v14[11]];
    *(_WORD *)&v12[v14[12]] = *(_WORD *)&v13[v14[12]];
    uint64_t v32 = v14[13];
    uint64_t v33 = &v12[v32];
    uint64_t v34 = (uint64_t *)&v13[v32];
    unint64_t v35 = *(void *)&v13[v32 + 8];
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      outlined copy of Data._Representation(*v34, v35);
      *(void *)uint64_t v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    *((void *)v33 + 2) = v34[2];
    a3 = v72;
    uint64_t v37 = v14[14];
    unint64_t v38 = &v12[v37];
    uint64_t v39 = &v13[v37];
    uint64_t v40 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      uint64_t v42 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v43 = *(int *)(a3 + 24);
  uint64_t v44 = (char *)(a1 + v43);
  uint64_t v45 = (char *)(a2 + v43);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v47 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v44, v45, v47);
      uint64_t v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v49 = v48[9];
      uint64_t v50 = &v44[v49];
      uint64_t v51 = &v45[v49];
      uint64_t v52 = type metadata accessor for SymmetricKey();
      uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16);
      v53(v50, v51, v52);
      v53(&v44[v48[10]], &v45[v48[10]], v52);
      v53(&v44[v48[11]], &v45[v48[11]], v52);
      v53(&v44[v48[12]], &v45[v48[12]], v52);
      goto LABEL_22;
    case 1u:
      uint64_t v54 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v44, v45, v54);
      uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v56 = v55[9];
      uint64_t v57 = &v44[v56];
      long long v58 = &v45[v56];
      uint64_t v59 = type metadata accessor for SymmetricKey();
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
      v60(v57, v58, v59);
      v60(&v44[v55[10]], &v45[v55[10]], v59);
      v60(&v44[v55[11]], &v45[v55[11]], v59);
      goto LABEL_22;
    case 2u:
      uint64_t v61 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v44, v45, v61);
      uint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v63 = v62[9];
      uint64_t v64 = &v44[v63];
      uint64_t v65 = &v45[v63];
      uint64_t v66 = type metadata accessor for SymmetricKey();
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16);
      v67(v64, v65, v66);
      v67(&v44[v62[10]], &v45[v62[10]], v66);
      v67(&v44[v62[11]], &v45[v62[11]], v66);
      v67(&v44[v62[12]], &v45[v62[12]], v66);
      v67(&v44[v62[13]], &v45[v62[13]], v66);
      v67(&v44[v62[14]], &v45[v62[14]], v66);
      goto LABEL_22;
    case 3u:
      uint64_t v68 = type metadata accessor for SymmetricKey();
      uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16);
      v69(v44, v45, v68);
      uint64_t v70 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v69(&v44[v70[9]], &v45[v70[9]], v68);
      v69(&v44[v70[10]], &v45[v70[10]], v68);
      v69(&v44[v70[11]], &v45[v70[11]], v68);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 24);
  unint64_t v7 = (long long *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      long long v9 = *v7;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *uint64_t v6 = v9;
      goto LABEL_9;
    }
    uint64_t v11 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      uint64_t v10 = *(void *)(a2 + 40);
      *uint64_t v6 = *v7;
      *(void *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    uint64_t v12 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(void *)(a2 + 32));
    uint64_t v13 = *(void *)(a1 + 24);
    unint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
LABEL_9:
  uint64_t v15 = (long long *)(a1 + 48);
  uint64_t v16 = (long long *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      long long v18 = *v16;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *uint64_t v15 = v18;
      goto LABEL_17;
    }
    uint64_t v20 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(void *)(a2 + 56));
    *(void *)(a1 + 48) = v20;
    *(void *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      uint64_t v19 = *(void *)(a2 + 64);
      *uint64_t v15 = *v16;
      *(void *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(void *)(a2 + 56));
    uint64_t v22 = *(void *)(a1 + 48);
    unint64_t v23 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_17:
  __int16 v24 = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = a1 + v25;
  unint64_t v27 = (char *)(a2 + v25);
  uint64_t v28 = (int *)type metadata accessor for SessionTicket();
  uint64_t v29 = *((void *)v28 - 1);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30((uint64_t)v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v26, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      goto LABEL_23;
    }
    uint64_t v130 = a3;
    uint64_t v56 = type metadata accessor for Date();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v56 - 8) + 24))(v26, v27, v56);
    *(_DWORD *)(v26 + v28[5]) = *(_DWORD *)&v27[v28[5]];
    *(_DWORD *)(v26 + v28[6]) = *(_DWORD *)&v27[v28[6]];
    uint64_t v57 = v28[7];
    long long v58 = (uint64_t *)(v26 + v57);
    uint64_t v59 = &v27[v57];
    uint64_t v60 = *(void *)&v27[v57];
    unint64_t v61 = *(void *)&v27[v57 + 8];
    outlined copy of Data._Representation(v60, v61);
    uint64_t v62 = *v58;
    unint64_t v63 = v58[1];
    *long long v58 = v60;
    v58[1] = v61;
    outlined consume of Data._Representation(v62, v63);
    long long v58[2] = *((void *)v59 + 2);
    uint64_t v64 = v28[8];
    uint64_t v65 = (uint64_t *)(v26 + v64);
    uint64_t v66 = &v27[v64];
    uint64_t v67 = *(void *)&v27[v64];
    unint64_t v68 = *(void *)&v27[v64 + 8];
    outlined copy of Data._Representation(v67, v68);
    uint64_t v69 = *v65;
    unint64_t v70 = v65[1];
    *uint64_t v65 = v67;
    v65[1] = v68;
    outlined consume of Data._Representation(v69, v70);
    v65[2] = *((void *)v66 + 2);
    uint64_t v71 = v28[9];
    uint64_t v72 = v26 + v71;
    uint64_t v73 = &v27[v71];
    uint64_t v74 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v74 - 8) + 24))(v72, v73, v74);
    *(_DWORD *)(v26 + v28[10]) = *(_DWORD *)&v27[v28[10]];
    *(_WORD *)(v26 + v28[11]) = *(_WORD *)&v27[v28[11]];
    *(_WORD *)(v26 + v28[12]) = *(_WORD *)&v27[v28[12]];
    uint64_t v75 = v28[13];
    uint64_t v76 = v26 + v75;
    uint64_t v77 = (uint64_t *)&v27[v75];
    unint64_t v78 = *(void *)&v27[v75 + 8];
    if (*(void *)(v26 + v75 + 8) >> 60 == 15)
    {
      if (v78 >> 60 == 15)
      {
        long long v79 = *(_OWORD *)v77;
        *(void *)(v76 + 16) = v77[2];
        *(_OWORD *)uint64_t v76 = v79;
LABEL_48:
        uint64_t v121 = v28[14];
        __int16 v122 = (void *)(v26 + v121);
        uint64_t v123 = &v27[v121];
        uint64_t v124 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v125 = *(void *)(v124 - 8);
        __int16 v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
        int v127 = v126(v122, 1, v124);
        int v128 = v126(v123, 1, v124);
        a3 = v130;
        if (v127)
        {
          if (!v128)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 16))(v122, v123, v124);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
            goto LABEL_33;
          }
        }
        else
        {
          if (!v128)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 24))(v122, v123, v124);
            goto LABEL_33;
          }
          (*(void (**)(void *, uint64_t))(v125 + 8))(v122, v124);
        }
        size_t v53 = *(void *)(*(void *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8) + 64);
        uint64_t v54 = v122;
        uint64_t v55 = v123;
LABEL_24:
        memcpy(v54, v55, v53);
        goto LABEL_33;
      }
      uint64_t v117 = *v77;
      outlined copy of Data._Representation(*v77, v78);
      *(void *)uint64_t v76 = v117;
      *(void *)(v76 + 8) = v78;
    }
    else
    {
      if (v78 >> 60 == 15)
      {
        outlined destroy of ByteBuffer(v76);
        uint64_t v116 = v77[2];
        *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
LABEL_47:
        *(void *)(v76 + 16) = v116;
        goto LABEL_48;
      }
      uint64_t v118 = *v77;
      outlined copy of Data._Representation(*v77, v78);
      uint64_t v119 = *(void *)v76;
      unint64_t v120 = *(void *)(v76 + 8);
      *(void *)uint64_t v76 = v118;
      *(void *)(v76 + 8) = v78;
      outlined consume of Data._Representation(v119, v120);
    }
    uint64_t v116 = v77[2];
    goto LABEL_47;
  }
  if (v32)
  {
LABEL_23:
    size_t v53 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                - 8)
                    + 64);
    uint64_t v54 = (void *)v26;
    uint64_t v55 = v27;
    goto LABEL_24;
  }
  uint64_t v129 = a3;
  uint64_t v33 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v26, v27, v33);
  *(_DWORD *)(v26 + v28[5]) = *(_DWORD *)&v27[v28[5]];
  *(_DWORD *)(v26 + v28[6]) = *(_DWORD *)&v27[v28[6]];
  uint64_t v34 = v28[7];
  unint64_t v35 = (uint64_t *)(v26 + v34);
  uint64_t v36 = &v27[v34];
  uint64_t v37 = *(void *)&v27[v34];
  unint64_t v38 = *(void *)&v27[v34 + 8];
  outlined copy of Data._Representation(v37, v38);
  *unint64_t v35 = v37;
  v35[1] = v38;
  v35[2] = *((void *)v36 + 2);
  uint64_t v39 = v28[8];
  uint64_t v40 = (uint64_t *)(v26 + v39);
  uint64_t v41 = &v27[v39];
  uint64_t v42 = *(void *)&v27[v39];
  unint64_t v43 = *(void *)&v27[v39 + 8];
  outlined copy of Data._Representation(v42, v43);
  *uint64_t v40 = v42;
  v40[1] = v43;
  v40[2] = *((void *)v41 + 2);
  uint64_t v44 = v28[9];
  uint64_t v45 = v26 + v44;
  uint64_t v46 = &v27[v44];
  uint64_t v47 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
  *(_DWORD *)(v26 + v28[10]) = *(_DWORD *)&v27[v28[10]];
  *(_WORD *)(v26 + v28[11]) = *(_WORD *)&v27[v28[11]];
  *(_WORD *)(v26 + v28[12]) = *(_WORD *)&v27[v28[12]];
  uint64_t v48 = v28[13];
  uint64_t v49 = v26 + v48;
  uint64_t v50 = (uint64_t *)&v27[v48];
  unint64_t v51 = *(void *)&v27[v48 + 8];
  if (v51 >> 60 == 15)
  {
    long long v52 = *(_OWORD *)v50;
    *(void *)(v49 + 16) = v50[2];
    *(_OWORD *)uint64_t v49 = v52;
  }
  else
  {
    uint64_t v80 = *v50;
    outlined copy of Data._Representation(*v50, v51);
    *(void *)uint64_t v49 = v80;
    *(void *)(v49 + 8) = v51;
    *(void *)(v49 + 16) = v50[2];
  }
  uint64_t v81 = v28[14];
  uint64_t v82 = (void *)(v26 + v81);
  uint64_t v83 = &v27[v81];
  uint64_t v84 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v85 = *(void *)(v84 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
  {
    uint64_t v86 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v85 + 16))(v82, v83, v84);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
  }
  a3 = v129;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v29 + 56))(v26, 0, 1, v28);
LABEL_33:
  if (a1 != a2)
  {
    uint64_t v87 = *(int *)(a3 + 24);
    uint64_t v88 = (char *)(a1 + v87);
    uint64_t v89 = (char *)(a2 + v87);
    outlined destroy of HandshakeStateMachine?(a1 + v87, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v91 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16))(v88, v89, v91);
        uint64_t v92 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v93 = v92[9];
        uint64_t v94 = &v88[v93];
        long long v95 = &v89[v93];
        uint64_t v96 = type metadata accessor for SymmetricKey();
        uint64_t v97 = *(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 16);
        v97(v94, v95, v96);
        v97(&v88[v92[10]], &v89[v92[10]], v96);
        v97(&v88[v92[11]], &v89[v92[11]], v96);
        v97(&v88[v92[12]], &v89[v92[12]], v96);
        goto LABEL_40;
      case 1u:
        uint64_t v98 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 16))(v88, v89, v98);
        uint64_t v99 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v100 = v99[9];
        uint64_t v101 = &v88[v100];
        uint64_t v102 = &v89[v100];
        uint64_t v103 = type metadata accessor for SymmetricKey();
        long long v104 = *(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 16);
        v104(v101, v102, v103);
        v104(&v88[v99[10]], &v89[v99[10]], v103);
        v104(&v88[v99[11]], &v89[v99[11]], v103);
        goto LABEL_40;
      case 2u:
        uint64_t v105 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16))(v88, v89, v105);
        unint64_t v106 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v107 = v106[9];
        unint64_t v108 = &v88[v107];
        uint64_t v109 = &v89[v107];
        uint64_t v110 = type metadata accessor for SymmetricKey();
        uint64_t v111 = *(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 16);
        v111(v108, v109, v110);
        v111(&v88[v106[10]], &v89[v106[10]], v110);
        v111(&v88[v106[11]], &v89[v106[11]], v110);
        v111(&v88[v106[12]], &v89[v106[12]], v110);
        v111(&v88[v106[13]], &v89[v106[13]], v110);
        v111(&v88[v106[14]], &v89[v106[14]], v110);
        goto LABEL_40;
      case 3u:
        uint64_t v112 = type metadata accessor for SymmetricKey();
        uint64_t v113 = *(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 16);
        v113(v88, v89, v112);
        uint64_t v114 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v113(&v88[v114[9]], &v89[v114[9]], v112);
        v113(&v88[v114[10]], &v89[v114[10]], v112);
        v113(&v88[v114[11]], &v89[v114[11]], v112);
LABEL_40:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v88, v89, *(void *)(*(void *)(v90 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for HandshakeState.IdleState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)a2 + 60);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  long long v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = (int *)type metadata accessor for SessionTicket();
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v9, v10, v14);
    *(_DWORD *)&v9[v11[5]] = *(_DWORD *)&v10[v11[5]];
    *(_DWORD *)&v9[v11[6]] = *(_DWORD *)&v10[v11[6]];
    uint64_t v15 = v11[7];
    uint64_t v16 = &v9[v15];
    unint64_t v17 = &v10[v15];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((void *)v16 + 2) = *((void *)v17 + 2);
    uint64_t v18 = v11[8];
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *((void *)v19 + 2) = *((void *)v20 + 2);
    uint64_t v21 = v11[9];
    uint64_t v22 = &v9[v21];
    unint64_t v23 = &v10[v21];
    uint64_t v24 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
    *(_DWORD *)&v9[v11[10]] = *(_DWORD *)&v10[v11[10]];
    *(_WORD *)&v9[v11[11]] = *(_WORD *)&v10[v11[11]];
    *(_WORD *)&v9[v11[12]] = *(_WORD *)&v10[v11[12]];
    uint64_t v25 = v11[13];
    uint64_t v26 = &v9[v25];
    unint64_t v27 = &v10[v25];
    *((void *)v26 + 2) = *((void *)v27 + 2);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    uint64_t v28 = v11[14];
    uint64_t v29 = &v9[v28];
    uint64_t v30 = &v10[v28];
    uint64_t v31 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v34 = *(int *)(a3 + 24);
  unint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v38 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v35, v36, v38);
      uint64_t v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v40 = v39[9];
      uint64_t v41 = &v35[v40];
      uint64_t v42 = &v36[v40];
      uint64_t v43 = type metadata accessor for SymmetricKey();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
      v44(v41, v42, v43);
      v44(&v35[v39[10]], &v36[v39[10]], v43);
      v44(&v35[v39[11]], &v36[v39[11]], v43);
      v44(&v35[v39[12]], &v36[v39[12]], v43);
      goto LABEL_13;
    case 1u:
      uint64_t v45 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v35, v36, v45);
      uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v47 = v46[9];
      uint64_t v48 = &v35[v47];
      uint64_t v49 = &v36[v47];
      uint64_t v50 = type metadata accessor for SymmetricKey();
      unint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32);
      v51(v48, v49, v50);
      v51(&v35[v46[10]], &v36[v46[10]], v50);
      v51(&v35[v46[11]], &v36[v46[11]], v50);
      goto LABEL_13;
    case 2u:
      uint64_t v52 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v35, v36, v52);
      size_t v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v54 = v53[9];
      uint64_t v55 = &v35[v54];
      uint64_t v56 = &v36[v54];
      uint64_t v57 = type metadata accessor for SymmetricKey();
      long long v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
      v58(v55, v56, v57);
      v58(&v35[v53[10]], &v36[v53[10]], v57);
      v58(&v35[v53[11]], &v36[v53[11]], v57);
      v58(&v35[v53[12]], &v36[v53[12]], v57);
      v58(&v35[v53[13]], &v36[v53[13]], v57);
      v58(&v35[v53[14]], &v36[v53[14]], v57);
      goto LABEL_13;
    case 3u:
      uint64_t v59 = type metadata accessor for SymmetricKey();
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32);
      v60(v35, v36, v59);
      unint64_t v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v60(&v35[v61[9]], &v36[v61[9]], v59);
      v60(&v35[v61[10]], &v36[v61[10]], v59);
      v60(&v35[v61[11]], &v36[v61[11]], v59);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithTake for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
LABEL_6:
  unint64_t v10 = *(void *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    goto LABEL_11;
  }
  unint64_t v11 = *(void *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for SessionTicket();
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18((uint64_t)v15, 1, v16);
  if (!v19)
  {
    if (v20)
    {
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v14, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      goto LABEL_17;
    }
    uint64_t v44 = type metadata accessor for Date();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v44 - 8) + 40))(v14, v15, v44);
    *(_DWORD *)(v14 + v16[5]) = *(_DWORD *)&v15[v16[5]];
    *(_DWORD *)(v14 + v16[6]) = *(_DWORD *)&v15[v16[6]];
    uint64_t v45 = v16[7];
    uint64_t v46 = v14 + v45;
    uint64_t v47 = &v15[v45];
    uint64_t v48 = *(void *)(v14 + v45);
    unint64_t v49 = *(void *)(v14 + v45 + 8);
    *(_OWORD *)(v14 + v45) = *(_OWORD *)&v15[v45];
    outlined consume of Data._Representation(v48, v49);
    *(void *)(v46 + 16) = *((void *)v47 + 2);
    uint64_t v50 = v16[8];
    uint64_t v51 = v14 + v50;
    uint64_t v52 = &v15[v50];
    uint64_t v53 = *(void *)(v14 + v50);
    unint64_t v54 = *(void *)(v14 + v50 + 8);
    *(_OWORD *)(v14 + v50) = *(_OWORD *)&v15[v50];
    outlined consume of Data._Representation(v53, v54);
    *(void *)(v51 + 16) = *((void *)v52 + 2);
    uint64_t v55 = v16[9];
    uint64_t v56 = v14 + v55;
    uint64_t v57 = &v15[v55];
    uint64_t v58 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v58 - 8) + 40))(v56, v57, v58);
    *(_DWORD *)(v14 + v16[10]) = *(_DWORD *)&v15[v16[10]];
    *(_WORD *)(v14 + v16[11]) = *(_WORD *)&v15[v16[11]];
    *(_WORD *)(v14 + v16[12]) = *(_WORD *)&v15[v16[12]];
    uint64_t v59 = v16[13];
    uint64_t v60 = (uint64_t *)(v14 + v59);
    unint64_t v61 = (uint64_t *)&v15[v59];
    unint64_t v62 = *(void *)(v14 + v59 + 8);
    if (v62 >> 60 != 15)
    {
      unint64_t v63 = v61[1];
      if (v63 >> 60 != 15)
      {
        uint64_t v93 = *v60;
        *uint64_t v60 = *v61;
        v60[1] = v63;
        outlined consume of Data._Representation(v93, v62);
        goto LABEL_35;
      }
      outlined destroy of ByteBuffer((uint64_t)v60);
    }
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
LABEL_35:
    v60[2] = v61[2];
    uint64_t v94 = v16[14];
    long long v95 = (void *)(v14 + v94);
    uint64_t v96 = &v15[v94];
    uint64_t v97 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v98 = *(void *)(v97 - 8);
    uint64_t v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
    int v100 = v99(v95, 1, v97);
    int v101 = v99(v96, 1, v97);
    if (v100)
    {
      if (!v101)
      {
        (*(void (**)(void *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
        goto LABEL_25;
      }
    }
    else
    {
      if (!v101)
      {
        (*(void (**)(void *, char *, uint64_t))(v98 + 40))(v95, v96, v97);
        goto LABEL_25;
      }
      (*(void (**)(void *, uint64_t))(v98 + 8))(v95, v97);
    }
    size_t v41 = *(void *)(*(void *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8) + 64);
    uint64_t v42 = v95;
    uint64_t v43 = v96;
LABEL_18:
    memcpy(v42, v43, v41);
    goto LABEL_25;
  }
  if (v20)
  {
LABEL_17:
    size_t v41 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                - 8)
                    + 64);
    uint64_t v42 = (void *)v14;
    uint64_t v43 = v15;
    goto LABEL_18;
  }
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v14, v15, v21);
  *(_DWORD *)(v14 + v16[5]) = *(_DWORD *)&v15[v16[5]];
  *(_DWORD *)(v14 + v16[6]) = *(_DWORD *)&v15[v16[6]];
  uint64_t v22 = v16[7];
  uint64_t v23 = v14 + v22;
  uint64_t v24 = &v15[v22];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(void *)(v23 + 16) = *((void *)v24 + 2);
  uint64_t v25 = v16[8];
  uint64_t v26 = v14 + v25;
  unint64_t v27 = &v15[v25];
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(void *)(v26 + 16) = *((void *)v27 + 2);
  uint64_t v28 = v16[9];
  uint64_t v29 = v14 + v28;
  uint64_t v30 = &v15[v28];
  uint64_t v31 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  *(_DWORD *)(v14 + v16[10]) = *(_DWORD *)&v15[v16[10]];
  *(_WORD *)(v14 + v16[11]) = *(_WORD *)&v15[v16[11]];
  *(_WORD *)(v14 + v16[12]) = *(_WORD *)&v15[v16[12]];
  uint64_t v32 = v16[13];
  uint64_t v33 = v14 + v32;
  uint64_t v34 = &v15[v32];
  *(void *)(v33 + 16) = *((void *)v34 + 2);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  uint64_t v35 = v16[14];
  uint64_t v36 = (void *)(v14 + v35);
  uint64_t v37 = &v15[v35];
  uint64_t v38 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
LABEL_25:
  if (a1 != a2)
  {
    uint64_t v64 = *(int *)(a3 + 24);
    uint64_t v65 = (char *)(a1 + v64);
    uint64_t v66 = (char *)(a2 + v64);
    outlined destroy of HandshakeStateMachine?(a1 + v64, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v68 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v65, v66, v68);
        uint64_t v69 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v70 = v69[9];
        uint64_t v71 = &v65[v70];
        uint64_t v72 = &v66[v70];
        uint64_t v73 = type metadata accessor for SymmetricKey();
        uint64_t v74 = *(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32);
        v74(v71, v72, v73);
        v74(&v65[v69[10]], &v66[v69[10]], v73);
        v74(&v65[v69[11]], &v66[v69[11]], v73);
        v74(&v65[v69[12]], &v66[v69[12]], v73);
        goto LABEL_32;
      case 1u:
        uint64_t v75 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v65, v66, v75);
        uint64_t v76 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v77 = v76[9];
        unint64_t v78 = &v65[v77];
        long long v79 = &v66[v77];
        uint64_t v80 = type metadata accessor for SymmetricKey();
        uint64_t v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32);
        v81(v78, v79, v80);
        v81(&v65[v76[10]], &v66[v76[10]], v80);
        v81(&v65[v76[11]], &v66[v76[11]], v80);
        goto LABEL_32;
      case 2u:
        uint64_t v82 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(v65, v66, v82);
        uint64_t v83 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v84 = v83[9];
        uint64_t v85 = &v65[v84];
        uint64_t v86 = &v66[v84];
        uint64_t v87 = type metadata accessor for SymmetricKey();
        uint64_t v88 = *(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32);
        v88(v85, v86, v87);
        v88(&v65[v83[10]], &v66[v83[10]], v87);
        v88(&v65[v83[11]], &v66[v83[11]], v87);
        v88(&v65[v83[12]], &v66[v83[12]], v87);
        v88(&v65[v83[13]], &v66[v83[13]], v87);
        v88(&v65[v83[14]], &v66[v83[14]], v87);
        goto LABEL_32;
      case 3u:
        uint64_t v89 = type metadata accessor for SymmetricKey();
        uint64_t v90 = *(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32);
        v90(v65, v66, v89);
        uint64_t v91 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v90(&v65[v91[9]], &v66[v91[9]], v89);
        v90(&v65[v91[10]], &v66[v91[10]], v89);
        v90(&v65[v91[11]], &v66[v91[11]], v89);
LABEL_32:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B574F928);
}

uint64_t sub_1B574F928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B574FA70);
}

uint64_t sub_1B574FA70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for HandshakeState.IdleState()
{
  type metadata accessor for SessionTicket?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionKeyManager<SHA384>.State();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for SessionTicket?()
{
  if (!lazy cache variable for type metadata for SessionTicket?)
  {
    type metadata accessor for SessionTicket();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SessionTicket?);
    }
  }
}

void type metadata accessor for SessionKeyManager<SHA384>.State()
{
  if (!lazy cache variable for type metadata for SessionKeyManager<SHA384>.State)
  {
    type metadata accessor for SHA384();
    lazy protocol witness table accessor for type SharedSecret and conformance SharedSecret(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x1E4F25180]);
    unint64_t v0 = type metadata accessor for SessionKeyManager.State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SessionKeyManager<SHA384>.State);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ClientHelloState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    unint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      uint64_t v10 = a2[3];
      outlined copy of Data._Representation(v10, v8);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v8;
    }
    *(void *)(a1 + 40) = a2[5];
    unint64_t v11 = a2[7];
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      uint64_t v12 = a2[6];
      outlined copy of Data._Representation(v12, a2[7]);
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = v11;
    }
    *(void *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    long long v13 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v13;
    uint64_t v14 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v14;
    *(void *)(a1 + 128) = a2[16];
    long long v15 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 160) = v15;
    uint64_t v16 = v15;
    uint64_t v17 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(a1 + 136, a2 + 17, v16);
    uint64_t v18 = *(int *)(a3 + 36);
    int v19 = (char *)(a1 + v18);
    int v20 = (char *)a2 + v18;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v22 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v19, v20, v22);
        uint64_t v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v24 = v23[9];
        uint64_t v76 = &v19[v24];
        uint64_t v25 = &v20[v24];
        uint64_t v26 = type metadata accessor for SymmetricKey();
        unint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        v27(v76, v25, v26);
        v27(&v19[v23[10]], &v20[v23[10]], v26);
        v27(&v19[v23[11]], &v20[v23[11]], v26);
        v27(&v19[v23[12]], &v20[v23[12]], v26);
        goto LABEL_15;
      case 1u:
        uint64_t v28 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v19, v20, v28);
        uint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v30 = v29[9];
        uint64_t v77 = &v19[v30];
        uint64_t v31 = &v20[v30];
        uint64_t v32 = type metadata accessor for SymmetricKey();
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
        v33(v77, v31, v32);
        v33(&v19[v29[10]], &v20[v29[10]], v32);
        v33(&v19[v29[11]], &v20[v29[11]], v32);
        goto LABEL_15;
      case 2u:
        uint64_t v34 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v19, v20, v34);
        uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v36 = v35[9];
        unint64_t v78 = &v19[v36];
        uint64_t v37 = &v20[v36];
        uint64_t v38 = type metadata accessor for SymmetricKey();
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
        v39(v78, v37, v38);
        v39(&v19[v35[10]], &v20[v35[10]], v38);
        v39(&v19[v35[11]], &v20[v35[11]], v38);
        v39(&v19[v35[12]], &v20[v35[12]], v38);
        v39(&v19[v35[13]], &v20[v35[13]], v38);
        v39(&v19[v35[14]], &v20[v35[14]], v38);
        goto LABEL_15;
      case 3u:
        uint64_t v40 = type metadata accessor for SymmetricKey();
        size_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
        v41(v19, v20, v40);
        uint64_t v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v41(&v19[v42[9]], &v20[v42[9]], v40);
        v41(&v19[v42[10]], &v20[v42[10]], v40);
        v41(&v19[v42[11]], &v20[v42[11]], v40);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
        break;
    }
    uint64_t v43 = *(int *)(a3 + 40);
    uint64_t v44 = (char *)(a1 + v43);
    uint64_t v45 = (char *)a2 + v43;
    uint64_t v46 = (int *)type metadata accessor for SessionTicket();
    uint64_t v47 = *((void *)v46 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v47 + 48))(v45, 1, v46))
    {
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      uint64_t v49 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v44, v45, v49);
      *(_DWORD *)&v44[v46[5]] = *(_DWORD *)&v45[v46[5]];
      *(_DWORD *)&v44[v46[6]] = *(_DWORD *)&v45[v46[6]];
      uint64_t v50 = v46[7];
      uint64_t v51 = (uint64_t *)&v44[v50];
      uint64_t v52 = &v45[v50];
      uint64_t v53 = *(void *)&v45[v50];
      unint64_t v54 = *(void *)&v45[v50 + 8];
      outlined copy of Data._Representation(v53, v54);
      *uint64_t v51 = v53;
      v51[1] = v54;
      v51[2] = *((void *)v52 + 2);
      uint64_t v55 = v46[8];
      uint64_t v56 = (uint64_t *)&v44[v55];
      uint64_t v57 = &v45[v55];
      uint64_t v58 = *(void *)&v45[v55];
      unint64_t v59 = *(void *)&v45[v55 + 8];
      outlined copy of Data._Representation(v58, v59);
      *uint64_t v56 = v58;
      v56[1] = v59;
      v56[2] = *((void *)v57 + 2);
      uint64_t v60 = v46[9];
      unint64_t v61 = &v44[v60];
      unint64_t v62 = &v45[v60];
      uint64_t v63 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
      *(_DWORD *)&v44[v46[10]] = *(_DWORD *)&v45[v46[10]];
      *(_WORD *)&v44[v46[11]] = *(_WORD *)&v45[v46[11]];
      *(_WORD *)&v44[v46[12]] = *(_WORD *)&v45[v46[12]];
      uint64_t v64 = v46[13];
      uint64_t v65 = &v44[v64];
      uint64_t v66 = (uint64_t *)&v45[v64];
      unint64_t v67 = *(void *)&v45[v64 + 8];
      if (v67 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
      }
      else
      {
        uint64_t v68 = *v66;
        outlined copy of Data._Representation(*v66, v67);
        *(void *)uint64_t v65 = v68;
        *((void *)v65 + 1) = v67;
      }
      *((void *)v65 + 2) = v66[2];
      uint64_t v69 = v46[14];
      uint64_t v70 = &v44[v69];
      uint64_t v71 = &v45[v69];
      uint64_t v72 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v73 = *(void *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
      {
        uint64_t v74 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
      }
      (*(void (**)(char *, void, uint64_t, int *))(v47 + 56))(v44, 0, 1, v46);
    }
  }
  return a1;
}

uint64_t destroy for HandshakeState.ClientHelloState(uint64_t *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = a1[4];
  if (v4 >> 60 != 15) {
    outlined consume of Data._Representation(a1[3], v4);
  }
  unint64_t v5 = a1[7];
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(a1[6], v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 17));
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      unint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v9 = &v6[v8[9]];
      uint64_t v10 = type metadata accessor for SymmetricKey();
      unint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v9, v10);
      v11(&v6[v8[10]], v10);
      v11(&v6[v8[11]], v10);
      uint64_t v12 = v8[12];
      goto LABEL_9;
    case 1u:
      uint64_t v13 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v6, v13);
      uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      long long v15 = &v6[v14[9]];
      uint64_t v10 = type metadata accessor for SymmetricKey();
      unint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v15, v10);
      v11(&v6[v14[10]], v10);
      uint64_t v12 = v14[11];
      goto LABEL_9;
    case 2u:
      uint64_t v16 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v6, v16);
      uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v18 = &v6[v17[9]];
      uint64_t v10 = type metadata accessor for SymmetricKey();
      unint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v18, v10);
      v11(&v6[v17[10]], v10);
      v11(&v6[v17[11]], v10);
      v11(&v6[v17[12]], v10);
      v11(&v6[v17[13]], v10);
      uint64_t v12 = v17[14];
LABEL_9:
      v11(&v6[v12], v10);
      break;
    case 3u:
      uint64_t v19 = type metadata accessor for SymmetricKey();
      int v20 = *(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8);
      v20(v6, v19);
      uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v20(&v6[v21[9]], v19);
      v20(&v6[v21[10]], v19);
      v20(&v6[v21[11]], v19);
      break;
    default:
      break;
  }
  uint64_t v22 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v23 = (int *)type metadata accessor for SessionTicket();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, int *))(*((void *)v23 - 1) + 48))(v22, 1, v23);
  if (!result)
  {
    uint64_t v25 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v22, v25);
    outlined consume of Data._Representation(*(void *)&v22[v23[7]], *(void *)&v22[v23[7] + 8]);
    outlined consume of Data._Representation(*(void *)&v22[v23[8]], *(void *)&v22[v23[8] + 8]);
    uint64_t v26 = &v22[v23[9]];
    uint64_t v27 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
    uint64_t v28 = (uint64_t *)&v22[v23[13]];
    unint64_t v29 = v28[1];
    if (v29 >> 60 != 15) {
      outlined consume of Data._Representation(*v28, v29);
    }
    uint64_t v30 = &v22[v23[14]];
    uint64_t v31 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v33 = *(void *)(v31 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v31);
    if (!result)
    {
      uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
      return v32(v30, v31);
    }
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v7;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(void *)(a2 + 56));
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v13;
  uint64_t v14 = v13;
  long long v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(a1 + 136, a2 + 136, v14);
  uint64_t v16 = *(int *)(a3 + 36);
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v20 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v17, v18, v20);
      uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v22 = v21[9];
      uint64_t v23 = &v17[v22];
      uint64_t v24 = &v18[v22];
      uint64_t v80 = a3;
      uint64_t v25 = type metadata accessor for SymmetricKey();
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
      v26(v23, v24, v25);
      v26(&v17[v21[10]], &v18[v21[10]], v25);
      v26(&v17[v21[11]], &v18[v21[11]], v25);
      uint64_t v27 = v25;
      a3 = v80;
      v26(&v17[v21[12]], &v18[v21[12]], v27);
      goto LABEL_13;
    case 1u:
      uint64_t v28 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v17, v18, v28);
      unint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v30 = v29[9];
      uint64_t v31 = &v17[v30];
      uint64_t v32 = &v18[v30];
      uint64_t v81 = a3;
      uint64_t v33 = type metadata accessor for SymmetricKey();
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
      v34(v31, v32, v33);
      v34(&v17[v29[10]], &v18[v29[10]], v33);
      uint64_t v35 = v33;
      a3 = v81;
      v34(&v17[v29[11]], &v18[v29[11]], v35);
      goto LABEL_13;
    case 2u:
      uint64_t v36 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v17, v18, v36);
      uint64_t v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v38 = v37[9];
      uint64_t v39 = &v17[v38];
      uint64_t v40 = &v18[v38];
      uint64_t v82 = a3;
      uint64_t v41 = type metadata accessor for SymmetricKey();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
      v42(v39, v40, v41);
      v42(&v17[v37[10]], &v18[v37[10]], v41);
      v42(&v17[v37[11]], &v18[v37[11]], v41);
      v42(&v17[v37[12]], &v18[v37[12]], v41);
      v42(&v17[v37[13]], &v18[v37[13]], v41);
      uint64_t v43 = v41;
      a3 = v82;
      v42(&v17[v37[14]], &v18[v37[14]], v43);
      goto LABEL_13;
    case 3u:
      uint64_t v44 = type metadata accessor for SymmetricKey();
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16);
      v45(v17, v18, v44);
      uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v45(&v17[v46[9]], &v18[v46[9]], v44);
      v45(&v17[v46[10]], &v18[v46[10]], v44);
      v45(&v17[v46[11]], &v18[v46[11]], v44);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
      break;
  }
  uint64_t v47 = *(int *)(a3 + 40);
  uint64_t v48 = (char *)(a1 + v47);
  uint64_t v49 = (char *)(a2 + v47);
  uint64_t v50 = (int *)type metadata accessor for SessionTicket();
  uint64_t v51 = *((void *)v50 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v51 + 48))(v49, 1, v50))
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    uint64_t v53 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v48, v49, v53);
    *(_DWORD *)&v48[v50[5]] = *(_DWORD *)&v49[v50[5]];
    *(_DWORD *)&v48[v50[6]] = *(_DWORD *)&v49[v50[6]];
    uint64_t v54 = v50[7];
    uint64_t v55 = (uint64_t *)&v48[v54];
    uint64_t v56 = &v49[v54];
    uint64_t v57 = *(void *)&v49[v54];
    unint64_t v58 = *(void *)&v49[v54 + 8];
    outlined copy of Data._Representation(v57, v58);
    *uint64_t v55 = v57;
    v55[1] = v58;
    v55[2] = *((void *)v56 + 2);
    uint64_t v59 = v50[8];
    uint64_t v60 = (uint64_t *)&v48[v59];
    unint64_t v61 = &v49[v59];
    uint64_t v62 = *(void *)&v49[v59];
    unint64_t v63 = *(void *)&v49[v59 + 8];
    outlined copy of Data._Representation(v62, v63);
    *uint64_t v60 = v62;
    v60[1] = v63;
    v60[2] = *((void *)v61 + 2);
    uint64_t v64 = v50[9];
    uint64_t v65 = &v48[v64];
    uint64_t v66 = &v49[v64];
    uint64_t v67 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
    *(_DWORD *)&v48[v50[10]] = *(_DWORD *)&v49[v50[10]];
    *(_WORD *)&v48[v50[11]] = *(_WORD *)&v49[v50[11]];
    *(_WORD *)&v48[v50[12]] = *(_WORD *)&v49[v50[12]];
    uint64_t v68 = v50[13];
    uint64_t v69 = &v48[v68];
    uint64_t v70 = (uint64_t *)&v49[v68];
    unint64_t v71 = *(void *)&v49[v68 + 8];
    if (v71 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
    }
    else
    {
      uint64_t v72 = *v70;
      outlined copy of Data._Representation(*v70, v71);
      *(void *)uint64_t v69 = v72;
      *((void *)v69 + 1) = v71;
    }
    *((void *)v69 + 2) = v70[2];
    uint64_t v73 = v50[14];
    uint64_t v74 = &v48[v73];
    uint64_t v75 = &v49[v73];
    uint64_t v76 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v77 = *(void *)(v76 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
    {
      uint64_t v78 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v75, v76);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v51 + 56))(v48, 0, 1, v50);
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 24);
  unint64_t v7 = (long long *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      long long v9 = *v7;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *uint64_t v6 = v9;
      goto LABEL_9;
    }
    uint64_t v11 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      uint64_t v10 = *(void *)(a2 + 40);
      *uint64_t v6 = *v7;
      *(void *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    uint64_t v12 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(void *)(a2 + 32));
    uint64_t v13 = *(void *)(a1 + 24);
    unint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
LABEL_9:
  long long v15 = (long long *)(a1 + 48);
  uint64_t v16 = (long long *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      long long v18 = *v16;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *long long v15 = v18;
      goto LABEL_17;
    }
    uint64_t v20 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(void *)(a2 + 56));
    *(void *)(a1 + 48) = v20;
    *(void *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      uint64_t v19 = *(void *)(a2 + 64);
      *long long v15 = *v16;
      *(void *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(void *)(a2 + 56));
    uint64_t v22 = *(void *)(a1 + 48);
    unint64_t v23 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_17:
  __int16 v24 = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 136), (uint64_t *)(a2 + 136));
  if (a1 != a2)
  {
    uint64_t v25 = *(int *)(a3 + 36);
    uint64_t v26 = (char *)(a1 + v25);
    uint64_t v27 = (char *)(a2 + v25);
    outlined destroy of HandshakeStateMachine?(a1 + v25, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v29 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v26, v27, v29);
        uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v31 = v30[9];
        uint64_t v32 = &v26[v31];
        uint64_t v132 = a3;
        uint64_t v33 = &v27[v31];
        uint64_t v34 = type metadata accessor for SymmetricKey();
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
        uint64_t v36 = v33;
        a3 = v132;
        v35(v32, v36, v34);
        v35(&v26[v30[10]], &v27[v30[10]], v34);
        v35(&v26[v30[11]], &v27[v30[11]], v34);
        v35(&v26[v30[12]], &v27[v30[12]], v34);
        goto LABEL_24;
      case 1u:
        uint64_t v37 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v26, v27, v37);
        uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v39 = v38[9];
        uint64_t v40 = &v26[v39];
        uint64_t v133 = a3;
        uint64_t v41 = &v27[v39];
        uint64_t v42 = type metadata accessor for SymmetricKey();
        uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
        uint64_t v44 = v41;
        a3 = v133;
        v43(v40, v44, v42);
        v43(&v26[v38[10]], &v27[v38[10]], v42);
        v43(&v26[v38[11]], &v27[v38[11]], v42);
        goto LABEL_24;
      case 2u:
        uint64_t v45 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v26, v27, v45);
        uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v47 = v46[9];
        uint64_t v48 = &v26[v47];
        uint64_t v134 = a3;
        uint64_t v49 = &v27[v47];
        uint64_t v50 = type metadata accessor for SymmetricKey();
        uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16);
        uint64_t v52 = v49;
        a3 = v134;
        v51(v48, v52, v50);
        v51(&v26[v46[10]], &v27[v46[10]], v50);
        v51(&v26[v46[11]], &v27[v46[11]], v50);
        v51(&v26[v46[12]], &v27[v46[12]], v50);
        v51(&v26[v46[13]], &v27[v46[13]], v50);
        v51(&v26[v46[14]], &v27[v46[14]], v50);
        goto LABEL_24;
      case 3u:
        uint64_t v53 = type metadata accessor for SymmetricKey();
        uint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
        v54(v26, v27, v53);
        uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v54(&v26[v55[9]], &v27[v55[9]], v53);
        v54(&v26[v55[10]], &v27[v55[10]], v53);
        v54(&v26[v55[11]], &v27[v55[11]], v53);
LABEL_24:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
        break;
    }
  }
  uint64_t v56 = *(int *)(a3 + 40);
  uint64_t v57 = a1 + v56;
  unint64_t v58 = (char *)(a2 + v56);
  uint64_t v59 = (int *)type metadata accessor for SessionTicket();
  uint64_t v60 = *((void *)v59 - 1);
  unint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v60 + 48);
  int v62 = v61(v57, 1, v59);
  int v63 = v61((uint64_t)v58, 1, v59);
  if (!v62)
  {
    if (v63)
    {
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v57, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      goto LABEL_31;
    }
    uint64_t v87 = type metadata accessor for Date();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v87 - 8) + 24))(v57, v58, v87);
    *(_DWORD *)(v57 + v59[5]) = *(_DWORD *)&v58[v59[5]];
    *(_DWORD *)(v57 + v59[6]) = *(_DWORD *)&v58[v59[6]];
    uint64_t v88 = v59[7];
    uint64_t v89 = (uint64_t *)(v57 + v88);
    uint64_t v90 = &v58[v88];
    uint64_t v91 = *(void *)&v58[v88];
    unint64_t v92 = *(void *)&v58[v88 + 8];
    outlined copy of Data._Representation(v91, v92);
    uint64_t v93 = *v89;
    unint64_t v94 = v89[1];
    *uint64_t v89 = v91;
    v89[1] = v92;
    outlined consume of Data._Representation(v93, v94);
    v89[2] = *((void *)v90 + 2);
    uint64_t v95 = v59[8];
    uint64_t v96 = (uint64_t *)(v57 + v95);
    uint64_t v97 = &v58[v95];
    uint64_t v98 = *(void *)&v58[v95];
    unint64_t v99 = *(void *)&v58[v95 + 8];
    outlined copy of Data._Representation(v98, v99);
    uint64_t v100 = *v96;
    unint64_t v101 = v96[1];
    *uint64_t v96 = v98;
    v96[1] = v99;
    outlined consume of Data._Representation(v100, v101);
    v96[2] = *((void *)v97 + 2);
    uint64_t v102 = v59[9];
    uint64_t v103 = v57 + v102;
    long long v104 = &v58[v102];
    uint64_t v105 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v105 - 8) + 24))(v103, v104, v105);
    *(_DWORD *)(v57 + v59[10]) = *(_DWORD *)&v58[v59[10]];
    *(_WORD *)(v57 + v59[11]) = *(_WORD *)&v58[v59[11]];
    *(_WORD *)(v57 + v59[12]) = *(_WORD *)&v58[v59[12]];
    uint64_t v106 = v59[13];
    uint64_t v107 = v57 + v106;
    unint64_t v108 = (uint64_t *)&v58[v106];
    unint64_t v109 = *(void *)&v58[v106 + 8];
    if (*(void *)(v57 + v106 + 8) >> 60 == 15)
    {
      if (v109 >> 60 == 15)
      {
        long long v110 = *(_OWORD *)v108;
        *(void *)(v107 + 16) = v108[2];
        *(_OWORD *)uint64_t v107 = v110;
LABEL_48:
        uint64_t v124 = v59[14];
        uint64_t v125 = (void *)(v57 + v124);
        __int16 v126 = &v58[v124];
        uint64_t v127 = type metadata accessor for P256.Signing.PublicKey();
        uint64_t v128 = *(void *)(v127 - 8);
        uint64_t v129 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v128 + 48);
        int v130 = v129(v125, 1, v127);
        int v131 = v129(v126, 1, v127);
        if (v130)
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v128 + 16))(v125, v126, v127);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
            return a1;
          }
        }
        else
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v128 + 24))(v125, v126, v127);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v128 + 8))(v125, v127);
        }
        size_t v84 = *(void *)(*(void *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8) + 64);
        uint64_t v85 = v125;
        uint64_t v86 = v126;
        goto LABEL_32;
      }
      uint64_t v120 = *v108;
      outlined copy of Data._Representation(*v108, v109);
      *(void *)uint64_t v107 = v120;
      *(void *)(v107 + 8) = v109;
    }
    else
    {
      if (v109 >> 60 == 15)
      {
        outlined destroy of ByteBuffer(v107);
        uint64_t v119 = v108[2];
        *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
LABEL_47:
        *(void *)(v107 + 16) = v119;
        goto LABEL_48;
      }
      uint64_t v121 = *v108;
      outlined copy of Data._Representation(*v108, v109);
      uint64_t v122 = *(void *)v107;
      unint64_t v123 = *(void *)(v107 + 8);
      *(void *)uint64_t v107 = v121;
      *(void *)(v107 + 8) = v109;
      outlined consume of Data._Representation(v122, v123);
    }
    uint64_t v119 = v108[2];
    goto LABEL_47;
  }
  if (v63)
  {
LABEL_31:
    size_t v84 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                - 8)
                    + 64);
    uint64_t v85 = (void *)v57;
    uint64_t v86 = v58;
LABEL_32:
    memcpy(v85, v86, v84);
    return a1;
  }
  uint64_t v64 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v57, v58, v64);
  *(_DWORD *)(v57 + v59[5]) = *(_DWORD *)&v58[v59[5]];
  *(_DWORD *)(v57 + v59[6]) = *(_DWORD *)&v58[v59[6]];
  uint64_t v65 = v59[7];
  uint64_t v66 = (uint64_t *)(v57 + v65);
  uint64_t v67 = &v58[v65];
  uint64_t v68 = *(void *)&v58[v65];
  unint64_t v69 = *(void *)&v58[v65 + 8];
  outlined copy of Data._Representation(v68, v69);
  *uint64_t v66 = v68;
  v66[1] = v69;
  long long v66[2] = *((void *)v67 + 2);
  uint64_t v70 = v59[8];
  unint64_t v71 = (uint64_t *)(v57 + v70);
  uint64_t v72 = &v58[v70];
  uint64_t v73 = *(void *)&v58[v70];
  unint64_t v74 = *(void *)&v58[v70 + 8];
  outlined copy of Data._Representation(v73, v74);
  *unint64_t v71 = v73;
  v71[1] = v74;
  v71[2] = *((void *)v72 + 2);
  uint64_t v75 = v59[9];
  uint64_t v76 = v57 + v75;
  uint64_t v77 = &v58[v75];
  uint64_t v78 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v76, v77, v78);
  *(_DWORD *)(v57 + v59[10]) = *(_DWORD *)&v58[v59[10]];
  *(_WORD *)(v57 + v59[11]) = *(_WORD *)&v58[v59[11]];
  *(_WORD *)(v57 + v59[12]) = *(_WORD *)&v58[v59[12]];
  uint64_t v79 = v59[13];
  uint64_t v80 = v57 + v79;
  uint64_t v81 = (uint64_t *)&v58[v79];
  unint64_t v82 = *(void *)&v58[v79 + 8];
  if (v82 >> 60 == 15)
  {
    long long v83 = *(_OWORD *)v81;
    *(void *)(v80 + 16) = v81[2];
    *(_OWORD *)uint64_t v80 = v83;
  }
  else
  {
    uint64_t v111 = *v81;
    outlined copy of Data._Representation(*v81, v82);
    *(void *)uint64_t v80 = v111;
    *(void *)(v80 + 8) = v82;
    *(void *)(v80 + 16) = v81[2];
  }
  uint64_t v112 = v59[14];
  uint64_t v113 = (void *)(v57 + v112);
  uint64_t v114 = &v58[v112];
  uint64_t v115 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v116 = *(void *)(v115 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
  {
    uint64_t v117 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v116 + 16))(v113, v114, v115);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v60 + 56))(v57, 0, 1, v59);
  return a1;
}

uint64_t initializeWithTake for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v13 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      unint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v15 = v14[9];
      uint64_t v16 = &v10[v15];
      uint64_t v67 = v3;
      unint64_t v17 = &v11[v15];
      uint64_t v18 = type metadata accessor for SymmetricKey();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
      uint64_t v20 = v17;
      uint64_t v3 = v67;
      v19(v16, v20, v18);
      v19(&v10[v14[10]], &v11[v14[10]], v18);
      v19(&v10[v14[11]], &v11[v14[11]], v18);
      v19(&v10[v14[12]], &v11[v14[12]], v18);
      goto LABEL_7;
    case 1u:
      uint64_t v21 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v10, v11, v21);
      uint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v23 = v22[9];
      __int16 v24 = &v10[v23];
      uint64_t v68 = v3;
      uint64_t v25 = &v11[v23];
      uint64_t v26 = type metadata accessor for SymmetricKey();
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
      uint64_t v28 = v25;
      uint64_t v3 = v68;
      v27(v24, v28, v26);
      v27(&v10[v22[10]], &v11[v22[10]], v26);
      v27(&v10[v22[11]], &v11[v22[11]], v26);
      goto LABEL_7;
    case 2u:
      uint64_t v29 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v10, v11, v29);
      uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v31 = v30[9];
      uint64_t v32 = &v10[v31];
      uint64_t v69 = v3;
      uint64_t v33 = &v11[v31];
      uint64_t v34 = type metadata accessor for SymmetricKey();
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32);
      uint64_t v36 = v33;
      uint64_t v3 = v69;
      v35(v32, v36, v34);
      v35(&v10[v30[10]], &v11[v30[10]], v34);
      v35(&v10[v30[11]], &v11[v30[11]], v34);
      v35(&v10[v30[12]], &v11[v30[12]], v34);
      v35(&v10[v30[13]], &v11[v30[13]], v34);
      v35(&v10[v30[14]], &v11[v30[14]], v34);
      goto LABEL_7;
    case 3u:
      uint64_t v37 = type metadata accessor for SymmetricKey();
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
      v38(v10, v11, v37);
      uint64_t v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v38(&v10[v39[9]], &v11[v39[9]], v37);
      v38(&v10[v39[10]], &v11[v39[10]], v37);
      v38(&v10[v39[11]], &v11[v39[11]], v37);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
      break;
  }
  uint64_t v40 = *(int *)(v3 + 40);
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  uint64_t v43 = (int *)type metadata accessor for SessionTicket();
  uint64_t v44 = *((void *)v43 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
  {
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    uint64_t v46 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v41, v42, v46);
    *(_DWORD *)&v41[v43[5]] = *(_DWORD *)&v42[v43[5]];
    *(_DWORD *)&v41[v43[6]] = *(_DWORD *)&v42[v43[6]];
    uint64_t v47 = v43[7];
    uint64_t v48 = &v41[v47];
    uint64_t v49 = &v42[v47];
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    *((void *)v48 + 2) = *((void *)v49 + 2);
    uint64_t v50 = v43[8];
    uint64_t v51 = &v41[v50];
    uint64_t v52 = &v42[v50];
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    *((void *)v51 + 2) = *((void *)v52 + 2);
    uint64_t v53 = v43[9];
    uint64_t v54 = &v41[v53];
    uint64_t v55 = &v42[v53];
    uint64_t v56 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32))(v54, v55, v56);
    *(_DWORD *)&v41[v43[10]] = *(_DWORD *)&v42[v43[10]];
    *(_WORD *)&v41[v43[11]] = *(_WORD *)&v42[v43[11]];
    *(_WORD *)&v41[v43[12]] = *(_WORD *)&v42[v43[12]];
    uint64_t v57 = v43[13];
    unint64_t v58 = &v41[v57];
    uint64_t v59 = &v42[v57];
    *((void *)v58 + 2) = *((void *)v59 + 2);
    *(_OWORD *)unint64_t v58 = *(_OWORD *)v59;
    uint64_t v60 = v43[14];
    unint64_t v61 = &v41[v60];
    int v62 = &v42[v60];
    uint64_t v63 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v64 = *(void *)(v63 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      uint64_t v65 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  }
  return a1;
}

uint64_t assignWithTake for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
LABEL_6:
  unint64_t v10 = *(void *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    goto LABEL_11;
  }
  unint64_t v11 = *(void *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  long long v13 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v13;
  uint64_t v14 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  if (a1 != a2)
  {
    uint64_t v15 = *(int *)(a3 + 36);
    uint64_t v16 = (char *)(a1 + v15);
    unint64_t v17 = (char *)(a2 + v15);
    outlined destroy of HandshakeStateMachine?(a1 + v15, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v19 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
        uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v21 = v20[9];
        uint64_t v22 = &v16[v21];
        uint64_t v107 = a3;
        uint64_t v23 = &v17[v21];
        uint64_t v24 = type metadata accessor for SymmetricKey();
        uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32);
        uint64_t v26 = v23;
        a3 = v107;
        v25(v22, v26, v24);
        v25(&v16[v20[10]], &v17[v20[10]], v24);
        v25(&v16[v20[11]], &v17[v20[11]], v24);
        v25(&v16[v20[12]], &v17[v20[12]], v24);
        goto LABEL_18;
      case 1u:
        uint64_t v27 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v16, v17, v27);
        uint64_t v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v29 = v28[9];
        uint64_t v30 = &v16[v29];
        uint64_t v108 = a3;
        uint64_t v31 = &v17[v29];
        uint64_t v32 = type metadata accessor for SymmetricKey();
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
        uint64_t v34 = v31;
        a3 = v108;
        v33(v30, v34, v32);
        v33(&v16[v28[10]], &v17[v28[10]], v32);
        v33(&v16[v28[11]], &v17[v28[11]], v32);
        goto LABEL_18;
      case 2u:
        uint64_t v35 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v16, v17, v35);
        uint64_t v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v37 = v36[9];
        uint64_t v38 = &v16[v37];
        uint64_t v109 = a3;
        uint64_t v39 = &v17[v37];
        uint64_t v40 = type metadata accessor for SymmetricKey();
        uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32);
        uint64_t v42 = v39;
        a3 = v109;
        v41(v38, v42, v40);
        v41(&v16[v36[10]], &v17[v36[10]], v40);
        v41(&v16[v36[11]], &v17[v36[11]], v40);
        v41(&v16[v36[12]], &v17[v36[12]], v40);
        v41(&v16[v36[13]], &v17[v36[13]], v40);
        v41(&v16[v36[14]], &v17[v36[14]], v40);
        goto LABEL_18;
      case 3u:
        uint64_t v43 = type metadata accessor for SymmetricKey();
        uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
        v44(v16, v17, v43);
        uint64_t v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v44(&v16[v45[9]], &v17[v45[9]], v43);
        v44(&v16[v45[10]], &v17[v45[10]], v43);
        v44(&v16[v45[11]], &v17[v45[11]], v43);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
        break;
    }
  }
  uint64_t v46 = *(int *)(a3 + 40);
  uint64_t v47 = a1 + v46;
  uint64_t v48 = (char *)(a2 + v46);
  uint64_t v49 = (int *)type metadata accessor for SessionTicket();
  uint64_t v50 = *((void *)v49 - 1);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51((uint64_t)v48, 1, v49);
  if (!v52)
  {
    if (v53)
    {
      _s8SwiftTLS14HandshakeStateOWOhTm_1(v47, (uint64_t (*)(void))type metadata accessor for SessionTicket);
      goto LABEL_25;
    }
    uint64_t v77 = type metadata accessor for Date();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v77 - 8) + 40))(v47, v48, v77);
    *(_DWORD *)(v47 + v49[5]) = *(_DWORD *)&v48[v49[5]];
    *(_DWORD *)(v47 + v49[6]) = *(_DWORD *)&v48[v49[6]];
    uint64_t v78 = v49[7];
    uint64_t v79 = v47 + v78;
    uint64_t v80 = &v48[v78];
    uint64_t v81 = *(void *)(v47 + v78);
    unint64_t v82 = *(void *)(v47 + v78 + 8);
    *(_OWORD *)(v47 + v78) = *(_OWORD *)&v48[v78];
    outlined consume of Data._Representation(v81, v82);
    *(void *)(v79 + 16) = *((void *)v80 + 2);
    uint64_t v83 = v49[8];
    uint64_t v84 = v47 + v83;
    uint64_t v85 = &v48[v83];
    uint64_t v86 = *(void *)(v47 + v83);
    unint64_t v87 = *(void *)(v47 + v83 + 8);
    *(_OWORD *)(v47 + v83) = *(_OWORD *)&v48[v83];
    outlined consume of Data._Representation(v86, v87);
    *(void *)(v84 + 16) = *((void *)v85 + 2);
    uint64_t v88 = v49[9];
    uint64_t v89 = v47 + v88;
    uint64_t v90 = &v48[v88];
    uint64_t v91 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v91 - 8) + 40))(v89, v90, v91);
    *(_DWORD *)(v47 + v49[10]) = *(_DWORD *)&v48[v49[10]];
    *(_WORD *)(v47 + v49[11]) = *(_WORD *)&v48[v49[11]];
    *(_WORD *)(v47 + v49[12]) = *(_WORD *)&v48[v49[12]];
    uint64_t v92 = v49[13];
    uint64_t v93 = (uint64_t *)(v47 + v92);
    unint64_t v94 = (uint64_t *)&v48[v92];
    unint64_t v95 = *(void *)(v47 + v92 + 8);
    if (v95 >> 60 != 15)
    {
      unint64_t v96 = v94[1];
      if (v96 >> 60 != 15)
      {
        uint64_t v98 = *v93;
        *uint64_t v93 = *v94;
        v93[1] = v96;
        outlined consume of Data._Representation(v98, v95);
        goto LABEL_35;
      }
      outlined destroy of ByteBuffer((uint64_t)v93);
    }
    *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
LABEL_35:
    v93[2] = v94[2];
    uint64_t v99 = v49[14];
    uint64_t v100 = (void *)(v47 + v99);
    unint64_t v101 = &v48[v99];
    uint64_t v102 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v103 = *(void *)(v102 - 8);
    long long v104 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v103 + 48);
    int v105 = v104(v100, 1, v102);
    int v106 = v104(v101, 1, v102);
    if (v105)
    {
      if (!v106)
      {
        (*(void (**)(void *, char *, uint64_t))(v103 + 32))(v100, v101, v102);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
        return a1;
      }
    }
    else
    {
      if (!v106)
      {
        (*(void (**)(void *, char *, uint64_t))(v103 + 40))(v100, v101, v102);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v103 + 8))(v100, v102);
    }
    size_t v74 = *(void *)(*(void *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8) + 64);
    uint64_t v75 = v100;
    uint64_t v76 = v101;
    goto LABEL_26;
  }
  if (v53)
  {
LABEL_25:
    size_t v74 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                - 8)
                    + 64);
    uint64_t v75 = (void *)v47;
    uint64_t v76 = v48;
LABEL_26:
    memcpy(v75, v76, v74);
    return a1;
  }
  uint64_t v54 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v47, v48, v54);
  *(_DWORD *)(v47 + v49[5]) = *(_DWORD *)&v48[v49[5]];
  *(_DWORD *)(v47 + v49[6]) = *(_DWORD *)&v48[v49[6]];
  uint64_t v55 = v49[7];
  uint64_t v56 = v47 + v55;
  uint64_t v57 = &v48[v55];
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *(void *)(v56 + 16) = *((void *)v57 + 2);
  uint64_t v58 = v49[8];
  uint64_t v59 = v47 + v58;
  uint64_t v60 = &v48[v58];
  *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  *(void *)(v59 + 16) = *((void *)v60 + 2);
  uint64_t v61 = v49[9];
  uint64_t v62 = v47 + v61;
  uint64_t v63 = &v48[v61];
  uint64_t v64 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v62, v63, v64);
  *(_DWORD *)(v47 + v49[10]) = *(_DWORD *)&v48[v49[10]];
  *(_WORD *)(v47 + v49[11]) = *(_WORD *)&v48[v49[11]];
  *(_WORD *)(v47 + v49[12]) = *(_WORD *)&v48[v49[12]];
  uint64_t v65 = v49[13];
  uint64_t v66 = v47 + v65;
  uint64_t v67 = &v48[v65];
  *(void *)(v66 + 16) = *((void *)v67 + 2);
  *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
  uint64_t v68 = v49[14];
  uint64_t v69 = (void *)(v47 + v68);
  uint64_t v70 = &v48[v68];
  uint64_t v71 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v72 = *(void *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    uint64_t v73 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v72 + 32))(v69, v70, v71);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B57535E0);
}

uint64_t sub_1B57535E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B5753728);
}

uint64_t sub_1B5753728(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for HandshakeState.ClientHelloState()
{
  type metadata accessor for SessionKeyManager<SHA384>.State();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionTicket?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ServerHelloState(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    unint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      uint64_t v10 = a2[3];
      outlined copy of Data._Representation(v10, v8);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v8;
    }
    *(void *)(a1 + 40) = a2[5];
    unint64_t v11 = a2[7];
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      uint64_t v12 = a2[6];
      outlined copy of Data._Representation(v12, a2[7]);
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = v11;
    }
    *(void *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    uint64_t v13 = v6[5];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    uint64_t v76 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      unint64_t v17 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(v14 + v17[5]) = *(_DWORD *)(v15 + v17[5]);
      *(_DWORD *)(v14 + v17[6]) = *(_DWORD *)(v15 + v17[6]);
      uint64_t v18 = v17[7];
      uint64_t v19 = (uint64_t *)(v14 + v18);
      uint64_t v20 = v15 + v18;
      uint64_t v21 = *(void *)(v15 + v18);
      unint64_t v22 = *(void *)(v15 + v18 + 8);
      outlined copy of Data._Representation(v21, v22);
      uint64_t *v19 = v21;
      v19[1] = v22;
      v19[2] = *(void *)(v20 + 16);
      uint64_t v23 = v17[8];
      uint64_t v24 = (uint64_t *)(v14 + v23);
      uint64_t v25 = v15 + v23;
      uint64_t v26 = *(void *)(v15 + v23);
      unint64_t v27 = *(void *)(v15 + v23 + 8);
      outlined copy of Data._Representation(v26, v27);
      uint64_t *v24 = v26;
      v24[1] = v27;
      v24[2] = *(void *)(v25 + 16);
      uint64_t v28 = v17[9];
      uint64_t v29 = v14 + v28;
      uint64_t v30 = v15 + v28;
      uint64_t v31 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
      *(_DWORD *)(v14 + v17[10]) = *(_DWORD *)(v15 + v17[10]);
      *(_WORD *)(v14 + v17[11]) = *(_WORD *)(v15 + v17[11]);
      *(_WORD *)(v14 + v17[12]) = *(_WORD *)(v15 + v17[12]);
      uint64_t v32 = v17[13];
      uint64_t v33 = v14 + v32;
      uint64_t v34 = (uint64_t *)(v15 + v32);
      unint64_t v35 = *(void *)(v15 + v32 + 8);
      if (v35 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      }
      else
      {
        uint64_t v36 = *v34;
        outlined copy of Data._Representation(*v34, v35);
        *(void *)uint64_t v33 = v36;
        *(void *)(v33 + 8) = v35;
      }
      *(void *)(v33 + 16) = v34[2];
      uint64_t v6 = v76;
      uint64_t v37 = v17[14];
      uint64_t v38 = (void *)(v14 + v37);
      uint64_t v39 = (const void *)(v15 + v37);
      uint64_t v40 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        uint64_t v42 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
      *(void *)(v14 + 8) = *(void *)(v15 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = v6[6];
    uint64_t v44 = (char *)(a1 + v43);
    uint64_t v45 = (char *)a2 + v43;
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v47 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v44, v45, v47);
        uint64_t v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v49 = v48[9];
        uint64_t v73 = &v44[v49];
        uint64_t v50 = &v45[v49];
        uint64_t v51 = type metadata accessor for SymmetricKey();
        int v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
        v52(v73, v50, v51);
        v52(&v44[v48[10]], &v45[v48[10]], v51);
        v52(&v44[v48[11]], &v45[v48[11]], v51);
        uint64_t v53 = v51;
        uint64_t v6 = v76;
        v52(&v44[v48[12]], &v45[v48[12]], v53);
        goto LABEL_23;
      case 1u:
        uint64_t v54 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v44, v45, v54);
        uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v56 = v55[9];
        size_t v74 = &v44[v56];
        uint64_t v57 = &v45[v56];
        uint64_t v58 = type metadata accessor for SymmetricKey();
        uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16);
        v59(v74, v57, v58);
        v59(&v44[v55[10]], &v45[v55[10]], v58);
        uint64_t v60 = v58;
        uint64_t v6 = v76;
        v59(&v44[v55[11]], &v45[v55[11]], v60);
        goto LABEL_23;
      case 2u:
        uint64_t v61 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v44, v45, v61);
        uint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v63 = v62[9];
        uint64_t v75 = &v44[v63];
        uint64_t v64 = &v45[v63];
        uint64_t v65 = type metadata accessor for SymmetricKey();
        uint64_t v66 = *(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16);
        v66(v75, v64, v65);
        v66(&v44[v62[10]], &v45[v62[10]], v65);
        v66(&v44[v62[11]], &v45[v62[11]], v65);
        v66(&v44[v62[12]], &v45[v62[12]], v65);
        v66(&v44[v62[13]], &v45[v62[13]], v65);
        uint64_t v67 = v65;
        uint64_t v6 = v76;
        v66(&v44[v62[14]], &v45[v62[14]], v67);
        goto LABEL_23;
      case 3u:
        uint64_t v68 = type metadata accessor for SymmetricKey();
        uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16);
        v69(v44, v45, v68);
        uint64_t v70 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v69(&v44[v70[9]], &v45[v70[9]], v68);
        v69(&v44[v70[10]], &v45[v70[10]], v68);
        v69(&v44[v70[11]], &v45[v70[11]], v68);
LABEL_23:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
        break;
    }
    uint64_t v71 = v6[8];
    *(_WORD *)(a1 + v6[7]) = *(_WORD *)((char *)a2 + v6[7]);
    *(_WORD *)(a1 + v71) = *(_WORD *)((char *)a2 + v71);
  }
  return a1;
}

uint64_t destroy for HandshakeState.ServerHelloState(uint64_t *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = a1[4];
  if (v4 >> 60 != 15) {
    outlined consume of Data._Representation(a1[3], v4);
  }
  unint64_t v5 = a1[7];
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(a1[6], v5);
  }
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 20);
  type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    unint64_t v8 = (int *)type metadata accessor for SessionTicket();
    outlined consume of Data._Representation(*(void *)&v6[v8[7]], *(void *)&v6[v8[7] + 8]);
    outlined consume of Data._Representation(*(void *)&v6[v8[8]], *(void *)&v6[v8[8] + 8]);
    uint64_t v9 = &v6[v8[9]];
    uint64_t v10 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    unint64_t v11 = (uint64_t *)&v6[v8[13]];
    unint64_t v12 = v11[1];
    if (v12 >> 60 != 15) {
      outlined consume of Data._Representation(*v11, v12);
    }
    uint64_t v13 = &v6[v8[14]];
    uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = (char *)a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v18 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
      uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v20 = &v16[v19[9]];
      uint64_t v21 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v21 - 8), v20, v21);
      v33(&v16[v19[10]], v21);
      v33(&v16[v19[11]], v21);
      uint64_t v22 = v19[12];
      goto LABEL_15;
    case 1:
      uint64_t v23 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
      uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v25 = &v16[v24[9]];
      uint64_t v21 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v21 - 8), v25, v21);
      v33(&v16[v24[10]], v21);
      uint64_t v22 = v24[11];
      goto LABEL_15;
    case 2:
      uint64_t v26 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v16, v26);
      unint64_t v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v28 = &v16[v27[9]];
      uint64_t v21 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v21 - 8), v28, v21);
      v33(&v16[v27[10]], v21);
      v33(&v16[v27[11]], v21);
      v33(&v16[v27[12]], v21);
      v33(&v16[v27[13]], v21);
      uint64_t v22 = v27[14];
LABEL_15:
      uint64_t v29 = &v16[v22];
      uint64_t v30 = v21;
      goto LABEL_17;
    case 3:
      uint64_t v31 = type metadata accessor for SymmetricKey();
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v33)((void *)(v31 - 8), v16, v31);
      uint64_t v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v33(&v16[v32[9]], v31);
      v33(&v16[v32[10]], v31);
      uint64_t v29 = &v16[v32[11]];
      uint64_t v30 = v31;
LABEL_17:
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v29, v30);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v7;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(void *)(a2 + 56));
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  size_t v74 = a3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)(v12 + v15[5]) = *(_DWORD *)(v13 + v15[5]);
    *(_DWORD *)(v12 + v15[6]) = *(_DWORD *)(v13 + v15[6]);
    uint64_t v16 = v15[7];
    unint64_t v17 = (uint64_t *)(v12 + v16);
    uint64_t v18 = v13 + v16;
    uint64_t v19 = *(void *)(v13 + v16);
    unint64_t v20 = *(void *)(v13 + v16 + 8);
    outlined copy of Data._Representation(v19, v20);
    *unint64_t v17 = v19;
    v17[1] = v20;
    _OWORD v17[2] = *(void *)(v18 + 16);
    uint64_t v21 = v15[8];
    uint64_t v22 = (uint64_t *)(v12 + v21);
    uint64_t v23 = v13 + v21;
    uint64_t v24 = *(void *)(v13 + v21);
    unint64_t v25 = *(void *)(v13 + v21 + 8);
    outlined copy of Data._Representation(v24, v25);
    *uint64_t v22 = v24;
    v22[1] = v25;
    uint64_t v22[2] = *(void *)(v23 + 16);
    uint64_t v26 = v15[9];
    uint64_t v27 = v12 + v26;
    uint64_t v28 = v13 + v26;
    uint64_t v29 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    *(_DWORD *)(v12 + v15[10]) = *(_DWORD *)(v13 + v15[10]);
    *(_WORD *)(v12 + v15[11]) = *(_WORD *)(v13 + v15[11]);
    *(_WORD *)(v12 + v15[12]) = *(_WORD *)(v13 + v15[12]);
    uint64_t v30 = v15[13];
    uint64_t v31 = v12 + v30;
    uint64_t v32 = (uint64_t *)(v13 + v30);
    unint64_t v33 = *(void *)(v13 + v30 + 8);
    if (v33 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    }
    else
    {
      uint64_t v34 = *v32;
      outlined copy of Data._Representation(*v32, v33);
      *(void *)uint64_t v31 = v34;
      *(void *)(v31 + 8) = v33;
    }
    *(void *)(v31 + 16) = v32[2];
    a3 = v74;
    uint64_t v35 = v15[14];
    uint64_t v36 = (void *)(v12 + v35);
    uint64_t v37 = (const void *)(v13 + v35);
    uint64_t v38 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = a3[6];
  uint64_t v42 = (char *)(a1 + v41);
  uint64_t v43 = (char *)(a2 + v41);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v45 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v42, v43, v45);
      uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v47 = v46[9];
      uint64_t v71 = &v42[v47];
      uint64_t v48 = &v43[v47];
      uint64_t v49 = type metadata accessor for SymmetricKey();
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16);
      v50(v71, v48, v49);
      v50(&v42[v46[10]], &v43[v46[10]], v49);
      v50(&v42[v46[11]], &v43[v46[11]], v49);
      uint64_t v51 = v49;
      a3 = v74;
      v50(&v42[v46[12]], &v43[v46[12]], v51);
      goto LABEL_21;
    case 1u:
      uint64_t v52 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v42, v43, v52);
      uint64_t v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v54 = v53[9];
      uint64_t v72 = &v42[v54];
      uint64_t v55 = &v43[v54];
      uint64_t v56 = type metadata accessor for SymmetricKey();
      uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
      v57(v72, v55, v56);
      v57(&v42[v53[10]], &v43[v53[10]], v56);
      uint64_t v58 = v56;
      a3 = v74;
      v57(&v42[v53[11]], &v43[v53[11]], v58);
      goto LABEL_21;
    case 2u:
      uint64_t v59 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v42, v43, v59);
      uint64_t v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v61 = v60[9];
      uint64_t v73 = &v42[v61];
      uint64_t v62 = &v43[v61];
      uint64_t v63 = type metadata accessor for SymmetricKey();
      uint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
      v64(v73, v62, v63);
      v64(&v42[v60[10]], &v43[v60[10]], v63);
      v64(&v42[v60[11]], &v43[v60[11]], v63);
      v64(&v42[v60[12]], &v43[v60[12]], v63);
      v64(&v42[v60[13]], &v43[v60[13]], v63);
      uint64_t v65 = v63;
      a3 = v74;
      v64(&v42[v60[14]], &v43[v60[14]], v65);
      goto LABEL_21;
    case 3u:
      uint64_t v66 = type metadata accessor for SymmetricKey();
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16);
      v67(v42, v43, v66);
      uint64_t v68 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v67(&v42[v68[9]], &v43[v68[9]], v66);
      v67(&v42[v68[10]], &v43[v68[10]], v66);
      v67(&v42[v68[11]], &v43[v68[11]], v66);
LABEL_21:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
      break;
  }
  uint64_t v69 = a3[8];
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + v69) = *(_WORD *)(a2 + v69);
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 24);
  unint64_t v7 = (long long *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      long long v9 = *v7;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *uint64_t v6 = v9;
      goto LABEL_9;
    }
    uint64_t v11 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      uint64_t v10 = *(void *)(a2 + 40);
      *uint64_t v6 = *v7;
      *(void *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    uint64_t v12 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(void *)(a2 + 32));
    uint64_t v13 = *(void *)(a1 + 24);
    unint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
LABEL_9:
  uint64_t v15 = (long long *)(a1 + 48);
  uint64_t v16 = (long long *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      long long v18 = *v16;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *uint64_t v15 = v18;
      goto LABEL_17;
    }
    uint64_t v20 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(void *)(a2 + 56));
    *(void *)(a1 + 48) = v20;
    *(void *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      uint64_t v19 = *(void *)(a2 + 64);
      *uint64_t v15 = *v16;
      *(void *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(void *)(a2 + 56));
    uint64_t v22 = *(void *)(a1 + 48);
    unint64_t v23 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_17:
  __int16 v24 = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  if (a1 != a2)
  {
    uint64_t v25 = a3[5];
    uint64_t v26 = a1 + v25;
    uint64_t v27 = a2 + v25;
    _s8SwiftTLS14HandshakeStateOWOhTm_1(a1 + v25, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
    type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    uint64_t v88 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      uint64_t v29 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(v26 + v29[5]) = *(_DWORD *)(v27 + v29[5]);
      *(_DWORD *)(v26 + v29[6]) = *(_DWORD *)(v27 + v29[6]);
      uint64_t v30 = v29[7];
      uint64_t v31 = (uint64_t *)(v26 + v30);
      uint64_t v32 = v27 + v30;
      uint64_t v33 = *(void *)(v27 + v30);
      unint64_t v34 = *(void *)(v27 + v30 + 8);
      outlined copy of Data._Representation(v33, v34);
      *uint64_t v31 = v33;
      v31[1] = v34;
      v31[2] = *(void *)(v32 + 16);
      uint64_t v35 = v29[8];
      uint64_t v36 = (uint64_t *)(v26 + v35);
      uint64_t v37 = v27 + v35;
      uint64_t v38 = *(void *)(v27 + v35);
      unint64_t v39 = *(void *)(v27 + v35 + 8);
      outlined copy of Data._Representation(v38, v39);
      *uint64_t v36 = v38;
      v36[1] = v39;
      v36[2] = *(void *)(v37 + 16);
      uint64_t v40 = v29[9];
      uint64_t v41 = v26 + v40;
      uint64_t v42 = v27 + v40;
      uint64_t v43 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
      *(_DWORD *)(v26 + v29[10]) = *(_DWORD *)(v27 + v29[10]);
      *(_WORD *)(v26 + v29[11]) = *(_WORD *)(v27 + v29[11]);
      *(_WORD *)(v26 + v29[12]) = *(_WORD *)(v27 + v29[12]);
      uint64_t v44 = v29[13];
      uint64_t v45 = v26 + v44;
      uint64_t v46 = (uint64_t *)(v27 + v44);
      unint64_t v47 = *(void *)(v27 + v44 + 8);
      if (v47 >> 60 == 15)
      {
        long long v48 = *(_OWORD *)v46;
        *(void *)(v45 + 16) = v46[2];
        *(_OWORD *)uint64_t v45 = v48;
      }
      else
      {
        uint64_t v49 = *v46;
        outlined copy of Data._Representation(*v46, v47);
        *(void *)uint64_t v45 = v49;
        *(void *)(v45 + 8) = v47;
        *(void *)(v45 + 16) = v46[2];
      }
      a3 = v88;
      uint64_t v50 = v29[14];
      uint64_t v51 = (void *)(v26 + v50);
      uint64_t v52 = (const void *)(v27 + v50);
      uint64_t v53 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v54 = *(void *)(v53 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        uint64_t v55 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v54 + 16))(v51, v52, v53);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
    }
    else
    {
      *(_WORD *)uint64_t v26 = *(_WORD *)v27;
      *(_WORD *)(v26 + 2) = *(_WORD *)(v27 + 2);
      *(void *)(v26 + 8) = *(void *)(v27 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v56 = a3[6];
    uint64_t v57 = (char *)(a1 + v56);
    uint64_t v58 = (char *)(a2 + v56);
    outlined destroy of HandshakeStateMachine?(a1 + v56, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v60 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v57, v58, v60);
        uint64_t v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v62 = v61[9];
        uint64_t v85 = &v57[v62];
        uint64_t v63 = &v58[v62];
        uint64_t v64 = type metadata accessor for SymmetricKey();
        uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
        v65(v85, v63, v64);
        v65(&v57[v61[10]], &v58[v61[10]], v64);
        v65(&v57[v61[11]], &v58[v61[11]], v64);
        uint64_t v66 = v64;
        a3 = v88;
        v65(&v57[v61[12]], &v58[v61[12]], v66);
        goto LABEL_32;
      case 1u:
        uint64_t v67 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v57, v58, v67);
        uint64_t v68 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v69 = v68[9];
        uint64_t v86 = &v57[v69];
        uint64_t v70 = &v58[v69];
        uint64_t v71 = type metadata accessor for SymmetricKey();
        uint64_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16);
        v72(v86, v70, v71);
        v72(&v57[v68[10]], &v58[v68[10]], v71);
        uint64_t v73 = v71;
        a3 = v88;
        v72(&v57[v68[11]], &v58[v68[11]], v73);
        goto LABEL_32;
      case 2u:
        uint64_t v74 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v57, v58, v74);
        uint64_t v75 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v76 = v75[9];
        unint64_t v87 = &v57[v76];
        uint64_t v77 = &v58[v76];
        uint64_t v78 = type metadata accessor for SymmetricKey();
        uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16);
        v79(v87, v77, v78);
        v79(&v57[v75[10]], &v58[v75[10]], v78);
        v79(&v57[v75[11]], &v58[v75[11]], v78);
        v79(&v57[v75[12]], &v58[v75[12]], v78);
        v79(&v57[v75[13]], &v58[v75[13]], v78);
        uint64_t v80 = v78;
        a3 = v88;
        v79(&v57[v75[14]], &v58[v75[14]], v80);
        goto LABEL_32;
      case 3u:
        uint64_t v81 = type metadata accessor for SymmetricKey();
        unint64_t v82 = *(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16);
        v82(v57, v58, v81);
        uint64_t v83 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v82(&v57[v83[9]], &v58[v83[9]], v81);
        v82(&v57[v83[10]], &v58[v83[10]], v81);
        v82(&v57[v83[11]], &v58[v83[11]], v81);
LABEL_32:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
        break;
    }
  }
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for HandshakeState.ServerHelloState(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v3 = a3;
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)a2 + 60);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  long long v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    uint64_t v13 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)&v9[v13[5]] = *(_DWORD *)&v10[v13[5]];
    *(_DWORD *)&v9[v13[6]] = *(_DWORD *)&v10[v13[6]];
    uint64_t v14 = v13[7];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((void *)v15 + 2) = *((void *)v16 + 2);
    uint64_t v17 = v13[8];
    long long v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_OWORD *)long long v18 = *(_OWORD *)v19;
    *((void *)v18 + 2) = *((void *)v19 + 2);
    uint64_t v20 = v13[9];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    uint64_t v23 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    *(_DWORD *)&v9[v13[10]] = *(_DWORD *)&v10[v13[10]];
    *(_WORD *)&v9[v13[11]] = *(_WORD *)&v10[v13[11]];
    *(_WORD *)&v9[v13[12]] = *(_WORD *)&v10[v13[12]];
    uint64_t v24 = v13[13];
    uint64_t v25 = &v9[v24];
    uint64_t v26 = &v10[v24];
    *((void *)v25 + 2) = *((void *)v26 + 2);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    uint64_t v27 = v13[14];
    uint64_t v28 = &v9[v27];
    uint64_t v29 = &v10[v27];
    uint64_t v30 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v33 = v3[6];
  unint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v37 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v34, v35, v37);
      uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v39 = v38[9];
      uint64_t v63 = &v34[v39];
      uint64_t v40 = &v35[v39];
      uint64_t v66 = v3;
      uint64_t v41 = type metadata accessor for SymmetricKey();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32);
      v42(v63, v40, v41);
      v42(&v34[v38[10]], &v35[v38[10]], v41);
      v42(&v34[v38[11]], &v35[v38[11]], v41);
      uint64_t v43 = v41;
      uint64_t v3 = v66;
      v42(&v34[v38[12]], &v35[v38[12]], v43);
      goto LABEL_13;
    case 1u:
      uint64_t v44 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v34, v35, v44);
      uint64_t v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v46 = v45[9];
      uint64_t v64 = &v34[v46];
      unint64_t v47 = &v35[v46];
      uint64_t v67 = v3;
      uint64_t v48 = type metadata accessor for SymmetricKey();
      uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32);
      v49(v64, v47, v48);
      v49(&v34[v45[10]], &v35[v45[10]], v48);
      uint64_t v50 = v48;
      uint64_t v3 = v67;
      v49(&v34[v45[11]], &v35[v45[11]], v50);
      goto LABEL_13;
    case 2u:
      uint64_t v51 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v34, v35, v51);
      uint64_t v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v53 = v52[9];
      uint64_t v65 = &v34[v53];
      uint64_t v54 = &v35[v53];
      uint64_t v68 = v3;
      uint64_t v55 = type metadata accessor for SymmetricKey();
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
      v56(v65, v54, v55);
      v56(&v34[v52[10]], &v35[v52[10]], v55);
      v56(&v34[v52[11]], &v35[v52[11]], v55);
      v56(&v34[v52[12]], &v35[v52[12]], v55);
      v56(&v34[v52[13]], &v35[v52[13]], v55);
      uint64_t v57 = v55;
      uint64_t v3 = v68;
      v56(&v34[v52[14]], &v35[v52[14]], v57);
      goto LABEL_13;
    case 3u:
      uint64_t v58 = type metadata accessor for SymmetricKey();
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32);
      v59(v34, v35, v58);
      uint64_t v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v59(&v34[v60[9]], &v35[v60[9]], v58);
      v59(&v34[v60[10]], &v35[v60[10]], v58);
      v59(&v34[v60[11]], &v35[v60[11]], v58);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
      break;
  }
  uint64_t v61 = v3[8];
  *(_WORD *)((char *)a1 + v3[7]) = *(_WORD *)((char *)a2 + v3[7]);
  *(_WORD *)((char *)a1 + v61) = *(_WORD *)((char *)a2 + v61);
  return a1;
}

uint64_t assignWithTake for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
LABEL_6:
  unint64_t v10 = *(void *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    goto LABEL_11;
  }
  unint64_t v11 = *(void *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  if (a1 != a2)
  {
    uint64_t v13 = a3[5];
    uint64_t v14 = (char *)(a1 + v13);
    uint64_t v15 = (char *)(a2 + v13);
    _s8SwiftTLS14HandshakeStateOWOhTm_1(a1 + v13, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
    uint64_t v16 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
      long long v18 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)&v14[v18[5]] = *(_DWORD *)&v15[v18[5]];
      *(_DWORD *)&v14[v18[6]] = *(_DWORD *)&v15[v18[6]];
      uint64_t v19 = v18[7];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      *((void *)v20 + 2) = *((void *)v21 + 2);
      uint64_t v22 = v18[8];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      *((void *)v23 + 2) = *((void *)v24 + 2);
      uint64_t v25 = v18[9];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      uint64_t v28 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
      *(_DWORD *)&v14[v18[10]] = *(_DWORD *)&v15[v18[10]];
      *(_WORD *)&v14[v18[11]] = *(_WORD *)&v15[v18[11]];
      *(_WORD *)&v14[v18[12]] = *(_WORD *)&v15[v18[12]];
      uint64_t v29 = v18[13];
      uint64_t v30 = &v14[v29];
      uint64_t v31 = &v15[v29];
      *((void *)v30 + 2) = *((void *)v31 + 2);
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      uint64_t v32 = v18[14];
      uint64_t v33 = &v14[v32];
      unint64_t v34 = &v15[v32];
      uint64_t v35 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    uint64_t v38 = a3[6];
    uint64_t v39 = (char *)(a1 + v38);
    uint64_t v40 = (char *)(a2 + v38);
    outlined destroy of HandshakeStateMachine?(a1 + v38, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v42 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v39, v40, v42);
        uint64_t v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v44 = v43[9];
        uint64_t v62 = &v40[v44];
        uint64_t v65 = &v39[v44];
        uint64_t v45 = type metadata accessor for SymmetricKey();
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32);
        v46(v65, v62, v45);
        v46(&v39[v43[10]], &v40[v43[10]], v45);
        v46(&v39[v43[11]], &v40[v43[11]], v45);
        v46(&v39[v43[12]], &v40[v43[12]], v45);
        goto LABEL_24;
      case 1u:
        uint64_t v47 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v39, v40, v47);
        uint64_t v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v49 = v48[9];
        uint64_t v63 = &v40[v49];
        uint64_t v66 = &v39[v49];
        uint64_t v50 = type metadata accessor for SymmetricKey();
        uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32);
        v51(v66, v63, v50);
        v51(&v39[v48[10]], &v40[v48[10]], v50);
        v51(&v39[v48[11]], &v40[v48[11]], v50);
        goto LABEL_24;
      case 2u:
        uint64_t v52 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v39, v40, v52);
        uint64_t v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v54 = v53[9];
        uint64_t v64 = &v40[v54];
        uint64_t v67 = &v39[v54];
        uint64_t v55 = type metadata accessor for SymmetricKey();
        uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
        v56(v67, v64, v55);
        v56(&v39[v53[10]], &v40[v53[10]], v55);
        v56(&v39[v53[11]], &v40[v53[11]], v55);
        v56(&v39[v53[12]], &v40[v53[12]], v55);
        v56(&v39[v53[13]], &v40[v53[13]], v55);
        v56(&v39[v53[14]], &v40[v53[14]], v55);
        goto LABEL_24;
      case 3u:
        uint64_t v57 = type metadata accessor for SymmetricKey();
        uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
        v58(v39, v40, v57);
        uint64_t v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v58(&v39[v59[9]], &v40[v59[9]], v57);
        v58(&v39[v59[10]], &v40[v59[10]], v57);
        v58(&v39[v59[11]], &v40[v59[11]], v57);
LABEL_24:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
        break;
    }
  }
  uint64_t v60 = a3[8];
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + v60) = *(_WORD *)(a2 + v60);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B57568A4);
}

uint64_t sub_1B57568A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B57569E8);
}

uint64_t sub_1B57569E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for HandshakeState.ServerHelloState()
{
  type metadata accessor for HandshakeState.ServerHelloState.SessionData(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionKeyManager<SHA384>.State();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for HandshakeState.ServerHelloState.SessionData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      unint64_t v7 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)((char *)a1 + v7[5]) = *(_DWORD *)((char *)a2 + v7[5]);
      *(_DWORD *)((char *)a1 + v7[6]) = *(_DWORD *)((char *)a2 + v7[6]);
      uint64_t v8 = v7[7];
      uint64_t v9 = (uint64_t *)((char *)a1 + v8);
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
      unint64_t v12 = *(uint64_t *)((char *)a2 + v8 + 8);
      outlined copy of Data._Representation(v11, v12);
      uint64_t *v9 = v11;
      v9[1] = v12;
      void v9[2] = *((void *)v10 + 2);
      uint64_t v13 = v7[8];
      uint64_t v14 = (uint64_t *)((char *)a1 + v13);
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = *(uint64_t *)((char *)a2 + v13);
      unint64_t v17 = *(uint64_t *)((char *)a2 + v13 + 8);
      outlined copy of Data._Representation(v16, v17);
      *uint64_t v14 = v16;
      v14[1] = v17;
      v14[2] = *((void *)v15 + 2);
      uint64_t v18 = v7[9];
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      *(_DWORD *)((char *)a1 + v7[10]) = *(_DWORD *)((char *)a2 + v7[10]);
      *(_WORD *)((char *)a1 + v7[11]) = *(_WORD *)((char *)a2 + v7[11]);
      *(_WORD *)((char *)a1 + v7[12]) = *(_WORD *)((char *)a2 + v7[12]);
      uint64_t v22 = v7[13];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (uint64_t *)((char *)a2 + v22);
      unint64_t v25 = *(uint64_t *)((char *)a2 + v22 + 8);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      }
      else
      {
        uint64_t v27 = *v24;
        outlined copy of Data._Representation(*v24, v25);
        *(void *)uint64_t v23 = v27;
        *((void *)v23 + 1) = v25;
      }
      *((void *)v23 + 2) = v24[2];
      uint64_t v28 = v7[14];
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for HandshakeState.ServerHelloState.SessionData(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
    uint64_t v3 = (int *)type metadata accessor for SessionTicket();
    outlined consume of Data._Representation(*(void *)(a1 + v3[7]), *(void *)(a1 + v3[7] + 8));
    outlined consume of Data._Representation(*(void *)(a1 + v3[8]), *(void *)(a1 + v3[8] + 8));
    uint64_t v4 = a1 + v3[9];
    uint64_t v5 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    uint64_t v6 = (uint64_t *)(a1 + v3[13]);
    unint64_t v7 = v6[1];
    if (v7 >> 60 != 15) {
      outlined consume of Data._Representation(*v6, v7);
    }
    uint64_t v8 = a1 + v3[14];
    uint64_t v9 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v12 = *(void *)(v9 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
    if (!result)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
      return v11(v8, v9);
    }
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
    *(_DWORD *)(a1 + v5[6]) = *(_DWORD *)(a2 + v5[6]);
    uint64_t v6 = v5[7];
    unint64_t v7 = (uint64_t *)(a1 + v6);
    uint64_t v8 = a2 + v6;
    uint64_t v9 = *(void *)(a2 + v6);
    unint64_t v10 = *(void *)(a2 + v6 + 8);
    outlined copy of Data._Representation(v9, v10);
    uint64_t *v7 = v9;
    v7[1] = v10;
    _OWORD v7[2] = *(void *)(v8 + 16);
    uint64_t v11 = v5[8];
    uint64_t v12 = (uint64_t *)(a1 + v11);
    uint64_t v13 = a2 + v11;
    uint64_t v14 = *(void *)(a2 + v11);
    unint64_t v15 = *(void *)(a2 + v11 + 8);
    outlined copy of Data._Representation(v14, v15);
    *uint64_t v12 = v14;
    v12[1] = v15;
    v12[2] = *(void *)(v13 + 16);
    uint64_t v16 = v5[9];
    uint64_t v17 = a1 + v16;
    uint64_t v18 = a2 + v16;
    uint64_t v19 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
    *(_WORD *)(a1 + v5[11]) = *(_WORD *)(a2 + v5[11]);
    *(_WORD *)(a1 + v5[12]) = *(_WORD *)(a2 + v5[12]);
    uint64_t v20 = v5[13];
    uint64_t v21 = a1 + v20;
    uint64_t v22 = (uint64_t *)(a2 + v20);
    unint64_t v23 = *(void *)(a2 + v20 + 8);
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    }
    else
    {
      uint64_t v24 = *v22;
      outlined copy of Data._Representation(*v22, v23);
      *(void *)uint64_t v21 = v24;
      *(void *)(v21 + 8) = v23;
    }
    *(void *)(v21 + 16) = v22[2];
    uint64_t v25 = v5[14];
    uint64_t v26 = (void *)(a1 + v25);
    uint64_t v27 = (const void *)(a2 + v25);
    uint64_t v28 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s8SwiftTLS14HandshakeStateOWOhTm_1(a1, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
      *(_DWORD *)(a1 + v5[6]) = *(_DWORD *)(a2 + v5[6]);
      uint64_t v6 = v5[7];
      unint64_t v7 = (uint64_t *)(a1 + v6);
      uint64_t v8 = a2 + v6;
      uint64_t v9 = *(void *)(a2 + v6);
      unint64_t v10 = *(void *)(a2 + v6 + 8);
      outlined copy of Data._Representation(v9, v10);
      uint64_t *v7 = v9;
      v7[1] = v10;
      _OWORD v7[2] = *(void *)(v8 + 16);
      uint64_t v11 = v5[8];
      uint64_t v12 = (uint64_t *)(a1 + v11);
      uint64_t v13 = a2 + v11;
      uint64_t v14 = *(void *)(a2 + v11);
      unint64_t v15 = *(void *)(a2 + v11 + 8);
      outlined copy of Data._Representation(v14, v15);
      *uint64_t v12 = v14;
      v12[1] = v15;
      v12[2] = *(void *)(v13 + 16);
      uint64_t v16 = v5[9];
      uint64_t v17 = a1 + v16;
      uint64_t v18 = a2 + v16;
      uint64_t v19 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
      *(_WORD *)(a1 + v5[11]) = *(_WORD *)(a2 + v5[11]);
      *(_WORD *)(a1 + v5[12]) = *(_WORD *)(a2 + v5[12]);
      uint64_t v20 = v5[13];
      uint64_t v21 = a1 + v20;
      uint64_t v22 = (uint64_t *)(a2 + v20);
      unint64_t v23 = *(void *)(a2 + v20 + 8);
      if (v23 >> 60 == 15)
      {
        long long v24 = *(_OWORD *)v22;
        *(void *)(v21 + 16) = v22[2];
        *(_OWORD *)uint64_t v21 = v24;
      }
      else
      {
        uint64_t v25 = *v22;
        outlined copy of Data._Representation(*v22, v23);
        *(void *)uint64_t v21 = v25;
        *(void *)(v21 + 8) = v23;
        *(void *)(v21 + 16) = v22[2];
      }
      uint64_t v26 = v5[14];
      uint64_t v27 = (void *)(a1 + v26);
      uint64_t v28 = (const void *)(a2 + v26);
      uint64_t v29 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for HandshakeState.ServerHelloState.SessionData(char *a1, char *a2, uint64_t a3)
{
  return assignWithTake for HandshakeState.ServerHelloState.SessionData(a1, a2, a3, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
}

uint64_t type metadata completion function for HandshakeState.ServerHelloState.SessionData()
{
  return type metadata completion function for HandshakeState.ServerHelloState.SessionData();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for SessionTicket();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for HandshakeState.ServerHelloState.SessionData.NewSession()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandshakeState.ServerHelloState.SessionData.NewSession()
{
  return &type metadata for HandshakeState.ServerHelloState.SessionData.NewSession;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.EncryptedExtensionsState(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    unint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      uint64_t v11 = a2[3];
      outlined copy of Data._Representation(v11, v8);
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v8;
    }
    *(void *)(a1 + 40) = a2[5];
    unint64_t v12 = a2[7];
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      uint64_t v13 = a2[6];
      outlined copy of Data._Representation(v13, a2[7]);
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v12;
    }
    *(void *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    uint64_t v14 = a3[5];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      uint64_t v18 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(v15 + v18[5]) = *(_DWORD *)(v16 + v18[5]);
      *(_DWORD *)(v15 + v18[6]) = *(_DWORD *)(v16 + v18[6]);
      uint64_t v19 = v18[7];
      uint64_t v20 = (uint64_t *)(v15 + v19);
      uint64_t v21 = v16 + v19;
      uint64_t v22 = *(void *)(v16 + v19);
      unint64_t v23 = *(void *)(v16 + v19 + 8);
      outlined copy of Data._Representation(v22, v23);
      *uint64_t v20 = v22;
      v20[1] = v23;
      uint64_t v20[2] = *(void *)(v21 + 16);
      uint64_t v24 = v18[8];
      uint64_t v25 = (uint64_t *)(v15 + v24);
      uint64_t v26 = v16 + v24;
      uint64_t v27 = *(void *)(v16 + v24);
      unint64_t v28 = *(void *)(v16 + v24 + 8);
      outlined copy of Data._Representation(v27, v28);
      *uint64_t v25 = v27;
      v25[1] = v28;
      v25[2] = *(void *)(v26 + 16);
      uint64_t v29 = v18[9];
      uint64_t v30 = v15 + v29;
      uint64_t v31 = v16 + v29;
      uint64_t v32 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      *(_DWORD *)(v15 + v18[10]) = *(_DWORD *)(v16 + v18[10]);
      *(_WORD *)(v15 + v18[11]) = *(_WORD *)(v16 + v18[11]);
      *(_WORD *)(v15 + v18[12]) = *(_WORD *)(v16 + v18[12]);
      uint64_t v33 = v18[13];
      uint64_t v34 = v15 + v33;
      uint64_t v35 = (uint64_t *)(v16 + v33);
      unint64_t v36 = *(void *)(v16 + v33 + 8);
      if (v36 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      }
      else
      {
        uint64_t v38 = *v35;
        outlined copy of Data._Representation(*v35, v36);
        *(void *)uint64_t v34 = v38;
        *(void *)(v34 + 8) = v36;
      }
      *(void *)(v34 + 16) = v35[2];
      uint64_t v39 = v18[14];
      uint64_t v40 = (void *)(v15 + v39);
      uint64_t v41 = (const void *)(v16 + v39);
      uint64_t v42 = type metadata accessor for P256.Signing.PublicKey();
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
      *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
      uint64_t v37 = *(void *)(v16 + 16);
      *(void *)(v15 + 8) = *(void *)(v16 + 8);
      *(void *)(v15 + 16) = v37;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v45 = a3[6];
    uint64_t v46 = a1 + v45;
    uint64_t v47 = (uint64_t *)((char *)a2 + v45);
    unint64_t v48 = *(uint64_t *)((char *)a2 + v45 + 8);
    if (v48 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    }
    else
    {
      uint64_t v49 = *v47;
      outlined copy of Data._Representation(*v47, v48);
      *(void *)uint64_t v46 = v49;
      *(void *)(v46 + 8) = v48;
    }
    *(void *)(v46 + 16) = v47[2];
    uint64_t v50 = a3[7];
    uint64_t v51 = a1 + v50;
    uint64_t v52 = (uint64_t *)((char *)a2 + v50);
    unint64_t v53 = *(uint64_t *)((char *)a2 + v50 + 8);
    if (v53 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    }
    else
    {
      uint64_t v54 = *v52;
      outlined copy of Data._Representation(*v52, v53);
      *(void *)uint64_t v51 = v54;
      *(void *)(v51 + 8) = v53;
    }
    *(void *)(v51 + 16) = v52[2];
    uint64_t v55 = a3[9];
    *(unsigned char *)(a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v56 = (char *)(a1 + v55);
    uint64_t v57 = (char *)a2 + v55;
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v59 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v56, v57, v59);
        uint64_t v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        uint64_t v61 = v60[9];
        uint64_t v62 = &v56[v61];
        uint64_t v63 = &v57[v61];
        uint64_t v64 = type metadata accessor for SymmetricKey();
        uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
        v65(v62, v63, v64);
        v65(&v56[v60[10]], &v57[v60[10]], v64);
        v65(&v56[v60[11]], &v57[v60[11]], v64);
        v65(&v56[v60[12]], &v57[v60[12]], v64);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v66 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v56, v57, v66);
        uint64_t v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        uint64_t v68 = v67[9];
        uint64_t v69 = &v56[v68];
        uint64_t v70 = &v57[v68];
        uint64_t v71 = type metadata accessor for SymmetricKey();
        uint64_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16);
        v72(v69, v70, v71);
        v72(&v56[v67[10]], &v57[v67[10]], v71);
        v72(&v56[v67[11]], &v57[v67[11]], v71);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v73 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 16))(v56, v57, v73);
        uint64_t v74 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        uint64_t v75 = v74[9];
        uint64_t v76 = &v56[v75];
        uint64_t v77 = &v57[v75];
        uint64_t v78 = type metadata accessor for SymmetricKey();
        uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16);
        v79(v76, v77, v78);
        v79(&v56[v74[10]], &v57[v74[10]], v78);
        v79(&v56[v74[11]], &v57[v74[11]], v78);
        v79(&v56[v74[12]], &v57[v74[12]], v78);
        v79(&v56[v74[13]], &v57[v74[13]], v78);
        v79(&v56[v74[14]], &v57[v74[14]], v78);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v80 = type metadata accessor for SymmetricKey();
        uint64_t v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16);
        v81(v56, v57, v80);
        unint64_t v82 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v81(&v56[v82[9]], &v57[v82[9]], v80);
        v81(&v56[v82[10]], &v57[v82[10]], v80);
        v81(&v56[v82[11]], &v57[v82[11]], v80);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for HandshakeState.EncryptedExtensionsState(uint64_t *a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = a1[4];
  if (v4 >> 60 != 15) {
    outlined consume of Data._Representation(a1[3], v4);
  }
  unint64_t v5 = a1[7];
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(a1[6], v5);
  }
  uint64_t v6 = (char *)a1 + a2[5];
  type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    unint64_t v8 = (int *)type metadata accessor for SessionTicket();
    outlined consume of Data._Representation(*(void *)&v6[v8[7]], *(void *)&v6[v8[7] + 8]);
    outlined consume of Data._Representation(*(void *)&v6[v8[8]], *(void *)&v6[v8[8] + 8]);
    uint64_t v9 = &v6[v8[9]];
    uint64_t v10 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    uint64_t v11 = (uint64_t *)&v6[v8[13]];
    unint64_t v12 = v11[1];
    if (v12 >> 60 != 15) {
      outlined consume of Data._Representation(*v11, v12);
    }
    uint64_t v13 = &v6[v8[14]];
    uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t *)((char *)a1 + a2[6]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    outlined consume of Data._Representation(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)((char *)a1 + a2[7]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    outlined consume of Data._Representation(*v18, v19);
  }
  uint64_t v20 = (char *)a1 + a2[9];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v22 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v20, v22);
      unint64_t v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      uint64_t v24 = &v20[v23[9]];
      uint64_t v25 = type metadata accessor for SymmetricKey();
      uint64_t v37 = *(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v37)((void *)(v25 - 8), v24, v25);
      v37(&v20[v23[10]], v25);
      v37(&v20[v23[11]], v25);
      uint64_t v26 = v23[12];
      goto LABEL_19;
    case 1:
      uint64_t v27 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v20, v27);
      unint64_t v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      uint64_t v29 = &v20[v28[9]];
      uint64_t v25 = type metadata accessor for SymmetricKey();
      uint64_t v37 = *(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v37)((void *)(v25 - 8), v29, v25);
      v37(&v20[v28[10]], v25);
      uint64_t v26 = v28[11];
      goto LABEL_19;
    case 2:
      uint64_t v30 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v20, v30);
      uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      uint64_t v32 = &v20[v31[9]];
      uint64_t v25 = type metadata accessor for SymmetricKey();
      uint64_t v37 = *(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v37)((void *)(v25 - 8), v32, v25);
      v37(&v20[v31[10]], v25);
      v37(&v20[v31[11]], v25);
      v37(&v20[v31[12]], v25);
      v37(&v20[v31[13]], v25);
      uint64_t v26 = v31[14];
LABEL_19:
      uint64_t v33 = &v20[v26];
      uint64_t v34 = v25;
      goto LABEL_21;
    case 3:
      uint64_t v35 = type metadata accessor for SymmetricKey();
      uint64_t v37 = *(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v37)((void *)(v35 - 8), v20, v35);
      unint64_t v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v37(&v20[v36[9]], v35);
      v37(&v20[v36[10]], v35);
      uint64_t v33 = &v20[v36[11]];
      uint64_t v34 = v35;
LABEL_21:
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v33, v34);
      break;
    default:
      return result;
  }
  return result;
}