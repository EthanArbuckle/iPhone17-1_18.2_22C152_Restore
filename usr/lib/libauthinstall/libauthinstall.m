uint64_t AMAuthInstallUpdaterCryptex1SetInfo(void *a1, const __CFURL *a2, void *a3, uint64_t a4, const void *a5, const void *a6, char a7, void *a8)
{
  return AMAuthInstallUpdaterCryptex1MobileAssetSetInfo(a1, a2, a3, a4, a5, a6, 0, 0, 0, a7, a8);
}

uint64_t AMAuthInstallUpdaterCryptex1MobileAssetSetInfo(void *a1, const __CFURL *a2, void *a3, uint64_t a4, const void *a5, const void *a6, const void *a7, const void *a8, void *value, char a10, void *a11)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    AMSupportCreateErrorInternal();
LABEL_30:
    uint64_t v36 = 99;
    goto LABEL_22;
  }
  CFAllocatorRef v19 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable
    || (AMAuthInstallApCopyParameters((const void **)a1, (CFTypeRef *)&theDict), !theDict)
    || (v21 = CFDictionaryGetValue(theDict, @"ApChipID")) == 0
    || (CFDictionarySetValue(Mutable, @"ApChipId", v21),
        (v22 = CFDictionaryGetValue(theDict, @"ECID")) == 0)
    || (CFDictionarySetValue(Mutable, @"ApECID", v22),
        (v23 = CFDictionaryGetValue(theDict, @"ApProductionMode")) == 0))
  {
    AMSupportCreateErrorInternal();
    goto LABEL_30;
  }
  CFDictionarySetValue(Mutable, @"ApProductionMode", v23);
  v24 = CFDictionaryGetValue(theDict, @"ApX86");
  if (v24) {
    CFDictionarySetValue(Mutable, @"IsX86", v24);
  }
  if (a6) {
    CFDictionarySetValue(Mutable, @"Nonce", a6);
  }
  if (a7) {
    CFDictionarySetValue(Mutable, @"LiveNonce", a7);
  }
  if (a8) {
    CFDictionarySetValue(Mutable, @"ExclaveNonce", a8);
  }
  if (value) {
    CFDictionarySetValue(Mutable, @"ExclaveLiveNonce", value);
  }
  AMSupportCFDictionarySetBoolean();
  *(_OWORD *)in = 0u;
  memset(v49, 0, sizeof(v49));
  size_t v46 = 37;
  if (sysctlbyname("kern.bootsessionuuid", in, &v46, 0, 0))
  {
    int v25 = *__error();
    strerror(v25);
    AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallCryptex1CopyBootSessionUUID", (uint64_t)"failed to obtain kern.bootsessionuuid: %d (%s)", v26, v27, v28, v29, v30, v25);
  }
  else
  {
    memset(uu, 0, sizeof(uu));
    if (uuid_parse(in, uu))
    {
      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallCryptex1CopyBootSessionUUID", (uint64_t)"failed to parse kern.bootsessionuuid", v31, v32, v33, v34, v35, v44);
    }
    else
    {
      CFDataRef v43 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], uu, 16);
      if (v43) {
        CFDictionarySetValue(Mutable, @"BootUUID", v43);
      }
    }
  }
  uint64_t v36 = AMAuthInstallUpdaterSetInfo((uint64_t)a1, @"Cryptex1", Mutable, a2, a3, a4, a5, 0, 0, (uint64_t)a11);
LABEL_22:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (a11 && *a11) {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallUpdaterCryptex1MobileAssetSetInfo", (uint64_t)"failed: %@", v37, v38, v39, v40, v41, *a11);
  }
  return v36;
}

uint64_t AMAuthInstallUpdaterCryptex1CopyTicket(const void *a1, const __CFURL *a2, void *a3)
{
  v4 = AMAuthInstallUpdaterCopyResponse(a1, @"Cryptex1", a2);
  if (v4)
  {
    CFDictionaryGetValue(v4, @"Cryptex1,Ticket");
    uint64_t v10 = AMSupportSafeRetain();
    if (!v10) {
      AMSupportCreateErrorInternal();
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (a3 && *a3) {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallUpdaterCryptex1CopyTicket", (uint64_t)"failed: %@", v5, v6, v7, v8, v9, *a3);
  }
  AMSupportSafeRelease();
  return v10;
}

CFDataRef AMAuthInstallUpdaterCryptex1MobileAssetCopyImg4WithRestoreInfo(const void *a1, const __CFURL *a2, const void *a3, const void *a4, void *a5)
{
  CFDataRef v23 = 0;
  if (!a1) {
    goto LABEL_15;
  }
  if (!a3 || !a4)
  {
    AMSupportCreateErrorInternal();
    goto LABEL_8;
  }
  CFDataRef v9 = (const __CFData *)AMAuthInstallUpdaterCryptex1CopyTicket(a1, a2, a5);
  if (v9)
  {
    CFAllocatorRef v10 = CFGetAllocator(a1);
    CFDataRef v11 = CFDataCreate(v10, kAMAuthInstallCryptex1MobileAssetDummyPayload, 22);
    if (v11)
    {
      CFAllocatorRef v12 = CFGetAllocator(a1);
      CFDataRef StitchTicket = AMAuthInstallApImg4CreateStitchTicket(v12, v11, v9);
      CFAllocatorRef v14 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v14, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      v16 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"cncn", a3);
        CFDictionarySetValue(v16, @"cncx", a4);
        AMAuthInstallApImg4EncodeRestoreInfo(StitchTicket, v16, &v23);
        goto LABEL_8;
      }
    }
LABEL_15:
    AMSupportCreateErrorInternal();
  }
LABEL_8:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (a5 && *a5) {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallUpdaterCryptex1MobileAssetCopyImg4WithRestoreInfo", (uint64_t)"failed: %@", v17, v18, v19, v20, v21, *a5);
  }
  return v23;
}

__CFDictionary *AMAuthInstallUpdaterCryptex1GetTags(uint64_t a1, void (*a2)(uint64_t, const char *), uint64_t a3, void *a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 28, MEMORY[0x263EFFF70]);
  if (!Mutable) {
    goto LABEL_12;
  }
  CFDataRef v9 = _AMAuthInstallCryptex1CopyManifestProperties();
  if (!v9) {
    goto LABEL_12;
  }
  CFAllocatorRef v10 = _AMAuthInstallCryptex1CopyObjectTags();
  if (!v10) {
    goto LABEL_12;
  }
  v22.length = CFArrayGetCount(v9);
  v22.location = 0;
  CFArrayAppendArray(Mutable, v9, v22);
  v23.length = CFArrayGetCount(v10);
  v23.location = 0;
  CFArrayAppendArray(Mutable, v10, v23);
  CFDataRef v11 = CFArrayCreateMutable(v7, 1, MEMORY[0x263EFFF70]);
  CFAllocatorRef v12 = v11;
  if (v11)
  {
    CFArrayAppendValue(v11, @"Cryptex1,Ticket");
    v13 = CFDictionaryCreateMutable(v7, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFAllocatorRef v14 = v13;
    if (v13)
    {
      CFDictionaryAddValue(v13, @"BuildIdentityTags", Mutable);
      CFDictionaryAddValue(v14, @"ResponseTags", v12);
    }
    else
    {
      AMSupportCreateErrorInternal();
    }
  }
  else
  {
LABEL_12:
    AMSupportCreateErrorInternal();
    CFAllocatorRef v14 = 0;
  }
  if (a4 && *a4)
  {
    _AMAuthInstallCryptex1Log(a2, a3, v15, v16, v17, v18, v19, v20, (char)"AMAuthInstallUpdaterCryptex1GetTags");
    return 0;
  }
  else
  {
    AMSupportSafeRelease();
    AMSupportSafeRelease();
    AMSupportSafeRelease();
    AMSupportSafeRelease();
  }
  return v14;
}

__CFArray *_AMAuthInstallCryptex1CopyManifestProperties()
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 15, MEMORY[0x263EFFF70]);
  v1 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, @"ApSecurityDomain");
    CFArrayAppendValue(v1, @"Cryptex1,ChipID");
    CFArrayAppendValue(v1, @"Cryptex1,Type");
    CFArrayAppendValue(v1, @"Cryptex1,SubType");
    CFArrayAppendValue(v1, @"Cryptex1,ProductClass");
    CFArrayAppendValue(v1, @"Cryptex1,UseProductClass");
    CFArrayAppendValue(v1, @"Cryptex1,NonceDomain");
    CFArrayAppendValue(v1, @"Cryptex1,LiveNonceDomain");
    CFArrayAppendValue(v1, @"Cryptex1,ExclaveNonceDomain");
    CFArrayAppendValue(v1, @"Cryptex1,ExclaveLiveNonceDomain");
    CFArrayAppendValue(v1, @"Cryptex1,Version");
    CFArrayAppendValue(v1, @"Cryptex1,PreauthorizationVersion");
    CFArrayAppendValue(v1, @"Cryptex1,FakeRoot");
    CFArrayAppendValue(v1, @"UniqueBuildID");
    CFArrayAppendValue(v1, @"Cryptex1,DataOnly");
  }
  return v1;
}

__CFArray *_AMAuthInstallCryptex1CopyObjectTags()
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 14, MEMORY[0x263EFFF70]);
  v1 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, @"Cryptex1,SystemOS");
    CFArrayAppendValue(v1, @"Cryptex1,SystemVolume");
    CFArrayAppendValue(v1, @"Cryptex1,SystemTrustCache");
    CFArrayAppendValue(v1, @"Cryptex1,AppOS");
    CFArrayAppendValue(v1, @"Cryptex1,AppVolume");
    CFArrayAppendValue(v1, @"Cryptex1,AppTrustCache");
    CFArrayAppendValue(v1, @"Cryptex1,MobileAssetBrainOS");
    CFArrayAppendValue(v1, @"Cryptex1,MobileAssetBrainVolume");
    CFArrayAppendValue(v1, @"Cryptex1,MobileAssetBrainTrustCache");
    CFArrayAppendValue(v1, @"Cryptex1,CryptexInfoPlist");
    CFArrayAppendValue(v1, @"Cryptex1,GenericDmg");
    CFArrayAppendValue(v1, @"Cryptex1,GenericTrustCache");
    CFArrayAppendValue(v1, @"Cryptex1,GenericVolume");
    CFArrayAppendValue(v1, @"Cryptex1,GenericIntegrityCatalog");
  }
  return v1;
}

uint64_t _AMAuthInstallCryptex1Log(void (*a1)(uint64_t, const char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "%s failed: %@", 0x8000100u);
  if (v12)
  {
    CFStringRef v13 = CFStringCreateWithFormatAndArguments(v11, 0, v12, &a9);
    if (v13)
    {
      CStringPtr = CFStringGetCStringPtr(v13, 0x8000100u);
      a1(a2, CStringPtr);
    }
  }
  AMSupportSafeRelease();
  return AMSupportSafeRelease();
}

CFMutableDictionaryRef AMAuthInstallUpdaterCryptex1CopyFirmware()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    AMSupportCreateErrorInternal();
  }
  return Mutable;
}

__CFDictionary *AMAuthInstallUpdaterCryptex1CreateRequest(const __CFDictionary *a1, void (*a2)(uint64_t, const char *), uint64_t a3, void *a4)
{
  int valuePtr = -1;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  v53 = a2;
  uint64_t v54 = a3;
  if (!Mutable
    || (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"BuildIdentity")) == 0
    || (CFDictionaryRef v11 = Value, (v12 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"DeviceInfo")) == 0)
    || (v13 = v12, CFAllocatorRef v14 = _AMAuthInstallCryptex1CopyManifestProperties(), (v15 = v14) == 0))
  {
    AMSupportCreateErrorInternal();
    goto LABEL_39;
  }
  if (CFArrayGetCount(v14) >= 1)
  {
    CFIndex v16 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v15, v16);
      uint64_t v18 = CFDictionaryGetValue(v11, ValueAtIndex);
      if (v18) {
        CFDictionarySetValue(Mutable, ValueAtIndex, v18);
      }
      ++v16;
    }
    while (v16 < CFArrayGetCount(v15));
  }
  uint64_t v19 = _AMAuthInstallCryptex1CopyObjectTags();
  CFArrayRef v20 = v19;
  if (!v19)
  {
LABEL_45:
    AMSupportCreateErrorInternal();
    goto LABEL_39;
  }
  CFDictionaryRef v55 = v13;
  v56 = a4;
  if (CFArrayGetCount(v19) >= 1)
  {
    for (CFIndex i = 0; i < CFArrayGetCount(v20); ++i)
    {
      CFRange v22 = CFArrayGetValueAtIndex(v20, i);
      CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v11, v22);
      if (v23)
      {
        CFDictionaryRef v24 = v23;
        CFTypeID v25 = CFGetTypeID(v23);
        if (v25 == CFDictionaryGetTypeID())
        {
          uint64_t v26 = CFDictionaryGetValue(v24, @"Digest");
          if (v26)
          {
            uint64_t v27 = v26;
            CFTypeID v28 = CFGetTypeID(v26);
            if (v28 == CFDataGetTypeID())
            {
              uint64_t v29 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (!v29)
              {
                a4 = v56;
                goto LABEL_45;
              }
              uint64_t v30 = v29;
              CFDictionarySetValue(v29, @"Digest", v27);
              CFDictionarySetValue(Mutable, v22, v30);
              AMSupportSafeRelease();
            }
          }
        }
      }
    }
  }
  AMSupportCFDictionarySetBoolean();
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v11, @"Cryptex1,Type");
  if (v31)
  {
    CFNumberRef v32 = v31;
    CFTypeID v33 = CFGetTypeID(v31);
    if (v33 == CFNumberGetTypeID()) {
      CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
    }
  }
  int Boolean = AMSupportCFDictionaryGetBoolean();
  a4 = v56;
  if (Boolean)
  {
    AMSupportCFDictionarySetInteger32();
    CFDictionaryRemoveValue(Mutable, @"Cryptex1,NonceDomain");
    CFDictionaryRemoveValue(Mutable, @"Cryptex1,LiveNonceDomain");
    CFDictionaryRemoveValue(Mutable, @"Cryptex1,ExclaveNonceDomain");
    CFDictionaryRemoveValue(Mutable, @"Cryptex1,ExclaveLiveNonceDomain");
    if (valuePtr == 1)
    {
      AMSupportCFDictionaryGetBoolean();
      AMSupportCFDictionarySetInteger32();
    }
  }
  else
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    DeviceInfoCFDictionaryRef Value = (const __CFNumber *)_AMAuthInstallCryptex1GetDeviceInfoValue(v55, @"ApChipId", TypeID);
    if (!DeviceInfoValue) {
      goto LABEL_39;
    }
    CFNumberRef v37 = DeviceInfoValue;
    CFTypeID v38 = CFNumberGetTypeID();
    CFNumberRef v39 = (const __CFNumber *)_AMAuthInstallCryptex1GetDeviceInfoValue(v55, @"ApECID", v38);
    if (!v39) {
      goto LABEL_39;
    }
    CFNumberRef v40 = v39;
    *(void *)bytes = 0;
    unint64_t v59 = 0;
    CFNumberGetValue(v37, kCFNumberSInt32Type, &bytes[4]);
    CFNumberGetValue(v40, kCFNumberSInt64Type, &v59);
    *(_DWORD *)&bytes[4] = bswap32(*(unsigned int *)&bytes[4]);
    unint64_t v59 = bswap64(v59);
    CFDataRef v41 = CFDataCreate(v8, bytes, 16);
    if (!v41)
    {
      AMSupportCreateErrorInternal();
      goto LABEL_39;
    }
    CFDictionarySetValue(Mutable, @"Cryptex1,UDID", v41);
  }
  CFTypeID v42 = CFBooleanGetTypeID();
  CFDataRef v43 = _AMAuthInstallCryptex1GetDeviceInfoValue(v55, @"ApProductionMode", v42);
  if (v43)
  {
    CFDictionarySetValue(Mutable, @"Cryptex1,ProductionMode", v43);
    if (!Boolean)
    {
      if (_AMAuthInstallCryptex1RequestSetNonce(Mutable, @"Cryptex1,Nonce", v55, @"Nonce"))
      {
        if (valuePtr == 4)
        {
          if (_AMAuthInstallCryptex1RequestSetNonce(Mutable, @"Cryptex1,LiveNonce", v55, @"LiveNonce"))
          {
            if (_AMAuthInstallCryptex1RequestSetNonce(Mutable, @"Cryptex1,ExclaveNonce", v55, @"ExclaveNonce"))
            {
              if (_AMAuthInstallCryptex1RequestSetNonce(Mutable, @"Cryptex1,ExclaveLiveNonce", v55, @"ExclaveLiveNonce"))
              {
                CFTypeID v44 = CFDataGetTypeID();
                v45 = _AMAuthInstallCryptex1GetDeviceInfoValue(v55, @"BootUUID", v44);
                if (v45) {
                  CFDictionarySetValue(Mutable, @"Cryptex1,BootUUID", v45);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_39:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  if (a4 && *a4)
  {
    _AMAuthInstallCryptex1Log(v53, v54, v46, v47, v48, v49, v50, v51, (char)"AMAuthInstallUpdaterCryptex1CreateRequest");
    return 0;
  }
  return Mutable;
}

const void *_AMAuthInstallCryptex1GetDeviceInfoValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, a2);
  if (!Value || (uint64_t v5 = Value, CFGetTypeID(Value) != a3))
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  return v5;
}

uint64_t _AMAuthInstallCryptex1RequestSetNonce(__CFDictionary *a1, const void *a2, CFDictionaryRef theDict, void *key)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    CFAllocatorRef v7 = Value;
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFDataGetTypeID())
    {
      CFDictionarySetValue(a1, a2, v7);
      return 1;
    }
  }
  else
  {
    AMSupportLogInternal();
    memset(__buf, 0, sizeof(__buf));
    arc4random_buf(__buf, 0x30uLL);
    CFDataRef v9 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)__buf, 48);
    if (v9)
    {
      CFDictionarySetValue(a1, a2, v9);
      AMSupportSafeRelease();
      return 1;
    }
  }
  AMSupportCreateErrorInternal();
  return 0;
}

uint64_t AMAuthInstallCreate(const __CFAllocator *a1)
{
  pthread_once(&_AMAuthInstallClassInitializeOnce, (void (*)(void))_AMAuthInstallClassInitialize);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable || (CFURLRef cf = CFURLCreateWithString(a1, @"https://gs.apple.com:443/", 0)) == 0)
  {
    uint64_t v11 = 0;
    CFURLRef cf = 0;
LABEL_21:
    CFURLRef v19 = 0;
LABEL_23:
    CFURLRef v18 = 0;
LABEL_25:
    CFMutableDictionaryRef v17 = 0;
    CFMutableDictionaryRef v2 = 0;
LABEL_26:
    CFMutableDictionaryRef v3 = 0;
LABEL_27:
    CFMutableDictionaryRef v4 = 0;
LABEL_28:
    CFMutableDictionaryRef v5 = 0;
LABEL_29:
    CFMutableDictionaryRef v6 = 0;
LABEL_30:
    CFMutableDictionaryRef v7 = 0;
LABEL_31:
    CFMutableDictionaryRef v8 = 0;
LABEL_32:
    CFMutableDictionaryRef v9 = 0;
    goto LABEL_18;
  }
  CFURLRef v19 = CFURLCreateWithString(a1, @"http://vega-dr.apple.com:8080/vegads/fuser", 0);
  if (!v19)
  {
    uint64_t v11 = 0;
    goto LABEL_21;
  }
  CFURLRef v18 = CFURLCreateWithString(a1, @"http://treecko-dr.apple.com:8080/TREECKO/controller", 0);
  if (!v18)
  {
    uint64_t v11 = 0;
    goto LABEL_23;
  }
  CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v17)
  {
    uint64_t v11 = 0;
    goto LABEL_25;
  }
  CFMutableDictionaryRef v2 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v2)
  {
    uint64_t v11 = 0;
    goto LABEL_26;
  }
  CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v3)
  {
    uint64_t v11 = 0;
    goto LABEL_27;
  }
  CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v4)
  {
    uint64_t v11 = 0;
    goto LABEL_28;
  }
  CFMutableDictionaryRef v5 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v5)
  {
    uint64_t v11 = 0;
    goto LABEL_29;
  }
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v6)
  {
    uint64_t v11 = 0;
    goto LABEL_30;
  }
  CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v7)
  {
    uint64_t v11 = 0;
    goto LABEL_31;
  }
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v8)
  {
    uint64_t v11 = 0;
    goto LABEL_32;
  }
  CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v9)
  {
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v11 = Instance;
    if (Instance)
    {
      *(_OWORD *)(Instance + 496) = 0u;
      *(_OWORD *)(Instance + 512) = 0u;
      *(_OWORD *)(Instance + 464) = 0u;
      *(_OWORD *)(Instance + 480) = 0u;
      *(_OWORD *)(Instance + 432) = 0u;
      *(_OWORD *)(Instance + 448) = 0u;
      *(_OWORD *)(Instance + 400) = 0u;
      *(_OWORD *)(Instance + 416) = 0u;
      *(_OWORD *)(Instance + 368) = 0u;
      *(_OWORD *)(Instance + 384) = 0u;
      *(_OWORD *)(Instance + 336) = 0u;
      *(_OWORD *)(Instance + 352) = 0u;
      *(_OWORD *)(Instance + 304) = 0u;
      *(_OWORD *)(Instance + 320) = 0u;
      *(_OWORD *)(Instance + 272) = 0u;
      *(_OWORD *)(Instance + 288) = 0u;
      *(_OWORD *)(Instance + 240) = 0u;
      *(_OWORD *)(Instance + 256) = 0u;
      *(_OWORD *)(Instance + 208) = 0u;
      *(_OWORD *)(Instance + 224) = 0u;
      *(_OWORD *)(Instance + 176) = 0u;
      *(_OWORD *)(Instance + 192) = 0u;
      *(_OWORD *)(Instance + 144) = 0u;
      *(_OWORD *)(Instance + 160) = 0u;
      *(_OWORD *)(Instance + 112) = 0u;
      *(_OWORD *)(Instance + 128) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 96) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(unsigned char *)(Instance + 520) = 0;
      *(_WORD *)(Instance + 57) = 257;
      *(void *)(Instance + 72) = CFRetain(cf);
      *(_DWORD *)(v11 + 80) = 3;
      *(void *)(v11 + 352) = CFRetain(Mutable);
      *(void *)(v11 + 376) = CFRetain(v17);
      *(void *)(v11 + 384) = CFRetain(v2);
      *(void *)(v11 + 416) = CFRetain(v3);
      *(void *)(v11 + 160) = CFRetain(v19);
      *(void *)(v11 + 296) = CFRetain(v18);
      *(void *)(v11 + 88) = @"ApImg4Ticket";
      *(void *)(v11 + 200) = CFRetain(v4);
      *(void *)(v11 + 208) = CFRetain(v5);
      *(void *)(v11 + 216) = CFRetain(v6);
      uint64_t v12 = calloc(1uLL, 0x30uLL);
      *(void *)(v11 + 128) = v12;
      if (v12)
      {
        CFTypeRef v13 = CFRetain(v7);
        uint64_t v14 = *(void *)(v11 + 128);
        *(void *)uint64_t v14 = v13;
        *(void *)(v14 + 40) = 0;
        *(_OWORD *)(v14 + 24) = 0u;
        *(_OWORD *)(v14 + 8) = 0u;
        *(void *)(v11 + 496) = 0;
        *(unsigned char *)(v11 + 504) = 0;
        *(void *)(v11 + 440) = _AMAuthInstallNoopUpdaterAddTags;
        *(void *)(v11 + 448) = _AMAuthInstallNoopUpdaterWriteManifests;
        *(void *)(v11 + 456) = CFRetain(v8);
        *(void *)(v11 + 464) = CFRetain(v9);
        *(void *)(v11 + 488) = 0;
        *(void *)(v11 + 512) = 0;
        *(void *)(v11 + 360) = AMAuthInstallLockCreate();
      }
      else
      {
        _AMAuthInstallFinalize(v11);
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_18:
  SafeRelease(Mutable);
  SafeRelease(cf);
  SafeRelease(v19);
  SafeRelease(v18);
  SafeRelease(v17);
  SafeRelease(v2);
  SafeRelease(v3);
  SafeRelease(0);
  SafeRelease(v4);
  SafeRelease(v5);
  SafeRelease(v6);
  SafeRelease(v7);
  SafeRelease(v8);
  SafeRelease(v9);
  return v11;
}

double _AMAuthInstallFinalize(uint64_t a1)
{
  if (!a1) {
    _AMAuthInstallFinalize_cold_1();
  }
  if (!*(unsigned char *)(a1 + 520))
  {
    *(unsigned char *)(a1 + 520) = 1;
    AMAuthInstallApFinalize(a1);
    AMAuthInstallBasebandFinalize(a1, v2, v3, v4, v5, v6, v7, v8);
    AMAuthInstallBundleFinalize(a1);
    SafeRelease(*(CFTypeRef *)(a1 + 120));
    SafeRelease(*(CFTypeRef *)(a1 + 376));
    SafeRelease(*(CFTypeRef *)(a1 + 384));
    SafeRelease(*(CFTypeRef *)(a1 + 416));
    SafeRelease(*(CFTypeRef *)(a1 + 336));
    SafeRelease(*(CFTypeRef *)(a1 + 96));
    SafeRelease(*(CFTypeRef *)(a1 + 72));
    SafeRelease(*(CFTypeRef *)(a1 + 88));
    SafeRelease(*(CFTypeRef *)(a1 + 64));
    SafeRelease(*(CFTypeRef *)(a1 + 352));
    SafeRelease(*(CFTypeRef *)(a1 + 296));
    SafeRelease(*(CFTypeRef *)(a1 + 312));
    SafeRelease(*(CFTypeRef *)(a1 + 320));
    SafeRelease(*(CFTypeRef *)(a1 + 424));
    SafeRelease(*(CFTypeRef *)(a1 + 456));
    SafeRelease(*(CFTypeRef *)(a1 + 464));
    SafeRelease(*(CFTypeRef *)(a1 + 472));
    SafeRelease(*(CFTypeRef *)(a1 + 480));
    SafeRelease(*(CFTypeRef *)(a1 + 496));
    SafeRelease(*(CFTypeRef *)(a1 + 40));
    SafeRelease(*(CFTypeRef *)(a1 + 512));
    SafeRelease(*(CFTypeRef *)(a1 + 360));
    SafeRelease(*(CFTypeRef *)(a1 + 488));
    double result = 0.0;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return result;
}

uint64_t _AMAuthInstallNoopUpdaterAddTags()
{
  return 1;
}

uint64_t _AMAuthInstallNoopUpdaterWriteManifests()
{
  return 1;
}

uint64_t AMAuthInstallBasebandPersonalizationEnabled(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 58);
  }
  return result;
}

uint64_t AMAuthInstallBasebandEnablePersonalization(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 58) = a2;
  return result;
}

uint64_t AMAuthInstallApPersonalizationEnabled(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 57);
  }
  return result;
}

uint64_t AMAuthInstallApEnablePersonalization(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 57) = a2;
  return result;
}

uint64_t AMAuthInstallBasebandSetVendorData(uint64_t a1, CFTypeRef cf)
{
  if (!a1) {
    return 1;
  }
  uint64_t v4 = *(const void **)(a1 + 136);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 136) = 0;
  }
  if (!cf) {
    return 0;
  }
  CFTypeRef v5 = CFRetain(cf);
  uint64_t result = 0;
  *(void *)(a1 + 136) = v5;
  return result;
}

uint64_t AMAuthInstallBasebandSetVinylData(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  if (!a1) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (!v9) {
    return 1;
  }
  SafeRelease(*(CFTypeRef *)(v9 + 120));
  CFTypeRef v17 = CFRetain(a2);
  uint64_t v18 = *(void *)(a1 + 48);
  *(void *)(v18 + 120) = v17;
  SafeRelease(*(CFTypeRef *)(v18 + 128));
  CFTypeRef v19 = CFRetain(a3);
  uint64_t v20 = *(void *)(a1 + 48);
  *(void *)(v20 + 128) = v19;
  SafeRelease(*(CFTypeRef *)(v20 + 136));
  CFTypeRef v21 = CFRetain(a4);
  uint64_t v22 = *(void *)(a1 + 48);
  *(void *)(v22 + 136) = v21;
  SafeRelease(*(CFTypeRef *)(v22 + 144));
  CFTypeRef v23 = CFRetain(a5);
  uint64_t v24 = *(void *)(a1 + 48);
  *(void *)(v24 + 144) = v23;
  SafeRelease(*(CFTypeRef *)(v24 + 152));
  CFTypeRef v25 = CFRetain(a6);
  uint64_t v26 = *(void *)(a1 + 48);
  *(void *)(v26 + 152) = v25;
  SafeRelease(*(CFTypeRef *)(v26 + 160));
  CFTypeRef v27 = CFRetain(a7);
  uint64_t v28 = *(void *)(a1 + 48);
  *(void *)(v28 + 160) = v27;
  SafeRelease(*(CFTypeRef *)(v28 + 168));
  CFTypeRef v29 = CFRetain(a8);
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 48) + 168) = v29;
  return result;
}

__CFString *AMAuthInstallGetLocalizedStatusString(CFDictionaryRef *cf, int a2)
{
  int valuePtr = a2;
  if (a2 > 98)
  {
    switch(a2)
    {
      case 3500:
        CFDictionaryRef Value = @"The signing server returned an internal error";
        break;
      case 3501:
        CFDictionaryRef Value = @"You must authorize with the signing server before making this request";
        break;
      case 3502:
      case 3505:
      case 3506:
        goto LABEL_34;
      case 3503:
        CFDictionaryRef Value = @"You are not authorized to make this request. Please check your device or credentials";
        break;
      case 3504:
        CFDictionaryRef Value = @"The signing server could not find the resource requested";
        break;
      case 3507:
        CFDictionaryRef Value = @"You must authorize with a proxy server before making this request";
        break;
      default:
        if (a2 == 99)
        {
          CFDictionaryRef Value = @"Generic";
        }
        else if (a2 == 3194)
        {
          CFDictionaryRef Value = @"Declined to authorize this image on this device for this user.";
        }
        else
        {
LABEL_34:
          CFDictionaryRef Value = &stru_26C809658;
          if (cf)
          {
            if ((a2 - 3100) <= 0x383)
            {
              CFAllocatorRef v4 = CFGetAllocator(cf);
              CFNumberRef v5 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
              if (v5)
              {
                CFNumberRef v6 = v5;
                CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(cf[44], v5);
                CFRelease(v6);
                if (!Value) {
                  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallGetLocalizedStatusString", (uint64_t)"no cached text for tss error code %d", v7, v8, v9, v10, v11, valuePtr);
                }
              }
            }
          }
        }
        break;
    }
  }
  else
  {
    CFDictionaryRef Value = @"No error";
    switch(a2)
    {
      case 0:
        return Value;
      case 1:
        CFDictionaryRef Value = @"Bad parameter";
        break;
      case 2:
        CFDictionaryRef Value = @"Allocation error";
        break;
      case 3:
        CFDictionaryRef Value = @"Conversion error";
        break;
      case 4:
        CFDictionaryRef Value = @"File error";
        break;
      case 5:
        CFDictionaryRef Value = @"Hash error";
        break;
      case 6:
        CFDictionaryRef Value = @"Crypto error";
        break;
      case 7:
        CFDictionaryRef Value = @"Bad build identity";
        break;
      case 8:
        CFDictionaryRef Value = @"Entry not found";
        break;
      case 9:
        CFDictionaryRef Value = @"Invalid img3 object";
        break;
      case 10:
        CFDictionaryRef Value = @"Invalid bbfw object";
        break;
      case 11:
        CFDictionaryRef Value = @"Server not reachable";
        break;
      case 12:
        CFDictionaryRef Value = @"Server timed out";
        break;
      case 13:
        CFDictionaryRef Value = @"Unimplemented";
        break;
      case 14:
        CFDictionaryRef Value = @"Internal error";
        break;
      case 15:
        CFDictionaryRef Value = @"Invalid bbfw file";
        break;
      case 16:
        CFDictionaryRef Value = @"Network error";
        break;
      case 17:
        CFDictionaryRef Value = @"Bad response";
        break;
      case 18:
        CFDictionaryRef Value = @"Fusing failed";
        break;
      case 19:
        CFDictionaryRef Value = @"Baseband provisioning failed";
        break;
      case 20:
        CFDictionaryRef Value = @"AppleConnect not found";
        break;
      case 21:
        CFDictionaryRef Value = @"AppleConnect user canceled";
        break;
      case 22:
        CFDictionaryRef Value = @"AppleConnect bad credentials";
        break;
      default:
        goto LABEL_34;
    }
  }
  return Value;
}

uint64_t AMAuthInstallSetSigningServer(CFTypeRef *a1, uint64_t a2, unsigned int a3)
{
  CFStringRef v3 = 0;
  uint64_t v4 = 1;
  if (a1)
  {
    CFURLRef v6 = 0;
    if (a2)
    {
      CFAllocatorRef v9 = CFGetAllocator(a1);
      CFStringRef v3 = CFStringCreateWithFormat(v9, 0, @"http://%@:%u", a2, a3);
      if (v3)
      {
        CFAllocatorRef v10 = CFGetAllocator(a1);
        CFURLRef v6 = CFURLCreateWithString(v10, v3, 0);
        if (v6)
        {
          SafeRelease(a1[9]);
          uint64_t v4 = 0;
          a1[9] = CFRetain(v6);
        }
        else
        {
          uint64_t v4 = 99;
        }
      }
      else
      {
        CFURLRef v6 = 0;
        uint64_t v4 = 2;
      }
    }
  }
  else
  {
    CFURLRef v6 = 0;
  }
  SafeRelease(v3);
  SafeRelease(v6);
  return v4;
}

uint64_t AMAuthInstallSetSigningServerURL(uint64_t a1, const void *a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    CFNumberRef v5 = *(const void **)(a1 + 72);
    if (v5 == a2)
    {
      return 0;
    }
    else
    {
      SafeRelease(v5);
      CFTypeRef v6 = CFRetain(a2);
      uint64_t result = 0;
      *(void *)(a1 + 72) = v6;
    }
  }
  return result;
}

uint64_t AMAuthInstallSetSigningServerRetry(uint64_t a1, int a2)
{
  uint64_t result = 1;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 80) = a2;
    }
  }
  return result;
}

uint64_t AMAuthInstallSetFusingServerURL(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    uint64_t v11 = *(const void **)(a1 + 160);
    if (v11 != a2)
    {
      SafeRelease(v11);
      *(void *)(a1 + 160) = CFRetain(a2);
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallSetFusingServerURL", (uint64_t)"fusing server: %@", a4, a5, a6, a7, a8, (char)a2);
    return 0;
  }
  return result;
}

uint64_t AMAuthInstallSetLocale(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4 == a2) {
    return 0;
  }
  SafeRelease(v4);
  CFTypeRef v5 = SafeRetain(a2);
  uint64_t result = 0;
  *(void *)(a1 + 64) = v5;
  return result;
}

uint64_t AMAuthInstallSetDebugFlags(uint64_t a1, int a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 344) = a2;
  return result;
}

uint64_t AMAuthInstallSetUUID(uint64_t a1, const void *a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    CFTypeRef v5 = *(const void **)(a1 + 96);
    if (v5 == a2)
    {
      return 0;
    }
    else
    {
      SafeRelease(v5);
      CFTypeRef v6 = CFRetain(a2);
      uint64_t result = 0;
      *(void *)(a1 + 96) = v6;
    }
  }
  return result;
}

uint64_t AMAuthInstallGetTypeID()
{
  return _AMAuthInstallTypeID;
}

void AMAuthInstallApplyRequestEntries(const __CFString *a1, const __CFDictionary *a2, void *a3)
{
  if (CFEqual(a1, @"@ApImg4Ticket"))
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      uint64_t v7 = (void (__cdecl *)(const void *, const void *, void *))_AMAuthInstallApplyApRequestEntries;
LABEL_7:
      CFDictionaryApplyFunction(a2, v7, a3);
      return;
    }
  }
  if (CFEqual(a1, @"@BBTicket"))
  {
    CFTypeID v8 = CFDictionaryGetTypeID();
    if (v8 == CFGetTypeID(a2))
    {
      uint64_t v7 = (void (__cdecl *)(const void *, const void *, void *))_AMAuthInstallApplyBbRequestEntries;
      goto LABEL_7;
    }
  }
  if (CFStringHasPrefix(a1, @"Ap"))
  {
    CFAllocatorRef v9 = @"ApRequestEntries";
LABEL_14:
    AMAuthInstallSetRequestEntry(a3, v9, a1, a2);
    return;
  }
  if (CFStringHasPrefix(a1, @"Bb"))
  {
    CFAllocatorRef v9 = @"BbRequestEntries";
    goto LABEL_14;
  }
  if (CFStringHasPrefix(a1, @"FDR"))
  {
    AMAuthInstallSetFDRRequestEntry(a3, a1, a2);
  }
}

uint64_t _AMAuthInstallApplyApRequestEntries(const void *a1, const void *a2, CFTypeRef cf)
{
  return AMAuthInstallSetRequestEntry(cf, @"ApRequestEntries", a1, a2);
}

uint64_t _AMAuthInstallApplyBbRequestEntries(const void *a1, const void *a2, CFTypeRef cf)
{
  return AMAuthInstallSetRequestEntry(cf, @"BbRequestEntries", a1, a2);
}

uint64_t AMAuthInstallSetApRequestEntry(const void *a1, const void *a2, const void *a3)
{
  return AMAuthInstallSetRequestEntry(a1, @"ApRequestEntries", a2, a3);
}

uint64_t AMAuthInstallSetBbRequestEntry(const void *a1, const void *a2, const void *a3)
{
  return AMAuthInstallSetRequestEntry(a1, @"BbRequestEntries", a2, a3);
}

uint64_t AMAuthInstallSetFDRRequestEntry(const void *a1, const void *a2, const void *a3)
{
  uint64_t v6 = AMAuthInstallSetRequestEntry(a1, @"ApRequestEntries", a2, a3);
  if (v6)
  {
    uint64_t v12 = v6;
    uint64_t v14 = "failed to set FDR entry in Ap request";
LABEL_6:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSetFDRRequestEntry", (uint64_t)v14, v7, v8, v9, v10, v11, v15);
    return v12;
  }
  uint64_t v12 = AMAuthInstallSetRequestEntry(a1, @"BbRequestEntries", a2, a3);
  if (v12)
  {
    uint64_t v14 = "failed to set FDR entry in Bb request";
    goto LABEL_6;
  }
  return v12;
}

uint64_t AMAuthInstallSetEntitlements(void *context, CFDictionaryRef theDict)
{
  uint64_t result = 1;
  if (context)
  {
    if (theDict)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)AMAuthInstallApplyRequestEntries, context);
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallSetRequestEntry(CFTypeRef cf, void *key, const void *a3, const void *a4)
{
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v5 = 1;
  if (cf && key && a3 && a4)
  {
    CFDictionaryRef v10 = (const __CFDictionary *)*((void *)cf + 53);
    if (v10
      || (CFAllocatorRef v11 = CFGetAllocator(cf),
          CFDictionaryRef v10 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]),
          (*((void *)cf + 53) = v10) != 0))
    {
      CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(v10, key);
      if (Value)
      {
        CFMutableDictionaryRef Mutable = Value;
        CFRetain(Value);
LABEL_11:
        CFDictionarySetValue(Mutable, a3, a4);
        uint64_t v5 = 0;
        goto LABEL_12;
      }
      CFAllocatorRef v13 = CFGetAllocator(cf);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFDictionarySetValue(*((CFMutableDictionaryRef *)cf + 53), key, Mutable);
        goto LABEL_11;
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    uint64_t v5 = 2;
  }
LABEL_12:
  SafeRelease(Mutable);
  return v5;
}

uint64_t AMAuthInstallSetObjectRequestEntry(const void *a1, const void *a2, const void *a3)
{
  return AMAuthInstallSetRequestEntry(a1, @"ObjectRequestEntries", a2, a3);
}

uint64_t AMAuthInstallSetUpdaterRequestEntry(const void *a1, const void *a2, const void *a3)
{
  return AMAuthInstallSetRequestEntry(a1, @"UpdaterRequestEntries", a2, a3);
}

uint64_t AMAuthInstallSetSOCKSProxyInformation(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    if (a3)
    {
      if (a1)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (Mutable)
        {
          uint64_t v12 = Mutable;
          CFDictionarySetValue(Mutable, @"SOCKSProxy", a2);
          CFDictionarySetValue(v12, @"SOCKSPort", a3);
          AMAuthInstallSetSOCKSProxyDict(a1, v12, v13, v14, v15, v16, v17, v18);
          CFRelease(v12);
          return 0;
        }
        uint64_t v20 = "Created proxy dictionary is NULL";
      }
      else
      {
        uint64_t v20 = "amai is NULL";
      }
    }
    else
    {
      uint64_t v20 = "SOCKS proxy port is NULL";
    }
  }
  else
  {
    uint64_t v20 = "SOCKS proxy host is NULL";
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSetSOCKSProxyInformation", (uint64_t)v20, a4, a5, a6, a7, a8, v21);
  return 99;
}

uint64_t AMAuthInstallSetSOCKSProxyDict(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf)
  {
    uint64_t v13 = "SOCKS proxy dict is NULL";
LABEL_8:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSetSOCKSProxyDict", (uint64_t)v13, a4, a5, a6, a7, a8, v14);
    return 99;
  }
  if (!a1)
  {
    uint64_t v13 = "amai is NULL";
    goto LABEL_8;
  }
  CFDictionaryRef v10 = *(const void **)(a1 + 488);
  if (v10) {
    CFRelease(v10);
  }
  CFTypeRef v11 = CFRetain(cf);
  uint64_t result = 0;
  *(void *)(a1 + 488) = v11;
  return result;
}

uint64_t AMAuthInstallCreateRecoveryOSBuildIdentityAssetList(CFArrayRef *a1)
{
  v4[13] = *(const void **)MEMORY[0x263EF8340];
  v4[0] = @"RecoveryOSOS";
  v4[1] = @"RecoveryOSKernelCache";
  v4[2] = @"RecoveryOSDeviceTree";
  v4[3] = @"RecoveryOSiBEC";
  v4[4] = @"RecoveryOSAppleLogo";
  v4[5] = @"RecoveryOSStaticTrustCache";
  v4[6] = @"RecoveryOSiBootData";
  v4[7] = @"RecoveryOSDiags";
  v4[8] = @"RecoveryOSAp,SystemVolumeCanonicalMetadata";
  v4[9] = @"RecoveryOSSystemVolume";
  v4[10] = @"RecoveryOSBaseSystemVolume";
  v4[11] = @"RecoveryOSAp,BaseSystemTrustCache";
  v4[12] = @"RecoveryOSAVISP1,RTKitOS";
  CFArrayRef v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v4, 13, MEMORY[0x263EFFF70]);
  *a1 = v2;
  if (v2) {
    return 0;
  }
  else {
    return 99;
  }
}

uint64_t AMAuthInstallSetRecoveryOSVariant(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 1;
  }
  SafeRelease(*(CFTypeRef *)(a1 + 496));
  CFTypeRef v4 = SafeRetain(a2);
  uint64_t result = 0;
  *(void *)(a1 + 496) = v4;
  return result;
}

uint64_t AMAuthInstallSetFusingRootCA(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    if (a1)
    {
      SafeRelease(*(CFTypeRef *)(a1 + 192));
      *(void *)(a1 + 192) = CFRetain(a2);
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallSetFusingRootCA", (uint64_t)"RootCA has been set!", v10, v11, v12, v13, v14, v17);
      return 0;
    }
    uint64_t v16 = "amai is NULL";
  }
  else
  {
    uint64_t v16 = "Given rootCA is NULL";
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSetFusingRootCA", (uint64_t)v16, a4, a5, a6, a7, a8, v17);
  return 99;
}

uint64_t AMAuthInstallSetMacOSVariantIsPresent(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 504) = a2;
  return result;
}

uint64_t AMAuthInstallGetMacOSVariantIsPresent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 504);
}

uint64_t AMAuthInstallAddTrustedSSLCACert(uint64_t a1, CFTypeRef cf)
{
  uint64_t result = 1;
  if (a1 && cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFDataGetTypeID())
    {
      CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 512);
      if (Mutable
        || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]),
            (*(void *)(a1 + 512) = Mutable) != 0))
      {
        CFArrayAppendValue(Mutable, cf);
        return 0;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void AMAuthInstallClearTrustedSSLCACerts(uint64_t a1)
{
  if (a1)
  {
    SafeRelease(*(CFTypeRef *)(a1 + 512));
    *(void *)(a1 + 512) = 0;
  }
}

uint64_t _AMAuthInstallClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  _AMAuthInstallCFTypeID TypeID = result;
  return result;
}

CFStringRef _AMAuthInstallCopyFormattingDescription(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1) {
    _AMAuthInstallCopyFormattingDescription_cold_1();
  }
  CFTypeRef v4 = AMAuthInstallApCopyDescription(a1);
  CFTypeID v5 = AMAuthInstallBasebandCopyDescription(a1);
  CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v7 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 64)) {
    uint64_t v8 = *(__CFString **)(a1 + 64);
  }
  else {
    uint64_t v8 = @"default";
  }
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v9 = @"YES";
  }
  else {
    uint64_t v9 = @"NO";
  }
  if (*(void *)(a1 + 104)) {
    uint64_t v10 = @"YES";
  }
  else {
    uint64_t v10 = @"NO";
  }
  LibraryVersionString = AMAuthInstallSupportGetLibraryVersionString();
  uint64_t PlatformInfoString = AMAuthInstallPlatformGetPlatformInfoString();
  CFStringRef v13 = CFStringCreateWithFormat(v6, a2, @"<AMAuthInstall %p>{ap=%@, bp=%@, UserAuth=%@, iTunes=%@, server=\"%@\", locale=%@, version=\"%@\", platform=%@}", a1, v4, v5, v10, v9, v7, v8, LibraryVersionString, PlatformInfoString);
  SafeRelease(v4);
  SafeRelease(v5);
  return v13;
}

CFStringRef _AMAuthInstallCopyDebugDescription(uint64_t a1)
{
  return _AMAuthInstallCopyFormattingDescription(a1, 0);
}

uint64_t AMAuthInstallApServerRequestAddRequiredTagsWithRecoveryOS(void *a1, __CFDictionary *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 1;
  if (!a1 || !a2) {
    return v8;
  }
  int v10 = a4;
  uint64_t v13 = a1[2];
  if (v13)
  {
    if (*(unsigned char *)(v13 + 96))
    {
      if (a4) {
        uint64_t v14 = AMAuthInstallApImg4ServerRequestAddRequiredTagsWithRecoveryOS(a1, a2, a3, 1);
      }
      else {
        uint64_t v14 = AMAuthInstallApImg4ServerRequestAddRequiredTags(a1, a2, a3);
      }
      uint64_t v8 = v14;
      if (v14)
      {
        uint64_t v20 = "failed to add Ap Img4 tags";
LABEL_14:
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApServerRequestAddRequiredTagsWithRecoveryOS", (uint64_t)v20, v15, v16, v17, v18, v19, v22);
        return v8;
      }
      return v8;
    }
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApIsImg4", (uint64_t)"%s: apParameters is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallApIsImg4");
  }
  uint64_t v8 = AMAuthInstallApImg3ServerRequestAddRequiredTags(a1, a2, a3, v10);
  if (v8)
  {
    uint64_t v20 = "failed to add Ap Img3 tags";
    goto LABEL_14;
  }
  return v8;
}

uint64_t AMAuthInstallApIsImg4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApIsImg4", (uint64_t)"%s: amai is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallApIsImg4");
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApIsImg4", (uint64_t)"%s: apParameters is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallApIsImg4");
    return 0;
  }
  return *(unsigned __int8 *)(v8 + 96);
}

uint64_t AMAuthInstallApServerRequestAddRequiredTags(void *a1, __CFDictionary *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return AMAuthInstallApServerRequestAddRequiredTagsWithRecoveryOS(a1, a2, a3, 0, a5, a6, a7, a8);
}

uint64_t AMAuthInstallApSupportsLocalSigning(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      if (*(unsigned char *)(v11 + 96))
      {
        char v12 = AMAuthInstallApImg4SupportsLocalSigning(a1);
LABEL_8:
        char v13 = v12;
        uint64_t result = 0;
        *a2 = v13;
        return result;
      }
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApIsImg4", (uint64_t)"%s: apParameters is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallApIsImg4");
    }
    char v12 = AMAuthInstallApImg3SupportsLocalSigning();
    goto LABEL_8;
  }
  return result;
}

uint64_t AMAuthInstallApSupportsGlobalSigning(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      if (*(unsigned char *)(v11 + 96))
      {
        BOOL v12 = AMAuthInstallApImg4SupportsGlobalSigning(a1);
        uint64_t result = 0;
        *a2 = v12;
        return result;
      }
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApIsImg4", (uint64_t)"%s: apParameters is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallApIsImg4");
    }
    return 13;
  }
  return result;
}

uint64_t AMAuthInstallApSetFusings(uint64_t a1, uint64_t a2, int a3, int a4, int a5, char a6)
{
  if (!a1) {
    return 1;
  }
  BOOL v12 = *(void **)(a1 + 16);
  if (v12) {
    free(v12);
  }
  char v13 = calloc(1uLL, 0xC8uLL);
  *(void *)(a1 + 16) = v13;
  if (!v13) {
    return 2;
  }
  uint64_t v14 = v13;
  uint64_t result = 0;
  *(void *)uint64_t v14 = a2;
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  *((unsigned char *)v14 + 20) = a6;
  return result;
}

uint64_t AMAuthInstallApSetParameters(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2 = 1;
  if (a1 && theDict)
  {
    if (!*(void *)(a1 + 16))
    {
      CFTypeID v5 = calloc(1uLL, 0xC8uLL);
      *(void *)(a1 + 16) = v5;
      if (!v5) {
        return 2;
      }
      v5[4] = 1;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ECID");
    if (Value)
    {
      CFNumberRef v7 = Value;
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 == CFNumberGetTypeID() && !CFNumberGetValue(v7, kCFNumberSInt64Type, *(void **)(a1 + 16)))
      {
        char v124 = (char)v7;
        v123 = "failed to convert ECID %@";
        goto LABEL_121;
      }
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ApChipID");
    if (v14)
    {
      CFNumberRef v15 = v14;
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 == CFNumberGetTypeID()
        && !CFNumberGetValue(v15, kCFNumberSInt32Type, (void *)(*(void *)(a1 + 16) + 8)))
      {
        char v124 = (char)v15;
        v123 = "failed to convert chip ID %@";
        goto LABEL_121;
      }
    }
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ApBoardID");
    if (v17)
    {
      CFNumberRef v18 = v17;
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 == CFNumberGetTypeID()
        && !CFNumberGetValue(v18, kCFNumberSInt32Type, (void *)(*(void *)(a1 + 16) + 12)))
      {
        char v124 = (char)v18;
        v123 = "failed to convert board ID %@";
        goto LABEL_121;
      }
    }
    uint64_t v20 = CFDictionaryGetValue(theDict, @"ApSikaFuse");
    if (v20)
    {
      char v21 = v20;
      CFTypeID v22 = CFGetTypeID(v20);
      if (v22 == CFNumberGetTypeID())
      {
        AMSupportSafeRelease();
        *(void *)(*(void *)(a1 + 16) + 160) = CFRetain(v21);
      }
    }
    CFTypeRef v23 = CFDictionaryGetValue(theDict, @"UIDMode");
    if (v23)
    {
      uint64_t v24 = v23;
      CFTypeID v25 = CFGetTypeID(v23);
      if (v25 == CFBooleanGetTypeID())
      {
        AMSupportSafeRelease();
        *(void *)(*(void *)(a1 + 16) + 168) = CFRetain(v24);
      }
    }
    uint64_t v26 = CFDictionaryGetValue(theDict, @"RequiresUIDMode");
    if (v26)
    {
      CFTypeRef v27 = v26;
      CFTypeID v28 = CFGetTypeID(v26);
      if (v28 == CFBooleanGetTypeID())
      {
        AMSupportSafeRelease();
        *(void *)(*(void *)(a1 + 16) + 176) = CFRetain(v27);
      }
    }
    CFTypeRef v29 = CFDictionaryGetValue(theDict, @"Ap,EphemeralDataMode");
    if (v29)
    {
      uint64_t v30 = v29;
      CFTypeID v31 = CFGetTypeID(v29);
      if (v31 == CFBooleanGetTypeID())
      {
        AMSupportSafeRelease();
        *(void *)(*(void *)(a1 + 16) + 184) = CFRetain(v30);
      }
    }
    CFNumberRef v32 = CFDictionaryGetValue(theDict, @"Ap,DisablePlatformOnlyCode");
    if (v32)
    {
      CFTypeID v33 = v32;
      CFTypeID v34 = CFGetTypeID(v32);
      if (v34 == CFBooleanGetTypeID())
      {
        AMSupportSafeRelease();
        *(void *)(*(void *)(a1 + 16) + 192) = CFRetain(v33);
      }
    }
    CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ApSecurityDomain");
    if (v35)
    {
      CFNumberRef v36 = v35;
      CFTypeID v37 = CFGetTypeID(v35);
      if (v37 == CFNumberGetTypeID()
        && !CFNumberGetValue(v36, kCFNumberSInt32Type, (void *)(*(void *)(a1 + 16) + 16)))
      {
        char v124 = (char)v36;
        v123 = "failed to convert security domain %@";
        goto LABEL_121;
      }
    }
    CFBooleanRef v38 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApProductionMode");
    if (v38)
    {
      CFBooleanRef v39 = v38;
      CFTypeID v40 = CFGetTypeID(v38);
      if (v40 == CFBooleanGetTypeID()) {
        *(unsigned char *)(*(void *)(a1 + 16) + 20) = CFBooleanGetValue(v39);
      }
    }
    CFBooleanRef v41 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApSupportsImg4");
    if (v41)
    {
      CFBooleanRef v42 = v41;
      CFTypeID v43 = CFGetTypeID(v41);
      if (v43 == CFBooleanGetTypeID()) {
        *(unsigned char *)(*(void *)(a1 + 16) + 96) = CFBooleanGetValue(v42);
      }
    }
    CFStringRef v44 = (const __CFString *)CFDictionaryGetValue(theDict, @"ApImg4DigestType");
    if (v44 && (v45 = v44, CFTypeID v46 = CFGetTypeID(v44), v46 == CFStringGetTypeID()))
    {
      if (CFStringCompare(v45, @"sha1", 1uLL) == kCFCompareEqualTo)
      {
        *(_DWORD *)(*(void *)(a1 + 16) + 112) = 1;
LABEL_47:
        uint64_t v54 = CFDictionaryGetValue(theDict, @"ApNonce");
        if (v54)
        {
          CFDictionaryRef v55 = v54;
          CFTypeID v56 = CFGetTypeID(v54);
          if (v56 == CFDataGetTypeID()) {
            *(void *)(*(void *)(a1 + 16) + 24) = CFRetain(v55);
          }
        }
        v57 = CFDictionaryGetValue(theDict, @"SepNonce");
        if (v57)
        {
          v58 = v57;
          CFTypeID v59 = CFGetTypeID(v57);
          if (v59 == CFDataGetTypeID())
          {
            uint64_t v60 = AMAuthInstallApImg4SetSepNonce(a1, v58);
            if (v60) {
              return v60;
            }
          }
        }
        v61 = CFDictionaryGetValue(theDict, @"ApNonceSlotID");
        if (v61)
        {
          v62 = v61;
          CFTypeID v63 = CFGetTypeID(v61);
          if (v63 == CFNumberGetTypeID()) {
            AMAuthInstallApImg4SetApNonceSlotID(a1, v62);
          }
        }
        v64 = CFDictionaryGetValue(theDict, @"SepNonceSlotID");
        if (v64)
        {
          v65 = v64;
          CFTypeID v66 = CFGetTypeID(v64);
          if (v66 == CFNumberGetTypeID()) {
            AMAuthInstallApImg4SetSepNonceSlotID(a1, v65);
          }
        }
        v67 = CFDictionaryGetValue(theDict, @"Ap,SoftwareNonceForUpdateFreshness");
        if (v67)
        {
          v68 = v67;
          CFTypeID v69 = CFGetTypeID(v67);
          if (v69 == CFDataGetTypeID()) {
            *(void *)(*(void *)(a1 + 16) + 40) = CFRetain(v68);
          }
        }
        CFBooleanRef v70 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApSecurityMode");
        if (v70)
        {
          CFBooleanRef v71 = v70;
          CFTypeID v72 = CFGetTypeID(v70);
          if (v72 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 72) = CFBooleanGetValue(v71);
          }
        }
        CFBooleanRef v73 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApInRomDFU");
        if (v73)
        {
          CFBooleanRef v74 = v73;
          CFTypeID v75 = CFGetTypeID(v73);
          if (v75 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 80) = CFBooleanGetValue(v74);
          }
        }
        CFBooleanRef v76 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApEffectiveSecurityMode");
        if (v76)
        {
          CFBooleanRef v77 = v76;
          CFTypeID v78 = CFGetTypeID(v76);
          if (v78 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 82) = CFBooleanGetValue(v77);
          }
        }
        CFBooleanRef v79 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApEffectiveProductionMode");
        if (v79)
        {
          CFBooleanRef v80 = v79;
          CFTypeID v81 = CFGetTypeID(v79);
          if (v81 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 81) = CFBooleanGetValue(v80);
          }
        }
        v82 = CFDictionaryGetValue(theDict, @"DemotionPolicy");
        if (v82 && (v83 = v82, CFTypeID v84 = CFGetTypeID(v82), v84 == CFStringGetTypeID())) {
          v85 = (__CFString *)CFRetain(v83);
        }
        else {
          v85 = &stru_26C809658;
        }
        *(void *)(*(void *)(a1 + 16) + 88) = v85;
        v86 = CFDictionaryGetValue(theDict, @"HardwareModel");
        if (v86)
        {
          v87 = v86;
          CFTypeID v88 = CFGetTypeID(v86);
          if (v88 == CFStringGetTypeID()) {
            *(void *)(*(void *)(a1 + 16) + 104) = CFRetain(v87);
          }
        }
        CFBooleanRef v89 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApX86");
        if (v89)
        {
          CFBooleanRef v90 = v89;
          CFTypeID v91 = CFGetTypeID(v89);
          if (v91 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 116) = CFBooleanGetValue(v90);
          }
        }
        CFBooleanRef v92 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"UseGlobalSigning");
        if (v92)
        {
          CFBooleanRef v93 = v92;
          CFTypeID v94 = CFGetTypeID(v92);
          if (v94 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 79) = CFBooleanGetValue(v93);
          }
        }
        CFBooleanRef v95 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"Ap,InternalUseOnlySW");
        if (v95)
        {
          CFBooleanRef v96 = v95;
          CFTypeID v97 = CFGetTypeID(v95);
          if (v97 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 75) = CFBooleanGetValue(v96);
          }
        }
        CFBooleanRef v98 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"NoDefaultRequestRules");
        if (v98)
        {
          CFBooleanRef v99 = v98;
          CFTypeID v100 = CFGetTypeID(v98);
          if (v100 == CFBooleanGetTypeID()) {
            *(unsigned char *)(*(void *)(a1 + 16) + 152) = CFBooleanGetValue(v99);
          }
        }
        CFStringRef v101 = (const __CFString *)CFDictionaryGetValue(theDict, @"TagPrefix");
        if (!v101 || (CFStringRef v102 = v101, v103 = CFGetTypeID(v101), v103 != CFStringGetTypeID()))
        {
LABEL_99:
          v108 = CFDictionaryGetValue(theDict, @"APTagOverrides");
          if (v108)
          {
            v115 = v108;
            CFTypeID v116 = CFGetTypeID(v108);
            if (v116 == CFDictionaryGetTypeID())
            {
              SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 136));
              CFDictionaryRef v117 = (const __CFDictionary *)CFRetain(v115);
              *(void *)(*(void *)(a1 + 16) + 136) = v117;
              CFStringRef v118 = (const __CFString *)CFDictionaryGetValue(v117, @"@ApImg4Ticket");
              if (v118)
              {
                CFStringRef v119 = v118;
                if (CFStringGetLength(v118) >= 3 && CFStringGetCharacterAtIndex(v119, 0) == 64)
                {
                  SafeRelease(*(CFTypeRef *)(a1 + 88));
                  CFAllocatorRef v120 = CFGetAllocator((CFTypeRef)a1);
                  v125.length = CFStringGetLength(v119) - 1;
                  v125.location = 1;
                  *(void *)(a1 + 88) = CFStringCreateWithSubstring(v120, v119, v125);
                }
              }
            }
          }
          uint64_t v121 = *(void *)(a1 + 16);
          if (!v121)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApIsImg4", (uint64_t)"%s: apParameters is NULL", v110, v111, v112, v113, v114, (char)"AMAuthInstallApIsImg4");
            return 0;
          }
          if (!*(unsigned char *)(v121 + 96)) {
            return 0;
          }
          uint64_t v60 = AMAuthInstallApImg4SetParameters(a1, theDict, v109, v110, v111, v112, v113, v114);
          if (!v60) {
            return 0;
          }
          return v60;
        }
        SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 144));
        CFStringGetLength(v102);
        CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v102);
        *(void *)(*(void *)(a1 + 16) + 144) = MutableCopy;
        if (MutableCopy)
        {
          if (CFStringHasSuffix(v102, @","))
          {
            v105 = *(__CFString **)(*(void *)(a1 + 16) + 144);
            CFIndex Length = CFStringGetLength(v105);
            CFStringPad(v105, 0, Length - 1, 0);
          }
          SafeRelease(*(CFTypeRef *)(a1 + 88));
          CFAllocatorRef v107 = CFGetAllocator((CFTypeRef)a1);
          *(void *)(a1 + 88) = CFStringCreateWithFormat(v107, 0, @"%@,Ticket", *(void *)(*(void *)(a1 + 16) + 144));
          goto LABEL_99;
        }
        char v124 = (char)v102;
        v123 = "failed to convert TagPrefix %@";
LABEL_121:
        uint64_t v2 = 3;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApSetParameters", (uint64_t)v123, v9, v10, v11, v12, v13, v124);
        return v2;
      }
      if (CFStringCompare(v45, @"sha2-256", 1uLL))
      {
        if (CFStringCompare(v45, @"sha2-384", 1uLL))
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApSetParameters", (uint64_t)"unsupported digest type %@", v47, v48, v49, v50, v51, (char)v45);
          goto LABEL_47;
        }
        uint64_t v52 = *(void *)(a1 + 16);
        int v53 = 384;
      }
      else
      {
        uint64_t v52 = *(void *)(a1 + 16);
        int v53 = 256;
      }
    }
    else
    {
      uint64_t v52 = *(void *)(a1 + 16);
      int v53 = 1;
    }
    *(_DWORD *)(v52 + 112) = v53;
    goto LABEL_47;
  }
  return v2;
}

uint64_t AMAuthInstallApImg4SetApNonceSlotID(uint64_t a1, CFTypeRef cf)
{
  if (!a1) {
    return 1;
  }
  if (!*(void *)(a1 + 16)) {
    return 1;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID()) {
    return 1;
  }
  CFRetain(cf);
  SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 32));
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 16) + 32) = cf;
  return result;
}

uint64_t AMAuthInstallApCopyParameters(const void **cf, CFTypeRef *a2)
{
  if (!cf)
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v4 = 1;
    goto LABEL_47;
  }
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v4 = 1;
  if (a2 && cf[2])
  {
    CFAllocatorRef v6 = CFGetAllocator(cf);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApCopyParameters", (uint64_t)"failed to allocate parameters dict", v7, v8, v9, v10, v11, v49);
      uint64_t v4 = 2;
      goto LABEL_47;
    }
    CFAllocatorRef v12 = CFGetAllocator(cf);
    CFNumberRef v13 = CFNumberCreate(v12, kCFNumberSInt64Type, cf[2]);
    if (v13)
    {
      CFNumberRef v19 = v13;
      CFDictionarySetValue(Mutable, @"ECID", v13);
      CFRelease(v19);
      CFAllocatorRef v20 = CFGetAllocator(cf);
      CFNumberRef v21 = CFNumberCreate(v20, kCFNumberSInt32Type, (char *)cf[2] + 8);
      if (v21)
      {
        CFNumberRef v22 = v21;
        CFDictionarySetValue(Mutable, @"ApChipID", v21);
        CFRelease(v22);
        CFAllocatorRef v23 = CFGetAllocator(cf);
        CFNumberRef v24 = CFNumberCreate(v23, kCFNumberSInt32Type, (char *)cf[2] + 12);
        if (v24)
        {
          CFNumberRef v25 = v24;
          CFDictionarySetValue(Mutable, @"ApBoardID", v24);
          CFRelease(v25);
          CFAllocatorRef v26 = CFGetAllocator(cf);
          CFNumberRef v27 = CFNumberCreate(v26, kCFNumberSInt32Type, (char *)cf[2] + 16);
          if (v27)
          {
            CFNumberRef v28 = v27;
            CFDictionarySetValue(Mutable, @"ApSecurityDomain", v27);
            CFRelease(v28);
            CFTypeRef v29 = (const void *)*MEMORY[0x263EFFB40];
            uint64_t v30 = (const void *)*MEMORY[0x263EFFB38];
            if (*((unsigned char *)cf[2] + 20)) {
              CFTypeID v31 = (const void *)*MEMORY[0x263EFFB40];
            }
            else {
              CFTypeID v31 = (const void *)*MEMORY[0x263EFFB38];
            }
            CFDictionarySetValue(Mutable, @"ApProductionMode", v31);
            if (*((unsigned char *)cf[2] + 96)) {
              CFNumberRef v32 = v29;
            }
            else {
              CFNumberRef v32 = v30;
            }
            CFDictionarySetValue(Mutable, @"ApSupportsImg4", v32);
            CFTypeID v33 = cf[2];
            CFTypeID v34 = (const void *)v33[3];
            if (v34)
            {
              CFDictionarySetValue(Mutable, @"ApNonce", v34);
              CFTypeID v33 = cf[2];
            }
            CFNumberRef v35 = (const void *)v33[6];
            if (v35)
            {
              CFDictionarySetValue(Mutable, @"SepNonce", v35);
              CFTypeID v33 = cf[2];
            }
            CFNumberRef v36 = (const void *)v33[5];
            if (v36)
            {
              CFDictionarySetValue(Mutable, @"Ap,SoftwareNonceForUpdateFreshness", v36);
              CFTypeID v33 = cf[2];
            }
            if (*((unsigned char *)v33 + 72)) {
              CFTypeID v37 = v29;
            }
            else {
              CFTypeID v37 = v30;
            }
            CFDictionarySetValue(Mutable, @"ApSecurityMode", v37);
            if (*((unsigned char *)cf[2] + 80)) {
              CFBooleanRef v38 = v29;
            }
            else {
              CFBooleanRef v38 = v30;
            }
            CFDictionarySetValue(Mutable, @"ApInRomDFU", v38);
            if (*((unsigned char *)cf[2] + 82)) {
              CFBooleanRef v39 = v29;
            }
            else {
              CFBooleanRef v39 = v30;
            }
            CFDictionarySetValue(Mutable, @"ApEffectiveSecurityMode", v39);
            if (*((unsigned char *)cf[2] + 81)) {
              CFTypeID v40 = v29;
            }
            else {
              CFTypeID v40 = v30;
            }
            CFDictionarySetValue(Mutable, @"ApEffectiveProductionMode", v40);
            if (*((unsigned char *)cf[2] + 75)) {
              CFBooleanRef v41 = v29;
            }
            else {
              CFBooleanRef v41 = v30;
            }
            CFDictionarySetValue(Mutable, @"Ap,InternalUseOnlySW", v41);
            CFBooleanRef v42 = cf[2];
            CFTypeID v43 = (const void *)v42[23];
            if (v43)
            {
              CFDictionarySetValue(Mutable, @"Ap,EphemeralDataMode", v43);
              CFBooleanRef v42 = cf[2];
            }
            CFStringRef v44 = (const void *)v42[24];
            if (v44)
            {
              CFDictionarySetValue(Mutable, @"Ap,DisablePlatformOnlyCode", v44);
              CFBooleanRef v42 = cf[2];
            }
            if (*((unsigned char *)v42 + 116))
            {
              CFDictionarySetValue(Mutable, @"ApX86", v29);
              CFBooleanRef v42 = cf[2];
            }
            CFStringRef v45 = (const void *)v42[11];
            if (v45)
            {
              CFDictionarySetValue(Mutable, @"DemotionPolicy", v45);
              CFBooleanRef v42 = cf[2];
            }
            CFTypeID v46 = (const void *)v42[13];
            if (v46) {
              CFDictionarySetValue(Mutable, @"HardwareModel", v46);
            }
            uint64_t v4 = 0;
            *a2 = CFRetain(Mutable);
            goto LABEL_47;
          }
          uint64_t v48 = "failed to convert securityDomain";
        }
        else
        {
          uint64_t v48 = "failed to convert boardID";
        }
      }
      else
      {
        uint64_t v48 = "failed to convert chipID";
      }
    }
    else
    {
      uint64_t v48 = "failed to convert ecid";
    }
    uint64_t v4 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApCopyParameters", (uint64_t)v48, v14, v15, v16, v17, v18, v49);
  }
LABEL_47:
  SafeRelease(Mutable);
  return v4;
}

__CFString *AMAuthInstallApCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 64);
  CFStringAppend(Mutable, @"(");
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    CFTypeID v5 = "YES";
    if (*(unsigned char *)(a1 + 57)) {
      CFAllocatorRef v6 = "YES";
    }
    else {
      CFAllocatorRef v6 = "NO";
    }
    if (*(unsigned char *)(v4 + 20)) {
      uint64_t v7 = "YES";
    }
    else {
      uint64_t v7 = "NO";
    }
    if (*(unsigned char *)(v4 + 81)) {
      uint64_t v8 = "YES";
    }
    else {
      uint64_t v8 = "NO";
    }
    if (*(unsigned char *)(v4 + 72)) {
      uint64_t v9 = "YES";
    }
    else {
      uint64_t v9 = "NO";
    }
    if (*(unsigned char *)(v4 + 82)) {
      uint64_t v10 = "YES";
    }
    else {
      uint64_t v10 = "NO";
    }
    if (*(unsigned char *)(v4 + 96)) {
      uint64_t v11 = "YES";
    }
    else {
      uint64_t v11 = "NO";
    }
    if (*(void *)(v4 + 120)) {
      CFAllocatorRef v12 = "YES";
    }
    else {
      CFAllocatorRef v12 = "NO";
    }
    if (!*(void *)(v4 + 128)) {
      CFTypeID v5 = "NO";
    }
    CFStringAppendFormat(Mutable, 0, @"personalize=%s %@ ecid=0x%llx, chipid=0x%x, boardid=0x%x, secDom=%d, isProduction=%s, EPRO=%s, isSecure=%s, ESEC=%s, img4=%s, demotionPolicy=%@, managedBaaCert=%s, slowRollBaaCert=%s, dpoc=%@", v6, *(void *)(v4 + 104), *(void *)v4, *(unsigned int *)(v4 + 8), *(unsigned int *)(v4 + 12), *(unsigned int *)(v4 + 16), v7, v8, v9, v10, v11, *(void *)(v4 + 88), v12, v5, *(void *)(v4 + 192));
    uint64_t v13 = *(void *)(a1 + 16);
    if (*(void *)(v13 + 24))
    {
      CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v15 = _CopyHexStringFromData(v14, *(CFDataRef *)(*(void *)(a1 + 16) + 24));
      CFStringAppendFormat(Mutable, 0, @", nonce=0x%@", v15);
      CFRelease(v15);
      uint64_t v13 = *(void *)(a1 + 16);
    }
    if (*(void *)(v13 + 48))
    {
      CFAllocatorRef v16 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v17 = _CopyHexStringFromData(v16, *(CFDataRef *)(*(void *)(a1 + 16) + 48));
      CFStringAppendFormat(Mutable, 0, @", sepNonce=0x%@", v17);
      CFRelease(v17);
    }
  }
  CFStringAppend(Mutable, @""));
  return Mutable;
}

void AMAuthInstallApFinalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    SafeRelease(*(CFTypeRef *)(v2 + 24));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 32));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 48));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 56));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 88));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 104));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 120));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 128));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 136));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 160));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 168));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 176));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 184));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 192));
    SafeFree(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
  SafeRelease(*(CFTypeRef *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
}

uint64_t AMAuthInstallApSetNonce(uint64_t a1, CFTypeRef cf)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (cf && *(void *)(a1 + 16))
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 20 || CFDataGetLength((CFDataRef)cf) == 32)
      {
        CFIndex Length = CFDataGetLength((CFDataRef)cf);
        uint64_t v7 = *(void *)(a1 + 16);
        if (Length == 32) {
          *(_DWORD *)(v7 + 112) = 384;
        }
        SafeRelease(*(CFTypeRef *)(v7 + 24));
        CFTypeRef v8 = CFRetain(cf);
        uint64_t result = 0;
        *(void *)(*(void *)(a1 + 16) + 24) = v8;
        return result;
      }
      char v9 = CFDataGetLength((CFDataRef)cf);
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApSetNonce", (uint64_t)"AMAuthInstallApSetNonce bad Nonce length: %d", v10, v11, v12, v13, v14, v9);
    }
    return 1;
  }
  return result;
}

uint64_t AMAuthInstallEnableManagedRequest(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    return AMAuthInstallHttpRequestManagedBaaCertificate(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallEnableManagedRequest", (uint64_t)"amai is NULL", a4, a5, a6, a7, a8, v8);
    return 1;
  }
}

uint64_t AMAuthInstallEnableAlternateUpdateRequest(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    return AMAuthInstallHttpRequestAlternateUpdateBaaCertificate(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallEnableAlternateUpdateRequest", (uint64_t)"amai is NULL", a4, a5, a6, a7, a8, v8);
    return 1;
  }
}

uint64_t AMAuthInstallApEnableLocalPolicyHactivation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 505) = 1;
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApEnableLocalPolicyHactivation", (uint64_t)"amai is NULL", a4, a5, a6, a7, a8, vars0);
    return 1;
  }
  return result;
}

uint64_t AMAuthInstallApEnableGlobalSigning(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      SafeRelease(*(CFTypeRef *)(a1 + 40));
      CFTypeRef v10 = CFRetain(a2);
      uint64_t result = 0;
      *(void *)(a1 + 40) = v10;
      return result;
    }
    uint64_t v12 = "amai->apParameters is NULL";
  }
  else
  {
    uint64_t v12 = "amai is NULL";
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApEnableGlobalSigning", (uint64_t)v12, a4, a5, a6, a7, a8, v13);
  return 1;
}

uint64_t AMAuthInstallApEnableRelaxedImageVerification(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v2 + 64) = a2;
  return result;
}

uint64_t AMAuthInstallApWriteSignatureStripped(uint64_t a1, CFTypeRef cf, const __CFURL *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 1;
  if (a1 && cf && a3)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      if (*(unsigned char *)(v12 + 96)) {
        return 0;
      }
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApIsImg4", (uint64_t)"%s: apParameters is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallApIsImg4");
    }
    uint64_t result = AMAuthInstallApImg3WriteSignatureStrippedImage3(cf, a3);
    if (result) {
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t AMAuthInstallApRemoveInfoDict(const __CFAllocator *a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  CFDictionaryRef v3 = 0;
  uint64_t v4 = 1;
  if (theDict)
  {
    CFAllocatorRef v6 = 0;
    uint64_t v7 = 0;
    if (a3)
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
      CFDictionaryRef v3 = MutableCopy;
      if (MutableCopy)
      {
        CFIndex Count = CFDictionaryGetCount(MutableCopy);
        CFAllocatorRef v6 = (const void **)malloc(8 * Count);
        CFTypeRef v10 = (const void **)malloc(8 * Count);
        uint64_t v7 = v10;
        uint64_t v4 = 2;
        if (v6 && v10)
        {
          CFDictionaryGetKeysAndValues(v3, v6, v10);
          if (Count < 1)
          {
LABEL_14:
            uint64_t v4 = 0;
            *a3 = CFRetain(v3);
          }
          else
          {
            uint64_t v11 = 0;
            while (v6[v11])
            {
              uint64_t v12 = v7[v11];
              if (!v12) {
                break;
              }
              CFTypeID v13 = CFGetTypeID(v12);
              if (v13 == CFDictionaryGetTypeID() && CFDictionaryGetValue((CFDictionaryRef)v7[v11], @"Info")) {
                CFDictionaryRemoveValue((CFMutableDictionaryRef)v7[v11], @"Info");
              }
              if (Count == ++v11) {
                goto LABEL_14;
              }
            }
            uint64_t v4 = 1;
          }
        }
      }
      else
      {
        CFAllocatorRef v6 = 0;
        uint64_t v7 = 0;
        uint64_t v4 = 2;
      }
    }
  }
  else
  {
    CFAllocatorRef v6 = 0;
    uint64_t v7 = 0;
  }
  SafeRelease(v3);
  SafeFree(v6);
  SafeFree(v7);
  return v4;
}

CFIndex AMAuthInstallApCreateMeasurementsFromURL(void *a1, const __CFURL *a2, CFTypeRef *a3, char a4)
{
  return AMAuthInstallApCreateMeasurementsWithTag(a1, a2, 0, *(_DWORD *)(a1[2] + 112), a4, 0, a3);
}

CFIndex AMAuthInstallApCreateMeasurementsWithTag(void *cf, const __CFURL *a2, const __CFString *a3, int a4, char a5, int a6, CFTypeRef *a7)
{
  uint64_t v22 = 0;
  if (!cf)
  {
    CFIndex Code = 1;
    goto LABEL_16;
  }
  CFIndex Code = 1;
  if (a7)
  {
    if (a2)
    {
      uint64_t v10 = cf[2];
      if (v10)
      {
        if (a6 == 2)
        {
          CFAllocatorRef v16 = CFGetAllocator(cf);
          uint64_t MeasurementsWithTag = AMAuthInstallApFtabCreateMeasurementsWithTag(v16, (uint64_t)a2, a3, a4, a7);
        }
        else
        {
          if (a6 == 1)
          {
            CFAllocatorRef v13 = CFGetAllocator(cf);
            uint64_t v14 = AMAuthInstallSupportCopyTagAndFileURL(v13, a2, 0, (CFTypeRef *)&v22);
            if (v14)
            {
              CFIndex Code = v14;
            }
            else
            {
              uint64_t v15 = AMAuthInstallApMeasureBinary(v22, 0x100000, a4);
              *a7 = v15;
              if (v15) {
                CFIndex Code = 0;
              }
              else {
                CFIndex Code = CFErrorGetCode(0);
              }
            }
            goto LABEL_16;
          }
          int v19 = *(unsigned __int8 *)(v10 + 96);
          CFAllocatorRef v20 = CFGetAllocator(cf);
          if (v19) {
            uint64_t MeasurementsWithTag = AMAuthInstallApImg4CreateMeasurementsWithTag(v20, a2, a3, a4, a7);
          }
          else {
            uint64_t MeasurementsWithTag = AMAuthInstallApImg3CreateMeasurementsFromURL(v20, a2, a7, a5);
          }
        }
        CFIndex Code = MeasurementsWithTag;
      }
    }
  }
LABEL_16:
  AMSupportSafeRelease();
  return Code;
}

__CFDictionary *AMAuthInstallApMeasureBinary(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  uint64_t Digest = AMAuthInstallApCreateDigest(a1, a2, a3);
  if (!Digest) {
    return 0;
  }
  uint64_t v4 = (const void *)Digest;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v6 = Mutable;
  if (Mutable) {
    CFDictionarySetValue(Mutable, @"Digest", v4);
  }
  else {
    AMSupportCreateErrorInternal();
  }
  CFRelease(v4);
  return v6;
}

uint64_t AMAuthInstallApCreateDigest(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && (a3 == 1 || a3 == 384 || a3 == 256))
  {
    return MEMORY[0x270F97A18]();
  }
  else
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
}

uint64_t AMAuthInstallApCreatePersonalizedResponse(uint64_t a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  int v6 = CFDictionaryContainsKey(theDict, @"Ap,LocalPolicy");
  CFAllocatorRef v13 = 0;
  __int16 v63 = 0;
  CFTypeRef v61 = 0;
  value = 0;
  uint64_t v14 = 1;
  if (a1 && theDict && a3)
  {
    int v15 = v6;
    if (AMAuthInstallApSupportsLocalSigning(a1, (unsigned char *)&v63 + 1, v7, v8, v9, v10, v11, v12)) {
      goto LABEL_30;
    }
    uint64_t v22 = AMAuthInstallApSupportsGlobalSigning(a1, (BOOL *)&v63, v16, v17, v18, v19, v20, v21);
    if (v22 != 13)
    {
      uint64_t v14 = v22;
      if (v22) {
        goto LABEL_30;
      }
    }
    uint64_t v28 = *(void *)(a1 + 16);
    if (v28)
    {
      BOOL v29 = *(unsigned char *)(v28 + 78) != 0;
      if (HIBYTE(v63) && *(unsigned char *)(v28 + 78))
      {
        AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallApCreatePersonalizedResponseInternal", (uint64_t)"Forcing server signing\n", v23, v24, v25, v26, v27, LocalizedStatusString);
        LOBYTE(v29) = 1;
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v29 = 0;
    }
    if (HIBYTE(v63) && !v29)
    {
      uint64_t v30 = (unsigned char *)(a1 + 505);
      if (!*(unsigned char *)(a1 + 505)) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_16:
    if (!v15 || !*(unsigned char *)(a1 + 505))
    {
      if ((_BYTE)v63) {
        char v39 = v29;
      }
      else {
        char v39 = 1;
      }
      if ((v39 & 1) == 0)
      {
        uint64_t v48 = (void *)CFRetain(*(CFTypeRef *)(a1 + 40));
        value = v48;
        if (v48)
        {
          char v49 = v48;
          CFAllocatorRef v50 = CFGetAllocator((CFTypeRef)a1);
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v50, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFAllocatorRef v13 = Mutable;
          if (Mutable)
          {
            CFDictionaryAddValue(Mutable, *(const void **)(a1 + 88), v49);
            *a3 = CFRetain(v13);
            AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallApCreatePersonalizedResponseInternal", (uint64_t)"Using global signing", v52, v53, v54, v55, v56, LocalizedStatusString);
            uint64_t v14 = 0;
            goto LABEL_31;
          }
          goto LABEL_46;
        }
        v58 = "global ticketData is NULL";
LABEL_45:
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApCreatePersonalizedResponseInternal", (uint64_t)v58, v32, v33, v34, v35, v36, LocalizedStatusString);
        CFAllocatorRef v13 = 0;
        goto LABEL_46;
      }
      CFAllocatorRef v40 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v41 = AMAuthInstallApRemoveInfoDict(v40, theDict, &v61);
      if (v41)
      {
        uint64_t v14 = v41;
        CFTypeID v59 = "could not remove info dicts from request";
      }
      else
      {
        uint64_t v14 = AMAuthInstallRequestSendSync(a1, v61, a3);
        if (!v14) {
          goto LABEL_30;
        }
        char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v14);
        CFTypeID v59 = "server request error: %@";
      }
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApCreatePersonalizedResponseInternal", (uint64_t)v59, v42, v43, v44, v45, v46, LocalizedStatusString);
      goto LABEL_30;
    }
    uint64_t v30 = (unsigned char *)(a1 + 505);
    uint64_t v28 = *(void *)(a1 + 16);
LABEL_19:
    *(_DWORD *)(v28 + 68) = 1;
    *(_DWORD *)(v28 + 112) = 384;
LABEL_20:
    uint64_t SignedManifest = AMAuthInstallApImg4LocalCreateSignedManifest((void *)a1, theDict, 0, 0, 0, (CFTypeRef *)&value, v26, v27);
    if (!SignedManifest)
    {
      if (value)
      {
        CFAllocatorRef v37 = CFGetAllocator((CFTypeRef)a1);
        CFBooleanRef v38 = CFDictionaryCreateMutable(v37, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFAllocatorRef v13 = v38;
        if (v38)
        {
          CFDictionaryAddValue(v38, *(const void **)(a1 + 88), value);
          uint64_t v14 = 0;
          *a3 = CFRetain(v13);
          goto LABEL_31;
        }
LABEL_46:
        uint64_t v14 = 2;
        goto LABEL_31;
      }
      v58 = "ticketData is NULL";
      goto LABEL_45;
    }
    uint64_t v14 = SignedManifest;
    if (*v30) {
      v57 = "hacktivated";
    }
    else {
      v57 = "local";
    }
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApCreatePersonalizedResponseInternal", (uint64_t)"failed to create a %s Img4 ticket", v32, v33, v34, v35, v36, (char)v57);
LABEL_30:
    CFAllocatorRef v13 = 0;
  }
LABEL_31:
  SafeRelease(v13);
  SafeRelease(value);
  SafeRelease(v61);
  return v14;
}

uint64_t AMAuthInstallApGetImageType(const __CFAllocator *a1, CFDataRef cf)
{
  CFDataRef theData = 0;
  if (!cf
    || (int DataFromFileURL = AMAuthInstallSupportCreateDataFromFileURL(a1, (CFTypeRef *)&theData, cf),
        CFURLRef cf = theData,
        DataFromFileURL))
  {
    uint64_t v5 = 0;
  }
  else
  {
    unsigned int v4 = AMAuthInstallApImg4IsImg4Payload(a1, theData);
    CFURLRef cf = theData;
    if (v4)
    {
      uint64_t v5 = 2;
    }
    else
    {
      uint64_t v5 = AMAuthInstallApImg3IsImg3Payload(theData) != 0;
      CFURLRef cf = theData;
    }
  }
  SafeRelease(cf);
  return v5;
}

CFStringRef AMAuthInstallApCopyImageTag(const __CFAllocator *a1, CFURLRef anURL)
{
  CFDataRef theData = 0;
  CFStringRef v13 = 0;
  CFTypeRef cf = 0;
  if (anURL)
  {
    CFStringRef v13 = 0;
    CFStringRef v3 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    if (v3)
    {
      if (!AMAuthInstallApImg4CreateRequestTagFromFileURL(a1, v3, @"=", &v13, (CFURLRef *)&cf)
        && !AMAuthInstallSupportCreateDataFromFileURL(a1, (CFTypeRef *)&theData, cf))
      {
        if (AMAuthInstallApImg3IsImg3Payload(theData))
        {
          SafeRelease(v13);
          if (AMAuthInstallApImg3CopyRequestTag((int)a1, theData, &v13)) {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApCopyImageTag", (uint64_t)"failed to copy img3 tag", v4, v5, v6, v7, v8, v10);
          }
        }
      }
    }
  }
  else
  {
    CFStringRef v3 = 0;
  }
  SafeRelease(theData);
  SafeRelease(v3);
  SafeRelease(cf);
  return v13;
}

CFURLRef AMAuthInstallApCreateHashFromURL(const __CFAllocator *a1, const __CFData *cf)
{
  CFURLRef Value = cf;
  CFDictionaryRef theDict = 0;
  if (cf)
  {
    int ImageType = AMAuthInstallApGetImageType(a1, cf);
    switch(ImageType)
    {
      case 2:
        if (AMAuthInstallApImg4CreateMeasurementsFromURL(a1, Value, 1, (CFTypeRef *)&theDict)) {
          goto LABEL_6;
        }
        break;
      case 1:
        if (AMAuthInstallApImg3CreateMeasurementsFromURL(a1, Value, (CFTypeRef *)&theDict, 0)) {
          goto LABEL_6;
        }
        break;
      case 0:
LABEL_7:
        CFURLRef Value = 0;
        goto LABEL_12;
      default:
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApCreateHashFromURL", (uint64_t)"Unsupported image type %d", v5, v6, v7, v8, v9, 0);
LABEL_6:
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApCreateHashFromURL", (uint64_t)"%s: could not create measurements: %d", v10, v11, v12, v13, v14, (char)"AMAuthInstallApCreateHashFromURL");
        goto LABEL_7;
    }
    CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(theDict, @"Digest");
    SafeRetain(Value);
  }
LABEL_12:
  SafeRelease(theDict);
  return Value;
}

uint64_t AMAuthInstallApCopyDeviceEntryFromDeviceMap(void *cf, const __CFData *a2, CFDictionaryRef *a3)
{
  if (a2)
  {
    uint64_t v5 = _AMAuthInstallApCopyDeviceEntryFromProvidedDeviceMap(cf, a2, a3);
    goto LABEL_10;
  }
  if (getenv("PLATFORM_DIR"))
  {
    CFAllocatorRef v6 = CFGetAllocator(cf);
    CFStringRef v7 = CFStringCreateWithFormat(v6, 0, @"%s/%@");
    if (!v7) {
      goto LABEL_12;
    }
    CFAllocatorRef v8 = CFGetAllocator(cf);
    CFURLRef v9 = CFURLCreateWithFileSystemPath(v8, v7, kCFURLPOSIXPathStyle, 0);
    if (!v9) {
      goto LABEL_12;
    }
    AMSupportPlatformFileURLExists();
    CFRelease(v9);
  }
  CFAllocatorRef v10 = CFGetAllocator(cf);
  CFURLRef v11 = CFURLCreateWithFileSystemPath(v10, @"/usr/local/standalone/firmware/device_map.plist", kCFURLPOSIXPathStyle, 0);
  char v12 = (char)v11;
  if (!v11)
  {
LABEL_12:
    uint64_t v5 = 2;
    goto LABEL_10;
  }
  CFGetAllocator(cf);
  uint64_t DataFromFileURL = AMSupportCreateDataFromFileURL();
  if (DataFromFileURL)
  {
    uint64_t v5 = DataFromFileURL;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApCopyDeviceEntryFromDeviceMap", (uint64_t)"Failed to read devicemap from %@", v14, v15, v16, v17, v18, v12);
  }
  else
  {
    uint64_t v5 = _AMAuthInstallApCopyDeviceEntryFromProvidedDeviceMap(cf, 0, a3);
  }
LABEL_10:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v5;
}

uint64_t _AMAuthInstallApCopyDeviceEntryFromProvidedDeviceMap(void *cf, const __CFData *a2, CFDictionaryRef *a3)
{
  CFDictionaryRef v3 = 0;
  CFStringRef v4 = @"SecurityDomain";
  CFErrorRef error = 0;
  CFStringRef v5 = @"BoardID";
  uint64_t v6 = 1;
  CFStringRef v7 = @"ChipID";
  if (!cf || !a2)
  {
    CFAllocatorRef v10 = 0;
    CFURLRef v11 = 0;
    goto LABEL_22;
  }
  CFAllocatorRef v10 = 0;
  CFURLRef v11 = 0;
  if (a3)
  {
    if (!*(void *)(cf[2] + 144)) {
      goto LABEL_8;
    }
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v37 = *(void *)(cf[2] + 144);
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@,%@");
    if (v7)
    {
      uint64_t v37 = *(void *)(cf[2] + 144);
      CFStringRef v5 = CFStringCreateWithFormat(v13, 0, @"%@,%@");
      if (v5)
      {
        uint64_t v37 = *(void *)(cf[2] + 144);
        CFStringRef v4 = CFStringCreateWithFormat(v13, 0, @"%@,%@");
        if (v4)
        {
LABEL_8:
          CFAllocatorRef v19 = CFGetAllocator(cf);
          CFDictionaryRef v20 = (const __CFDictionary *)CFPropertyListCreateWithData(v19, a2, 0, 0, &error);
          CFDictionaryRef v3 = v20;
          if (!v20)
          {
            uint64_t v6 = 3;
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApCopyDeviceEntryFromProvidedDeviceMap", (uint64_t)"failed to create dictionary from device_map (Not plist/xml data?): %@", v21, v22, v23, v24, v25, (char)error);
            CFAllocatorRef v10 = 0;
            CFURLRef v11 = 0;
            goto LABEL_22;
          }
          CFIndex Count = CFDictionaryGetCount(v20);
          uint64_t v27 = (const void **)malloc(8 * Count);
          if (!v27)
          {
            CFAllocatorRef v10 = 0;
            CFURLRef v11 = 0;
            uint64_t v6 = 2;
            goto LABEL_22;
          }
          uint64_t v28 = v27;
          CFURLRef v11 = (const void **)malloc(8 * Count);
          if (!v11)
          {
            uint64_t v6 = 2;
            CFAllocatorRef v10 = v28;
            goto LABEL_22;
          }
          BOOL v29 = a3;
          CFBooleanRef v38 = v28;
          CFDictionaryGetKeysAndValues(v3, v28, v11);
          if (Count >= 1)
          {
            uint64_t v30 = 0;
            while (1)
            {
              CFDictionaryRef v31 = (const __CFDictionary *)v11[v30];
              if (AMAuthInstallSupportCompareStringToInt32(v31, v7, *(_DWORD *)(cf[2] + 8)))
              {
                if (AMAuthInstallSupportCompareStringToInt32(v31, v5, *(_DWORD *)(cf[2] + 12))
                  && AMAuthInstallSupportCompareStringToInt32(v31, v4, *(_DWORD *)(cf[2] + 16)))
                {
                  break;
                }
              }
              if (Count == ++v30) {
                goto LABEL_20;
              }
            }
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (TypeID != CFGetTypeID(v31))
            {
              uint64_t v6 = 14;
              goto LABEL_21;
            }
            CFAllocatorRef v33 = CFGetAllocator(cf);
            CFDictionaryRef Copy = CFDictionaryCreateCopy(v33, v31);
            *BOOL v29 = Copy;
            if (!Copy)
            {
              uint64_t v6 = 0;
              goto LABEL_21;
            }
          }
LABEL_20:
          uint64_t v6 = 8 * (*v29 == 0);
LABEL_21:
          CFAllocatorRef v10 = v38;
          goto LABEL_22;
        }
        uint64_t v36 = "failed secdomKey allocation";
      }
      else
      {
        uint64_t v36 = "failed boardKey allocation";
      }
    }
    else
    {
      uint64_t v36 = "failed chipKey allocation";
    }
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApCopyDeviceEntryFromProvidedDeviceMap", (uint64_t)v36, v14, v15, v16, v17, v18, v37);
    CFDictionaryRef v3 = 0;
    CFAllocatorRef v10 = 0;
    CFURLRef v11 = 0;
    uint64_t v6 = 99;
  }
LABEL_22:
  SafeRelease(v3);
  SafeFree(v10);
  SafeFree(v11);
  SafeRelease(error);
  SafeRelease(v7);
  SafeRelease(v5);
  SafeRelease(v4);
  return v6;
}

uint64_t AMAuthInstallApApplyRequestRules(void *a1, const __CFData *a2, const __CFURL *a3, __CFDictionary *a4)
{
  CFDictionaryRef theDict = 0;
  CFStringRef v4 = 0;
  uint64_t v5 = 1;
  if (a1 && a3)
  {
    CFStringRef v7 = 0;
    CFAllocatorRef v8 = 0;
    if (a4)
    {
      uint64_t v10 = AMAuthInstallApCopyDeviceEntryFromDeviceMap(a1, a2, &theDict);
      if (v10)
      {
        uint64_t v5 = v10;
        CFStringRef v4 = 0;
        CFStringRef v7 = 0;
        CFAllocatorRef v8 = 0;
      }
      else
      {
        CFAllocatorRef v11 = CFGetAllocator(a1);
        CFStringRef v4 = AMAuthInstallApCopyImageTag(v11, a3);
        if (v4)
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Manifest");
          if (Value)
          {
            CFDictionaryRef v18 = Value;
            int64_t Count = CFDictionaryGetCount(Value);
            CFStringRef v7 = (const void **)calloc(8uLL, Count);
            CFDictionaryRef v20 = (const void **)calloc(8uLL, Count);
            CFAllocatorRef v8 = v20;
            uint64_t v5 = 2;
            if (v7 && v20)
            {
              uint64_t v38 = (uint64_t)a1;
              char v39 = v7;
              CFDictionaryGetKeysAndValues(v18, v7, v20);
              if (Count < 1)
              {
LABEL_21:
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApApplyRequestRules", (uint64_t)"failed to find RestoreRequestRules property", v21, v22, v23, v24, v25, v38);
                uint64_t v5 = 8;
              }
              else
              {
                uint64_t v26 = 0;
                while (1)
                {
                  CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v8[v26], v4);
                  if (v27)
                  {
                    CFDictionaryRef v28 = v27;
                    BOOL v29 = CFDictionaryGetValue(v27, @"RequiresPartialDigest");
                    if (v29)
                    {
                      uint64_t v30 = v29;
                      CFTypeID TypeID = CFBooleanGetTypeID();
                      if (TypeID == CFGetTypeID(v30) && !CFBooleanGetValue((CFBooleanRef)v30)) {
                        CFDictionaryRemoveValue(a4, @"PartialDigest");
                      }
                    }
                    uint64_t v32 = CFDictionaryGetValue(v28, @"Trusted");
                    if (v32)
                    {
                      CFAllocatorRef v33 = v32;
                      CFTypeID v34 = CFBooleanGetTypeID();
                      if (v34 == CFGetTypeID(v33)) {
                        CFDictionarySetValue(a4, @"Trusted", v33);
                      }
                    }
                    CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(v28, @"RestoreRequestRules");
                    if (v35) {
                      break;
                    }
                  }
                  if (Count == ++v26) {
                    goto LABEL_21;
                  }
                }
                uint64_t v5 = AMAuthInstallBundleProcessRules(v38, v35, a4);
              }
              CFStringRef v7 = v39;
            }
          }
          else
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApApplyRequestRules", (uint64_t)"failed to find manifest entry", v13, v14, v15, v16, v17, v37);
            CFStringRef v7 = 0;
            CFAllocatorRef v8 = 0;
            uint64_t v5 = 8;
          }
        }
        else
        {
          CFStringRef v7 = 0;
          CFAllocatorRef v8 = 0;
          uint64_t v5 = 3;
        }
      }
    }
  }
  else
  {
    CFStringRef v7 = 0;
    CFAllocatorRef v8 = 0;
  }
  SafeRelease(theDict);
  SafeRelease(v4);
  SafeFree(v7);
  SafeFree(v8);
  return v5;
}

uint64_t AMAuthInstallApExtractZippedDeviceMap(const __CFData *a1, void *a2)
{
  CFURLRef url = 0;
  CFTypeRef v36 = 0;
  CFAllocatorRef Default = CFAllocatorGetDefault();
  uint64_t v5 = AMAuthInstallPlatformCopyURLToNewTempDirectory(Default, "device-map-XXXX", &url);
  if (v5)
  {
    uint64_t v32 = v5;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApExtractZippedDeviceMap", (uint64_t)"failed to create temp dir", v6, v7, v8, v9, v10, v34);
    CFURLRef v12 = 0;
  }
  else
  {
    CFAllocatorRef v11 = CFAllocatorGetDefault();
    CFURLRef v12 = CFURLCreateCopyAppendingPathComponent(v11, url, @"device_map", 0);
    if (v12)
    {
      CFAllocatorRef v13 = CFAllocatorGetDefault();
      uint64_t v14 = AMAuthInstallSupportWriteDataToFileURL(v13, a1, v12, 1);
      if (v14)
      {
        uint64_t v32 = v14;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApExtractZippedDeviceMap", (uint64_t)"failed to write data to %@", v15, v16, v17, v18, v19, (char)v12);
      }
      else
      {
        CFDictionaryRef v20 = BbfwReaderOpen(v12);
        if (v20)
        {
          uint64_t v26 = (uint64_t)v20;
          uint64_t v32 = BbfwReaderCopyFileData((uint64_t)v20, &v36);
          if (v32) {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApExtractZippedDeviceMap", (uint64_t)"failed to copy data from %@", v27, v28, v29, v30, v31, (char)v12);
          }
          else {
            *a2 = v36;
          }
          BbfwReaderClose(v26);
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApExtractZippedDeviceMap", (uint64_t)"failed to unzip file", v21, v22, v23, v24, v25, v34);
          uint64_t v32 = 4;
        }
      }
    }
    else
    {
      uint64_t v32 = 2;
    }
  }
  SafeRelease(v12);
  SafeRelease(url);
  return v32;
}

uint64_t AMAuthInstallApCreateImagePropertiesWithDeviceMapZipped(void *a1, const __CFURL *a2, const __CFData *cf, int a4, int a5, CFDictionaryRef *a6)
{
  CFMutableDictionaryRef v6 = 0;
  CFDataRef v43 = 0;
  CFMutableDictionaryRef theDict = 0;
  uint64_t v7 = 1;
  if (a1 && a2 && a6)
  {
    if (cf && a4)
    {
      uint64_t v12 = AMAuthInstallApExtractZippedDeviceMap(cf, &v43);
      if (v12)
      {
        uint64_t v7 = v12;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApCreateImagePropertiesWithDeviceMapZipped", (uint64_t)"failed to extract zipped device map", v13, v14, v15, v16, v17, v41);
        CFMutableDictionaryRef v6 = 0;
        goto LABEL_24;
      }
    }
    else if (cf && (a4 & 1) == 0)
    {
      CFDataRef v43 = (const __CFData *)CFRetain(cf);
    }
    CFIndex MeasurementsWithTag = AMAuthInstallApCreateMeasurementsWithTag(a1, a2, 0, *(_DWORD *)(a1[2] + 112), 0, a5, (CFTypeRef *)&theDict);
    CFMutableDictionaryRef v6 = theDict;
    if (MeasurementsWithTag)
    {
      uint64_t v7 = MeasurementsWithTag;
    }
    else if (theDict)
    {
      if (AMAuthInstallApApplyRequestRules(a1, v43, a2, theDict))
      {
        AMAuthInstallLog(4, (uint64_t)"AMAuthInstallApCreateImagePropertiesWithDeviceMapZipped", (uint64_t)"WARNING: Could not retrieve image properties from devicemap.", v19, v20, v21, v22, v23, v41);
        if (!*(unsigned char *)(a1[2] + 152))
        {
          uint64_t v29 = (const void *)*MEMORY[0x263EFFB40];
          CFDictionarySetValue(theDict, @"Trusted", (const void *)*MEMORY[0x263EFFB40]);
          uint64_t v30 = (const void *)*MEMORY[0x263EFFB38];
          if (*(unsigned char *)(a1[2] + 20)) {
            uint64_t v31 = v29;
          }
          else {
            uint64_t v31 = (const void *)*MEMORY[0x263EFFB38];
          }
          CFDictionarySetValue(theDict, @"EPRO", v31);
          if (*(unsigned char *)(a1[2] + 72)) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v30;
          }
          CFDictionarySetValue(theDict, @"ESEC", v32);
          AMAuthInstallLog(4, (uint64_t)"AMAuthInstallApCreateImagePropertiesWithDeviceMapZipped", (uint64_t)"WARNING: Consider setting alternate device_map, ie in a device-specific SDK path.  Setting default RestoreRequestRules to: %@", v33, v34, v35, v36, v37, (char)theDict);
        }
        AMAuthInstallLog(4, (uint64_t)"AMAuthInstallApCreateImagePropertiesWithDeviceMapZipped", (uint64_t)"WARNING: Note: This default behavior may change in the future into a hard error.", v24, v25, v26, v27, v28, v42);
      }
      CFAllocatorRef v38 = CFGetAllocator(a1);
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v38, theDict);
      *a6 = Copy;
      uint64_t v7 = 2 * (Copy == 0);
      CFMutableDictionaryRef v6 = theDict;
    }
    else
    {
      uint64_t v7 = 14;
    }
  }
LABEL_24:
  SafeRelease(v6);
  SafeRelease(v43);
  return v7;
}

uint64_t AMAuthInstallApCreateImagePropertiesWithDeviceMap(void *a1, const __CFURL *a2, const __CFData *a3, CFDictionaryRef *a4)
{
  return AMAuthInstallApCreateImagePropertiesWithDeviceMapZipped(a1, a2, a3, 1, 0, a4);
}

uint64_t AMAuthInstallApCreateImageProperties(void *a1, const __CFURL *a2, CFDictionaryRef *a3)
{
  return AMAuthInstallApCreateImagePropertiesWithDeviceMapZipped(a1, a2, 0, 1, 0, a3);
}

uint64_t AMAuthInstallApAddTag(uint64_t a1, CFStringRef theString1, uint64_t a3)
{
  if (a1
    && theString1
    && a3
    && (CFEqual(theString1, @"ApChipID")
     || CFEqual(theString1, @"ApBoardID")))
  {
    AMSupportCFDictionarySetInteger32();
    return 1;
  }
  else
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
}

uint64_t AMAuthInstallApSoftwareCoprocessorSetParameters(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 1;
  }
  SafeRelease(*(CFTypeRef *)(a1 + 24));
  CFTypeRef v4 = SafeRetain(a2);
  uint64_t result = 0;
  *(void *)(a1 + 24) = v4;
  return result;
}

uint64_t AMAuthInstallApFtabCreateMeasurementsWithTag(const __CFAllocator *a1, uint64_t a2, CFStringRef theString, int a4, CFTypeRef *a5)
{
  value = 0;
  uint64_t v5 = 1;
  if (a2 && theString && a5)
  {
    uint64_t v54 = 0;
    if (CFStringGetLength(theString) == 4)
    {
      CFDataRef v16 = (const __CFData *)_AMAuthInstallApFtabCopyFtabFromFile((uint64_t)a1, a2, (uint64_t)&v54, v11, v12, v13, v14, v15);
      CFDataRef v22 = v16;
      if (v16)
      {
        CFIndex Length = CFDataGetLength(v16);
        BytePtr = CFDataGetBytePtr(v22);
        if (CFStringGetCString(theString, buffer, 5, 0x8000100u))
        {
          if (*(_DWORD *)(v54 + 40))
          {
            uint64_t v25 = 0;
            unint64_t v26 = 0;
            while (1)
            {
              AMAuthInstallLog(7, (uint64_t)"AMAuthInstallApFtabCopyDataForTag", (uint64_t)"Payload %2d: [%.4s], %7u bytes.", v17, v18, v19, v20, v21, v26);
              uint64_t v27 = v54 + v25;
              if (*(_DWORD *)(v54 + v25 + 48) == *(_DWORD *)buffer) {
                break;
              }
              ++v26;
              v25 += 16;
              if (v26 >= *(unsigned int *)(v54 + 40)) {
                goto LABEL_11;
              }
            }
            uint64_t v34 = *(unsigned int *)(v27 + 52);
            CFIndex v33 = *(unsigned int *)(v27 + 56);
            if (Length < (v33 + v34))
            {
              CFAllocatorRef v50 = "Encoded payload is larger than data.";
            }
            else
            {
              CFDataRef v35 = CFDataCreate(a1, &BytePtr[v34], v33);
              if (v35)
              {
                CFDataRef v36 = v35;
                AMSupportSafeRelease();
                AMAuthInstallCryptoCreateDigestForDataType(a1, v36, (CFTypeRef *)&value, a4);
                if (value)
                {
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                  uint64_t v48 = Mutable;
                  if (Mutable)
                  {
                    CFDictionarySetValue(Mutable, @"Digest", value);
                    uint64_t v5 = 0;
                    *a5 = CFRetain(v48);
                    goto LABEL_18;
                  }
                  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabCreateMeasurementsWithTag", (uint64_t)"failed to create mutable dict measurementDict", v43, v44, v45, v46, v47, v51);
                }
                else
                {
                  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabCreateMeasurementsWithTag", (uint64_t)"created digest is NULL", v37, v38, v39, v40, v41, v51);
                }
                uint64_t v5 = 2;
                goto LABEL_18;
              }
              CFAllocatorRef v50 = "payload is NULL";
            }
            goto LABEL_25;
          }
LABEL_11:
          uint64_t v5 = 8;
LABEL_12:
          AMSupportSafeRelease();
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabCreateMeasurementsWithTag", (uint64_t)"AMAuthInstallApFtabCopyDataForTag returned %d", v28, v29, v30, v31, v32, v5);
          goto LABEL_18;
        }
        CFAllocatorRef v50 = "CFStringGetCString failed.";
      }
      else
      {
        CFAllocatorRef v50 = "ftabData is NULL";
      }
LABEL_25:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabCopyDataForTag", (uint64_t)v50, v17, v18, v19, v20, v21, v51);
      uint64_t v5 = 99;
      goto LABEL_12;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabCopyDataForTag", (uint64_t)"payloadTag is not 4 bytes", v11, v12, v13, v14, v15, v51);
    uint64_t v5 = 1;
    goto LABEL_12;
  }
LABEL_18:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v5;
}

uint64_t AMAuthInstallApFtabStitchTicketData(const void **a1, uint64_t a2, const __CFURL *a3, const __CFDictionary *a4)
{
  uint64_t v45 = 0;
  CFAllocatorRef v8 = CFGetAllocator(a1);
  uint64_t v9 = 1;
  if (a2 && a3 && a4)
  {
    CFAllocatorRef v10 = v8;
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a4, a1[11]);
    if (Value)
    {
      CFDataRef v17 = Value;
      CFIndex Length = CFDataGetLength(Value);
      if (Length > 0)
      {
        CFIndex v24 = Length;
        CFDataRef v25 = (const __CFData *)_AMAuthInstallApFtabCopyFtabFromFile((uint64_t)v10, a2, (uint64_t)&v45, v19, v20, v21, v22, v23);
        uint64_t v31 = v25;
        if (v25)
        {
          int v32 = CFDataGetLength(v25);
          BytePtr = CFDataGetBytePtr(v17);
          CFDataAppendBytes(v31, BytePtr, v24);
          uint64_t v34 = v45;
          *(_DWORD *)(v45 + 16) = v32;
          *(_DWORD *)(v34 + 20) = v24;
          int v35 = CFDataGetLength(v31);
          CFDataIncreaseLength(v31, -v35 & 0xFFFLL);
          uint64_t v36 = AMAuthInstallSupportWriteDataToFileURL(v10, v31, a3, 1);
          if (v36)
          {
            uint64_t v43 = v36;
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabStitchTicketData", (uint64_t)"%s: Failed to copy FTAB file to personalized bundle.", v37, v38, v39, v40, v41, (char)"AMAuthInstallApFtabStitchTicketData");
            uint64_t v9 = v43;
          }
          else
          {
            uint64_t v9 = 0;
          }
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabStitchTicketData", (uint64_t)"ftabData is NULL", v26, v27, v28, v29, v30, v44);
          uint64_t v9 = 99;
        }
        goto LABEL_9;
      }
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabStitchTicketData", (uint64_t)"%s: responseDict has an empty ticket.", v19, v20, v21, v22, v23, (char)"AMAuthInstallApFtabStitchTicketData");
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApFtabStitchTicketData", (uint64_t)"%s: responseDict doesn't contain a %@ ticket.", v12, v13, v14, v15, v16, (char)"AMAuthInstallApFtabStitchTicketData");
    }
    uint64_t v9 = 17;
  }
LABEL_9:
  AMSupportSafeRelease();
  return v9;
}

uint64_t _AMAuthInstallApFtabCopyFtabFromFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    CFAllocatorRef v10 = "fileURL is NULL";
    goto LABEL_8;
  }
  if (!a3)
  {
    CFAllocatorRef v10 = "outFtab is NULL";
    goto LABEL_8;
  }
  int DataFromFileURL = AMSupportCreateDataFromFileURL();
  if (!DataFromFileURL)
  {
    CFAllocatorRef v10 = "fileData is NULL";
LABEL_8:
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApFtabCopyFtabFromFile", (uint64_t)v10, a4, a5, a6, a7, a8, v11);
    goto LABEL_9;
  }
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApFtabCopyFtabFromFile", (uint64_t)"AMSupportCreateDataFromFileURL returned %d", a4, a5, a6, a7, a8, DataFromFileURL);
LABEL_9:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return 0;
}

uint64_t AMAuthInstallApImg3SupportsLocalSigning()
{
  return 0;
}

uint64_t image3SHA1Generate(const void *a1, CC_LONG a2, unsigned __int8 *a3)
{
  memset(&v7, 0, sizeof(v7));
  CC_SHA1_Init(&v7);
  CC_SHA1_Update(&v7, a1, a2);
  return CC_SHA1_Final(a3, &v7);
}

uint64_t image3PKISignHash(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  return 0;
}

int8x16_t image3SHA1Partial(const void *a1, CC_LONG a2, int8x16_t *a3)
{
  memset(&v7, 0, sizeof(v7));
  CC_SHA1_Init(&v7);
  CC_SHA1_Update(&v7, a1, a2);
  int8x16_t result = vrev32q_s8(*(int8x16_t *)&v7.h0);
  *a3 = result;
  a3[1].i32[0] = bswap32(v7.h4);
  return result;
}

uint64_t AMAuthInstallApImg3CreateServerRequestDictionary(void *a1, const void *a2, const void *a3, int a4, CFTypeRef *a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = 1;
  if (a1 && a2 && a3 && a5)
  {
    CFAllocatorRef v12 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v5 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, a2, a3);
      uint64_t v6 = AMAuthInstallApServerRequestAddRequiredTags(a1, v5, a4, v14, v15, v16, v17, v18);
      if (!v6) {
        *a5 = CFRetain(v5);
      }
    }
    else
    {
      uint64_t v6 = 2;
    }
  }
  SafeRelease(v5);
  return v6;
}

uint64_t AMAuthInstallApImg3ServerRequestAddRequiredTags(void *a1, __CFDictionary *a2, int a3, int a4)
{
  CFMutableDictionaryRef v25 = a2;
  if (!a1) {
    return 1;
  }
  CFIndex v5 = 1;
  if (a2)
  {
    uint64_t v7 = a1[2];
    if (v7)
    {
      if (*(void *)v7)
      {
        _CFDictionarySetInteger64(a2, @"ApECID", *(void *)v7);
        uint64_t v7 = a1[2];
      }
      _CFDictionarySetInteger32(a2, @"ApChipID", *(_DWORD *)(v7 + 8));
      _CFDictionarySetInteger32(a2, @"ApBoardID", *(_DWORD *)(a1[2] + 12));
      uint64_t v10 = a1[2];
      if (!*(unsigned char *)(v10 + 116))
      {
        _CFDictionarySetBoolean(a2, @"ApProductionMode", *(unsigned __int8 *)(v10 + 20));
        uint64_t v10 = a1[2];
      }
      _CFDictionarySetInteger32(a2, @"ApSecurityDomain", *(_DWORD *)(v10 + 16));
      if (a3)
      {
        char v11 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionarySetValue(a2, @"@APTicket", (const void *)*MEMORY[0x263EFFB40]);
        uint64_t v12 = a1[2];
        uint64_t v13 = *(const void **)(v12 + 24);
        if (v13 && !*(unsigned char *)(v12 + 116))
        {
          CFDictionarySetValue(a2, @"ApNonce", v13);
          uint64_t v12 = a1[2];
        }
        if (*(unsigned char *)(v12 + 64)) {
          CFDictionarySetValue(a2, @"ApRelaxedImageVerification", v11);
        }
      }
      CFIndex v5 = 0;
      if (!a4)
      {
        CFDictionaryRef v14 = (const __CFDictionary *)a1[53];
        if (v14)
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v14, @"ApRequestEntries");
          if (Value)
          {
            CFDictionaryRef v16 = Value;
            int v17 = CFGetAllocator(a1);
            CFIndex v5 = AMAuthInstallSupportApplyDictionaryOverrides(v17, v16, &v25, 0);
            if (v5) {
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3ServerRequestAddRequiredTags", (uint64_t)"failed to set Ap entitlements", v18, v19, v20, v21, v22, v24);
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t AMAuthInstallApImg3CreatePersonalizedData(const void *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, CFTypeRef *a5)
{
  memset(length, 0, sizeof(length));
  CFAllocatorRef v10 = AMAuthInstallSupportCopyAllocator();
  BytePtr = (UInt8 *)CFDataGetBytePtr(a2);
  LODWORD(a2) = CFDataGetLength(a2);
  uint64_t v12 = (UInt8 *)CFDataGetBytePtr(a4);
  uint64_t v13 = CFDataGetBytePtr(a3);
  CFIndex v14 = CFDataGetLength(a3);
  if (tss_stitch_img3(BytePtr, (int)a2, v12, v13, v14, &length[1], length, v15))
  {
    CFDataRef v16 = 0;
    uint64_t v17 = 9;
  }
  else
  {
    CFAllocatorRef v18 = CFGetAllocator(a1);
    CFDataRef v19 = CFDataCreateWithBytesNoCopy(v18, *(const UInt8 **)&length[1], length[0], v10);
    CFDataRef v16 = v19;
    if (v19)
    {
      uint64_t v17 = 0;
      *a5 = CFRetain(v19);
    }
    else
    {
      free(*(void **)&length[1]);
      uint64_t v17 = 2;
    }
  }
  SafeRelease(v16);
  SafeRelease(v10);
  return v17;
}

uint64_t AMAuthInstallApImg3PersonalizeWithEntryName(void *a1, const __CFURL *a2, const __CFURL *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  return AMAuthInstallApImg3PersonalizeImg3WithEntryNameAndOptions(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t AMAuthInstallApImg3PersonalizeImg3WithEntryNameAndOptions(void *a1, const __CFURL *a2, const __CFURL *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6, char a7)
{
  *(void *)CFIndex v14 = 0;
  if (a1)
  {
    CFDataRef v8 = 0;
    uint64_t v9 = 1;
    if (a3 && a2 && a1[2])
    {
      uint64_t v11 = AMAuthInstallApImg3CopyPersonalizedData(a1, a2, a4, a5, a6, (CFTypeRef *)v14, a7 & 1);
      if (v11)
      {
        uint64_t v9 = v11;
        CFDataRef v8 = *(const __CFData **)v14;
      }
      else
      {
        CFAllocatorRef v12 = CFGetAllocator(a1);
        CFDataRef v8 = *(const __CFData **)v14;
        uint64_t v9 = AMAuthInstallSupportWriteDataToFileURL(v12, *(const __CFData **)v14, a3, 1);
      }
    }
  }
  else
  {
    CFDataRef v8 = 0;
    uint64_t v9 = 1;
  }
  SafeRelease(v8);
  return v9;
}

uint64_t AMAuthInstallApImg3CreateMeasurementsFromURL(const __CFAllocator *a1, const __CFURL *a2, CFTypeRef *a3, char a4)
{
  CFDataRef v4 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  CFDataRef theData = 0;
  uint64_t v5 = 1;
  if (!a2)
  {
    CFDataRef v7 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_11;
  }
  CFDataRef v7 = 0;
  CFMutableDictionaryRef Mutable = 0;
  if (a3)
  {
    uint64_t DataFromFileURL = AMAuthInstallPlatformCreateDataFromFileURL(a1, (CFTypeRef *)&theData, a2);
    if (DataFromFileURL)
    {
      uint64_t v5 = DataFromFileURL;
      CFDataRef v4 = 0;
      CFDataRef v7 = 0;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_11;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
      int Length = CFDataGetLength(theData);
      if (tss_get_partial_hash(BytePtr, Length, 64, (uint64_t)bytes, v14, v15, v16, v17))
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3CreateMeasurementsFromURL", (uint64_t)"failed to compute partial digest for img3 object", v18, v19, v20, v21, v22, (char)theData);
        CFDataRef v4 = 0;
        CFDataRef v7 = 0;
LABEL_8:
        uint64_t v5 = 5;
        goto LABEL_11;
      }
      CFDataRef v7 = CFDataCreate(a1, bytes, 28);
      if (v7)
      {
        CFDictionarySetValue(Mutable, @"PartialDigest", v7);
        if (a4)
        {
          CFDataRef v4 = 0;
LABEL_15:
          uint64_t v5 = 0;
          *a3 = CFRetain(Mutable);
          goto LABEL_11;
        }
        char v24 = CFDataGetBytePtr(theData);
        int v25 = CFDataGetLength(theData);
        if (tss_get_hash((uint64_t)v24, v25, (uint64_t)v37, v26, v27, v28, v29, v30))
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3CreateMeasurementsFromURL", (uint64_t)"failed to compute digest for img3 object", v31, v32, v33, v34, v35, (char)theData);
          CFDataRef v4 = 0;
          goto LABEL_8;
        }
        CFDataRef v4 = CFDataCreate(a1, v37, 20);
        if (v4)
        {
          CFDictionarySetValue(Mutable, @"Digest", v4);
          goto LABEL_15;
        }
      }
      else
      {
        CFDataRef v4 = 0;
      }
    }
    else
    {
      CFDataRef v4 = 0;
      CFDataRef v7 = 0;
    }
    uint64_t v5 = 2;
  }
LABEL_11:
  SafeRelease(theData);
  SafeRelease(v4);
  SafeRelease(v7);
  SafeRelease(Mutable);
  return v5;
}

uint64_t AMAuthInstallApImg3CopyPersonalizedData(void *a1, const __CFURL *a2, CFStringRef a3, const void *a4, const __CFDictionary *a5, CFTypeRef *a6, char a7)
{
  CFTypeRef v10 = a4;
  CFTypeRef v36 = 0;
  CFDictionaryRef theDict = a5;
  CFTypeRef v34 = 0;
  CFDataRef v35 = 0;
  SafeRetain(a4);
  SafeRetain(a5);
  if (!a1 || !a1[2])
  {
    uint64_t v15 = 1;
    goto LABEL_26;
  }
  if (v10)
  {
    if (a3) {
      goto LABEL_11;
    }
  }
  else
  {
    CFTypeRef v33 = 0;
    CFAllocatorRef v16 = CFGetAllocator(a1);
    uint64_t v17 = AMAuthInstallApImg3CreateMeasurementsFromURL(v16, a2, &v33, a7);
    if (v17)
    {
      uint64_t v15 = v17;
      CFTypeRef v10 = 0;
      goto LABEL_26;
    }
    CFTypeRef v10 = v33;
    if (a3)
    {
LABEL_11:
      if (!a5)
      {
        uint64_t DataFromFileURL = AMAuthInstallApImg3CreateServerRequestDictionary(a1, a3, v10, 0, &v36);
        if (DataFromFileURL) {
          goto LABEL_20;
        }
        uint64_t DataFromFileURL = AMAuthInstallRequestSendSync((uint64_t)a1, v36, (CFTypeRef *)&theDict);
        if (DataFromFileURL) {
          goto LABEL_20;
        }
      }
      CFAllocatorRef v18 = CFGetAllocator(a1);
      uint64_t DataFromFileURL = AMAuthInstallPlatformCreateDataFromFileURL(v18, (CFTypeRef *)&v35, a2);
      if (DataFromFileURL) {
        goto LABEL_20;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, a3);
      if (Value)
      {
        CFDictionaryRef v26 = Value;
        CFDataRef v27 = (const __CFData *)CFDictionaryGetValue(Value, @"Blob");
        if (v27)
        {
          CFDataRef v28 = v27;
          CFDataRef v29 = (const __CFData *)CFDictionaryGetValue(v26, @"PartialDigest");
          if (v29)
          {
            uint64_t v30 = &v34;
            uint64_t DataFromFileURL = AMAuthInstallApImg3CreatePersonalizedData(a1, v35, v28, v29, &v34);
            if (!DataFromFileURL) {
              goto LABEL_25;
            }
LABEL_20:
            uint64_t v15 = DataFromFileURL;
            goto LABEL_26;
          }
          uint64_t v31 = "response missing partial digest for \"%@\"";
        }
        else
        {
          uint64_t v31 = "response missing personalization data for \"%@\"";
        }
      }
      else
      {
        uint64_t v31 = "response missing entry \"%@\"";
      }
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3CopyPersonalizedData", (uint64_t)v31, v21, v22, v23, v24, v25, (char)a3);
      uint64_t v30 = (CFTypeRef *)&v35;
LABEL_25:
      uint64_t v15 = 0;
      *a6 = CFRetain(*v30);
      goto LABEL_26;
    }
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  a3 = AMAuthInstallApCopyImageTag(v14, a2);
  if (a3) {
    goto LABEL_11;
  }
  uint64_t v15 = 0;
LABEL_26:
  SafeRelease(v36);
  SafeRelease(v10);
  SafeRelease(theDict);
  SafeRelease(v35);
  SafeRelease(v34);
  return v15;
}

uint64_t AMAuthInstallApImg3PersonalizeFile(void *a1, const __CFURL *a2, const __CFURL *a3, const void *a4)
{
  return AMAuthInstallApImg3PersonalizeImg3WithEntryNameAndOptions(a1, a2, a3, 0, a4, 0, 0);
}

uint64_t AMAuthInstallApImg3CreateSignatureStrippedImage3(const __CFAllocator *a1, CFDataRef theData, CFTypeRef *a3)
{
  CFDataRef v3 = 0;
  CFIndex length = 0;
  uint64_t v4 = 1;
  if (theData && a3)
  {
    CFDataRef MutableCopy = CFDataCreateMutableCopy(a1, 0, theData);
    CFDataRef v3 = MutableCopy;
    if (MutableCopy)
    {
      CFIndex length = CFDataGetLength(MutableCopy);
      BytePtr = (UInt8 *)CFDataGetBytePtr(v3);
      if (tss_strip_img3_signature(BytePtr, &length, v8, v9, v10, v11, v12, v13))
      {
        uint64_t v4 = 9;
      }
      else
      {
        CFDataSetLength(v3, length);
        uint64_t v4 = 0;
        *a3 = CFRetain(v3);
      }
    }
    else
    {
      uint64_t v4 = 2;
    }
  }
  SafeRelease(v3);
  return v4;
}

uint64_t AMAuthInstallApImg3WriteSignatureStrippedImage3(CFTypeRef cf, const __CFURL *a2)
{
  *(void *)CFDataRef v7 = 0;
  CFDataRef theData = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t DataFromFileURL = AMAuthInstallSupportCreateDataFromFileURL((const __CFAllocator *)*MEMORY[0x263EFFB08], (CFTypeRef *)&theData, cf);
  if (!DataFromFileURL)
  {
    uint64_t DataFromFileURL = AMAuthInstallApImg3CreateSignatureStrippedImage3(v3, theData, (CFTypeRef *)v7);
    if (!DataFromFileURL) {
      uint64_t DataFromFileURL = AMAuthInstallSupportWriteDataToFileURL(v3, *(const __CFData **)v7, a2, 1);
    }
  }
  uint64_t v5 = DataFromFileURL;
  SafeRelease(theData);
  SafeRelease(*(CFTypeRef *)v7);
  return v5;
}

CFDataRef AMAuthInstallApImg3IsImg3Payload(const __CFData *result)
{
  if (result)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(result);
    return (const __CFData *)(tss_image_is_img3(BytePtr) == 0);
  }
  return result;
}

uint64_t AMAuthInstallApImg3IsFinalized(const __CFAllocator *a1, CFTypeRef cf, BOOL *a3)
{
  CFDataRef theData = 0;
  uint64_t DataFromFileURL = AMAuthInstallSupportCreateDataFromFileURL(a1, (CFTypeRef *)&theData, cf);
  if (!DataFromFileURL)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    *a3 = tss_image_is_finalized(BytePtr, v6, v7, v8, v9, v10, v11, v12) == 0;
  }
  SafeRelease(theData);
  return DataFromFileURL;
}

uint64_t AMAuthInstallApImg3Finalize(const __CFAllocator *a1, CFTypeRef cf, const __CFURL *a3)
{
  CFIndex v21 = 0;
  uint64_t v22 = 0;
  CFDataRef theData = 0;
  uint64_t v20 = 0;
  uint64_t DataFromFileURL = AMAuthInstallSupportCreateDataFromFileURL(a1, (CFTypeRef *)&theData, cf);
  if (DataFromFileURL)
  {
    uint64_t v16 = DataFromFileURL;
    CFDataRef v12 = 0;
    CFDataRef v15 = 0;
  }
  else
  {
    CFDataRef MutableCopy = CFDataCreateMutableCopy(a1, 0, theData);
    CFDataRef v12 = MutableCopy;
    if (MutableCopy)
    {
      BytePtr = (UInt8 *)CFDataGetBytePtr(MutableCopy);
      CFIndex Length = CFDataGetLength(v12);
      if (image3InstantiateFromBuffer(&v20, BytePtr, Length, 1))
      {
        CFDataRef v15 = 0;
        uint64_t v16 = 9;
        uint64_t v17 = "%s: invalid image 3 object";
LABEL_10:
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3Finalize", (uint64_t)v17, v6, v7, v8, v9, v10, (char)"AMAuthInstallApImg3Finalize");
        goto LABEL_11;
      }
      if (image3Finalize(v20, (char **)&v22, &v21, 1, 0))
      {
        CFDataRef v15 = 0;
        uint64_t v16 = 14;
        uint64_t v17 = "%s: failed to finalize image";
        goto LABEL_10;
      }
      CFDataRef v15 = CFDataCreate(a1, v22, v21);
      if (v15)
      {
        uint64_t v16 = AMAuthInstallSupportWriteDataToFileURL(a1, v15, a3, 1);
        if (!v16) {
          goto LABEL_11;
        }
        uint64_t v17 = "%s: failed to write finalized image3";
        goto LABEL_10;
      }
      uint64_t v16 = 0;
    }
    else
    {
      CFDataRef v15 = 0;
      uint64_t v16 = 2;
    }
  }
LABEL_11:
  if (v20) {
    image3Discard(&v20);
  }
  if (v16) {
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallApImg3Finalize", (uint64_t)"%s: %@", v6, v7, v8, v9, v10, (char)"AMAuthInstallApImg3Finalize");
  }
  SafeRelease(theData);
  SafeRelease(v12);
  SafeRelease(v15);
  return v16;
}

uint64_t AMAuthInstallApImg3CopyBuildString(const __CFAllocator *a1, CFTypeRef cf, CFStringRef *a3)
{
  CFDataRef theData = 0;
  uint64_t v27 = 0;
  __s = 0;
  uint64_t DataFromFileURL = AMAuthInstallSupportCreateDataFromFileURL(a1, (CFTypeRef *)&theData, cf);
  if (DataFromFileURL)
  {
    uint64_t v22 = DataFromFileURL;
    goto LABEL_20;
  }
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if (image3InstantiateFromBuffer(&v27, BytePtr, Length, 0))
  {
    uint64_t v22 = 9;
    uint64_t v24 = "%s: invalid image 3 object";
    goto LABEL_19;
  }
  if (image3GetTagString(v27, 1447383635, &__s, 0))
  {
    uint64_t v22 = 9;
    uint64_t v24 = "%s: failed to get tag";
    goto LABEL_19;
  }
  CFAllocatorRef v18 = __s;
  if (!strchr(__s, 126))
  {
    size_t v19 = strlen(v18);
    if (v19 + 1 < 2)
    {
      uint64_t v22 = 99;
      uint64_t v24 = "$s: failed to get tag buffer length";
    }
    else
    {
      uint64_t v20 = (char *)realloc(v18, v19 + 2);
      __s = v20;
      if (v20)
      {
        *(_WORD *)&v20[strlen(v20)] = 126;
        CFAllocatorRef v18 = __s;
        goto LABEL_8;
      }
      uint64_t v22 = 2;
      uint64_t v24 = "$s: failed to realloc tag buffer";
    }
LABEL_19:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3CopyBuildString", (uint64_t)v24, v13, v14, v15, v16, v17, (char)"AMAuthInstallApImg3CopyBuildString");
    goto LABEL_20;
  }
LABEL_8:
  CFStringRef v21 = CFStringCreateWithCString(a1, v18, 0x8000100u);
  *a3 = v21;
  if (v21)
  {
    uint64_t v22 = 0;
    goto LABEL_10;
  }
  uint64_t v22 = 2;
LABEL_20:
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallApImg3CopyBuildString", (uint64_t)"%s: %@", v6, v7, v8, v9, v10, (char)"AMAuthInstallApImg3CopyBuildString");
LABEL_10:
  if (v27) {
    image3Discard(&v27);
  }
  SafeRelease(theData);
  SafeFree(__s);
  return v22;
}

uint64_t AMAuthInstallApImg3CopyRequestTag(int a1, CFDataRef theData, void *a3)
{
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v3 = 1;
  if (!theData || !a3) {
    goto LABEL_16;
  }
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if (image3InstantiateFromBuffer(&v29, BytePtr, Length, 0))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3CopyRequestTag", (uint64_t)"%s: invalid image 3 object", v8, v9, v10, v11, v12, (char)"AMAuthInstallApImg3CopyRequestTag");
  }
  else
  {
    if (!image3GetTagSignedNumber(v29, 1415139397, &v31, 0))
    {
      uint64_t v18 = 0;
      uint64_t v30 = bswap32(v31);
      uint64_t v31 = v30;
      do
      {
        if (CFStringGetCString(kImgTypes[v18 + 1], buffer, 5, 0x8000100u))
        {
          if (v30 == *(_DWORD *)buffer && BYTE4(v30) == v28)
          {
            CFTypeRef v26 = CFRetain(kImgTypes[v18]);
            *a3 = v26;
            if (v26) {
              goto LABEL_13;
            }
            goto LABEL_18;
          }
        }
        v18 += 2;
      }
      while (v18 != 56);
      if (*a3)
      {
LABEL_13:
        uint64_t v3 = 0;
        goto LABEL_14;
      }
LABEL_18:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3CopyRequestTag", (uint64_t)"failed to find entry for %@", v19, v20, v21, v22, v23, 0);
      uint64_t v3 = 8;
      goto LABEL_14;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg3CopyRequestTag", (uint64_t)"%s: failed to get tag", v13, v14, v15, v16, v17, (char)"AMAuthInstallApImg3CopyRequestTag");
  }
  uint64_t v3 = 9;
LABEL_14:
  if (v29) {
    image3Discard(&v29);
  }
LABEL_16:
  SafeRelease(0);
  return v3;
}

CFStringRef AMAuthInstallApImg4GetTypeForEntryName(CFStringRef theString1)
{
  uint64_t v2 = 0;
  while (CFStringCompare(theString1, kImg4Types[v2], 0))
  {
    v2 += 2;
    if (v2 == 200)
    {
      uint64_t v3 = 0;
      goto LABEL_6;
    }
  }
  uint64_t v3 = kImg4Types[v2 + 1];
LABEL_6:
  if (v3) {
    return v3;
  }
  else {
    return theString1;
  }
}

CFStringRef AMAuthInstallApImg4GetEntryNameForType(CFStringRef theString1)
{
  uint64_t v2 = 0;
  while (CFStringCompare(theString1, kImg4Types[v2 + 1], 0))
  {
    v2 += 2;
    if (v2 == 200)
    {
      CFStringRef result = 0;
      goto LABEL_6;
    }
  }
  CFStringRef result = (CFStringRef)CFRetain(kImg4Types[v2]);
LABEL_6:
  if (!result) {
    return theString1;
  }
  return result;
}

uint64_t AMAuthInstallApImg4CreateRequestTagFromFileURL(const __CFAllocator *a1, CFStringRef theString, CFStringRef stringToFind, CFStringRef *a4, CFURLRef *a5)
{
  CFStringRef v5 = 0;
  CFTypeRef cf = 0;
  uint64_t v6 = 1;
  if (!theString || !stringToFind || !a4)
  {
    CFStringRef v9 = 0;
    goto LABEL_16;
  }
  CFStringRef v9 = 0;
  if (a5)
  {
    CFIndex location = CFStringFind(theString, stringToFind, 0).location;
    if (location == -1)
    {
      CFURLRef v17 = CFURLCreateWithFileSystemPath(a1, theString, kCFURLPOSIXPathStyle, 0);
      *a5 = v17;
      if (v17)
      {
        uint64_t v18 = AMAuthInstallSupportCreateDataFromFileURL(a1, &cf, v17);
        if (v18)
        {
          uint64_t v6 = v18;
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateRequestTagFromFileURL", (uint64_t)"failed to create file from %@", v20, v21, v22, v23, v24, (char)theString);
          CFStringRef v5 = 0;
        }
        else
        {
          CFStringRef v25 = AMAuthInstallApImg4CopyPayloadType(a1, cf, v19, v20, v21, v22, v23, v24);
          CFStringRef v5 = v25;
          if (v25)
          {
            CFStringRef EntryNameForType = AMAuthInstallApImg4GetEntryNameForType(v25);
            *a4 = EntryNameForType;
            if (!EntryNameForType)
            {
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateRequestTagFromFileURL", (uint64_t)"entry not found for %@", v32, v33, v34, v35, v36, (char)v5);
              CFStringRef v9 = 0;
              uint64_t v6 = 8;
              goto LABEL_16;
            }
            CFRetain(EntryNameForType);
            CFStringRef v9 = 0;
LABEL_15:
            uint64_t v6 = 0;
            goto LABEL_16;
          }
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateRequestTagFromFileURL", (uint64_t)"failed to get payload type from %@", v26, v27, v28, v29, v30, (char)theString);
        }
        CFStringRef v9 = 0;
        goto LABEL_16;
      }
      CFStringRef v5 = 0;
      CFStringRef v9 = 0;
    }
    else
    {
      CFIndex v13 = location;
      CFIndex v14 = location + 1;
      v39.CFIndex length = CFStringGetLength(theString) - (location + 1);
      v39.CFIndex location = v14;
      CFStringRef v9 = CFStringCreateWithSubstring(a1, theString, v39);
      if (v9)
      {
        CFURLRef v15 = CFURLCreateWithFileSystemPath(a1, v9, kCFURLPOSIXPathStyle, 0);
        *a5 = v15;
        if (v15)
        {
          v40.CFIndex location = 0;
          v40.CFIndex length = v13;
          CFStringRef v16 = CFStringCreateWithSubstring(a1, theString, v40);
          CFStringRef v5 = 0;
          *a4 = v16;
          if (!v16) {
            goto LABEL_20;
          }
          goto LABEL_15;
        }
      }
      CFStringRef v5 = 0;
    }
LABEL_20:
    uint64_t v6 = 2;
  }
LABEL_16:
  SafeRelease(cf);
  SafeRelease(v5);
  SafeRelease(0);
  SafeRelease(v9);
  return v6;
}

CFStringRef AMAuthInstallApImg4CopyPayloadType(const __CFAllocator *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16 = 0;
  if (!cf)
  {
    CFIndex v13 = "inputData is NULL";
LABEL_15:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CopyPayloadType", (uint64_t)v13, a4, a5, a6, a7, a8, v14);
    return 0;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != CFDataGetTypeID())
  {
    CFIndex v13 = "inputData is not of type CFDataRef";
    goto LABEL_15;
  }
  int v18 = 0;
  uint64_t v19 = 0;
  memset(numBytes, 0, sizeof(numBytes));
  uint64_t Length = CFDataGetLength((CFDataRef)cf);
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr((CFDataRef)cf);
  if (DERDecoderInitialize((uint64_t)&Length + 4, BytePtr, (unsigned int *)&Length, Length))
  {
    CFIndex v13 = "DERDecoderInitialize top level failed";
    goto LABEL_15;
  }
  if (DERDecoderGetDataWithTag((uint64_t)&Length + 4, 0, 0x10u, 1, &numBytes[1], numBytes, &v16))
  {
    CFIndex v13 = "could not find im4p top level sequence";
    goto LABEL_15;
  }
  if (DERDecoderInitialize((uint64_t)&Length + 4, *(unsigned __int8 **)&numBytes[1], numBytes, numBytes[0]))
  {
    CFIndex v13 = "DERDecoderInitialize sequence failed";
    goto LABEL_15;
  }
  int v16 = 1;
  if (DERDecoderGetDataWithTag((uint64_t)&Length + 4, 0, 0x16u, 0, &numBytes[1], numBytes, &v16))
  {
    CFIndex v13 = "could not find im4p payload type";
    goto LABEL_15;
  }
  return CFStringCreateWithBytes(a1, *(const UInt8 **)&numBytes[1], numBytes[0], 0x8000100u, 0);
}

CFDataRef AMAuthInstallApImg4IsImg4Payload(const __CFAllocator *a1, CFDataRef theData)
{
  CFDataRef v2 = theData;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v9 = 0;
  memset(numBytes, 0, sizeof(numBytes));
  if (!theData) {
    goto LABEL_13;
  }
  HIDWORD(v9) = CFDataGetLength(theData);
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v2);
  if (DERDecoderInitialize((uint64_t)v10, BytePtr, (unsigned int *)&v9 + 1, HIDWORD(v9))
    || DERDecoderGetDataWithTag((uint64_t)v10, 0, 0x10u, 1, &numBytes[1], numBytes, (int *)&v9)
    || DERDecoderInitialize((uint64_t)v10, *(unsigned __int8 **)&numBytes[1], numBytes, numBytes[0])
    || (LODWORD(v9) = 0,
        DERDecoderGetDataWithTag((uint64_t)v10, 0, 0x16u, 0, &numBytes[1], numBytes, (int *)&v9)))
  {
    CFDataRef v2 = 0;
LABEL_13:
    CFStringRef v6 = 0;
    goto LABEL_11;
  }
  CFStringRef v5 = CFStringCreateWithBytes(a1, *(const UInt8 **)&numBytes[1], numBytes[0], 0x8000100u, 0);
  CFStringRef v6 = v5;
  CFDataRef v2 = (const __CFData *)(v5
                       && (CFEqual(v5, @"IMG4")
                        || CFEqual(v6, @"IM4P")));
LABEL_11:
  SafeRelease(v6);
  return v2;
}

uint64_t AMAuthInstallApImg4CopyPayload(const __CFAllocator *a1, CFTypeRef cf, CFTypeRef *a3)
{
  CFTypeRef cfa = 0;
  uint64_t v3 = 1;
  if (cf && a3)
  {
    uint64_t v6 = AMAuthInstallSupportCreateDataFromFileURL(a1, &cfa, cf);
    if (v6)
    {
      uint64_t v3 = v6;
    }
    else if (AMAuthInstallApImg4IsImg4Payload(a1, (CFDataRef)cfa))
    {
      uint64_t v3 = 0;
      *a3 = CFRetain(cfa);
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CopyPayload", (uint64_t)"object is not a valid img4/im4p type", v7, v8, v9, v10, v11, v13);
      uint64_t v3 = 23;
    }
  }
  SafeRelease(cfa);
  return v3;
}

uint64_t AMAuthInstallApImg4CopyPayloadVersionProperty(const __CFAllocator *a1, const void *a2, int a3, uint64_t *a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  CFIndex Length = 0;
  CFDataRef theData = 0;
  CFIndex v37 = 0;
  BytePtr = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  uint64_t v35 = 0;
  MutableBytePtr = 0;
  uint64_t v34 = 0;
  if (!a2 || !a4)
  {
    CFDataRef v16 = 0;
    CFDataRef v14 = 0;
    CFDataRef v31 = 0;
    CFDataRef v32 = 0;
    uint64_t v23 = 1;
    if (!a4) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  uint64_t v7 = AMAuthInstallApImg4CopyPayload(a1, a2, (CFTypeRef *)&theData);
  if (v7)
  {
    uint64_t v23 = v7;
    CFDataRef v16 = 0;
    CFDataRef v14 = 0;
    goto LABEL_10;
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  int v8 = DERImg4DecodePayload((uint64_t)&BytePtr, (unint64_t)&v41);
  if (v8)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CopyPayloadVersionProperty", (uint64_t)"failed to decode img4 payload, error:%d", v9, v10, v11, v12, v13, v8);
    CFDataRef v16 = 0;
    CFDataRef v14 = 0;
    goto LABEL_24;
  }
  CFDataRef v14 = (const __CFData *)AMSupportCopyDataFromAsciiEncodedHex();
  if (!v14)
  {
    CFDataRef v16 = 0;
    uint64_t v23 = 3;
    goto LABEL_10;
  }
  CFDataRef MutableCopy = CFDataCreateMutableCopy(a1, 0, v14);
  CFDataRef v16 = MutableCopy;
  if (!MutableCopy) {
    goto LABEL_19;
  }
  unsigned int v17 = 1952607602;
  MutableBytePtr = CFDataGetMutableBytePtr(MutableCopy);
  CFIndex v37 = CFDataGetLength(v16);
  if (a3 == 1)
  {
    unsigned int v17 = 1952607603;
    goto LABEL_12;
  }
  if (a3 == 2)
  {
LABEL_12:
    Img4DecodeGetPayloadVersionPropertyString((uint64_t)&MutableBytePtr, v17 | 0xE000000000000000, &v35, &v34);
    if (!v30)
    {
      uint64_t v24 = AMSupportCopyDataFromAsciiEncodedHex();
      if (v24)
      {
        uint64_t v23 = 0;
        goto LABEL_15;
      }
LABEL_19:
      uint64_t v23 = 2;
      goto LABEL_10;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CopyPayloadVersionProperty", (uint64_t)"failed to parse version property: %d, error:%d", v25, v26, v27, v28, v29, v17);
LABEL_24:
    uint64_t v23 = 23;
    goto LABEL_10;
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CopyPayloadVersionProperty", (uint64_t)"unsupported property type: %d\n", v18, v19, v20, v21, v22, a3);
  uint64_t v23 = 1;
LABEL_10:
  uint64_t v24 = 0;
LABEL_15:
  *a4 = v24;
  CFDataRef v31 = v16;
  CFDataRef v32 = v14;
LABEL_16:
  SafeRelease(v31);
  SafeRelease(v32);
  SafeRelease(theData);
  return v23;
}

uint64_t AMAuthInstallApImg4CreateMeasurementsFromURL(const __CFAllocator *a1, const __CFURL *a2, int a3, CFTypeRef *a4)
{
  return AMAuthInstallApImg4CreateMeasurementsWithTag(a1, a2, 0, a3, a4);
}

uint64_t AMAuthInstallApImg4CreateMeasurementsWithTag(const __CFAllocator *a1, CFURLRef anURL, const __CFString *a3, int a4, CFTypeRef *a5)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  value = 0;
  CFTypeRef cf = 0;
  CFStringRef v101 = 0;
  CFDataRef v102 = 0;
  uint64_t v5 = 1;
  if (!anURL || !a5) {
    goto LABEL_69;
  }
  CFStringRef v10 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  CFStringRef v11 = v10;
  if (!v10) {
    goto LABEL_78;
  }
  if (CFStringFind(v10, @"=", 0).location != -1)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, v11, @"=");
    CFArrayRef v13 = ArrayBySeparatingStrings;
    if (!ArrayBySeparatingStrings) {
      goto LABEL_78;
    }
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    CFStringRef v15 = ValueAtIndex;
    if (ValueAtIndex)
    {
      if (!a3)
      {
        CFStringRef TypeForEntryName = AMAuthInstallApImg4GetTypeForEntryName(ValueAtIndex);
        if (!TypeForEntryName) {
          goto LABEL_76;
        }
        a3 = TypeForEntryName;
        if (CFEqual(TypeForEntryName, v15)
          && CFStringCompare(a3, @"ftap", 0)
          && CFStringCompare(a3, @"rfta", 0)
          && CFStringCompare(a3, @"ftsp", 0)
          && CFStringCompare(a3, @"rfts", 0))
        {
          a3 = 0;
        }
      }
      CFStringRef v17 = (const __CFString *)CFArrayGetValueAtIndex(v13, 1);
      if (v17)
      {
        uint64_t v18 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], v17, kCFURLPOSIXPathStyle, 0);
        if (!v18) {
          goto LABEL_78;
        }
        if (a3)
        {
LABEL_13:
          CFStringGetCString(a3, buffer, 32, 0x8000100u);
          uint64_t v19 = AMAuthInstallSupportCreateDataFromFileURL(a1, &cf, v18);
          if (v19)
          {
            uint64_t v5 = v19;
            goto LABEL_69;
          }
          uint64_t v20 = AMAuthInstallApImg4ReCreatePayloadWithProperties(buffer, 0, (CFDataRef)cf, 0, 0, 0, 0, &v102);
          if (v20)
          {
            uint64_t v5 = v20;
            CFBooleanRef v98 = "failed to create im4p with override tag";
          }
          else
          {
            AMSupportSafeRelease();
            CFTypeRef cf = 0;
            if (AMAuthInstallCryptoCreateDigestForDataType(a1, v102, (CFTypeRef *)&value, a4) != 1)
            {
              CFStringRef v26 = (const __CFString *)AMSupportSafeRetain();
              AMSupportSafeRelease();
              CFDataRef v102 = 0;
              goto LABEL_23;
            }
            uint64_t v5 = 1;
            CFBooleanRef v98 = "Unsupported digestType";
          }
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateMeasurementsWithTag", (uint64_t)v98, v21, v22, v23, v24, v25, v99);
          goto LABEL_69;
        }
        goto LABEL_18;
      }
    }
LABEL_76:
    uint64_t v5 = 8;
    goto LABEL_69;
  }
  uint64_t v18 = CFRetain(anURL);
  if (a3) {
    goto LABEL_13;
  }
LABEL_18:
  if (AMAuthInstallSupportCreateDataFromFileURL(a1, &cf, v18)) {
    CFStringRef v26 = 0;
  }
  else {
    CFStringRef v26 = AMAuthInstallApImg4CopyPayloadType(a1, cf, v32, v33, v34, v35, v36, v37);
  }
  AMAuthInstallCryptoCreateDigestForDataType(a1, (const __CFData *)cf, (CFTypeRef *)&value, a4);
  if (value)
  {
    AMSupportSafeRelease();
    CFTypeRef cf = 0;
LABEL_23:
    if (value)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      long long v49 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"Digest", value);
        if (!v26)
        {
LABEL_68:
          uint64_t v5 = 0;
          *a5 = CFRetain(v49);
          goto LABEL_69;
        }
        if (CFStringCompare(v26, @"sepi", 0))
        {
          if (CFStringCompare(v26, @"rsep", 0)) {
            goto LABEL_34;
          }
          int v50 = AMAuthInstallApImg4CopyPayloadVersionProperty(a1, v18, 2, (uint64_t *)&v101);
          if (v50)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateMeasurementsWithTag", (uint64_t)"could not get tbmr property, status:%d\n", v51, v52, v53, v54, v55, v50);
            goto LABEL_34;
          }
        }
        else
        {
          int v56 = AMAuthInstallApImg4CopyPayloadVersionProperty(a1, v18, 1, (uint64_t *)&v101);
          if (v56)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateMeasurementsWithTag", (uint64_t)"could not get tbms property, status:%d\n", v57, v58, v59, v60, v61, v56);
            goto LABEL_34;
          }
        }
        CFDictionarySetValue(v49, @"TBMDigests", v101);
LABEL_34:
        CFIndex v110 = 0;
        CFDataRef theData = 0;
        v108 = 0;
        BytePtr = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        *(_OWORD *)buffer = 0u;
        long long v113 = 0u;
        if (!v18)
        {
          CFDataRef v69 = 0;
          uint64_t v5 = 1;
          goto LABEL_67;
        }
        uint64_t v62 = AMAuthInstallApImg4CopyPayload(a1, v18, (CFTypeRef *)&theData);
        if (v62)
        {
          uint64_t v5 = v62;
          goto LABEL_39;
        }
        BytePtr = CFDataGetBytePtr(theData);
        CFIndex v110 = CFDataGetLength(theData);
        *(_OWORD *)buffer = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        int v63 = DERImg4DecodePayloadWithProperties((uint64_t)&BytePtr, (unint64_t)buffer);
        if (v63)
        {
          AMAuthInstallLog(7, (uint64_t)"AMAuthInstallCopyPayloadPropertiesToMeasurementDictionary", (uint64_t)"failed to decode img4 payload with properties (error=%d), assuming no properties", v64, v65, v66, v67, v68, v63);
LABEL_38:
          uint64_t v5 = 0;
LABEL_39:
          CFDataRef v69 = 0;
          goto LABEL_67;
        }
        if (!(void)v118) {
          goto LABEL_38;
        }
        *(_OWORD *)bytes = 0u;
        *(_OWORD *)CFIndex length = 0u;
        long long v105 = 0u;
        if (CFStringCompare(v26, @"sepi", 0))
        {
          if (CFStringCompare(v26, @"rsep", 0)) {
            goto LABEL_57;
          }
          if (AMAuthInstallApImg4DecodePayloadProperty((unint64_t *)&BytePtr, 0xE000000074626D72, (unint64_t)&v105)|| (CFTypeID v75 = bytes[1]) == 0)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallCopyPayloadPropertiesToMeasurementDictionary", (uint64_t)"could not get tbmr payload property, status:%d\n", v70, v71, v72, v73, v74, 23);
            goto LABEL_57;
          }
        }
        else if (AMAuthInstallApImg4DecodePayloadProperty((unint64_t *)&BytePtr, 0xE000000074626D73, (unint64_t)&v105)|| (CFTypeID v75 = bytes[1]) == 0)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallCopyPayloadPropertiesToMeasurementDictionary", (uint64_t)"could not get tbms payload property, status:%d\n", v76, v77, v78, v79, v80, 23);
          goto LABEL_57;
        }
        CFDataRef v81 = CFDataCreate(a1, v75, length[0]);
        if (!v81) {
          goto LABEL_85;
        }
        CFDataRef v82 = v81;
        CFDictionarySetValue(v49, @"TBMDigests", v81);
        SafeRelease(v82);
LABEL_57:
        if (!AMAuthInstallApImg4DecodePayloadProperty((unint64_t *)&BytePtr, 0xE00000006D6D6170, (unint64_t)&v105)&& bytes[1])
        {
          CFDataRef v83 = CFDataCreate(a1, bytes[1], length[0]);
          if (!v83) {
            goto LABEL_85;
          }
          CFDataRef v84 = v83;
          CFDictionarySetValue(v49, @"MemoryMap", v83);
          SafeRelease(v84);
        }
        if (AMAuthInstallApImg4DecodePayloadProperty((unint64_t *)&BytePtr, 0xE000000072646467, (unint64_t)&v105)|| !bytes[1])
        {
          goto LABEL_65;
        }
        CFDataRef v85 = CFDataCreate(a1, bytes[1], length[0]);
        if (v85)
        {
          CFDataRef v86 = v85;
          CFDictionarySetValue(v49, @"RawDataDigest", v85);
          SafeRelease(v86);
LABEL_65:
          CFDataRef v69 = CFDataCreate(a1, (const UInt8 *)v118, *((CFIndex *)&v118 + 1));
          AMAuthInstallCryptoCreateDigestForDataType(a1, v69, (CFTypeRef *)&v108, a4);
          if (v108)
          {
            CFDictionarySetValue(v49, @"ObjectPayloadPropertyDigest", v108);
            uint64_t v5 = 0;
            goto LABEL_67;
          }
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallCopyPayloadPropertiesToMeasurementDictionary", (uint64_t)"created digest is NULL", v87, v88, v89, v90, v91, v99);
          goto LABEL_87;
        }
LABEL_85:
        CFDataRef v69 = 0;
LABEL_87:
        uint64_t v5 = 2;
LABEL_67:
        SafeRelease(v108);
        SafeRelease(v69);
        SafeRelease(0);
        SafeRelease(theData);
        if (v5)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateMeasurementsWithTag", (uint64_t)"failed to copy payload properties to measurement dictionary.", v92, v93, v94, v95, v96, v99);
          goto LABEL_69;
        }
        goto LABEL_68;
      }
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateMeasurementsWithTag", (uint64_t)"failed to create mutable dict measurementDict", v44, v45, v46, v47, v48, v99);
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateMeasurementsWithTag", (uint64_t)"created digest is NULL", v27, v28, v29, v30, v31, v99);
    }
LABEL_78:
    uint64_t v5 = 2;
    goto LABEL_69;
  }
  uint64_t v5 = 3;
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateMeasurementsWithTag", (uint64_t)"failed to create digest for %@ with error %d", v38, v39, v40, v41, v42, (char)v18);
LABEL_69:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v5;
}

uint64_t AMAuthInstallApImg4ReCreatePayload(const char *a1, const char *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, CFDataRef *a6)
{
  return AMAuthInstallApImg4ReCreatePayloadWithProperties(a1, a2, a3, 0, a4, a5, 0, a6);
}

uint64_t AMAuthInstallApImg4CreateServerRequestDictionary(void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v3 = 1;
  if (a1 && a2 && a3)
  {
    CFAllocatorRef v7 = CFGetAllocator(a1);
    CFTypeRef cf = CFDictionaryCreateMutable(v7, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (cf)
    {
      int v8 = CFGetAllocator(a1);
      CFIndex v9 = AMAuthInstallSupportApplyDictionaryOverrides(v8, a2, (CFMutableDictionaryRef *)&cf, 0);
      if (v9)
      {
        uint64_t v3 = v9;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateServerRequestDictionary", (uint64_t)"failed to apply measurements override", v10, v11, v12, v13, v14, v16);
      }
      else
      {
        uint64_t v3 = AMAuthInstallApImg4ServerRequestAddRequiredTagsWithRecoveryOS(a1, (__CFDictionary *)cf, 1, 0);
        if (!v3) {
          *a3 = CFRetain(cf);
        }
      }
    }
    else
    {
      uint64_t v3 = 2;
    }
  }
  SafeRelease(cf);
  return v3;
}

uint64_t AMAuthInstallApImg4ServerRequestAddRequiredTags(void *a1, __CFDictionary *a2, int a3)
{
  return AMAuthInstallApImg4ServerRequestAddRequiredTagsWithRecoveryOS(a1, a2, a3, 0);
}

uint64_t AMAuthInstallApImg4SetSepNonce(uint64_t a1, CFTypeRef cf)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (cf && *(void *)(a1 + 16))
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)cf) == 20)
    {
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 48));
      CFTypeRef v6 = CFRetain(cf);
      uint64_t result = 0;
      *(void *)(*(void *)(a1 + 16) + 48) = v6;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AMAuthInstallApImg4SetSepNonceSlotID(uint64_t a1, CFTypeRef cf)
{
  if (!a1) {
    return 1;
  }
  if (!*(void *)(a1 + 16)) {
    return 1;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID()) {
    return 1;
  }
  CFRetain(cf);
  SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 56));
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 16) + 56) = cf;
  return result;
}

uint64_t AMAuthInstallApImg4ServerRequestAddUIDMode(uint64_t a1, CFDictionaryRef theDict)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (theDict)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      CFTypeRef v6 = *(const void **)(v5 + 168);
      if (CFDictionaryContainsKey(theDict, @"UniqueBuildID")
        || CFDictionaryContainsKey(theDict, @"UID_MODE"))
      {
        return 0;
      }
      CFAllocatorRef v7 = (const void *)*MEMORY[0x263EFFB38];
      if (v6) {
        BOOL v8 = v6 == v7;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8
        || (uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 176), v10 = *MEMORY[0x263EFFB40], v9 == *MEMORY[0x263EFFB40])
        || (uint64_t result = CFDictionaryContainsKey(theDict, @"SepNonce"), !v10)
        || result)
      {
        if (v6) {
          uint64_t v11 = v6;
        }
        else {
          uint64_t v11 = v7;
        }
        CFDictionarySetValue(theDict, @"UID_MODE", v11);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AMAuthInstallApImg4ServerRequestAddRequiredTagsWithRecoveryOS(void *a1, __CFDictionary *a2, int a3, int a4)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (a2)
  {
    uint64_t v7 = a1[2];
    if (v7)
    {
      int v10 = *(unsigned __int8 *)(v7 + 116);
      int v11 = *(unsigned __int8 *)(v7 + 72);
      uint64_t v12 = &kAMAuthInstallTagX86SecurityMode;
      if (!v10) {
        uint64_t v12 = &kAMAuthInstallTagApSecurityMode;
      }
      _CFDictionarySetBoolean(a2, *v12, v11);
      uint64_t v13 = a1[2];
      uint64_t v14 = (const void **)MEMORY[0x263EFFB40];
      if (*(unsigned char *)(v13 + 74))
      {
        if (*(unsigned char *)(v13 + 116)) {
          CFStringRef v15 = &kAMAuthInstallTagX86AllowMixAndMatch;
        }
        else {
          CFStringRef v15 = &kAMAuthInstallTagApAllowMixAndMatch;
        }
        CFDictionarySetValue(a2, *v15, (const void *)*MEMORY[0x263EFFB40]);
      }
      char v16 = (unsigned __int8 *)a1[2];
      if (v16[75])
      {
        CFDictionarySetValue(a2, @"Ap,InternalUseOnlySW", *v14);
        char v16 = (unsigned __int8 *)a1[2];
      }
      if (v16[116])
      {
        _CFDictionarySetBoolean(a2, @"x86,ProductionMode", v16[20]);
        if (*(unsigned char *)(a1[2] + 79)) {
          _CFDictionarySetInteger32(a2, @"x86,UseGlobalSigning", 1);
        }
        if (!a3) {
          goto LABEL_39;
        }
        CFStringRef v17 = *(const void **)(a1[2] + 24);
        if (v17) {
          CFDictionarySetValue(a2, @"x86,Nonce", v17);
        }
        CFDictionarySetValue(a2, @"@x86,Ticket", *v14);
      }
      else
      {
        if (v16[79]) {
          _CFDictionarySetInteger32(a2, @"Ap,UseGlobalSigning", 1);
        }
        if (!a3) {
          goto LABEL_39;
        }
      }
      uint64_t v18 = a1[2];
      if (!*(unsigned char *)(v18 + 116))
      {
        CFDictionarySetValue(a2, @"@ApImg4Ticket", *v14);
        uint64_t v18 = a1[2];
      }
      uint64_t v19 = *(const void **)(v18 + 24);
      if (v19)
      {
        CFDictionarySetValue(a2, @"ApNonce", v19);
        uint64_t v18 = a1[2];
      }
      uint64_t v20 = *(const void **)(v18 + 48);
      if (v20)
      {
        CFDictionarySetValue(a2, @"SepNonce", v20);
        uint64_t v18 = a1[2];
      }
      uint64_t v21 = *(const void **)(v18 + 40);
      if (v21)
      {
        CFDictionarySetValue(a2, @"Ap,SoftwareNonceForUpdateFreshness", v21);
        uint64_t v18 = a1[2];
      }
      uint64_t v22 = *(const void **)(v18 + 120);
      if (v22)
      {
        CFDictionarySetValue(a2, @"@BCert", v22);
        CFDictionarySetValue(a2, @"@Managed", *v14);
        uint64_t v18 = a1[2];
      }
      uint64_t v23 = *(const void **)(v18 + 128);
      if (v23)
      {
        CFDictionarySetValue(a2, @"@BCert", v23);
        CFDictionarySetValue(a2, @"@AlternateSU", *v14);
        uint64_t v18 = a1[2];
      }
      uint64_t v24 = *(const void **)(v18 + 160);
      if (v24)
      {
        CFDictionarySetValue(a2, @"Ap,SikaFuse", v24);
        uint64_t v18 = a1[2];
      }
      uint64_t v25 = *(const void **)(v18 + 192);
      if (v25) {
        CFDictionarySetValue(a2, @"Ap,DisablePlatformOnlyCode", v25);
      }
LABEL_39:
      uint64_t result = AMAuthInstallApImg3ServerRequestAddRequiredTags(a1, a2, 0, a4);
      if (!result)
      {
        return AMAuthInstallApImg4ServerRequestAddUIDMode((uint64_t)a1, a2);
      }
    }
  }
  return result;
}

uint64_t AMAuthInstallApImg4Stitch(uint64_t a1, const __CFURL *a2, const __CFURL *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v59, 0, sizeof(v59));
  uint64_t v58 = 0;
  unsigned int v57 = 0;
  *(void *)&__nitems[1] = 0;
  __nitems[0] = 0;
  if (!a2)
  {
    uint64_t v46 = "srcFileURL is NULL";
LABEL_37:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4Stitch", (uint64_t)v46, a4, a5, a6, a7, a8, v55);
    uint64_t v9 = 1;
    goto LABEL_27;
  }
  if (!a3)
  {
    uint64_t v46 = "dstFileURL is NULL";
    goto LABEL_37;
  }
  uint64_t v9 = a4;
  char v10 = (char)a2;
  int v11 = AMAuthInstallPlatformOpenFileStreamWithURL(a2, "rb");
  if (v11)
  {
    uint64_t v12 = v11;
    fseek(v11, 0, 2);
    int v13 = MEMORY[0x21D454E30](v12);
    rewind(v12);
    if (!v13)
    {
      uint64_t v53 = "failed to get src file size";
LABEL_41:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4Stitch", (uint64_t)v53, v14, v15, v16, v17, v18, v55);
      uint64_t v9 = 4;
LABEL_48:
      long long v43 = v12;
      goto LABEL_26;
    }
    if (v9)
    {
      unsigned int Length = CFDataGetLength((CFDataRef)v9);
      if (Img4EncodeManifestHeader(Length, &v59[1], v59))
      {
        uint64_t v45 = "failed to encode manifest header";
        goto LABEL_47;
      }
      if (!Img4EncodeIMG4Tag((uint64_t)&v58))
      {
        int v25 = CFDataGetLength((CFDataRef)v9);
        goto LABEL_10;
      }
    }
    else
    {
      int v25 = Img4EncodeIMG4Tag((uint64_t)&v58);
      if (!v25)
      {
LABEL_10:
        if (!Img4EncodeImg4Header(v25 + v13 + v57 + v59[0], &__nitems[1], __nitems))
        {
          CFStringRef v26 = AMAuthInstallPlatformOpenFileStreamWithURL(a3, "wb");
          if (v26)
          {
            uint64_t v27 = v26;
            size_t v28 = fwrite(*(const void **)&__nitems[1], 1uLL, __nitems[0], v26);
            if (v28 == __nitems[0])
            {
              size_t v29 = fwrite(v58, 1uLL, v57, v27);
              if (v29 == v57)
              {
                uint64_t v30 = malloc(0x100000uLL);
                if (!v30)
                {
                  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4Stitch", (uint64_t)"failed to allocate chunk buffer", v31, v32, v33, v34, v35, v55);
                  uint64_t v9 = 2;
                  goto LABEL_25;
                }
                uint64_t v36 = v30;
                uint64_t v37 = "failed to stitch payload to file: %s";
                while (feof(v12) != -1)
                {
                  size_t v38 = fread(v36, 1uLL, 0x100000uLL, v12);
                  if (!v38) {
                    break;
                  }
                  if (fwrite(v36, 1uLL, v38, v27) != v38) {
                    goto LABEL_19;
                  }
                }
                if (!v9) {
                  goto LABEL_24;
                }
                size_t v39 = fwrite(*(const void **)&v59[1], 1uLL, v59[0], v27);
                if (v39 == v59[0])
                {
                  BytePtr = CFDataGetBytePtr((CFDataRef)v9);
                  size_t v41 = CFDataGetLength((CFDataRef)v9);
                  size_t v42 = fwrite(BytePtr, 1uLL, v41, v27);
                  if (v42 == CFDataGetLength((CFDataRef)v9))
                  {
                    uint64_t v9 = 0;
LABEL_24:
                    free(v36);
LABEL_25:
                    fclose(v12);
                    long long v43 = v27;
LABEL_26:
                    fclose(v43);
                    goto LABEL_27;
                  }
                  uint64_t v37 = "failed to stitch manifest to file: %s";
                }
                else
                {
                  uint64_t v37 = "failed to stitch manifest header to file: %s";
                }
LABEL_19:
                AMAuthInstallApImg4Stitch_cold_1((uint64_t)v37);
                uint64_t v9 = 4;
                goto LABEL_24;
              }
              AMAuthInstallApImg4Stitch_cold_2();
            }
            else
            {
              AMAuthInstallApImg4Stitch_cold_3();
            }
            uint64_t v9 = 4;
            goto LABEL_25;
          }
          uint64_t v54 = __error();
          strerror(*v54);
          char v55 = (char)a3;
          uint64_t v53 = "failed to open file %@, error=%s";
          goto LABEL_41;
        }
      }
    }
    uint64_t v45 = "failed to encode IMG4 string";
LABEL_47:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4Stitch", (uint64_t)v45, v20, v21, v22, v23, v24, v55);
    uint64_t v9 = 14;
    goto LABEL_48;
  }
  uint64_t v47 = __error();
  strerror(*v47);
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4Stitch", (uint64_t)"failed to open file %@, error=%s", v48, v49, v50, v51, v52, v10);
  uint64_t v9 = 4;
LABEL_27:
  if (*(void *)&v59[1]) {
    free(*(void **)&v59[1]);
  }
  if (v58) {
    free(v58);
  }
  if (*(void *)&__nitems[1]) {
    free(*(void **)&__nitems[1]);
  }
  return v9;
}

uint64_t AMAuthInstallApImg4StitchData(const void **cf, CFStringRef theString, const __CFURL *a3, const __CFURL *a4, CFDictionaryRef theDict, int a6)
{
  CFDataRef Value = 0;
  CFDataRef v45 = 0;
  CFDataRef theData = 0;
  uint64_t v7 = 1;
  if (!a3 || !a4) {
    goto LABEL_15;
  }
  if (a6)
  {
    CFDataRef Value = 0;
  }
  else
  {
    if (!theDict) {
      goto LABEL_14;
    }
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, cf[11]);
    if (!Value)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4StitchData", (uint64_t)"%s: could not find ticket %@ data in response.", v12, v13, v14, v15, v16, (char)"AMAuthInstallApImg4StitchData");
      uint64_t v7 = 8;
      goto LABEL_15;
    }
  }
  if (!theString)
  {
    CFAllocatorRef v37 = CFGetAllocator(cf);
    uint64_t v7 = AMAuthInstallApImg4Stitch((uint64_t)v37, a3, a4, (uint64_t)Value, v38, v39, v40, v41);
    if (v7)
    {
      long long v43 = "failed to stitch img4 file";
      goto LABEL_21;
    }
LABEL_14:
    CFDataRef Value = 0;
    goto LABEL_15;
  }
  CFStringGetCString(theString, buffer, 5, 0x8000100u);
  CFAllocatorRef v17 = CFGetAllocator(cf);
  uint64_t DataFromFileURL = AMAuthInstallSupportCreateDataFromFileURL(v17, (CFTypeRef *)&theData, a3);
  if (DataFromFileURL)
  {
    uint64_t v7 = DataFromFileURL;
    goto LABEL_14;
  }
  uint64_t v19 = AMAuthInstallApImg4ReCreatePayloadWithProperties(buffer, 0, theData, 0, 0, 0, 0, &v45);
  if (v19)
  {
    uint64_t v7 = v19;
    long long v43 = "failed to recreate";
LABEL_21:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4StitchData", (uint64_t)v43, v20, v21, v22, v23, v24, v44);
    goto LABEL_14;
  }
  SafeRelease(theData);
  CFDataRef theData = 0;
  CFAllocatorRef v25 = CFGetAllocator(cf);
  CFDataRef Value = AMAuthInstallApImg4CreateStitchTicket(v25, v45, Value);
  if (Value)
  {
    CFAllocatorRef v31 = CFGetAllocator(cf);
    uint64_t v7 = AMAuthInstallSupportWriteDataToFileURL(v31, Value, a4, 1);
    if (v7) {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4StitchData", (uint64_t)"failed to write stitched data to %@", v32, v33, v34, v35, v36, (char)a4);
    }
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4StitchData", (uint64_t)"failed to stitch ticket to %@", v26, v27, v28, v29, v30, (char)a4);
    uint64_t v7 = 99;
  }
LABEL_15:
  SafeRelease(Value);
  SafeRelease(theData);
  SafeRelease(v45);
  return v7;
}

CFDataRef AMAuthInstallApImg4CreateStitchTicket(const __CFAllocator *a1, const __CFData *a2, const __CFData *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    a3 = 0;
    uint64_t v12 = 0;
    goto LABEL_17;
  }
  if (!DEREncoderCreate()) {
    goto LABEL_23;
  }
  if (CFStringGetCString(@"IMG4", buffer, 256, 0x8000100u))
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreateStitchTicket", (uint64_t)"failed to add %@ string", v6, v7, v8, v9, v10, (char)@"IMG4");
      goto LABEL_23;
    }
  }
  if (DEREncoderCreateEncodedBuffer())
  {
LABEL_23:
    a3 = 0;
    uint64_t v12 = 0;
    goto LABEL_17;
  }
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(a1, 0);
  uint64_t v12 = Mutable;
  if (!Mutable)
  {
    a3 = 0;
    goto LABEL_17;
  }
  CFDataAppendBytes(Mutable, 0, 0);
  BytePtr = CFDataGetBytePtr(a2);
  CFIndex Length = CFDataGetLength(a2);
  CFDataAppendBytes(v12, BytePtr, Length);
  if (a3)
  {
    if (!DEREncoderCreate()
      || (CFDataGetBytePtr(a3), CFDataGetLength(a3), DEREncoderAddData())
      || DEREncoderCreateEncodedBuffer())
    {
      a3 = 0;
    }
    else
    {
      CFDataRef v15 = CFDataCreate(a1, 0, 0);
      a3 = v15;
      if (v15)
      {
        uint64_t v16 = CFDataGetBytePtr(v15);
        CFIndex v17 = CFDataGetLength(a3);
        CFDataAppendBytes(v12, v16, v17);
        goto LABEL_13;
      }
    }
LABEL_17:
    SafeRelease(0);
    CFDataRef v18 = 0;
    goto LABEL_18;
  }
LABEL_13:
  if (!DEREncoderCreate()) {
    goto LABEL_17;
  }
  CFDataGetBytePtr(v12);
  CFDataGetLength(v12);
  if (DEREncoderAddDataNoCopy()) {
    goto LABEL_17;
  }
  if (DEREncoderCreateEncodedBuffer()) {
    goto LABEL_17;
  }
  CFDataRef v18 = CFDataCreateWithBytesNoCopy(a1, 0, 0, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
  if (!v18) {
    goto LABEL_17;
  }
LABEL_18:
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  SafeFree(0);
  SafeFree(0);
  SafeRelease(v12);
  SafeRelease(a3);
  return v18;
}

uint64_t AMAuthInstallApImg4StitchPayloadOnly(const void **a1, const __CFString *a2, const __CFURL *a3, const __CFURL *a4, const __CFDictionary *a5)
{
  return AMAuthInstallApImg4StitchData(a1, a2, a3, a4, a5, 1);
}

uint64_t AMAuthInstallApImg4StitchTicketData(const void **a1, const __CFString *a2, const __CFURL *a3, const __CFURL *a4, const __CFDictionary *a5)
{
  return AMAuthInstallApImg4StitchData(a1, a2, a3, a4, a5, 0);
}

uint64_t AMAuthInstallApImg4StitchRestoreInfo(const __CFString *a1, const void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  return AMAuthInstallApImg4StitchRestoreInfoWithAMAI(a1, a2, a3, a4, 0);
}

uint64_t AMAuthInstallApImg4StitchRestoreInfoWithAMAI(const __CFString *a1, const void *a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = 0;
  *(void *)char v44 = 0;
  *(void *)CFDataRef v45 = 0;
  uint64_t v6 = 1;
  if (a2)
  {
    CFStringRef v8 = 0;
    if (a3)
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (a1)
      {
        for (uint64_t i = 0; i != 72; i += 24)
        {
          CFStringRef v14 = *(__CFString **)((char *)&kObjectDefaultIM4RTagMap + i);
          if (!v14) {
            AMAuthInstallApImg4StitchRestoreInfoWithAMAI_cold_1();
          }
          if (CFEqual(v14, a1))
          {
            uint64_t v15 = *(uint64_t *)((char *)&kObjectDefaultIM4RTagMap + i + 16);
            if (!*(void *)v15) {
              AMAuthInstallApImg4StitchRestoreInfoWithAMAI_cold_2();
            }
            uint64_t v16 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v15 + 8);
            if (!v16) {
              AMAuthInstallApImg4StitchRestoreInfoWithAMAI_cold_3();
            }
            CFIndex v17 = (const void *)v16(a5, a3);
            if (v17)
            {
              CFDataRef v18 = v17;
              CFDictionarySetValue(Mutable, *(const void **)v15, v17);
              CFRelease(v18);
            }
          }
        }
      }
      if (Mutable)
      {
        if (a4) {
          CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)_merge_dictionary, Mutable);
        }
        if (a1
          && (CFStringRef EntryNameForType = AMAuthInstallApImg4GetEntryNameForType(a1), CFStringCompare(a1, EntryNameForType, 0)))
        {
          char v42 = (char)EntryNameForType;
          CFStringRef v8 = CFStringCreateWithFormat(v12, 0, @"%@-TBM");
          if (v8)
          {
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, v8);
            if (Value)
            {
              CFDictionaryRef v21 = Value;
              uint64_t v22 = CFDictionaryGetValue(Value, @"ucon");
              uint64_t v23 = CFDictionaryGetValue(v21, @"ucer");
              if (v22) {
                CFDictionaryAddValue(Mutable, @"ucon", v22);
              }
              if (v23) {
                CFDictionaryAddValue(Mutable, @"ucer", v23);
              }
            }
          }
        }
        else
        {
          CFStringRef v8 = 0;
        }
        if (CFDictionaryGetCount(Mutable))
        {
          uint64_t DataFromFileURL = AMAuthInstallSupportCreateDataFromFileURL(0, (CFTypeRef *)v45, a2);
          if (DataFromFileURL)
          {
            uint64_t v6 = DataFromFileURL;
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4StitchRestoreInfoWithAMAI", (uint64_t)"failed to read data from %@", v25, v26, v27, v28, v29, (char)a2);
          }
          else
          {
            uint64_t v30 = AMAuthInstallApImg4EncodeRestoreInfo(*(const __CFData **)v45, Mutable, (CFDataRef *)v44);
            if (v30)
            {
              uint64_t v6 = v30;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4StitchRestoreInfoWithAMAI", (uint64_t)"failed to encode restore info", v31, v32, v33, v34, v35, v42);
            }
            else
            {
              uint64_t v6 = AMAuthInstallSupportWriteDataToFileURL(0, *(const __CFData **)v44, (const __CFURL *)a2, 1);
              if (v6) {
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4StitchRestoreInfoWithAMAI", (uint64_t)"failed to write stitched data to %@", v36, v37, v38, v39, v40, (char)a2);
              }
            }
          }
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
      else
      {
        CFStringRef v8 = 0;
        uint64_t v6 = 2;
      }
    }
  }
  else
  {
    CFStringRef v8 = 0;
  }
  SafeRelease(Mutable);
  SafeRelease(*(CFTypeRef *)v45);
  SafeRelease(*(CFTypeRef *)v44);
  SafeRelease(v8);
  return v6;
}

void _merge_dictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t AMAuthInstallApImg4EncodeRestoreInfo(const __CFData *a1, CFDictionaryRef theDict, CFDataRef *a3)
{
  v37[0] = 0;
  v37[1] = 0;
  unsigned int v36 = 0;
  int v35 = 0;
  uint64_t v33 = 0;
  bytes = 0;
  CFIndex v31 = 0;
  CFIndex length = 0;
  uint64_t v29 = 0;
  CFMutableDictionaryRef v30 = 0;
  if (!a1 || !theDict || (CFIndex Count = CFDictionaryGetCount(theDict), !a3) || Count < 1)
  {
    CFMutableDictionaryRef Mutable = 0;
    if (!a3)
    {
      uint64_t v21 = 3;
      uint64_t v24 = 0;
      goto LABEL_20;
    }
    uint64_t v24 = 0;
    goto LABEL_31;
  }
  unsigned int v36 = CFDataGetLength(a1);
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(a1);
  if (DERDecoderInitialize((uint64_t)v37, BytePtr, &v36, v36))
  {
    uint64_t v27 = "DERDecoderInitialize top level failed";
LABEL_30:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4EncodeRestoreInfo", (uint64_t)v27, v8, v9, v10, v11, v12, v28);
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v24 = 0;
    goto LABEL_31;
  }
  if (DERDecoderGetDataWithTag((uint64_t)v37, 0, 0x10u, 1, &bytes, (_DWORD *)&length + 1, &v35))
  {
    uint64_t v27 = "could not find im4p top level sequence";
    goto LABEL_30;
  }
  if (DERDecoderInitialize((uint64_t)v37, bytes, (unsigned int *)&length + 1, HIDWORD(length)))
  {
    uint64_t v27 = "DERDecoderInitialize sequence failed";
    goto LABEL_30;
  }
  int v35 = 3;
  int EncodingWithTag = DERDecoderGetEncodingWithTag((uint64_t)v37, 2u, 1u, 1, &v33, &length, &v35);
  if (!EncodingWithTag)
  {
    HIDWORD(length) -= length;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFMutableDictionaryRef v30 = Mutable;
    if (AMAuthInstallApImg4DecodeRestoreInfo(a1, &v30))
    {
      uint64_t v15 = AMAuthInstallApImg4EncodeRestoreDict(theDict, (uint64_t)&v29, (uint64_t)&v31 + 4);
      if (!v15) {
        goto LABEL_15;
      }
      uint64_t v21 = v15;
      uint64_t v22 = "AMAuthInstallApImg4EncodeRestoreDict legacy failed";
    }
    else
    {
      AMSupportCreateMergedDictionary();
      uint64_t v21 = 0;
      uint64_t v22 = "failed to create merged restore Info dictionary";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4EncodeRestoreInfo", (uint64_t)v22, v16, v17, v18, v19, v20, v28);
    uint64_t v24 = 0;
    goto LABEL_20;
  }
  if (AMAuthInstallApImg4EncodeRestoreDict(theDict, (uint64_t)&v29, (uint64_t)&v31 + 4))
  {
    uint64_t v27 = "AMAuthInstallApImg4EncodeRestoreDict failed";
    goto LABEL_30;
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_15:
  uint64_t v23 = CFDataCreateMutable(0, 0);
  uint64_t v24 = v23;
  if (!v23
    || (CFDataAppendBytes(v23, bytes, HIDWORD(length)), CFDataAppendBytes(v24, v29, HIDWORD(v31)), !DEREncoderCreate()))
  {
    if (!EncodingWithTag)
    {
      uint64_t v21 = 2;
      goto LABEL_20;
    }
LABEL_31:
    *a3 = 0;
    uint64_t v21 = 3;
    goto LABEL_20;
  }
  CFDataGetBytePtr(v24);
  CFDataGetLength(v24);
  if (DEREncoderAddData() || DEREncoderCreateEncodedBuffer()) {
    goto LABEL_31;
  }
  CFDataRef v25 = CFDataCreate(0, 0, v31);
  *a3 = v25;
  uint64_t v21 = 2 * (v25 == 0);
LABEL_20:
  SafeRelease(Mutable);
  SafeFree(v29);
  SafeFree(0);
  SafeRelease(v24);
  DEREncoderDestroy();
  return v21;
}

uint64_t AMAuthInstallApImg4PersonalizeFile(uint64_t a1, CFURLRef anURL, const __CFURL *a3, const void *a4)
{
  CFURLRef anURLa = 0;
  key = 0;
  CFDictionaryRef v55 = 0;
  value = 0;
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    CFStringRef v5 = 0;
    CFStringRef TypeForEntryName = 0;
    uint64_t PersonalizedResponse = 1;
    goto LABEL_24;
  }
  CFStringRef v5 = 0;
  uint64_t PersonalizedResponse = 1;
  if (!a3 || !anURL)
  {
    CFStringRef TypeForEntryName = 0;
    goto LABEL_24;
  }
  CFStringRef TypeForEntryName = 0;
  if (*(void *)(a1 + 16))
  {
    CFStringRef v5 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    if (!v5)
    {
      CFStringRef TypeForEntryName = 0;
      goto LABEL_30;
    }
    CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
    uint64_t v11 = AMAuthInstallApImg4CreateRequestTagFromFileURL(v10, v5, @"=", (CFStringRef *)&key, &anURLa);
    if (v11)
    {
      uint64_t PersonalizedResponse = v11;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4PersonalizeFile", (uint64_t)"could not get request tag from path %@", v12, v13, v14, v15, v16, (char)v5);
    }
    else
    {
      CFStringRef TypeForEntryName = 0;
      uint64_t PersonalizedResponse = 14;
      if (!key || !anURLa) {
        goto LABEL_24;
      }
      if (a4)
      {
        value = (void *)CFRetain(a4);
        goto LABEL_13;
      }
      CFStringRef TypeForEntryName = AMAuthInstallApImg4GetTypeForEntryName((CFStringRef)key);
      if (!TypeForEntryName) {
        goto LABEL_34;
      }
      CFAllocatorRef v17 = CFGetAllocator((CFTypeRef)a1);
      uint64_t MeasurementsWithTag = AMAuthInstallApImg4CreateMeasurementsWithTag(v17, anURLa, TypeForEntryName, *(_DWORD *)(*(void *)(a1 + 16) + 112), (CFTypeRef *)&value);
      if (!MeasurementsWithTag)
      {
LABEL_13:
        CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v24, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFStringRef TypeForEntryName = (const __CFString *)Mutable;
        if (Mutable)
        {
          CFDictionaryAddValue(Mutable, key, value);
          uint64_t ServerRequestDictionary = AMAuthInstallApImg4CreateServerRequestDictionary((void *)a1, (const __CFDictionary *)TypeForEntryName, (CFTypeRef *)&v55);
          if (ServerRequestDictionary)
          {
            uint64_t PersonalizedResponse = ServerRequestDictionary;
            uint64_t v52 = "failed to create request dict";
            goto LABEL_37;
          }
          uint64_t PersonalizedResponse = AMAuthInstallApCreatePersonalizedResponse(a1, v55, (CFTypeRef *)&theDict);
          if (PersonalizedResponse || !theDict)
          {
            uint64_t v52 = "failed to create response dict";
            goto LABEL_37;
          }
          if (CFDictionaryGetValue(theDict, *(const void **)(a1 + 88)))
          {
            CFStringRef v42 = AMAuthInstallApImg4GetTypeForEntryName((CFStringRef)key);
            if (v42)
            {
              CFStringRef v43 = v42;
              if (CFStringCompare(v42, (CFStringRef)key, 0)) {
                CFStringRef v44 = v43;
              }
              else {
                CFStringRef v44 = 0;
              }
              uint64_t v45 = AMAuthInstallApImg4StitchData((const void **)a1, v44, anURLa, a3, theDict, 0);
              if (v45)
              {
                uint64_t PersonalizedResponse = v45;
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4PersonalizeFile", (uint64_t)"failed to stitch ticket to %@", v46, v47, v48, v49, v50, (char)a3);
                goto LABEL_24;
              }
              uint64_t PersonalizedResponse = AMAuthInstallApImg4StitchRestoreInfoWithAMAI(v44, a3, theDict, 0, a1);
              if (!PersonalizedResponse) {
                goto LABEL_24;
              }
              char v53 = (char)a3;
              uint64_t v52 = "failed to stitch restore info to %@";
LABEL_37:
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4PersonalizeFile", (uint64_t)v52, v32, v33, v34, v35, v36, v53);
              goto LABEL_24;
            }
          }
          else
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4PersonalizeFile", (uint64_t)"Ap ticket not found in response", v37, v38, v39, v40, v41, v53);
          }
LABEL_34:
          uint64_t PersonalizedResponse = 8;
          goto LABEL_24;
        }
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4PersonalizeFile", (uint64_t)"failed to create mutable dict measurementDict", v26, v27, v28, v29, v30, v53);
LABEL_30:
        uint64_t PersonalizedResponse = 2;
        goto LABEL_24;
      }
      uint64_t PersonalizedResponse = MeasurementsWithTag;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4PersonalizeFile", (uint64_t)"could not measure %@", v19, v20, v21, v22, v23, (char)v5);
    }
    CFStringRef TypeForEntryName = 0;
  }
LABEL_24:
  SafeRelease(v5);
  SafeRelease(key);
  SafeRelease(anURLa);
  SafeRelease(value);
  SafeRelease(TypeForEntryName);
  SafeRelease(v55);
  SafeRelease(theDict);
  return PersonalizedResponse;
}

uint64_t AMAuthInstallApImg4ForceLocalSigning(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t result = 1;
  if (v1)
  {
    *(unsigned char *)(v1 + 76) = 1;
    return 0;
  }
  return result;
}

uint64_t AMAuthInstallApImg4ForceServerSigning(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t result = 1;
  if (v1)
  {
    *(unsigned char *)(v1 + 78) = 1;
    return 0;
  }
  return result;
}

BOOL AMAuthInstallApImg4SupportsLocalSigning(uint64_t a1)
{
  BOOL result = 0;
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 16);
    if (v1)
    {
      if (*(unsigned char *)(v1 + 76)) {
        return 1;
      }
    }
  }
  return result;
}

BOOL AMAuthInstallApImg4SupportsGlobalSigning(uint64_t a1)
{
  return a1 && *(void *)(a1 + 40);
}

uint64_t AMAuthInstallApImg4SetParameters(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 1;
  }
  if (!*(void *)(a1 + 16))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4SetParameters", (uint64_t)"%s: make sure to call AMAuthInstallApSetParameters first", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4SetParameters");
    return 1;
  }
  if (!theDict) {
    return 1;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ApCertificateEpoch");
  if (Value)
  {
    CFNumberRef v11 = Value;
    CFTypeID v12 = CFGetTypeID(Value);
    if (v12 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      if (CFNumberGetValue(v11, kCFNumberIntType, &valuePtr)) {
        *(_DWORD *)(*(void *)(a1 + 16) + 68) = valuePtr;
      }
    }
  }
  CFBooleanRef v13 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApLeafCertStatus");
  if (v13)
  {
    CFBooleanRef v14 = v13;
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 == CFBooleanGetTypeID()) {
      *(unsigned char *)(*(void *)(a1 + 16) + 73) = CFBooleanGetValue(v14);
    }
  }
  CFBooleanRef v16 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ApAllowMixAndMatch");
  if (v16)
  {
    CFBooleanRef v17 = v16;
    CFTypeID v18 = CFGetTypeID(v16);
    if (v18 == CFBooleanGetTypeID()) {
      *(unsigned char *)(*(void *)(a1 + 16) + 74) = CFBooleanGetValue(v17);
    }
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"SepNonce");
  if (result)
  {
    uint64_t v20 = (const void *)result;
    CFTypeID v21 = CFGetTypeID((CFTypeRef)result);
    if (v21 == CFDataGetTypeID())
    {
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 16) + 48));
      CFTypeRef v22 = CFRetain(v20);
      uint64_t result = 0;
      *(void *)(*(void *)(a1 + 16) + 48) = v22;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallApImg4GetTagAsInteger(CFStringRef theString)
{
  unsigned int v4 = 0;
  if (!theString) {
    return 0xFFFFFFFFLL;
  }
  for (CFIndex i = 0; i != 4; ++i)
  {
    if (i == CFStringGetLength(theString)) {
      break;
    }
    *((unsigned char *)&v4 + i) = CFStringGetCharacterAtIndex(theString, i);
  }
  return bswap32(v4);
}

uint64_t AMAuthInstallApImg4AddInteger32Property(uint64_t a1, const __CFString *a2, const __CFNumber *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  if (!a1 || !a2 || !a3 || !DEREncoderCreate()) {
    goto LABEL_18;
  }
  int CString = CFStringGetCString(a2, buffer, 256, 0x8000100u);
  if (CString)
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      char v29 = (char)a2;
      uint64_t v28 = "failed to add %@ string";
      goto LABEL_17;
    }
  }
  if (!CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger32Property", (uint64_t)"%s: invalid datatype", v16, v17, v18, v19, v20, (char)"AMAuthInstallApImg4AddInteger32Property");
    if (CString)
    {
      uint64_t v26 = 1;
      goto LABEL_11;
    }
LABEL_18:
    uint64_t v26 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger32Property", (uint64_t)"%s failed to create DER file", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4AddInteger32Property");
    goto LABEL_11;
  }
  if (DEREncoderAddUInt32())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger32Property", (uint64_t)"failed to add %@ value", v21, v22, v23, v24, v25, (char)a2);
    goto LABEL_18;
  }
  AMAuthInstallApImg4GetTagAsInteger(a2);
  if (DEREncoderAddPrivateFromEncoder())
  {
    uint64_t v28 = "failed to sequence tag";
LABEL_17:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger32Property", (uint64_t)v28, v11, v12, v13, v14, v15, v29);
    goto LABEL_18;
  }
  uint64_t v26 = 0;
LABEL_11:
  DEREncoderDestroy();
  return v26;
}

uint64_t AMAuthInstallApImg4AddInteger64Property(uint64_t a1, const __CFString *a2, const __CFNumber *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = 0;
  if (!a1 || !a2 || !a3 || !DEREncoderCreate()) {
    goto LABEL_18;
  }
  int CString = CFStringGetCString(a2, buffer, 256, 0x8000100u);
  if (CString)
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      char v29 = (char)a2;
      uint64_t v28 = "failed to add %@ string";
      goto LABEL_17;
    }
  }
  if (!CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger64Property", (uint64_t)"%s: invalid datatype", v16, v17, v18, v19, v20, (char)"AMAuthInstallApImg4AddInteger64Property");
    if (CString)
    {
      uint64_t v26 = 1;
      goto LABEL_11;
    }
LABEL_18:
    uint64_t v26 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger64Property", (uint64_t)"%s failed to create DER file", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4AddInteger64Property");
    goto LABEL_11;
  }
  if (DEREncoderAddUInt64())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger64Property", (uint64_t)"failed to add %@ value", v21, v22, v23, v24, v25, (char)a2);
    goto LABEL_18;
  }
  AMAuthInstallApImg4GetTagAsInteger(a2);
  if (DEREncoderAddPrivateFromEncoder())
  {
    uint64_t v28 = "failed to sequence tag";
LABEL_17:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddInteger64Property", (uint64_t)v28, v11, v12, v13, v14, v15, v29);
    goto LABEL_18;
  }
  uint64_t v26 = 0;
LABEL_11:
  DEREncoderDestroy();
  return v26;
}

uint64_t AMAuthInstallApImg4AddBooleanProperty(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!a1 || !a2 || !DEREncoderCreate()) {
    goto LABEL_14;
  }
  if (CFStringGetCString(a2, buffer, 256, 0x8000100u))
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      char v22 = (char)a2;
      uint64_t v21 = "failed to add %@ string";
      goto LABEL_13;
    }
  }
  if (DEREncoderAddData())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddBooleanProperty", (uint64_t)"%s: failed to add data", v14, v15, v16, v17, v18, (char)"AMAuthInstallApImg4AddBooleanProperty");
LABEL_14:
    uint64_t v19 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddBooleanProperty", (uint64_t)"%s failed to create DER file", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4AddBooleanProperty");
    goto LABEL_9;
  }
  AMAuthInstallApImg4GetTagAsInteger(a2);
  if (DEREncoderAddPrivateFromEncoder())
  {
    uint64_t v21 = "failed to sequence tag";
LABEL_13:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddBooleanProperty", (uint64_t)v21, v9, v10, v11, v12, v13, v22);
    goto LABEL_14;
  }
  uint64_t v19 = 0;
LABEL_9:
  DEREncoderDestroy();
  return v19;
}

uint64_t AMAuthInstallApImg4AddDataProperty(uint64_t a1, const __CFString *a2, const __CFData *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!a1 || !a2 || !a3 || !DEREncoderCreate()) {
    goto LABEL_15;
  }
  if (CFStringGetCString(a2, buffer, 256, 0x8000100u))
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      char v23 = (char)a2;
      char v22 = "failed to add %@ string";
      goto LABEL_14;
    }
  }
  CFDataGetBytePtr(a3);
  CFDataGetLength(a3);
  if (DEREncoderAddData())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddDataProperty", (uint64_t)"failed to add %@ data", v15, v16, v17, v18, v19, (char)a2);
LABEL_15:
    uint64_t v20 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddDataProperty", (uint64_t)"%s failed to create DER file", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4AddDataProperty");
    goto LABEL_10;
  }
  AMAuthInstallApImg4GetTagAsInteger(a2);
  if (DEREncoderAddPrivateFromEncoder())
  {
    char v22 = "failed to sequence tag";
LABEL_14:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddDataProperty", (uint64_t)v22, v10, v11, v12, v13, v14, v23);
    goto LABEL_15;
  }
  uint64_t v20 = 0;
LABEL_10:
  DEREncoderDestroy();
  return v20;
}

uint64_t AMAuthInstallApImg4AddDictionaryProperty(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a1 || !a2 || !a3 || !DEREncoderCreate()) {
    goto LABEL_15;
  }
  if (CFStringGetCString(a3, buffer, 256, 0x8000100u))
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      char v17 = (char)a3;
      uint64_t v16 = "failed to add %@ string";
      goto LABEL_14;
    }
  }
  if (DEREncoderAddSetFromEncoder())
  {
    uint64_t v16 = "failed to add set";
LABEL_14:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddDictionaryProperty", (uint64_t)v16, v9, v10, v11, v12, v13, v17);
LABEL_15:
    uint64_t v14 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4AddDictionaryProperty", (uint64_t)"%s failed to create DER file", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4AddDictionaryProperty");
    goto LABEL_10;
  }
  AMAuthInstallApImg4GetTagAsInteger(a3);
  if (DEREncoderAddPrivateFromEncoder())
  {
    uint64_t v16 = "failed to add private";
    goto LABEL_14;
  }
  uint64_t v14 = 0;
LABEL_10:
  DEREncoderDestroy();
  return v14;
}

uint64_t AMAuthInstallApImg4DecodeRestoreInfo(const __CFData *a1, CFMutableDictionaryRef *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!a1 || !*a2) {
    return 1;
  }
  uint64_t v35 = 0;
  long long v34 = 0u;
  memset(v33, 0, sizeof(v33));
  v32[0] = 0;
  v32[1] = 0;
  v31[0] = 0;
  v31[1] = 0;
  unint64_t v30 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  unsigned int Length = CFDataGetLength(a1);
  Img4DecodeInit((uint64_t)BytePtr, Length, (uint64_t)v33);
  if (v11)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4DecodeRestoreInfo", (uint64_t)"Img4DecodeInit img4 decode failed.", v6, v7, v8, v9, v10, v23);
  }
  else
  {
    if (!DERDecodeSeqContentInit((unint64_t *)&v34 + 1, v32))
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFNumberRef v13 = (const __CFNumber *)*MEMORY[0x263EFFB38];
      CFNumberRef v14 = (const __CFNumber *)*MEMORY[0x263EFFB40];
      while (1)
      {
        do
        {
          while (1)
          {
            int v15 = DERDecodeSeqNext(v32, &v30);
            if (!v15) {
              break;
            }
            if (v15 == 1) {
              return 0;
            }
          }
          unint64_t v28 = 0;
          v29[0] = 0;
          v29[1] = 0;
          v27[0] = 0;
          v27[1] = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          CFIndex v26 = 0;
        }
        while (DERDecodeItem((uint64_t)v31, &v28)
             || DERDecodeSeqContentInit(v29, v27)
             || DERDecodeSeqNext(v27, (unint64_t *)&v24)
             || v24 != 22);
        CFStringRef v16 = CFStringCreateWithBytes(v12, v25, v26, 0x8000100u, 0);
        if (v16)
        {
          if (!DERDecodeSeqNext(v27, (unint64_t *)&v24)) {
            break;
          }
        }
LABEL_36:
        SafeRelease(v16);
      }
      if (v24 > 3)
      {
        if (v24 == 4)
        {
          uint64_t v19 = CFDataCreate(v12, v25, v26);
        }
        else
        {
          if (v24 != 22) {
            goto LABEL_36;
          }
          uint64_t v19 = CFStringCreateWithBytes(v12, v25, v26, 0x8000100u, 0);
        }
        uint64_t v21 = v19;
        if (v19) {
          CFDictionarySetValue(*a2, v16, v19);
        }
        uint64_t v20 = v21;
        goto LABEL_35;
      }
      if (v24 == 1)
      {
        LOBYTE(v23) = 0;
        if (DERParseBoolean(&v25, (BOOL *)&v23)) {
          return 23;
        }
        if ((_BYTE)v23) {
          CFNumberRef v18 = v13;
        }
        else {
          CFNumberRef v18 = v14;
        }
        if (!v18) {
          goto LABEL_30;
        }
      }
      else
      {
        if (v24 != 2) {
          goto LABEL_36;
        }
        unint64_t v23 = 0;
        if (DERParseInteger64((char **)&v25, &v23)) {
          return 23;
        }
        CFNumberRef v17 = CFNumberCreate(v12, kCFNumberSInt64Type, &v23);
        if (!v17) {
          goto LABEL_30;
        }
        CFNumberRef v18 = v17;
      }
      CFDictionarySetValue(*a2, v16, v18);
LABEL_30:
      uint64_t v20 = 0;
LABEL_35:
      SafeRelease(v20);
      goto LABEL_36;
    }
    AMSupportLogInternal();
  }
  return 99;
}

uint64_t AMAuthInstallApImg4EncodeRestoreDict(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (!a1 || !a2)
  {
    unsigned int v4 = 0;
    goto LABEL_41;
  }
  unsigned int v4 = 0;
  if (!a3) {
    goto LABEL_41;
  }
  uint64_t v6 = DEREncoderCreate();
  if (!v6)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    goto LABEL_41;
  }
  unsigned int Count = CFDictionaryGetCount(a1);
  size_t v8 = 8 * Count;
  uint64_t v3 = (const void **)malloc(v8);
  uint64_t v9 = (const void **)malloc(v8);
  unsigned int v4 = v9;
  if (!v3 || !v9) {
    goto LABEL_41;
  }
  CFDictionaryGetKeysAndValues(a1, v3, v9);
  if (Count)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 8 * Count;
    CFNumberRef v17 = "%s: unexpected restore property type";
    while (1)
    {
      CFStringRef v18 = (const __CFString *)v3[v15 / 8];
      if (!v18 || (CFTypeID v19 = CFGetTypeID(v3[v15 / 8]), v19 != CFStringGetTypeID()))
      {
        uint64_t v60 = "invalid overridesKey";
        goto LABEL_40;
      }
      uint64_t v20 = v4[v15 / 8];
      if (!v20) {
        break;
      }
      CFTypeID v21 = CFGetTypeID(v20);
      if (v21 == CFDataGetTypeID())
      {
        if (AMAuthInstallApImg4AddDataProperty(v6, v18, (const __CFData *)v4[v15 / 8], v22, v23, v24, v25, v26))goto LABEL_39; {
      }
        }
      else
      {
        CFTypeID v27 = CFGetTypeID(v4[v15 / 8]);
        CFTypeID TypeID = CFBooleanGetTypeID();
        CFBooleanRef v29 = (const __CFBoolean *)v4[v15 / 8];
        if (v27 == TypeID)
        {
          uint64_t Value = CFBooleanGetValue(v29);
          if (AMAuthInstallApImg4AddBooleanProperty(v6, v18, Value, v31, v32, v33, v34, v35)) {
            goto LABEL_39;
          }
        }
        else
        {
          CFTypeID v36 = CFGetTypeID(v29);
          if (v36 != CFNumberGetTypeID()) {
            goto LABEL_38;
          }
          CFNumberRef v42 = (const __CFNumber *)v4[v15 / 8];
          if (CFNumberGetType(v42) == kCFNumberSInt32Type)
          {
            if (AMAuthInstallApImg4AddInteger32Property(v6, v18, v42, v43, v44, v45, v46, v47)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (CFNumberGetType(v42) != kCFNumberSInt64Type)
            {
              CFNumberRef v17 = "%s: unexpected integer type";
LABEL_38:
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4EncodeRestoreDict", (uint64_t)v17, v37, v38, v39, v40, v41, (char)"AMAuthInstallApImg4EncodeRestoreDict");
LABEL_39:
              uint64_t v60 = "failed to encode restore property";
              goto LABEL_40;
            }
            if (AMAuthInstallApImg4AddInteger64Property(v6, (const __CFString *)v3[v15 / 8], v42, v37, v38, v39, v40, v41))goto LABEL_39; {
          }
            }
        }
      }
      v15 += 8;
      if (v16 == v15) {
        goto LABEL_25;
      }
    }
    uint64_t v60 = "invalid overridesValue";
LABEL_40:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4EncodeRestoreDict", (uint64_t)v60, v10, v11, v12, v13, v14, (char)v62);
    goto LABEL_41;
  }
LABEL_25:
  if (!DEREncoderCreate())
  {
LABEL_41:
    uint64_t v58 = 3;
    goto LABEL_36;
  }
  if (CFStringGetCString(@"IM4R", buffer, 256, 0x8000100u))
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      uint64_t v62 = @"IM4M";
      uint64_t v61 = "failed to add %@ string";
      goto LABEL_52;
    }
  }
  if (DEREncoderAddSetFromEncoder())
  {
    uint64_t v61 = "failed to encode restore info properties as set";
LABEL_52:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4EncodeRestoreDict", (uint64_t)v61, v48, v49, v50, v51, v52, (char)v62);
    goto LABEL_41;
  }
  if (!DEREncoderCreate())
  {
LABEL_48:
    uint64_t v58 = 2;
    goto LABEL_36;
  }
  if (DEREncoderAddSequenceFromEncoder())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4EncodeRestoreDict", (uint64_t)"failed to encode restore info sequence", v53, v54, v55, v56, v57, (char)v62);
    goto LABEL_41;
  }
  if (DEREncoderCreateEncodedBuffer()) {
    goto LABEL_41;
  }
  if (!DEREncoderCreate()) {
    goto LABEL_48;
  }
  if (DEREncoderAddData() || DEREncoderCreateEncodedBuffer()) {
    goto LABEL_41;
  }
  uint64_t v58 = 0;
LABEL_36:
  SafeFree(v3);
  SafeFree(v4);
  SafeFree(0);
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  return v58;
}

uint64_t AMAuthInstallApImg4CopyURLAddingExtension(const __CFAllocator *a1, CFURLRef url, CFTypeRef *a3)
{
  CFStringRef v3 = 0;
  uint64_t v4 = 1;
  if (!url)
  {
    CFURLRef v6 = 0;
    CFURLRef v7 = 0;
    goto LABEL_6;
  }
  CFURLRef v6 = 0;
  CFURLRef v7 = 0;
  if (a3)
  {
    CFStringRef v3 = CFURLCopyPathExtension(url);
    CFURLRef v6 = CFURLCreateCopyDeletingPathExtension(a1, url);
    if (v6)
    {
      CFURLRef v10 = CFURLCreateCopyAppendingPathExtension(a1, v6, @"img4");
      CFURLRef v7 = v10;
      if (v10)
      {
        uint64_t v4 = 0;
        *a3 = CFRetain(v10);
        goto LABEL_6;
      }
    }
    else
    {
      CFURLRef v7 = 0;
    }
    uint64_t v4 = 2;
  }
LABEL_6:
  SafeRelease(v3);
  SafeRelease(v6);
  SafeRelease(v7);
  return v4;
}

uint64_t AMAuthInstallApImg4ReCreatePayloadWithData(const char *a1, const char *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, CFDataRef *a7)
{
  return AMAuthInstallApImg4ReCreatePayloadWithProperties(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t AMAuthInstallApImg4ReCreatePayloadWithProperties(const char *a1, const char *a2, CFDataRef theData, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, CFDataRef *a8)
{
  uint64_t v9 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  BytePtr = 0;
  CFIndex v48 = 0;
  uint64_t PayloadWithProperties = 1;
  CFDataRef v11 = 0;
  CFDataRef v12 = 0;
  CFDataRef v13 = 0;
  CFDataRef v14 = 0;
  CFDataRef v15 = 0;
  if (theData && a8)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex v48 = CFDataGetLength(theData);
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    *(_OWORD *)CFIndex length = 0u;
    *(_OWORD *)uint64_t v58 = 0u;
    *(_OWORD *)uint64_t v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    int v23 = DERImg4DecodePayload((uint64_t)&BytePtr, (unint64_t)&v54);
    if (v23)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4ReCreatePayloadWithProperties", (uint64_t)"failed to decode img4 payload, error:%d", v24, v25, v26, v27, v28, v23);
      uint64_t v9 = 0;
      CFDataRef v11 = 0;
      CFDataRef v12 = 0;
      CFDataRef v13 = 0;
      CFDataRef v14 = 0;
      CFDataRef v15 = 0;
      uint64_t PayloadWithProperties = 99;
      goto LABEL_39;
    }
    if (a1) {
      CFBooleanRef v29 = strdup(a1);
    }
    else {
      CFBooleanRef v29 = strndup((const char *)v55, *((size_t *)&v55 + 1));
    }
    uint64_t v9 = v29;
    if (!v29
      || (!a2 ? (size_t v30 = *((void *)&v56 + 1), v31 = (const UInt8 *)v56) : (size_t v30 = strlen(a2), v31 = (const UInt8 *)a2),
          (CFDataRef v32 = CFDataCreate(0, v31, v30)) == 0))
    {
      CFDataRef v11 = 0;
      CFDataRef v12 = 0;
      CFDataRef v13 = 0;
      CFDataRef v14 = 0;
      CFDataRef v15 = 0;
      uint64_t PayloadWithProperties = 2;
      goto LABEL_39;
    }
    if (a4)
    {
      CFDataRef Copy = CFDataCreateCopy(0, a4);
    }
    else
    {
      if (!length[0]) {
        goto LABEL_43;
      }
      CFDataRef Copy = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)length[0], length[1], (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    }
    CFDataRef v34 = Copy;
    if (Copy)
    {
      if (a5)
      {
        CFDataRef v35 = CFDataCreateCopy(0, a5);
      }
      else
      {
        if (!v58[0])
        {
          CFDataRef v13 = 0;
          if (a6)
          {
LABEL_23:
            CFDataRef v36 = CFDataCreateCopy(0, a6);
LABEL_27:
            CFDataRef v14 = v36;
            if (v36)
            {
              if (a7)
              {
LABEL_29:
                CFDataRef v37 = CFDataCreateCopy(0, a7);
                goto LABEL_30;
              }
LABEL_33:
              long long v52 = 0u;
              long long v53 = 0u;
              *(_OWORD *)uint64_t v50 = 0u;
              long long v51 = 0u;
              memset(v49, 0, sizeof(v49));
              int v38 = DERImg4DecodePayloadWithProperties((uint64_t)&BytePtr, (unint64_t)v49);
              if (v38)
              {
                AMAuthInstallLog(7, (uint64_t)"AMAuthInstallApImg4ReCreatePayloadWithProperties", (uint64_t)"failed to decode img4 payload with properties (error=%d), assuming no properties", v39, v40, v41, v42, v43, v38);
              }
              else if (v50[0])
              {
                CFDataRef v37 = CFDataCreate(0, (const UInt8 *)v50[0], v50[1]);
LABEL_30:
                CFDataRef v15 = v37;
                if (!v37) {
                  goto LABEL_47;
                }
LABEL_36:
                uint64_t v44 = (const char *)CFDataGetBytePtr(v32);
                uint64_t PayloadWithProperties = AMAuthInstallApImg4CreatePayloadWithProperties(v9, v44, v34, v13, v14, v15, a8);
LABEL_37:
                CFDataRef v12 = v34;
LABEL_38:
                CFDataRef v11 = v32;
                goto LABEL_39;
              }
              CFDataRef v15 = 0;
              goto LABEL_36;
            }
LABEL_46:
            CFDataRef v15 = 0;
LABEL_47:
            uint64_t PayloadWithProperties = 2;
            goto LABEL_37;
          }
LABEL_25:
          if (!v59[0])
          {
            CFDataRef v14 = 0;
            if (a7) {
              goto LABEL_29;
            }
            goto LABEL_33;
          }
          CFDataRef v36 = CFDataCreate(0, (const UInt8 *)v59[0], v59[1]);
          goto LABEL_27;
        }
        CFDataRef v35 = CFDataCreate(0, (const UInt8 *)v58[0], v58[1]);
      }
      CFDataRef v13 = v35;
      if (!v35)
      {
        CFDataRef v14 = 0;
        goto LABEL_46;
      }
      if (a6) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_43:
    CFDataRef v12 = 0;
    CFDataRef v13 = 0;
    CFDataRef v14 = 0;
    CFDataRef v15 = 0;
    uint64_t PayloadWithProperties = 2;
    goto LABEL_38;
  }
LABEL_39:
  uint64_t v45 = PayloadWithProperties;
  SafeFree(v9);
  SafeRelease(v11);
  SafeRelease(v12);
  SafeRelease(v13);
  SafeRelease(v14);
  SafeRelease(v15);
  return v45;
}

uint64_t AMAuthInstallApImg4CreatePayloadWithProperties(const char *a1, const char *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, CFDataRef *a7)
{
  uint64_t v7 = 1;
  if (a1 && a2 && a3 && a7 && strlen(a1) == 4)
  {
    if (!DEREncoderCreate() || !DEREncoderCreate()) {
      goto LABEL_34;
    }
    if (DEREncoderAddData())
    {
      uint64_t v20 = "failed to add payload tag to DER file";
    }
    else if (DEREncoderAddData())
    {
      uint64_t v20 = "failed to add payload type to DER file";
    }
    else
    {
      strlen(a2);
      if (DEREncoderAddData())
      {
        uint64_t v20 = "failed to add payload version to DER file";
      }
      else
      {
        CFDataGetBytePtr(a3);
        CFDataGetLength(a3);
        if (!DEREncoderAddDataNoCopy())
        {
          if (a4)
          {
            CFDataGetBytePtr(a4);
            CFDataGetLength(a4);
            if (DEREncoderAddData())
            {
              uint64_t v20 = "failed to add payloadKeybag to DER file";
              goto LABEL_33;
            }
          }
          if (a5)
          {
            CFDataGetBytePtr(a5);
            CFDataGetLength(a5);
            if (DEREncoderAddData())
            {
              uint64_t v20 = "failed to add payloadCompression to DER file";
              goto LABEL_33;
            }
          }
          if (!a6 || (CFDataGetBytePtr(a6), CFDataGetLength(a6), !DEREncoderAddData()))
          {
            if (DEREncoderAddDataFromEncoderNoCopy())
            {
              uint64_t v20 = "failed to add payload to sequence";
            }
            else
            {
              if (!DEREncoderCreateEncodedBuffer())
              {
                uint64_t v7 = 0;
                *a7 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
                goto LABEL_21;
              }
              uint64_t v20 = "failed to create DER encoded buffer: sequenceEncoder";
            }
            goto LABEL_33;
          }
        }
        uint64_t v20 = "failed to add payload data to DER file";
      }
    }
LABEL_33:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4CreatePayloadWithProperties", (uint64_t)v20, v14, v15, v16, v17, v18, 0);
LABEL_34:
    uint64_t v7 = 2;
  }
LABEL_21:
  DEREncoderDestroy();
  DEREncoderDestroy();
  return v7;
}

uint64_t AMAuthInstallApImg4CreatePayload(const char *a1, const char *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, CFDataRef *a6)
{
  return AMAuthInstallApImg4CreatePayloadWithProperties(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t AMAuthInstallApImg4ValidImage(const __CFURL *a1)
{
  CFURLRef v1 = a1;
  uint64_t v18 = 0;
  if (!a1)
  {
    AMSupportCreateErrorInternal();
LABEL_14:
    uint64_t v15 = 0;
    goto LABEL_17;
  }
  CFDataRef v2 = AMAuthInstallPlatformOpenFileStreamWithURL(a1, "rb");
  if (!v2)
  {
    uint64_t v16 = __error();
    strerror(*v16);
    AMSupportCreateErrorInternal();
    CFURLRef v1 = 0;
    goto LABEL_14;
  }
  CFStringRef v3 = v2;
  CFURLRef v4 = (const __CFURL *)malloc(0x20uLL);
  CFURLRef v1 = v4;
  if (v4)
  {
    size_t v5 = fread(v4, 1uLL, 0x20uLL, v3);
    uint64_t v11 = v5;
    if (v5 != 32) {
      AMAuthInstallLog(4, (uint64_t)"AMAuthInstallApImg4ValidImage", (uint64_t)"Read %ld bytes out of expected %ld", v6, v7, v8, v9, v10, v5);
    }
    int v12 = Img4DecodeParseLengthFromBufferWithTag((uint64_t)v1, v11, 0x494D3450u, &v18);
    int v13 = Img4DecodeParseLengthFromBufferWithTag((uint64_t)v1, v11, 0x494D4734u, &v18);
    if (v12) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    uint64_t v15 = v14;
  }
  else
  {
    AMSupportCreateErrorInternal();
    uint64_t v15 = 0;
  }
  fclose(v3);
LABEL_17:
  SafeFree(v1);
  return v15;
}

uint64_t AMAuthInstallApImg4GetPayloadPropertiesData(const __CFAllocator *a1, CFDataRef *a2, const __CFString *a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    long long v56 = "dstData cannot be NULL";
LABEL_35:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4GetPayloadPropertiesData", (uint64_t)v56, (uint64_t)theDict, a5, a6, a7, a8, v58);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4GetPayloadPropertiesData", (uint64_t)"imageTag cannot be NULL", (uint64_t)theDict, a5, a6, a7, a8, v58);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
LABEL_31:
    uint64_t v18 = 1;
    goto LABEL_30;
  }
  if (!theDict)
  {
    long long v56 = "requestDict cannot be NULL";
    goto LABEL_35;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  if (Count < 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
LABEL_29:
    uint64_t v18 = 0;
    goto LABEL_30;
  }
  CFIndex v13 = Count;
  uint64_t v14 = DEREncoderCreate();
  if (!v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_37;
  }
  uint64_t v15 = (const void **)malloc(8 * v13);
  uint64_t v16 = (const void **)malloc(8 * v13);
  CFDictionaryGetKeysAndValues(theDict, v15, v16);
  if (!CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70])) {
    goto LABEL_37;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 99;
  do
  {
    CFStringRef v19 = (const __CFString *)v15[v17];
    if (!v19) {
      goto LABEL_31;
    }
    CFTypeID v20 = CFGetTypeID(v15[v17]);
    if (v20 != CFStringGetTypeID()) {
      goto LABEL_31;
    }
    CFTypeID v21 = v16[v17];
    if (!v21) {
      goto LABEL_31;
    }
    CFTypeID v22 = CFGetTypeID(v21);
    if (v22 == CFDataGetTypeID())
    {
      uint64_t v28 = AMAuthInstallApImg4AddDataProperty(v14, v19, (const __CFData *)v16[v17], v23, v24, v25, v26, v27);
    }
    else
    {
      CFTypeID v29 = CFGetTypeID(v16[v17]);
      CFTypeID TypeID = CFBooleanGetTypeID();
      CFBooleanRef v31 = (const __CFBoolean *)v16[v17];
      if (v29 == TypeID)
      {
        uint64_t Value = CFBooleanGetValue(v31);
        uint64_t v28 = AMAuthInstallApImg4AddBooleanProperty(v14, v19, Value, v33, v34, v35, v36, v37);
      }
      else
      {
        CFTypeID v38 = CFGetTypeID(v31);
        if (v38 != CFNumberGetTypeID()) {
          goto LABEL_18;
        }
        uint64_t v28 = AMAuthInstallApImg4AddInteger64Property(v14, v19, (const __CFNumber *)v16[v17], v39, v40, v41, v42, v43);
      }
    }
    uint64_t v18 = v28;
LABEL_18:
    ++v17;
  }
  while (v13 != v17);
  if (!DEREncoderCreate()) {
    goto LABEL_37;
  }
  if (CFStringGetCString(a3, buffer, 256, 0x8000100u))
  {
    strlen(buffer);
    if (DEREncoderAddData())
    {
      char v58 = (char)a3;
      uint64_t v57 = "failed to add %@ string";
      goto LABEL_42;
    }
  }
  if (DEREncoderAddSetFromEncoder())
  {
    uint64_t v57 = "failed to encode properties list as set";
LABEL_42:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4GetPayloadPropertiesData", (uint64_t)v57, v44, v45, v46, v47, v48, v58);
    goto LABEL_30;
  }
  if (!DEREncoderCreate()) {
    goto LABEL_37;
  }
  if (DEREncoderAddSequenceFromEncoder())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4GetPayloadPropertiesData", (uint64_t)"failed to encode restore info sequence", v49, v50, v51, v52, v53, v58);
    goto LABEL_30;
  }
  if (DEREncoderCreateEncodedBuffer())
  {
    uint64_t v18 = 3;
    goto LABEL_30;
  }
  CFDataRef v54 = CFDataCreate(0, 0, 0);
  *a2 = v54;
  if (v54) {
    goto LABEL_29;
  }
LABEL_37:
  uint64_t v18 = 2;
LABEL_30:
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  SafeFree(0);
  SafeFree(v15);
  SafeFree(v16);
  return v18;
}

uint64_t AMAuthInstallApImg4DecodePayloadProperty(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v13 = 0uLL;
  long long v12 = 0uLL;
  long long v11 = 0uLL;
  long long v10 = 0uLL;
  uint64_t ItemWithTag = AMAuthInstallApImg4FindItemWithTag(a1, 0x2000000000000010, &v13);
  if (ItemWithTag) {
    return ItemWithTag;
  }
  uint64_t ItemWithTag = AMAuthInstallApImg4FindItemWithTag((unint64_t *)&v13, 0xA000000000000000, &v12);
  if (ItemWithTag) {
    return ItemWithTag;
  }
  uint64_t ItemWithTag = AMAuthInstallApImg4FindItemWithTag((unint64_t *)&v12, 0x2000000000000010, &v11);
  if (ItemWithTag) {
    return ItemWithTag;
  }
  uint64_t ItemWithTag = AMAuthInstallApImg4FindItemWithTag((unint64_t *)&v11, 0x2000000000000011, &v10);
  if (ItemWithTag) {
    return ItemWithTag;
  }
  long long v15 = 0uLL;
  unsigned int v14 = 0;
  uint64_t v6 = AMAuthInstallApImg4FindItemWithTag((unint64_t *)&v10, a2, &v15);
  if (v6)
  {
    uint64_t v8 = v6;
LABEL_14:
    AMSupportLogInternal();
    return v8;
  }
  long long v16 = xmmword_217B2CA70;
  __int16 v17 = 0;
  long long v18 = xmmword_217B2CA80;
  __int16 v19 = 0;
  uint64_t v7 = DERParseSequence((uint64_t)&v15, 2u, (uint64_t)&v16, a3, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    goto LABEL_14;
  }
  uint64_t ItemWithTag = DERParseInteger((char **)a3, &v14);
  if (ItemWithTag) {
    return ItemWithTag;
  }
  if ((v14 | 0xE000000000000000) != a2) {
    return 2;
  }
  uint64_t v8 = 0;
  *(void *)(a3 + 16) = a2 | 0xE000000000000000;
  *(void *)(a3 + 40) = 4;
  return v8;
}

uint64_t AMAuthInstallApImg4FindItemWithTag(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  *(_OWORD *)uint64_t v8 = 0uLL;
  size_t v5 = DERDecodeSeqContentInit(a1, v8);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    AMSupportLogInternal();
  }
  else
  {
    long long v11 = *(_OWORD *)v8;
    unint64_t v9 = 0;
    long long v10 = 0uLL;
    while (1)
    {
      uint64_t v6 = DERDecodeSeqNext((unint64_t *)&v11, &v9);
      if (v6) {
        break;
      }
      if (v9 == a2)
      {
        *a3 = v10;
        return v6;
      }
    }
  }
  return v6;
}

CFTypeRef _AMAuthInstallApImg4CopySEPNonceSlotID(uint64_t a1)
{
  if (a1 && (v1 = *(void *)(a1 + 16)) != 0 && (CFDataRef v2 = *(const void **)(v1 + 56)) != 0) {
    return CFRetain(v2);
  }
  else {
    return 0;
  }
}

CFTypeRef _AMAuthInstallApImg4CopyApNonceSlotID(uint64_t a1)
{
  if (a1 && (v1 = *(void *)(a1 + 16)) != 0 && (CFDataRef v2 = *(const void **)(v1 + 32)) != 0) {
    return CFRetain(v2);
  }
  else {
    return 0;
  }
}

uint64_t AMAuthInstallApImg4LocalCreateManifestBody(uint64_t a1, CFTypeRef a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2 || !a3)
  {
    uint64_t v165 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateManifestBody", (uint64_t)"%s DER operation failed", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4LocalCreateManifestBody");
    if (!a3)
    {
      CFNumberRef v18 = 0;
      goto LABEL_68;
    }
    CFNumberRef v18 = 0;
LABEL_85:
    SafeRelease(*a3);
    uint64_t v165 = 3;
    goto LABEL_68;
  }
  AMAuthInstallDebugWriteObject((char *)a1, a2, @"tss-request", 2);
  uint64_t v16 = DEREncoderCreate();
  if (!v16)
  {
    CFNumberRef v18 = 0;
    goto LABEL_84;
  }
  CFAllocatorRef v17 = CFGetAllocator((CFTypeRef)a1);
  CFNumberRef v18 = CFNumberCreate(v17, kCFNumberIntType, (const void *)(*(void *)(a1 + 16) + 68));
  if (!v18) {
    goto LABEL_84;
  }
  if (AMAuthInstallApImg4AddInteger32Property(v16, @"CEPO", v18, v11, v12, v13, v14, v15)) {
    goto LABEL_84;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApChipID");
  if (Value)
  {
    CFNumberRef v20 = Value;
    CFTypeID v21 = CFGetTypeID(Value);
    if (v21 == CFNumberGetTypeID())
    {
      if (AMAuthInstallApImg4AddInteger32Property(v16, @"CHIP", v20, v22, v23, v24, v25, v26)) {
        goto LABEL_84;
      }
    }
  }
  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApBoardID");
  if (v27)
  {
    CFNumberRef v28 = v27;
    CFTypeID v29 = CFGetTypeID(v27);
    if (v29 == CFNumberGetTypeID())
    {
      if (AMAuthInstallApImg4AddInteger32Property(v16, @"BORD", v28, v30, v31, v32, v33, v34)) {
        goto LABEL_84;
      }
    }
  }
  CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApECID");
  if (v35 && (CFNumberRef v36 = v35, v37 = CFGetTypeID(v35), v37 == CFNumberGetTypeID()))
  {
    if (AMAuthInstallApImg4AddInteger64Property(v16, @"ECID", v36, v38, v39, v40, v41, v42))
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateManifestBody", (uint64_t)"failed to add ApEcid", v43, v44, v45, v46, v47, v168);
      goto LABEL_84;
    }
    char v48 = 1;
  }
  else
  {
    char v48 = 0;
  }
  CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApSecurityDomain");
  if (v49)
  {
    CFNumberRef v50 = v49;
    CFTypeID v51 = CFGetTypeID(v49);
    if (v51 == CFNumberGetTypeID())
    {
      uint64_t v57 = AMAuthInstallApImg4AddInteger32Property(v16, @"SDOM", v50, v52, v53, v54, v55, v56);
      if (v57) {
        goto LABEL_69;
      }
    }
  }
  CFBooleanRef v58 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApProductionMode");
  uint64_t v66 = 0;
  if (v58)
  {
    CFBooleanRef v64 = v58;
    CFTypeID v65 = CFGetTypeID(v58);
    if (v65 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v64)) {
        uint64_t v66 = 1;
      }
    }
  }
  uint64_t v57 = AMAuthInstallApImg4AddBooleanProperty(v16, @"CPRO", v66, v59, v60, v61, v62, v63);
  if (v57) {
    goto LABEL_69;
  }
  CFBooleanRef v67 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApSecurityMode");
  uint64_t v75 = 0;
  if (v67)
  {
    CFBooleanRef v73 = v67;
    CFTypeID v74 = CFGetTypeID(v67);
    if (v74 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v73)) {
        uint64_t v75 = 1;
      }
    }
  }
  uint64_t v57 = AMAuthInstallApImg4AddBooleanProperty(v16, @"CSEC", v75, v68, v69, v70, v71, v72);
  if (v57) {
    goto LABEL_69;
  }
  CFDataRef v76 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApLocalNonceHash");
  if (v76)
  {
    CFDataRef v77 = v76;
    CFTypeID v78 = CFGetTypeID(v76);
    if (v78 == CFDataGetTypeID())
    {
      uint64_t v57 = AMAuthInstallApImg4AddDataProperty(v16, @"LNCH", v77, v79, v80, v81, v82, v83);
      if (v57) {
        goto LABEL_69;
      }
    }
  }
  CFDataRef v84 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApNonce");
  if (v84)
  {
    CFDataRef v85 = v84;
    CFTypeID v86 = CFGetTypeID(v84);
    if (v86 == CFDataGetTypeID())
    {
      uint64_t v57 = AMAuthInstallApImg4AddDataProperty(v16, @"BNCH", v85, v87, v88, v89, v90, v91);
      if (v57) {
        goto LABEL_69;
      }
    }
  }
  CFDataRef v92 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SepNonce");
  if (v92)
  {
    CFDataRef v93 = v92;
    CFTypeID v94 = CFGetTypeID(v92);
    if (v94 == CFDataGetTypeID())
    {
      uint64_t v57 = AMAuthInstallApImg4AddDataProperty(v16, @"snon", v93, v95, v96, v97, v98, v99);
      if (v57) {
        goto LABEL_69;
      }
    }
  }
  CFBooleanRef v100 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ApAllowMixAndMatch");
  if (v100)
  {
    CFBooleanRef v101 = v100;
    CFTypeID v102 = CFGetTypeID(v100);
    if (v102 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v101))
      {
        uint64_t v57 = AMAuthInstallApImg4AddBooleanProperty(v16, @"AMNM", 1, v103, v104, v105, v106, v107);
        if (v57) {
          goto LABEL_69;
        }
      }
    }
  }
  CFDataRef v108 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Ap,NextStageIM4MHash");
  if (v108)
  {
    CFDataRef v109 = v108;
    CFTypeID v110 = CFGetTypeID(v108);
    if (v110 == CFDataGetTypeID())
    {
      uint64_t v57 = AMAuthInstallApImg4AddDataProperty(v16, @"nsih", v109, v111, v112, v113, v114, v115);
      if (v57) {
        goto LABEL_69;
      }
    }
  }
  CFDataRef v116 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Ap,RecoveryOSPolicyNonceHash");
  if (v116)
  {
    CFDataRef v117 = v116;
    CFTypeID v118 = CFGetTypeID(v116);
    if (v118 == CFDataGetTypeID())
    {
      uint64_t v57 = AMAuthInstallApImg4AddDataProperty(v16, @"ronh", v117, v119, v120, v121, v122, v123);
      if (v57) {
        goto LABEL_69;
      }
    }
  }
  CFDataRef v124 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Ap,VolumeUUID");
  if (v124)
  {
    CFDataRef v125 = v124;
    CFTypeID v126 = CFGetTypeID(v124);
    if (v126 == CFDataGetTypeID())
    {
      uint64_t v57 = AMAuthInstallApImg4AddDataProperty(v16, @"vuid", v125, v127, v128, v129, v130, v131);
      if (v57) {
        goto LABEL_69;
      }
    }
  }
  CFBooleanRef v132 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Ap,LocalBoot");
  if (v132)
  {
    CFBooleanRef v133 = v132;
    CFTypeID v134 = CFGetTypeID(v132);
    if (v134 == CFBooleanGetTypeID())
    {
      uint64_t v135 = CFBooleanGetValue(v133);
      uint64_t v57 = AMAuthInstallApImg4AddBooleanProperty(v16, @"lobo", v135, v136, v137, v138, v139, v140);
      if (v57)
      {
LABEL_69:
        uint64_t v165 = v57;
        goto LABEL_79;
      }
    }
  }
  uint64_t v141 = DEREncoderCreate();
  if (!v141) {
    goto LABEL_74;
  }
  uint64_t v142 = AMAuthInstallApImg4AddDictionaryProperty(v16, v141, @"MANP", v11, v12, v13, v14, v15);
  if (v142)
  {
    uint64_t v165 = v142;
    goto LABEL_79;
  }
  CFAllocatorRef v143 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v149 = AMAuthInstallApImg4LocalAddImages(v143, (CFDictionaryRef)a2, v141, v144, v145, v146, v147, v148);
  if (v149)
  {
    uint64_t v165 = v149;
    v167 = "failed to add img objects to the manifest body";
LABEL_78:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateManifestBody", (uint64_t)v167, v150, v151, v152, v153, v154, v168);
    goto LABEL_79;
  }
  uint64_t v155 = DEREncoderCreate();
  if (!v155)
  {
LABEL_74:
    uint64_t v165 = 2;
    goto LABEL_79;
  }
  uint64_t v156 = AMAuthInstallApImg4AddDictionaryProperty(v141, v155, @"MANB", v11, v12, v13, v14, v15);
  if (v156)
  {
    uint64_t v165 = v156;
    v167 = "failed to create the signed section";
    goto LABEL_78;
  }
  if (!DEREncoderCreate()) {
    goto LABEL_74;
  }
  uint64_t v157 = DEREncoderAddSetFromEncoder();
  if (v157)
  {
    uint64_t v165 = v157;
LABEL_79:
    if (v48) {
      goto LABEL_68;
    }
    goto LABEL_84;
  }
  if (DEREncoderCreateEncodedBuffer())
  {
LABEL_84:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateManifestBody", (uint64_t)"%s DER operation failed", v11, v12, v13, v14, v15, (char)"AMAuthInstallApImg4LocalCreateManifestBody");
    goto LABEL_85;
  }
  CFAllocatorRef v158 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v159 = CFDataCreate(v158, 0, 0);
  *a3 = v159;
  if (v159)
  {
    uint64_t v165 = 0;
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateManifestBody", (uint64_t)"failed to create manifest data", v160, v161, v162, v163, v164, v168);
    uint64_t v165 = 2;
  }
LABEL_68:
  SafeFree(0);
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  SafeRelease(v18);
  return v165;
}

uint64_t AMAuthInstallApImg4LocalAddImages(const __CFAllocator *a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theDict)
  {
    CFNumberRef v35 = "requestDict cannot be NULL";
LABEL_23:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImages", (uint64_t)v35, a4, a5, a6, a7, a8, v36);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CFArrayRef Mutable = 0;
LABEL_24:
    uint64_t v33 = 1;
    goto LABEL_18;
  }
  if (!a3)
  {
    CFNumberRef v35 = "dstEncoder cannot be NULL";
    goto LABEL_23;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  uint64_t v12 = (const void **)malloc(8 * Count);
  uint64_t v13 = (const void **)malloc(8 * Count);
  CFDictionaryGetKeysAndValues(theDict, v12, v13);
  CFArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    uint64_t v33 = 2;
    goto LABEL_18;
  }
  if (Count >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      CFStringRef v16 = (const __CFString *)v12[v15];
      if (!v16) {
        goto LABEL_24;
      }
      CFAllocatorRef v17 = v13[v15];
      CFTypeID v18 = CFGetTypeID(v12[v15]);
      if (v18 != CFStringGetTypeID() || v17 == 0) {
        goto LABEL_24;
      }
      CFTypeID v20 = CFGetTypeID(v17);
      if (v20 == CFDictionaryGetTypeID())
      {
        if (CFDictionaryGetValue((CFDictionaryRef)v17, @"Digest"))
        {
          v37.CFIndex length = CFArrayGetCount(Mutable);
          v37.CFIndex location = 0;
          if (CFArrayGetFirstIndexOfValue(Mutable, v37, v16) == -1)
          {
            CFArrayAppendValue(Mutable, v16);
            CFStringRef TypeForEntryName = AMAuthInstallApImg4GetTypeForEntryName(v16);
            if (!TypeForEntryName)
            {
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImages", (uint64_t)"did not find a matching tag for requestTag %@", v22, v23, v24, v25, v26, (char)v16);
              goto LABEL_24;
            }
            uint64_t v27 = AMAuthInstallApImg4LocalAddImageProperties((uint64_t)TypeForEntryName, a3, TypeForEntryName, (const __CFDictionary *)v17, v23, v24, v25, v26);
            if (v27)
            {
              uint64_t v33 = v27;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImages", (uint64_t)"failed to add %@ image to the ticket body", v28, v29, v30, v31, v32, (char)v16);
              goto LABEL_18;
            }
          }
        }
      }
    }
    while (Count != ++v15);
  }
  uint64_t v33 = 0;
LABEL_18:
  SafeFree(v12);
  SafeFree(v13);
  SafeRelease(Mutable);
  return v33;
}

CFDataRef AMAuthInstallApImg4LocalCreateEncodedTag(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&length[65] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedTag", (uint64_t)"%s: tagStr is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallApImg4LocalCreateEncodedTag");
    goto LABEL_8;
  }
  char v8 = (char)a1;
  if (!CFStringGetCString(a1, (char *)&length[1], 256, 0x8000100u))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedTag", (uint64_t)"%s: cannot convert tagStr", v9, v10, v11, v12, v13, (char)"AMAuthInstallApImg4LocalCreateEncodedTag");
    goto LABEL_8;
  }
  if (!DEREncoderCreate())
  {
LABEL_8:
    SafeRelease(0);
    CFDataRef v24 = 0;
    goto LABEL_9;
  }
  strlen((const char *)&length[1]);
  if (DEREncoderAddData())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedTag", (uint64_t)"failed to add %@ string", v14, v15, v16, v17, v18, v8);
    goto LABEL_8;
  }
  if (DEREncoderCreateEncodedBuffer())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedTag", (uint64_t)"%s: failed to create buffer", v19, v20, v21, v22, v23, (char)"AMAuthInstallApImg4LocalCreateEncodedTag");
    goto LABEL_8;
  }
  CFDataRef v24 = CFDataCreate(0, 0, 0);
LABEL_9:
  SafeFree(0);
  DEREncoderDestroy();
  return v24;
}

CFDataRef AMAuthInstallApImg4LocalCreateEncodedVersion()
{
  if (!DEREncoderCreate()) {
    goto LABEL_9;
  }
  if (DEREncoderAddUInt32())
  {
    uint64_t v7 = "failed to add manifest version";
LABEL_8:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedVersion", (uint64_t)v7, v0, v1, v2, v3, v4, (char)v8);
LABEL_9:
    SafeRelease(0);
    CFDataRef v5 = 0;
    goto LABEL_5;
  }
  if (DEREncoderCreateEncodedBuffer())
  {
    char v8 = "AMAuthInstallApImg4LocalCreateEncodedVersion";
    uint64_t v7 = "%s: failed to create buffer";
    goto LABEL_8;
  }
  CFDataRef v5 = CFDataCreate(0, 0, 0);
LABEL_5:
  SafeFree(0);
  DEREncoderDestroy();
  return v5;
}

CFDataRef AMAuthInstallApImg4LocalCreateEncodedData(const __CFData *a1)
{
  if (!DEREncoderCreate()) {
    goto LABEL_8;
  }
  CFDataGetBytePtr(a1);
  CFDataGetLength(a1);
  if (DEREncoderAddData())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedData", (uint64_t)"%s: failed to encode data", v2, v3, v4, v5, v6, (char)"AMAuthInstallApImg4LocalCreateEncodedData");
LABEL_8:
    SafeRelease(0);
    CFDataRef v12 = 0;
    goto LABEL_5;
  }
  if (DEREncoderCreateEncodedBuffer())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedData", (uint64_t)"%s: failed to create buffer", v7, v8, v9, v10, v11, (char)"AMAuthInstallApImg4LocalCreateEncodedData");
    goto LABEL_8;
  }
  CFDataRef v12 = CFDataCreate(0, 0, 0);
LABEL_5:
  SafeFree(0);
  DEREncoderDestroy();
  return v12;
}

uint64_t _AMAuthInstallApImg4LocalCreateSignedManifest(void *a1, const void *a2, const void *a3, const void *a4, const void *a5, CFTypeRef *a6, uint64_t a7, uint64_t a8)
{
  LODWORD(length) = 0;
  CFTypeRef v90 = 0;
  CFDataRef theData = 0;
  CFDataRef v89 = 0;
  if (!a1 || !a2 || !a6)
  {
    uint64_t v48 = 3;
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)"%s failed to create DER file", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (char)"_AMAuthInstallApImg4LocalCreateSignedManifest");
    CFDataRef v58 = 0;
    CFDataRef v39 = 0;
    CFDataRef v30 = 0;
    CFArrayRef Mutable = 0;
    if (!a6) {
      goto LABEL_26;
    }
    goto LABEL_43;
  }
  int v10 = a7;
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFArrayRef Mutable = CFDataCreateMutable(v15, 0);
  if (!Mutable)
  {
    CFDataRef v30 = 0;
LABEL_48:
    CFDataRef v39 = 0;
    goto LABEL_41;
  }
  CFDataRef EncodedTag = AMAuthInstallApImg4LocalCreateEncodedTag(@"IM4M", v16, v17, v18, v19, v20, v21, v22);
  CFDataRef v30 = EncodedTag;
  if (!EncodedTag)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)"%s failed to encode tag", v25, v26, v27, v28, v29, (char)"_AMAuthInstallApImg4LocalCreateSignedManifest");
    goto LABEL_48;
  }
  BytePtr = CFDataGetBytePtr(EncodedTag);
  CFIndex v32 = CFDataGetLength(v30);
  CFDataAppendBytes(Mutable, BytePtr, v32);
  CFDataRef EncodedVersion = AMAuthInstallApImg4LocalCreateEncodedVersion();
  CFDataRef v39 = EncodedVersion;
  if (!EncodedVersion)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)"%s failed to encode version", v34, v35, v36, v37, v38, (char)"_AMAuthInstallApImg4LocalCreateSignedManifest");
    goto LABEL_41;
  }
  uint64_t v40 = CFDataGetBytePtr(EncodedVersion);
  CFIndex v41 = CFDataGetLength(v39);
  CFDataAppendBytes(Mutable, v40, v41);
  if (a3)
  {
    CFDataRef v47 = (const __CFData *)CFRetain(a3);
    CFDataRef theData = v47;
    uint64_t v48 = 99;
    if (v47) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v59 = "manifest not found";
LABEL_40:
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)v59, v18, v19, v20, v21, v22, v87);
    goto LABEL_41;
  }
  if (AMAuthInstallApImg4LocalCreateManifestBody((uint64_t)a1, a2, (CFTypeRef *)&theData, v42, v43, v44, v45, v46))
  {
    uint64_t v59 = "failed to create unsigned manifest";
    goto LABEL_40;
  }
  uint64_t v48 = 0;
  CFDataRef v47 = theData;
  if (!theData) {
    goto LABEL_13;
  }
LABEL_9:
  CFNumberRef v49 = CFDataGetBytePtr(v47);
  CFIndex v50 = CFDataGetLength(theData);
  CFDataAppendBytes(Mutable, v49, v50);
  if (!v10)
  {
    if (!AMAuthInstallApImg4LocalRegisterKeys((uint64_t)a1, v51, v52, v53, v54, v55, v56, v57))
    {
      if (a4)
      {
        CFTypeRef v60 = CFRetain(a4);
        CFTypeRef v90 = v60;
        if (v60)
        {
          CFDataRef EncodedData = AMAuthInstallApImg4LocalCreateEncodedData((const __CFData *)v60);
          CFDataRef v58 = EncodedData;
          if (EncodedData)
          {
            CFBooleanRef v67 = CFDataGetBytePtr(EncodedData);
            CFIndex v68 = CFDataGetLength(v58);
            CFDataAppendBytes(Mutable, v67, v68);
            if (a5)
            {
              CFDataRef v69 = (const __CFData *)CFRetain(a5);
              CFDataRef v89 = v69;
              if (v69)
              {
LABEL_20:
                uint64_t v75 = CFDataGetBytePtr(v69);
                CFIndex v76 = CFDataGetLength(v89);
                CFDataAppendBytes(Mutable, v75, v76);
                uint64_t v48 = 0;
                goto LABEL_21;
              }
            }
            else
            {
              if (AMAuthInstallApImg4LocalCreateEncodedCertificateChain((uint64_t)a1, (CFTypeRef *)&v89))
              {
                CFTypeID v86 = "failed to add certificate";
                goto LABEL_53;
              }
              CFDataRef v69 = v89;
              if (v89) {
                goto LABEL_20;
              }
            }
            CFTypeID v86 = "certificate not found";
LABEL_53:
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)v86, v70, v71, v72, v73, v74, v87);
            goto LABEL_42;
          }
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)"%s failed to encode signature", v62, v63, v64, v65, v66, (char)"_AMAuthInstallApImg4LocalCreateSignedManifest");
LABEL_42:
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)"%s failed to create DER file", v18, v19, v20, v21, v22, (char)"_AMAuthInstallApImg4LocalCreateSignedManifest");
LABEL_43:
          SafeRelease(*a6);
          *a6 = 0;
          uint64_t v48 = 3;
          goto LABEL_26;
        }
        goto LABEL_38;
      }
      int v85 = *(_DWORD *)(a1[2] + 112);
      if (v85 == 384)
      {
        CFDataGetBytePtr(theData);
        CFDataGetLength(theData);
        if (AMAuthInstallBasebandRembrandtLocalProvisionDevice()) {
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      if (v85 != 256)
      {
        if (v85 != 1)
        {
          int v87 = *(_DWORD *)(a1[2] + 112);
          uint64_t v59 = "Unsupported digest type: %d";
          goto LABEL_40;
        }
        CFDataGetBytePtr(theData);
        CFDataGetLength(theData);
        if (AMAuthInstallBasebandRembrandtLocalProvisionDevice()) {
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      CFDataGetBytePtr(theData);
      CFDataGetLength(theData);
      if (!AMAuthInstallBasebandRembrandtLocalProvisionDevice())
      {
LABEL_38:
        uint64_t v59 = "signature not found";
        goto LABEL_40;
      }
    }
LABEL_41:
    CFDataRef v58 = 0;
    goto LABEL_42;
  }
  CFDataRef v58 = 0;
LABEL_21:
  if (!DEREncoderCreate()) {
    goto LABEL_42;
  }
  CFDataGetBytePtr(Mutable);
  CFDataGetLength(Mutable);
  if (DEREncoderAddData() || DEREncoderCreateEncodedBuffer()) {
    goto LABEL_42;
  }
  CFAllocatorRef v77 = CFGetAllocator(a1);
  CFDataRef v78 = CFDataCreate(v77, 0, length);
  *a6 = v78;
  if (!v78)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallApImg4LocalCreateSignedManifest", (uint64_t)"failed to create manifest data", v79, v80, v81, v82, v83, v87);
    uint64_t v48 = 2;
  }
LABEL_26:
  SafeRelease(Mutable);
  SafeRelease(v30);
  SafeRelease(v39);
  SafeRelease(theData);
  SafeRelease(v90);
  SafeRelease(v58);
  SafeRelease(v89);
  SafeFree(0);
  DEREncoderDestroy();
  return v48;
}

uint64_t AMAuthInstallApImg4LocalRegisterKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v8 + 20))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalRegisterKeys", (uint64_t)"local signing is not available for production fused devices.", a4, a5, a6, a7, a8, v26);
    return 14;
  }
  if (!*(void *)(a1 + 392))
  {
    if (*(unsigned char *)(v8 + 72) || *(_DWORD *)(v8 + 16))
    {
      if (*(unsigned char *)(v8 + 73))
      {
        int v10 = *(_DWORD *)(v8 + 8);
        if (v10 == 32784)
        {
          uint64_t v11 = @"ap.ticket.insec.rsa4k.key.private";
        }
        else
        {
          if (v10 != 35168)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalRegisterKeys", (uint64_t)"unrecognized chipid: 0x%08X", a4, a5, a6, a7, a8, v10);
            return 1;
          }
          uint64_t v11 = @"ap.ticket.insec.rsa1k.key.private";
        }
      }
      else
      {
        uint64_t v11 = @"ap.ticket.dev.key.private";
        if (*(unsigned char *)(a1 + 505)) {
          uint64_t v11 = @"ap.ticket.localpolicy.hacktivation.key.private";
        }
      }
    }
    else
    {
      uint64_t v11 = @"ap.ticket.unfused.key.private";
    }
    *(void *)(a1 + 392) = v11;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 376), @"ap.ticket.dev.key.private")) {
    return 0;
  }
  int v28 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v27 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v12 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v13 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v14 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v15 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v16 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v17 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v18 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v19 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  int v20 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  uint64_t result = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  if ((!v28 || !v27 || !v15 || !v17 || !result) && (!v12 || !v13 || !v14 || !v16 || !v18 || !v19 || !v20))
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallApImg4LocalRegisterKeys", (uint64_t)"ap local signing keys available", v21, v22, v23, v24, v25, v26);
    return 0;
  }
  return result;
}

uint64_t AMAuthInstallApImg4LocalCreateEncodedCertificateChain(uint64_t a1, CFTypeRef *a2)
{
  if (!a1 || !a2)
  {
    CFArrayRef Mutable = 0;
    uint64_t v12 = 1;
    if (!a2) {
      goto LABEL_18;
    }
    goto LABEL_6;
  }
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  CFArrayRef Mutable = CFDataCreateMutable(v4, 0);
  if (!Mutable)
  {
    uint64_t v12 = 2;
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (!*(unsigned char *)(v11 + 20))
  {
    if (!*(void *)(a1 + 400))
    {
      if (*(unsigned char *)(a1 + 505))
      {
        int v13 = @"ap.ticket.localpolicy.hacktivation.leaf.cert";
      }
      else if (*(unsigned char *)(v11 + 72) || *(_DWORD *)(v11 + 16))
      {
        if (*(unsigned char *)(v11 + 73))
        {
          int v24 = *(_DWORD *)(v11 + 8);
          switch(v24)
          {
            case 32770:
              int v13 = @"ap.ticket.8002.insec.cert";
              break;
            case 35168:
              if (!*(void *)(a1 + 408)) {
                *(void *)(a1 + 408) = @"ap.ticket.ca.cert";
              }
              uint64_t v15 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
              if (v15) {
                goto LABEL_45;
              }
              BytePtr = CFDataGetBytePtr(0);
              CFIndex Length = CFDataGetLength(0);
              CFDataAppendBytes(Mutable, BytePtr, Length);
              int v13 = @"ap.ticket.8960.insec.cert";
              break;
            case 32784:
              int v13 = @"ap.ticket.8010.insec.cert";
              break;
            default:
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedCertificateChain", (uint64_t)"unrecognized chipid: 0x%08X", v5, v6, v7, v8, v9, v24);
              goto LABEL_38;
          }
        }
        else
        {
          int v13 = @"ap.ticket.8960.dev.cert";
        }
      }
      else
      {
        int v13 = @"ap.ticket.8960.unfused.cert";
      }
      *(void *)(a1 + 400) = v13;
    }
    if (!*(unsigned char *)(a1 + 505))
    {
      uint64_t v14 = *(void *)(a1 + 16);
      if (!*(unsigned char *)(v14 + 77))
      {
        int v25 = *(_DWORD *)(v14 + 8);
        if (v25 != 32770 && v25 != 35168 && v25 != 32784)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedCertificateChain", (uint64_t)"chipid: 0x%08X unsupported for img4 local signing", v5, v6, v7, v8, v9, v25);
LABEL_38:
          uint64_t v12 = 1;
          goto LABEL_6;
        }
      }
    }
    uint64_t v15 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
    if (!v15)
    {
      int v16 = CFDataGetBytePtr(0);
      CFIndex v17 = CFDataGetLength(0);
      CFDataAppendBytes(Mutable, v16, v17);
      if (DEREncoderCreate())
      {
        CFDataGetBytePtr(Mutable);
        CFDataGetLength(Mutable);
        if (DEREncoderAddData())
        {
          uint64_t v12 = 3;
          goto LABEL_6;
        }
        if (!DEREncoderCreateEncodedBuffer())
        {
          uint64_t v12 = 0;
          *a2 = CFDataCreate(0, 0, 0);
          goto LABEL_18;
        }
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedCertificateChain", (uint64_t)"%s: failed to create buffer", v18, v19, v20, v21, v22, (char)"AMAuthInstallApImg4LocalCreateEncodedCertificateChain");
      }
      uint64_t v12 = 0;
      goto LABEL_18;
    }
LABEL_45:
    uint64_t v12 = v15;
    goto LABEL_6;
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalCreateEncodedCertificateChain", (uint64_t)"local signing is not available for production fused devices.", v5, v6, v7, v8, v9, v28);
  uint64_t v12 = 14;
LABEL_6:
  SafeRelease(*a2);
LABEL_18:
  SafeRelease(Mutable);
  SafeFree(0);
  DEREncoderDestroy();
  return v12;
}

uint64_t AMAuthInstallApImg4LocalCreateSignedManifest(void *a1, const void *a2, const void *a3, const void *a4, const void *a5, CFTypeRef *a6, uint64_t a7, uint64_t a8)
{
  return _AMAuthInstallApImg4LocalCreateSignedManifest(a1, a2, a3, a4, a5, a6, 0, a8);
}

uint64_t AMAuthInstallApImg4LocalCreatePreManifest(void *a1, const void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _AMAuthInstallApImg4LocalCreateSignedManifest(a1, a2, 0, 0, 0, a3, 1, a8);
}

uint64_t AMAuthInstallApImg4LocalAddImageProperties(uint64_t a1, uint64_t a2, const __CFString *a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    uint64_t v104 = "toEncoder cannot be NULL";
LABEL_28:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)v104, (uint64_t)a4, a5, a6, a7, a8, v105);
    uint64_t v25 = 1;
    goto LABEL_24;
  }
  if (!a3)
  {
    uint64_t v104 = "imageTag cannot be NULL";
    goto LABEL_28;
  }
  if (!a4)
  {
    uint64_t v104 = "requestDict cannot be NULL";
    goto LABEL_28;
  }
  uint64_t v11 = DEREncoderCreate();
  if (!v11)
  {
    uint64_t v25 = 2;
    goto LABEL_24;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a4, @"Digest");
  if (Value)
  {
    CFDataRef v13 = Value;
    if (CFDataGetLength(Value) < 1)
    {
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"'%@' has zero length digest - skipping digest", v14, v15, v16, v17, v18, (char)a3);
    }
    else
    {
      uint64_t v19 = AMAuthInstallApImg4AddDataProperty(v11, @"DGST", v13, v14, v15, v16, v17, v18);
      if (v19)
      {
        uint64_t v25 = v19;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"failed to add Digest property for '%@'", v20, v21, v22, v23, v24, (char)a3);
        goto LABEL_24;
      }
    }
  }
  CFBooleanRef v26 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"Trusted");
  if (v26
    && (uint64_t v27 = CFBooleanGetValue(v26),
        uint64_t v33 = AMAuthInstallApImg4AddBooleanProperty(v11, @"EKEY", v27, v28, v29, v30, v31, v32),
        v33))
  {
    uint64_t v25 = v33;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"failed to add EKEY property for '%@'", v34, v35, v36, v37, v38, (char)a3);
  }
  else
  {
    CFBooleanRef v39 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"DPRO");
    if (v39
      && (uint64_t v40 = CFBooleanGetValue(v39),
          uint64_t v46 = AMAuthInstallApImg4AddBooleanProperty(v11, @"DPRO", v40, v41, v42, v43, v44, v45),
          v46))
    {
      uint64_t v25 = v46;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"failed to add DPRO property for '%@'", v47, v48, v49, v50, v51, (char)a3);
    }
    else
    {
      CFBooleanRef v52 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"DSEC");
      if (v52
        && (uint64_t v53 = CFBooleanGetValue(v52),
            uint64_t v59 = AMAuthInstallApImg4AddBooleanProperty(v11, @"DSEC", v53, v54, v55, v56, v57, v58),
            v59))
      {
        uint64_t v25 = v59;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"failed to add DSEC property for '%@'", v60, v61, v62, v63, v64, (char)a3);
      }
      else
      {
        CFBooleanRef v65 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"ESEC");
        if (v65
          && (uint64_t v66 = CFBooleanGetValue(v65),
              uint64_t v72 = AMAuthInstallApImg4AddBooleanProperty(v11, @"ESEC", v66, v67, v68, v69, v70, v71),
              v72))
        {
          uint64_t v25 = v72;
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"failed to add ESEC property for '%@'", v73, v74, v75, v76, v77, (char)a3);
        }
        else
        {
          CFBooleanRef v78 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"EPRO");
          if (v78
            && (uint64_t v79 = CFBooleanGetValue(v78),
                uint64_t v85 = AMAuthInstallApImg4AddBooleanProperty(v11, @"EPRO", v79, v80, v81, v82, v83, v84),
                v85))
          {
            uint64_t v25 = v85;
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"failed to add EPRO property for '%@'", v86, v87, v88, v89, v90, (char)a3);
          }
          else
          {
            CFDataRef v91 = (const __CFData *)CFDictionaryGetValue(a4, @"TBMDigests");
            if (v91
              && (uint64_t v97 = AMAuthInstallApImg4AddDataProperty(v11, @"tbms", v91, v92, v93, v94, v95, v96), v97))
            {
              uint64_t v25 = v97;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"failed to add %@ property for '%@'", v92, v93, v94, v95, v96, (char)@"tbms");
            }
            else
            {
              uint64_t v25 = AMAuthInstallApImg4AddDictionaryProperty(v11, a2, a3, v92, v93, v94, v95, v96);
              if (v25) {
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallApImg4LocalAddImageProperties", (uint64_t)"AMAuthInstallApImg4LocalAddDictionaryProperty failed for '%@'", v98, v99, v100, v101, v102, (char)a3);
              }
            }
          }
        }
      }
    }
  }
LABEL_24:
  DEREncoderDestroy();
  return v25;
}

uint64_t AMAuthInstallBasebandServerRequestAddRequiredTags(uint64_t a1, __CFDictionary *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFMutableDictionaryRef theDict = a2;
  if (!a1)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"%s: amai is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallBasebandServerRequestAddRequiredTags");
LABEL_40:
    int v10 = 0;
    goto LABEL_41;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (!v9)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"%s: amai->bbParameters is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallBasebandServerRequestAddRequiredTags");
    goto LABEL_40;
  }
  if (!*(void *)(v9 + 16))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"%s: amai->bbParameters->snum is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallBasebandServerRequestAddRequiredTags");
    goto LABEL_40;
  }
  int v10 = a2;
  if (!a2)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"%s: requestDict is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallBasebandServerRequestAddRequiredTags");
LABEL_41:
    a3 = 0;
LABEL_42:
    uint64_t v40 = 1;
    goto LABEL_31;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v10))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"%s: requestDict mistyped", v13, v14, v15, v16, v17, (char)"AMAuthInstallBasebandServerRequestAddRequiredTags");
    goto LABEL_40;
  }
  if (!a3)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"%s: bbfwURL is NULL", v13, v14, v15, v16, v17, (char)"AMAuthInstallBasebandServerRequestAddRequiredTags");
    int v10 = 0;
    goto LABEL_42;
  }
  CFIndex v18 = AMAuthInstallBasebandApplyTssOverrides((const void *)a1, (__CFDictionary *)v10, a3, v13, v14, v15, v16, v17);
  if (v18)
  {
    uint64_t v40 = v18;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"%s: failed to apply tss overrides", v19, v20, v21, v22, v23, (char)"AMAuthInstallBasebandServerRequestAddRequiredTags");
LABEL_46:
    int v10 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  CFDictionarySetValue((CFMutableDictionaryRef)v10, @"BbSNUM", *(const void **)(*(void *)(a1 + 48) + 16));
  _CFDictionarySetInteger32((__CFDictionary *)v10, @"BbChipID", *(_DWORD *)(*(void *)(a1 + 48) + 4));
  _CFDictionarySetInteger32((__CFDictionary *)v10, @"BbGoldCertId", *(_DWORD *)(*(void *)(a1 + 48) + 8));
  uint64_t v24 = *(const void **)(*(void *)(a1 + 48) + 24);
  if (v24)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)v10, @"BbNonce", v24);
    CFDictionarySetValue((CFMutableDictionaryRef)v10, @"@BBTicket", (const void *)*MEMORY[0x263EFFB40]);
  }
  uint64_t v25 = *(const void **)(a1 + 136);
  if (v25) {
    CFDictionarySetValue((CFMutableDictionaryRef)v10, @"BbVendorData", v25);
  }
  CFBooleanRef v26 = *(const void **)(a1 + 144);
  if (v26) {
    CFDictionarySetValue((CFMutableDictionaryRef)v10, @"BbAntennaType", v26);
  }
  uint64_t v27 = *(const void **)(a1 + 152);
  if (v27) {
    CFDictionarySetValue((CFMutableDictionaryRef)v10, @"BbBehavior", v27);
  }
  CFDictionaryRef v28 = *(const __CFDictionary **)(a1 + 424);
  if (v28)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v28, @"BbRequestEntries");
    if (Value)
    {
      CFDictionaryRef v30 = Value;
      int v31 = CFGetAllocator((CFTypeRef)a1);
      CFIndex v32 = AMAuthInstallSupportApplyDictionaryOverrides(v31, v30, &theDict, 0);
      if (v32)
      {
        uint64_t v40 = v32;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"failed to set Bb entitlements", v33, v34, v35, v36, v37, v55);
        goto LABEL_46;
      }
    }
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 200));
  int v10 = malloc(8 * Count);
  CFBooleanRef v39 = (const void **)malloc(8 * Count);
  a3 = v39;
  uint64_t v40 = 2;
  if (v10 && v39)
  {
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 200), (const void **)v10, v39);
    if (Count < 1)
    {
LABEL_27:
      BOOL v56 = 0;
      if (!AMAuthInstallVinylIsLegacyChipId((CFTypeRef)a1, &v56)
        && v56
        && (uint64_t TagForKeyHashName = AMAuthInstallBasebandVinylAddMeasurementTags(a1, theDict), TagForKeyHashName))
      {
LABEL_32:
        uint64_t v40 = TagForKeyHashName;
      }
      else
      {
        uint64_t v40 = 0;
      }
    }
    else
    {
      uint64_t v46 = 0;
      while (1)
      {
        key = 0;
        CFStringRef v47 = (const __CFString *)*((void *)v10 + v46);
        if (!v47)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"invalid HashKeysBuffer array", v41, v42, v43, v44, v45, v55);
          uint64_t v40 = 99;
          goto LABEL_31;
        }
        uint64_t TagForKeyHashName = AMAuthInstallBasebandGetTagForKeyHashName(a1, v47, (__CFString **)&key, v41, v42, v43, v44, v45);
        if (TagForKeyHashName) {
          goto LABEL_32;
        }
        if (!key) {
          break;
        }
        CFDictionarySetValue(theDict, key, a3[v46++]);
        if (Count == v46) {
          goto LABEL_27;
        }
      }
      uint64_t v40 = 3;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandServerRequestAddRequiredTags", (uint64_t)"keyHashTag not found for %@", v49, v50, v51, v52, v53, *((void *)v10 + v46));
    }
  }
LABEL_31:
  SafeFree(v10);
  SafeFree(a3);
  return v40;
}

CFIndex AMAuthInstallBasebandApplyTssOverrides(const void *a1, __CFDictionary *a2, CFTypeRef cf, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDataRef data = 0;
  CFMutableDictionaryRef v46 = a2;
  CFErrorRef error = 0;
  if (!a1)
  {
    uint64_t v41 = "NULL amai passed to AMAuthInstallBasebandApplyTssOverrides";
LABEL_15:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandApplyTssOverrides", (uint64_t)v41, a4, a5, a6, a7, a8, v43);
    uint64_t v15 = 0;
    CFDictionaryRef v17 = 0;
    CFIndex v16 = 1;
    goto LABEL_11;
  }
  if (!a2)
  {
    uint64_t v41 = "NULL requestDict passed to AMAuthInstallBasebandApplyTssOverrides";
    goto LABEL_15;
  }
  if (!cf)
  {
    uint64_t v41 = "NULL bbfw passed to AMAuthInstallBasebandApplyTssOverrides";
    goto LABEL_15;
  }
  uint64_t v9 = BbfwReaderOpen(cf);
  uint64_t v15 = (uint64_t)v9;
  if (!v9)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandApplyTssOverrides", (uint64_t)"failed to open bbfw archive for reading", v10, v11, v12, v13, v14, v43);
    CFDictionaryRef v17 = 0;
    CFIndex v16 = 4;
    goto LABEL_11;
  }
  if (!BbfwReaderFindAndCopyFileData((uint64_t)v9, @"Options.plist", (CFTypeRef *)&data))
  {
    CFAllocatorRef v18 = CFGetAllocator(a1);
    CFDictionaryRef v19 = (const __CFDictionary *)CFPropertyListCreateWithData(v18, data, 0, 0, &error);
    CFDictionaryRef v17 = v19;
    if (v19)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v19, @"TssOverrides");
      if (Value)
      {
        CFDictionaryRef v31 = Value;
        int v32 = CFGetAllocator(a1);
        CFIndex v33 = AMAuthInstallSupportApplyDictionaryOverrides(v32, v31, &v46, @"Bb");
        if (v33)
        {
          CFIndex v16 = v33;
          uint64_t v42 = "failed to set Bb entitlements";
        }
        else
        {
          int v39 = CFGetAllocator(a1);
          CFIndex v16 = AMAuthInstallSupportApplyDictionaryOverrides(v39, v31, &v46, @"FDR");
          if (!v16) {
            goto LABEL_11;
          }
          uint64_t v42 = "failed to set FDR entitlements";
        }
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandApplyTssOverrides", (uint64_t)v42, v34, v35, v36, v37, v38, v43);
        goto LABEL_11;
      }
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandApplyTssOverrides", (uint64_t)"TssOverrides not found in Options.plist", v26, v27, v28, v29, v30, v43);
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandApplyTssOverrides", (uint64_t)"failed to create CFDictionary from Options.plist %@", v20, v21, v22, v23, v24, (char)error);
    }
    CFIndex v16 = 0;
    goto LABEL_11;
  }
  CFIndex v16 = 0;
  CFDictionaryRef v17 = 0;
LABEL_11:
  SafeRelease(v17);
  SafeRelease(data);
  SafeRelease(error);
  BbfwReaderClose(v15);
  return v16;
}

CFComparisonResult AMAuthInstallBasebandGetTagForKeyHashName(uint64_t a1, CFStringRef theString2, __CFString **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v14 = "amai is NULL";
LABEL_22:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandGetTagForKeyHashName", (uint64_t)v14, a4, a5, a6, a7, a8, v15);
    return 1;
  }
  if (!theString2)
  {
    uint64_t v14 = "keyHashName is NULL";
    goto LABEL_22;
  }
  if (!a3)
  {
    uint64_t v14 = "outKeyTag is NULL";
    goto LABEL_22;
  }
  if (CFStringCompare(@"BbProvisioningManifestKeyHash", theString2, 0))
  {
    CFComparisonResult result = CFStringCompare(@"BbActivationManifestKeyHash", theString2, 0);
    if (result)
    {
      CFComparisonResult result = CFStringCompare(@"BbCalibrationManifestKeyHash", theString2, 0);
      if (result)
      {
        CFComparisonResult result = CFStringCompare(@"BbFactoryActivationManifestKeyHash", theString2, 0);
        if (result)
        {
          CFComparisonResult result = CFStringCompare(@"BbFDRSecurityKeyHash", theString2, 0);
          if (result) {
            return 8;
          }
          uint64_t v13 = &kAMAuthInstallTagBbFDRSecurityKeyHash;
        }
        else
        {
          uint64_t v13 = &kAMAuthInstallTagBbFactoryActivationKeyHash;
        }
      }
      else
      {
        uint64_t v13 = &kAMAuthInstallTagBbCalibrationKeyHash;
      }
    }
    else
    {
      uint64_t v13 = &kAMAuthInstallTagBbActivationKeyHash;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12 && *(_DWORD *)(v12 + 4) != 80)
    {
      CFComparisonResult result = kCFCompareEqualTo;
      uint64_t v13 = &kAMAuthInstallTagBbProvisioningKeyHash;
    }
    else
    {
      CFComparisonResult result = kCFCompareEqualTo;
      uint64_t v13 = &kAMAuthInstallTagBbSKeyId;
    }
  }
  *a3 = *v13;
  return result;
}

uint64_t AMAuthInstallBasebandCreateServerRequestDictionary(void *a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4, const void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCreateServerRequestDictionary", (uint64_t)"%s: measurementDict is NULL", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)"AMAuthInstallBasebandCreateServerRequestDictionary");
LABEL_16:
    char v15 = 0;
    uint64_t v27 = 1;
    goto LABEL_12;
  }
  if (!a4)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCreateServerRequestDictionary", (uint64_t)"%s: outRequestDict is NULL", 0, (uint64_t)a5, a6, a7, a8, (char)"AMAuthInstallBasebandCreateServerRequestDictionary");
    goto LABEL_16;
  }
  if (!a5)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCreateServerRequestDictionary", (uint64_t)"%s: bbfwURL is NULL", (uint64_t)a4, 0, a6, a7, a8, (char)"AMAuthInstallBasebandCreateServerRequestDictionary");
    goto LABEL_16;
  }
  CFAllocatorRef v13 = CFGetAllocator(a1);
  if (a3) {
    CFDataRef MutableCopy = CFDictionaryCreateMutableCopy(v13, 0, a3);
  }
  else {
    CFDataRef MutableCopy = CFDictionaryCreateMutable(v13, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  char v15 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, @"BasebandFirmware", a2);
    uint64_t v21 = AMAuthInstallBasebandServerRequestAddRequiredTags((uint64_t)a1, v15, a5, v16, v17, v18, v19, v20);
    if (v21)
    {
      uint64_t v27 = v21;
    }
    else
    {
      if (a1[2]) {
        AMAuthInstallApServerRequestAddRequiredTags(a1, v15, 0, v22, v23, v24, v25, v26);
      }
      uint64_t v27 = 0;
      *a4 = CFRetain(v15);
    }
  }
  else
  {
    uint64_t v27 = 2;
  }
LABEL_12:
  SafeRelease(v15);
  return v27;
}

uint64_t AMAuthInstallBasebandCopyAllPersonalizedComponents(void *a1, void *a2, const void *a3, __CFDictionary *a4, const __CFDictionary *a5, const __CFDictionary *a6, CFTypeRef *a7)
{
  uint64_t v10 = a4;
  CFDictionaryRef v99 = 0;
  CFDictionaryRef theDict = a5;
  CFTypeRef v98 = 0;
  SafeRetain(a4);
  SafeRetain(a5);
  if (!a1 || !a1[6])
  {
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_157;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    uint64_t v56 = 2;
    goto LABEL_136;
  }
  int v23 = *(_DWORD *)(a1[6] + 4);
  if (v23 > 1700064)
  {
    if (v23 > 5898464)
    {
      if (v23 <= 8343776)
      {
        if (v23 == 5898465)
        {
          uint64_t v24 = AMAuthInstallBasebandJ2FuseIfNecessary(a1, a2, Mutable);
          if (v24) {
            goto LABEL_158;
          }
        }
        else if (v23 == 7278817 || v23 == 7282913)
        {
          uint64_t v24 = AMAuthInstallBasebandJ2FuseIfNecessary(a1, a2, Mutable);
          if (v24) {
            goto LABEL_158;
          }
        }
        goto LABEL_41;
      }
      if (v23 == 8343777 || v23 == 9572577) {
        goto LABEL_40;
      }
      int v30 = 9781473;
      goto LABEL_39;
    }
    if (v23 > 2814176)
    {
      if (v23 != 2814177)
      {
        if (v23 == 4587745)
        {
          uint64_t v24 = AMAuthInstallBasebandJ2FuseIfNecessary(a1, a2, Mutable);
          if (v24) {
            goto LABEL_158;
          }
        }
        else if (v23 == 5243105)
        {
          uint64_t v24 = AMAuthInstallBasebandJ2FuseIfNecessary(a1, a2, Mutable);
          if (v24) {
            goto LABEL_158;
          }
        }
        goto LABEL_41;
      }
      goto LABEL_35;
    }
    if (v23 != 1700065)
    {
      int v29 = 2089185;
LABEL_34:
      if (v23 != v29) {
        goto LABEL_41;
      }
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  if (v23 <= 241888)
  {
    unsigned int v25 = v23 - 94;
    BOOL v26 = v25 > 0xA;
    int v27 = (1 << v25) & 0x685;
    if (!v26 && v27 != 0)
    {
      uint64_t v24 = AMAuthInstallApImg3SupportsLocalSigning();
      if (v24) {
        goto LABEL_158;
      }
    }
    goto LABEL_41;
  }
  if (v23 > 938208)
  {
    if (v23 != 938209 && v23 != 1327329)
    {
      int v29 = 1515745;
      goto LABEL_34;
    }
LABEL_35:
    uint64_t v24 = AMAuthInstallBasebandJ2FuseIfNecessary(a1, a2, Mutable);
    if (v24) {
      goto LABEL_158;
    }
    goto LABEL_41;
  }
  if (v23 != 241889)
  {
    int v30 = 520417;
LABEL_39:
    if (v23 != v30) {
      goto LABEL_41;
    }
  }
LABEL_40:
  uint64_t v24 = AMAuthInstallBasebandJ2FuseIfNecessary(a1, a2, Mutable);
  if (v24) {
    goto LABEL_158;
  }
LABEL_41:
  uint64_t v31 = a1[6];
  if (!*(void *)(v31 + 16))
  {
LABEL_135:
    uint64_t v56 = 0;
    *a7 = CFRetain(Mutable);
    goto LABEL_136;
  }
  if (v10)
  {
LABEL_43:
    if (*(_DWORD *)(v31 + 4) == 104)
    {
      int IsICE19BBGoldCertIDECDSA = AMAuthInstallIsICE19BBGoldCertIDECDSA(*(_DWORD *)(v31 + 8), v15, v16, v17, v18, v19, v20, v21);
      CFIndex v33 = &kAMAuthInstallTagBbPsiPartialDigest;
      if (IsICE19BBGoldCertIDECDSA)
      {
        CFIndex v33 = &kAMAuthInstallTagBbPsi2PartialDigest;
        uint64_t v34 = &kAMAuthInstallTagBbRestorePsi2PartialDigest;
      }
      else
      {
        uint64_t v34 = &kAMAuthInstallTagBbRestorePsiPartialDigest;
      }
      CFDictionaryRemoveValue(v10, *v33);
      CFDictionaryRemoveValue(v10, *v34);
    }
LABEL_48:
    CFDictionaryRef v35 = theDict;
    if (theDict)
    {
LABEL_49:
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v35, @"BBTicket");
      if (Value)
      {
        CFDataRef v42 = Value;
        BytePtr = CFDataGetBytePtr(Value);
        CFIndex Length = CFDataGetLength(v42);
        AMAuthInstallLogDumpMemory(8, (uint64_t)"AMAuthInstallBasebandCopyAllPersonalizedComponents", (char)"BBTicket:", (uint64_t)BytePtr, Length, v45, v46, v47);
      }
LABEL_51:
      int v48 = *(_DWORD *)(a1[6] + 4);
      if (v48 > 1700064)
      {
        if (v48 <= 5898464)
        {
          if (v48 <= 2814176)
          {
            if (v48 != 1700065)
            {
              int v72 = 2089185;
LABEL_107:
              if (v48 != v72) {
                goto LABEL_137;
              }
LABEL_108:
              uint64_t v49 = AMAuthInstallBasebandMAV22StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
              goto LABEL_124;
            }
LABEL_109:
            uint64_t v49 = AMAuthInstallBasebandMAV21StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
            goto LABEL_124;
          }
          if (v48 == 2814177) {
            goto LABEL_108;
          }
          if (v48 != 4587745)
          {
            if (v48 == 5243105)
            {
              uint64_t v49 = AMAuthInstallBasebandN92StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
              goto LABEL_124;
            }
            goto LABEL_137;
          }
          uint64_t v49 = AMAuthInstallBasebandJ2StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
LABEL_124:
          uint64_t v56 = v49;
          if (!v49)
          {
            uint64_t v86 = a1[6];
            if (*(void *)(v86 + 24))
            {
              if (*(_DWORD *)(v86 + 4) != 80)
              {
                uint64_t v87 = CFDictionaryGetValue(theDict, @"BBTicket");
                if (v87) {
                  CFDictionaryAddValue(Mutable, @"bbticket.der", v87);
                }
              }
            }
            CFDictionaryRef v88 = (const __CFDictionary *)CFRetain(theDict);
            CFDictionaryRef v99 = v88;
            if (a3 && *(void *)(a1[6] + 160))
            {
              uint64_t v89 = AMAuthInstallVinylPersonalizeFirmware(a1, a3, 0, &v99, a6, v52, v53, v54);
              if (v89)
              {
                uint64_t v56 = v89;
                uint64_t v94 = "failed to personalize vinyl fw";
                goto LABEL_139;
              }
              CFDictionaryRef v88 = v99;
            }
            uint64_t v90 = AMAuthInstallBasebandVinylStitchFirmware(a1, a2, a3, v88, Mutable, v52, v53, v54);
            if (v90)
            {
              uint64_t v56 = v90;
              uint64_t v94 = "failed to stitch vinyl fw";
            }
            else
            {
              uint64_t v92 = AMAuthInstallProvisioningProvisionIfNecessary((uint64_t)a1, Mutable, v91, v50, v51, v52, v53, v54);
              if (!v92) {
                goto LABEL_135;
              }
              uint64_t v56 = v92;
              uint64_t v94 = "AMAuthInstallProvisioningProvisionIfNecessary failed";
            }
LABEL_139:
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyAllPersonalizedComponents", (uint64_t)v94, v50, v51, v52, v53, v54, v95);
            goto LABEL_136;
          }
LABEL_138:
          uint64_t v94 = "failed to stitch bbfw";
          goto LABEL_139;
        }
        if (v48 <= 8343776)
        {
          if (v48 != 5898465)
          {
            if (v48 == 7278817 || v48 == 7282913)
            {
              uint64_t v49 = AMAuthInstallBasebandN41StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
              goto LABEL_124;
            }
            goto LABEL_137;
          }
          uint64_t v49 = AMAuthInstallBasebandN94StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
          goto LABEL_124;
        }
        if (v48 != 8343777 && v48 != 9572577)
        {
          int v78 = 9781473;
          goto LABEL_103;
        }
      }
      else
      {
        if (v48 <= 241888)
        {
          if ((v48 - 80) <= 0x18)
          {
            if (((1 << (v48 - 80)) & 0x1A14000) != 0)
            {
              uint64_t v49 = AMAuthInstallBasebandRembrandtStitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
              goto LABEL_124;
            }
            if (v48 == 80)
            {
              uint64_t v49 = AMAuthInstallBasebandICE3StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
              goto LABEL_124;
            }
          }
LABEL_137:
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyAllPersonalizedComponents", (uint64_t)"chipID: 0x%x is not supported", v37, v38, v39, v40, v41, *(_DWORD *)(a1[6] + 4));
          uint64_t v56 = 13;
          goto LABEL_138;
        }
        if (v48 > 938208)
        {
          if (v48 != 938209)
          {
            if (v48 != 1327329)
            {
              int v72 = 1515745;
              goto LABEL_107;
            }
            goto LABEL_109;
          }
          uint64_t v49 = AMAuthInstallBasebandMAV20StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
          goto LABEL_124;
        }
        if (v48 != 241889)
        {
          int v78 = 520417;
LABEL_103:
          if (v48 != v78) {
            goto LABEL_137;
          }
        }
      }
      uint64_t v49 = AMAuthInstallBasebandMAV10StitchFirmware((uint64_t)a1, a2, (uint64_t)theDict, Mutable);
      goto LABEL_124;
    }
    LOBYTE(v97) = 0;
    if (!AMAuthInstallBasebandLocalSigningEnabled((uint64_t)a1, &v97, v16, v17, v18, v19, v20, v21))
    {
      uint64_t v24 = AMAuthInstallBasebandCreateServerRequestDictionary(a1, v10, a6, &v98, (const void **)a2, v57, v58, v59);
      if (v24) {
        goto LABEL_158;
      }
      if ((_BYTE)v97)
      {
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandCopyAllPersonalizedComponents", (uint64_t)"this certid specifies local signing", v61, v62, v63, v64, v65, v95);
        int v71 = *(_DWORD *)(a1[6] + 4);
        if (v71 <= 1700064)
        {
          if (v71 <= 241888)
          {
            if ((v71 - 94) <= 0xA && ((1 << (v71 - 94)) & 0x685) != 0)
            {
              uint64_t v79 = AMAuthInstallBasebandRembrandtHandleLocalSigningRequest(a1, v98, &theDict);
              goto LABEL_149;
            }
            goto LABEL_155;
          }
          if (v71 > 938208)
          {
            if (v71 == 938209 || v71 == 1327329) {
              goto LABEL_148;
            }
            int v85 = 1515745;
            goto LABEL_147;
          }
          if (v71 != 241889)
          {
            int v85 = 520417;
            goto LABEL_147;
          }
        }
        else
        {
          if (v71 > 5898464)
          {
            if (v71 <= 8343776)
            {
              if (v71 == 5898465 || v71 == 7278817 || v71 == 7282913) {
                goto LABEL_148;
              }
              goto LABEL_155;
            }
            if (v71 == 8343777 || v71 == 9572577) {
              goto LABEL_148;
            }
            int v85 = 9781473;
LABEL_147:
            if (v71 == v85) {
              goto LABEL_148;
            }
LABEL_155:
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyAllPersonalizedComponents", (uint64_t)"chipID: 0x%x is not supported", v66, v67, v68, v69, v70, *(_DWORD *)(a1[6] + 4));
LABEL_89:
            uint64_t v56 = 14;
            goto LABEL_136;
          }
          if (v71 > 2814176)
          {
            if (v71 == 2814177 || v71 == 4587745 || v71 == 5243105) {
              goto LABEL_148;
            }
            goto LABEL_155;
          }
          if (v71 != 1700065)
          {
            int v85 = 2089185;
            goto LABEL_147;
          }
        }
LABEL_148:
        uint64_t v79 = AMAuthInstallBasebandJ2HandleLocalSigningRequest(a1, v98, &theDict);
LABEL_149:
        uint64_t v56 = v79;
        if (v79) {
          goto LABEL_136;
        }
        uint64_t v24 = AMAuthInstallBasebandVinylLocalHandleRequest((uint64_t)a1, (uint64_t)v98, (uint64_t)&theDict, v80, v81, v82, v83, v84);
        if (!v24)
        {
          CFDictionaryRef v35 = theDict;
          if (!theDict) {
            goto LABEL_51;
          }
          goto LABEL_49;
        }
LABEL_158:
        uint64_t v56 = v24;
        goto LABEL_136;
      }
      char v96 = 0;
      if (!AMAuthInstallBasebandSupportsServerSigning((uint64_t)a1, &v96, v60, v61, v62, v63, v64, v65))
      {
        if (v96 != 1)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyAllPersonalizedComponents", (uint64_t)"This chipid/certid does not support local or server personalization.", v73, v74, v75, v76, v77, v95);
          uint64_t v56 = 13;
          goto LABEL_136;
        }
        uint64_t v24 = AMAuthInstallRequestSendSync((uint64_t)a1, v98, (CFTypeRef *)&theDict);
        if (v24) {
          goto LABEL_158;
        }
        CFDictionaryRef v35 = theDict;
        if (theDict) {
          goto LABEL_49;
        }
        goto LABEL_89;
      }
    }
LABEL_157:
    uint64_t v56 = 1;
    goto LABEL_136;
  }
  uint64_t v97 = 0;
  uint64_t Measurements = AMAuthInstallBasebandCreateMeasurements(a1, a2, a3, (CFTypeRef *)&v97);
  if (!Measurements)
  {
    uint64_t v10 = v97;
    uint64_t v31 = a1[6];
    if (!v31) {
      goto LABEL_48;
    }
    goto LABEL_43;
  }
  uint64_t v56 = Measurements;
  uint64_t v10 = 0;
LABEL_136:
  SafeRelease(v10);
  SafeRelease(v99);
  SafeRelease(theDict);
  SafeRelease(v98);
  SafeRelease(Mutable);
  SafeRelease(0);
  return v56;
}

uint64_t AMAuthInstallBasebandCreateMeasurements(void *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  int v45 = 0;
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v46 = Mutable;
  uint64_t v15 = a1[6];
  if (v15 && (int v16 = *(_DWORD *)(v15 + 4)) != 0)
  {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandCreateMeasurements", (uint64_t)"Using set ChipID 0x%08X to measure", v9, v10, v11, v12, v13, *(_DWORD *)(v15 + 4));
  }
  else
  {
    if (AMAuthInstallBasebandReadChipIDFromBbfw(a2, &v45))
    {
      if (AMAuthInstallBasebandICE3FirmwareSupported(a2))
      {
        int v16 = 80;
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandCreateMeasurements", (uint64_t)"Using detected ICE3 ChipID 0x%08X to measure", v27, v28, v29, v30, v31, 80);
      }
      else
      {
        int v16 = 5243105;
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandCreateMeasurements", (uint64_t)"Using default ChipID 0x%08X to measure", v27, v28, v29, v30, v31, 225);
      }
    }
    else
    {
      int v16 = v45;
      if (!v45)
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCreateMeasurements", (uint64_t)"chipid 0 read from Info.plist!", v22, v23, v24, v25, v26, v43);
        uint64_t v40 = 14;
        goto LABEL_59;
      }
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandCreateMeasurements", (uint64_t)"Using ChipID 0x%08X from Info.plist to measure", v22, v23, v24, v25, v26, v45);
    }
    int v32 = calloc(1uLL, 0xB0uLL);
    if (!v32)
    {
      a1[6] = 0;
      uint64_t v40 = 2;
      goto LABEL_59;
    }
    v32[9] = 0u;
    v32[10] = 0u;
    v32[7] = 0u;
    v32[8] = 0u;
    v32[5] = 0u;
    v32[6] = 0u;
    v32[3] = 0u;
    v32[4] = 0u;
    v32[1] = 0u;
    unint64_t v32[2] = 0u;
    *int v32 = 0u;
    a1[6] = v32;
    *((_DWORD *)v32 + 1) = v16;
  }
  if (v16 <= 1700064)
  {
    if (v16 <= 241888)
    {
      if ((v16 - 80) <= 0x18)
      {
        if (((1 << (v16 - 80)) & 0x1A14000) != 0)
        {
          uint64_t v33 = AMAuthInstallBasebandRembrandtMeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
          goto LABEL_51;
        }
        if (v16 == 80)
        {
          uint64_t v33 = AMAuthInstallBasebandICE3MeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
          goto LABEL_51;
        }
      }
LABEL_64:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCreateMeasurements", (uint64_t)"unrecognized chipid: 0x%08X", v17, v18, v19, v20, v21, v16);
      uint64_t v40 = 13;
      goto LABEL_59;
    }
    if (v16 > 938208)
    {
      BOOL v34 = v16 == 938209 || v16 == 1327329;
      int v35 = 1515745;
LABEL_45:
      if (!v34 && v16 != v35) {
        goto LABEL_64;
      }
LABEL_50:
      uint64_t v33 = AMAuthInstallBasebandMAV20MeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
      goto LABEL_51;
    }
    BOOL v36 = v16 == 241889;
    int v37 = 520417;
LABEL_38:
    if (v36 || v16 == v37)
    {
      uint64_t v33 = AMAuthInstallBasebandMAV10MeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
      goto LABEL_51;
    }
    goto LABEL_64;
  }
  if (v16 <= 5898464)
  {
    if (v16 <= 2814176)
    {
      BOOL v34 = v16 == 1700065;
      int v35 = 2089185;
      goto LABEL_45;
    }
    if (v16 == 2814177) {
      goto LABEL_50;
    }
    if (v16 != 4587745)
    {
      if (v16 == 5243105)
      {
        uint64_t v33 = AMAuthInstallBasebandN92MeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
        goto LABEL_51;
      }
      goto LABEL_64;
    }
    uint64_t v33 = AMAuthInstallBasebandJ2MeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
  }
  else
  {
    if (v16 > 8343776)
    {
      BOOL v36 = v16 == 8343777 || v16 == 9572577;
      int v37 = 9781473;
      goto LABEL_38;
    }
    if (v16 != 5898465)
    {
      if (v16 == 7278817 || v16 == 7282913)
      {
        uint64_t v33 = AMAuthInstallBasebandN41MeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
        goto LABEL_51;
      }
      goto LABEL_64;
    }
    uint64_t v33 = AMAuthInstallBasebandN94MeasureFirmware((uint64_t)a1, a2, (uint64_t)Mutable);
  }
LABEL_51:
  uint64_t v40 = v33;
  if (!v33)
  {
    BOOL v44 = 0;
    if (a3)
    {
      if (!AMAuthInstallVinylIsLegacyChipId(a1, &v44) && v44)
      {
        uint64_t Measurements = AMAuthInstallVinylCreateMeasurements(a1, a3, &v46, 0);
        CFDictionaryRef Mutable = v46;
        if (Measurements) {
          goto LABEL_56;
        }
      }
    }
    else
    {
      uint64_t Measurements = AMAuthInstallBasebandVinylCreateMeasurements((uint64_t)a1, a2, Mutable);
      if (Measurements)
      {
LABEL_56:
        uint64_t v40 = Measurements;
        goto LABEL_59;
      }
    }
    uint64_t v40 = 0;
    *a4 = CFRetain(Mutable);
    CFDictionaryRef Mutable = v46;
  }
LABEL_59:
  SafeRelease(Mutable);
  return v40;
}

uint64_t AMAuthInstallBasebandLocalSigningEnabled(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (a2 && *(void *)(a1 + 48))
  {
    __int16 v26 = 0;
    if (AMAuthInstallBasebandSupportsServerSigning(a1, (unsigned char *)&v26 + 1, a3, a4, a5, a6, a7, a8))
    {
      uint64_t v24 = "failed to query is server signing is supported.";
    }
    else
    {
      BooleanCFDataRef Value = AMAuthInstallPreferencesGetBooleanValue(@"AuthInstallEnableLocalSigning", 0, 0);
      if (HIBYTE(v26) && BooleanValue != 1)
      {
        char v23 = 0;
LABEL_10:
        uint64_t result = 0;
        *a2 = v23;
        return result;
      }
      if (!AMAuthInstallBasebandSupportsLocalSigning(a1, &v26, v17, v18, v19, v20, v21, v22))
      {
        char v23 = v26;
        goto LABEL_10;
      }
      uint64_t v24 = "failed to query is local signing is supported.";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandLocalSigningEnabled", (uint64_t)v24, v11, v12, v13, v14, v15, v25);
    return 1;
  }
  return result;
}

uint64_t AMAuthInstallBasebandSupportsServerSigning(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 1;
  if (a1 && a2)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (!v10)
    {
LABEL_50:
      char v12 = 0;
      goto LABEL_51;
    }
    int v11 = *(_DWORD *)(v10 + 4);
    if (v11 > 1700064)
    {
      if (v11 <= 5898464)
      {
        if (v11 > 2814176)
        {
          if (v11 == 2814177 || v11 == 4587745 || v11 == 5243105) {
            goto LABEL_45;
          }
          goto LABEL_49;
        }
        BOOL v14 = v11 == 1700065;
        int v15 = 2089185;
        goto LABEL_38;
      }
      if (v11 <= 8343776)
      {
        if (v11 == 5898465) {
          goto LABEL_45;
        }
        if (v11 == 7278817 || v11 == 7282913) {
          goto LABEL_45;
        }
LABEL_49:
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSupportsServerSigning", (uint64_t)"chipID: 0x%x is not supported for server signing", a4, a5, a6, a7, a8, v11);
        goto LABEL_50;
      }
      BOOL v16 = v11 == 8343777 || v11 == 9572577;
      int v17 = 9781473;
    }
    else
    {
      if (v11 <= 241888)
      {
        if ((v11 - 80) <= 0x18)
        {
          if (((1 << (v11 - 80)) & 0x1A14000) != 0)
          {
            char v12 = AMAuthInstallBasebandRembrandtSupportsServerSigning(a1);
LABEL_51:
            uint64_t v8 = 0;
            *a2 = v12;
            return v8;
          }
          if (v11 == 80)
          {
LABEL_45:
            char v12 = AMAuthInstallBasebandICE3SupportsServerSigning();
            goto LABEL_51;
          }
        }
        goto LABEL_49;
      }
      if (v11 > 938208)
      {
        if (v11 == 938209) {
          goto LABEL_45;
        }
        BOOL v14 = v11 == 1327329;
        int v15 = 1515745;
LABEL_38:
        if (v14 || v11 == v15) {
          goto LABEL_45;
        }
        goto LABEL_49;
      }
      BOOL v16 = v11 == 241889;
      int v17 = 520417;
    }
    if (v16 || v11 == v17) {
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  return v8;
}

uint64_t AMAuthInstallBasebandCopyAllComponents(const void *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v3 = 0;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v4 = 1;
  CFMutableDictionaryRef v25 = 0;
  if (a1 && a2 && a3)
  {
    CFAllocatorRef v8 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v3 = Mutable;
    if (Mutable)
    {
      v24[0] = a1;
      CFMutableDictionaryRef v25 = Mutable;
      uint64_t v10 = BbfwReaderStart(a2, (uint64_t (*)(uint64_t, CFStringRef, void *))_AddFirmware, (uint64_t)v24);
      if (v10)
      {
        uint64_t v4 = v10;
      }
      else
      {
        uint64_t v17 = AMAuthInstallProvisioningProvisionIfNecessary((uint64_t)a1, v3, v11, v12, v13, v14, v15, v16);
        uint64_t v4 = v17;
        if (v17) {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyAllComponents", (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary failed: %d", v18, v19, v20, v21, v22, v17);
        }
        else {
          *a3 = CFRetain(v3);
        }
      }
    }
    else
    {
      uint64_t v4 = 2;
    }
  }
  SafeRelease(v3);
  return v4;
}

uint64_t _AddFirmware(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = *(__CFDictionary **)(a1 + 16);
  value = 0;
  int v5 = BbfwReaderCopyFileData(a3, (CFTypeRef *)&value);
  if (v5)
  {
    AMAuthInstallGetLocalizedStatusString(0, v5);
    AMAuthInstallLog(3, (uint64_t)"_AddFirmware", (uint64_t)"failed to extract bbfw item \"%@\": %@; continuing anyway",
      v11,
      v12,
      v13,
      v14,
      v15,
      (char)a2);
  }
  else if (value)
  {
    CFDictionarySetValue(v4, a2, value);
  }
  else
  {
    AMAuthInstallLog(4, (uint64_t)"_AddFirmware", (uint64_t)"failed to add \"%@\"; ignoring it",
      v6,
      v7,
      v8,
      v9,
      v10,
      (char)a2);
  }
  SafeRelease(value);
  return 1;
}

CFIndex AMAuthInstallBasebandCopyCustomFirmware(const void *a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  __int16 v26 = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFURLRef v12 = CFURLCreateWithFileSystemPath(v6, a2, kCFURLPOSIXPathStyle, 0);
  if (!v12)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyCustomFirmware", (uint64_t)"customBbfwURL CFURLCreateWithFileSystemPath failed", v7, v8, v9, v10, v11, (char)cf);
    CFIndex v21 = 2;
    goto LABEL_8;
  }
  uint64_t v13 = AMAuthInstallSupportCopyURLToNewTempDirectory(*MEMORY[0x263EFFB08], "CustomFirmware.XXXXXXXXXX", &v26);
  if (v13)
  {
    CFIndex v21 = v13;
    char v23 = "AMAuthInstallSupportCopyURLToNewTempDirectory failed";
LABEL_16:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyCustomFirmware", (uint64_t)v23, v14, v15, v16, v17, v18, (char)cf);
    goto LABEL_8;
  }
  if (!v26)
  {
    uint64_t v24 = "dstBundleURL is NULL";
LABEL_14:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyCustomFirmware", (uint64_t)v24, v14, v15, v16, v17, v18, (char)cf);
    CFIndex v21 = 14;
    goto LABEL_8;
  }
  CFAllocatorRef v19 = CFGetAllocator(a1);
  uint64_t v20 = AMAuthInstallSupportCopyURLWithAppendedComponent(v19, v26, @"custom.bbfw", 0, (CFURLRef *)&cf);
  if (v20)
  {
    CFIndex v21 = v20;
    char v23 = "AMAuthInstallSupportCopyURLWithAppendedComponent failed";
    goto LABEL_16;
  }
  if (!cf)
  {
    uint64_t v24 = "personalizedBbfwURL is NULL";
    goto LABEL_14;
  }
  CFIndex v21 = AMAuthInstallBasebandCopyFirmware(a1, v12, cf);
  if (v21)
  {
    char v23 = "AMAuthInstallBasebandCopyFirmware failed";
    goto LABEL_16;
  }
  *a3 = CFRetain(cf);
LABEL_8:
  SafeRelease(v26);
  SafeRelease(cf);
  SafeRelease(v12);
  return v21;
}

CFIndex AMAuthInstallBasebandCopyFirmware(const void *a1, const void *a2, const void *a3)
{
  CFDictionaryRef v14 = 0;
  uint64_t v4 = AMAuthInstallBasebandCopyAllComponents(a1, a2, (CFTypeRef *)&v14);
  if (v4)
  {
    CFIndex v10 = v4;
    CFURLRef v12 = "AMAuthInstallBasebandCopyAllComponents failed";
LABEL_6:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyFirmware", (uint64_t)v12, v5, v6, v7, v8, v9, v13);
    goto LABEL_3;
  }
  CFIndex v10 = AMAuthInstallBasebandWriteFilesToBbfw(0, a3, v14);
  if (v10)
  {
    CFURLRef v12 = "AMAuthInstallBasebandWriteFilesToBbfw failed";
    goto LABEL_6;
  }
LABEL_3:
  SafeRelease(v14);
  return v10;
}

CFIndex AMAuthInstallBasebandWriteFilesToBbfw(int a1, CFTypeRef cf, const __CFDictionary *a3)
{
  context = 0;
  CFURLRef v12 = BbfwWriterCreate(cf);
  if (!v12) {
    return 4;
  }
  CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)_AddToArchive, &context);
  BbfwWriterFinalize((uint64_t)v12);
  if (!context) {
    return 0;
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandWriteFilesToBbfw", (uint64_t)"Error writing bbfw zip: %@", v4, v5, v6, v7, v8, (char)context);
  CFIndex Code = CFErrorGetCode(context);
  CFRelease(context);
  return Code;
}

uint64_t _AMAuthInstallBasebandCheckSnum(int a1, const __CFData *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = (char)a2;
  if (a1 > 1700064)
  {
    if (a1 <= 5898464)
    {
      if (a1 <= 2814176)
      {
        if (a1 == 1700065) {
          goto LABEL_32;
        }
        int v14 = 2089185;
        goto LABEL_31;
      }
      if (a1 == 2814177) {
        goto LABEL_32;
      }
      if (a1 == 4587745)
      {
        if (!AMAuthInstallBasebandJ2IsSnumValid(a2)) {
          goto LABEL_6;
        }
        return 0;
      }
      if (a1 != 5243105) {
        goto LABEL_41;
      }
      if (!AMAuthInstallBasebandJ2IsSnumValid(a2)) {
        goto LABEL_6;
      }
    }
    else
    {
      if (a1 > 8343776)
      {
        if (a1 == 8343777 || a1 == 9572577) {
          goto LABEL_32;
        }
        int v14 = 9781473;
        goto LABEL_31;
      }
      if (a1 == 5898465)
      {
        if (!AMAuthInstallBasebandJ2IsSnumValid(a2)) {
          goto LABEL_6;
        }
        return 0;
      }
      if (a1 != 7278817 && a1 != 7282913) {
        goto LABEL_41;
      }
      if (!AMAuthInstallBasebandJ2IsSnumValid(a2)) {
        goto LABEL_6;
      }
    }
    return 0;
  }
  if (a1 > 241888)
  {
    if (a1 > 938208)
    {
      if (a1 != 938209 && a1 != 1327329)
      {
        int v14 = 1515745;
        goto LABEL_31;
      }
LABEL_32:
      if (!AMAuthInstallBasebandJ2IsSnumValid(a2)) {
        goto LABEL_6;
      }
      return 0;
    }
    if (a1 == 241889) {
      goto LABEL_32;
    }
    int v14 = 520417;
LABEL_31:
    if (a1 != v14) {
      goto LABEL_41;
    }
    goto LABEL_32;
  }
  if ((a1 - 80) > 0x18) {
    goto LABEL_41;
  }
  if (((1 << (a1 - 80)) & 0x1A14000) == 0)
  {
    if (a1 == 80)
    {
      if (!AMAuthInstallBasebandICE3IsSnumValid(a2)) {
        goto LABEL_6;
      }
      return 0;
    }
LABEL_41:
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandCheckSnum", (uint64_t)"unrecognized chipid: 0x%08X", a4, a5, a6, a7, a8, a1);
    return 1;
  }
  if (AMAuthInstallBasebandICE3IsSnumValid(a2)) {
    return 0;
  }
LABEL_6:
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandCheckSnum", (uint64_t)"bad snum: %@", v9, v10, v11, v12, v13, v8);
  return 1;
}

void _AMAuthInstallBasebandParametersFinalize(CFTypeRef *a1)
{
  if (a1)
  {
    SafeRelease(a1[2]);
    SafeRelease(a1[3]);
    SafeRelease(a1[4]);
    SafeRelease(a1[5]);
    SafeRelease(a1[8]);
    SafeRelease(a1[9]);
    SafeRelease(a1[13]);
    SafeRelease(a1[14]);
    SafeRelease(a1[15]);
    SafeRelease(a1[16]);
    SafeRelease(a1[17]);
    SafeRelease(a1[18]);
    SafeRelease(a1[19]);
    SafeRelease(a1[21]);
    free(a1);
  }
}

uint64_t AMAuthInstallBasebandSetParametersWithUpdaterOutput(unint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v196[5] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    v189 = "missing amai";
LABEL_135:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)v189, a4, a5, a6, a7, a8, v191);
    uint64_t v11 = 0;
    goto LABEL_180;
  }
  if (!cf)
  {
    v189 = "missing output dict";
    goto LABEL_135;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != CFDictionaryGetTypeID())
  {
    v189 = "expected outputDict as a dictionary";
    goto LABEL_135;
  }
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"baseband updater output: %@", a4, a5, a6, a7, a8, (char)cf);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = calloc(1uLL, 0xB0uLL);
  if (!v12)
  {
    *(void *)(a1 + 48) = 0;
    uint64_t v54 = 2;
LABEL_181:
    _AMAuthInstallBasebandParametersFinalize(*(CFTypeRef **)(a1 + 48));
    *(void *)(a1 + 48) = 0;
    goto LABEL_131;
  }
  v12[9] = 0u;
  v12[10] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  *uint64_t v12 = 0u;
  *(void *)(a1 + 48) = v12;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ManifestInfo");
  if (!Value)
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"manifest dict not found", v14, v15, v16, v17, v18, v192);
    goto LABEL_34;
  }
  CFDictionaryRef v19 = Value;
  int v194 = 0;
  LODWORD(valuePtr) = 0;
  uint64_t v20 = CFDictionaryGetValue(Value, @"SKeyStatus");
  CFIndex v21 = CFDictionaryGetValue(v19, @"CKeyStatus");
  if (!*(void *)(a1 + 216))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"amai->bbKeyHashesOverrideDict is NULL", v22, v23, v24, v25, v26, v192);
    uint64_t v54 = 14;
    goto LABEL_181;
  }
  uint64_t v27 = v21;
  if (v20)
  {
    CFTypeID v28 = CFGetTypeID(v20);
    if (v28 != CFNumberGetTypeID())
    {
      v190 = "mistyped provisioningKeyStatusRef";
      goto LABEL_179;
    }
    if (!CFNumberGetValue((CFNumberRef)v20, kCFNumberSInt32Type, &valuePtr))
    {
      char v55 = "failed to convert provisioningKeyStatus";
      goto LABEL_167;
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"provisioning key status=%d", v34, v35, v36, v37, v38, valuePtr);
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"provisioning key status not found", v22, v23, v24, v25, v26, v192);
  }
  if (v27)
  {
    CFTypeID v44 = CFGetTypeID(v27);
    if (v44 != CFNumberGetTypeID())
    {
      v190 = "mistyped calibrationKeyStatusRef";
      goto LABEL_179;
    }
    if (!CFNumberGetValue((CFNumberRef)v27, kCFNumberSInt32Type, &v194))
    {
      char v55 = "failed to convert calibrationKeyStatus";
      goto LABEL_167;
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"calibration key status=%d", v34, v35, v36, v37, v38, v194);
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"calibration key status not found", v39, v40, v41, v42, v43, v192);
  }
  CFDataRef v45 = (const __CFData *)CFDictionaryGetValue(v19, @"SKeyHash");
  CFDataRef v51 = v45;
  if (v45)
  {
    CFTypeID v52 = CFGetTypeID(v45);
    if (v52 != CFDataGetTypeID())
    {
      v190 = "mistyped manifestProvisioningKeyHash";
      goto LABEL_179;
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"Provisioning Key Hash found, setting to %@", v29, v30, v31, v32, v33, (char)v51);
    uint64_t v53 = AMAuthInstallBasebandSetKeyHashRootManifest(a1, @"BbProvisioningManifestKeyHash", v51);
    if (v53)
    {
      uint64_t v54 = v53;
      char v55 = "failed to set provisioning key hash";
LABEL_168:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)v55, v34, v35, v36, v37, v38, v192);
      goto LABEL_181;
    }
  }
  else
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"manifestProvisioningKeyHash not found in ManifestInfo", v46, v47, v48, v49, v50, v192);
  }
  uint64_t v56 = CFDictionaryGetValue(v19, @"CKeyHash");
  if (v56)
  {
    char v62 = (char)v56;
    CFTypeID v63 = CFGetTypeID(v56);
    if (v63 != CFDataGetTypeID())
    {
      v190 = "mistyped manifestCalibrationKeyHash";
      goto LABEL_179;
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"Calibration Key Hash found, setting to %@", v29, v30, v31, v32, v33, v62);
    uint64_t v64 = AMAuthInstallBasebandSetKeyHashRootManifest(a1, @"BbCalibrationManifestKeyHash", v51);
    if (v64)
    {
      uint64_t v54 = v64;
      char v55 = "failed to set calibration key hash";
      goto LABEL_168;
    }
  }
  else
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"manifestCalibrationKeyHash not found in ManifestInfo", v57, v58, v59, v60, v61, v192);
  }
  uint64_t v65 = CFDictionaryGetValue(v19, @"ProvisioningManifestSupported");
  if (v65)
  {
    uint64_t v66 = v65;
    CFTypeID v67 = CFGetTypeID(v65);
    if (v67 != CFBooleanGetTypeID())
    {
      v190 = "mistyped requires manifest BOOLean";
      goto LABEL_179;
    }
    *(void *)(*(void *)(a1 + 48) + 80) = v66;
  }
  uint64_t v68 = CFDictionaryGetValue(v19, @"ProvisioningManifestExists");
  if (v68)
  {
    uint64_t v69 = v68;
    CFTypeID v70 = CFGetTypeID(v68);
    if (v70 != CFBooleanGetTypeID())
    {
      v190 = "mistyped has manifest BOOLean";
      goto LABEL_179;
    }
    *(void *)(*(void *)(a1 + 48) + 88) = v69;
  }
LABEL_34:
  CFNumberRef v71 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"VendorID");
  if (v71)
  {
    CFNumberRef v72 = v71;
    CFTypeID v73 = CFGetTypeID(v71);
    if (v73 != CFNumberGetTypeID())
    {
      v190 = "mistyped vendorid";
      goto LABEL_179;
    }
    if (AMAuthInstallSupportGetUInt32(v72, *(_DWORD **)(a1 + 48)))
    {
      char v55 = "failed to convert vendorid";
LABEL_167:
      uint64_t v54 = 3;
      goto LABEL_168;
    }
  }
  else
  {
    **(_DWORD **)(a1 + 48) = 2;
  }
  CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ChipID");
  if (v74)
  {
    CFNumberRef v75 = v74;
    CFTypeID v76 = CFGetTypeID(v74);
    if (v76 != CFNumberGetTypeID())
    {
      v190 = "mistyped chipid";
      goto LABEL_179;
    }
    if (AMAuthInstallSupportGetUInt32(v75, (_DWORD *)(*(void *)(a1 + 48) + 4)))
    {
      char v55 = "failed to convert chipid";
      goto LABEL_167;
    }
  }
  uint64_t v77 = CFDictionaryGetValue((CFDictionaryRef)cf, @"CertID");
  if (v77 || (uint64_t v77 = CFDictionaryGetValue((CFDictionaryRef)cf, @"GoldCertID")) != 0)
  {
    CFTypeID v78 = CFGetTypeID(v77);
    if (v78 != CFNumberGetTypeID())
    {
      v190 = "mistyped certid";
      goto LABEL_179;
    }
    uint64_t UInt32 = AMAuthInstallSupportGetUInt32((const __CFNumber *)v77, (_DWORD *)(*(void *)(a1 + 48) + 8));
    if (UInt32)
    {
      uint64_t v54 = UInt32;
      char v55 = "failed to convert certid";
      goto LABEL_168;
    }
  }
  CFNumberRef v80 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"FusingStatus");
  if (v80)
  {
    CFNumberRef v81 = v80;
    CFTypeID v82 = CFGetTypeID(v80);
    if (v82 != CFNumberGetTypeID())
    {
      v190 = "mistyped fusing status";
      goto LABEL_179;
    }
    if (AMAuthInstallSupportGetUInt32(v81, (_DWORD *)(*(void *)(a1 + 48) + 96)))
    {
      char v55 = "failed to convert fusing status";
      goto LABEL_167;
    }
  }
  uint64_t v83 = CFDictionaryGetValue((CFDictionaryRef)cf, @"ChipSerialNo");
  if (v83)
  {
    uint64_t v84 = v83;
    CFTypeID v85 = CFGetTypeID(v83);
    if (v85 != CFDataGetTypeID())
    {
      v190 = "mistyped snum";
      goto LABEL_179;
    }
    if (!_AMAuthInstallBasebandCheckSnum(*(_DWORD *)(*(void *)(a1 + 48) + 4), (const __CFData *)v84, v86, v29, v30, v31, v32, v33))
    {
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 16));
      *(void *)(*(void *)(a1 + 48) + 16) = SafeRetain(v84);
      if (!AMAuthInstallBasebandPersonalizationRequired(a1, v92, v93, v94, v95, v96, v97, v98))
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"This baseband is does not require personalization. Personalization disabled, continuing.", v99, v100, v101, v102, v103, v192);
        SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 16));
        *(void *)(*(void *)(a1 + 48) + 16) = 0;
      }
      goto LABEL_54;
    }
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"invalid snum: %@", v87, v88, v89, v90, v91, (char)v84);
LABEL_180:
    uint64_t v54 = 1;
    goto LABEL_181;
  }
LABEL_54:
  uint64_t v104 = CFDictionaryGetValue((CFDictionaryRef)cf, @"ProvisioningManifest");
  if (v104)
  {
    char v105 = v104;
    CFTypeID v106 = CFGetTypeID(v104);
    if (v106 != CFDataGetTypeID())
    {
      v190 = "mistyped provisioningManifest";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 112));
    *(void *)(*(void *)(a1 + 48) + 112) = CFRetain(v105);
  }
  CFDataRef v107 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Nonce");
  if (v107)
  {
    CFDataRef v108 = v107;
    CFTypeID v109 = CFGetTypeID(v107);
    if (v109 != CFDataGetTypeID())
    {
      v190 = "mistyped nonce";
      goto LABEL_179;
    }
    if (!CFDataGetLength(v108))
    {
      v190 = "zero length nonce received";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 24));
    *(void *)(*(void *)(a1 + 48) + 24) = CFRetain(v108);
  }
  CFDictionaryRef v110 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"provisioning");
  if (v110)
  {
    CFDictionaryRef v111 = v110;
    uint64_t v112 = CFDictionaryGetValue(v110, @"MEID");
    if (v112)
    {
      uint64_t v113 = v112;
      CFTypeID v114 = CFGetTypeID(v112);
      if (v114 != CFStringGetTypeID())
      {
        v190 = "mistyped meid";
        goto LABEL_179;
      }
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 32));
      *(void *)(*(void *)(a1 + 48) + 32) = CFRetain(v113);
    }
    uint64_t v115 = CFDictionaryGetValue(v111, @"IMEI");
    if (v115)
    {
      CFDataRef v116 = v115;
      CFTypeID v117 = CFGetTypeID(v115);
      if (v117 != CFStringGetTypeID())
      {
        v190 = "mistyped imei";
        goto LABEL_179;
      }
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 40));
      *(void *)(*(void *)(a1 + 48) + 40) = CFRetain(v116);
    }
    CFTypeID v118 = CFDictionaryGetValue(v111, @"IMEI2");
    if (v118)
    {
      uint64_t v119 = v118;
      CFTypeID v120 = CFGetTypeID(v118);
      if (v120 != CFStringGetTypeID())
      {
        v190 = "mistyped imei2";
        goto LABEL_179;
      }
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 48));
      *(void *)(*(void *)(a1 + 48) + 48) = CFRetain(v119);
    }
    uint64_t v121 = CFDictionaryGetValue(v111, @"EID");
    if (v121)
    {
      uint64_t v122 = v121;
      CFTypeID v123 = CFGetTypeID(v121);
      if (v123 != CFStringGetTypeID())
      {
        v190 = "mistyped eid";
        goto LABEL_179;
      }
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 56));
      *(void *)(*(void *)(a1 + 48) + 56) = CFRetain(v122);
    }
    CFDataRef v124 = CFDictionaryGetValue(v111, @"EncryptedSessionKey");
    if (v124)
    {
      CFDataRef v125 = v124;
      CFTypeID v126 = CFGetTypeID(v124);
      if (v126 != CFDataGetTypeID())
      {
        v190 = "mistyped encrypted session key";
        goto LABEL_179;
      }
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 72));
      *(void *)(*(void *)(a1 + 48) + 72) = CFRetain(v125);
    }
    uint64_t v127 = CFDictionaryGetValue(v111, @"CarrierID");
    if (v127)
    {
      uint64_t v128 = v127;
      CFTypeID v129 = CFGetTypeID(v127);
      if (v129 != CFStringGetTypeID())
      {
        v190 = "mistyped carrierID";
        goto LABEL_179;
      }
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 104));
      *(void *)(*(void *)(a1 + 48) + 104) = CFRetain(v128);
    }
  }
  CFDataRef v130 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"EUICCCSN");
  if (v130)
  {
    CFDataRef v131 = v130;
    CFTypeID v132 = CFGetTypeID(v130);
    if (v132 != CFDataGetTypeID())
    {
      v190 = "mistyped CSN";
      goto LABEL_179;
    }
    if (!CFDataGetLength(v131))
    {
      v190 = "zero length CSN received";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 120));
    *(void *)(*(void *)(a1 + 48) + 120) = CFRetain(v131);
  }
  CFDataRef v133 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"EUICCMainNonce");
  if (v133)
  {
    CFDataRef v134 = v133;
    CFTypeID v135 = CFGetTypeID(v133);
    if (v135 != CFDataGetTypeID())
    {
      v190 = "mistyped euicc main nonce";
      goto LABEL_179;
    }
    if (!CFDataGetLength(v134))
    {
      v190 = "zero length euicc main nonce";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 128));
    *(void *)(*(void *)(a1 + 48) + 128) = CFRetain(v134);
  }
  CFDataRef v136 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"EUICCGoldNonce");
  if (v136)
  {
    CFDataRef v137 = v136;
    CFTypeID v138 = CFGetTypeID(v136);
    if (v138 != CFDataGetTypeID())
    {
      v190 = "mistyped gold nonce";
      goto LABEL_179;
    }
    if (!CFDataGetLength(v137))
    {
      v190 = "zero length gold nonce";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 136));
    *(void *)(*(void *)(a1 + 48) + 136) = CFRetain(v137);
  }
  uint64_t v139 = CFDictionaryGetValue((CFDictionaryRef)cf, @"EUICCTicketVersion");
  if (v139)
  {
    uint64_t v140 = v139;
    CFTypeID v141 = CFGetTypeID(v139);
    if (v141 != CFNumberGetTypeID())
    {
      v190 = "mistyped ticketVersion";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 144));
    *(void *)(*(void *)(a1 + 48) + 144) = CFRetain(v140);
  }
  uint64_t v142 = CFDictionaryGetValue((CFDictionaryRef)cf, @"EUICCChipID");
  if (v142)
  {
    CFAllocatorRef v143 = v142;
    CFTypeID v144 = CFGetTypeID(v142);
    if (v144 != CFNumberGetTypeID())
    {
      v190 = "mistyped euiccChipID";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 160));
    *(void *)(*(void *)(a1 + 48) + 160) = CFRetain(v143);
  }
  CFDataRef v145 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"EUICCCertIdentifier");
  if (v145)
  {
    CFDataRef v146 = v145;
    CFTypeID v147 = CFGetTypeID(v145);
    if (v147 != CFDataGetTypeID())
    {
      v190 = "mistyped cert identifier";
      goto LABEL_179;
    }
    if (!CFDataGetLength(v146))
    {
      v190 = "zero length cert identifier";
      goto LABEL_179;
    }
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 152));
    *(void *)(*(void *)(a1 + 48) + 152) = CFRetain(v146);
  }
  uint64_t v148 = CFDictionaryGetValue((CFDictionaryRef)cf, @"EUICCFirmwareLoaderVersion");
  if (v148)
  {
    uint64_t v154 = v148;
    CFTypeID v155 = CFGetTypeID(v148);
    if (v155 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)v154) == 3)
      {
        SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 168));
        CFTypeRef v156 = CFRetain(v154);
        uint64_t v157 = *(void *)(a1 + 48);
        *(void *)(v157 + 168) = v156;
        goto LABEL_107;
      }
      v190 = "invalid length fw loader version";
    }
    else
    {
      v190 = "mistyped fw loader version";
    }
    goto LABEL_179;
  }
  uint64_t v157 = *(void *)(a1 + 48);
  if (!v157)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"missing amai->bbParameters", v149, v150, v151, v152, v153, v192);
    v190 = "failed to to check amai->bbParameters for differences";
LABEL_179:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)v190, v29, v30, v31, v32, v33, v192);
    goto LABEL_180;
  }
LABEL_107:
  if (v11)
  {
    if (*(_DWORD *)v11 == *(_DWORD *)v157)
    {
      int v158 = 0;
    }
    else
    {
      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"vendorID changed", v149, v150, v151, v152, v153, v192);
      uint64_t v157 = *(void *)(a1 + 48);
      int v158 = 1;
    }
    if (*(_DWORD *)(v11 + 4) != *(_DWORD *)(v157 + 4))
    {
      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"chipID changed", v149, v150, v151, v152, v153, v192);
      uint64_t v157 = *(void *)(a1 + 48);
      int v158 = 1;
    }
    if (*(_DWORD *)(v11 + 8) != *(_DWORD *)(v157 + 8))
    {
      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"goldCertID changed", v149, v150, v151, v152, v153, v192);
      uint64_t v157 = *(void *)(a1 + 48);
      int v158 = 1;
    }
    if (AMAuthInstallSupportCFDataCompare(*(CFDataRef *)(v11 + 16), *(const __CFData **)(v157 + 16)))
    {
      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"snum changed", v159, v160, v161, v162, v163, v192);
      int v158 = 1;
    }
    if (AMAuthInstallSupportCFDataCompare(*(CFDataRef *)(v11 + 24), *(const __CFData **)(*(void *)(a1 + 48) + 24)))
    {
      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"nonce changed", v164, v165, v166, v167, v168, v192);
      int v158 = 1;
    }
    uint64_t v169 = 0;
    v170 = *(void **)(a1 + 48);
    uint64_t v171 = *(void *)(v11 + 128);
    uint64_t v172 = v170[15];
    uint64_t v173 = v170[16];
    uint64_t valuePtr = *(void *)(v11 + 120);
    v196[0] = v172;
    v196[1] = v171;
    v196[2] = v173;
    uint64_t v174 = v170[19];
    v196[3] = *(void *)(v11 + 152);
    v196[4] = v174;
LABEL_121:
    v175 = (const __CFData **)&v196[2 * v169];
    do
    {
      uint64_t v181 = v169 + 1;
      if (AMAuthInstallSupportCFDataCompare(*(v175 - 1), *v175))
      {
        AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"eUICC Param %d changed", v176, v177, v178, v179, v180, v169);
        int v158 = 1;
        if (v169++ != 2) {
          goto LABEL_121;
        }
        goto LABEL_129;
      }
      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"eUICC Param %d unchanged", v176, v177, v178, v179, v180, v169);
      v175 += 2;
      ++v169;
    }
    while (v181 != 3);
    if (!v158) {
      goto LABEL_130;
    }
LABEL_129:
    AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBasebandSetParametersWithUpdaterOutput", (uint64_t)"bbParameters changed, triggering bbfw re-personalization", v182, v183, v184, v185, v186, v193);
    uint64_t v54 = 0;
    *(unsigned char *)(a1 + 224) = 1;
  }
  else
  {
    AMAuthInstallLog(5, (uint64_t)"_AMAuthInstallBasebandCheckForParameterChange", (uint64_t)"bbParameters is now non-NULL", v149, v150, v151, v152, v153, v192);
LABEL_130:
    uint64_t v54 = 0;
  }
LABEL_131:
  _AMAuthInstallBasebandParametersFinalize((CFTypeRef *)v11);
  return v54;
}

uint64_t AMAuthInstallBasebandSetKeyHashRootManifest(uint64_t a1, const void *a2, CFDataRef theData)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (theData && a2 && *(void *)(a1 + 208))
  {
    if (CFDataGetLength(theData) == 20 || CFDataGetLength(theData) == 32 || CFDataGetLength(theData) == 48)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 208), a2, theData);
      return 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetKeyHashRootManifest", (uint64_t)"Invalid hash length", v7, v8, v9, v10, v11, v12);
      return 99;
    }
  }
  return result;
}

unint64_t AMAuthInstallBasebandPersonalizationRequired(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = *(void *)(result + 48);
    if (v8)
    {
      unsigned int v9 = *(_DWORD *)(v8 + 96);
      BOOL v10 = v9 > 3 || v9 == 1;
      return !v10 && *(void *)(v8 + 16) || *(void *)(result + 168) || *(void *)(result + 176) != 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandPersonalizationRequired", (uint64_t)"failed to get fusing status", a4, a5, a6, a7, a8, vars0);
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallBasebandHandleUpdaterStatus(uint64_t a1, int a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 1;
  }
  if (a2) {
    uint64_t v11 = "YES";
  }
  else {
    uint64_t v11 = "NO";
  }
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"commandAccepted: %s", a4, a5, a6, a7, a8, (char)v11);
  if (!a3)
  {
    uint64_t v77 = 1;
    uint64_t v98 = "outputDict is NULL";
LABEL_85:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)v98, v12, v13, v14, v15, v16, v100);
    return v77;
  }
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"outputDict: %@", v12, v13, v14, v15, v16, (char)a3);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, @"provisioning");
  if (!Value) {
    goto LABEL_23;
  }
  if (!*(void *)(a1 + 48))
  {
    uint64_t v77 = 1;
    uint64_t v98 = "amai->bbParameters is NULL";
    goto LABEL_85;
  }
  CFDictionaryRef v18 = Value;
  CFDictionaryRef v19 = CFDictionaryGetValue(Value, @"MEID");
  if (!v19) {
    goto LABEL_11;
  }
  uint64_t v20 = v19;
  CFTypeID v21 = CFGetTypeID(v19);
  if (v21 != CFStringGetTypeID())
  {
    uint64_t v77 = 1;
    uint64_t v98 = "mistyped meid";
    goto LABEL_85;
  }
  SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 32));
  *(void *)(*(void *)(a1 + 48) + 32) = CFRetain(v20);
LABEL_11:
  uint64_t v22 = CFDictionaryGetValue(v18, @"IMEI");
  if (!v22) {
    goto LABEL_14;
  }
  uint64_t v23 = v22;
  CFTypeID v24 = CFGetTypeID(v22);
  if (v24 != CFStringGetTypeID())
  {
    uint64_t v77 = 1;
    uint64_t v98 = "mistyped imei";
    goto LABEL_85;
  }
  SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 40));
  *(void *)(*(void *)(a1 + 48) + 40) = CFRetain(v23);
LABEL_14:
  uint64_t v25 = CFDictionaryGetValue(v18, @"IMEI2");
  if (!v25) {
    goto LABEL_17;
  }
  uint64_t v26 = v25;
  CFTypeID v27 = CFGetTypeID(v25);
  if (v27 != CFStringGetTypeID())
  {
    uint64_t v77 = 1;
    uint64_t v98 = "mistyped imei2";
    goto LABEL_85;
  }
  SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 48));
  *(void *)(*(void *)(a1 + 48) + 48) = CFRetain(v26);
LABEL_17:
  CFTypeID v28 = CFDictionaryGetValue(v18, @"EID");
  if (!v28) {
    goto LABEL_20;
  }
  uint64_t v29 = v28;
  CFTypeID v30 = CFGetTypeID(v28);
  if (v30 != CFStringGetTypeID())
  {
    uint64_t v77 = 1;
    uint64_t v98 = "mistyped eid";
    goto LABEL_85;
  }
  SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 56));
  *(void *)(*(void *)(a1 + 48) + 56) = CFRetain(v29);
LABEL_20:
  uint64_t v31 = CFDictionaryGetValue(v18, @"ICCID");
  if (v31)
  {
    uint64_t v32 = v31;
    CFTypeID v33 = CFGetTypeID(v31);
    if (v33 == CFStringGetTypeID())
    {
      SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 48) + 64));
      *(void *)(*(void *)(a1 + 48) + 64) = CFRetain(v32);
      goto LABEL_23;
    }
    uint64_t v77 = 1;
    uint64_t v98 = "mistyped iccid";
    goto LABEL_85;
  }
LABEL_23:
  uint64_t v34 = 0;
  switch(*(_DWORD *)(a1 + 304))
  {
    case 1:
      CFBooleanRef v55 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"done");
      if (!v55 || CFBooleanGetValue(v55) != 1)
      {
        uint64_t v34 = 0;
        goto LABEL_37;
      }
      if (!*(unsigned char *)(a1 + 328))
      {
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"Provisioning never started by BBUpdater, skipping for BB", v12, v13, v14, v15, v16, v100);
        goto LABEL_34;
      }
      uint64_t v77 = 19;
      uint64_t v98 = "Attempt to force provision baseband failed";
      goto LABEL_85;
    case 2:
      uint64_t v34 = 0;
      int v56 = 3;
      goto LABEL_36;
    case 4:
    case 5:
      int valuePtr = 103;
      CFDictionaryRef v35 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"provisioning");
      if (!v35)
      {
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandCheckProvisioningStatus", (uint64_t)"provisioningDict is NULL", v36, v37, v38, v39, v40, v100);
        goto LABEL_29;
      }
      CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v35, @"Status");
      if (v41)
      {
        CFNumberRef v47 = v41;
        CFTypeID v48 = CFGetTypeID(v41);
        if (v48 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue(v47, kCFNumberSInt32Type, &valuePtr)) {
            goto LABEL_28;
          }
          uint64_t v99 = "failed to convert statusNum";
        }
        else
        {
          uint64_t v99 = "mistyped statusNum";
        }
      }
      else
      {
        uint64_t v99 = "statusNum is NULL";
      }
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandCheckProvisioningStatus", (uint64_t)v99, v42, v43, v44, v45, v46, v100);
LABEL_28:
      if (valuePtr)
      {
LABEL_29:
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandCheckProvisioningStatus", (uint64_t)"Baseband provisioning failed. Informing server.", v42, v43, v44, v45, v46, v100);
        AMAuthInstallProvisioningSendAck(a1, 103, v49, v50, v51, v52, v53, v54);
        *(_DWORD *)(a1 + 304) = 8;
        CFRelease(*(CFTypeRef *)(a1 + 312));
        *(void *)(a1 + 312) = 0;
        uint64_t v34 = 19;
        goto LABEL_37;
      }
LABEL_34:
      uint64_t v34 = 0;
      int v56 = 7;
LABEL_36:
      *(_DWORD *)(a1 + 304) = v56;
LABEL_37:
      if (!*(void *)(a1 + 176)) {
        goto LABEL_55;
      }
      CFBooleanRef v57 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"attemptedToFuse");
      CFBooleanRef v58 = v57;
      if (v57)
      {
        CFTypeID v59 = CFGetTypeID(v57);
        if (v59 == CFBooleanGetTypeID()) {
          LODWORD(v58) = CFBooleanGetValue(v58);
        }
        else {
          LODWORD(v58) = 0;
        }
      }
      CFBooleanRef v60 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"fuseAttemptSucceeded");
      if (!v60) {
        goto LABEL_45;
      }
      CFBooleanRef v66 = v60;
      CFTypeID v67 = CFGetTypeID(v60);
      if (v67 == CFBooleanGetTypeID())
      {
        LODWORD(v60) = CFBooleanGetValue(v66);
LABEL_45:
        if (a2) {
          goto LABEL_46;
        }
LABEL_52:
        if (v58)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"fusing attempt failed; will consume program",
            v61,
            v62,
            v63,
            v64,
            v65,
            v100);
          int v76 = 1;
          uint64_t v77 = 18;
        }
        else
        {
          AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"unrelated failure; will reclaim fusing program",
            v61,
            v62,
            v63,
            v64,
            v65,
            v100);
          uint64_t v77 = 0;
          int v76 = 0;
        }
        goto LABEL_61;
      }
      LODWORD(v60) = 0;
      if (!a2) {
        goto LABEL_52;
      }
LABEL_46:
      if (!v58)
      {
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"unrelated stage; will hold fusing program",
          v61,
          v62,
          v63,
          v64,
          v65,
          v100);
LABEL_55:
        uint64_t v77 = 0;
        goto LABEL_72;
      }
      if (v60)
      {
        uint64_t v68 = *(void *)(a1 + 48);
        if (!v68)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"amai->bbParameters is NULL", v61, v62, v63, v64, v65, v100);
          uint64_t v77 = 1;
          goto LABEL_72;
        }
        if (*(void *)(v68 + 16))
        {
          CFAllocatorRef v69 = CFGetAllocator((CFTypeRef)a1);
          CFTypeID v70 = _CopyHexStringFromData(v69, *(CFDataRef *)(*(void *)(a1 + 48) + 16));
          AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"fusing attempt succeeded (snum=%@); will consume program",
            v71,
            v72,
            v73,
            v74,
            v75,
            (char)v70);
          SafeRelease(v70);
        }
        else
        {
          AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"fusing attempt succeeded; will consume program",
            v61,
            v62,
            v63,
            v64,
            v65,
            v100);
        }
        uint64_t v77 = 0;
        int v76 = 1;
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"unrecognized state; will consume program (commandAccepted=%s, attemptedToFuse=%s, fuseAttemptSucceeded=%s)",
          v61,
          v62,
          v63,
          v64,
          v65,
          (char)"YES");
        int v76 = 1;
        uint64_t v77 = 14;
      }
LABEL_61:
      if (*(unsigned char *)(a1 + 185))
      {
LABEL_71:
        *(void *)(a1 + 176) = 0;
        *(unsigned char *)(a1 + 184) = 1;
        goto LABEL_72;
      }
      int v78 = *(_DWORD *)(*(void *)(a1 + 48) + 4);
      if (v78 > 1700064)
      {
        if (v78 == 1700065 || v78 == 2089185) {
          goto LABEL_70;
        }
        int v79 = 2814177;
      }
      else
      {
        if (v78 == 938209 || v78 == 1327329) {
          goto LABEL_70;
        }
        int v79 = 1515745;
      }
      if (v78 == v79)
      {
LABEL_70:
        CFRelease(*(CFTypeRef *)(a1 + 176));
        goto LABEL_71;
      }
      CFAllocatorRef v81 = CFGetAllocator((CFTypeRef)a1);
      int v82 = AMAuthInstallFusingProgramAck(v81, *(const __CFURL **)(a1 + 160), *(const void **)(a1 + 176), v76);
      CFRelease(*(CFTypeRef *)(a1 + 176));
      *(void *)(a1 + 176) = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v82)
      {
        AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"*******************************************************", v83, v84, v85, v86, v87, v101);
        AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"*   failed to ack fusing program; continuing anyway   *",
          v88,
          v89,
          v90,
          v91,
          v92,
          v102);
        AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBasebandHandleUpdaterStatus", (uint64_t)"*******************************************************", v93, v94, v95, v96, v97, v103);
      }
LABEL_72:
      if (!v34) {
        return v77;
      }
      return v34;
    case 6:
      goto LABEL_34;
    default:
      goto LABEL_37;
  }
}

uint64_t AMAuthInstallBasebandSetFusings(uint64_t a1, int a2, int a3, CFTypeRef cf, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v25 = "missing amai";
LABEL_40:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetFusings", (uint64_t)v25, (uint64_t)cf, a5, a6, a7, a8, v26);
    return 1;
  }
  if (!cf)
  {
    uint64_t v25 = "missing snum";
    goto LABEL_40;
  }
  CFTypeID v12 = CFGetTypeID(cf);
  if (v12 != CFDataGetTypeID())
  {
    uint64_t v25 = "snum is not CFData";
    goto LABEL_40;
  }
  if (_AMAuthInstallBasebandCheckSnum(a2, (const __CFData *)cf, v13, (uint64_t)cf, a5, a6, a7, a8)) {
    return 1;
  }
  _AMAuthInstallBasebandParametersFinalize(*(CFTypeRef **)(a1 + 48));
  uint64_t v14 = calloc(1uLL, 0xB0uLL);
  if (v14)
  {
    v14[9] = 0u;
    v14[10] = 0u;
    v14[7] = 0u;
    v14[8] = 0u;
    v14[5] = 0u;
    v14[6] = 0u;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[1] = 0u;
    int v14[2] = 0u;
    *uint64_t v14 = 0u;
    *(void *)(a1 + 48) = v14;
    if (a2 > 1700064)
    {
      if (a2 <= 5898464)
      {
        if (a2 <= 2814176)
        {
          if (a2 == 1700065) {
            goto LABEL_32;
          }
          int v21 = 2089185;
        }
        else
        {
          if (a2 == 2814177 || a2 == 4587745) {
            goto LABEL_32;
          }
          int v21 = 5243105;
        }
      }
      else
      {
        if (a2 <= 8343776)
        {
          if (a2 != 5898465 && a2 != 7278817)
          {
            int v21 = 7282913;
            goto LABEL_31;
          }
          goto LABEL_32;
        }
        if (a2 == 8343777 || a2 == 9572577) {
          goto LABEL_32;
        }
        int v21 = 9781473;
      }
    }
    else
    {
      if (a2 <= 241888)
      {
        if ((a2 - 80) > 0x18 || ((1 << (a2 - 80)) & 0x1A14000) == 0 && a2 != 80) {
          goto LABEL_36;
        }
        int v20 = 2;
LABEL_33:
        *(_DWORD *)uint64_t v14 = v20;
LABEL_34:
        *((_DWORD *)v14 + 1) = a2;
        *((_DWORD *)v14 + 2) = a3;
        CFTypeRef v22 = CFRetain(cf);
        uint64_t result = 0;
        CFTypeID v24 = *(void **)(a1 + 48);
        void v24[2] = v22;
        v24[4] = 0;
        v24[5] = 0;
        v24[9] = 0;
        v24[10] = 0;
        v24[8] = 0;
        v24[13] = 0;
        v24[14] = 0;
        return result;
      }
      if (a2 > 938208)
      {
        if (a2 != 938209 && a2 != 1327329)
        {
          int v21 = 1515745;
          goto LABEL_31;
        }
LABEL_32:
        int v20 = 3;
        goto LABEL_33;
      }
      if (a2 == 241889) {
        goto LABEL_32;
      }
      int v21 = 520417;
    }
LABEL_31:
    if (a2 != v21)
    {
LABEL_36:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetFusings", (uint64_t)"chipID: 0x%x is not supported", v15, v16, v17, v18, v19, a2);
      uint64_t v14 = *(_OWORD **)(a1 + 48);
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  *(void *)(a1 + 48) = 0;
  return 2;
}

uint64_t AMAuthInstallBasebandGetKeyHash(uint64_t a1, const void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a3)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 200), a2);
      uint64_t result = 0;
      *a3 = Value;
      return result;
    }
    uint64_t v11 = "outKeyHash is NULL";
  }
  else
  {
    uint64_t v11 = "amai is NULL";
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandGetKeyHash", (uint64_t)v11, a4, a5, a6, a7, a8, v12);
  return 1;
}

uint64_t AMAuthInstallBasebandSetSkeyID(uint64_t a1, CFDataRef theData)
{
  return AMAuthInstallBasebandSetKeyHash(a1, @"BbProvisioningManifestKeyHash", theData);
}

uint64_t AMAuthInstallBasebandSetKeyHash(uint64_t a1, const void *a2, CFDataRef theData)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (theData && a2 && *(void *)(a1 + 216))
  {
    if (CFDataGetLength(theData) == 20
      || CFDataGetLength(theData) == 32
      || CFDataGetLength(theData) == 48
      || !CFDataGetLength(theData))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 216), a2, theData);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 200), a2, theData);
      return 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetKeyHash", (uint64_t)"Invalid hash length", v7, v8, v9, v10, v11, v12);
      return 99;
    }
  }
  return result;
}

uint64_t AMAuthInstallBasebandSetNonce(uint64_t a1, const __CFData *cf)
{
  if (!a1) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    return 1;
  }
  if (cf)
  {
    if (CFDataGetLength(cf) > 20) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 48);
  }
  uint64_t v6 = *(const void **)(v3 + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(a1 + 48) + 24) = 0;
  }
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFDataGetTypeID())
    {
      if (CFDataGetLength(cf))
      {
        CFTypeRef v13 = CFRetain(cf);
        uint64_t result = 0;
        *(void *)(*(void *)(a1 + 48) + 24) = v13;
        return result;
      }
      uint64_t v14 = "zero length nonce received";
    }
    else
    {
      uint64_t v14 = "mistyped nonce";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetNonce", (uint64_t)v14, v8, v9, v10, v11, v12, v15);
    return 1;
  }
  return 0;
}

__CFString *AMAuthInstallBasebandCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 256);
  CFStringAppend(Mutable, @"(");
  if (*(unsigned char *)(a1 + 58)) {
    uint64_t v4 = "YES";
  }
  else {
    uint64_t v4 = "NO";
  }
  CFStringAppendFormat(Mutable, 0, @"personalize=%s", v4);
  if (*(void *)(a1 + 48))
  {
    CFStringAppendFormat(Mutable, 0, @", ");
    if (*(void *)(*(void *)(a1 + 48) + 16))
    {
      CFAllocatorRef v5 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v6 = _CopyHexStringFromData(v5, *(CFDataRef *)(*(void *)(a1 + 48) + 16));
      if (v6)
      {
        CFTypeID v7 = v6;
        CFStringAppendFormat(Mutable, 0, @"snum=0x%@, ", v6);
        CFRelease(v7);
      }
    }
    CFStringAppendFormat(Mutable, 0, @"chipid=0x%x, certid=0x%x", *(unsigned int *)(*(void *)(a1 + 48) + 4), *(unsigned int *)(*(void *)(a1 + 48) + 8));
    if (*(void *)(*(void *)(a1 + 48) + 24))
    {
      CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v9 = _CopyHexStringFromData(v8, *(CFDataRef *)(*(void *)(a1 + 48) + 24));
      if (v9)
      {
        uint64_t v10 = v9;
        CFStringAppendFormat(Mutable, 0, @", nonce=0x%@", v9);
        CFRelease(v10);
      }
    }
  }
  CFStringAppend(Mutable, @""));
  return Mutable;
}

void _AddToArchive(CFStringRef theString, const __CFData *a2, CFErrorRef *a3)
{
  if (!*a3)
  {
    uint64_t v5 = BbfwWriterAddFile((uint64_t)a3[1], theString, a2);
    if (v5)
    {
      uint64_t v6 = v5;
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        uint64_t v9 = Mutable;
        CFStringRef v10 = CFStringCreateWithFormat(v7, 0, @"BbfwWriterAddFile failed to add file: %@. Error code: %d", theString, v6);
        if (v10)
        {
          CFStringRef v11 = v10;
          CFDictionarySetValue(v9, (const void *)*MEMORY[0x263EFFC48], v10);
          CFRelease(v11);
        }
        *a3 = CFErrorCreate(v7, @"AuthInstallErrorDomain", v6, v9);
        AMAuthInstallLog(3, (uint64_t)"_AddToArchive", (uint64_t)"failed to archive \"%@\"", v12, v13, v14, v15, v16, (char)theString);
        CFRelease(v9);
      }
      else
      {
        *a3 = CFErrorCreate(v7, @"AuthInstallErrorDomain", v6, 0);
        AMAuthInstallLog(3, (uint64_t)"_AddToArchive", (uint64_t)"failed to archive \"%@\"", v17, v18, v19, v20, v21, (char)theString);
      }
    }
  }
}

uint64_t AMAuthInstallBasebandPersonalizeFirmwareInternal(void *a1, void *a2, const void *a3, const void *a4, __CFDictionary *a5, const __CFDictionary *a6, const __CFDictionary *a7)
{
  CFDictionaryRef v12 = 0;
  if (a1)
  {
    CFDictionaryRef v8 = 0;
    uint64_t v9 = 1;
    if (a4 && a2 && a1[6])
    {
      uint64_t v10 = AMAuthInstallBasebandCopyAllPersonalizedComponents(a1, a2, a3, a5, a6, a7, (CFTypeRef *)&v12);
      CFDictionaryRef v8 = v12;
      if (!v10) {
        uint64_t v10 = AMAuthInstallBasebandWriteFilesToBbfw(0, a4, v12);
      }
      uint64_t v9 = v10;
    }
  }
  else
  {
    CFDictionaryRef v8 = 0;
    uint64_t v9 = 1;
  }
  SafeRelease(v8);
  SafeRelease(0);
  return v9;
}

uint64_t AMAuthInstallBasebandPersonalizeFirmwareWithVinyl(void *a1, void *a2, const void *a3, const void *a4)
{
  return AMAuthInstallBasebandPersonalizeFirmwareInternal(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t AMAuthInstallBasebandPersonalizeFirmware(void *a1, void *a2, const void *a3)
{
  return AMAuthInstallBasebandPersonalizeFirmwareInternal(a1, a2, 0, a3, 0, 0, 0);
}

uint64_t AMAuthInstallBasebandReadChipIDFromBbfw(const void *a1, _DWORD *a2)
{
  CFDataRef data = 0;
  int v25 = 0;
  CFErrorRef error = 0;
  if (!a1)
  {
    uint64_t v9 = 0;
    CFDictionaryRef v17 = 0;
    uint64_t v20 = 1;
    goto LABEL_9;
  }
  uint64_t v3 = BbfwReaderOpen(a1);
  uint64_t v9 = (uint64_t)v3;
  if (!v3)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandReadChipIDFromBbfw", (uint64_t)"failed to open bbfw archive for reading", v4, v5, v6, v7, v8, (char)v23);
    CFDictionaryRef v17 = 0;
    uint64_t v20 = 4;
    goto LABEL_9;
  }
  uint64_t v10 = BbfwReaderFindAndCopyFileData((uint64_t)v3, @"Info.plist", (CFTypeRef *)&data);
  if (v10)
  {
    uint64_t v20 = v10;
    CFDictionaryRef v17 = 0;
    goto LABEL_9;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x263EFFB08], data, 0, 0, &error);
  CFDictionaryRef v17 = v11;
  if (!v11)
  {
    uint64_t v23 = @"Info.plist";
    CFTypeRef v22 = "failed to parse %@: %@";
LABEL_17:
    uint64_t v20 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandReadChipIDFromBbfw", (uint64_t)v22, v12, v13, v14, v15, v16, (char)v23);
    goto LABEL_9;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v11, @"com.apple.EmbeddedSoftwareRestore.Baseband.ChipId");
  if (!Value)
  {
    uint64_t v23 = @"Info.plist";
    CFTypeRef v22 = "failed to find ChipId in %@";
    goto LABEL_17;
  }
  char v19 = (char)Value;
  if (!_CFStringToUInt32(Value, &v25))
  {
    LOBYTE(v23) = v19;
    CFTypeRef v22 = "failed to convert ChipId(%@) to int";
    goto LABEL_17;
  }
  if (!v25)
  {
    CFTypeRef v22 = "ChipId is 0 (invalid)";
    goto LABEL_17;
  }
  uint64_t v20 = 0;
  *a2 = v25;
LABEL_9:
  BbfwReaderClose(v9);
  SafeRelease(data);
  SafeRelease(v17);
  SafeRelease(error);
  return v20;
}

uint64_t AMAuthInstallBasebandReadVersionFromBbfw(CFDataRef data, const void *a2, CFTypeRef *a3)
{
  CFDictionaryRef v3 = 0;
  int valuePtr = 0;
  CFErrorRef error = 0;
  uint64_t v4 = 1;
  if (!data || !a2)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
  if (a3)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef v9 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x263EFFB08], data, 0, 0, &error);
    CFDictionaryRef v3 = v9;
    if (v9)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v9, a2);
      uint64_t v7 = Value;
      if (!Value)
      {
        uint64_t v4 = 3;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandReadVersionFromBbfw", (uint64_t)"failed to find VersionStr in %@", v16, v17, v18, v19, v20, (char)@"Info.plist");
        goto LABEL_10;
      }
      if (_CFStringToUInt32(Value, &valuePtr))
      {
        if (valuePtr)
        {
          CFNumberRef v21 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
          uint64_t v7 = v21;
          if (v21)
          {
            uint64_t v4 = 0;
            *a3 = CFRetain(v21);
          }
          else
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandReadVersionFromBbfw", (uint64_t)"Failed to create versionNumber", v22, v23, v24, v25, v26, (char)v29);
            uint64_t v4 = 2;
          }
          goto LABEL_10;
        }
        CFTypeID v28 = "Version is 0 (invalid)";
      }
      else
      {
        LOBYTE(v29) = (_BYTE)v7;
        CFTypeID v28 = "failed to convert VersionStr(%@) to int";
      }
    }
    else
    {
      uint64_t v29 = @"Info.plist";
      CFTypeID v28 = "failed to parse %@: %@";
    }
    uint64_t v4 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandReadVersionFromBbfw", (uint64_t)v28, v10, v11, v12, v13, v14, (char)v29);
    uint64_t v7 = 0;
  }
LABEL_10:
  SafeRelease(v7);
  SafeRelease(v3);
  SafeRelease(error);
  return v4;
}

uint64_t AMAuthInstallBasebandLocalSetSigningParameters(void *cf, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  if (cf)
  {
    if (a2 && a3 && a4 || (uint64_t v12 = 1, !a2) && !a3 && !a4 && !a5 && !a6)
    {
      uint64_t v13 = (void *)*((void *)cf + 46);
      if (v13)
      {
        AMAuthInstallReleaseRsaKeyData(*v13);
        SafeRelease(*(CFTypeRef *)(*((void *)cf + 46) + 8));
        SafeRelease(*(CFTypeRef *)(*((void *)cf + 46) + 16));
        SafeRelease(*(CFTypeRef *)(*((void *)cf + 46) + 24));
        SafeRelease(*(CFTypeRef *)(*((void *)cf + 46) + 32));
        free(*((void **)cf + 46));
        *((void *)cf + 46) = 0;
      }
      if (a2)
      {
        CFGetAllocator(cf);
        uint64_t v14 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
        if (v14)
        {
          uint64_t v12 = v14;
          char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)cf, v14);
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandLocalSetSigningParameters", (uint64_t)"bad local signing key: %@", v16, v17, v18, v19, v20, LocalizedStatusString);
        }
        else
        {
          CFNumberRef v21 = calloc(1uLL, 0x28uLL);
          *((void *)cf + 46) = v21;
          if (v21)
          {
            **((void **)cf + 46) = CFRetain(0);
            *(void *)(*((void *)cf + 46) + 8) = CFRetain(a3);
            *(void *)(*((void *)cf + 46) + 16) = CFRetain(a4);
            *(void *)(*((void *)cf + 46) + 32) = CFRetain(a6);
            uint64_t v12 = 0;
            *(void *)(*((void *)cf + 46) + 24) = SafeRetain(a5);
          }
          else
          {
            uint64_t v12 = 2;
          }
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
  SafeRelease(0);
  SafeRelease(0);
  return v12;
}

uint64_t AMAuthInstallBasebandSetFusingProfileName(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 1;
  }
  SafeRelease(*(CFTypeRef *)(a1 + 168));
  CFTypeRef v4 = SafeRetain(a2);
  uint64_t result = 0;
  *(void *)(a1 + 168) = v4;
  return result;
}

void AMAuthInstallBasebandFinalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 176))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandFinalize", (uint64_t)"*********************************", a4, a5, a6, a7, a8, v20);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandFinalize", (uint64_t)"* unacknowledged fusing program *", v9, v10, v11, v12, v13, v21);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandFinalize", (uint64_t)"*********************************", v14, v15, v16, v17, v18, v22);
  }
  _AMAuthInstallBasebandParametersFinalize(*(CFTypeRef **)(a1 + 48));
  AMAuthInstallBasebandLocalSetSigningParameters((void *)a1, 0, 0, 0, 0, 0);
  SafeRelease(*(CFTypeRef *)(a1 + 160));
  SafeRelease(*(CFTypeRef *)(a1 + 168));
  SafeRelease(*(CFTypeRef *)(a1 + 176));
  SafeRelease(*(CFTypeRef *)(a1 + 192));
  SafeRelease(*(CFTypeRef *)(a1 + 200));
  SafeRelease(*(CFTypeRef *)(a1 + 208));
  SafeRelease(*(CFTypeRef *)(a1 + 216));
  SafeRelease(*(CFTypeRef *)(a1 + 136));
  SafeRelease(*(CFTypeRef *)(a1 + 240));
  SafeRelease(*(CFTypeRef *)(a1 + 264));
  SafeRelease(*(CFTypeRef *)(a1 + 248));
  SafeRelease(*(CFTypeRef *)(a1 + 232));
  SafeRelease(*(CFTypeRef *)(a1 + 272));
  uint64_t v19 = *(const void **)(a1 + 280);

  SafeRelease(v19);
}

uint64_t AMAuthInstallBasebandCopyNextComponentName(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (!v8)
  {
    *a2 = 0;
    return 99;
  }
  int v9 = *(_DWORD *)(v8 + 4);
  if (v9 > 1700064)
  {
    if (v9 <= 5898464)
    {
      if (v9 <= 2814176)
      {
        BOOL v12 = v9 == 1700065;
        int v13 = 2089185;
        goto LABEL_42;
      }
      switch(v9)
      {
        case 2814177:
LABEL_47:
          return AMAuthInstallBasebandJ2CopyNextComponentName();
        case 4587745:
          break;
        case 5243105:
          break;
        default:
LABEL_60:
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCopyNextComponentName", (uint64_t)"chipID: 0x%x is not supported", a4, a5, a6, a7, a8, v9);
          return 99;
      }
    }
    else
    {
      if (v9 > 8343776)
      {
        BOOL v12 = v9 == 8343777 || v9 == 9572577;
        int v13 = 9781473;
LABEL_42:
        if (!v12 && v9 != v13) {
          goto LABEL_60;
        }
        goto LABEL_47;
      }
      if (v9 == 5898465)
      {
      }
      else
      {
        if (v9 != 7278817 && v9 != 7282913) {
          goto LABEL_60;
        }
      }
    }
    return AMAuthInstallBasebandJ2CopyNextComponentName();
  }
  if (v9 > 241888)
  {
    if (v9 <= 938208)
    {
      BOOL v12 = v9 == 241889;
      int v13 = 520417;
    }
    else
    {
      BOOL v12 = v9 == 938209 || v9 == 1327329;
      int v13 = 1515745;
    }
    goto LABEL_42;
  }
  if ((v9 - 80) > 0x18) {
    goto LABEL_60;
  }
  if (((1 << (v9 - 80)) & 0x1A14000) != 0)
  {
    return AMAuthInstallBasebandRembrandtCopyNextComponentName();
  }
  if (v9 != 80) {
    goto LABEL_60;
  }

  return AMAuthInstallBasebandICE3CopyNextComponentName(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AMAuthInstallBasebandCreateUpdaterStateInfo(uint64_t a1, CFTypeRef *a2)
{
  if (!a1)
  {
    CFMutableDictionaryRef Mutable = 0;
    CFNumberRef v6 = 0;
    CFNumberRef v7 = 0;
    CFNumberRef v8 = 0;
    CFNumberRef v9 = 0;
    CFNumberRef v10 = 0;
    uint64_t v11 = 0;
    uint64_t v4 = 1;
    goto LABEL_25;
  }
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v4 = 1;
  if (!a2)
  {
    CFNumberRef v6 = 0;
    CFNumberRef v7 = 0;
    CFNumberRef v8 = 0;
    CFNumberRef v9 = 0;
    CFNumberRef v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_25;
  }
  CFNumberRef v6 = 0;
  CFNumberRef v7 = 0;
  CFNumberRef v8 = 0;
  CFNumberRef v9 = 0;
  CFNumberRef v10 = 0;
  uint64_t v11 = 0;
  if (*(void *)(a1 + 48))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
      CFNumberRef v6 = CFNumberCreate(v12, kCFNumberSInt32Type, *(const void **)(a1 + 48));
      if (v6)
      {
        CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a1);
        CFNumberRef v7 = CFNumberCreate(v13, kCFNumberSInt32Type, (const void *)(*(void *)(a1 + 48) + 4));
        if (v7)
        {
          CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)a1);
          CFNumberRef v8 = CFNumberCreate(v14, kCFNumberSInt32Type, (const void *)(*(void *)(a1 + 48) + 8));
          CFDictionarySetValue(Mutable, @"VendorID", v6);
          CFDictionarySetValue(Mutable, @"ChipID", v7);
          CFDictionarySetValue(Mutable, @"CertID", v8);
          uint64_t v15 = *(void *)(a1 + 48);
          uint64_t v16 = *(const void **)(v15 + 16);
          if (v16)
          {
            CFDictionarySetValue(Mutable, @"ChipSerialNo", v16);
            uint64_t v15 = *(void *)(a1 + 48);
          }
          uint64_t v17 = *(const void **)(v15 + 24);
          if (v17) {
            CFDictionarySetValue(Mutable, @"Nonce", v17);
          }
          CFDictionaryRef v18 = *(const __CFDictionary **)(a1 + 208);
          if (!v18)
          {
            CFNumberRef v9 = 0;
            CFNumberRef v10 = 0;
            uint64_t v11 = 0;
            uint64_t v4 = 14;
            goto LABEL_25;
          }
          unint64_t Value = (unint64_t)CFDictionaryGetValue(v18, @"BbProvisioningManifestKeyHash");
          unint64_t v20 = (unint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 208), @"BbCalibrationManifestKeyHash");
          if (!(Value | v20))
          {
            CFNumberRef v9 = 0;
            CFNumberRef v10 = 0;
            uint64_t v11 = 0;
LABEL_24:
            uint64_t v4 = 0;
            *a2 = CFRetain(Mutable);
            goto LABEL_25;
          }
          char v21 = (const void *)v20;
          CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
          uint64_t v23 = CFDictionaryCreateMutable(v22, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          uint64_t v11 = v23;
          if (v23)
          {
            if (Value)
            {
              CFDictionarySetValue(v23, @"SKeyHash", (const void *)Value);
              AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandCreateUpdaterStateInfo", (uint64_t)"provisioning key status=%d", v29, v30, v31, v32, v33, 0);
              int v39 = 0;
            }
            else
            {
              int v39 = 3;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCreateUpdaterStateInfo", (uint64_t)"provisioning key hash not found", v24, v25, v26, v27, v28, v50);
            }
            int valuePtr = v39;
            if (v21)
            {
              CFDictionarySetValue(v11, @"CKeyHash", v21);
              AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandCreateUpdaterStateInfo", (uint64_t)"calibration key status=%d", v40, v41, v42, v43, v44, 0);
              int v45 = 0;
            }
            else
            {
              int v45 = 3;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandCreateUpdaterStateInfo", (uint64_t)"calibration key hash not found", v34, v35, v36, v37, v38, v51);
            }
            int v52 = v45;
            CFAllocatorRef v46 = CFGetAllocator((CFTypeRef)a1);
            CFNumberRef v9 = CFNumberCreate(v46, kCFNumberSInt32Type, &valuePtr);
            if (v9)
            {
              CFDictionarySetValue(v11, @"SKeyStatus", v9);
              CFAllocatorRef v47 = CFGetAllocator((CFTypeRef)a1);
              CFNumberRef v48 = CFNumberCreate(v47, kCFNumberSInt32Type, &v52);
              if (v48)
              {
                CFNumberRef v10 = v48;
                CFDictionarySetValue(v11, @"CKeyStatus", v48);
                CFDictionarySetValue(Mutable, @"ManifestInfo", v11);
                goto LABEL_24;
              }
            }
          }
          else
          {
            CFNumberRef v9 = 0;
          }
          CFNumberRef v10 = 0;
LABEL_34:
          uint64_t v4 = 2;
          goto LABEL_25;
        }
LABEL_30:
        CFNumberRef v8 = 0;
        CFNumberRef v9 = 0;
        CFNumberRef v10 = 0;
        uint64_t v11 = 0;
        goto LABEL_34;
      }
    }
    else
    {
      CFNumberRef v6 = 0;
    }
    CFNumberRef v7 = 0;
    goto LABEL_30;
  }
LABEL_25:
  SafeRelease(Mutable);
  SafeRelease(v6);
  SafeRelease(v7);
  SafeRelease(v8);
  SafeRelease(v9);
  SafeRelease(v10);
  SafeRelease(v11);
  return v4;
}

uint64_t AMAuthInstallBasebandSupportsLocalSigning(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 1;
  if (a1 && a2)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (!v10)
    {
LABEL_51:
      char v13 = 0;
      goto LABEL_52;
    }
    int v11 = *(_DWORD *)(v10 + 4);
    if (v11 <= 1700064)
    {
      if (v11 <= 241888)
      {
        if ((v11 - 94) > 0xA || ((1 << (v11 - 94)) & 0x685) == 0) {
          goto LABEL_50;
        }
        char v13 = AMAuthInstallBasebandICE3SupportsServerSigning();
        goto LABEL_52;
      }
      if (v11 <= 938208)
      {
        BOOL v17 = v11 == 241889;
        int v18 = 520417;
        goto LABEL_42;
      }
      BOOL v15 = v11 == 938209 || v11 == 1327329;
      int v16 = 1515745;
    }
    else
    {
      if (v11 > 5898464)
      {
        if (v11 <= 8343776)
        {
          if (v11 != 5898465)
          {
            if (v11 != 7278817 && v11 != 7282913) {
              goto LABEL_50;
            }
            char v13 = AMAuthInstallBasebandN41SupportsLocalSigning(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_52:
            uint64_t v8 = 0;
            *a2 = v13;
            return v8;
          }
LABEL_24:
          char v13 = AMAuthInstallBasebandJ2SupportsLocalSigning();
          goto LABEL_52;
        }
        BOOL v17 = v11 == 8343777 || v11 == 9572577;
        int v18 = 9781473;
LABEL_42:
        if (!v17 && v11 != v18) {
          goto LABEL_50;
        }
        goto LABEL_24;
      }
      if (v11 > 2814176)
      {
        if (v11 != 2814177 && v11 != 4587745 && v11 != 5243105)
        {
LABEL_50:
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSupportsLocalSigning", (uint64_t)"chipID: 0x%x is not supported for local signing", a4, a5, a6, a7, a8, v11);
          goto LABEL_51;
        }
        goto LABEL_24;
      }
      BOOL v15 = v11 == 1700065;
      int v16 = 2089185;
    }
    if (!v15 && v11 != v16) {
      goto LABEL_50;
    }
    goto LABEL_24;
  }
  return v8;
}

uint64_t AMAuthInstallBasebandSetKeyHashInternal(uint64_t a1, const void *a2, CFDataRef theData)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (theData && a2 && *(void *)(a1 + 200))
  {
    if (CFDataGetLength(theData) == 20
      || CFDataGetLength(theData) == 32
      || CFDataGetLength(theData) == 48
      || !CFDataGetLength(theData))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 200), a2, theData);
      return 0;
    }
    else
    {
      char Length = CFDataGetLength(theData);
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandSetKeyHashInternal", (uint64_t)"Invalid hash length %d", v8, v9, v10, v11, v12, Length);
      return 99;
    }
  }
  return result;
}

uint64_t AMAuthInstallBasebandMeasureFirmwareFromBbfw(int a1, uint64_t a2, const __CFString *a3, uint64_t (*a4)(uint64_t, CFTypeRef, uint64_t), uint64_t a5, uint64_t a6)
{
  char v8 = (char)a3;
  CFTypeRef v25 = 0;
  int v11 = BbfwReaderFindAndCopyFileData(a5, a3, &v25);
  if (!a1 && v11)
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandMeasureFirmwareFromBbfw", (uint64_t)"%@ absent; but ignoring",
      v12,
      v13,
      v14,
      v15,
      v16,
      v8);
LABEL_8:
    uint64_t v23 = 1;
    goto LABEL_9;
  }
  if (!v11)
  {
    int v17 = a4(a2, v25, a6);
    if (!v17) {
      goto LABEL_8;
    }
    AMAuthInstallGetLocalizedStatusString(0, v17);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandMeasureFirmwareFromBbfw", (uint64_t)"failed to measure \"%@\": %@;",
      v18,
      v19,
      v20,
      v21,
      v22,
      v8);
  }
  uint64_t v23 = 0;
LABEL_9:
  SafeRelease(v25);
  return v23;
}

uint64_t AMAuthInstallBasebandStitchCopyFile(uint64_t a1, CFTypeRef cf, uint64_t a3, void *a4)
{
  if (!a1) {
    return 1;
  }
  CFTypeRef v5 = CFRetain(cf);
  uint64_t result = 0;
  *a4 = v5;
  return result;
}

uint64_t AMAuthInstallBasebandStitchFirmwareFromBbfw(uint64_t a1, const __CFString *a2, uint64_t (*a3)(uint64_t, CFTypeRef, uint64_t, void **), uint64_t a4, uint64_t a5, __CFDictionary *a6)
{
  value = 0;
  CFTypeRef v25 = 0;
  if (!BbfwReaderFindAndCopyFileData(a4, a2, &v25))
  {
    int v11 = a3(a1, v25, a5, &value);
    if (v11)
    {
      AMAuthInstallGetLocalizedStatusString(0, v11);
      AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBasebandStitchFirmwareFromBbfw", (uint64_t)"failed to stitch \"%@\": %@; continuing anyway",
        v17,
        v18,
        v19,
        v20,
        v21,
        (char)a2);
    }
    else
    {
      if (value)
      {
        CFDictionarySetValue(a6, a2, value);
        uint64_t v22 = 1;
        goto LABEL_7;
      }
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandStitchFirmwareFromBbfw", (uint64_t)"stitch function returned NULL for \"%@\"; continuing anyway",
        v12,
        v13,
        v14,
        v15,
        v16,
        (char)a2);
    }
  }
  uint64_t v22 = 0;
LABEL_7:
  SafeRelease(v25);
  SafeRelease(value);
  return v22;
}

uint64_t AMAuthInstallBasebandLocalProvisionDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 1;
  if (!a1) {
    return v8;
  }
  if (!a2) {
    return v8;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (!v9) {
    return v8;
  }
  int v10 = *(_DWORD *)(v9 + 4);
  if (v10 <= 1700064)
  {
    if (v10 <= 241888)
    {
      if ((v10 - 94) > 0xA || ((1 << (v10 - 94)) & 0x685) == 0) {
        goto LABEL_64;
      }
      return AMAuthInstallBasebandRembrandtLocalProvisionDevice();
    }
    if (v10 <= 938208)
    {
      BOOL v16 = v10 == 241889;
      int v17 = 520417;
      goto LABEL_50;
    }
    BOOL v14 = v10 == 938209 || v10 == 1327329;
    int v15 = 1515745;
    goto LABEL_41;
  }
  if (v10 > 5898464)
  {
    if (v10 <= 8343776)
    {
      if (v10 == 5898465)
      {
      }
      else
      {
        if (v10 != 7278817 && v10 != 7282913) {
          goto LABEL_64;
        }
      }
      return AMAuthInstallBasebandJ2HandleLocalSigningRequest();
    }
    BOOL v16 = v10 == 8343777 || v10 == 9572577;
    int v17 = 9781473;
LABEL_50:
    if (!v16 && v10 != v17) {
      goto LABEL_64;
    }
    return AMAuthInstallBasebandJ2HandleLocalSigningRequest();
  }
  if (v10 <= 2814176)
  {
    BOOL v14 = v10 == 1700065;
    int v15 = 2089185;
LABEL_41:
    if (!v14 && v10 != v15) {
      goto LABEL_64;
    }
    goto LABEL_46;
  }
  if (v10 == 2814177)
  {
LABEL_46:
    return AMAuthInstallBasebandJ2HandleLocalSigningRequest();
  }
  if (v10 == 4587745)
  {
    return AMAuthInstallBasebandJ2HandleLocalSigningRequest();
  }
  if (v10 != 5243105)
  {
LABEL_64:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandLocalProvisionDevice", (uint64_t)"chipID: 0x%x is not supported for local provisioning", a4, a5, a6, a7, a8, v10);
    return 13;
  }

  return AMAuthInstallBasebandN92LocalProvisionDevice(a1);
}

uint64_t AMAuthInstallBasebandSetAntennaType(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 1;
  }
  SafeRelease(*(CFTypeRef *)(a1 + 144));
  CFTypeRef v4 = SafeRetain(a2);
  uint64_t result = 0;
  *(void *)(a1 + 144) = v4;
  return result;
}

uint64_t AMAuthInstallBasebandSetBehavior(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 1;
  }
  SafeRelease(*(CFTypeRef *)(a1 + 152));
  CFTypeRef v4 = SafeRetain(a2);
  uint64_t result = 0;
  *(void *)(a1 + 152) = v4;
  return result;
}

uint64_t AMAuthInstallBasebandIsFused(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return 1;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(v2 + 16);
  unsigned int v5 = (*(_DWORD *)(v2 + 96) < 4u) & (0xDu >> (*(_DWORD *)(v2 + 96) & 0xF));
  if (!v4) {
    LOBYTE(v5) = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t AMAuthInstallBasebandGetChipID(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(v4 + 4);
    }
  }
  return result;
}

uint64_t AMAuthInstallBasebandGetVersion(uint64_t a1, CFDataRef data, __CFDictionary *a3, const void *a4, const void *a5)
{
  value = 0;
  uint64_t result = 1;
  if (a1 && data && a3 && a4)
  {
    if (AMAuthInstallBasebandReadVersionFromBbfw(data, a4, (CFTypeRef *)&value) || !value)
    {
      return 14;
    }
    else
    {
      CFDictionarySetValue(a3, a5, value);
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallBasebandGetRestoreSbl1Version(uint64_t a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallBasebandGetVersion(a1, a2, a3, @"com.apple.EmbeddedSoftwareRestore.Baseband.RestoreSBLVersion", @"RestoreSBL1-Version");
}

uint64_t AMAuthInstallBasebandGetSbl1Version(uint64_t a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallBasebandGetVersion(a1, a2, a3, @"com.apple.EmbeddedSoftwareRestore.Baseband.SBLVersion", @"SBL1-Version");
}

uint64_t AMAuthInstallBasebandSupportsFDR(int a1, char *a2)
{
  if (a2)
  {
    char v2 = 1;
    if (a1 > 1327328)
    {
      if (a1 > 2814176)
      {
        if (a1 > 9572576)
        {
          if (a1 == 9572577) {
            goto LABEL_22;
          }
          int v3 = 9781473;
        }
        else
        {
          if (a1 == 2814177) {
            goto LABEL_22;
          }
          int v3 = 8343777;
        }
      }
      else if (a1 > 1700064)
      {
        if (a1 == 1700065) {
          goto LABEL_22;
        }
        int v3 = 2089185;
      }
      else
      {
        if (a1 == 1327329) {
          goto LABEL_22;
        }
        int v3 = 1515745;
      }
    }
    else
    {
      if (a1 <= 241888)
      {
        if ((a1 - 94) <= 0xA && ((1 << (a1 - 94)) & 0x685) != 0) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (a1 == 241889 || a1 == 520417) {
        goto LABEL_22;
      }
      int v3 = 938209;
    }
    if (a1 != v3) {
LABEL_23:
    }
      char v2 = 0;
LABEL_22:
    uint64_t result = 0;
    *a2 = v2;
    return result;
  }
  return 1;
}

uint64_t AMAuthInstallBasebandGetRFSelfTestTicket(const void *a1, const __CFData *a2, int a3, uint64_t a4, uint64_t a5, CFDataRef *a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10 = a7;
  int v12 = a5;
  int v13 = a4;
  CFDictionaryRef theDict = 0;
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"Entering RF Self Test LAI API to get a signed ticket", a4, a5, (uint64_t)a6, a7, a8, v81);
  if (!a1)
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"inSnum is NULL", v17, v18, v19, v20, v21, v82);
LABEL_30:
    uint64_t v29 = 0;
LABEL_39:
    a2 = 0;
    goto LABEL_46;
  }
  if (!a2)
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"inNonce is NULL", v17, v18, v19, v20, v21, v82);
    uint64_t v29 = 0;
LABEL_46:
    uint64_t v65 = 1;
    goto LABEL_28;
  }
  if (!a6) {
    goto LABEL_30;
  }
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v23 = AMAuthInstallCreate((const __CFAllocator *)*MEMORY[0x263EFFB08]);
  uint64_t v29 = (void *)v23;
  if (!v23)
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"amai is NULL", v24, v25, v26, v27, v28, v82);
    a2 = 0;
    goto LABEL_33;
  }
  uint64_t v30 = AMAuthInstallBasebandSetFusings(v23, a3, v13, a1, v25, v26, v27, v28);
  if (v30)
  {
    uint64_t v65 = v30;
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"invalid baseband fusings", v31, v32, v33, v34, v35, v82);
    a2 = 0;
    goto LABEL_28;
  }
  if (AMAuthInstallBasebandSetNonce((uint64_t)v29, a2))
  {
    int v79 = "invalid baseband fusings";
LABEL_38:
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)v79, v36, v37, v38, v39, v40, v82);
    goto LABEL_39;
  }
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"will check signing support now", v36, v37, v38, v39, v40, v82);
  char v86 = 0;
  int v47 = AMAuthInstallBasebandSupportsServerSigning((uint64_t)v29, &v86, v41, v42, v43, v44, v45, v46);
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"signing support check completed", v48, v49, v50, v51, v52, v83);
  if (v47)
  {
    int v79 = "signing support check failed";
    goto LABEL_38;
  }
  if (v86 != 1)
  {
    int v79 = "signing NOT supported";
    goto LABEL_38;
  }
  CFAllocatorRef v53 = CFGetAllocator(v29);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v53, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  a2 = Mutable;
  if (!Mutable) {
    goto LABEL_33;
  }
  uint64_t v60 = v29[6];
  if (!v60)
  {
    CFNumberRef v80 = "amai->bbParameters is NULL";
LABEL_45:
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)v80, v55, v56, v57, v58, v59, v82);
    goto LABEL_46;
  }
  uint64_t v61 = *(const void **)(v60 + 24);
  if (v61)
  {
    CFDictionarySetValue(Mutable, @"BbNonce", v61);
    uint64_t v60 = v29[6];
  }
  uint64_t v62 = *(const void **)(v60 + 16);
  if (v62)
  {
    CFDictionarySetValue(a2, @"BbSNUM", v62);
    uint64_t v60 = v29[6];
  }
  int v63 = *(_DWORD *)(v60 + 4);
  if (v63)
  {
    _CFDictionarySetInteger32(a2, @"BbChipID", v63);
    uint64_t v60 = v29[6];
  }
  uint64_t v64 = *(unsigned int *)(v60 + 8);
  if (v64) {
    _CFDictionarySetInteger64(a2, @"BbGoldCertId", v64);
  }
  _CFDictionarySetInteger32(a2, @"BbFieldDiagsEnable", v12);
  if (a9)
  {
    if (a8)
    {
      if (v10)
      {
        _CFDictionarySetInteger64(a2, @"ApECID", a8);
        _CFDictionarySetInteger32(a2, @"ApChipID", v10);
        goto LABEL_23;
      }
      CFNumberRef v80 = "inApChipID is zero";
    }
    else
    {
      CFNumberRef v80 = "inApECID is zero";
    }
    goto LABEL_45;
  }
LABEL_23:
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"will start signing now", v55, v56, v57, v58, v59, v82);
  uint64_t v65 = AMAuthInstallRequestSendSync((uint64_t)v29, a2, (CFTypeRef *)&theDict);
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"signing done", v66, v67, v68, v69, v70, v84);
  if (!v65)
  {
    if (!theDict)
    {
      uint64_t v65 = 14;
      goto LABEL_28;
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandGetRFSelfTestTicket", (uint64_t)"returning the ticket content", v71, v72, v73, v74, v75, v85);
    if (!CFDictionaryContainsKey(theDict, @"BBTicket"))
    {
      uint64_t v65 = 8;
      goto LABEL_28;
    }
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, @"BBTicket");
    CFDataRef Copy = CFDataCreateCopy(v22, Value);
    *a6 = Copy;
    if (Copy)
    {
      uint64_t v65 = 0;
      goto LABEL_28;
    }
LABEL_33:
    uint64_t v65 = 2;
  }
LABEL_28:
  SafeRelease(a2);
  SafeRelease(theDict);
  SafeRelease(v29);
  return v65;
}

uint64_t AMAuthInstallBasebandICE3MeasureRamPsi(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  CFDataRef theData = 0;
  value = 0;
  uint64_t v28 = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t v7 = FlsParserCreate(v6);
  uint64_t v8 = (PRGSequencer **)v7;
  if (v7)
  {
    uint64_t v9 = FlsParserReadFromData(v7, a2);
    if (v9
      || (uint64_t v9 = FlsParserCopyRamPsi(v8, &theData), v9)
      || (CFAllocatorRef v10 = CFGetAllocator(a1),
          BytePtr = CFDataGetBytePtr(theData),
          CFIndex Length = CFDataGetLength(theData),
          uint64_t v9 = _AMAuthInstallCopyPsiMeasurementAndVersion(v10, (uint64_t)BytePtr, Length, (CFDataRef *)&v28, (CFStringRef *)&value, v13, v14, v15), v9))
    {
      uint64_t v26 = v9;
    }
    else
    {
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureRamPsi", (uint64_t)"Version = %@", v16, v17, v18, v19, v20, (char)value);
      CFDictionarySetValue(a3, @"RamPSI-Version", value);
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureRamPsi", (uint64_t)"Partialuint64_t Digest = %@", v21, v22, v23, v24, v25, (char)v28);
      CFDictionarySetValue(a3, @"RamPSI-PartialDigest", v28);
      uint64_t v26 = 0;
    }
  }
  else
  {
    uint64_t v26 = 2;
  }
  SafeRelease(v8);
  SafeRelease(value);
  SafeRelease(theData);
  SafeRelease(v28);
  return v26;
}

uint64_t _AMAuthInstallCopyPsiMeasurementAndVersion(const __CFAllocator *a1, uint64_t a2, unint64_t a3, CFDataRef *a4, CFStringRef *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!a4) {
    _AMAuthInstallCopyPsiMeasurementAndVersion_cold_1();
  }
  if (!a5) {
    _AMAuthInstallCopyPsiMeasurementAndVersion_cold_2();
  }
  int8x16_t v23 = 0uLL;
  int v24 = 0;
  if (a3 < 0x50 || *(_DWORD *)(a2 + 4) != 1430808940 || (uint64_t v9 = *(unsigned int *)(a2 + 12), (v9 + 1) <= 1))
  {
    CFAllocatorRef v10 = "PSI Image does not contain recognizable PSI header";
LABEL_7:
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallCopyPsiMeasurementAndVersion", (uint64_t)v10, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v20);
    return 10;
  }
  if ((*(unsigned char *)(a2 + 10) & 1) == 0)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallCopyPsiMeasurementAndVersion", (uint64_t)"missing SN indicator", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v20);
    return 1;
  }
  CC_LONG v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x3F) != 0)
  {
    CFAllocatorRef v10 = "GPuK is not properly aligned for partial digest";
    goto LABEL_7;
  }
  *(_DWORD *)bytes = *(_DWORD *)(a2 + 40) - v12;
  CC_LONG v22 = v12;
  *(void *)&double v15 = image3SHA1Partial((const void *)a2, v12, &v23).u64[0];
  CFStringRef v16 = CFStringCreateWithFormat(a1, 0, @"0x%08x", v15, v9);
  if (v16)
  {
    CFStringRef v17 = v16;
    CFDataRef v18 = CFDataCreate(a1, bytes, 28);
    if (v18)
    {
      CFDataRef v19 = v18;
      uint64_t result = 0;
      *a5 = v17;
      *a4 = v19;
      return result;
    }
    CFRelease(v17);
  }
  return 2;
}

uint64_t AMAuthInstallBasebandICE3StitchRamPsi(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v8 = CFGetAllocator(a1);
  uint64_t v9 = FlsParserCreate(v8);
  CFAllocatorRef v10 = (PRGSequencer **)v9;
  if (v9)
  {
    uint64_t v11 = FlsParserReadFromData(v9, a2);
    if (v11 || (uint64_t v11 = FlsParserCopyRamPsi(v10, (CFDataRef *)&v18), v11))
    {
      uint64_t v14 = v11;
      CFDataRef v13 = 0;
    }
    else
    {
      AMAuthInstallDebugWriteObject((char *)a1, v18, @"RamPSI-Original", 1);
      uint64_t v12 = _AMAuthInstallBasebandStitchICE3Psi((char *)a1, v18, a3, @"RamPSI-Blob", &v17);
      CFDataRef v13 = (const __CFData *)v17;
      if (v12
        || (AMAuthInstallDebugWriteObject((char *)a1, v17, @"RamPSI-Personalized", 1),
            uint64_t v12 = FlsParserReplaceRamPsi((uint64_t)v10, v13),
            v12))
      {
        uint64_t v14 = v12;
      }
      else
      {
        uint64_t v14 = FlsParserCopyAsData(v10, &cf);
        if (!v14) {
          *a4 = CFRetain(cf);
        }
      }
    }
  }
  else
  {
    CFDataRef v13 = 0;
    uint64_t v14 = 2;
  }
  SafeRelease(v10);
  SafeRelease(v18);
  SafeRelease(v13);
  SafeRelease(cf);
  return v14;
}

uint64_t _AMAuthInstallBasebandStitchICE3Psi(char *a1, const void *a2, CFDictionaryRef theDict, const void *a4, CFTypeRef *a5)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"BasebandFirmware");
  if (!Value)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandStitchICE3Psi", (uint64_t)"response missing \"%@\"", v10, v11, v12, v13, v14, (char)@"BasebandFirmware");
LABEL_8:
    int v24 = 0;
    uint64_t v29 = 8;
    goto LABEL_5;
  }
  CFDataRef v15 = (const __CFData *)CFDictionaryGetValue(Value, a4);
  if (!v15)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBasebandStitchICE3Psi", (uint64_t)"response missing \"%@\"", v16, v17, v18, v19, v20, (char)a4);
    goto LABEL_8;
  }
  CFDataRef v21 = v15;
  AMAuthInstallDebugWriteObject(a1, a2, (uint64_t)a4, 1);
  CFAllocatorRef v22 = CFGetAllocator(a1);
  CFDataRef MutableCopy = CFDataCreateMutableCopy(v22, 0, (CFDataRef)a2);
  int v24 = MutableCopy;
  if (MutableCopy)
  {
    CFIndex Length = CFDataGetLength(MutableCopy);
    CFIndex v26 = CFDataGetLength(v21);
    CFDataSetLength(v24, Length - v26);
    BytePtr = CFDataGetBytePtr(v21);
    CFIndex v28 = CFDataGetLength(v21);
    CFDataAppendBytes(v24, BytePtr, v28);
    uint64_t v29 = 0;
    *a5 = CFRetain(v24);
  }
  else
  {
    uint64_t v29 = 2;
  }
LABEL_5:
  SafeRelease(v24);
  return v29;
}

uint64_t AMAuthInstallBasebandICE3MeasureEbl(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  CFDataRef v21 = 0;
  CFDataRef theData = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t v7 = FlsParserCreate(v6);
  CFAllocatorRef v8 = (PRGSequencer **)v7;
  if (v7)
  {
    uint64_t v9 = FlsParserReadFromData(v7, a2);
    if (v9 || (uint64_t v9 = FlsParserCopyEbl(v8, &theData), v9))
    {
      uint64_t v18 = v9;
      CFDataRef v19 = 0;
    }
    else
    {
      CFAllocatorRef v10 = CFGetAllocator(a1);
      BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
      CC_LONG Length = CFDataGetLength(theData);
      uint64_t v18 = _AMAuthInstallCopyBufferMeasurement(v10, BytePtr, Length, &v21);
      CFDataRef v19 = v21;
      if (!v18)
      {
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureEbl", (uint64_t)"uint64_t Digest = %@", v13, v14, v15, v16, v17, (char)v21);
        CFDictionarySetValue(a3, @"EBL-Digest", v19);
      }
    }
  }
  else
  {
    CFDataRef v19 = 0;
    uint64_t v18 = 2;
  }
  SafeRelease(v8);
  SafeRelease(theData);
  SafeRelease(v19);
  return v18;
}

uint64_t _AMAuthInstallCopyBufferMeasurement(const __CFAllocator *a1, void *data, CC_LONG len, CFDataRef *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CC_SHA1(data, len, md);
  CFDataRef v6 = CFDataCreate(a1, md, 20);
  if (!v6) {
    return 2;
  }
  CFDataRef v7 = v6;
  uint64_t result = 0;
  *a4 = v7;
  return result;
}

uint64_t AMAuthInstallBasebandICE3StitchEbl(uint64_t a1, const __CFData *a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFDataRef theData = 0;
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(theDict, @"BBTicket");
  if (!Value)
  {
    uint64_t v10 = 0;
    uint64_t v18 = 8;
    goto LABEL_12;
  }
  if (!*(void *)(*(void *)(a1 + 48) + 24))
  {
    uint64_t v18 = 0;
    uint64_t v10 = 0;
LABEL_11:
    CFDictionaryRef Value = 0;
    goto LABEL_12;
  }
  AMAuthInstallDebugWriteObject((char *)a1, Value, @"BB-Ticket", 1);
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v9 = FlsParserCreate(v8);
  uint64_t v10 = (PRGSequencer **)v9;
  if (!v9)
  {
    CFDictionaryRef Value = 0;
    goto LABEL_16;
  }
  uint64_t v11 = FlsParserReadFromData(v9, a2);
  if (v11 || (uint64_t v11 = FlsParserCopyEbl(v10, &theData), v11))
  {
    uint64_t v18 = v11;
    goto LABEL_11;
  }
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef MutableCopy = CFDataCreateMutableCopy(v12, 0, (CFDataRef)Value);
  CFDictionaryRef Value = MutableCopy;
  if (!MutableCopy)
  {
LABEL_16:
    uint64_t v18 = 2;
    goto LABEL_12;
  }
  int Length = CFDataGetLength(MutableCopy);
  CFDataAppendBytes((CFMutableDataRef)Value, AMAuthInstallBasebandICE3StitchEbl_kPaddingBytes, -Length & 3);
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex v16 = CFDataGetLength(theData);
  CFDataAppendBytes((CFMutableDataRef)Value, BytePtr, v16);
  AMAuthInstallDebugWriteObject((char *)a1, Value, @"EBL-Personalized", 1);
  uint64_t v17 = FlsParserReplaceEbl((uint64_t)v10, (const __CFData *)Value);
  if (v17)
  {
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v18 = FlsParserCopyAsData(v10, &cf);
    if (!v18) {
      *a4 = CFRetain(cf);
    }
  }
LABEL_12:
  SafeRelease(v10);
  SafeRelease(theData);
  SafeRelease(cf);
  SafeRelease(Value);
  return v18;
}

uint64_t AMAuthInstallBasebandICE3MeasureFlashPsi(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  CFDataRef theData = 0;
  value = 0;
  uint64_t v39 = 0;
  CFDataRef v40 = 0;
  CFDataRef v38 = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t v7 = FlsParserCreate(v6);
  CFAllocatorRef v8 = (PRGSequencer **)v7;
  if (v7)
  {
    uint64_t v9 = FlsParserReadFromData(v7, a2);
    if (v9
      || (uint64_t v9 = FlsParserCopyFlashPsi(v8, (CFTypeRef *)&theData, (CFTypeRef *)&v40), v9)
      || (CFAllocatorRef v10 = CFGetAllocator(a1),
          uint64_t v11 = CFDataGetBytePtr(theData),
          CFIndex v12 = CFDataGetLength(theData),
          uint64_t v9 = _AMAuthInstallCopyPsiMeasurementAndVersion(v10, (uint64_t)v11, v12, (CFDataRef *)&v39, (CFStringRef *)&value, v13, v14, v15), v9))
    {
      uint64_t v36 = v9;
      CFDataRef v30 = 0;
    }
    else
    {
      CFAllocatorRef v16 = CFGetAllocator(a1);
      BytePtr = (UInt8 *)CFDataGetBytePtr(v40);
      CC_LONG Length = CFDataGetLength(v40);
      uint64_t v19 = _AMAuthInstallCopyBufferMeasurement(v16, BytePtr, Length, &v38);
      if (v19)
      {
        uint64_t v36 = v19;
        CFDataRef v30 = v38;
      }
      else
      {
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureFlashPsi", (uint64_t)"Version = %@", v20, v21, v22, v23, v24, (char)value);
        CFDictionarySetValue(a3, @"FlashPSI-Version", value);
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureFlashPsi", (uint64_t)"Partialuint64_t Digest = %@", v25, v26, v27, v28, v29, (char)v39);
        CFDictionarySetValue(a3, @"FlashPSI-PartialDigest", v39);
        CFDataRef v30 = v38;
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureFlashPsi", (uint64_t)"SecPack uint64_t Digest = %@", v31, v32, v33, v34, v35, (char)v38);
        CFDictionarySetValue(a3, @"FlashPSI-SecPackDigest", v30);
        uint64_t v36 = 0;
      }
    }
  }
  else
  {
    CFDataRef v30 = 0;
    uint64_t v36 = 2;
  }
  SafeRelease(v8);
  SafeRelease(value);
  SafeRelease(theData);
  SafeRelease(v40);
  SafeRelease(v39);
  SafeRelease(v30);
  return v36;
}

uint64_t AMAuthInstallBasebandICE3StitchFlashPsi(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  if (*(void *)(a1[6] + 24))
  {
    CFAllocatorRef v8 = CFGetAllocator(a1);
    uint64_t v9 = FlsParserCreate(v8);
    CFAllocatorRef v10 = (PRGSequencer **)v9;
    if (v9)
    {
      uint64_t v11 = FlsParserReadFromData(v9, a2);
      if (v11 || (uint64_t v11 = FlsParserCopyFlashPsi(v10, &v18, 0), v11))
      {
        uint64_t v14 = v11;
        CFDataRef v13 = 0;
      }
      else
      {
        AMAuthInstallDebugWriteObject((char *)a1, v18, @"FlashPsi-Original", 1);
        uint64_t v12 = _AMAuthInstallBasebandStitchICE3Psi((char *)a1, v18, a3, @"FlashPSI-Blob", &v17);
        CFDataRef v13 = (const __CFData *)v17;
        if (v12
          || (AMAuthInstallDebugWriteObject((char *)a1, v17, @"FlashPsi-Personalized", 1),
              uint64_t v12 = FlsParserReplaceFlashPsi((uint64_t)v10, v13),
              v12))
        {
          uint64_t v14 = v12;
        }
        else
        {
          uint64_t v14 = FlsParserCopyAsData(v10, &cf);
          if (!v14) {
            *a4 = CFRetain(cf);
          }
        }
      }
    }
    else
    {
      CFDataRef v13 = 0;
      uint64_t v14 = 2;
    }
  }
  else
  {
    CFDataRef v13 = 0;
    uint64_t v14 = 0;
    CFAllocatorRef v10 = 0;
  }
  SafeRelease(v10);
  SafeRelease(v18);
  SafeRelease(v13);
  SafeRelease(cf);
  return v14;
}

uint64_t AMAuthInstallBasebandICE3MeasureModemStack(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  CFDataRef v36 = 0;
  CFDataRef theData = 0;
  CFDataRef v34 = 0;
  CFDataRef v35 = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t v7 = FlsParserCreate(v6);
  CFAllocatorRef v8 = (PRGSequencer **)v7;
  if (!v7)
  {
    CFDataRef v32 = 0;
    CFDataRef v19 = 0;
    CFStringRef v22 = 0;
LABEL_14:
    uint64_t v31 = 2;
    goto LABEL_8;
  }
  uint64_t v9 = FlsParserReadFromData(v7, a2);
  if (v9 || (uint64_t v9 = FlsParserCopyModemStack(v8, (CFTypeRef *)&theData, (CFTypeRef *)&v36), v9))
  {
    uint64_t v31 = v9;
    CFDataRef v32 = 0;
    CFDataRef v19 = 0;
LABEL_12:
    CFStringRef v22 = 0;
    goto LABEL_8;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  CC_LONG Length = CFDataGetLength(theData);
  uint64_t v13 = _AMAuthInstallCopyBufferMeasurement(v10, BytePtr, Length, &v35);
  CFDataRef v19 = v35;
  if (v13)
  {
    uint64_t v31 = v13;
    CFDataRef v32 = 0;
    goto LABEL_12;
  }
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureModemStack", (uint64_t)"uint64_t Digest = %@", v14, v15, v16, v17, v18, (char)v35);
  CFDictionarySetValue(a3, @"ModemStack-Digest", v19);
  CFAllocatorRef v20 = CFGetAllocator(a1);
  CFIndex v21 = CFDataGetLength(theData);
  CFStringRef v22 = CFStringCreateWithFormat(v20, 0, @"0x%08lx", v21);
  if (!v22)
  {
    CFDataRef v32 = 0;
    goto LABEL_14;
  }
  CFDictionarySetValue(a3, @"ModemStack-Length", v22);
  CFAllocatorRef v23 = CFGetAllocator(a1);
  uint64_t v24 = (UInt8 *)CFDataGetBytePtr(v36);
  CC_LONG v25 = CFDataGetLength(v36);
  uint64_t v31 = _AMAuthInstallCopyBufferMeasurement(v23, v24, v25, &v34);
  CFDataRef v32 = v34;
  if (!v31)
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureModemStack", (uint64_t)"SecPack uint64_t Digest = %@", v26, v27, v28, v29, v30, (char)v34);
    CFDictionarySetValue(a3, @"ModemStack-SecPackDigest", v32);
  }
LABEL_8:
  SafeRelease(v8);
  SafeRelease(theData);
  SafeRelease(v36);
  SafeRelease(v19);
  SafeRelease(v32);
  SafeRelease(v22);
  return v31;
}

uint64_t AMAuthInstallBasebandICE3StitchModemStack(uint64_t a1, CFTypeRef cf, uint64_t a3, CFTypeRef *a4)
{
  if (*(void *)(*(void *)(a1 + 48) + 24)) {
    *a4 = CFRetain(cf);
  }
  return 0;
}

unint64_t AMAuthInstallBasebandICE3MeasureWorld(const void *a1, CFDataRef theData, __CFDictionary *a3)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  BytePtr = CFDataGetBytePtr(theData);
  unint64_t result = CFDataGetLength(theData);
  memset(v95, 0, sizeof(v95));
  memset(v94, 0, sizeof(v94));
  if (!result) {
    return result;
  }
  CC_LONG v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned int v18 = 0;
  unint64_t v19 = 0;
  CFTypeRef cf = 0;
  value = 0;
  while (2)
  {
    CFAllocatorRef v20 = (unsigned int *)&BytePtr[v19];
    switch(*(_DWORD *)&BytePtr[v19])
    {
      case 0xC:
        uint64_t v21 = v20[2];
        if (v21 > 4) {
          goto LABEL_34;
        }
        uint64_t v22 = v20[7];
        CFAllocatorRef v23 = &v95[v21];
        void *v23 = &BytePtr[v20[9]];
        v23[1] = v22;
        goto LABEL_11;
      case 0xF:
        uint64_t v21 = v20[2];
        if (v21 > 4)
        {
LABEL_34:
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"UID value of %ld exceeds maximum array bound of %d\n", v8, v9, v10, v11, v12, v21);
          return 10;
        }
        uint64_t v24 = &v94[v21];
        void *v24 = v20 + 131;
        v24[1] = 1536;
LABEL_11:
        v19 += v20[1];
        if (v19 < result) {
          continue;
        }
        CFDataRef v91 = 0;
        if (!v16) {
          goto LABEL_15;
        }
        CFAllocatorRef v25 = CFGetAllocator(a1);
        unint64_t result = _AMAuthInstallCopyPsiMeasurementAndVersion(v25, v16, v15, (CFDataRef *)&cf, (CFStringRef *)&value, v26, v27, v28);
        if (result) {
          return result;
        }
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"RamPSI Version: %@", v29, v30, v31, v32, v33, (char)value);
        CFDictionarySetValue(a3, @"RamPSI-Version", value);
        CFRelease(value);
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"RamPSI PartialDigest: %@", v34, v35, v36, v37, v38, (char)cf);
        CFDictionarySetValue(a3, @"RamPSI-PartialDigest", cf);
        CFRelease(cf);
LABEL_15:
        if (!v14)
        {
LABEL_18:
          if (!v18) {
            return 0;
          }
          uint64_t v46 = v18;
          for (CFIndex i = v17 + 4; ; i += 36)
          {
            uint64_t v48 = *(i - 1);
            uint64_t v49 = *(void **)&v95[v48];
            if (!v49 || (uint64_t v50 = *(void **)&v94[v48]) == 0)
            {
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"one or more elements are missing for TOC with UID = %lx\n", v8, v9, v10, v11, v12, *(i - 1));
              return 10;
            }
            if (*i == 4) {
              break;
            }
            if (*i == 2)
            {
              CFAllocatorRef v51 = CFGetAllocator(a1);
              unint64_t result = _AMAuthInstallCopyPsiMeasurementAndVersion(v51, (uint64_t)v49, *((void *)&v95[v48] + 1), (CFDataRef *)&cf, (CFStringRef *)&value, v52, v53, v54);
              if (result) {
                return result;
              }
              AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"FlashPSI Version: %@", v55, v56, v57, v58, v59, (char)value);
              CFDictionarySetValue(a3, @"FlashPSI-Version", value);
              CFRelease(value);
              AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"FlashPSI PartialDigest: %@", v60, v61, v62, v63, v64, (char)cf);
              CFDictionarySetValue(a3, @"FlashPSI-PartialDigest", cf);
              CFRelease(cf);
              CFAllocatorRef v65 = CFGetAllocator(a1);
              unint64_t result = _AMAuthInstallCopyBufferMeasurement(v65, v50, *((void *)&v94[v48] + 1), &v91);
              if (result) {
                return result;
              }
              CFDataRef v71 = v91;
              AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"FlashPSI SecPack Digest: %@", v66, v67, v68, v69, v70, (char)v91);
              uint64_t v72 = a3;
              uint64_t v73 = @"FlashPSI-SecPackDigest";
LABEL_31:
              CFDictionarySetValue(v72, v73, v71);
              CFRelease(v71);
            }
            unint64_t result = 0;
            if (!--v46) {
              return result;
            }
          }
          CFAllocatorRef v74 = CFGetAllocator(a1);
          uint64_t v75 = *((void *)&v95[v48] + 1);
          unint64_t result = _AMAuthInstallCopyBufferMeasurement(v74, v49, v75, &v91);
          if (result) {
            return result;
          }
          CFDataRef v81 = v91;
          AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"Modem Stack Digest: %@", v76, v77, v78, v79, v80, (char)v91);
          CFDictionarySetValue(a3, @"ModemStack-Digest", v81);
          CFRelease(v81);
          CFAllocatorRef v82 = CFGetAllocator(a1);
          CFStringRef v83 = CFStringCreateWithFormat(v82, 0, @"0x%08lx", v75);
          if (!v83) {
            return 2;
          }
          CFStringRef v84 = v83;
          CFDictionarySetValue(a3, @"ModemStack-Length", v83);
          CFRelease(v84);
          CFAllocatorRef v85 = CFGetAllocator(a1);
          unint64_t result = _AMAuthInstallCopyBufferMeasurement(v85, v50, *((void *)&v94[v48] + 1), &v91);
          if (result) {
            return result;
          }
          CFDataRef v71 = v91;
          AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"Modem Stack SecPack Digest: %@", v86, v87, v88, v89, v90, (char)v91);
          uint64_t v72 = a3;
          uint64_t v73 = @"ModemStack-SecPackDigest";
          goto LABEL_31;
        }
        CFAllocatorRef v39 = CFGetAllocator(a1);
        unint64_t result = _AMAuthInstallCopyBufferMeasurement(v39, v14, v13, &v91);
        if (!result)
        {
          CFDataRef v45 = v91;
          AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandICE3MeasureWorld", (uint64_t)"EBL Digest: %@", v40, v41, v42, v43, v44, (char)v91);
          CFDictionarySetValue(a3, @"EBL-Digest", v45);
          CFRelease(v45);
          goto LABEL_18;
        }
        return result;
      case 0x10:
        unsigned int v18 = v20[3];
        uint64_t v17 = &BytePtr[v20[5]];
        goto LABEL_11;
      case 0x12:
        uint64_t v16 = (uint64_t)&BytePtr[v20[7]];
        unint64_t v15 = v20[5];
        goto LABEL_11;
      case 0x13:
        uint64_t v14 = (UInt8 *)&BytePtr[v20[7]];
        CC_LONG v13 = v20[5];
        goto LABEL_11;
      default:
        goto LABEL_11;
    }
  }
}

uint64_t AMAuthInstallBasebandCreatePersonalizedPsiData(const void *a1, const __CFData *a2, const __CFData *a3, __CFData **a4)
{
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFDataRef MutableCopy = CFDataCreateMutableCopy(v7, 0, a2);
  uint64_t v9 = MutableCopy;
  if (MutableCopy)
  {
    CFIndex Length = CFDataGetLength(MutableCopy);
    CFIndex v11 = CFDataGetLength(a3);
    CFDataSetLength(v9, Length - v11);
    BytePtr = CFDataGetBytePtr(a3);
    CFIndex v13 = CFDataGetLength(a3);
    CFDataAppendBytes(v9, BytePtr, v13);
    uint64_t v14 = 0;
    if (a4)
    {
      *a4 = v9;
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v14 = 2;
  }
  SafeRelease(v9);
  return v14;
}

uint64_t AMAuthInstallBasebandCreatePersonalizedTicketPlusEblData(CFTypeRef cf, const __CFData *a2, const __CFData *a3, __CFData **a4)
{
  uint64_t result = 1;
  if (a2 && a3 && a4)
  {
    CFAllocatorRef v9 = CFGetAllocator(cf);
    CFDataRef MutableCopy = CFDataCreateMutableCopy(v9, 0, a3);
    if (MutableCopy)
    {
      CFIndex v11 = MutableCopy;
      int Length = CFDataGetLength(MutableCopy);
      CFDataAppendBytes(v11, AMAuthInstallBasebandCreatePersonalizedTicketPlusEblData_kPaddingBytes, -Length & 3);
      BytePtr = CFDataGetBytePtr(a2);
      CFIndex v14 = CFDataGetLength(a2);
      CFDataAppendBytes(v11, BytePtr, v14);
      uint64_t result = 0;
      *a4 = v11;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t AMAuthInstallBasebandICE3StitchWorld(void *cf, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef v29 = 0;
  CFTypeRef v30 = 0;
  CFTypeRef v27 = 0;
  CFDataRef v28 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  CFTypeRef cfa = 0;
  if (!cf || !cf[6])
  {
    uint64_t v10 = 0;
    uint64_t v12 = 1;
    goto LABEL_8;
  }
  CFAllocatorRef v8 = CFGetAllocator(cf);
  uint64_t v9 = FlsParserCreate(v8);
  uint64_t v10 = (PRGSequencer **)v9;
  if (!v9) {
    goto LABEL_33;
  }
  uint64_t PersonalizedPsiData = FlsParserReadFromData(v9, a2);
  if (!PersonalizedPsiData)
  {
    uint64_t PersonalizedPsiData = FlsParserCopyRamPsi(v10, (CFDataRef *)&v30);
    if (!PersonalizedPsiData)
    {
      if (!*(void *)(cf[6] + 24)
        || (uint64_t PersonalizedPsiData = FlsParserCopyFlashPsi(v10, &v29, 0), !PersonalizedPsiData)
        && (uint64_t PersonalizedPsiData = FlsParserCopyEbl(v10, &v28), !PersonalizedPsiData))
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, @"BasebandFirmware");
        uint64_t v12 = (uint64_t)Value;
        if (!Value)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3StitchWorld", (uint64_t)"server response doesn't contain personalization data", v15, v16, v17, v18, v19, v23);
          goto LABEL_8;
        }
        CFDataRef v20 = (const __CFData *)CFDictionaryGetValue(Value, @"RamPSI-Blob");
        CFDataRef v21 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v12, @"FlashPSI-Blob");
        CFDataRef v22 = (const __CFData *)CFDictionaryGetValue(a3, @"BBTicket");
        if (v30 && v20)
        {
          uint64_t PersonalizedPsiData = AMAuthInstallBasebandCreatePersonalizedPsiData(cf, (const __CFData *)v30, v20, (__CFData **)&v27);
          if (PersonalizedPsiData) {
            goto LABEL_6;
          }
          AMAuthInstallDebugWriteObject((char *)cf, v30, @"rampsi-original", 1);
          AMAuthInstallDebugWriteObject((char *)cf, v20, @"rampsi-stitch", 1);
          AMAuthInstallDebugWriteObject((char *)cf, v27, @"rampsi-personalized", 1);
        }
        if (!v29 || !v21) {
          goto LABEL_21;
        }
        uint64_t PersonalizedPsiData = AMAuthInstallBasebandCreatePersonalizedPsiData(cf, (const __CFData *)v29, v21, (__CFData **)&v26);
        if (!PersonalizedPsiData)
        {
          AMAuthInstallDebugWriteObject((char *)cf, v29, @"flashpsi-original", 1);
          AMAuthInstallDebugWriteObject((char *)cf, v21, @"flashpsi-stitch", 1);
          AMAuthInstallDebugWriteObject((char *)cf, v26, @"flashpsi-personalized", 1);
LABEL_21:
          if (!v28 || !v22)
          {
LABEL_25:
            if (v27) {
              FlsParserReplaceRamPsi((uint64_t)v10, (const __CFData *)v27);
            }
            if (v26) {
              FlsParserReplaceFlashPsi((uint64_t)v10, (const __CFData *)v26);
            }
            if (v25) {
              FlsParserReplaceEbl((uint64_t)v10, (const __CFData *)v25);
            }
            FlsParserCopyAsData(v10, &cfa);
            if (cfa)
            {
              uint64_t v12 = 0;
              *a4 = CFRetain(cfa);
              goto LABEL_8;
            }
LABEL_33:
            uint64_t v12 = 2;
            goto LABEL_8;
          }
          uint64_t PersonalizedPsiData = AMAuthInstallBasebandCreatePersonalizedTicketPlusEblData(cf, v28, v22, (__CFData **)&v25);
          if (!PersonalizedPsiData)
          {
            AMAuthInstallDebugWriteObject((char *)cf, v25, @"ticket-plus-ebl", 1);
            goto LABEL_25;
          }
        }
      }
    }
  }
LABEL_6:
  uint64_t v12 = PersonalizedPsiData;
LABEL_8:
  SafeRelease(v10);
  SafeRelease(v30);
  SafeRelease(v29);
  SafeRelease(v28);
  SafeRelease(v27);
  SafeRelease(v26);
  SafeRelease(v25);
  SafeRelease(cfa);
  return v12;
}

uint64_t AMAuthInstallBasebandICE3CopyNextComponentName(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (!v8) {
    return 1;
  }
  if (*(_DWORD *)(v8 + 4) != 80)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3CopyNextComponentName", (uint64_t)"unsupported chipID: 0x%08x", a4, a5, a6, a7, a8, *(_DWORD *)(v8 + 4));
    return 1;
  }
  if (!*(void *)(v8 + 16))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3CopyNextComponentName", (uint64_t)"missing snum", a4, a5, a6, a7, a8, v13);
    return 1;
  }
  if (*(void *)(v8 + 24)) {
    uint64_t v10 = @"stack.bbfw";
  }
  else {
    uint64_t v10 = @"boot.bbfw";
  }
  CFTypeRef v11 = CFRetain(v10);
  uint64_t result = 0;
  *a2 = v11;
  return result;
}

uint64_t AMAuthInstallBasebandICE3StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_ram.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandICE3StitchRamPsi, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ebl.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandICE3StitchEbl, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_flash.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandICE3StitchFlashPsi, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"stack.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandICE3StitchModemStack, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"world.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandICE3StitchWorld, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Options.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandICE3MeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  int v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    int v3 = BbfwReaderOpen(cf);
    if (!v3)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3MeasureFirmware", (uint64_t)"failed to open bbfw archive for reading", v7, v8, v9, v10, v11, v19);
      uint64_t v4 = 4;
      goto LABEL_10;
    }
    if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"psi_ram.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandICE3MeasureRamPsi, (uint64_t)v3, a3))
    {
      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ebl.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandICE3MeasureEbl, (uint64_t)v3, a3))
      {
        if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"psi_flash.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandICE3MeasureFlashPsi, (uint64_t)v3, a3))
        {
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"stack.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandICE3MeasureModemStack, (uint64_t)v3, a3))
          {
            AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"world.fls", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandICE3MeasureWorld, (uint64_t)v3, a3);
            uint64_t v4 = 0;
            goto LABEL_10;
          }
          uint64_t v18 = "failed to measure: stack.fls";
        }
        else
        {
          uint64_t v18 = "failed to measure: psi_flash.fls";
        }
      }
      else
      {
        uint64_t v18 = "failed to measure: ebl.fls";
      }
    }
    else
    {
      uint64_t v18 = "failed to measure: psi_ram.fls";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3MeasureFirmware", (uint64_t)v18, v12, v13, v14, v15, v16, v19);
    uint64_t v4 = 15;
  }
LABEL_10:
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

BOOL AMAuthInstallBasebandICE3IsSnumValid(const __CFData *a1)
{
  return CFDataGetLength(a1) == 12;
}

BOOL AMAuthInstallBasebandICE3FirmwareSupported(const void *a1)
{
  if (!a1)
  {
    uint64_t v7 = 0;
LABEL_7:
    BOOL v8 = 0;
    goto LABEL_4;
  }
  uint64_t v1 = BbfwReaderOpen(a1);
  uint64_t v7 = (uint64_t)v1;
  if (!v1)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandICE3FirmwareSupported", (uint64_t)"failed to open bbfw archive for reading", v2, v3, v4, v5, v6, v10);
    goto LABEL_7;
  }
  BOOL v8 = BbfwReaderFindFile((uint64_t)v1, @"psi_ram.fls") == 0;
LABEL_4:
  BbfwReaderClose(v7);
  return v8;
}

uint64_t AMAuthInstallBasebandICE3SupportsServerSigning()
{
  return 1;
}

uint64_t AMAuthInstallBasebandJ2StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ENPRG.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchENandprog, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchDbl, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"osbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"amss.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dsp1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dsp2.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"partition.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchPartitionTable, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Options.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandJ2StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandJ2MeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    uint64_t v3 = BbfwReaderOpen(cf);
    if (v3)
    {
      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ENPRG.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureENandprog, (uint64_t)v3, a3))
      {
        if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDbl, (uint64_t)v3, a3))
        {
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"osbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureOsbl, (uint64_t)v3, a3))
          {
            if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"amss.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureAmss, (uint64_t)v3, a3))
            {
              if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dsp1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDsp1, (uint64_t)v3, a3))
              {
                if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dsp2.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDsp2, (uint64_t)v3, a3))
                {
                  if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"partition.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasurePartitionTable, (uint64_t)v3, a3))
                  {
                    uint64_t v4 = 0;
                    goto LABEL_13;
                  }
                  uint64_t v4 = 15;
                  uint64_t v13 = "failed to measure: partition.mbn";
                }
                else
                {
                  uint64_t v4 = 15;
                  uint64_t v13 = "failed to measure: dsp2.mbn";
                }
              }
              else
              {
                uint64_t v4 = 15;
                uint64_t v13 = "failed to measure: dsp1.mbn";
              }
            }
            else
            {
              uint64_t v4 = 15;
              uint64_t v13 = "failed to measure: amss.mbn";
            }
          }
          else
          {
            uint64_t v4 = 15;
            uint64_t v13 = "failed to measure: osbl.mbn";
          }
        }
        else
        {
          uint64_t v4 = 15;
          uint64_t v13 = "failed to measure: dbl.mbn";
        }
      }
      else
      {
        uint64_t v4 = 15;
        uint64_t v13 = "failed to measure: ENPRG.mbn";
      }
    }
    else
    {
      uint64_t v4 = 4;
      uint64_t v13 = "failed to open bbfw archive for reading";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandJ2MeasureFirmware", (uint64_t)v13, v7, v8, v9, v10, v11, v14);
  }
LABEL_13:
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

BOOL AMAuthInstallBasebandJ2IsSnumValid(const __CFData *a1)
{
  return CFDataGetLength(a1) == 4;
}

uint64_t AMAuthInstallBasebandMAV10StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchRestoreSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"acdb.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apps.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dsp3.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"mba.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"qdsp6sw.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"rpm.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"tz.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"wdt.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Options.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandMAV10StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandMAV10MeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    uint64_t v3 = BbfwReaderOpen(cf);
    if (!v3)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandMAV10MeasureFirmware", (uint64_t)"failed to open bbfw archive for reading", v7, v8, v9, v10, v11, v27);
      uint64_t v4 = 4;
      goto LABEL_35;
    }
    if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"acdb.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureAcdb, (uint64_t)v3, a3))AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBasebandMAV10MeasureFirmware", (uint64_t)"missing acdb or failed to measure image", v12, v13, v14, v15, v16, v27); {
    if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"apps.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureApps, (uint64_t)v3, a3))goto LABEL_36;
    }
    int v17 = *(_DWORD *)(*(void *)(a1 + 48) + 4);
    if (v17 != 241889
      && v17 != 520417
      && v17 != 9781473
      && !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dsp3.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDsp3, (uint64_t)v3, a3))
    {
      goto LABEL_36;
    }
    if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"mba.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureMba, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"qdsp6sw.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureQdsp6, (uint64_t)v3, a3))
    {
      goto LABEL_36;
    }
    int v18 = *(_DWORD *)(*(void *)(a1 + 48) + 4);
    if (v18 == 241889 || v18 == 9781473 || v18 == 520417)
    {
      if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureRestoreSbl1Elf, (uint64_t)v3, a3))goto LABEL_36; {
      CFStringRef v19 = @"Info.plist";
      }
      CFDataRef v20 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandGetRestoreSbl1Version;
    }
    else
    {
      CFStringRef v19 = @"restoresbl1.mbn";
      CFDataRef v20 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureRestoreSbl1;
    }
    if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, v19, v20, (uint64_t)v3, a3)
      || !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"rpm.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureRpmElf, (uint64_t)v3, a3))
    {
      goto LABEL_36;
    }
    int v21 = *(_DWORD *)(*(void *)(a1 + 48) + 4);
    if (v21 == 241889 || v21 == 9781473 || v21 == 520417)
    {
      if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureSbl1Elf, (uint64_t)v3, a3))goto LABEL_36; {
      CFStringRef v22 = @"Info.plist";
      }
      char v23 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandGetSbl1Version;
    }
    else
    {
      CFStringRef v22 = @"sbl1.mbn";
      char v23 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureSbl1;
    }
    if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, v22, v23, (uint64_t)v3, a3)
      && AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"tz.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureTz, (uint64_t)v3, a3))
    {
      int v24 = *(_DWORD *)(*(void *)(a1 + 48) + 4);
      CFTypeRef v25 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureWdt;
      if (v24 != 8343777)
      {
        if (v24 != 9572577)
        {
LABEL_34:
          AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"bbcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureBBCFG, (uint64_t)v3, a3);
          uint64_t v4 = 0;
          goto LABEL_35;
        }
        CFTypeRef v25 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureWdtElf;
      }
      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"wdt.mbn", v25, (uint64_t)v3, a3)) {
        goto LABEL_34;
      }
    }
LABEL_36:
    uint64_t v4 = 15;
  }
LABEL_35:
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

uint64_t AMAuthInstallBasebandMAV20StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"acdb.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"aop.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apdp.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apps.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"devcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"hyp.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"qdsp6sw.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sec.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchRestoreSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"multi_image.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchMisc, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"multi_image_qti.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"tz.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Info.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandMAV20StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandMAV20MeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    uint64_t v3 = BbfwReaderOpen(cf);
    if (v3)
    {
      if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"acdb.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureAcdb, (uint64_t)v3, a3))AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBasebandMAV20MeasureFirmware", (uint64_t)"missing acdb or failed to measure image", v12, v13, v14, v15, v16, v18); {
      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureMav20RestoreSbl1Elf, (uint64_t)v3, a3)&& AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"Info.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandGetRestoreSbl1Version, (uint64_t)v3, a3)&& AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureMav20Sbl1Elf, (uint64_t)v3,
      }
                           a3)
        && AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"multi_image.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureMav20MiscElf, (uint64_t)v3, a3)&& AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"Info.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallBasebandGetSbl1Version, (uint64_t)v3, a3))
      {
        AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"bbcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureBBCFG, (uint64_t)v3, a3);
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v4 = 15;
      }
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandMAV20MeasureFirmware", (uint64_t)"failed to open bbfw archive for reading", v7, v8, v9, v10, v11, v18);
      uint64_t v4 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

uint64_t AMAuthInstallBasebandMAV21StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"acdb.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"aop.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apdp.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apps.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"devcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"hyp.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"qdsp6sw.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sec.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchRestoreSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"multi_image.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchMisc, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"multi_image_qti.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"tz.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Info.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"xbl_cfg.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandMAV21StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandN41StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sbl2.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"rpm.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apps.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dsp1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dsp2.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dsp3.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchRestoreSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Options.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandN41StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandN41MeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    uint64_t v3 = BbfwReaderOpen(cf);
    if (v3)
    {
      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureSbl1, (uint64_t)v3, a3)&& AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"sbl2.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureSbl2, (uint64_t)v3, a3)&& AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"rpm.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureRPM, (uint64_t)v3,
                           a3)
        && AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"apps.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureApps, (uint64_t)v3, a3)&& AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dsp1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDsp1, (uint64_t)v3, a3)&& AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dsp2.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDsp2, (uint64_t)v3,
                           a3))
      {
        uint64_t v4 = 15;
        if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dsp3.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDsp3, (uint64_t)v3, a3))
        {
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureRestoreSbl1, (uint64_t)v3, a3))uint64_t v4 = 0; {
          else
          }
            uint64_t v4 = 15;
        }
      }
      else
      {
        uint64_t v4 = 15;
      }
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandN41MeasureFirmware", (uint64_t)"failed to open bbfw archive for reading", v7, v8, v9, v10, v11, v13);
      uint64_t v4 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

uint64_t AMAuthInstallBasebandN41SupportsLocalSigning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(int **)(a1 + 48);
  int v9 = *v8;
  int v10 = v8[2];
  BOOL v11 = v9 == 3 && v10 == 398790697;
  uint64_t v12 = v11;
  if (v11)
  {
    char v13 = "local signing is enabled";
  }
  else
  {
    char v15 = v9;
    char v13 = "local signing is disabled. vendorID=%d certID=%d";
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandN41SupportsLocalSigning", (uint64_t)v13, a4, a5, a6, a7, a8, v15);
  return v12;
}

uint64_t AMAuthInstallBasebandN92StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ENPRG.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchENandprog, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchDbl, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"osbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"amss.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"partition.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchPartitionTable, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Options.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandN92StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandN92MeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    uint64_t v3 = BbfwReaderOpen(cf);
    if (v3)
    {
      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ENPRG.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureENandprog, (uint64_t)v3, a3))
      {
        if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureDbl, (uint64_t)v3, a3))
        {
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"osbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureOsbl, (uint64_t)v3, a3))
          {
            if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"amss.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureAmss, (uint64_t)v3, a3))
            {
              if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"partition.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasurePartitionTable, (uint64_t)v3, a3))
              {
                uint64_t v4 = 0;
                goto LABEL_11;
              }
              uint64_t v4 = 15;
              uint64_t v13 = "failed to measure: partition.mbn";
            }
            else
            {
              uint64_t v4 = 15;
              uint64_t v13 = "failed to measure: amss.mbn";
            }
          }
          else
          {
            uint64_t v4 = 15;
            uint64_t v13 = "failed to measure: osbl.mbn";
          }
        }
        else
        {
          uint64_t v4 = 15;
          uint64_t v13 = "failed to measure: dbl.mbn";
        }
      }
      else
      {
        uint64_t v4 = 15;
        uint64_t v13 = "failed to measure: ENPRG.mbn";
      }
    }
    else
    {
      uint64_t v4 = 4;
      uint64_t v13 = "failed to open bbfw archive for reading";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandN92MeasureFirmware", (uint64_t)v13, v7, v8, v9, v10, v11, v14);
  }
LABEL_11:
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

uint64_t AMAuthInstallBasebandN92LocalProvisionDevice(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  *(unsigned char *)(a1 + 256) = 0;

  return AMAuthInstallBasebandRembrandtLocalProvisionDevice();
}

uint64_t AMAuthInstallBasebandN94StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"dbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchEDbl, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restoredbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchRestoreDbl, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"osbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"amss.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Options.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandN94StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandN94MeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    uint64_t v3 = BbfwReaderOpen(cf);
    if (v3)
    {
      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"dbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureEDbl, (uint64_t)v3, a3))
      {
        if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restoredbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureRestoreDbl, (uint64_t)v3, a3))
        {
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"osbl.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureOsbl, (uint64_t)v3, a3))
          {
            if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"amss.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallMonetMeasureAmss, (uint64_t)v3, a3))
            {
              uint64_t v4 = 0;
              goto LABEL_10;
            }
            uint64_t v4 = 15;
            uint64_t v13 = "failed to measure: amss.mbn";
          }
          else
          {
            uint64_t v4 = 15;
            uint64_t v13 = "failed to measure: osbl.mbn";
          }
        }
        else
        {
          uint64_t v4 = 15;
          uint64_t v13 = "failed to measure: restoredbl.mbn";
        }
      }
      else
      {
        uint64_t v4 = 15;
        uint64_t v13 = "failed to measure: dbl.mbn";
      }
    }
    else
    {
      uint64_t v4 = 4;
      uint64_t v13 = "failed to open bbfw archive for reading";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandN94MeasureFirmware", (uint64_t)v13, v7, v8, v9, v10, v11, v14);
  }
LABEL_10:
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

__CFDictionary *AMAuthInstallUpdaterCryptex1LocalPolicyCopyDeviceInfo(const void **a1, void *a2, const void *a3, const void *a4, const __CFUUID *a5)
{
  *(void *)&bytes.byte8 = 0;
  CFDictionaryRef theDict = 0;
  *(void *)&bytes.byte0 = 0;
  if (!a1) {
    goto LABEL_18;
  }
  AMAuthInstallApCopyParameters(a1, (CFTypeRef *)&theDict);
  if (!theDict) {
    goto LABEL_18;
  }
  value = a2;
  uint64_t v9 = CFDictionaryGetValue(theDict, @"ApBoardID");
  uint64_t v10 = CFDictionaryGetValue(theDict, @"ApChipID");
  uint64_t v11 = CFDictionaryGetValue(theDict, @"ECID");
  uint64_t v12 = CFDictionaryGetValue(theDict, @"ApProductionMode");
  uint64_t v13 = CFDictionaryGetValue(theDict, @"ApSecurityDomain");
  char v14 = CFDictionaryGetValue(theDict, @"ApSecurityMode");
  if (!v9) {
    goto LABEL_18;
  }
  if (v10 && v11 && v12 && v13 && (char v15 = v14) != 0)
  {
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 10, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    int v17 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"ApBoardID", v9);
      CFDictionarySetValue(v17, @"ApChipID", v10);
      CFDictionarySetValue(v17, @"ApECID", v11);
      CFDictionarySetValue(v17, @"ApProductionMode", v12);
      CFDictionarySetValue(v17, @"ApSecurityDomain", v13);
      CFDictionarySetValue(v17, @"ApSecurityMode", v15);
      if (value) {
        CFDictionarySetValue(v17, @"Ap,RecoveryOSPolicyNonceHash", value);
      }
      if (a3) {
        CFDictionarySetValue(v17, @"Ap,NextStageIM4MHash", a3);
      }
      if (a4) {
        CFDictionarySetValue(v17, @"Ap,NextStageCryptex1IM4MHash", a4);
      }
      if (a5)
      {
        CFUUIDBytes bytes = CFUUIDGetUUIDBytes(a5);
        CFDataRef v18 = CFDataCreate(allocator, &bytes.byte0, 16);
        CFDictionarySetValue(v17, @"Ap,VolumeUUID", v18);
      }
    }
    else
    {
      AMSupportCreateErrorInternal();
    }
  }
  else
  {
LABEL_18:
    AMSupportCreateErrorInternal();
    int v17 = 0;
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v17;
}

uint64_t AMAuthInstallUpdaterCryptex1LocalPolicySetInfo(const void **a1, const __CFURL *a2, void *a3, uint64_t a4, const void *a5, void *a6, const void *a7, const void *a8, const __CFUUID *a9, uint64_t a10)
{
  char v15 = AMAuthInstallUpdaterCryptex1LocalPolicyCopyDeviceInfo(a1, a6, a7, a8, a9);
  if (v15) {
    uint64_t v16 = AMAuthInstallUpdaterSetInfo((uint64_t)a1, @"Cryptex1LocalPolicy", v15, a2, a3, a4, a5, 0, 0, a10);
  }
  else {
    uint64_t v16 = 1;
  }
  AMSupportSafeRelease();
  return v16;
}

CFDictionaryRef AMAuthInstallUpdaterCryptex1LocalPolicyCopyTicket(const void *a1, const __CFURL *a2)
{
  CFDictionaryRef result = AMAuthInstallUpdaterCopyResponse(a1, @"Cryptex1LocalPolicy", a2);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"ApImg4Ticket");
    if (!result)
    {
      AMSupportCreateErrorInternal();
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallUpdaterCryptex1LocalPolicyStitchTicketData(const void *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v3 = 1;
  if (a1 && a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionaryRef v8 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"ApImg4Ticket", a2);
      uint64_t v3 = AMAuthInstallLocalPolicyStitchTicketData(a1, v8, a3);
    }
    else
    {
      uint64_t v3 = 2;
    }
  }
  AMSupportSafeRelease();
  return v3;
}

__CFDictionary *AMAuthInstallUpdaterCryptex1LocalPolicyGetTags()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable && (uint64_t v2 = CFArrayCreateMutable(v0, 1, MEMORY[0x263EFFF70]), (v3 = v2) != 0))
  {
    CFArrayAppendValue(v2, @"ApImg4Ticket");
    uint64_t v4 = CFDictionaryCreateMutable(v0, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v5 = v4;
    if (v4)
    {
      CFDictionaryAddValue(v4, @"BuildIdentityTags", Mutable);
      CFDictionaryAddValue(v5, @"ResponseTags", v3);
    }
    else
    {
      AMSupportCreateErrorInternal();
    }
  }
  else
  {
    AMSupportCreateErrorInternal();
    uint64_t v5 = 0;
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v5;
}

CFMutableDictionaryRef AMAuthInstallUpdaterCryptex1LocalPolicyCopyFirmware()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    AMSupportCreateErrorInternal();
  }
  return Mutable;
}

__CFDictionary *AMAuthInstallUpdaterCryptex1LocalPolicyCreateRequest(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    goto LABEL_12;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"DeviceInfo");
  if (!Value) {
    goto LABEL_12;
  }
  CFDictionaryRef v5 = Value;
  uint64_t v6 = CFArrayCreateMutable(v2, 13, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(v6, @"ApBoardID");
  CFArrayAppendValue(v6, @"ApChipID");
  CFArrayAppendValue(v6, @"ApECID");
  CFArrayAppendValue(v6, @"ApProductionMode");
  CFArrayAppendValue(v6, @"ApSecurityDomain");
  CFArrayAppendValue(v6, @"ApSecurityMode");
  CFArrayAppendValue(v6, @"Ap,RecoveryOSPolicyNonceHash");
  CFArrayAppendValue(v6, @"Ap,NextStageIM4MHash");
  CFArrayAppendValue(v6, @"Ap,NextStageCryptex1IM4MHash");
  CFArrayAppendValue(v6, @"Ap,VolumeUUID");
  if (CFArrayGetCount(v6) >= 1)
  {
    CFIndex v7 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v7);
      uint64_t v9 = CFDictionaryGetValue(v5, ValueAtIndex);
      if (v9) {
        CFDictionarySetValue(Mutable, ValueAtIndex, v9);
      }
      ++v7;
    }
    while (v7 < CFArrayGetCount(v6));
  }
  uint64_t v10 = (const void *)*MEMORY[0x263EFFB40];
  CFDictionarySetValue(Mutable, @"@ApImg4Ticket", (const void *)*MEMORY[0x263EFFB40]);
  CFDictionarySetValue(Mutable, @"Ap,LocalBoot", v10);
  uint64_t v11 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v11 && (CFDataRef v12 = AMAuthInstallLocalPolicyCopyPayloadDigestSHA384()) != 0)
  {
    CFDictionarySetValue(v11, @"Digest", v12);
    CFDictionarySetValue(v11, @"Trusted", v10);
    CFDictionarySetValue(Mutable, @"Ap,LocalPolicy", v11);
    AMSupportSafeRelease();
    AMSupportSafeRelease();
  }
  else
  {
LABEL_12:
    AMSupportCreateErrorInternal();
    AMSupportSafeRelease();
    AMSupportSafeRelease();
    AMSupportSafeRelease();
    CFMutableDictionaryRef Mutable = 0;
  }
  AMSupportSafeRelease();
  return Mutable;
}

uint64_t AMAuthInstallIsICE19BBGoldCertIDECDSA(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallIsICE19BBGoldCertIDECDSA", (uint64_t)"GoldCertId: %X\n", a4, a5, a6, a7, a8, a1);
  BOOL v9 = a1 == 653523660 || a1 == 1559424078;
  return a1 == -2087094182 || v9;
}

uint64_t AMAuthInstallBasebandRembrandtStitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    uint64_t v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v16 = *(void *)(a1 + 48);
      switch(*(_DWORD *)(v16 + 4))
      {
        case '^':
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedPSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedRestorePSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"TDSFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"3GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"2GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"AudioFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Debug_info.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"RPCU.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"DPC.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"CDMA2KFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          CFStringRef v17 = @"custpack.elf";
          goto LABEL_15;
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedPSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedRestorePSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"TDSFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          CFStringRef v17 = @"bbcfg.bin";
          goto LABEL_15;
        case 'e':
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedPSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedRestorePSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"TDSFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"3GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"2GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"AudioFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          CFStringRef v17 = @"Debug_info.elf";
          goto LABEL_15;
        case 'g':
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedPSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedRestorePSI, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"3GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"AudioFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Debug_info.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"GNSS_FW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          CFStringRef v17 = @"irx_coefficient.elf";
          goto LABEL_15;
        case 'h':
          if (AMAuthInstallIsICE19BBGoldCertIDECDSA(*(_DWORD *)(v16 + 8), v9, v10, v11, v12, v13, v14, v15))
          {
            AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedPSI, (uint64_t)v4, a3, a4);
            CFStringRef v18 = @"restorepsi.bin";
            CFStringRef v19 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedRestorePSI;
          }
          else
          {
            AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"psi_ram2.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedPSI2, (uint64_t)v4, a3, a4);
            CFStringRef v18 = @"restorepsi2.bin";
            CFStringRef v19 = (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallRembrandtCreateStitchedRestorePSI2;
          }
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, v18, v19, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"custpack.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"TPCU.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"upc.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"legacy_rat_fw.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          CFStringRef v17 = @"ant_cfg_data.elf";
LABEL_15:
          AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, v17, (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
          uint64_t v5 = 0;
          break;
        default:
          break;
      }
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandRembrandtStitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v11, v12, v13, v14, v15, v21);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

uint64_t AMAuthInstallBasebandRembrandtMeasureFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && cf && a3)
  {
    uint64_t v3 = BbfwReaderOpen(cf);
    if (v3)
    {
      uint64_t v4 = 0;
      switch(*(_DWORD *)(*(void *)(a1 + 48) + 4))
      {
        case '^':
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRestorePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureEBL, (uint64_t)v3,
                                a3))
          {
            goto LABEL_72;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureSystemSoftware, (uint64_t)v3, a3))goto LABEL_74; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"TDSFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureTDS, (uint64_t)v3, a3))goto LABEL_78;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureLTE, (uint64_t)v3, a3))goto LABEL_76; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureBBCFG, (uint64_t)v3, a3))goto LABEL_75;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"3GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasure3GFW, (uint64_t)v3, a3))goto LABEL_79; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"2GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasure2GFW, (uint64_t)v3, a3))goto LABEL_82;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRFFW, (uint64_t)v3, a3))goto LABEL_77; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"AudioFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureAudioFW, (uint64_t)v3, a3))goto LABEL_80;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"Debug_info.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureDebugInfo, (uint64_t)v3, a3))goto LABEL_81; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"RPCU.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRPCU, (uint64_t)v3, a3))
          }
          {
            uint64_t v4 = 15;
            uint64_t v12 = "failed to measure: RPCU.elf";
            break;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"DPC.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureDPC, (uint64_t)v3, a3))
          {
            uint64_t v4 = 15;
            uint64_t v12 = "failed to measure: DPC.elf";
            break;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"CDMA2KFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureC2K, (uint64_t)v3, a3))
          {
            uint64_t v4 = 15;
            uint64_t v12 = "failed to measure: CDMA2KFW.elf";
            break;
          }
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"custpack.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurecustpack, (uint64_t)v3, a3))goto LABEL_70; {
          goto LABEL_83;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRestorePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureEBL, (uint64_t)v3,
                                a3))
          {
            goto LABEL_72;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureSystemSoftware, (uint64_t)v3, a3))goto LABEL_74; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"TDSFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureTDS, (uint64_t)v3, a3))goto LABEL_78;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureLTE, (uint64_t)v3, a3))goto LABEL_76; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureBBCFG, (uint64_t)v3, a3))goto LABEL_75;
          }
          goto LABEL_70;
        case 'e':
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRestorePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureEBL, (uint64_t)v3,
                                a3))
          {
            goto LABEL_72;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureSystemSoftware, (uint64_t)v3, a3))goto LABEL_74; {
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"TDSFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureTDS, (uint64_t)v3, a3))
          }
          {
            if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureLTE, (uint64_t)v3, a3))
            {
              if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureBBCFG, (uint64_t)v3, a3))goto LABEL_75; {
              if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"3GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasure3GFW, (uint64_t)v3, a3))
              }
              {
                if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"2GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasure2GFW, (uint64_t)v3, a3))
                {
                  if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRFFW, (uint64_t)v3, a3))goto LABEL_77; {
                  if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"AudioFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureAudioFW, (uint64_t)v3, a3))
                  }
                  {
                    if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"Debug_info.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureDebugInfo, (uint64_t)v3, a3))goto LABEL_70; {
LABEL_81:
                    }
                    uint64_t v4 = 15;
                    uint64_t v12 = "failed to measure: Debug_info.elf";
                  }
                  else
                  {
LABEL_80:
                    uint64_t v4 = 15;
                    uint64_t v12 = "failed to measure: AudioFW.elf";
                  }
                }
                else
                {
LABEL_82:
                  uint64_t v4 = 15;
                  uint64_t v12 = "failed to measure: 2GFW.elf";
                }
              }
              else
              {
LABEL_79:
                uint64_t v4 = 15;
                uint64_t v12 = "failed to measure: 3GFW.elf";
              }
            }
            else
            {
LABEL_76:
              uint64_t v4 = 15;
              uint64_t v12 = "failed to measure: LTE.elf";
            }
          }
          else
          {
LABEL_78:
            uint64_t v4 = 15;
            uint64_t v12 = "failed to measure: TDS.elf";
          }
          break;
        case 'g':
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRestorePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureEBL, (uint64_t)v3,
                                a3))
          {
            goto LABEL_72;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureSystemSoftware, (uint64_t)v3, a3))goto LABEL_74; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"LTEFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureLTE, (uint64_t)v3, a3))goto LABEL_76;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureBBCFG, (uint64_t)v3, a3))goto LABEL_75; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"3GFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasure3GFW, (uint64_t)v3, a3))goto LABEL_79;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRFFW, (uint64_t)v3, a3))goto LABEL_77; {
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"AudioFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureAudioFW, (uint64_t)v3, a3))goto LABEL_80;
          }
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"Debug_info.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureDebugInfo, (uint64_t)v3, a3))goto LABEL_81; {
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"GNSS_FW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureGNSSFW, (uint64_t)v3, a3))
          }
          {
            if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"irx_coefficient.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureIRXCoefficient, (uint64_t)v3, a3))goto LABEL_70; {
            uint64_t v4 = 15;
            }
            uint64_t v12 = "failed to measure: irx_coefficient.elf";
          }
          else
          {
            uint64_t v4 = 15;
            uint64_t v12 = "failed to measure: GNSS_FW.elf";
          }
          break;
        case 'h':
          if (!AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"psi_ram.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"restorepsi.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRestorePSI, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(0, a1, @"psi_ram2.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurePSI2, (uint64_t)v3,
                                a3)
            || !AMAuthInstallBasebandMeasureFirmwareFromBbfw(0, a1, @"restorepsi2.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRestorePSI2, (uint64_t)v3, a3)|| !AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ebl.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureEBL, (uint64_t)v3, a3))
          {
LABEL_72:
            uint64_t v4 = 15;
            goto LABEL_71;
          }
          if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"SYS_SW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureSystemSoftware, (uint64_t)v3, a3))
          {
            if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"bbcfg.bin", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureBBCFG, (uint64_t)v3, a3))
            {
              if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"RFFW.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureRFFW, (uint64_t)v3, a3))
              {
                if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"custpack.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasurecustpack, (uint64_t)v3, a3))
                {
                  if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"ant_cfg_data.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureAntCfg, (uint64_t)v3, a3))
                  {
                    if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"TPCU.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureTPCU, (uint64_t)v3, a3))
                    {
                      if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"upc.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureUPC, (uint64_t)v3, a3))
                      {
                        if (AMAuthInstallBasebandMeasureFirmwareFromBbfw(1, a1, @"legacy_rat_fw.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t))AMAuthInstallRembrandtMeasureLegacyRat, (uint64_t)v3, a3))
                        {
LABEL_70:
                          uint64_t v4 = 0;
                          goto LABEL_71;
                        }
                        uint64_t v4 = 15;
                        uint64_t v12 = "failed to measure: legacy_rat_fw.elf";
                      }
                      else
                      {
                        uint64_t v4 = 15;
                        uint64_t v12 = "failed to measure: upc.elf";
                      }
                    }
                    else
                    {
                      uint64_t v4 = 15;
                      uint64_t v12 = "failed to measure: TPCU.elf";
                    }
                  }
                  else
                  {
                    uint64_t v4 = 15;
                    uint64_t v12 = "failed to measure: ant_cfg_data.elf";
                  }
                }
                else
                {
LABEL_83:
                  uint64_t v4 = 15;
                  uint64_t v12 = "failed to measure: custpack.elf";
                }
              }
              else
              {
LABEL_77:
                uint64_t v4 = 15;
                uint64_t v12 = "failed to measure: RFFW.elf";
              }
            }
            else
            {
LABEL_75:
              uint64_t v4 = 15;
              uint64_t v12 = "failed to measure: bbcfg.bin";
            }
          }
          else
          {
LABEL_74:
            uint64_t v4 = 15;
            uint64_t v12 = "failed to measure: SYS_SW.elf";
          }
          break;
        default:
          goto LABEL_71;
      }
    }
    else
    {
      uint64_t v4 = 4;
      uint64_t v12 = "failed to open bbfw archive for reading";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandRembrandtMeasureFirmware", (uint64_t)v12, v7, v8, v9, v10, v11, v14);
  }
LABEL_71:
  BbfwReaderClose((uint64_t)v3);
  return v4;
}

uint64_t AMAuthInstallBasebandRembrandtSupportsServerSigning(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 + 48) + 4) - 94;
  if (v1 > 0xA) {
    return 0;
  }
  else {
    return byte_217B2FE67[v1];
  }
}

uint64_t AMAuthInstallBasebandRembrandtLocalProvisionDevice()
{
  return 13;
}

uint64_t AMAuthInstallBasebandVinylStitchFirmware(void *a1, const void *a2, const void *a3, const __CFDictionary *a4, __CFDictionary *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (!a1 || !a1[6]) {
    return 1;
  }
  CFDataRef MutableCopy = 0;
  v38[1] = a5;
  uint64_t v39 = 0;
  v38[0] = a1;
  BOOL v11 = a2 != 0;
  if (a3) {
    BOOL v11 = 0;
  }
  LOBYTE(v39) = v11;
  if (a3) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = a2;
  }
  uint64_t v13 = 1;
  if (!a5 || !a4)
  {
    CFDataRef v15 = 0;
    CFStringRef v16 = 0;
    goto LABEL_25;
  }
  CFDataRef v15 = 0;
  CFStringRef v16 = 0;
  if (v12)
  {
    uint64_t v17 = BbfwReaderStart(v12, (uint64_t (*)(uint64_t, CFStringRef, void *))_VinylBBFWReaderCB, (uint64_t)v38);
    if (v17)
    {
      uint64_t v13 = v17;
      AMAuthInstallLog(3, (uint64_t)"_VinylStitchInternal", (uint64_t)"Failed to copy unperso'd Vinyl files", v18, v19, v20, v21, v22, v36);
    }
    else
    {
      if (!*(void *)(a1[6] + 160))
      {
        CFDataRef MutableCopy = 0;
        CFDataRef v15 = 0;
        CFStringRef v16 = 0;
        goto LABEL_22;
      }
      BOOL v37 = 0;
      uint64_t IsLegacyChipId = AMAuthInstallVinylIsLegacyChipId(a1, &v37);
      if (!IsLegacyChipId)
      {
        if (v37)
        {
          CFDataRef MutableCopy = 0;
          CFDataRef v15 = 0;
          CFStringRef v16 = @"vinyl";
LABEL_22:
          uint64_t v27 = _VinylPopulateDstEntry(v16, @"/update/main/ticket.der", a4, @"EuiccMainTicket", a5);
          if (!v27) {
            uint64_t v27 = _VinylPopulateDstEntry(v16, @"/update/gold/ticket.der", a4, @"EuiccGoldTicket", a5);
          }
          uint64_t v13 = v27;
          goto LABEL_25;
        }
        CFDataRef v24 = *(const __CFData **)(a1[6] + 152);
        if (v24)
        {
          CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFDataRef MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v24);
          if (MutableCopy)
          {
            CFDataRef v26 = *(const __CFData **)(a1[6] + 168);
            if (!v26 || AMAuthInstallVinylCheckVinylFwLdrVerLegacy(v26))
            {
              CFStringRef v16 = (const __CFString *)_CopyHexStringFromData(v25, MutableCopy);
              CFDataRef v15 = 0;
              if (v16) {
                goto LABEL_22;
              }
              goto LABEL_29;
            }
            BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1[6] + 168));
            CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1[6] + 168));
            CFDataAppendBytes(MutableCopy, BytePtr, Length - 1);
            CFDataGetBytePtr(MutableCopy);
            CFDataGetLength(MutableCopy);
            if (!AMSupportDigestSha256())
            {
              CFDataRef v15 = CFDataCreate(v25, bytes, 32);
              CFStringRef v16 = (const __CFString *)_CopyHexStringFromData(v25, v15);
              if (v16) {
                goto LABEL_22;
              }
LABEL_29:
              uint64_t v13 = 2;
              goto LABEL_25;
            }
            AMAuthInstallLog(3, (uint64_t)"_VinylStitchInternal", (uint64_t)"failed to compute digest", v31, v32, v33, v34, v35, v36);
            uint64_t v13 = 5;
          }
          else
          {
            uint64_t v13 = 2;
          }
        }
        else
        {
          CFDataRef MutableCopy = 0;
          uint64_t v13 = 8;
        }
LABEL_35:
        CFDataRef v15 = 0;
        CFStringRef v16 = 0;
        goto LABEL_25;
      }
      uint64_t v13 = IsLegacyChipId;
    }
    CFDataRef MutableCopy = 0;
    goto LABEL_35;
  }
LABEL_25:
  AMAuthInstallLog(6, (uint64_t)"_VinylStitchInternal", (uint64_t)"%d", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v13);
  SafeRelease(MutableCopy);
  SafeRelease(v16);
  SafeRelease(v15);
  return v13;
}

uint64_t AMAuthInstallBasebandVinylCreateMeasurements(uint64_t a1, CFTypeRef cf, __CFDictionary *a3)
{
  v16[4] = *MEMORY[0x263EF8340];
  value = 0;
  v16[0] = @"EUICCSignedProfileMain";
  v16[1] = @"vinyl/update/main/signedprofile.der";
  v16[2] = @"EUICCSignedProfileGold";
  v16[3] = @"vinyl/update/gold/signedprofile.der";
  if (a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
    if (a3 && cf && *(void *)(a1 + 48))
    {
      uint64_t v4 = BbfwReaderOpen(cf);
      if (v4)
      {
        uint64_t v11 = 0;
        char v12 = 1;
        do
        {
          char v13 = v12;
          if (!BbfwReaderFindAndCopyFileData((uint64_t)v4, (const __CFString *)v16[2 * v11 + 1], (CFTypeRef *)&value))
          {
            CFDictionarySetValue(a3, (const void *)v16[2 * v11], value);
            SafeRelease(value);
            value = 0;
          }
          char v12 = 0;
          uint64_t v11 = 1;
        }
        while ((v13 & 1) != 0);
        uint64_t v5 = 0;
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandVinylCreateMeasurements", (uint64_t)"failed to open bbfw archive for reading", v6, v7, v8, v9, v10, (char)value);
        uint64_t v5 = 4;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
  }
  BbfwReaderClose((uint64_t)v4);
  SafeRelease(value);
  return v5;
}

uint64_t AMAuthInstallBasebandVinylAddMeasurementTags(uint64_t a1, CFDictionaryRef theDict)
{
  if (!a1) {
    return 1;
  }
  if (!*(void *)(a1 + 48)) {
    return 1;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"BasebandFirmware");
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    LODWORD(Value) = TypeID == CFGetTypeID(Value)
                  && CFDictionaryContainsKey((CFDictionaryRef)Value, @"EUICCSignedProfileMain") != 0;
  }
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBasebandVinylAddMeasurementTags", (uint64_t)"Vinyl Tags %d Measurements %d", v4, v5, v6, v7, v8, *(void *)(*(void *)(a1 + 48) + 120) != 0);
  uint64_t v11 = *(void **)(a1 + 48);
  char v12 = (const void *)v11[15];
  if (!v12 || !v11[16]) {
    return 8;
  }
  uint64_t result = 8;
  if (Value && v11[19])
  {
    CFDictionarySetValue(theDict, @"EUICCCSN", v12);
    char v14 = *(void **)(a1 + 48);
    CFDataRef v15 = (const void *)v14[16];
    if (v15)
    {
      CFDictionarySetValue(theDict, @"EUICCMainNonce", v15);
      char v14 = *(void **)(a1 + 48);
    }
    CFStringRef v16 = (const void *)v14[17];
    if (v16)
    {
      CFDictionarySetValue(theDict, @"EUICCGoldNonce", v16);
      char v14 = *(void **)(a1 + 48);
    }
    uint64_t v17 = (const void *)v14[18];
    if (v17)
    {
      CFDictionarySetValue(theDict, @"EUICCTicketVersion", v17);
      char v14 = *(void **)(a1 + 48);
    }
    uint64_t v18 = (const void *)v14[19];
    if (v18)
    {
      CFDictionarySetValue(theDict, @"EUICCCertIdentifier", v18);
      char v14 = *(void **)(a1 + 48);
    }
    uint64_t v19 = (const void *)v14[20];
    if (v19)
    {
      CFDictionarySetValue(theDict, @"EUICCChipID", v19);
      char v14 = *(void **)(a1 + 48);
    }
    uint64_t v20 = (const void *)v14[21];
    if (v20) {
      CFDictionarySetValue(theDict, @"EUICCFirmwareLoaderVersion", v20);
    }
    CFDictionarySetValue(theDict, @"@EUICCTicket", (const void *)*MEMORY[0x263EFFB40]);
    return 0;
  }
  return result;
}

uint64_t _VinylBBFWReaderCB(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  value = 0;
  if (!a1 || !*(void *)a1 || !theString || !a3 || !*(void *)(a1 + 8))
  {
    uint64_t v18 = "Null inputs";
LABEL_15:
    AMAuthInstallLog(3, (uint64_t)"_VinylBBFWReaderCB", (uint64_t)v18, a4, a5, a6, a7, a8, v19);
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 16) && !CFStringHasPrefix(theString, @"vinyl")) {
    return 1;
  }
  if (BbfwReaderFindAndCopyFileData(a3, theString, (CFTypeRef *)&value))
  {
    char v19 = (char)theString;
    uint64_t v18 = "Failed copying %@ %d";
    goto LABEL_15;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), theString, value);
  AMAuthInstallLog(3, (uint64_t)"_VinylBBFWReaderCB", (uint64_t)"Vinyl copied %@", v11, v12, v13, v14, v15, (char)theString);
  uint64_t v16 = 1;
LABEL_10:
  SafeRelease(value);
  return v16;
}

uint64_t _VinylPopulateDstEntry(const __CFString *a1, const __CFString *a2, CFDictionaryRef theDict, void *key, __CFDictionary *a5)
{
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(Value))
    {
      CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
      uint64_t v11 = Mutable;
      if (Mutable)
      {
        CFStringAppend(Mutable, a1);
        CFStringAppend(v11, a2);
        CFDictionarySetValue(a5, v11, Value);
        SafeRetain(Value);
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = 2;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 17;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  SafeRelease(v11);
  SafeRelease(Value);
  return v12;
}

uint64_t AMAuthInstallBasebandVinylLocalHandleRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandVinylLocalHandleRequest", (uint64_t)"VinylLocal on device? Success!", a4, a5, a6, a7, a8, vars0);
  return 0;
}

void AMAuthInstallBundleFinalize(uint64_t a1)
{
  int v1 = *(CFTypeRef **)(a1 + 128);
  if (v1)
  {
    SafeRelease(*v1);
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 128) + 8));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 128) + 16));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 128) + 24));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 128) + 32));
    SafeRelease(*(CFTypeRef *)(*(void *)(a1 + 128) + 40));
    SafeFree(*(void **)(a1 + 128));
    *(void *)(a1 + 128) = 0;
  }
}

uint64_t AMAuthInstallBundleCopyNextBasebandComponentName(const void *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v16 = 0;
  uint64_t v10 = AMAuthInstallBasebandCopyNextComponentName((uint64_t)a1, &v16, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    uint64_t v14 = v10;
    CFStringRef v13 = 0;
  }
  else
  {
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFStringRef v12 = CFStringCreateWithFormat(v11, 0, @"%s/%@", "amai", v16);
    CFStringRef v13 = v12;
    if (v12)
    {
      uint64_t v14 = 0;
      *a2 = CFRetain(v12);
    }
    else
    {
      uint64_t v14 = 2;
    }
  }
  SafeRelease(v16);
  SafeRelease(v13);
  return v14;
}

uint64_t AMAuthInstallBundleCopyPublishedVariantsArray(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  CFDictionaryRef theDict = 0;
  CFURLRef v26 = 0;
  uint64_t DictionaryFromFileURL = AMAuthInstallPlatformCopyURLWithAppendedComponent(a1, a2, @"BuildManifest.plist", 0, &v26);
  if (!DictionaryFromFileURL)
  {
    if (!AMAuthInstallSupportCreateDictionaryFromFileURL(a1, (CFTypeRef *)&theDict, v26)
      || (AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPublishedVariantsArray", (uint64_t)"No build manifest. Checking for a different file.", v8, v9, v10, v11, v12, v24), SafeRelease(v26), CFURLRef v26 = 0, DictionaryFromFileURL = AMAuthInstallPlatformCopyURLWithAppendedComponent(a1, a2, @"BuildManifesto.plist", 0, &v26), !DictionaryFromFileURL)&& (DictionaryFromFileURL = AMAuthInstallSupportCreateDictionaryFromFileURL(a1, (CFTypeRef *)&theDict, v26),
          !DictionaryFromFileURL))
    {
      CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"BuildIdentities");
      if (Value)
      {
        uint64_t DictionaryFromFileURL = 0;
        *a3 = CFRetain(Value);
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPublishedVariantsArray", (uint64_t)"the specified restore bundle contains a malformed build manifest", v14, v15, v16, v17, v18, v24);
        AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleCopyPublishedVariantsArray", (uint64_t)"bundle: %@", v19, v20, v21, v22, v23, (char)a2);
        uint64_t DictionaryFromFileURL = 1;
      }
    }
  }
  SafeRelease(v26);
  SafeRelease(theDict);
  return DictionaryFromFileURL;
}

uint64_t AMAuthInstallBundleCopyBuildIdentityForVariant(uint64_t a1, const void *a2, CFStringRef theString1, CFTypeRef *a4)
{
  CFArrayRef v160 = 0;
  CFStringRef v159 = @"ApBoardID";
  CFStringRef v158 = @"ApChipID";
  CFStringRef v4 = @"ApSecurityDomain";
  if (!a1)
  {
    CFArrayRef v6 = 0;
    uint64_t v7 = 1;
    goto LABEL_99;
  }
  CFArrayRef v6 = 0;
  uint64_t v7 = 1;
  if (a4)
  {
    if (a2)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      if (v10)
      {
        int v13 = *(_DWORD *)(v10 + 8);
        int v12 = *(_DWORD *)(v10 + 12);
        int v156 = *(_DWORD *)(v10 + 16);
        uint64_t v14 = *(void *)(v10 + 144);
        if (v14)
        {
          CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          char v148 = v14;
          CFStringRef v158 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@,%@");
          if (v158)
          {
            uint64_t v149 = *(void *)(*(void *)(a1 + 16) + 144);
            CFStringRef v159 = CFStringCreateWithFormat(v15, 0, @"%@,%@");
            if (v159)
            {
              uint64_t v147 = *(void *)(*(void *)(a1 + 16) + 144);
              CFStringRef v4 = CFStringCreateWithFormat(v15, 0, @"%@,%@");
              if (v4) {
                goto LABEL_9;
              }
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"failed secdomKey allocation", v26, v27, v28, v29, v30, v147);
              CFArrayRef v6 = 0;
            }
            else
            {
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"failed boardKey allocation", v21, v22, v23, v24, v25, v149);
              CFArrayRef v6 = 0;
              CFStringRef v159 = 0;
            }
          }
          else
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"failed chipKey allocation", v16, v17, v18, v19, v20, v148);
            CFArrayRef v6 = 0;
            CFStringRef v158 = 0;
          }
          uint64_t v7 = 99;
          goto LABEL_99;
        }
LABEL_9:
        CFBooleanRef IsRecoveryVariant = (const __CFBoolean *)_AMAuthInstallIsRecoveryVariant(a1, theString1);
        CFBooleanRef v37 = IsRecoveryVariant;
        uint64_t v38 = *(void *)(a1 + 128);
        if (!v38 || !*(void *)(v38 + 32)) {
          goto LABEL_13;
        }
        int Value = CFBooleanGetValue(IsRecoveryVariant);
        uint64_t v40 = *(void *)(a1 + 128);
        if (Value)
        {
          uint64_t v41 = *(const void **)(v40 + 40);
          if (!v41)
          {
LABEL_13:
            if (theString1)
            {
              CFBooleanGetValue(v37);
              AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"searching for variant %@ (%d recovery)", v42, v43, v44, v45, v46, (char)theString1);
            }
            else
            {
              AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"variant not specified, will use first variant found for this device in build manifest", v32, v33, v34, v35, v36, v147);
            }
            CFAllocatorRef v47 = CFGetAllocator((CFTypeRef)a1);
            uint64_t v48 = AMAuthInstallBundleCopyPublishedVariantsArray(v47, a2, (CFTypeRef *)&v160);
            if (v48)
            {
              uint64_t v7 = v48;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"AMAuthInstallBundleCopyPublishedVariantsArray failed", v49, v50, v51, v52, v53, v150);
              CFArrayRef v6 = v160;
              goto LABEL_99;
            }
            CFArrayRef v6 = v160;
            if (v160)
            {
              CFTypeID v54 = CFGetTypeID(v160);
              if (v54 == CFArrayGetTypeID())
              {
                CFIndex Count = CFArrayGetCount(v6);
                uint64_t v151 = a4;
                CFStringRef theString2 = theString1;
                CFBooleanRef BOOLean = v37;
                if (!*(unsigned char *)(*(void *)(a1 + 16) + 96))
                {
                  uint64_t v61 = *(void *)(a1 + 48);
                  if (v61)
                  {
                    int v154 = *(_DWORD *)(v61 + 4);
                    int v155 = 1;
LABEL_23:
                    if (Count >= 1)
                    {
                      for (CFIndex i = 0; Count != i; ++i)
                      {
                        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, i);
                        if (!ValueAtIndex) {
                          continue;
                        }
                        CFDictionaryRef v64 = ValueAtIndex;
                        CFTypeID v65 = CFGetTypeID(ValueAtIndex);
                        if (v65 != CFDictionaryGetTypeID()
                          || !AMAuthInstallSupportCompareStringToInt32(v64, v159, v12)
                          || !AMAuthInstallSupportCompareStringToInt32(v64, v158, v13)
                          || CFDictionaryGetValue(v64, v4)
                          && !AMAuthInstallSupportCompareStringToInt32(v64, v4, v156))
                        {
                          continue;
                        }
                        if (v155
                          && !AMAuthInstallSupportCompareStringToInt32(v64, @"BbChipID", v154))
                        {
                          continue;
                        }
                        CFDictionaryRef v66 = (const __CFDictionary *)CFDictionaryGetValue(v64, @"Info");
                        if (!v66) {
                          continue;
                        }
                        CFDictionaryRef v67 = v66;
                        CFStringRef v68 = v4;
                        CFTypeID v69 = CFGetTypeID(v66);
                        BOOL v70 = v69 == CFDictionaryGetTypeID();
                        CFStringRef v4 = v68;
                        if (!v70) {
                          continue;
                        }
                        if (*(unsigned char *)(a1 + 56))
                        {
                          int v71 = CFBooleanGetValue(BOOLean);
                          uint64_t v72 = @"Variant";
                          if (!v71)
                          {
                            CFStringRef v73 = (const __CFString *)CFDictionaryGetValue(v67, @"Variant");
                            if (v73)
                            {
                              char v74 = (char)v73;
                              if (CFStringHasPrefix(v73, @"Recovery"))
                              {
                                AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"Restore Behavior specified - skipping recovery variant: %@", v75, v76, v77, v78, v79, v74);
                                CFStringRef v4 = v68;
                                continue;
                              }
                            }
                            uint64_t v72 = @"RestoreBehavior";
                            CFStringRef v4 = v68;
                          }
                        }
                        else
                        {
                          uint64_t v72 = @"Variant";
                        }
                        CFStringRef v80 = (const __CFString *)CFDictionaryGetValue(v67, v72);
                        if (v80 && (!theString2 || CFEqual(v80, theString2)))
                        {
                          CFDictionaryGetValue(v67, @"Variant");
                          AMAuthInstallLog(4, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"%s: Found variant: %@", v136, v137, v138, v139, v140, (char)"AMAuthInstallBundleCopyBuildIdentityForVariant");
                          CFBooleanRef v81 = BOOLean;
LABEL_82:
                          int v105 = CFBooleanGetValue(v81);
                          uint64_t v106 = *(void *)(a1 + 128);
                          if (v105)
                          {
                            SafeRelease(*(CFTypeRef *)(v106 + 40));
                            uint64_t v107 = *(void *)(a1 + 128);
                            if (v107 && *(void *)(v107 + 24))
                            {
                              CFAllocatorRef v108 = CFGetAllocator((CFTypeRef)a1);
                              uint64_t MergedDictionary = AMAuthInstallSupportCreateMergedDictionary(v108, v64, *(const __CFDictionary **)(*(void *)(a1 + 128) + 24), (CFMutableDictionaryRef *)(*(void *)(a1 + 128) + 40));
                              if (!MergedDictionary)
                              {
                                CFDictionaryRef Copy = *(CFDictionaryRef *)(*(void *)(a1 + 128) + 40);
                                goto LABEL_88;
                              }
LABEL_116:
                              uint64_t v7 = MergedDictionary;
                              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"failed to merge build identities", v110, v111, v112, v113, v114, v150);
                              goto LABEL_99;
                            }
                            CFAllocatorRef v116 = CFGetAllocator((CFTypeRef)a1);
                            CFDictionaryRef Copy = CFDictionaryCreateCopy(v116, v64);
                            *(void *)(*(void *)(a1 + 128) + 40) = Copy;
LABEL_88:
                            CFTypeID v117 = v151;
                            if (Copy)
                            {
                              CFTypeRef v118 = CFRetain(Copy);
LABEL_98:
                              uint64_t v7 = 0;
                              *CFTypeID v117 = v118;
                              goto LABEL_99;
                            }
                          }
                          else
                          {
                            SafeRelease(*(CFTypeRef *)(v106 + 32));
                            uint64_t v124 = *(void *)(a1 + 128);
                            if (!v124)
                            {
                              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"amai->bundleParameters is NULL", v119, v120, v121, v122, v123, v150);
                              uint64_t v7 = 0;
                              goto LABEL_99;
                            }
                            uint64_t v125 = *(void *)(v124 + 16);
                            CFAllocatorRef v126 = CFGetAllocator((CFTypeRef)a1);
                            if (v125)
                            {
                              uint64_t MergedDictionary = AMAuthInstallSupportCreateMergedDictionary(v126, v64, *(const __CFDictionary **)(*(void *)(a1 + 128) + 16), (CFMutableDictionaryRef *)(*(void *)(a1 + 128) + 32));
                              if (MergedDictionary) {
                                goto LABEL_116;
                              }
                              CFDictionaryRef v127 = *(CFDictionaryRef *)(*(void *)(a1 + 128) + 32);
                            }
                            else
                            {
                              CFDictionaryRef v127 = CFDictionaryCreateCopy(v126, v64);
                              *(void *)(*(void *)(a1 + 128) + 32) = v127;
                            }
                            if (v127)
                            {
                              CFAllocatorRef v128 = CFGetAllocator((CFTypeRef)a1);
                              CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v128, v64, @"Info.DeviceClass", v129, v130, v131, v132, v133);
                              *(void *)(*(void *)(a1 + 16) + 104) = ValueForKeyPathInDict;
                              SafeRetain(ValueForKeyPathInDict);
                              CFTypeRef v118 = CFRetain(*(CFTypeRef *)(*(void *)(a1 + 128) + 32));
                              CFTypeID v117 = v151;
                              goto LABEL_98;
                            }
                          }
                          uint64_t v7 = 2;
                          goto LABEL_99;
                        }
                      }
                    }
                    CFBooleanRef v81 = BOOLean;
                    if (CFBooleanGetValue(BOOLean))
                    {
LABEL_48:
                      if (theString2) {
                        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"variant \"%@\" isn't published for this device (chipID=0x%08X boardID=0x%X secDom=%d bbChipId=0x%08X) in build manifest", v82, v83, v84, v85, v86, (char)theString2);
                      }
                      else {
                        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"no variant published for this device (chipID=0x%08X boardID=0x%X secDom=%d bbChipId=0x%08X) in build manifest", v82, v83, v84, v85, v86, *(_DWORD *)(*(void *)(a1 + 16) + 8));
                      }
                      uint64_t v7 = 8;
                      goto LABEL_99;
                    }
                    CFDictionaryRef v87 = *(const __CFDictionary **)(a1 + 24);
                    if (v87 && (int64_t v88 = CFDictionaryGetCount(v87), v88 >= 1))
                    {
                      int64_t v89 = v88;
                      uint64_t v90 = (const void **)calloc(v88, 8uLL);
                      if (v90)
                      {
                        CFDataRef v91 = (const void **)calloc(v89, 8uLL);
                        if (v91)
                        {
                          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 24), v90, v91);
                          CFIndex v92 = CFArrayGetCount(v6);
                          if (v92 < 1)
                          {
                            CFDictionaryRef v64 = 0;
                          }
                          else
                          {
                            CFIndex v93 = v92;
                            CFStringRef v157 = v4;
                            CFIndex v94 = 0;
                            while (1)
                            {
                              CFDictionaryRef v95 = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v94);
                              if (v95)
                              {
                                CFDictionaryRef v64 = v95;
                                CFTypeID v96 = CFGetTypeID(v95);
                                if (v96 == CFDictionaryGetTypeID())
                                {
                                  int64_t v97 = 0;
                                  int v98 = 0;
                                  do
                                  {
                                    uint64_t v99 = CFDictionaryGetValue(v64, v90[v97]);
                                    if (v99)
                                    {
                                      char v100 = v91[v97];
                                      if (v100) {
                                        int v98 = CFEqual(v99, v100);
                                      }
                                    }
                                    if (!v98) {
                                      break;
                                    }
                                    ++v97;
                                  }
                                  while (v97 < v89);
                                  if (v98)
                                  {
                                    CFDictionaryRef v101 = (const __CFDictionary *)CFDictionaryGetValue(v64, @"Info");
                                    if (v101)
                                    {
                                      CFDictionaryRef v102 = v101;
                                      CFTypeID v103 = CFGetTypeID(v101);
                                      if (v103 == CFDictionaryGetTypeID() && !*(unsigned char *)(a1 + 56))
                                      {
                                        CFStringRef v104 = (const __CFString *)CFDictionaryGetValue(v102, @"Variant");
                                        if (v104)
                                        {
                                          if (!theString2
                                            || CFEqual(v104, theString2))
                                          {
                                            break;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              if (++v94 == v93)
                              {
                                CFDictionaryRef v64 = 0;
                                goto LABEL_73;
                              }
                            }
                            CFDictionaryGetValue(v102, @"Variant");
                            AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBundleGetMatchingSoftwareCoprocessorBuildIdentity", (uint64_t)"%s: Found variant: %@", v141, v142, v143, v144, v145, (char)"_AMAuthInstallBundleGetMatchingSoftwareCoprocessorBuildIdentity");
LABEL_73:
                            CFStringRef v4 = v157;
                          }
                          CFBooleanRef v81 = BOOLean;
                        }
                        else
                        {
                          CFDictionaryRef v64 = 0;
                        }
LABEL_81:
                        SafeFree(v90);
                        SafeFree(v91);
                        if (v64) {
                          goto LABEL_82;
                        }
                        goto LABEL_48;
                      }
                      CFDictionaryRef v64 = 0;
                    }
                    else
                    {
                      CFDictionaryRef v64 = 0;
                      uint64_t v90 = 0;
                    }
                    CFDataRef v91 = 0;
                    goto LABEL_81;
                  }
                  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)"No baseband chipid reported. Will match Build Identity based on ap chipid, boardid, and secdomain only.", v55, v56, v57, v58, v59, v150);
                }
                int v155 = 0;
                int v154 = -1;
                goto LABEL_23;
              }
              CFDataRef v146 = "publishedVariants is not a CFArray";
            }
            else
            {
              CFDataRef v146 = "AMAuthInstallBundleCopyPublishedVariantsArray returned NULL";
            }
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant", (uint64_t)v146, v49, v50, v51, v52, v53, v150);
            uint64_t v7 = 7;
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v41 = *(const void **)(v40 + 32);
        }
        CFArrayRef v6 = 0;
        uint64_t v7 = 0;
        *a4 = CFRetain(v41);
      }
    }
  }
LABEL_99:
  SafeRelease(v6);
  SafeRelease(v159);
  SafeRelease(v158);
  SafeRelease(v4);
  return v7;
}

uint64_t _AMAuthInstallIsRecoveryVariant(uint64_t a1, CFStringRef theString1)
{
  uint64_t v2 = *MEMORY[0x263EFFB38];
  if (theString1)
  {
    CFStringRef v3 = *(const __CFString **)(a1 + 496);
    if (v3)
    {
      if (CFEqual(theString1, v3)) {
        return *MEMORY[0x263EFFB40];
      }
    }
  }
  return v2;
}

uint64_t AMAuthInstallBundleCopyFullPathForBuildIdentityKey(CFDictionaryRef **a1, const void *a2, void *key, const __CFDictionary *a4, CFTypeRef *a5)
{
  CFDictionaryRef RelativePathForEntry = 0;
  CFURLRef v26 = 0;
  uint64_t v6 = 1;
  if (a1 && a2)
  {
    char v10 = (char)key;
    CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(*a1[16], key);
    CFURLRef v26 = Value;
    if (Value)
    {
      CFDictionaryRef RelativePathForEntry = Value;
      CFRetain(Value);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleCopyFullPathForBuildIdentityKey", (uint64_t)"using override: %@ = %@", v13, v14, v15, v16, v17, v10);
    }
    else
    {
      if (!a4)
      {
        CFDictionaryRef RelativePathForEntry = 0;
        goto LABEL_9;
      }
      CFDictionaryRef RelativePathForEntry = _GetRelativePathForEntry(a4);
      if (!RelativePathForEntry)
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyFullPathForBuildIdentityKey", (uint64_t)"%@ key not found.", v18, v19, v20, v21, v22, v10);
        goto LABEL_9;
      }
      CFAllocatorRef v23 = CFGetAllocator(a1);
      uint64_t v24 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v23, a2, (const __CFString *)RelativePathForEntry, 0, &v26);
      CFDictionaryRef RelativePathForEntry = v26;
      if (v24)
      {
        uint64_t v6 = v24;
        goto LABEL_9;
      }
    }
    uint64_t v6 = 0;
    *a5 = CFRetain(RelativePathForEntry);
    CFDictionaryRef RelativePathForEntry = v26;
  }
LABEL_9:
  SafeRelease(RelativePathForEntry);
  return v6;
}

CFDictionaryRef _GetRelativePathForEntry(const __CFDictionary *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Info");
  if (result)
  {
    return (const __CFDictionary *)CFDictionaryGetValue(result, @"Path");
  }
  return result;
}

void _AMAuthInstallBundleNormalizeOverridePaths(const void *a1, const __CFString *a2, CFMutableDictionaryRef *a3)
{
  CFURLRef v5 = CFURLCreateWithFileSystemPath(0, a2, kCFURLPOSIXPathStyle, 0);
  if (v5)
  {
    CFURLRef v6 = v5;
    CFDictionarySetValue(*a3, a1, v5);
    CFRelease(v6);
  }
}

void _AMAuthInstallBundleNormalizeOverrideURLs(const void *a1, CFURLRef anURL, CFMutableDictionaryRef *a3)
{
  CFStringRef v5 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  if (v5)
  {
    CFStringRef v6 = v5;
    CFDictionarySetValue(*a3, a1, v5);
    CFRelease(v6);
  }
}

uint64_t _AMAuthInstallBundlePopulatePersonalizedBundle(unsigned char *a1, const void *a2, const void *a3, int a4, const __CFDictionary *a5, CFURLRef a6, CFDictionaryRef theDict, const __CFArray *a8, CFArrayRef theArray, CFArrayRef a10, CFBooleanRef BOOLean)
{
  CFURLRef v11 = 0;
  CFMutableDictionaryRef context = 0;
  CFStringRef v373 = 0;
  CFURLRef v370 = 0;
  v371 = 0;
  uint64_t Code = 1;
  if (!a1 || !a2 || !a3 || !a5)
  {
LABEL_260:
    CFURLRef v14 = 0;
    uint64_t v15 = 0;
    CFStringRef v16 = 0;
    goto LABEL_257;
  }
  uint64_t v13 = theDict;
  CFURLRef v14 = 0;
  uint64_t v15 = 0;
  CFStringRef v16 = 0;
  if (!theDict) {
    goto LABEL_257;
  }
  CFURLRef v19 = (const __CFURL *)CFDictionaryGetValue(theDict, @"CumulativeResponse");
  if (v19)
  {
    CFURLRef v25 = v19;
    v376[0] = 0;
    if (!a6)
    {
      AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"replaced NULL response dictionary with cumulative response", v20, v21, v22, v23, v24, v342);
      a6 = v25;
      goto LABEL_14;
    }
    CFGetAllocator(a1);
    uint64_t MergedDictionary = AMSupportCreateMergedDictionary();
    if (MergedDictionary)
    {
      uint64_t Code = MergedDictionary;
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"could not create merged response dictionary", v27, v28, v29, v30, v31, v342);
      CFURLRef v11 = 0;
      CFURLRef v14 = 0;
      uint64_t v15 = 0;
      CFStringRef v16 = 0;
      goto LABEL_257;
    }
    CFDictionarySetValue(v13, @"CumulativeResponse", v376[0]);
    a6 = v376[0];
    SafeRelease(v376[0]);
    CFBooleanRef v37 = "created merged response dictionary";
    goto LABEL_12;
  }
  if (a1[435])
  {
    CFDictionarySetValue(v13, @"CumulativeResponse", a6);
    CFBooleanRef v37 = "caching response dictionary on skipped install";
LABEL_12:
    AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)v37, v32, v33, v34, v35, v36, v342);
  }
LABEL_14:
  if (CFBooleanGetValue(BOOLean))
  {
    uint64_t v13 = (__CFDictionary *)CFDictionaryGetValue(v13, @"RecoveryOS");
    if (!v13)
    {
      CFURLRef v11 = 0;
      CFURLRef v14 = 0;
      uint64_t v15 = 0;
      CFStringRef v16 = 0;
      uint64_t Code = 8;
      goto LABEL_257;
    }
  }
  uint64_t v38 = (__CFArray *)CFDictionaryGetValue(v13, @"Personalized");
  uint64_t v39 = (__CFDictionary *)CFDictionaryGetValue(v13, @"Manifest");
  CFArrayRef v40 = (const __CFArray *)CFDictionaryGetValue(v13, @"Linked");
  uint64_t v41 = CFDictionaryGetValue(v13, @"Alignment");
  CFURLRef v11 = 0;
  uint64_t Code = 8;
  v356 = v38;
  if (!v38 || !v39) {
    goto LABEL_260;
  }
  v359 = v39;
  CFURLRef v14 = 0;
  uint64_t v15 = 0;
  CFStringRef v16 = 0;
  if (!v40) {
    goto LABEL_257;
  }
  v354 = v41;
  CFDictionaryRef v367 = (const __CFDictionary *)CFDictionaryGetValue(a5, @"Manifest");
  if (!v367)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"%@ not found in buildIdentity", v42, v43, v44, v45, v46, (char)@"Manifest");
    CFURLRef v11 = 0;
    CFURLRef v14 = 0;
    uint64_t v15 = 0;
    CFStringRef v16 = 0;
    uint64_t Code = 7;
    goto LABEL_257;
  }
  v355 = v13;
  uint64_t v369 = (uint64_t)a1;
  uint64_t v15 = 0;
  CFDictionaryRef v361 = a6;
  CFStringRef v16 = 0;
  if (a8 && a6)
  {
    if (!a1[435])
    {
      CFIndex Count = CFArrayGetCount(a8);
      if (Count >= 1)
      {
        CFIndex v99 = Count;
        CFStringRef v16 = 0;
        uint64_t v15 = 0;
        CFIndex v100 = 0;
        CFBooleanRef v101 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
        CFBooleanRef v102 = (const __CFBoolean *)*MEMORY[0x263EFFB40];
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFIndex v358 = Count;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a8, v100);
          if (!ValueAtIndex) {
            _AMAuthInstallBundlePopulatePersonalizedBundle_cold_1();
          }
          CFStringRef v104 = ValueAtIndex;
          if (CFStringFind(ValueAtIndex, @"RecoveryOS", 0).location == -1) {
            CFBooleanRef v105 = v101;
          }
          else {
            CFBooleanRef v105 = v102;
          }
          int v106 = CFBooleanGetValue(v105);
          int v107 = CFBooleanGetValue(BOOLean);
          if (v106)
          {
            if (!v107) {
              goto LABEL_122;
            }
            SafeRelease(v16);
            CFAllocatorRef v108 = CFGetAllocator((CFTypeRef)v369);
            CFStringRef v16 = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v108, v104);
            CFStringRef v104 = v16;
          }
          else if (v107)
          {
            goto LABEL_122;
          }
          CFDictionaryRef v109 = (const __CFDictionary *)CFDictionaryGetValue(v367, v104);
          if (v109)
          {
            CFDictionaryRef v115 = v109;
            if (CFEqual(v104, @"BasebandFirmware"))
            {
              uint64_t v135 = *(void *)(v369 + 48);
              if (v135 && *(void *)(v135 + 160))
              {
                uint64_t v136 = CFDictionaryGetValue(a5, @"UniqueBuildID");
                if (v136)
                {
                  uint64_t v137 = v136;
                  CFAllocatorRef v138 = CFGetAllocator((CFTypeRef)v369);
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v138, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                  uint64_t v15 = Mutable;
                  if (!Mutable) {
                    goto LABEL_268;
                  }
                  CFDictionarySetValue(Mutable, @"UniqueBuildID", v137);
                }
                uint64_t v140 = *(void *)(v369 + 16);
                if (*(void *)(v140 + 120) || *(void *)(v140 + 128))
                {
                  uint64_t v141 = CFDictionaryGetValue(a5, @"ProductMarketingVersion");
                  if (v141)
                  {
                    uint64_t v142 = v141;
                    if (!v15)
                    {
                      CFAllocatorRef v143 = CFGetAllocator((CFTypeRef)v369);
                      uint64_t v15 = CFDictionaryCreateMutable(v143, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                      if (!v15)
                      {
LABEL_268:
                        CFURLRef v11 = 0;
                        CFURLRef v14 = 0;
                        goto LABEL_269;
                      }
                    }
                    CFDictionarySetValue(v15, @"ProductMarketingVersion", v142);
                  }
                }
              }
              uint64_t Code = _AMAuthInstallBundleInstallPersonalizedBasebandFirmware((CFDictionaryRef **)v369, v115, v361, v367, a2, a3, v356, v15);
              goto LABEL_120;
            }
            CFURLRef v375 = 0;
            v376[0] = 0;
            if (!v104)
            {
              CFDictionaryRef v153 = 0;
              uint64_t Code = 1;
              goto LABEL_119;
            }
            CFAllocatorRef v116 = CFGetAllocator((CFTypeRef)v369);
            CFDictionaryRef ValueForKeyWithFormat = AMAuthInstallSupportGetValueForKeyWithFormat(v116, v115, @"%@.%@", v117, v118, v119, v120, v121, (char)@"Info");
            if (ValueForKeyWithFormat && !CFBooleanGetValue(ValueForKeyWithFormat))
            {
              AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"entry \"%@\" does not require personalization; skipping it",
                v123,
                v124,
                v125,
                v126,
                v127,
                (char)v104);
              if (CFDictionaryContainsKey(v361, v104)) {
                CFDictionarySetValue(v359, v104, v115);
              }
              uint64_t Code = 0;
LABEL_118:
              CFDictionaryRef v153 = 0;
              goto LABEL_119;
            }
            int v128 = CFBooleanGetValue(BOOLean);
            uint64_t v129 = _AMAuthInstallBundleCopyEntryURLs((CFDictionaryRef **)v369, v104, v115, a2, a3, 1, v128, &v375);
            if (v129)
            {
              uint64_t Code = v129;
              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"failed to copy bundle URLs for %@", v130, v131, v132, v133, v134, (char)v104);
              goto LABEL_118;
            }
            CFStringRef v366 = v16;
            CFURLRef v144 = (const __CFURL *)CFDictionaryGetValue(v375, @"SourceURL");
            CFURLRef v145 = (const __CFURL *)CFDictionaryGetValue(v375, @"DestURL");
            CFDataRef v146 = (void *)CFDictionaryGetValue(v375, @"RelativeSrcPath");
            CFStringRef v147 = (const __CFString *)CFDictionaryGetValue(v375, @"RelativeDestPath");
            CFURLRef v351 = v144;
            if (v144 || v145 || v146 || v147)
            {
              CFStringRef theString = v147;
              if (CFDictionaryContainsKey(v359, v104))
              {
                AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"entry \"%@\" has been previously personalized; skipping it",
                  v148,
                  v149,
                  v150,
                  v151,
                  v152,
                  (char)v104);
                uint64_t Code = 0;
                goto LABEL_113;
              }
              v348 = v146;
              CFURLRef v349 = v145;
              DirectoryForURL = AMAuthInstallPlatformMakeDirectoryForURL(v145);
              if (DirectoryForURL)
              {
                uint64_t Code = (uint64_t)DirectoryForURL;
                char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)v369, (int)DirectoryForURL);
                AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"failed to create directory: %@", v219, v220, v221, v222, v223, LocalizedStatusString);
LABEL_113:
                CFDictionaryRef v153 = 0;
                goto LABEL_114;
              }
              CFAllocatorRef v155 = CFGetAllocator((CFTypeRef)v369);
              uint64_t Code = 2;
              DeepCFDictionaryRef Copy = (const __CFDictionary *)CFPropertyListCreateDeepCopy(v155, v115, 2uLL);
              CFDictionaryRef v153 = DeepCopy;
              if (!DeepCopy) {
                goto LABEL_114;
              }
              CFDictionaryRef v157 = (const __CFDictionary *)CFDictionaryGetValue(DeepCopy, @"Info");
              if (v157)
              {
                CFDictionaryRef v163 = v157;
                CFStringRef v169 = (const __CFString *)CFDictionaryGetValue(v157, @"Path");
                if (v169 && CFDictionaryContainsKey(v359, v169))
                {
                  AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"entry \"%@\" has been previously personalized as part of \"%@\"; skipping it",
                    v164,
                    v165,
                    v166,
                    v167,
                    v168,
                    (char)v104);
                  uint64_t Code = 0;
                  goto LABEL_114;
                }
                CFStringRef pathComponent = v169;
                CFDictionaryRef value = v153;
                int v346 = _CFDictionaryGetBoolean(v163, @"IsFTAB", 0, v164, v165, v166, v167, v168);
                CFAllocatorRef v170 = CFGetAllocator((CFTypeRef)v369);
                uint64_t PrependedFilePath = AMAuthInstallSupportCreatePrependedFilePath(v170, (uint64_t)v104, theString, v376);
                if (PrependedFilePath)
                {
                  uint64_t Code = PrependedFilePath;
                  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"%s: unable to prepend entry name to path", v172, v173, v174, v175, v176, (char)"_AMAuthInstallBundleInstallPersonalizedEntry");
                  goto LABEL_165;
                }
                CFDictionarySetValue(v163, @"PersonalizedPath", v376[0]);
                uint64_t v177 = CFDictionaryGetValue(v361, v104);
                if (v177)
                {
                  uint64_t v185 = v177;
                  CFDictionaryRef v186 = v163;
                  CFTypeID TypeID = CFDictionaryGetTypeID();
                  BOOL v188 = TypeID == CFGetTypeID(v185);
                  CFDictionaryRef v163 = v186;
                  if (v188)
                  {
                    if (CFDictionaryContainsKey((CFDictionaryRef)v185, @"Blob"))
                    {
                      uint64_t Code = AMAuthInstallApImg3PersonalizeWithEntryName((void *)v369, v351, v349, v104, v115, v361);
                      if (!Code)
                      {
                        CFDictionaryRef v153 = value;
                        CFDictionarySetValue(v359, v104, value);
                        _CFArrayRemoveValue(v40, v348);
                        goto LABEL_114;
                      }
                      char v343 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)v369, Code);
                      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"failed to personalize img3 object: %@", v224, v225, v226, v227, v228, v343);
LABEL_165:
                      CFStringRef v16 = v366;
LABEL_166:
                      CFDictionaryRef v153 = value;
LABEL_119:
                      SafeRelease(v376[0]);
                      SafeRelease(v153);
                      SafeRelease(v375);
                      SafeRelease(0);
                      SafeRelease(0);
LABEL_120:
                      if (Code)
                      {
                        AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)v369, Code);
                        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"failed to install \"%@\" in personalized bundle: %@", v319, v320, v321, v322, v323, (char)v104);
                        CFURLRef v11 = 0;
                        CFURLRef v14 = 0;
                        goto LABEL_257;
                      }
                      CFIndex v99 = v358;
                      goto LABEL_122;
                    }
                  }
                }
                if (!AMAuthInstallApIsImg4(v369, v178, v179, v180, v181, v182, v183, v184)
                  || !CFDictionaryGetValue(v361, *(const void **)(v369 + 88))
                  || !v346)
                {
                  if (!AMAuthInstallApIsImg4(v369, v189, v190, v191, v192, v193, v194, v195)
                    || !CFDictionaryGetValue(v361, *(const void **)(v369 + 88))
                    || v346)
                  {
                    char v374 = 0;
                    uint64_t v216 = AMAuthInstallSupportFileURLExists(v349, &v374);
                    CFStringRef v16 = v366;
                    if (v216)
                    {
                      uint64_t Code = v216;
                      goto LABEL_165;
                    }
                    CFDictionaryRef v153 = value;
                    if (!v374)
                    {
                      uint64_t v217 = AMAuthInstallBundleInstallFile((unsigned char *)v369, v349, v351);
                      if (v217)
                      {
                        uint64_t Code = v217;
                        char v344 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)v369, v217);
                        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"failed to create link: %@", v230, v231, v232, v233, v234, v344);
                        goto LABEL_165;
                      }
                      CFArrayAppendValue(v40, v348);
                    }
                    uint64_t Code = 0;
                    goto LABEL_119;
                  }
                  CFStringRef TypeForEntryName = (const __CFString *)CFDictionaryGetValue(v163, @"Img4PayloadType");
                  uint64_t v210 = AMAuthInstallApImg4StitchTicketData((const void **)v369, TypeForEntryName, v351, v349, v361);
                  CFStringRef v16 = v366;
                  if (v210)
                  {
                    uint64_t Code = v210;
                    v229 = "failed to stitch ticket data to file";
                  }
                  else
                  {
                    if (!TypeForEntryName) {
                      CFStringRef TypeForEntryName = AMAuthInstallApImg4GetTypeForEntryName(v104);
                    }
                    uint64_t Code = AMAuthInstallApImg4StitchRestoreInfoWithAMAI(TypeForEntryName, v349, v361, 0, v369);
                    if (!Code)
                    {
                      v207 = v359;
                      CFStringRef v208 = v104;
                      CFDictionaryRef v153 = value;
                      goto LABEL_151;
                    }
                    char v342 = (char)v349;
                    v229 = "failed to stitch restore info to %@";
                  }
                  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)v229, v211, v212, v213, v214, v215, v342);
                  goto LABEL_166;
                }
                CFURLRef v196 = CFURLCreateCopyAppendingPathComponent(allocator, (CFURLRef)a3, pathComponent, 0);
                CFDictionaryRef v153 = value;
                if (v196)
                {
                  uint64_t Code = AMAuthInstallApFtabStitchTicketData((const void **)v369, (uint64_t)v351, v196, v361);
                  CFStringRef v16 = v366;
                  if (Code)
                  {
                    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"%s: Failed to stitch ticket to FTAB file.", v202, v203, v204, v205, v206, (char)"_AMAuthInstallBundleInstallPersonalizedEntry");
                    goto LABEL_119;
                  }
                  v207 = v359;
                  CFStringRef v208 = pathComponent;
LABEL_151:
                  CFDictionarySetValue(v207, v208, v153);
                  _CFArrayRemoveValue(v40, v348);
                  goto LABEL_119;
                }
                AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"dstFtabUrl is NULL", v197, v198, v199, v200, v201, v342);
                uint64_t Code = 2;
LABEL_114:
                CFStringRef v16 = v366;
                goto LABEL_119;
              }
              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedEntry", (uint64_t)"%s: no personalized entry for %@", v158, v159, v160, v161, v162, (char)"_AMAuthInstallBundleInstallPersonalizedEntry");
            }
            else
            {
              CFDictionaryRef v153 = 0;
            }
            uint64_t Code = 8;
            goto LABEL_114;
          }
          AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"no entry in manifest found for \"%@\"", v110, v111, v112, v113, v114, (char)v104);
LABEL_122:
          if (v99 == ++v100) {
            goto LABEL_24;
          }
        }
      }
    }
    uint64_t v15 = 0;
    CFStringRef v16 = 0;
  }
LABEL_24:
  v357 = v15;
  CFStringRef v365 = v16;
  if (!theArray)
  {
    uint64_t v47 = v369;
    goto LABEL_51;
  }
  uint64_t v47 = v369;
  if (*(unsigned char *)(v369 + 435) || (CFIndex v48 = CFArrayGetCount(theArray), v48 < 1))
  {
LABEL_51:
    v378.CFIndex length = CFArrayGetCount(a8);
    v378.CFIndex location = 0;
    CFURLRef v11 = 0;
    CFURLRef v14 = 0;
    if (CFArrayContainsValue(a8, v378, @"BasebandFirmware")) {
      goto LABEL_54;
    }
    if (*(unsigned char *)(v47 + 435)
      || (LOBYTE(v376[0]) = 0,
          CFAllocatorRef v292 = CFGetAllocator((CFTypeRef)v47),
          (CFDictionaryRef v298 = AMAuthInstallSupportGetValueForKeyWithFormat(v292, a5, @"%@.%@.%@.%@", v293, v294, v295, v296, v297, (char)@"Manifest")) == 0))
    {
      CFURLRef v11 = 0;
      CFURLRef v14 = 0;
      goto LABEL_54;
    }
    CFStringRef v299 = (const __CFString *)v298;
    v300 = CFDictionaryGetValue(**(CFDictionaryRef **)(v47 + 128), @"BasebandFirmware");
    if (v300)
    {
      CFURLRef v11 = (const __CFURL *)CFRetain(v300);
    }
    else
    {
      CFAllocatorRef v313 = CFGetAllocator((CFTypeRef)v47);
      CFURLRef v11 = CFURLCreateCopyAppendingPathComponent(v313, (CFURLRef)a2, v299, 0);
      if (!v11)
      {
        CFURLRef v14 = 0;
        goto LABEL_272;
      }
    }
    CFAllocatorRef v314 = CFGetAllocator((CFTypeRef)v47);
    uint64_t v315 = AMAuthInstallSupportCreatePrependedFilePath(v314, @"BasebandFirmware", v299, &v373);
    if (v315)
    {
      uint64_t Code = v315;
      goto LABEL_254;
    }
    CFAllocatorRef v316 = CFGetAllocator((CFTypeRef)v47);
    CFURLRef v317 = CFURLCreateCopyAppendingPathComponent(v316, (CFURLRef)a3, v373, 0);
    CFURLRef v14 = v317;
    if (v317)
    {
      uint64_t SoftLink = AMAuthInstallSupportFileURLExists(v317, v376);
      if (SoftLink
        || !LOBYTE(v376[0])
        && ((uint64_t SoftLink = AMAuthInstallSupportFileURLExists(v11, v376), SoftLink)
         || LOBYTE(v376[0]) && (uint64_t SoftLink = AMAuthInstallPlatformCreateSoftLink(v14, v11), SoftLink)))
      {
        uint64_t Code = SoftLink;
        goto LABEL_255;
      }
LABEL_54:
      uint64_t v15 = v357;
      if (a10)
      {
        CFIndex v88 = CFArrayGetCount(a10);
        if (v88 >= 1)
        {
          CFIndex v89 = v88;
          CFIndex v90 = 0;
          while (1)
          {
            CFStringRef v91 = (const __CFString *)CFArrayGetValueAtIndex(a10, v90);
            if (!v91) {
              _AMAuthInstallBundlePopulatePersonalizedBundle_cold_2();
            }
            CFStringRef v92 = v91;
            v379.CFIndex length = CFArrayGetCount(v40);
            v379.CFIndex location = 0;
            if (!CFArrayContainsValue(v40, v379, v92))
            {
              CFURLRef v375 = 0;
              v376[0] = 0;
              v380.CFIndex length = CFArrayGetCount(v40);
              v380.CFIndex location = 0;
              if (CFArrayContainsValue(v40, v380, v92))
              {
                uint64_t Code = 0;
              }
              else
              {
                CFAllocatorRef v93 = CFGetAllocator((CFTypeRef)v47);
                uint64_t Code = AMAuthInstallPlatformCopyURLWithAppendedComponent(v93, a2, v92, 0, v376);
                if (!Code)
                {
                  CFAllocatorRef v94 = CFGetAllocator((CFTypeRef)v47);
                  uint64_t Code = AMAuthInstallPlatformCopyURLWithAppendedComponent(v94, a3, v92, 0, &v375);
                  if (!Code)
                  {
                    uint64_t Code = (uint64_t)AMAuthInstallPlatformMakeDirectoryForURL(v375);
                    if (!Code)
                    {
                      uint64_t Code = AMAuthInstallBundleInstallFile((unsigned char *)v47, v375, v376[0]);
                      if (!Code) {
                        CFArrayAppendValue(v40, v92);
                      }
                    }
                  }
                }
              }
              SafeRelease(v376[0]);
              SafeRelease(v375);
              if (Code) {
                break;
              }
            }
            if (v89 == ++v90) {
              goto LABEL_68;
            }
          }
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"failed to install link in personalized bundle: %@", v83, v84, v85, v86, v87, (char)v92);
          goto LABEL_256;
        }
      }
LABEL_68:
      CFStringRef v16 = v365;
      if (v361 && !*(unsigned char *)(v47 + 32))
      {
        int IsImg4 = AMAuthInstallApIsImg4(v47, v81, v82, v83, v84, v85, v86, v87);
        CFStringRef v96 = IsImg4 ? @"amai/apimg4ticket.der" : @"amai/apticket.der";
        if (IsImg4) {
          int64_t v97 = *(unsigned char *)(*(void *)(v47 + 16) + 116) ? &kAMAuthInstallTagX86Img4Ticket : (__CFString **)(v47 + 88);
        }
        else {
          int64_t v97 = &kAMAuthInstallTagApTicket;
        }
        v235 = *v97;
        v381.CFIndex length = CFArrayGetCount(v356);
        v381.CFIndex location = 0;
        if (!CFArrayContainsValue(v356, v381, v96))
        {
          CFDataRef v288 = (const __CFData *)CFDictionaryGetValue(v361, v235);
          if (v288)
          {
            CFDataRef v289 = v288;
            CFAllocatorRef v290 = CFGetAllocator((CFTypeRef)v47);
            uint64_t v291 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v290, a3, v96, 0, &v370);
            if (v291)
            {
              uint64_t Code = v291;
              v247 = "failed to create an AP ticket URL";
              goto LABEL_234;
            }
            CFAllocatorRef v301 = CFGetAllocator((CFTypeRef)v47);
            uint64_t v302 = AMAuthInstallSupportWriteDataToFileURL(v301, v289, v370, 1);
            if (v302)
            {
              uint64_t Code = v302;
              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"failed to write the AP ticket", v303, v304, v305, v306, v307, v342);
              AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"%@", v308, v309, v310, v311, v312, (char)v370);
              goto LABEL_257;
            }
            CFArrayAppendValue(v356, v96);
          }
        }
      }
      if (!(*(unsigned int (**)(uint64_t, const void *, const __CFDictionary *, __CFError **))(v47 + 448))(v47, a3, v361, &v371))
      {
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"failed to write updater manifests: %@", v236, v237, v238, v239, v240, (char)v371);
        if (v371) {
          uint64_t Code = CFErrorGetCode(v371);
        }
        else {
          uint64_t Code = 4;
        }
        goto LABEL_257;
      }
      if (v354)
      {
LABEL_178:
        if (CFDictionaryGetCount(**(CFDictionaryRef **)(v47 + 128)) >= 1)
        {
          CFAllocatorRef v241 = CFGetAllocator((CFTypeRef)v47);
          CFMutableDictionaryRef context = CFDictionaryCreateMutable(v241, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!context)
          {
LABEL_269:
            uint64_t Code = 2;
            goto LABEL_257;
          }
          CFDictionaryApplyFunction(**(CFDictionaryRef **)(v47 + 128), (CFDictionaryApplierFunction)_AMAuthInstallBundleNormalizeOverrideURLs, &context);
          CFDictionarySetValue(v355, @"Overrides", context);
        }
        uint64_t Code = AMAuthInstallBundleWriteReceipt((void *)v47, a3, v355, BOOLean);
        if (!Code) {
          goto LABEL_257;
        }
        char v342 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)v47, Code);
        v247 = "failed to write receipt: %@";
LABEL_234:
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)v247, v242, v243, v244, v245, v246, v342);
        goto LABEL_257;
      }
      v376[0] = 0;
      CFAllocatorRef v248 = CFGetAllocator((CFTypeRef)v47);
      CFMutableDictionaryRef v250 = CFDictionaryCreateMutable(v248, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!v250)
      {
        CFTypeRef v287 = 0;
        CFStringRef v260 = 0;
        uint64_t Code = 2;
LABEL_232:
        SafeRelease(v250);
        SafeRelease(v260);
        SafeRelease(v376[0]);
        if (Code)
        {
          char v342 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)v47, Code);
          v247 = "_AMAuthInstallCreateAlignmentDictionary failed: %@";
          goto LABEL_234;
        }
        CFDictionarySetValue(v355, @"Alignment", v287);
        CFRelease(v287);
        goto LABEL_178;
      }
      CFStringRef RelativePathForManifestEntry = (const __CFString *)_CreateRelativePathForManifestEntry((const void *)v47, v249, (const __CFURL *)a3, v367, @"iBSS");
      if (RelativePathForManifestEntry)
      {
        CFStringRef v253 = RelativePathForManifestEntry;
        v254 = @"RELEASE";
        if (CFStringFind(RelativePathForManifestEntry, @"RELEASE", 0).location != -1
          || (v254 = @"DEVELOPMENT", CFStringFind(v253, @"DEVELOPMENT", 0).location != -1)
          || (v254 = @"DEBUG", CFStringFind(v253, @"DEBUG", 0).location != -1))
        {
          CFDictionarySetValue(v250, @"DFUFileType", v254);
        }
        SafeRelease(v253);
      }
      CFTypeRef v255 = _CreateRelativePathForManifestEntry((const void *)v47, v252, (const __CFURL *)a3, v367, @"OS");
      if (v255)
      {
        v257 = v255;
        CFDictionarySetValue(v250, @"OS", v255);
        SafeRelease(v257);
      }
      CFStringRef v258 = (const __CFString *)_CreateRelativePathForManifestEntry((const void *)v47, v256, (const __CFURL *)a3, v367, @"RestoreKernelCache");
      if (v258)
      {
        CFStringRef v260 = v258;
        CFAllocatorRef v261 = CFGetAllocator((CFTypeRef)v47);
        uint64_t v262 = AMAuthInstallSupportCreatePrependedFilePath(v261, @"RestoreKernelCache", v260, v376);
        if (v262) {
          goto LABEL_267;
        }
        if (v376[0])
        {
          CFDictionarySetValue(v250, @"RestoreKernelCache", v376[0]);
          SafeRelease(v376[0]);
          v376[0] = 0;
        }
        SafeRelease(v260);
      }
      CFStringRef v268 = (const __CFString *)_CreateRelativePathForManifestEntry((const void *)v47, v259, (const __CFURL *)a3, v367, @"KernelCache");
      if (v268)
      {
        CFStringRef v260 = v268;
        CFAllocatorRef v270 = CFGetAllocator((CFTypeRef)v47);
        uint64_t v262 = AMAuthInstallSupportCreatePrependedFilePath(v270, @"KernelCache", v260, v376);
        if (v262) {
          goto LABEL_267;
        }
        if (v376[0])
        {
          CFDictionarySetValue(v250, @"KernelCache", v376[0]);
          SafeRelease(v376[0]);
          v376[0] = 0;
        }
        SafeRelease(v260);
      }
      CFTypeRef v271 = _CreateRelativePathForManifestEntry((const void *)v47, v269, (const __CFURL *)a3, v367, @"RestoreRamDisk");
      if (v271)
      {
        v273 = v271;
        CFDictionarySetValue(v250, @"RestoreRamDisk", v271);
        SafeRelease(v273);
      }
      CFTypeRef v274 = _CreateRelativePathForManifestEntry((const void *)v47, v272, (const __CFURL *)a3, v367, @"OSRamdisk");
      if (v274)
      {
        v276 = v274;
        CFDictionarySetValue(v250, @"OSRamdisk", v274);
        SafeRelease(v276);
      }
      CFStringRef v277 = (const __CFString *)_CreateRelativePathForManifestEntry((const void *)v47, v275, (const __CFURL *)a3, v367, @"RestoreDeviceTree");
      if (!v277) {
        goto LABEL_215;
      }
      CFStringRef v260 = v277;
      CFAllocatorRef v279 = CFGetAllocator((CFTypeRef)v47);
      uint64_t v262 = AMAuthInstallSupportCreatePrependedFilePath(v279, @"RestoreDeviceTree", v260, v376);
      if (!v262)
      {
        if (v376[0])
        {
          CFDictionarySetValue(v250, @"RestoreDeviceTree", v376[0]);
          CFStringRef CopyByDeletingLastComponent = _AMAuthInstallBundleComponentCreateCopyByDeletingLastComponent((const __CFAllocator *)*MEMORY[0x263EFFB08], v260);
          if (CopyByDeletingLastComponent)
          {
            CFStringRef v281 = CopyByDeletingLastComponent;
            CFDictionarySetValue(v250, @"AllFlash", CopyByDeletingLastComponent);
            CFRelease(v281);
          }
          SafeRelease(v376[0]);
          v376[0] = 0;
        }
        SafeRelease(v260);
LABEL_215:
        CFStringRef v282 = (const __CFString *)_CreateRelativePathForManifestEntry((const void *)v47, v278, (const __CFURL *)a3, v367, @"DeviceTree");
        if (!v282)
        {
LABEL_220:
          CFTypeRef v285 = _CreateRelativePathForManifestEntry((const void *)v47, v283, (const __CFURL *)a3, v367, @"Diags");
          if (v285)
          {
            v286 = v285;
            CFDictionarySetValue(v250, @"Diags", v285);
            SafeRelease(v286);
          }
          CFTypeRef v287 = CFRetain(v250);
          CFStringRef v260 = 0;
          uint64_t Code = 0;
          goto LABEL_232;
        }
        CFStringRef v260 = v282;
        CFAllocatorRef v284 = CFGetAllocator((CFTypeRef)v47);
        uint64_t v262 = AMAuthInstallSupportCreatePrependedFilePath(v284, @"DeviceTree", v260, v376);
        if (!v262)
        {
          if (v376[0])
          {
            CFDictionarySetValue(v250, @"DeviceTree", v376[0]);
            SafeRelease(v376[0]);
            v376[0] = 0;
          }
          SafeRelease(v260);
          goto LABEL_220;
        }
      }
LABEL_267:
      uint64_t Code = v262;
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallCreateAlignmentDictionary", (uint64_t)"failed to prepend entry name to path", v263, v264, v265, v266, v267, v342);
      CFTypeRef v287 = 0;
      goto LABEL_232;
    }
LABEL_272:
    uint64_t Code = 2;
    goto LABEL_255;
  }
  uint64_t v49 = (void *)v48;
  CFIndex v50 = 0;
  CFStringRef v51 = @"RecoveryOS";
  CFDictionaryRef v52 = (CFDictionaryRef)*MEMORY[0x263EFFB38];
  CFDictionaryRef v360 = (CFDictionaryRef)*MEMORY[0x263EFFB40];
  key = (void *)v48;
  while (1)
  {
    CFStringRef v53 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v50);
    if (!v53) {
      _AMAuthInstallBundlePopulatePersonalizedBundle_cold_3();
    }
    CFStringRef v54 = v53;
    CFBooleanRef v55 = CFStringFind(v53, v51, 0).location == -1 ? v52 : v360;
    int v56 = CFBooleanGetValue(v55);
    int v57 = CFBooleanGetValue(BOOLean);
    if (v56)
    {
      if (!v57) {
        goto LABEL_48;
      }
      SafeRelease(v365);
      CFAllocatorRef v58 = CFGetAllocator((CFTypeRef)v47);
      CFStringRef v54 = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v58, v54);
      CFStringRef v365 = v54;
    }
    else if (v57)
    {
      goto LABEL_48;
    }
    CFDictionaryRef v59 = (const __CFDictionary *)CFDictionaryGetValue(v367, v54);
    if (!v59)
    {
      AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"no entry in manifest found for \"%@\"", v60, v61, v62, v63, v64, (char)v54);
      goto LABEL_48;
    }
    v376[0] = 0;
    if (!v54)
    {
      uint64_t Code = 1;
      goto LABEL_253;
    }
    CFDictionaryRef v65 = v59;
    int v66 = CFBooleanGetValue(v55);
    uint64_t v67 = _AMAuthInstallBundleCopyEntryURLs((CFDictionaryRef **)v47, v54, v65, a2, a3, 0, v66, v376);
    if (v67)
    {
      uint64_t Code = v67;
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallLinkedEntry", (uint64_t)"failed to copy bundle URLs for %@", v68, v69, v70, v71, v72, (char)v54);
      goto LABEL_253;
    }
    CFDictionaryRef v73 = v52;
    CFStringRef v74 = v51;
    CFURLRef v75 = (const __CFURL *)CFDictionaryGetValue(v376[0], @"SourceURL");
    CFURLRef v76 = (const __CFURL *)CFDictionaryGetValue(v376[0], @"DestURL");
    uint64_t v77 = CFDictionaryGetValue(v376[0], @"RelativeSrcPath");
    uint64_t v78 = v77;
    if (!v75 && !v76 && !v77) {
      break;
    }
    v377.CFIndex length = CFArrayGetCount(v40);
    v377.CFIndex location = 0;
    if (!CFArrayContainsValue(v40, v377, v78))
    {
      uint64_t v79 = AMAuthInstallPlatformMakeDirectoryForURL(v76);
      if (v79)
      {
        uint64_t Code = (uint64_t)v79;
        char v324 = AMAuthInstallGetLocalizedStatusString(0, (int)v79);
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallLinkedEntry", (uint64_t)"failed to create directory: %@", v325, v326, v327, v328, v329, v324);
        goto LABEL_253;
      }
      uint64_t v80 = AMAuthInstallBundleInstallFile((unsigned char *)v369, v76, v75);
      if (v80)
      {
        uint64_t Code = v80;
        char v330 = AMAuthInstallGetLocalizedStatusString(0, v80);
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallLinkedEntry", (uint64_t)"failed to create soft link: %@", v331, v332, v333, v334, v335, v330);
        goto LABEL_253;
      }
      CFArrayAppendValue(v40, v78);
    }
    SafeRelease(v376[0]);
    uint64_t v47 = v369;
    CFStringRef v51 = v74;
    CFDictionaryRef v52 = v73;
    uint64_t v49 = key;
LABEL_48:
    if (v49 == (void *)++v50) {
      goto LABEL_51;
    }
  }
  uint64_t Code = 8;
LABEL_253:
  SafeRelease(v376[0]);
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulatePersonalizedBundle", (uint64_t)"failed to install link for \"%@\" in personalized bundle", v336, v337, v338, v339, v340, (char)v54);
  CFURLRef v11 = 0;
LABEL_254:
  CFURLRef v14 = 0;
LABEL_255:
  uint64_t v15 = v357;
LABEL_256:
  CFStringRef v16 = v365;
LABEL_257:
  SafeRelease(v11);
  SafeRelease(v14);
  SafeRelease(v373);
  SafeRelease(context);
  SafeRelease(v371);
  SafeRelease(v370);
  SafeRelease(v15);
  SafeRelease(v16);
  return Code;
}

CFStringRef AMAuthInstallICreateTranslationOfRecoveryEnteryName(const __CFAllocator *a1, CFStringRef theString)
{
  CFRange v4 = CFStringFind(theString, @"RecoveryOS", 0);
  if (v4.location == -1)
  {
    return CFStringCreateCopy(a1, theString);
  }
  else
  {
    CFIndex Length = CFStringGetLength(theString);
    v6.CFIndex length = Length - CFStringGetLength(@"RecoveryOS");
    v6.CFIndex location = v4.length;
    return CFStringCreateWithSubstring(a1, theString, v6);
  }
}

uint64_t _AMAuthInstallBundleInstallPersonalizedBasebandFirmware(CFDictionaryRef **a1, const __CFDictionary *a2, const __CFDictionary *a3, const __CFDictionary *a4, const void *a5, const void *a6, __CFArray *a7, const __CFDictionary *a8)
{
  CFURLRef v73 = 0;
  CFStringRef v74 = 0;
  CFURLRef v72 = 0;
  CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(*a1[16], @"VinylFirmware");
  CFURLRef v71 = Value;
  if (Value)
  {
    CFRetain(Value);
    AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedBasebandFirmware", (uint64_t)"using vinyl firmware override: %@ = %@", v17, v18, v19, v20, v21, (char)@"VinylFirmware");
  }
  else
  {
    CFDictionaryRef v34 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"eUICC,Main");
    CFDictionaryRef v35 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"eUICC,Gold");
    if (v34)
    {
      CFDictionaryRef v36 = v35;
      if (v35)
      {
        CFStringRef RelativePathForEntry = (const __CFString *)_GetRelativePathForEntry(v34);
        CFStringRef v38 = (const __CFString *)_GetRelativePathForEntry(v36);
        if (CFStringCompare(RelativePathForEntry, v38, 0)) {
          goto LABEL_27;
        }
        if (RelativePathForEntry && v38)
        {
          CFAllocatorRef v44 = CFGetAllocator(a1);
          uint64_t v45 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v44, a5, RelativePathForEntry, 0, &v71);
          if (v45) {
            goto LABEL_25;
          }
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedBasebandFirmware", (uint64_t)"%@ OR %@ key not found, but that's okay. Moving along...", v39, v40, v41, v42, v43, (char)@"eUICC,Main");
        }
      }
    }
  }
  CFURLRef v22 = (const __CFURL *)CFDictionaryGetValue(*a1[16], @"BasebandFirmware");
  CFURLRef v73 = v22;
  if (!v22)
  {
    CFDictionaryRef v46 = _GetRelativePathForEntry(a2);
    if (v46)
    {
      CFStringRef v52 = (const __CFString *)v46;
      CFAllocatorRef v53 = CFGetAllocator(a1);
      uint64_t v45 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v53, a5, v52, 0, &v73);
      if (!v45) {
        goto LABEL_14;
      }
LABEL_25:
      uint64_t v68 = v45;
      CFStringRef v60 = 0;
      goto LABEL_20;
    }
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedBasebandFirmware", (uint64_t)"%@ key not found.", v47, v48, v49, v50, v51, (char)@"BasebandFirmware");
LABEL_27:
    CFStringRef v60 = 0;
    uint64_t v68 = 1;
    goto LABEL_20;
  }
  CFRetain(v22);
  AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedBasebandFirmware", (uint64_t)"using baseband firmware override: %@ = %@", v23, v24, v25, v26, v27, (char)@"BasebandFirmware");
  a2 = 0;
LABEL_14:
  uint64_t BasebandComponentName = AMAuthInstallBundleCopyNextBasebandComponentName(a1, (CFTypeRef *)&v74, v28, v29, v30, v31, v32, v33);
  CFStringRef v60 = v74;
  if (BasebandComponentName) {
    goto LABEL_22;
  }
  if (!v74)
  {
    AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedBasebandFirmware", (uint64_t)"server provided unneeded baseband data; ignoring it",
      v55,
      v56,
      v57,
      v58,
      v59,
      v70);
    uint64_t v68 = 0;
    goto LABEL_20;
  }
  CFAllocatorRef v61 = CFGetAllocator(a1);
  uint64_t BasebandComponentName = AMAuthInstallPlatformCopyURLWithAppendedComponent(v61, a6, v60, 0, &v72);
  if (BasebandComponentName)
  {
LABEL_22:
    uint64_t v68 = BasebandComponentName;
  }
  else
  {
    DirectoryForURL = AMAuthInstallPlatformMakeDirectoryForURL(v72);
    if (DirectoryForURL)
    {
      uint64_t v68 = (uint64_t)DirectoryForURL;
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleInstallPersonalizedBasebandFirmware", (uint64_t)"failed to create output directory", v63, v64, v65, v66, v67, v70);
    }
    else
    {
      uint64_t v68 = AMAuthInstallBasebandPersonalizeFirmwareInternal(a1, v73, v71, v72, a2, a3, a8);
      if (!v68) {
        CFArrayAppendValue(a7, v60);
      }
    }
  }
LABEL_20:
  SafeRelease(v60);
  SafeRelease(v73);
  SafeRelease(v72);
  return v68;
}

uint64_t AMAuthInstallBundleWriteReceipt(void *a1, const void *a2, const void *a3, const __CFBoolean *a4)
{
  CFErrorRef error = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v8 = CFGetAllocator(a1);
  uint64_t v9 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v8, a2, @"amai/receipt.plist", 0, (CFURLRef *)&cf);
  if (!v9)
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFDataRef v11 = CFPropertyListCreateData(v13, a3, kCFPropertyListXMLFormat_v1_0, 0, &error);
    if (error)
    {
      CFStringRef v12 = CFErrorCopyDescription(error);
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleWriteReceipt", (uint64_t)"%@", v14, v15, v16, v17, v18, (char)v12);
    }
    else
    {
      if (v11)
      {
        DirectoryForURL = AMAuthInstallPlatformMakeDirectoryForURL((const __CFURL *)cf);
        if (DirectoryForURL)
        {
          uint64_t v10 = (uint64_t)DirectoryForURL;
          char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, (int)DirectoryForURL);
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleWriteReceipt", (uint64_t)"failed to create receipt directory: %@", v22, v23, v24, v25, v26, LocalizedStatusString);
          AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleWriteReceipt", (uint64_t)"%@", v27, v28, v29, v30, v31, (char)cf);
        }
        else
        {
          CFAllocatorRef v32 = CFGetAllocator(a1);
          uint64_t v10 = AMAuthInstallSupportWriteDataToFileURL(v32, v11, (const __CFURL *)cf, 1);
          int Value = CFBooleanGetValue(a4);
          CFDictionaryRef v34 = *(void **)(a1[16] + 8);
          if (!Value)
          {
            SafeRelease(v34);
            CFTypeRef v35 = CFRetain(a3);
            CFStringRef v12 = 0;
            *(void *)(a1[16] + 8) = v35;
            goto LABEL_7;
          }
          CFDictionarySetValue((CFMutableDictionaryRef)v34, @"RecoveryOS", a3);
        }
        goto LABEL_3;
      }
      CFStringRef v12 = 0;
    }
    uint64_t v10 = 2;
    goto LABEL_7;
  }
  uint64_t v10 = v9;
  CFDataRef v11 = 0;
LABEL_3:
  CFStringRef v12 = 0;
LABEL_7:
  SafeRelease(cf);
  SafeRelease(v11);
  SafeRelease(error);
  SafeRelease(v12);
  return v10;
}

uint64_t AMAuthInstallBundleCreatePersonalizedPath(const void *a1, const __CFString *a2, const __CFURL **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return AMAuthInstallBundleCreatePersonalizedPathWithKey(a1, 0, a2, a3, a5, a6, a7, a8);
}

uint64_t AMAuthInstallBundleCreatePersonalizedPathWithKey(const void *a1, CFStringRef theString1, const __CFString *a3, const __CFURL **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFURLRef anURL = 0;
  if (!a1 || !a3 || !a4)
  {
    CFURLRef Copy = 0;
    CFURLRef v23 = 0;
    CFURLRef v15 = 0;
    uint64_t v24 = 1;
    if (!a4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (theString1) {
    BOOL v11 = CFEqual(theString1, @"BasebandFirmware");
  }
  else {
    BOOL v11 = 0;
  }
  int IsImg4 = AMAuthInstallApIsImg4((uint64_t)a1, (uint64_t)theString1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  CFAllocatorRef v13 = CFGetAllocator(a1);
  if (v11 || !IsImg4)
  {
    CFURLRef Copy = (const __CFURL *)CFStringCreateCopy(v13, a3);
    uint64_t v24 = 0;
    CFURLRef v23 = 0;
    CFURLRef v15 = 0;
    goto LABEL_15;
  }
  CFURLRef Copy = CFURLCreateWithFileSystemPath(v13, a3, kCFURLPOSIXPathStyle, 0);
  CFURLRef v15 = Copy;
  if (!Copy) {
    goto LABEL_19;
  }
  CFAllocatorRef v16 = CFGetAllocator(a1);
  uint64_t v17 = AMAuthInstallApImg4CopyURLAddingExtension(v16, v15, (CFTypeRef *)&anURL);
  if (v17)
  {
    uint64_t v24 = v17;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCreatePersonalizedPathWithKey", (uint64_t)"failed to copy personalized URL", v18, v19, v20, v21, v22, v26);
    CFURLRef Copy = 0;
    CFURLRef v23 = 0;
    goto LABEL_15;
  }
  CFURLRef Copy = anURL;
  if (!anURL)
  {
LABEL_19:
    CFURLRef v23 = 0;
    goto LABEL_20;
  }
  CFURLRef Copy = (const __CFURL *)CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  CFURLRef v23 = Copy;
  if (!Copy)
  {
LABEL_20:
    uint64_t v24 = 2;
    goto LABEL_15;
  }
  CFURLRef Copy = (const __CFURL *)CFRetain(Copy);
  uint64_t v24 = 0;
LABEL_15:
  *a4 = Copy;
LABEL_16:
  SafeRelease(v15);
  SafeRelease(0);
  SafeRelease(anURL);
  SafeRelease(v23);
  return v24;
}

uint64_t AMAuthInstallBundlePersonalizePartial(unint64_t a1, const void *a2, const void *a3, const __CFString *a4, const __CFArray *a5, const __CFArray *a6, const __CFArray *a7, char a8)
{
  return AMAuthInstallBundlePersonalizePartialWithRecoveryOS(a1, a2, a3, a4, 0, 0, a5, a6, a7, a8);
}

uint64_t AMAuthInstallBundlePersonalizePartialWithRecoveryOS(unint64_t a1, const void *a2, const void *a3, const __CFString *a4, uint64_t a5, const __CFString *a6, const __CFArray *a7, const __CFArray *a8, const __CFArray *a9, char a10)
{
  CFDictionaryRef v330 = 0;
  CFDictionaryRef v331 = 0;
  CFDictionaryRef v328 = 0;
  CFDictionaryRef v329 = 0;
  CFURLRef v326 = 0;
  CFURLRef v327 = 0;
  uint64_t v325 = 0;
  CFURLRef v323 = 0;
  CFDictionaryRef value = 0;
  CFStringRef v321 = 0;
  CFDictionaryRef v322 = 0;
  if (!*(void *)(a1 + 16))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"bundle personalization requires AP parameters (even with AP personalization disabled)", (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, theArray);
    CFMutableDictionaryRef MutableCopy = 0;
    uint64_t v14 = 0;
    CFDictionaryRef v15 = 0;
    CFDictionaryRef v16 = 0;
    CFArrayRef v17 = 0;
    CFDictionaryRef v18 = 0;
    CFURLRef v19 = 0;
    uint64_t v12 = 1;
    goto LABEL_126;
  }
  CFMutableDictionaryRef MutableCopy = 0;
  uint64_t v12 = 1;
  if (!a2)
  {
    uint64_t v14 = 0;
    CFDictionaryRef v15 = 0;
    CFDictionaryRef v16 = 0;
    CFArrayRef v17 = 0;
    CFDictionaryRef v18 = 0;
    CFURLRef v19 = 0;
    goto LABEL_126;
  }
  uint64_t v14 = 0;
  CFDictionaryRef v15 = 0;
  CFDictionaryRef v16 = 0;
  CFArrayRef v17 = 0;
  CFDictionaryRef v18 = 0;
  CFURLRef v19 = 0;
  if (a3)
  {
    uint64_t v21 = (const void *)a5;
    _AMAuthInstallBundlePersonalizeApplyPreferencesOverrides((void *)a1);
    _AMAuthInstallBundleCreateDebugDirectory((CFTypeRef *)a1, a3);
    uint64_t v22 = AMAuthInstallBundleCopyBuildIdentityForVariant(a1, a2, a4, (CFTypeRef *)&v331);
    if (v22)
    {
      uint64_t v12 = v22;
      CFMutableDictionaryRef MutableCopy = 0;
      uint64_t v14 = 0;
      CFDictionaryRef v15 = 0;
      CFDictionaryRef v16 = 0;
      CFArrayRef v17 = 0;
      CFDictionaryRef v18 = 0;
      CFURLRef v19 = 0;
      goto LABEL_126;
    }
    if (v331)
    {
      CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)a1);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v23, 0, v331);
      CFDictionaryRef v15 = MutableCopy;
      if (!MutableCopy)
      {
        uint64_t v14 = 0;
        CFDictionaryRef v16 = 0;
        CFArrayRef v17 = 0;
        CFDictionaryRef v18 = 0;
        CFURLRef v19 = 0;
LABEL_165:
        uint64_t v12 = 2;
        goto LABEL_126;
      }
      if (!v21)
      {
        CFDictionaryRef v18 = 0;
        CFURLRef v19 = 0;
        if (a7) {
          goto LABEL_12;
        }
        goto LABEL_15;
      }
      CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
      CFURLRef v19 = CFURLCreateCopyAppendingPathComponent(v24, (CFURLRef)a3, @"RecoveryOS", 1u);
      uint64_t v25 = AMAuthInstallBundleCopyBuildIdentityForVariant(a1, v21, a6, (CFTypeRef *)&v330);
      if (v25)
      {
        uint64_t v12 = v25;
        CFMutableDictionaryRef MutableCopy = 0;
        uint64_t v14 = 0;
        CFDictionaryRef v16 = 0;
        CFArrayRef v17 = 0;
        goto LABEL_176;
      }
      if (v330)
      {
        CFAllocatorRef v26 = CFGetAllocator((CFTypeRef)a1);
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v26, 0, v330);
        CFDictionaryRef v18 = MutableCopy;
        if (!MutableCopy)
        {
          uint64_t v14 = 0;
          CFDictionaryRef v16 = 0;
          CFArrayRef v17 = 0;
          goto LABEL_165;
        }
        _AMAuthInstallBundleCreateDebugDirectory((CFTypeRef *)a1, v19);
        if (a7)
        {
LABEL_12:
          CFAllocatorRef v27 = CFGetAllocator((CFTypeRef)a1);
          CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(v27, 0, a7);
          CFArrayRef v17 = MutableCopy;
          if (!MutableCopy)
          {
            uint64_t v14 = 0;
LABEL_156:
            CFDictionaryRef v16 = v18;
            CFDictionaryRef v18 = 0;
            goto LABEL_165;
          }
          goto LABEL_16;
        }
LABEL_15:
        CFArrayRef v17 = 0;
LABEL_16:
        CFTypeRef cf = a3;
        CFAllocatorRef v28 = CFGetAllocator((CFTypeRef)a1);
        if (a9) {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutableCopy(v28, 0, a9);
        }
        else {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v28, 0, MEMORY[0x263EFFF70]);
        }
        uint64_t v14 = Mutable;
        if (!Mutable)
        {
          CFMutableDictionaryRef MutableCopy = v17;
          CFArrayRef v17 = 0;
          goto LABEL_156;
        }
        if (!a10 || !v17) {
          goto LABEL_25;
        }
        uint64_t appended = _AMRAuthInstallBundleAppendFirmwareEntriesToArrays(a1, v15, v17, Mutable);
        if (!appended)
        {
          if (!v18)
          {
            uint64_t IfNecessary = AMAuthInstallBundleCopyReceiptCreateIfNecessary(a1, (const __CFURL *)a3, (CFPropertyListRef *)&v325);
            if (!IfNecessary) {
              goto LABEL_30;
            }
            goto LABEL_157;
          }
          uint64_t appended = _AMRAuthInstallBundleAppendFirmwareEntriesToArrays(a1, v18, v17, v14);
          if (!appended)
          {
LABEL_25:
            uint64_t IfNecessary = AMAuthInstallBundleCopyReceiptCreateIfNecessary(a1, (const __CFURL *)a3, (CFPropertyListRef *)&v325);
            if (!IfNecessary)
            {
              if (v18)
              {
                uint64_t v32 = AMAuthInstallBundleCopyReceiptCreateIfNecessary(a1, v19, (CFPropertyListRef *)&value);
                if (v32)
                {
                  uint64_t v12 = v32;
                  char theArray = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v32);
                  CFDataRef v289 = "failed to generate a recovery OS receipt: %@";
                  goto LABEL_174;
                }
                CFDictionarySetValue(v325, @"RecoveryOS", value);
                SafeRelease(value);
                int v308 = 1;
                goto LABEL_31;
              }
LABEL_30:
              int v308 = 0;
LABEL_31:
              uint64_t v33 = _AMAuthInstallBundleCopyOverrideBuildIdentity((CFDictionaryRef **)a1, v17, (const __CFURL *)a2, (const __CFURL *)a3, v15, (const __CFURL *)v21, v18);
              if (v33)
              {
                uint64_t v12 = v33;
                CFDataRef v289 = "failed to create build identity with overrides";
                goto LABEL_174;
              }
              CFURLRef v317 = v21;
              if (!*(void *)(a1 + 48)) {
                goto LABEL_77;
              }
              v333[0] = 0;
              CFAllocatorRef v39 = CFGetAllocator((CFTypeRef)a1);
              CFArrayRef v47 = _CFArrayCreateWithObjects(v39, v40, v41, v42, v43, v44, v45, v46, @"BbProvisioningManifestKeyHash");
              CFURLRef v311 = v19;
              CFDictionaryRef v309 = v18;
              if (!v47)
              {
                uint64_t v12 = 2;
                goto LABEL_57;
              }
              uint64_t v48 = AMAuthInstallBundleCopyBuildIdentityForVariant(a1, a2, a4, v333);
              if (v48)
              {
                uint64_t v12 = v48;
                goto LABEL_57;
              }
              CFIndex Count = CFArrayGetCount(v47);
              if (Count < 1)
              {
                uint64_t v12 = 0;
                goto LABEL_56;
              }
              CFIndex v50 = Count;
              CFIndex v51 = 0;
              while (1)
              {
                uint64_t v332 = 0;
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v47, v51);
                if (!ValueAtIndex)
                {
LABEL_145:
                  uint64_t v12 = 14;
                  goto LABEL_54;
                }
                CFStringRef v53 = ValueAtIndex;
                CFDataRef v54 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 216), ValueAtIndex);
                if (v54)
                {
                  CFDataRef v60 = v54;
                  AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleSetBasebandKeyHashes", (uint64_t)"setting (from PR2 document/Override): %@ = %@", v55, v56, v57, v58, v59, (char)v53);
                  if (AMAuthInstallBasebandSetKeyHashInternal(a1, v53, v60)) {
                    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleSetBasebandKeyHashes", (uint64_t)"Failed setting (from PR2 document/Override) %@ = %@", v61, v62, v63, v64, v65, (char)v53);
                  }
                }
                else
                {
                  uint64_t v66 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 208), v53);
                  if (v66)
                  {
                    CFURLRef v72 = v66;
                    CFURLRef v73 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 200), v53);
                    if (v73 && !CFEqual(v73, v72))
                    {
                      AMAuthInstallLog(4, (uint64_t)"_AMAuthInstallBundleSetBasebandKeyHashes", (uint64_t)"key hash mismatch, triggering bbfw re-personalization", v74, v75, v76, v77, v78, theArray);
                      *(unsigned char *)(a1 + 224) = 1;
                    }
                    AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleSetBasebandKeyHashes", (uint64_t)"setting (from hash baseband returned): %@ = %@", v74, v75, v76, v77, v78, (char)v53);
                    if (AMAuthInstallBasebandSetKeyHashInternal(a1, v53, (CFDataRef)v72)) {
                      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleSetBasebandKeyHashes", (uint64_t)"Failed setting (from hash baseband returned) %@ = %@", v79, v80, v81, v82, v83, (char)v53);
                    }
                  }
                  else
                  {
                    CFComparisonResult TagForKeyHashName = AMAuthInstallBasebandGetTagForKeyHashName(a1, v53, &v332, v67, v68, v69, v70, v71);
                    if (TagForKeyHashName)
                    {
                      uint64_t v12 = TagForKeyHashName;
LABEL_54:
                      CFURLRef v19 = v311;
                      CFDictionaryRef v18 = v309;
LABEL_56:
                      uint64_t v21 = v317;
LABEL_57:
                      SafeRelease(v47);
                      SafeRelease(v333[0]);
                      if (v12) {
                        goto LABEL_175;
                      }
                      v333[0] = 0;
                      int v97 = AMAuthInstallBundleCopyBuildIdentityForVariant(a1, a2, a4, v333);
                      if (!v97)
                      {
                        CFTypeID v103 = CFDictionaryGetValue((CFDictionaryRef)v333[0], @"BbFactoryDebugEnable");
                        if (!v103
                          || (CFStringRef v104 = v103,
                              CFURLRef v105 = v19,
                              CFTypeID TypeID = CFBooleanGetTypeID(),
                              BOOL v107 = TypeID == CFGetTypeID(v104),
                              CFURLRef v19 = v105,
                              uint64_t v21 = v317,
                              !v107))
                        {
LABEL_67:
                          SafeRelease(v333[0]);
                          if (*(unsigned char *)(a1 + 224))
                          {
                            if (!v325)
                            {
                              CFURLRef v268 = v19;
                              CFDictionaryRef v265 = v18;
                              v276 = v17;
                              uint64_t v12 = 1;
                              goto LABEL_147;
                            }
                            CFArrayRef v111 = (const __CFArray *)CFDictionaryGetValue(v325, @"Personalized");
                            if (!v111)
                            {
                              CFURLRef v268 = v19;
                              CFDictionaryRef v265 = v18;
                              v276 = v17;
                              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleRemovePersonalizedBbfw", (uint64_t)"failed to find personalized array", v112, v113, v114, v115, v116, theArray);
                              uint64_t v12 = 14;
                              goto LABEL_147;
                            }
                            CFArrayRef v117 = v111;
                            CFIndex v118 = CFArrayGetCount(v111);
                            if (v118 >= 1)
                            {
                              CFIndex v119 = v118;
                              CFIndex v120 = 0;
                              while (1)
                              {
                                CFStringRef v121 = (const __CFString *)CFArrayGetValueAtIndex(v117, v120);
                                if (!v121) {
                                  break;
                                }
                                char v127 = (char)v121;
                                if (CFStringHasSuffix(v121, @".bbfw"))
                                {
                                  AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleRemovePersonalizedBbfw", (uint64_t)"removing personalizedEntry %@", v128, v129, v130, v131, v132, v127);
                                  CFArrayRemoveValueAtIndex(v117, v120--);
                                  --v119;
                                }
                                if (++v120 >= v119) {
                                  goto LABEL_76;
                                }
                              }
                              v276 = v17;
                              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleRemovePersonalizedBbfw", (uint64_t)"failed to find personalized entry %d", v122, v123, v124, v125, v126, v120);
                              uint64_t v12 = 14;
                              CFDictionaryRef v265 = v309;
                              CFURLRef v268 = v311;
LABEL_147:
                              char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v12);
                              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"failed to remove bbfw: %@", v278, v279, v280, v281, v282, LocalizedStatusString);
LABEL_148:
                              CFArrayRef v17 = 0;
                              CFDictionaryRef v18 = 0;
                              CFMutableDictionaryRef MutableCopy = v276;
LABEL_143:
                              CFDictionaryRef v16 = v265;
                              CFURLRef v19 = v268;
                              goto LABEL_126;
                            }
LABEL_76:
                            *(unsigned char *)(a1 + 224) = 0;
                            CFDictionaryRef v18 = v309;
                            CFURLRef v19 = v311;
                            uint64_t v21 = v317;
                          }
LABEL_77:
                          if (!v17)
                          {
                            CFArrayRef v314 = 0;
                            goto LABEL_111;
                          }
                          v334.CFIndex length = CFArrayGetCount(v17);
                          v334.CFIndex location = 0;
                          if (!CFArrayContainsValue(v17, v334, @"BasebandFirmware")
                            || (LOBYTE(v333[0]) = 0,
                                LOBYTE(v332) = 0,
                                int v133 = *(_DWORD *)(a1 + 304),
                                AMAuthInstallBasebandIsFused(a1, v333))
                            || (!LOBYTE(v333[0])
                              ? (BOOL v141 = AMAuthInstallBasebandPersonalizationRequired(a1, v134, v135, v136, v137, v138, v139, v140) != 0): (BOOL v141 = 0), AMAuthInstallBasebandLocalSigningEnabled(a1, &v332, v135, v136, v137, v138, v139, v140)|| !v141 && !(_BYTE)v332 && !v133))
                          {
LABEL_100:
                            CFArrayRef v314 = 0;
                            goto LABEL_101;
                          }
                          CFURLRef v312 = v19;
                          int v142 = *(_DWORD *)(a1 + 304);
                          CFArrayRef v143 = (const __CFArray *)CFDictionaryGetValue(v325, @"Personalized");
                          if (v143)
                          {
                            CFArrayRef v149 = v143;
                            CFDictionaryRef v150 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"Manifest");
                            if (v150)
                            {
                              CFDictionaryRef v315 = v150;
                              CFDictionaryRef v156 = (const __CFDictionary *)CFDictionaryGetValue(v150, @"BasebandFirmware");
                              if ((unint64_t)v156 | (unint64_t)CFDictionaryGetValue(**(CFDictionaryRef **)(a1 + 128), @"BasebandFirmware"))
                              {
                                _CFArrayRemoveValue(v17, @"BasebandFirmware");
                                uint64_t BasebandComponentName = AMAuthInstallBundleCopyNextBasebandComponentName((const void *)a1, (CFTypeRef *)&v321, v162, v163, v164, v165, v166, v167);
                                if (BasebandComponentName) {
                                  goto LABEL_184;
                                }
                                CFStringRef v174 = v321;
                                if (!v321)
                                {
                                  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"nextBbfwComponentStr is NULL", v169, v170, v171, v172, v173, theArray);
                                  CFMutableDictionaryRef MutableCopy = v17;
                                  CFArrayRef v17 = 0;
                                  CFDictionaryRef v16 = v18;
                                  CFDictionaryRef v18 = 0;
                                  uint64_t v12 = 14;
                                  goto LABEL_193;
                                }
                                v335.CFIndex length = CFArrayGetCount(v149);
                                v335.CFIndex location = 0;
                                if (CFArrayContainsValue(v149, v335, v174))
                                {
                                  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"entry \"%@\" has been previously personalized; skipping it",
                                    v175,
                                    v176,
                                    v177,
                                    v178,
                                    v179,
                                    (char)v174);
                                  if (v142)
                                  {
                                    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"inserting provisioning info (if any) into existing bbfw for \"%@\"", v180, v181, v182, v183, v184, (char)v174);
                                    CFAllocatorRef v185 = CFGetAllocator((CFTypeRef)a1);
                                    uint64_t BasebandComponentName = AMAuthInstallPlatformCopyURLWithAppendedComponent(v185, cf, v174, 0, &v323);
                                    uint64_t v21 = v317;
                                    if (!BasebandComponentName)
                                    {
                                      if (v323)
                                      {
                                        CFIndex v191 = AMAuthInstallBasebandCopyFirmware((const void *)a1, v323, v323);
                                        if (!v191)
                                        {
                                          uint64_t v197 = AMAuthInstallBasebandCopyAllComponents((const void *)a1, v323, (CFTypeRef *)&v322);
                                          CFURLRef v19 = v312;
                                          if (v197)
                                          {
                                            uint64_t v12 = v197;
                                            CFDataRef v289 = "AMAuthInstallBasebandCopyAllComponents failed";
                                          }
                                          else
                                          {
                                            CFIndex v198 = AMAuthInstallBasebandWriteFilesToBbfw(a1, v323, v322);
                                            if (!v198) {
                                              goto LABEL_100;
                                            }
                                            uint64_t v12 = v198;
                                            CFDataRef v289 = "AMAuthInstallBasebandWriteFilesToBbfw failed";
                                          }
LABEL_174:
                                          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)v289, v34, v35, v36, v37, v38, theArray);
LABEL_175:
                                          CFMutableDictionaryRef MutableCopy = v17;
                                          CFArrayRef v17 = 0;
                                          CFDictionaryRef v16 = v18;
LABEL_176:
                                          CFDictionaryRef v18 = 0;
                                          goto LABEL_126;
                                        }
                                        uint64_t v12 = v191;
                                        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"AMAuthInstallBasebandCopyFirmware failed", v192, v193, v194, v195, v196, theArray);
LABEL_192:
                                        CFMutableDictionaryRef MutableCopy = v17;
                                        CFArrayRef v17 = 0;
                                        CFDictionaryRef v16 = v18;
                                        CFDictionaryRef v18 = 0;
                                      }
                                      else
                                      {
                                        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"bbfwURL AMAuthInstallPlatformCopyURLWithAppendedComponent failed", v186, v187, v188, v189, v190, theArray);
                                        CFMutableDictionaryRef MutableCopy = v17;
                                        CFArrayRef v17 = 0;
                                        CFDictionaryRef v16 = v18;
                                        CFDictionaryRef v18 = 0;
                                        uint64_t v12 = 2;
                                      }
LABEL_193:
                                      CFURLRef v19 = v312;
                                      goto LABEL_126;
                                    }
LABEL_184:
                                    uint64_t v12 = BasebandComponentName;
                                    goto LABEL_192;
                                  }
                                  CFArrayRef v314 = 0;
                                  CFURLRef v19 = v312;
                                  uint64_t v21 = v317;
LABEL_101:
                                  CFIndex v199 = _AMAuthInstallBundleCreateServerRequestDictionary(a1, v17, v15, v325, a2, v18, &v329, &v328);
                                  if (v199)
                                  {
                                    uint64_t v12 = v199;
                                  }
                                  else
                                  {
                                    unint64_t v200 = (unint64_t)CFDictionaryGetValue(v325, @"CumulativeResponse");
                                    if (v200 | (unint64_t)v329)
                                    {
                                      if (!v329)
                                      {
                                        CFURLRef v327 = (const __CFURL *)CFRetain((CFTypeRef)v200);
                                        AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"This is an install/stitch-only request.", v210, v211, v212, v213, v214, theArray);
                                        goto LABEL_111;
                                      }
                                      uint64_t PersonalizedResponse = AMAuthInstallApCreatePersonalizedResponse(a1, v329, (CFTypeRef *)&v327);
                                      if (!PersonalizedResponse)
                                      {
                                        int v207 = v308;
                                        if (!v328) {
                                          int v207 = 0;
                                        }
                                        if (v207 == 1)
                                        {
                                          uint64_t v208 = AMAuthInstallApCreatePersonalizedResponse(a1, v328, (CFTypeRef *)&v326);
                                          if (v208)
                                          {
                                            uint64_t v12 = v208;
                                            v209 = "failed to create ap ticket for recovery OS";
                                            goto LABEL_180;
                                          }
                                        }
LABEL_111:
                                        CFDictionaryRef v215 = (const __CFDictionary *)CFDictionaryGetValue(v325, @"Updaters");
                                        if (!v215)
                                        {
                                          CFDictionaryRef v235 = v15;
                                          CFArrayRef v236 = v14;
                                          CFDictionaryRef v227 = 0;
                                          CFBooleanRef v228 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
                                          goto LABEL_119;
                                        }
                                        CFDictionaryRef v216 = v215;
                                        CFURLRef v217 = v19;
                                        CFIndex v218 = CFDictionaryGetCount(v215);
                                        uint64_t v219 = (const void **)malloc(8 * v218);
                                        if (v219)
                                        {
                                          uint64_t v220 = v219;
                                          *(void *)uint64_t v306 = v17;
                                          uint64_t v221 = v14;
                                          CFDictionaryRef v222 = v18;
                                          CFDictionaryRef v223 = v15;
                                          CFDictionaryGetKeysAndValues(v216, v219, 0);
                                          if (v218 >= 1)
                                          {
                                            uint64_t v224 = v220;
                                            do
                                            {
                                              uint64_t v225 = *v224++;
                                              uint64_t v226 = (__CFDictionary *)CFDictionaryGetValue(v216, v225);
                                              CFDictionaryRemoveValue(v226, @"RequestTags");
                                              --v218;
                                            }
                                            while (v218);
                                          }
                                          CFDictionaryRef v227 = (const __CFDictionary *)v220;
                                          CFBooleanRef v228 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
                                          uint64_t v229 = AMAuthInstallBundleWriteReceipt((void *)a1, cf, v325, (const __CFBoolean *)*MEMORY[0x263EFFB38]);
                                          CFURLRef v19 = v217;
                                          if (v229)
                                          {
                                            uint64_t v12 = v229;
                                            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"AMAuthInstallBundleWriteReceipt returned %d", v230, v231, v232, v233, v234, v229);
                                            CFDictionaryRef v15 = v223;
                                            CFDictionaryRef v16 = v222;
                                            uint64_t v296 = v221;
                                            CFMutableDictionaryRef MutableCopy = *(CFMutableDictionaryRef *)v306;
                                            CFArrayRef v17 = v314;
                                            CFDictionaryRef v18 = v227;
                                            uint64_t v14 = v296;
                                            goto LABEL_126;
                                          }
                                          CFDictionaryRef v235 = v223;
                                          CFDictionaryRef v18 = v222;
                                          CFArrayRef v236 = v221;
                                          CFArrayRef v17 = *(const __CFArray **)v306;
                                          uint64_t v21 = v317;
LABEL_119:
                                          CFBooleanRef BOOLean = v228;
                                          CFArrayRef v237 = v236;
                                          CFDictionaryRef v15 = v235;
                                          uint64_t v238 = _AMAuthInstallBundlePopulatePersonalizedBundle((unsigned char *)a1, a2, cf, (int)a4, v235, v327, v325, v17, a8, v236, BOOLean);
                                          if (v238)
                                          {
                                            uint64_t v12 = v238;
                                            char v290 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v238);
                                            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"failed to personalize bundle", v291, v292, v293, v294, v295, v290);
                                          }
                                          else
                                          {
                                            if (v328)
                                            {
                                              uint64_t v239 = v21;
                                              CFURLRef v240 = v19;
                                              CFURLRef v241 = v19;
                                              CFDictionaryRef v242 = v18;
                                              uint64_t v243 = v17;
                                              uint64_t v12 = _AMAuthInstallBundlePopulatePersonalizedBundle((unsigned char *)a1, v239, v241, (int)a6, v18, v326, v325, v17, a8, v237, (CFBooleanRef)*MEMORY[0x263EFFB40]);
                                              if (v12)
                                              {
                                                char v297 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v12);
                                                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"failed to personalize recovery OS bundle", v298, v299, v300, v301, v302, v297);
                                              }
                                              CFArrayRef v17 = v314;
                                              CFMutableDictionaryRef MutableCopy = v243;
                                              CFDictionaryRef v18 = v227;
                                              CFDictionaryRef v16 = v242;
                                              uint64_t v14 = v237;
                                              CFURLRef v19 = v240;
                                              goto LABEL_126;
                                            }
                                            uint64_t v12 = 0;
                                          }
                                          CFMutableDictionaryRef MutableCopy = v17;
                                          CFArrayRef v17 = v314;
                                          CFDictionaryRef v16 = v18;
                                          CFDictionaryRef v18 = v227;
                                          uint64_t v14 = v237;
                                          goto LABEL_126;
                                        }
                                        CFDictionaryRef v16 = v18;
                                        CFDictionaryRef v18 = 0;
                                        uint64_t v12 = 2;
                                        CFURLRef v19 = v217;
LABEL_183:
                                        CFMutableDictionaryRef MutableCopy = v17;
                                        CFArrayRef v17 = v314;
                                        goto LABEL_126;
                                      }
                                      uint64_t v12 = PersonalizedResponse;
                                      v209 = "failed to create ap ticket";
LABEL_180:
                                      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)v209, v202, v203, v204, v205, v206, theArray);
                                    }
                                    else
                                    {
                                      uint64_t v12 = 0;
                                    }
                                  }
                                  CFDictionaryRef v16 = v18;
                                  CFDictionaryRef v18 = 0;
                                  goto LABEL_183;
                                }
                                uint64_t v310 = v14;
                                AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"performing separate baseband firmware personalization of %@", v175, v176, v177, v178, v179, (char)v174);
                                uint64_t v246 = CFDictionaryGetValue(v15, @"UniqueBuildID");
                                *(void *)uint64_t v307 = v17;
                                if (!v246)
                                {
                                  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"this build lacks UniqueBuildID", v247, v248, v249, v250, v251, theArray);
                                  CFArrayRef v17 = 0;
                                  CFTypeRef v255 = cf;
                                  goto LABEL_132;
                                }
                                uint64_t v252 = v246;
                                CFAllocatorRef v253 = CFGetAllocator((CFTypeRef)a1);
                                v254 = CFDictionaryCreateMutable(v253, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                                CFTypeRef v255 = cf;
                                if (v254)
                                {
                                  CFArrayRef v17 = v254;
                                  CFDictionarySetValue(v254, @"UniqueBuildID", v252);
LABEL_132:
                                  uint64_t v256 = *(void *)(a1 + 16);
                                  if (*(void *)(v256 + 120) || *(void *)(v256 + 128))
                                  {
                                    v257 = CFDictionaryGetValue(v15, @"ProductMarketingVersion");
                                    if (v257)
                                    {
                                      uint64_t v263 = v257;
                                      if (v17
                                        || (CFAllocatorRef v264 = CFGetAllocator((CFTypeRef)a1),
                                            (CFArrayRef v17 = CFDictionaryCreateMutable(v264, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) != 0))
                                      {
                                        CFDictionarySetValue(v17, @"ProductMarketingVersion", v263);
                                        goto LABEL_139;
                                      }
LABEL_198:
                                      CFDictionaryRef v16 = v18;
                                      CFDictionaryRef v18 = 0;
                                      uint64_t v12 = 2;
                                      uint64_t v14 = v310;
                                      CFURLRef v19 = v312;
                                      CFMutableDictionaryRef MutableCopy = *(CFMutableDictionaryRef *)v307;
                                      goto LABEL_126;
                                    }
                                    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"this build lacks ProductMarketingVersion", v258, v259, v260, v261, v262, theArray);
                                  }
LABEL_139:
                                  CFDictionaryRef v265 = v18;
                                  CFDictionaryRef v266 = v315;
                                  CFArrayRef v314 = v17;
                                  uint64_t v267 = _AMAuthInstallBundleInstallPersonalizedBasebandFirmware((CFDictionaryRef **)a1, v156, 0, v266, a2, v255, v149, v17);
                                  uint64_t v14 = v310;
                                  CFURLRef v268 = v312;
                                  if (v267)
                                  {
                                    uint64_t v12 = v267;
                                  }
                                  else
                                  {
                                    uint64_t v269 = AMAuthInstallBundleWriteReceipt((void *)a1, v255, v325, (const __CFBoolean *)*MEMORY[0x263EFFB38]);
                                    uint64_t v21 = v317;
                                    if (!v269)
                                    {
                                      CFArrayRef v17 = *(const __CFArray **)v307;
                                      CFURLRef v19 = v312;
                                      goto LABEL_101;
                                    }
                                    uint64_t v12 = v269;
                                    char v270 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v269);
                                    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"failed to write receipt: %@", v271, v272, v273, v274, v275, v270);
                                  }
                                  CFDictionaryRef v18 = 0;
                                  CFMutableDictionaryRef MutableCopy = *(CFMutableDictionaryRef *)v307;
                                  goto LABEL_143;
                                }
                                CFArrayRef v17 = 0;
                                goto LABEL_198;
                              }
                              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"'%@' not found in manifestDict", v157, v158, v159, v160, v161, (char)@"BasebandFirmware");
                            }
                            else
                            {
                              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"'%@' not found in buildIdentity", v151, v152, v153, v154, v155, (char)@"Manifest");
                            }
                          }
                          else
                          {
                            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"'%@' not found in receiptDict", v144, v145, v146, v147, v148, (char)@"Personalized");
                          }
                          CFMutableDictionaryRef MutableCopy = v17;
                          CFArrayRef v17 = 0;
                          CFDictionaryRef v16 = v18;
                          CFDictionaryRef v18 = 0;
                          uint64_t v12 = 8;
                          goto LABEL_193;
                        }
                        if (CFBooleanGetValue((CFBooleanRef)v104) == 1)
                        {
                          CFAllocatorRef v108 = (const void *)*MEMORY[0x263EFFB40];
                          AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleSetBasebandFactoryDebugEnable", (uint64_t)"setting (from build manifest): %@ = %@", v98, v99, v100, v101, v102, (char)@"BbFactoryDebugEnable");
                          if (!AMAuthInstallSetBbRequestEntry((const void *)a1, @"BbFactoryDebugEnable", v108))goto LABEL_67; {
                          CFArrayRef theArraya = (CFArrayRef)@"BbFactoryDebugEnable";
                          }
                          CFDictionaryRef v109 = "Failed setting (from build manifest) %@ : error = %d";
LABEL_169:
                          uint64_t v110 = 3;
                        }
                        else
                        {
                          CFArrayRef theArraya = (CFArrayRef)@"BbFactoryDebugEnable";
                          CFDictionaryRef v109 = "%@ (from build manifest) is not true. Not setting it";
                          uint64_t v110 = 6;
                        }
                        AMAuthInstallLog(v110, (uint64_t)"_AMAuthInstallBundleSetBasebandFactoryDebugEnable", (uint64_t)v109, v98, v99, v100, v101, v102, (char)theArraya);
                        goto LABEL_67;
                      }
                      LOBYTE(theArraya) = v97;
                      CFDictionaryRef v109 = "Failed to read build identity : error = %d";
                      goto LABEL_169;
                    }
                    if (!v332) {
                      goto LABEL_145;
                    }
                    CFDataRef v85 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v333[0], v332);
                    if (v85)
                    {
                      CFDataRef v91 = v85;
                      AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleSetBasebandKeyHashes", (uint64_t)"setting (from build manifest): %@ = %@", v86, v87, v88, v89, v90, (char)v53);
                      if (AMAuthInstallBasebandSetKeyHashInternal(a1, v53, v91)) {
                        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleSetBasebandKeyHashes", (uint64_t)"Failed setting (from build manifest) %@ = %@", v92, v93, v94, v95, v96, (char)v53);
                      }
                    }
                  }
                }
                if (v50 == ++v51)
                {
                  uint64_t v12 = 0;
                  goto LABEL_54;
                }
              }
            }
LABEL_157:
            uint64_t v12 = IfNecessary;
            CFURLRef v268 = v19;
            CFDictionaryRef v265 = v18;
            v276 = v17;
            char v283 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, IfNecessary);
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialWithRecoveryOS", (uint64_t)"failed to generate a receipt: %@", v284, v285, v286, v287, v288, v283);
            goto LABEL_148;
          }
        }
        uint64_t v12 = appended;
        goto LABEL_175;
      }
      CFMutableDictionaryRef MutableCopy = 0;
      uint64_t v14 = 0;
      CFDictionaryRef v16 = 0;
      CFArrayRef v17 = 0;
      CFDictionaryRef v18 = 0;
    }
    else
    {
      CFMutableDictionaryRef MutableCopy = 0;
      uint64_t v14 = 0;
      CFDictionaryRef v15 = 0;
      CFDictionaryRef v16 = 0;
      CFArrayRef v17 = 0;
      CFDictionaryRef v18 = 0;
      CFURLRef v19 = 0;
    }
    uint64_t v12 = 14;
  }
LABEL_126:
  CFDictionaryRef v244 = v16;
  SafeRelease(MutableCopy);
  SafeRelease(v14);
  SafeRelease(v331);
  SafeRelease(v15);
  SafeRelease(v329);
  SafeRelease(v327);
  SafeRelease(v325);
  SafeRelease(v17);
  SafeRelease(v323);
  SafeRelease(v322);
  SafeRelease(v321);
  SafeFree(v18);
  SafeRelease(v19);
  SafeRelease(v330);
  SafeRelease(v244);
  return v12;
}

CFStringRef _AMAuthInstallBundlePersonalizeApplyPreferencesOverrides(void *a1)
{
  if (AMAuthInstallPreferencesGetBooleanValue(0, @"BAAForceEnable", 0)) {
    AMAuthInstallEnableManagedRequest(a1, 0, v2, v3, v4, v5, v6, v7);
  }
  CFStringRef result = AMAuthInstallPreferencesGetBooleanValue(0, @"AlternateUpdateBAAForceEnable", 0);
  if (result)
  {
    return (const __CFString *)AMAuthInstallEnableAlternateUpdateRequest(a1, 0, v9, v10, v11, v12, v13, v14);
  }
  return result;
}

char *_AMAuthInstallBundleCreateDebugDirectory(CFTypeRef *a1, const void *a2)
{
  uint64_t v4 = (CFURLRef *)(a1 + 42);
  SafeRelease(a1[42]);
  CFAllocatorRef v5 = CFGetAllocator(a1);
  uint64_t v6 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v5, a2, @"amai/debug", 1u, v4);
  if (v6)
  {
    uint64_t v7 = v6;
    char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v6);
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCreateDebugDirectory", (uint64_t)"failed to create debug directory within bundle: %@", v9, v10, v11, v12, v13, LocalizedStatusString);
    AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateDebugDirectory", (uint64_t)"bundle: %@", v14, v15, v16, v17, v18, (char)a2);
    return (char *)v7;
  }
  else
  {
    CFURLRef v20 = *v4;
    return AMAuthInstallPlatformMakeDirectoryForURL(v20);
  }
}

uint64_t _AMRAuthInstallBundleAppendFirmwareEntriesToArrays(uint64_t a1, CFDictionaryRef theDict, const __CFArray *a3, __CFArray *a4)
{
  CFBooleanRef BOOLean = (const __CFBoolean *)*MEMORY[0x263EFFB38];
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Info");
  if (Value)
  {
    CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(Value, @"Variant");
    if (v8)
    {
      CFStringRef v9 = *(const __CFString **)(a1 + 496);
      if (v9)
      {
        CFComparisonResult v10 = CFStringCompare(v8, v9, 0);
        CFBooleanRef v11 = BOOLean;
        if (v10 == kCFCompareEqualTo) {
          CFBooleanRef v11 = (const __CFBoolean *)*MEMORY[0x263EFFB40];
        }
        CFBooleanRef BOOLean = v11;
      }
    }
  }
  CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Manifest");
  if (v12)
  {
    CFDictionaryRef v13 = v12;
    CFIndex Count = CFDictionaryGetCount(v12);
    uint64_t v15 = (const void **)malloc(8 * Count);
    uint64_t v16 = (const void **)malloc(8 * Count);
    CFDictionaryGetKeysAndValues(v13, v15, v16);
    if (Count >= 1)
    {
      uint64_t v78 = a4;
      CFStringRef v17 = 0;
      uint64_t v18 = 0;
      CFStringRef v19 = 0;
      CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      while (1)
      {
        CFStringRef v20 = (const __CFString *)v15[v18];
        uint64_t v21 = v16[v18];
        CFTypeID v22 = CFGetTypeID(v21);
        if (v22 != CFDictionaryGetTypeID())
        {
          AMAuthInstallLog(3, (uint64_t)"_AMRAuthInstallBundleAppendFirmwareEntriesToArrays", (uint64_t)"Unexpected manifest entry structure - should be dictionary.\n", v23, v24, v25, v26, v27, v77);
          uint64_t v75 = 99;
          goto LABEL_31;
        }
        CFAllocatorRef v28 = CFDictionaryGetValue((CFDictionaryRef)v21, @"Info");
        if (v28)
        {
          uint64_t v34 = v28;
          int v35 = _CFDictionaryGetBoolean(v28, @"IsFirmwarePayload", 0, v29, v30, v31, v32, v33);
          int v41 = _CFDictionaryGetBoolean(v34, @"IsSecondaryFirmwarePayload", 0, v36, v37, v38, v39, v40) | v35;
          int v47 = _CFDictionaryGetBoolean(v34, @"IsFUDFirmware", 0, v42, v43, v44, v45, v46);
          int v53 = v41 | v47 | _CFDictionaryGetBoolean(v34, @"IsLoadedByiBoot", 0, v48, v49, v50, v51, v52);
          int v59 = _CFDictionaryGetBoolean(v34, @"IsEarlyAccessFirmware", 0, v54, v55, v56, v57, v58);
          int v65 = v59 | _CFDictionaryGetBoolean(v34, @"IsiBootEANFirmware", 0, v60, v61, v62, v63, v64);
          if (v53 | v65 | _CFDictionaryGetBoolean(v34, @"IsiBootNonEssentialFirmware", 0, v66, v67, v68, v69, v70))
          {
            SafeRelease(v19);
            if (CFBooleanGetValue(BOOLean))
            {
              char v77 = (char)v20;
              CFStringRef Copy = CFStringCreateWithFormat(alloc, 0, @"RecoveryOS%@");
            }
            else
            {
              CFStringRef Copy = CFStringCreateCopy(alloc, v20);
            }
            CFStringRef v19 = Copy;
            v82.CFIndex length = CFArrayGetCount(a3);
            v82.CFIndex location = 0;
            if (CFArrayContainsValue(a3, v82, v19))
            {
              if (v17) {
                goto LABEL_26;
              }
            }
            else
            {
              CFArrayAppendValue(a3, v19);
              if (v17) {
                goto LABEL_26;
              }
            }
            CFStringRef v72 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v34, @"Path");
            if (v72)
            {
              CFStringRef CopyByDeletingLastComponent = _AMAuthInstallBundleComponentCreateCopyByDeletingLastComponent(alloc, v72);
              if (!CopyByDeletingLastComponent)
              {
                CFStringRef v17 = 0;
LABEL_33:
                uint64_t v75 = 2;
                goto LABEL_31;
              }
              CFStringRef v74 = CopyByDeletingLastComponent;
              char v77 = (char)CopyByDeletingLastComponent;
              CFStringRef v17 = CFStringCreateWithFormat(alloc, 0, @"%@/manifest");
              CFRelease(v74);
              if (!v17) {
                goto LABEL_33;
              }
              if (v78) {
                CFArrayAppendValue(v78, v17);
              }
            }
            else
            {
              CFStringRef v17 = 0;
            }
          }
        }
LABEL_26:
        if (Count == ++v18) {
          goto LABEL_30;
        }
      }
    }
    CFStringRef v19 = 0;
    CFStringRef v17 = 0;
LABEL_30:
    uint64_t v75 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    CFStringRef v19 = 0;
    CFStringRef v17 = 0;
    uint64_t v75 = 7;
  }
LABEL_31:
  SafeFree(v15);
  SafeFree(v16);
  SafeRelease(v17);
  SafeRelease(v19);
  return v75;
}

uint64_t AMAuthInstallBundleCopyReceiptCreateIfNecessary(uint64_t a1, const __CFURL *a2, CFPropertyListRef *a3)
{
  CFURLRef v66 = 0;
  CFPropertyListRef propertyList = 0;
  BOOL v65 = 0;
  CFDictionaryRef context = 0;
  CFMutableDictionaryRef v64 = 0;
  AMAuthInstallLockLock(*(os_unfair_lock_s **)(a1 + 360));
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v7 = 1;
  if (!a3 || !a2)
  {
    CFDictionaryRef v8 = 0;
    CFMutableArrayRef v9 = 0;
    CFMutableDictionaryRef v10 = 0;
    goto LABEL_18;
  }
  CFDictionaryRef v8 = 0;
  CFMutableArrayRef v9 = 0;
  CFMutableDictionaryRef v10 = 0;
  if (*(void *)(a1 + 128))
  {
    CFBooleanRef v11 = (const __CFBoolean **)MEMORY[0x263EFFB38];
    CFStringRef v12 = CFURLGetString(a2);
    CFIndex location = CFStringFind(v12, @"RecoveryOS", 0).location;
    uint64_t v14 = (const __CFBoolean **)MEMORY[0x263EFFB40];
    if (location == -1) {
      uint64_t v14 = v11;
    }
    CFBooleanRef v15 = *v14;
    if (*(void *)(*(void *)(a1 + 128) + 8))
    {
      int Value = CFBooleanGetValue(v15);
      uint64_t v17 = *(void *)(a1 + 128);
      CFDictionaryRef v18 = *(const __CFDictionary **)(v17 + 8);
      if (Value)
      {
        CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v17 + 8), @"RecoveryOS");
        if (!v19) {
          goto LABEL_14;
        }
        CFDictionaryRef v18 = v19;
      }
      CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(v18, @"Manifest");
      if (v18 && v20 && CFDictionaryGetCount(v20) >= 1)
      {
        CFAllocatorRef v21 = CFGetAllocator((CFTypeRef)a1);
        DeepCFStringRef Copy = CFPropertyListCreateDeepCopy(v21, v18, 2uLL);
        CFMutableDictionaryRef Mutable = 0;
        CFDictionaryRef v8 = 0;
        CFMutableArrayRef v9 = 0;
        CFMutableDictionaryRef v10 = 0;
        *a3 = DeepCopy;
        uint64_t v7 = 2 * (DeepCopy == 0);
        goto LABEL_18;
      }
    }
LABEL_14:
    CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)a1);
    uint64_t v24 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v23, a2, @"amai/receipt.plist", 0, &v66);
    if (v24)
    {
      uint64_t v7 = v24;
LABEL_16:
      CFMutableDictionaryRef Mutable = 0;
LABEL_17:
      CFDictionaryRef v8 = 0;
      CFMutableArrayRef v9 = 0;
      CFMutableDictionaryRef v10 = 0;
      goto LABEL_18;
    }
    uint64_t v26 = AMAuthInstallPlatformFileURLExists(v66, &v65);
    if (v26)
    {
      uint64_t v7 = v26;
      char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v26);
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyReceiptCreateIfNecessary", (uint64_t)"AMAuthInstallPlatformFileURLExists failed: %@", v51, v52, v53, v54, v55, LocalizedStatusString);
      goto LABEL_16;
    }
    BOOL v27 = v65;
    CFAllocatorRef v28 = CFGetAllocator((CFTypeRef)a1);
    if (v27)
    {
      uint64_t v29 = AMAuthInstallSupportCreateDictionaryFromFileURL(v28, &propertyList, v66);
      if (v29)
      {
        uint64_t v7 = v29;
        char v56 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v29);
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyReceiptCreateIfNecessary", (uint64_t)"failed to read receipt: %@", v57, v58, v59, v60, v61, v56);
        goto LABEL_16;
      }
      CFAllocatorRef v30 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v7 = 2;
      CFDictionaryRef v31 = (const __CFDictionary *)CFPropertyListCreateDeepCopy(v30, propertyList, 2uLL);
      CFMutableDictionaryRef Mutable = v31;
      if (!v31) {
        goto LABEL_17;
      }
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(v31, @"Overrides");
      if (v8)
      {
        CFAllocatorRef v32 = CFGetAllocator((CFTypeRef)a1);
        CFDictionaryRef context = CFDictionaryCreateMutable(v32, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (context)
        {
          CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)_AMAuthInstallBundleNormalizeOverridePaths, &context);
          if (CFDictionaryGetCount(**(CFDictionaryRef **)(a1 + 128)) >= 1)
          {
            CFAllocatorRef v33 = CFGetAllocator((CFTypeRef)a1);
            uint64_t v34 = AMAuthInstallSupportCreateMergedDictionary(v33, **(const __CFDictionary ***)(a1 + 128), context, &v64);
            if (v34)
            {
              uint64_t v7 = v34;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyReceiptCreateIfNecessary", (uint64_t)"failed to merge override dictionaries", v35, v36, v37, v38, v39, v62);
              goto LABEL_17;
            }
          }
          SafeRelease(**(CFTypeRef **)(a1 + 128));
          CFMutableDictionaryRef v40 = v64;
          CFAllocatorRef v41 = CFGetAllocator((CFTypeRef)a1);
          p_CFDictionaryRef context = &v64;
          if (!v40) {
            p_CFDictionaryRef context = &context;
          }
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v41, 0, *p_context);
          CFDictionaryRef v8 = 0;
          **(void **)(a1 + 128) = MutableCopy;
          if (!MutableCopy)
          {
            uint64_t v7 = 2;
            CFMutableArrayRef v9 = 0;
            CFMutableDictionaryRef v10 = 0;
            goto LABEL_18;
          }
          CFMutableArrayRef v9 = 0;
          CFMutableDictionaryRef v10 = 0;
          goto LABEL_37;
        }
        goto LABEL_44;
      }
      CFMutableArrayRef v9 = 0;
      CFMutableDictionaryRef v10 = 0;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v28, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!Mutable)
      {
LABEL_44:
        CFDictionaryRef v8 = 0;
        goto LABEL_45;
      }
      CFAllocatorRef v44 = CFGetAllocator((CFTypeRef)a1);
      CFDictionaryRef v8 = CFArrayCreateMutable(v44, 0, MEMORY[0x263EFFF70]);
      if (!v8)
      {
LABEL_45:
        CFMutableArrayRef v9 = 0;
        goto LABEL_46;
      }
      CFAllocatorRef v45 = CFGetAllocator((CFTypeRef)a1);
      CFMutableArrayRef v9 = CFArrayCreateMutable(v45, 0, MEMORY[0x263EFFF70]);
      if (!v9)
      {
LABEL_46:
        CFMutableDictionaryRef v10 = 0;
        goto LABEL_47;
      }
      CFAllocatorRef v46 = CFGetAllocator((CFTypeRef)a1);
      CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v46, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!v10)
      {
LABEL_47:
        uint64_t v7 = 2;
        goto LABEL_18;
      }
      CFDictionarySetValue(Mutable, @"Personalized", v8);
      CFDictionarySetValue(Mutable, @"Linked", v9);
      CFDictionarySetValue(Mutable, @"Manifest", v10);
    }
LABEL_37:
    CFAllocatorRef v47 = CFGetAllocator((CFTypeRef)a1);
    *a3 = CFPropertyListCreateDeepCopy(v47, Mutable, 2uLL);
    int v48 = CFBooleanGetValue(v15);
    uint64_t v49 = *(__CFDictionary **)(*(void *)(a1 + 128) + 8);
    if (v48)
    {
      if (v49) {
        CFDictionaryReplaceValue(v49, @"RecoveryOS", Mutable);
      }
      uint64_t v7 = 0;
    }
    else
    {
      if (v49)
      {
        CFRelease(v49);
        *(void *)(*(void *)(a1 + 128) + 8) = 0;
      }
      uint64_t v7 = 0;
      *(void *)(*(void *)(a1 + 128) + 8) = CFRetain(Mutable);
    }
  }
LABEL_18:
  AMAuthInstallLockUnlock(*(os_unfair_lock_s **)(a1 + 360));
  SafeRelease(v66);
  SafeRelease(0);
  SafeRelease(Mutable);
  SafeRelease(v8);
  SafeRelease(v9);
  SafeRelease(propertyList);
  SafeRelease(v10);
  SafeRelease(v64);
  SafeRelease(context);
  return v7;
}

uint64_t _AMAuthInstallBundleCopyOverrideBuildIdentity(CFDictionaryRef **cf, const __CFArray *a2, const __CFURL *a3, const __CFURL *a4, const __CFDictionary *a5, const __CFURL *a6, const __CFDictionary *a7)
{
  CFMutableDictionaryRef MutableCopy = 0;
  CFMutableDictionaryRef v167 = 0;
  CFTypeRef v168 = 0;
  CFStringRef v166 = 0;
  uint64_t v9 = 1;
  if (!cf || !a2 || !a3)
  {
    CFDictionaryRef v12 = 0;
    CFDictionaryRef v13 = 0;
    CFTypeRef v14 = 0;
    CFMutableDictionaryRef v15 = 0;
    CFMutableDictionaryRef v16 = 0;
    CFURLRef v17 = 0;
    CFStringRef v18 = 0;
    goto LABEL_119;
  }
  CFDictionaryRef v12 = 0;
  CFDictionaryRef v13 = 0;
  CFTypeRef v14 = 0;
  CFMutableDictionaryRef v15 = 0;
  CFMutableDictionaryRef v16 = 0;
  CFURLRef v17 = 0;
  CFStringRef v18 = 0;
  if (a5)
  {
    CFAllocatorRef v20 = CFGetAllocator(cf);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v20, 0, *cf[16]);
    CFDictionaryRef v13 = MutableCopy;
    if (!MutableCopy)
    {
      CFDictionaryRef v12 = 0;
      CFTypeRef v14 = 0;
      CFMutableDictionaryRef v15 = 0;
      goto LABEL_142;
    }
    CFDictionaryRef theDict = (const __CFDictionary *)CFDictionaryGetValue(a5, @"Manifest");
    if (!theDict)
    {
LABEL_9:
      CFDictionaryRef v12 = 0;
      CFMutableDictionaryRef MutableCopy = v13;
      CFDictionaryRef v13 = 0;
      CFTypeRef v14 = 0;
      CFMutableDictionaryRef v15 = 0;
      CFMutableDictionaryRef v16 = 0;
      CFURLRef v17 = 0;
      CFStringRef v18 = 0;
      uint64_t v9 = 8;
      goto LABEL_119;
    }
    if (a7)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a7, @"Manifest");
      if (!Value) {
        goto LABEL_9;
      }
    }
    else
    {
      CFDictionaryRef Value = 0;
    }
    CFAllocatorRef v21 = CFGetAllocator(cf);
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutableCopy(v21, 0, theDict);
    if (!v15)
    {
LABEL_14:
      CFDictionaryRef v12 = 0;
      CFMutableDictionaryRef MutableCopy = v13;
      CFDictionaryRef v13 = 0;
      CFTypeRef v14 = 0;
LABEL_142:
      CFMutableDictionaryRef v16 = 0;
      CFURLRef v17 = 0;
      CFStringRef v18 = 0;
      uint64_t v9 = 2;
      goto LABEL_119;
    }
    uint64_t v147 = a5;
    if (a7)
    {
      CFAllocatorRef v22 = CFGetAllocator(cf);
      CFMutableDictionaryRef v23 = CFDictionaryCreateMutableCopy(v22, 0, Value);
      CFArrayRef v24 = a2;
      if (!v23) {
        goto LABEL_14;
      }
    }
    else
    {
      CFMutableDictionaryRef v23 = 0;
      CFArrayRef v24 = a2;
    }
    CFURLRef v148 = a3;
    uint64_t v146 = a7;
    CFMutableDictionaryRef v152 = v23;
    CFMutableDictionaryRef v156 = v15;
    uint64_t v153 = v13;
    if (CFArrayGetCount(v24) < 1)
    {
LABEL_90:
      if (CFDictionaryGetCount(v13) < 1) {
        goto LABEL_116;
      }
      v170[0] = 0;
      CFIndex Count = CFDictionaryGetCount(v13);
      keysa = (void **)malloc(8 * Count);
      if (keysa)
      {
        PathComponent = (__CFString *)malloc(8 * Count);
        if (PathComponent)
        {
          CFDictionaryGetKeysAndValues(v13, (const void **)keysa, (const void **)&PathComponent->isa);
          CFDictionaryRef theDicta = (CFDictionaryRef)PathComponent;
          if (Count < 1)
          {
LABEL_114:
            uint64_t v9 = 0;
            CFMutableDictionaryRef Mutable = 0;
            PathComponent = 0;
            CFURLRef v140 = 0;
            goto LABEL_115;
          }
          uint64_t v127 = 0;
          CFAllocatorRef v128 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          uint64_t v129 = (const void *)*MEMORY[0x263EFFB38];
          key = (void *)*MEMORY[0x263EFFB40];
          uint64_t v130 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
          uint64_t v131 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
          while (1)
          {
            CFStringRef v132 = (const __CFString *)keysa[v127];
            CFURLRef v165 = (const __CFURL *)*((void *)&PathComponent->isa + v127);
            char v169 = 0;
            v171.CFIndex length = CFArrayGetCount(v24);
            v171.CFIndex location = 0;
            if (CFArrayContainsValue(v24, v171, v132))
            {
              v170[0] = CFDictionaryCreateMutable(v128, 0, v130, v131);
              if (!v170[0])
              {
                CFMutableDictionaryRef Mutable = 0;
LABEL_129:
                PathComponent = 0;
LABEL_130:
                CFURLRef v163 = 0;
                uint64_t v9 = 2;
                goto LABEL_132;
              }
              if (CFStringCompare(v132, @"BasebandFirmware", 0)) {
                CFDictionaryAddValue(v170[0], @"Trusted", v129);
              }
              int v133 = cf[2];
              if (*((unsigned char *)v133 + 20)) {
                uint64_t v134 = key;
              }
              else {
                uint64_t v134 = v129;
              }
              if (*((unsigned char *)v133 + 72)) {
                uint64_t v135 = key;
              }
              else {
                uint64_t v135 = v129;
              }
              CFDictionaryAddValue(v170[0], @"EPRO", v134);
              CFDictionaryAddValue(v170[0], @"ESEC", v135);
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v128, 0, v130, v131);
              if (!Mutable) {
                goto LABEL_129;
              }
              PathComponent = (__CFString *)CFURLCopyLastPathComponent(v165);
              if (!PathComponent)
              {
                CFURLRef v163 = 0;
                uint64_t v9 = 3;
LABEL_132:
                CFURLRef v140 = v163;
LABEL_115:
                SafeRelease(v170[0]);
                SafeRelease(Mutable);
                SafeRelease(PathComponent);
                SafeFree(keysa);
                SafeFree(theDicta);
                SafeRelease(v140);
                CFMutableDictionaryRef MutableCopy = v153;
                if (!v9)
                {
LABEL_116:
                  CFMutableDictionaryRef v15 = v156;
                  CFDictionarySetValue(v147, @"Manifest", v156);
                  CFMutableDictionaryRef v16 = v152;
                  if (v146) {
                    CFDictionarySetValue(v146, @"Manifest", v152);
                  }
                  uint64_t v9 = 0;
                  CFDictionaryRef v12 = 0;
                  CFDictionaryRef v13 = 0;
                  CFTypeRef v14 = 0;
                  CFURLRef v17 = 0;
                  CFStringRef v18 = 0;
                  CFMutableDictionaryRef MutableCopy = v153;
                  goto LABEL_119;
                }
                CFDictionaryRef v12 = 0;
LABEL_124:
                CFDictionaryRef v13 = 0;
                CFTypeRef v14 = 0;
LABEL_135:
                CFURLRef v17 = 0;
                CFStringRef v18 = 0;
LABEL_136:
                CFMutableDictionaryRef v15 = v156;
                CFMutableDictionaryRef v16 = v152;
                goto LABEL_119;
              }
              CFAllocatorRef v137 = CFGetAllocator(cf);
              CFURLRef v138 = CFURLCreateCopyAppendingPathComponent(v137, a4, PathComponent, 0);
              if (!v138) {
                goto LABEL_130;
              }
              CFURLRef v163 = v138;
              uint64_t SoftLink = AMAuthInstallSupportFileURLExists(v138, &v169);
              if (SoftLink
                || !v169 && (uint64_t SoftLink = AMAuthInstallPlatformCreateSoftLink(v163, v165), SoftLink)
                || (CFDictionaryAddValue(Mutable, @"Path", PathComponent),
                    CFDictionaryAddValue(v170[0], @"Info", Mutable),
                    uint64_t SoftLink = _AMAuthInstallBundleApplyMeasurements((uint64_t)cf, v132, v165, 0, v170),
                    SoftLink))
              {
                uint64_t v9 = SoftLink;
                goto LABEL_132;
              }
              CFDictionarySetValue(v156, v132, v170[0]);
              SafeRelease(PathComponent);
              SafeRelease(Mutable);
              SafeRelease(v170[0]);
              SafeRelease(v163);
              v170[0] = 0;
              CFArrayRef v24 = a2;
              PathComponent = (__CFString *)theDicta;
            }
            if (Count == ++v127) {
              goto LABEL_114;
            }
          }
        }
        CFMutableDictionaryRef Mutable = 0;
      }
      else
      {
        CFMutableDictionaryRef Mutable = 0;
        PathComponent = 0;
      }
      CFDictionaryRef theDicta = 0;
      CFURLRef v140 = 0;
      uint64_t v9 = 2;
      goto LABEL_115;
    }
    CFIndex v25 = 0;
    keys = (void **)*MEMORY[0x263EFFB38];
    CFBooleanRef v157 = (const __CFBoolean *)*MEMORY[0x263EFFB40];
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v24, v25);
      if (!ValueAtIndex)
      {
        CFDictionaryRef v12 = 0;
        CFMutableDictionaryRef MutableCopy = v13;
        CFDictionaryRef v13 = 0;
        CFTypeRef v14 = 0;
        CFURLRef v17 = 0;
        CFStringRef v18 = 0;
        uint64_t v9 = 1;
        goto LABEL_136;
      }
      CFStringRef v27 = ValueAtIndex;
      if (CFStringFind(ValueAtIndex, @"RecoveryOS", 0).location == -1) {
        CFBooleanRef v28 = (const __CFBoolean *)keys;
      }
      else {
        CFBooleanRef v28 = v157;
      }
      int v29 = CFBooleanGetValue(v28);
      CFAllocatorRef v30 = CFGetAllocator(cf);
      if (Value && v29)
      {
        CFStringRef v36 = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v30, v27);
        CFAllocatorRef v37 = CFGetAllocator(cf);
        CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v37, Value, v36, v38, v39, v40, v41, v42);
        if (ValueForKeyPathInDict) {
          goto LABEL_27;
        }
      }
      else
      {
        CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v30, theDict, v27, v31, v32, v33, v34, v35);
        CFStringRef v36 = 0;
        if (ValueForKeyPathInDict)
        {
LABEL_27:
          CFStringRef v162 = v36;
          CFComparisonResult v44 = CFStringCompare(v27, @"BasebandFirmware", 0);
          CFAllocatorRef v45 = CFGetAllocator(cf);
          CFAllocatorRef v46 = CFDictionaryCreateMutableCopy(v45, 0, ValueForKeyPathInDict);
          CFMutableDictionaryRef v167 = v46;
          if (!v46)
          {
            CFDictionaryRef v12 = 0;
            CFMutableDictionaryRef MutableCopy = v13;
            CFDictionaryRef v13 = 0;
            CFTypeRef v14 = 0;
            CFURLRef v17 = 0;
            CFStringRef v18 = 0;
            uint64_t v9 = 2;
            goto LABEL_136;
          }
          CFIndex v47 = _AMAuthInstallBundleSetObjectPropertyOverrides(cf, v27, v46);
          if (v47)
          {
            uint64_t v9 = v47;
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentity", (uint64_t)"failed to set %@ property overrides", v48, v49, v50, v51, v52, (char)v27);
            CFDictionaryRef v12 = 0;
            CFMutableDictionaryRef MutableCopy = v13;
            goto LABEL_124;
          }
          CFAllocatorRef v53 = CFGetAllocator(cf);
          CFStringRef ValueForKeyWithFormat = (const __CFString *)AMAuthInstallSupportGetValueForKeyWithFormat(v53, ValueForKeyPathInDict, @"%@.%@", v54, v55, v56, v57, v58, (char)@"Info");
          CFURLRef v60 = (const __CFURL *)CFDictionaryGetValue(v13, v27);
          if (v60)
          {
            CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v167, @"Info");
            if (!v12)
            {
              CFDictionaryRef v13 = 0;
              CFTypeRef v14 = 0;
              CFURLRef v17 = 0;
              CFStringRef v18 = 0;
              uint64_t v9 = 7;
              goto LABEL_133;
            }
            CFAllocatorRef v61 = CFGetAllocator(cf);
            CFDictionaryRef v13 = CFDictionaryCreateMutableCopy(v61, 0, v12);
            if (!v13)
            {
              CFDictionaryRef v12 = 0;
              CFTypeRef v14 = 0;
              CFURLRef v17 = 0;
              CFStringRef v18 = 0;
              uint64_t v9 = 2;
              goto LABEL_133;
            }
            CFStringRef v62 = CFURLCopyLastPathComponent(v60);
            CFDictionaryRef v12 = (const __CFDictionary *)v62;
            if (!v62)
            {
              CFTypeRef v14 = 0;
              CFURLRef v17 = 0;
              CFStringRef v18 = 0;
              uint64_t v9 = 3;
              goto LABEL_133;
            }
            if (ValueForKeyWithFormat)
            {
              CFAllocatorRef v63 = CFGetAllocator(cf);
              uint64_t v64 = AMAuthInstallSupportCopyStringReplacingLastComponent(v63, ValueForKeyWithFormat, @"/", v12, &v168);
              if (v64)
              {
                uint64_t v9 = v64;
                CFTypeRef v14 = 0;
                CFURLRef v17 = 0;
                CFStringRef v18 = 0;
LABEL_133:
                CFMutableDictionaryRef MutableCopy = v153;
                goto LABEL_136;
              }
            }
            else
            {
              CFTypeRef v168 = CFRetain(v62);
            }
            SafeRelease(v12);
            CFDictionarySetValue(v13, @"Path", v168);
            SafeRelease(v168);
            CFDictionarySetValue(v167, @"Info", v13);
            SafeRelease(v13);
            if (v44)
            {
              CFAllocatorRef v65 = CFGetAllocator(cf);
              CFMutableDataRef v66 = CFDataCreateMutable(v65, 0);
              CFDictionarySetValue(v167, @"Digest", v66);
              CFRelease(v66);
            }
            CFTypeRef v168 = 0;
            CFDictionaryRef v13 = v153;
            CFDictionaryRemoveValue(v153, v27);
          }
          uint64_t v67 = cf[16];
          if (v67 && v67[1])
          {
            if (CFBooleanGetValue(v28))
            {
              CFDictionaryRef v68 = (const __CFDictionary *)CFDictionaryGetValue(cf[16][1], @"RecoveryOSOS");
              if (v68)
              {
                CFAllocatorRef v69 = CFGetAllocator(cf);
                CFDictionaryRef v75 = AMAuthInstallSupportGetValueForKeyWithFormat(v69, v68, @"%@.%@.%@", v70, v71, v72, v73, v74, (char)@"Manifest");
                goto LABEL_47;
              }
            }
            else
            {
              CFAllocatorRef v76 = CFGetAllocator(cf);
              CFDictionaryRef v75 = AMAuthInstallSupportGetValueForKeyWithFormat(v76, cf[16][1], @"%@.%@.%@", v77, v78, v79, v80, v81, (char)@"Manifest");
LABEL_47:
              CFDictionaryRef v68 = v75;
            }
          }
          else
          {
            CFDictionaryRef v68 = 0;
          }
          if (CFBooleanGetValue(v28)) {
            CFStringRef v82 = @"RecoveryOSOS";
          }
          else {
            CFStringRef v82 = @"OS";
          }
          CFComparisonResult v83 = CFStringCompare(v82, v27, 0);
          if (v68)
          {
            int v91 = 0;
            if (v60) {
              goto LABEL_62;
            }
LABEL_61:
            if (v91) {
              goto LABEL_62;
            }
LABEL_85:
            AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentity", (uint64_t)"Inserting %@ to Manifest to personalize later", v86, v87, v88, v89, v90, (char)v27);
            if (CFBooleanGetValue(v28))
            {
              CFStringRef v125 = v162;
              CFDictionarySetValue(v152, v162, v167);
              CFArrayRef v24 = a2;
            }
            else
            {
              CFDictionarySetValue(v156, v27, v167);
              CFArrayRef v24 = a2;
              CFStringRef v125 = v162;
            }
            SafeRelease(v167);
            CFMutableDictionaryRef v167 = 0;
            SafeRelease(v125);
            goto LABEL_89;
          }
          if ((unint64_t)v60 | v83) {
            BOOL v92 = *((unsigned char *)cf + 434) == 0;
          }
          else {
            BOOL v92 = 0;
          }
          int v91 = v92;
          if (!v60) {
            goto LABEL_61;
          }
LABEL_62:
          if (v60)
          {
            int IsImg4 = AMAuthInstallApIsImg4((uint64_t)cf, v84, v85, v86, v87, v88, v89, v90);
            if (v44 == kCFCompareEqualTo || IsImg4) {
              goto LABEL_70;
            }
            LOBYTE(v170[0]) = 0;
            if (_AMAuthInstallBundleImageHasBuildString(v27))
            {
              CFAllocatorRef v94 = CFGetAllocator(cf);
              uint64_t v95 = AMAuthInstallApImg3CopyBuildString(v94, v60, &v166);
              if (v95)
              {
                uint64_t v9 = v95;
                AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentity", (uint64_t)"failed to copy image build string %@", v96, v97, v98, v99, v100, (char)v27);
                goto LABEL_140;
              }
              CFDictionarySetValue(v167, @"BuildString", v166);
              SafeRelease(v166);
              CFStringRef v166 = 0;
            }
            CFAllocatorRef v101 = CFGetAllocator(cf);
            uint64_t IsFinalized = AMAuthInstallApImg3IsFinalized(v101, v60, (BOOL *)v170);
            if (IsFinalized)
            {
              uint64_t v9 = IsFinalized;
              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentity", (uint64_t)"failed to check %@ alignment", v103, v104, v105, v106, v107, (char)v27);
LABEL_140:
              CFTypeRef v14 = 0;
              CFURLRef v115 = 0;
              CFStringRef v144 = 0;
              goto LABEL_148;
            }
            if (LOBYTE(v170[0])) {
              goto LABEL_70;
            }
            CFStringRef v112 = CFURLCopyLastPathComponent(v60);
            if (!v112)
            {
              CFTypeRef v14 = 0;
              CFURLRef v115 = 0;
              CFStringRef v144 = 0;
              goto LABEL_145;
            }
            CFStringRef v113 = v112;
            CFAllocatorRef v114 = CFGetAllocator(cf);
            CFURLRef v115 = CFURLCreateCopyAppendingPathComponent(v114, a4, v113, 0);
            if (!v115)
            {
              CFStringRef v144 = v113;
              CFTypeRef v14 = 0;
LABEL_145:
              uint64_t v9 = 2;
LABEL_148:
              CFMutableDictionaryRef v15 = v156;
              CFMutableDictionaryRef v16 = v152;
              CFMutableDictionaryRef MutableCopy = v153;
              CFDictionaryRef v12 = 0;
              CFDictionaryRef v13 = 0;
              CFStringRef v18 = v144;
              CFURLRef v17 = v115;
              break;
            }
            CFAllocatorRef v116 = CFGetAllocator(cf);
            uint64_t v117 = AMAuthInstallApImg3Finalize(v116, v60, v115);
            if (v117)
            {
              uint64_t v9 = v117;
              CFStringRef v144 = v113;
              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentity", (uint64_t)"failed to finalize image3 override", v118, v119, v120, v121, v122, v145);
              CFTypeRef v14 = 0;
              goto LABEL_148;
            }
            CFTypeRef v14 = CFRetain(v115);
            uint64_t v123 = (__CFDictionary *)CFDictionaryGetValue(v167, @"Info");
            if (!v123)
            {
              CFStringRef v144 = v113;
              uint64_t v9 = 8;
              goto LABEL_148;
            }
            CFDictionarySetValue(v123, @"Path", v113);
            CFDictionarySetValue(*cf[16], v27, v14);
            SafeRelease(v113);
            SafeRelease(v115);
            if (!v14)
            {
LABEL_70:
              CFAllocatorRef v108 = (void *)CFRetain(v60);
              goto LABEL_82;
            }
          }
          else
          {
            if (!ValueForKeyWithFormat) {
              goto LABEL_85;
            }
            int v109 = CFBooleanGetValue(v28);
            CFAllocatorRef v110 = CFGetAllocator(cf);
            if (v109) {
              CFURLRef v111 = a6;
            }
            else {
              CFURLRef v111 = v148;
            }
            CFAllocatorRef v108 = CFURLCreateCopyAppendingPathComponent(v110, v111, ValueForKeyWithFormat, 0);
LABEL_82:
            CFTypeRef v14 = v108;
            if (!v108) {
              goto LABEL_85;
            }
          }
          uint64_t v124 = _AMAuthInstallBundleApplyMeasurements((uint64_t)cf, v27, v14, v167, &v167);
          if (v124)
          {
            uint64_t v9 = v124;
            CFDictionaryRef v12 = 0;
            CFMutableDictionaryRef MutableCopy = v13;
            CFDictionaryRef v13 = 0;
            goto LABEL_135;
          }
          CFRelease(v14);
          goto LABEL_85;
        }
      }
LABEL_89:
      if (++v25 >= CFArrayGetCount(v24)) {
        goto LABEL_90;
      }
    }
  }
LABEL_119:
  CFURLRef v141 = v17;
  CFStringRef v142 = v18;
  SafeRelease(MutableCopy);
  SafeRelease(v12);
  SafeRelease(v168);
  SafeRelease(v167);
  SafeRelease(v13);
  SafeRelease(v14);
  SafeRelease(v15);
  SafeRelease(v141);
  SafeRelease(v142);
  SafeRelease(v166);
  SafeRelease(v16);
  return v9;
}

void _CFArrayRemoveValue(const __CFArray *a1, const void *a2)
{
  v6.CFIndex length = CFArrayGetCount(a1);
  v6.CFIndex location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(a1, v6, a2);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0)
  {
    CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  }
}

CFIndex _AMAuthInstallBundleCreateServerRequestDictionary(uint64_t a1, const __CFArray *a2, CFDictionaryRef theDict, const __CFDictionary *a4, const void *a5, const __CFDictionary *a6, void *a7, void *a8)
{
  CFMutableDictionaryRef v8 = 0;
  v204[0] = 0;
  uint64_t v202 = 0;
  uint64_t v203 = 0;
  CFIndex Code = 1;
  if (!a4 || !a1 || !theDict)
  {
    CFDictionaryRef v12 = 0;
    CFDictionaryRef v13 = 0;
    goto LABEL_126;
  }
  CFDictionaryRef v12 = 0;
  CFDictionaryRef v13 = 0;
  if (a7)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Manifest");
    if (!Value)
    {
LABEL_8:
      CFMutableDictionaryRef v8 = 0;
      CFDictionaryRef v12 = 0;
      CFDictionaryRef v13 = 0;
      CFIndex Code = 7;
      goto LABEL_126;
    }
    CFArrayRef v198 = a2;
    CFMutableDictionaryRef v15 = a6;
    if (a6)
    {
      CFDictionaryRef v16 = a4;
      CFDictionaryRef v197 = (const __CFDictionary *)CFDictionaryGetValue(a6, @"Manifest");
      if (!v197) {
        goto LABEL_8;
      }
    }
    else
    {
      CFDictionaryRef v197 = 0;
      CFDictionaryRef v16 = a4;
    }
    CFArrayRef theArray = (const __CFArray *)CFDictionaryGetValue(v16, @"Personalized");
    if (theArray)
    {
      CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v16, @"Manifest");
      if (v12)
      {
        CFAllocatorRef v17 = CFGetAllocator((CFTypeRef)a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v17, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFMutableDictionaryRef v8 = Mutable;
        if (Mutable)
        {
          uint64_t v192 = Mutable;
          if (!a6)
          {
            CFArrayRef v181 = 0;
            CFDictionaryRef v185 = 0;
            CFArrayRef v28 = v198;
            goto LABEL_21;
          }
          CFAllocatorRef v26 = CFGetAllocator((CFTypeRef)a1);
          CFMutableDictionaryRef v27 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v27)
          {
            CFMutableDictionaryRef v15 = v27;
            if (!CFDictionaryGetValue(v16, @"RecoveryOS")
              || (CFArrayRef v28 = v198, (v181 = (CFArrayRef)CFDictionaryGetValue(v16, @"Personalized")) == 0)
              || (CFDictionaryRef v185 = (const __CFDictionary *)CFDictionaryGetValue(v16, @"Manifest")) == 0)
            {
              CFDictionaryRef v13 = 0;
              CFIndex Code = 8;
LABEL_125:
              CFDictionaryRef v12 = v15;
              goto LABEL_126;
            }
LABEL_21:
            if (AMAuthInstallApIsImg4(a1, v19, v20, v21, v22, v23, v24, v25)) {
              int v29 = @"amai/apimg4ticket.der";
            }
            else {
              int v29 = @"amai/apticket.der";
            }
            v205.CFIndex length = CFArrayGetCount(theArray);
            v205.CFIndex location = 0;
            CFDictionaryRef v182 = v12;
            uint64_t v180 = a7;
            if (CFArrayContainsValue(theArray, v205, v29)) {
              BOOL v30 = 0;
            }
            else {
              BOOL v30 = *(void *)(*(void *)(a1 + 16) + 24) || *(unsigned char *)(a1 + 433);
            }
            v206.CFIndex length = CFArrayGetCount(theArray);
            v206.CFIndex location = 0;
            CFArrayContainsValue(theArray, v206, v29);
            AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"ticketPath %@ , withApTicket is %s,  (!%s &&(%s || %s))", v31, v32, v33, v34, v35, (char)v29);
            int v189 = v30;
            int v186 = !v30;
            *(unsigned char *)(a1 + 32) = !v30;
            if (v28)
            {
              CFIndex Count = CFArrayGetCount(v28);
              if (Count >= 1)
              {
                uint64_t v184 = 0;
                CFDictionaryRef v200 = 0;
                CFIndex v36 = 0;
                CFBooleanRef v37 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
                CFBooleanRef v195 = (const __CFBoolean *)*MEMORY[0x263EFFB40];
                uint64_t v196 = v15;
                while (1)
                {
                  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v28, v36);
                  CFComparisonResult v39 = CFStringCompare(ValueAtIndex, @"BasebandFirmware", 0);
                  CFBooleanRef v40 = v37;
                  if (ValueAtIndex)
                  {
                    if (CFStringFind(ValueAtIndex, @"RecoveryOS", 0).location == -1) {
                      CFBooleanRef v40 = v37;
                    }
                    else {
                      CFBooleanRef v40 = v195;
                    }
                  }
                  if (CFBooleanGetValue(v40))
                  {
                    CFAllocatorRef v41 = CFGetAllocator((CFTypeRef)a1);
                    CFStringRef v42 = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v41, ValueAtIndex);
                    CFDictionaryRef v48 = (const __CFDictionary *)CFDictionaryGetValue(v197, v42);
                    if (v48) {
                      goto LABEL_38;
                    }
                  }
                  else
                  {
                    CFDictionaryRef v48 = (const __CFDictionary *)CFDictionaryGetValue(Value, ValueAtIndex);
                    CFStringRef v42 = 0;
                    if (v48)
                    {
LABEL_38:
                      CFDictionaryRef v49 = (const __CFDictionary *)CFDictionaryGetValue(v48, @"Info");
                      if (!v49)
                      {
                        CFMutableDictionaryRef v15 = v196;
                        CFArrayRef v28 = v198;
                        goto LABEL_90;
                      }
                      CFDictionaryRef v50 = v49;
                      CFBooleanRef v51 = v37;
                      CFTypeRef v201 = 0;
                      SafeRelease(v200);
                      CFAllocatorRef v52 = CFGetAllocator((CFTypeRef)a1);
                      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v52, 0, v48);
                      CFDictionaryRef v200 = MutableCopy;
                      if (!MutableCopy)
                      {
                        CFIndex Code = 2;
                        goto LABEL_128;
                      }
                      uint64_t v54 = AMAuthInstallBundleProcessRulesWithEntryDict(a1, MutableCopy);
                      if (v54)
                      {
                        CFIndex Code = v54;
                        uint64_t v177 = "failed to process image rules";
LABEL_132:
                        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)v177, v55, v56, v57, v58, v59, v178);
                        goto LABEL_128;
                      }
                      CFBooleanRef v60 = (const __CFBoolean *)CFDictionaryGetValue(v50, @"Personalize");
                      if (v60 && !CFBooleanGetValue(v60))
                      {
                        if (!CFBooleanGetValue(v40))
                        {
                          uint64_t v90 = CFDictionaryGetValue(v182, ValueAtIndex);
                          char v96 = v189 ^ 1;
                          if (v90) {
                            char v96 = 1;
                          }
                          if (v96)
                          {
                            AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"skipping \"%@\" entry", v91, v92, v93, v94, v95, (char)ValueAtIndex);
                          }
                          else
                          {
                            CFAllocatorRef v97 = CFGetAllocator((CFTypeRef)a1);
                            CFDataRef v98 = CFDataCreate(v97, 0, 0);
                            CFDictionaryAddValue(v200, @"Digest", v98);
                            CFDictionarySetValue(v192, ValueAtIndex, v200);
                            CFDataRef v99 = v98;
                            CFBooleanRef v37 = v51;
                            CFRelease(v99);
                            AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"personalizing \"%@\"", v100, v101, v102, v103, v104, (char)ValueAtIndex);
                          }
                          goto LABEL_94;
                        }
                        uint64_t v73 = CFDictionaryGetValue(v185, v42);
                        char v79 = v189 ^ 1;
                        if (v73) {
                          char v79 = 1;
                        }
                        uint64_t v80 = "skipping \"%@\" entry";
                        if ((v79 & 1) == 0)
                        {
                          CFAllocatorRef v81 = CFGetAllocator((CFTypeRef)a1);
                          CFDataRef cf = CFDataCreate(v81, 0, 0);
                          CFDictionaryAddValue(v200, @"Digest", cf);
                          CFDictionarySetValue(v196, v42, v200);
                          CFRelease(cf);
                          uint64_t v80 = "personalizing \"%@\"";
                        }
                        AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)v80, v74, v75, v76, v77, v78, (char)v42);
                        if (v39 == kCFCompareEqualTo) {
                          goto LABEL_56;
                        }
LABEL_44:
                        if (!CFDictionaryContainsKey(v200, @"PartialDigest"))
                        {
                          if ((v189 & 1) == 0)
                          {
                            AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"not personalizing \"%@\"", v67, v68, v69, v70, v71, (char)ValueAtIndex);
LABEL_94:
                            CFMutableDictionaryRef v15 = v196;
                            CFArrayRef v28 = v198;
                            goto LABEL_91;
                          }
                          CFTypeRef v72 = 0;
LABEL_63:
                          CFArrayRef v28 = v198;
LABEL_80:
                          SafeRelease(v72);
                          if (CFDictionaryGetValue(v200, @"Digest")) {
                            AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"personalizing \"%@\" uint64_t Digest = \"%@\"", v107, v108, v109, v110, v111, (char)ValueAtIndex);
                          }
                          CFBooleanRef v37 = v51;
                          if (v39 == kCFCompareEqualTo)
                          {
                            int v112 = CFBooleanGetValue(v40);
                            CFIndex Code = 1;
                            if (!a5 || v112 == 1) {
                              goto LABEL_128;
                            }
                            uint64_t v113 = AMAuthInstallBundleCopyFullPathForBuildIdentityKey((CFDictionaryRef **)a1, a5, @"BasebandFirmware", v48, (CFTypeRef *)&v203);
                            if (v113)
                            {
                              CFIndex Code = v113;
                              uint64_t v177 = "failed to find baseband firmware path";
                              goto LABEL_132;
                            }
                            uint64_t v184 = v203;
                            CFBooleanRef v37 = v51;
                            if (!v203)
                            {
                              CFIndex Code = 14;
                              uint64_t v177 = "failed to create bbfwURL";
                              goto LABEL_132;
                            }
                          }
                          if (CFBooleanGetValue(v40))
                          {
                            CFMutableDictionaryRef v15 = v196;
                            CFDictionarySetValue(v196, v42, v200);
                          }
                          else
                          {
                            CFDictionarySetValue(v192, ValueAtIndex, v200);
                            CFMutableDictionaryRef v15 = v196;
                          }
LABEL_90:
                          SafeRelease(v42);
                          goto LABEL_91;
                        }
                        CFTypeRef v72 = CFDictionaryGetValue(v50, @"Path");
                        CFTypeRef v201 = v72;
                        SafeRetain(v72);
                        if (!v72) {
                          goto LABEL_63;
                        }
                      }
                      else
                      {
                        if (v39) {
                          goto LABEL_44;
                        }
LABEL_56:
                        uint64_t v82 = AMAuthInstallBundleCopyNextBasebandComponentName((const void *)a1, &v201, v61, v62, v63, v64, v65, v66);
                        if (v82)
                        {
                          CFIndex Code = v82;
LABEL_128:
                          CFMutableDictionaryRef v8 = v192;
                          CFDictionaryRef v13 = v200;
                          CFDictionaryRef v12 = v196;
                          goto LABEL_126;
                        }
                        CFTypeRef v72 = v201;
                        if (!v201) {
                          goto LABEL_63;
                        }
                      }
                      if (CFBooleanGetValue(v40))
                      {
                        if (!CFDictionaryContainsKey(v185, v42))
                        {
                          CFArrayRef v88 = v181;
LABEL_75:
                          v207.CFIndex length = CFArrayGetCount(v88);
                          v207.CFIndex location = 0;
                          int v105 = CFArrayContainsValue(v88, v207, v72);
                          char v106 = v186;
                          if (v39 == kCFCompareEqualTo) {
                            char v106 = 1;
                          }
                          CFArrayRef v28 = v198;
                          if (!v105 || (v106 & 1) == 0) {
                            goto LABEL_80;
                          }
LABEL_79:
                          AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"entry \"%@\" has been previously personalized; skipping it",
                            v83,
                            v84,
                            v85,
                            v86,
                            v87,
                            (char)ValueAtIndex);
                          SafeRelease(v72);
                          CFBooleanRef v37 = v51;
                          CFMutableDictionaryRef v15 = v196;
                          goto LABEL_91;
                        }
                      }
                      else if (!CFDictionaryContainsKey(v182, ValueAtIndex))
                      {
                        CFArrayRef v88 = theArray;
                        goto LABEL_75;
                      }
                      int v89 = v186;
                      if (v39 == kCFCompareEqualTo) {
                        int v89 = 1;
                      }
                      CFArrayRef v28 = v198;
                      if (v89 != 1) {
                        goto LABEL_80;
                      }
                      goto LABEL_79;
                    }
                  }
                  AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"entry \"%@\" not part of manifest, skipping", v43, v44, v45, v46, v47, (char)ValueAtIndex);
LABEL_91:
                  if (Count == ++v36) {
                    goto LABEL_96;
                  }
                }
              }
            }
            uint64_t v184 = 0;
            CFDictionaryRef v200 = 0;
LABEL_96:
            CFMutableDictionaryRef v8 = v192;
            if (v15 && CFDictionaryGetCount(v15))
            {
              _AMAuthInstallBundlePopulateManifestProperties((void *)a1, a6, v15, v114, v115, v116, v117, v118);
              uint64_t v123 = AMAuthInstallApServerRequestAddRequiredTagsWithRecoveryOS((void *)a1, v15, v189, 1, v119, v120, v121, v122);
              if (v123)
              {
                CFIndex Code = v123;
                goto LABEL_124;
              }
              if (!(*(unsigned int (**)(uint64_t, __CFDictionary *, const __CFDictionary *, __CFError **))(a1 + 440))(a1, v192, a4, &v202))
              {
                AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"failed to add updater tags %@", v124, v125, v126, v127, v128, (char)v202);
                CFIndex Code = CFErrorGetCode(v202);
                goto LABEL_124;
              }
              CFAllocatorRef v129 = CFGetAllocator((CFTypeRef)a1);
              CFIndex Code = 2;
              DeepCFStringRef Copy = CFPropertyListCreateDeepCopy(v129, v15, 2uLL);
              *a8 = DeepCopy;
              if (!DeepCopy) {
                goto LABEL_124;
              }
            }
            CFIndex v131 = CFDictionaryGetCount(v192);
            _AMAuthInstallBundlePopulateManifestProperties((void *)a1, theDict, v192, v132, v133, v134, v135, v136);
            uint64_t v142 = AMAuthInstallApServerRequestAddRequiredTags((void *)a1, v192, v189, v137, v138, v139, v140, v141);
            if (!v142)
            {
              uint64_t v142 = AMAuthInstallBasebandSupportsServerSigning(a1, v204, v143, v144, v145, v146, v147, v148);
              if (!v142)
              {
                if (v204[0])
                {
                  if (AMAuthInstallBasebandPersonalizationEnabled(a1))
                  {
                    if (v184)
                    {
                      uint64_t v154 = AMAuthInstallBasebandServerRequestAddRequiredTags(a1, v192, v184, v149, v150, v151, v152, v153);
                      if (v154)
                      {
                        CFIndex Code = v154;
                        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"%s: missing required baseband parameters", v155, v156, v157, v158, v159, (char)"_AMAuthInstallBundleCreateServerRequestDictionary");
LABEL_108:
                        CFMutableDictionaryRef v8 = v192;
LABEL_124:
                        CFDictionaryRef v13 = v200;
                        goto LABEL_125;
                      }
                    }
                  }
                }
                uint64_t v160 = *(void *)(a1 + 48);
                if (!v160
                  || !*(void *)(v160 + 160)
                  || (LOBYTE(v201) = 1, AMAuthInstallVinylIsLegacyChipId((CFTypeRef)a1, (BOOL *)&v201))
                  || (_BYTE)v201
                  || !CFDictionaryGetValue(v192, @"eUICC,Gold")
                  && !CFDictionaryGetValue(v192, @"eUICC,Main")
                  || (uint64_t v142 = AMAuthInstallVinylServerRequestAddRequiredTags(a1, v192, 0), !v142))
                {
                  CFIndex v161 = CFDictionaryGetCount(v192);
                  if ((*(unsigned int (**)(uint64_t, __CFDictionary *, const __CFDictionary *, __CFError **))(a1 + 440))(a1, v192, a4, &v202))
                  {
                    CFDictionaryRef v12 = v15;
                    CFIndex v167 = CFDictionaryGetCount(v192);
                    if (v131 || v167 != v161)
                    {
                      CFAllocatorRef v173 = CFGetAllocator((CFTypeRef)a1);
                      CFMutableDictionaryRef v8 = v192;
                      CFPropertyListRef v174 = CFPropertyListCreateDeepCopy(v173, v192, 2uLL);
                      *uint64_t v180 = v174;
                      CFIndex Code = 2 * (v174 == 0);
                    }
                    else
                    {
                      AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"nothing to be done", v168, v169, v170, v171, v172, v178);
                      CFIndex Code = 0;
                      CFMutableDictionaryRef v8 = v192;
                    }
                    CFDictionaryRef v13 = v200;
                    goto LABEL_126;
                  }
                  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionary", (uint64_t)"failed to add updater tags %@", v162, v163, v164, v165, v166, (char)v202);
                  CFIndex Code = CFErrorGetCode(v202);
                  CFMutableDictionaryRef v8 = v192;
                  goto LABEL_124;
                }
              }
            }
            CFIndex Code = v142;
            goto LABEL_108;
          }
        }
        CFDictionaryRef v12 = 0;
        CFDictionaryRef v13 = 0;
        CFIndex Code = 2;
        goto LABEL_126;
      }
      CFMutableDictionaryRef v8 = 0;
    }
    else
    {
      CFMutableDictionaryRef v8 = 0;
      CFDictionaryRef v12 = 0;
    }
    CFDictionaryRef v13 = 0;
    CFIndex Code = 8;
  }
LABEL_126:
  CFDictionaryRef v175 = v13;
  SafeRelease(v203);
  SafeRelease(v8);
  SafeRelease(v12);
  SafeRelease(v175);
  SafeRelease(v202);
  return Code;
}

uint64_t AMAuthInstallBundlePersonalizePartialRecoveryOS(uint64_t a1, const void *a2, const __CFURL *a3, const __CFString *a4, const __CFArray *a5, const __CFArray *a6, uint64_t a7, uint64_t a8)
{
  CFURLRef v315 = 0;
  CFDictionaryRef v316 = 0;
  CFPropertyListRef v313 = 0;
  CFArrayRef v314 = 0;
  if (!*(void *)(a1 + 16))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialRecoveryOS", (uint64_t)"bundle personalization requires AP parameters (even with AP personalization disabled)", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v284);
    CFMutableDictionaryRef v8 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v12 = 0;
    CFDictionaryRef v13 = 0;
    CFTypeRef v14 = 0;
    CFURLRef v15 = 0;
    uint64_t Code = 1;
    goto LABEL_202;
  }
  CFMutableDictionaryRef v8 = 0;
  uint64_t Code = 1;
  if (!a2)
  {
    CFDictionaryRef MutableCopy = 0;
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v12 = 0;
    CFDictionaryRef v13 = 0;
    CFTypeRef v14 = 0;
    CFURLRef v15 = 0;
    goto LABEL_202;
  }
  CFDictionaryRef MutableCopy = 0;
  CFMutableArrayRef Mutable = 0;
  CFArrayRef v12 = 0;
  CFDictionaryRef v13 = 0;
  CFTypeRef v14 = 0;
  CFURLRef v15 = 0;
  if (a3)
  {
    _AMAuthInstallBundlePersonalizeApplyPreferencesOverrides((void *)a1);
    _AMAuthInstallBundleCreateDebugDirectory((CFTypeRef *)a1, a2);
    CFAllocatorRef v18 = CFGetAllocator((CFTypeRef)a1);
    CFURLRef v19 = CFURLCreateCopyAppendingPathComponent(v18, (CFURLRef)a2, @"RecoveryOS", 1u);
    CFURLRef url = a3;
    uint64_t v20 = AMAuthInstallBundleCopyBuildIdentityForVariant(a1, a3, a4, (CFTypeRef *)&v316);
    if (v20)
    {
      uint64_t Code = v20;
      CFURLRef v15 = v19;
      CFMutableDictionaryRef v8 = 0;
      CFDictionaryRef MutableCopy = 0;
      CFMutableArrayRef Mutable = 0;
      CFArrayRef v12 = 0;
      CFDictionaryRef v13 = 0;
      CFTypeRef v14 = 0;
      goto LABEL_202;
    }
    if (!v316)
    {
      CFURLRef v15 = v19;
      CFMutableDictionaryRef v8 = 0;
      CFDictionaryRef MutableCopy = 0;
      CFMutableArrayRef Mutable = 0;
      CFArrayRef v12 = 0;
      CFDictionaryRef v13 = 0;
      CFTypeRef v14 = 0;
      uint64_t Code = 14;
      goto LABEL_202;
    }
    CFAllocatorRef v21 = CFGetAllocator((CFTypeRef)a1);
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v21, 0, v316);
    SafeRelease(v316);
    CFDictionaryRef v316 = 0;
    CFDictionaryRef theDict = MutableCopy;
    if (!MutableCopy)
    {
      CFURLRef v15 = v19;
      CFMutableDictionaryRef v8 = 0;
      CFMutableArrayRef Mutable = 0;
      CFArrayRef v12 = 0;
      CFDictionaryRef v13 = 0;
      CFTypeRef v14 = 0;
      uint64_t Code = 2;
      goto LABEL_202;
    }
    _AMAuthInstallBundleCreateDebugDirectory((CFTypeRef *)a1, v19);
    CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v22, 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      uint64_t v23 = Mutable;
      CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
      if (a6) {
        CFMutableArrayRef v25 = CFArrayCreateMutableCopy(v24, 0, a6);
      }
      else {
        CFMutableArrayRef v25 = CFArrayCreateMutable(v24, 0, MEMORY[0x263EFFF70]);
      }
      CFDictionaryRef MutableCopy = v25;
      if (v25)
      {
        CFArrayAppendValue(v23, @"RecoveryOSOS");
        CFArrayAppendValue(v23, @"RecoveryOSKernelCache");
        CFArrayAppendValue(v23, @"RecoveryOSDeviceTree");
        CFArrayAppendValue(v23, @"RecoveryOSiBEC");
        CFArrayAppendValue(v23, @"RecoveryOSAppleLogo");
        CFArrayAppendValue(v23, @"RecoveryOSStaticTrustCache");
        CFArrayRef v294 = MutableCopy;
        uint64_t appended = _AMRAuthInstallBundleAppendFirmwareEntriesToArrays(a1, theDict, v23, MutableCopy);
        if (appended)
        {
          uint64_t Code = appended;
        }
        else
        {
          uint64_t IfNecessary = AMAuthInstallBundleCopyReceiptCreateIfNecessary(a1, (const __CFURL *)a2, (CFPropertyListRef *)&v314);
          if (IfNecessary)
          {
            uint64_t Code = IfNecessary;
            char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, IfNecessary);
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialRecoveryOS", (uint64_t)"failed to generate a receipt: %@", v267, v268, v269, v270, v271, LocalizedStatusString);
          }
          else
          {
            uint64_t v28 = AMAuthInstallBundleCopyReceiptCreateIfNecessary(a1, v19, &v313);
            if (!v28)
            {
              CFDictionarySetValue(v314, @"RecoveryOS", v313);
              CFDictionaryRef v319 = 0;
              v320[0] = 0;
              CFStringRef v318 = 0;
              CFAllocatorRef v29 = CFGetAllocator((CFTypeRef)a1);
              CFArrayRef v307 = v23;
              CFDictionaryRef v308 = CFDictionaryCreateMutableCopy(v29, 0, **(CFDictionaryRef **)(a1 + 128));
              CFURLRef v296 = v19;
              if (!v308) {
                goto LABEL_216;
              }
              uint64_t v30 = a1;
              CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Manifest");
              if (!v31)
              {
                CFDictionaryRef v64 = 0;
                uint64_t v66 = 0;
                CFMutableDictionaryRef v126 = 0;
                CFURLRef v117 = 0;
                CFDictionaryRef v127 = 0;
                uint64_t Code = 8;
                goto LABEL_91;
              }
              CFAllocatorRef v32 = CFGetAllocator((CFTypeRef)a1);
              CFMutableDictionaryRef v33 = CFDictionaryCreateMutableCopy(v32, 0, v31);
              if (!v33)
              {
LABEL_216:
                CFDictionaryRef v64 = 0;
                uint64_t v66 = 0;
                CFDictionaryRef v31 = 0;
                CFMutableDictionaryRef v126 = 0;
                CFURLRef v117 = 0;
                CFDictionaryRef v127 = 0;
                uint64_t Code = 2;
                goto LABEL_91;
              }
              CFMutableDictionaryRef v300 = v33;
              if (CFArrayGetCount(v23) < 1)
              {
LABEL_90:
                CFMutableDictionaryRef v126 = v300;
                CFDictionarySetValue(theDict, @"Manifest", v300);
                uint64_t Code = 0;
                CFDictionaryRef v64 = 0;
                uint64_t v66 = 0;
                CFDictionaryRef v31 = 0;
                CFURLRef v117 = 0;
                CFDictionaryRef v127 = 0;
                CFURLRef v19 = v296;
                goto LABEL_91;
              }
              CFDictionaryRef ValueForKeyPathInDict = 0;
              CFIndex v35 = 0;
              uint64_t v305 = *MEMORY[0x263EFFB38];
              uint64_t v303 = *MEMORY[0x263EFFB40];
              CFMutableDictionaryRef v301 = v31;
              while (1)
              {
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v23, v35);
                if (!ValueAtIndex)
                {
                  CFDictionaryRef v64 = 0;
                  uint64_t v66 = 0;
                  CFDictionaryRef v31 = 0;
                  CFURLRef v117 = 0;
                  CFDictionaryRef v127 = 0;
                  uint64_t Code = 1;
                  goto LABEL_247;
                }
                CFStringRef v37 = ValueAtIndex;
                CFBooleanRef v38 = (const __CFBoolean *)(CFStringFind(ValueAtIndex, @"RecoveryOS", 0).location == -1
                                          ? v305
                                          : v303);
                if (!CFBooleanGetValue(v38)) {
                  break;
                }
                CFAllocatorRef v39 = CFGetAllocator((CFTypeRef)v30);
                CFStringRef v40 = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v39, v37);
                CFAllocatorRef v41 = CFGetAllocator((CFTypeRef)v30);
                CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v41, v31, v40, v42, v43, v44, v45, v46);
                if (ValueForKeyPathInDict) {
                  goto LABEL_28;
                }
LABEL_82:
                if (++v35 >= CFArrayGetCount(v23)) {
                  goto LABEL_90;
                }
              }
              CFStringRef v40 = 0;
              if (!ValueForKeyPathInDict) {
                goto LABEL_82;
              }
LABEL_28:
              CFComparisonResult v47 = CFStringCompare(v37, @"BasebandFirmware", 0);
              CFAllocatorRef v48 = CFGetAllocator((CFTypeRef)v30);
              CFMutableDictionaryRef v49 = CFDictionaryCreateMutableCopy(v48, 0, ValueForKeyPathInDict);
              CFDictionaryRef v319 = v49;
              if (!v49)
              {
                CFDictionaryRef v64 = 0;
                uint64_t v66 = 0;
                goto LABEL_209;
              }
              CFIndex v50 = _AMAuthInstallBundleSetObjectPropertyOverrides((void *)v30, v37, v49);
              if (!v50)
              {
                CFAllocatorRef v56 = CFGetAllocator((CFTypeRef)v30);
                CFDictionaryRef v310 = ValueForKeyPathInDict;
                CFStringRef ValueForKeyWithFormat = (const __CFString *)AMAuthInstallSupportGetValueForKeyWithFormat(v56, ValueForKeyPathInDict, @"%@.%@", v57, v58, v59, v60, v61, (char)@"Info");
                CFURLRef v63 = (const __CFURL *)CFDictionaryGetValue(v308, v37);
                if (v63)
                {
                  CFDictionaryRef v64 = (const __CFDictionary *)CFDictionaryGetValue(v319, @"Info");
                  if (!v64)
                  {
                    uint64_t v66 = 0;
                    CFDictionaryRef v31 = 0;
                    CFURLRef v117 = 0;
                    CFDictionaryRef v127 = 0;
                    uint64_t Code = 7;
                    goto LABEL_247;
                  }
                  CFAllocatorRef v65 = CFGetAllocator((CFTypeRef)v30);
                  uint64_t v66 = CFDictionaryCreateMutableCopy(v65, 0, v64);
                  if (!v66)
                  {
                    CFDictionaryRef v64 = 0;
LABEL_209:
                    CFDictionaryRef v31 = 0;
                    CFURLRef v117 = 0;
                    CFDictionaryRef v127 = 0;
                    uint64_t Code = 2;
                    goto LABEL_247;
                  }
                  CFStringRef PathComponent = CFURLCopyLastPathComponent(v63);
                  CFDictionaryRef v64 = (const __CFDictionary *)PathComponent;
                  if (!PathComponent)
                  {
                    CFDictionaryRef v31 = 0;
                    CFURLRef v117 = 0;
                    CFDictionaryRef v127 = 0;
                    uint64_t Code = 3;
                    goto LABEL_247;
                  }
                  if (ValueForKeyWithFormat)
                  {
                    CFAllocatorRef v68 = CFGetAllocator((CFTypeRef)v30);
                    uint64_t Component = AMAuthInstallSupportCopyStringReplacingLastComponent(v68, ValueForKeyWithFormat, @"/", v64, v320);
                    if (Component)
                    {
                      uint64_t Code = Component;
                      goto LABEL_211;
                    }
                  }
                  else
                  {
                    v320[0] = CFRetain(PathComponent);
                  }
                  SafeRelease(v64);
                  CFDictionarySetValue(v66, @"Path", v320[0]);
                  SafeRelease(v320[0]);
                  CFDictionarySetValue(v319, @"Info", v66);
                  SafeRelease(v66);
                  uint64_t v30 = a1;
                  if (v47)
                  {
                    CFAllocatorRef v70 = CFGetAllocator((CFTypeRef)a1);
                    CFMutableDataRef v71 = CFDataCreateMutable(v70, 0);
                    CFDictionarySetValue(v319, @"Digest", v71);
                    CFRelease(v71);
                  }
                  v320[0] = 0;
                  CFDictionaryRemoveValue(v308, v37);
                  uint64_t v23 = v307;
                }
                uint64_t v72 = *(void *)(v30 + 128);
                if (v72 && *(void *)(v72 + 8))
                {
                  if (CFBooleanGetValue(v38))
                  {
                    CFDictionaryRef v73 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(v30 + 128) + 8), @"RecoveryOSOS");
                    if (v73)
                    {
                      CFAllocatorRef v74 = CFGetAllocator((CFTypeRef)v30);
                      CFDictionaryRef v80 = AMAuthInstallSupportGetValueForKeyWithFormat(v74, v73, @"%@.%@.%@", v75, v76, v77, v78, v79, (char)@"Manifest");
                      goto LABEL_48;
                    }
                  }
                  else
                  {
                    CFAllocatorRef v81 = CFGetAllocator((CFTypeRef)v30);
                    CFDictionaryRef v80 = AMAuthInstallSupportGetValueForKeyWithFormat(v81, *(const __CFDictionary **)(*(void *)(v30 + 128) + 8), @"%@.%@.%@", v82, v83, v84, v85, v86, (char)@"Manifest");
LABEL_48:
                    CFDictionaryRef v73 = v80;
                  }
                }
                else
                {
                  CFDictionaryRef v73 = 0;
                }
                if (CFBooleanGetValue(v38)) {
                  CFStringRef v87 = @"RecoveryOSOS";
                }
                else {
                  CFStringRef v87 = @"OS";
                }
                CFComparisonResult v88 = CFStringCompare(v87, v37, 0);
                if (v73)
                {
                  int v96 = 0;
                  if (v63) {
                    goto LABEL_63;
                  }
LABEL_62:
                  if (v96) {
                    goto LABEL_63;
                  }
LABEL_79:
                  AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentityRecoveryOS", (uint64_t)"Inserting %@ to Manifest to personalize later", v91, v92, v93, v94, v95, (char)v37);
                  if (CFBooleanGetValue(v38)) {
                    CFDictionarySetValue(v300, v40, v319);
                  }
                  SafeRelease(v319);
                  CFDictionaryRef v319 = 0;
                  SafeRelease(v40);
                  CFDictionaryRef v31 = v301;
                  CFDictionaryRef ValueForKeyPathInDict = v310;
                  goto LABEL_82;
                }
                if ((unint64_t)v63 | v88) {
                  BOOL v97 = *(unsigned char *)(v30 + 434) == 0;
                }
                else {
                  BOOL v97 = 0;
                }
                int v96 = v97;
                if (!v63) {
                  goto LABEL_62;
                }
LABEL_63:
                if (v63)
                {
                  int IsImg4 = AMAuthInstallApIsImg4(v30, v89, v90, v91, v92, v93, v94, v95);
                  if (v47 == kCFCompareEqualTo || IsImg4) {
                    goto LABEL_72;
                  }
                  BOOL v317 = 0;
                  if (!_AMAuthInstallBundleImageHasBuildString(v37)) {
                    goto LABEL_69;
                  }
                  CFAllocatorRef v99 = CFGetAllocator((CFTypeRef)v30);
                  uint64_t v100 = AMAuthInstallApImg3CopyBuildString(v99, v63, &v318);
                  if (v100)
                  {
                    uint64_t Code = v100;
                    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentityRecoveryOS", (uint64_t)"failed to copy image build string %@", v101, v102, v103, v104, v105, (char)v37);
                  }
                  else
                  {
                    CFDictionarySetValue(v319, @"BuildString", v318);
                    SafeRelease(v318);
                    CFStringRef v318 = 0;
                    uint64_t v30 = a1;
LABEL_69:
                    CFAllocatorRef v106 = CFGetAllocator((CFTypeRef)v30);
                    uint64_t IsFinalized = AMAuthInstallApImg3IsFinalized(v106, v63, &v317);
                    if (!IsFinalized)
                    {
                      if (v317)
                      {
                        uint64_t v30 = a1;
                        goto LABEL_72;
                      }
                      CFDictionaryRef v31 = (const __CFDictionary *)CFURLCopyLastPathComponent(v63);
                      if (!v31)
                      {
                        CFURLRef v117 = 0;
                        CFDictionaryRef v127 = 0;
                        uint64_t Code = 2;
                        goto LABEL_246;
                      }
                      CFAllocatorRef v116 = CFGetAllocator((CFTypeRef)a1);
                      CFDictionaryRef value = v31;
                      CFURLRef v117 = CFURLCreateCopyAppendingPathComponent(v116, (CFURLRef)a2, (CFStringRef)v31, 0);
                      if (!v117)
                      {
                        CFDictionaryRef v31 = 0;
                        uint64_t Code = 2;
                        goto LABEL_245;
                      }
                      CFAllocatorRef v118 = CFGetAllocator((CFTypeRef)a1);
                      uint64_t v119 = AMAuthInstallApImg3Finalize(v118, v63, v117);
                      if (v119)
                      {
                        uint64_t Code = v119;
                        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentityRecoveryOS", (uint64_t)"failed to finalize image3 override", v120, v121, v122, v123, v124, v284);
                        CFDictionaryRef v31 = 0;
                        goto LABEL_245;
                      }
                      CFDictionaryRef v31 = (const __CFDictionary *)CFRetain(v117);
                      uint64_t v125 = (__CFDictionary *)CFDictionaryGetValue(v319, @"Info");
                      if (!v125)
                      {
                        uint64_t Code = 8;
LABEL_245:
                        CFDictionaryRef v127 = value;
LABEL_246:
                        CFDictionaryRef v64 = 0;
                        uint64_t v66 = 0;
                        goto LABEL_247;
                      }
                      CFDictionarySetValue(v125, @"Path", value);
                      uint64_t v30 = a1;
                      CFDictionarySetValue(**(CFMutableDictionaryRef **)(a1 + 128), v37, v31);
                      SafeRelease(value);
                      SafeRelease(v117);
                      if (!v31)
                      {
LABEL_72:
                        CFDictionaryRef v113 = (const __CFDictionary *)CFRetain(v63);
LABEL_76:
                        CFDictionaryRef v31 = v113;
                        if (!v113) {
                          goto LABEL_79;
                        }
                      }
                      uint64_t v115 = _AMAuthInstallBundleApplyMeasurements(v30, v37, v31, v319, &v319);
                      if (v115)
                      {
                        uint64_t Code = v115;
                        CFDictionaryRef v64 = 0;
                        uint64_t v66 = 0;
                        goto LABEL_212;
                      }
                      CFRelease(v31);
                      uint64_t v30 = a1;
                      goto LABEL_79;
                    }
                    uint64_t Code = IsFinalized;
                    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentityRecoveryOS", (uint64_t)"failed to check %@ alignment", v108, v109, v110, v111, v112, (char)v37);
                  }
                  CFDictionaryRef v31 = 0;
                  CFURLRef v117 = 0;
                  CFDictionaryRef v127 = 0;
                  goto LABEL_246;
                }
                if (!ValueForKeyWithFormat || !CFBooleanGetValue(v38)) {
                  goto LABEL_79;
                }
                CFAllocatorRef v114 = CFGetAllocator((CFTypeRef)v30);
                CFDictionaryRef v113 = CFURLCreateCopyAppendingPathComponent(v114, url, ValueForKeyWithFormat, 0);
                goto LABEL_76;
              }
              uint64_t Code = v50;
              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyOverrideBuildIdentityRecoveryOS", (uint64_t)"failed to set %@ property overrides", v51, v52, v53, v54, v55, (char)v37);
              CFDictionaryRef v64 = 0;
              uint64_t v66 = 0;
LABEL_211:
              CFDictionaryRef v31 = 0;
LABEL_212:
              CFURLRef v117 = 0;
              CFDictionaryRef v127 = 0;
LABEL_247:
              CFURLRef v19 = v296;
              CFMutableDictionaryRef v126 = v300;
LABEL_91:
              SafeRelease(v308);
              SafeRelease(v64);
              SafeRelease(v320[0]);
              SafeRelease(v319);
              SafeRelease(v66);
              SafeRelease(v31);
              SafeRelease(v117);
              SafeRelease(v127);
              SafeRelease(v318);
              SafeRelease(v126);
              if (Code)
              {
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialRecoveryOS", (uint64_t)"failed to create build identity with overrides", v128, v129, v130, v131, v132, v284);
                CFURLRef v15 = v19;
                CFMutableDictionaryRef v8 = 0;
                CFDictionaryRef MutableCopy = 0;
                CFTypeRef v14 = 0;
                goto LABEL_200;
              }
              CFDictionaryRef MutableCopy = v314;
              v320[0] = 0;
              if (!v314)
              {
                CFMutableDictionaryRef v8 = 0;
                CFMutableDictionaryRef v140 = 0;
                CFMutableDictionaryRef v150 = 0;
                uint64_t Code = 1;
                CFArrayRef v133 = v307;
                goto LABEL_185;
              }
              CFArrayRef v133 = v307;
              CFDictionaryRef v309 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Manifest");
              if (!v309)
              {
                CFMutableDictionaryRef v8 = 0;
                CFDictionaryRef MutableCopy = 0;
                CFMutableDictionaryRef v140 = 0;
                CFMutableDictionaryRef v150 = 0;
                uint64_t Code = 7;
                goto LABEL_185;
              }
              CFArrayRef v134 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"Personalized");
              if (v134
                && (CFArrayRef v135 = v134,
                    (CFDictionaryRef v136 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"Manifest")) != 0))
              {
                CFDictionaryRef v137 = v136;
                uint64_t v138 = (void *)a1;
                CFAllocatorRef v139 = CFGetAllocator((CFTypeRef)a1);
                CFMutableDictionaryRef v140 = CFDictionaryCreateMutable(v139, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                if (!v140)
                {
                  CFMutableDictionaryRef v8 = 0;
                  CFDictionaryRef MutableCopy = 0;
                  CFMutableDictionaryRef v150 = 0;
                  uint64_t Code = 2;
                  goto LABEL_185;
                }
                if (CFDictionaryGetValue(MutableCopy, @"RecoveryOS"))
                {
                  CFArrayRef theArray = (CFArrayRef)CFDictionaryGetValue(MutableCopy, @"Personalized");
                  if (theArray)
                  {
                    CFDictionaryRef v289 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"Manifest");
                    if (v289)
                    {
                      uint64_t v286 = MutableCopy;
                      if (AMAuthInstallApIsImg4(a1, v141, v142, v143, v144, v145, v146, v147)) {
                        uint64_t v148 = @"amai/apimg4ticket.der";
                      }
                      else {
                        uint64_t v148 = @"amai/apticket.der";
                      }
                      v321.CFIndex length = CFArrayGetCount(v135);
                      v321.CFIndex location = 0;
                      if (CFArrayContainsValue(v135, v321, v148)) {
                        BOOL v149 = 0;
                      }
                      else {
                        BOOL v149 = *(void *)(*(void *)(a1 + 16) + 24) || *(unsigned char *)(a1 + 433);
                      }
                      uint64_t v302 = v140;
                      v322.CFIndex length = CFArrayGetCount(v135);
                      v322.CFIndex location = 0;
                      CFArrayContainsValue(v135, v322, v148);
                      AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"ticketPath %@ , withApTicket is %s,  (!%s &&(%s || %s))", v151, v152, v153, v154, v155, (char)v148);
                      int key = v149;
                      int valuea = !v149;
                      *(unsigned char *)(a1 + 32) = !v149;
                      CFIndex Count = CFArrayGetCount(v307);
                      if (Count >= 1)
                      {
                        CFDictionaryRef v287 = v137;
                        CFArrayRef v285 = v135;
                        CFMutableDictionaryRef v150 = 0;
                        CFDictionaryRef v156 = 0;
                        CFIndex v157 = 0;
                        CFBooleanRef v158 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
                        CFBooleanRef v306 = (const __CFBoolean *)*MEMORY[0x263EFFB40];
                        CFDictionaryRef v159 = v289;
                        CFBooleanRef v304 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
                        while (1)
                        {
                          CFStringRef v160 = (const __CFString *)CFArrayGetValueAtIndex(v307, v157);
                          CFComparisonResult v161 = CFStringCompare(v160, @"BasebandFirmware", 0);
                          CFBooleanRef v162 = v158;
                          if (v160)
                          {
                            if (CFStringFind(v160, @"RecoveryOS", 0).location == -1) {
                              CFBooleanRef v162 = v158;
                            }
                            else {
                              CFBooleanRef v162 = v306;
                            }
                          }
                          if (CFBooleanGetValue(v162))
                          {
                            CFAllocatorRef v168 = CFGetAllocator(v138);
                            CFStringRef v169 = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v168, v160);
                            CFDictionaryRef v156 = (const __CFDictionary *)CFDictionaryGetValue(v309, v169);
                            if (v156) {
                              goto LABEL_117;
                            }
                          }
                          else
                          {
                            CFStringRef v169 = 0;
                            if (v156)
                            {
LABEL_117:
                              CFDictionaryRef v170 = (const __CFDictionary *)CFDictionaryGetValue(v156, @"Info");
                              if (!v170)
                              {
                                CFBooleanRef v158 = v304;
                                goto LABEL_162;
                              }
                              CFDictionaryRef v171 = v170;
                              CFDictionaryRef v319 = 0;
                              SafeRelease(v150);
                              CFAllocatorRef v172 = CFGetAllocator(v138);
                              CFMutableDictionaryRef v150 = CFDictionaryCreateMutableCopy(v172, 0, v156);
                              if (!v150)
                              {
                                uint64_t Code = 2;
                                goto LABEL_184;
                              }
                              uint64_t v173 = AMAuthInstallBundleProcessRulesWithEntryDict((uint64_t)v138, v150);
                              if (v173)
                              {
                                uint64_t Code = v173;
                                AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"failed to process image rules", v174, v175, v176, v177, v178, v284);
                                goto LABEL_184;
                              }
                              CFBooleanRef v179 = (const __CFBoolean *)CFDictionaryGetValue(v171, @"Personalize");
                              uint64_t v138 = (void *)a1;
                              if (v179 && !CFBooleanGetValue(v179))
                              {
                                if (CFBooleanGetValue(v162))
                                {
                                  CFDictionaryRef v197 = CFDictionaryGetValue(v159, v169);
                                  char v203 = key ^ 1;
                                  if (v197) {
                                    char v203 = 1;
                                  }
                                  uint64_t v204 = "skipping \"%@\" entry";
                                  if ((v203 & 1) == 0)
                                  {
                                    CFAllocatorRef v205 = CFGetAllocator((CFTypeRef)a1);
                                    CFDataRef v206 = CFDataCreate(v205, 0, 0);
                                    CFDictionaryAddValue(v150, @"Digest", v206);
                                    CFDictionarySetValue(v302, v169, v150);
                                    CFDataRef v207 = v206;
                                    uint64_t v138 = (void *)a1;
                                    CFRelease(v207);
                                    uint64_t v204 = "personalizing \"%@\"";
                                  }
                                  AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)v204, v198, v199, v200, v201, v202, (char)v169);
                                  if (v161 == kCFCompareEqualTo) {
                                    goto LABEL_135;
                                  }
LABEL_123:
                                  if (CFDictionaryContainsKey(v150, @"PartialDigest"))
                                  {
                                    CFDictionaryRef v191 = (const __CFDictionary *)CFDictionaryGetValue(v171, @"Path");
                                    CFDictionaryRef v319 = v191;
                                    SafeRetain(v191);
                                    if (!v191) {
                                      goto LABEL_157;
                                    }
                                    goto LABEL_137;
                                  }
                                  if (key)
                                  {
                                    CFDictionaryRef v191 = 0;
                                    goto LABEL_157;
                                  }
                                  AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"not personalizing \"%@\"", v186, v187, v188, v189, v190, (char)v160);
                                }
                                else
                                {
                                  AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"skipping \"%@\" entry", v192, v193, v194, v195, v196, (char)v160);
                                }
                              }
                              else
                              {
                                if (v161) {
                                  goto LABEL_123;
                                }
LABEL_135:
                                uint64_t BasebandComponentName = AMAuthInstallBundleCopyNextBasebandComponentName(v138, (CFTypeRef *)&v319, v180, v181, v182, v183, v184, v185);
                                if (BasebandComponentName)
                                {
                                  uint64_t Code = BasebandComponentName;
LABEL_184:
                                  CFMutableDictionaryRef v8 = 0;
                                  CFDictionaryRef MutableCopy = 0;
                                  CFArrayRef v133 = v307;
                                  CFMutableDictionaryRef v140 = v302;
LABEL_185:
                                  SafeRelease(v140);
                                  SafeRelease(v150);
                                  SafeRelease(v320[0]);
                                  if (!Code)
                                  {
                                    if (v8)
                                    {
                                      if (!MutableCopy
                                        || (uint64_t PersonalizedResponse = AMAuthInstallApCreatePersonalizedResponse(a1, MutableCopy, (CFTypeRef *)&v315), !PersonalizedResponse))
                                      {
                                        CFDictionaryRef v253 = (const __CFDictionary *)CFDictionaryGetValue(v314, @"Updaters");
                                        if (!v253)
                                        {
                                          CFTypeRef v14 = 0;
                                          goto LABEL_197;
                                        }
                                        CFDictionaryRef v254 = v253;
                                        CFIndex v255 = CFDictionaryGetCount(v253);
                                        CFTypeRef v14 = (const void **)malloc(8 * v255);
                                        if (v14)
                                        {
                                          CFDictionaryGetKeysAndValues(v254, v14, 0);
                                          if (v255 >= 1)
                                          {
                                            uint64_t v256 = v14;
                                            do
                                            {
                                              v257 = *v256++;
                                              uint64_t v258 = (__CFDictionary *)CFDictionaryGetValue(v254, v257);
                                              CFDictionaryRemoveValue(v258, @"RequestTags");
                                              --v255;
                                            }
                                            while (v255);
                                          }
                                          uint64_t v259 = AMAuthInstallBundleWriteReceipt((void *)a1, a2, v314, (const __CFBoolean *)*MEMORY[0x263EFFB38]);
                                          if (v259)
                                          {
                                            uint64_t Code = v259;
                                            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialRecoveryOS", (uint64_t)"AMAuthInstallBundleWriteReceipt returned %d", v260, v261, v262, v263, v264, v259);
                                          }
                                          else
                                          {
                                            CFArrayRef v133 = v307;
LABEL_197:
                                            uint64_t Code = _AMAuthInstallBundlePopulatePersonalizedBundle((unsigned char *)a1, url, v296, (int)a4, theDict, v315, v314, v133, a5, v294, (CFBooleanRef)*MEMORY[0x263EFFB40]);
                                            if (Code)
                                            {
                                              char v278 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, Code);
                                              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialRecoveryOS", (uint64_t)"failed to personalize recovery OS bundle", v279, v280, v281, v282, v283, v278);
                                            }
                                          }
                                        }
                                        else
                                        {
                                          uint64_t Code = 2;
                                        }
                                        CFURLRef v15 = v296;
LABEL_200:
                                        CFDictionaryRef v13 = theDict;
                                        CFMutableArrayRef Mutable = v307;
LABEL_201:
                                        CFArrayRef v12 = v294;
                                        goto LABEL_202;
                                      }
                                      uint64_t Code = PersonalizedResponse;
                                      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialRecoveryOS", (uint64_t)"failed to create ap ticket for recovery OS", v248, v249, v250, v251, v252, v284);
                                    }
                                    else
                                    {
                                      uint64_t Code = 0;
                                    }
                                  }
                                  CFTypeRef v14 = 0;
                                  CFMutableArrayRef Mutable = v133;
                                  CFURLRef v15 = v296;
LABEL_250:
                                  CFDictionaryRef v13 = theDict;
                                  goto LABEL_201;
                                }
                                CFDictionaryRef v191 = v319;
                                uint64_t v138 = (void *)a1;
                                if (!v319) {
                                  goto LABEL_157;
                                }
LABEL_137:
                                if (CFBooleanGetValue(v162))
                                {
                                  if (!CFDictionaryContainsKey(v159, v169))
                                  {
                                    CFArrayRef v214 = theArray;
                                    goto LABEL_150;
                                  }
LABEL_143:
                                  int v215 = valuea;
                                  if (v161 == kCFCompareEqualTo) {
                                    int v215 = 1;
                                  }
                                  if (v215 != 1) {
                                    goto LABEL_157;
                                  }
                                }
                                else
                                {
                                  if (CFDictionaryContainsKey(v287, v160)) {
                                    goto LABEL_143;
                                  }
                                  CFArrayRef v214 = v285;
LABEL_150:
                                  v323.CFIndex length = CFArrayGetCount(v214);
                                  v323.CFIndex location = 0;
                                  int v216 = CFArrayContainsValue(v214, v323, v191);
                                  char v217 = valuea;
                                  if (v161 == kCFCompareEqualTo) {
                                    char v217 = 1;
                                  }
                                  if (!v216)
                                  {
                                    CFDictionaryRef v159 = v289;
LABEL_157:
                                    SafeRelease(v191);
                                    if (CFDictionaryGetValue(v150, @"Digest")) {
                                      AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"personalizing \"%@\" uint64_t Digest = \"%@\"", v218, v219, v220, v221, v222, (char)v160);
                                    }
                                    CFBooleanRef v158 = v304;
                                    if (v161 == kCFCompareEqualTo)
                                    {
                                      uint64_t Code = 1;
                                      goto LABEL_184;
                                    }
                                    if (CFBooleanGetValue(v162)) {
                                      CFDictionarySetValue(v302, v169, v150);
                                    }
LABEL_162:
                                    SafeRelease(v169);
                                    goto LABEL_163;
                                  }
                                  CFDictionaryRef v159 = v289;
                                  if ((v217 & 1) == 0) {
                                    goto LABEL_157;
                                  }
                                }
                                AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"entry \"%@\" has been previously personalized; skipping it",
                                  v209,
                                  v210,
                                  v211,
                                  v212,
                                  v213,
                                  (char)v160);
                                SafeRelease(v191);
                              }
                              CFBooleanRef v158 = v304;
                              goto LABEL_163;
                            }
                          }
                          AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"entry \"%@\" not part of manifest, skipping", v163, v164, v165, v166, v167, (char)v160);
LABEL_163:
                          if (Count == ++v157) {
                            goto LABEL_166;
                          }
                        }
                      }
                      CFMutableDictionaryRef v150 = 0;
LABEL_166:
                      CFMutableDictionaryRef v140 = v302;
                      if (CFDictionaryGetCount(v302))
                      {
                        _AMAuthInstallBundlePopulateManifestProperties(v138, theDict, v302, v223, v224, v225, v226, v227);
                        uint64_t v232 = AMAuthInstallApServerRequestAddRequiredTagsWithRecoveryOS(v138, v302, key, 1, v228, v229, v230, v231);
                        CFArrayRef v133 = v307;
                        if (v232)
                        {
                          uint64_t Code = v232;
                        }
                        else
                        {
                          if (((unsigned int (*)(void *, __CFDictionary *, __CFArray *, CFTypeRef *))v138[55])(v138, v302, v286, v320))
                          {
                            CFAllocatorRef v238 = CFGetAllocator(v138);
                            uint64_t Code = 2;
                            CFDictionaryRef MutableCopy = (__CFArray *)CFPropertyListCreateDeepCopy(v238, v302, 2uLL);
                            if (!MutableCopy)
                            {
                              CFMutableDictionaryRef v8 = 0;
                              goto LABEL_185;
                            }
                            goto LABEL_172;
                          }
                          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"failed to add updater tags %@", v233, v234, v235, v236, v237, (char)v320[0]);
                          uint64_t Code = CFErrorGetCode((CFErrorRef)v320[0]);
                        }
                        CFMutableDictionaryRef v8 = 0;
                        CFDictionaryRef MutableCopy = 0;
                        goto LABEL_185;
                      }
                      CFDictionaryRef MutableCopy = 0;
                      CFArrayRef v133 = v307;
LABEL_172:
                      if (CFDictionaryGetCount(v302))
                      {
                        uint64_t v244 = AMAuthInstallApServerRequestAddRequiredTags((void *)a1, v302, key, v239, v240, v241, v242, v243);
                        if (v244)
                        {
                          uint64_t Code = v244;
                          CFMutableDictionaryRef v8 = 0;
                        }
                        else
                        {
                          CFAllocatorRef v245 = CFGetAllocator((CFTypeRef)a1);
                          DeepCFStringRef Copy = CFPropertyListCreateDeepCopy(v245, v302, 2uLL);
                          if (DeepCopy) {
                            CFMutableDictionaryRef v8 = DeepCopy;
                          }
                          else {
                            CFMutableDictionaryRef v8 = 0;
                          }
                          if (DeepCopy) {
                            uint64_t Code = 0;
                          }
                          else {
                            uint64_t Code = 2;
                          }
                        }
                      }
                      else
                      {
                        AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleCreateServerRequestDictionaryForRecoveryOS", (uint64_t)"nothing to be done", v239, v240, v241, v242, v243, v284);
                        CFMutableDictionaryRef v8 = 0;
                        uint64_t Code = 0;
                      }
                      goto LABEL_185;
                    }
                  }
                }
                CFMutableDictionaryRef v8 = 0;
                CFDictionaryRef MutableCopy = 0;
              }
              else
              {
                CFMutableDictionaryRef v8 = 0;
                CFDictionaryRef MutableCopy = 0;
                CFMutableDictionaryRef v140 = 0;
              }
              CFMutableDictionaryRef v150 = 0;
              uint64_t Code = 8;
              goto LABEL_185;
            }
            uint64_t Code = v28;
            char v272 = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v28);
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizePartialRecoveryOS", (uint64_t)"failed to generate a recovery OS receipt: %@", v273, v274, v275, v276, v277, v272);
          }
        }
        CFMutableArrayRef Mutable = v23;
        CFURLRef v15 = v19;
        CFMutableDictionaryRef v8 = 0;
        CFDictionaryRef MutableCopy = 0;
        CFTypeRef v14 = 0;
        goto LABEL_250;
      }
      CFMutableArrayRef Mutable = v23;
      CFURLRef v15 = v19;
      CFMutableDictionaryRef v8 = 0;
    }
    else
    {
      CFURLRef v15 = v19;
      CFMutableDictionaryRef v8 = 0;
      CFDictionaryRef MutableCopy = 0;
    }
    CFArrayRef v12 = 0;
    CFTypeRef v14 = 0;
    uint64_t Code = 2;
    CFDictionaryRef v13 = theDict;
  }
LABEL_202:
  SafeRelease(Mutable);
  SafeRelease(v12);
  SafeRelease(v8);
  SafeRelease(0);
  SafeRelease(v314);
  SafeRelease(0);
  SafeRelease(0);
  SafeRelease(0);
  SafeRelease(0);
  SafeFree(v14);
  SafeRelease(v15);
  SafeRelease(v13);
  SafeRelease(MutableCopy);
  SafeRelease(v313);
  SafeRelease(v315);
  return Code;
}

CFTypeRef AMAuthInstallBundleCreatePreManifest(void *a1, const void *a2, const __CFURL *a3, CFStringRef theString1)
{
  CFDictionaryRef theDict = 0;
  CFTypeRef v30 = 0;
  CFMutableDictionaryRef v27 = 0;
  CFArrayRef theArray = 0;
  if (!a1
    || !a1[2]
    || AMAuthInstallBundleCopyBuildIdentityForVariant((uint64_t)a1, a2, theString1, (CFTypeRef *)&theDict)
    || !theDict)
  {
    AMSupportCreateErrorInternal();
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_24;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, theDict);
  if (!MutableCopy)
  {
LABEL_24:
    CFArrayRef v12 = 0;
    goto LABEL_25;
  }
  int v10 = AMAuthInstallApPersonalizationEnabled((uint64_t)a1);
  if (_AMAuthInstallGeneratePersonalizationEntries(a1, a2, theString1, 0, 0, &theArray) || !theArray)
  {
    AMSupportCreateErrorInternal();
    goto LABEL_24;
  }
  CFAllocatorRef v11 = CFGetAllocator(a1);
  CFArrayRef v12 = CFArrayCreateMutableCopy(v11, 0, theArray);
  if (!v12)
  {
LABEL_25:
    CFMutableArrayRef Mutable = 0;
    CFDictionaryRef v20 = 0;
    goto LABEL_21;
  }
  if (v10 && _AMRAuthInstallBundleAppendFirmwareEntriesToArrays((uint64_t)a1, MutableCopy, v12, 0)
    || (CFDictionaryRef v13 = (CFDictionaryRef *)a1[16]) != 0 && *v13 && (Count = CFDictionaryGetCount(*v13), !a3) && Count >= 1
    || a3
    && _AMAuthInstallBundleCopyOverrideBuildIdentity((CFDictionaryRef **)a1, v12, (const __CFURL *)a2, a3, MutableCopy, 0, 0))
  {
    AMSupportCreateErrorInternal();
    goto LABEL_25;
  }
  CFAllocatorRef v15 = CFGetAllocator(a1);
  CFDictionaryRef v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  CFAllocatorRef v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v19 = CFGetAllocator(a1);
  CFDictionaryRef v20 = CFDictionaryCreate(v19, 0, 0, 0, v16, v17);
  CFDictionarySetValue(Mutable, @"Personalized", v20);
  CFDictionarySetValue(Mutable, @"Manifest", v20);
  if (!_AMAuthInstallBundleCreateServerRequestDictionary((uint64_t)a1, v12, MutableCopy, Mutable, a2, 0, &v27, 0)&& v27&& AMAuthInstallApImg4LocalCreatePreManifest(a1, v27, &v30, v21, v22, v23, v24, v25))
  {
    AMSupportCreateErrorInternal();
  }
LABEL_21:
  SafeRelease(theDict);
  SafeRelease(MutableCopy);
  SafeRelease(theArray);
  SafeRelease(v12);
  SafeRelease(v27);
  SafeRelease(0);
  SafeRelease(Mutable);
  SafeRelease(v20);
  return v30;
}

uint64_t _AMAuthInstallGeneratePersonalizationEntries(CFTypeRef cf, const void *a2, const __CFString *a3, const void *a4, const __CFString *a5, __CFArray **a6)
{
  CFTypeRef cfa = 0;
  uint64_t result = 1;
  if (cf && a2 && a6)
  {
    CFAllocatorRef v13 = CFGetAllocator(cf);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x263EFFF70]);
    if (!Mutable) {
      return 2;
    }
    CFAllocatorRef v15 = Mutable;
    BOOL ShouldPersonalizeOS = _AMAuthInstallBundleShouldPersonalizeOS(cf, a2, a3);
    if (a4) {
      BOOL v17 = _AMAuthInstallBundleShouldPersonalizeOS(cf, a4, a5);
    }
    else {
      BOOL v17 = 0;
    }
    if (*((void *)cf + 6))
    {
      int v18 = AMAuthInstallBasebandPersonalizationEnabled((uint64_t)cf);
      BOOL v19 = v18 != 0;
      if (!AMAuthInstallApPersonalizationEnabled((uint64_t)cf))
      {
        if (v18)
        {
          AMAuthInstallLog(5, (uint64_t)"_AMAuthInstallGeneratePersonalizationEntries", (uint64_t)"personalizing baseband only", v20, v21, v22, v23, v24, v33);
          uint64_t v25 = @"BasebandFirmware";
LABEL_25:
          CFArrayAppendValue(v15, v25);
LABEL_27:
          uint64_t result = 0;
          *a6 = v15;
          return result;
        }
LABEL_26:
        AMAuthInstallLog(5, (uint64_t)"_AMAuthInstallGeneratePersonalizationEntries", (uint64_t)"nothing to personalize", v20, v21, v22, v23, v24, v33);
        goto LABEL_27;
      }
    }
    else
    {
      if (!AMAuthInstallApPersonalizationEnabled((uint64_t)cf)) {
        goto LABEL_26;
      }
      BOOL v19 = 0;
    }
    CFArrayAppendValue(v15, @"RestoreLogo");
    CFArrayAppendValue(v15, @"RestoreDeviceTree");
    CFArrayAppendValue(v15, @"RestoreKernelCache");
    CFArrayAppendValue(v15, @"RestoreRamDisk");
    CFArrayAppendValue(v15, @"OSRamdisk");
    CFArrayAppendValue(v15, @"iBEC");
    CFArrayAppendValue(v15, @"iBSS");
    CFArrayAppendValue(v15, @"KernelCache");
    CFArrayAppendValue(v15, @"ftap");
    CFArrayAppendValue(v15, @"rfta");
    CFArrayAppendValue(v15, @"ftsp");
    CFArrayAppendValue(v15, @"rfts");
    CFArrayAppendValue(v15, @"Ap,SystemVolumeCanonicalMetadata");
    CFArrayAppendValue(v15, @"x86,SystemVolumeCanonicalMetadata");
    CFArrayAppendValue(v15, @"BaseSystemVolume");
    CFArrayAppendValue(v15, @"x86,BaseSystemVolume");
    CFArrayAppendValue(v15, @"SystemVolume");
    CFArrayAppendValue(v15, @"x86,SystemVolume");
    CFArrayAppendValue(v15, @"Ap,BaseSystemTrustCache");
    if (AMAuthInstallApIsImg4((uint64_t)cf, v26, v27, v28, v29, v30, v31, v32))
    {
      CFArrayAppendValue(v15, @"Diags");
      CFArrayAppendValue(v15, @"CFELoader");
      CFArrayAppendValue(v15, @"RBM");
      CFArrayAppendValue(v15, @"PHLEET");
      CFArrayAppendValue(v15, @"PERTOS");
      CFArrayAppendValue(v15, @"PEHammer");
      CFArrayAppendValue(v15, @"Alamo");
    }
    if (v19)
    {
      CFArrayAppendValue(v15, @"BasebandFirmware");
      if (*(void *)(*((void *)cf + 6) + 160))
      {
        char v34 = 1;
        if (!AMAuthInstallVinylIsLegacyChipId(cf, (BOOL *)&v34) && !v34)
        {
          CFArrayAppendValue(v15, @"eUICC,Main");
          CFArrayAppendValue(v15, @"eUICC,Gold");
        }
      }
    }
    if (ShouldPersonalizeOS) {
      CFArrayAppendValue(v15, @"OS");
    }
    if (!v17) {
      goto LABEL_27;
    }
    CFArrayAppendValue(v15, @"RecoveryOSOS");
    CFArrayAppendValue(v15, @"RecoveryOSAppleLogo");
    CFArrayAppendValue(v15, @"RecoveryOSDeviceTree");
    CFArrayAppendValue(v15, @"RecoveryOSKernelCache");
    CFArrayAppendValue(v15, @"RecoveryOSRamDisk");
    CFArrayAppendValue(v15, @"RecoveryOSiBEC");
    CFArrayAppendValue(v15, @"RecoveryOSiBSS");
    CFArrayAppendValue(v15, @"RecoveryOSStaticTrustCache");
    CFArrayAppendValue(v15, @"RecoveryOSiBootData");
    CFArrayAppendValue(v15, @"RecoveryOSDiags");
    CFArrayAppendValue(v15, @"RecoveryOSAp,SystemVolumeCanonicalMetadata");
    CFArrayAppendValue(v15, @"RecoveryOSSystemVolume");
    CFArrayAppendValue(v15, @"RecoveryOSBaseSystemVolume");
    uint64_t v25 = @"RecoveryOSAp,BaseSystemTrustCache";
    goto LABEL_25;
  }
  return result;
}

uint64_t AMAuthInstallBundleShouldPersonalizeOSImage(uint64_t a1, const void *a2, const __CFString *a3)
{
  if (a1
    && a2
    && (CFDictionaryRef ManifestEntry = AMAuthInstallBundleGetManifestEntry(a1, @"Manifest", a3, a2)) != 0
    && (CFDictionaryRef v4 = (const __CFDictionary *)CFDictionaryGetValue(ManifestEntry, @"OS")) != 0
    && (CFDictionaryRef v5 = (const __CFDictionary *)CFDictionaryGetValue(v4, @"Info")) != 0
    && (CFBooleanRef v6 = (const __CFBoolean *)CFDictionaryGetValue(v5, @"Personalize")) != 0)
  {
    uint64_t Value = CFBooleanGetValue(v6);
    CFAllocatorRef v13 = "Yes";
    if (!Value) {
      CFAllocatorRef v13 = "No";
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleShouldPersonalizeOSImage", (uint64_t)"Personalize OS image = %s", v7, v8, v9, v10, v11, (char)v13);
  }
  else
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  return Value;
}

CFDictionaryRef AMAuthInstallBundleGetManifestEntry(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4)
{
  CFDictionaryRef ValueForKeyPathInDict = (const __CFDictionary *)a1;
  *(void *)CFAllocatorRef v13 = 0;
  if (!a1) {
    goto LABEL_7;
  }
  if (!a2 || !a3 || !a4 || AMAuthInstallBundleCopyBuildIdentityForVariant(a1, a4, a3, (CFTypeRef *)v13))
  {
    AMSupportCreateErrorInternal();
    CFDictionaryRef ValueForKeyPathInDict = 0;
    goto LABEL_8;
  }
  CFAllocatorRef v6 = CFGetAllocator(ValueForKeyPathInDict);
  CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v6, *(const __CFDictionary **)v13, a2, v7, v8, v9, v10, v11);
  if (!ValueForKeyPathInDict) {
LABEL_7:
  }
    AMSupportCreateErrorInternal();
LABEL_8:
  SafeRelease(*(CFTypeRef *)v13);
  return ValueForKeyPathInDict;
}

uint64_t AMAuthInstallBundlePersonalize(void *a1, const void *a2, const void *a3, const __CFString *a4)
{
  return AMAuthInstallBundlePersonalizeWithRecoveryOS(a1, a2, a3, a4, 0, 0);
}

uint64_t AMAuthInstallBundlePersonalizeWithRecoveryOS(void *a1, const void *a2, const void *a3, const __CFString *a4, const void *a5, const __CFString *a6)
{
  CFStringRef v37 = 0;
  if (a1)
  {
    uint64_t v12 = _AMAuthInstallGeneratePersonalizationEntries(a1, a2, a4, a5, a6, &v37);
    if (v12)
    {
      uint64_t v34 = v12;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizeWithRecoveryOS", (uint64_t)"failed to generate personalization entries", v13, v14, v15, v16, v17, v36);
      CFMutableArrayRef Mutable = 0;
      uint64_t v23 = 0;
    }
    else
    {
      BOOL ShouldPersonalizeOS = _AMAuthInstallBundleShouldPersonalizeOS(a1, a2, a4);
      if (a5) {
        _AMAuthInstallBundleShouldPersonalizeOS(a1, a5, a6);
      }
      CFAllocatorRef v19 = CFGetAllocator(a1);
      uint64_t v20 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x263EFFF70]);
      CFAllocatorRef v22 = CFGetAllocator(a1);
      uint64_t v23 = CFArrayCreateMutable(v22, 0, v20);
      if (a1[6]) {
        AMAuthInstallBasebandPersonalizationEnabled((uint64_t)a1);
      }
      if (AMAuthInstallApPersonalizationEnabled((uint64_t)a1))
      {
        CFArrayAppendValue(Mutable, @"OS");
        if (!AMAuthInstallApIsImg4((uint64_t)a1, v24, v25, v26, v27, v28, v29, v30)) {
          CFArrayAppendValue(Mutable, @"Diags");
        }
        char v31 = 1;
        uint64_t v32 = @"Restore.plist";
        char v33 = @"BuildManifest.plist";
      }
      else
      {
        CFArrayAppendValue(Mutable, @"RestoreRamDisk");
        CFArrayAppendValue(Mutable, @"OSRamdisk");
        CFArrayAppendValue(Mutable, @"KernelCache");
        if (!ShouldPersonalizeOS) {
          CFArrayAppendValue(Mutable, @"OS");
        }
        CFArrayAppendValue(v23, @"BuildManifest.plist");
        CFArrayAppendValue(v23, @"Restore.plist");
        char v31 = 0;
        uint64_t v32 = @"Firmware/all_flash";
        char v33 = @"Firmware/dfu";
      }
      CFArrayAppendValue(v23, v33);
      CFArrayAppendValue(v23, v32);
      CFArrayAppendValue(v23, @"Firmware/device_map.txt");
      CFArrayAppendValue(v23, @"Firmware/device_map.plist");
      CFArrayAppendValue(v23, @"Firmware/SE");
      if (a5 && !AMAuthInstallBundleShouldPersonalizeOSImage((uint64_t)a1, a5, a6)) {
        CFArrayAppendValue(Mutable, @"RecoveryOSOS");
      }
      uint64_t v34 = 2;
      if (Mutable && v23) {
        uint64_t v34 = AMAuthInstallBundlePersonalizePartialWithRecoveryOS((unint64_t)a1, a2, a3, a4, (uint64_t)a5, a6, v37, Mutable, v23, v31);
      }
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    uint64_t v23 = 0;
    uint64_t v34 = 1;
  }
  SafeRelease(v37);
  SafeRelease(Mutable);
  SafeRelease(v23);
  SafeRelease(0);
  return v34;
}

BOOL _AMAuthInstallBundleShouldPersonalizeOS(const void *a1, const void *a2, const __CFString *a3)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  if (a2)
  {
    int v4 = AMAuthInstallBundleCopyBuildIdentityForVariant((uint64_t)a1, a2, a3, &cf);
    if (!v4)
    {
      CFGetAllocator(a1);
      uint64_t ValueForKeyPathInDict = AMSupportGetValueForKeyPathInDict();
      BOOL v10 = ValueForKeyPathInDict != 0;
      uint64_t v17 = "No";
      if (ValueForKeyPathInDict) {
        uint64_t v17 = "Yes";
      }
      AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundleShouldPersonalizeOS", (uint64_t)"Personalize OS = %s", v12, v13, v14, v15, v16, (char)v17);
      goto LABEL_9;
    }
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleShouldPersonalizeOS", (uint64_t)"failed to copy build variant %d", v5, v6, v7, v8, v9, v4);
  }
  AMSupportCreateErrorInternal();
  BOOL v10 = 0;
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t AMAuthInstallBundlePersonalizeRecoveryOS(const void *a1, const void *a2, const void *a3, const __CFString *a4)
{
  CFMutableArrayRef Mutable = 0;
  uint64_t v5 = 1;
  if (a1)
  {
    uint64_t v7 = 0;
    if (a2)
    {
      _AMAuthInstallBundleShouldPersonalizeOS(a1, a2, a4);
      CFAllocatorRef v11 = CFGetAllocator(a1);
      uint64_t v12 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
      CFAllocatorRef v13 = CFGetAllocator(a1);
      uint64_t v7 = CFArrayCreateMutable(v13, 0, v12);
      if (AMAuthInstallApPersonalizationEnabled((uint64_t)a1))
      {
        CFArrayAppendValue(Mutable, @"OS");
        if (!AMAuthInstallApIsImg4((uint64_t)a1, v14, v15, v16, v17, v18, v19, v20)) {
          CFArrayAppendValue(Mutable, @"Diags");
        }
        uint64_t v21 = @"Restore.plist";
        CFAllocatorRef v22 = @"BuildManifest.plist";
      }
      else
      {
        CFArrayAppendValue(Mutable, @"RestoreRamDisk");
        CFArrayAppendValue(Mutable, @"OSRamdisk");
        CFArrayAppendValue(Mutable, @"KernelCache");
        CFArrayAppendValue(Mutable, @"OS");
        CFArrayAppendValue(v7, @"BuildManifest.plist");
        CFArrayAppendValue(v7, @"Restore.plist");
        uint64_t v21 = @"Firmware/all_flash";
        CFAllocatorRef v22 = @"Firmware/dfu";
      }
      CFArrayAppendValue(v7, v22);
      CFArrayAppendValue(v7, v21);
      CFArrayAppendValue(v7, @"Firmware/device_map.txt");
      CFArrayAppendValue(v7, @"Firmware/device_map.plist");
      CFArrayAppendValue(v7, @"Firmware/SE");
      if (!AMAuthInstallBundleShouldPersonalizeOSImage((uint64_t)a1, a2, a4)) {
        CFArrayAppendValue(Mutable, @"RecoveryOSOS");
      }
      uint64_t v5 = 2;
      if (Mutable && v7) {
        uint64_t v5 = AMAuthInstallBundlePersonalizePartialRecoveryOS((uint64_t)a1, a3, (const __CFURL *)a2, a4, Mutable, v7, 0, v23);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  SafeRelease(Mutable);
  SafeRelease(v7);
  SafeRelease(0);
  return v5;
}

uint64_t AMAuthInstallBundleCopyURLForKey(CFDictionaryRef **a1, const __CFString *a2, CFStringRef theString1, const __CFURL *a4, void *a5)
{
  CFStringRef v5 = 0;
  CFStringRef pathComponent = 0;
  char v74 = 0;
  *(void *)uint64_t v72 = 0;
  *(void *)CFDictionaryRef v73 = 0;
  uint64_t v6 = 1;
  if (!a1 || !a2 || !a4)
  {
    CFStringRef v9 = 0;
    CFStringRef v10 = 0;
    CFURLRef v11 = 0;
    CFURLRef v12 = 0;
    CFAllocatorRef v13 = 0;
    goto LABEL_18;
  }
  CFStringRef v9 = 0;
  CFStringRef v10 = 0;
  CFURLRef v11 = 0;
  CFURLRef v12 = 0;
  CFAllocatorRef v13 = 0;
  if (a5)
  {
    CFBooleanRef IsRecoveryVariant = (const __CFBoolean *)_AMAuthInstallIsRecoveryVariant((uint64_t)a1, theString1);
    uint64_t IfNecessary = AMAuthInstallBundleCopyReceiptCreateIfNecessary((uint64_t)a1, a4, (CFPropertyListRef *)v73);
    if (IfNecessary)
    {
      uint64_t v6 = IfNecessary;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyURLForKey", (uint64_t)"failed to create receipt dict", v18, v19, v20, v21, v22, v70);
      CFStringRef v5 = 0;
      CFStringRef v9 = 0;
      CFStringRef v10 = 0;
      CFURLRef v11 = 0;
      CFURLRef v12 = 0;
      CFAllocatorRef v13 = 0;
      goto LABEL_18;
    }
    int Value = CFBooleanGetValue(IsRecoveryVariant);
    CFAllocatorRef v24 = CFGetAllocator(a1);
    if (Value) {
      CFStringRef Copy = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v24, a2);
    }
    else {
      CFStringRef Copy = CFStringCreateCopy(v24, a2);
    }
    uint64_t v26 = (uint64_t)Copy;
    CFAllocatorRef v27 = CFGetAllocator(a1);
    CFStringRef v5 = CFStringCreateWithFormat(v27, 0, @"%@.%@.%@.");
    if (v5)
    {
      CFAllocatorRef v28 = CFGetAllocator(a1);
      CFDictionaryRef MutableCopy = CFStringCreateMutableCopy(v28, 0, v5);
      CFStringRef v9 = MutableCopy;
      if (MutableCopy)
      {
        CFStringAppend(MutableCopy, @"PersonalizedPath");
        CFAllocatorRef v30 = CFGetAllocator(a1);
        CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v30, *(const __CFDictionary **)v73, v9, v31, v32, v33, v34, v35);
        if (ValueForKeyPathInDict)
        {
          CFStringRef v37 = (const __CFString *)ValueForKeyPathInDict;
          CFAllocatorRef v13 = (const void *)v26;
          CFStringRef v10 = 0;
          CFURLRef v12 = 0;
LABEL_13:
          CFAllocatorRef v38 = CFGetAllocator(a1);
          CFURLRef v39 = CFURLCreateCopyAppendingPathComponent(v38, a4, v37, 0);
          CFURLRef v11 = v39;
          if (v39)
          {
            CFTypeRef v40 = CFRetain(v39);
            uint64_t v6 = 0;
LABEL_17:
            *a5 = v40;
            goto LABEL_18;
          }
LABEL_32:
          uint64_t v6 = 2;
          goto LABEL_18;
        }
        CFAllocatorRef v41 = CFDictionaryGetValue(*a1[16], a2);
        if (v41)
        {
          CFTypeRef v40 = CFRetain(v41);
          uint64_t v6 = 0;
          CFStringRef v10 = 0;
          CFURLRef v11 = 0;
          CFAllocatorRef v13 = (const void *)v26;
          CFURLRef v12 = 0;
          goto LABEL_17;
        }
        uint64_t v43 = AMAuthInstallBundleCopyBuildIdentityForVariant((uint64_t)a1, a4, theString1, (CFTypeRef *)v72);
        if (v43)
        {
          uint64_t v6 = v43;
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyURLForKey", (uint64_t)"failed to copy variant", v44, v45, v46, v47, v48, (char)@"Manifest");
          CFStringRef v10 = 0;
          CFURLRef v11 = 0;
          CFAllocatorRef v13 = (const void *)v26;
          goto LABEL_36;
        }
        CFAllocatorRef v49 = CFGetAllocator(a1);
        CFIndex v50 = CFStringCreateMutableCopy(v49, 0, v5);
        if (v50)
        {
          CFStringRef v51 = v50;
          CFStringAppend(v50, @"Path");
          CFAllocatorRef v52 = CFGetAllocator(a1);
          CFStringRef v10 = v51;
          CFDictionaryRef v58 = AMAuthInstallSupportGetValueForKeyPathInDict(v52, *(const __CFDictionary **)v72, v51, v53, v54, v55, v56, v57);
          if (!v58)
          {
            CFURLRef v11 = 0;
            CFAllocatorRef v13 = (const void *)v26;
            CFURLRef v12 = 0;
            uint64_t v6 = 8;
            goto LABEL_18;
          }
          CFStringRef v59 = (const __CFString *)v58;
          CFAllocatorRef v60 = CFGetAllocator(a1);
          CFAllocatorRef v13 = (const void *)v26;
          uint64_t v61 = AMAuthInstallSupportCreatePrependedFilePath(v60, v26, v59, &pathComponent);
          if (!v61)
          {
            CFAllocatorRef v67 = CFGetAllocator(a1);
            CFURLRef v68 = CFURLCreateCopyAppendingPathComponent(v67, a4, pathComponent, 0);
            CFURLRef v12 = v68;
            if (!v68)
            {
              CFURLRef v11 = 0;
              goto LABEL_32;
            }
            uint64_t v69 = AMAuthInstallSupportFileURLExists(v68, &v74);
            if (v69)
            {
              uint64_t v6 = v69;
              CFURLRef v11 = 0;
              goto LABEL_18;
            }
            if (v74) {
              CFStringRef v37 = pathComponent;
            }
            else {
              CFStringRef v37 = v59;
            }
            goto LABEL_13;
          }
          uint64_t v6 = v61;
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyURLForKey", (uint64_t)"failed to prepend entry name to path", v62, v63, v64, v65, v66, (char)@"Manifest");
          CFURLRef v11 = 0;
LABEL_36:
          CFURLRef v12 = 0;
          goto LABEL_18;
        }
      }
    }
    else
    {
      CFStringRef v9 = 0;
    }
    CFStringRef v10 = 0;
    CFURLRef v11 = 0;
    CFAllocatorRef v13 = (const void *)v26;
    CFURLRef v12 = 0;
    goto LABEL_32;
  }
LABEL_18:
  SafeRelease(pathComponent);
  SafeRelease(*(CFTypeRef *)v73);
  SafeRelease(v13);
  SafeRelease(v5);
  SafeRelease(v9);
  SafeRelease(v10);
  SafeRelease(*(CFTypeRef *)v72);
  SafeRelease(v11);
  SafeRelease(v12);
  return v6;
}

uint64_t AMAuthInstallBundlePersonalizeRestoreLocalPolicy(const void *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  CFDictionaryRef theDict = 0;
  CFURLRef v20 = 0;
  CFDictionaryRef v18 = 0;
  uint64_t ServerRequest = AMAuthInstallPlatformCopyURLWithAppendedComponent(v8, a2, @"amai/LocalPolicy.restore.img4", 0, &v20);
  if (ServerRequest
    || (uint64_t ServerRequest = _AMAuthInstallBundleLocalPolicyCopyGivenOrDefaultNSIH(a1, a2, a3, &v22), ServerRequest)
    || (uint64_t ServerRequest = AMAuthInstallRestoreLocalPolicyCreateServerRequest((uint64_t)a1, v22, (CFTypeRef *)&theDict),
        ServerRequest)
    || (uint64_t ServerRequest = AMAuthInstallApCreatePersonalizedResponse((uint64_t)a1, theDict, (CFTypeRef *)&v18),
        ServerRequest)
    || (uint64_t ServerRequest = AMAuthInstallLocalPolicyStitchTicketData(a1, v18, &cf), ServerRequest))
  {
    uint64_t v16 = ServerRequest;
  }
  else
  {
    uint64_t v10 = AMAuthInstallSupportWriteDataToFileURL(v8, (const __CFData *)cf, v20, 1);
    if (v10)
    {
      uint64_t v16 = v10;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizeRestoreLocalPolicy", (uint64_t)"failed to write local policy to %@", v11, v12, v13, v14, v15, (char)v20);
    }
    else
    {
      uint64_t v16 = 0;
      if (a4) {
        *a4 = CFRetain(cf);
      }
    }
  }
  SafeRelease(v18);
  SafeRelease(theDict);
  SafeRelease(v20);
  SafeRelease(cf);
  SafeRelease(v22);
  SafeRelease(0);
  return v16;
}

__CFString *AMAuthInstallBundleGetRestoreLocalPolicyComponentPath()
{
  return @"amai/LocalPolicy.restore.img4";
}

uint64_t _AMAuthInstallBundleLocalPolicyCopyGivenOrDefaultNSIH(const void *a1, const void *a2, CFTypeRef cf, CFTypeRef *a4)
{
  if (!a4) {
    return 1;
  }
  if (cf)
  {
    uint64_t v5 = 0;
    *a4 = CFRetain(cf);
  }
  else
  {
    CFAllocatorRef v15 = CFGetAllocator(a1);
    CFURLRef v26 = 0;
    CFTypeRef v27 = 0;
    if (a1 && AMAuthInstallApIsImg4((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14)) {
      CFStringRef v16 = @"amai/apimg4ticket.der";
    }
    else {
      CFStringRef v16 = @"amai/apticket.der";
    }
    uint64_t v17 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v15, a2, v16, 0, &v26);
    if (v17)
    {
      uint64_t v5 = v17;
      CFAllocatorRef v24 = 0;
    }
    else
    {
      uint64_t Digest = (const void *)AMAuthInstallApCreateDigest((uint64_t)v26, 4096, 384);
      CFAllocatorRef v24 = Digest;
      if (Digest)
      {
        uint64_t v5 = 0;
        *a4 = CFRetain(Digest);
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleLocalPolicyCopyDefaultNSIH", (uint64_t)"failed to compute NSIH for %@: %@", v19, v20, v21, v22, v23, (char)v26);
        uint64_t v5 = 4;
      }
    }
    SafeRelease(v26);
    SafeRelease(v24);
    SafeRelease(v27);
  }
  return v5;
}

uint64_t AMAuthInstallBundlePersonalizeRecoveryOSLocalPolicy(void *a1, const void *a2, const void *a3, const void *a4, const __CFUUID *a5, CFTypeRef *a6)
{
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  CFDictionaryRef theDict = 0;
  CFURLRef v24 = 0;
  CFDictionaryRef v22 = 0;
  uint64_t ServerRequest = AMAuthInstallPlatformCopyURLWithAppendedComponent(v12, a2, @"amai/LocalPolicy.recoveryOS.img4", 0, &v24);
  if (ServerRequest
    || (uint64_t ServerRequest = _AMAuthInstallBundleLocalPolicyCopyGivenOrDefaultNSIH(a1, a2, a3, &v26), ServerRequest)
    || (uint64_t ServerRequest = AMAuthInstallRecoveryOSLocalPolicyCreateServerRequest(a1, v26, a4, a5, (CFTypeRef *)&theDict),
        ServerRequest)
    || (uint64_t ServerRequest = AMAuthInstallApCreatePersonalizedResponse((uint64_t)a1, theDict, (CFTypeRef *)&v22),
        ServerRequest)
    || (uint64_t ServerRequest = AMAuthInstallLocalPolicyStitchTicketData(a1, v22, &cf), ServerRequest))
  {
    uint64_t v20 = ServerRequest;
  }
  else
  {
    uint64_t v14 = AMAuthInstallSupportWriteDataToFileURL(v12, (const __CFData *)cf, v24, 0);
    if (v14)
    {
      uint64_t v20 = v14;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundlePersonalizeRecoveryOSLocalPolicy", (uint64_t)"failed to write local policy to %@", v15, v16, v17, v18, v19, (char)v24);
    }
    else
    {
      uint64_t v20 = 0;
      if (a6) {
        *a6 = CFRetain(cf);
      }
    }
  }
  SafeRelease(v22);
  SafeRelease(theDict);
  SafeRelease(v24);
  SafeRelease(cf);
  SafeRelease(v26);
  return v20;
}

__CFString *AMAuthInstallBundleGetRecoveryOSLocalPolicyComponentPath()
{
  return @"amai/LocalPolicy.recoveryOS.img4";
}

uint64_t AMAuthInstallBundlePersonalizeBasebandFirmware(const void *a1, const void *a2, const void *a3, const __CFString *a4)
{
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFArrayRef v16 = _CFArrayCreateWithObjects(v8, v9, v10, v11, v12, v13, v14, v15, @"BasebandFirmware");
  if (!v16)
  {
    CFArrayRef v26 = 0;
    goto LABEL_6;
  }
  CFAllocatorRef v17 = CFGetAllocator(a1);
  CFArrayRef v25 = _CFArrayCreateWithObjects(v17, v18, v19, v20, v21, v22, v23, v24, @"Restore.plist");
  CFArrayRef v26 = v25;
  if (!v25)
  {
LABEL_6:
    uint64_t v27 = 2;
    goto LABEL_4;
  }
  uint64_t v27 = AMAuthInstallBundlePersonalizePartialWithRecoveryOS((unint64_t)a1, a2, a3, a4, 0, 0, v16, 0, v25, 0);
LABEL_4:
  SafeRelease(v16);
  SafeRelease(0);
  SafeRelease(v26);
  return v27;
}

CFTypeRef _CreateRelativePathForManifestEntry(const void *a1, uint64_t a2, const __CFURL *a3, const __CFDictionary *a4, uint64_t a5)
{
  CFTypeRef v5 = 0;
  CFDictionaryRef v29 = 0;
  if (a1)
  {
    if (a3)
    {
      char v6 = a5;
      if (a5)
      {
        if (AMAuthInstallBundleCopyReceiptCreateIfNecessary((uint64_t)a1, a3, (CFPropertyListRef *)&v29))
        {
          AMAuthInstallLog(3, (uint64_t)"_CreateRelativePathForManifestEntry", (uint64_t)"failed to create receipt dict", v9, v10, v11, v12, v13, v28);
        }
        else
        {
          CFAllocatorRef v14 = CFGetAllocator(a1);
          CFDictionaryRef ValueForKeyWithFormat = AMAuthInstallSupportGetValueForKeyWithFormat(v14, v29, @"%@.%@.%@.%@", v15, v16, v17, v18, v19, (char)@"Manifest");
          if (ValueForKeyWithFormat
            || (CFAllocatorRef v21 = CFGetAllocator(a1),
                (CFDictionaryRef ValueForKeyWithFormat = AMAuthInstallSupportGetValueForKeyWithFormat(v21, a4, @"%@.%@.%@", v22, v23, v24, v25, v26, v6)) != 0))
          {
            CFTypeRef v5 = CFRetain(ValueForKeyWithFormat);
            goto LABEL_8;
          }
        }
        CFTypeRef v5 = 0;
      }
    }
  }
LABEL_8:
  SafeRelease(v29);
  return v5;
}

uint64_t AMAuthInstallBundleSetPropertiesWithBoardConfig(CFDictionaryRef *a1, uint64_t a2, int a3, const void *a4, int a5, const void *a6, const __CFString *a7)
{
  uint64_t v7 = 0;
  CFArrayRef theArray = 0;
  uint64_t v8 = 1;
  if (!a6 || !a7) {
    goto LABEL_25;
  }
  char v10 = (char)a6;
  uint64_t v16 = AMAuthInstallBundleCopyPublishedVariantsArray((const __CFAllocator *)*MEMORY[0x263EFFB08], a6, (CFTypeRef *)&theArray);
  if (v16)
  {
    uint64_t v8 = v16;
    char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString(a1, v16);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleSetPropertiesWithBoardConfig", (uint64_t)"failed to find published variants in bundle: %@", v18, v19, v20, v21, v22, LocalizedStatusString);
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleSetPropertiesWithBoardConfig", (uint64_t)"bundle: %@", v23, v24, v25, v26, v27, v10);
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_25;
  }
  uint64_t v62 = (uint64_t)a1;
  uint64_t v63 = a2;
  CFArrayRef v28 = theArray;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_24:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleSetPropertiesWithBoardConfig", (uint64_t)"failed to find any usable references to \"%@\" in build manifest", v30, v31, v32, v33, v34, (char)a7);
    uint64_t v7 = 0;
    uint64_t v8 = 8;
    goto LABEL_25;
  }
  CFIndex v35 = Count;
  int v60 = a3;
  int v61 = a5;
  CFTypeRef cf = a4;
  CFIndex v36 = 0;
  uint64_t v8 = 8;
  while (1)
  {
    *(void *)uint64_t v64 = 0;
    uint64_t v65 = 0;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v36);
    if (!ValueAtIndex) {
      AMAuthInstallBundleSetPropertiesWithBoardConfig_cold_1();
    }
    CFDictionaryRef v38 = ValueAtIndex;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"Info");
    if (!Value) {
      goto LABEL_22;
    }
    CFStringRef v40 = (const __CFString *)CFDictionaryGetValue(Value, @"DeviceClass");
    if (!v40 || CFStringCompare(a7, v40, 1uLL)) {
      goto LABEL_22;
    }
    CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(v38, @"ApBoardID");
    if (!v41 || (v42 = v41, (CFStringRef v43 = (const __CFString *)CFDictionaryGetValue(v38, @"ApChipID")) == 0))
    {
      uint64_t v8 = 7;
      goto LABEL_22;
    }
    CFStringRef v44 = v43;
    CFStringRef v45 = (const __CFString *)CFDictionaryGetValue(v38, @"BbChipID");
    CFStringRef v46 = (const __CFString *)CFDictionaryGetValue(v38, @"ApSecurityDomain");
    if (_CFStringToUInt32(v42, (_DWORD *)&v65 + 1))
    {
      if (_CFStringToUInt32(v44, &v65)
        && (!v45 || _CFStringToUInt32(v45, &v64[1]))
        && (!v46 || _CFStringToUInt32(v46, v64)))
      {
        break;
      }
    }
    uint64_t v8 = 3;
LABEL_22:
    if (v35 == ++v36)
    {
      if (v8 != 8) {
        goto LABEL_5;
      }
      goto LABEL_24;
    }
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v7 = Mutable;
  if (Mutable)
  {
    _CFDictionarySetInteger64(Mutable, @"ECID", v63);
    _CFDictionarySetInteger32(v7, @"ApChipID", v65);
    _CFDictionarySetInteger32(v7, @"ApBoardID", SHIDWORD(v65));
    if (v46) {
      int v49 = v64[0];
    }
    else {
      int v49 = 1;
    }
    _CFDictionarySetInteger32(v7, @"ApSecurityDomain", v49);
    _CFDictionarySetBoolean(v7, @"ApProductionMode", v60);
    uint64_t v50 = AMAuthInstallApSetParameters(v62, v7);
    if (!v50)
    {
      uint64_t v56 = (uint64_t)cf;
      if (cf)
      {
        if (v45)
        {
          if (AMAuthInstallBasebandSetFusings(v62, v64[1], v61, cf, v52, v53, v54, v55))
          {
            uint64_t v57 = "baseband apparently doesn't support personalization";
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v57 = "no baseband chipid found in identity, but baseband returned snum. Can't preflight baseband personalization.";
LABEL_37:
          AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBundleSetPropertiesWithBoardConfig", (uint64_t)v57, v56, v52, v53, v54, v55, v58);
        }
      }
      uint64_t v8 = 0;
      goto LABEL_25;
    }
    uint64_t v8 = v50;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleSetPropertiesWithBoardConfig", (uint64_t)"failed to set parameters with board config", v51, v52, v53, v54, v55, v58);
  }
  else
  {
    uint64_t v8 = 2;
  }
LABEL_25:
  SafeRelease(v7);
  SafeRelease(theArray);
  return v8;
}

uint64_t AMAuthInstallBundleSetVariantSpecifiesRestoreBehavior(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 56) = a2;
  return result;
}

__CFString *AMAuthInstallBundleGetReceiptComponent()
{
  return @"amai/receipt.plist";
}

__CFString *AMAuthInstallBundleGetApTicketComponent()
{
  return @"amai/apticket.der";
}

__CFString *AMAuthInstallBundleGetApTicketComponentPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && AMAuthInstallApIsImg4(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return @"amai/apimg4ticket.der";
  }
  else {
    return @"amai/apticket.der";
  }
}

uint64_t AMAuthInstallBundleOverrideEntry(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    if (a3)
    {
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleOverrideEntry", (uint64_t)"overriding entry: %@", a4, a5, a6, a7, a8, (char)a2);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleOverrideEntry", (uint64_t)"override path: %@", v12, v13, v14, v15, v16, (char)a3);
      CFDictionarySetValue(**(CFMutableDictionaryRef **)(a1 + 128), a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallBundleOverrideBuildManifest(void *a1, const __CFURL *a2)
{
  uint64_t v2 = 1;
  if (a1 && a2)
  {
    CFAllocatorRef v5 = CFGetAllocator(a1);
    uint64_t DictionaryFromFileURL = AMAuthInstallSupportCreateDictionaryFromFileURL(v5, (CFTypeRef *)(a1[16] + 16), a2);
    if (DictionaryFromFileURL)
    {
      uint64_t v2 = DictionaryFromFileURL;
      uint64_t v12 = "failed to read build identity override file";
    }
    else
    {
      if (*(void *)(a1[16] + 16)) {
        return 0;
      }
      uint64_t v2 = 14;
      uint64_t v12 = "failed to create build identity override";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleOverrideBuildManifest", (uint64_t)v12, v7, v8, v9, v10, v11, v14);
  }
  return v2;
}

uint64_t AMAuthInstallBundleOverrideRecoveryOSBuildManifest(void *a1, const __CFURL *a2)
{
  uint64_t v2 = 1;
  if (a1 && a2)
  {
    CFAllocatorRef v5 = CFGetAllocator(a1);
    uint64_t DictionaryFromFileURL = AMAuthInstallSupportCreateDictionaryFromFileURL(v5, (CFTypeRef *)(a1[16] + 24), a2);
    if (DictionaryFromFileURL)
    {
      uint64_t v2 = DictionaryFromFileURL;
      uint64_t v12 = "failed to read recoveryOS build identity override file";
    }
    else
    {
      if (*(void *)(a1[16] + 24)) {
        return 0;
      }
      uint64_t v2 = 14;
      uint64_t v12 = "failed to create recoveryOS build identity override";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleOverrideRecoveryOSBuildManifest", (uint64_t)v12, v7, v8, v9, v10, v11, v14);
  }
  return v2;
}

uint64_t AMAuthInstallBundleOverrideBuildManifestEntries(void *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 1;
  }
  SafeRelease(*(CFTypeRef *)(a1[16] + 16));
  if (!a2)
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleOverrideBuildManifestEntries", (uint64_t)"clearing build identity overrides", v4, v5, v6, v7, v8, v18);
    CFDictionaryRef v16 = 0;
    goto LABEL_6;
  }
  CFAllocatorRef v9 = CFGetAllocator(a1);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v9, a2);
  if (Copy)
  {
    CFDictionaryRef v16 = Copy;
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleOverrideBuildManifestEntries", (uint64_t)"overriding build identity entries: %@", v11, v12, v13, v14, v15, (char)a2);
LABEL_6:
    uint64_t result = 0;
    *(void *)(a1[16] + 16) = v16;
    return result;
  }
  return 2;
}

uint64_t AMAuthInstallBundleOverrideEntries(CFTypeRef **cf, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf) {
    return 1;
  }
  if (a2)
  {
    CFAllocatorRef v10 = CFGetAllocator(cf);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, a2);
    if (MutableCopy)
    {
      CFMutableDictionaryRef v17 = MutableCopy;
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleOverrideEntries", (uint64_t)"overriding entries: %@", v12, v13, v14, v15, v16, (char)a2);
      SafeRelease(*cf[16]);
      uint64_t result = 0;
      *cf[16] = v17;
    }
    else
    {
      return 2;
    }
  }
  else
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleOverrideEntries", (uint64_t)"clearing overrides", a4, a5, a6, a7, a8, v19);
    CFDictionaryRemoveAllValues((CFMutableDictionaryRef)*cf[16]);
    return 0;
  }
  return result;
}

CFStringRef _AMAuthInstallBundleImageHasBuildString(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    if (CFStringCompare(result, @"iBSS", 0) && CFStringCompare(v1, @"iBEC", 0)) {
      return (const __CFString *)(CFEqual(v1, @"LLB"));
    }
    else {
      return (const __CFString *)1;
    }
  }
  return result;
}

uint64_t _AMAuthInstallBundleApplyMeasurements(uint64_t a1, CFStringRef theString1, const void *a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  CFMutableDictionaryRef theDict = 0;
  uint64_t v76 = theString1;
  if (!a1)
  {
    uint64_t v6 = 0;
    CFAllocatorRef v10 = 0;
    uint64_t Code = 1;
    goto LABEL_39;
  }
  uint64_t v6 = 0;
  uint64_t Code = 1;
  if (!theString1 || (uint64_t v8 = a3) == 0)
  {
    CFAllocatorRef v10 = 0;
    goto LABEL_39;
  }
  CFAllocatorRef v10 = 0;
  if (!a5) {
    goto LABEL_39;
  }
  if (CFEqual(theString1, @"BasebandFirmware"))
  {
    CFDictionaryRef Value = CFDictionaryGetValue(**(CFDictionaryRef **)(a1 + 128), @"VinylFirmware");
    if (Value) {
      AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleApplyMeasurements", (uint64_t)"using vinyl firmware override: %@ = %@", v33, v34, v35, v36, v37, (char)@"VinylFirmware");
    }
    uint64_t Measurements = AMAuthInstallBasebandCreateMeasurements((void *)a1, v8, Value, (CFTypeRef *)&theDict);
    if (Measurements)
    {
      uint64_t Code = Measurements;
      goto LABEL_38;
    }
    uint64_t v42 = *(void *)(a1 + 48);
    if (v42 && *(_DWORD *)(v42 + 4) == 104)
    {
      if (AMAuthInstallIsICE19BBGoldCertIDECDSA(*(_DWORD *)(v42 + 8), v40, v41, v28, v29, v30, v31, v32))
      {
        CFStringRef v43 = @"PSI2-PartialDigest";
        CFDictionaryRemoveValue(theDict, @"PSI2-PartialDigest");
        CFStringRef v44 = theDict;
        CFStringRef v45 = &kAMAuthInstallTagBbRestorePsi2PartialDigest;
      }
      else
      {
        CFStringRef v43 = @"PSI-PartialDigest";
        CFDictionaryRemoveValue(theDict, @"PSI-PartialDigest");
        CFStringRef v44 = theDict;
        CFStringRef v45 = &kAMAuthInstallTagBbRestorePsiPartialDigest;
      }
      uint64_t v47 = *v45;
      CFDictionaryRemoveValue(v44, *v45);
      CFDictionaryRemoveValue(*a5, v43);
      CFDictionaryRemoveValue(*a5, v47);
    }
    a4 = 0;
    goto LABEL_25;
  }
  if (CFEqual(theString1, @"eUICC,Main")
    || CFEqual(theString1, @"eUICC,Gold"))
  {
    uint64_t v21 = CFDictionaryGetValue(**(CFDictionaryRef **)(a1 + 128), @"VinylFirmware");
    if (v21)
    {
      uint64_t v27 = v21;
      AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleApplyMeasurements", (uint64_t)"using vinyl firmware override: %@ = %@", v22, v23, v24, v25, v26, (char)@"VinylFirmware");
      uint64_t v8 = v27;
    }
    uint64_t Code = AMAuthInstallVinylCreateMeasurements((CFTypeRef)a1, v8, &theDict, &v76);
    a4 = 0;
    uint64_t v6 = 0;
    CFAllocatorRef v10 = 0;
    if (Code) {
      goto LABEL_39;
    }
    goto LABEL_25;
  }
  CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a1);
  CFStringRef ValueForKeyWithFormat = (const __CFString *)AMAuthInstallSupportGetValueForKeyWithFormat(v13, a4, @"%@.%@", v14, v15, v16, v17, v18, (char)@"Info");
  if (AMAuthInstallApImg4ValidImage((const __CFURL *)v8))
  {
    int v46 = *(_DWORD *)(*(void *)(a1 + 16) + 112);
    goto LABEL_47;
  }
  CFAllocatorRef v53 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef v59 = AMAuthInstallSupportGetValueForKeyWithFormat(v53, a4, @"%@.%@", v54, v55, v56, v57, v58, (char)@"Info");
  if (!v59 || (v60 = (const __CFString *)v59, CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v60)))
  {
    int v46 = 256;
    goto LABEL_47;
  }
  int v62 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 96);
  if (CFStringCompare(v60, @"sha1", 0))
  {
    if (CFStringCompare(v60, @"sha2-256", 0))
    {
      if (CFStringCompare(v60, @"sha2-384", 0))
      {
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleApplyMeasurements", (uint64_t)"digest type in the build manifest is not supported", v63, v64, v65, v66, v67, v74);
        uint64_t v6 = 0;
        CFAllocatorRef v10 = 0;
        uint64_t Code = 7;
        goto LABEL_39;
      }
      int v46 = 384;
    }
    else
    {
      int v46 = 256;
    }
  }
  else
  {
    int v46 = 1;
  }
  if (v62)
  {
LABEL_47:
    CFIndex MeasurementsWithTag = AMAuthInstallApCreateMeasurementsWithTag((void *)a1, (const __CFURL *)v8, ValueForKeyWithFormat, v46, 0, 0, (CFTypeRef *)&theDict);
    if (MeasurementsWithTag)
    {
      uint64_t Code = MeasurementsWithTag;
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleApplyMeasurements", (uint64_t)"failed to measure %@", v28, v29, v30, v31, v32, (char)theString1);
      goto LABEL_38;
    }
LABEL_25:
    uint64_t v48 = theDict;
    if (!theDict)
    {
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleApplyMeasurements", (uint64_t)"failed find measurementsDict for entry %@", v28, v29, v30, v31, v32, (char)v76);
      uint64_t v6 = 0;
      CFAllocatorRef v10 = 0;
      uint64_t Code = 8;
      goto LABEL_39;
    }
    goto LABEL_26;
  }
  uint64_t v48 = AMAuthInstallApMeasureBinary((uint64_t)v8, 0x100000, v46);
  CFMutableDictionaryRef theDict = v48;
  if (!v48)
  {
    uint64_t Code = CFErrorGetCode(0);
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleApplyMeasurements", (uint64_t)"failed to measure %@ with error: %@", v69, v70, v71, v72, v73, (char)theString1);
    uint64_t v6 = 0;
    CFAllocatorRef v10 = 0;
    goto LABEL_39;
  }
LABEL_26:
  int64_t Count = CFDictionaryGetCount(v48);
  if (Count < 1)
  {
    uint64_t Code = 0;
LABEL_38:
    uint64_t v6 = 0;
    CFAllocatorRef v10 = 0;
    goto LABEL_39;
  }
  size_t v50 = Count;
  uint64_t v6 = (const void **)calloc(8uLL, Count);
  CFAllocatorRef v10 = (const void **)calloc(8uLL, v50);
  CFDictionaryGetKeysAndValues(theDict, v6, v10);
  for (uint64_t i = 0; i != v50; ++i)
  {
    if (!a4
      || CFDictionaryContainsKey(a4, v6[i])
      || CFEqual((CFStringRef)v6[i], @"MemoryMap")
      || CFEqual((CFStringRef)v6[i], @"RawDataDigest"))
    {
      CFDictionarySetValue(*a5, v6[i], v10[i]);
    }
  }
  uint64_t Code = 0;
LABEL_39:
  SafeRelease(theDict);
  SafeFree(v6);
  SafeFree(v10);
  SafeRelease(0);
  return Code;
}

CFIndex _AMAuthInstallBundleSetObjectPropertyOverrides(void *a1, const void *a2, __CFDictionary *a3)
{
  CFMutableDictionaryRef v15 = a3;
  CFIndex result = 1;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        CFIndex result = a1[53];
        if (result)
        {
          CFIndex result = (CFIndex)CFDictionaryGetValue((CFDictionaryRef)result, @"ObjectRequestEntries");
          if (result)
          {
            CFIndex result = (CFIndex)CFDictionaryGetValue((CFDictionaryRef)result, a2);
            if (result)
            {
              CFDictionaryRef v6 = (const __CFDictionary *)result;
              int v7 = CFGetAllocator(a1);
              CFIndex result = AMAuthInstallSupportApplyDictionaryOverrides(v7, v6, &v15, 0);
              if (result)
              {
                char v14 = (char)a2;
                CFIndex v13 = result;
                AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleSetObjectPropertyOverrides", (uint64_t)"failed to set override object properties for %@", v8, v9, v10, v11, v12, v14);
                return v13;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AMAuthInstallBundleAllowLinks(uint64_t a1, int a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 432) = a2 == 0;
  return result;
}

uint64_t AMAuthInstallBundlePreferBuildManifest(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 434) = a2;
  return result;
}

uint64_t AMAuthInstallBundleSkipInstallation(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 435) = a2;
  return result;
}

uint64_t AMAuthInstallBundleInstallFile(unsigned char *a1, const __CFURL *a2, CFURLRef url)
{
  uint64_t SoftLink = 1;
  if (a2 && a1 && url)
  {
    if (a1[432])
    {
      char v18 = 0;
      uint64_t v7 = AMAuthInstallSupportFileURLExists(url, &v18);
      if (v7)
      {
        uint64_t SoftLink = v7;
        uint64_t v16 = "AMAuthInstallSupportFileURLExists failed.";
      }
      else
      {
        if (v18 != 1) {
          return 0;
        }
        CFAllocatorRef v13 = CFGetAllocator(a1);
        uint64_t v14 = AMAuthInstallSupportCopyFile((uint64_t)v13, url, a2);
        if (!v14) {
          return 0;
        }
        uint64_t SoftLink = v14;
        uint64_t v16 = "AMAuthInstallSupportCopyFile failed.";
      }
    }
    else
    {
      uint64_t SoftLink = AMAuthInstallPlatformCreateSoftLink(a2, url);
      if (!SoftLink) {
        return SoftLink;
      }
      uint64_t v16 = "AMAuthInstallPlatformCreateSoftLink failed.";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleInstallFile", (uint64_t)v16, v8, v9, v10, v11, v12, v17);
  }
  return SoftLink;
}

uint64_t AMAuthInstallBundleRequestTicketWithoutNonce(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 433) = a2;
  return result;
}

uint64_t _AMAuthInstallBundleGetValueForReservedKey(uint64_t a1, CFStringRef theString1, void *a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (a3 && theString1 && *(void *)(a1 + 16))
  {
    if (CFStringCompare(theString1, @"ApRawProductionMode", 0))
    {
      if (CFStringCompare(theString1, @"ApRawSecurityMode", 0))
      {
        if (CFStringCompare(theString1, @"ApInRomDFU", 0))
        {
          if (CFStringCompare(theString1, @"ApCurrentSecurityMode", 0))
          {
            if (CFStringCompare(theString1, @"ApCurrentProductionMode", 0))
            {
              if (CFStringCompare(theString1, @"ApRequiresImage4", 0))
              {
                if (CFStringCompare(theString1, @"ApDemotionPolicyOverride", 0)) {
                  return 8;
                }
                uint64_t v17 = *(void *)(*(void *)(a1 + 16) + 88);
                goto LABEL_22;
              }
              int IsImg4 = AMAuthInstallApIsImg4(a1, v7, v8, v9, v10, v11, v12, v13);
              uint64_t v16 = (uint64_t *)MEMORY[0x263EFFB40];
              if (!IsImg4) {
                uint64_t v16 = (uint64_t *)MEMORY[0x263EFFB38];
              }
LABEL_21:
              uint64_t v17 = *v16;
LABEL_22:
              uint64_t result = 0;
              *a3 = v17;
              return result;
            }
            uint64_t v14 = (uint64_t *)MEMORY[0x263EFFB40];
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 81);
          }
          else
          {
            uint64_t v14 = (uint64_t *)MEMORY[0x263EFFB40];
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 82);
          }
        }
        else
        {
          uint64_t v14 = (uint64_t *)MEMORY[0x263EFFB40];
          int v15 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 80);
        }
      }
      else
      {
        uint64_t v14 = (uint64_t *)MEMORY[0x263EFFB40];
        int v15 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 72);
      }
    }
    else
    {
      uint64_t v14 = (uint64_t *)MEMORY[0x263EFFB40];
      int v15 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 20);
    }
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = (uint64_t *)MEMORY[0x263EFFB38];
    }
    goto LABEL_21;
  }
  return result;
}

uint64_t _AMAuthInstallBundleGetDefaultResult(const __CFString *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
  {
    uint64_t v3 = MEMORY[0x263EFFB38];
    if ((const __CFString *)*MEMORY[0x263EFFB38] == a1) {
LABEL_13:
    }
      uint64_t v3 = MEMORY[0x263EFFB40];
  }
  else
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, &stru_26C809658)) {
        goto LABEL_13;
      }
    }
    else
    {
      CFTypeID v5 = CFGetTypeID(a1);
      if (v5 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
        if (!valuePtr) {
          goto LABEL_13;
        }
      }
      else
      {
        CFTypeID v6 = CFGetTypeID(a1);
        if (v6 == CFDataGetTypeID() && !CFDataGetLength((CFDataRef)a1)) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v3 = MEMORY[0x263EFFB38];
  }
  return *(void *)v3;
}

uint64_t _AMAuthInstallBundleGetValueForCondition(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t *a4)
{
  CFTypeRef cf = 0;
  uint64_t result = 1;
  if (a1 && a2 && a4)
  {
    if (_AMAuthInstallBundleGetValueForReservedKey(a1, a2, &cf))
    {
      uint64_t DefaultResult = _AMAuthInstallBundleGetDefaultResult(a3);
LABEL_16:
      uint64_t result = 0;
      *a4 = DefaultResult;
      return result;
    }
    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID())
    {
      uint64_t v10 = (uint64_t *)MEMORY[0x263EFFB40];
      if (cf != a3) {
        uint64_t v10 = (uint64_t *)MEMORY[0x263EFFB38];
      }
    }
    else
    {
      CFTypeID v11 = CFGetTypeID(cf);
      if (v11 != CFStringGetTypeID())
      {
        uint64_t DefaultResult = 0;
        goto LABEL_16;
      }
      if (CFStringCompare((CFStringRef)cf, a3, 0)) {
        uint64_t v10 = (uint64_t *)MEMORY[0x263EFFB38];
      }
      else {
        uint64_t v10 = (uint64_t *)MEMORY[0x263EFFB40];
      }
    }
    uint64_t DefaultResult = *v10;
    goto LABEL_16;
  }
  return result;
}

uint64_t _AMAuthInstallBundleGetValueForAction(uint64_t a1, uint64_t a2, const __CFString *cf, const __CFString **a4)
{
  CFStringRef v9 = 0;
  uint64_t result = 1;
  if (a1 && a2 && a4)
  {
    CFStringRef v7 = cf;
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFStringGetTypeID() && !_AMAuthInstallBundleGetValueForReservedKey(a1, v7, &v9)) {
      CFStringRef v7 = v9;
    }
    uint64_t result = 0;
    *a4 = v7;
  }
  return result;
}

uint64_t _AMAuthInstallBundleCheckCondition(uint64_t a1, CFDictionaryRef theDict, char *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (!a1 || !theDict)
  {
    CFStringRef v7 = 0;
    goto LABEL_16;
  }
  CFStringRef v7 = 0;
  if (a3)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    uint64_t v3 = (const void **)malloc(8 * Count);
    if (v3)
    {
      CFStringRef v7 = (const void **)malloc(8 * Count);
      if (v7)
      {
        CFDictionaryGetKeysAndValues(theDict, v3, v7);
        if (Count < 1)
        {
          char v11 = 1;
LABEL_12:
          uint64_t v4 = 0;
          if (Count) {
            char v14 = v11;
          }
          else {
            char v14 = 1;
          }
          *a3 = v14;
        }
        else
        {
          uint64_t v10 = 0;
          char v11 = 1;
          while (1)
          {
            CFStringRef v12 = (const __CFString *)v3[v10];
            CFStringRef v13 = (const __CFString *)v7[v10];
            CFBooleanRef BOOLean = 0;
            if (_AMAuthInstallBundleGetValueForCondition(a1, v12, v13, (uint64_t *)&BOOLean)) {
              break;
            }
            v11 &= CFBooleanGetValue(BOOLean);
            if (Count == ++v10) {
              goto LABEL_12;
            }
          }
          uint64_t v4 = 1;
        }
        goto LABEL_16;
      }
    }
    else
    {
      CFStringRef v7 = 0;
    }
    uint64_t v4 = 2;
  }
LABEL_16:
  SafeFree(v3);
  SafeFree(v7);
  return v4;
}

uint64_t _AMAuthInstallBundleApplyActions(uint64_t a1, CFDictionaryRef theDict, __CFDictionary *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (!a1 || !theDict)
  {
    CFStringRef v7 = 0;
    goto LABEL_11;
  }
  CFStringRef v7 = 0;
  if (a3)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    uint64_t v3 = (const void **)malloc(8 * Count);
    if (v3)
    {
      CFStringRef v7 = (const void **)malloc(8 * Count);
      if (v7)
      {
        CFDictionaryGetKeysAndValues(theDict, v3, v7);
        if (Count < 1)
        {
LABEL_10:
          uint64_t v4 = 0;
        }
        else
        {
          uint64_t v10 = 0;
          while (1)
          {
            char v11 = v3[v10];
            CFStringRef v12 = (const __CFString *)v7[v10];
            CFDictionaryRef value = 0;
            if (_AMAuthInstallBundleGetValueForAction(a1, (uint64_t)v11, v12, (const __CFString **)&value)) {
              break;
            }
            CFDictionarySetValue(a3, v11, value);
            if (Count == ++v10) {
              goto LABEL_10;
            }
          }
          uint64_t v4 = 1;
        }
        goto LABEL_11;
      }
    }
    else
    {
      CFStringRef v7 = 0;
    }
    uint64_t v4 = 2;
  }
LABEL_11:
  SafeFree(v3);
  SafeFree(v7);
  return v4;
}

uint64_t AMAuthInstallBundleProcessRulesWithEntryDict(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t result = 1;
  if (a1 && theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Info");
    if (Value)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(Value, @"RestoreRequestRules");
      if (result)
      {
        return AMAuthInstallBundleProcessRules(a1, (CFArrayRef)result, theDict);
      }
    }
    else
    {
      return 7;
    }
  }
  return result;
}

uint64_t AMAuthInstallBundleProcessRules(uint64_t a1, CFArrayRef theArray, __CFDictionary *a3)
{
  uint64_t v3 = 1;
  if (a1 && theArray && a3)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      uint64_t v10 = "failed to check conditions";
      while (1)
      {
        char v24 = 0;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
        if (!ValueAtIndex) {
          return 7;
        }
        CFDictionaryRef v12 = ValueAtIndex;
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"Conditions");
        if (Value)
        {
          uint64_t v14 = _AMAuthInstallBundleCheckCondition(a1, Value, &v24);
          if (v14)
          {
            uint64_t v3 = v14;
            goto LABEL_18;
          }
        }
        if (v24)
        {
          CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(v12, @"Actions");
          if (v20)
          {
            uint64_t v21 = _AMAuthInstallBundleApplyActions(a1, v20, a3);
            if (v21) {
              break;
            }
          }
        }
        if (v8 == ++v9) {
          return 0;
        }
      }
      uint64_t v3 = v21;
      uint64_t v10 = "failed to apply actions";
LABEL_18:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleProcessRules", (uint64_t)v10, v15, v16, v17, v18, v19, v23);
    }
  }
  return v3;
}

uint64_t AMAuthInstallBundleCopyPersonalizedURLsMatchingType(void *a1, const void *a2, const __CFString *a3, __CFString *a4, CFTypeRef *a5)
{
  CFDictionaryRef value = 0;
  CFTypeID v5 = 0;
  CFPropertyListRef v57 = 0;
  CFDictionaryRef theDict = 0;
  uint64_t v6 = 1;
  if (!a4 || !a1 || !a2)
  {
    uint64_t v10 = 0;
    CFMutableDictionaryRef v11 = 0;
    goto LABEL_19;
  }
  uint64_t v10 = 0;
  CFMutableDictionaryRef v11 = 0;
  if (a5)
  {
    uint64_t v13 = AMAuthInstallBundleCopyBuildIdentityForVariant((uint64_t)a1, a2, a3, (CFTypeRef *)&theDict);
    if (v13)
    {
      uint64_t v6 = v13;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType", (uint64_t)"%s: failed to copy build identity", v14, v15, v16, v17, v18, (char)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType");
    }
    else
    {
      uint64_t v19 = AMAuthInstallBundleCopyReceiptCreateIfNecessary((uint64_t)a1, (const __CFURL *)a2, &v57);
      if (!v19)
      {
        CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Manifest");
        if (!v25)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType", (uint64_t)"%s: failed to get manifest entries", v26, v27, v28, v29, v30, (char)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType");
          CFTypeID v5 = 0;
          uint64_t v10 = 0;
          CFMutableDictionaryRef v11 = 0;
          uint64_t v6 = 8;
          goto LABEL_19;
        }
        CFDictionaryRef v31 = v25;
        CFAllocatorRef v32 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v32, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!Mutable)
        {
          CFTypeID v5 = 0;
          uint64_t v10 = 0;
          CFMutableDictionaryRef v11 = 0;
          uint64_t v6 = 2;
          goto LABEL_19;
        }
        uint64_t v52 = a5;
        CFAllocatorRef v53 = (CFDictionaryRef **)a1;
        CFMutableDictionaryRef v54 = Mutable;
        CFIndex Count = CFDictionaryGetCount(v31);
        CFTypeID v5 = (const void **)malloc(8 * Count);
        uint64_t v10 = (const void **)malloc(8 * Count);
        CFDictionaryGetKeysAndValues(v31, v5, v10);
        if (Count < 1)
        {
LABEL_18:
          CFMutableDictionaryRef v11 = v54;
          uint64_t v6 = 0;
          *uint64_t v52 = CFRetain(v54);
          goto LABEL_19;
        }
        uint64_t v35 = 0;
        uint64_t v36 = (const void *)*MEMORY[0x263EFFB40];
        while (1)
        {
          CFStringRef v37 = (const __CFString *)v5[v35];
          CFDictionaryRef v38 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v10[v35], @"Info");
          if (!v38)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType", (uint64_t)"%s: failed to get info dict", v39, v40, v41, v42, v43, (char)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType");
            uint64_t v6 = 8;
            goto LABEL_22;
          }
          CFDictionaryRef v44 = v38;
          if (CFDictionaryGetValue(v38, a4) == v36
            || a4 == @"IsFirmwarePayload" && CFDictionaryGetValue(v44, @"IsSecondaryFirmwarePayload") == v36)
          {
            uint64_t v45 = AMAuthInstallBundleCopyURLForKey(v53, v37, a3, (const __CFURL *)a2, &value);
            if (v45)
            {
              uint64_t v6 = v45;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType", (uint64_t)"failed to copy url for %@", v46, v47, v48, v49, v50, (char)v37);
LABEL_22:
              CFMutableDictionaryRef v11 = v54;
              goto LABEL_19;
            }
            CFDictionarySetValue(v54, v37, value);
            SafeRelease(value);
            CFDictionaryRef value = 0;
          }
          if (Count == ++v35) {
            goto LABEL_18;
          }
        }
      }
      uint64_t v6 = v19;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType", (uint64_t)"%s: failed to copy receipt", v20, v21, v22, v23, v24, (char)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType");
    }
    CFTypeID v5 = 0;
    uint64_t v10 = 0;
    CFMutableDictionaryRef v11 = 0;
  }
LABEL_19:
  SafeRelease(theDict);
  SafeRelease(v57);
  SafeFree(v5);
  SafeFree(v10);
  SafeRelease(value);
  SafeRelease(v11);
  return v6;
}

uint64_t AMAuthInstallBundleCopyPersonalizedFirmwareURLs(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsFirmwarePayload", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizedFUDFirmwareURLs(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsFUDFirmware", a4);
}

const void **AMAuthInstallBundleCopyPersonalizediBootFirmwareURLs(void *a1, const void *a2, const __CFString *a3, CFMutableDictionaryRef *a4)
{
  CFMutableDictionaryRef v19 = 0;
  CFDictionaryRef theDict = 0;
  uint64_t v8 = AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsLoadedByiBoot", (CFTypeRef *)&v19);
  if (v8
    || (uint64_t v8 = AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsLoadedByiBootStage1", (CFTypeRef *)&theDict), v8))
  {
    uint64_t v14 = (const void **)v8;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPersonalizediBootFirmwareURLs", (uint64_t)"AMAuthInstallBundleCopyPersonalizedURLsMatchingType failed %d", v9, v10, v11, v12, v13, v8);
  }
  else
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    uint64_t v14 = (const void **)malloc(8 * Count);
    CFDictionaryGetKeysAndValues(theDict, v14, 0);
    if (Count >= 1)
    {
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = *v16++;
        CFDictionaryRemoveValue(v19, v17);
        --Count;
      }
      while (Count);
      goto LABEL_9;
    }
    if (v14)
    {
LABEL_9:
      free(v14);
      uint64_t v14 = 0;
    }
  }
  *a4 = v19;
  return v14;
}

uint64_t AMAuthInstallBundleCopyPersonalizediBootStage1FirmwareURLs(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsLoadedByiBootStage1", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizedEarlyAccessFirmwareURLs(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsEarlyAccessFirmware", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizediBootEANFirmwareURLs(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsiBootEANFirmware", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizediBootNonEssentialFirmwareURLs(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, @"IsiBootNonEssentialFirmware", a4);
}

void _AMAuthInstallBundleCopyFirmwareData(const void *a1, CFTypeRef cf, __CFDictionary *a3)
{
  CFDictionaryRef value = 0;
  if (AMAuthInstallSupportCreateDataFromFileURL((const __CFAllocator *)*MEMORY[0x263EFFB08], (CFTypeRef *)&value, cf))
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyFirmwareData", (uint64_t)"failed to create data for %@", v5, v6, v7, v8, v9, (char)a1);
  }
  else
  {
    CFDictionarySetValue(a3, a1, value);
    SafeRelease(value);
  }
}

uint64_t AMAuthInstallBundleCopyPersonalizedImagesMatchingType(void *a1, const void *a2, const __CFString *a3, __CFString *a4, CFTypeRef *a5)
{
  CFMutableDictionaryRef Mutable = 0;
  CFDictionaryRef theDict = 0;
  uint64_t v6 = 1;
  if (a1 && a2 && a5)
  {
    uint64_t v9 = AMAuthInstallBundleCopyPersonalizedURLsMatchingType(a1, a2, a3, a4, (CFTypeRef *)&theDict);
    if (v9)
    {
      uint64_t v6 = v9;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleCopyPersonalizedImagesMatchingType", (uint64_t)"failed to copy urls for firmware images", v10, v11, v12, v13, v14, v18);
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFAllocatorRef v15 = CFGetAllocator(a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_AMAuthInstallBundleCopyFirmwareData, Mutable);
        CFIndex Count = CFDictionaryGetCount(theDict);
        if (Count == CFDictionaryGetCount(Mutable))
        {
          uint64_t v6 = 0;
          *a5 = CFRetain(Mutable);
        }
        else
        {
          uint64_t v6 = 14;
        }
      }
      else
      {
        uint64_t v6 = 2;
      }
    }
  }
  SafeRelease(theDict);
  SafeRelease(Mutable);
  return v6;
}

uint64_t AMAuthInstallBundleCopyPersonalizedFirmwareImages(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedImagesMatchingType(a1, a2, a3, @"IsFirmwarePayload", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizedFUDFirmwareImages(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedImagesMatchingType(a1, a2, a3, @"IsFUDFirmware", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizediBootFirmwareImages(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedImagesMatchingType(a1, a2, a3, @"IsLoadedByiBoot", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizedEarlyAccessFirmwareImages(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedImagesMatchingType(a1, a2, a3, @"IsEarlyAccessFirmware", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizediBootEANFirmwareImages(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedImagesMatchingType(a1, a2, a3, @"IsiBootEANFirmware", a4);
}

uint64_t AMAuthInstallBundleCopyPersonalizediBootNonEssentialFirmwareImages(void *a1, const void *a2, const __CFString *a3, CFTypeRef *a4)
{
  return AMAuthInstallBundleCopyPersonalizedImagesMatchingType(a1, a2, a3, @"IsiBootNonEssentialFirmware", a4);
}

uint64_t AMAuthInstallBundleFDRSupported(uint64_t a1, const void *a2, const __CFString *a3, char *a4)
{
  CFTypeRef v22 = 0;
  if (a1)
  {
    uint64_t v5 = 1;
    if (a4)
    {
      if (a3)
      {
        if (a2)
        {
          uint64_t v7 = *(void *)(a1 + 128);
          if (v7)
          {
            CFDictionaryRef v8 = *(const __CFDictionary **)(v7 + 32);
            if (!v8)
            {
              uint64_t v9 = AMAuthInstallBundleCopyBuildIdentityForVariant(a1, a2, a3, &v22);
              if (v9)
              {
                uint64_t v5 = v9;
                goto LABEL_17;
              }
              CFDictionaryRef v8 = *(const __CFDictionary **)(*(void *)(a1 + 128) + 32);
            }
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v8, @"Info");
            if (Value && (CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue(Value, @"FDRSupport")) != 0)
            {
              CFBooleanRef v12 = v11;
              CFTypeID v13 = CFGetTypeID(v11);
              if (v13 == CFBooleanGetTypeID() && CFBooleanGetValue(v12))
              {
                AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleFDRSupported", (uint64_t)"FDR is supported for this device", v14, v15, v16, v17, v18, v21);
                char v19 = 1;
              }
              else
              {
                char v19 = 0;
              }
              uint64_t v5 = 0;
              *a4 = v19;
            }
            else
            {
              uint64_t v5 = 8;
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 1;
  }
LABEL_17:
  SafeRelease(v22);
  return v5;
}

uint64_t AMAuthInstallBundleFDRBasebandSupported(uint64_t a1, const void *a2, const __CFString *a3, char *a4)
{
  char v15 = 0;
  CFTypeRef v14 = 0;
  int v13 = 0;
  if (!a1)
  {
    uint64_t v5 = 1;
    goto LABEL_16;
  }
  uint64_t v5 = 1;
  if (a4)
  {
    if (a3)
    {
      if (a2)
      {
        uint64_t v7 = *(void *)(a1 + 128);
        if (v7)
        {
          CFDictionaryRef v8 = *(const __CFDictionary **)(v7 + 32);
          if (!v8)
          {
            uint64_t v9 = AMAuthInstallBundleCopyBuildIdentityForVariant(a1, a2, a3, &v14);
            if (v9) {
              goto LABEL_18;
            }
            CFDictionaryRef v8 = *(const __CFDictionary **)(*(void *)(a1 + 128) + 32);
            if (!v8)
            {
              uint64_t v5 = 14;
              goto LABEL_16;
            }
          }
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v8, @"BbChipID");
          if (!Value)
          {
            char v11 = 0;
            goto LABEL_14;
          }
          if (!_CFStringToUInt32(Value, &v13))
          {
            uint64_t v5 = 3;
            goto LABEL_16;
          }
          uint64_t v9 = AMAuthInstallBasebandSupportsFDR(v13, &v15);
          if (!v9)
          {
            char v11 = v15;
LABEL_14:
            uint64_t v5 = 0;
            *a4 = v11;
            goto LABEL_16;
          }
LABEL_18:
          uint64_t v5 = v9;
        }
      }
    }
  }
LABEL_16:
  SafeRelease(v14);
  return v5;
}

__CFString *AMAuthInstallBundleGetManifestPath()
{
  return @"amai";
}

CFURLRef AMAuthInstallBundleCreateURLForKeyEntryInBuildIdentity(CFDictionaryRef **a1, const __CFURL *a2, const __CFDictionary *a3, const __CFString *a4, CFBooleanRef BOOLean)
{
  if (!a1 || !a3) {
    goto LABEL_23;
  }
  CFStringRef v6 = a4;
  if (!a4)
  {
    AMSupportCreateErrorInternal();
    CFURLRef v17 = 0;
LABEL_24:
    CFStringRef v15 = 0;
    goto LABEL_17;
  }
  if (!a2)
  {
LABEL_23:
    AMSupportCreateErrorInternal();
    CFURLRef v17 = 0;
    CFStringRef v6 = 0;
    goto LABEL_24;
  }
  if (!CFBooleanGetValue(BOOLean)
    || CFStringHasPrefix(v6, @"RecoveryOS")
    || (CFStringRef v15 = CFStringCreateWithFormat(0, 0, @"%@%@", @"RecoveryOS", v6)) == 0)
  {
    CFRetain(v6);
    CFStringRef v15 = v6;
  }
  if (BOOLean) {
    CFBooleanGetValue(BOOLean);
  }
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleCreateURLForKeyEntryInBuildIdentity", (uint64_t)"%s: isRecovery = %d, entry = %@", v10, v11, v12, v13, v14, (char)"AMAuthInstallBundleCreateURLForKeyEntryInBuildIdentity");
  CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(*a1[16], v15);
  if (Value)
  {
    CFURLRef v17 = Value;
    CFRetain(Value);
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallBundleCreateURLForKeyEntryInBuildIdentity", (uint64_t)"using override: %@ = %@", v18, v19, v20, v21, v22, (char)v15);
    CFStringRef v6 = 0;
  }
  else
  {
    if (CFBooleanGetValue(BOOLean))
    {
      CFRelease(v15);
      CFAllocatorRef v23 = CFGetAllocator(a1);
      CFStringRef v15 = AMAuthInstallICreateTranslationOfRecoveryEnteryName(v23, v6);
    }
    CFAllocatorRef v24 = CFGetAllocator(a1);
    AMAuthInstallSupportGetValueForKeyPathInDict(v24, a3, v15, v25, v26, v27, v28, v29);
    CFAllocatorRef v30 = CFGetAllocator(a1);
    CFStringRef v6 = CFStringCreateWithFormat(v30, 0, @"%@.%@.%@.%@", @"Manifest", v15, @"Info", @"Path");
    if (v6
      && (CFAllocatorRef v31 = CFGetAllocator(a1),
          (CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v31, a3, v6, v32, v33, v34, v35, v36)) != 0))
    {
      CFStringRef v38 = (const __CFString *)ValueForKeyPathInDict;
      CFAllocatorRef v39 = CFGetAllocator(a1);
      CFURLRef v17 = CFURLCreateCopyAppendingPathComponent(v39, a2, v38, 0);
    }
    else
    {
      AMSupportCreateErrorInternal();
      CFURLRef v17 = 0;
    }
  }
LABEL_17:
  SafeRelease(v6);
  SafeRelease(v15);
  return v17;
}

uint64_t AMAuthInstallGetFirstVariantInBundle(void *cf, const void *a2, CFTypeRef *a3)
{
  CFTypeRef cfa = 0;
  CFStringRef v3 = @"ApBoardID";
  CFStringRef v62 = @"ApChipID";
  CFStringRef key = @"ApSecurityDomain";
  if (!cf)
  {
    CFArrayRef v5 = 0;
    uint64_t v6 = 1;
    goto LABEL_33;
  }
  CFArrayRef v5 = 0;
  uint64_t v6 = 1;
  if (a2)
  {
    uint64_t v8 = cf[2];
    if (v8)
    {
      int v11 = *(_DWORD *)(v8 + 8);
      int v10 = *(_DWORD *)(v8 + 12);
      int v60 = *(_DWORD *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 144);
      if (!v12) {
        goto LABEL_8;
      }
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      char v57 = v12;
      CFStringRef v62 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@,%@");
      if (v62)
      {
        uint64_t v58 = *(void *)(cf[2] + 144);
        CFStringRef v3 = CFStringCreateWithFormat(v13, 0, @"%@,%@");
        if (v3)
        {
          uint64_t v56 = *(void *)(cf[2] + 144);
          CFStringRef key = CFStringCreateWithFormat(v13, 0, @"%@,%@");
          if (key)
          {
LABEL_8:
            CFAllocatorRef v29 = CFGetAllocator(cf);
            uint64_t v30 = AMAuthInstallBundleCopyPublishedVariantsArray(v29, a2, &cfa);
            if (v30)
            {
              uint64_t v6 = v30;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallGetFirstVariantInBundle", (uint64_t)"AMAuthInstallBundleCopyPublishedVariantsArray failed", v31, v32, v33, v34, v35, v56);
              CFArrayRef v5 = (const __CFArray *)cfa;
              goto LABEL_33;
            }
            CFArrayRef v5 = (const __CFArray *)cfa;
            if (cfa)
            {
              CFTypeID v36 = CFGetTypeID(cfa);
              if (v36 == CFArrayGetTypeID())
              {
                CFDictionaryRef v59 = a3;
                CFIndex Count = CFArrayGetCount(v5);
                if (!*(unsigned char *)(cf[2] + 96))
                {
                  uint64_t v44 = cf[6];
                  if (v44)
                  {
                    int v43 = *(_DWORD *)(v44 + 4);
LABEL_15:
                    int v61 = v43;
                    if (Count < 1)
                    {
LABEL_32:
                      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallGetFirstVariantInBundle", (uint64_t)"no variant published for this device (chipID=0x%08X boardID=0x%X secDom=%d bbChipId=0x%08X) in build manifest", v37, v38, v39, v40, v41, *(_DWORD *)(cf[2] + 8));
                      uint64_t v6 = 8;
                    }
                    else
                    {
                      CFIndex v45 = 0;
                      while (1)
                      {
                        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v45);
                        if (ValueAtIndex)
                        {
                          CFDictionaryRef v47 = ValueAtIndex;
                          CFTypeID v48 = CFGetTypeID(ValueAtIndex);
                          if (v48 == CFDictionaryGetTypeID()
                            && AMAuthInstallSupportCompareStringToInt32(v47, v3, v10)
                            && AMAuthInstallSupportCompareStringToInt32(v47, v62, v11)
                            && (!CFDictionaryGetValue(v47, key)
                             || AMAuthInstallSupportCompareStringToInt32(v47, key, v60))
                            && (!v6
                             || AMAuthInstallSupportCompareStringToInt32(v47, @"BbChipID", v61)))
                          {
                            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v47, @"Info");
                            if (Value)
                            {
                              CFDictionaryRef v50 = Value;
                              CFTypeID v51 = CFGetTypeID(Value);
                              if (v51 == CFDictionaryGetTypeID())
                              {
                                uint64_t v52 = *((unsigned char *)cf + 56) ? @"RestoreBehavior" : @"Variant";
                                CFAllocatorRef v53 = CFDictionaryGetValue(v50, v52);
                                if (v53) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                        if (Count == ++v45) {
                          goto LABEL_32;
                        }
                      }
                      uint64_t v6 = 0;
                      *CFDictionaryRef v59 = SafeRetain(v53);
                    }
                    goto LABEL_33;
                  }
                  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallGetFirstVariantInBundle", (uint64_t)"No baseband chipid reported. Will match Build Identity based on ap chipid, boardid, and secdomain only.", v37, v38, v39, v40, v41, v56);
                }
                LODWORD(v6) = 0;
                int v43 = -1;
                goto LABEL_15;
              }
              uint64_t v55 = "publishedVariants is not a CFArray";
            }
            else
            {
              uint64_t v55 = "AMAuthInstallBundleCopyPublishedVariantsArray returned NULL";
            }
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallGetFirstVariantInBundle", (uint64_t)v55, v31, v32, v33, v34, v35, v56);
            uint64_t v6 = 7;
            goto LABEL_33;
          }
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallGetFirstVariantInBundle", (uint64_t)"failed secdomKey allocation", v24, v25, v26, v27, v28, v56);
          CFArrayRef v5 = 0;
          CFStringRef key = 0;
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallGetFirstVariantInBundle", (uint64_t)"failed boardKey allocation", v19, v20, v21, v22, v23, v58);
          CFArrayRef v5 = 0;
        }
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallGetFirstVariantInBundle", (uint64_t)"failed chipKey allocation", v14, v15, v16, v17, v18, v57);
        CFArrayRef v5 = 0;
        CFStringRef v62 = 0;
      }
      uint64_t v6 = 99;
    }
  }
LABEL_33:
  SafeRelease(v5);
  SafeRelease(v3);
  SafeRelease(v62);
  SafeRelease(key);
  return v6;
}

CFIndex AMAuthInstallBundleGetBuildIdentityVersionData(const void *a1, const void *a2, const __CFString *a3, CFDataRef *a4)
{
  CFArrayRef v4 = 0;
  uint64_t v75 = *MEMORY[0x263EF8340];
  CFErrorRef error = 0;
  CFTypeRef cf = 0;
  *(_OWORD *)values = xmmword_2642BA7F0;
  char v74 = @"BuildTrain";
  CFIndex Code = 1;
  if (a1 && a2 && a3)
  {
    CFStringRef v9 = 0;
    CFMutableDictionaryRef Mutable = 0;
    if (!a4) {
      goto LABEL_18;
    }
    CFArrayRef v4 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)values, 3, MEMORY[0x263EFFF70]);
    if (v4)
    {
      uint64_t v12 = AMAuthInstallBundleCopyBuildIdentityForVariant((uint64_t)a1, a2, a3, &cf);
      if (!v12)
      {
        CFAllocatorRef v18 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (Mutable)
        {
          if (CFArrayGetCount(v4) >= 1)
          {
            CFIndex v24 = 0;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v24);
              if (!ValueAtIndex)
              {
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleGetBuildIdentityVersionData", (uint64_t)"failed getting the field key %d.", v26, v27, v28, v29, v30, v24);
                CFStringRef v9 = 0;
                goto LABEL_29;
              }
              uint64_t v31 = ValueAtIndex;
              CFAllocatorRef v32 = CFGetAllocator(a1);
              char v70 = (char)v31;
              CFStringRef v9 = CFStringCreateWithFormat(v32, 0, @"Info.%@");
              if (!v9)
              {
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleGetBuildIdentityVersionData", (uint64_t)"failed creating the field key %@ Path.", v33, v34, v35, v36, v37, (char)v31);
                goto LABEL_29;
              }
              CFAllocatorRef v38 = CFGetAllocator(a1);
              CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(v38, (const __CFDictionary *)cf, v9, v39, v40, v41, v42, v43);
              if (!ValueForKeyPathInDict) {
                break;
              }
              CFDictionaryAddValue(Mutable, v31, ValueForKeyPathInDict);
              CFRelease(v9);
              if (++v24 >= CFArrayGetCount(v4)) {
                goto LABEL_14;
              }
            }
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleGetBuildIdentityVersionData", (uint64_t)"Failed to get field key path %@ from the buildIdentity", v45, v46, v47, v48, v49, (char)v31);
            goto LABEL_31;
          }
LABEL_14:
          CFAllocatorRef v50 = CFGetAllocator(a1);
          CFDictionaryRef v56 = AMAuthInstallSupportGetValueForKeyPathInDict(v50, (const __CFDictionary *)cf, @"ProductMarketingVersion", v51, v52, v53, v54, v55);
          if (!v56)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleGetBuildIdentityVersionData", (uint64_t)"Failed to get kAMAuthInstallBuildIdentityProductMarketingVersion path from the buildIdentity", v57, v58, v59, v60, v61, v70);
            CFStringRef v9 = 0;
LABEL_31:
            CFIndex Code = 4;
            goto LABEL_18;
          }
          CFDictionaryAddValue(Mutable, @"ProductVersion", v56);
          CFAllocatorRef v62 = CFGetAllocator(a1);
          CFDataRef v63 = CFPropertyListCreateData(v62, Mutable, kCFPropertyListXMLFormat_v1_0, 0, &error);
          *a4 = v63;
          if (!v63)
          {
            CFIndex Code = CFErrorGetCode(error);
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleGetBuildIdentityVersionData", (uint64_t)"Failed transformatting the property List to CFData obj %@", v65, v66, v67, v68, v69, (char)error);
            goto LABEL_17;
          }
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleGetBuildIdentityVersionData", (uint64_t)"Failed creating dictionary for the version data.", v19, v20, v21, v22, v23, v70);
        }
        CFIndex Code = 0;
LABEL_17:
        CFStringRef v9 = 0;
        goto LABEL_18;
      }
      CFIndex Code = v12;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleGetBuildIdentityVersionData", (uint64_t)"AMAuthInstallBundleCopyBuildIdentityForVariant failed.", v13, v14, v15, v16, v17, v70);
      CFStringRef v9 = 0;
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFStringRef v9 = 0;
      CFMutableDictionaryRef Mutable = 0;
LABEL_29:
      CFIndex Code = 2;
    }
  }
  else
  {
    CFStringRef v9 = 0;
    CFMutableDictionaryRef Mutable = 0;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Code;
}

uint64_t AMAuthInstallBundleAppendRecoveryOSiBootFirmwareEntriesToAssetArray(const __CFDictionary *a1, const __CFArray *a2)
{
  if (a1)
  {
    CFIndex Count = CFDictionaryGetCount(a1);
    CFArrayRef v5 = (const void **)malloc(8 * Count);
    uint64_t v6 = (const void **)malloc(8 * Count);
    CFDictionaryGetKeysAndValues(a1, v5, v6);
    if (Count < 1)
    {
LABEL_11:
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      while (1)
      {
        uint64_t v8 = v5[v7];
        CFStringRef v9 = v6[v7];
        CFTypeID v10 = CFGetTypeID(v9);
        if (v10 != CFDictionaryGetTypeID()) {
          break;
        }
        CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)v9, @"Info");
        if (Value
          && _CFDictionaryGetBoolean(Value, @"IsLoadedByiBoot", 0, v17, v18, v19, v20, v21))
        {
          CFStringRef v22 = CFStringCreateWithFormat(alloc, 0, @"RecoveryOS%@", v8);
          AMAuthInstallLog(6, (uint64_t)"AMAuthInstallBundleAppendRecoveryOSiBootFirmwareEntriesToAssetArray", (uint64_t)"Found %@: %@", v23, v24, v25, v26, v27, (char)@"IsLoadedByiBoot");
          v32.CFIndex length = CFArrayGetCount(a2);
          v32.CFIndex location = 0;
          if (!CFArrayContainsValue(a2, v32, v22)) {
            CFArrayAppendValue(a2, v22);
          }
          CFRelease(v22);
        }
        if (Count == ++v7) {
          goto LABEL_11;
        }
      }
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBundleAppendRecoveryOSiBootFirmwareEntriesToAssetArray", (uint64_t)"Unexpected manifest entry structure - should be dictionary.\n", v11, v12, v13, v14, v15, v30);
      uint64_t v28 = 99;
    }
  }
  else
  {
    CFArrayRef v5 = 0;
    uint64_t v6 = 0;
    uint64_t v28 = 7;
  }
  SafeFree(v5);
  SafeFree(v6);
  SafeRelease(0);
  return v28;
}

uint64_t _AMAuthInstallBundleCopyEntryURLs(CFDictionaryRef **a1, const void *a2, CFDictionaryRef theDict, const void *a4, const void *a5, int a6, int a7, void *a8)
{
  CFStringRef v8 = 0;
  CFURLRef anURL = 0;
  CFDictionaryRef value = 0;
  CFStringRef filePath = 0;
  CFStringRef v82 = 0;
  CFDictionaryRef v80 = 0;
  uint64_t v9 = 1;
  if (!a1 || !a2 || !a4 || !a5)
  {
    CFURLRef v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_28;
  }
  CFURLRef v14 = 0;
  uint64_t v15 = 0;
  if (a8)
  {
    uint64_t v17 = a1[16];
    if (!v17 || !*v17) {
      goto LABEL_35;
    }
    CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Info");
    if (v20)
    {
      uint64_t v79 = a8;
      CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(v20, @"Path");
      if (v26)
      {
        CFStringRef v32 = v26;
        if (a7)
        {
          CFAllocatorRef v33 = CFGetAllocator(a1);
          CFStringRef v34 = CFStringCreateWithFormat(v33, 0, @"RecoveryOS%@", a2);
          uint64_t v35 = (void *)CFDictionaryGetValue(*a1[16], v34);
          SafeRelease(v34);
        }
        else
        {
          uint64_t v35 = (void *)CFDictionaryGetValue(*a1[16], a2);
        }
        CFDictionaryRef value = v35;
        if (v35)
        {
          CFRetain(v35);
          AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallBundleCopyEntryURLs", (uint64_t)"using override: %@ = %@", v36, v37, v38, v39, v40, (char)a2);
        }
        else
        {
          CFAllocatorRef v41 = CFGetAllocator(a1);
          uint64_t v42 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v41, a4, v32, 0, (CFURLRef *)&value);
          if (v42) {
            goto LABEL_30;
          }
        }
        CFAllocatorRef v43 = CFGetAllocator(a1);
        uint64_t v44 = AMAuthInstallSupportCreatePrependedFilePath(v43, (uint64_t)a2, v32, &v82);
        if (v44)
        {
          uint64_t v9 = v44;
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyEntryURLs", (uint64_t)"could not prepend entryName to destination path : %@", v45, v46, v47, v48, v49, (char)v32);
          goto LABEL_35;
        }
        CFAllocatorRef v50 = CFGetAllocator(a1);
        uint64_t v42 = AMAuthInstallPlatformCopyURLWithAppendedComponent(v50, a5, v82, 0, &anURL);
        if (!v42)
        {
          if (!a6)
          {
            CFStringRef v8 = 0;
            CFURLRef v14 = 0;
            goto LABEL_25;
          }
          CFStringRef v8 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
          if (!v8)
          {
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyEntryURLs", (uint64_t)"could not copy path from %@", v55, v56, v57, v58, v59, (char)anURL);
            CFURLRef v14 = 0;
            goto LABEL_40;
          }
          uint64_t PersonalizedPathWithKey = AMAuthInstallBundleCreatePersonalizedPathWithKey(a1, 0, v8, (const __CFURL **)&filePath, v56, v57, v58, v59);
          if (!PersonalizedPathWithKey)
          {
            if (!filePath)
            {
              CFURLRef v14 = 0;
              uint64_t v15 = 0;
              uint64_t v9 = 14;
              goto LABEL_28;
            }
            CFAllocatorRef v61 = CFGetAllocator(a1);
            CFURLRef v14 = CFURLCreateWithFileSystemPath(v61, filePath, kCFURLPOSIXPathStyle, 0);
            if (v14)
            {
              SafeRelease(anURL);
              CFURLRef anURL = (CFURLRef)CFRetain(v14);
LABEL_25:
              uint64_t v62 = AMAuthInstallBundleCreatePersonalizedPathWithKey(a1, 0, v32, (const __CFURL **)&v80, v51, v52, v53, v54);
              if (!v62)
              {
                CFAllocatorRef v63 = CFGetAllocator(a1);
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v63, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                uint64_t v15 = Mutable;
                if (Mutable)
                {
                  CFDictionarySetValue(Mutable, @"SourceURL", value);
                  CFDictionarySetValue(v15, @"DestURL", anURL);
                  CFDictionarySetValue(v15, @"RelativeSrcPath", v32);
                  CFDictionarySetValue(v15, @"RelativeDestPath", v80);
                  CFTypeRef v65 = CFRetain(v15);
                  *uint64_t v79 = v65;
                  uint64_t v9 = 2 * (v65 == 0);
                  goto LABEL_28;
                }
LABEL_41:
                uint64_t v9 = 2;
                goto LABEL_28;
              }
              uint64_t v9 = v62;
LABEL_37:
              uint64_t v15 = 0;
              goto LABEL_28;
            }
LABEL_40:
            uint64_t v15 = 0;
            goto LABEL_41;
          }
          uint64_t v9 = PersonalizedPathWithKey;
          char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString(0, PersonalizedPathWithKey);
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyEntryURLs", (uint64_t)"failed to construct working URL: %@", v74, v75, v76, v77, v78, LocalizedStatusString);
LABEL_36:
          CFURLRef v14 = 0;
          goto LABEL_37;
        }
LABEL_30:
        uint64_t v9 = v42;
        char v67 = AMAuthInstallGetLocalizedStatusString(0, v42);
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyEntryURLs", (uint64_t)"failed to construct working URL: %@", v68, v69, v70, v71, v72, v67);
LABEL_35:
        CFStringRef v8 = 0;
        goto LABEL_36;
      }
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyEntryURLs", (uint64_t)"build manifest lacks relative path for \"%@\"", v27, v28, v29, v30, v31, (char)a2);
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundleCopyEntryURLs", (uint64_t)"build manifest lacks info for \"%@\"", v21, v22, v23, v24, v25, (char)a2);
    }
    CFStringRef v8 = 0;
    CFURLRef v14 = 0;
    uint64_t v15 = 0;
    uint64_t v9 = 7;
  }
LABEL_28:
  SafeRelease(value);
  SafeRelease(anURL);
  SafeRelease(v8);
  SafeRelease(filePath);
  SafeRelease(v14);
  SafeRelease(v80);
  SafeRelease(v15);
  SafeRelease(v82);
  return v9;
}

CFStringRef _AMAuthInstallBundleComponentCreateCopyByDeletingLastComponent(const __CFAllocator *a1, CFStringRef theString)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!CFStringGetCString(theString, buffer, 256, 0x8000100u)) {
    return 0;
  }
  size_t v3 = strlen(buffer);
  if (v3)
  {
    do
    {
      size_t v4 = v3 - 1;
      BOOL v5 = buffer[v3 - 1] == 47 || v3 == 1;
      --v3;
    }
    while (!v5);
  }
  else
  {
    size_t v4 = 0;
  }
  buffer[v4] = 0;
  return CFStringCreateWithCString(a1, buffer, 0x8000100u);
}

uint64_t _AMAuthInstallBundlePopulateManifestProperties(void *a1, CFDictionaryRef theDict, __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v31 = "amai is NULL";
    goto LABEL_30;
  }
  uint64_t v9 = a1[2];
  if (v9)
  {
    if (theDict)
    {
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v53 = 0u;
      uint64_t v68 = 0;
      long long v52 = 0u;
      long long v51 = 0u;
      long long v50 = 0u;
      long long v49 = 0u;
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      uint64_t v36 = @"UniqueBuildID";
      if (*(void *)(v9 + 120) || *(void *)(v9 + 128))
      {
        *(void *)&long long v37 = @"ProductMarketingVersion";
        unsigned int v12 = 2;
      }
      else
      {
        unsigned int v12 = 1;
      }
      uint64_t v13 = (const void **)&v36;
      *(&v36 + v12) = @"Ap,InternalUseOnlyUnit";
      *(&v36 + v12 + 1) = @"Ap,EngineeringUseOnlyUnit";
      *(&v36 + v12 + 2) = @"Ap,InternalUseOnlySW";
      *(&v36 + v12 + 3) = @"Ap,RestoreSecurityOverrides0";
      *(&v36 + (v12 | 4)) = @"Ap,RestoreSecurityOverrides1";
      *(&v36 + v12 + 5) = @"Ap,RestoreSecurityOverrides2";
      *(&v36 + v12 + 6) = @"Ap,RestoreSecurityOverrides3";
      *(&v36 + v12 + 7) = @"Ap,OSLongVersion";
      *(&v36 + (v12 | 8)) = @"x86,OSLongVersion";
      *(&v36 + v12 + 9) = @"PearlCertificationRootPub";
      *(&v36 + v12 + 10) = @"Ap,OSEnvironment";
      *(&v36 + v12 + 11) = @"AllowNeRDBoot";
      *(&v36 + v12 + 13) = @"Ap,CurrentOSSecurityVersion";
      *(&v36 + v12 + 14) = @"Ap,MinimumOSSecurityVersion";
      *(&v36 + v12 + 15) = @"Ap,EphemeralDataMode";
      *(&v36 + (v12 | 0x10)) = @"Ap,EnableGroundhog";
      *(&v36 + v12 + 17) = @"Ap,TargetType";
      *(&v36 + v12 + 18) = @"Ap,ProductType";
      *(&v36 + v12 + 19) = @"Ap,SoftwareUpdateDeviceID";
      *(&v36 + (v12 | 0x14)) = @"Ap,SDKPlatform";
      *(&v36 + v12 + 21) = @"Ap,Target";
      *(&v36 + v12 + 22) = @"Ap,OSReleaseType";
      *(&v36 + v12 + 23) = @"Ap,UniqueTagList";
      *(&v36 + (v12 | 0x18)) = @"Ap,ProductMarketingVersion";
      uint64_t v14 = v12 + 25;
      *(&v36 + (v12 | 0xC)) = @"NeRDEpoch";
      do
      {
        uint64_t v15 = *v13;
        CFDictionaryRef Value = CFDictionaryGetValue(theDict, *v13);
        if (Value)
        {
          CFDictionaryAddValue(a3, v15, Value);
          AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallBundlePopulateManifestProperties", (uint64_t)"Copying manifest property %@ into request", v17, v18, v19, v20, v21, (char)v15);
        }
        ++v13;
        --v14;
      }
      while (v14);
      uint64_t v22 = CFDictionaryGetValue(theDict, @"Info");
      if (_CFDictionaryGetBoolean(v22, @"RequiresUIDMode", 0, v23, v24, v25, v26, v27))
      {
        if (*(void *)(a1[2] + 168)) {
          uint64_t v28 = *(const void **)(a1[2] + 168);
        }
        else {
          uint64_t v28 = (const void *)*MEMORY[0x263EFFB38];
        }
        CFDictionarySetValue(a3, @"UID_MODE", v28);
      }
      if (!CFDictionaryContainsKey(theDict, @"NeRDEpoch")) {
        goto LABEL_19;
      }
      CFAllocatorRef v29 = CFGetAllocator(a1);
      CFMutableDataRef Mutable = CFDataCreateMutable(v29, 0);
      if (Mutable)
      {
        CFDictionarySetValue(a3, @"PermitNeRDPivot", Mutable);
LABEL_19:
        uint64_t v31 = "Finished copying manifest entitlements.";
        uint64_t v32 = 6;
LABEL_20:
        AMAuthInstallLog(v32, (uint64_t)"_AMAuthInstallBundlePopulateManifestProperties", (uint64_t)v31, a4, a5, a6, a7, a8, v35);
        goto LABEL_21;
      }
      uint64_t v31 = "zeroData is NULL";
LABEL_30:
      uint64_t v32 = 3;
      goto LABEL_20;
    }
    CFStringRef v34 = "buildIdentity is NULL";
  }
  else
  {
    CFStringRef v34 = "amai->apParameters is NULL";
  }
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallBundlePopulateManifestProperties", (uint64_t)v34, a4, a5, a6, a7, a8, v35);
LABEL_21:

  return AMSupportSafeRelease();
}

uint64_t AMAuthInstallCryptoCreateDigestForDataType(const __CFAllocator *a1, const __CFData *a2, CFTypeRef *a3, int a4)
{
  switch(a4)
  {
    case 384:
      return AMAuthInstallCryptoCreateDigestForData_SHA384(a1, a2, a3);
    case 256:
      return AMAuthInstallCryptoCreateDigestForData_SHA256(a1, a2, a3);
    case 1:
      return AMAuthInstallCryptoCreateDigestForData(a1, a2, a3);
  }
  return 1;
}

uint64_t AMAuthInstallCryptoCreateDigestForData(const __CFAllocator *a1, const __CFData *a2, CFTypeRef *a3)
{
  memset(&v12, 0, sizeof(v12));
  CFMutableDataRef Mutable = CFDataCreateMutable(a1, 20);
  uint64_t v6 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, 20);
    CC_SHA1_Init(&v12);
    BytePtr = CFDataGetBytePtr(a2);
    CC_LONG Length = CFDataGetLength(a2);
    CC_SHA1_Update(&v12, BytePtr, Length);
    MutableBytePtr = CFDataGetMutableBytePtr(v6);
    CC_SHA1_Final(MutableBytePtr, &v12);
    uint64_t v10 = 0;
    *a3 = CFRetain(v6);
  }
  else
  {
    uint64_t v10 = 2;
  }
  SafeRelease(v6);
  return v10;
}

uint64_t AMAuthInstallCryptoCreateDigestForData_SHA256(const __CFAllocator *a1, const __CFData *a2, CFTypeRef *a3)
{
  size_t v3 = 0;
  uint64_t v4 = 1;
  if (a2 && a3)
  {
    CFMutableDataRef Mutable = CFDataCreateMutable(a1, 32);
    size_t v3 = Mutable;
    if (Mutable)
    {
      CFDataSetLength(Mutable, 32);
      BytePtr = CFDataGetBytePtr(a2);
      CC_LONG Length = CFDataGetLength(a2);
      MutableBytePtr = CFDataGetMutableBytePtr(v3);
      CC_SHA256(BytePtr, Length, MutableBytePtr);
      uint64_t v4 = 0;
      *a3 = CFRetain(v3);
    }
    else
    {
      uint64_t v4 = 2;
    }
  }
  SafeRelease(v3);
  return v4;
}

uint64_t AMAuthInstallCryptoCreateDigestForData_SHA384(const __CFAllocator *a1, const __CFData *a2, CFTypeRef *a3)
{
  size_t v3 = 0;
  uint64_t v4 = 1;
  if (a2 && a3)
  {
    CFMutableDataRef Mutable = CFDataCreateMutable(a1, 48);
    size_t v3 = Mutable;
    if (Mutable)
    {
      CFDataSetLength(Mutable, 48);
      BytePtr = CFDataGetBytePtr(a2);
      CC_LONG Length = CFDataGetLength(a2);
      MutableBytePtr = CFDataGetMutableBytePtr(v3);
      CC_SHA384(BytePtr, Length, MutableBytePtr);
      uint64_t v4 = 0;
      *a3 = CFRetain(v3);
    }
    else
    {
      uint64_t v4 = 2;
    }
  }
  SafeRelease(v3);
  return v4;
}

uint64_t _AMAuthInstallFusingProgramCreateRequest(CFAllocatorRef allocator, const __CFURL *a2, CFDataRef XMLData, const __CFDictionary *cf, CFTypeRef *a5)
{
  if (cf)
  {
    CFDictionaryRef v9 = cf;
    CFRetain(cf);
  }
  else
  {
    CFDictionaryRef v9 = CFDictionaryCreate(allocator, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v9)
    {
      uint64_t v11 = 0;
LABEL_13:
      XMLData = 0;
      goto LABEL_14;
    }
  }
  if (!XMLData)
  {
    uint64_t v11 = 0;
    Request = 0;
    CFStringRef v14 = 0;
    uint64_t v15 = 1;
    goto LABEL_9;
  }
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v11 = Mutable;
  if (!Mutable) {
    goto LABEL_13;
  }
  CFDictionarySetValue(Mutable, @"Action", XMLData);
  CFDictionarySetValue(v11, @"Parameters", v9);
  XMLData = CFPropertyListCreateXMLData(allocator, v11);
  if (!XMLData)
  {
LABEL_14:
    Request = 0;
    CFStringRef v14 = 0;
    uint64_t v15 = 2;
    goto LABEL_9;
  }
  Request = CFHTTPMessageCreateRequest(allocator, @"POST", a2, (CFStringRef)*MEMORY[0x263EFC708]);
  if (Request)
  {
    CFIndex Length = CFDataGetLength(XMLData);
    CFStringRef v14 = CFStringCreateWithFormat(allocator, 0, @"%lu", Length);
    CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Type", @"text/xml; charset=\"utf-8\"");
    CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Length", v14);
    CFHTTPMessageSetBody(Request, XMLData);
    uint64_t v15 = 0;
    *a5 = CFRetain(Request);
  }
  else
  {
    uint64_t v15 = 0;
    CFStringRef v14 = 0;
  }
LABEL_9:
  SafeRelease(v11);
  SafeRelease(XMLData);
  SafeRelease(Request);
  SafeRelease(v9);
  SafeRelease(v14);
  SafeRelease(0);
  return v15;
}

uint64_t _AMAuthInstallFusingProgramCopyResponseParameters(const __CFAllocator *a1, const __CFData *a2, void *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  CFStringRef errorString = 0;
  CFDictionaryRef v10 = (const __CFDictionary *)CFPropertyListCreateFromXMLData(a1, a2, 0, &errorString);
  CFDictionaryRef v16 = v10;
  if (errorString)
  {
    uint64_t v17 = 3;
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallFusingProgramCopyResponseParameters", (uint64_t)"CFPropertyListCreateFromXMLData() error: %@", v11, v12, v13, v14, v15, (char)errorString);
    CFTypeRef cf = 0;
    URLForTempDirectoryRoot = (const void *)AMAuthInstallSupportGetURLForTempDirectoryRoot();
    AMAuthInstallSupportCopyURLWithAppendedComponent(a1, URLForTempDirectoryRoot, @"badresponse.bin", 0, (CFURLRef *)&cf);
    AMAuthInstallSupportWriteDataToFileURL(a1, a2, (const __CFURL *)cf, 1);
    SafeRelease(cf);
    CFRelease(errorString);
    CFStringRef errorString = 0;
  }
  else if (v10)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v10, @"Status");
    if (Value)
    {
      CFNumberRef v20 = Value;
      uint64_t v21 = CFDictionaryGetValue(v16, @"Message");
      uint64_t v22 = CFDictionaryGetValue(v16, @"Data");
      if (CFNumberGetValue(v20, kCFNumberIntType, a3))
      {
        *a4 = SafeRetain(v21);
        uint64_t v17 = 0;
        *a5 = SafeRetain(v22);
      }
      else
      {
        uint64_t v17 = 3;
      }
    }
    else
    {
      uint64_t v17 = 17;
    }
  }
  else
  {
    char Length = CFDataGetLength(a2);
    uint64_t v17 = 3;
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallFusingProgramCopyResponseParameters", (uint64_t)"can't parse response (%u bytes of apparent garbage)", v25, v26, v27, v28, v29, Length);
  }
  SafeRelease(v16);
  SafeRelease(errorString);
  return v17;
}

uint64_t AMAuthInstallFusingProgramRequestInternal(const __CFAllocator *a1, const __CFURL *a2, const void *a3, CFTypeRef *a4, const __CFDictionary *a5)
{
  CFTypeRef v5 = 0;
  CFTypeRef v59 = 0;
  uint64_t valuePtr = 0;
  CFTypeRef v57 = 0;
  CFTypeRef v58 = 0;
  uint64_t v6 = 1;
  CFStringRef errorString = 0;
  if (!a2 || !a3)
  {
    CFTypeRef v9 = 0;
    CFDictionaryRef v10 = 0;
    CFDataRef v11 = 0;
    goto LABEL_20;
  }
  CFTypeRef v9 = 0;
  CFDictionaryRef v10 = 0;
  CFDataRef v11 = 0;
  if (a4)
  {
    CFMutableDataRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionaryRef v10 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"ProfileSpecifier", a3);
      uint64_t v16 = _AMAuthInstallFusingProgramCreateRequest(a1, a2, (CFDataRef)@"GetFusingProgram", v10, &v59);
      if (v16)
      {
        uint64_t v6 = v16;
        CFTypeRef v5 = 0;
        CFDataRef v11 = 0;
        CFTypeRef v9 = v59;
        goto LABEL_20;
      }
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"requesting fusing program from %@", v17, v18, v19, v20, v21, (char)a2);
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, @"ChipID");
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"Chiup ID: %u", v23, v24, v25, v26, v27, valuePtr);
      CFDataRef v11 = CFDataCreateMutable(a1, 0);
      CFTypeRef v9 = v59;
      if (v11)
      {
        char v33 = AMAuthInstallHttpMessageSendSync(v59, v11, a5, v28, v29, v30, v31, v32);
        if ((int)valuePtr > 1700064)
        {
          if (valuePtr == 1700065 || valuePtr == 2814177) {
            goto LABEL_15;
          }
          int v34 = 2089185;
        }
        else
        {
          if (valuePtr == 938209 || valuePtr == 1327329) {
            goto LABEL_15;
          }
          int v34 = 1515745;
        }
        if (valuePtr != v34)
        {
          uint64_t v54 = _AMAuthInstallFusingProgramCopyResponseParameters(a1, v11, (char *)&valuePtr + 4, &v58, &v57);
          if (v54)
          {
            uint64_t v6 = v54;
            CFTypeRef v5 = v58;
            goto LABEL_20;
          }
          if (HIDWORD(valuePtr))
          {
            CFTypeRef v5 = v58;
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"server error: %@ (%d)", v36, v37, v38, v39, v40, (char)v58);
            uint64_t v6 = 99;
            goto LABEL_20;
          }
          CFTypeRef v41 = v57;
          CFTypeRef v5 = v58;
          goto LABEL_17;
        }
LABEL_15:
        CFPropertyListRef v35 = CFPropertyListCreateFromXMLData(a1, v11, 0, &errorString);
        CFTypeRef v57 = v35;
        if (errorString)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"Failed to get fusing response data from CFPropertyListCreateFromXMLData() error: %@", v36, v37, v38, v39, v40, (char)errorString);
          CFTypeRef v5 = 0;
          goto LABEL_32;
        }
        CFTypeRef v41 = v35;
        CFTypeRef v5 = 0;
LABEL_17:
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"httpStatus=%u, status=%d, message=%@", v36, v37, v38, v39, v40, v33);
        if (v41)
        {
          CFTypeID v47 = CFGetTypeID(v41);
          if (v47 == CFDictionaryGetTypeID())
          {
            AMAuthInstallLog(6, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"data=%@", v48, v49, v50, v51, v52, (char)v41);
            uint64_t v6 = 0;
            *a4 = CFRetain(v41);
          }
          else
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"fusing program type mismatch", v48, v49, v50, v51, v52, v55);
            uint64_t v6 = 17;
          }
          goto LABEL_20;
        }
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequestInternal", (uint64_t)"server failed to provide a fusing program", v42, v43, v44, v45, v46, v55);
LABEL_32:
        uint64_t v6 = 14;
        goto LABEL_20;
      }
      CFTypeRef v5 = 0;
    }
    else
    {
      CFTypeRef v5 = 0;
      CFTypeRef v9 = 0;
      CFDataRef v11 = 0;
    }
    uint64_t v6 = 2;
  }
LABEL_20:
  SafeRelease(v10);
  SafeRelease(v9);
  SafeRelease(v11);
  SafeRelease(v5);
  SafeRelease(v57);
  return v6;
}

uint64_t AMAuthInstallFusingProgramAck(const __CFAllocator *a1, const __CFURL *a2, const void *a3, int a4)
{
  int v37 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  CFTypeRef v34 = 0;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef v9 = Mutable;
  if (!Mutable)
  {
    CFTypeRef v31 = 0;
    CFTypeRef v32 = 0;
    CFTypeRef v23 = 0;
    CFDataRef v22 = 0;
LABEL_12:
    uint64_t v30 = 2;
    goto LABEL_8;
  }
  CFDictionarySetValue(Mutable, @"FusingProgram", a3);
  CFDictionaryRef v10 = (const void **)MEMORY[0x263EFFB40];
  if (!a4) {
    CFDictionaryRef v10 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionarySetValue(v9, @"Consumed", *v10);
  uint64_t v11 = _AMAuthInstallFusingProgramCreateRequest(a1, a2, (CFDataRef)@"AckFusingProgram", v9, &v36);
  if (v11)
  {
    uint64_t v30 = v11;
    CFTypeRef v31 = 0;
    CFTypeRef v32 = 0;
    CFDataRef v22 = 0;
    CFTypeRef v23 = v36;
    goto LABEL_8;
  }
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallFusingProgramAck", (uint64_t)"acknowledging fusing program from %@", v12, v13, v14, v15, v16, (char)a2);
  CFDataRef v22 = CFDataCreateMutable(a1, 0);
  CFTypeRef v23 = v36;
  if (!v22)
  {
    CFTypeRef v31 = 0;
    CFTypeRef v32 = 0;
    goto LABEL_12;
  }
  char v24 = AMAuthInstallHttpMessageSendSync(v36, v22, 0, v17, v18, v19, v20, v21);
  uint64_t v30 = _AMAuthInstallFusingProgramCopyResponseParameters(a1, v22, &v37, &v35, &v34);
  CFTypeRef v31 = v34;
  CFTypeRef v32 = v35;
  if (!v30) {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallFusingProgramAck", (uint64_t)"httpStatus=%u, status=%d, message=%@, data=%@", v25, v26, v27, v28, v29, v24);
  }
LABEL_8:
  SafeRelease(v9);
  SafeRelease(v23);
  SafeRelease(v22);
  SafeRelease(v32);
  SafeRelease(v31);
  return v30;
}

CFTypeRef AMAuthInstallFusingCreateProfileName(__CFString *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef v8 = cf;
  uint64_t v29 = *MEMORY[0x263EF8340];
  v27.CFIndex location = 0;
  v27.CFIndex length = 0;
  *(_OWORD *)values = xmmword_2642BA808;
  if (!cf)
  {
    CFDictionaryRef v10 = 0;
LABEL_43:
    CFArrayRef v15 = 0;
    goto LABEL_44;
  }
  if (!cf[5].info)
  {
    uint64_t v26 = "no fusing profile specified";
LABEL_41:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingCreateProfileName", (uint64_t)v26, a4, a5, a6, a7, a8, v27.location);
    CFDictionaryRef v10 = 0;
LABEL_42:
    CFStringRef v8 = 0;
    goto LABEL_43;
  }
  CFDataRef data = cf->data;
  if (!data)
  {
    uint64_t v26 = "ap parameters are not set";
    goto LABEL_41;
  }
  CFDictionaryRef v10 = 0;
  int v11 = *((_DWORD *)cf[1].data + 1);
  if (v11 <= 1700064)
  {
    if (v11 <= 938208)
    {
      BOOL v12 = v11 == 241889;
      int v13 = 520417;
    }
    else
    {
      BOOL v12 = v11 == 938209 || v11 == 1327329;
      int v13 = 1515745;
    }
  }
  else if (v11 > 8343776)
  {
    BOOL v12 = v11 == 8343777 || v11 == 9781473;
    int v13 = 9572577;
  }
  else
  {
    BOOL v12 = v11 == 1700065 || v11 == 2089185;
    int v13 = 2814177;
  }
  BOOL v14 = v12 || v11 == v13;
  CFArrayRef v15 = 0;
  if (!v14) {
    goto LABEL_34;
  }
  if (!*((void *)data + 13))
  {
    AMAuthInstallLog(4, (uint64_t)"AMAuthInstallFusingCreateProfileName", (uint64_t)"hardware model is not set, fusing profile name will not be updated.", a4, a5, a6, a7, a8, v27.location);
    CFDictionaryRef v10 = 0;
    CFArrayRef v15 = 0;
    goto LABEL_34;
  }
  CFAllocatorRef v16 = CFGetAllocator(cf);
  CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(v16, 0, *((CFStringRef *)v8->data + 13));
  CFDictionaryRef v10 = MutableCopy;
  if (!MutableCopy) {
    goto LABEL_42;
  }
  CFStringLowercase(MutableCopy, 0);
  CFAllocatorRef v18 = CFGetAllocator(v8);
  CFArrayRef v19 = CFArrayCreate(v18, (const void **)values, 2, MEMORY[0x263EFFF70]);
  CFArrayRef v15 = v19;
  if (!v19)
  {
    CFStringRef v8 = 0;
    goto LABEL_44;
  }
  if (CFArrayGetCount(v19) >= 1)
  {
    CFIndex v20 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v20);
      v30.CFIndex length = CFStringGetLength(v10);
      v30.CFIndex location = 0;
      if (CFStringFindWithOptions(v10, ValueAtIndex, v30, 4uLL, &v27)) {
        break;
      }
      if (++v20 >= CFArrayGetCount(v15)) {
        goto LABEL_34;
      }
    }
    CFStringDelete(v10, v27);
    CFAllocatorRef v24 = CFGetAllocator(v8);
    uint64_t v25 = CFStringCreateMutableCopy(v24, 0, (CFStringRef)v8[5].info);
    CFStringRef v8 = v25;
    if (v25)
    {
      CFStringAppend(v25, @"-");
      CFStringAppend(v8, v10);
      CFTypeRef v22 = CFRetain(v8);
      goto LABEL_35;
    }
LABEL_44:
    CFTypeRef v22 = 0;
    goto LABEL_35;
  }
LABEL_34:
  CFTypeRef v22 = CFRetain((CFTypeRef)v8[5].info);
  CFStringRef v8 = 0;
LABEL_35:
  SafeRelease(v10);
  SafeRelease(v8);
  SafeRelease(v15);
  return v22;
}

uint64_t AMAuthInstallFusingProgramRequest(void *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t valuePtr = 0;
  int v43 = 0;
  if (!cf) {
    goto LABEL_28;
  }
  if (!*((void *)cf + 20))
  {
    CFTypeRef v41 = "no fusing server specified";
LABEL_27:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequest", (uint64_t)v41, a4, a5, a6, a7, a8, v42);
LABEL_28:
    CFMutableDataRef Mutable = 0;
    CFNumberRef v19 = 0;
    CFNumberRef v20 = 0;
    CFNumberRef v21 = 0;
    CFTypeRef ProfileName = 0;
    uint64_t v17 = 1;
    goto LABEL_24;
  }
  if (!*((void *)cf + 21))
  {
    CFTypeRef v41 = "no fusing profile specified";
    goto LABEL_27;
  }
  CFTypeRef v9 = (int *)*((void *)cf + 6);
  int v10 = *v9;
  LODWORD(valuePtr) = v9[1];
  HIDWORD(valuePtr) = v10;
  int v43 = v9[24];
  CFTypeRef ProfileName = AMAuthInstallFusingCreateProfileName((__CFString *)cf, a2, a3, a4, a5, a6, a7, a8);
  if (!ProfileName)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequest", (uint64_t)"failed to create fusing profile name", v11, v12, v13, v14, v15, v42);
    CFMutableDataRef Mutable = 0;
    CFNumberRef v19 = 0;
    CFNumberRef v20 = 0;
    CFNumberRef v21 = 0;
LABEL_36:
    uint64_t v17 = 99;
    goto LABEL_24;
  }
  if (*((void *)cf + 22))
  {
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallFusingProgramRequest", (uint64_t)"fusing program already exists", v11, v12, v13, v14, v15, v42);
    uint64_t v17 = 0;
    CFMutableDataRef Mutable = 0;
    CFNumberRef v19 = 0;
    CFNumberRef v20 = 0;
    CFNumberRef v21 = 0;
    CFTypeRef ProfileName = 0;
    goto LABEL_24;
  }
  CFAllocatorRef v22 = CFGetAllocator(cf);
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    CFNumberRef v19 = 0;
    goto LABEL_31;
  }
  CFAllocatorRef v23 = CFGetAllocator(cf);
  CFNumberRef v19 = CFNumberCreate(v23, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  if (!v19)
  {
LABEL_31:
    CFNumberRef v20 = 0;
    goto LABEL_32;
  }
  CFAllocatorRef v24 = CFGetAllocator(cf);
  CFNumberRef v20 = CFNumberCreate(v24, kCFNumberSInt32Type, &valuePtr);
  if (!v20)
  {
LABEL_32:
    CFNumberRef v21 = 0;
    goto LABEL_33;
  }
  CFAllocatorRef v25 = CFGetAllocator(cf);
  CFNumberRef v21 = CFNumberCreate(v25, kCFNumberSInt32Type, &v43);
  if (!v21)
  {
LABEL_33:
    CFTypeRef ProfileName = 0;
    uint64_t v17 = 2;
    goto LABEL_24;
  }
  CFDictionarySetValue(Mutable, @"VendorID", v19);
  CFDictionarySetValue(Mutable, @"ChipID", v20);
  CFDictionarySetValue(Mutable, @"ProfileName", ProfileName);
  CFDictionarySetValue(Mutable, @"FusingStatus", v21);
  CFTypeRef ProfileName = 0;
  if ((int)valuePtr > 1700064)
  {
    if (valuePtr == 1700065 || valuePtr == 2814177) {
      goto LABEL_19;
    }
    int v31 = 2089185;
  }
  else
  {
    if (valuePtr == 938209 || valuePtr == 1327329) {
      goto LABEL_19;
    }
    int v31 = 1515745;
  }
  if (valuePtr != v31) {
    goto LABEL_22;
  }
LABEL_19:
  if (!*((void *)cf + 24))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequest", (uint64_t)"Failed to get fusing server root CA!", v26, v27, v28, v29, v30, v42);
    CFTypeRef ProfileName = 0;
    goto LABEL_36;
  }
  CFAllocatorRef v32 = CFGetAllocator(cf);
  char v33 = CFDictionaryCreateMutable(v32, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef ProfileName = v33;
  if (!v33)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallFusingProgramRequest", (uint64_t)"Failed to create option Dictionary for SSL connection!", v34, v35, v36, v37, v38, v42);
    goto LABEL_36;
  }
  CFDictionarySetValue(v33, (const void *)*MEMORY[0x263F8BE08], *((const void **)cf + 24));
LABEL_22:
  CFAllocatorRef v39 = CFGetAllocator(cf);
  uint64_t v17 = AMAuthInstallFusingProgramRequestInternal(v39, *((const __CFURL **)cf + 20), Mutable, (CFTypeRef *)cf + 22, (const __CFDictionary *)ProfileName);
  if (!v17) {
    AMAuthInstallDebugWriteObject((char *)cf, *((CFTypeRef *)cf + 22), @"fusingprogram", 2);
  }
LABEL_24:
  SafeRelease(Mutable);
  SafeRelease(v19);
  SafeRelease(v20);
  SafeRelease(v21);
  SafeRelease(ProfileName);
  return v17;
}

uint64_t AMAuthInstallHttpUriEscapeString(const __CFAllocator *a1, CFStringRef theString, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theString)
  {
    CFNumberRef v20 = "value == NULL";
LABEL_10:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpUriEscapeString", (uint64_t)v20, a4, a5, a6, a7, a8, v21);
    CFMutableStringRef MutableCopy = 0;
    uint64_t v18 = 1;
    goto LABEL_7;
  }
  if (!a3)
  {
    CFNumberRef v20 = "outEscapedValue == NULL";
    goto LABEL_10;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(a1, 0, theString);
  if (MutableCopy)
  {
    for (uint64_t i = 0; i != 66; i += 2)
    {
      CFStringRef v16 = kEscapeTable[i];
      CFStringRef v17 = kEscapeTable[i + 1];
      v22.CFIndex length = CFStringGetLength(MutableCopy);
      v22.CFIndex location = 0;
      CFStringFindAndReplace(MutableCopy, v16, v17, v22, 0);
    }
    uint64_t v18 = 0;
    *a3 = CFRetain(MutableCopy);
  }
  else
  {
    uint64_t v18 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpUriEscapeString", (uint64_t)"escapedValue == NULL", v9, v10, v11, v12, v13, v21);
  }
LABEL_7:
  SafeRelease(MutableCopy);
  return v18;
}

uint64_t AMAuthInstallHttpUriUnescapeString(const __CFAllocator *a1, CFStringRef theString, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theString)
  {
    CFNumberRef v20 = "value == NULL";
LABEL_10:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpUriUnescapeString", (uint64_t)v20, a4, a5, a6, a7, a8, v21);
    CFMutableStringRef MutableCopy = 0;
    uint64_t v18 = 1;
    goto LABEL_7;
  }
  if (!a3)
  {
    CFNumberRef v20 = "outUnescapedValue == NULL";
    goto LABEL_10;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(a1, 0, theString);
  if (MutableCopy)
  {
    uint64_t v15 = 0x42u;
    do
    {
      CFStringRef v17 = kEscapeTable[v15 - 2];
      CFStringRef v16 = kEscapeTable[v15 - 1];
      v22.CFIndex length = CFStringGetLength(MutableCopy);
      v22.CFIndex location = 0;
      CFStringFindAndReplace(MutableCopy, v16, v17, v22, 0);
      v15 -= 2;
    }
    while (v15 * 8);
    uint64_t v18 = 0;
    *a3 = CFRetain(MutableCopy);
  }
  else
  {
    uint64_t v18 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpUriUnescapeString", (uint64_t)"unescapedValue == NULL", v9, v10, v11, v12, v13, v21);
  }
LABEL_7:
  SafeRelease(MutableCopy);
  return v18;
}

uint64_t AMAuthInstallHttpCreatePostBody(const __CFAllocator *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  CFDataRef v3 = 0;
  uint64_t v4 = 1;
  if (!a2)
  {
    CFMutableStringRef Mutable = 0;
    uint64_t v7 = 0;
    CFStringRef v8 = 0;
    uint64_t v9 = 0;
    goto LABEL_17;
  }
  CFMutableStringRef Mutable = 0;
  uint64_t v7 = 0;
  CFStringRef v8 = 0;
  uint64_t v9 = 0;
  if (a3)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(a1, 0);
    if (Mutable)
    {
      CFIndex Count = CFDictionaryGetCount(a2);
      uint64_t v7 = (const void **)malloc(8 * Count);
      uint64_t v13 = (const void **)malloc(8 * Count);
      CFStringRef v8 = v13;
      if (v7)
      {
        if (v13)
        {
          CFDictionaryGetKeysAndValues(a2, v7, v13);
          if (Count >= 1)
          {
            CFIndex v24 = 0;
            while (1)
            {
              CFStringRef v25 = (const __CFString *)v7[v24];
              if (!v25)
              {
                uint64_t v44 = "invalid requestDictKeysBuffer array";
                goto LABEL_20;
              }
              if (!v8[v24]) {
                break;
              }
              CFStringAppend(Mutable, v25);
              CFStringAppend(Mutable, @"=");
              CFStringAppend(Mutable, (CFStringRef)v8[v24]);
              if (v24 < Count - 1) {
                CFStringAppend(Mutable, @"&");
              }
              if (Count == ++v24) {
                goto LABEL_13;
              }
            }
            uint64_t v44 = "invalid requestDictValuesBuffer array";
LABEL_20:
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreatePostBody", (uint64_t)v44, v19, v20, v21, v22, v23, v46);
            CFDataRef v3 = 0;
            uint64_t v9 = 0;
            uint64_t v4 = 14;
            goto LABEL_17;
          }
LABEL_13:
          AMAuthInstallLog(7, (uint64_t)"AMAuthInstallHttpCreatePostBody", (uint64_t)"postString=%@", v19, v20, v21, v22, v23, (char)Mutable);
          CFIndex Length = CFStringGetLength(Mutable);
          uint64_t v9 = (char *)malloc(Length + 1);
          if (v9)
          {
            if (!CFStringGetCString(Mutable, v9, Length + 1, 0x8000100u))
            {
              uint64_t v4 = 3;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreatePostBody", (uint64_t)"conversion of postString to c-string failed", v32, v33, v34, v35, v36, v47);
              CFDataRef v3 = 0;
              goto LABEL_17;
            }
            CFDataRef v37 = CFDataCreate(a1, (const UInt8 *)v9, Length);
            CFDataRef v3 = v37;
            if (v37)
            {
              uint64_t v4 = 0;
              *a3 = CFRetain(v37);
              goto LABEL_17;
            }
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreatePostBody", (uint64_t)"postData allocation failed", v38, v39, v40, v41, v42, v47);
          }
          else
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreatePostBody", (uint64_t)"tmpStringBuffer allocation failure", v27, v28, v29, v30, v31, v47);
            CFDataRef v3 = 0;
          }
LABEL_30:
          uint64_t v4 = 2;
          goto LABEL_17;
        }
        uint64_t v45 = "requestDictValuesBuffer allocation failed";
      }
      else
      {
        uint64_t v45 = "requestDictKeysBuffer allocation failed";
      }
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreatePostBody", (uint64_t)v45, v14, v15, v16, v17, v18, v46);
      CFDataRef v3 = 0;
    }
    else
    {
      CFDataRef v3 = 0;
      uint64_t v7 = 0;
      CFStringRef v8 = 0;
    }
    uint64_t v9 = 0;
    goto LABEL_30;
  }
LABEL_17:
  SafeRelease(Mutable);
  SafeRelease(v3);
  SafeFree(v7);
  SafeFree(v8);
  SafeFree(v9);
  return v4;
}

uint64_t AMAuthInstallHttpSetUriEscapedValue(const __CFAllocator *a1, __CFDictionary *a2, const void *a3, CFStringRef theString, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDictionaryRef value = 0;
  uint64_t v8 = 1;
  if (a2 && a3 && theString)
  {
    uint64_t v11 = AMAuthInstallHttpUriEscapeString(a1, theString, (CFTypeRef *)&value, (uint64_t)theString, a5, a6, a7, a8);
    if (v11)
    {
      uint64_t v8 = v11;
      uint64_t v18 = "AMAuthInstallHttpUriEscapeString failed";
    }
    else
    {
      if (value)
      {
        CFDictionarySetValue(a2, a3, value);
        uint64_t v8 = 0;
        goto LABEL_7;
      }
      uint64_t v18 = "escapedValue is NULL";
      uint64_t v8 = 3;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpSetUriEscapedValue", (uint64_t)v18, v12, v13, v14, v15, v16, v19);
  }
LABEL_7:
  SafeRelease(value);
  return v8;
}

uint64_t AMAuthInstallHttpCreatePostRequest(const __CFAllocator *a1, const __CFURL *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  Request = 0;
  CFDataRef theData = 0;
  uint64_t v5 = 1;
  if (!a2 || !a3)
  {
    CFStringRef v7 = 0;
    goto LABEL_8;
  }
  CFStringRef v7 = 0;
  if (a4)
  {
    uint64_t PostBody = AMAuthInstallHttpCreatePostBody(a1, a3, (CFTypeRef *)&theData);
    if (PostBody)
    {
      uint64_t v5 = PostBody;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreatePostRequest", (uint64_t)"AMAuthInstallHttpCreatePostBody failed", v11, v12, v13, v14, v15, v18);
      Request = 0;
    }
    else
    {
      if (!theData)
      {
        Request = 0;
        CFStringRef v7 = 0;
        uint64_t v5 = 2;
        goto LABEL_8;
      }
      Request = CFHTTPMessageCreateRequest(a1, @"POST", a2, (CFStringRef)*MEMORY[0x263EFC708]);
      if (Request)
      {
        CFIndex Length = CFDataGetLength(theData);
        CFStringRef v7 = CFStringCreateWithFormat(a1, 0, @"%ld", Length);
        CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Type", @"text/xml; charset=\"utf-8\"");
        CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Length", v7);
        CFHTTPMessageSetBody(Request, theData);
        uint64_t v5 = 0;
        *a4 = CFRetain(Request);
        goto LABEL_8;
      }
      uint64_t v5 = 0;
    }
    CFStringRef v7 = 0;
  }
LABEL_8:
  SafeRelease(theData);
  SafeRelease(Request);
  SafeRelease(v7);
  SafeRelease(0);
  return v5;
}

uint64_t AMAuthInstallHttpSetBase64EncodedValue(const __CFAllocator *a1, __CFDictionary *a2, const void *a3, CFDataRef theData, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef theString = 0;
  uint64_t v8 = 1;
  if (a2 && a3 && theData)
  {
    uint64_t v12 = AMAuthInstallSupportBase64Encode(a1, theData, (CFTypeRef *)&theString, (uint64_t)theData, a5, a6, a7, a8);
    if (v12)
    {
      uint64_t v8 = v12;
      char v19 = "Base64Encode failed";
    }
    else
    {
      CFStringRef v13 = theString;
      if (theString)
      {
        uint64_t v8 = AMAuthInstallHttpSetUriEscapedValue(a1, a2, a3, theString, v14, v15, v16, v17);
        goto LABEL_7;
      }
      char v19 = "encodedValue is NULL";
      uint64_t v8 = 3;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpSetBase64EncodedValue", (uint64_t)v19, (uint64_t)v13, v14, v15, v16, v17, v20);
  }
LABEL_7:
  SafeRelease(theString);
  return v8;
}

CFArrayRef AMAuthInstallHTTPCopyDefaultTrustedSSLCACerts()
{
  v4[1] = *(const void **)MEMORY[0x263EF8340];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v1 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], kAMAuthInstallHTTPTrustedCACert3, 1020, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  v4[0] = v1;
  if (v1)
  {
    CFArrayRef v2 = CFArrayCreate(v0, v4, 1, MEMORY[0x263EFFF70]);
    CFDataRef v1 = (CFDataRef)v4[0];
  }
  else
  {
    CFArrayRef v2 = 0;
  }
  SafeRelease(v1);
  return v2;
}

uint64_t AMAuthInstallLockCreate()
{
  pthread_once(&_AMAuthInstallLockClassInitializeOnce, (void (*)(void))_AMAuthInstallLockClassInitialize);
  uint64_t result = _CFRuntimeCreateInstance();
  if (result) {
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

void AMAuthInstallLockLock(os_unfair_lock_s *a1)
{
}

void AMAuthInstallLockUnlock(os_unfair_lock_s *a1)
{
}

uint64_t _AMAuthInstallLockClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  _AMAuthInstallLockCFTypeID TypeID = result;
  return result;
}

uint64_t AMAuthInstallHttpProxySetCredentialsCallback()
{
  return 0;
}

uint64_t AMAuthInstallHttpMessageSendSync(const void *a1, const __CFData *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallHttpMessageSendSync", (uint64_t)"httpRequest=%@", a4, a5, a6, a7, a8, (char)a1);
  unsigned int v23 = 10002;
  CFDataRef theData = 0;
  CFAllocatorRef v11 = CFGetAllocator(a1);
  int v12 = AMAuthInstallHttpMessageSendSyncNew(v11, (int)a1, (int)&theData, (int)&v23, a3, 60.0);
  if (v12)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpMessageSendSync", (uint64_t)"AMAuthInstallHttpMessageSendSyncNew() failed: %d", v13, v14, v15, v16, v17, v12);
  }
  else if (a2)
  {
    CFIndex Length = CFDataGetLength(a2);
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex v20 = CFDataGetLength(theData);
    v24.CFIndex location = 0;
    v24.CFIndex length = Length;
    CFDataReplaceBytes(a2, v24, BytePtr, v20);
  }
  return v23;
}

uint64_t AMAuthInstallHttpMessageSendSyncNew(CFAllocatorRef allocator, int a2, int a3, int a4, CFDictionaryRef theDict, double a6)
{
  double valuePtr = a6;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(allocator, Count, theDict);
    if (CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x263F8BDF8])) {
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallHttpMessageSendSyncNew", (uint64_t)"Options dictionary contains proxy information. Will attempt to use a proxy.", v10, v11, v12, v13, v14, v33);
    }
    if (CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x263F8BE08])) {
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallHttpMessageSendSyncNew", (uint64_t)"Options dictionary contains trusted server CAs. Will authenticate SSL against CAs.", v15, v16, v17, v18, v19, v33);
    }
  }
  else
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  if (!MutableCopy)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpMessageSendSyncNew", (uint64_t)"CFDictionaryCreateMutable failed to allocate", v15, v16, v17, v18, v19, v33);
LABEL_13:
    uint64_t v32 = 2;
    goto LABEL_10;
  }
  CFNumberRef v25 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
  if (!v25)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpMessageSendSyncNew", (uint64_t)"timeout failed to allocate", v20, v21, v22, v23, v24, v33);
    goto LABEL_13;
  }
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x263F8BE00], v25);
  AMSupportHttpSendSync();
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpMessageSendSyncNew", (uint64_t)"HTTP request provided no response data", v27, v28, v29, v30, v31, v33);
  uint64_t v32 = 16;
LABEL_10:
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v32;
}

uint64_t AMAuthInstallHttpRequestManagedBaaCertificate(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef cf = 0;
  uint64_t BaaCertificateData = AMAuthInstallHttpCreateBaaCertificateData(a1, 0, a2, (uint64_t)&cf, a5, a6, a7, a8);
  if (!BaaCertificateData)
  {
    CFTypeRef v10 = cf;
    if (cf)
    {
      if (*(void *)(a1[2] + 120))
      {
        CFRelease(*(CFTypeRef *)(a1[2] + 120));
        *(void *)(a1[2] + 120) = 0;
        CFTypeRef v10 = cf;
      }
      *(void *)(a1[2] + 120) = CFRetain(v10);
    }
  }
  return BaaCertificateData;
}

uint64_t AMAuthInstallHttpCreateBaaCertificateData(void *a1, const __CFDictionary *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v99[3] = *MEMORY[0x263EF8340];
  CFDataRef theData = 0;
  uint64_t v95 = 0;
  int v93 = -1;
  CFIndex v91 = 0;
  uint64_t v92 = 0;
  if (!a1)
  {
    CFDictionaryRef v80 = "amai is NULL";
LABEL_44:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)v80, a4, a5, a6, a7, a8, v83);
    uint64_t v11 = 0;
    id v12 = 0;
    id v13 = 0;
    CFURLRef v14 = 0;
    uint64_t v15 = 1;
    goto LABEL_40;
  }
  uint64_t v9 = a1[2];
  if (!v9)
  {
    CFDictionaryRef v80 = "amai->apParameters is NULL";
    goto LABEL_44;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  if (!v10)
  {
    CFDictionaryRef v80 = "amai->apParameters->sepNonce is required for BAA request.";
    goto LABEL_44;
  }
  if (!MEMORY[0x263F398E8])
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"DeviceIdentityCreateClientCertificateRequest is not available", a4, a5, a6, a7, a8, v83);
    uint64_t v11 = 0;
    id v12 = 0;
    id v13 = 0;
    CFURLRef v14 = 0;
    uint64_t v15 = 13;
    goto LABEL_40;
  }
  uint64_t v19 = *MEMORY[0x263F399D8];
  v98[0] = *MEMORY[0x263F39950];
  v98[1] = v19;
  v99[0] = v10;
  v99[1] = &unk_26C81AEC8;
  v98[2] = *MEMORY[0x263F399A8];
  uint64_t v20 = *MEMORY[0x263F39960];
  v97[0] = *MEMORY[0x263F39998];
  v97[1] = v20;
  uint64_t v21 = *MEMORY[0x263F39978];
  v97[2] = *MEMORY[0x263F39988];
  v97[3] = v21;
  id v22 = (id)[MEMORY[0x263EFF8C0] arrayWithObjects:v97 count:4];
  v99[2] = v22;
  id v13 = (id)[NSDictionary dictionaryWithObjects:v99 forKeys:v98 count:3];

  id v90 = 0;
  id v12 = (id)DeviceIdentityCreateClientCertificateRequest();
  id v23 = 0;
  uint64_t v11 = v23;
  if (v23)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"Error creating baa request : %@", v24, v25, v26, v27, v28, (char)v23);
    if (a3) {
      *a3 = v11;
    }
    uint64_t v15 = 6;
  }
  else
  {
    uint64_t v15 = 1;
  }
  if (!v95)
  {
    CFAllocatorRef v81 = "refKey is NULL";
LABEL_47:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)v81, v24, v25, v26, v27, v28, v83);
    CFURLRef v14 = 0;
    goto LABEL_40;
  }
  if (!v12)
  {
    CFAllocatorRef v81 = "request is NULL";
    goto LABEL_47;
  }
  if (a2)
  {
    CFNumberRef Value = CFDictionaryGetValue(a2, @"userAgentStringOverride");
    if (Value)
    {
      uint64_t v30 = Value;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [v12 setValue:v30 forHTTPHeaderField:@"User-Agent"];
      }
    }
  }
  if (AMAuthInstallPreferencesCopyStringValue(0, @"BAAOverrideURL"))
  {
    CFGetAllocator(a1);
    uint64_t URLFromString = AMSupportCreateURLFromString();
  }
  else
  {
    uint64_t URLFromString = [v12 URL];
  }
  CFURLRef v14 = (const __CFURL *)URLFromString;
  if (!URLFromString)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"serverURL is NULL", v32, v33, v34, v35, v36, v83);
    goto LABEL_40;
  }
  CFStringRef v37 = (const __CFString *)[v12 HTTPMethod];
  CFHTTPMessageRef Request = CFHTTPMessageCreateRequest(0, v37, v14, (CFStringRef)*MEMORY[0x263EFC708]);
  if (!Request)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"message is NULL", v39, v40, v41, v42, v43, v83);
    CFURLRef v14 = 0;
LABEL_60:
    uint64_t v15 = 2;
    goto LABEL_40;
  }
  uint64_t v44 = Request;
  uint64_t v84 = (void *)a4;
  uint64_t v85 = v11;
  id v45 = v13;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  CFURLRef v14 = (const __CFURL *)(id)[v12 allHTTPHeaderFields];
  uint64_t v46 = [(__CFURL *)v14 countByEnumeratingWithState:&v86 objects:v96 count:16];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = *(void *)v87;
    do
    {
      for (uint64_t i = 0; i != v47; ++i)
      {
        if (*(void *)v87 != v48) {
          objc_enumerationMutation(v14);
        }
        CFStringRef v50 = *(const __CFString **)(*((void *)&v86 + 1) + 8 * i);
        uint64_t v51 = (__CFString *)(id)[(__CFURL *)v14 objectForKeyedSubscript:v50];
        CFHTTPMessageSetHeaderFieldValue(v44, v50, v51);
      }
      uint64_t v47 = [(__CFURL *)v14 countByEnumeratingWithState:&v86 objects:v96 count:16];
    }
    while (v47);
  }

  id v52 = (id)[v12 HTTPBody];
  if (v52) {
    CFHTTPMessageSetBody(v44, (CFDataRef)[v12 HTTPBody]);
  }
  CFAllocatorRef v53 = CFGetAllocator(a1);
  uint64_t v54 = AMAuthInstallHttpMessageSendSyncNew(v53, (int)v44, (int)&theData, (int)&v93, 0, 60.0);
  if (v54)
  {
    uint64_t v15 = v54;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"AMAuthInstallHttpMessageSendSyncNew returned %d", v55, v56, v57, v58, v59, v54);
    id v13 = v45;
LABEL_52:
    uint64_t v11 = v85;
    goto LABEL_40;
  }
  id v13 = v45;
  if (!theData)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"responseData is NULL", v55, v56, v57, v58, v59, v83);
    uint64_t v15 = 16;
    goto LABEL_52;
  }
  uint64_t v11 = v85;
  if (v93 != 200)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"httpStatus is %d", v55, v56, v57, v58, v59, v93);
    uint64_t v15 = 16;
    goto LABEL_40;
  }
  BytePtr = CFDataGetBytePtr(theData);
  size_t Length = CFDataGetLength(theData);
  int v66 = AMAuthInstallSupportCreateDecodedPEM((uint64_t)BytePtr, Length, &v92, (size_t *)&v91, v62, v63, v64, v65);
  if (v66)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"AMAuthInstallSupportCreateDecodedPEM returned %d", v67, v68, v69, v70, v71, v66);
LABEL_58:
    uint64_t v15 = 6;
    goto LABEL_40;
  }
  if (!v92)
  {
    CFStringRef v82 = "decodedDER is NULL";
LABEL_57:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)v82, v67, v68, v69, v70, v71, v83);
    goto LABEL_58;
  }
  if (!v91)
  {
    CFStringRef v82 = "decodedLength is 0";
    goto LABEL_57;
  }
  CFAllocatorRef v72 = CFGetAllocator(a1);
  CFDataRef v73 = CFDataCreate(v72, v92, v91);
  if (!v73)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallHttpCreateBaaCertificateData", (uint64_t)"leafData is NULL", v74, v75, v76, v77, v78, v83);
    goto LABEL_60;
  }
  uint64_t v15 = 0;
  if (v84) {
    *uint64_t v84 = v73;
  }
LABEL_40:
  AMSupportSafeFree();

  return v15;
}

uint64_t AMAuthInstallHttpRequestAlternateUpdateBaaCertificate(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef cf = 0;
  uint64_t BaaCertificateData = AMAuthInstallHttpCreateBaaCertificateData(a1, (const __CFDictionary *)&unk_26C81AEA0, a2, (uint64_t)&cf, a5, a6, a7, a8);
  CFTypeRef v10 = cf;
  if (BaaCertificateData) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = cf == 0;
  }
  if (!v11)
  {
    if (*(void *)(a1[2] + 128))
    {
      CFRelease(*(CFTypeRef *)(a1[2] + 128));
      *(void *)(a1[2] + 128) = 0;
      CFTypeRef v10 = cf;
    }
    *(void *)(a1[2] + 128) = CFRetain(v10);
  }
  return BaaCertificateData;
}

uint64_t AMAuthInstallRestoreLocalPolicyCreateServerRequest(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFMutableDictionaryRef theDict = 0;
  if (_AMAuthInstallLocalPolicyCreateServerRequestBase((uint64_t **)a1, a2, (CFTypeRef *)&theDict)
    || (uint64_t v5 = *(const void **)(*(void *)(a1 + 16) + 24)) == 0)
  {
    uint64_t v6 = 1;
  }
  else
  {
    CFDictionarySetValue(theDict, @"ApNonce", v5);
    CFDictionarySetValue(theDict, @"Ap,LocalBoot", (const void *)*MEMORY[0x263EFFB38]);
    uint64_t v6 = 0;
    if (a3) {
      *a3 = CFRetain(theDict);
    }
  }
  SafeRelease(theDict);
  return v6;
}

uint64_t _AMAuthInstallLocalPolicyCreateServerRequestBase(uint64_t **a1, const void *a2, CFTypeRef *a3)
{
  if (a1 && (CFAllocatorRef v6 = CFGetAllocator(a1), a1[2]))
  {
    CFAllocatorRef v14 = v6;
    int IsImg4 = AMAuthInstallApIsImg4((uint64_t)a1, v7, v8, v9, v10, v11, v12, v13);
    CFMutableStringRef Mutable = 0;
    uint64_t v17 = 1;
    CFDataRef v18 = 0;
    uint64_t v19 = 0;
    if (a2 && IsImg4)
    {
      if (CFDataGetLength((CFDataRef)a2) == 48)
      {
        uint64_t v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
        uint64_t v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
        CFMutableStringRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFDataRef v18 = CFDataCreate(v14, kLocalPolicyDigestSHA384, 48);
        CFDictionarySetValue(Mutable, @"Digest", v18);
        id v22 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionarySetValue(Mutable, @"Trusted", (const void *)*MEMORY[0x263EFFB40]);
        uint64_t v19 = CFDictionaryCreateMutable(v14, 0, v20, v21);
        CFDictionarySetValue(v19, @"@ApImg4Ticket", v22);
        _CFDictionarySetInteger32(v19, @"ApChipID", *((_DWORD *)a1[2] + 2));
        _CFDictionarySetInteger32(v19, @"ApBoardID", *((_DWORD *)a1[2] + 3));
        _CFDictionarySetInteger64(v19, @"ApECID", *a1[2]);
        _CFDictionarySetBoolean(v19, @"ApProductionMode", *((unsigned __int8 *)a1[2] + 20));
        _CFDictionarySetInteger32(v19, @"ApSecurityDomain", *((_DWORD *)a1[2] + 4));
        _CFDictionarySetBoolean(v19, @"ApSecurityMode", *((unsigned __int8 *)a1[2] + 72));
        CFDictionarySetValue(v19, @"Ap,LocalPolicy", Mutable);
        CFDictionarySetValue(v19, @"Ap,NextStageIM4MHash", a2);
        uint64_t v17 = 0;
        if (a3) {
          *a3 = CFRetain(v19);
        }
      }
      else
      {
        CFMutableStringRef Mutable = 0;
        CFDataRef v18 = 0;
        uint64_t v19 = 0;
      }
    }
  }
  else
  {
    CFMutableStringRef Mutable = 0;
    CFDataRef v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 1;
  }
  SafeRelease(v19);
  SafeRelease(v18);
  SafeRelease(Mutable);
  return v17;
}

uint64_t AMAuthInstallRecoveryOSLocalPolicyCreateServerRequest(void *cf, const void *a2, const void *a3, const __CFUUID *a4, CFTypeRef *a5)
{
  if (cf) {
    CFAllocatorRef v10 = CFGetAllocator(cf);
  }
  else {
    CFAllocatorRef v10 = 0;
  }
  *(void *)&bytes.byte8 = 0;
  CFMutableDictionaryRef theDict = 0;
  *(void *)&bytes.byte0 = 0;
  int ServerRequestBase = _AMAuthInstallLocalPolicyCreateServerRequestBase((uint64_t **)cf, a2, (CFTypeRef *)&theDict);
  CFDataRef v12 = 0;
  uint64_t v13 = 1;
  if (!ServerRequestBase)
  {
    if (a3)
    {
      if (a4)
      {
        CFUUIDBytes bytes = CFUUIDGetUUIDBytes(a4);
        CFDataRef v12 = CFDataCreate(v10, &bytes.byte0, 16);
        CFDictionarySetValue(theDict, @"Ap,RecoveryOSPolicyNonceHash", a3);
        CFDictionarySetValue(theDict, @"Ap,VolumeUUID", v12);
        CFDictionarySetValue(theDict, @"Ap,LocalBoot", (const void *)*MEMORY[0x263EFFB40]);
        uint64_t v13 = 0;
        if (a5) {
          *a5 = CFRetain(theDict);
        }
      }
    }
  }
  SafeRelease(v12);
  SafeRelease(theDict);
  return v13;
}

uint64_t AMAuthInstallLocalPolicyStitchTicketData(const void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  if (!a1) {
    goto LABEL_8;
  }
  CFAllocatorRef v5 = CFGetAllocator(a1);
  if (!a2)
  {
LABEL_9:
    CFDataRef v15 = 0;
    uint64_t v16 = 1;
    goto LABEL_10;
  }
  CFAllocatorRef v6 = v5;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a2, @"ApImg4Ticket");
  if (!Value)
  {
LABEL_8:
    a2 = 0;
    goto LABEL_9;
  }
  CFDataRef v8 = Value;
  a2 = CFDataCreate(v6, kLocalPolicyIM4P, 22);
  if (a2)
  {
    CFDataRef StitchTicket = AMAuthInstallApImg4CreateStitchTicket(v6, a2, v8);
    CFDataRef v15 = StitchTicket;
    if (StitchTicket)
    {
      uint64_t v16 = 0;
      if (a3) {
        *a3 = CFRetain(StitchTicket);
      }
    }
    else
    {
      uint64_t v16 = 3;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallLocalPolicyStitchTicketData", (uint64_t)"failed to stitch local policy object", v10, v11, v12, v13, v14, v18);
    }
  }
  else
  {
    CFDataRef v15 = 0;
    uint64_t v16 = 2;
  }
LABEL_10:
  SafeRelease(v15);
  SafeRelease(a2);
  return v16;
}

CFDataRef AMAuthInstallLocalPolicyCopyPayloadDigestSHA384()
{
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kLocalPolicyDigestSHA384, 48);
}

void (*AMAuthInstallLogSetHandler(void (*result)(int a1, uint64_t a2)))(int a1, uint64_t a2)
{
  if (result) {
    CFDataRef v1 = result;
  }
  else {
    CFDataRef v1 = _DefaultLogHandler;
  }
  _logHandler = (uint64_t (*)(void, void))v1;
  return result;
}

void _DefaultLogHandler(int a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (_DefaultLogHandler_once != -1) {
    dispatch_once(&_DefaultLogHandler_once, &__block_literal_global);
  }
  if (a1 <= 2)
  {
    if (os_log_type_enabled((os_log_t)_DefaultLogHandler_logHandle, OS_LOG_TYPE_FAULT)) {
      _DefaultLogHandler_cold_1();
    }
    return;
  }
  if (a1 == 3)
  {
    if (os_log_type_enabled((os_log_t)_DefaultLogHandler_logHandle, OS_LOG_TYPE_ERROR)) {
      _DefaultLogHandler_cold_2();
    }
    return;
  }
  if (a1 <= 5)
  {
    uint64_t v4 = _DefaultLogHandler_logHandle;
    if (!os_log_type_enabled((os_log_t)_DefaultLogHandler_logHandle, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v9 = 136446210;
    uint64_t v10 = a2;
    CFAllocatorRef v5 = v4;
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
LABEL_15:
    _os_log_impl(&dword_217A74000, v5, v6, "%{public}s", (uint8_t *)&v9, 0xCu);
    return;
  }
  if (a1 == 6)
  {
    uint64_t v7 = _DefaultLogHandler_logHandle;
    if (!os_log_type_enabled((os_log_t)_DefaultLogHandler_logHandle, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v9 = 136446210;
    uint64_t v10 = a2;
    CFAllocatorRef v5 = v7;
    os_log_type_t v6 = OS_LOG_TYPE_INFO;
    goto LABEL_15;
  }
  BOOL v8 = os_log_type_enabled((os_log_t)_DefaultLogHandler_logHandle, OS_LOG_TYPE_DEBUG);
  if (a1 > 7)
  {
    if (v8) {
      _DefaultLogHandler_cold_4();
    }
  }
  else if (v8)
  {
    _DefaultLogHandler_cold_3();
  }
}

void AMAuthInstallLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388]();
  uint64_t v12 = v11;
  uint64_t v13 = v9;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v14 = "";
  if (v10) {
    uint64_t v14 = v10;
  }
  unsigned int v15 = snprintf(__str, 0x1000uLL, "%s: ", v14);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v17 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v12, 0x8000100u, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (!v17)
  {
    CFStringRef v19 = 0;
    goto LABEL_9;
  }
  CFStringRef v18 = CFStringCreateWithFormatAndArguments(v16, 0, v17, &a9);
  CFStringRef v19 = v18;
  if (!v18)
  {
LABEL_9:
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_14;
  }
  uint64_t v20 = v15;
  unsigned int v21 = 4096 - v15;
  unsigned int Length = CFStringGetLength(v18);
  unsigned int v23 = Length;
  if (4096 - v15 < Length && (uint64_t v24 = (char *)malloc(v15 + Length + 1)) != 0)
  {
    uint64_t v25 = v24;
    unsigned int v21 = v23 + 1;
    memcpy(v24, __str, v15);
    uint64_t v26 = v25;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v25 = __str;
  }
  if (CFStringGetCString(v19, &v25[v20], v21, 0x8000100u)) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = 0;
  }
LABEL_14:
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = "failed to format log message";
  }
  _logHandler(v13, v28);
  SafeRelease(v17);
  SafeRelease(v19);
  SafeFree(v26);
}

uint64_t AMAuthInstallDebugWriteObject(char *cf, CFTypeRef a2, uint64_t a3, int a4)
{
  CFTypeRef cfa = 0;
  if (!cf) {
    goto LABEL_19;
  }
  if ((*((_DWORD *)cf + 86) & a4) == 0)
  {
    uint64_t v14 = 0;
LABEL_12:
    CFDataRef Data = 0;
    goto LABEL_20;
  }
  if (!*((void *)cf + 42))
  {
    CFAllocatorRef v21 = CFGetAllocator(cf);
    uint64_t v22 = AMAuthInstallSupportCopyURLToNewTempDirectory(v21, "amai-debug.XXXXXX", cf + 336);
    if (v22)
    {
      uint64_t v14 = v22;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallDebugWriteObject", (uint64_t)"failed to create debug output directory", v23, v24, v25, v26, v27, v42);
      goto LABEL_12;
    }
  }
  CFTypeID v7 = CFGetTypeID(a2);
  if (v7 == CFDataGetTypeID())
  {
    CFDataRef Data = (const __CFData *)CFRetain(a2);
    uint64_t v9 = "";
    if (Data) {
      goto LABEL_6;
    }
LABEL_16:
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  CFTypeID v28 = CFGetTypeID(a2);
  if (v28 != CFDictionaryGetTypeID())
  {
    CFTypeID v29 = CFGetTypeID(a2);
    if (v29 != CFArrayGetTypeID())
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallDebugWriteObject", (uint64_t)"can't prepare data for output to file", v30, v31, v32, v33, v34, v42);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallDebugWriteObject", (uint64_t)"%@", v36, v37, v38, v39, v40, (char)a2);
LABEL_19:
      CFDataRef Data = 0;
      uint64_t v14 = 1;
      goto LABEL_20;
    }
  }
  CFAllocatorRef v35 = CFGetAllocator(cf);
  CFDataRef Data = CFPropertyListCreateData(v35, a2, kCFPropertyListXMLFormat_v1_0, 0, 0);
  uint64_t v9 = ".plist";
  if (!Data) {
    goto LABEL_16;
  }
LABEL_6:
  CFAllocatorRef v10 = CFGetAllocator(cf);
  CFStringRef v11 = CFStringCreateWithFormat(v10, 0, @"%@%s", a3, v9);
  if (v11)
  {
    CFStringRef v12 = v11;
    CFAllocatorRef v13 = CFGetAllocator(cf);
    uint64_t v14 = AMAuthInstallSupportCopyURLWithAppendedComponent(v13, *((const void **)cf + 42), v12, 0, (CFURLRef *)&cfa);
    CFRelease(v12);
    if (!v14)
    {
      CFAllocatorRef v15 = CFGetAllocator(cf);
      uint64_t v14 = AMAuthInstallSupportWriteDataToFileURL(v15, Data, (const __CFURL *)cfa, 0);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallDebugWriteObject", (uint64_t)"debug object written: %@", v16, v17, v18, v19, v20, (char)cfa);
    }
  }
  else
  {
    uint64_t v14 = 2;
  }
LABEL_20:
  SafeRelease(Data);
  SafeRelease(cfa);
  return v14;
}

void AMAuthInstallLogDumpMemory(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  uint64_t v9 = (unsigned __int8 *)a4;
  uint64_t v23 = *MEMORY[0x263EF8340];
  AMAuthInstallLog(a1, a2, (uint64_t)"[%s: %u bytes]", a4, a5, a6, a7, a8, a3);
  if (v8 >= 1)
  {
    int v16 = 0;
    unsigned int v17 = 0;
    unsigned int v18 = v8 + 1;
    do
    {
      int v19 = *v9++;
      int v20 = snprintf(&v22[v17], 64 - v17, "%02x ", v19);
      if (++v16 > 0xF || v18 == 2)
      {
        AMAuthInstallLog(a1, (uint64_t)"", (uint64_t)"%s", v11, v12, v13, v14, v15, (char)v22);
        unsigned int v17 = 0;
        int v16 = 0;
      }
      else
      {
        v17 += v20;
      }
      --v18;
    }
    while (v18 > 1);
  }
  AMAuthInstallLog(a1, (uint64_t)"", (uint64_t)"-----------------------------------------------", v11, v12, v13, v14, v15, v21);
}

uint64_t AMAuthInstallMonetMeasureDbl(const void *a1, CFDataRef theData, __CFDictionary *a3)
{
  BytePtr = (char *)CFDataGetBytePtr(theData);
  CFTypeID v7 = CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  if (Length <= 3)
  {
    AMAuthInstallLog(7, (uint64_t)"_FindSblHeaderInFileData", (uint64_t)"foundMagic=%d", v9, v10, v11, v12, v13, 0);
LABEL_3:
    int v19 = "_FindSblHeaderInFileData";
    int v20 = "this file lacks sufficient magic";
    goto LABEL_4;
  }
  char v22 = 0;
  uint64_t v23 = 0;
  unsigned int v24 = Length >> 2;
  uint64_t v25 = v7 - 4;
  do
  {
    if (*((_DWORD *)v25 + 1) == 1943474228)
    {
      ++v22;
      uint64_t v23 = v25;
      if (*((_DWORD *)v25 + 2) != 2097890138)
      {
        AMAuthInstallLog(7, (uint64_t)"_FindSblHeaderInFileData", (uint64_t)"found SBL header", v9, v10, v11, v12, v13, v31);
        AMAuthInstallLog(7, (uint64_t)"_FindSblHeaderInFileData", (uint64_t)"foundMagic=%d", v26, v27, v28, v29, v30, v22);
        uint64_t v23 = v25;
        goto LABEL_12;
      }
    }
    v25 += 4;
    --v24;
  }
  while (v24);
  AMAuthInstallLog(7, (uint64_t)"_FindSblHeaderInFileData", (uint64_t)"foundMagic=%d", v9, v10, v11, v12, v13, v22);
  if (!v23) {
    goto LABEL_3;
  }
LABEL_12:
  uint64_t v16 = *((unsigned int *)v23 + 5);
  if (v23 + 80 != (const UInt8 *)&BytePtr[v16])
  {
    int v19 = "AMAuthInstallMonetMeasureDbl";
    int v20 = "junk following sbl header";
LABEL_4:
    AMAuthInstallLog(3, (uint64_t)v19, (uint64_t)v20, v14, v15, v16, v17, v18, v32);
    return 10;
  }
  AMAuthInstallMonetSetVersionAndPartialDigest(a1, a3, BytePtr, theData, v23, v16, *((_DWORD *)v23 + 8), @"DBL-Version", @"DBL-PartialDigest");
  return 0;
}

uint64_t AMAuthInstallMonetSetVersionAndPartialDigest(const void *a1, __CFDictionary *a2, char *a3, CFDataRef theData, const void *a5, int a6, int a7, const void *a8, const void *a9)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  memset(v50, 0, sizeof(v50));
  uint64_t v16 = &a3[a6];
  int v17 = *((_DWORD *)v16 + 2);
  int valuePtr = *((_DWORD *)v16 + 1);
  char Length = CFDataGetLength(theData);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetSetVersionAndPartialDigest", (uint64_t)"fileSize=0x%x, srcOffset=0x%x, codeSize=0x%x", v19, v20, v21, v22, v23, Length);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetSetVersionAndPartialDigest", (uint64_t)"version=0x%x, personalizationOffset=0x%x", v24, v25, v26, v27, v28, valuePtr);
  *(_DWORD *)CFUUIDBytes bytes = a7 - v17;
  int v49 = v17 + 80;
  *(_DWORD *)&v50[20] = v17 + a6;
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetSetVersionAndPartialDigest", (uint64_t)"reservationLength=0x%x, codeBytesHashed=0x%x (%s), downloadBytesHashed=0x%x (%s)", v29, v30, v31, v32, v33, a7 - v17);
  char v34 = CFDataGetLength(theData);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetSetVersionAndPartialDigest", (uint64_t)"personalization area=0x%x", v35, v36, v37, v38, v39, v34 - (a6 + a7));
  if ((((v17 + 80) | (v17 + a6)) & 0x3F) == 0)
  {
    image3SHA1Partial(a5, v17 + 80, (int8x16_t *)v50);
    image3SHA1Partial(a3, *(CC_LONG *)&v50[20], (int8x16_t *)&v50[24]);
    CFAllocatorRef v43 = CFGetAllocator(a1);
    CFDataRef v41 = CFDataCreate(v43, bytes, 52);
    if (v41)
    {
      CFAllocatorRef v44 = CFGetAllocator(a1);
      CFNumberRef v40 = CFNumberCreate(v44, kCFNumberSInt32Type, &valuePtr);
      if (v40)
      {
        CFDictionarySetValue(a2, a8, v40);
        CFDictionarySetValue(a2, a9, v41);
        uint64_t v42 = 0;
        goto LABEL_6;
      }
    }
    else
    {
      CFNumberRef v40 = 0;
    }
    uint64_t v42 = 2;
    goto LABEL_6;
  }
  CFNumberRef v40 = 0;
  CFDataRef v41 = 0;
  uint64_t v42 = 10;
LABEL_6:
  SafeRelease(v40);
  SafeRelease(v41);
  return v42;
}

uint64_t AMAuthInstallMonetStitchDbl(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"DBL-Blob");
}

uint64_t AMAuthInstallMonetStitchEBootLoader(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4, const void *a5)
{
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@-Original", a5);
  char v47 = (char)a5;
  CFStringRef v12 = CFStringCreateWithFormat(v10, 0, @"%@-Personalized");
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, @"BasebandFirmware");
  if (!Value)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallMonetStitchFirstStage", (uint64_t)"response lacks %@", v14, v15, v16, v17, v18, (char)@"BasebandFirmware");
LABEL_9:
    uint64_t v45 = 8;
LABEL_12:
    SafeRelease(0);
    goto LABEL_6;
  }
  CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(Value, a5);
  if (!v19)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallMonetStitchFirstStage", (uint64_t)"response lacks %@", v20, v21, v22, v23, v24, (char)a5);
    goto LABEL_9;
  }
  CFDataRef v25 = v19;
  CFIndex Length = CFDataGetLength(v19);
  if (Length >= CFDataGetLength(a2))
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallMonetStitchFirstStage", (uint64_t)"stitch data is larger than file", v27, v28, v29, v30, v31, v47);
    uint64_t v45 = 1;
    goto LABEL_12;
  }
  CFAllocatorRef v32 = CFGetAllocator(a1);
  CFDictionaryRef MutableCopy = CFDataCreateMutableCopy(v32, 0, a2);
  if (!MutableCopy)
  {
    uint64_t v45 = 2;
    goto LABEL_12;
  }
  CFDataRef v34 = MutableCopy;
  MutableBytePtr = CFDataGetMutableBytePtr(MutableCopy);
  CFIndex v36 = CFDataGetLength(v34);
  uint64_t v37 = &MutableBytePtr[v36 - CFDataGetLength(v25)];
  CFDataGetLength(v25);
  CFDataGetLength(v34);
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallMonetStitchFirstStage", (uint64_t)"Stitch Debug: \n StitchAddress: 0x%x \n 64-Byte-Aligned: %s \n 128-Byte-Aligned: %s\n Len(stitchData)=%d Len(newFileData) = %d", v38, v39, v40, v41, v42, (char)v37);
  BytePtr = CFDataGetBytePtr(v25);
  size_t v44 = CFDataGetLength(v25);
  memcpy(v37, BytePtr, v44);
  *a4 = CFRetain(v34);
  SafeRelease(v34);
  AMAuthInstallDebugWriteObject((char *)a1, a2, (uint64_t)v11, 1);
  AMAuthInstallDebugWriteObject((char *)a1, *a4, (uint64_t)v12, 1);
  uint64_t v45 = 0;
LABEL_6:
  SafeRelease(v11);
  SafeRelease(v12);
  return v45;
}

uint64_t AMAuthInstallMonetMeasureEBootLoader(const void *a1, CFDataRef theData, __CFDictionary *a3, const void *a4, const void *a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  *(void *)CFUUIDBytes bytes = 0;
  int8x16_t v40 = 0uLL;
  int v41 = 0;
  int valuePtr = 0;
  if ((unint64_t)CFDataGetLength(theData) >= 0x28)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFDataRef v11 = (CFDataRef)BytePtr;
    CFMutableDictionaryRef theDict = a3;
    if (!BytePtr)
    {
      CFNumberRef v32 = 0;
      goto LABEL_6;
    }
    if (*((_DWORD *)BytePtr + 4) <= CFDataGetLength(theData))
    {
      int Length = CFDataGetLength(theData);
      int v13 = *((_DWORD *)v11 + 5);
      unsigned int v14 = Length - *((_DWORD *)v11 + 4);
      uint64_t v15 = (char *)v11 + v14;
      int valuePtr = *((_DWORD *)v15 + 1);
      int v16 = *((_DWORD *)v15 + 2);
      CFDataGetLength(theData);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetMeasureEBootLoader", (uint64_t)"%@: fileSize=0x%x, srcOffset=0x%x, codeSize=0x%x", v17, v18, v19, v20, v21, (char)a5);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetMeasureEBootLoader", (uint64_t)"%@: version=0x%x, personalizationOffset=0x%x", v22, v23, v24, v25, v26, (char)a4);
      *(_DWORD *)CFUUIDBytes bytes = v13 - v16;
      *(_DWORD *)&UInt8 bytes[4] = v16 + v14;
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetMeasureEBootLoader", (uint64_t)"%@: reservationLength=0x%x, codeBytesHashed=0x%x (%s)", v27, v28, v29, v30, v31, (char)a5);
      if (((v16 + v14) & 0x3F) == 0)
      {
        image3SHA1Partial(v11, v16 + v14, &v40);
        CFAllocatorRef v34 = CFGetAllocator(a1);
        CFDataRef v11 = CFDataCreate(v34, bytes, 28);
        if (v11)
        {
          CFAllocatorRef v35 = CFGetAllocator(a1);
          CFNumberRef v32 = CFNumberCreate(v35, kCFNumberSInt32Type, &valuePtr);
          if (v32)
          {
            CFDictionarySetValue(theDict, a4, v32);
            CFDictionarySetValue(theDict, a5, v11);
            uint64_t v33 = 0;
            goto LABEL_10;
          }
        }
        else
        {
          CFNumberRef v32 = 0;
        }
        uint64_t v33 = 2;
        goto LABEL_10;
      }
    }
  }
  CFNumberRef v32 = 0;
  CFDataRef v11 = 0;
LABEL_6:
  uint64_t v33 = 10;
LABEL_10:
  SafeRelease(v32);
  SafeRelease(v11);
  return v33;
}

uint64_t AMAuthInstallMonetMeasureEDbl(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureEBootLoader(a1, a2, a3, @"eDBL-Version", @"eDBL-PartialDigest");
}

uint64_t AMAuthInstallMonetMeasureRestoreDbl(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureEBootLoader(a1, a2, a3, @"RestoreDBL-Version", @"RestoreDBL-PartialDigest");
}

uint64_t AMAuthInstallMonetMeasureENandprog(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureEBootLoader(a1, a2, a3, @"ENANDPRG-Version", @"ENANDPRG-PartialDigest");
}

uint64_t AMAuthInstallMonetStitchEDbl(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"eDBL-Blob");
}

uint64_t AMAuthInstallMonetStitchRestoreDbl(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"RestoreDBL-Blob");
}

uint64_t AMAuthInstallMonetStitchENandprog(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"ENANDPRG-Blob");
}

uint64_t AMAuthInstallMonetStitchSbl1(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  int v4 = *(_DWORD *)(a1[6] + 4);
  CFAllocatorRef v5 = &kAMAuthInstallTagBbSbl1HTDStitch;
  if (v4 <= 1515744)
  {
    if (v4 <= 938208)
    {
      if (v4 != 241889 && v4 != 520417) {
        goto LABEL_22;
      }
      return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
    }
    BOOL v7 = v4 == 938209;
    int v8 = 1327329;
    goto LABEL_15;
  }
  if (v4 <= 2089184)
  {
    BOOL v7 = v4 == 1515745;
    int v8 = 1700065;
LABEL_15:
    if (!v7 && v4 != v8) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v4 == 2089185)
  {
LABEL_20:
    CFAllocatorRef v5 = &kAMAuthInstallTagBbSbl1HTBStitch;
    return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
  }
  if (v4 != 9781473)
  {
    if (v4 != 2814177)
    {
LABEL_22:
      CFAllocatorRef v5 = &kAMAuthInstallTagBbSbl1Stitch;
      return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
    }
    goto LABEL_20;
  }
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
}

uint64_t AMAuthInstallMonetStitchMisc(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"Misc-HashTableBody-Blob");
}

uint64_t AMAuthInstallMonetStitchRestoreSbl1(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  int v4 = *(_DWORD *)(a1[6] + 4);
  CFAllocatorRef v5 = &kAMAuthInstallTagBbRestoreSbl1HTDStitch;
  if (v4 <= 1515744)
  {
    if (v4 <= 938208)
    {
      if (v4 != 241889 && v4 != 520417) {
        goto LABEL_22;
      }
      return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
    }
    BOOL v7 = v4 == 938209;
    int v8 = 1327329;
    goto LABEL_15;
  }
  if (v4 <= 2089184)
  {
    BOOL v7 = v4 == 1515745;
    int v8 = 1700065;
LABEL_15:
    if (!v7 && v4 != v8) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v4 == 2089185)
  {
LABEL_20:
    CFAllocatorRef v5 = &kAMAuthInstallTagBbRestoreSbl1HTBStitch;
    return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
  }
  if (v4 != 9781473)
  {
    if (v4 != 2814177)
    {
LABEL_22:
      CFAllocatorRef v5 = &kAMAuthInstallTagBbRestoreSbl1Stitch;
      return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
    }
    goto LABEL_20;
  }
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, *v5);
}

uint64_t AMAuthInstallMonetMeasureOsbl(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootImage(a1, a2, a3, @"OSBL-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureBootImage(void *a1, const __CFData *a2, __CFDictionary *a3, const void *a4)
{
  CFDictionaryRef value = 0;
  if (!a1)
  {
    os_log_type_t v6 = 0;
    uint64_t v7 = 1;
    goto LABEL_25;
  }
  os_log_type_t v6 = 0;
  uint64_t v7 = 1;
  if (a4)
  {
    if (a3)
    {
      if (a2)
      {
        uint64_t v9 = a1[6];
        if (v9)
        {
          int v10 = *(_DWORD *)(v9 + 4);
          if (v10 <= 1700064)
          {
            if (v10 > 938208)
            {
              BOOL v11 = v10 == 938209 || v10 == 1327329;
              int v12 = 1515745;
LABEL_17:
              if (!v11 && v10 != v12) {
                goto LABEL_36;
              }
              goto LABEL_22;
            }
            if (v10 != 241889)
            {
              if (v10 != 520417)
              {
LABEL_36:
                CFAllocatorRef v19 = CFGetAllocator(a1);
                DigestForCFDataRef Data = AMAuthInstallCryptoCreateDigestForData(v19, a2, (CFTypeRef *)&value);
                goto LABEL_38;
              }
LABEL_22:
              CFAllocatorRef v14 = CFGetAllocator(a1);
              DigestForCFDataRef Data = AMAuthInstallCryptoCreateDigestForData_SHA384(v14, a2, (CFTypeRef *)&value);
              os_log_type_t v6 = value;
              if (!DigestForData)
              {
                if (!value)
                {
LABEL_40:
                  uint64_t v7 = 2;
                  goto LABEL_25;
                }
                goto LABEL_24;
              }
LABEL_42:
              uint64_t v7 = DigestForData;
              goto LABEL_25;
            }
          }
          else
          {
            if (v10 <= 8343776)
            {
              BOOL v11 = v10 == 1700065 || v10 == 2089185;
              int v12 = 2814177;
              goto LABEL_17;
            }
            if (v10 != 8343777 && v10 != 9781473 && v10 != 9572577) {
              goto LABEL_36;
            }
          }
          CFAllocatorRef v20 = CFGetAllocator(a1);
          DigestForCFDataRef Data = AMAuthInstallCryptoCreateDigestForData_SHA256(v20, a2, (CFTypeRef *)&value);
LABEL_38:
          os_log_type_t v6 = value;
          if (!DigestForData)
          {
            if (!value) {
              goto LABEL_40;
            }
LABEL_24:
            CFDictionarySetValue(a3, a4, v6);
            uint64_t v7 = 0;
            os_log_type_t v6 = value;
            goto LABEL_25;
          }
          goto LABEL_42;
        }
      }
    }
  }
LABEL_25:
  SafeRelease(v6);
  return v7;
}

uint64_t AMAuthInstallMonetMeasureElf(void *a1, CFDataRef theData, __CFDictionary *a3, const void *a4, const void *a5)
{
  if ((unint64_t)CFDataGetLength(theData) > 0x33
    && (uint64_t v15 = CFDataGetBytePtr(theData), *(_DWORD *)v15 == 1179403647))
  {
    int v16 = *((unsigned __int16 *)v15 + 22);
    if (*((_WORD *)v15 + 22))
    {
      uint64_t v17 = 0;
      unsigned int v18 = 0;
      CFAllocatorRef v19 = &v15[*((unsigned int *)v15 + 7)];
      do
      {
        if (*((_DWORD *)v19 + 3) > v18 && (*((_DWORD *)v19 + 6) & 0x7000000) != 0x5000000)
        {
          unsigned int v18 = *((_DWORD *)v19 + 3);
          uint64_t v17 = v19;
        }
        v19 += 32;
        --v16;
      }
      while (v16);
      if (v17)
      {
        CFAllocatorRef v20 = CFGetAllocator(a1);
        CFMutableStringRef Mutable = CFDataCreateMutable(v20, 0);
        if (Mutable)
        {
          CFAllocatorRef v22 = CFGetAllocator(a1);
          uint64_t v23 = CFDataCreateMutable(v22, 0);
          if (v23)
          {
            int v24 = *(_DWORD *)(a1[6] + 4);
            if (v24 <= 1700064)
            {
              if (v24 > 938208)
              {
                if (v24 == 938209 || v24 == 1327329) {
                  goto LABEL_30;
                }
                int v25 = 1515745;
                goto LABEL_29;
              }
              if (v24 != 241889)
              {
                int v25 = 520417;
                goto LABEL_29;
              }
            }
            else
            {
              if (v24 <= 8343776)
              {
                if (v24 == 1700065 || v24 == 2089185) {
                  goto LABEL_30;
                }
                int v25 = 2814177;
LABEL_29:
                if (v24 == v25)
                {
LABEL_30:
                  CFDataSetLength(Mutable, 48);
                  uint64_t v28 = &CFDataGetBytePtr(theData)[*((unsigned int *)v17 + 1)];
                  CC_LONG v29 = *((_DWORD *)v17 + 4);
                  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
                  CC_SHA384(v28, v29, MutableBytePtr);
                  CFDataSetLength(v23, 48);
                  BytePtr = CFDataGetBytePtr(theData);
                  CC_LONG Length = CFDataGetLength(theData);
                  uint64_t v33 = CFDataGetMutableBytePtr(v23);
                  CC_SHA384(BytePtr, Length, v33);
LABEL_32:
                  CFDictionarySetValue(a3, a5, v23);
                  CFDictionarySetValue(a3, a4, Mutable);
                  uint64_t v27 = 0;
                  goto LABEL_33;
                }
LABEL_34:
                CFDataSetLength(Mutable, 20);
                int v41 = &CFDataGetBytePtr(theData)[*((unsigned int *)v17 + 1)];
                CC_LONG v42 = *((_DWORD *)v17 + 4);
                CFAllocatorRef v43 = CFDataGetMutableBytePtr(Mutable);
                CC_SHA1(v41, v42, v43);
                CFDataSetLength(v23, 20);
                size_t v44 = CFDataGetBytePtr(theData);
                CC_LONG v45 = CFDataGetLength(theData);
                uint64_t v46 = CFDataGetMutableBytePtr(v23);
                CC_SHA1(v44, v45, v46);
                goto LABEL_32;
              }
              if (v24 != 8343777 && v24 != 9781473 && v24 != 9572577) {
                goto LABEL_34;
              }
            }
            CFDataSetLength(Mutable, 32);
            CFAllocatorRef v34 = &CFDataGetBytePtr(theData)[*((unsigned int *)v17 + 1)];
            CC_LONG v35 = *((_DWORD *)v17 + 4);
            CFIndex v36 = CFDataGetMutableBytePtr(Mutable);
            CC_SHA256(v34, v35, v36);
            CFDataSetLength(v23, 32);
            uint64_t v37 = CFDataGetBytePtr(theData);
            CC_LONG v38 = CFDataGetLength(theData);
            uint64_t v39 = CFDataGetMutableBytePtr(v23);
            CC_SHA256(v37, v38, v39);
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v27 = 2;
        goto LABEL_33;
      }
    }
    uint64_t v26 = "file lacks a hash section";
  }
  else
  {
    uint64_t v26 = "invalid file format";
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureElf", (uint64_t)v26, v10, v11, v12, v13, v14, v47);
  CFMutableStringRef Mutable = 0;
  uint64_t v23 = 0;
  uint64_t v27 = 10;
LABEL_33:
  SafeRelease(v23);
  SafeRelease(Mutable);
  return v27;
}

uint64_t AMAuthInstallMonetMeasureMav20ElfMBN(const void *a1, CFDataRef theData, __CFDictionary *a3, void *a4, void *a5, const void *a6)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v68 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  *(_OWORD *)CFUUIDBytes bytes = 0u;
  long long v65 = 0u;
  if ((unint64_t)CFDataGetLength(theData) <= 0x33
    || (BytePtr = CFDataGetBytePtr(theData), *(_DWORD *)BytePtr != 1179403647))
  {
    uint64_t v59 = "invalid file format";
    goto LABEL_21;
  }
  unsigned int v18 = BytePtr;
  int v19 = *((unsigned __int16 *)BytePtr + 22);
  if (!*((_WORD *)BytePtr + 22)) {
    goto LABEL_20;
  }
  unsigned int v20 = 0;
  uint64_t v21 = 0;
  CFAllocatorRef v22 = &BytePtr[*((unsigned int *)BytePtr + 7)];
  do
  {
    if (*((_DWORD *)v22 + 3) > v20 && (*((_DWORD *)v22 + 6) & 0x7000000) != 0x5000000)
    {
      uint64_t v21 = v22;
      unsigned int v20 = *((_DWORD *)v22 + 3);
    }
    v22 += 32;
    --v19;
  }
  while (v19);
  if (!v21)
  {
LABEL_20:
    uint64_t v59 = "file lacks a hash section";
LABEL_21:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureMav20ElfMBN", (uint64_t)v59, v12, v13, v14, v15, v16, v61);
    CC_LONG v38 = 0;
    CFDataRef v57 = 0;
    CFStringRef v50 = 0;
    uint64_t v58 = 10;
    goto LABEL_22;
  }
  CFIndex v23 = (*((_DWORD *)v21 + 4) + *((_DWORD *)v21 + 1));
  if (CFDataGetLength(theData) < v23)
  {
    uint64_t v59 = "Hash segment larger than file";
    goto LABEL_21;
  }
  CFDataGetBytePtr(theData);
  int v24 = CFDataGetBytePtr(theData);
  uint64_t v25 = *((unsigned int *)v21 + 1);
  uint64_t v26 = &v24[v25];
  CFIndex v27 = (*(_DWORD *)&v24[v25 + 20] + v25);
  if (CFDataGetLength(theData) < v27)
  {
    uint64_t v59 = "MBN code_size overflows file";
    goto LABEL_21;
  }
  CFIndex v28 = (*((_DWORD *)v26 + 4) + *((_DWORD *)v21 + 1));
  if (CFDataGetLength(theData) < v28)
  {
    uint64_t v59 = "MBN image_size overflows file";
    goto LABEL_21;
  }
  CFIndex v29 = (*((_DWORD *)v26 + 9) + *((_DWORD *)v21 + 1));
  if (CFDataGetLength(theData) < v29)
  {
    uint64_t v59 = "MBN cert_chain_size overflows file";
    goto LABEL_21;
  }
  CFIndex v30 = (*((_DWORD *)v26 + 7) + *((_DWORD *)v21 + 1));
  if (CFDataGetLength(theData) < v30)
  {
    uint64_t v59 = "MBN signature_size overflows file";
    goto LABEL_21;
  }
  if ((*((_DWORD *)v26 + 7) + *((_DWORD *)v26 + 5) + *((_DWORD *)v26 + 9)) + 168 != *((_DWORD *)v21 + 4))
  {
    uint64_t v59 = "MBN segment    components != size of ELF segment.";
    goto LABEL_21;
  }
  CFAllocatorRef v31 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFDataCreateMutable(v31, 0);
  CC_LONG v38 = Mutable;
  if (!Mutable)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureMav20ElfMBN", (uint64_t)"Failed to create hashSectionDigestData", v33, v34, v35, v36, v37, v61);
    CFDataRef v57 = 0;
    CFStringRef v50 = 0;
LABEL_33:
    uint64_t v58 = 2;
    goto LABEL_22;
  }
  uint64_t v62 = a5;
  CFStringRef key = a4;
  CFDataSetLength(Mutable, 48);
  CFDataGetBytePtr(theData);
  CFDataGetMutableBytePtr(v38);
  uint64_t v39 = *((unsigned int *)v21 + 1);
  int8x16_t v40 = CFDataGetBytePtr(theData);
  CFAllocatorRef v41 = CFGetAllocator(a1);
  CFDataRef v42 = CFDataCreate(v41, v26, 168);
  CFDictionarySetValue(a3, a6, v42);
  CFAllocatorRef v43 = CFGetAllocator(a1);
  size_t v44 = CFDataCreateMutable(v43, 0);
  CFStringRef v50 = v44;
  if (!v44)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureMav20ElfMBN", (uint64_t)"Failed to create hashTableContents", v45, v46, v47, v48, v49, (char)v62);
    CFDataRef v57 = 0;
    goto LABEL_33;
  }
  CFDataAppendBytes(v44, &v40[v39 + 168], *((unsigned int *)v26 + 5));
  CFDataSetLength(v50, *((unsigned int *)v26 + 5));
  CFDictionarySetValue(a3, key, v50);
  *(_DWORD *)&UInt8 bytes[4] = *((_DWORD *)v21 + 1);
  *(_DWORD *)CFUUIDBytes bytes = CFDataGetLength(theData) - *(_DWORD *)&bytes[4];
  _SHA384Partial(v18, *(CC_LONG *)&bytes[4], (uint64_t)&bytes[8]);
  CFAllocatorRef v51 = CFGetAllocator(a1);
  CFDataRef v57 = CFDataCreate(v51, bytes, 72);
  if (!v57)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureMav20ElfMBN", (uint64_t)"Failed to create partialDigestData", v52, v53, v54, v55, v56, (char)v62);
    goto LABEL_33;
  }
  CFDictionarySetValue(a3, v62, v57);
  uint64_t v58 = 0;
LABEL_22:
  SafeRelease(v50);
  SafeRelease(v38);
  SafeRelease(v57);
  return v58;
}

int8x16_t _SHA384Partial(const void *a1, CC_LONG a2, uint64_t a3)
{
  memset(&v8, 0, sizeof(v8));
  CC_SHA384_Init(&v8);
  CC_SHA384_Update(&v8, a1, a2);
  for (uint64_t i = 0; i != 8; i += 2)
  {
    int8x16_t result = vrev64q_s8(*(int8x16_t *)&v8.hash[i]);
    *(int8x16_t *)(a3 + i * 8) = result;
  }
  return result;
}

uint64_t AMAuthInstallMonetMeasureElfMBN(void *a1, CFDataRef theData, __CFDictionary *a3, void *a4, const void *a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v62 = 0;
  *(_OWORD *)CFUUIDBytes bytes = 0u;
  long long v61 = 0u;
  uint64_t v59 = 0;
  memset(v58, 0, sizeof(v58));
  if ((unint64_t)CFDataGetLength(theData) > 0x33
    && (uint64_t v15 = CFDataGetBytePtr(theData), *(_DWORD *)v15 == 1179403647))
  {
    uint64_t v16 = v15;
    int v17 = *((unsigned __int16 *)v15 + 22);
    if (!*((_WORD *)v15 + 22)) {
      goto LABEL_19;
    }
    unsigned int v18 = 0;
    unsigned int v19 = 0;
    unsigned int v20 = &v15[*((unsigned int *)v15 + 7)];
    do
    {
      if (*((_DWORD *)v20 + 3) > v19 && (*((_DWORD *)v20 + 6) & 0x7000000) != 0x5000000)
      {
        unsigned int v19 = *((_DWORD *)v20 + 3);
        unsigned int v18 = v20;
      }
      v20 += 32;
      --v17;
    }
    while (v17);
    if (v18)
    {
      CFIndex v21 = (*((_DWORD *)v18 + 4) + *((_DWORD *)v18 + 1));
      if (CFDataGetLength(theData) < v21)
      {
        size_t v44 = "Hash segment larger than file";
      }
      else
      {
        BytePtr = CFDataGetBytePtr(theData);
        uint64_t v23 = *((unsigned int *)v18 + 1);
        int v24 = &BytePtr[v23];
        CFIndex v25 = (*(_DWORD *)&BytePtr[v23 + 20] + v23);
        if (CFDataGetLength(theData) < v25)
        {
          size_t v44 = "MBN code_size overflows file";
        }
        else
        {
          CFIndex v26 = (*((_DWORD *)v24 + 4) + *((_DWORD *)v18 + 1));
          if (CFDataGetLength(theData) < v26)
          {
            size_t v44 = "MBN image_size overflows file";
          }
          else
          {
            CFIndex v27 = (*((_DWORD *)v24 + 9) + *((_DWORD *)v18 + 1));
            if (CFDataGetLength(theData) < v27)
            {
              size_t v44 = "MBN cert_chain_size overflows file";
            }
            else
            {
              CFIndex v28 = (*((_DWORD *)v24 + 7) + *((_DWORD *)v18 + 1));
              if (CFDataGetLength(theData) < v28)
              {
                size_t v44 = "MBN signature_size overflows file";
              }
              else
              {
                if ((*((_DWORD *)v24 + 7) + *((_DWORD *)v24 + 5) + *((_DWORD *)v24 + 9)) + 40 == *((_DWORD *)v18 + 4))
                {
                  CFAllocatorRef v29 = CFGetAllocator(a1);
                  CFMutableStringRef Mutable = CFDataCreateMutable(v29, 0);
                  uint64_t v36 = Mutable;
                  if (Mutable)
                  {
                    CFStringRef key = a4;
                    uint64_t v37 = a5;
                    if (*(_DWORD *)(a1[6] + 4) == 520417)
                    {
                      CFDataSetLength(Mutable, 48);
                      CC_LONG v38 = &CFDataGetBytePtr(theData)[*((unsigned int *)v18 + 1)];
                      CC_LONG v39 = *((_DWORD *)v24 + 5) + 40;
                      MutableBytePtr = CFDataGetMutableBytePtr(v36);
                      CC_SHA384(v38, v39, MutableBytePtr);
                      DWORD1(v58[0]) = *((_DWORD *)v18 + 1) + *((_DWORD *)v24 + 5) + 40;
                      LODWORD(v58[0]) = CFDataGetLength(theData) - DWORD1(v58[0]);
                      _SHA384Partial(v16, DWORD1(v58[0]), (uint64_t)v58 + 8);
                      CFAllocatorRef v41 = CFGetAllocator(a1);
                      CFDataRef v42 = (UInt8 *)v58;
                      CFIndex v43 = 72;
                    }
                    else
                    {
                      CFDataSetLength(Mutable, 32);
                      uint64_t v47 = &CFDataGetBytePtr(theData)[*((unsigned int *)v18 + 1)];
                      CC_LONG v48 = *((_DWORD *)v24 + 5) + 40;
                      uint64_t v49 = CFDataGetMutableBytePtr(v36);
                      CC_SHA256(v47, v48, v49);
                      *(_DWORD *)&UInt8 bytes[4] = *((_DWORD *)v18 + 1) + *((_DWORD *)v24 + 5) + 40;
                      *(_DWORD *)CFUUIDBytes bytes = CFDataGetLength(theData) - *(_DWORD *)&bytes[4];
                      _SHA256Partial(v16, *(CC_LONG *)&bytes[4], (uint64_t)&bytes[8]);
                      CFAllocatorRef v41 = CFGetAllocator(a1);
                      CFDataRef v42 = bytes;
                      CFIndex v43 = 40;
                    }
                    CFDataRef v45 = CFDataCreate(v41, v42, v43);
                    if (v45)
                    {
                      CFDictionarySetValue(a3, key, v36);
                      CFDictionarySetValue(a3, v37, v45);
                      uint64_t v46 = 0;
                      goto LABEL_24;
                    }
                    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureElfMBN", (uint64_t)"Failed to create partialDigestData", v50, v51, v52, v53, v54, v56);
                  }
                  else
                  {
                    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureElfMBN", (uint64_t)"Failed to create hashSectionDigestData", v31, v32, v33, v34, v35, v56);
                    CFDataRef v45 = 0;
                  }
                  uint64_t v46 = 2;
                  goto LABEL_24;
                }
                size_t v44 = "MBN segment components != size of ELF segment.";
              }
            }
          }
        }
      }
    }
    else
    {
LABEL_19:
      size_t v44 = "file lacks a hash section";
    }
  }
  else
  {
    size_t v44 = "invalid file format";
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetMeasureElfMBN", (uint64_t)v44, v10, v11, v12, v13, v14, v56);
  uint64_t v36 = 0;
  CFDataRef v45 = 0;
  uint64_t v46 = 10;
LABEL_24:
  SafeRelease(v36);
  SafeRelease(v45);
  return v46;
}

int8x16_t _SHA256Partial(const void *a1, CC_LONG a2, uint64_t a3)
{
  memset(&v8, 0, sizeof(v8));
  CC_SHA256_Init(&v8);
  CC_SHA256_Update(&v8, a1, a2);
  for (uint64_t i = 0; i != 8; i += 4)
  {
    int8x16_t result = vrev32q_s8(*(int8x16_t *)&v8.hash[i]);
    *(int8x16_t *)(a3 + i * 4) = result;
  }
  return result;
}

uint64_t AMAuthInstallMonetMeasureAmss(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"AMSS-HashTableDigest", @"AMSS-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureApps(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"APPS-HashTableDigest", @"APPS-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureDsp1(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"DSP1-HashTableDigest", @"DSP1-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureQdsp6(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"QDSP6SW-HashTableDigest", @"QDSP6SW-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureRpmElf(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"RPM-HashTableDigest", @"RPM-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureDsp2(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"DSP2-HashTableDigest", @"DSP2-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureDsp3(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"DSP3-HashTableDigest", @"DSP3-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureTz(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"TZ-HashTableDigest", @"TZ-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureMba(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"MBA-HashTableDigest", @"MBA-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureWdtElf(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElf(a1, a2, a3, @"WDT-HashTableDigest", @"WDT-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureSbl1(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootSbl(a1, a2, a3, @"SBL1-Version", @"SBL1-PartialDigest");
}

uint64_t AMAuthInstallMonetMeasureBootSbl(void *a1, CFDataRef theData, __CFDictionary *a3, const void *a4, const void *a5)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v11 = CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  if (Length <= 3)
  {
    AMAuthInstallLog(7, (uint64_t)"_FindSbl1HeaderInFileData", (uint64_t)"foundMagic=%d", v13, v14, v15, v16, v17, 0);
LABEL_3:
    uint64_t v23 = "_FindSbl1HeaderInFileData";
    int v24 = "this file lacks sufficient magic";
    goto LABEL_4;
  }
  char v26 = 0;
  CFIndex v27 = 0;
  unsigned int v28 = Length >> 2;
  CFAllocatorRef v29 = v11 - 4;
  do
  {
    if (*((_DWORD *)v29 + 1) == 1943474228)
    {
      ++v26;
      CFIndex v27 = v29;
      if (*((_DWORD *)v29 + 2) != 2097890138)
      {
        AMAuthInstallLog(7, (uint64_t)"_FindSbl1HeaderInFileData", (uint64_t)"found SBL header", v13, v14, v15, v16, v17, v35);
        AMAuthInstallLog(7, (uint64_t)"_FindSbl1HeaderInFileData", (uint64_t)"foundMagic=%d", v30, v31, v32, v33, v34, v26);
        CFIndex v27 = v29;
        goto LABEL_13;
      }
    }
    v29 += 4;
    --v28;
  }
  while (v28);
  AMAuthInstallLog(7, (uint64_t)"_FindSbl1HeaderInFileData", (uint64_t)"foundMagic=%d", v13, v14, v15, v16, v17, v26);
  if (!v27) {
    goto LABEL_3;
  }
LABEL_13:
  if ((unint64_t)CFDataGetLength(theData) < 0x50
    || *((_DWORD *)v27 + 7) > CFDataGetLength(theData))
  {
    return 10;
  }
  uint64_t v20 = *((unsigned int *)v27 + 5);
  if (v27 + 80 != &BytePtr[v20])
  {
    uint64_t v23 = "AMAuthInstallMonetMeasureBootSbl";
    int v24 = "junk following sbl1 header";
LABEL_4:
    AMAuthInstallLog(3, (uint64_t)v23, (uint64_t)v24, v18, v19, v20, v21, v22, v36);
    return 10;
  }
  return AMAuthInstallMonetSetVersionAndPartialDigestForSBL(a1, a3, (uint64_t)BytePtr, theData, v27, v20, *((_DWORD *)v27 + 8), a4, a5);
}

uint64_t AMAuthInstallMonetMeasureRestoreSbl1(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootSbl(a1, a2, a3, @"RestoreSBL1-Version", @"RestoreSBL1-PartialDigest");
}

uint64_t AMAuthInstallMonetMeasureSbl1Elf(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElfMBN(a1, a2, a3, @"SBL1-HashTableDigest", @"SBL1-PartialDigest");
}

uint64_t AMAuthInstallMonetMeasureRestoreSbl1Elf(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureElfMBN(a1, a2, a3, @"RestoreSBL1-HashTableDigest", @"RestoreSBL1-PartialDigest");
}

uint64_t AMAuthInstallMonetMeasureMav20Sbl1Elf(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureMav20ElfMBN(a1, a2, a3, @"SBL1-HashTableBody", @"SBL1-PartialDigest", @"SBL1-HashTableHeaderDefault");
}

uint64_t AMAuthInstallMonetMeasureMav20MiscElf(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureMav20ElfMBN(a1, a2, a3, @"Misc-HashTableBody", @"Misc-PartialDigest", @"Misc-HashTableHeaderDefault");
}

uint64_t AMAuthInstallMonetMeasureMav20RestoreSbl1Elf(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureMav20ElfMBN(a1, a2, a3, @"RestoreSBL1-HashTableBody", @"RestoreSBL1-PartialDigest", @"RestoreSBL1-HashTableHeaderDefault");
}

uint64_t AMAuthInstallMonetSetVersionAndPartialDigestForSBL(void *a1, __CFDictionary *a2, uint64_t a3, CFDataRef theData, const void *a5, unsigned int a6, int a7, const void *a8, const void *a9)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v53 = 0;
  int v55 = 0;
  int8x16_t v54 = 0uLL;
  uint64_t v52 = 0;
  *(_OWORD *)CFUUIDBytes bytes = 0u;
  long long v51 = 0u;
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  int v13 = *(_DWORD *)(a1[6] + 4);
  int v14 = 128;
  if (v13 <= 1515744)
  {
    BOOL v15 = v13 == 520417 || v13 == 938209;
    int v16 = 1327329;
  }
  else if (v13 > 2089184)
  {
    BOOL v15 = v13 == 2089185;
    int v16 = 2814177;
  }
  else
  {
    BOOL v15 = v13 == 1515745;
    int v16 = 1700065;
  }
  if (!v15 && v13 != v16) {
    int v14 = 64;
  }
  CFNumberRef v18 = 0;
  int valuePtr = 0;
  uint64_t v19 = 1;
  if (!a2 || !a3 || !theData || !a5 || !a8)
  {
    CFDataRef v20 = 0;
    goto LABEL_43;
  }
  CFDataRef v20 = 0;
  if (a9)
  {
    uint64_t v21 = a3 + a6;
    int v22 = *(_DWORD *)(v21 + 8);
    int valuePtr = *(_DWORD *)(v21 + 4);
    char Length = CFDataGetLength(theData);
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetSetVersionAndPartialDigestForSBL", (uint64_t)"fileSize=0x%x, srcOffset=0x%x, codeSize=0x%x", v24, v25, v26, v27, v28, Length);
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetSetVersionAndPartialDigestForSBL", (uint64_t)"version=0x%x, personalizationOffset=0x%x", v29, v30, v31, v32, v33, valuePtr);
    LODWORD(v53) = a7 - v22;
    HIDWORD(v53) = v22 + 80;
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallMonetSetVersionAndPartialDigestForSBL", (uint64_t)"reservationLength=0x%x, codeBytesHashed=0x%x (%s) byte_multiple=%d", v34, v35, v36, v37, v38, a7 - v22);
    if (((v22 + 80) & (v14 - 1)) != 0)
    {
      CFNumberRef v18 = 0;
      CFDataRef v20 = 0;
      uint64_t v19 = 10;
      goto LABEL_43;
    }
    int v39 = *(_DWORD *)(a1[6] + 4);
    if (v39 <= 1700064)
    {
      if (v39 > 938208)
      {
        if (v39 == 938209 || v39 == 1327329) {
          goto LABEL_38;
        }
        int v40 = 1515745;
        goto LABEL_37;
      }
      if (v39 != 241889)
      {
        int v40 = 520417;
        goto LABEL_37;
      }
    }
    else
    {
      if (v39 <= 8343776)
      {
        if (v39 == 1700065 || v39 == 2089185) {
          goto LABEL_38;
        }
        int v40 = 2814177;
LABEL_37:
        if (v39 == v40)
        {
LABEL_38:
          *(_DWORD *)CFUUIDBytes bytes = a7 - v22;
          *(_DWORD *)&UInt8 bytes[4] = v22 + 80;
          _SHA384Partial(a5, 0, (uint64_t)v48 + 8);
          CFAllocatorRef v41 = CFGetAllocator(a1);
          CFDataRef v42 = (UInt8 *)v48;
          CFIndex v43 = 72;
          goto LABEL_40;
        }
        goto LABEL_44;
      }
      if (v39 != 8343777 && v39 != 9781473 && v39 != 9572577)
      {
LABEL_44:
        image3SHA1Partial(a5, v22 + 80, &v54);
        CFAllocatorRef v41 = CFGetAllocator(a1);
        CFDataRef v42 = (UInt8 *)&v53;
        CFIndex v43 = 28;
LABEL_40:
        CFDataRef v20 = CFDataCreate(v41, v42, v43);
        if (v20)
        {
          CFAllocatorRef v44 = CFGetAllocator(a1);
          CFNumberRef v18 = CFNumberCreate(v44, kCFNumberSInt32Type, &valuePtr);
          if (v18)
          {
            CFDictionarySetValue(a2, a8, v18);
            CFDictionarySetValue(a2, a9, v20);
            uint64_t v19 = 0;
            goto LABEL_43;
          }
        }
        else
        {
          CFNumberRef v18 = 0;
        }
        uint64_t v19 = 2;
        goto LABEL_43;
      }
    }
    *(_DWORD *)CFUUIDBytes bytes = a7 - v22;
    *(_DWORD *)&UInt8 bytes[4] = v22 + 80;
    _SHA256Partial(a5, v22 + 80, (uint64_t)&bytes[8]);
    CFAllocatorRef v41 = CFGetAllocator(a1);
    CFDataRef v42 = bytes;
    CFIndex v43 = 40;
    goto LABEL_40;
  }
LABEL_43:
  SafeRelease(v18);
  SafeRelease(v20);
  return v19;
}

uint64_t AMAuthInstallMonetMeasureSbl2(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootImage(a1, a2, a3, @"SBL2-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureAcdb(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootImage(a1, a2, a3, @"ACDB-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureWdt(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootImage(a1, a2, a3, @"WDT-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureBBCFG(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootImage(a1, a2, a3, @"BBCFG-DownloadDigest");
}

uint64_t AMAuthInstallMonetMeasureRPM(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallMonetMeasureBootImage(a1, a2, a3, @"RPM-DownloadDigest");
}

uint64_t AMAuthInstallMonetStitchCopyIfPersonalized(uint64_t a1, CFTypeRef cf, uint64_t a3, void *a4)
{
  if (!a1) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4) {
    return 1;
  }
  if (!*(void *)(v4 + 24)) {
    return 0;
  }
  CFTypeRef v6 = CFRetain(cf);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AMAuthInstallMonetMeasurePartitionTable(const void *a1, const __CFData *a2, __CFDictionary *a3)
{
  memset(&v13, 0, sizeof(v13));
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFDataCreateMutable(v5, 20);
  uint64_t v7 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, 20);
    CC_SHA1_Init(&v13);
    BytePtr = CFDataGetBytePtr(a2);
    CC_LONG Length = CFDataGetLength(a2);
    CC_SHA1_Update(&v13, BytePtr, Length);
    MutableBytePtr = CFDataGetMutableBytePtr(v7);
    CC_SHA1_Final(MutableBytePtr, &v13);
    CFDictionarySetValue(a3, @"PartitionTable-Digest", v7);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 2;
  }
  SafeRelease(v7);
  return v11;
}

uint64_t AMAuthInstallMonetStitchPartitionTable(uint64_t a1, CFTypeRef cf, uint64_t a3, void *a4)
{
  if (!a1) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4) {
    return 1;
  }
  if (!*(void *)(v4 + 24)) {
    return 0;
  }
  CFTypeRef v6 = CFRetain(cf);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AMAuthInstallBasebandSetDevelopmentFusingProgram(uint64_t a1, const void *a2)
{
  uint64_t result = 1;
  if (a1)
  {
    if (a2)
    {
      SafeRelease(*(CFTypeRef *)(a1 + 176));
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallBasebandSetDevelopmentFusingProgram", (uint64_t)"Setting custom fusing program. Server will not be contacted to request fusing program.", v5, v6, v7, v8, v9, v11);
      CFTypeRef v10 = CFRetain(a2);
      uint64_t result = 0;
      *(void *)(a1 + 176) = v10;
      *(_WORD *)(a1 + 184) = 256;
    }
  }
  return result;
}

uint64_t AMAuthInstallMonetFuseIfNecessary(uint64_t a1, const void *a2, __CFDictionary *a3)
{
  uint64_t v3 = a1;
  char v55 = 0;
  CFErrorRef error = 0;
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    uint64_t v36 = 0;
    goto LABEL_26;
  }
  if (!*(void *)(a1 + 48))
  {
LABEL_25:
    uint64_t v36 = 0;
    uint64_t v3 = 0;
LABEL_26:
    CFDataRef v25 = 0;
    uint64_t v35 = 1;
    goto LABEL_36;
  }
  uint64_t IsFused = AMAuthInstallBasebandIsFused(a1, &v55);
  if (IsFused)
  {
LABEL_37:
    uint64_t v35 = IsFused;
    goto LABEL_35;
  }
  if (v55 && *(_DWORD *)(*(void *)(v3 + 48) + 96) != 2)
  {
    if (*(void *)(v3 + 176))
    {
      CFAllocatorRef v19 = CFGetAllocator((CFTypeRef)v3);
      CFDataRef v25 = CFPropertyListCreateData(v19, *(CFPropertyListRef *)(v3 + 176), kCFPropertyListXMLFormat_v1_0, 0, &error);
      if (v25)
      {
        CFDictionarySetValue(a3, @"fusingprogram.plist", v25);
LABEL_22:
        uint64_t v35 = 0;
LABEL_23:
        uint64_t v36 = 0;
        uint64_t v3 = 0;
        goto LABEL_36;
      }
      long long v51 = "failed to convert fusing program to xml";
LABEL_41:
      uint64_t v35 = 3;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetFuseIfNecessary", (uint64_t)v51, v20, v21, v22, v23, v24, v52);
      goto LABEL_23;
    }
    uint64_t v35 = 0;
LABEL_35:
    uint64_t v36 = 0;
    uint64_t v3 = 0;
    CFDataRef v25 = 0;
    goto LABEL_36;
  }
  if (*(void *)(v3 + 424))
  {
    CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)v3);
    CFDictionaryRef ValueForKeyWithFormat = AMAuthInstallSupportGetValueForKeyWithFormat(v12, *(const __CFDictionary **)(v3 + 424), @"%@.%@", v13, v14, v15, v16, v17, (char)@"BbRequestEntries");
    if (!ValueForKeyWithFormat) {
      goto LABEL_24;
    }
  }
  else
  {
    CFDictionaryRef ValueForKeyWithFormat = (const __CFDictionary *)*MEMORY[0x263EFFB38];
    if (!*MEMORY[0x263EFFB38])
    {
LABEL_24:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetFuseIfNecessary", (uint64_t)"baseband fusing is being attempted but the Factory Debug entitlement was not requested. Please enable Factory Debug to fuse.", v7, v8, v9, v10, v11, v52);
      goto LABEL_25;
    }
  }
  if (!CFBooleanGetValue(ValueForKeyWithFormat)) {
    goto LABEL_24;
  }
  if (!*(unsigned char *)(v3 + 185))
  {
    if (*(unsigned char *)(v3 + 184))
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetFuseIfNecessary", (uint64_t)"fusing program request prohibited", v7, v8, v9, v10, v11, v52);
      goto LABEL_46;
    }
    uint64_t IsFused = AMAuthInstallFusingProgramRequest((void *)v3, v26, v27, v7, v8, v9, v10, v11);
    if (IsFused) {
      goto LABEL_37;
    }
  }
  if (!*(void *)(v3 + 176))
  {
LABEL_46:
    uint64_t v36 = 0;
    uint64_t v3 = 0;
    CFDataRef v25 = 0;
    uint64_t v35 = 14;
    goto LABEL_36;
  }
  CFAllocatorRef v28 = CFGetAllocator((CFTypeRef)v3);
  CFDataRef v25 = CFPropertyListCreateData(v28, *(CFPropertyListRef *)(v3 + 176), kCFPropertyListXMLFormat_v1_0, 0, &error);
  if (!v25)
  {
    char v52 = (char)error;
    long long v51 = "failed to convert fusing program to xml %@";
    goto LABEL_41;
  }
  CFDictionarySetValue(a3, @"fusingprogram.plist", v25);
  SafeRelease(error);
  uint64_t v34 = *(void *)(v3 + 48);
  if (*(void *)(v34 + 24) && *(void *)(v34 + 16))
  {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallMonetFuseIfNecessary", (uint64_t)"baseband appears to be unfused and booted; will provide fusing program and fully personalized stack",
      v29,
      v30,
      v31,
      v32,
      v33,
      v52);
    goto LABEL_22;
  }
  CFAllocatorRef v37 = CFGetAllocator((CFTypeRef)v3);
  uint64_t DictionaryFromURL = BbfwCreateDictionaryFromURL(v37, a2, (CFTypeRef *)&theDict);
  if (DictionaryFromURL)
  {
    uint64_t v35 = DictionaryFromURL;
    goto LABEL_23;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  uint64_t v36 = (const void **)malloc(8 * Count);
  if (!v36)
  {
    uint64_t v3 = 0;
    goto LABEL_44;
  }
  uint64_t v3 = (uint64_t)malloc(8 * Count);
  if (!v3)
  {
LABEL_44:
    uint64_t v35 = 2;
    goto LABEL_36;
  }
  CFDictionaryGetKeysAndValues(theDict, v36, (const void **)v3);
  if (Count >= 1)
  {
    CFDataRef v45 = v36;
    uint64_t v46 = (const void **)v3;
    do
    {
      CC_LONG v48 = *v45++;
      uint64_t v47 = v48;
      uint64_t v49 = *v46++;
      CFDictionarySetValue(a3, v47, v49);
      --Count;
    }
    while (Count);
  }
  AMAuthInstallLog(5, (uint64_t)"AMAuthInstallMonetFuseIfNecessary", (uint64_t)"baseband appears to be unfused and unbootable; will provide fusing program and unpersonalized stack",
    v40,
    v41,
    v42,
    v43,
    v44,
    v52);
  uint64_t v35 = 0;
LABEL_36:
  SafeRelease(v25);
  SafeRelease(theDict);
  SafeRelease(0);
  SafeFree(v36);
  SafeFree((void *)v3);
  SafeRelease(error);
  return v35;
}

uint64_t AMAuthInstallMonetCopyNextComponentName(uint64_t a1, void *a2)
{
  char v8 = 0;
  if (!a1 || !*(void *)(a1 + 48)) {
    return 1;
  }
  uint64_t result = AMAuthInstallBasebandIsFused(a1, &v8);
  if (!result)
  {
    if (v8) {
      uint64_t v5 = @"boot.bbfw";
    }
    else {
      uint64_t v5 = @"preflash.bbfw";
    }
    if (*(void *)(*(void *)(a1 + 48) + 24)) {
      uint64_t v6 = @"stack.bbfw";
    }
    else {
      uint64_t v6 = v5;
    }
    CFTypeRef v7 = CFRetain(v6);
    uint64_t result = 0;
    *a2 = v7;
  }
  return result;
}

uint64_t AMAuthInstallMonetCreateReversedMEID(const __CFAllocator *a1, CFDataRef theData, CFTypeRef *a3)
{
  CFIndex Length = CFDataGetLength(theData);
  CFDataRef v7 = 0;
  uint64_t v8 = 1;
  if (theData && Length == 7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 6;
    do
      bytes[v10--] = CFDataGetBytePtr(theData)[v9++];
    while (v9 != 7);
    CFDataRef v11 = CFDataCreate(a1, bytes, 7);
    CFDataRef v7 = v11;
    if (v11)
    {
      uint64_t v8 = 0;
      *a3 = CFRetain(v11);
    }
    else
    {
      uint64_t v8 = 2;
    }
  }
  SafeRelease(v7);
  return v8;
}

uint64_t AMAuthInstallMonetCreateMEIDFromString(int a1, CFStringRef theString, CFTypeRef *a3)
{
  CFStringRef v4 = theString;
  CFTypeRef cf = 0;
  CFIndex Length = CFStringGetLength(theString);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (Length == 15)
  {
    v17.CFIndex length = CFStringGetLength(v4) - 1;
    v17.CFIndex location = 0;
    CFStringRef v7 = CFStringCreateWithSubstring(v6, v4, v17);
    CFStringRef v4 = v7;
  }
  else
  {
    CFStringRef v7 = 0;
  }
  uint64_t v8 = AMAuthInstallSupportCopyDataFromHexString((int)v6, v4, (uint64_t *)&cf);
  if (v8)
  {
    uint64_t v14 = v8;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetCreateMEIDFromString", (uint64_t)"failed to convert meid (%@) to data", v9, v10, v11, v12, v13, (char)v4);
  }
  else if (cf)
  {
    uint64_t v14 = 0;
    *a3 = CFRetain(cf);
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetCreateMEIDFromString", (uint64_t)"meid (%@) tempData is NULL", v9, v10, v11, v12, v13, (char)v4);
    uint64_t v14 = 14;
  }
  SafeRelease(v7);
  SafeRelease(cf);
  return v14;
}

uint64_t AMAuthInstallMonetCreateReversedMEIDFromString(int a1, const __CFString *a2, CFTypeRef *a3)
{
  char v4 = (char)a2;
  CFDataRef theData = 0;
  CFDataRef v27 = 0;
  uint64_t MEIDFromString = AMAuthInstallMonetCreateMEIDFromString(a1, a2, (CFTypeRef *)&v27);
  if (MEIDFromString)
  {
    uint64_t v24 = MEIDFromString;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetCreateReversedMEIDFromString", (uint64_t)"failed to convert meid (%@) to data", v6, v7, v8, v9, v10, v4);
    CFDataRef v18 = 0;
    CFDataRef v11 = v27;
    goto LABEL_6;
  }
  CFDataRef v11 = v27;
  if (!v27)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetCreateReversedMEIDFromString", (uint64_t)"meid (%@) tempData is NULL", v6, v7, v8, v9, v10, v4);
    CFDataRef v18 = 0;
LABEL_11:
    uint64_t v24 = 14;
    goto LABEL_6;
  }
  uint64_t ReversedMEID = AMAuthInstallMonetCreateReversedMEID((const __CFAllocator *)*MEMORY[0x263EFFB08], v27, (CFTypeRef *)&theData);
  if (ReversedMEID)
  {
    uint64_t v24 = ReversedMEID;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetCreateReversedMEIDFromString", (uint64_t)"failed to reverse meid (%@)", v13, v14, v15, v16, v17, v4);
    CFDataRef v18 = theData;
    goto LABEL_6;
  }
  CFDataRef v18 = theData;
  if (!theData)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallMonetCreateReversedMEIDFromString", (uint64_t)"meid (%@) reversedData is NULL", v13, v14, v15, v16, v17, v4);
    goto LABEL_11;
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(v18);
  AMAuthInstallLogDumpMemory(7, (uint64_t)"AMAuthInstallMonetCreateReversedMEIDFromString", (char)"reversed meid", (uint64_t)BytePtr, Length, v21, v22, v23);
  uint64_t v24 = 0;
  *a3 = CFRetain(v18);
LABEL_6:
  SafeRelease(0);
  SafeRelease(v11);
  SafeRelease(v18);
  return v24;
}

uint64_t AMAuthInstallPlatformCreateSoftLink(const __CFURL *a1, CFURLRef url)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024)
    || !CFURLGetFileSystemRepresentation(a1, 1u, v16, 1024))
  {
    return 3;
  }
  uint64_t result = symlink((const char *)buffer, (const char *)v16);
  if (result)
  {
    char v4 = __error();
    char v5 = strerror(*v4);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformCreateSoftLink", (uint64_t)"failed to create link: %s", v6, v7, v8, v9, v10, v5);
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformCreateSoftLink", (uint64_t)"source path: %s; dest path: %s",
      v11,
      v12,
      v13,
      v14,
      v15,
      (char)buffer);
    return 4;
  }
  return result;
}

uint64_t AMAuthInstallPlatformIsRegularFile(const __CFURL *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  memset(&v2, 0, sizeof(v2));
  uint64_t result = CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024);
  if (result)
  {
    stat((const char *)buffer, &v2);
    return (v2.st_mode & 0xF000) == 0x8000;
  }
  return result;
}

char *AMAuthInstallPlatformMakeDirectoryForURL(const __CFURL *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  strcpy(__delim, "/");
  bzero(__str, 0x400uLL);
  if (!CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024)) {
    return (char *)3;
  }
  size_t v2 = strlen((const char *)buffer);
  if (!CFURLHasDirectoryPath(a1))
  {
    if (v2)
    {
      do
      {
        size_t v3 = v2 - 1;
        BOOL v4 = __delim[v2 + 1] == 47 || v2 == 1;
        --v2;
      }
      while (!v4);
    }
    else
    {
      size_t v3 = 0;
    }
    buffer[v3] = 0;
  }
  __stringp = (char *)buffer;
  uint64_t result = strsep(&__stringp, __delim);
  if (result)
  {
    uint64_t v6 = "Could not stat (%s)";
    while (1)
    {
      memset(&v19, 0, sizeof(v19));
      if (*result)
      {
        snprintf(__str, 0x400uLL, "%s%c%s", __str, 47, result);
        if (stat(__str, &v19) == -1)
        {
          if (*__error() != 2) {
            goto LABEL_23;
          }
          if (mkdir(__str, 0x1EDu) == -1 && *__error() != 17) {
            break;
          }
        }
      }
      uint64_t result = strsep(&__stringp, __delim);
      if (!result) {
        return result;
      }
    }
    uint64_t v6 = "Could not mkdir (%s)";
LABEL_23:
    uint64_t v7 = __error();
    char v8 = strerror(*v7);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformMakeDirectoryForURL", (uint64_t)v6, v9, v10, v11, v12, v13, v8);
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformMakeDirectoryForURL", (uint64_t)"%s", v14, v15, v16, v17, v18, (char)__str);
    return (char *)4;
  }
  return result;
}

uint64_t AMAuthInstallPlatformRemoveDirectory(const __CFURL *a1)
{
  char v1 = (char)a1;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024)) {
    return 3;
  }
  int v17 = 0;
  size_t v2 = &v17;
  uint64_t v3 = _AMAuthInstallPlatformRemoveDirectoryRecursion((const char *)buffer, &v17);
  if (v3)
  {
    uint64_t v4 = v3;
  }
  else
  {
    if (!rmdir((const char *)buffer)) {
      return 0;
    }
    uint64_t v4 = 4;
    size_t v2 = __error();
  }
  char v5 = strerror(*v2);
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformRemoveDirectory", (uint64_t)"failed to remove directory: %s", v6, v7, v8, v9, v10, v5);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformRemoveDirectory", (uint64_t)"url=%@, path=%s", v11, v12, v13, v14, v15, v1);
  return v4;
}

uint64_t _AMAuthInstallPlatformRemoveDirectoryRecursion(const char *a1, int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = opendir(a1);
  if (!v4) {
    goto LABEL_13;
  }
  char v5 = v4;
  for (uint64_t i = readdir(v4); i; uint64_t i = readdir(v5))
  {
    d_name = i->d_name;
    if (strncmp(i->d_name, ".", 0x400uLL))
    {
      if (strncmp(d_name, "..", 0x400uLL))
      {
        snprintf(__str, 0x400uLL, "%s%c%s", a1, 47, d_name);
        memset(&v9, 0, sizeof(v9));
        if (!lstat(__str, &v9))
        {
          if ((v9.st_mode & 0x4000) != 0)
          {
            if (_AMAuthInstallPlatformRemoveDirectoryRecursion(__str, a2)) {
              return 4;
            }
            if (rmdir(__str)) {
              goto LABEL_13;
            }
          }
          else if (unlink(__str))
          {
            goto LABEL_13;
          }
        }
      }
    }
  }
  uint64_t result = closedir(v5);
  if (result)
  {
LABEL_13:
    *a2 = *__error();
    return 4;
  }
  return result;
}

uint64_t AMAuthInstallPlatformRemoveFile(const __CFURL *a1)
{
  char v1 = (char)a1;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024)) {
    return 3;
  }
  uint64_t result = remove(buffer, v2);
  if (result)
  {
    uint64_t v4 = __error();
    char v5 = strerror(*v4);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformRemoveFile", (uint64_t)"failed to file: %s", v6, v7, v8, v9, v10, v5);
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformRemoveFile", (uint64_t)"url=%@, path=%s", v11, v12, v13, v14, v15, v1);
    return 4;
  }
  return result;
}

uint64_t AMAuthInstallPlatformCopyURLToNewTempDirectory(const __CFAllocator *a1, const char *a2, CFURLRef *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t result = 1;
  if (a2 && a3)
  {
    char v6 = (char)a2;
    snprintf(__str, 0x400uLL, "/tmp/%s", a2);
    if (mkdtemp(__str))
    {
      size_t v7 = strlen(__str);
      CFURLRef v8 = CFURLCreateFromFileSystemRepresentation(a1, (const UInt8 *)__str, v7, 1u);
      if (v8)
      {
        CFURLRef v9 = v8;
        uint64_t result = 0;
        *a3 = v9;
      }
      else
      {
        unlink(__str);
        return 2;
      }
    }
    else
    {
      uint64_t v10 = __error();
      char v11 = strerror(*v10);
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformCopyURLToNewTempDirectory", (uint64_t)"failed to create tmp dir: %s", v12, v13, v14, v15, v16, v11);
      AMAuthInstallLog(8, (uint64_t)"AMAuthInstallPlatformCopyURLToNewTempDirectory", (uint64_t)"tmp dir template: %s", v17, v18, v19, v20, v21, v6);
      return 4;
    }
  }
  return result;
}

uint64_t AMAuthInstallPlatformWriteBufferToNativeFilePath(char *a1, int a2, char *a3)
{
  int v6 = open(a3, 1537, 420);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (a2 < 1)
    {
LABEL_6:
      close(v7);
      return 0;
    }
    int v8 = 0;
    int v9 = a2;
    while (1)
    {
      int v10 = write(v7, a1, v9);
      if (v10 <= 0) {
        break;
      }
      a1 += v10;
      v9 -= v10;
      v8 += v10;
      if (v8 >= a2) {
        goto LABEL_6;
      }
    }
    close(v7);
    unlink(a3);
  }
  uint64_t v12 = __error();
  char v13 = strerror(*v12);
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformWriteBufferToNativeFilePath", (uint64_t)"failed to open file for writing: %s", v14, v15, v16, v17, v18, v13);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformWriteBufferToNativeFilePath", (uint64_t)"path: %s", v19, v20, v21, v22, v23, (char)a3);
  return 4;
}

uint64_t AMAuthInstallPlatformWriteDataToFileURL(const __CFData *a1, CFURLRef url)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024)) {
    return 3;
  }
  BytePtr = (char *)CFDataGetBytePtr(a1);
  int Length = CFDataGetLength(a1);
  return AMAuthInstallPlatformWriteBufferToNativeFilePath(BytePtr, Length, (char *)buffer);
}

uint64_t AMAuthInstallPlatformCopyURLWithAppendedComponent(const __CFAllocator *a1, CFTypeRef cf, const __CFString *a3, Boolean a4, CFURLRef *a5)
{
  if (!cf) {
    return 1;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  CFTypeID v11 = CFURLGetTypeID();
  uint64_t result = 1;
  if (a5 && a3 && v10 == v11)
  {
    CFURLRef v13 = CFURLCreateCopyAppendingPathComponent(a1, (CFURLRef)cf, a3, a4);
    if (v13)
    {
      CFURLRef v14 = v13;
      uint64_t result = 0;
      *a5 = v14;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t AMAuthInstallPlatformFileURLExists(const __CFURL *a1, BOOL *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = 1;
  if (a1 && a2)
  {
    memset(&v6, 0, sizeof(v6));
    if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    {
      int v4 = stat((const char *)buffer, &v6);
      uint64_t v2 = 0;
      *a2 = v4 == 0;
    }
    else
    {
      return 3;
    }
  }
  return v2;
}

uint64_t AMAuthInstallPlatformCreateBufferFromNativeFilePath(void *a1, off_t *a2, char *a3)
{
  char v3 = (char)a3;
  memset(&v55, 0, sizeof(v55));
  int v6 = open(a3, 0, 0);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (fstat(v6, &v55) < 0)
    {
      uint64_t v24 = __error();
      char v25 = strerror(*v24);
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformCreateBufferFromNativeFilePath", (uint64_t)"fstat failed: %s", v26, v27, v28, v29, v30, v25);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v31, v32, v33, v34, v35, v3);
    }
    else
    {
      off_t st_size = v55.st_size;
      int v9 = malloc(v55.st_size);
      if (!v9)
      {
        uint64_t v36 = __error();
        strerror(*v36);
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformCreateBufferFromNativeFilePath", (uint64_t)"malloc(%d) failed: %s", v37, v38, v39, v40, v41, st_size);
        uint64_t v11 = 2;
        goto LABEL_11;
      }
      CFTypeID v10 = v9;
      if (read(v7, v9, st_size) == st_size)
      {
        uint64_t v11 = 0;
        *a1 = v10;
        *a2 = st_size;
LABEL_11:
        close(v7);
        return v11;
      }
      uint64_t v42 = __error();
      char v43 = strerror(*v42);
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformCreateBufferFromNativeFilePath", (uint64_t)"read failed: %s", v44, v45, v46, v47, v48, v43);
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v49, v50, v51, v52, v53, v3);
      free(v10);
    }
    uint64_t v11 = 4;
    goto LABEL_11;
  }
  uint64_t v12 = __error();
  char v13 = strerror(*v12);
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformCreateBufferFromNativeFilePath", (uint64_t)"open failed: %s", v14, v15, v16, v17, v18, v13);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v19, v20, v21, v22, v23, v3);
  return 4;
}

uint64_t AMAuthInstallPlatformCreateDataFromFileURL(const __CFAllocator *a1, CFTypeRef *a2, const __CFURL *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  bzero(buffer, 0x400uLL);
  CFAllocatorRef v6 = AMAuthInstallSupportCopyAllocator();
  if (CFURLGetFileSystemRepresentation(a3, 1u, buffer, 1024))
  {
    off_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v7 = AMAuthInstallPlatformCreateBufferFromNativeFilePath(&v14, &v13, (char *)buffer);
    if (v7)
    {
      uint64_t v11 = v7;
      CFDataRef v10 = 0;
    }
    else
    {
      uint64_t v8 = v14;
      CFDataRef v9 = CFDataCreateWithBytesNoCopy(a1, v14, v13, v6);
      CFDataRef v10 = v9;
      if (v9)
      {
        uint64_t v11 = 0;
        *a2 = CFRetain(v9);
      }
      else
      {
        free(v8);
        uint64_t v11 = 2;
      }
    }
  }
  else
  {
    CFDataRef v10 = 0;
    uint64_t v11 = 3;
  }
  SafeRelease(v6);
  SafeRelease(v10);
  return v11;
}

FILE *AMAuthInstallPlatformOpenFileStreamWithURL(const __CFURL *a1, const char *a2)
{
  char v3 = (char)a1;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024)) {
    return fopen((const char *)buffer, a2);
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallPlatformOpenFileStreamWithURL", (uint64_t)"failed to convert url to file system representation", v4, v5, v6, v7, v8, v15);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallPlatformOpenFileStreamWithURL", (uint64_t)"%@", v10, v11, v12, v13, v14, v3);
  return 0;
}

uint64_t AMAuthInstallPlatformCopyURLWithAppendedExtension(const __CFAllocator *a1, const __CFURL *a2, const __CFString *a3, CFURLRef *a4)
{
  CFURLRef v5 = CFURLCreateCopyAppendingPathExtension(a1, a2, a3);
  if (!v5) {
    return 2;
  }
  CFURLRef v6 = v5;
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AMAuthInstallPlatformGetURLForTempDirectoryRoot()
{
  return _tempDirURL;
}

__CFString *_AMAuthInstallPlatformConstantsInitialize()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  _tempDirURL = (uint64_t)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], @"/tmp", kCFURLPOSIXPathStyle, 1u);
  if (!_tempDirURL) {
    _AMAuthInstallPlatformConstantsInitialize_cold_1();
  }
  size_t v2 = 32;
  uint64_t result = (__CFString *)sysctlbyname("kern.osversion", v4, &v2, 0, 0);
  if (!result)
  {
    size_t v2 = 32;
    if (!sysctlbyname("hw.product", v3, &v2, 0, 0)
      || (uint64_t result = (__CFString *)sysctlbyname("hw.machine", v3, &v2, 0, 0), !result))
    {
      uint64_t result = (__CFString *)CFStringCreateWithFormat(v0, 0, @"mac/%s/%s", v4, v3);
      if (result) {
        goto LABEL_6;
      }
    }
  }
  if (!_platformInfoStr)
  {
    uint64_t result = @"???";
LABEL_6:
    _platformInfoStr = (uint64_t)result;
  }
  return result;
}

uint64_t AMAuthInstallPlatformGetPlatformInfoString()
{
  return _platformInfoStr;
}

__CFString *AMAuthInstallPlatformGetSimplePlatformInfoString()
{
  return @"iOS";
}

uint64_t AMAuthInstallProvisioningCopyResponse(const __CFAllocator *a1, CFDataRef theData, void *a3, CFTypeRef *a4)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  CFDataRef theDataa = 0;
  long long v169 = 0u;
  memset(v170, 0, sizeof(v170));
  *(_OWORD *)buffer = 0u;
  long long v168 = 0u;
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  CFStringRef v10 = CFStringCreateWithBytes(a1, BytePtr, Length, 0x8000100u, 0);
  CFStringRef v16 = v10;
  if (!v10)
  {
    CFMutableDictionaryRef Mutable = 0;
    CFArrayRef v24 = 0;
    CFNumberRef NumberFromString = 0;
    uint64_t v152 = 0;
    uint64_t v159 = 3;
    goto LABEL_52;
  }
  AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"Response:%@", v11, v12, v13, v14, v15, (char)v10);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    CFArrayRef v24 = 0;
    goto LABEL_65;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, v16, @"&");
  CFArrayRef v24 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings)
  {
    CFComparisonResult v161 = "responseParts is NULL";
    goto LABEL_62;
  }
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (!Count)
  {
    CFComparisonResult v161 = "arrayCount is 0";
    goto LABEL_62;
  }
  CFIndex v26 = Count;
  uint64_t v163 = a4;
  CFStringRef v164 = v16;
  CFDictionaryRef theDict = Mutable;
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != v26; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v24, i);
      CFIndex location = CFStringFind(ValueAtIndex, @"=", 0).location;
      if (location == -1)
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"could not split parameter: %@", v30, v31, v32, v33, v34, (char)ValueAtIndex);
      }
      else
      {
        CFIndex v35 = location;
        CFArrayRef v36 = v24;
        CFIndex v37 = location + 1;
        CFIndex v38 = CFStringGetLength(ValueAtIndex) + ~location;
        v173.CFIndex location = 0;
        v173.CFIndex length = v35;
        CFStringRef v39 = CFStringCreateWithSubstring(a1, ValueAtIndex, v173);
        v174.CFIndex location = v37;
        v174.CFIndex length = v38;
        CFStringRef v40 = CFStringCreateWithSubstring(a1, ValueAtIndex, v174);
        CFStringRef v46 = v40;
        if (v39 && v40) {
          CFDictionarySetValue(theDict, v39, v40);
        }
        else {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"failed to create key(%@) or value (%@)", v41, v42, v43, v44, v45, (char)v39);
        }
        SafeRelease(v39);
        SafeRelease(v46);
        CFArrayRef v24 = v36;
      }
    }
  }
  CFMutableDictionaryRef Mutable = theDict;
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"MEID");
  if (Value) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"MEID:%@", v48, v49, v50, v51, v52, (char)Value);
  }
  uint64_t v53 = CFDictionaryGetValue(theDict, @"IMEI");
  CFStringRef v16 = v164;
  if (v53) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"IMEI:%@", v54, v55, v56, v57, v58, (char)v53);
  }
  uint64_t v59 = CFDictionaryGetValue(theDict, @"IMEI2");
  if (v59) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"IMEI2:%@", v60, v61, v62, v63, v64, (char)v59);
  }
  long long v65 = CFDictionaryGetValue(theDict, @"EID");
  if (v65) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"EID:%@", v66, v67, v68, v69, v70, (char)v65);
  }
  uint64_t v71 = CFDictionaryGetValue(theDict, @"WIFI_MAC");
  if (v71) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"WIFI_MAC:%@", v72, v73, v74, v75, v76, (char)v71);
  }
  uint64_t v77 = CFDictionaryGetValue(theDict, @"BT_MAC");
  if (v77) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"BT_MAC:%@", v78, v79, v80, v81, v82, (char)v77);
  }
  char v83 = CFDictionaryGetValue(theDict, @"USB_ETHER_MAC");
  if (v83) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"USB_ETHER_MAC:%@", v84, v85, v86, v87, v88, (char)v83);
  }
  long long v89 = CFDictionaryGetValue(theDict, @"WIFI_MAC2");
  if (v89) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"WIFI_MAC2:%@", v90, v91, v92, v93, v94, (char)v89);
  }
  uint64_t v95 = CFDictionaryGetValue(theDict, @"BT_MAC2");
  if (v95) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"BT_MAC2:%@", v96, v97, v98, v99, v100, (char)v95);
  }
  uint64_t v101 = CFDictionaryGetValue(theDict, @"ETH_MAC");
  if (v101) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"ETH_MAC:%@", v102, v103, v104, v105, v106, (char)v101);
  }
  uint64_t v107 = CFDictionaryGetValue(theDict, @"ETHER_MAC2");
  if (v107) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"ETHER_MAC2:%@", v108, v109, v110, v111, v112, (char)v107);
  }
  CFDictionaryRef v113 = CFDictionaryGetValue(theDict, @"T_MAC");
  if (v113) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"T_MAC:%@", v114, v115, v116, v117, v118, (char)v113);
  }
  uint64_t v119 = CFDictionaryGetValue(theDict, @"ETHER_MAC3");
  if (v119) {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"ETHER_MAC3:%@", v120, v121, v122, v123, v124, (char)v119);
  }
  CFStringRef v125 = (const __CFString *)CFDictionaryGetValue(theDict, @"B64_SECDATA");
  if (v125)
  {
    uint64_t v131 = AMAuthInstallSupportBase64Decode((const __CFAllocator *)*MEMORY[0x263EFFB08], v125, (CFTypeRef *)&theDataa, v126, v127, v128, v129, v130);
    if (v131)
    {
      uint64_t v159 = v131;
      CFComparisonResult v161 = "AMAuthInstallSupportBase64Decode failed";
LABEL_63:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)v161, v19, v20, v21, v22, v23, v162);
      CFNumberRef NumberFromString = 0;
      uint64_t v152 = 0;
      goto LABEL_52;
    }
    if (theDataa)
    {
      if ((unint64_t)CFDataGetLength(theDataa) > 0x4B)
      {
        v172.CFIndex location = 0;
        v172.CFIndex length = 76;
        CFDataGetBytes(theDataa, v172, buffer);
        if (!v170[6]) {
          goto LABEL_49;
        }
        uint64_t v132 = CFDataGetBytePtr(theDataa);
        CFDataRef v133 = CFDataCreate(a1, v132 + 76, v170[6]);
        if (v133)
        {
          CFDataRef v139 = v133;
          CFDictionarySetValue(theDict, @"MANIFESTDATA", v133);
          AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"Found secure manifest in response: '%@'", v140, v141, v142, v143, v144, (char)v139);
          CFRelease(v139);
          goto LABEL_49;
        }
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"tempData is NULL", v134, v135, v136, v137, v138, v162);
LABEL_65:
        CFNumberRef NumberFromString = 0;
        uint64_t v152 = 0;
        uint64_t v159 = 2;
        goto LABEL_52;
      }
      CFComparisonResult v161 = "decodedData is too small";
    }
    else
    {
      CFComparisonResult v161 = "decodedData is NULL";
    }
LABEL_62:
    uint64_t v159 = 3;
    goto LABEL_63;
  }
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"B64_SECDATA not found in response", v126, v127, v128, v129, v130, v162);
LABEL_49:
  CFStringRef v145 = (const __CFString *)CFDictionaryGetValue(theDict, @"STATUS");
  if (v145)
  {
    CFStringRef v151 = v145;
    uint64_t v152 = CFNumberFormatterCreate(a1, 0, kCFNumberFormatterNoStyle);
    CFNumberRef NumberFromString = CFNumberFormatterCreateNumberFromString(a1, v152, v151, 0, 1uLL);
    if (CFNumberGetValue(NumberFromString, kCFNumberSInt32Type, a3))
    {
      uint64_t v159 = 0;
      *uint64_t v163 = CFRetain(theDict);
    }
    else
    {
      uint64_t v159 = 3;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"failed to convert statusNumber", v154, v155, v156, v157, v158, v162);
    }
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningCopyResponse", (uint64_t)"statusString is NULL", v146, v147, v148, v149, v150, v162);
    CFNumberRef NumberFromString = 0;
    uint64_t v152 = 0;
    uint64_t v159 = 17;
  }
LABEL_52:
  SafeRelease(v16);
  SafeRelease(Mutable);
  SafeRelease(theDataa);
  SafeRelease(0);
  SafeRelease(v24);
  SafeRelease(NumberFromString);
  SafeRelease(v152);
  return v159;
}

uint64_t AMAuthInstallProvisioningPopulateRequestDict(uint64_t cf, __CFDictionary *a2, const __CFString *a3)
{
  CFDataRef v3 = 0;
  CFDataRef theData = 0;
  uint64_t v4 = 1;
  if (!a2 || !cf)
  {
    CFStringRef v7 = 0;
    CFMutableDictionaryRef Mutable = 0;
    CFDataRef v9 = 0;
    CFStringRef v10 = 0;
    goto LABEL_125;
  }
  CFStringRef v7 = 0;
  CFMutableDictionaryRef Mutable = 0;
  CFDataRef v9 = 0;
  CFStringRef v10 = 0;
  if (a3)
  {
    if (*(void *)(cf + 320))
    {
      CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)cf);
      uint64_t v17 = AMAuthInstallHttpSetUriEscapedValue(v12, a2, @"COMMAND_CODE", a3, v13, v14, v15, v16);
      if (v17) {
        goto LABEL_131;
      }
      if (CFEqual(a3, @"100")) {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(cf + 320), @"PINECRESTID");
      }
      CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)cf);
      uint64_t v17 = AMAuthInstallHttpSetUriEscapedValue(v23, a2, @"TICKET_VERSION", @"2", v24, v25, v26, v27);
      if (v17)
      {
LABEL_131:
        uint64_t v4 = v17;
        CFURLRef v326 = "setting COMMAND_CODE failed";
      }
      else
      {
        uint64_t v28 = *(void *)(cf + 48);
        uint64_t v29 = (const __CFAllocator **)MEMORY[0x263EFFB08];
        if (!v28)
        {
          CFDataRef v3 = 0;
LABEL_45:
          if (!*(void *)(cf + 96)
            || (CFAllocatorRef v108 = CFGetAllocator((CFTypeRef)cf),
                uint64_t v113 = AMAuthInstallHttpSetUriEscapedValue(v108, a2, @"CLIENT_ID", *(CFStringRef *)(cf + 96), v109, v110, v111, v112), !v113))
          {
            CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(cf + 320));
            CFDataRef v9 = (const void **)malloc(8 * Count);
            uint64_t v115 = (const void **)malloc(8 * Count);
            CFStringRef v10 = v115;
            CFStringRef v7 = 0;
            uint64_t v4 = 2;
            if (!v9 || !v115)
            {
              CFMutableDictionaryRef Mutable = 0;
              goto LABEL_125;
            }
            CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(cf + 320), v9, v115);
            if (Count >= 1)
            {
              uint64_t v121 = 0;
              while (v9[v121])
              {
                uint64_t v122 = v10[v121];
                if (!v122)
                {
                  uint64_t v325 = "invalid provisioningInfoValuesBuffer array";
                  goto LABEL_128;
                }
                CFTypeID v123 = CFGetTypeID(v122);
                CFTypeID TypeID = CFDataGetTypeID();
                CFAllocatorRef v125 = CFGetAllocator((CFTypeRef)cf);
                uint64_t v130 = v9[v121];
                CFDataRef v131 = (const __CFData *)v10[v121];
                if (v123 == TypeID) {
                  uint64_t v132 = AMAuthInstallHttpSetBase64EncodedValue(v125, a2, v130, v131, v126, v127, v128, v129);
                }
                else {
                  uint64_t v132 = AMAuthInstallHttpSetUriEscapedValue(v125, a2, v130, (CFStringRef)v131, v126, v127, v128, v129);
                }
                uint64_t v4 = v132;
                if (v132)
                {
                  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"setting %@ failed", v116, v117, v118, v119, v120, (char)v9[v121]);
                  CFStringRef v7 = 0;
                  CFMutableDictionaryRef Mutable = 0;
                  goto LABEL_125;
                }
                if (Count == ++v121) {
                  goto LABEL_58;
                }
              }
              uint64_t v325 = "invalid provisioningInfoKeysBuffer array";
LABEL_128:
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)v325, v116, v117, v118, v119, v120, v328);
              CFStringRef v7 = 0;
              CFMutableDictionaryRef Mutable = 0;
              uint64_t v4 = 99;
              goto LABEL_125;
            }
LABEL_58:
            CFAllocatorRef v133 = *v29;
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v133, 0, MEMORY[0x263EFFF70]);
            CFArrayAppendValue(Mutable, @"1.2.0");
            LibraryVersionString = AMAuthInstallSupportGetLibraryVersionString();
            if (CFStringGetLength(LibraryVersionString)) {
              uint64_t v135 = LibraryVersionString;
            }
            else {
              uint64_t v135 = @"libauthinstall-???";
            }
            CFArrayAppendValue(Mutable, v135);
            CFStringRef v7 = CFStringCreateByCombiningStrings(v133, Mutable, @"-");
            CFAllocatorRef v136 = CFGetAllocator((CFTypeRef)cf);
            uint64_t v141 = AMAuthInstallHttpSetUriEscapedValue(v136, a2, @"VERSION", v7, v137, v138, v139, v140);
            if (v141)
            {
              uint64_t v4 = v141;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"setting VERSION (%@) failed", v142, v143, v144, v145, v146, (char)v7);
              goto LABEL_125;
            }
            CFDictionaryRef v147 = *(const __CFDictionary **)(cf + 312);
            if (!v147) {
              goto LABEL_120;
            }
            CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v147, @"MEID");
            if (Value)
            {
              CFStringRef v149 = Value;
              CFTypeRef cfa = 0;
              if (AMAuthInstallMonetCreateReversedMEIDFromString((int)v133, Value, &cfa) || !cfa)
              {
                AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"failed to reverse meid, adding original string to response", v150, v151, v152, v153, v154, v328);
                SafeRelease(cfa);
                CFAllocatorRef v163 = CFGetAllocator((CFTypeRef)cf);
                AMAuthInstallHttpSetUriEscapedValue(v163, a2, @"MEID", v149, v164, v165, v166, v167);
              }
              else
              {
                CFAllocatorRef v155 = CFGetAllocator((CFTypeRef)cf);
                AMAuthInstallHttpSetBase64EncodedValue(v155, a2, @"B64_MEID", (CFDataRef)cfa, v156, v157, v158, v159);
                CFRelease(cfa);
                uint64_t v160 = *(void *)(cf + 48);
                if (v160)
                {
                  uint64_t v161 = *(void *)(v160 + 32) != 0;
LABEL_73:
                  CFStringRef v168 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"IMEI");
                  if (v168)
                  {
                    CFStringRef v169 = v168;
                    CFTypeRef cfa = 0;
                    if (AMAuthInstallMonetCreateReversedMEIDFromString((int)v133, v168, &cfa) || !cfa)
                    {
                      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"failed to reverse imei, adding original string to response", v170, v171, v172, v173, v174, v328);
                      SafeRelease(cfa);
                      CFAllocatorRef v181 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetUriEscapedValue(v181, a2, @"IMEI", v169, v182, v183, v184, v185);
                    }
                    else
                    {
                      CFAllocatorRef v175 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetBase64EncodedValue(v175, a2, @"B64_IMEI", (CFDataRef)cfa, v176, v177, v178, v179);
                      CFRelease(cfa);
                      uint64_t v180 = *(void *)(cf + 48);
                      if (v180)
                      {
                        if (*(void *)(v180 + 40)) {
                          uint64_t v161 = v161 | 0x100;
                        }
                        else {
                          uint64_t v161 = v161;
                        }
                      }
                    }
                  }
                  else
                  {
                    CFDictionaryRemoveValue(a2, @"B64_IMEI");
                    CFDictionaryRemoveValue(a2, @"IMEI");
                  }
                  CFStringRef v186 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"IMEI2");
                  if (v186)
                  {
                    CFStringRef v187 = v186;
                    CFTypeRef cfa = 0;
                    if (AMAuthInstallMonetCreateReversedMEIDFromString((int)v133, v186, &cfa) || !cfa)
                    {
                      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"failed to reverse imei2, adding original string to response", v188, v189, v190, v191, v192, v328);
                      SafeRelease(cfa);
                      CFAllocatorRef v199 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetUriEscapedValue(v199, a2, @"IMEI2", v187, v200, v201, v202, v203);
                    }
                    else
                    {
                      CFAllocatorRef v193 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetBase64EncodedValue(v193, a2, @"B64_IMEI2", (CFDataRef)cfa, v194, v195, v196, v197);
                      CFRelease(cfa);
                      uint64_t v198 = *(void *)(cf + 48);
                      if (v198)
                      {
                        if (*(void *)(v198 + 48)) {
                          uint64_t v161 = v161 | 0x200;
                        }
                        else {
                          uint64_t v161 = v161;
                        }
                      }
                    }
                  }
                  else
                  {
                    CFDictionaryRemoveValue(a2, @"B64_IMEI2");
                    CFDictionaryRemoveValue(a2, @"IMEI2");
                  }
                  CFStringRef v204 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"WIFI_MAC");
                  if (v204)
                  {
                    CFStringRef v205 = v204;
                    CFAllocatorRef v206 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v206, a2, @"WIFI_MAC", v205, v207, v208, v209, v210);
                  }
                  CFStringRef v211 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"BT_MAC");
                  if (v211)
                  {
                    CFStringRef v212 = v211;
                    CFAllocatorRef v213 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v213, a2, @"BT_MAC", v212, v214, v215, v216, v217);
                  }
                  CFStringRef v218 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"USB_ETHER_MAC");
                  if (v218)
                  {
                    CFStringRef v219 = v218;
                    CFAllocatorRef v220 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v220, a2, @"USB_ETHER_MAC", v219, v221, v222, v223, v224);
                  }
                  CFStringRef v225 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"WIFI_MAC2");
                  if (v225)
                  {
                    CFStringRef v226 = v225;
                    CFAllocatorRef v227 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v227, a2, @"WIFI_MAC2", v226, v228, v229, v230, v231);
                  }
                  CFStringRef v232 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"BT_MAC2");
                  if (v232)
                  {
                    CFStringRef v233 = v232;
                    CFAllocatorRef v234 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v234, a2, @"BT_MAC2", v233, v235, v236, v237, v238);
                  }
                  CFStringRef v239 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"ETH_MAC");
                  if (v239)
                  {
                    CFStringRef v240 = v239;
                    CFAllocatorRef v241 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v241, a2, @"ETH_MAC", v240, v242, v243, v244, v245);
                  }
                  CFStringRef v246 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"ETHER_MAC2");
                  if (v246)
                  {
                    CFStringRef v247 = v246;
                    CFAllocatorRef v248 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v248, a2, @"ETHER_MAC2", v247, v249, v250, v251, v252);
                  }
                  CFStringRef v253 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"T_MAC");
                  if (v253)
                  {
                    CFStringRef v254 = v253;
                    CFAllocatorRef v255 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v255, a2, @"T_MAC", v254, v256, v257, v258, v259);
                  }
                  CFStringRef v260 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"ETHER_MAC3");
                  if (v260)
                  {
                    CFStringRef v261 = v260;
                    CFAllocatorRef v262 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v262, a2, @"ETHER_MAC3", v261, v263, v264, v265, v266);
                  }
                  uint64_t v267 = CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"PAICHUSUO");
                  if (v267)
                  {
                    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"PAICHUSUO:%@", v268, v269, v270, v271, v272, (char)v267);
                    CFStringRef v273 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"SN");
                    if (v273)
                    {
                      CFStringRef v279 = v273;
                      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"PAICHUSUO SN:%@", v274, v275, v276, v277, v278, (char)v273);
                      CFAllocatorRef v280 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetUriEscapedValue(v280, a2, @"SN", v279, v281, v282, v283, v284);
                    }
                    CFStringRef v285 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"RGN");
                    if (v285)
                    {
                      CFStringRef v291 = v285;
                      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"PAICHUSUO RGN:%@", v286, v287, v288, v289, v290, (char)v285);
                      CFAllocatorRef v292 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetUriEscapedValue(v292, a2, @"RGN", v291, v293, v294, v295, v296);
                    }
                    CFStringRef v297 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"MPN");
                    if (v297)
                    {
                      CFStringRef v303 = v297;
                      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"PAICHUSUO MPN:%@", v298, v299, v300, v301, v302, (char)v297);
                      CFAllocatorRef v304 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetUriEscapedValue(v304, a2, @"MPN", v303, v305, v306, v307, v308);
                    }
                    CFStringRef v309 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(cf + 312), @"MLB");
                    if (v309)
                    {
                      CFStringRef v315 = v309;
                      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"PAICHUSUO MLB:%@", v310, v311, v312, v313, v314, (char)v309);
                      CFAllocatorRef v316 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetUriEscapedValue(v316, a2, @"MLB", v315, v317, v318, v319, v320);
                    }
                  }
                  CFAllocatorRef v321 = CFGetAllocator((CFTypeRef)cf);
                  CFStringRef v322 = CFStringCreateWithFormat(v321, 0, @"0x%X", v161);
                  if (!v322)
                  {
                    uint64_t v4 = 2;
                    goto LABEL_125;
                  }
                  CFStringRef v323 = v322;
                  CFDictionarySetValue(a2, @"STATUS1", v322);
                  CFRelease(v323);
LABEL_120:
                  uint64_t v4 = 0;
                  goto LABEL_125;
                }
              }
            }
            else
            {
              CFDictionaryRemoveValue(a2, @"B64_MEID");
              CFDictionaryRemoveValue(a2, @"MEID");
            }
            uint64_t v161 = 0;
            goto LABEL_73;
          }
          uint64_t v4 = v113;
          CFURLRef v327 = "setting CLIENT_ID failed";
          goto LABEL_142;
        }
        if (*(void *)(v28 + 16)
          && (CFAllocatorRef v30 = CFGetAllocator((CFTypeRef)cf),
              uint64_t v35 = AMAuthInstallHttpSetBase64EncodedValue(v30, a2, @"B64_BB_SNUM", *(CFDataRef *)(*(void *)(cf + 48) + 16), v31, v32, v33, v34), v35))
        {
          uint64_t v4 = v35;
          CFURLRef v326 = "setting B64_BB_SNUM failed";
        }
        else
        {
          if (*(void *)(cf + 312)) {
            goto LABEL_18;
          }
          if (*(void *)(*(void *)(cf + 48) + 72))
          {
            CFAllocatorRef v36 = CFGetAllocator((CFTypeRef)cf);
            uint64_t v41 = AMAuthInstallHttpSetBase64EncodedValue(v36, a2, @"B64_SESS_KEY", *(CFDataRef *)(*(void *)(cf + 48) + 72), v37, v38, v39, v40);
            if (v41)
            {
              uint64_t v4 = v41;
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)"setting B64_SESS_KEY failed, '%@'", v18, v19, v20, v21, v22, *(void *)(*(void *)(cf + 48) + 72));
              goto LABEL_133;
            }
          }
          uint64_t KeyHash = AMAuthInstallBasebandGetKeyHash(cf, @"BbProvisioningManifestKeyHash", &theData, v18, v19, v20, v21, v22);
          if (KeyHash)
          {
            uint64_t v4 = KeyHash;
            CFURLRef v326 = "AMAuthInstallBasebandGetKeyHash failed";
          }
          else
          {
            if (!theData
              || (CFAllocatorRef v43 = CFGetAllocator((CFTypeRef)cf),
                  uint64_t v48 = AMAuthInstallHttpSetBase64EncodedValue(v43, a2, @"B64_SKEY_HASH", theData, v44, v45, v46, v47), !v48))
            {
LABEL_18:
              CFAllocatorRef v49 = CFGetAllocator((CFTypeRef)cf);
              CFDataRef v3 = CFDataCreate(v49, (const UInt8 *)(*(void *)(cf + 48) + 4), 4);
              if (v3)
              {
                CFAllocatorRef v55 = CFGetAllocator((CFTypeRef)cf);
                uint64_t v60 = AMAuthInstallHttpSetBase64EncodedValue(v55, a2, @"B64_BB_CHIPID", v3, v56, v57, v58, v59);
                if (v60)
                {
                  uint64_t v4 = v60;
                  CFURLRef v327 = "setting B64_BB_CHIPID failed";
                }
                else
                {
                  uint64_t v61 = *(void **)(cf + 48);
                  if (v61[8])
                  {
                    CFAllocatorRef v62 = CFGetAllocator((CFTypeRef)cf);
                    AMAuthInstallHttpSetUriEscapedValue(v62, a2, @"ICCID", *(CFStringRef *)(*(void *)(cf + 48) + 64), v63, v64, v65, v66);
                    uint64_t v61 = *(void **)(cf + 48);
                  }
                  if (v61[13])
                  {
                    CFAllocatorRef v67 = CFGetAllocator((CFTypeRef)cf);
                    uint64_t v72 = AMAuthInstallHttpSetUriEscapedValue(v67, a2, @"BB_CARRIERID", *(CFStringRef *)(*(void *)(cf + 48) + 104), v68, v69, v70, v71);
                    if (v72)
                    {
                      uint64_t v4 = v72;
                      CFURLRef v327 = "setting BB_CARRIERID failed";
                      goto LABEL_142;
                    }
                    uint64_t v61 = *(void **)(cf + 48);
                  }
                  if (!v61[14]) {
                    goto LABEL_28;
                  }
                  CFAllocatorRef v73 = CFGetAllocator((CFTypeRef)cf);
                  uint64_t v78 = AMAuthInstallHttpSetBase64EncodedValue(v73, a2, @"MANIFESTDATA", *(CFDataRef *)(*(void *)(cf + 48) + 112), v74, v75, v76, v77);
                  if (!v78)
                  {
                    uint64_t v61 = *(void **)(cf + 48);
LABEL_28:
                    CFStringRef v79 = (const __CFString *)v61[4];
                    if (v79)
                    {
                      CFTypeRef cfa = 0;
                      uint64_t v4 = AMAuthInstallMonetCreateReversedMEIDFromString((int)*v29, v79, &cfa);
                      if (v4 || !cfa)
                      {
                        char v162 = "failed to reverse meid";
                        goto LABEL_123;
                      }
                      CFAllocatorRef v85 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetBase64EncodedValue(v85, a2, @"B64_MEID", (CFDataRef)cfa, v86, v87, v88, v89);
                      CFRelease(cfa);
                      uint64_t v61 = *(void **)(cf + 48);
                    }
                    CFStringRef v90 = (const __CFString *)v61[5];
                    if (v90)
                    {
                      CFTypeRef cfa = 0;
                      uint64_t v4 = AMAuthInstallMonetCreateReversedMEIDFromString((int)*v29, v90, &cfa);
                      if (v4 || !cfa)
                      {
                        char v162 = "failed to reverse imei";
                        goto LABEL_123;
                      }
                      CFAllocatorRef v91 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetBase64EncodedValue(v91, a2, @"B64_IMEI", (CFDataRef)cfa, v92, v93, v94, v95);
                      CFRelease(cfa);
                      uint64_t v61 = *(void **)(cf + 48);
                    }
                    CFStringRef v96 = (const __CFString *)v61[6];
                    if (!v96)
                    {
LABEL_40:
                      CFStringRef v102 = (const __CFString *)v61[7];
                      if (!v102) {
                        goto LABEL_45;
                      }
                      CFTypeRef cfa = 0;
                      uint64_t v4 = AMAuthInstallSupportCopyDataFromHexString((int)*v29, v102, (uint64_t *)&cfa);
                      if (!v4 && cfa)
                      {
                        CFAllocatorRef v103 = CFGetAllocator((CFTypeRef)cf);
                        AMAuthInstallHttpSetBase64EncodedValue(v103, a2, @"B64_EID", (CFDataRef)cfa, v104, v105, v106, v107);
                        CFRelease(cfa);
                        goto LABEL_45;
                      }
                      char v162 = "failed to create euiccEID data";
                      goto LABEL_123;
                    }
                    CFTypeRef cfa = 0;
                    uint64_t v4 = AMAuthInstallMonetCreateReversedMEIDFromString((int)*v29, v96, &cfa);
                    if (!v4 && cfa)
                    {
                      CFAllocatorRef v97 = CFGetAllocator((CFTypeRef)cf);
                      AMAuthInstallHttpSetBase64EncodedValue(v97, a2, @"B64_IMEI2", (CFDataRef)cfa, v98, v99, v100, v101);
                      CFRelease(cfa);
                      uint64_t v61 = *(void **)(cf + 48);
                      goto LABEL_40;
                    }
                    char v162 = "failed to reverse imei2";
LABEL_123:
                    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)v162, v80, v81, v82, v83, v84, v328);
                    SafeRelease(cfa);
LABEL_124:
                    CFStringRef v7 = 0;
                    CFMutableDictionaryRef Mutable = 0;
                    CFDataRef v9 = 0;
                    CFStringRef v10 = 0;
                    goto LABEL_125;
                  }
                  uint64_t v4 = v78;
                  CFURLRef v327 = "setting MANIFESTDATA failed";
                }
              }
              else
              {
                CFURLRef v327 = "chipID failed to convert to data";
                uint64_t v4 = 3;
              }
LABEL_142:
              AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)v327, v50, v51, v52, v53, v54, v328);
              goto LABEL_124;
            }
            uint64_t v4 = v48;
            CFURLRef v326 = "setting B64_SKEY_HASH failed";
          }
        }
      }
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict", (uint64_t)v326, v18, v19, v20, v21, v22, v328);
    }
LABEL_133:
    CFDataRef v3 = 0;
    goto LABEL_124;
  }
LABEL_125:
  SafeFree(v9);
  SafeFree(v10);
  SafeRelease(v3);
  SafeRelease(v7);
  SafeRelease(Mutable);
  return v4;
}

uint64_t AMAuthInstallProvisioningServerSendSyncRequest(const __CFAllocator *a1, const __CFURL *a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDataRef theData = 0;
  *(void *)uint64_t v35 = 0;
  uint64_t v32 = 0;
  CFTypeRef v33 = 0;
  uint64_t v8 = 1;
  if (a3 && a4)
  {
    if (!a2)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningServerSendSyncRequest", (uint64_t)"provisioning server url is NULL", (uint64_t)a4, a5, a6, a7, a8, v30);
      goto LABEL_11;
    }
    PostCFHTTPMessageRef Request = AMAuthInstallHttpCreatePostRequest(a1, a2, a3, (CFTypeRef *)v35);
    if (!PostRequest)
    {
      PostCFHTTPMessageRef Request = AMAuthInstallHttpMessageSendSyncNew(a1, v35[0], (int)&theData, (int)&v32 + 4, 0, 15.0);
      if (!PostRequest)
      {
        if (!theData)
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningServerSendSyncRequest", (uint64_t)"no response data (httpStatus=%u)", v12, v13, v14, v15, v16, SBYTE4(v32));
          goto LABEL_17;
        }
        PostCFHTTPMessageRef Request = AMAuthInstallProvisioningCopyResponse(a1, theData, &v32, &v33);
        if (!PostRequest)
        {
          AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningServerSendSyncRequest", (uint64_t)"httpStatus=%u, status=%d", v17, v18, v19, v20, v21, SBYTE4(v32));
          if (v32)
          {
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningServerSendSyncRequest", (uint64_t)"server error: %d", v22, v23, v24, v25, v26, v32);
            uint64_t v8 = 24;
            goto LABEL_11;
          }
          CFTypeRef v27 = v33;
          if (v33)
          {
            AMAuthInstallLog(6, (uint64_t)"AMAuthInstallProvisioningServerSendSyncRequest", (uint64_t)"data=%@", v22, v23, v24, v25, v26, (char)v33);
            CFTypeRef v28 = CFRetain(v27);
            uint64_t v8 = 0;
            *a4 = v28;
            goto LABEL_11;
          }
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningServerSendSyncRequest", (uint64_t)"server failed to provide response data", v22, v23, v24, v25, v26, v31);
LABEL_17:
          uint64_t v8 = 17;
          goto LABEL_11;
        }
      }
    }
    uint64_t v8 = PostRequest;
  }
LABEL_11:
  SafeRelease(0);
  SafeRelease(*(CFTypeRef *)v35);
  SafeRelease(theData);
  SafeRelease(v33);
  return v8;
}

uint64_t AMAuthInstallProvisioningSendAck(uint64_t cf, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDictionaryRef theDict = 0;
  if (!cf)
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v12 = 1;
    goto LABEL_13;
  }
  if (*(void *)(cf + 312))
  {
    CFStringRef v10 = @"200";
  }
  else
  {
    if (*(_DWORD *)(cf + 304) == 8)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningSendAck", (uint64_t)"Provisioning failed, ack already sent.", a4, a5, a6, a7, a8, v36);
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v12 = 19;
      goto LABEL_13;
    }
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningSendAck", (uint64_t)"No provisioning info to ack, sending ping.", a4, a5, a6, a7, a8, v36);
    CFStringRef v10 = @"1";
  }
  CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)cf);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v14 = AMAuthInstallProvisioningPopulateRequestDict(cf, Mutable, v10);
    if (v14)
    {
      uint64_t v12 = v14;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningSendAck", (uint64_t)"AMAuthInstallProvisioningPopulateRequestDict failed status=%d", v15, v16, v17, v18, v19, v14);
    }
    else
    {
      CFAllocatorRef v20 = CFGetAllocator((CFTypeRef)cf);
      char Value = a2;
      CFStringRef v21 = CFStringCreateWithFormat(v20, 0, @"0x%X");
      CFDictionarySetValue(Mutable, @"STATUS", v21);
      CFRelease(v21);
      CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)cf);
      uint64_t v27 = AMAuthInstallProvisioningServerSendSyncRequest(v22, *(const __CFURL **)(cf + 296), Mutable, &theDict, v23, v24, v25, v26);
      if (v27)
      {
        uint64_t v12 = v27;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningSendAck", (uint64_t)"AMAuthInstallProvisioningServerSendSyncRequest failed status=%d", v28, v29, v30, v31, v32, v27);
      }
      else
      {
        if (theDict)
        {
          char Value = CFDictionaryGetValue(theDict, @"STATUS");
          CFTypeRef v33 = "Server returned STATUS=%@";
          uint64_t v34 = 6;
        }
        else
        {
          CFTypeRef v33 = "responseDict is NULL";
          uint64_t v34 = 3;
        }
        AMAuthInstallLog(v34, (uint64_t)"AMAuthInstallProvisioningSendAck", (uint64_t)v33, v28, v29, v30, v31, v32, Value);
        uint64_t v12 = 0;
      }
    }
  }
  else
  {
    uint64_t v12 = 2;
  }
LABEL_13:
  SafeRelease(Mutable);
  SafeRelease(theDict);
  return v12;
}

uint64_t AMAuthInstallProvisioningSendRequest(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v4 = 1;
  if (a1 && a2 && a3)
  {
    CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable)
    {
      uint64_t v4 = 2;
      goto LABEL_9;
    }
    uint64_t v9 = AMAuthInstallProvisioningPopulateRequestDict(a1, Mutable, a2);
    if (v9)
    {
      uint64_t v4 = v9;
      CFAllocatorRef v22 = "AMAuthInstallProvisioningPopulateRequestDict failed";
    }
    else
    {
      CFAllocatorRef v15 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v20 = AMAuthInstallProvisioningServerSendSyncRequest(v15, *(const __CFURL **)(a1 + 296), Mutable, a3, v16, v17, v18, v19);
      if (!v20)
      {
        if (*a3)
        {
          SafeRelease(*(CFTypeRef *)(a1 + 312));
          uint64_t v4 = 0;
          *(void *)(a1 + 312) = CFRetain(*a3);
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningSendRequest", (uint64_t)"*outResponseDict is NULL", v10, v11, v12, v13, v14, v23);
          uint64_t v4 = 0;
        }
        goto LABEL_9;
      }
      uint64_t v4 = v20;
      CFAllocatorRef v22 = "AMAuthInstallProvisioningServerSendSyncRequest failed";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningSendRequest", (uint64_t)v22, v10, v11, v12, v13, v14, v23);
  }
LABEL_9:
  SafeRelease(Mutable);
  return v4;
}

uint64_t AMAuthInstallProvisioningRequestInfoPlist(void *a1, CFDataRef *a2)
{
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    CFDataRef v3 = 0;
    uint64_t v4 = 1;
    goto LABEL_23;
  }
  CFDataRef v3 = 0;
  uint64_t v4 = 1;
  if (a2 && a1[6])
  {
    CFURLRef v6 = (const void *)a1[39];
    if (v6)
    {
      CFDictionaryRef v7 = (const __CFDictionary *)CFRetain(v6);
      CFDictionaryRef theDict = v7;
      uint64_t v4 = 99;
      if (v7)
      {
LABEL_6:
        unint64_t Value = (unint64_t)CFDictionaryGetValue(v7, @"MEID");
        unint64_t v14 = (unint64_t)CFDictionaryGetValue(theDict, @"IMEI");
        if (!(Value | v14))
        {
          CFDataRef v3 = 0;
          uint64_t v4 = 17;
          uint64_t v17 = "both imei and meid are NULL, provisioning failed.";
          goto LABEL_29;
        }
        CFAllocatorRef v15 = (const void *)v14;
        if (*(void *)(a1[6] + 48))
        {
          uint64_t v16 = CFDictionaryGetValue(theDict, @"IMEI2");
          if (!v16)
          {
            CFDataRef v3 = 0;
            uint64_t v4 = 17;
            uint64_t v17 = "imei2 is NULL. provisioning failed.";
LABEL_29:
            AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningRequestInfoPlist", (uint64_t)v17, v8, v9, v10, v11, v12, v23);
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        CFAllocatorRef v18 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFDataRef v3 = Mutable;
        if (Mutable)
        {
          if (Value) {
            CFDictionarySetValue(Mutable, @"MEID", (const void *)Value);
          }
          if (v15) {
            CFDictionarySetValue(v3, @"IMEI", v15);
          }
          if (v16) {
            CFDictionarySetValue(v3, @"IMEI2", v16);
          }
          CFAllocatorRef v20 = CFGetAllocator(a1);
          XMLCFDataRef Data = CFPropertyListCreateXMLData(v20, v3);
          *a2 = XMLData;
          if (!XMLData)
          {
            uint64_t v4 = 3;
            uint64_t v17 = "CFPropertyListCreateXMLData failed.";
            goto LABEL_29;
          }
          uint64_t v4 = 0;
        }
        else
        {
          uint64_t v4 = 2;
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v4 = AMAuthInstallProvisioningSendRequest((uint64_t)a1, @"100", (CFTypeRef *)&theDict);
      if (v4)
      {
        CFDataRef v3 = 0;
        uint64_t v17 = "AMAuthInstallProvisioningSendRequest failed";
        goto LABEL_29;
      }
      CFDictionaryRef v7 = theDict;
      if (theDict) {
        goto LABEL_6;
      }
    }
    CFDataRef v3 = 0;
    uint64_t v17 = "responseDict is NULL";
    goto LABEL_29;
  }
LABEL_23:
  SafeRelease(0);
  SafeRelease(theDict);
  SafeRelease(v3);
  return v4;
}

uint64_t AMAuthInstallProvisioningRequestManifest(uint64_t a1, void *a2)
{
  CFTypeRef v14 = 0;
  uint64_t v2 = 1;
  if (a1 && a2)
  {
    if (*(void *)(a1 + 312))
    {
      CFTypeRef v4 = CFRetain(*(CFTypeRef *)(a1 + 312));
      CFTypeRef v14 = v4;
      uint64_t v2 = 99;
      if (v4)
      {
LABEL_5:
        unint64_t Value = CFDictionaryGetValue((CFDictionaryRef)v4, @"MANIFESTDATA");
        *a2 = Value;
        if (Value)
        {
          CFRetain(Value);
          uint64_t v2 = 0;
          goto LABEL_7;
        }
        uint64_t v12 = "*manifestData is NULL";
LABEL_13:
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningRequestManifest", (uint64_t)v12, v5, v6, v7, v8, v9, v13);
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v2 = AMAuthInstallProvisioningSendRequest(a1, @"100", &v14);
      if (v2)
      {
        uint64_t v12 = "AMAuthInstallProvisioningSendRequest failed";
        goto LABEL_13;
      }
      CFTypeRef v4 = v14;
      if (v14) {
        goto LABEL_5;
      }
    }
    uint64_t v12 = "responseDict is NULL";
    goto LABEL_13;
  }
LABEL_7:
  SafeRelease(v14);
  return v2;
}

uint64_t _AMAuthInstallSupportsECProvision(uint64_t a1)
{
  uint64_t result = 0;
  int v3 = *(_DWORD *)(*(void *)(a1 + 48) + 4);
  if (v3 <= 241888)
  {
    unsigned int v6 = v3 - 96;
    BOOL v7 = v6 > 7;
    int v8 = (1 << v6) & 0xA1;
    if (v7 || v8 == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 > 9572576)
    {
      BOOL v4 = v3 == 9572577;
      int v5 = 9781473;
    }
    else
    {
      BOOL v4 = v3 == 241889;
      int v5 = 8343777;
    }
    if (!v4 && v3 != v5) {
      return 1;
    }
  }
  return result;
}

uint64_t AMAuthInstallProvisioningProvisionIfNecessary(uint64_t a1, __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v82 = 0;
  CFDictionaryRef value = 0;
  uint64_t v81 = 0;
  if (!a1)
  {
    uint64_t v55 = 1;
    goto LABEL_64;
  }
  unsigned int v10 = 1;
  if (!a2) {
    goto LABEL_61;
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (!v11) {
    goto LABEL_61;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 304);
  if (v12 > 0xB)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"Unexpected provisioning state = %d", a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 304));
    unsigned int v10 = 99;
    goto LABEL_61;
  }
  int v13 = 1 << v12;
  if ((v13 & 0xF81) != 0)
  {
LABEL_60:
    unsigned int v10 = 0;
    goto LABEL_61;
  }
  if ((v13 & 0x26) == 0)
  {
    if (!*(void *)(v11 + 72))
    {
      *(_DWORD *)(a1 + 304) = 8;
      uint64_t v41 = "encryptedSessionKey is NULL";
      goto LABEL_66;
    }
    int v39 = *(_DWORD *)(v11 + 4);
    if (v39 <= 1515744)
    {
      if (v39 > 520416)
      {
        if (v39 != 520417 && v39 != 938209)
        {
          int v40 = 1327329;
          goto LABEL_55;
        }
      }
      else if (v39 != 94 && v39 != 104)
      {
        int v40 = 241889;
        goto LABEL_55;
      }
    }
    else if (v39 <= 2814176)
    {
      if (v39 != 1515745 && v39 != 1700065)
      {
        int v40 = 2089185;
        goto LABEL_55;
      }
    }
    else if (v39 > 9572576)
    {
      if (v39 != 9572577)
      {
        int v40 = 9781473;
        goto LABEL_55;
      }
    }
    else if (v39 != 2814177)
    {
      int v40 = 8343777;
LABEL_55:
      if (v39 != v40
        && !*(unsigned char *)(a1 + 328)
        && (*(void *)(v11 + 32) || *(void *)(v11 + 40) || *(void *)(v11 + 48)))
      {
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"Performing local re-lock", a4, a5, a6, a7, a8, v78);
        unsigned int v74 = AMAuthInstallBasebandLocalProvisionDevice(a1, (uint64_t)&v81, v68, v69, v70, v71, v72, v73);
        if (v74)
        {
          unsigned int v10 = v74;
          *(_DWORD *)(a1 + 304) = 8;
          uint64_t v76 = "AMAuthInstallMonetLocalProvisionDevice failed";
          goto LABEL_85;
        }
        if (v81)
        {
          *(_DWORD *)(a1 + 304) = 6;
          goto LABEL_59;
        }
        *(_DWORD *)(a1 + 304) = 8;
        goto LABEL_100;
      }
    }
    if (*(_DWORD *)(v11 + 96) == 3)
    {
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"Requesting manifest from server (%@)", a4, a5, a6, a7, a8, *(void *)(a1 + 296));
      unsigned int v54 = AMAuthInstallProvisioningRequestManifest(a1, &v81);
      *(_DWORD *)(a1 + 304) = 4;
      if (v54)
      {
        unsigned int v10 = v54;
        uint64_t v76 = "AMAuthInstallProvisioningRequestManifest failed";
        goto LABEL_85;
      }
      if (v81)
      {
LABEL_59:
        CFDictionaryRemoveAllValues(a2);
        CFDictionarySetValue(a2, @"provisioning/manifest.bin", v81);
        goto LABEL_60;
      }
LABEL_100:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"manifestData is NULL", v22, v23, v24, v25, v26, v78);
      unsigned int v10 = 14;
      goto LABEL_61;
    }
    uint64_t v41 = "Cannot provision unfused boards";
LABEL_66:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)v41, a4, a5, a6, a7, a8, v78);
    unsigned int v10 = 19;
    goto LABEL_61;
  }
  CFBooleanRef v14 = *(const __CFBoolean **)(v11 + 88);
  if (v14 && CFBooleanGetValue(v14) == 1)
  {
    if (*(unsigned char *)(a1 + 328) || *(unsigned char *)(a1 + 329))
    {
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"Existing provisioning manifest found. Force provisioning is enabled; provisioning anyway.",
        v16,
        v17,
        v18,
        v19,
        v20,
        v78);
      goto LABEL_12;
    }
    unsigned int v75 = AMAuthInstallProvisioningSendAck(a1, 0, v15, v16, v17, v18, v19, v20);
    if (v75 != 24)
    {
      unsigned int v10 = v75;
      if (!v75)
      {
        *(_DWORD *)(a1 + 304) = 7;
        uint64_t v76 = "Existing provisioning manifest found. Not attempting to provision.";
        uint64_t v77 = 5;
LABEL_86:
        AMAuthInstallLog(v77, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)v76, v22, v23, v24, v25, v26, v78);
        goto LABEL_61;
      }
      uint64_t v76 = "Provisioning server failed to respond, cannot provision.";
LABEL_85:
      uint64_t v77 = 3;
      goto LABEL_86;
    }
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"provisioning ack failed, enabling force provisioning.", v22, v23, v24, v25, v26, v78);
    *(unsigned char *)(a1 + 328) = 1;
  }
LABEL_12:
  CFBooleanRef v21 = *(const __CFBoolean **)(*(void *)(a1 + 48) + 80);
  if (!v21)
  {
    CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    if (!Mutable)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"emptyData is NULL", v43, v44, v45, v46, v47, v78);
      unsigned int v10 = 2;
      goto LABEL_61;
    }
    CFMutableDataRef v48 = Mutable;
    CFDictionarySetValue(a2, @"provisioning/", Mutable);
    CFRelease(v48);
    CFAllocatorRef v49 = "Baseband not reporting manifest status, not attempting to provision yet.";
    goto LABEL_51;
  }
  if (CFBooleanGetValue(v21) != 1)
  {
    uint64_t v50 = *(void **)(a1 + 48);
    if (v50[4] || v50[5] || v50[6])
    {
      if (!*(unsigned char *)(a1 + 328))
      {
        *(_DWORD *)(a1 + 304) = 7;
        CFAllocatorRef v49 = "Device already has MEID and/or IMEI and/or IMEI2. Bringup provisioning complete. Not attempting to provision.";
        goto LABEL_51;
      }
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"Device already has MEID and/or IMEI and/or IMEI2. Force provisioning is enabled requesting new values.", v22, v23, v24, v25, v26, v78);
    }
    unsigned int v51 = AMAuthInstallProvisioningRequestInfoPlist((void *)a1, (CFDataRef *)&value);
    *(_DWORD *)(a1 + 304) = 5;
    if (v51)
    {
      unsigned int v10 = v51;
      uint64_t v76 = "AMAuthInstallProvisioningRequestInfoPlist failed";
      goto LABEL_85;
    }
    if (!value)
    {
      CFAllocatorRef v49 = "info.plist is NULL";
      uint64_t v53 = 3;
      goto LABEL_52;
    }
    CFDictionarySetValue(a2, @"provisioning/info.plist", value);
    CFAllocatorRef v49 = "Bringup baseband found, doing single stage provisioning";
LABEL_51:
    uint64_t v53 = 5;
LABEL_52:
    AMAuthInstallLog(v53, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)v49, v22, v23, v24, v25, v26, v78);
    goto LABEL_60;
  }
  uint64_t v80 = 0;
  unsigned int v27 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
  if (!v27)
  {
    if (!*(unsigned char *)(a1 + 328))
    {
      uint64_t v52 = *(void **)(a1 + 48);
      if (v52[4] || v52[5] || v52[6])
      {
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"Local re-locking enabled. Forcing use of P1 provisioning key.", v28, v29, v30, v31, v32, v78);
        unsigned int v10 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
LABEL_70:
        uint64_t v38 = v82;
        goto LABEL_71;
      }
    }
    if (_AMAuthInstallSupportsECProvision(a1))
    {
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"ECDH Server based provisioning enabled. Creating empty puk.pem file for BBUpdater", v33, v34, v35, v36, v37, v78);
      *(_DWORD *)CFUUIDBytes bytes = -272716322;
      uint64_t v38 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 4);
      unsigned int v10 = 0;
      uint64_t v82 = v38;
LABEL_71:
      if (v38)
      {
        CFDictionarySetValue(a2, @"provisioning/puk.pem", v38);
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"Mature baseband found, doing two stage provisioning", v63, v64, v65, v66, v67, v78);
        unsigned int v10 = 0;
        *(_DWORD *)(a1 + 304) = 2;
        goto LABEL_61;
      }
      uint64_t v76 = "Public key is NULL";
      goto LABEL_92;
    }
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningProvisionIfNecessary", (uint64_t)"LEGACY Server based provisioning enabled. Reading provisioning key from settings.", v33, v34, v35, v36, v37, v78);
    unsigned int KeyHash = AMAuthInstallBasebandGetKeyHash(a1, @"BbProvisioningManifestKeyHash", &v80, v57, v58, v59, v60, v61);
    if (KeyHash)
    {
      unsigned int v10 = KeyHash;
      uint64_t v76 = "AMAuthInstallBasebandGetKeyHash failed";
    }
    else if (v80)
    {
      unsigned int v10 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      if (!v10) {
        goto LABEL_70;
      }
      uint64_t v76 = "AMAuthInstallCryptoCreateSubjectPublicKeyInfoForKey failed";
    }
    else
    {
      unsigned int v10 = 0;
      uint64_t v76 = "keyHashData is NULL";
    }
LABEL_92:
    *(_DWORD *)(a1 + 304) = 8;
    goto LABEL_85;
  }
  unsigned int v10 = v27;
LABEL_61:
  if (*(_DWORD *)(a1 + 304) == 8) {
    uint64_t v55 = 19;
  }
  else {
    uint64_t v55 = v10;
  }
LABEL_64:
  SafeRelease(0);
  SafeRelease(value);
  SafeRelease(v82);
  SafeRelease(v81);
  return v55;
}

uint64_t AMAuthInstallProvisioningEnable(uint64_t a1, int a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 304) = a2 != 0;
  return result;
}

uint64_t AMAuthInstallProvisioningAPOnlyEnable(uint64_t a1, int a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  if (a2) {
    int v4 = 9;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(a1 + 304) = v4;
  return result;
}

uint64_t AMAuthInstallProvisioningSetServerURL(uint64_t a1, const void *a2)
{
  uint64_t result = 1;
  if (a1)
  {
    if (a2)
    {
      SafeRelease(*(CFTypeRef *)(a1 + 296));
      *(void *)(a1 + 296) = CFRetain(a2);
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningSetServerURL", (uint64_t)"provisioning server: %@", v5, v6, v7, v8, v9, (char)a2);
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallProvisioningGetProvisionedInfo(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2 = 1;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v5 = *(const void **)(a1 + 312);
  if (v5)
  {
    uint64_t v2 = 0;
    *a2 = v5;
    return v2;
  }
  if ((*(_DWORD *)(a1 + 304) | 8) != 9)
  {
    uint64_t v2 = 0;
LABEL_30:
    *a2 = 0;
    return v2;
  }
  unint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 320), @"WIFI_MAC");
  uint64_t v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 320), @"BT_MAC");
  uint64_t v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 320), @"USB_ETHER_MAC");
  if (!Value)
  {
    BOOL v14 = *(unsigned char *)(a1 + 332) == 0;
    if (v7) {
      goto LABEL_8;
    }
LABEL_11:
    BOOL v15 = *(unsigned char *)(a1 + 330) == 0;
    goto LABEL_12;
  }
  BOOL v14 = 0;
  if (!v7) {
    goto LABEL_11;
  }
LABEL_8:
  BOOL v15 = 0;
LABEL_12:
  int v16 = v15 || v14;
  if (v8) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = *(unsigned char *)(a1 + 331) == 0;
  }
  int v18 = v16 | v17;
  if (*(unsigned char *)(a1 + 328) || v18)
  {
    if (v18) {
      uint64_t v33 = "YES";
    }
    else {
      uint64_t v33 = "NO";
    }
    AMAuthInstallLog(6, (uint64_t)"AMAuthInstallProvisioningGetProvisionedInfo", (uint64_t)"Forcing reprovisioning.  macAddressMissing=%s", v9, v10, v11, v12, v13, (char)v33);
  }
  else
  {
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningGetProvisionedInfo", (uint64_t)"AP: already fully provisioned, sending ACK", v9, v10, v11, v12, v13, v41);
    uint64_t v25 = AMAuthInstallProvisioningSendAck(a1, 0, v19, v20, v21, v22, v23, v24);
    if (v25 != 24)
    {
      uint64_t v2 = v25;
      if (v25)
      {
        uint64_t v31 = "AP: provisioning server failed to respond, cannot provision.";
        uint64_t v32 = 3;
      }
      else
      {
        uint64_t v31 = "AP: ACK successful. Not attempting to provision.";
        uint64_t v32 = 5;
      }
      AMAuthInstallLog(v32, (uint64_t)"AMAuthInstallProvisioningGetProvisionedInfo", (uint64_t)v31, v26, v27, v28, v29, v30, v42);
      goto LABEL_30;
    }
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningGetProvisionedInfo", (uint64_t)"AP: provisioning ack failed, sending provisioning request.", v26, v27, v28, v29, v30, v42);
  }
  uint64_t v34 = AMAuthInstallProvisioningSendRequest(a1, @"100", a2);
  if (v34)
  {
    uint64_t v2 = v34;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningGetProvisionedInfo", (uint64_t)"AMAuthInstallProvisioningSendRequest failed", v35, v36, v37, v38, v39, v43);
  }
  else if (*a2)
  {
    return 0;
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallProvisioningGetProvisionedInfo", (uint64_t)"*outInfo is NULL", v35, v36, v37, v38, v39, v43);
    return 14;
  }
  return v2;
}

uint64_t AMAuthInstallProvisioningSetInfo(CFTypeRef *a1, const __CFDictionary *a2)
{
  uint64_t result = 1;
  if (a1)
  {
    if (a2)
    {
      SafeRelease(a1[40]);
      CFAllocatorRef v5 = CFGetAllocator(a1);
      a1[40] = CFDictionaryCreateMutableCopy(v5, 0, a2);
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningSetInfo", (uint64_t)"provisioning info: %@", v6, v7, v8, v9, v10, (char)a2);
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallProvisioningSetItem(uint64_t a1, void *key, const void *a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 1;
  if (a3)
  {
    char v5 = (char)key;
    if (key)
    {
      uint64_t v6 = *(__CFDictionary **)(a1 + 320);
      if (v6)
      {
        CFDictionarySetValue(v6, key, a3);
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallProvisioningSetItem", (uint64_t)"adding %@ to provisioning info", v7, v8, v9, v10, v11, v5);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AMAuthInstallProvisioningForceServer(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 328) = a2;
  return result;
}

uint64_t AMAuthInstallProvisioningForceLocal(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 329) = a2;
  return result;
}

uint64_t AMAuthInstallProvisioningAllowMissingBMac(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 330) = a2;
  return result;
}

uint64_t AMAuthInstallProvisioningAllowMissingEMac(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 331) = a2;
  return result;
}

uint64_t AMAuthInstallProvisioningAllowMissingWMac(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 332) = a2;
  return result;
}

uint64_t AMAuthInstallRembrandtCreateStitchedPSI(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"PSI-Blob");
}

uint64_t AMAuthInstallRembrandtCreateStitchedRestorePSI(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"RestorePSI-Blob");
}

uint64_t AMAuthInstallRembrandtCreateStitchedPSI2(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"PSI2-Blob");
}

uint64_t AMAuthInstallRembrandtCreateStitchedRestorePSI2(void *a1, const __CFData *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  return AMAuthInstallMonetStitchEBootLoader(a1, a2, a3, a4, @"RestorePSI2-Blob");
}

uint64_t AMAuthInstallRembrandtMeasureBootImage(void *a1, const __CFData *a2, __CFDictionary *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDictionaryRef value = 0;
  if (!a1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 1;
    goto LABEL_14;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 1;
  if (a4)
  {
    if (a3)
    {
      if (a2)
      {
        uint64_t v13 = a1[6];
        if (v13)
        {
          unsigned int v14 = *(_DWORD *)(v13 + 4) - 94;
          if (v14 <= 0xA)
          {
            int v15 = 1 << v14;
            if ((v15 & 0x284) != 0)
            {
              CFAllocatorRef v16 = CFGetAllocator(a1);
              uint64_t DigestForData_SHA256 = AMAuthInstallCryptoCreateDigestForData_SHA256(v16, a2, (CFTypeRef *)&value);
              goto LABEL_11;
            }
            if ((v15 & 0x401) != 0)
            {
              CFAllocatorRef v18 = CFGetAllocator(a1);
              uint64_t DigestForData_SHA256 = AMAuthInstallCryptoCreateDigestForData_SHA384(v18, a2, (CFTypeRef *)&value);
LABEL_11:
              uint64_t v11 = DigestForData_SHA256;
              uint64_t v10 = value;
              if (!DigestForData_SHA256)
              {
                if (value)
                {
                  CFDictionarySetValue(a3, a4, value);
                  uint64_t v11 = 0;
                  uint64_t v10 = value;
                }
                else
                {
                  uint64_t v11 = 2;
                }
              }
              goto LABEL_14;
            }
          }
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureBootImage", (uint64_t)"Unknown chipid", (uint64_t)a4, a5, a6, a7, a8, v20);
          uint64_t v10 = 0;
          uint64_t v11 = 99;
        }
      }
    }
  }
LABEL_14:
  SafeRelease(v10);
  return v11;
}

uint64_t AMAuthInstallRembrandtMeasureElf(void *a1, CFDataRef theData, __CFDictionary *a3, const void *a4, const void *a5)
{
  memset(&c, 0, sizeof(c));
  memset(&v44, 0, sizeof(v44));
  if ((unint64_t)CFDataGetLength(theData) <= 0x33
    || (BytePtr = CFDataGetBytePtr(theData), *(_DWORD *)BytePtr != 1179403647))
  {
    char v43 = "invalid file format";
LABEL_16:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureElf", (uint64_t)v43, v10, v11, v12, v13, v14, v44.count[0]);
    CFMutableDataRef Mutable = 0;
    uint64_t v30 = 0;
    uint64_t v41 = 10;
    goto LABEL_13;
  }
  CFAllocatorRef v16 = (unsigned __int16 *)BytePtr;
  BOOL v17 = (unsigned int *)&BytePtr[*((unsigned int *)BytePtr + 7)];
  if ((v17[6] & 0x7000000) == 0x4000000)
  {
    char v43 = "file lacks a hash section";
    goto LABEL_16;
  }
  CFAllocatorRef v18 = &CFDataGetBytePtr(theData)[v17[1]];
  AMAuthInstallLogDumpMemory(7, (uint64_t)"AMAuthInstallRembrandtMeasureElf", (char)"hash section", (uint64_t)v18, v17[4], v19, v20, v21);
  CFAllocatorRef v22 = CFGetAllocator(a1);
  CFMutableDataRef Mutable = CFDataCreateMutable(v22, 0);
  if (!Mutable)
  {
    uint64_t v30 = 0;
    goto LABEL_18;
  }
  CFAllocatorRef v24 = CFGetAllocator(a1);
  uint64_t v30 = CFDataCreateMutable(v24, 0);
  if (!v30)
  {
LABEL_18:
    uint64_t v41 = 2;
    goto LABEL_13;
  }
  unsigned int v31 = *(_DWORD *)(a1[6] + 4) - 94;
  if (v31 > 0xA) {
    goto LABEL_11;
  }
  int v32 = 1 << v31;
  if ((v32 & 0x284) == 0)
  {
    if ((v32 & 0x401) != 0)
    {
      CFDataSetLength(Mutable, 48);
      CC_SHA384_Init(&v44);
      CC_SHA384_Update(&v44, v16, v16[20]);
      CC_SHA384_Update(&v44, v17, v16[21] * v16[22]);
      CC_SHA384_Update(&v44, v18, v17[4]);
      MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
      CC_SHA384_Final(MutableBytePtr, &v44);
      CFDataSetLength(v30, 48);
      uint64_t v38 = CFDataGetBytePtr(theData);
      CC_LONG Length = CFDataGetLength(theData);
      int v40 = CFDataGetMutableBytePtr(v30);
      CC_SHA384(v38, Length, v40);
      goto LABEL_12;
    }
LABEL_11:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureElf", (uint64_t)"Unknown chipid", v25, v26, v27, v28, v29, v44.count[0]);
    goto LABEL_12;
  }
  CFDataSetLength(Mutable, 32);
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, v16, v16[20]);
  CC_SHA256_Update(&c, v17, v16[21] * v16[22]);
  CC_SHA256_Update(&c, v18, v17[4]);
  uint64_t v33 = CFDataGetMutableBytePtr(Mutable);
  CC_SHA256_Final(v33, &c);
  CFDataSetLength(v30, 32);
  uint64_t v34 = CFDataGetBytePtr(theData);
  CC_LONG v35 = CFDataGetLength(theData);
  uint64_t v36 = CFDataGetMutableBytePtr(v30);
  CC_SHA256(v34, v35, v36);
LABEL_12:
  CFDictionarySetValue(a3, a5, v30);
  CFDictionarySetValue(a3, a4, Mutable);
  uint64_t v41 = 0;
LABEL_13:
  SafeRelease(v30);
  SafeRelease(Mutable);
  return v41;
}

uint64_t AMAuthInstallRembrandtMeasureBootPSI(void *a1, CFDataRef theData, __CFDictionary *a3, const void *a4, const __CFString *a5)
{
  CFNumberRef v5 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  uint64_t v62 = 0;
  long long bytes = 0u;
  long long v61 = 0u;
  uint64_t v59 = 0;
  memset(v58, 0, sizeof(v58));
  uint64_t v6 = 1;
  if (!a1 || !theData)
  {
    CFDataRef v9 = 0;
    goto LABEL_35;
  }
  CFDataRef v9 = 0;
  if (a3)
  {
    BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
    uint64_t v14 = BytePtr[4];
    unint64_t v15 = BytePtr[5];
    unint64_t v17 = BytePtr[9];
    unint64_t v16 = BytePtr[10];
    unint64_t Length = CFDataGetLength(theData);
    int v24 = *(_DWORD *)(a1[6] + 4);
    if (v24 == 96)
    {
      if (Length <= v15)
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"gpuk_offset %d >= sizeToMeasure %lld", v19, v20, v21, v22, v23, v15);
LABEL_43:
        uint64_t v6 = 0;
        CFNumberRef v5 = 0;
        CFDataRef v9 = 0;
        goto LABEL_35;
      }
    }
    else if (Length <= v17)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"gpuk2_offset %d >= sizeToMeasure %lld", v19, v20, v21, v22, v23, v17);
      goto LABEL_43;
    }
    if (Length <= v16)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"signature_offset %d >= sizeToMeasure %lld", v19, v20, v21, v22, v23, v16);
      goto LABEL_43;
    }
    if (Length != v14)
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"size %d != sizeToMeasure %lld", v19, v20, v21, v22, v23, v14);
      goto LABEL_43;
    }
    BOOL v25 = v24 == 104 || v24 == 94;
    if (v25) {
      int v26 = 36;
    }
    else {
      int v26 = 52;
    }
    if (v25) {
      int v27 = 127;
    }
    else {
      int v27 = 63;
    }
    if (v25) {
      int v28 = -92;
    }
    else {
      int v28 = -76;
    }
    unsigned int v29 = v24 - 94;
    if (v29 <= 0xA)
    {
      CC_LONG v30 = v16 + v28 - ((v16 + v26) & v27);
      int v31 = 1 << v29;
      if ((v31 & 0x284) != 0) {
        goto LABEL_31;
      }
      if ((v31 & 0x401) != 0)
      {
        if (CFStringCompare(@"PSI2-PartialDigest", a5, 0)
          && CFStringCompare(@"RestorePSI2-PartialDigest", a5, 0))
        {
          AMAuthInstallLog(6, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"Using SHA384 to hash %@", v32, v33, v34, v35, v36, (char)a4);
          uint64_t v37 = CFDataGetBytePtr(theData);
          memset(&c, 0, sizeof(c));
          CC_SHA384_Init(&c);
          CC_SHA384_Update(&c, v37, v30);
          for (unint64_t i = 0; i != 64; i += 16)
            *(int8x16_t *)&v58[i / 4 + 2] = vrev64q_s8(*(int8x16_t *)&c.hash[i / 8]);
          v58[0] = v16 - v30;
          v58[1] = v30;
          CFAllocatorRef v39 = CFGetAllocator(a1);
          p_long long bytes = (const UInt8 *)v58;
          CFIndex v41 = 72;
LABEL_32:
          CFDataRef v9 = CFDataCreate(v39, p_bytes, v41);
          if (v9)
          {
            CFDictionarySetValue(a3, a5, v9);
            int valuePtr = *((_DWORD *)CFDataGetBytePtr(theData) + 1024);
            AMAuthInstallLog(6, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"%@: version=0x%x", v48, v49, v50, v51, v52, (char)a4);
            CFAllocatorRef v53 = CFGetAllocator(a1);
            CFNumberRef v5 = CFNumberCreate(v53, kCFNumberSInt32Type, &valuePtr);
            if (v5)
            {
              CFDictionarySetValue(a3, a4, v5);
              uint64_t v6 = 0;
              goto LABEL_35;
            }
LABEL_38:
            uint64_t v6 = 2;
            goto LABEL_35;
          }
LABEL_37:
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"%s CFDataCreate failed", v43, v44, v45, v46, v47, (char)"AMAuthInstallRembrandtMeasureBootPSI");
          CFNumberRef v5 = 0;
          CFDataRef v9 = 0;
          goto LABEL_38;
        }
        AMAuthInstallLog(6, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"Using SHA256 to hash %@", v32, v33, v34, v35, v36, (char)a4);
LABEL_31:
        char v42 = CFDataGetBytePtr(theData);
        _SHA256Partial(v42, v30, (uint64_t)&bytes + 8);
        LODWORD(bytes) = v16 - v30;
        DWORD1(bytes) = v30;
        CFAllocatorRef v39 = CFGetAllocator(a1);
        p_long long bytes = (const UInt8 *)&bytes;
        CFIndex v41 = 40;
        goto LABEL_32;
      }
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtMeasureBootPSI", (uint64_t)"Unknown chipid", v19, v20, v21, v22, v23, v55);
    goto LABEL_37;
  }
LABEL_35:
  SafeRelease(v9);
  SafeRelease(v5);
  return v6;
}

uint64_t AMAuthInstallRembrandtMeasurePSI(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureBootPSI(a1, a2, a3, @"PSI-Version", @"PSI-PartialDigest");
}

uint64_t AMAuthInstallRembrandtMeasureRestorePSI(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureBootPSI(a1, a2, a3, @"RestorePSI-Version", @"RestorePSI-PartialDigest");
}

uint64_t AMAuthInstallRembrandtMeasurePSI2(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureBootPSI(a1, a2, a3, @"PSI-Version", @"PSI2-PartialDigest");
}

uint64_t AMAuthInstallRembrandtMeasureRestorePSI2(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureBootPSI(a1, a2, a3, @"RestorePSI-Version", @"RestorePSI2-PartialDigest");
}

uint64_t AMAuthInstallRembrandtMeasureEBL(void *a1, const __CFData *a2, __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return AMAuthInstallRembrandtMeasureBootImage(a1, a2, a3, @"EBL-DownloadDigest", a5, a6, a7, a8);
}

uint64_t AMAuthInstallRembrandtMeasureSystemSoftware(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"SystemSW-HashTableDigest", @"SystemSW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureTDS(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"TDSFW-HashTableDigest", @"TDSFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureLTE(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"LTEFW-HashTableDigest", @"LTEFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureBBCFG(void *a1, const __CFData *a2, __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return AMAuthInstallRembrandtMeasureBootImage(a1, a2, a3, @"BBCFG-DownloadDigest", a5, a6, a7, a8);
}

uint64_t AMAuthInstallRembrandtMeasure3GFW(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"3GFW-HashTableDigest", @"3GFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasure2GFW(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"2GFW-HashTableDigest", @"2GFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureRFFW(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"RFFW-HashTableDigest", @"RFFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureAntCfg(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"AntCFG-HashTableDigest", @"AntCFG-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureTPCU(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"TPCU-HashTableDigest", @"TPCU-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureUPC(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"UPC-HashTableDigest", @"UPC-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureLegacyRat(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"LegacyRATFW-HashTableDigest", @"LegacyRATFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureAudioFW(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"AudioFW-HashTableDigest", @"AudioFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureDebugInfo(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"DebugFW-HashTableDigest", @"DebugFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureRPCU(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"RPCU-HashTableDigest", @"RPCU-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureDPC(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"DPC-HashTableDigest", @"DPC-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureC2K(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"CDMA2KFW-HashTableDigest", @"CDMA2KFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasurecustpack(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"Custpack-HashTableDigest", @"Custpack-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureGNSSFW(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"GNSSFW-HashTableDigest", @"GNSSFW-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtMeasureIRXCoefficient(void *a1, const __CFData *a2, __CFDictionary *a3)
{
  return AMAuthInstallRembrandtMeasureElf(a1, a2, a3, @"IRXCoefficient-HashTableDigest", @"IRXCoefficient-DownloadDigest");
}

uint64_t AMAuthInstallRembrandtCopyNextComponentName(uint64_t a1, CFTypeRef *a2)
{
  *a2 = CFRetain(@"boot.bbfw");
  return 0;
}

uint64_t AMAuthInstallRembrandtLocalCreateSigningResponse(void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  int valuePtr = 0;
  uint64_t v101 = 0;
  CFDictionaryRef value = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtLocalCreateSigningResponse", (uint64_t)"Failed to allocate responseDict", v9, v10, v11, v12, v13, v97);
    CFTypeRef v71 = 0;
    CFMutableDictionaryRef v39 = 0;
    CFDictionaryRef v36 = 0;
LABEL_61:
    uint64_t v34 = 2;
    goto LABEL_50;
  }
  uint64_t v15 = AMAuthInstallRembrandtLocalRegisterKeys((uint64_t)a1, v7, v8, v9, v10, v11, v12, v13);
  if (v15)
  {
    uint64_t v34 = v15;
    CFTypeRef v71 = 0;
    CFMutableDictionaryRef v39 = 0;
    CFDictionaryRef v36 = 0;
    goto LABEL_50;
  }
  unint64_t v16 = CFDictionaryGetValue(a2, @"BbSNUM");
  if (!v16 || (uint64_t v22 = v16, TypeID = CFDataGetTypeID(), TypeID != CFGetTypeID(v22)))
  {
    uint64_t v84 = "bad or missing SNUM";
    goto LABEL_38;
  }
  int v24 = CFDictionaryGetValue(a2, @"BbChipID");
  if (!v24 || (BOOL v25 = v24, v26 = CFNumberGetTypeID(), v26 != CFGetTypeID(v25)))
  {
    uint64_t v84 = "bad or missing chipid";
    goto LABEL_38;
  }
  if (!CFNumberGetValue((CFNumberRef)v25, kCFNumberSInt32Type, &valuePtr))
  {
    uint64_t v84 = "failed to read chipid";
LABEL_38:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtLocalCreateSigningResponse", (uint64_t)v84, v17, v18, v19, v20, v21, v97);
    CFTypeRef v71 = 0;
    CFMutableDictionaryRef v39 = 0;
    CFDictionaryRef v36 = 0;
LABEL_39:
    uint64_t v34 = 1;
    goto LABEL_50;
  }
  int v27 = CFDictionaryGetValue(a2, @"BbGoldCertId");
  if (!v27 || (int v28 = v27, v29 = CFNumberGetTypeID(), v29 != CFGetTypeID(v28)))
  {
    uint64_t v84 = "bad or missing certid";
    goto LABEL_38;
  }
  CC_LONG v30 = CFDictionaryGetValue(a2, @"BasebandFirmware");
  if (!v30 || (int v31 = v30, v32 = CFDictionaryGetTypeID(), v32 != CFGetTypeID(v31)))
  {
    uint64_t v84 = "bad or missing baseband firmware dict";
    goto LABEL_38;
  }
  CFAllocatorRef v33 = CFGetAllocator(a1);
  uint64_t v34 = 2;
  DeepCFDictionaryRef Copy = (const __CFDictionary *)CFPropertyListCreateDeepCopy(v33, a2, 2uLL);
  CFDictionaryRef v36 = DeepCopy;
  if (!DeepCopy)
  {
    CFTypeRef v71 = 0;
    CFMutableDictionaryRef v39 = 0;
    goto LABEL_50;
  }
  uint64_t v37 = (__CFDictionary *)CFDictionaryGetValue(DeepCopy, @"BasebandFirmware");
  CFAllocatorRef v38 = CFGetAllocator(a1);
  CFMutableDictionaryRef v39 = CFDictionaryCreateMutable(v38, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v39)
  {
    CFTypeRef v71 = 0;
    goto LABEL_61;
  }
  CFDictionaryRef theDict = v37;
  CFDictionarySetValue(Mutable, @"BasebandFirmware", v39);
  int v40 = CFDictionaryGetValue((CFDictionaryRef)v31, @"PSI-PartialDigest");
  if (v40)
  {
    CFTypeID v41 = CFDataGetTypeID();
    if (v41 != CFGetTypeID(v40)) {
      goto LABEL_53;
    }
    PSIStitchCFDataRef Data = _AMAuthInstallRembrandtLocalCreatePSIStitchData(a1, (const __CFData *)v40, (CFTypeRef *)&value, v42, v43, v44, v45, v46);
    if (PSIStitchData) {
      goto LABEL_54;
    }
    CFDictionarySetValue(v39, @"PSI-Blob", value);
  }
  uint64_t v48 = CFDictionaryGetValue((CFDictionaryRef)v31, @"RestorePSI-PartialDigest");
  if (!v48) {
    goto LABEL_22;
  }
  uint64_t v49 = v48;
  CFTypeID v50 = CFDataGetTypeID();
  if (v50 != CFGetTypeID(v49))
  {
LABEL_53:
    CFTypeRef v71 = 0;
    goto LABEL_39;
  }
  PSIStitchCFDataRef Data = _AMAuthInstallRembrandtLocalCreatePSIStitchData(a1, (const __CFData *)v49, (CFTypeRef *)&v101, v51, v52, v53, v54, v55);
  if (PSIStitchData) {
    goto LABEL_54;
  }
  CFDictionarySetValue(v39, @"RestorePSI-Blob", v101);
LABEL_22:
  CFDataRef v61 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v31, @"PSI2-PartialDigest");
  if (v40)
  {
    CFTypeID v62 = CFDataGetTypeID();
    if (v62 != CFGetTypeID(v40)) {
      goto LABEL_53;
    }
  }
  if (!v61) {
    goto LABEL_27;
  }
  PSIStitchCFDataRef Data = _AMAuthInstallRembrandtLocalCreatePSIStitchData(a1, v61, (CFTypeRef *)&v100, v56, v57, v58, v59, v60);
  if (PSIStitchData)
  {
LABEL_54:
    uint64_t v34 = PSIStitchData;
    CFTypeRef v71 = 0;
    goto LABEL_50;
  }
  CFDictionarySetValue(v39, @"PSI2-Blob", v100);
LABEL_27:
  uint64_t v63 = CFDictionaryGetValue((CFDictionaryRef)v31, @"RestorePSI2-PartialDigest");
  if (!v63) {
    goto LABEL_31;
  }
  uint64_t v64 = v63;
  CFTypeID v65 = CFDataGetTypeID();
  if (v65 != CFGetTypeID(v64)) {
    goto LABEL_53;
  }
  PSIStitchCFDataRef Data = _AMAuthInstallRembrandtLocalCreatePSIStitchData(a1, (const __CFData *)v64, (CFTypeRef *)&v99, v66, v67, v68, v69, v70);
  if (PSIStitchData) {
    goto LABEL_54;
  }
  CFDictionarySetValue(v39, @"RestorePSI2-Blob", v99);
LABEL_31:
  CFTypeRef v71 = 0;
  unsigned int v72 = *(_DWORD *)(a1[6] + 4) - 94;
  if (v72 <= 0xA)
  {
    int v73 = 1 << v72;
    if ((v73 & 0x284) != 0)
    {
      CFDataRef v74 = (const __CFData *)value;
      memset(&c, 0, 104);
      CFAllocatorRef v75 = CFGetAllocator(a1);
      uint64_t v76 = CFDataCreateMutable(v75, 32);
      uint64_t v77 = v76;
      if (v76)
      {
        CFDataSetLength(v76, 32);
        BytePtr = CFDataGetBytePtr((CFDataRef)v40);
        unsigned int v79 = *((_DWORD *)BytePtr + 1);
        CC_SHA256_Init((CC_SHA256_CTX *)&c);
        for (uint64_t i = 8; i != 40; i += 4)
          *(_DWORD *)((char *)c.count + i) = bswap32(*(_DWORD *)&BytePtr[i]);
        c.count[0] = v79;
        uint64_t v81 = CFDataGetBytePtr(v74);
        CC_LONG Length = CFDataGetLength(v74);
        CC_SHA256_Update((CC_SHA256_CTX *)&c, v81, Length);
        MutableBytePtr = CFDataGetMutableBytePtr(v77);
        CC_SHA256_Final(MutableBytePtr, (CC_SHA256_CTX *)&c);
        CFTypeRef v71 = CFRetain(v77);
        uint64_t v34 = 0;
        goto LABEL_45;
      }
      goto LABEL_62;
    }
    if ((v73 & 0x401) != 0)
    {
      CFDataRef v85 = (const __CFData *)value;
      memset(&c, 0, sizeof(c));
      CFAllocatorRef v86 = CFGetAllocator(a1);
      uint64_t v87 = CFDataCreateMutable(v86, 48);
      uint64_t v77 = v87;
      if (v87)
      {
        CFDataSetLength(v87, 48);
        uint64_t v88 = CFDataGetBytePtr((CFDataRef)v40);
        uint64_t v89 = v88 + 8;
        CC_LONG64 v90 = *((unsigned int *)v88 + 1);
        CC_SHA384_Init(&c);
        for (uint64_t j = 0; j != 8; ++j)
          c.hash[j] = bswap64(*(void *)&v89[j * 8]);
        c.count[0] = v90;
        c.count[1] = 0;
        uint64_t v92 = CFDataGetBytePtr(v85);
        CC_LONG v93 = CFDataGetLength(v85);
        CC_SHA384_Update(&c, v92, v93);
        uint64_t v94 = CFDataGetMutableBytePtr(v77);
        CC_SHA384_Final(v94, &c);
        CFTypeRef v71 = CFRetain(v77);
        uint64_t v34 = 0;
LABEL_45:
        SafeRelease(v77);
        CFDictionarySetValue(theDict, @"PSI-DownloadDigest", v71);
        if (!v77) {
          goto LABEL_50;
        }
        goto LABEL_46;
      }
LABEL_62:
      CFTypeRef v71 = 0;
      uint64_t v34 = 2;
      goto LABEL_45;
    }
  }
LABEL_46:
  if (CFDictionaryContainsKey(a2, @"@BBTicket"))
  {
    uint64_t v95 = AMAuthInstallBasebandRembrandtLocalProvisionDevice();
    if (v95)
    {
      uint64_t v34 = v95;
      goto LABEL_50;
    }
    CFDictionarySetValue(Mutable, @"BBTicket", 0);
  }
  *a3 = CFRetain(Mutable);
  AMAuthInstallDebugWriteObject((char *)a1, a2, @"tss-request-bb-local", 2);
  AMAuthInstallDebugWriteObject((char *)a1, Mutable, @"tss-response-bb-local", 2);
  uint64_t v34 = 0;
LABEL_50:
  SafeRelease(v39);
  SafeRelease(value);
  SafeRelease(v101);
  SafeRelease(v100);
  SafeRelease(v99);
  SafeRelease(0);
  SafeRelease(v36);
  SafeRelease(Mutable);
  SafeRelease(v71);
  SafeRelease(0);
  return v34;
}

uint64_t AMAuthInstallRembrandtLocalRegisterKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(*(_DWORD *)(*(void *)(a1 + 48) + 4))
  {
    case '^':
    case 'h':
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      goto LABEL_5;
    case 'e':
    case 'g':
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      AMAuthInstallBasebandRembrandtLocalProvisionDevice();
LABEL_5:
      AMAuthInstallLog(6, (uint64_t)"AMAuthInstallRembrandtLocalRegisterKeys", (uint64_t)"rembrandt local signing keys available", v8, v9, v10, v11, v12, v14);
      uint64_t result = 0;
      break;
    default:
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtLocalRegisterKeys", (uint64_t)"unknown chipID", a4, a5, a6, a7, a8, v14);
      uint64_t result = 99;
      break;
  }
  return result;
}

uint64_t _AMAuthInstallRembrandtLocalCreatePSIStitchData(void *cf, const __CFData *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  memset(&c, 0, sizeof(c));
  memset(&v125, 0, sizeof(v125));
  CFDataRef v124 = 0;
  int v123 = 0;
  unsigned int v11 = *(_DWORD *)(cf[6] + 4) - 94;
  if (v11 <= 0xA)
  {
    int v12 = 1 << v11;
    if ((v12 & 0x284) != 0)
    {
      int v13 = 256;
      goto LABEL_6;
    }
    if ((v12 & 0x401) != 0)
    {
      int v13 = 104;
LABEL_6:
      int v123 = v13;
      if (a3) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"invalid chipid", a4, a5, a6, a7, a8, v121);
  if (!cf[6])
  {
    CFAllocatorRef v38 = "amai->bbParameters is NULL";
    goto LABEL_54;
  }
  int v13 = 0;
  if (!a3)
  {
LABEL_17:
    CFAllocatorRef v38 = "outPsiStitchDataData is NULL";
LABEL_54:
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)v38, a4, a5, a6, a7, a8, v121);
    uint64_t v22 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFMutableDataRef Mutable = 0;
    goto LABEL_60;
  }
LABEL_7:
  CFAllocatorRef v14 = CFGetAllocator(cf);
  CFMutableDataRef Mutable = CFDataCreateMutable(v14, 0);
  if (!Mutable)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"stitchData is NULL", v15, v16, v17, v18, v19, v121);
    uint64_t v22 = 0;
    goto LABEL_52;
  }
  CFDataRef theData = 0;
  int v21 = *(_DWORD *)(cf[6] + 4) - 94;
  if v21 < 0xB && ((0x685u >> v21))
  {
    uint64_t DigestForKey = AMAuthInstallRembrandtLocalCreateDigestForKey((uint64_t)cf, (uint64_t)*(&off_2642BAA70 + v21), (uint64_t)&theData, v15, v16, v17, v18, v19);
    if (DigestForKey)
    {
      uint64_t v24 = DigestForKey;
      uint64_t v22 = 0;
      CFDictionaryRef MutableCopy = 0;
      goto LABEL_46;
    }
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    CFDataAppendBytes(Mutable, BytePtr, Length);
    bytes[0] = xmmword_217B30557;
    bytes[1] = algn_217B30567;
    CFDataAppendBytes(Mutable, (const UInt8 *)bytes, 32);
    unsigned int v33 = *(_DWORD *)(cf[6] + 4) - 94;
    if (v33 <= 0xA)
    {
      int v34 = 1 << v33;
      if ((v34 & 0x284) != 0)
      {
        uint64_t v35 = CFDataGetBytePtr(a2);
        CFDictionaryRef v36 = v35;
        uint64_t v37 = 0;
LABEL_20:
        unsigned int v39 = *(_DWORD *)v35;
LABEL_21:
        uint64_t v40 = v39;
        CFIndex v41 = CFDataGetLength(Mutable);
        if (CFDataGetLength(Mutable) + 12 > v39)
        {
          CFDataGetLength(Mutable);
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"masteredReservationLength %d < CFDataGetLength(stitchData) %lld + snumLength %d", v104, v105, v106, v107, v108, v39);
          uint64_t v22 = 0;
          goto LABEL_58;
        }
        uint64_t v42 = v39 - v41 - 12;
        if (v40 - v41 == 12)
        {
          uint64_t v22 = 0;
          goto LABEL_26;
        }
        uint64_t v43 = (UInt8 *)malloc(v40 - v41 - 12);
        uint64_t v22 = v43;
        if (v43)
        {
          memset(v43, 255, v42);
          CFDataAppendBytes(Mutable, v22, v42);
LABEL_26:
          uint64_t v49 = CFDataGetBytePtr(*(CFDataRef *)(cf[6] + 16));
          CFIndex v50 = CFDataGetLength(*(CFDataRef *)(cf[6] + 16));
          CFDataAppendBytes(Mutable, v49, v50);
          CFIndex v51 = CFDataGetLength(*(CFDataRef *)(cf[6] + 16));
          uint64_t v57 = cf[6];
          if (v51 != 12)
          {
            char v109 = CFDataGetLength(*(CFDataRef *)(v57 + 16));
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"CFDataGetLength(amai->bbParameters->snum) %lld != snumLength %d", v110, v111, v112, v113, v114, v109);
            goto LABEL_58;
          }
          unsigned int v58 = *(_DWORD *)(v57 + 4) - 94;
          if (v58 > 0xA) {
            goto LABEL_38;
          }
          int v59 = 1 << v58;
          if ((v59 & 0x284) != 0)
          {
            CC_LONG v60 = *((_DWORD *)v36 + 1);
            CC_SHA256_Init(&c);
            for (uint64_t i = 2; i != 10; ++i)
              c.count[i] = bswap32(*(_DWORD *)&v36[i * 4]);
            c.count[0] = v60;
            c.count[1] = 0;
            CFTypeID v62 = CFDataGetBytePtr(Mutable);
            CC_LONG v63 = CFDataGetLength(Mutable);
            CC_SHA256_Update(&c, v62, v63);
            CC_SHA256_Final(md, &c);
            AMAuthInstallBasebandRembrandtLocalProvisionDevice();
            if (CFDataGetLength(v124) != v13)
            {
              char v69 = CFDataGetLength(v124);
              AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"CFDataGetLength(signatureData) %lld != signatureLength %d", v70, v71, v72, v73, v74, v69);
LABEL_58:
              CFDictionaryRef MutableCopy = 0;
              goto LABEL_60;
            }
            goto LABEL_39;
          }
          if ((v59 & 0x401) != 0)
          {
            CFAllocatorRef v75 = v37 + 8;
            CC_LONG64 v76 = *((unsigned int *)v37 + 1);
            CC_SHA384_Init(&v125);
            for (uint64_t j = 0; j != 8; ++j)
              v125.hash[j] = bswap64(*(void *)&v75[j * 8]);
            v125.count[0] = v76;
            v125.count[1] = 0;
            char v78 = CFDataGetBytePtr(Mutable);
            CC_LONG v79 = CFDataGetLength(Mutable);
            CC_SHA384_Update(&v125, v78, v79);
            LOBYTE(v78) = *CFDataGetBytePtr(Mutable);
            CFDataGetLength(Mutable);
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"STITCH ptr 0x%x STITCH data 0x%x", v80, v81, v82, v83, v84, (char)v78);
            CC_SHA384_Final(md, &v125);
            AMAuthInstallBasebandRembrandtLocalProvisionDevice();
          }
          else
          {
LABEL_38:
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"invalid chipid", v52, v53, v54, v55, v56, v121);
          }
LABEL_39:
          if (!v124)
          {
            AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"amai is NULL", v64, v65, v66, v67, v68, v121);
            goto LABEL_58;
          }
          CFIndex v85 = 0;
          CFDictionaryRef MutableCopy = 0;
          switch(*(_DWORD *)(cf[6] + 4))
          {
            case '^':
            case 'h':
              CFAllocatorRef v86 = CFDataGetBytePtr(v124);
              CFIndex v87 = CFDataGetLength(v124);
              CFDataAppendBytes(Mutable, v86, v87);
              CFDataAppendBytes(Mutable, kGoldLeafCertificate_ice18_EC, 463);
              CFDataAppendBytes(Mutable, kRootGoldCertificate_ice18_EC, 450);
              LODWORD(v86) = CFDataGetLength(Mutable);
              CFDataIncreaseLength(Mutable, 5231);
              MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
              memset(&MutableBytePtr[v86], 255, 0x146FuLL);
              CFIndex v89 = CFDataGetLength(v124);
              CFDictionaryRef MutableCopy = 0;
              uint64_t v90 = 6144;
              goto LABEL_43;
              CFAllocatorRef v95 = CFGetAllocator(cf);
              CFDictionaryRef MutableCopy = CFDataCreateMutableCopy(v95, 0, v124);
              CFStringRef v96 = CFDataGetMutableBytePtr(MutableCopy);
              CFIndex v97 = CFDataGetLength(MutableCopy);
              if ((v97 & 0xFFFFFFFE) != 0)
              {
                uint64_t v98 = v97 >> 1;
                CFIndex v99 = v97 - 1;
                uint64_t v100 = v96;
                do
                {
                  UInt8 v101 = v96[v99];
                  v96[v99] = *v100;
                  *v100++ = v101;
                  --v99;
                  --v98;
                }
                while (v98);
              }
              CFStringRef v102 = CFDataGetBytePtr(MutableCopy);
              CFIndex v103 = CFDataGetLength(MutableCopy);
              CFDataAppendBytes(Mutable, v102, v103);
              CFDataAppendBytes(Mutable, kRootGoldCertificate, 540);
              CFDataAppendBytes(Mutable, kGoldLeafCertificate, 796);
              CFIndex v85 = v40 + CFDataGetLength(MutableCopy) + 1336;
              break;
            case 'e':
            case 'g':
              CFAllocatorRef v91 = CFDataGetBytePtr(v124);
              CFIndex v92 = CFDataGetLength(v124);
              CFDataAppendBytes(Mutable, v91, v92);
              CFDataAppendBytes(Mutable, kGoldLeafCertificate_x509, 818);
              CFDataAppendBytes(Mutable, kRootGoldCertificate_x509, 828);
              LODWORD(v91) = CFDataGetLength(Mutable);
              CFDataIncreaseLength(Mutable, 4490);
              CC_LONG v93 = CFDataGetMutableBytePtr(Mutable);
              memset(&v93[v91], 255, 0x118AuLL);
              CFIndex v89 = CFDataGetLength(v124);
              CFDictionaryRef MutableCopy = 0;
              uint64_t v90 = 6136;
LABEL_43:
              CFIndex v85 = v40 + v90 + v89;
              break;
            default:
              break;
          }
          if (v85 == CFDataGetLength(Mutable))
          {
            uint64_t v24 = 0;
            *a3 = CFRetain(Mutable);
            goto LABEL_46;
          }
          char v115 = CFDataGetLength(Mutable);
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"stitchData is %lld, expected size is %d", v116, v117, v118, v119, v120, v115);
LABEL_60:
          uint64_t v24 = 1;
          goto LABEL_46;
        }
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"paddingBytes is NULL", v44, v45, v46, v47, v48, v121);
LABEL_52:
        CFDictionaryRef MutableCopy = 0;
        uint64_t v24 = 2;
        goto LABEL_46;
      }
      if ((v34 & 0x401) != 0)
      {
        uint64_t v35 = CFDataGetBytePtr(a2);
        uint64_t v37 = v35;
        CFDictionaryRef v36 = 0;
        goto LABEL_20;
      }
    }
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"invalid chipid", v28, v29, v30, v31, v32, v121);
    unsigned int v39 = 0;
    CFDictionaryRef v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_21;
  }
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallRembrandtLocalCreatePSIStitchData", (uint64_t)"invalid chipid", v15, v16, v17, v18, v19, v121);
  uint64_t v22 = 0;
  CFDictionaryRef MutableCopy = 0;
  uint64_t v24 = 99;
LABEL_46:
  SafeRelease(Mutable);
  SafeRelease(v124);
  SafeRelease(MutableCopy);
  SafeFree(v22);
  return v24;
}

uint64_t AMAuthInstallRembrandtLocalCreateDigestForKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 1;
  if (a1 && a2 && a3)
  {
    unsigned int v9 = *(_DWORD *)(*(void *)(a1 + 48) + 4) - 94;
    if (v9 <= 0xA)
    {
      int v10 = 1 << v9;
      if ((v10 & 0x284) != 0)
      {
        return AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      }
      if ((v10 & 0x401) != 0)
      {
        return AMAuthInstallBasebandRembrandtLocalProvisionDevice();
      }
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRembrandtLocalCreateDigestForKey", (uint64_t)"Unknown chipid", a4, a5, a6, a7, a8, vars0);
    return 99;
  }
  return v8;
}

uint64_t AMAuthInstallRequestSendSyncWithHeader(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v133 = 0;
  CFTypeRef cf = 0;
  uint64_t v132 = 0;
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v9 = 2;
  DeepCFDictionaryRef Copy = (__CFDictionary *)CFPropertyListCreateDeepCopy(v8, a2, 2uLL);
  CFMutableDictionaryRef theDict = DeepCopy;
  if (!DeepCopy) {
    goto LABEL_28;
  }
  uint64_t v16 = *(const void **)(a1 + 64);
  if (v16) {
    CFDictionarySetValue(DeepCopy, @"@Locality", v16);
  }
  uint64_t v17 = (const void **)(a1 + 120);
  CFDataRef v18 = *(const __CFData **)(a1 + 120);
  CFDataRef v19 = v18;
  if (!v18)
  {
    if (!*(void *)(a1 + 104))
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"SSO function returned NULL and no SSO token was provided, SSO disabled.", v11, v12, v13, v14, v15, v126);
      goto LABEL_15;
    }
    AMAuthInstallLog(5, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"using SSO.", v11, v12, v13, v14, v15, v126);
    CFDataRef v19 = (const __CFData *)*v17;
    if (!*v17)
    {
      BOOL v25 = *(uint64_t (**)(uint64_t, CFAllocatorRef, uint64_t, uint64_t *))(a1 + 104);
      CFAllocatorRef v26 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v27 = v25(a1, v26, a1 + 120, &v132);
      if (v27)
      {
        uint64_t v9 = v27;
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"failed to create sso data %@", v28, v29, v30, v31, v32, v132);
        goto LABEL_13;
      }
      CFDataRef v19 = (const __CFData *)*v17;
      if (!*v17)
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"SSO failed to authenticate.", v28, v29, v30, v31, v32, v126);
        CFDataRef Data = 0;
        uint64_t v34 = 0;
        uint64_t v9 = 22;
        goto LABEL_29;
      }
    }
  }
  AMAuthInstallCryptoCreateDigestForData((const __CFAllocator *)*MEMORY[0x263EFFB08], v19, &cf);
  if (cf)
  {
    AMAuthInstallLog(7, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"AuthUserId Hash: %@", v20, v21, v22, v23, v24, (char)cf);
    CFRelease(cf);
  }
  CFDictionarySetValue(theDict, @"AuthUserId", *v17);
  if (!v18)
  {
    SafeRelease(*v17);
    *uint64_t v17 = 0;
  }
LABEL_15:
  uint64_t v35 = *(void *)(a1 + 16);
  if (!v35) {
    goto LABEL_21;
  }
  if (*(void *)(v35 + 144))
  {
    uint64_t context = a1;
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
    if (MutableCopy)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_ApplyTagPrefix, &context);
      SafeRelease(theDict);
      CFMutableDictionaryRef theDict = MutableCopy;
      uint64_t v35 = *(void *)(a1 + 16);
      if (!v35) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"fullrequest copy allocation failure", v36, v37, v38, v39, v40, v126);
    uint64_t v9 = 0;
LABEL_13:
    CFDataRef Data = 0;
    uint64_t v34 = 0;
    goto LABEL_29;
  }
LABEL_19:
  CFDictionaryRef v41 = *(const __CFDictionary **)(v35 + 136);
  if (v41) {
    CFDictionaryApplyFunction(v41, (CFDictionaryApplierFunction)_ApplyOverrideTags, theDict);
  }
LABEL_21:
  uint64_t v42 = theDict;
  Simpleuint64_t PlatformInfoString = AMAuthInstallPlatformGetSimplePlatformInfoString();
  CFDictionarySetValue(v42, @"@HostPlatformInfo", SimplePlatformInfoString);
  uint64_t v44 = theDict;
  LibraryVersionString = AMAuthInstallSupportGetLibraryVersionString();
  CFDictionarySetValue(v44, @"@VersionInfo", LibraryVersionString);
  uint64_t v46 = *(void *)(a1 + 16);
  if (!v46 || !*(unsigned char *)(v46 + 116)) {
    CFDictionarySetValue(theDict, @"@BBTicket", (const void *)*MEMORY[0x263EFFB40]);
  }
  uint64_t v47 = *(const void **)(a1 + 96);
  if (v47) {
    CFDictionarySetValue(theDict, @"@UUID", v47);
  }
  uint64_t v48 = AMAuthInstallVinylRemoveFirmwareLoaderVersionTag((const void *)a1, &theDict);
  if (v48)
  {
    uint64_t v9 = v48;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"AMAuthInstallVinylRemoveFirmwareLoaderVersionTag %d", v49, v50, v51, v52, v53, v48);
LABEL_28:
    CFDataRef Data = 0;
    uint64_t v34 = 0;
    goto LABEL_29;
  }
  uint64_t v9 = 2;
  AMAuthInstallDebugWriteObject((char *)a1, theDict, @"tss-request", 2);
  session = tss_create_session(&stru_26C809658, *(const void **)(a1 + 72));
  uint64_t v34 = (uint64_t)session;
  if (!session)
  {
    CFDataRef Data = 0;
    goto LABEL_29;
  }
  CFRelease((CFTypeRef)session[3]);
  *(void *)(v34 + 24) = CFRetain(theDict);
  *(_DWORD *)(v34 + 16) = *(_DWORD *)(a1 + 80);
  *(void *)(v34 + 80) = *(void *)(a1 + 488);
  *(void *)(v34 + 88) = *(void *)(a1 + 512);
  *(void *)(v34 + 32) = a3;
  unsigned int v70 = tss_submit(v34, v63, v64, v65, v66, v67, v68, v69);
  int v76 = v70;
  if (!v70)
  {
    uint64_t v9 = 0;
    goto LABEL_52;
  }
  if (v70 <= 0x2710)
  {
    uint64_t v77 = *(const void **)(v34 + 72);
    if (v77)
    {
      uint64_t v9 = v70 + 3100;
      LODWORD(context) = v70 + 3100;
      if (v70 < 0x384)
      {
        CFAllocatorRef v78 = CFGetAllocator((CFTypeRef)a1);
        CFNumberRef v84 = CFNumberCreate(v78, kCFNumberIntType, &context);
        if (v84)
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 352), v84, v77);
          AMAuthInstallLog(7, (uint64_t)"kAMAuthInstallRequestCacheLocalizedTssError", (uint64_t)"cached server error text: (%d) %@", v85, v86, v87, v88, v89, context);
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"kAMAuthInstallRequestCacheLocalizedTssError", (uint64_t)"failed to cache server error text: (%d) %@", v79, v80, v81, v82, v83, context);
        }
        SafeRelease(v84);
        goto LABEL_51;
      }
      AMAuthInstallLog(3, (uint64_t)"kAMAuthInstallRequestCacheLocalizedTssError", (uint64_t)"tss error code out of bounds (%d)", v71, v72, v73, v74, v75, v70 + 28);
    }
  }
  SafeRelease(0);
  if (v76 > 9999)
  {
    if ((v76 - 10000) > 0xC) {
      uint64_t v9 = 14;
    }
    else {
      uint64_t v9 = dword_217B314B0[v76 - 10000];
    }
  }
  else
  {
    uint64_t v9 = (v76 + 3100);
  }
LABEL_51:
  char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)a1, v9);
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"failed tss submission: %@", v91, v92, v93, v94, v95, LocalizedStatusString);
LABEL_52:
  CFAllocatorRef v96 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef Data = CFPropertyListCreateData(v96, theDict, kCFPropertyListXMLFormat_v1_0, 0, 0);
  if (Data)
  {
    CFAllocatorRef v97 = CFGetAllocator((CFTypeRef)a1);
    int v103 = AMAuthInstallSupportBase64Encode(v97, Data, &v133, v98, v99, v100, v101, v102);
    if (v76)
    {
      if (!v103)
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"failed tss request:<<<<<<<<<<\n%@", v104, v105, v106, v107, v108, (char)v133);
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"failed tss request:>>>>>>>>>>", v109, v110, v111, v112, v113, v127);
      }
    }
    else
    {
      if (!v103)
      {
        AMAuthInstallLog(8, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"successful tss request:<<<<<<<<<<\n%@", v104, v105, v106, v107, v108, (char)v133);
        AMAuthInstallLog(8, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"successful tss request:>>>>>>>>>>", v114, v115, v116, v117, v118, v128);
      }
      unint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v34 + 40), @"@ServerVersion");
      CC_SHA512_CTX v125 = @"unavailable";
      if (Value) {
        LOBYTE(v125) = (_BYTE)Value;
      }
      AMAuthInstallLog(5, (uint64_t)"AMAuthInstallRequestSendSyncWithHeader", (uint64_t)"received tss response (server version: %@)", v120, v121, v122, v123, v124, (char)v125);
      AMAuthInstallDebugWriteObject((char *)a1, *(CFTypeRef *)(v34 + 40), @"tss-response", 2);
      uint64_t v9 = 0;
      if (a4) {
        *a4 = CFRetain(*(CFTypeRef *)(v34 + 40));
      }
    }
  }
LABEL_29:
  SafeRelease(0);
  SafeRelease(0);
  SafeRelease(theDict);
  SafeRelease(0);
  SafeRelease(Data);
  SafeRelease(v133);
  SafeRelease(0);
  if (v34) {
    tss_close_session((void *)v34, v54, v55, v56, v57, v58, v59, v60);
  }
  return v9;
}

void _ApplyTagPrefix(const __CFString *a1, const void *a2, CFMutableDictionaryRef *a3)
{
  CFAllocatorRef MutableCopy = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@,", *(void *)(*((void *)*a3 + 2) + 144));
  uint64_t v18 = *((void *)*a3 + 11);
  CFStringRef v13 = CFStringCreateWithFormat(MutableCopy, 0, @"@%@");
  if (v13 && (CFAllocatorRef MutableCopy = (const __CFAllocator *)CFStringCreateMutableCopy(MutableCopy, 0, a1)) != 0)
  {
    if (CFStringHasPrefix(a1, @"Ap,"))
    {
      uint64_t v14 = (__CFString *)MutableCopy;
      v15.CFIndex location = 0;
      v15.CFIndex length = 3;
LABEL_7:
      CFStringReplace(v14, v15, v7);
      uint64_t v16 = a3[1];
      uint64_t v17 = MutableCopy;
LABEL_8:
      CFDictionarySetValue(v16, v17, a2);
      CFDictionaryRemoveValue(a3[1], a1);
      goto LABEL_9;
    }
    if (CFStringHasPrefix(a1, @"Ap"))
    {
      uint64_t v14 = (__CFString *)MutableCopy;
      v15.CFIndex location = 0;
      v15.CFIndex length = 2;
      goto LABEL_7;
    }
    if (CFEqual(a1, @"@ApImg4Ticket"))
    {
      uint64_t v16 = a3[1];
      uint64_t v17 = v13;
      goto LABEL_8;
    }
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"_ApplyTagPrefix", (uint64_t)"Failed allocation", v8, v9, v10, v11, v12, v18);
  }
LABEL_9:
  SafeRelease(v7);
  SafeRelease(v13);

  SafeRelease(MutableCopy);
}

void _ApplyOverrideTags(void *key, const void *a2, CFDictionaryRef theDict)
{
  if (CFDictionaryContainsKey(theDict, key))
  {
    unint64_t Value = CFDictionaryGetValue(theDict, key);
    CFDictionarySetValue(theDict, a2, Value);
    CFDictionaryRemoveValue(theDict, key);
  }
}

uint64_t AMAuthInstallRequestSendSync(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  return AMAuthInstallRequestSendSyncWithHeader(a1, a2, 0, a3);
}

uint64_t AMAuthInstallRequestAbbreviatedSendSync(uint64_t **cf, const void *a2, CFTypeRef *a3)
{
  if (cf)
  {
    int v4 = 0;
    uint64_t v5 = 1;
    if (a3 && a2 && cf[2])
    {
      CFAllocatorRef v8 = CFGetAllocator(cf);
      CFMutableDataRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      int v4 = Mutable;
      if (Mutable)
      {
        _CFDictionarySetInteger64(Mutable, @"ApECID", *cf[2]);
        _CFDictionarySetInteger32(v4, @"ApChipID", *((_DWORD *)cf[2] + 2));
        _CFDictionarySetInteger32(v4, @"ApBoardID", *((_DWORD *)cf[2] + 3));
        _CFDictionarySetBoolean(v4, @"ApProductionMode", *((unsigned __int8 *)cf[2] + 20));
        _CFDictionarySetInteger32(v4, @"ApSecurityDomain", *((_DWORD *)cf[2] + 4));
        CFDictionarySetValue(v4, @"UniqueBuildID", a2);
        uint64_t v5 = AMAuthInstallRequestSendSyncWithHeader((uint64_t)cf, v4, 0, a3);
      }
      else
      {
        uint64_t v5 = 2;
      }
    }
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 1;
  }
  SafeRelease(v4);
  return v5;
}

uint64_t AMAuthInstallSsoCreateServiceTicket(const __CFAllocator *a1, CFDataRef *a2)
{
  uint64_t v4 = AMAuthInstallSsoInitialize();
  if (v4)
  {
    uint64_t v10 = v4;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSsoCreateServiceTicket", (uint64_t)"Failed to initialize SSO", v5, v6, v7, v8, v9, v12);
    return v10;
  }
  else
  {
    return _AMAuthInstallSsoCreateServiceTicket(0, a1, a2);
  }
}

uint64_t AMAuthInstallSsoInitialize()
{
  if (_susso_lib) {
    goto LABEL_5;
  }
  CFAllocatorRef v0 = dlopen("/usr/lib/libSoftwareUpdateSSO.dylib", 1);
  _susso_lib = (uint64_t)v0;
  if (v0)
  {
    _AMAuthInstallSsoSUSSOCopyToken = dlsym(v0, "copyPersonalizationSSOToken");
    if (_AMAuthInstallSsoSUSSOCopyToken)
    {
      AMAuthInstallLog(7, (uint64_t)"AMAuthInstallSsoInitialize", (uint64_t)"SoftwareUpdateSSO dylib found", v6, v7, v8, v9, v10, v24);
LABEL_5:
      uint64_t v11 = 0;
      goto LABEL_6;
    }
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoSUSSOInit", (uint64_t)"copyPersonalizationSSOToken symbol not found", v6, v7, v8, v9, v10, v24);
    dlclose((void *)_susso_lib);
    _susso_lib = 0;
    uint64_t v11 = 8;
  }
  else
  {
    uint64_t v11 = 4;
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSsoInitialize", (uint64_t)"SoftwareUpdateSSO dylib not found", v1, v2, v3, v4, v5, v24);
LABEL_6:
  if (!_acmobileshim_lib)
  {
    char v12 = dlopen("/usr/lib/libacmobileshim.dylib", 1);
    _acmobileshim_lib = (uint64_t)v12;
    if (v12)
    {
      _AMAuthInstallSsoCopyTicketWithCredentials = dlsym(v12, "ACMobileShimCopyTicket");
      if (_AMAuthInstallSsoCopyTicketWithCredentials)
      {
        AMAuthInstallLog(7, (uint64_t)"AMAuthInstallSsoInitialize", (uint64_t)"ACMobileShim dylib found", v18, v19, v20, v21, v22, v24);
        return 0;
      }
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoACMobileInit", (uint64_t)"ACMobileShimGetTicket symbol not found", v18, v19, v20, v21, v22, v24);
      dlclose((void *)_acmobileshim_lib);
      _acmobileshim_lib = 0;
      uint64_t v11 = 8;
    }
    else
    {
      uint64_t v11 = 4;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSsoInitialize", (uint64_t)"ACMobileShim dylib not found", v13, v14, v15, v16, v17, v24);
  }
  return v11;
}

uint64_t _AMAuthInstallSsoCreateServiceTicket(uint64_t a1, const __CFAllocator *a2, CFDataRef *a3)
{
  SInt32 error = 0;
  CFOptionFlags responseFlags = 0;
  CFErrorRef err = 0;
  if (!a3)
  {
    uint64_t v29 = 1;
LABEL_65:
    AMSupportCreateErrorInternal();
    CFDictionaryRef v28 = 0;
    uint64_t v30 = 0;
    goto LABEL_45;
  }
  BOOL v5 = a1 && *(unsigned char *)(a1 + 112) || _forceStealthModeForProcess != 0;
  uint64_t valuePtr = 0;
  p_uint64_t valuePtr = &valuePtr;
  uint64_t v116 = 0x2000000000;
  uint64_t v117 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = &v110;
  uint64_t v112 = 0x2000000000;
  uint64_t v113 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = &v106;
  uint64_t v108 = 0x2000000000;
  char v109 = 0;
  uint64_t v6 = (const void **)MEMORY[0x263EFFB40];
  uint64_t v7 = (const void **)MEMORY[0x263EFFB38];
  if (_AMAuthInstallSsoSUSSOCopyToken)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v10 = Mutable;
    if (v5) {
      uint64_t v11 = v6;
    }
    else {
      uint64_t v11 = v7;
    }
    CFDictionaryAddValue(Mutable, @"stealthMode", *v11);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = (const void *)MEMORY[0x263EF8330];
    block[1] = (const void *)1107296256;
    block[2] = ___AMAuthInstallSsoCopyTicketUsingSUSSO_block_invoke;
    block[3] = &__block_descriptor_tmp_1;
    block[4] = &valuePtr;
    block[5] = &v110;
    block[6] = &v106;
    block[7] = v10;
    dispatch_async(global_queue, block);
    if (!*((unsigned char *)v107 + 24))
    {
      CFStringRef v13 = (const __CFString *)*MEMORY[0x263EFFE88];
      do
        CFRunLoopRunInMode(v13, 1.0, 1u);
      while (!*((unsigned char *)v107 + 24));
    }
    if (v111[3] || (CFDictionaryRef v14 = (const __CFDictionary *)p_valuePtr[3]) == 0)
    {
      char v22 = 99;
      AMSupportCreateErrorInternal();
      LOBYTE(Value) = 0;
    }
    else
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v14, @"ssodata");
      if (Value)
      {
        AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallSsoCopyTicketUsingSUSSO", (uint64_t)"_AMAuthInstallSsoCopyTicketUsingSUSSO successfully acquired ssoData", v15, v16, v17, v18, v19, v97);
        CFDataRef Copy = CFDataCreateCopy(v8, Value);
        char v22 = 0;
        *a3 = Copy;
        LOBYTE(Value) = 1;
      }
      else
      {
        char v22 = 99;
        AMSupportCreateErrorInternal();
      }
    }
  }
  else
  {
    char v22 = 8;
    AMSupportCreateErrorInternal();
    LOBYTE(Value) = 0;
    uint64_t v10 = 0;
  }
  SafeRelease(v10);
  SafeRelease((CFTypeRef)p_valuePtr[3]);
  SafeRelease((CFTypeRef)v111[3]);
  _Block_object_dispose(&v106, 8);
  _Block_object_dispose(&v110, 8);
  _Block_object_dispose(&valuePtr, 8);
  if (Value)
  {
    CFDictionaryRef v28 = 0;
    uint64_t v29 = 0;
LABEL_19:
    uint64_t v30 = 0;
    goto LABEL_45;
  }
  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"failed to get a ticket using SUSSO, status:%d, error:%@", v23, v24, v25, v26, v27, v22);
  if (v5)
  {
    uint64_t v29 = 21;
    goto LABEL_65;
  }
  if (!_AMAuthInstallSsoCopyTicketWithCredentials)
  {
    uint64_t v29 = 8;
    goto LABEL_65;
  }
  LODWORD(valuePtr) = 0;
  LODWORD(v110) = 1;
  LODWORD(v106) = 0;
  block[0] = 0;
  CFNumberRef v31 = CFNumberCreate(a2, kCFNumberIntType, &valuePtr);
  uint64_t v100 = a3;
  if (!v31)
  {
    CFDictionaryRef v101 = 0;
    uint64_t v36 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    unsigned int v33 = 0;
    uint64_t v34 = 0;
    CFNumberRef v32 = 0;
LABEL_79:
    CFNumberRef v46 = 0;
    uint64_t v29 = 2;
    goto LABEL_36;
  }
  CFNumberRef v32 = CFNumberCreate(a2, kCFNumberIntType, &v110);
  if (!v32)
  {
    CFDictionaryRef v101 = 0;
    uint64_t v36 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    unsigned int v33 = 0;
LABEL_70:
    uint64_t v34 = 0;
    goto LABEL_79;
  }
  unsigned int v33 = CFArrayCreateMutable(a2, 0, MEMORY[0x263EFFF70]);
  if (!v33)
  {
    CFDictionaryRef v101 = 0;
    uint64_t v36 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    goto LABEL_70;
  }
  uint64_t v34 = CFArrayCreateMutable(a2, 0, MEMORY[0x263EFFF70]);
  if (!v34)
  {
    CFDictionaryRef v101 = 0;
    uint64_t v36 = 0;
LABEL_74:
    uint64_t v44 = 0;
    goto LABEL_78;
  }
  CFArrayAppendValue(v33, v31);
  CFArrayAppendValue(v33, v31);
  CFArrayAppendValue(v34, v32);
  CFArrayAppendValue(v34, v32);
  uint64_t v35 = CFArrayCreateMutable(a2, 0, MEMORY[0x263EFFF70]);
  uint64_t v36 = v35;
  if (!v35)
  {
    CFDictionaryRef v101 = 0;
    goto LABEL_74;
  }
  CFArrayAppendValue(v35, @"Username");
  CFArrayAppendValue(v36, @"Password");
  uint64_t v37 = _AMAuthInstallSsoCopyCredentialsFromKeychain(block, 0);
  if ((v37 & 7) != 0)
  {
    uint64_t v29 = v37;
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateUserNotificationSettings", (uint64_t)"failed to retrieve credentials from the keychain", v38, v39, v40, v41, v42, v98);
    CFDictionaryRef v101 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    CFNumberRef v46 = 0;
    goto LABEL_36;
  }
  if (block[0])
  {
    uint64_t v43 = CFArrayCreateMutable(a2, 0, MEMORY[0x263EFFF70]);
    uint64_t v44 = v43;
    if (v43)
    {
      CFArrayAppendValue(v43, block[0]);
      goto LABEL_32;
    }
    CFDictionaryRef v101 = 0;
LABEL_78:
    uint64_t v45 = 0;
    goto LABEL_79;
  }
  uint64_t v44 = 0;
LABEL_32:
  uint64_t v45 = CFDictionaryCreateMutable(a2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v45)
  {
    CFDictionaryRef v101 = 0;
    goto LABEL_79;
  }
  CFNumberRef v46 = CFNumberCreate(a2, kCFNumberIntType, &v106);
  CFDictionaryAddValue(v45, (const void *)*MEMORY[0x263EFFFC8], @"AppleConnect");
  CFDictionaryAddValue(v45, (const void *)*MEMORY[0x263F00028], v36);
  CFDictionaryAddValue(v45, (const void *)*MEMORY[0x263F00000], @"OK");
  CFDictionaryAddValue(v45, (const void *)*MEMORY[0x263EFFFE8], @"Cancel");
  uint64_t v47 = (const void *)*MEMORY[0x263EFFB40];
  CFDictionaryAddValue(v45, @"SBUserNotificationBehavesSuperModally", (const void *)*MEMORY[0x263EFFB40]);
  CFDictionaryAddValue(v45, @"SBUserNotificationTextAutocapitalizationType", v33);
  CFDictionaryAddValue(v45, @"SBUserNotificationTextAutocorrectionType", v34);
  CFDictionaryAddValue(v45, @"SBUserNotificationDontDismissOnUnlock", v47);
  CFDictionaryAddValue(v45, @"DismissOnLock", (const void *)*MEMORY[0x263EFFB38]);
  CFDictionaryAddValue(v45, (const void *)*MEMORY[0x263F00010], v46);
  CFDictionaryAddValue(v45, (const void *)*MEMORY[0x263EFFFE0], v47);
  CFDictionaryAddValue(v45, @"SBUserNotificationDisplayActionButtonOnLockScreen", v47);
  if (v44) {
    CFDictionaryAddValue(v45, (const void *)*MEMORY[0x263F00030], v44);
  }
  CFDictionaryRef v101 = (const __CFDictionary *)CFRetain(v45);
  uint64_t v29 = 0;
LABEL_36:
  SafeRelease(0);
  SafeRelease(v36);
  SafeRelease(v44);
  SafeRelease(v45);
  SafeRelease(block[0]);
  SafeRelease(v33);
  SafeRelease(v34);
  SafeRelease(v31);
  SafeRelease(v32);
  SafeRelease(v46);
  CFDictionaryRef v28 = v101;
  if (v29 || !v101)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"%s failed", v48, v49, v50, v51, v52, (char)"_AMAuthInstallSsoCreateServiceTicket");
    AMSupportCreateErrorInternal();
    goto LABEL_19;
  }
  AMAuthInstallLog(5, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"%s: Creating user notification", v48, v49, v50, v51, v52, (char)"_AMAuthInstallSsoCreateServiceTicket");
  uint64_t v53 = CFUserNotificationCreate(a2, 0.0, 0x20000uLL, &error, v101);
  uint64_t v30 = v53;
  if (!v53)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"failed to create CFUserNotification", v54, v55, v56, v57, v58, v99);
    uint64_t v29 = 2;
    goto LABEL_44;
  }
  SInt32 error = CFUserNotificationReceiveResponse(v53, 300.0, &responseFlags);
  if (error)
  {
    CFUserNotificationCancel(v30);
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"failed to receive CFUserNotification response %d", v64, v65, v66, v67, v68, error);
LABEL_41:
    uint64_t v29 = 8;
LABEL_44:
    AMSupportCreateErrorInternal();
    goto LABEL_45;
  }
  responseFlags &= 3u;
  if (responseFlags == 1)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"user canceled AppleConnect login.", v59, v60, v61, v62, v63, v99);
    uint64_t v29 = 21;
    goto LABEL_44;
  }
  CFDictionaryRef ResponseDictionary = CFUserNotificationGetResponseDictionary(v30);
  if (!ResponseDictionary)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"failed to get CFUserNotification response dictionary", v71, v72, v73, v74, v75, v99);
    goto LABEL_41;
  }
  CFArrayRef v76 = (const __CFArray *)CFDictionaryGetValue(ResponseDictionary, (const void *)*MEMORY[0x263F00030]);
  if (!v76 || (CFArrayRef v82 = v76, CFArrayGetCount(v76) < 0))
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"failed to get CFUserNotification textField values", v77, v78, v79, v80, v81, v99);
    goto LABEL_41;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v82, 0);
  CFStringRef v84 = (const __CFString *)CFArrayGetValueAtIndex(v82, 1);
  if (!ValueAtIndex || (CFStringRef v90 = v84, CFStringGetLength(ValueAtIndex) < 1) || !v90 || CFStringGetLength(v90) <= 0)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"failed to get username and password values", v85, v86, v87, v88, v89, v99);
    uint64_t v29 = 1;
    goto LABEL_44;
  }
  uint64_t v91 = _AMAuthInstallSsoSaveCredentialsInKeychain(ValueAtIndex);
  if (v91)
  {
    uint64_t v29 = v91;
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCreateServiceTicket", (uint64_t)"failed to save username in keychain", v92, v93, v94, v95, v96, v99);
    goto LABEL_44;
  }
  uint64_t v29 = _AMAuthInstallSsoCopyTicketWithCredentials(ValueAtIndex, v90, v100, &err);
  if (v29 && err)
  {
    CFErrorGetCode(err);
    goto LABEL_44;
  }
LABEL_45:
  SafeRelease(v30);
  SafeRelease(v28);
  return v29;
}

uint64_t AMAuthInstallSsoCreateServiceTicketWithAppId(const __CFAllocator *a1, uint64_t a2, CFDataRef *a3)
{
  return _AMAuthInstallSsoCreateServiceTicket(0, a1, a3);
}

uint64_t AMAuthInstallSsoCreateDAWToken()
{
  return 13;
}

uint64_t AMAuthInstallSsoEnable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 1;
  }
  if (_acmobileshim_lib)
  {
    uint64_t result = 0;
    *(void *)(a1 + 104) = _AMAuthInstallSsoCreateServiceTicket;
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSsoEnable", (uint64_t)"ACMobile dylib not loaded", a4, a5, a6, a7, a8, vars0);
    return 99;
  }
  return result;
}

uint64_t AMAuthInstallSsoDisable(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a1 + 104) = 0;
  return result;
}

BOOL AMAuthInstallSsoShouldUseStealthMode(uint64_t a1)
{
  return a1 && *(unsigned char *)(a1 + 112) || _forceStealthModeForProcess != 0;
}

uint64_t AMAuthInstallSsoSetStealthMode(uint64_t a1, char a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 112) = a2;
  return result;
}

uint64_t AMAuthInstallSsoSetStealthModeForProcess(char a1)
{
  _forceStealthModeForProcess = a1;
  return 0;
}

uint64_t AMAuthInstallSsoSetAppleConnectInfo(void *a1, const __CFString *cf, const void *a3)
{
  CFMutableDataRef Mutable = 0;
  uint64_t v4 = 1;
  if (a1)
  {
    if (cf)
    {
      CFTypeID v8 = CFGetTypeID(cf);
      CFTypeID TypeID = CFStringGetTypeID();
      CFMutableDataRef Mutable = 0;
      if (a3)
      {
        if (v8 == TypeID)
        {
          CFTypeID v10 = CFGetTypeID(a3);
          if (v10 == CFDataGetTypeID())
          {
            CFAllocatorRef v11 = CFGetAllocator(a1);
            CFMutableDataRef Mutable = CFDataCreateMutable(v11, 0);
            if (Mutable)
            {
              CFIndex Length = CFStringGetLength(cf);
              CFDataSetLength(Mutable, Length + 1);
              MutableBytePtr = (char *)CFDataGetMutableBytePtr(Mutable);
              CFIndex v14 = CFDataGetLength(Mutable);
              if (CFStringGetCString(cf, MutableBytePtr, v14, 0x8000100u))
              {
                BytePtr = CFDataGetBytePtr((CFDataRef)a3);
                CFIndex v16 = CFDataGetLength((CFDataRef)a3);
                CFDataAppendBytes(Mutable, BytePtr, v16);
                uint64_t v4 = 0;
                a1[15] = CFRetain(Mutable);
              }
              else
              {
                uint64_t v4 = 3;
              }
            }
            else
            {
              uint64_t v4 = 2;
            }
          }
          else
          {
            CFMutableDataRef Mutable = 0;
          }
        }
      }
    }
  }
  SafeRelease(Mutable);
  return v4;
}

uint64_t AMAuthInstallSsoSetToken(uint64_t a1, CFTypeRef cf)
{
  uint64_t result = 1;
  if (a1 && cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFDataGetTypeID())
    {
      uint64_t v6 = *(const void **)(a1 + 120);
      if (v6) {
        CFRelease(v6);
      }
      CFTypeRef v7 = CFRetain(cf);
      uint64_t result = 0;
      *(void *)(a1 + 120) = v7;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AMAuthInstallSsoSetCredentials(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 1;
  if (a1 && a2 && a3)
  {
    if (*(void *)(a1 + 104))
    {
      if (_AMAuthInstallSsoCopyTicketWithCredentials)
      {
        uint64_t v20 = 0;
        uint64_t v9 = (void *)(a1 + 120);
        uint64_t v10 = _AMAuthInstallSsoCopyTicketWithCredentials(a2, a3, a1 + 120, &v20);
        if (v10)
        {
          uint64_t v8 = v10;
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSsoSetCredentials", (uint64_t)"failed to create sso data", v11, v12, v13, v14, v15, v19);
        }
        else if (*v9)
        {
          return 0;
        }
        else
        {
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSsoSetCredentials", (uint64_t)"SSO invalid username and password.", v11, v12, v13, v14, v15, v19);
          return 22;
        }
        return v8;
      }
      CFIndex v16 = "_AMAuthInstallSsoCopyTicketWithCredentials is NULL.";
      uint64_t v17 = 3;
    }
    else
    {
      CFIndex v16 = "SSO disabled.";
      uint64_t v17 = 5;
    }
    AMAuthInstallLog(v17, (uint64_t)"AMAuthInstallSsoSetCredentials", (uint64_t)v16, a4, a5, a6, a7, a8, v19);
    return 20;
  }
  return v8;
}

uint64_t AMAuthInstallSsoCopyCredentialsFromKeychain(void *a1, CFStringRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallSsoCopyCredentialsFromKeychain", (uint64_t)"Attempting to load credentials from keychain", a4, a5, a6, a7, a8, v17);
  uint64_t v10 = _AMAuthInstallSsoCopyCredentialsFromKeychain(a1, a2);
  AMAuthInstallLog(7, (uint64_t)"AMAuthInstallSsoCopyCredentialsFromKeychain", (uint64_t)"Loaded credentials from keychain with status %d", v11, v12, v13, v14, v15, v10);
  return v10;
}

uint64_t _AMAuthInstallSsoCopyCredentialsFromKeychain(void *a1, CFStringRef *a2)
{
  CFTypeRef result = 0;
  if (!a1)
  {
    uint64_t v6 = 0;
    CFDataRef v9 = 0;
LABEL_25:
    uint64_t v40 = 1;
    goto LABEL_20;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v6 = Mutable;
  if (!Mutable)
  {
    CFDataRef v9 = 0;
    goto LABEL_23;
  }
  CFTypeRef v7 = (const void *)*MEMORY[0x263F171B8];
  uint64_t v8 = (const void *)*MEMORY[0x263F171C8];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F171B8], (const void *)*MEMORY[0x263F171C8]);
  CFDataRef v9 = CFDataCreateWithBytesNoCopy(v4, (const UInt8 *)"APPLECONNECT.APPLE.COM", 22, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (!v9)
  {
LABEL_23:
    uint64_t v40 = 2;
    goto LABEL_20;
  }
  CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F16F30], v9);
  CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F17090], @"com.apple.MobileSoftwareUpdate");
  CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F17400], (const void *)*MEMORY[0x263F17410]);
  uint64_t v10 = (const void *)*MEMORY[0x263EFFB40];
  CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F17518], (const void *)*MEMORY[0x263EFFB40]);
  OSStatus v11 = SecItemCopyMatching(v6, &result);
  if (v11 == -25300)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCopyCredentialsFromKeychain", (uint64_t)"Credentials not found", v12, v13, v14, v15, v16, v48);
    uint64_t v40 = 8;
    goto LABEL_20;
  }
  if (v11)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCopyCredentialsFromKeychain", (uint64_t)"unexpected error: %d", v12, v13, v14, v15, v16, v11);
    uint64_t v40 = 14;
    goto LABEL_20;
  }
  if (!result)
  {
    SafeRelease(0);
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCopyCredentialsFromKeychain", (uint64_t)"Username not found", v43, v44, v45, v46, v47, v48);
    goto LABEL_25;
  }
  CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x263F16ED8]);
  *a1 = Value;
  CFRetain(Value);
  SafeRelease(0);
  if (!a2) {
    goto LABEL_19;
  }
  CFTypeRef v50 = 0;
  if (result)
  {
    CFAllocatorRef MutableCopy = CFDictionaryCreateMutableCopy(v4, 0, (CFDictionaryRef)result);
    uint64_t v24 = MutableCopy;
    if (MutableCopy)
    {
      uint64_t v25 = (const void *)*MEMORY[0x263F17520];
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x263F17520], v10);
      CFDictionarySetValue(v24, v7, v8);
      OSStatus v26 = SecItemCopyMatching(v24, &v50);
      if (v26 == -25300)
      {
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCopyPasswordFromKeychain", (uint64_t)"password not found in keychain response", v27, v28, v29, v30, v31, v48);
        char v41 = 0;
        uint64_t v40 = 8;
      }
      else if (v26)
      {
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCopyPasswordFromKeychain", (uint64_t)"unexpected error: %d", v27, v28, v29, v30, v31, v26);
        char v41 = 0;
        uint64_t v40 = 14;
      }
      else
      {
        CFDictionaryRemoveValue(v24, v25);
        BytePtr = CFDataGetBytePtr((CFDataRef)v50);
        CFIndex Length = CFDataGetLength((CFDataRef)v50);
        CFStringRef v34 = CFStringCreateWithBytes(v4, BytePtr, Length, 0x8000100u, 0);
        *a2 = v34;
        if (v34)
        {
          uint64_t v40 = 0;
          char v41 = 1;
        }
        else
        {
          uint64_t v40 = 3;
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCopyPasswordFromKeychain", (uint64_t)"Failed to convert password", v35, v36, v37, v38, v39, v48);
          char v41 = 0;
        }
      }
    }
    else
    {
      char v41 = 0;
      uint64_t v40 = 2;
    }
  }
  else
  {
    char v41 = 0;
    uint64_t v24 = 0;
    uint64_t v40 = 1;
  }
  SafeRelease(v50);
  SafeRelease(v24);
  if ((v41 & 1) == 0)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoCopyCredentialsFromKeychain", (uint64_t)"Password not found", v18, v19, v20, v21, v22, v48);
  }
  else
  {
LABEL_19:
    AMAuthInstallLog(6, (uint64_t)"_AMAuthInstallSsoCopyCredentialsFromKeychain", (uint64_t)"Found Credentials for username=%@ ", v18, v19, v20, v21, v22, *a1);
    uint64_t v40 = 0;
  }
LABEL_20:
  SafeRelease(v6);
  SafeRelease(result);
  SafeRelease(v9);
  return v40;
}

uint64_t _AMAuthInstallSsoSaveCredentialsInKeychain(const void *a1)
{
  CFTypeRef result = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v4 = Mutable;
  if (!Mutable)
  {
    CFAllocatorRef MutableCopy = 0;
    CFDataRef v7 = 0;
LABEL_11:
    uint64_t v10 = 0;
    uint64_t v17 = 2;
    goto LABEL_8;
  }
  CFTypeID v5 = (const void *)*MEMORY[0x263F171B8];
  uint64_t v6 = (const void *)*MEMORY[0x263F171C8];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F171B8], (const void *)*MEMORY[0x263F171C8]);
  CFDataRef v7 = CFDataCreateWithBytesNoCopy(v2, (const UInt8 *)"APPLECONNECT.APPLE.COM", 22, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (!v7)
  {
    CFAllocatorRef MutableCopy = 0;
    goto LABEL_11;
  }
  uint64_t v8 = (const void *)*MEMORY[0x263F16F30];
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x263F16F30], v7);
  CFDataRef v9 = (const void *)*MEMORY[0x263F17090];
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x263F17090], @"com.apple.MobileSoftwareUpdate");
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x263F17400], (const void *)*MEMORY[0x263F17410]);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x263F17518], (const void *)*MEMORY[0x263EFFB40]);
  uint64_t v10 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F16ED8], a1);
  CFDictionarySetValue(v10, v9, @"com.apple.MobileSoftwareUpdate");
  if (!SecItemCopyMatching(v4, &result))
  {
    CFAllocatorRef MutableCopy = CFDictionaryCreateMutableCopy(v2, 0, (CFDictionaryRef)result);
    CFDictionarySetValue(MutableCopy, v5, v6);
    OSStatus v19 = SecItemUpdate(MutableCopy, v10);
    if (!v19)
    {
      uint64_t v17 = 0;
      goto LABEL_8;
    }
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoSaveCredentialsInKeychain", (uint64_t)"SecItemUpdate ret=%d", v20, v21, v22, v23, v24, v19);
LABEL_14:
    uint64_t v17 = 14;
    goto LABEL_8;
  }
  CFDictionarySetValue(v10, v5, v6);
  CFDictionarySetValue(v10, v8, v7);
  OSStatus v11 = SecItemAdd(v10, 0);
  if (v11)
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallSsoSaveCredentialsInKeychain", (uint64_t)"SecItemAdd ret=%d", v12, v13, v14, v15, v16, v11);
    CFAllocatorRef MutableCopy = 0;
    goto LABEL_14;
  }
  uint64_t v17 = 0;
  CFAllocatorRef MutableCopy = 0;
LABEL_8:
  SafeRelease(result);
  SafeRelease(MutableCopy);
  SafeRelease(0);
  SafeRelease(v4);
  SafeRelease(0);
  SafeRelease(v7);
  SafeRelease(v10);
  return v17;
}

void __copy_helper_block_8_32r40r48r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  CFAllocatorRef v4 = *(const void **)(a2 + 48);

  _Block_object_assign((void *)(a1 + 48), v4, 8);
}

void __destroy_helper_block_8_32r40r48r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 48), 8);
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  CFAllocatorRef v2 = *(const void **)(a1 + 32);

  _Block_object_dispose(v2, 8);
}

uint64_t AMAuthInstallSupportCreateArrayFromFileURL(const __CFAllocator *a1, void *a2, const __CFURL *a3)
{
  CFErrorRef error = 0;
  CFDataRef data = 0;
  uint64_t v3 = 1;
  if (a2 && a3)
  {
    uint64_t DataFromFileURL = AMAuthInstallPlatformCreateDataFromFileURL(a1, (CFTypeRef *)&data, a3);
    if (DataFromFileURL)
    {
      uint64_t v3 = DataFromFileURL;
    }
    else
    {
      if (!data)
      {
        uint64_t v3 = 14;
        goto LABEL_10;
      }
      CFPropertyListRef v7 = CFPropertyListCreateWithData(a1, data, 0, 0, &error);
      if (v7)
      {
        uint64_t v3 = 0;
        *a2 = v7;
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateArrayFromFileURL", (uint64_t)"failed to create property list: %@", v8, v9, v10, v11, v12, (char)error);
        uint64_t v3 = 2;
      }
    }
  }
  if (data) {
    CFRelease(data);
  }
LABEL_10:
  if (error) {
    CFRelease(error);
  }
  return v3;
}

void SafeRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t AMAuthInstallSupportCreateDictionaryFromFileURL(const __CFAllocator *a1, CFTypeRef *a2, const __CFURL *a3)
{
  uint64_t v3 = 0;
  CFErrorRef error = 0;
  CFDataRef data = 0;
  uint64_t v4 = 1;
  if (a2 && a3)
  {
    uint64_t DataFromFileURL = AMAuthInstallPlatformCreateDataFromFileURL(a1, (CFTypeRef *)&data, a3);
    if (DataFromFileURL)
    {
      uint64_t v4 = DataFromFileURL;
      uint64_t v3 = 0;
    }
    else
    {
      if (!data)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 14;
        goto LABEL_10;
      }
      CFPropertyListRef v8 = CFPropertyListCreateWithData(a1, data, 0, 0, &error);
      uint64_t v3 = v8;
      if (v8)
      {
        uint64_t v4 = 0;
        *a2 = CFRetain(v8);
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateDictionaryFromFileURL", (uint64_t)"failed to create property list: %@", v9, v10, v11, v12, v13, (char)error);
        uint64_t v4 = 2;
      }
    }
  }
  if (data) {
    CFRelease(data);
  }
LABEL_10:
  if (error) {
    CFRelease(error);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t AMAuthInstallSupportWriteDictionarytoFileURL(const __CFAllocator *a1, const void *a2, const __CFURL *a3)
{
  CFErrorRef error = 0;
  uint64_t v3 = 1;
  if (a2 && a3)
  {
    CFDataRef v5 = CFPropertyListCreateData(a1, a2, kCFPropertyListXMLFormat_v1_0, 0, &error);
    if (v5)
    {
      CFDataRef v11 = v5;
      uint64_t v3 = AMAuthInstallPlatformWriteDataToFileURL(v5, a3);
      CFRelease(v11);
    }
    else
    {
      uint64_t v3 = 3;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportWriteDictionarytoFileURL", (uint64_t)"failed to create property list: %@", v6, v7, v8, v9, v10, (char)error);
    }
    if (error) {
      CFRelease(error);
    }
  }
  return v3;
}

CFTypeRef SafeRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void SafeFree(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void _CFDictionarySetInteger64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
  if (!v5) {
    _CFDictionarySetInteger64_cold_1();
  }
  CFNumberRef v6 = v5;
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v6);
}

void _CFDictionarySetInteger32(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  if (!v5) {
    _CFDictionarySetInteger32_cold_1();
  }
  CFNumberRef v6 = v5;
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v6);
}

void AMAuthInstallSupportDictionarySetBoolean(__CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v3 = (const void **)MEMORY[0x263EFFB40];
  if (!a3) {
    uint64_t v3 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionarySetValue(a1, a2, *v3);
}

void _CFDictionarySetBoolean(__CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v3 = (const void **)MEMORY[0x263EFFB40];
  if (!a3) {
    uint64_t v3 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionarySetValue(a1, a2, *v3);
}

uint64_t _CFDictionaryGetBoolean(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v16 = "dict is NULL";
LABEL_13:
    AMAuthInstallLog(3, (uint64_t)"_CFDictionaryGetBoolean", (uint64_t)v16, a4, a5, a6, a7, a8, v17);
    return a3;
  }
  if (!a2)
  {
    uint64_t v16 = "key is NULL";
    goto LABEL_13;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1))
  {
    uint64_t v16 = "dict is not CFDictionary";
    goto LABEL_13;
  }
  CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
  if (!Value) {
    return a3;
  }
  uint64_t v13 = Value;
  CFTypeID v14 = CFBooleanGetTypeID();
  if (v14 != CFGetTypeID(v13))
  {
    uint64_t v16 = "dict value is not CFBoolean";
    goto LABEL_13;
  }

  return CFBooleanGetValue((CFBooleanRef)v13);
}

CFArrayRef _CFArrayCreateWithObjects(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex v9 = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v13 = (void **)&a9;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)values = 0u;
  long long v15 = 0u;
  while (1)
  {
    uint64_t v10 = v13++;
    CFDataRef v11 = *v10;
    if (!v11) {
      break;
    }
    values[v9++] = v11;
    if (v9 == 32) {
      return 0;
    }
  }
  return CFArrayCreate(a1, (const void **)values, v9, MEMORY[0x263EFFF70]);
}

const char *_CopyHexStringFromData(const __CFAllocator *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  CFTypeRef result = (const char *)calloc(1uLL, (2 * Length) | 1);
  if (result)
  {
    uint64_t v7 = (char *)result;
    if (Length)
    {
      uint64_t v8 = 0;
      do
      {
        unsigned int v9 = *BytePtr++;
        result[v8] = _CopyHexStringFromData_kAsciiHexChars[(unint64_t)v9 >> 4];
        result[(v8 + 1)] = _CopyHexStringFromData_kAsciiHexChars[v9 & 0xF];
        v8 += 2;
      }
      while (2 * Length != v8);
    }
    CFStringRef v10 = CFStringCreateWithCString(a1, result, 0x8000100u);
    free(v7);
    return (const char *)v10;
  }
  return result;
}

uint64_t _CFStringToUInt32(const __CFString *a1, _DWORD *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t result = CFStringGetCString(a1, buffer, 32, 0x600u);
  if (result)
  {
    *__error() = 0;
    *a2 = strtoul(buffer, 0, 0);
    return *__error() == 0;
  }
  return result;
}

CFPropertyListRef AMAuthInstallPreferencesCopyStringValue(const __CFString *a1, const __CFString *a2)
{
  if (!a1)
  {
    CFPropertyListRef v4 = 0;
    if (!a2) {
      goto LABEL_8;
    }
LABEL_6:
    if (!v4) {
      CFPropertyListRef v4 = CFPreferencesCopyAppValue(a2, @"com.apple.libauthinstall");
    }
LABEL_8:
    if (!v4) {
      return v4;
    }
    goto LABEL_9;
  }
  CFPropertyListRef v4 = CFPreferencesCopyAppValue(a1, (CFStringRef)*MEMORY[0x263EFFE60]);
  if (!v4)
  {
    CFPropertyListRef v4 = CFPreferencesCopyAppValue(a1, @"com.apple.libauthinstall");
    if (!a2) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
LABEL_9:
  CFTypeID v5 = CFGetTypeID(v4);
  if (v5 != CFStringGetTypeID())
  {
    CFRelease(v4);
    return 0;
  }
  return v4;
}

CFStringRef AMAuthInstallPreferencesGetBooleanValue(const __CFString *result, const __CFString *a2, Boolean *a3)
{
  Boolean keyExistsAndHasValidFormat = 0;
  if (result)
  {
    CFStringRef v5 = result;
    uint64_t result = (const __CFString *)CFPreferencesGetAppBooleanValue(result, (CFStringRef)*MEMORY[0x263EFFE60], &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat) {
      goto LABEL_8;
    }
    uint64_t result = (const __CFString *)CFPreferencesGetAppBooleanValue(v5, @"com.apple.libauthinstall", &keyExistsAndHasValidFormat);
    BOOL v6 = keyExistsAndHasValidFormat == 0;
    if (!a2) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v6 = 1;
    if (!a2) {
      goto LABEL_8;
    }
  }
  if (v6) {
    uint64_t result = (const __CFString *)CFPreferencesGetAppBooleanValue(a2, @"com.apple.libauthinstall", &keyExistsAndHasValidFormat);
  }
LABEL_8:
  if (a3) {
    *a3 = keyExistsAndHasValidFormat;
  }
  return result;
}

CFAllocatorRef AMAuthInstallSupportCopyAllocator()
{
  v1.reallocate = 0;
  memset(&v1, 0, 40);
  v1.allocate = (CFAllocatorAllocateCallBack)myMalloc;
  v1.deallocate = (CFAllocatorDeallocateCallBack)myFree;
  v1.preferredSize = 0;
  return CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], &v1);
}

uint64_t AMAuthInstallSupportGetUInt32(const __CFNumber *a1, _DWORD *a2)
{
  if (!a1) {
    return 1;
  }
  int valuePtr = 0;
  uint64_t v15 = 0;
  CFNumberType Type = CFNumberGetType(a1);
  if (Type == kCFNumberSInt64Type)
  {
    if (CFNumberGetValue(a1, kCFNumberSInt64Type, &v15))
    {
      int v10 = v15;
      goto LABEL_8;
    }
    CFTypeID v14 = "AMAuthInstallSupportGetUInt32";
    uint64_t v12 = "%s: failed to convert 64-bit value";
LABEL_10:
    uint64_t v11 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportGetUInt32", (uint64_t)v12, v5, v6, v7, v8, v9, (char)v14);
    return v11;
  }
  if (Type != kCFNumberSInt32Type)
  {
    LOBYTE(v14) = Type;
    uint64_t v12 = "Incoming CFNumberRef is of unexpected type %d";
    goto LABEL_10;
  }
  if (!CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr))
  {
    CFTypeID v14 = "AMAuthInstallSupportGetUInt32";
    uint64_t v12 = "%s: failed to convert 32-bit value";
    goto LABEL_10;
  }
  int v10 = valuePtr;
LABEL_8:
  uint64_t v11 = 0;
  *a2 = v10;
  return v11;
}

uint64_t AMAuthInstallSupportRemoveFile(const __CFURL *a1)
{
  BOOL v3 = 0;
  uint64_t result = AMAuthInstallPlatformFileURLExists(a1, &v3);
  if (!result)
  {
    if (!v3) {
      return 0;
    }
    uint64_t result = AMAuthInstallPlatformRemoveFile(a1);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallSupportCopyURLWithAppendedComponent(const __CFAllocator *a1, const void *a2, const __CFString *a3, Boolean a4, CFURLRef *a5)
{
  if (a2 && a3 && a5) {
    return AMAuthInstallPlatformCopyURLWithAppendedComponent(a1, a2, a3, a4, a5);
  }
  else {
    return 1;
  }
}

uint64_t AMAuthInstallSupportCreateDataFromFileURL(const __CFAllocator *a1, CFTypeRef *a2, CFTypeRef cf)
{
  CFTypeRef cfa = 0;
  uint64_t DataFromFileURL = 1;
  if (a2 && cf)
  {
    uint64_t v6 = AMAuthInstallSupportCopyPreserveFileURL(a1, cf, &cfa, 0);
    if (v6)
    {
      uint64_t DataFromFileURL = v6;
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateDataFromFileURL", (uint64_t)"AMAuthInstallSupportCopyPreserveFileURL failed.", v7, v8, v9, v10, v11, v13);
    }
    else
    {
      uint64_t DataFromFileURL = AMAuthInstallPlatformCreateDataFromFileURL(a1, a2, (const __CFURL *)cfa);
    }
    if (cfa) {
      CFRelease(cfa);
    }
  }
  return DataFromFileURL;
}

uint64_t AMAuthInstallSupportCopyPreserveFileURL(const __CFAllocator *a1, CFTypeRef cf, CFTypeRef *a3, int a4)
{
  uint64_t v4 = 1;
  char v20 = 1;
  if (cf && a3)
  {
    CFURLRef v7 = (const __CFURL *)CFRetain(cf);
    CFTypeRef v8 = CFRetain(cf);
    CFStringRef v9 = 0;
    CFMutableStringRef Mutable = 0;
    CFStringRef v11 = 0;
    uint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = AMAuthInstallPlatformFileURLExists(v7, (BOOL *)&v20);
      if (v13)
      {
        uint64_t v4 = v13;
        goto LABEL_25;
      }
      if (!v20) {
        goto LABEL_21;
      }
      if (v11) {
        CFRelease(v11);
      }
      CFStringRef v11 = CFStringCreateWithFormat(a1, 0, @"~%d", v12);
      if (!v11) {
        goto LABEL_38;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v9) {
        CFRelease(v9);
      }
      CFMutableStringRef Mutable = CFStringCreateMutable(a1, 0);
      if (!Mutable) {
        break;
      }
      CFStringRef v9 = CFURLCopyFileSystemPath((CFURLRef)cf, kCFURLPOSIXPathStyle);
      if (!v9) {
        goto LABEL_38;
      }
      CFStringAppend(Mutable, v9);
      CFStringAppend(Mutable, v11);
      if (v8) {
        CFRelease(v8);
      }
      CFTypeRef v8 = CFRetain(v7);
      CFRelease(v7);
      CFURLRef v14 = CFURLCreateWithFileSystemPath(a1, Mutable, kCFURLPOSIXPathStyle, 0);
      if (!v14)
      {
        uint64_t v4 = 2;
LABEL_28:
        CFRelease(v11);
        goto LABEL_29;
      }
      CFURLRef v7 = v14;
      if (v20)
      {
        BOOL v15 = v12 > 0x1E;
        uint64_t v12 = (v12 + 1);
        if (!v15) {
          continue;
        }
      }
LABEL_21:
      if (a4) {
        CFURLRef v16 = v7;
      }
      else {
        CFURLRef v16 = (const __CFURL *)v8;
      }
      uint64_t v4 = 0;
      *a3 = CFRetain(v16);
      goto LABEL_25;
    }
    CFStringRef v9 = 0;
LABEL_38:
    uint64_t v4 = 2;
LABEL_25:
    if (v7) {
      CFRelease(v7);
    }
    if (v11) {
      goto LABEL_28;
    }
LABEL_29:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return v4;
}

uint64_t AMAuthInstallSupportCopyDataFromHexString(int a1, CFStringRef theString, uint64_t *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = 1;
  if (theString)
  {
    if (a3)
    {
      uint64_t v3 = 3;
      if (CFStringGetCString(theString, buffer, 512, 0x8000100u))
      {
        uint64_t v5 = AMSupportCopyDataFromAsciiEncodedHex();
        *a3 = v5;
        if (v5) {
          return 0;
        }
        else {
          return 3;
        }
      }
    }
  }
  return v3;
}

__CFString *AMAuthInstallSupportGetLibraryVersionString()
{
  return @"libauthinstall_device-1033.60.13";
}

uint64_t AMAuthInstallSupportBase64Encode(const __CFAllocator *a1, CFDataRef theData, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theData)
  {
    long long v29 = "value == NULL";
LABEL_11:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Encode", (uint64_t)v29, a4, a5, a6, a7, a8, v31);
    return 1;
  }
  if (!CFDataGetLength(theData))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Encode", (uint64_t)"value length == 0: '%@'", a4, a5, a6, a7, a8, (char)theData);
    return 1;
  }
  if (!a3)
  {
    long long v29 = "outEncodedValue == NULL";
    goto LABEL_11;
  }
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  uint64_t v13 = b64encode(BytePtr, Length);
  if (v13)
  {
    long long v19 = (UInt8 *)v13;
    int v20 = strlen(v13);
    if (v20)
    {
      CFStringRef v26 = CFStringCreateWithBytes(a1, v19, v20, 0x8000100u, 0);
      if (v26)
      {
        CFStringRef v27 = v26;
        *a3 = CFRetain(v26);
        free(v19);
        CFRelease(v27);
        return 0;
      }
      uint64_t v30 = "encodedValue == NULL: '%@'";
    }
    else
    {
      uint64_t v30 = "encodedLength == 0: '%@'";
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Encode", (uint64_t)v30, v21, v22, v23, v24, v25, (char)theData);
    free(v19);
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Encode", (uint64_t)"encodedBuffer == NULL: '%@'", v14, v15, v16, v17, v18, (char)theData);
  }
  return 99;
}

uint64_t AMAuthInstallSupportBase64Decode(const __CFAllocator *a1, CFStringRef theString, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theString)
  {
    uint64_t v39 = "value == NULL";
LABEL_13:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Decode", (uint64_t)v39, a4, a5, a6, a7, a8, v40);
    return 1;
  }
  if (!CFStringGetLength(theString))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Decode", (uint64_t)"value length == 0: '%@'", a4, a5, a6, a7, a8, (char)theString);
    return 1;
  }
  if (!a3)
  {
    uint64_t v39 = "outDecodedValue == NULL";
    goto LABEL_13;
  }
  size_t v11 = (int)(CFStringGetLength(theString) + 1);
  uint64_t v12 = (char *)malloc(v11);
  if (!v12)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Decode", (uint64_t)"failed to allocate buffer", v13, v14, v15, v16, v17, (char)theString);
    return 2;
  }
  uint64_t v18 = v12;
  if (!CFStringGetCString(theString, v12, v11, 0x8000100u))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Decode", (uint64_t)"failed to convert value to c-string", v19, v20, v21, v22, v23, (char)theString);
LABEL_19:
    uint64_t v37 = 2;
    goto LABEL_20;
  }
  int v24 = b64decode(v18, v11);
  if (v24 <= 0)
  {
    char v41 = (char)theString;
    uint64_t v37 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Decode", (uint64_t)"b64decode of value '%@' failed with error code %d.", v25, v26, v27, v28, v29, v41);
LABEL_20:
    free(v18);
    return v37;
  }
  CFDataRef v30 = CFDataCreate(a1, (const UInt8 *)v18, v24);
  if (!v30)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportBase64Decode", (uint64_t)"decodedData is NULL", v31, v32, v33, v34, v35, (char)theString);
    goto LABEL_19;
  }
  CFDataRef v36 = v30;
  *a3 = CFRetain(v30);
  free(v18);
  CFRelease(v36);
  return 0;
}

uint64_t AMAuthInstallSupportCreateDecodedPEM(uint64_t a1, size_t __size, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v32 = "pemBuffer == NULL";
LABEL_34:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateDecodedPEM", (uint64_t)v32, (uint64_t)a4, a5, a6, a7, a8, v34);
    uint64_t v18 = 0;
    uint64_t v30 = 1;
    goto LABEL_29;
  }
  if (!__size)
  {
    uint64_t v32 = "pemBufferLength == 0";
    goto LABEL_34;
  }
  if (!a3)
  {
    uint64_t v32 = "outData == NULL";
    goto LABEL_34;
  }
  if (!a4)
  {
    uint64_t v32 = "outDataLength == NULL";
    goto LABEL_34;
  }
  uint64_t v12 = (char *)calloc(1uLL, __size);
  uint64_t v18 = v12;
  if (!v12)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateDecodedPEM", (uint64_t)"base64Buffer == NULL", v13, v14, v15, v16, v17, v34);
    uint64_t v30 = 2;
    goto LABEL_29;
  }
  uint64_t v19 = 0;
  size_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 1;
LABEL_7:
  char v23 = 0;
  uint64_t v24 = v22;
  while (1)
  {
    uint64_t v22 = v24;
    if (v20 >= __size || v21 > 1 || (v24 & 1) == 0) {
      break;
    }
    unsigned int v25 = *(unsigned __int8 *)(a1 + v20);
    if (v25 == 10 || v25 == 13)
    {
      v21 += v23 & 1;
      goto LABEL_21;
    }
    if (v25 == 45 || (v23 & 1) != 0)
    {
      ++v20;
      char v23 = 1;
    }
    else
    {
      if (v25 - 48 < 0xA || (v25 & 0xFFFFFFDF) - 65 < 0x1A)
      {
LABEL_25:
        ++v20;
        v12[v19++] = v25;
        goto LABEL_7;
      }
LABEL_21:
      char v23 = 0;
      uint64_t v24 = 0;
      if (v25 <= 0x3D)
      {
        uint64_t v24 = 0;
        if (((1 << v25) & 0x2000880100002600) != 0) {
          goto LABEL_25;
        }
      }
    }
  }
  if ((v24 & 1) == 0)
  {
    char v34 = v20;
    uint64_t v33 = "Input PEM has non-base64 chars at byte %d";
LABEL_38:
    uint64_t v30 = 3;
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateDecodedPEM", (uint64_t)v33, v13, v14, v15, v16, v17, v34);
    goto LABEL_29;
  }
  size_t v27 = (int)b64decode(v12, v19);
  uint64_t v28 = calloc(1uLL, v27);
  if (!v28)
  {
    uint64_t v33 = "decodedCopy == NULL";
    goto LABEL_38;
  }
  uint64_t v29 = v28;
  memcpy(v28, v18, v27);
  uint64_t v30 = 0;
  *a4 = v27;
  *a3 = v29;
LABEL_29:
  free(v18);
  return v30;
}

uint64_t AMAuthInstallSupportCFDataCompare(CFDataRef theData, const __CFData *a2)
{
  if (!((unint64_t)theData | (unint64_t)a2)) {
    return 0;
  }
  if (theData && !a2) {
    return 1;
  }
  if (!theData && a2) {
    return -1;
  }
  CFIndex Length = CFDataGetLength(theData);
  if (Length < CFDataGetLength(a2)) {
    return -1;
  }
  CFIndex v6 = CFDataGetLength(theData);
  if (v6 > CFDataGetLength(a2)) {
    return 1;
  }
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v8 = CFDataGetBytePtr(a2);
  size_t v9 = CFDataGetLength(theData);
  return memcmp(BytePtr, v8, v9);
}

uint64_t AMAuthInstallSupportWriteDataToFileURL(const __CFAllocator *a1, const __CFData *a2, const __CFURL *cf, int a4)
{
  CFTypeRef cfa = 0;
  uint64_t v4 = 1;
  if (!a2 || !cf) {
    return v4;
  }
  if (a4)
  {
    uint64_t v7 = AMAuthInstallSupportRemoveFile(cf);
    if (v7)
    {
LABEL_12:
      uint64_t v4 = v7;
      goto LABEL_13;
    }
    CFURLRef v8 = 0;
LABEL_8:
    if (v8) {
      CFURLRef v15 = v8;
    }
    else {
      CFURLRef v15 = cf;
    }
    uint64_t v7 = AMAuthInstallPlatformWriteDataToFileURL(a2, v15);
    goto LABEL_12;
  }
  uint64_t v9 = AMAuthInstallSupportCopyPreserveFileURL(a1, cf, &cfa, 1);
  if (!v9)
  {
    CFURLRef v8 = (const __CFURL *)cfa;
    goto LABEL_8;
  }
  uint64_t v4 = v9;
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportWriteDataToFileURL", (uint64_t)"AMAuthInstallSupportCopyPreserveFileURL failed.", v10, v11, v12, v13, v14, v17);
LABEL_13:
  if (cfa) {
    CFRelease(cfa);
  }
  return v4;
}

CFIndex AMAuthInstallSupportApplyDictionaryOverrides(int a1, CFDictionaryRef theDict, CFMutableDictionaryRef *a3, const __CFString *a4)
{
  CFIndex Count = 1;
  if (theDict && a3 && *a3)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    CFURLRef v8 = (const void **)malloc(8 * Count);
    uint64_t v9 = (const void **)malloc(8 * Count);
    uint64_t v10 = v9;
    if (v8 && v9)
    {
      CFDictionaryGetKeysAndValues(theDict, v8, v9);
      if (Count < 1)
      {
        CFIndex Count = 0;
        goto LABEL_17;
      }
      uint64_t v16 = "invalid overridesKey";
      char v17 = (CFStringRef *)v8;
      uint64_t v18 = v10;
      while (1)
      {
        CFStringRef v19 = *v17;
        if (!*v17)
        {
LABEL_22:
          AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportApplyDictionaryOverrides", (uint64_t)v16, v11, v12, v13, v14, v15, v22);
          CFIndex Count = 99;
          goto LABEL_17;
        }
        size_t v20 = *v18;
        if (!*v18)
        {
          uint64_t v16 = "invalid overridesValue";
          goto LABEL_22;
        }
        if (!a4) {
          goto LABEL_13;
        }
        if (CFStringFind(*v17, a4, 0).location != -1) {
          break;
        }
LABEL_14:
        ++v18;
        ++v17;
        if (!--Count) {
          goto LABEL_17;
        }
      }
      CFStringRef v19 = *v17;
      size_t v20 = *v18;
LABEL_13:
      CFDictionarySetValue(*a3, v19, v20);
      goto LABEL_14;
    }
    CFIndex Count = 2;
    if (v8) {
LABEL_17:
    }
      free(v8);
    if (v10) {
      free(v10);
    }
  }
  return Count;
}

CFDictionaryRef AMAuthInstallSupportGetValueForKeyPathInDict(const __CFAllocator *a1, const __CFDictionary *a2, CFStringRef theString, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDictionaryRef Value = a2;
  if (!a2)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportGetValueForKeyPathInDict", (uint64_t)"dict is NULL", a4, a5, a6, a7, a8, v22);
    return Value;
  }
  if (!theString)
  {
    unint64_t v21 = "keyPath is NULL";
LABEL_15:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportGetValueForKeyPathInDict", (uint64_t)v21, a4, a5, a6, a7, a8, v22);
    return 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, theString, @".");
  if (!ArrayBySeparatingStrings)
  {
    unint64_t v21 = "keys is NULL";
    goto LABEL_15;
  }
  CFArrayRef v10 = ArrayBySeparatingStrings;
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count >= 1)
  {
    CFIndex v12 = Count;
    CFIndex v13 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v13);
      if (!ValueAtIndex) {
        break;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, ValueAtIndex);
      if (Value)
      {
        if (v12 != ++v13) {
          continue;
        }
      }
      goto LABEL_9;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportGetValueForKeyPathInDict", (uint64_t)"key is NULL", v15, v16, v17, v18, v19, v22);
    CFDictionaryRef Value = 0;
  }
LABEL_9:
  CFRelease(v10);
  return Value;
}

CFDictionaryRef AMAuthInstallSupportGetValueForKeyWithFormat(const __CFAllocator *a1, const __CFDictionary *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!a3) {
    return 0;
  }
  CFStringRef v11 = CFStringCreateWithFormatAndArguments(a1, 0, a3, &a9);
  if (!v11) {
    return 0;
  }
  CFStringRef v17 = v11;
  CFDictionaryRef ValueForKeyPathInDict = AMAuthInstallSupportGetValueForKeyPathInDict(a1, a2, v11, v12, v13, v14, v15, v16);
  CFRelease(v17);
  return ValueForKeyPathInDict;
}

CFTypeRef AMAuthInstallSupportCopySetValueForKeyPathInDict(const __CFAllocator *a1, const __CFDictionary *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    char v40 = "dict is NULL";
LABEL_27:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCopySetValueForKeyPathInDict", (uint64_t)v40, a4, a5, a6, a7, a8, v41);
    return 0;
  }
  if (!a3)
  {
    char v40 = "keyPath is NULL";
    goto LABEL_27;
  }
  CFTypeRef v9 = (CFTypeRef)a4;
  if (!a4)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCopySetValueForKeyPathInDict", (uint64_t)"value is NULL", 0, a5, a6, a7, a8, v41);
    return v9;
  }
  CFIndex location = CFStringFind(a3, @".", 0).location;
  if (location == -1)
  {
    CFIndex Count = CFDictionaryGetCount(a2);
    CFAllocatorRef MutableCopy = CFDictionaryCreateMutableCopy(a1, Count, a2);
    if (MutableCopy)
    {
      uint64_t v35 = MutableCopy;
      CFDictionarySetValue(MutableCopy, a3, v9);
      CFTypeRef v9 = CFRetain(v35);
      CFDataRef v36 = v35;
LABEL_21:
      CFRelease(v36);
      return v9;
    }
    return 0;
  }
  CFIndex v13 = location;
  CFIndex v14 = location + 1;
  v42.CFIndex length = CFStringGetLength(a3) - (location + 1);
  v42.CFIndex location = v14;
  CFStringRef v15 = CFStringCreateWithSubstring(a1, a3, v42);
  if (!v15)
  {
    char v40 = "failed to create key substring";
    goto LABEL_27;
  }
  CFStringRef v16 = v15;
  v43.CFIndex location = 0;
  v43.CFIndex length = v13;
  CFStringRef v17 = CFStringCreateWithSubstring(a1, a3, v43);
  if (!v17)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCopySetValueForKeyPathInDict", (uint64_t)"failed to create current substring", v18, v19, v20, v21, v22, v41);
    CFRelease(v16);
    return 0;
  }
  CFStringRef v23 = v17;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, v17);
  if (Value)
  {
    CFDictionaryRef v25 = Value;
    CFTypeID v26 = CFGetTypeID(Value);
    if (v26 == CFDictionaryGetTypeID())
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(a1, 0, v25);
      goto LABEL_13;
    }
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCopySetValueForKeyPathInDict", (uint64_t)"item %@ not a dictionary", v27, v28, v29, v30, v31, (char)v23);
    CFTypeRef v9 = 0;
    CFMutableDictionaryRef Mutable = 0;
LABEL_16:
    uint64_t v37 = 0;
    goto LABEL_17;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    CFTypeRef v9 = 0;
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v37 = (void *)AMAuthInstallSupportCopySetValueForKeyPathInDict(a1, Mutable, v16, v9);
  uint64_t v38 = CFDictionaryCreateMutableCopy(a1, 0, a2);
  CFTypeRef v9 = v38;
  if (v38) {
    CFDictionarySetValue(v38, v23, v37);
  }
LABEL_17:
  CFRelease(v16);
  CFRelease(v23);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v37)
  {
    CFDataRef v36 = (__CFDictionary *)v37;
    goto LABEL_21;
  }
  return v9;
}

uint64_t AMAuthInstallSupportCopyFile(uint64_t a1, const void *a2, const __CFURL *a3)
{
  CFTypeRef cf = 0;
  uint64_t v3 = 1;
  if (!a2 || !a3) {
    return v3;
  }
  DirectoryForURL = AMAuthInstallPlatformMakeDirectoryForURL(a3);
  if (DirectoryForURL)
  {
    uint64_t v3 = (uint64_t)DirectoryForURL;
    CFStringRef v15 = "AMAuthInstallSupportMakeDirectory failed.";
  }
  else
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v13 = AMAuthInstallSupportCreateDataFromFileURL((const __CFAllocator *)*MEMORY[0x263EFFB08], &cf, a2);
    if (v13)
    {
      uint64_t v3 = v13;
      CFStringRef v15 = "AMAuthInstallSupportCreateDataFromFileURL failed.";
    }
    else
    {
      uint64_t v3 = AMAuthInstallSupportWriteDataToFileURL(v12, (const __CFData *)cf, a3, 1);
      if (!v3) {
        goto LABEL_6;
      }
      CFStringRef v15 = "AMAuthInstallSupportWriteDataToFileURL failed.";
    }
  }
  AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCopyFile", (uint64_t)v15, v7, v8, v9, v10, v11, v16);
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

CFURLRef AMAuthInstallSupportCreateURLFromString(const __CFAllocator *a1, const __CFString *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateURLFromString", (uint64_t)"%s: theString is NULL", a4, a5, a6, a7, a8, (char)"AMAuthInstallSupportCreateURLFromString");
    return 0;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 == CFURLGetTypeID())
  {
    AMAuthInstallLog(4, (uint64_t)"AMAuthInstallSupportCreateURLFromString", (uint64_t)"%s: CFURLRef passed, retaining copy", v11, v12, v13, v14, v15, (char)"AMAuthInstallSupportCreateURLFromString");
    return (CFURLRef)CFRetain(cf);
  }
  CFTypeID v17 = CFGetTypeID(cf);
  if (v17 != CFStringGetTypeID())
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCreateURLFromString", (uint64_t)"%s: invalid string", v18, v19, v20, v21, v22, (char)"AMAuthInstallSupportCreateURLFromString");
    return 0;
  }
  if (CFStringFind(cf, @"://", 0).location == -1)
  {
    return CFURLCreateWithFileSystemPath(a1, cf, kCFURLPOSIXPathStyle, 0);
  }
  else
  {
    return CFURLCreateWithString(a1, cf, 0);
  }
}

uint64_t AMAuthInstallSupportCopyStringReplacingLastComponent(const __CFAllocator *a1, const __CFString *a2, const __CFString *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v5 = 1;
  if (a2 && a4 && a5)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, a2, a3);
    if (!ArrayBySeparatingStrings) {
      return 3;
    }
    CFArrayRef v11 = ArrayBySeparatingStrings;
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy(a1, 0, ArrayBySeparatingStrings);
    if (!MutableCopy)
    {
      uint64_t v5 = 3;
      CFStringRef v16 = (CFStringRef)v11;
LABEL_9:
      CFRelease(v16);
      return v5;
    }
    uint64_t v13 = MutableCopy;
    CFIndex Count = CFArrayGetCount(MutableCopy);
    CFArraySetValueAtIndex(v13, Count - 1, a4);
    CFStringRef v15 = CFStringCreateByCombiningStrings(a1, v13, a3);
    CFStringRef v16 = v15;
    if (v15)
    {
      uint64_t v5 = 0;
      *a5 = CFRetain(v15);
    }
    else
    {
      uint64_t v5 = 3;
    }
    CFRelease(v11);
    CFRelease(v13);
    if (v16) {
      goto LABEL_9;
    }
  }
  return v5;
}

uint64_t AMAuthInstallSupportCreateMergedDictionary(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  CFDictionaryRef theDict = 0;
  uint64_t v4 = 1;
  if (!a2 || !a3 || !a4) {
    return v4;
  }
  CFIndex Count = CFDictionaryGetCount(a3);
  CFTypeID v10 = (const void **)malloc(8 * Count);
  if (!v10) {
    return 2;
  }
  CFArrayRef v11 = v10;
  uint64_t v12 = (const void **)malloc(8 * Count);
  if (!v12)
  {
    free(v11);
    return 2;
  }
  uint64_t v13 = v12;
  CFDictionaryGetKeysAndValues(a3, v11, v12);
  if (Count < 1)
  {
    CFDictionaryRef v23 = 0;
    uint64_t v4 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_31;
  }
  uint64_t v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFDictionaryRef v25 = v13;
  CFTypeID v26 = v11;
  while (1)
  {
    CFStringRef v15 = *v11;
    if (!*a4) {
      *a4 = CFDictionaryCreateMutableCopy(a1, 0, a2);
    }
    CFTypeID v16 = CFGetTypeID(*v13);
    if (v16 == CFDictionaryGetTypeID()) {
      break;
    }
    CFDictionaryRef v20 = theDict;
    CFMutableDictionaryRef MutableCopy = *a4;
    if (theDict)
    {
      if (MutableCopy)
      {
        CFRelease(MutableCopy);
        CFDictionaryRef v20 = theDict;
      }
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, v20);
      *a4 = MutableCopy;
    }
    if (!MutableCopy)
    {
      CFMutableDictionaryRef Mutable = 0;
LABEL_37:
      uint64_t v4 = 2;
      goto LABEL_29;
    }
    CFDictionarySetValue(MutableCopy, v15, *v13);
    CFMutableDictionaryRef Mutable = 0;
LABEL_23:
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef theDict = 0;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    ++v13;
    ++v11;
    if (!--Count)
    {
      uint64_t v4 = 0;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_29;
    }
  }
  CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(a2, v15);
  if (Value)
  {
    CFMutableDictionaryRef Mutable = Value;
    CFRetain(Value);
    CFTypeID v19 = CFGetTypeID(Mutable);
    if (v19 != CFDictionaryGetTypeID())
    {
      uint64_t v4 = 7;
      goto LABEL_29;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], v14);
    if (!Mutable) {
      goto LABEL_37;
    }
  }
  uint64_t v22 = AMAuthInstallSupportCreateMergedDictionary(a1, Mutable, *v13, &theDict);
  if (!v22)
  {
    CFDictionarySetValue(*a4, v15, theDict);
    goto LABEL_23;
  }
  uint64_t v4 = v22;
LABEL_29:
  CFArrayRef v11 = v26;
  CFDictionaryRef v23 = theDict;
  uint64_t v13 = v25;
LABEL_31:
  free(v11);
  free(v13);
  if (v23) {
    CFRelease(v23);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v4;
}

CFStringRef AMAuthInstallSupportCompareStringToInt32(const __CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *__error() = 0;
  if (!a1)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCompareStringToInt32", (uint64_t)"%s: bad parameter: dict is null", v6, v7, v8, v9, v10, (char)"AMAuthInstallSupportCompareStringToInt32");
    return 0;
  }
  if (!a2)
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallSupportCompareStringToInt32", (uint64_t)"%s: bad parameter: key is null", v6, v7, v8, v9, v10, (char)"AMAuthInstallSupportCompareStringToInt32");
    return 0;
  }
  CFStringRef result = (const __CFString *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFStringRef result = (const __CFString *)CFStringGetCString(result, buffer, 32, 0x8000100u);
    if (result)
    {
      if (strtol(buffer, 0, 16) == a3) {
        return (const __CFString *)(*__error() == 0);
      }
      return 0;
    }
  }
  return result;
}

uint64_t AMAuthInstallSupportCreatePrependedFilePath(const __CFAllocator *a1, uint64_t a2, CFStringRef theString, void *a4)
{
  uint64_t v4 = 1;
  if (!a1 || !a2 || !theString || !a4) {
    return v4;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, theString, @"/");
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
  if (ValueAtIndex)
  {
    CFStringRef v11 = CFStringCreateWithFormat(a1, 0, @"%@_%@", a2, ValueAtIndex);
    CFStringRef v12 = v11;
    if (v11)
    {
      if (Count > 1)
      {
        CFArraySetValueAtIndex(ArrayBySeparatingStrings, Count - 1, v11);
        uint64_t v13 = (void *)CFStringCreateByCombiningStrings(a1, ArrayBySeparatingStrings, @"/");
      }
      else
      {
        uint64_t v13 = (void *)CFRetain(v11);
      }
      uint64_t v4 = 0;
      *a4 = v13;
      if (!ArrayBySeparatingStrings) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    CFStringRef v12 = 0;
  }
  uint64_t v4 = 2;
  if (ArrayBySeparatingStrings) {
LABEL_11:
  }
    CFRelease(ArrayBySeparatingStrings);
LABEL_12:
  if (v12) {
    CFRelease(v12);
  }
  return v4;
}

uint64_t AMAuthInstallSupportCreateStringRemovingPrepend(CFAllocatorRef alloc, const __CFString *a2, const __CFString *a3, void *a4)
{
  uint64_t result = 1;
  if (a2 && a4)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(alloc, a2, a3);
    if (ArrayBySeparatingStrings)
    {
      uint64_t v10 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) > 1)
      {
        CFArrayRemoveValueAtIndex(v10, 0);
        CFStringRef v11 = (void *)CFStringCreateByCombiningStrings(alloc, v10, a3);
      }
      else
      {
        CFStringRef v11 = (void *)CFRetain(a2);
      }
      *a4 = v11;
      CFRelease(v10);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t AMAuthInstallSupportCopyTagAndFileURL(const __CFAllocator *a1, CFURLRef anURL, CFTypeRef *a3, CFTypeRef *a4)
{
  if (!anURL) {
    return 2;
  }
  CFStringRef v8 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  if (!v8) {
    return 2;
  }
  CFStringRef v9 = v8;
  if (CFStringFind(v8, @"=", 0).location != -1)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(a1, v9, @"=");
    if (!ArrayBySeparatingStrings)
    {
      uint64_t v18 = 2;
      goto LABEL_15;
    }
    CFArrayRef v11 = ArrayBySeparatingStrings;
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    if (ValueAtIndex && (v13 = ValueAtIndex, (CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex(v11, 1)) != 0))
    {
      CFURLRef v15 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], v14, kCFURLPOSIXPathStyle, 0);
      if (v15)
      {
        CFStringRef v16 = (const __CFString *)v15;
        if (!a3) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      uint64_t v17 = 2;
    }
    else
    {
      uint64_t v17 = 8;
    }
    CFRelease(v9);
    CFStringRef v16 = 0;
LABEL_13:
    CFRelease(v11);
    uint64_t v18 = v17;
    goto LABEL_14;
  }
  CFStringRef v16 = (const __CFString *)CFRetain(anURL);
  uint64_t v13 = 0;
  CFArrayRef v11 = 0;
  if (a3) {
LABEL_9:
  }
    *a3 = CFRetain(v13);
LABEL_10:
  if (a4) {
    *a4 = CFRetain(v16);
  }
  CFRelease(v9);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v11) {
    goto LABEL_13;
  }
LABEL_14:
  CFStringRef v9 = v16;
  if (v16) {
LABEL_15:
  }
    CFRelease(v9);
  return v18;
}

double AMAuthInstallUpdaterCreate()
{
  pthread_once(&_AMAuthInstallUpdaterClassInitializeOnce, (void (*)(void))_AMAuthInstallUpdaterClassInitialize);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
  }
  return result;
}

void *AMAuthInstallUpdater(uint64_t a1, const __CFString *key, const __CFURL *a3)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  if (key)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 456), key);
    if (Value) {
      goto LABEL_10;
    }
    CFGetAllocator((CFTypeRef)a1);
    AMAuthInstallUpdaterCreate();
    CFDictionaryRef Value = (void *)v7;
    if (v7)
    {
      _AMAuthInstallUpdaterInitLocalSigning(v7, key);
      *(void *)(a1 + 440) = AMAuthInstallUpdaterAddTags;
      *(void *)(a1 + 448) = AMAuthInstallUpdaterWriteManifests;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 456), key, Value);
      CFRelease(Value);
      if (!a3) {
        goto LABEL_10;
      }
      if (!AMAuthInstallBundleCopyReceiptCreateIfNecessary(a1, a3, &cf))
      {
        CFAllocatorRef v9 = CFGetAllocator((CFTypeRef)a1);
        CFDictionaryRef ValueForKeyWithFormat = AMAuthInstallSupportGetValueForKeyWithFormat(v9, (const __CFDictionary *)cf, @"%@.%@", v10, v11, v12, v13, v14, (char)@"Updaters");
        if (ValueForKeyWithFormat)
        {
          CFDictionaryRef v16 = ValueForKeyWithFormat;
          uint64_t v17 = CFDictionaryGetValue(ValueForKeyWithFormat, @"RequestTags");
          if (v17) {
            Value[2] = CFRetain(v17);
          }
          uint64_t v18 = CFDictionaryGetValue(v16, @"ResponseTags");
          if (v18) {
            Value[5] = CFRetain(v18);
          }
          CFTypeID v19 = CFDictionaryGetValue(v16, @"BuildIdentityTags");
          if (v19) {
            Value[4] = CFRetain(v19);
          }
          CFDictionaryRef v20 = CFDictionaryGetValue(v16, @"LoopInstance");
          if (v20) {
            Value[6] = CFRetain(v20);
          }
        }
        goto LABEL_10;
      }
    }
    AMSupportCreateErrorInternal();
  }
  else
  {
    AMSupportCreateErrorInternal();
    CFDictionaryRef Value = 0;
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  return Value;
}

uint64_t _AMAuthInstallUpdaterInitLocalSigning(uint64_t a1, CFStringRef theString1)
{
  if (theString1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      CFStringRef v5 = *(const __CFString **)((char *)&updaterLocalSigning + v4);
      if (!v5) {
        break;
      }
      uint64_t result = CFStringCompare(theString1, v5, 0);
      if (!result)
      {
        *(unsigned char *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = *(void *)((char *)&updaterLocalSigning + v4 + 8);
        *(void *)(a1 + 80) = @"LocalSigningID";
        return result;
      }
      v4 += 24;
      if (v4 == 72) {
        goto LABEL_6;
      }
    }
  }
  uint64_t result = AMSupportLogInternal();
LABEL_6:
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return result;
}

uint64_t AMAuthInstallUpdaterAddTags(void *a1, void *context, CFDictionaryRef theDict)
{
  if (!a1 || (CFDictionaryRef v4 = (const __CFDictionary *)a1[57]) == 0 || !context)
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  if (theDict)
  {
    uint64_t result = AMAuthInstallUpdaterLoadFromReceipt(a1, theDict);
    if (!result) {
      return result;
    }
    CFDictionaryRef v4 = (const __CFDictionary *)a1[57];
  }
  CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)_AddUpdaterTags, context);
  return 1;
}

uint64_t AMAuthInstallUpdaterWriteManifests(uint64_t a1, const __CFURL *a2, const __CFDictionary *a3)
{
  if (!a1 || (CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 456)) == 0 || !a2 || !a3)
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(v4);
  CFStringRef v8 = (const void **)malloc(8 * Count);
  CFAllocatorRef v9 = (const void **)malloc(8 * Count);
  uint64_t v10 = (uint64_t *)v9;
  if (v8 && v9)
  {
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 456), v8, v9);
    if (Count < 1)
    {
LABEL_11:
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v12 = v10;
      while (AMAuthInstallUpdaterWriteManifest(*v12, *v11, a2, a3))
      {
        ++v12;
        ++v11;
        if (!--Count) {
          goto LABEL_11;
        }
      }
      uint64_t v13 = 0;
    }
  }
  else
  {
    AMSupportCreateErrorInternal();
    uint64_t v13 = 0;
    if (!v8)
    {
      if (!v10) {
        return v13;
      }
      goto LABEL_17;
    }
  }
  free(v8);
  if (v10) {
LABEL_17:
  }
    free(v10);
  return v13;
}

uint64_t AMAuthInstallUpdaterSaveToReceipt(uint64_t a1, const __CFString *a2, const __CFURL *a3)
{
  uint64_t v3 = a1;
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    AMSupportCreateErrorInternal();
    return v3;
  }
  if (!a2 || !a3) {
    goto LABEL_10;
  }
  if (AMAuthInstallBundleCopyReceiptCreateIfNecessary(a1, a3, (CFPropertyListRef *)&theDict))
  {
    CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)v3);
    CFDictionaryRef theDict = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (theDict) {
      goto LABEL_6;
    }
LABEL_10:
    AMSupportCreateErrorInternal();
    uint64_t v3 = 0;
    uint64_t v11 = 0;
    CFDictionaryRef Mutable = 0;
    goto LABEL_36;
  }
  if (!theDict) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v7 = AMAuthInstallUpdater(v3, a2, 0);
  if (!v7) {
    goto LABEL_10;
  }
  CFStringRef v8 = v7;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Updaters");
  if (Value)
  {
    CFDictionaryRef Mutable = Value;
    CFRetain(Value);
  }
  else
  {
    CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)v3);
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable)
    {
      AMSupportCreateErrorInternal();
      uint64_t v3 = 0;
      uint64_t v11 = 0;
      goto LABEL_36;
    }
  }
  uint64_t v13 = (__CFDictionary *)CFDictionaryGetValue(Mutable, a2);
  if (v13)
  {
    uint64_t v11 = v13;
    CFRetain(v13);
  }
  else
  {
    CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)v3);
    uint64_t v11 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v11)
    {
      AMSupportCreateErrorInternal();
      goto LABEL_35;
    }
  }
  CFDictionaryRef v15 = (const __CFDictionary *)v8[2];
  if (v15 && CFDictionaryGetCount(v15) >= 1) {
    CFDictionarySetValue(v11, @"RequestTags", (const void *)v8[2]);
  }
  CFArrayRef v16 = (const __CFArray *)v8[5];
  if (v16 && CFArrayGetCount(v16) >= 1) {
    CFDictionarySetValue(v11, @"ResponseTags", (const void *)v8[5]);
  }
  CFArrayRef v17 = (const __CFArray *)v8[4];
  if (v17 && CFArrayGetCount(v17) >= 1) {
    CFDictionarySetValue(v11, @"BuildIdentityTags", (const void *)v8[4]);
  }
  uint64_t v18 = (const void *)v8[6];
  if (v18) {
    CFDictionarySetValue(v11, @"LoopInstance", v18);
  }
  if (CFDictionaryGetCount(v11) >= 1)
  {
    CFDictionarySetValue(Mutable, a2, v11);
    CFDictionarySetValue(theDict, @"Updaters", Mutable);
  }
  int v19 = AMAuthInstallBundleWriteReceipt((void *)v3, a3, theDict, (const __CFBoolean *)*MEMORY[0x263EFFB38]);
  if (v19)
  {
    char LocalizedStatusString = AMAuthInstallGetLocalizedStatusString((CFDictionaryRef *)v3, v19);
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallUpdaterSaveToReceipt", (uint64_t)"failed to write receipt: %@", v21, v22, v23, v24, v25, LocalizedStatusString);
LABEL_35:
    uint64_t v3 = 0;
    goto LABEL_36;
  }
  uint64_t v3 = 1;
LABEL_36:
  if (theDict)
  {
    CFRelease(theDict);
    CFDictionaryRef theDict = 0;
  }
  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

void *_LoadUpdater(void *key, const __CFDictionary *a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 456), key);
  if (!result)
  {
    uint64_t result = (void *)AMAuthInstallUpdater(v3, key);
    if (result)
    {
      uint64_t v7 = result;
      CFDictionaryRef Value = CFDictionaryGetValue(a2, @"RequestTags");
      if (Value)
      {
        CFAllocatorRef v9 = Value;
        uint64_t v10 = (const void *)v7[2];
        if (v10)
        {
          CFRelease(v10);
          int v7[2] = 0;
        }
        int v7[2] = CFRetain(v9);
      }
      uint64_t v11 = CFDictionaryGetValue(a2, @"ResponseTags");
      if (v11)
      {
        CFAllocatorRef v12 = v11;
        uint64_t v13 = (const void *)v7[5];
        if (v13)
        {
          CFRelease(v13);
          v7[5] = 0;
        }
        v7[5] = CFRetain(v12);
      }
      CFAllocatorRef v14 = CFDictionaryGetValue(a2, @"BuildIdentityTags");
      if (v14)
      {
        CFDictionaryRef v15 = v14;
        CFArrayRef v16 = (const void *)v7[4];
        if (v16)
        {
          CFRelease(v16);
          v7[4] = 0;
        }
        v7[4] = CFRetain(v15);
      }
      uint64_t result = CFDictionaryGetValue(a2, @"LoopInstance");
      if (result)
      {
        CFArrayRef v17 = result;
        uint64_t v18 = (const void *)v7[6];
        if (v18)
        {
          CFRelease(v18);
          v7[6] = 0;
        }
        uint64_t result = CFRetain(v17);
        v7[6] = result;
      }
    }
  }
  return result;
}

uint64_t AMAuthInstallUpdaterLoadFromReceipt(void *a1, CFDictionaryRef theDict)
{
  if (a1 && a1[57] && theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Updaters");
    if (Value) {
      CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)_LoadUpdater, a1);
    }
    return 1;
  }
  else
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
}

CFMutableDictionaryRef AMAuthInstallUpdaterCopyTags(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4)
{
  if (!a1) {
    goto LABEL_11;
  }
  if (!a2) {
    goto LABEL_11;
  }
  if (!a3) {
    goto LABEL_11;
  }
  CFAllocatorRef v6 = AMAuthInstallUpdater(a1, a2, 0);
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t v7 = v6;
  if (CFEqual(a3, @"RequestTags"))
  {
    CFDictionaryRef v8 = (const __CFDictionary *)v7[2];
    if (!v8) {
      return 0;
    }
    return CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v8);
  }
  if (CFEqual(a3, @"RequestHeaderTags"))
  {
    CFDictionaryRef v8 = (const __CFDictionary *)v7[3];
    if (!v8) {
      return 0;
    }
    return CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v8);
  }
  if (CFEqual(a3, @"ResponseTags"))
  {
    CFArrayRef v10 = (const __CFArray *)v7[5];
    if (!v10) {
      return 0;
    }
    return CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v10);
  }
  if (CFEqual(a3, @"BuildIdentityTags"))
  {
    CFArrayRef v10 = (const __CFArray *)v7[4];
    if (!v10) {
      return 0;
    }
    return CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v10);
  }
  if (CFStringCompare(a3, @"LoopInstance", 0))
  {
    if (a4) {
LABEL_11:
    }
      AMSupportCreateErrorInternal();
  }
  else
  {
    CFStringRef v11 = (const __CFString *)v7[6];
    if (v11) {
      return (CFMutableDictionaryRef)CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v11);
    }
  }
  return 0;
}

uint64_t AMAuthInstallUpdaterSetTags(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4)
{
  if (!a1)
  {
    uint64_t v8 = 1;
    AMSupportCreateErrorInternal();
    return v8;
  }
  if (!a2 || !a3 || !a4)
  {
    uint64_t v8 = 1;
LABEL_31:
    AMSupportCreateErrorInternal();
    return v8;
  }
  CFAllocatorRef v6 = AMAuthInstallUpdater(a1, a2, 0);
  if (!v6)
  {
    uint64_t v8 = 2;
    goto LABEL_31;
  }
  uint64_t v7 = v6;
  if (CFStringCompare(a3, @"RequestTags", 0))
  {
    if (CFStringCompare(a3, @"RequestHeaderTags", 0))
    {
      if (CFStringCompare(a3, @"ResponseTags", 0))
      {
        if (CFStringCompare(a3, @"BuildIdentityTags", 0))
        {
          if (CFStringCompare(a3, @"LoopInstance", 0))
          {
            return 0;
          }
          else
          {
            CFArrayRef v17 = (const void *)v7[6];
            if (v17)
            {
              CFRelease(v17);
              v7[6] = 0;
            }
            CFTypeRef v18 = CFRetain(a4);
            uint64_t v8 = 0;
            v7[6] = v18;
          }
        }
        else
        {
          CFDictionaryRef v15 = (const void *)v7[4];
          if (v15)
          {
            CFRelease(v15);
            v7[4] = 0;
          }
          CFTypeRef v16 = CFRetain(a4);
          uint64_t v8 = 0;
          v7[4] = v16;
        }
      }
      else
      {
        uint64_t v13 = (const void *)v7[5];
        if (v13)
        {
          CFRelease(v13);
          v7[5] = 0;
        }
        CFTypeRef v14 = CFRetain(a4);
        uint64_t v8 = 0;
        v7[5] = v14;
      }
    }
    else
    {
      CFStringRef v11 = (const void *)v7[3];
      if (v11)
      {
        CFRelease(v11);
        v7[3] = 0;
      }
      CFTypeRef v12 = CFRetain(a4);
      uint64_t v8 = 0;
      v7[3] = v12;
    }
  }
  else
  {
    CFAllocatorRef v9 = (const void *)v7[2];
    if (v9)
    {
      CFRelease(v9);
      int v7[2] = 0;
    }
    CFTypeRef v10 = CFRetain(a4);
    uint64_t v8 = 0;
    int v7[2] = v10;
  }
  return v8;
}

__CFDictionary *AMAuthInstallUpdaterCopyResponse(const void *a1, const __CFString *key, const __CFURL *a3)
{
  if (!a1)
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  if (!key || !a3) {
    goto LABEL_16;
  }
  CFAllocatorRef v6 = AMAuthInstallUpdater((uint64_t)a1, key, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  if (!v6[5])
  {
LABEL_16:
    AMSupportCreateErrorInternal();
    return 0;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
LABEL_18:
    AMSupportCreateErrorInternal();
    return Mutable;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v7[5]);
  if (Count >= 1)
  {
    CFIndex v11 = Count;
    CFIndex v12 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7[5], v12);
      CFTypeID v14 = CFGetTypeID(ValueAtIndex);
      if (v14 != CFStringGetTypeID()) {
        break;
      }
      uint64_t v15 = _AMAuthInstallUpdaterCopyResponseURL(a3, (uint64_t)key, ValueAtIndex, v7[6]);
      if (!v15) {
        return Mutable;
      }
      CFTypeRef v16 = (const void *)v15;
      CFGetAllocator(a1);
      if (!AMSupportCreateDataFromFileURL())
      {
        CFDictionarySetValue(Mutable, ValueAtIndex, 0);
        AMSupportLogInternal();
      }
      CFRelease(v16);
      if (v11 == ++v12)
      {
        if (CFDictionaryGetCount(Mutable)) {
          return Mutable;
        }
        AMSupportCreateErrorInternal();
        CFRelease(Mutable);
        return 0;
      }
    }
    goto LABEL_18;
  }
  return Mutable;
}

uint64_t _AMAuthInstallUpdaterCopyResponseURL(const __CFURL *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (!a1
    || !a2
    || !a3
    || (ManifestPath = AMAuthInstallBundleGetManifestPath(),
        (CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%@%c%@", ManifestPath, 47, a2)) == 0))
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  CFStringRef v10 = v9;
  CFURLRef v11 = CFURLCreateCopyAppendingPathComponent(0, a1, v9, 1u);
  if (!v11)
  {
    AMSupportCreateErrorInternal();
    CFStringRef v14 = v10;
LABEL_18:
    CFRelease(v14);
    return 0;
  }
  CFURLRef v12 = v11;
  if (MEMORY[0x21D453D50]())
  {
    AMSupportCreateErrorInternal();
    CFStringRef v13 = 0;
    goto LABEL_16;
  }
  if (!a4)
  {
    CFStringRef v13 = (const __CFString *)CFRetain(a3);
LABEL_14:
    if (!AMSupportCopyURLWithAppendedComponent()) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@.%@", a3, a4);
  if (v13) {
    goto LABEL_14;
  }
LABEL_15:
  AMSupportCreateErrorInternal();
LABEL_16:
  CFRelease(v10);
  CFRelease(v12);
  if (v13)
  {
    CFStringRef v14 = v13;
    goto LABEL_18;
  }
  return 0;
}

void _AddTag(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void _AddUpdaterTags(uint64_t a1, uint64_t a2, void *a3)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a2 + 16);
  if (v3)
  {
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_AddTag, a3);
    CFStringRef v5 = *(const void **)(a2 + 16);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a2 + 16) = 0;
    }
  }
  else
  {
    AMSupportLogInternal();
  }
}

__CFDictionary *AMAuthInstallUpdaterCreateLocalResponse(const void *a1, void *a2, uint64_t a3)
{
  CFStringRef v14 = 0;
  if (!a1 || !a2) {
    goto LABEL_13;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)a2[2];
  if (v6 && !CFDictionaryGetCount(v6))
  {
    if (!AMAuthInstallUpdaterEmptyTicket(a1, (uint64_t)a2, v7, &v14, v8, v9, v10, v11)) {
      return v14;
    }
LABEL_13:
    AMSupportCreateErrorInternal();
    return v14;
  }
  CFURLRef v12 = (unsigned int (*)(const void *, void *, uint64_t, __CFDictionary **))a2[9];
  if (!v12 || !a2[5]) {
    goto LABEL_13;
  }
  if (!a3) {
    a3 = a2[2];
  }
  if (v12(a1, a2, a3, &v14)) {
    goto LABEL_13;
  }
  return v14;
}

uint64_t AMAuthInstallUpdaterEmptyTicket(const void *a1, uint64_t a2, uint64_t a3, __CFDictionary **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v21 = "amai is NULL";
LABEL_16:
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallUpdaterEmptyTicket", (uint64_t)v21, (uint64_t)a4, a5, a6, a7, a8, v22);
    uint64_t v19 = 99;
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v21 = "updater is NULL";
    goto LABEL_16;
  }
  if (!a4)
  {
    uint64_t v21 = "response is NULL";
    goto LABEL_16;
  }
  AMAuthInstallLog(6, (uint64_t)"AMAuthInstallUpdaterEmptyTicket", (uint64_t)"Updater library requested fake/empty ticket(s)", (uint64_t)a4, a5, a6, a7, a8, v22);
  CFDataRef v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
  if (!v11)
  {
    uint64_t v21 = "Failed to create data for empty manifest";
    goto LABEL_16;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *a4 = Mutable;
  if (!Mutable)
  {
    uint64_t v21 = "Failed to create dictionary for response";
    goto LABEL_16;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 40));
  if (Count >= 1)
  {
    CFIndex v15 = Count;
    for (CFIndex i = 0; i != v15; ++i)
    {
      CFArrayRef v17 = *a4;
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 40), i);
      CFDictionarySetValue(v17, ValueAtIndex, v11);
    }
  }
  uint64_t v19 = 0;
LABEL_10:
  AMSupportSafeRelease();
  return v19;
}

__CFDictionary *AMAuthInstallUpdaterCreateResponse(CFTypeRef *a1, CFDictionaryRef theDict, const __CFDictionary *a3)
{
  LocalResponse = 0;
  if (!a1)
  {
LABEL_27:
    AMSupportCreateErrorInternal();
    return LocalResponse;
  }
  if (!theDict)
  {
    CFDictionaryRef Value = 0;
    goto LABEL_18;
  }
  CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(theDict, @"UpdaterName");
  CFBooleanRef v7 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"LocalSign");
  if (v7)
  {
    int v8 = CFBooleanGetValue(v7);
    if (!Value)
    {
LABEL_18:
      if (!a3 || !CFDictionaryGetCount(a3)) {
        goto LABEL_27;
      }
      AMAuthInstallSetDebugFlags((uint64_t)a1, 2);
      CFArrayRef v17 = CFDictionaryGetValue(theDict, @"PersonalizedBundle");
      if (v17) {
        _AMAuthInstallBundleCreateDebugDirectory(a1, v17);
      }
      if (AMAuthInstallRequestSendSyncWithHeader((uint64_t)a1, a3, Value->length, (CFTypeRef *)&LocalResponse))goto LABEL_27; {
      goto LABEL_25;
      }
    }
  }
  else
  {
    int v8 = 0;
    if (!Value) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = (__CFString *)AMAuthInstallUpdater((uint64_t)a1, Value, 0);
  if (!v9) {
    return LocalResponse;
  }
  CFDictionaryRef Value = v9;
  CFDictionaryRef data = (const __CFDictionary *)v9->data;
  if (data && !CFDictionaryGetCount(data)) {
    int v8 = 1;
  }
  if (LOBYTE(Value[2].isa)) {
    CFTypeRef v16 = @"true";
  }
  else {
    CFTypeRef v16 = @"false";
  }
  AMAuthInstallLog(5, (uint64_t)"AMAuthInstallUpdaterCreateResponse", (uint64_t)"Updater local signing support: %@", v10, v11, v12, v13, v14, (char)v16);
  if (!(LOBYTE(Value[2].isa) | v8)) {
    goto LABEL_18;
  }
  LocalResponse = AMAuthInstallUpdaterCreateLocalResponse(a1, Value, (uint64_t)a3);
  if (!LocalResponse) {
    return LocalResponse;
  }
LABEL_25:
  CFTypeRef v18 = Value->data;
  if (v18)
  {
    CFRelease(v18);
    Value->CFDictionaryRef data = 0;
  }
  return LocalResponse;
}

uint64_t AMAuthInstallUpdaterPersonalize(void *a1, void *key, const void *a3)
{
  if (!a1
    || !key
    || (CFDictionaryRef v5 = (const __CFDictionary *)a1[57]) == 0
    || (CFDictionaryRef Value = CFDictionaryGetValue(v5, key)) == 0
    || (uint64_t v8 = (uint64_t)Value, !Value[2])
    || (CFAllocatorRef v9 = CFGetAllocator(a1),
        (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) == 0))
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  uint64_t v11 = Mutable;
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFTypeRef cf = CFDictionaryCreateMutableCopy(v12, 0, *(CFDictionaryRef *)(v8 + 16));
  if (!cf)
  {
    AMSupportCreateErrorInternal();
LABEL_33:
    Response = 0;
LABEL_34:
    uint64_t v24 = 0;
    goto LABEL_20;
  }
  uint64_t v13 = a1[2];
  if (v13 && !*(void *)(v13 + 144) && *(_DWORD *)(v13 + 8))
  {
    AMSupportLogInternal();
    AMSupportCFDictionarySetInteger32();
    AMSupportCFDictionarySetInteger32();
    AMSupportCFDictionarySetBoolean();
    AMSupportCFDictionarySetBoolean();
  }
  CFDictionaryRef v14 = (const __CFDictionary *)a1[53];
  if (v14)
  {
    CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(v14, @"UpdaterRequestEntries");
    if (v15)
    {
      CFDictionaryRef v16 = v15;
      int v17 = CFGetAllocator(a1);
      if (AMAuthInstallSupportApplyDictionaryOverrides(v17, v16, (CFMutableDictionaryRef *)&cf, 0))
      {
        AMAuthInstallLog(3, (uint64_t)"AMAuthInstallUpdaterPersonalize", (uint64_t)"failed to set updater request entries", v18, v19, v20, v21, v22, v26);
        goto LABEL_33;
      }
    }
  }
  CFDictionarySetValue(v11, @"UpdaterName", key);
  CFDictionarySetValue(v11, @"PersonalizedBundle", a3);
  Response = AMAuthInstallUpdaterCreateResponse((CFTypeRef *)a1, v11, (const __CFDictionary *)cf);
  if (!Response) {
    goto LABEL_34;
  }
  if (a3)
  {
    if (*(void *)(v8 + 40))
    {
      AMSupportLogInternal();
      if (AMAuthInstallUpdaterWriteManifest(v8, (uint64_t)key, (const __CFURL *)a3, Response) != 1) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v24 = AMSupportSafeRetain();
LABEL_20:
  CFRelease(v11);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Response) {
    CFRelease(Response);
  }
  return v24;
}

uint64_t AMAuthInstallUpdaterWriteManifest(uint64_t a1, uint64_t a2, const __CFURL *a3, const __CFDictionary *a4)
{
  if (a1 && (CFArrayRef v5 = *(const __CFArray **)(a1 + 40)) != 0 && a2 && a3 && a4)
  {
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0; v9 != i; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), i);
        CFDictionaryRef Value = CFDictionaryGetValue(a4, ValueAtIndex);
        if (Value)
        {
          uint64_t v13 = Value;
          uint64_t result = _AMAuthInstallUpdaterCopyResponseURL(a3, a2, ValueAtIndex, *(void *)(a1 + 48));
          if (!result) {
            return result;
          }
          CFDictionaryRef v15 = (const void *)result;
          CFTypeID v16 = CFGetTypeID(v13);
          if (v16 == CFDataGetTypeID())
          {
            CFGetAllocator((CFTypeRef)a1);
            if (AMSupportWriteDataToFileURL()) {
              goto LABEL_19;
            }
          }
          else
          {
            CFTypeID v17 = CFGetTypeID(v13);
            if (v17 != CFDictionaryGetTypeID()
              || (CFGetAllocator((CFTypeRef)a1), AMSupportWriteDictionarytoFileURL()))
            {
LABEL_19:
              AMSupportCreateErrorInternal();
              CFRelease(v15);
              return 0;
            }
          }
          CFRelease(v15);
        }
        else
        {
          AMSupportLogInternal();
        }
      }
    }
    return 1;
  }
  else
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
}

uint64_t AMAuthInstallUpdaterDeviceRestoreInfo(const __CFString *a1)
{
  uint64_t result = _updater_named(a1);
  if (result) {
    return *(unsigned __int8 *)(result + 40);
  }
  return result;
}

uint64_t _updater_named(CFStringRef theString1)
{
  if (theString1)
  {
    uint64_t v2 = 0;
    while (1)
    {
      CFStringRef v3 = *(const __CFString **)((char *)&updaterFunctions + v2);
      if (!v3) {
        break;
      }
      if (CFEqual(theString1, v3)) {
        return (uint64_t)&updaterFunctions + v2;
      }
      v2 += 48;
      if (v2 == 624) {
        return 0;
      }
    }
  }
  AMSupportLogInternal();
  return 0;
}

uint64_t AMAuthInstallUpdaterTwoStageEnabled(const __CFString *a1)
{
  uint64_t result = _updater_named(a1);
  if (result) {
    return *(unsigned __int8 *)(result + 41);
  }
  return result;
}

CFMutableDictionaryRef AMAuthInstallUpdaterCopyBuildIdentityTags(uint64_t a1, const __CFString *a2, CFDictionaryRef theDict, const __CFString *a4, __CFDictionary *a5)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    AMSupportCreateErrorInternal();
    return 0;
  }
  if (!a2 || !theDict) {
    goto LABEL_12;
  }
  CFMutableDictionaryRef Mutable = a5;
  if (a5)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"BuildIdentityTags");
    if (!Value) {
      goto LABEL_12;
    }
    uint64_t v11 = Value;
    CFTypeID v12 = CFGetTypeID(Value);
    if (v12 != CFArrayGetTypeID()) {
      goto LABEL_12;
    }
    if (AMAuthInstallUpdaterSetTags(a1, a2, @"BuildIdentityTags", v11)) {
      goto LABEL_13;
    }
    uint64_t v13 = CFDictionaryGetValue(theDict, @"ResponseTags");
    if (!v13) {
      goto LABEL_12;
    }
    CFDictionaryRef v14 = v13;
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 != CFArrayGetTypeID()) {
      goto LABEL_12;
    }
    if (AMAuthInstallUpdaterSetTags(a1, a2, @"ResponseTags", v14))
    {
LABEL_13:
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_14;
    }
    if (AMAuthInstallBundleCopyBuildIdentityForVariant(a1, Mutable, a4, &cf))
    {
LABEL_12:
      AMSupportCreateErrorInternal();
      goto LABEL_13;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      if (CFArrayGetCount((CFArrayRef)v11) >= 1)
      {
        CFIndex v17 = 0;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, v17);
          CFDictionaryRef ValueForKeyWithFormat = AMAuthInstallSupportGetValueForKeyWithFormat(0, (const __CFDictionary *)cf, @"Manifest.%@", v19, v20, v21, v22, v23, (char)ValueAtIndex);
          if (ValueForKeyWithFormat
            || (CFDictionaryRef ValueForKeyWithFormat = AMAuthInstallSupportGetValueForKeyWithFormat(0, (const __CFDictionary *)cf, @"%@", v25, v26, v27, v28, v29, (char)ValueAtIndex)) != 0)
          {
            CFDictionarySetValue(Mutable, ValueAtIndex, ValueForKeyWithFormat);
          }
          ++v17;
        }
        while (v17 < CFArrayGetCount((CFArrayRef)v11));
      }
      goto LABEL_14;
    }
  }
  AMSupportCreateErrorInternal();
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return Mutable;
}

uint64_t AMAuthInstallUpdaterSetInfo(uint64_t a1, const __CFString *a2, const void *a3, const __CFURL *a4, void *a5, uint64_t a6, const void *a7, const __CFURL *a8, CFTypeRef *a9, uint64_t a10)
{
  if (a4) {
    return _AMAuthInstallUpdaterSetInfoWithCallbacks(0, a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, 0, (__CFDictionary *)_AMAuthInstallUpdaterCopyBuildIdentityTags_wrapper, 0, 0, a10);
  }
  AMSupportCreateErrorInternal();
  return 99;
}

uint64_t _AMAuthInstallUpdaterSetInfoWithCallbacks(uint64_t a1, uint64_t a2, const __CFString *a3, const void *a4, const __CFURL *a5, void *a6, uint64_t a7, const void *a8, const __CFURL *a9, CFTypeRef *a10, CFTypeRef *a11, CFTypeRef *a12, __CFDictionary *a13, uint64_t (*a14)(uint64_t, uint64_t, const __CFString *, __CFDictionary *, uint64_t, uint64_t), uint64_t (*a15)(uint64_t, CFTypeRef *), uint64_t a16)
{
  uint64_t v16 = a16;
  v94[0] = 0;
  if (!a2 || !a3)
  {
    AMSupportCreateErrorInternal();
    uint64_t v18 = 0;
LABEL_135:
    uint64_t v37 = 0;
    CFDataRef v36 = 0;
    uint64_t v35 = 0;
    uint64_t v24 = 0;
    uint64_t v32 = 0;
    uint64_t v19 = 0;
LABEL_137:
    uint64_t v38 = 99;
    goto LABEL_109;
  }
  uint64_t v18 = a4;
  if (!a4)
  {
    AMSupportCreateErrorInternal();
    goto LABEL_135;
  }
  uint64_t v19 = a13;
  if (!a13)
  {
    AMSupportCreateErrorInternal();
    uint64_t v18 = 0;
    uint64_t v37 = 0;
    CFDataRef v36 = 0;
    uint64_t v35 = 0;
    uint64_t v24 = 0;
    uint64_t v32 = 0;
    goto LABEL_137;
  }
  if (*(void *)(a2 + 472)) {
    BOOL v93 = *(void *)(a2 + 480) != 0;
  }
  else {
    BOOL v93 = 0;
  }
  CFDictionaryRef v23 = (const __CFDictionary *)AMSupportSafeRetain();
  uint64_t v24 = (const void *)AMSupportSafeRetain();
  uint64_t v25 = (void *)_updater_named(a3);
  if (v25)
  {
    uint64_t v27 = (uint64_t (*)(__CFDictionary *, void (*)(const void *), const __CFString *, CFTypeRef *))v25[1];
    uint64_t v26 = (uint64_t (*)(__CFDictionary *, void (*)(const void *), const __CFString *, CFTypeRef *))v25[2];
    uint64_t v29 = (uint64_t (*)(__CFDictionary *, void (*)(const void *), const __CFString *, CFTypeRef *))v25[3];
    uint64_t v28 = (uint64_t (*)(__CFDictionary *, void (*)(const void *), const __CFString *, CFTypeRef *))v25[4];
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    uint64_t v29 = 0;
    uint64_t v28 = 0;
  }
  if (!v93 && (!v27 || !v26 || !v29))
  {
    AMSupportCreateErrorInternal();
    AMSupportLogInternal();
    uint64_t v19 = 0;
    uint64_t v32 = 0;
    uint64_t v35 = 0;
    CFDataRef v36 = 0;
    uint64_t v37 = 0;
    uint64_t v18 = 0;
    uint64_t v38 = 26;
    goto LABEL_107;
  }
  CFStringRef v84 = v29;
  uint64_t v85 = v26;
  uint64_t v83 = v28;
  CFDictionaryRef value = a6;
  uint64_t v92 = v16;
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v32 = Mutable;
  if (!Mutable)
  {
    AMSupportCreateErrorInternal();
    uint64_t v19 = 0;
    uint64_t v35 = 0;
    CFDataRef v36 = 0;
    uint64_t v37 = 0;
    uint64_t v18 = 0;
    uint64_t v38 = 99;
    goto LABEL_107;
  }
  CFDictionaryRef theDict = Mutable;
  uint64_t v86 = v24;
  if (a5)
  {
    uint64_t v33 = AMAuthInstallUpdater(a2, a3, a5);
    if (!v33)
    {
      AMSupportCreateErrorInternal();
      uint64_t v19 = 0;
      uint64_t v32 = 0;
      uint64_t v35 = 0;
      CFDataRef v36 = 0;
      uint64_t v37 = 0;
      goto LABEL_75;
    }
    uint64_t v34 = (uint64_t)v33;
    if (a8)
    {
      CFDictionarySetValue(v32, @"Options", a8);
      if (!*(void *)(v34 + 56)) {
        *(void *)(v34 + 56) = CFRetain(a8);
      }
    }
  }
  else
  {
    if (a8) {
      CFDictionarySetValue(Mutable, @"Options", a8);
    }
    uint64_t v34 = 0;
  }
  if (a15)
  {
    uint64_t v39 = (const void *)a15(a1, v94);
  }
  else
  {
    CFDictionaryRef v40 = *(const __CFDictionary **)(*(void *)(a2 + 128) + 8);
    if (!v40) {
      goto LABEL_32;
    }
    CFDictionaryGetValue(v40, @"Manifest");
    uint64_t v39 = (const void *)AMSupportSafeRetain();
  }
  uint64_t v37 = v39;
  if (v39)
  {
    CFDictionarySetValue(v32, @"ReceiptManifest", v39);
    goto LABEL_33;
  }
LABEL_32:
  AMSupportLogInternal();
  uint64_t v37 = 0;
LABEL_33:
  if (value) {
    CFDictionarySetValue(v32, @"DestBundlePath", value);
  }
  CFDictionarySetValue(v32, @"DeviceInfo", v18);
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a2 + 464)) >= 1) {
    CFDictionaryAddValue(v32, @"SharedInfo", *(const void **)(a2 + 464));
  }
  if (v34)
  {
    _AMAuthInstallUpdaterInitLocalSigning(v34, a3);
    if (*(void *)(v34 + 72))
    {
      if (!*(void *)(v34 + 80)) {
        AMAuthInstallLog(5, (uint64_t)"AMAuthInstallUpdaterBehaviorOverrides", (uint64_t)"Updater %@ forced for local signing by host tools.", v41, v42, v43, v44, v45, (char)a3);
      }
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v18))
      {
        uint64_t v47 = CFDictionaryGetValue((CFDictionaryRef)v18, *(const void **)(v34 + 80));
        if (v47)
        {
          char v48 = v47;
          uint64_t v49 = v37;
          CFTypeID v50 = CFBooleanGetTypeID();
          BOOL v51 = v50 == CFGetTypeID(v48);
          uint64_t v37 = v49;
          if (v51)
          {
            *(unsigned char *)(v34 + 64) = CFBooleanGetValue((CFBooleanRef)v48);
            AMAuthInstallLog(5, (uint64_t)"AMAuthInstallUpdaterBehaviorOverrides", (uint64_t)"Updater %@ requested %s signing.", v52, v53, v54, v55, v56, (char)a3);
          }
        }
      }
    }
  }
  if (!v23)
  {
    CFDictionaryRef v23 = (const __CFDictionary *)v27(theDict, _logSinkCallback, a3, v94);
    if (!v23)
    {
      AMSupportCreateErrorInternal();
      AMSupportLogInternal();
      uint64_t v19 = 0;
      uint64_t v32 = 0;
      uint64_t v35 = 0;
      CFDataRef v36 = 0;
LABEL_75:
      uint64_t v18 = 0;
      uint64_t v38 = 99;
      uint64_t v24 = v86;
      goto LABEL_106;
    }
  }
  uint64_t v57 = CFDictionaryGetValue(v23, @"ResponseTags");
  uint64_t v24 = v86;
  if (!v57 || !AMAuthInstallUpdaterSetTags(a2, a3, @"ResponseTags", v57))
  {
    uint64_t v58 = CFDictionaryGetValue(v23, @"LoopInstance");
    if (!v58 || !AMAuthInstallUpdaterSetTags(a2, a3, @"LoopInstance", v58))
    {
      uint64_t v59 = a11;
      if (a11) {
        *uint64_t v59 = CFRetain(v23);
      }
      uint64_t v18 = (const void *)((uint64_t (*)(uint64_t, uint64_t, const __CFString *, const __CFDictionary *, uint64_t, const __CFURL *, CFTypeRef *))v19)(a1, a2, a3, v23, a7, a5, v94);
      if (!v18)
      {
        AMSupportCreateErrorInternal();
        uint64_t v19 = 0;
        uint64_t v32 = 0;
        uint64_t v35 = 0;
        CFDataRef v36 = 0;
        goto LABEL_53;
      }
      uint64_t v60 = a14;
      CFDictionarySetValue(theDict, @"BuildIdentity", v18);
      if (v60)
      {
        uint64_t v81 = v37;
        CFArrayRef v61 = (const __CFArray *)CFDictionaryGetValue(v23, @"BuildIdentityTags");
        if (v61)
        {
          CFArrayRef v62 = v61;
          CFTypeID v63 = CFGetTypeID(v61);
          if (v63 == CFArrayGetTypeID())
          {
            uint64_t v80 = v60;
            CFArrayRef v82 = CFDictionaryCreateMutable(v30, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v82)
            {
              if (CFArrayGetCount(v62) >= 1)
              {
                CFIndex v64 = 0;
                do
                {
                  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v62, v64);
                  uint64_t v66 = CFDictionaryGetValue((CFDictionaryRef)v18, ValueAtIndex);
                  if (v66)
                  {
                    CFTypeID v67 = CFGetTypeID(v66);
                    if (v67 == CFDictionaryGetTypeID())
                    {
                      CFDictionaryRef ValueForKeyPathInDict = (const void *)AMSupportGetValueForKeyPathInDict();
                      if (ValueForKeyPathInDict)
                      {
                        uint64_t v69 = ValueForKeyPathInDict;
                        CFTypeID v70 = CFGetTypeID(ValueForKeyPathInDict);
                        if (v70 == CFStringGetTypeID()) {
                          CFDictionaryAddValue(v82, ValueAtIndex, v69);
                        }
                      }
                    }
                  }
                  else
                  {
                    AMSupportLogInternal();
                  }
                  ++v64;
                }
                while (v64 < CFArrayGetCount(v62));
              }
              uint64_t v32 = (__CFDictionary *)v80(a1, a2, a3, v82, a7, v92);
              if (!v32)
              {
                AMSupportLogInternal();
                uint64_t v35 = 0;
                CFDataRef v36 = 0;
                uint64_t v38 = 99;
                uint64_t v24 = v86;
                uint64_t v37 = v81;
LABEL_105:
                uint64_t v19 = v82;
                goto LABEL_106;
              }
              CFDictionarySetValue(theDict, @"BundleDataDict", v32);
              CFIndex Count = CFDictionaryGetCount(v32);
              CFURLRef v72 = a9;
              uint64_t v24 = v86;
              uint64_t v37 = v81;
              if (Count != 1 || a9)
              {
LABEL_79:
                if (v72)
                {
                  uint64_t v73 = @"FirmwareData";
                }
                else
                {
                  CFURLRef v72 = a5;
                  if (!a5) {
                    goto LABEL_84;
                  }
                  uint64_t v73 = @"BundlePath";
                }
                CFDictionarySetValue(theDict, v73, v72);
LABEL_84:
                if (v93)
                {
                  CFDataRef v36 = 0;
                }
                else
                {
                  uint64_t v74 = v37;
                  CFDataRef v36 = (const void *)v85(theDict, _logSinkCallback, a3, v94);
                  if (!v36) {
                    goto LABEL_103;
                  }
                  uint64_t v75 = a10;
                  CFDictionarySetValue(theDict, @"FirmwareData", v36);
                  if (v75)
                  {
                    AMSupportSafeRelease();
                    *uint64_t v75 = CFRetain(v36);
                  }
                  uint64_t v37 = v74;
                }
                uint64_t v74 = v37;
                if (v24 || (uint64_t v24 = (const void *)v84(theDict, _logSinkCallback, a3, v94)) != 0)
                {
                  CFArrayRef v76 = a12;
                  if (a12)
                  {
                    AMSupportSafeRelease();
                    *CFArrayRef v76 = CFRetain(v24);
                  }
                  if (AMAuthInstallUpdaterSetTags(a2, a3, @"RequestTags", v24)) {
                    goto LABEL_95;
                  }
                  uint64_t v37 = v74;
                  if (value && !AMAuthInstallUpdaterSaveToReceipt(a2, a3, (const __CFURL *)value))
                  {
                    uint64_t v35 = 0;
                  }
                  else
                  {
                    char v77 = v93;
                    if (!v83) {
                      char v77 = 1;
                    }
                    if (v77)
                    {
                      uint64_t v35 = 0;
LABEL_129:
                      uint64_t v38 = 0;
                      goto LABEL_105;
                    }
                    CFTypeID v79 = CFDictionaryGetTypeID();
                    if (v79 != CFGetTypeID(*(CFTypeRef *)(a2 + 464)))
                    {
LABEL_95:
                      AMSupportCreateErrorInternal();
LABEL_104:
                      uint64_t v35 = 0;
                      uint64_t v38 = 99;
                      uint64_t v37 = v74;
                      goto LABEL_105;
                    }
                    uint64_t v35 = (const void *)v83(theDict, _logSinkCallback, a3, v94);
                    if (v35)
                    {
                      uint64_t v37 = v74;
                      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 464), a3, v35);
                      goto LABEL_129;
                    }
                    AMSupportCreateErrorInternal();
                    uint64_t v37 = v74;
                    AMSupportLogInternal();
                  }
                  uint64_t v38 = 99;
                  goto LABEL_105;
                }
LABEL_103:
                AMSupportCreateErrorInternal();
                AMSupportLogInternal();
                goto LABEL_104;
              }
              CFDictionaryGetKeysAndValues(v32, 0, (const void **)&a9);
              AMSupportLogInternal();
LABEL_78:
              CFURLRef v72 = a9;
              goto LABEL_79;
            }
            uint64_t v24 = v86;
          }
        }
        AMSupportLogInternal();
        uint64_t v32 = 0;
        CFArrayRef v82 = 0;
        uint64_t v37 = v81;
        goto LABEL_78;
      }
      uint64_t v32 = 0;
      CFArrayRef v82 = 0;
      goto LABEL_78;
    }
  }
  AMSupportCreateErrorInternal();
  uint64_t v19 = 0;
  uint64_t v32 = 0;
  uint64_t v35 = 0;
  CFDataRef v36 = 0;
  uint64_t v18 = 0;
LABEL_53:
  uint64_t v38 = 99;
LABEL_106:
  CFRelease(theDict);
LABEL_107:
  if (v23) {
    CFRelease(v23);
  }
LABEL_109:
  if (v94[0])
  {
    CFRelease(v94[0]);
    v94[0] = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v38;
}

CFMutableDictionaryRef _AMAuthInstallUpdaterCopyBuildIdentityTags_wrapper(int a1, uint64_t a2, const __CFString *a3, CFDictionaryRef theDict, const __CFString *a5, __CFDictionary *a6)
{
  return AMAuthInstallUpdaterCopyBuildIdentityTags(a2, a3, theDict, a5, a6);
}

uint64_t AMAuthInstallUpdaterSetInfoWithCallbacks(uint64_t a1, uint64_t a2, const __CFString *a3, const void *a4, uint64_t a5, const void *a6, const __CFURL *a7, CFTypeRef *a8, CFTypeRef *a9, CFTypeRef *a10, __CFDictionary *a11, uint64_t (*a12)(uint64_t, uint64_t, const __CFString *, __CFDictionary *, uint64_t, uint64_t), uint64_t (*a13)(uint64_t, CFTypeRef *), uint64_t a14)
{
  return _AMAuthInstallUpdaterSetInfoWithCallbacks(a1, a2, a3, a4, 0, 0, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t AMAuthInstallUpdaterRestoreInfoSet(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(const void **)(a1 + 472);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 472) = 0;
    }
    CFStringRef v3 = *(const void **)(a1 + 480);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 480) = 0;
    }
    *(void *)(a1 + 472) = AMSupportSafeRetain();
    uint64_t v4 = AMSupportSafeRetain();
    uint64_t result = 0;
    *(void *)(a1 + 480) = v4;
  }
  else
  {
    AMSupportLogInternal();
    return 1;
  }
  return result;
}

uint64_t _AMAuthInstallUpdaterClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  _AMAuthInstallUpdaterCFTypeID TypeID = result;
  return result;
}

double _AMAuthInstallUpdaterFinalize(uint64_t a1)
{
  if (!a1) {
    _AMAuthInstallUpdaterFinalize_cold_1();
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v4 = (void *)(a1 + 16);
  CFStringRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    void *v4 = 0;
  }
  CFArrayRef v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 40) = 0;
  }
  CFDictionaryRef v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 48) = 0;
  }
  CFBooleanRef v7 = *(const void **)(a1 + 56);
  if (v7) {
    CFRelease(v7);
  }
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

__CFString *_AMAuthInstallUpdaterCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = Mutable;
  if (*(unsigned char *)(a1 + 64)) {
    CFArrayRef v5 = @"true";
  }
  else {
    CFArrayRef v5 = @"false";
  }
  CFStringAppendFormat(Mutable, 0, @"<AMAuthInstallUpdater %p>: localSigning=%@ \n", a1, v5);
  CFStringAppendFormat(v4, 0, @"\tresponseTags = %@\n", *(void *)(a1 + 40));
  if (*(void *)(a1 + 32)) {
    CFStringAppendFormat(v4, 0, @"\tbuildIdentityTags = %@\n", *(void *)(a1 + 32));
  }
  if (*(void *)(a1 + 16)) {
    CFStringAppendFormat(v4, 0, @"\trequestTags = %@\n", *(void *)(a1 + 16));
  }
  if (*(void *)(a1 + 40)) {
    CFStringAppendFormat(v4, 0, @"\tresponseTags = %@\n", *(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 56)) {
    CFStringAppendFormat(v4, 0, @"\tupdaterOptions = %@\n", *(void *)(a1 + 56));
  }
  return v4;
}

uint64_t _CanaryLocalSign(const void *a1, uint64_t a2, const __CFDictionary *a3, __CFDictionary **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v26 = "amai is NULL";
LABEL_25:
    AMAuthInstallLog(3, (uint64_t)"_CanaryLocalSign", (uint64_t)v26, (uint64_t)a4, a5, a6, a7, a8, v27);
    return 99;
  }
  if (!a2)
  {
    uint64_t v26 = "updater is NULL";
    goto LABEL_25;
  }
  if (!a3)
  {
    uint64_t v26 = "request is NULL";
    goto LABEL_25;
  }
  if (!a4)
  {
    uint64_t v26 = "response is NULL";
    goto LABEL_25;
  }
  AMAuthInstallLog(7, (uint64_t)"_CanaryLocalSign", (uint64_t)"Test updater requested fake/empty ticket(s)", (uint64_t)a4, a5, a6, a7, a8, v27);
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *a4 = Mutable;
  if (!Mutable)
  {
    uint64_t v26 = "Failed to create dictionary for response";
    goto LABEL_25;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a3, @"QueryLoop0");
  if (!Value)
  {
    uint64_t v26 = "QueryLoop0 not in request";
    goto LABEL_25;
  }
  CFTypeID v15 = Value;
  CFAllocatorRef v16 = CFGetAllocator(a1);
  CFIndex v17 = CFDataCreateMutable(v16, 0);
  if (!v17)
  {
    uint64_t v26 = "fakeTicket is NULL";
    goto LABEL_25;
  }
  uint64_t v18 = v17;
  UInt8 bytes = 0;
  if (v15 == (const void *)*MEMORY[0x263EFFB40])
  {
    UInt8 v19 = 1;
    goto LABEL_12;
  }
  if (v15 == (const void *)*MEMORY[0x263EFFB38])
  {
    UInt8 v19 = 2;
LABEL_12:
    UInt8 bytes = v19;
  }
  CFDataAppendBytes(v17, &bytes, 1);
  CFDataAppendBytes(v18, &bytes, 1);
  CFDataAppendBytes(v18, &bytes, 1);
  CFDataAppendBytes(v18, &bytes, 1);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 40));
  if (Count >= 1)
  {
    CFIndex v21 = Count;
    for (CFIndex i = 0; i != v21; ++i)
    {
      CFDictionaryRef v23 = *a4;
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 40), i);
      CFDictionarySetValue(v23, ValueAtIndex, v18);
    }
  }
  return 0;
}

__CFDictionary *_CanaryGetTags(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable && (uint64_t v4 = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70])) != 0)
  {
    CFArrayRef v5 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v5 && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"DeviceInfo")) != 0)
    {
      CFDictionaryRef v7 = Value;
      CFArrayAppendValue(Mutable, @"TestFirmware");
      CFArrayAppendValue(v4, @"Test,Ticket,1");
      CFArrayAppendValue(v4, @"Test,Ticket,2");
      if (CFDictionaryGetValue(v7, @"QueryLoop0") == (const void *)*MEMORY[0x263EFFB40]) {
        uint64_t v8 = @"InstanceA";
      }
      else {
        uint64_t v8 = @"InstanceB";
      }
      CFDictionarySetValue(v5, @"LoopInstance", v8);
      CFDictionarySetValue(v5, @"BuildIdentityTags", Mutable);
      CFDictionarySetValue(v5, @"ResponseTags", v4);
    }
    else
    {
      AMSupportCreateErrorInternal();
    }
  }
  else
  {
    AMSupportCreateErrorInternal();
    CFArrayRef v5 = 0;
  }
  AMSupportSafeRelease();
  AMSupportSafeRelease();
  return v5;
}

__CFDictionary *_CanaryCopyFirmware()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorContext v1 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, @"FirmwareEntry1", @"PlaceholderData");
    CFDictionaryAddValue(v1, @"FirmwareEntry2", @"PlaceholderData");
  }
  else
  {
    AMSupportCreateErrorInternal();
  }
  return v1;
}

__CFDictionary *_CanaryCreateRequest(const __CFDictionary *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable && (CFDictionaryRef v3 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"DeviceInfo")) != 0)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v3, @"QueryLoop0");
    if (Value) {
      CFDictionarySetValue(Mutable, @"QueryLoop0", Value);
    }
  }
  else
  {
    AMSupportCreateErrorInternal();
  }
  return Mutable;
}

void _logSinkCallback(const void *a1)
{
  char v1 = (char)a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFStringGetTypeID()) {
    char v8 = v1;
  }
  else {
    char v8 = 0;
  }
  AMAuthInstallLog(7, (uint64_t)"_logSinkCallback", (uint64_t)"updater_log %@ (RestoreInfo): %s", v3, v4, v5, v6, v7, v8);
}

BOOL AMAuthInstallVinylCheckVinylFwLdrVerLegacy(const __CFData *a1)
{
  if (!a1) {
    return 1;
  }
  v3.CFIndex location = 0;
  v3.CFIndex length = 2;
  CFDataGetBytes(a1, v3, buffer);
  return (buffer[1] | ((buffer[0] & 0x7F) << 8)) < 0x301u;
}

uint64_t AMAuthInstallVinylIsLegacyChipId(CFTypeRef cf, BOOL *a2)
{
  if (cf && (uint64_t v3 = *((void *)cf + 6)) != 0 && *(void *)(v3 + 160))
  {
    CFAllocatorRef v5 = CFGetAllocator(cf);
    CFNumberRef v6 = CFNumberCreate(v5, kCFNumberSInt8Type, &kAMAuthInstallVinylLegacyChipIdCutoff);
    if (v6)
    {
      CFComparisonResult v7 = CFNumberCompare(*(CFNumberRef *)(*((void *)cf + 6) + 160), v6, 0);
      uint64_t v8 = 0;
      *a2 = v7 == kCFCompareLessThan;
    }
    else
    {
      uint64_t v8 = 2;
    }
  }
  else
  {
    CFNumberRef v6 = 0;
    uint64_t v8 = 1;
  }
  SafeRelease(v6);
  return v8;
}

uint64_t AMAuthInstallVinylCreateMeasurements(CFTypeRef cf, const void *a2, CFDictionaryRef *a3, const void **a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  BOOL v39 = 0;
  if (!cf)
  {
    CFDictionaryRef v5 = 0;
    uint64_t v6 = 1;
    goto LABEL_28;
  }
  CFDictionaryRef v5 = 0;
  uint64_t v6 = 1;
  if (a3 && a2 && *((void *)cf + 6))
  {
    uint64_t IsLegacyChipId = AMAuthInstallVinylIsLegacyChipId(cf, &v39);
    if (IsLegacyChipId)
    {
      uint64_t v6 = IsLegacyChipId;
      CFDictionaryRef v5 = 0;
      goto LABEL_28;
    }
    CFDictionaryRef v11 = *a3;
    CFAllocatorRef v12 = CFGetAllocator(cf);
    if (v11) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, *a3);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    }
    CFDictionaryRef v5 = MutableCopy;
    if (!MutableCopy)
    {
      uint64_t v6 = 2;
      goto LABEL_28;
    }
    if (v39)
    {
      uint64_t Measurements = AMAuthInstallBasebandVinylCreateMeasurements((uint64_t)cf, a2, MutableCopy);
      if (!Measurements) {
        goto LABEL_24;
      }
      uint64_t v6 = Measurements;
      goto LABEL_28;
    }
    uint64_t v38 = a4;
    uint64_t v15 = 0;
    CFDataRef theData = 0;
    v41[6] = xmmword_2642BB388;
    v41[7] = *(_OWORD *)&off_2642BB398;
    memset(&v41[8], 0, 32);
    v41[2] = xmmword_2642BB348;
    memset(&v41[3], 0, 32);
    v41[5] = *(_OWORD *)&off_2642BB378;
    char v16 = 1;
    v41[0] = xmmword_2642BB328;
    v41[1] = *(_OWORD *)&off_2642BB338;
    while (1)
    {
      char v17 = v16;
      uint64_t v18 = (const void **)&v41[5 * v15];
      if (_AMAuthInstallVinylCreateIm4p(cf, a2, (uint64_t)(v18 + 2), &theData)) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = theData == 0;
      }
      if (!v19)
      {
        BytePtr = CFDataGetBytePtr(theData);
        CFIndex Length = CFDataGetLength(theData);
        AMAuthInstallLogDumpMemory(7, (uint64_t)"_AMAuthInstallVinylCreateMeasurementsInternal", (char)"eUICC IM4P", (uint64_t)BytePtr, Length, v22, v23, v24);
        CFDataGetBytePtr(theData);
        CFDataGetLength(theData);
        if (AMSupportDigestSha256())
        {
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylCreateMeasurementsInternal", (uint64_t)"failed to compute digest", v25, v26, v27, v28, v29, (char)v38);
LABEL_23:
          SafeRelease(theData);
          a4 = v38;
LABEL_24:
          CFDictionaryRef Value = v5;
          if (a4 && (CFDictionaryRef Value = CFDictionaryGetValue(v5, *a4)) == 0)
          {
            uint64_t v6 = 0;
          }
          else
          {
            uint64_t v6 = 0;
            *a3 = (CFDictionaryRef)CFRetain(Value);
          }
          break;
        }
        SafeRelease(theData);
        CFDataRef theData = 0;
        CFAllocatorRef v30 = CFGetAllocator(cf);
        CFDataRef v31 = CFDataCreate(v30, bytes, 32);
        if (!v31) {
          goto LABEL_23;
        }
        CFDataRef v32 = v31;
        CFAllocatorRef v33 = CFGetAllocator(cf);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v33, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!Mutable) {
          goto LABEL_23;
        }
        uint64_t v35 = Mutable;
        CFDictionarySetValue(Mutable, *((const void **)&v41[5 * v15] + 1), v32);
        CFDictionarySetValue(v5, *v18, v35);
        SafeRelease(v32);
        SafeRelease(v35);
      }
      char v16 = 0;
      uint64_t v15 = 1;
      if ((v17 & 1) == 0) {
        goto LABEL_23;
      }
    }
  }
LABEL_28:
  SafeRelease(0);
  SafeRelease(v5);
  return v6;
}

uint64_t AMAuthInstallVinylServerRequestAddRequiredTags(uint64_t a1, CFDictionaryRef theDict, const __CFDictionary *a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (!v4 || !v4[15] || !v4[20] || !v4[16] || !v4[17] || !v4[18]) {
    return 1;
  }
  uint64_t result = 1;
  if (theDict && v4[19])
  {
    CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(theDict, @"eUICC,Gold");
    CFIndex v9 = (__CFDictionary *)CFDictionaryGetValue(theDict, @"eUICC,Main");
    if ((unint64_t)Value | (unint64_t)v9)
    {
      uint64_t v15 = v9;
      CFDictionarySetValue(theDict, @"eUICC,EID", *(const void **)(*(void *)(a1 + 48) + 120));
      CFDictionarySetValue(theDict, @"eUICC,ChipID", *(const void **)(*(void *)(a1 + 48) + 160));
      if (Value) {
        CFDictionarySetValue(Value, @"Nonce", *(const void **)(*(void *)(a1 + 48) + 136));
      }
      if (v15) {
        CFDictionarySetValue(v15, @"Nonce", *(const void **)(*(void *)(a1 + 48) + 128));
      }
      CFDictionarySetValue(theDict, @"@eUICC,Ticket", (const void *)*MEMORY[0x263EFFB40]);
      CFDictionarySetValue(theDict, @"eUICC,RootKeyIdentifier", *(const void **)(*(void *)(a1 + 48) + 152));
      if (a3)
      {
        char v16 = CFDictionaryGetValue(a3, @"UniqueBuildID");
        if (v16) {
          CFDictionarySetValue(theDict, @"UniqueBuildID", v16);
        }
      }
      uint64_t v17 = *(void *)(a1 + 16);
      if (v17) {
        _CFDictionarySetBoolean(theDict, @"eUICC,ApProductionMode", *(unsigned __int8 *)(v17 + 20));
      }
      return 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallVinylServerRequestAddRequiredTags", (uint64_t)"Neither main nor gold vinyl fw found!", v10, v11, v12, v13, v14, v18);
      return 8;
    }
  }
  return result;
}

uint64_t AMAuthInstallVinylPersonalizeFirmware(void *cf, const void *a2, const void *a3, CFDictionaryRef *a4, const __CFDictionary *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  CFDictionaryRef v114 = 0;
  BOOL v113 = 0;
  if (!cf || (uint64_t v9 = cf[6]) == 0)
  {
    uint64_t v20 = 1;
    goto LABEL_73;
  }
  if (!*(void *)(v9 + 160))
  {
    AMAuthInstallLog(3, (uint64_t)"AMAuthInstallVinylPersonalizeFirmware", (uint64_t)"No eUICC ChipID specified. Not personalizing VinylFirmware at this time.", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v105);
    uint64_t v20 = 0;
    goto LABEL_73;
  }
  uint64_t IsLegacyChipId = AMAuthInstallVinylCreateMeasurements(cf, a2, &v114, 0);
  if (IsLegacyChipId || (uint64_t IsLegacyChipId = AMAuthInstallVinylIsLegacyChipId(cf, &v113), IsLegacyChipId))
  {
    uint64_t v20 = IsLegacyChipId;
    goto LABEL_73;
  }
  CFDictionaryRef v19 = v114;
  if (v113)
  {
    uint64_t v20 = 1;
    if (!a4 || !v114) {
      goto LABEL_21;
    }
    if (!*a4)
    {
      uint64_t v20 = 14;
      goto LABEL_21;
    }
    if (!a3)
    {
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylPersonalizeLegacyFirmwareInternal", (uint64_t)"No dstURL provided. Running in restore environment?", v14, v15, v16, v17, v18, v105);
      uint64_t v20 = 0;
      goto LABEL_21;
    }
    CFIndex v21 = BbfwWriterCreate(a3);
    if (v21)
    {
      uint64_t v27 = (uint64_t)v21;
      uint64_t v28 = BbfwReaderOpen(a2);
      if (v28)
      {
        uint64_t v29 = (uint64_t)v28;
        CFDictionaryRef Value = CFDictionaryGetValue(*a4, @"EuiccMainTicket");
        if (Value)
        {
          CFDataRef v31 = Value;
          CFTypeID TypeID = CFDataGetTypeID();
          if (TypeID != CFGetTypeID(v31)) {
            goto LABEL_86;
          }
          if (BbfwWriterAddFile(v27, @"vinyl/update/main/ticket.der", (const __CFData *)v31)) {
            goto LABEL_87;
          }
        }
        CFDataRef v33 = (const __CFData *)CFDictionaryGetValue(*a4, @"EuiccGoldTicket");
        if (!v33)
        {
LABEL_19:
          uint64_t v20 = 0;
LABEL_20:
          BbfwWriterFinalize(v27);
          BbfwReaderClose(v29);
LABEL_21:
          SafeRelease(0);
          SafeRelease(0);
          CFDictionaryRef v36 = 0;
          goto LABEL_72;
        }
        CFDataRef v34 = v33;
        CFTypeID v35 = CFDataGetTypeID();
        if (v35 == CFGetTypeID(v34))
        {
          if (!BbfwWriterAddFile(v27, @"vinyl/update/gold/ticket.der", v34)) {
            goto LABEL_19;
          }
LABEL_87:
          uint64_t v20 = 4;
          goto LABEL_20;
        }
LABEL_86:
        uint64_t v20 = 17;
        goto LABEL_20;
      }
      BbfwWriterFinalize(v27);
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylPersonalizeLegacyFirmwareInternal", (uint64_t)"failed to create output file", v22, v23, v24, v25, v26, v105);
    }
    uint64_t v20 = 4;
    goto LABEL_21;
  }
  CFDataRef StitchTicket = 0;
  theDict[0] = 0;
  v116[0] = @"euig";
  v116[1] = @"update/gold/profile.bin";
  v116[2] = @"update/gold/info.plist";
  long long v117 = 0u;
  long long v118 = 0u;
  uint64_t v119 = 0;
  uint64_t v120 = @"vinyl/update/gold/ticket.der";
  CFTypeRef v122 = 0;
  v123[0] = 0;
  uint64_t v121 = @"EuiccGoldTicket";
  v123[1] = @"euim";
  v123[2] = @"update/main/profile.bin";
  v123[3] = @"update/main/info.plist";
  long long v124 = 0u;
  long long v125 = 0u;
  uint64_t v126 = 0;
  char v127 = @"vinyl/update/main/ticket.der";
  CFTypeRef v129 = 0;
  CFTypeRef v130 = 0;
  uint64_t v20 = 1;
  char v128 = @"EuiccMainTicket";
  if (!a4 || !a2)
  {
    CFDictionaryRef v38 = 0;
    goto LABEL_82;
  }
  CFDictionaryRef v38 = 0;
  if (!v114)
  {
LABEL_82:
    CFDictionaryRef v111 = v38;
    SafeRelease(StitchTicket);
    goto LABEL_71;
  }
  if (*a4 && CFDictionaryGetValue(*a4, @"eUICC,Ticket"))
  {
    BOOL v39 = a3;
    CFDictionaryRef v40 = *a4;
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylPersonalizeFirmwareInternal", (uint64_t)"Vinyl server signing is enabled...", v14, v15, v16, v17, v18, v105);
    uint64_t v41 = AMAuthInstallVinylServerRequestAddRequiredTags((uint64_t)cf, v19, a5);
    if (v41)
    {
      uint64_t v20 = v41;
      if (v41 == 8)
      {
        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylPersonalizeFirmwareInternal", (uint64_t)"Nothing to sign, skipping..", v42, v43, v44, v45, v46, v106);
        uint64_t v20 = 0;
      }
      goto LABEL_85;
    }
    uint64_t v47 = AMAuthInstallRequestSendSync((uint64_t)cf, v19, (CFTypeRef *)theDict);
    if (v47)
    {
      uint64_t v20 = v47;
      goto LABEL_85;
    }
    CFDictionaryRef v40 = theDict[0];
    if (!theDict[0])
    {
      uint64_t v20 = 14;
      goto LABEL_85;
    }
    BOOL v39 = a3;
  }
  CFDataRef v48 = (const __CFData *)CFDictionaryGetValue(v40, @"eUICC,Ticket");
  CFDataRef v49 = v48;
  if (!v48)
  {
    uint64_t v20 = 17;
LABEL_85:
    SafeRelease(0);
    CFDictionaryRef v111 = 0;
    goto LABEL_71;
  }
  CFTypeID v50 = CFGetTypeID(v48);
  if (v50 != CFDataGetTypeID())
  {
    CFDataRef StitchTicket = 0;
    CFDictionaryRef v38 = 0;
    uint64_t v20 = 17;
    goto LABEL_82;
  }
  uint64_t v107 = (CFTypeRef *)a4;
  BytePtr = CFDataGetBytePtr(v49);
  CFDataRef v109 = v49;
  CFIndex Length = CFDataGetLength(v49);
  AMAuthInstallLogDumpMemory(8, (uint64_t)"_AMAuthInstallVinylPersonalizeFirmwareInternal", (char)"EUICC,Ticket:", (uint64_t)BytePtr, Length, v53, v54, v55);
  uint64_t v56 = 0;
  int v112 = 0;
  CFDictionaryRef v111 = 0;
  uint64_t v108 = 0;
  CFDataRef StitchTicket = 0;
  char v57 = 1;
  uint64_t v58 = a2;
  uint64_t v59 = v39;
  do
  {
    char v60 = v57;
    uint64_t v61 = cf[6];
    CFArrayRef v62 = &v116[12 * v56];
    v62[4] = *(void *)(v61 + 152);
    v62[5] = *(void *)(v61 + 168);
    uint64_t v63 = BbfwReaderStart(v58, (uint64_t (*)(uint64_t, CFStringRef, void *))__AMAuthInstallVinylFwReaderInfoPlistCallback, (uint64_t)v62);
    if (v63
      || (uint64_t v63 = BbfwReaderStart(v58, (uint64_t (*)(uint64_t, CFStringRef, void *))__AMAuthInstallVinylFwReaderCallback, (uint64_t)v62), v63))
    {
      uint64_t v20 = v63;
      AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylPersonalizeFirmwareInternal", (uint64_t)"failed to read zip file", v64, v65, v66, v67, v68, (char)v107);
LABEL_77:
      uint64_t v96 = (uint64_t)v108;
      goto LABEL_69;
    }
    v62[4] = 0;
    v62[5] = 0;
    if (!v62[3]) {
      goto LABEL_56;
    }
    uint64_t Im4p = _AMAuthInstallVinylCreateIm4p(cf, v58, (uint64_t)v62, (CFDataRef *)&v123[12 * v56 - 1]);
    if (Im4p)
    {
      uint64_t v20 = Im4p;
      goto LABEL_77;
    }
    CFAllocatorRef v70 = CFGetAllocator(cf);
    CFDataRef StitchTicket = AMAuthInstallApImg4CreateStitchTicket(v70, (const __CFData *)v123[12 * v56 - 1], v109);
    if (!StitchTicket)
    {
      uint64_t v20 = 3;
      goto LABEL_77;
    }
    CFDataRef v71 = (const __CFData *)v62[3];
    CFURLRef v72 = &v123[12 * v56];
    memset((char *)&theDict[1] + 4, 0, 12);
    CFAllocatorRef v73 = CFGetAllocator(cf);
    CFIndex v74 = CFDataGetLength(StitchTicket);
    CFIndex v75 = CFDataGetLength(v71);
    CFMutableDictionaryRef MutableCopy = CFDataCreateMutableCopy(v73, v75 + v74, StitchTicket);
    if (MutableCopy)
    {
      char v77 = CFDataGetBytePtr(v71);
      CFIndex v78 = CFDataGetLength(v71);
      CFDataAppendBytes(MutableCopy, v77, v78);
      if (DEREncoderCreate())
      {
        CFDataGetBytePtr(MutableCopy);
        CFDataGetLength(MutableCopy);
        DEREncoderAddData();
        if (DEREncoderCreateEncodedBuffer())
        {
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylStitchImg4Vad", (uint64_t)"failed to encode img4/vad sequence", v79, v80, v81, v82, v83, (char)v107);
LABEL_44:
          uint64_t v20 = 0;
          int v86 = 1;
          goto LABEL_45;
        }
        CFAllocatorRef v84 = CFGetAllocator(cf);
        CFDataRef v85 = CFDataCreate(v84, (const UInt8 *)theDict[2], HIDWORD(theDict[1]));
        *CFURLRef v72 = v85;
        if (v85) {
          goto LABEL_44;
        }
      }
      int v86 = 0;
    }
    else
    {
      int v86 = 0;
    }
    uint64_t v20 = 2;
LABEL_45:
    DEREncoderDestroy();
    SafeFree(theDict[2]);
    SafeRelease(MutableCopy);
    if (!v86) {
      goto LABEL_77;
    }
    int v87 = v112;
    if (v112)
    {
      CFMutableDictionaryRef Mutable = v111;
    }
    else
    {
      if (v59)
      {
        uint64_t v108 = BbfwWriterCreate(v59);
        if (!v108)
        {
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylPersonalizeFirmwareInternal", (uint64_t)"failed to create output file", v89, v90, v91, v92, v93, (char)v107);
          uint64_t v20 = 4;
          CFDictionaryRef v38 = v111;
          goto LABEL_82;
        }
      }
      CFAllocatorRef v94 = CFGetAllocator(cf);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v94, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      int v87 = 0;
    }
    int v112 = v87 + 1;
    CFDictionaryRef v111 = Mutable;
    CFDictionaryAddValue(Mutable, (&v121)[12 * v56], *v72);
    if (v59)
    {
      uint64_t v95 = v59;
      uint64_t v96 = (uint64_t)v108;
      if (BbfwWriterAddFile((uint64_t)v108, (&v120)[12 * v56], (const __CFData *)*v72))
      {
        uint64_t v20 = 4;
        goto LABEL_69;
      }
      uint64_t v58 = a2;
      uint64_t v59 = v95;
    }
    else
    {
      uint64_t v58 = a2;
    }
LABEL_56:
    char v57 = 0;
    uint64_t v56 = 1;
  }
  while ((v60 & 1) != 0);
  if (!v112)
  {
    char v97 = CFDataGetBytePtr(*(CFDataRef *)(cf[6] + 152));
    CFIndex v98 = CFDataGetLength(*(CFDataRef *)(cf[6] + 152));
    AMAuthInstallLogDumpMemory(3, (uint64_t)"_AMAuthInstallVinylPersonalizeFirmwareInternal", (char)"Error finding profile matching certId", (uint64_t)v97, v98, v99, v100, v101);
  }
  uint64_t v96 = (uint64_t)v108;
  if (v111)
  {
    SafeRelease(*v107);
    CFAllocatorRef v102 = CFGetAllocator(cf);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v102, v111);
    *uint64_t v107 = Copy;
    if (Copy) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = 2;
    }
  }
  else
  {
    CFDictionaryRef v111 = 0;
    uint64_t v20 = 0;
  }
LABEL_69:
  SafeRelease(StitchTicket);
  if (v96) {
    BbfwWriterFinalize(v96);
  }
LABEL_71:
  SafeRelease((CFTypeRef)v117);
  SafeRelease(v122);
  SafeRelease(v123[0]);
  SafeRelease((CFTypeRef)v124);
  SafeRelease(v129);
  SafeRelease(v130);
  SafeRelease(theDict[0]);
  CFDictionaryRef v36 = v111;
LABEL_72:
  SafeRelease(v36);
LABEL_73:
  SafeRelease(v114);
  return v20;
}

uint64_t AMAuthInstallVinylRemoveFirmwareLoaderVersionTag(const void *a1, CFDictionaryRef *a2)
{
  CFTypeID v2 = 0;
  uint64_t v3 = 1;
  if (a1 && a2)
  {
    if (*a2)
    {
      CFAllocatorRef v5 = CFGetAllocator(a1);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, *a2);
      CFTypeID v2 = MutableCopy;
      if (MutableCopy)
      {
        CFDictionaryRemoveValue(MutableCopy, @"EUICCFirmwareLoaderVersion");
        SafeRelease(*a2);
        uint64_t v3 = 0;
        *a2 = (CFDictionaryRef)CFRetain(v2);
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      CFTypeID v2 = 0;
    }
  }
  SafeRelease(v2);
  return v3;
}

uint64_t _AMAuthInstallVinylCreateIm4p(const void *a1, const void *a2, uint64_t a3, CFDataRef *a4)
{
  values[2] = *(void **)MEMORY[0x263EF8340];
  memset(&buffer[5], 0, 12);
  CFAllocatorRef v7 = AMAuthInstallSupportCopyAllocator();
  uint64_t v8 = 0;
  uint64_t Payload = 1;
  if (!a1 || !a2 || !a3)
  {
    uint64_t v10 = 0;
    goto LABEL_24;
  }
  uint64_t v10 = 0;
  if (a4)
  {
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      CFAllocatorRef v13 = CFGetAllocator(a1);
      CFMutableArrayRef v14 = CFArrayCreateMutable(v13, 0, MEMORY[0x263EFFF70]);
      CFArrayRef v15 = v14;
      if (v14)
      {
        values[0] = Mutable;
        values[1] = v14;
        CFAllocatorRef v16 = CFGetAllocator(a1);
        uint64_t Payload = 2;
        CFArrayRef v17 = CFArrayCreate(v16, (const void **)values, 2, MEMORY[0x263EFFF70]);
        *(void *)(a3 + 48) = v17;
        if (v17)
        {
          uint64_t v18 = BbfwReaderStart(a2, (uint64_t (*)(uint64_t, CFStringRef, void *))__AMAuthInstallVinylFwReaderInfoPlistCallback, a3);
          if (!v18)
          {
            if (!*(void *)(a3 + 56))
            {
              uint64_t v47 = "Failed to build vinyl info.plist dictionary";
              uint64_t v48 = 3;
              goto LABEL_39;
            }
            uint64_t v18 = BbfwReaderStart(a2, (uint64_t (*)(uint64_t, CFStringRef, void *))__AMAuthInstallVinylFwReaderCallback, a3);
            if (!v18)
            {
              CFIndex Count = CFArrayGetCount(Mutable);
              if (Count <= 0)
              {
                CFStringRef v50 = *(CFStringRef *)a3;
                uint64_t v47 = "No sources found for %@";
              }
              else
              {
                CFIndex v25 = Count;
                if (Count == CFArrayGetCount(v15))
                {
                  CFAllocatorRef v51 = v7;
                  uint64_t v10 = (const void **)malloc(8 * v25);
                  uint64_t v8 = (const void **)malloc(8 * v25);
                  v56.CFIndex location = 0;
                  v56.CFIndex length = v25;
                  CFArrayGetValues(Mutable, v56, v10);
                  v57.CFIndex location = 0;
                  v57.CFIndex length = v25;
                  CFArrayGetValues(v15, v57, v8);
                  DEREncoderCreate();
                  DEREncoderCreate();
                  uint64_t v26 = 0;
                  while (1)
                  {
                    DEREncoderCreate();
                    CFDataGetBytePtr((CFDataRef)v10[v26]);
                    CFDataGetLength((CFDataRef)v10[v26]);
                    if (DEREncoderAddData()) {
                      break;
                    }
                    CFDataGetBytePtr((CFDataRef)v8[v26]);
                    CFDataGetLength((CFDataRef)v8[v26]);
                    if (DEREncoderAddData())
                    {
                      uint64_t v46 = "failed to add VAD";
                      goto LABEL_28;
                    }
                    if (DEREncoderAddSequenceFromEncoder())
                    {
                      uint64_t v46 = "failed to add certId-VAD sequence";
                      goto LABEL_28;
                    }
                    DEREncoderDestroy();
                    if (v25 == ++v26)
                    {
                      CFAllocatorRef v7 = v51;
                      if (DEREncoderAddSequenceFromEncoder())
                      {
                        uint64_t Payload = 3;
                        AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylCreateIm4p", (uint64_t)"failed to add top-level sequence", v32, v33, v34, v35, v36, (char)v50);
                      }
                      else
                      {
                        DEREncoderDestroy();
                        if (DEREncoderCreateEncodedBuffer())
                        {
                          CFDataRef v49 = "failed to encode DER buffer";
                          uint64_t Payload = 3;
                          goto LABEL_44;
                        }
                        CFAllocatorRef v42 = CFGetAllocator(a1);
                        CFDataRef v43 = CFDataCreateWithBytesNoCopy(v42, *(const UInt8 **)&buffer[9], *(unsigned int *)&buffer[5], v51);
                        if (!v43) {
                          goto LABEL_42;
                        }
                        CFDataRef v44 = v43;
                        if (CFStringGetCString(*(CFStringRef *)a3, buffer, 5, 0x8000100u)
                          && CFStringGetCString(@"1.0", v53, 5, 0x8000100u))
                        {
                          uint64_t Payload = AMAuthInstallApImg4CreatePayload(buffer, v53, v44, 0, 0, a4);
                          if (!Payload) {
                            goto LABEL_24;
                          }
                          CFDataRef v49 = "failed to create im4p";
LABEL_44:
                          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylCreateIm4p", (uint64_t)v49, v37, v38, v39, v40, v41, (char)v50);
                        }
                        else
                        {
                          uint64_t Payload = 3;
                        }
                      }
                      goto LABEL_24;
                    }
                  }
                  uint64_t v46 = "failed to add certId";
LABEL_28:
                  uint64_t Payload = 3;
                  AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylCreateIm4p", (uint64_t)v46, v27, v28, v29, v30, v31, (char)v50);
                  CFAllocatorRef v7 = v51;
                  goto LABEL_24;
                }
                uint64_t v47 = "Count of certID != hashVad";
              }
              uint64_t v48 = 4;
LABEL_39:
              AMAuthInstallLog(v48, (uint64_t)"_AMAuthInstallVinylCreateIm4p", (uint64_t)v47, v19, v20, v21, v22, v23, (char)v50);
              uint64_t v8 = 0;
              uint64_t v10 = 0;
              uint64_t Payload = 0;
              goto LABEL_24;
            }
          }
          uint64_t Payload = v18;
          AMAuthInstallLog(3, (uint64_t)"_AMAuthInstallVinylCreateIm4p", (uint64_t)"failed to read zip file", v19, v20, v21, v22, v23, (char)v50);
        }
        uint64_t v8 = 0;
        uint64_t v10 = 0;
        goto LABEL_24;
      }
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v10 = 0;
LABEL_42:
    uint64_t Payload = 2;
  }
LABEL_24:
  SafeFree(v10);
  SafeFree(v8);
  DEREncoderDestroy();
  DEREncoderDestroy();
  DEREncoderDestroy();
  SafeRelease(*(CFTypeRef *)(a3 + 48));
  SafeRelease(*(CFTypeRef *)(a3 + 56));
  SafeRelease(v7);
  SafeFree(*(void **)&buffer[9]);
  return Payload;
}

BOOL __AMAuthInstallVinylFwReaderInfoPlistCallback(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  CFDataRef data = 0;
  CFStringRef v4 = *(const __CFString **)(a1 + 16);
  if (!v4 || !CFStringHasSuffix(theString, v4))
  {
    CFDataRef v18 = 0;
    int v17 = 0;
    CFStringRef PathComponent = 0;
    CFPropertyListRef v15 = 0;
    goto LABEL_11;
  }
  CFErrorRef v20 = 0;
  CFStringRef PathComponent = _AMAuthInstallVinylGetPathComponent(theString);
  if (!PathComponent)
  {
    CFPropertyListRef v15 = 0;
LABEL_13:
    int v17 = 2;
    goto LABEL_9;
  }
  int v8 = BbfwReaderFindAndCopyFileData(a3, theString, (CFTypeRef *)&data);
  if (v8)
  {
    int v17 = v8;
    AMAuthInstallLog(3, (uint64_t)"__AMAuthInstallVinylFwReaderInfoPlistCallback", (uint64_t)"failed to find and/or copy data", v9, v10, v11, v12, v13, (char)v20);
    CFPropertyListRef v15 = 0;
    goto LABEL_9;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFPropertyListRef v15 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x263EFFB08], data, 0, 0, &v20);
  if (!v15) {
    goto LABEL_13;
  }
  CFMutableArrayRef Mutable = *(__CFDictionary **)(a1 + 56);
  if (!Mutable)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    *(void *)(a1 + 56) = Mutable;
    if (!Mutable) {
      goto LABEL_13;
    }
  }
  CFDictionaryAddValue(Mutable, PathComponent, v15);
  int v17 = 0;
LABEL_9:
  CFDataRef v18 = data;
LABEL_11:
  SafeRelease(v18);
  SafeRelease(PathComponent);
  SafeRelease(v15);
  return v17 == 0;
}

BOOL __AMAuthInstallVinylFwReaderCallback(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  CFDataRef v3 = 0;
  uint64_t v55 = *MEMORY[0x263EF8340];
  CFTypeRef cf1 = 0;
  CFDataRef theData = 0;
  int v4 = 1;
  if (!a1 || !theString)
  {
    CFArrayRef v7 = 0;
    CFStringRef PathComponent = 0;
    CFArrayRef MutableCopy = 0;
    goto LABEL_43;
  }
  CFArrayRef v7 = 0;
  CFStringRef PathComponent = 0;
  CFArrayRef MutableCopy = 0;
  if (!a3) {
    goto LABEL_43;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, @"/");
  CFArrayRef v7 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings)
  {
    CFDataRef v3 = 0;
    CFStringRef PathComponent = 0;
LABEL_47:
    CFArrayRef MutableCopy = 0;
    goto LABEL_56;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
  int v13 = AMAuthInstallSupportCopyDataFromHexString(0, ValueAtIndex, (uint64_t *)&cf1);
  if (v13)
  {
    int v4 = v13;
    goto LABEL_28;
  }
  CFStringRef v14 = *(const __CFString **)(a1 + 8);
  if (!v14 || !CFStringHasSuffix(theString, v14))
  {
    int v4 = 0;
LABEL_28:
    CFDataRef v3 = 0;
    CFStringRef PathComponent = 0;
    CFArrayRef MutableCopy = 0;
    goto LABEL_43;
  }
  CFStringRef PathComponent = _AMAuthInstallVinylGetPathComponent(theString);
  if (!PathComponent
    || (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), PathComponent)) == 0)
  {
    CFDataRef v3 = 0;
    goto LABEL_47;
  }
  CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(Value, @"com.apple.EmbeddedSoftwareRestore.eUICC.bootloaderVersionsSupported");
  CFArrayRef MutableCopy = v16;
  if (!v16) {
    goto LABEL_55;
  }
  if (CFArrayGetCount(v16) >= 1 && (CFStringRef v17 = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, 0)) != 0)
  {
    CFArrayRef v18 = CFStringCreateArrayBySeparatingStrings(0, v17, @".");
    if (CFArrayGetCount(v18) == 2)
    {
      CFStringRef v19 = (const __CFString *)CFArrayGetValueAtIndex(v18, 0);
      IntCFDictionaryRef Value = CFStringGetIntValue(v19);
      CFStringRef v21 = (const __CFString *)CFArrayGetValueAtIndex(v18, 1);
      BOOL v22 = (((unsigned __int16)CFStringGetIntValue(v21) | (unsigned __int16)(IntValue << 8)) & 0x7FFFu) < 0x301;
      goto LABEL_15;
    }
  }
  else
  {
    CFArrayRef v18 = 0;
  }
  BOOL v22 = 1;
LABEL_15:
  SafeRelease(v18);
  uint64_t v23 = *(const void **)(a1 + 32);
  if (!v23)
  {
    CFDataRef v3 = 0;
    CFArrayRef MutableCopy = 0;
    goto LABEL_34;
  }
  CFDataRef v24 = *(const __CFData **)(a1 + 40);
  if (!v24)
  {
LABEL_25:
    CFDataRef v3 = 0;
    CFArrayRef MutableCopy = 0;
    if (!CFEqual(cf1, v23)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v22 && CFArrayGetCount(MutableCopy) >= 1)
  {
    CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, 0);
    if (v25)
    {
      CFArrayRef v26 = CFStringCreateArrayBySeparatingStrings(0, v25, @".");
      if (CFArrayGetCount(v26) == 2)
      {
        BytePtr = CFDataGetBytePtr(v24);
        if (BytePtr)
        {
          uint64_t v28 = BytePtr;
          int v29 = *BytePtr;
          CFStringRef v30 = (const __CFString *)CFArrayGetValueAtIndex(v26, 0);
          if (CFStringGetIntValue(v30) == v29)
          {
            int v31 = v28[1];
            CFStringRef v32 = (const __CFString *)CFArrayGetValueAtIndex(v26, 1);
            if (CFStringGetIntValue(v32) == v31)
            {
              uint64_t v23 = *(const void **)(a1 + 32);
              goto LABEL_25;
            }
          }
        }
      }
    }
  }
  CFArrayRef MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(CFDataRef *)(a1 + 32));
  if (!MutableCopy)
  {
LABEL_55:
    CFDataRef v3 = 0;
    goto LABEL_56;
  }
  uint64_t v33 = CFDataGetBytePtr(*(CFDataRef *)(a1 + 40));
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 40));
  CFDataAppendBytes(MutableCopy, v33, Length - 1);
  CFDataGetBytePtr(MutableCopy);
  CFDataGetLength(MutableCopy);
  if (AMSupportDigestSha256())
  {
    AMAuthInstallLog(3, (uint64_t)"__AMAuthInstallVinylFwReaderCallback", (uint64_t)"failed to compute digest", v35, v36, v37, v38, v39, v51);
    goto LABEL_55;
  }
  SafeRelease(0);
  CFDataRef v3 = CFDataCreate(0, bytes, 32);
  if (!CFEqual(cf1, v3)) {
    goto LABEL_34;
  }
LABEL_33:
  if (BbfwReaderFindAndCopyFileData(a3, theString, (CFTypeRef *)(a1 + 24))) {
    goto LABEL_51;
  }
LABEL_34:
  CFArrayRef v45 = *(const __CFArray **)(a1 + 48);
  if (!v45)
  {
LABEL_42:
    int v4 = 0;
    goto LABEL_43;
  }
  uint64_t v46 = (__CFArray *)CFArrayGetValueAtIndex(v45, 0);
  int v4 = 1;
  uint64_t v47 = (__CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), 1);
  if (v46)
  {
    uint64_t v48 = v47;
    if (v47)
    {
      if (!cf1) {
        goto LABEL_56;
      }
      CFArrayAppendValue(v46, cf1);
      if (!BbfwReaderFindAndCopyFileData(a3, theString, (CFTypeRef *)&theData))
      {
        CFDataGetBytePtr(theData);
        CFDataGetLength(theData);
        if (!AMSupportDigestSha256())
        {
          SafeRelease(v3);
          CFDataRef v3 = CFDataCreate(0, bytes, 32);
          if (v3)
          {
            CFArrayAppendValue(v48, v3);
            goto LABEL_42;
          }
LABEL_56:
          int v4 = 1;
          goto LABEL_43;
        }
        CFStringRef v50 = "failed to compute digest";
LABEL_53:
        AMAuthInstallLog(3, (uint64_t)"__AMAuthInstallVinylFwReaderCallback", (uint64_t)v50, v40, v41, v42, v43, v44, v51);
        goto LABEL_56;
      }
LABEL_51:
      CFStringRef v50 = "failed to find and/or copy data";
      goto LABEL_53;
    }
  }
LABEL_43:
  SafeRelease(theData);
  SafeRelease(cf1);
  SafeRelease(v3);
  SafeRelease(v7);
  SafeRelease(MutableCopy);
  SafeRelease(PathComponent);
  return v4 == 0;
}

CFStringRef _AMAuthInstallVinylGetPathComponent(CFStringRef filePath)
{
  if (!filePath)
  {
    CFStringRef Copy = 0;
    CFURLRef v2 = 0;
LABEL_8:
    CFURLRef v4 = 0;
    goto LABEL_5;
  }
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFURLRef v2 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], filePath, kCFURLPOSIXPathStyle, 0);
  if (!v2)
  {
    CFStringRef Copy = 0;
    goto LABEL_8;
  }
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(v1, v2);
  CFURLRef v4 = PathComponent;
  if (PathComponent)
  {
    CFStringRef v5 = CFURLGetString(PathComponent);
    CFStringRef Copy = CFStringCreateCopy(v1, v5);
  }
  else
  {
    CFStringRef Copy = 0;
  }
LABEL_5:
  SafeRelease(v2);
  SafeRelease(v4);
  return Copy;
}

uint64_t AMAuthInstallBasebandMAV22StitchFirmware(uint64_t a1, CFTypeRef cf, uint64_t a3, __CFDictionary *a4)
{
  CFURLRef v4 = 0;
  uint64_t v5 = 1;
  if (a1 && cf && a3 && a4)
  {
    CFURLRef v4 = BbfwReaderOpen(cf);
    if (v4)
    {
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"acdb.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"aop.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apdp.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"apps.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"bbcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"devcfg.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"hyp.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"qdsp6sw.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sec.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"restoresbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchRestoreSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"sbl1.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchSbl1, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"multi_image.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchMisc, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"multi_image_qti.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"tz.mbn", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"Info.plist", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallBasebandStitchCopyFile, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"xbl_cfg.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"uefi.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      AMAuthInstallBasebandStitchFirmwareFromBbfw(a1, @"xbl_support.elf", (uint64_t (*)(uint64_t, CFTypeRef, uint64_t, void **))AMAuthInstallMonetStitchCopyIfPersonalized, (uint64_t)v4, a3, a4);
      uint64_t v5 = 0;
    }
    else
    {
      AMAuthInstallLog(3, (uint64_t)"AMAuthInstallBasebandMAV22StitchFirmware", (uint64_t)"failed to open bbfw archive for reading", v9, v10, v11, v12, v13, v15);
      uint64_t v5 = 4;
    }
  }
  BbfwReaderClose((uint64_t)v4);
  return v5;
}

void *BbfwReaderOpen(CFTypeRef cf)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  CFURLRef url = 0;
  if (AMAuthInstallSupportCopyPreserveFileURL((const __CFAllocator *)*MEMORY[0x263EFFB08], cf, (CFTypeRef *)&url, 0))
  {
    AMAuthInstallLog(3, (uint64_t)"BbfwReaderOpen", (uint64_t)"%s: failed to get new URL", v1, v2, v3, v4, v5, (char)"BbfwReaderOpen");
    goto LABEL_5;
  }
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
  {
LABEL_5:
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = amai_unzOpen((uint64_t)buffer);
  if (!v11)
  {
    AMAuthInstallLog(3, (uint64_t)"BbfwReaderOpen", (uint64_t)"failed to open bbfw archive for reading", v6, v7, v8, v9, v10, v18);
    AMAuthInstallLog(7, (uint64_t)"BbfwReaderOpen", (uint64_t)"Bbfw url: %@", v12, v13, v14, v15, v16, (char)url);
    goto LABEL_5;
  }
LABEL_6:
  SafeRelease(url);
  return v11;
}

uint64_t BbfwReaderClose(uint64_t a1)
{
  if (a1) {
    amai_unzClose(a1);
  }
  return 0;
}

uint64_t BbfwReaderFindFile(uint64_t a1, CFStringRef theString)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (CFStringGetCString(theString, buffer, 1024, 0x8000100u)) {
    return 4 * (amai_unzLocateFile(a1, buffer, 0) != 0);
  }
  else {
    return 99;
  }
}

uint64_t BbfwReaderFindAndCopyFileData(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  char v4 = (char)a2;
  CFTypeRef cf = 0;
  uint64_t File = BbfwReaderFindFile(a1, a2);
  if (File)
  {
    uint64_t v7 = File;
    AMAuthInstallGetLocalizedStatusString(0, File);
    AMAuthInstallLog(7, (uint64_t)"BbfwReaderFindAndCopyFileData", (uint64_t)"failed to find bbfw item \"%@\": %@", v8, v9, v10, v11, v12, v4);
    CFTypeRef v13 = 0;
  }
  else
  {
    uint64_t v14 = BbfwReaderCopyFileData(a1, &cf);
    if (v14)
    {
      uint64_t v7 = v14;
      AMAuthInstallGetLocalizedStatusString(0, v14);
      AMAuthInstallLog(3, (uint64_t)"BbfwReaderFindAndCopyFileData", (uint64_t)"failed to extract bbfw item \"%@\": %@", v20, v21, v22, v23, v24, v4);
      CFTypeRef v13 = cf;
    }
    else
    {
      CFTypeRef v13 = cf;
      if (cf)
      {
        uint64_t v7 = 0;
        *a3 = CFRetain(cf);
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"BbfwReaderFindAndCopyFileData", (uint64_t)"failed to extract bbfw item \"%@\": fileData is NULL", v15, v16, v17, v18, v19, v4);
        uint64_t v7 = 0;
      }
    }
  }
  SafeRelease(v13);
  return v7;
}

uint64_t BbfwReaderCopyFileData(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)__size = 0u;
  memset(v11, 0, sizeof(v11));
  CFAllocatorRef v4 = AMAuthInstallSupportCopyAllocator();
  if (amai_unzGetCurrentFileInfo(a1, (uint64_t)v11, (uint64_t)v18, 0x400uLL, 0, 0, 0, 0))
  {
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = (UInt8 *)malloc(__size[1]);
  if (!v5)
  {
    CFDataRef v8 = 0;
    goto LABEL_12;
  }
  if (amai_unzOpenCurrentFile(a1)) {
    goto LABEL_10;
  }
  Currentuint64_t File = amai_unzReadCurrentFile(a1, (uint64_t)v5, __size[1]);
  if (__size[1] != CurrentFile)
  {
    CFDataRef v8 = 0;
    uint64_t v9 = 4;
    goto LABEL_8;
  }
  if (amai_unzCloseCurrentFile(a1))
  {
LABEL_10:
    CFDataRef v8 = 0;
    uint64_t v9 = 15;
    goto LABEL_8;
  }
  CFDataRef v7 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, __size[1], v4);
  CFDataRef v8 = v7;
  if (!v7)
  {
LABEL_12:
    uint64_t v9 = 2;
    goto LABEL_8;
  }
  uint64_t v9 = 0;
  uint64_t v5 = 0;
  *a2 = CFRetain(v7);
LABEL_8:
  SafeRelease(v8);
  SafeRelease(v4);
  SafeFree(v5);
  return v9;
}

uint64_t BbfwReaderStart(const void *a1, uint64_t (*a2)(uint64_t, CFStringRef, void *), uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v5 = BbfwReaderOpen(a1);
  if (!v5)
  {
    AMAuthInstallLog(3, (uint64_t)"BbfwReaderStart", (uint64_t)"failed to open bbfw archive for reading", v6, v7, v8, v9, v10, v18[0]);
    return 4;
  }
  uint64_t v11 = v5;
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    if (amai_unzGetCurrentFileInfo((uint64_t)v11, (uint64_t)v18, (uint64_t)cStr, 0x400uLL, 0, 0, 0, 0))
    {
      uint64_t v16 = 15;
      goto LABEL_9;
    }
    if (cStr[0]) {
      break;
    }
LABEL_7:
    if (amai_unzGoToNextFile(v11))
    {
LABEL_8:
      uint64_t v16 = 0;
      goto LABEL_9;
    }
  }
  CFStringRef v13 = CFStringCreateWithCString(v12, cStr, 0x8000100u);
  if (v13)
  {
    CFStringRef v14 = v13;
    int v15 = a2(a3, v13, v11);
    CFRelease(v14);
    if (!v15) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v16 = 3;
LABEL_9:
  amai_unzClose((uint64_t)v11);
  return v16;
}

uint64_t BbfwCreateDictionaryFromURL(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v6 = BbfwReaderStart(a2, (uint64_t (*)(uint64_t, CFStringRef, void *))_CreateDictCallback, (uint64_t)Mutable);
    if (!v6) {
      *a3 = CFRetain(Mutable);
    }
  }
  else
  {
    uint64_t v6 = 2;
  }
  SafeRelease(Mutable);
  return v6;
}

BOOL _CreateDictCallback(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFDictionaryRef value = 0;
  int v5 = BbfwReaderCopyFileData(a3, (CFTypeRef *)&value);
  uint64_t v6 = value;
  if (!v5) {
    CFDictionarySetValue(a1, a2, value);
  }
  SafeRelease(v6);
  return v5 == 0;
}

void *BbfwWriterCreate(CFTypeRef cf)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  CFURLRef url = 0;
  if (AMAuthInstallSupportCopyPreserveFileURL((const __CFAllocator *)*MEMORY[0x263EFFB08], cf, (CFTypeRef *)&url, 1))
  {
    AMAuthInstallLog(3, (uint64_t)"BbfwWriterCreate", (uint64_t)"%s: failed to get new URL", v1, v2, v3, v4, v5, (char)"BbfwWriterCreate");
    goto LABEL_5;
  }
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
  {
LABEL_5:
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = amai_zipOpen();
  if (!v11)
  {
    AMAuthInstallLog(3, (uint64_t)"BbfwWriterCreate", (uint64_t)"failed to open bbfw archive for writing", v6, v7, v8, v9, v10, v18);
    AMAuthInstallLog(7, (uint64_t)"BbfwWriterCreate", (uint64_t)"Bbfw url: %@", v12, v13, v14, v15, v16, (char)url);
    goto LABEL_5;
  }
LABEL_6:
  SafeRelease(url);
  return v11;
}

uint64_t BbfwWriterAddFile(uint64_t a1, CFStringRef theString, const __CFData *a3)
{
  char v4 = (char)theString;
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (!CFStringGetCString(theString, buffer, 1024, 0x8000100u))
  {
    int v29 = "Failed to convert bb filename to cstring";
    uint64_t v27 = 3;
LABEL_13:
    AMAuthInstallLog(3, (uint64_t)"BbfwWriterAddFile", (uint64_t)v29, v6, v7, v8, v9, v10, (char)v40);
    return v27;
  }
  uint64_t v11 = amai_zipOpenNewFileInZip(a1, buffer, 0, 0, 0, 0, 0, "", 8, -1);
  if (v11)
  {
    uint64_t v27 = BbfwWriterErrorFromZipStat(v11, 5000);
    AMAuthInstallLog(3, (uint64_t)"BbfwWriterAddFile", (uint64_t)"Failed to open file in zip: %s", v30, v31, v32, v33, v34, (char)buffer);
    return v27;
  }
  BytePtr = CFDataGetBytePtr(a3);
  if (!BytePtr)
  {
    AMAuthInstallLog(3, (uint64_t)"BbfwWriterAddFile", (uint64_t)"FileData byte pointer is NULL: %s", v13, v14, v15, v16, v17, (char)buffer);
    return 4;
  }
  char v18 = BytePtr;
  uInt Length = CFDataGetLength(a3);
  uint64_t v20 = amai_zipWriteInFileInZip(a1, v18, Length);
  if (v20)
  {
    uint64_t v27 = BbfwWriterErrorFromZipStat(v20, 5001);
    __error();
    AMAuthInstallLog(3, (uint64_t)"BbfwWriterAddFile", (uint64_t)"Failed to write file in zip %s with error: %d %d", v35, v36, v37, v38, v39, (char)buffer);
    return v27;
  }
  uint64_t v21 = amai_zipCloseFileInZip(a1);
  if (v21)
  {
    uint64_t v27 = BbfwWriterErrorFromZipStat(v21, 5002);
    __error();
    uint64_t v40 = buffer;
    int v29 = "Failed to close file in zip %s with error: %d %d";
    goto LABEL_13;
  }
  AMAuthInstallLog(7, (uint64_t)"BbfwWriterAddFile", (uint64_t)"Added bbfw file : %@", v22, v23, v24, v25, v26, v4);
  return 0;
}

uint64_t BbfwWriterErrorFromZipStat(uint64_t result, uint64_t a2)
{
  if ((int)result <= -7)
  {
    switch(result)
    {
      case 0xFFFFFF98:
        return 5005;
      case 0xFFFFFF99:
        return 5004;
      case 0xFFFFFF9A:
        return 5003;
      default:
        return a2;
    }
  }
  else
  {
    switch((int)result)
    {
      case -6:
        uint64_t result = 5010;
        break;
      case -5:
        uint64_t result = 5009;
        break;
      case -4:
        uint64_t result = 5008;
        break;
      case -3:
        uint64_t result = 5007;
        break;
      case -2:
        uint64_t result = 5006;
        break;
      case -1:
        int v2 = *__error();
        if ((v2 - 199) <= 0xFFFFFF39) {
          return 5003;
        }
        uint64_t result = (v2 + 5100);
        break;
      case 0:
        return result;
      default:
        return a2;
    }
  }
  return result;
}

uint64_t BbfwWriterFinalize(uint64_t a1)
{
  return amai_zipClose(a1, "");
}

uint64_t DERDecoderInitialize(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, unsigned int a4)
{
  if (!a1) {
    DERDecoderInitialize_cold_1();
  }
  if (!a2) {
    DERDecoderInitialize_cold_2();
  }
  if (!a3) {
    DERDecoderInitialize_cold_3();
  }
  unsigned int v8 = *a3;
  if (*a3)
  {
LABEL_5:
    if (v8 > a4) {
      return 2;
    }
    uint64_t result = 0;
    *a3 = v8;
    *(void *)a1 = a2;
    *(_DWORD *)(a1 + 8) = v8;
    return result;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v13 = 0;
  uint64_t result = _DERDecodeTag(a2, a4, (unsigned int *)&v15, (int *)&v14 + 1, (int *)&v14, &v13);
  if (!result)
  {
    int v10 = a4 - v13;
    uint64_t result = _DERDecodeLength(&a2[v13], a4 - v13, (int *)&v15 + 1, &v13);
    if (!result)
    {
      unsigned int v11 = v13 - v10 + a4;
      unsigned int v8 = v11 + HIDWORD(v15);
      if (v11 + HIDWORD(v15) < HIDWORD(v15) || v8 < v11) {
        return 6;
      }
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t _DERDecodeTag(unsigned __int8 *a1, int a2, unsigned int *a3, int *a4, int *a5, _DWORD *a6)
{
  if (!a1) {
    _DERDecodeTag_cold_1();
  }
  if (!a3) {
    _DERDecodeTag_cold_2();
  }
  if (!a4) {
    _DERDecodeTag_cold_3();
  }
  if (!a5) {
    _DERDecodeTag_cold_4();
  }
  if (!a6) {
    _DERDecodeTag_cold_5();
  }
  if (!a2) {
    return 3;
  }
  unsigned int v6 = *a1;
  *a3 = v6 >> 6;
  unsigned int v7 = *a1;
  if ((~v6 & 0x1F) == 0)
  {
    int v8 = 0;
    unsigned int v9 = 0;
    int v10 = 0;
    *a5 = (v7 >> 5) & 1;
    int v11 = a2 - 1;
    uint64_t v12 = (char *)(a1 + 1);
    while (v11)
    {
      char v13 = *v12;
      int v14 = *v12 & 0x7F | (v8 << 7);
      v10 |= v14 != 0;
      if (v10)
      {
        v9 += 7;
        if (v9 > 0x20) {
          return 6;
        }
      }
      --v11;
      ++v12;
      int v8 = v14;
      if ((v13 & 0x80000000) == 0)
      {
        *a4 = v14;
        goto LABEL_16;
      }
    }
    return 3;
  }
  *a4 = v7 & 0x1F;
  *a5 = (*a1 >> 5) & 1;
  int v11 = a2 - 1;
LABEL_16:
  uint64_t result = 0;
  *a6 = a2 - v11;
  return result;
}

uint64_t _DERDecodeLength(unsigned __int8 *a1, int a2, int *a3, _DWORD *a4)
{
  if (!a1) {
    _DERDecodeLength_cold_1();
  }
  if (!a3) {
    _DERDecodeLength_cold_2();
  }
  if (!a4) {
    _DERDecodeLength_cold_3();
  }
  if (!a2) {
    return 4;
  }
  int v4 = *a1;
  unsigned int v5 = a2 - 1;
  if (((char)*a1 & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t result = 0;
    *a3 = v4;
    *a4 = a2 - v5;
    return result;
  }
  unsigned int v7 = v4 & 0x7F;
  BOOL v8 = v5 >= v7;
  v5 -= v7;
  if (!v8) {
    return 4;
  }
  if ((v4 & 0x7F) == 0)
  {
    int v4 = 0;
    goto LABEL_6;
  }
  int v9 = 0;
  unsigned int v10 = 0;
  int v4 = 0;
  int v11 = a1 + 1;
  while (1)
  {
    int v12 = *v11++;
    int v4 = v12 | (v4 << 8);
    v9 |= v4 != 0;
    if (v9)
    {
      v10 += 8;
      if (v10 > 0x20) {
        return 6;
      }
    }
    if (!--v7) {
      goto LABEL_6;
    }
  }
}

uint64_t DERDecoderGetDataWithTag(uint64_t a1, unsigned int a2, unsigned int a3, int a4, void *a5, _DWORD *a6, int *a7)
{
  if (!a1) {
    DERDecoderGetDataWithTag_cold_1();
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  *(void *)((char *)&v13 + 4) = __PAIR64__(a3, a2);
  HIDWORD(v14) = a4;
  if (a7) {
    int v10 = *a7;
  }
  else {
    int v10 = 0;
  }
  DWORD1(v12) = v10;
  uint64_t result = _DERDecoderTraverseAllItems(a1, (uint64_t (*)(unsigned __int8 **, uint64_t))_DERDecoderGetDataWithTagCallback, (uint64_t)&v12);
  if (!result)
  {
    if (!(void)v14) {
      DERDecoderGetDataWithTag_cold_2();
    }
    if (a5) {
      *a5 = v14;
    }
    if (a6) {
      *a6 = DWORD2(v14);
    }
    if (a7) {
      *a7 = v12;
    }
  }
  return result;
}

uint64_t _DERDecoderTraverseAllItems(uint64_t a1, uint64_t (*a2)(unsigned __int8 **, uint64_t), uint64_t a3)
{
  if (!a1) {
    _DERDecoderTraverseAllItems_cold_1();
  }
  int v3 = *(_DWORD *)(a1 + 8);
  if (!v3) {
    return 1;
  }
  unsigned int v6 = *(unsigned __int8 **)a1;
  while (1)
  {
    int v12 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = v6;
    uint64_t result = _DERDecodeTag(v6, v3, (unsigned int *)&v14 + 1, (int *)&v14 + 2, (int *)&v15 + 3, &v12);
    if (result) {
      break;
    }
    if (!v12) {
      _DERDecoderTraverseAllItems_cold_2();
    }
    int v8 = v3 - v12;
    int v9 = &v6[v12];
    uint64_t result = _DERDecodeLength(v9, v8, (int *)&v15 + 2, &v12);
    if (result) {
      break;
    }
    if (!v12) {
      _DERDecoderTraverseAllItems_cold_3();
    }
    unsigned int v10 = v8 - v12;
    if (v10 < DWORD2(v15)) {
      return 2;
    }
    int v11 = &v9[v12];
    *(void *)&long long v15 = v11;
    LODWORD(v14) = DWORD2(v15) + v11 - v13;
    uint64_t result = a2(&v13, a3);
    if (result != 1) {
      return result;
    }
    unsigned int v6 = &v11[DWORD2(v15)];
    int v3 = v10 - DWORD2(v15);
    if (v10 == DWORD2(v15)) {
      return 1;
    }
  }
  return result;
}

uint64_t _DERDecoderGetDataWithTagCallback(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 44)
    && *(_DWORD *)a2 >= *(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = 0;
    *(void *)(a2 + 32) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 32);
    *(void *)(a2 + 8) = *(void *)a1;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 8);
  }
  else
  {
    ++*(_DWORD *)a2;
    return 1;
  }
  return v2;
}

uint64_t DERDecoderGetEncodingWithTag(uint64_t a1, unsigned int a2, unsigned int a3, int a4, void *a5, _DWORD *a6, int *a7)
{
  if (!a1) {
    DERDecoderGetEncodingWithTag_cold_1();
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  *(void *)((char *)&v13 + 4) = __PAIR64__(a3, a2);
  HIDWORD(v14) = a4;
  if (a7) {
    int v10 = *a7;
  }
  else {
    int v10 = 0;
  }
  DWORD1(v12) = v10;
  uint64_t result = _DERDecoderTraverseAllItems(a1, (uint64_t (*)(unsigned __int8 **, uint64_t))_DERDecoderGetDataWithTagCallback, (uint64_t)&v12);
  if (!result)
  {
    if (!*((void *)&v12 + 1)) {
      DERDecoderGetEncodingWithTag_cold_2();
    }
    if (a5) {
      *a5 = *((void *)&v12 + 1);
    }
    if (a6) {
      *a6 = v13;
    }
    if (a7) {
      *a7 = v12;
    }
  }
  return result;
}

uint64_t Img4EncodeIMG4Tag(uint64_t a1)
{
  if (a1)
  {
    if (DEREncoderCreate())
    {
      uint64_t EncodedBuffer = DEREncoderAddData();
      if (!EncodedBuffer) {
        uint64_t EncodedBuffer = DEREncoderCreateEncodedBuffer();
      }
      uint64_t v2 = EncodedBuffer;
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }
  DEREncoderDestroy();
  return v2;
}

uint64_t Img4EncodeImg4Header(unsigned int a1, void *a2, _DWORD *a3)
{
  return _DEREncoderEncodeHeader(0, 16, a1, a2, a3);
}

uint64_t _DEREncoderEncodeHeader(char a1, char a2, unsigned int a3, void *a4, _DWORD *a5)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = 1;
  if (a4 && a5)
  {
    int v11 = malloc(0x10uLL);
    if (v11)
    {
      *int v11 = a2 | (a1 << 6) | 0x20;
      if (a3 > 0x7F)
      {
        uint64_t v13 = 0;
        v17[0] = 0;
        do
        {
          *((unsigned char *)v17 + v13++) = a3;
          BOOL v14 = a3 > 0xFF;
          a3 >>= 8;
        }
        while (v14);
        LODWORD(v12) = v11 + 1;
        if (v13 <= 0xE)
        {
          v11[1] = v13 | 0x80;
          long long v12 = v11 + 2;
          if (v13)
          {
            do
              *v12++ = *((unsigned char *)&v17[-1] + v13-- + 7);
            while (v13);
          }
        }
      }
      else
      {
        v11[1] = a3;
        LODWORD(v12) = v11 + 2;
      }
      int v15 = v12 - (v11 + 1);
      if (v15)
      {
        uint64_t v5 = 0;
        *a5 = v15 + 1;
        *a4 = v11;
      }
      else
      {
        free(v11);
        return 3;
      }
    }
    else
    {
      return 2;
    }
  }
  return v5;
}

uint64_t Img4EncodeManifestHeader(unsigned int a1, void *a2, _DWORD *a3)
{
  return _DEREncoderEncodeHeader(2, 0, a1, a2, a3);
}

uint64_t FlsParserCreate(const __CFAllocator *a1)
{
  pthread_once(&_FlsParserClassInitializeOnce, (void (*)(void))_FlsParserClassInitialize);
  uint64_t result = (uint64_t)CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (result)
  {
    int v3 = (const void *)result;
    int v4 = (PRGSequencer *)operator new(0xCC8uLL);
    PRGSequencer::PRGSequencer(v4);
    uint64_t result = _CFRuntimeCreateInstance();
    if (result)
    {
      *(void *)(result + 16) = v3;
      *(void *)(result + 24) = v4;
    }
    else
    {
      CFRelease(v3);
      PRGSequencer::~PRGSequencer(v4);
      operator delete(v5);
      return 0;
    }
  }
  return result;
}

uint64_t _FlsParserClassInitialize(void)
{
  uint64_t result = _CFRuntimeRegisterClass();
  _FlsParserCFTypeID TypeID = result;
  return result;
}

uint64_t FlsParserReadFromData(uint64_t a1, CFDataRef theData)
{
  int v3 = *(PRGSequencer **)(a1 + 24);
  BytePtr = (const char *)CFDataGetBytePtr(theData);
  unsigned int Length = CFDataGetLength(theData);
  PRGSequencer::ReadBuffer(v3, BytePtr, Length, 7, 0x20004u, 0);
  return 0;
}

uint64_t FlsParserCopyRamPsi(PRGSequencer **a1, CFDataRef *a2)
{
  CFDataRef v13 = 0;
  if (_FlsParserCopyDownloadItem(a1, 1, (CFTypeRef *)&v13, 0)
    && (uint64_t v4 = _FlsParserCopyInjectedItem(a1, 18, a2), v4))
  {
    uint64_t v10 = v4;
    AMAuthInstallLog(3, (uint64_t)"FlsParserCopyRamPsi", (uint64_t)"failed to copy RamPSI", v5, v6, v7, v8, v9, v12);
  }
  else
  {
    uint64_t v10 = 0;
    *a2 = v13;
  }
  return v10;
}

uint64_t _FlsParserCopyDownloadItem(PRGSequencer **a1, int a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t DownloadItem = _FlsParserFindDownloadItem((uint64_t)a1, a2, &v15, &v14);
  if (DownloadItem) {
    return DownloadItem;
  }
  if (a3)
  {
    CFAllocatorRef v8 = CFGetAllocator(a1);
    ElementCFDataRef Data = (const UInt8 *)PRGSequencer::GetElementData(a1[3], *(_DWORD *)(v15 + 32));
    CFDataRef v10 = CFDataCreate(v8, ElementData, *(unsigned int *)(v15 + 28));
    if (!v10) {
      return 2;
    }
  }
  else
  {
    CFDataRef v10 = 0;
  }
  if (a4)
  {
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFDataRef v12 = CFDataCreate(v11, (const UInt8 *)(v14 + 524), 1536);
    if (!v12)
    {
      uint64_t DownloadItem = 2;
      if (!v10) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else
  {
    CFDataRef v12 = 0;
  }
  if (a3) {
    *a3 = CFRetain(v10);
  }
  if (a4)
  {
    uint64_t DownloadItem = 0;
    *a4 = CFRetain(v12);
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t DownloadItem = 0;
  if (v10) {
LABEL_15:
  }
    CFRelease(v10);
LABEL_16:
  if (v12) {
    CFRelease(v12);
  }
  return DownloadItem;
}

uint64_t _FlsParserCopyInjectedItem(PRGSequencer **a1, int a2, CFDataRef *a3)
{
  ElementStructure = PRGSequencer::FindElementStructure(a1[3], a2, 0);
  if (ElementStructure)
  {
    CFAllocatorRef v11 = ElementStructure;
    ElementCFDataRef Data = (const UInt8 *)PRGSequencer::GetElementData(a1[3], ElementStructure[6]);
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFDataRef v14 = CFDataCreate(v13, ElementData, v11[5]);
    if (v14)
    {
      CFDataRef v15 = v14;
      uint64_t result = 0;
      *a3 = v15;
    }
    else
    {
      return 2;
    }
  }
  else
  {
    AMAuthInstallLog(6, (uint64_t)"_FlsParserCopyInjectedItem", (uint64_t)"not found in this file", v6, v7, v8, v9, v10, v17);
    return 1;
  }
  return result;
}

uint64_t FlsParserReplaceEbl(uint64_t a1, const __CFData *a2)
{
  ElementStructure = PRGSequencer::FindElementStructure(*(PRGSequencer **)(a1 + 24), 19, 0);
  if (ElementStructure)
  {
    PRGSequencer::RemoveElement(*(void ***)(a1 + 24), ElementStructure);
    return _FlsParserSetInjectedItem(a1, 19, a2);
  }
  else
  {
    return _FlsParserReplaceDownloadItem(a1, 3, a2);
  }
}

uint64_t _FlsParserSetInjectedItem(uint64_t a1, int a2, const __CFData *a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t Element = PRGSequencer::CreateElement(*(PRGSequencer **)(a1 + 24), a2);
  if (Element)
  {
    uint64_t v7 = (char *)Element;
    uint64_t v8 = *(PRGSequencer **)(a1 + 24);
    BytePtr = CFDataGetBytePtr(a3);
    int v10 = PRGSequencer::RegisterElementData(v8, BytePtr);
    if (v10 != -1)
    {
      int v11 = v10;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), a3);
      *(_DWORD *)uint64_t v7 = a2;
      *(void *)(v7 + 4) = 32;
      int Length = CFDataGetLength(a3);
      uint64_t result = 0;
      *((_DWORD *)v7 + 5) = Length;
      *((_DWORD *)v7 + 6) = v11;
      return result;
    }
    PRGSequencer::RemoveElement(*(void ***)(a1 + 24), v7);
  }
  return 2;
}

uint64_t _FlsParserReplaceDownloadItem(uint64_t a1, int a2, const __CFData *a3)
{
  uint64_t v11 = 0;
  if (_FlsParserFindDownloadItem(a1, a2, &v11, 0)) {
    return 1;
  }
  uint64_t v6 = *(PRGSequencer **)(a1 + 24);
  BytePtr = CFDataGetBytePtr(a3);
  int v8 = PRGSequencer::RegisterElementData(v6, BytePtr);
  if (v8 == -1) {
    return 2;
  }
  int v9 = v8;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), a3);
  *(_DWORD *)(v11 + 32) = v9;
  int Length = CFDataGetLength(a3);
  uint64_t result = 0;
  *(_DWORD *)(v11 + 28) = Length;
  return result;
}

uint64_t FlsParserCopyEbl(PRGSequencer **a1, void *a2)
{
  CFTypeRef v13 = 0;
  if (_FlsParserCopyDownloadItem(a1, 3, &v13, 0)
    && (uint64_t v4 = _FlsParserCopyInjectedItem(a1, 19, (CFDataRef *)&v13), v4))
  {
    uint64_t v10 = v4;
    AMAuthInstallLog(3, (uint64_t)"FlsParserCopyEbl", (uint64_t)"failed to copy EBL", v5, v6, v7, v8, v9, v12);
  }
  else
  {
    uint64_t v10 = 0;
    *a2 = v13;
  }
  return v10;
}

uint64_t FlsParserCopyFlashPsi(PRGSequencer **a1, CFTypeRef *a2, CFTypeRef *a3)
{
  return _FlsParserCopyDownloadItem(a1, 2, a2, a3);
}

uint64_t FlsParserReplaceFlashPsi(uint64_t a1, const __CFData *a2)
{
  return _FlsParserReplaceDownloadItem(a1, 2, a2);
}

uint64_t FlsParserCopyModemStack(PRGSequencer **a1, CFTypeRef *a2, CFTypeRef *a3)
{
  return _FlsParserCopyDownloadItem(a1, 4, a2, a3);
}

uint64_t FlsParserReplaceRamPsi(uint64_t a1, const __CFData *a2)
{
  ElementStructure = PRGSequencer::FindElementStructure(*(PRGSequencer **)(a1 + 24), 18, 0);
  if (ElementStructure)
  {
    PRGSequencer::RemoveElement(*(void ***)(a1 + 24), ElementStructure);
    return _FlsParserSetInjectedItem(a1, 18, a2);
  }
  else
  {
    return _FlsParserReplaceDownloadItem(a1, 1, a2);
  }
}

uint64_t FlsParserCopyAsData(PRGSequencer **a1, CFTypeRef *a2)
{
  memset(length, 0, sizeof(length));
  CFAllocatorRef v4 = AMAuthInstallSupportCopyAllocator();
  PRGSequencer::WriteToBuffer(a1[3], (char **)&length[1], length);
  if (*(void *)&length[1]
    && (CFAllocatorRef v5 = CFGetAllocator(a1),
        (CFDataRef v6 = CFDataCreateWithBytesNoCopy(v5, *(const UInt8 **)&length[1], length[0], v4)) != 0))
  {
    CFDataRef v7 = v6;
    *a2 = CFRetain(v6);
    CFRelease(v7);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 2;
  }
  SafeRelease(v4);
  return v8;
}

void _FlsParserFinalize(const void *a1)
{
  if (!a1) {
    _FlsParserFinalize();
  }
  uint64_t v2 = (PRGSequencer *)*((void *)a1 + 3);
  if (v2)
  {
    PRGSequencer::~PRGSequencer(v2);
    operator delete(v3);
  }
  CFRelease(*((CFTypeRef *)a1 + 2));
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
}

CFStringRef _FlsParserCopyFormattingDescription(const void *a1, const __CFDictionary *a2)
{
  if (!a1) {
    _FlsParserCopyFormattingDescription();
  }
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<FlsParser %p>", a1);
}

CFStringRef _FlsParserCopyDebugDescription(const void *a1)
{
  if (!a1) {
    _FlsParserCopyDebugDescription();
  }
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FlsParser %p>", a1);
}

uint64_t _FlsParserFindDownloadItem(uint64_t a1, int a2, void *a3, void *a4)
{
  ElementStructure = PRGSequencer::FindElementStructure(*(PRGSequencer **)(a1 + 24), 16, 0);
  if (!ElementStructure)
  {
    char v17 = "no toc found in this file";
    goto LABEL_8;
  }
  uint64_t v14 = ElementStructure[3];
  ElementCFDataRef Data = PRGSequencer::GetElementData(*(PRGSequencer **)(a1 + 24), ElementStructure[4]);
  if (!v14)
  {
LABEL_6:
    char v17 = "not found in this file";
    goto LABEL_8;
  }
  uint64_t v16 = (_DWORD *)(ElementData + 4);
  while (*v16 != a2)
  {
    v16 += 36;
    if (!--v14) {
      goto LABEL_6;
    }
  }
  int v19 = *(v16 - 1);
  if (a3)
  {
    uint64_t v20 = PRGSequencer::FindElementStructure(*(PRGSequencer **)(a1 + 24), 12, *(v16 - 1));
    if (!v20)
    {
      char v17 = "missing download data";
      goto LABEL_8;
    }
    *a3 = v20;
  }
  if (a4)
  {
    uint64_t v21 = PRGSequencer::FindElementStructure(*(PRGSequencer **)(a1 + 24), 15, v19);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t result = 0;
      *a4 = v22;
      return result;
    }
    char v17 = "missing security pack";
LABEL_8:
    AMAuthInstallLog(3, (uint64_t)"_FlsParserFindDownloadItem", (uint64_t)v17, v9, v10, v11, v12, v13, v23);
    return 1;
  }
  return 0;
}

void IFWD_MemoryStream::IFWD_MemoryStream(IFWD_MemoryStream *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = 0;
  *((void *)this + 2) = 0;
}

void IFWD_MemoryStream::Clear(IFWD_MemoryStream *this)
{
  CFAllocatorRef v2 = *(void **)this;
  if (v2)
  {
    operator delete[](v2);
    *(void *)this = 0;
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 2) = 0;
  }
}

void IFWD_MemoryStream::~IFWD_MemoryStream(IFWD_MemoryStream *this)
{
  CFAllocatorRef v2 = *(void **)this;
  if (v2)
  {
    operator delete[](v2);
    *(void *)this = 0;
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 2) = 0;
  }
}

void IFWD_MemoryStream::SetSize(IFWD_MemoryStream *this, int a2)
{
  if (a2 <= 0)
  {
    uint64_t v9 = *(void **)this;
    if (*(void *)this)
    {
      operator delete[](v9);
      *(void *)this = 0;
      *((void *)this + 2) = 0;
      *((_DWORD *)this + 2) = 0;
    }
  }
  else
  {
    int v4 = *((_DWORD *)this + 2);
    if (a2 != v4)
    {
      CFAllocatorRef v5 = (char *)operator new[]((a2 + 1));
      CFDataRef v6 = v5;
      CFDataRef v7 = *(void **)this;
      if (*(void *)this)
      {
        int v8 = a2;
        if (a2 > v4)
        {
          bzero(&v5[v4], a2 - v4);
          int v8 = v4;
        }
        memcpy(v6, v7, v8);
        operator delete[](v7);
      }
      else
      {
        bzero(v5, a2);
      }
      *((_DWORD *)this + 2) = a2;
      *(void *)this = v6;
      *((void *)this + 2) = v6;
    }
  }
}

void image3Discard(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      if (*(void *)v2)
      {
        if ((*(unsigned char *)(v2 + 10) & 4) != 0)
        {
          image3Free(*(void **)v2);
          uint64_t v2 = *a1;
        }
      }
      image3Free((void *)v2);
      *a1 = 0;
    }
  }
}

uint64_t image3Finalize(uint64_t a1, char **a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v23 = 0;
  int8x16_t v24 = 0uLL;
  int v25 = 0;
  size_t __n = 0;
  __srCC_SHA256_CTX c = 0;
  size_t v18 = 0;
  int v19 = 0;
  if (!a4) {
    goto LABEL_12;
  }
  uint64_t result = image3AdvanceCursorWithZeroPad((char **)a1, (56 - *(_DWORD *)(a1 + 24)) & 0x3F);
  if (!result)
  {
    uint64_t v10 = *(char **)a1;
    unsigned int v11 = *(_DWORD *)(a1 + 24);
    *((_DWORD *)v10 + 3) = v11 + a5;
    uint64_t v12 = v10 + 12;
    CC_LONG v13 = v11 + 8;
    if (a5)
    {
      unint64_t v23 = __PAIR64__(v11, a5);
      uint64_t v14 = &v23;
      image3SHA1Partial(v12, v13, &v24);
      uint64_t v15 = 28;
    }
    else
    {
      uint64_t v14 = (unint64_t *)v22;
      image3SHA1Generate(v12, v13, v22);
      uint64_t v15 = 20;
    }
    uint64_t result = image3PKISignHash((uint64_t)v14, v15, &__src, &__n, &v19, &v18);
    if (!result)
    {
      if (!__n || (uint64_t result = image3SetTagStructure((char **)a1, 1397248840, __src, __n, 0), !result))
      {
        if (!v18 || (uint64_t result = image3SetTagStructure((char **)a1, 1128616532, v19, v18, 0), !result))
        {
          *(_DWORD *)(a1 + 8) |= 0x20000u;
LABEL_12:
          uint64_t result = 0;
          uint64_t v16 = *(char **)a1;
          *((_DWORD *)v16 + 2) = *(_DWORD *)(a1 + 24);
          uint64_t v17 = (*(_DWORD *)(a1 + 24) + 20);
          *((_DWORD *)v16 + 1) = v17;
          *a2 = v16;
          *a3 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t image3AdvanceCursorWithZeroPad(char **a1, int a2)
{
  if ((*((unsigned char *)a1 + 10) & 2) != 0) {
    return 30;
  }
  uint64_t v4 = *((int *)a1 + 6);
  uint64_t v3 = *((int *)a1 + 7);
  LODWORD(v5) = v4 + a2;
  *((_DWORD *)a1 + 6) = v4 + a2;
  CFDataRef v6 = *a1;
  if (v3 != -1)
  {
    *(_DWORD *)&v6[v3 + 24] = v5 - v3;
    LODWORD(v5) = *((_DWORD *)a1 + 6);
  }
  uint64_t v5 = (int)v5;
  unint64_t v7 = (int)v5 + 20;
  if (v7 <= (unint64_t)a1[2]) {
    goto LABEL_7;
  }
  CFDataRef v6 = (char *)realloc(v6, (int)v5 + 20);
  if (v6)
  {
    *a1 = v6;
    a1[2] = (char *)v7;
    uint64_t v5 = *((int *)a1 + 6);
LABEL_7:
    bzero(&v6[v4 + 20], v5 - v4);
    uint64_t result = 0;
    *((_DWORD *)*a1 + 2) = *((_DWORD *)a1 + 6);
    return result;
  }
  return 12;
}

uint64_t image3SetTagStructure(char **a1, int a2, void *__src, size_t __n, int a5)
{
  if ((*((unsigned char *)a1 + 10) & 2) != 0) {
    return 30;
  }
  if (a5)
  {
    uint64_t v9 = *((int *)a1 + 7);
    int v10 = (a5 + *((_DWORD *)a1 + 6) / a5 * a5 - *((_DWORD *)a1 + 6)) % a5 + *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v10;
    unsigned int v11 = *a1;
    if (v9 != -1) {
      *(_DWORD *)&v11[v9 + 24] = v10 - v9;
    }
  }
  else
  {
    unsigned int v11 = *a1;
  }
  if ((__n & 0xF) != 0) {
    size_t v13 = 16 - (__n & 0xF);
  }
  else {
    size_t v13 = 0;
  }
  uint64_t v14 = *((int *)a1 + 6);
  size_t v15 = __n + v13 + v14 + 32;
  if (v15 > (unint64_t)a1[2])
  {
    unsigned int v11 = (char *)realloc(v11, __n + v13 + v14 + 32);
    if (!v11) {
      return 12;
    }
    *a1 = v11;
    a1[2] = (char *)v15;
    uint64_t v14 = *((int *)a1 + 6);
  }
  uint64_t v16 = &v11[v14];
  if (((v13 + __n) & 3) != 0) {
    int v17 = ((v13 + __n) & 0xFFFFFFFC) + 16;
  }
  else {
    int v17 = v13 + __n + 12;
  }
  *((_DWORD *)v16 + 5) = a2;
  *((_DWORD *)v16 + 6) = v17;
  *((_DWORD *)v16 + 7) = __n;
  memcpy(v16 + 32, __src, __n);
  bzero(&v16[__n + 32], v13);
  uint64_t result = 0;
  int v18 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 7) = v18;
  int v19 = *((_DWORD *)v16 + 6) + v18;
  *((_DWORD *)a1 + 6) = v19;
  *((_DWORD *)*a1 + 2) = v19;
  return result;
}

uint64_t image3InstantiateFromBuffer(void *a1, _DWORD *a2, unint64_t a3, char a4)
{
  if (a3 < 0x14) {
    return 22;
  }
  if (*a2 != 1231906611) {
    return 22;
  }
  unint64_t v6 = a2[2];
  if (a3 - 20 < v6 || a2[3] > v6 || v6 + 20 > a2[1]) {
    return 22;
  }
  int v10 = image3Malloc(0x28uLL);
  if (!v10) {
    return 12;
  }
  unsigned int v11 = v10;
  *((_DWORD *)v10 + 2) = 1;
  v10[4] = 0;
  if (a2[3])
  {
    *((_DWORD *)v10 + 2) = 131073;
    if ((a4 & 1) == 0)
    {
      *int v10 = a2;
      void v10[2] = a3;
LABEL_21:
      uint64_t result = 0;
      *a1 = v11;
      return result;
    }
    goto LABEL_19;
  }
  *((_DWORD *)v10 + 6) = a2[2];
  *((_DWORD *)v10 + 7) = -1;
  unsigned int v12 = a2[2];
  if (!v12)
  {
LABEL_19:
    size_t v16 = a2[2] + 20;
    v11[2] = v16;
    int v17 = image3Malloc(v16);
    *unsigned int v11 = v17;
    if (v17)
    {
      memcpy(v17, a2, v11[2]);
      *((_DWORD *)v11 + 2) |= 0x40000u;
      goto LABEL_21;
    }
    image3Free(v11);
    return 12;
  }
  unsigned int v13 = 0;
  while (1)
  {
    unsigned int v14 = v13;
    unsigned int v15 = *(_DWORD *)((char *)a2 + v13 + 24);
    v13 += v15;
    if (v13 > v12 || v15 <= 0xB) {
      break;
    }
    if (v13 == v12)
    {
      *((_DWORD *)v10 + 7) = v14;
      goto LABEL_19;
    }
  }
  image3Free(v10);
  return 22;
}

uint64_t image3GetTagStruct(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 8);
  if (!v5) {
    return 2;
  }
  unint64_t v6 = (_DWORD *)(*(void *)a1 + 20);
  unint64_t v7 = (unint64_t)v6 + v5;
  while (1)
  {
    int v8 = v6 + 3;
    if ((unint64_t)(v6 + 3) > v7) {
      return 22;
    }
    uint64_t v9 = v6[2];
    if ((unint64_t)v8 + v9 > v7) {
      return 22;
    }
    if (a2 == -1 || *v6 == a2) {
      break;
    }
LABEL_9:
    unint64_t v10 = v6[1];
    if (v9 + 12 > v10) {
      return 22;
    }
    unint64_t v6 = (_DWORD *)((char *)v6 + v10);
    if ((unint64_t)v6 >= v7) {
      return 2;
    }
  }
  if (a5)
  {
    --a5;
    goto LABEL_9;
  }
  if (a4)
  {
    if (*a4 && *a4 != v9) {
      return 22;
    }
    *a4 = v9;
  }
  uint64_t result = 0;
  *a3 = v8;
  return result;
}

uint64_t image3GetTagSignedNumber(uint64_t a1, int a2, void *a3, int a4)
{
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t result = image3GetTagStruct(a1, a2, &v8, &v7, a4);
  if (!result)
  {
    if (v7 == 8)
    {
      uint64_t v6 = *(void *)v8;
      goto LABEL_6;
    }
    if (v7 == 4)
    {
      uint64_t v6 = *v8;
LABEL_6:
      uint64_t result = 0;
      *a3 = v6;
      return result;
    }
    return 22;
  }
  return result;
}

uint64_t image3GetTagString(uint64_t a1, int a2, void *a3, int a4)
{
  unint64_t v10 = 0;
  unsigned int v11 = 0;
  uint64_t result = image3GetTagStruct(a1, a2, &v11, &v10, a4);
  if (!result)
  {
    if (v10 >= 8 && (uint64_t v6 = v11, v7 = *v11, v10 >= v7 + 4))
    {
      int v8 = image3Malloc(v7 + 1);
      if (v8)
      {
        uint64_t v9 = v8;
        memcpy(v8, v6 + 1, v7);
        uint64_t result = 0;
        v9[v7] = 0;
        *a3 = v9;
      }
      else
      {
        return 12;
      }
    }
    else
    {
      return 22;
    }
  }
  return result;
}

uint64_t PRGH_GetLongFromLong(uint64_t result)
{
  unsigned int v1 = bswap32(result);
  if (mach_endian == 2) {
    return v1;
  }
  else {
    return result;
  }
}

uint64_t PRGH_GetEndian(char *a1)
{
  if (*(_DWORD *)a1 == 1000) {
    return 1;
  }
  else {
    return 2 * (*(_DWORD *)a1 == -402456576);
  }
}

uint64_t PRGH_FileCheck(char *a1)
{
  int v1 = *(_DWORD *)a1;
  int v2 = 2 * (*(_DWORD *)a1 == -402456576);
  if (*(_DWORD *)a1 == 1000) {
    int v2 = 1;
  }
  mach_endian = v2;
  unsigned int v3 = *(_DWORD *)a1;
  unsigned int v4 = bswap32(*(_DWORD *)a1);
  if (v1 == -402456576) {
    unsigned int v3 = v4;
  }
  if (v3 != 1000) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = bswap32(*((_DWORD *)a1 + 1));
  unsigned int v6 = v1 == -402456576 ? v5 : *((_DWORD *)a1 + 1);
  if (v6 != 40) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v7 = *((_DWORD *)a1 + 2);
  unsigned int v8 = bswap32(v7);
  if (v1 == -402456576) {
    unsigned int v7 = v8;
  }
  if (v7) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v11 = *((_DWORD *)a1 + 3);
  unsigned int v12 = bswap32(v11);
  if (v1 == -402456576) {
    unsigned int v11 = v12;
  }
  uint64_t v9 = 0xFFFFFFFFLL;
  if ((_BYTE)v11 && (v11 & 0xFE) <= 5)
  {
    unsigned int v13 = *((_DWORD *)a1 + 4);
    unsigned int v14 = bswap32(v13);
    if (v1 == -402456576) {
      unsigned int v13 = v14;
    }
    if (v13 == 1765222897) {
      return v11;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v9;
}

uint64_t PRGH_VersionCheck(char *a1, int a2, unsigned int a3)
{
  unsigned int v11 = 0;
  if (!PRGH_GetElementIndex(a1, a2, 0, &v11)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = &a1[v11];
  unsigned int v6 = *((_DWORD *)v5 + 1);
  unsigned int v7 = bswap32(v6);
  if (mach_endian == 2) {
    unsigned int v6 = v7;
  }
  if (v6 != 20) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = *((_DWORD *)v5 + 3);
  unsigned int v9 = bswap32(v8);
  if (mach_endian == 2) {
    uint64_t result = v9;
  }
  else {
    uint64_t result = v8;
  }
  if (result <= a3 && HIWORD(a3) <= WORD1(result)) {
    return 0;
  }
  return result;
}

uint64_t PRGH_GetElementIndex(char *a1, int a2, int a3, unsigned int *a4)
{
  unsigned int v4 = 0;
  *a4 = -1;
  unsigned int v5 = (unsigned int *)a1;
  while (1)
  {
    unsigned int v6 = *v5;
    unsigned int v7 = bswap32(*v5);
    if (mach_endian == 2) {
      unsigned int v6 = v7;
    }
    if (v6 == a2)
    {
      unsigned int v8 = v5[2];
      unsigned int v9 = bswap32(v8);
      if (mach_endian == 2) {
        unsigned int v8 = v9;
      }
      if (v8 == a3) {
        break;
      }
    }
    unsigned int v10 = v5[1];
    if (v10)
    {
      unsigned int v11 = bswap32(v10);
      if (mach_endian == 2) {
        unsigned int v10 = v11;
      }
      v4 += v10;
      unsigned int v5 = (unsigned int *)&a1[v4];
      if (v6 != 2) {
        continue;
      }
    }
    return 0;
  }
  *a4 = v4;
  return 1;
}

BOOL PRGH_GetNextElementIndex(char *a1, unsigned int *a2)
{
  uint64_t v2 = (int)*a2;
  *a2 = -1;
  unsigned int v3 = *(_DWORD *)&a1[v2];
  unsigned int v4 = bswap32(v3);
  if (mach_endian == 2) {
    unsigned int v3 = v4;
  }
  if (v3 != 2)
  {
    unsigned int v5 = *(_DWORD *)&a1[v2 + 4];
    unsigned int v6 = bswap32(v5);
    if (mach_endian == 2) {
      unsigned int v5 = v6;
    }
    *a2 = v5 + v2;
  }
  return v3 != 2;
}

uint64_t PRGH_WriteElement(IFWD_MemoryStream *a1, unsigned int a2, unsigned int a3, char *a4, unsigned int a5, const void *a6)
{
  unsigned int v11 = a5 + 12;
  uint64_t v12 = *((int *)a1 + 2);
  unsigned int v13 = v12 + a5 + 12;
  IFWD_MemoryStream::SetSize(a1, v13);
  size_t v16 = (unsigned char *)(*((void *)a1 + 2) + v12);
  int v17 = mach_endian;
  if (mach_endian == 2)
  {
    CalledByWrite = 1;
    PRGH_SwapElementEndian((int8x16_t *)(a4 - 12), a2, (uint64_t)a6, v14, v15);
    CalledByWrite = 0;
    int v17 = mach_endian;
  }
  int v18 = 0;
  size_t v19 = a5;
  unsigned int v20 = bswap32(v13);
  if (v17 != 2) {
    unsigned int v20 = v13;
  }
  unsigned int v21 = 0;
  switch(a2)
  {
    case 0xCu:
      *((_DWORD *)a4 + 5) = 0;
      unint64_t v23 = a4 + 16;
      uint64_t v22 = a4 + 24;
      goto LABEL_9;
    case 0x10u:
      unsigned int v40 = *(_DWORD *)a4;
      unsigned int v41 = bswap32(*(_DWORD *)a4);
      if (v17 == 2) {
        unsigned int v40 = v41;
      }
      unsigned int v25 = 144 * v40;
      *((_DWORD *)a4 + 1) = 0;
      *((_DWORD *)a4 + 2) = v20;
      int v18 = 1;
      goto LABEL_13;
    case 0x12u:
    case 0x13u:
      *((_DWORD *)a4 + 3) = 0;
      unint64_t v23 = a4 + 8;
      uint64_t v22 = a4 + 16;
      goto LABEL_9;
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
      *((_DWORD *)a4 + 1) = 0;
      uint64_t v22 = a4 + 8;
      unint64_t v23 = a4;
LABEL_9:
      unsigned int v21 = *(_DWORD *)v23;
      *(_DWORD *)uint64_t v22 = v20;
      int v18 = 1;
      break;
    default:
      break;
  }
  unsigned int v24 = bswap32(v21);
  if (v17 == 2) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = v21;
  }
LABEL_13:
  unsigned int v26 = a2 >> 8;
  unsigned int v27 = HIBYTE(a2);
  BOOL v28 = v17 == 2;
  if (v17 == 2) {
    char v29 = a2;
  }
  else {
    char v29 = HIBYTE(a2);
  }
  if (v28) {
    char v30 = BYTE2(a2);
  }
  else {
    char v30 = BYTE1(a2);
  }
  if (!v28) {
    LOBYTE(v27) = a2;
  }
  unsigned char *v16 = v27;
  v16[1] = v30;
  if (!v28) {
    LOBYTE(v26) = BYTE2(a2);
  }
  v16[2] = v26;
  v16[3] = v29;
  if (v18)
  {
    char v31 = v25 + v11;
    unsigned int v32 = (v25 + v11) >> 8;
    if (mach_endian == 2) {
      char v33 = (v25 + v11) >> 24;
    }
    else {
      char v33 = v25 + v11;
    }
    if (mach_endian == 2) {
      char v34 = (v25 + v11) >> 16;
    }
    else {
      char v34 = (unsigned __int16)(v25 + v11) >> 8;
    }
    if (mach_endian != 2)
    {
      LOBYTE(v32) = (v25 + v11) >> 16;
      char v31 = (v25 + v11) >> 24;
    }
  }
  else
  {
    unsigned int v32 = v11 >> 8;
    if (mach_endian == 2) {
      char v33 = HIBYTE(v11);
    }
    else {
      char v33 = v11;
    }
    if (mach_endian == 2) {
      char v34 = BYTE2(v11);
    }
    else {
      char v34 = BYTE1(v11);
    }
    if (mach_endian == 2)
    {
      char v31 = v11;
    }
    else
    {
      LOBYTE(v32) = BYTE2(v11);
      char v31 = HIBYTE(v11);
    }
  }
  v16[4] = v33;
  void v16[5] = v34;
  v16[6] = v32;
  v16[7] = v31;
  unsigned int v35 = a3 >> 8;
  if (mach_endian == 2) {
    char v36 = a3;
  }
  else {
    char v36 = HIBYTE(a3);
  }
  if (mach_endian == 2) {
    char v37 = BYTE1(a3);
  }
  else {
    char v37 = BYTE2(a3);
  }
  if (mach_endian == 2)
  {
    LOBYTE(v35) = BYTE2(a3);
    char v38 = HIBYTE(a3);
  }
  else
  {
    char v38 = a3;
  }
  v16[8] = v38;
  v16[9] = v35;
  v16[10] = v37;
  v16[11] = v36;
  memcpy(v16 + 12, a4, v19);
  if (v18)
  {
    IFWD_MemoryStream::SetSize(a1, *((_DWORD *)a1 + 2) + v25);
    memcpy((void *)(*((void *)a1 + 2) + v12 + (int)v11), a6, v25);
  }
  return 0;
}

uint64_t PRGH_SwapElementEndian(int8x16_t *a1, int a2, uint64_t a3, uint8x8_t a4, uint8x8_t a5)
{
  switch(a2)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 26:
    case 27:
    case 28:
    case 30:
      for (uint64_t i = 0; i != 5; ++i)
      {
        a4.i32[0] = a1->i32[i];
        int16x8_t v6 = (int16x8_t)vmovl_u8(a4);
        *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
        a4 = (uint8x8_t)vmovn_s16(v6);
        a1->i32[i] = a4.i32[0];
      }
      return 0;
    case 11:
      swap_MemoryMapElementStructType_endian((uint64_t)a1, a4);
      return 0;
    case 12:
      swap_DownloadDataElementStructType_endian((uint64_t)a1, a4);
      return 0;
    case 13:
      swap_HardwareElementStructType_endian((uint64_t)a1, a4);
      return 0;
    case 14:
      for (uint64_t j = 0; j != 287; ++j)
      {
        a4.i32[0] = a1->i32[j];
        int16x8_t v11 = (int16x8_t)vmovl_u8(a4);
        *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
        a4 = (uint8x8_t)vmovn_s16(v11);
        a1->i32[j] = a4.i32[0];
      }
      return 0;
    case 15:
      swap_SecurityElementStructType_endian(a1, a4);
      return 0;
    case 16:
      swap_TocElementStructType_endian((uint64_t)a1, a3, a4, a5);
      return 0;
    case 17:
      for (uint64_t k = 0; k != 7; ++k)
      {
        a4.i32[0] = a1->i32[k];
        int16x8_t v13 = (int16x8_t)vmovl_u8(a4);
        *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
        a4 = (uint8x8_t)vmovn_s16(v13);
        a1->i32[k] = a4.i32[0];
      }
      return 0;
    case 18:
    case 19:
      swap_InjectionElementStructType_endian((uint64_t)a1, a4);
      return 0;
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      swap_VersionDataElementStructType_endian((uint64_t)a1, a4);
      return 0;
    case 29:
      swap_IndirectDownloadDataElementStructType_endian((uint64_t)a1, a4);
      return 0;
    default:
      if (a2 != 1000) {
        return 1;
      }
      for (uint64_t m = 0; m != 10; ++m)
      {
        a4.i32[0] = a1->i32[m];
        int16x8_t v9 = (int16x8_t)vmovl_u8(a4);
        *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
        a4 = (uint8x8_t)vmovn_s16(v9);
        a1->i32[m] = a4.i32[0];
      }
      return 0;
  }
}

uint64_t swap_VersionDataElementStructType_endian(uint64_t a1, uint8x8_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    a2.i32[0] = *(_DWORD *)(a1 + i);
    int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
    *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
    a2 = (uint8x8_t)vmovn_s16(v3);
    *(_DWORD *)(a1 + i) = a2.i32[0];
  }
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  int16x8_t v4 = (int16x8_t)vmovl_u8(a2);
  *(int16x4_t *)v4.i8 = vrev64_s16(*(int16x4_t *)v4.i8);
  *(int8x8_t *)v4.i8 = vmovn_s16(v4);
  *(_DWORD *)(a1 + 12) = v4.i32[0];
  v4.i32[0] = *(_DWORD *)(a1 + 20);
  int16x8_t v5 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  *(_DWORD *)(a1 + 20) = vmovn_s16(v5).u32[0];
  return 1;
}

uint64_t swap_InjectionElementStructType_endian(uint64_t a1, uint8x8_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    a2.i32[0] = *(_DWORD *)(a1 + i);
    int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
    *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
    a2 = (uint8x8_t)vmovn_s16(v3);
    *(_DWORD *)(a1 + i) = a2.i32[0];
  }
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  if (CalledByWrite)
  {
    *(_DWORD *)(a1 + 12) = v4 << 16;
    int v5 = *(_DWORD *)(a1 + 16) << 24;
  }
  else
  {
    *(_DWORD *)(a1 + 12) = HIWORD(v4);
    int v5 = *(unsigned __int8 *)(a1 + 19);
  }
  *(_DWORD *)(a1 + 16) = v5;
  a2.i32[0] = *(_DWORD *)(a1 + 20);
  int16x8_t v6 = (int16x8_t)vmovl_u8(a2);
  *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
  *(int8x8_t *)v6.i8 = vmovn_s16(v6);
  *(_DWORD *)(a1 + 20) = v6.i32[0];
  v6.i32[0] = *(_DWORD *)(a1 + 28);
  int16x8_t v7 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
  *(int16x4_t *)v7.i8 = vrev64_s16(*(int16x4_t *)v7.i8);
  *(_DWORD *)(a1 + 28) = vmovn_s16(v7).u32[0];
  return 1;
}

uint64_t swap_DownloadDataElementStructType_endian(uint64_t a1, uint8x8_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    a2.i32[0] = *(_DWORD *)(a1 + i);
    int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
    *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
    a2 = (uint8x8_t)vmovn_s16(v3);
    *(_DWORD *)(a1 + i) = a2.i32[0];
  }
  uint8x8_t v4 = (uint8x8_t)vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(uint8x8_t *)(a1 + 12) = v4;
  v4.i32[0] = *(_DWORD *)(a1 + 20);
  int16x8_t v5 = (int16x8_t)vmovl_u8(v4);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  uint8x8_t v6 = (uint8x8_t)vmovn_s16(v5);
  *(_DWORD *)(a1 + 20) = v6.i32[0];
  if (CalledByWrite) {
    int v7 = *(_DWORD *)(a1 + 24) << 16;
  }
  else {
    int v7 = (unint64_t)*(unsigned int *)(a1 + 24) >> 16;
  }
  *(_DWORD *)(a1 + 24) = v7;
  v6.i32[0] = *(_DWORD *)(a1 + 28);
  int16x8_t v8 = (int16x8_t)vmovl_u8(v6);
  *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
  *(int8x8_t *)v8.i8 = vmovn_s16(v8);
  *(_DWORD *)(a1 + 28) = v8.i32[0];
  v8.i32[0] = *(_DWORD *)(a1 + 36);
  int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
  *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
  *(_DWORD *)(a1 + 36) = vmovn_s16(v9).u32[0];
  return 1;
}

uint64_t swap_IndirectDownloadDataElementStructType_endian(uint64_t a1, uint8x8_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    a2.i32[0] = *(_DWORD *)(a1 + i);
    int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
    *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
    a2 = (uint8x8_t)vmovn_s16(v3);
    *(_DWORD *)(a1 + i) = a2.i32[0];
  }
  uint8x8_t v4 = (uint8x8_t)vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(uint8x8_t *)(a1 + 12) = v4;
  v4.i32[0] = *(_DWORD *)(a1 + 20);
  int16x8_t v5 = (int16x8_t)vmovl_u8(v4);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  *(int8x8_t *)v5.i8 = vmovn_s16(v5);
  *(_DWORD *)(a1 + 20) = v5.i32[0];
  *(_DWORD *)(a1 + 24) <<= 16;
  v5.i32[0] = *(_DWORD *)(a1 + 28);
  int16x8_t v6 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v5.i8);
  *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
  *(int8x8_t *)v6.i8 = vmovn_s16(v6);
  *(_DWORD *)(a1 + 28) = v6.i32[0];
  v6.i32[0] = *(_DWORD *)(a1 + 36);
  int16x8_t v7 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
  *(int16x4_t *)v7.i8 = vrev64_s16(*(int16x4_t *)v7.i8);
  *(_DWORD *)(a1 + 36) = vmovn_s16(v7).u32[0];
  return 1;
}

uint64_t swap_HardwareElementStructType_endian(uint64_t a1, uint8x8_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    a2.i32[0] = *(_DWORD *)(a1 + i);
    int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
    *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
    a2 = (uint8x8_t)vmovn_s16(v3);
    *(_DWORD *)(a1 + i) = a2.i32[0];
  }
  *(int8x16_t *)(a1 + 12) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  *(int8x8_t *)(a1 + 28) = vrev32_s8(*(int8x8_t *)(a1 + 28));
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  BOOL v5 = v4 > 8;
  int v6 = (1 << v4) & 0x193;
  if (!v5 && v6 != 0)
  {
    for (uint64_t j = 0; j != 64; j += 32)
    {
      int16x8_t v9 = (char *)(a1 + 36 + j);
      int8x16x2_t v13 = vld2q_s8(v9);
      int8x16_t v10 = v13.val[0];
      vst2q_s8(v9, *(int8x16x2_t *)((char *)&v13 + 16));
    }
  }
  int16x8_t v11 = (char *)(a1 + 36);
  int8x16x4_t v14 = vld4q_s8(v11);
  v15.val[0] = v14.val[3];
  v15.val[1] = v14.val[2];
  v15.val[2] = v14.val[1];
  v15.val[3] = v14.val[0];
  vst4q_s8(v11, v15);
  return 1;
}

uint64_t swap_SecurityElementStructType_endian(int8x16_t *a1, uint8x8_t a2)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    a2.i32[0] = a1->i32[i];
    int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
    *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
    a2 = (uint8x8_t)vmovn_s16(v3);
    a1->i32[i] = a2.i32[0];
  }
  uint64_t v4 = 0;
  a2.i32[0] = a1[32].i32[3];
  int16x8_t v5 = (int16x8_t)vmovl_u8(a2);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  a1[32].i32[3] = vmovn_s16(v5).u32[0];
  int16x8_t v6 = (int16x8_t)vrev32q_s8(a1[46]);
  a1[46] = (int8x16_t)v6;
  int16x8_t v7 = a1 + 47;
  do
  {
    v6.i32[0] = v7->i32[v4];
    int16x8_t v6 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
    *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
    *(int8x8_t *)v6.i8 = vmovn_s16(v6);
    v7->i32[v4++] = v6.i32[0];
  }
  while (v4 != 5);
  uint64_t v8 = 0;
  int16x8_t v9 = &a1[48].i8[4];
  do
  {
    v6.i32[0] = *(_DWORD *)&v9[v8];
    int16x8_t v6 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
    *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
    *(int8x8_t *)v6.i8 = vmovn_s16(v6);
    *(_DWORD *)&v9[v8] = v6.i32[0];
    v8 += 4;
  }
  while (v8 != 20);
  for (uint64_t j = 0; j != 64; j += 4)
  {
    int16x8_t v11 = &a1[j + 49].i8[8];
    int8x16x4_t v21 = vld4q_s8(v11);
    v23.val[0] = v21.val[3];
    v23.val[1] = v21.val[2];
    v23.val[2] = v21.val[1];
    v23.val[3] = v21.val[0];
    vst4q_s8(v11, v23);
  }
  uint64_t v12 = 0;
  int8x16x2_t v13 = &a1[113].i8[8];
  do
  {
    int v14 = *(_DWORD *)&v13[v12];
    int16x8_t v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v21.val[0].i8);
    *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
    *(int8x8_t *)v21.val[0].i8 = vmovn_s16(v15);
    *(_DWORD *)&v13[v12] = v15.i32[0];
    v12 += 4;
  }
  while (v12 != 112);
  uint64_t v16 = 0;
  __int32 v17 = a1[120].i32[2];
  int16x8_t v18 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v21.val[0].i8);
  *(int16x4_t *)v18.i8 = vrev64_s16(*(int16x4_t *)v18.i8);
  a1[120].i32[2] = vmovn_s16(v18).u32[0];
  do
  {
    size_t v19 = &a1[v16 + 120].i8[12];
    int8x16x4_t v22 = vld4q_s8(v19);
    v24.val[0] = v22.val[3];
    v24.val[1] = v22.val[2];
    v24.val[2] = v22.val[1];
    v24.val[3] = v22.val[0];
    vst4q_s8(v19, v24);
    v16 += 4;
  }
  while (v16 != 8);
  return 1;
}

uint64_t swap_MemoryMapElementStructType_endian(uint64_t a1, uint8x8_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    a2.i32[0] = *(_DWORD *)(a1 + i);
    int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
    *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
    a2 = (uint8x8_t)vmovn_s16(v3);
    *(_DWORD *)(a1 + i) = a2.i32[0];
  }
  *(int8x16_t *)(a1 + 1612) = vrev32q_s8(*(int8x16_t *)(a1 + 1612));
  uint8x8_t v4 = (uint8x8_t)vrev32_s8(*(int8x8_t *)(a1 + 1628));
  *(uint8x8_t *)(a1 + 1628) = v4;
  v4.i32[0] = *(_DWORD *)(a1 + 1636);
  int16x8_t v5 = (int16x8_t)vmovl_u8(v4);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  *(_DWORD *)(a1 + 1636) = vmovn_s16(v5).u32[0];
  for (uint64_t j = 12; j != 1612; j += 32)
    *(int8x16_t *)(a1 + j) = vrev32q_s8(*(int8x16_t *)(a1 + j));
  return 1;
}

uint64_t swap_TocElementStructType_endian(uint64_t a1, uint64_t a2, uint8x8_t a3, uint8x8_t a4)
{
  for (uint64_t i = 0; i != 12; i += 4)
  {
    a3.i32[0] = *(_DWORD *)(a1 + i);
    int16x8_t v5 = (int16x8_t)vmovl_u8(a3);
    *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
    a3 = (uint8x8_t)vmovn_s16(v5);
    *(_DWORD *)(a1 + i) = a3.i32[0];
  }
  a3.i32[0] = *(_DWORD *)(a1 + 12);
  int16x8_t v6 = (int16x8_t)vmovl_u8(a3);
  *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
  uint8x8_t v7 = (uint8x8_t)vmovn_s16(v6);
  *(_DWORD *)(a1 + 12) = v7.i32[0];
  unsigned int v8 = bswap32(v7.u32[0]);
  if (mach_endian == 2) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v7.i32[0];
  }
  if (CalledByWrite) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v7.u32[0];
  }
  if (v10)
  {
    int16x8_t v11 = (__int32 *)(a2 + 12);
    do
    {
      uint8x8_t v12 = (uint8x8_t)vrev32_s8(*(int8x8_t *)(v11 - 3));
      *(uint8x8_t *)(v11 - 3) = v12;
      v12.i32[0] = *(v11 - 1);
      a4.i32[0] = *v11;
      int16x8_t v13 = (int16x8_t)vmovl_u8(v12);
      *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
      v7.i32[0] = vmovn_s16(v13).u32[0];
      int16x8_t v14 = (int16x8_t)vmovl_u8(a4);
      *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
      a4 = (uint8x8_t)vmovn_s16(v14);
      v7.i32[1] = a4.i32[0];
      *(uint8x8_t *)(v11 - 1) = v7;
      v11 += 36;
      --v10;
    }
    while (v10);
  }
  v7.i32[0] = *(_DWORD *)(a1 + 20);
  int16x8_t v15 = (int16x8_t)vmovl_u8(v7);
  *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
  *(_DWORD *)(a1 + 20) = vmovn_s16(v15).u32[0];
  return 1;
}

BOOL PRGSequencer::AddToGlobalStruct(PRGSequencer *this, char *a2)
{
  int v2 = *((_DWORD *)this + 812);
  if (v2 <= 199)
  {
    int LongFromLong = PRGH_GetLongFromLong(*(unsigned int *)a2);
    PRGSequencer::AllocateAndCopy(this, a2, LongFromLong);
  }
  return v2 < 200;
}

uint64_t PRGSequencer::AllocateAndCopy(PRGSequencer *this, char *a2, int a3)
{
  uint64_t v3 = *((int *)this + 812);
  if ((int)v3 > 199) {
    return 0;
  }
  switch(a3)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 26:
    case 27:
    case 28:
    case 30:
      unsigned int v8 = 20;
      size_t v9 = 20;
      goto LABEL_15;
    case 11:
      unsigned int v8 = 1640;
      size_t v9 = 1640;
      goto LABEL_15;
    case 12:
    case 29:
      unsigned int v8 = 40;
      size_t v9 = 40;
      goto LABEL_15;
    case 13:
      unsigned int v8 = 184;
      size_t v9 = 184;
      goto LABEL_15;
    case 14:
      unsigned int v8 = 1148;
      size_t v9 = 1148;
      goto LABEL_15;
    case 15:
      unsigned int v8 = 2060;
      size_t v9 = 2060;
      goto LABEL_15;
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      unsigned int v8 = 24;
      size_t v9 = 24;
      goto LABEL_15;
    case 17:
      unsigned int v8 = 28;
      size_t v9 = 28;
      goto LABEL_15;
    case 18:
    case 19:
      unsigned int v8 = 32;
      size_t v9 = 32;
LABEL_15:
      uint64_t v10 = (PRGSequencer *)malloc(v9);
      int16x8_t v11 = v10;
      break;
    default:
      if (a3 != 1000) {
        return 0;
      }
      unsigned int v8 = 40;
      uint64_t v10 = (PRGSequencer *)malloc(0x28uLL);
      int16x8_t v11 = v10;
      break;
  }
  *((void *)this + v3 + 6) = v11;
  if (a2)
  {
    memcpy(v11, a2, v8);
    unsigned int v12 = PRGSequencer::TamperDataAfterRead(this, a3, a2);
    if (*((_DWORD *)this + 814) == 2)
    {
      if ((v12 & 0x80000000) != 0 || *((_DWORD *)this + 813) <= (signed int)v12) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *((void *)this + v12 + 206);
      }
      PRGH_SwapElementEndian(*((int8x16_t **)this + *((int *)this + 812) + 6), a3, v15, v13, v14);
    }
  }
  else
  {
    PRGSequencer::InitializeElement(v10, (char *)v11, a3, v8);
    *int16x8_t v11 = a3;
    v11[1] = v8;
  }
  uint64_t v16 = (void (*)(void))*((void *)this + 2);
  int v17 = *((_DWORD *)this + 812);
  if (v16)
  {
    v16(*((void *)this + v17 + 6));
    int v17 = *((_DWORD *)this + 812);
  }
  *((_DWORD *)this + 812) = v17 + 1;
  return 1;
}

uint64_t PRGSequencer::TamperDataAfterRead(PRGSequencer *this, int a2, char *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  switch(a2)
  {
    case 12:
      uint64_t v3 = *((unsigned int *)this + 813);
      if ((int)v3 > 199)
      {
        uint64_t v3 = 0xFFFFFFFFLL;
      }
      else
      {
        *((void *)this + (int)v3 + 206) = a3 + 40;
        *((_DWORD *)this + 813) = v3 + 1;
      }
      *(_DWORD *)(*((void *)this + *((int *)this + 812) + 6) + 32) = v3;
      break;
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      uint64_t v3 = *((unsigned int *)this + 813);
      if ((int)v3 > 199)
      {
        uint64_t v3 = 0xFFFFFFFFLL;
      }
      else
      {
        *((void *)this + (int)v3 + 206) = a3 + 24;
        *((_DWORD *)this + 813) = v3 + 1;
      }
      *(_DWORD *)(*((void *)this + *((int *)this + 812) + 6) + 16) = v3;
      break;
    case 18:
    case 19:
      uint64_t v3 = *((unsigned int *)this + 813);
      if ((int)v3 > 199)
      {
        uint64_t v3 = 0xFFFFFFFFLL;
      }
      else
      {
        *((void *)this + (int)v3 + 206) = a3 + 32;
        *((_DWORD *)this + 813) = v3 + 1;
      }
      *(_DWORD *)(*((void *)this + *((int *)this + 812) + 6) + 24) = v3;
      break;
    default:
      return v3;
  }
  return v3;
}

uint64_t PRGSequencer::GetElementData(PRGSequencer *this, unsigned int a2)
{
  if (*((_DWORD *)this + 813) <= (signed int)a2) {
    return 0;
  }
  else {
    return *((void *)this + a2 + 206);
  }
}

void PRGSequencer::InitializeElement(PRGSequencer *this, char *a2, int a3, int a4)
{
  bzero(a2, a4);
  int32x2_t v6 = (int32x2_t)0x2000200020002;
  switch(a3)
  {
    case 3:
      goto LABEL_6;
    case 4:
    case 5:
      int32x2_t v6 = vdup_n_s32(0x20003u);
      goto LABEL_6;
    case 6:
    case 7:
    case 8:
    case 26:
    case 27:
    case 28:
    case 30:
      int32x2_t v6 = (int32x2_t)0x20000;
      goto LABEL_6;
    case 9:
      int32x2_t v6 = (int32x2_t)0x40000;
      goto LABEL_6;
    case 10:
      int32x2_t v6 = (int32x2_t)0x10000;
LABEL_6:
      *(int32x2_t *)(a2 + 12) = v6;
      break;
    case 11:
      for (uint64_t i = 12; i != 1612; i += 32)
        *(_DWORD *)&a2[i] = -1;
      break;
    default:
      return;
  }
}

uint64_t PRGSequencer::RegisterElementData(PRGSequencer *this, const void *a2)
{
  uint64_t result = *((unsigned int *)this + 813);
  if ((int)result > 199) {
    return 0xFFFFFFFFLL;
  }
  *((void *)this + (int)result + 206) = a2;
  *((_DWORD *)this + 813) = result + 1;
  return result;
}

_DWORD *PRGSequencer::FindElementStructure(PRGSequencer *this, int a2, int a3)
{
  int v3 = *((_DWORD *)this + 812);
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 != v4) {
    return 0;
  }
  if (v5 >= 0xC7) {
    int v5 = 199;
  }
  uint64_t v6 = (v5 + 1);
  for (uint64_t i = (_DWORD **)((char *)this + 48); ; ++i)
  {
    uint64_t result = *i;
    if (*i)
    {
      if (*result == a2 && result[2] == a3) {
        break;
      }
    }
    if (!--v6) {
      return 0;
    }
  }
  return result;
}

uint64_t PRGSequencer::WriteElementToFile(PRGSequencer *this, IFWD_MemoryStream *a2, unsigned int a3, unsigned int a4, char *a5)
{
  int v5 = 0;
  unsigned int v6 = 28;
  switch(a3)
  {
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Eu:
      int v5 = 0;
      unsigned int v6 = 8;
      goto LABEL_22;
    case 0xBu:
      int v5 = 0;
      unsigned int v6 = 1628;
      goto LABEL_22;
    case 0xCu:
      uint64_t v10 = *((unsigned int *)a5 + 8);
      if (*((_DWORD *)this + 813) <= (int)v10) {
        int v5 = 0;
      }
      else {
        int v5 = (const void *)*((void *)this + v10 + 206);
      }
      unsigned int v6 = 28;
      goto LABEL_22;
    case 0xDu:
      int v5 = 0;
      unsigned int v6 = 172;
      goto LABEL_22;
    case 0xEu:
      int v5 = 0;
      unsigned int v6 = 1136;
      goto LABEL_22;
    case 0xFu:
      int v5 = 0;
      unsigned int v6 = 2048;
      goto LABEL_22;
    case 0x10u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
      uint64_t v7 = *((unsigned int *)a5 + 4);
      if (*((_DWORD *)this + 813) <= (int)v7) {
        int v5 = 0;
      }
      else {
        int v5 = (const void *)*((void *)this + v7 + 206);
      }
      unsigned int v6 = 12;
      goto LABEL_22;
    case 0x11u:
      int v5 = 0;
      unsigned int v6 = 16;
      goto LABEL_22;
    case 0x12u:
    case 0x13u:
      uint64_t v9 = *((unsigned int *)a5 + 6);
      if (*((_DWORD *)this + 813) <= (int)v9) {
        int v5 = 0;
      }
      else {
        int v5 = (const void *)*((void *)this + v9 + 206);
      }
      unsigned int v6 = 32;
      goto LABEL_22;
    case 0x1Du:
      goto LABEL_22;
    default:
      if (a3 != 1000) {
        return 0;
      }
LABEL_22:
      PRGH_WriteElement(a2, a3, a4, a5 + 12, v6, v5);
      return 1;
  }
}

void PRGSequencer::PRGSequencer(PRGSequencer *this)
{
  int v2 = (IFWD_MemoryStream *)operator new(0x18uLL);
  IFWD_MemoryStream::IFWD_MemoryStream(v2);
  *(void *)this = v3;
  *(void *)((char *)this + 3260) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 10) = 0;
  bzero((char *)this + 48, 0xC88uLL);
}

void PRGSequencer::~PRGSequencer(IFWD_MemoryStream **this)
{
  PRGSequencer::CleanUp(this);
  if (*this)
  {
    IFWD_MemoryStream::~IFWD_MemoryStream(*this);
    operator delete(v2);
    *this = 0;
  }
}

void PRGSequencer::CleanUp(IFWD_MemoryStream **this)
{
  IFWD_MemoryStream::Clear(*this);
  int v2 = *((_DWORD *)this + 812);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    BOOL v4 = (char *)(this + 6);
    do
    {
      int v5 = *(void **)&v4[8 * v3];
      if (v5)
      {
        free(v5);
        int v2 = *((_DWORD *)this + 812);
      }
      *(void *)&v4[8 * v3++] = 0;
    }
    while (v3 < v2);
  }
  *((_DWORD *)this + 812) = 0;
  this[3] = 0;
  this[4] = 0;
  *((_DWORD *)this + 10) = 0;
}

uint64_t PRGSequencer::ReadBuffer(PRGSequencer *this, const char *a2, unsigned int a3, int a4, unsigned int a5, void (*a6)(void *))
{
  IFWD_MemoryStream::Clear(*(IFWD_MemoryStream **)this);
  unsigned int v12 = operator new[](a3 + 1);
  uint8x8_t v13 = *(IFWD_MemoryStream **)this;
  *(void *)uint8x8_t v13 = v12;
  *((void *)v13 + 2) = v12;
  memcpy(v12, a2, a3);
  *((_DWORD *)v13 + 2) = a3;
  *((_DWORD *)this + 814) = PRGH_GetEndian((char *)v12);
  int v14 = PRGH_FileCheck(*(char **)(*(void *)this + 16));
  if (v14 == -1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 815) = a4;
  *((_DWORD *)this + 817) = v14;
  if (v14 == 5)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = PRGH_VersionCheck(*(char **)(*(void *)this + 16), a4, a5);
    uint64_t v15 = v16;
    if (v16 && (*((_DWORD *)this + 815) != 5 || HIWORD(a5) <= WORD1(v16) || *((_DWORD *)this + 817) != 1)) {
      return v15;
    }
  }
  unsigned int v21 = 0;
  *((void *)this + 2) = a6;
  int v17 = *(char **)(*(void *)this + 16);
  if (PRGH_GetElementIndex(v17, 1000, 0, &v21))
  {
    int16x8_t v18 = &v17[v21];
    int v19 = *((_DWORD *)v18 + 9);
    *(_OWORD *)((char *)this + 24) = *(_OWORD *)(v18 + 20);
    *((_DWORD *)this + 10) = v19;
    PRGSequencer::AddToGlobalStruct(this, v18);
    while (PRGH_GetNextElementIndex(v17, &v21))
      PRGSequencer::AddToGlobalStruct(this, &v17[v21]);
  }
  return v15;
}

uint64_t PRGSequencer::WriteToBuffer(PRGSequencer *this, char **a2, unsigned int *a3)
{
  unsigned int v6 = (IFWD_MemoryStream *)operator new(0x18uLL);
  IFWD_MemoryStream::IFWD_MemoryStream(v6);
  *((void *)this + 1) = v7;
  IFWD_MemoryStream::Clear(v7);
  int v8 = *((_DWORD *)this + 812);
  if (v8 >= 1)
  {
    for (unint64_t i = 0; (uint64_t)i < v8; ++i)
    {
      uint64_t v10 = (unsigned int *)*((void *)this + i + 6);
      if (v10)
      {
        unsigned int v11 = *v10;
        if ((*v10 & 0xFFFFFFFA) != 0x12 && (v11 > 0x1D || ((1 << v11) & 0x23319000) == 0))
        {
          PRGSequencer::WriteElementToFile(this, *((IFWD_MemoryStream **)this + 1), v11, v10[2], (char *)v10);
          int v8 = *((_DWORD *)this + 812);
        }
      }
      if (i > 0xC6) {
        break;
      }
    }
  }
  if (*((_DWORD *)this + 815) != 5 && v8 >= 1)
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = (unsigned int *)*((void *)this + v14 + 6);
      if (v15)
      {
        unsigned int v16 = *v15;
        if ((*v15 & 0xFFFFFFFA) == 0x12 || (v16 <= 0x1D ? (BOOL v17 = ((1 << v16) & 0x23319000) == 0) : (BOOL v17 = 1), !v17))
        {
          PRGSequencer::WriteElementToFile(this, *((IFWD_MemoryStream **)this + 1), v16, v15[2], (char *)v15);
          int v8 = *((_DWORD *)this + 812);
        }
      }
      if (v14 > 0xC6) {
        break;
      }
      ++v14;
    }
    while ((uint64_t)v14 < v8);
  }
  PRGH_WriteElement(*((IFWD_MemoryStream **)this + 1), 2u, 0, 0, 0, 0);
  int16x8_t v18 = (char *)malloc(*(int *)(*((void *)this + 1) + 8));
  *a2 = v18;
  uint64_t v19 = *((void *)this + 1);
  if (v18)
  {
    memcpy(v18, *(const void **)(v19 + 16), *(int *)(v19 + 8));
    uint64_t v20 = 0;
    *a3 = *(_DWORD *)(v19 + 8);
LABEL_29:
    IFWD_MemoryStream::~IFWD_MemoryStream((IFWD_MemoryStream *)v19);
    operator delete(v21);
    *((void *)this + 1) = 0;
    return v20;
  }
  uint64_t v20 = 5;
  if (v19) {
    goto LABEL_29;
  }
  return v20;
}

uint64_t PRGSequencer::CreateElement(PRGSequencer *this, int a2)
{
  int v3 = PRGSequencer::AllocateAndCopy(this, 0, a2);
  uint64_t result = 0;
  if (v3) {
    return *((void *)this + *((int *)this + 812) + 5);
  }
  return result;
}

BOOL PRGSequencer::RemoveElement(void **this, void *a2)
{
  unint64_t v2 = *((unsigned int *)this + 812);
  if ((int)v2 < 1) {
    return 0;
  }
  int v3 = this + 6;
  if (this[6] == a2)
  {
    BOOL v8 = 1;
    if (a2) {
LABEL_17:
    }
      free(a2);
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = (v2 - 1);
    if (v5 >= 0xC7) {
      unint64_t v5 = 199;
    }
    do
    {
      if (v5 == v4) {
        return v4 < 0xC7 && v4 + 1 < v2;
      }
      unsigned int v6 = (void *)v3[1];
      ++v3;
      ++v4;
    }
    while (v6 != a2);
    BOOL v8 = v4 - 1 < 0xC7 && v4 < v2;
    if (a2) {
      goto LABEL_17;
    }
  }
  *int v3 = 0;
  return v8;
}

unint64_t b64_ntop(unsigned __int8 *a1, unint64_t a2, unsigned char *a3, unint64_t a4)
{
  *a3 = 0;
  if (a2 >= 3)
  {
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t result = v5 + 4;
      if (v5 + 4 > a4) {
        goto LABEL_16;
      }
      unint64_t v7 = a1[2];
      unint64_t v8 = a1[1];
      unsigned int v9 = *a1;
      a1 += 3;
      a2 -= 3;
      uint64_t v10 = &a3[v5];
      *uint64_t v10 = Base64[(unint64_t)v9 >> 2];
      v10[1] = Base64[(v8 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v9 & 3))];
      void v10[2] = Base64[(v7 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v8 & 0xF))];
      v10[3] = Base64[v7 & 0x3F];
      unint64_t v5 = result;
      if (a2 <= 2)
      {
        if (a2) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
    }
  }
  unint64_t result = 0;
  if (a2)
  {
LABEL_8:
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unsigned __int8 v18 = 0;
    __int16 v17 = 0;
    do
    {
      *((unsigned char *)&v17 + v12) = a1[v11++];
      uint64_t v12 = v11;
    }
    while (a2 > v11);
    if (result + 4 > a4) {
      goto LABEL_16;
    }
    char v13 = HIBYTE(v17);
    unint64_t v14 = ((unint64_t)HIBYTE(v17) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v17 & 3));
    a3[result] = Base64[(unint64_t)v17 >> 2];
    unint64_t v15 = v18;
    a3[result | 1] = Base64[v14];
    char v16 = 61;
    if (a2 != 1) {
      char v16 = Base64[(v15 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v13 & 0xF))];
    }
    a3[result | 2] = v16;
    a3[result | 3] = 61;
    result += 4;
  }
LABEL_14:
  if (result < a4)
  {
    a3[result] = 0;
    return result;
  }
LABEL_16:
  a3[a4 - 1] = 0;
  *a3 = 0;
  return 0xFFFFFFFFLL;
}

unsigned char *b64encode(unsigned __int8 *a1, unsigned int a2)
{
  unint64_t v2 = 0;
  if (a1 && (int)a2 >= 1)
  {
    unsigned int v5 = a2 / 3;
    if (a2 != 3 * (a2 / 3)) {
      ++v5;
    }
    size_t v6 = (4 * v5) | 1;
    unint64_t v2 = malloc(v6);
    if (v2) {
      b64_ntop(a1, a2, v2, v6);
    }
  }
  return v2;
}

uint64_t b64decode(char *__s, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    int64_t v3 = strlen(__s);
  }
  else {
    int64_t v3 = a2;
  }
  unint64_t v4 = __s;
  if (v3 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = __s;
    unint64_t v4 = __s;
    do
    {
      uint64_t v8 = *v7;
      if (v8 == 10 || v8 == 13)
      {
        uint64_t v10 = 0;
        int v5 = 0;
      }
      else
      {
        uint64_t v10 = b64decode_table[v8];
        if (v10 == -1)
        {
          uint64_t v10 = v6;
        }
        else
        {
          switch(v5)
          {
            case 0:
              int v5 = 1;
              break;
            case 1:
              *v4++ = (4 * v6) | (v10 >> 4) & 3;
              int v5 = 2;
              break;
            case 2:
              *v4++ = (16 * v6) | (v10 >> 2) & 0xF;
              int v5 = 3;
              break;
            case 3:
              int v5 = 0;
              *v4++ = v10 | ((_BYTE)v6 << 6);
              break;
            default:
              break;
          }
        }
      }
      ++v7;
      uint64_t v6 = v10;
    }
    while (v7 < &__s[v3]);
  }
  char *v4 = 0;
  return (v4 - __s);
}

__CFString *tss_lookup_error(int a1)
{
  int v1 = (const char *)qword_267BA9790;
  if (qword_267BA9790)
  {
    if (tss_err_map == a1) {
      return (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v1, 0x8000100u);
    }
    for (unint64_t i = (const char **)&off_267BA97A0; ; i += 2)
    {
      int v1 = *i;
      if (!*i) {
        break;
      }
      int v3 = *((_DWORD *)i - 2);
      if (v3 == a1) {
        return (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v1, 0x8000100u);
      }
    }
  }
  return @"Unknown";
}

uint64_t tss_strip_img3_signature(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 10004;
  }
  if (*a1 != 1231906611)
  {
    AMAuthInstallLog(3, (uint64_t)"tss_strip_img3_signature", (uint64_t)"bad magic 0x%08x expecting 0x%08x", a4, a5, a6, a7, a8, *a1);
    return 10004;
  }
  unsigned int v10 = a1[2];
  unsigned int v9 = a1[3];
  if (v9 > v10)
  {
    AMAuthInstallLog(3, (uint64_t)"tss_strip_img3_signature", (uint64_t)"signed length %u too large for buffer length %u", a4, a5, a6, a7, a8, a1[3]);
    return 10004;
  }
  uint64_t result = 0;
  if (v9)
  {
    *a2 += v9 - v10;
    a1[2] = a1[3];
    a1[1] = *a2;
  }
  return result;
}

uint64_t tss_image_is_img3(_DWORD *a1)
{
  uint64_t result = 10004;
  if (a1)
  {
    if (*a1 == 1231906611) {
      return 0;
    }
    else {
      return 10004;
    }
  }
  return result;
}

uint64_t tss_image_is_finalized(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 10004;
  }
  if (*a1 == 1231906611)
  {
    if (a1[3]) {
      return 0;
    }
    else {
      return 10003;
    }
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"tss_image_is_finalized", (uint64_t)"bad magic 0x%08x expecting 0x%08x", a4, a5, a6, a7, a8, *a1);
    return 10004;
  }
}

uint64_t tss_get_partial_hash(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int v48 = a2;
  uint64_t v50 = 0;
  memset(v49, 0, sizeof(v49));
  uint64_t v47 = 0;
  int v46 = 0;
  if (a1 && a2 >= 1)
  {
    int v10 = a3;
    uint64_t v16 = tss_strip_img3_signature(a1, &v48, a3, a4, a5, a6, a7, a8);
    if (v16) {
      AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"failed to strip img3 header", v11, v12, v13, v14, v15, v45);
    }
    uint64_t v17 = (int)a1[2];
    if (((v17 + 8) & 0x3F) != 0)
    {
      AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"ih_buffer_len(%d) + 8 is not a multiple of %d", v11, v12, v13, v14, v15, a1[2]);
      unsigned __int8 v18 = 0;
      uint64_t v16 = 10004;
    }
    else
    {
      uint64_t v20 = malloc(v17 + 8);
      unsigned __int8 v18 = v20;
      if (v20)
      {
        bzero(v20, v17 + 8);
        a1[3] = v17 + v10;
        memcpy(v18, a1 + 3, v17 + 8);
        int v26 = SHA1Reset((uint64_t)v49);
        if (v26)
        {
          AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"SHA1Reset failed=%d", v27, v28, v29, v30, v31, v26);
        }
        else
        {
          int v32 = SHA1Input((uint64_t)v49, (char *)v18, (int)v17 + 8);
          if (v32)
          {
            AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"SHA1Input failed=%d", v33, v34, v35, v36, v37, v32);
          }
          else
          {
            int v38 = SHA1ResultPartial((uint64_t)v49, (uint64_t)&v51, &v47, &v46);
            if (v38)
            {
              AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"SHA1ResultPartial failed=%d", v39, v40, v41, v42, v43, v38);
            }
            else
            {
              if (!v16)
              {
                *(_DWORD *)a4 = v10;
                *(_DWORD *)(a4 + 4) = v17;
                *(_OWORD *)(a4 + 8) = v51;
                *(_DWORD *)(a4 + 24) = v52;
                goto LABEL_21;
              }
              AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"tss_sha1_hash failed=%d", v39, v40, v41, v42, v43, v16);
            }
          }
        }
        uint64_t v16 = 10007;
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"out of memory", v21, v22, v23, v24, v25, v45);
        uint64_t v16 = 10006;
      }
    }
LABEL_21:
    uint64_t v19 = v18;
    a1[3] = v17;
    unsigned __int8 v18 = v47;
    goto LABEL_22;
  }
  AMAuthInstallLog(3, (uint64_t)"tss_get_partial_hash", (uint64_t)"invalid img3: (%p), size %d", a4, a5, a6, a7, a8, (char)a1);
  unsigned __int8 v18 = 0;
  uint64_t v16 = 10004;
  if (a1)
  {
    LODWORD(v17) = 0;
    goto LABEL_21;
  }
  uint64_t v19 = 0;
LABEL_22:
  free(v18);
  free(v19);
  return v16;
}

uint64_t tss_get_hash(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v37 = a2;
  if (a1)
  {
    uint64_t v39 = 0;
    memset(v38, 0, sizeof(v38));
    uint64_t v15 = tss_strip_img3_signature((_DWORD *)a1, &v37, a3, a4, a5, a6, a7, a8);
    if (v15) {
      AMAuthInstallLog(3, (uint64_t)"tss_get_hash", (uint64_t)"failed to strip img3 header", v10, v11, v12, v13, v14, v36);
    }
    if (v37 > 11)
    {
      int v16 = *(_DWORD *)(a1 + 8);
      if (v37 >= v16 + 20)
      {
        int v18 = SHA1Reset((uint64_t)v38);
        if (v18)
        {
          AMAuthInstallLog(3, (uint64_t)"tss_get_hash", (uint64_t)"SHA1Reset failed=%d", v19, v20, v21, v22, v23, v18);
        }
        else
        {
          int v24 = SHA1Input((uint64_t)v38, (char *)(a1 + 12), v16 + 8);
          if (v24)
          {
            AMAuthInstallLog(3, (uint64_t)"tss_get_hash", (uint64_t)"SHA1Input failed=%d", v25, v26, v27, v28, v29, v24);
          }
          else
          {
            int v30 = SHA1Result((uint64_t)v38, a3);
            if (!v30) {
              return v15;
            }
            AMAuthInstallLog(3, (uint64_t)"tss_get_hash", (uint64_t)"SHA1Result failed=%d", v31, v32, v33, v34, v35, v30);
          }
        }
        return 10007;
      }
    }
    AMAuthInstallLog(3, (uint64_t)"tss_get_hash", (uint64_t)"invalid image3 length=%d", v10, v11, v12, v13, v14, v37);
  }
  return 10004;
}

uint64_t tss_stitch_img3(_DWORD *a1, int a2, _DWORD *a3, const void *a4, uint64_t a5, void *a6, _DWORD *a7, uint64_t a8)
{
  int v34 = a2;
  if (!a1 || a2 <= 0)
  {
    AMAuthInstallLog(3, (uint64_t)"tss_stitch_img3", (uint64_t)"invalid img3: (%p), size %d", (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (char)a1);
    return 10004;
  }
  unsigned int v9 = a5;
  if (!a4 || (int)a5 <= 0)
  {
    LOBYTE(v33) = (_BYTE)a4;
    uint64_t v29 = "invalid tatsu data: (%p), size %d";
LABEL_15:
    AMAuthInstallLog(3, (uint64_t)"tss_stitch_img3", (uint64_t)v29, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8, v33);
    return 10004;
  }
  uint64_t v12 = 10008;
  if (a6 && a7)
  {
    uint64_t v12 = tss_strip_img3_signature(a1, &v34, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
    if (v12) {
      AMAuthInstallLog(3, (uint64_t)"tss_stitch_img3", (uint64_t)"failed to strip img3 header", v15, v16, v17, v18, v19, v33);
    }
    size_t v20 = v34;
    size_t v21 = v34 + (uint64_t)(int)v9;
    *a7 = v21;
    uint64_t v22 = malloc(v21);
    *a6 = v22;
    if (!v22)
    {
      *a7 = 0;
      AMAuthInstallLog(3, (uint64_t)"tss_stitch_img3", (uint64_t)"out of memory", v23, v24, v25, v26, v27, v33);
      return 10006;
    }
    uint64_t v28 = v22;
    bzero(v22, v21);
    memcpy(v28, a1, v20);
    if (*a3 >= (signed int)v9)
    {
      LOBYTE(v33) = v9;
      uint64_t v29 = "invalid img3 (tatsublob_len %d <= mastered_reservation_len %d";
    }
    else if (((a3[1] + 8) & 0x3F) != 0)
    {
      int v33 = a3[1] + 8;
      uint64_t v29 = "mastered_signed_len(%d) + 8 is not a multiple of %d";
    }
    else
    {
      unsigned int v31 = a1[2] + v9;
      if (v31 == v21 - 20)
      {
        int v32 = *a3 + a1[3];
        if (v32 <= (int)(v31 + 8))
        {
          v28[1] = a1[1] + v9;
          v28[2] = v31;
          v28[3] = v32;
          memcpy((char *)v28 + v20, a4, v9);
          return v12;
        }
      }
      uint64_t v29 = "invalid img3";
    }
    goto LABEL_15;
  }
  return v12;
}

FILE *(**amai_fill_fopen_filefunc(FILE *(**result)(int a1, char *__filename, char a3)))(int a1, char *__filename, char a3)
{
  *uint64_t result = ioapi_fopen_file_func;
  result[1] = (FILE *(*)(int, char *, char))ioapi_fread_file_func;
  result[2] = (FILE *(*)(int, char *, char))ioapi_fwrite_file_func;
  result[3] = (FILE *(*)(int, char *, char))ioapi_ftell_file_func;
  result[4] = (FILE *(*)(int, char *, char))ioapi_fseek_file_func;
  result[5] = (FILE *(*)(int, char *, char))ioapi_fclose_file_func;
  result[6] = (FILE *(*)(int, char *, char))ioapi_ferror_file_func;
  result[7] = 0;
  return result;
}

FILE *ioapi_fopen_file_func(int a1, char *__filename, char a3)
{
  int v3 = a3 & 3;
  unint64_t v4 = "r+b";
  int v5 = "wb";
  if ((a3 & 8) == 0) {
    int v5 = 0;
  }
  if ((a3 & 4) != 0) {
    LOBYTE(v6) = 1;
  }
  else {
    int v6 = (a3 & 8) >> 3;
  }
  if ((a3 & 4) == 0) {
    unint64_t v4 = v5;
  }
  if (v3 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = v6;
  }
  if (v3 == 1) {
    uint64_t v8 = "rb";
  }
  else {
    uint64_t v8 = v4;
  }
  if (__filename && (v7 & 1) != 0) {
    return fopen(__filename, v8);
  }
  else {
    return 0;
  }
}

size_t ioapi_fread_file_func(int a1, FILE *__stream, void *__ptr, size_t __nitems)
{
  return fread(__ptr, 1uLL, __nitems, __stream);
}

size_t ioapi_fwrite_file_func(int a1, FILE *__stream, void *__ptr, size_t __nitems)
{
  return fwrite(__ptr, 1uLL, __nitems, __stream);
}

void ioapi_ftell_file_func()
{
}

uint64_t ioapi_fseek_file_func(int a1, FILE *a2, uint64_t a3, unsigned int a4)
{
  if (a4 > 2) {
    return -1;
  }
  fseek(a2, a3, a4);
  return 0;
}

uint64_t ioapi_fclose_file_func(int a1, FILE *a2)
{
  return fclose(a2);
}

uint64_t ioapi_ferror_file_func(int a1, FILE *a2)
{
  return ferror(a2);
}

void *tss_create_session(const void *a1, const void *a2)
{
  unint64_t v4 = malloc(0x60uLL);
  uint64_t v10 = v4;
  if (!v4) {
    goto LABEL_7;
  }
  v4[4] = 0u;
  v4[5] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  if (!a2)
  {
    uint64_t v13 = "signingServerURL is NULL";
    goto LABEL_10;
  }
  CFTypeID v11 = CFGetTypeID(a2);
  if (v11 != CFURLGetTypeID())
  {
    uint64_t v13 = "signingServerURL is malformed";
    goto LABEL_10;
  }
  v10[1] = CFRetain(a2);
  *((_WORD *)v10 + 10) = 256;
  if (a1) {
    CFRetain(a1);
  }
  *uint64_t v10 = a1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  v10[3] = Mutable;
  if (!Mutable)
  {
LABEL_7:
    uint64_t v13 = "out of memory";
LABEL_10:
    AMAuthInstallLog(3, (uint64_t)"tss_create_session", (uint64_t)v13, v5, v6, v7, v8, v9, v15);
    free(v10);
    return 0;
  }
  return v10;
}

uint64_t tss_close_session(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = tss_reset_session((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v9) {
    free(a1);
  }
  return v9;
}

uint64_t tss_reset_session(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = *(const void **)a1;
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = *(const void **)(a1 + 24);
    if (v10) {
      CFRelease(v10);
    }
    CFTypeID v11 = *(const void **)(a1 + 40);
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)(a1 + 8);
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v13 = *(const void **)(a1 + 72);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 72) = 0;
    }
    uint64_t v14 = *(void **)(a1 + 56);
    if (v14) {
      free(v14);
    }
    uint64_t result = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    AMAuthInstallLog(3, (uint64_t)"tss_reset_session", (uint64_t)"NULL session", a4, a5, a6, a7, a8, v16);
    return 10009;
  }
  return result;
}

uint64_t SHA1Reset(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
  *(_OWORD *)a1 = xmmword_217B31950;
  *(void *)(a1 + 16) = 3285377520;
  *(void *)(a1 + 96) = 0;
  return result;
}

uint64_t SHA1Result(uint64_t a1, uint64_t a2)
{
  return SHA1ResultPartial(a1, a2, 0, 0);
}

uint64_t SHA1ResultPartial(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    BOOL v8 = !a3 || a4 == 0;
    BOOL v9 = !v8;
    uint64_t result = *(unsigned int *)(a1 + 100);
    if (!result)
    {
      if (*(_DWORD *)(a1 + 96)) {
        char v10 = 1;
      }
      else {
        char v10 = v9;
      }
      if (v10)
      {
        if (!v9) {
          return 1;
        }
        size_t v11 = *(__int16 *)(a1 + 28);
        *a4 = v11;
        if ((int)v11 >= 1)
        {
          uint64_t v12 = malloc(v11);
          *a3 = v12;
          memcpy(v12, (const void *)(a1 + 30), (unsigned __int16)v11);
        }
      }
      else
      {
        SHA1PadMessage(a1);
        *(_OWORD *)(a1 + 78) = 0u;
        *(_OWORD *)(a1 + 62) = 0u;
        *(_OWORD *)(a1 + 46) = 0u;
        *(_OWORD *)(a1 + 30) = 0u;
        *(_DWORD *)(a1 + 20) = 0;
        *(_DWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 96) = 1;
      }
      int v13 = 0;
      for (uint64_t i = 0; i != 20; ++i)
      {
        *(unsigned char *)(a2 + i) = *(_DWORD *)(a1 + (i & 0xFFFFFFFC)) >> (~(_BYTE)v13 & 0x18);
        v13 += 8;
      }
      return 0;
    }
  }
  return result;
}

int *SHA1PadMessage(uint64_t a1)
{
  int v2 = *(__int16 *)(a1 + 28);
  uint64_t v3 = *(unsigned __int16 *)(a1 + 28);
  LOWORD(v4) = v2 + 1;
  ++*(_WORD *)(a1 + 28);
  if (v2 < 56)
  {
    *(unsigned char *)(a1 + (__int16)v3 + 30) = 0x80;
    int v6 = *(__int16 *)(a1 + 28);
    if (v6 <= 55)
    {
      do
      {
        *(_WORD *)(a1 + 28) = v6 + 1;
        *(unsigned char *)(a1 + (__int16)v6 + 30) = 0;
        int v6 = *(__int16 *)(a1 + 28);
      }
      while (v6 < 56);
    }
  }
  else
  {
    *(unsigned char *)(a1 + v3 + 30) = 0x80;
    if ((__int16)v4 <= 63)
    {
      do
      {
        *(_WORD *)(a1 + 28) = v4 + 1;
        *(unsigned char *)(a1 + (__int16)v4 + 30) = 0;
        int v4 = *(__int16 *)(a1 + 28);
      }
      while (v4 < 64);
    }
    SHA1ProcessMessageBlock((int *)a1);
    int v5 = *(__int16 *)(a1 + 28);
    if (v5 <= 55)
    {
      do
      {
        *(_WORD *)(a1 + 28) = v5 + 1;
        *(unsigned char *)(a1 + (__int16)v5 + 30) = 0;
        int v5 = *(__int16 *)(a1 + 28);
      }
      while (v5 < 56);
    }
  }
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 86) = bswap32(*(_DWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 90) = bswap32(v7);

  return SHA1ProcessMessageBlock((int *)a1);
}

uint64_t SHA1Input(uint64_t a1, char *a2, int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = 1;
  if (a1)
  {
    int v5 = a2;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 96))
      {
        uint64_t result = 3;
        *(_DWORD *)(a1 + 100) = 3;
      }
      else
      {
        uint64_t result = *(unsigned int *)(a1 + 100);
        if (!result)
        {
          int v6 = a3;
          while (!*(_DWORD *)(a1 + 100))
          {
            char v7 = *v5;
            uint64_t v8 = *(__int16 *)(a1 + 28);
            *(_WORD *)(a1 + 28) = v8 + 1;
            *(unsigned char *)(a1 + v8 + 30) = v7;
            int v9 = *(_DWORD *)(a1 + 20) + 8;
            *(_DWORD *)(a1 + 20) = v9;
            if (!v9)
            {
              int v10 = *(_DWORD *)(a1 + 24);
              *(_DWORD *)(a1 + 24) = v10 + 1;
              if (v10 == -1) {
                *(_DWORD *)(a1 + 100) = 1;
              }
            }
            if (*(_WORD *)(a1 + 28) == 64) {
              SHA1ProcessMessageBlock((int *)a1);
            }
            uint64_t result = 0;
            ++v5;
            if (!--v6) {
              return result;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

int *SHA1ProcessMessageBlock(int *result)
{
  uint64_t v1 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  int v2 = (char *)result + 30;
  int8x16x4_t v52 = vld4q_s8(v2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v52.val[0].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v52.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v52.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v52.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v52.val[2]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v52.val[2].i8);
  int8x16_t v15 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v52.val[3]);
  v52.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v52.val[3].i8);
  v50[3] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)), (int8x16_t)vmovl_high_u16(v16));
  CFIndex v50[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v50[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v52.val[0]));
  v50[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v52.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v50[2] + v1) ^ *(_DWORD *)((char *)&v50[3] + v1 + 4) ^ *(_DWORD *)((char *)v50 + v1 + 8) ^ *(_DWORD *)((char *)v50 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v50[4] + v1) = v17 >> 31;
    v1 += 4;
  }
  while (v1 != 256);
  uint64_t v18 = 0;
  int v19 = result[1];
  int v21 = result[3];
  int v20 = result[4];
  int v22 = v20;
  int v23 = result[2];
  int v24 = v21;
  int v25 = v23;
  int v26 = v19;
  int v27 = *result;
  do
  {
    int v28 = v27;
    int v29 = v25;
    int v30 = v24;
    HIDWORD(v31) = v27;
    LODWORD(v31) = v27;
    int v32 = (v31 >> 27) + (v25 & v26) + (v24 & ~v26) + v22 + 1518500249;
    HIDWORD(v31) = v26;
    LODWORD(v31) = v26;
    int v25 = v31 >> 2;
    int v27 = v32 + *(_DWORD *)((char *)v50 + v18);
    v18 += 4;
    int v22 = v24;
    int v24 = v29;
    int v26 = v28;
  }
  while (v18 != 80);
  uint64_t v33 = 80;
  do
  {
    int v34 = v27;
    int v35 = v25;
    int v36 = v29;
    HIDWORD(v37) = v27;
    LODWORD(v37) = v27;
    int v38 = (v37 >> 27) + (v25 ^ v28 ^ v29) + v30 + 1859775393;
    HIDWORD(v37) = v28;
    LODWORD(v37) = v28;
    int v25 = v37 >> 2;
    int v27 = v38 + *(_DWORD *)((char *)v50 + v33);
    v33 += 4;
    int v30 = v29;
    int v29 = v35;
    int v28 = v34;
  }
  while (v33 != 160);
  do
  {
    int v39 = v27;
    int v40 = v25;
    HIDWORD(v41) = v27;
    LODWORD(v41) = v27;
    int v42 = v35;
    int v43 = (v41 >> 27) + v36 + ((v35 | v40) & v34 | v35 & v40) - 1894007588;
    HIDWORD(v41) = v34;
    LODWORD(v41) = v34;
    int v25 = v41 >> 2;
    int v27 = v43 + *(_DWORD *)((char *)v50 + v33);
    v33 += 4;
    int v36 = v35;
    int v35 = v40;
    int v34 = v39;
  }
  while (v33 != 240);
  uint64_t v44 = 240;
  do
  {
    int v45 = v27;
    int v46 = v25;
    int v47 = v40;
    HIDWORD(v48) = v27;
    LODWORD(v48) = v27;
    int v49 = (v48 >> 27) + (v25 ^ v39 ^ v40) + v42 - 899497514;
    HIDWORD(v48) = v39;
    LODWORD(v48) = v39;
    int v25 = v48 >> 2;
    int v27 = v49 + *(_DWORD *)((char *)v50 + v44);
    v44 += 4;
    int v42 = v40;
    int v40 = v46;
    int v39 = v45;
  }
  while (v44 != 320);
  *result += v27;
  result[1] = v45 + v19;
  result[2] = v25 + v23;
  result[3] = v46 + v21;
  result[4] = v47 + v20;
  *((_WORD *)result + 14) = 0;
  return result;
}

uint64_t tss_submit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    AMAuthInstallLog(3, (uint64_t)"tss_submit", (uint64_t)"NULL session", a4, a5, a6, a7, a8, v19);
    return 10009;
  }
  if (!*(void *)(a1 + 24))
  {
    AMAuthInstallLog(3, (uint64_t)"tss_submit", (uint64_t)"NULL request in session", a4, a5, a6, a7, a8, v19);
    uint64_t v15 = 10008;
    uint16x8_t v16 = (__CFString *)a1;
    int v17 = 10008;
LABEL_10:
    tss_set_last_error(v16, v17);
    return v15;
  }
  if (!*(void *)(a1 + 48))
  {
    tss_submit_job_with_retry();
    return *(unsigned int *)(a1 + 64);
  }
  int v9 = (pthread_t *)malloc(8uLL);
  *(void *)(a1 + 56) = v9;
  if (!v9)
  {
    AMAuthInstallLog(3, (uint64_t)"tss_submit_non_block", (uint64_t)"out of memory", v10, v11, v12, v13, v14, v19);
    uint64_t v15 = 10006;
    uint16x8_t v16 = (__CFString *)a1;
    int v17 = 10006;
    goto LABEL_10;
  }
  pthread_create(v9, 0, (void *(__cdecl *)(void *))tss_submit_job_with_retry, (void *)a1);
  return 0;
}

__CFString *tss_set_last_error(__CFString *result, int a2)
{
  if (result)
  {
    uint16x8_t v3 = result;
    LODWORD(result[2].isa) = a2;
    info = (const void *)result[2].info;
    if (info) {
      CFRelease(info);
    }
    uint64_t result = tss_lookup_error(a2);
    v3[2].info = (uint64_t)result;
  }
  return result;
}

uint64_t tss_submit_job_with_retry()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v6 = v0;
  v211[12800] = *MEMORY[0x263EF8340];
  if (v0)
  {
    if (*(_DWORD *)(v0 + 16) <= 1u) {
      unsigned int v7 = 1;
    }
    else {
      unsigned int v7 = *(_DWORD *)(v0 + 16);
    }
  }
  else
  {
    unsigned int v7 = 1;
  }
  unsigned int v8 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef key = (void *)*MEMORY[0x263EFFAB0];
  CFStringRef httpVersion = (const __CFString *)*MEMORY[0x263EFC708];
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    AMAuthInstallLog(6, (uint64_t)"tss_submit_job_with_retry", (uint64_t)"TSS Connection attempt %d of %d.  (Will retry if TSS_ERR_SERVER_NOT_REACHABLE.)", v1, v2, v3, v4, v5, ++v8);
    CFErrorRef error = 0;
    bzero(v211, 0x19000uLL);
    if (!*(void *)(v6 + 8))
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"no server URL", v10, v11, v12, v13, v14, v173);
      int v71 = 10008;
LABEL_25:
      tss_set_last_error((__CFString *)v6, v71);
      CFURLRef v28 = 0;
      CFHTTPMessageRef Request = 0;
      CFURLRef v72 = 0;
      CFStringRef v35 = 0;
      CFDictionaryRef v73 = 0;
      uint64_t v50 = 0;
      *(_DWORD *)(v6 + 64) = v71;
      goto LABEL_36;
    }
    CFDataRef v15 = CFPropertyListCreateData(v9, *(CFPropertyListRef *)(v6 + 24), kCFPropertyListXMLFormat_v1_0, 0, &error);
    if (!v15)
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"CFPropertyListCreateXMLData failed %@", v16, v17, v18, v19, v20, (char)error);
      int v71 = 10036;
      goto LABEL_25;
    }
    CFDataRef v21 = v15;
    char Length = CFDataGetLength(v15);
    CFURLRef v28 = CFURLCreateWithString(v9, @"TSS/controller?action=2", *(CFURLRef *)(v6 + 8));
    if (!v28)
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"CFURLCreateCopyAppendingPathComponent() failed", v23, v24, v25, v26, v27, v173);
      int v74 = 10041;
      tss_set_last_error((__CFString *)v6, 10041);
      CFHTTPMessageRef Request = 0;
LABEL_28:
      CFURLRef v72 = 0;
      CFStringRef v35 = 0;
      uint64_t v50 = 0;
LABEL_35:
      *(_DWORD *)(v6 + 64) = v74;
      CFRelease(v21);
      CFDictionaryRef v73 = 0;
      goto LABEL_36;
    }
    CFHTTPMessageRef Request = CFHTTPMessageCreateRequest(v9, @"POST", v28, httpVersion);
    if (!Request)
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"CFHTTPMessageCreateRequest failed", v29, v30, v31, v32, v33, v173);
      int v74 = 10041;
      tss_set_last_error((__CFString *)v6, 10041);
      goto LABEL_28;
    }
    char v174 = Length;
    CFStringRef v35 = CFStringCreateWithFormat(v9, 0, @"%d");
    CFHTTPMessageSetHeaderFieldValue(Request, @"Proxy-Connection", @"Keep-Alive");
    CFHTTPMessageSetHeaderFieldValue(Request, @"Pragma", @"no-cache");
    CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Type", @"text/xml; charset=\"utf-8\"");
    CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Length", v35);
    CFDictionaryRef v36 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
    if (v36)
    {
      CFDictionaryRef v42 = v36;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v36, key);
      CFHTTPMessageSetHeaderFieldValue(Request, @"X-OS-Version", Value);
      CFRelease(v42);
    }
    if (*(void *)(v6 + 32))
    {
      AMAuthInstallLog(7, (uint64_t)"tss_submit_job", (uint64_t)"Attempting to add additional entries to HTTP header", v37, v38, v39, v40, v41, v174);
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v6 + 32), (CFDictionaryApplierFunction)_AMAuthInstallUpdateHTTPHeaderWithEntry, Request);
      AMAuthInstallLog(7, (uint64_t)"tss_submit_job", (uint64_t)"Done adding additional fields to HTTP header", v44, v45, v46, v47, v48, v175);
    }
    CFHTTPMessageSetBody(Request, v21);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v50 = Mutable;
    uint64_t v51 = *(const void **)(v6 + 80);
    if (v51)
    {
      CFDictionaryAddValue(Mutable, @"SocksProxySettings", v51);
      AMAuthInstallLog(7, (uint64_t)"tss_submit_job", (uint64_t)"Found a SOCKS proxy setting. Will attempt to use it.", v52, v53, v54, v55, v56, v174);
    }
    CFRange v57 = *(const void **)(v6 + 88);
    if (v57)
    {
      CFDictionaryAddValue(v50, @"TrustedServerCAs", v57);
      AMAuthInstallLog(7, (uint64_t)"tss_submit_job", (uint64_t)"Found a trusted server CA. Will attempt to use it.", v58, v59, v60, v61, v62, v174);
    }
    theData[0] = 0;
    CFStringRef v63 = CFURLCopyScheme(*(CFURLRef *)(v6 + 8));
    if (!v63)
    {
      CFAllocatorRef v70 = "Invalid scheme in url";
      goto LABEL_32;
    }
    CFStringRef v69 = v63;
    *(_DWORD *)__s = 10000;
    if (CFStringCompare(v63, @"https", 1uLL) && CFStringCompare(v69, @"http", 1uLL))
    {
      CFRelease(v69);
      CFAllocatorRef v70 = "unsupported URL scheme";
LABEL_32:
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)v70, v64, v65, v66, v67, v68, v174);
      int v74 = 10008;
      uint64_t v80 = (__CFString *)v6;
      int v81 = 10008;
      goto LABEL_33;
    }
    CFRelease(v69);
    if (AMAuthInstallHttpMessageSendSyncNew(v9, (int)Request, (int)theData, (int)__s, v50, 300.0))
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"failed to send http request", v75, v76, v77, v78, v79, v174);
      int v74 = 10002;
      uint64_t v80 = (__CFString *)v6;
      int v81 = 10002;
LABEL_33:
      tss_set_last_error(v80, v81);
LABEL_34:
      CFURLRef v72 = @"Content-Length";
      goto LABEL_35;
    }
    int v74 = *(_DWORD *)__s;
    if (*(_DWORD *)__s != 200)
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"SendHttpRequest failed %d", v75, v76, v77, v78, v79, __s[0]);
      if (*(_DWORD *)__s == -1) {
        int v74 = 10002;
      }
      uint64_t v88 = (__CFString *)v6;
      int v89 = v74;
      goto LABEL_62;
    }
    if ((unint64_t)CFDataGetLength(theData[0]) > 0x19000)
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"Response too large", v83, v84, v85, v86, v87, v174);
      int v74 = 10052;
      uint64_t v88 = (__CFString *)v6;
      int v89 = 10052;
LABEL_62:
      tss_set_last_error(v88, v89);
      CFRelease(theData[0]);
      goto LABEL_34;
    }
    CFDataGetBytePtr(theData[0]);
    CFDataGetLength(theData[0]);
    __memcpy_chk();
    int v90 = CFDataGetLength(theData[0]);
    CFRelease(theData[0]);
    int v96 = v90;
    *(void *)uint64_t v209 = 0;
    *(_OWORD *)__s = 0u;
    long long v194 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long v206 = 0u;
    long long v207 = 0u;
    long long v208 = 0u;
    int v180 = v90;
    if (v90 < 1)
    {
      int v100 = 0;
      uint64_t v184 = 0;
      CFTypeRef cf = 0;
      uint64_t v183 = 0;
      goto LABEL_101;
    }
    char v97 = 0;
    CFIndex v98 = 0;
    uint64_t v99 = 0;
    int v100 = 0;
    uint64_t v101 = (const char *)v211;
    do
    {
      if (v99)
      {
        if (v98) {
          goto LABEL_67;
        }
      }
      else if (v100 + 7 >= v96)
      {
        uint64_t v99 = 0;
        if (v98) {
          goto LABEL_67;
        }
      }
      else
      {
        CFAllocatorRef v181 = v97;
        uint64_t v185 = v98;
        if (!strncmp(v101, "STATUS", 6uLL))
        {
          uint64_t v102 = 0;
          uint64_t v99 = v101 + 7;
          char v97 = v181;
          do
          {
            int v103 = v101[v102 + 7];
            if (v103 == 38) {
              break;
            }
            v209[v102++] = v103;
          }
          while (v102 != 8);
          v209[7] = 0;
          int v96 = v180;
        }
        else
        {
          uint64_t v99 = 0;
          int v96 = v180;
          char v97 = v181;
        }
        CFIndex v98 = v185;
        if (v185)
        {
LABEL_67:
          if (v97) {
            goto LABEL_98;
          }
          goto LABEL_68;
        }
      }
      if (v100 + 8 >= v96)
      {
        CFIndex v98 = 0;
        if (v97) {
          goto LABEL_98;
        }
      }
      else
      {
        CFTypeRef cfa = v99;
        uint64_t v182 = v97;
        if (!strncmp(v101, "MESSAGE", 7uLL))
        {
          uint64_t v104 = 0;
          CFIndex v98 = v101 + 8;
          char v97 = v182;
          uint64_t v99 = cfa;
          do
          {
            int v105 = v101[v104 + 8];
            if (v105 == 10) {
              break;
            }
            if (v105 == 38) {
              break;
            }
            __s[v104++] = v105;
          }
          while (v104 != 256);
          HIBYTE(v208) = 0;
          int v96 = v180;
          if (v182) {
            goto LABEL_98;
          }
        }
        else
        {
          CFIndex v98 = 0;
          int v96 = v180;
          char v97 = v182;
          uint64_t v99 = cfa;
          if (v182) {
            goto LABEL_98;
          }
        }
      }
LABEL_68:
      if (v100 + 15 >= v96)
      {
        char v97 = 0;
      }
      else
      {
        uint64_t v184 = v98;
        CFTypeRef cf = v99;
        if (!strncmp(v101, "REQUEST_STRING", 0xEuLL))
        {
          char v97 = v101 + 15;
          uint64_t v99 = cf;
          if (cf)
          {
            int v96 = v180;
            CFIndex v98 = v184;
            if (v184)
            {
              uint64_t v183 = v101 + 15;
              goto LABEL_101;
            }
          }
          else
          {
            int v96 = v180;
            CFIndex v98 = v184;
          }
        }
        else
        {
          char v97 = 0;
          int v96 = v180;
          CFIndex v98 = v184;
          uint64_t v99 = cf;
        }
      }
LABEL_98:
      ++v101;
      ++v100;
    }
    while (v100 != v96);
    uint64_t v183 = v97;
    uint64_t v184 = v98;
    int v100 = v96;
    CFTypeRef cf = v99;
LABEL_101:
    AMAuthInstallLog(8, (uint64_t)"tss_submit_job", (uint64_t)"----Begin request", v91, v92, v93, v94, v95, v174);
    AMAuthInstallLog(8, (uint64_t)"tss_submit_job", (uint64_t)"%@", v106, v107, v108, v109, v110, *(void *)(v6 + 24));
    AMAuthInstallLog(8, (uint64_t)"tss_submit_job", (uint64_t)"----End request", v111, v112, v113, v114, v115, v176);
    AMAuthInstallLog(8, (uint64_t)"tss_submit_job", (uint64_t)"----Begin response", v116, v117, v118, v119, v120, v177);
    AMAuthInstallLog(8, (uint64_t)"tss_submit_job", (uint64_t)"%s", v121, v122, v123, v124, v125, (char)v211);
    AMAuthInstallLog(8, (uint64_t)"tss_submit_job", (uint64_t)"----End response", v126, v127, v128, v129, v130, v178);
    if (!cf || !v184)
    {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"invalid response", v131, v132, v133, v134, v135, v179);
      int v142 = 10052;
      uint64_t v151 = (__CFString *)v6;
      int v152 = 10052;
      goto LABEL_109;
    }
    int v136 = atoi(v209);
    if (!v136)
    {
      if (v183)
      {
        __memcpy_chk();
        CFDataRef v153 = CFDataCreate(alloc, (const UInt8 *)theData, v180 - v100 - 15);
        if (v153)
        {
          CFDataRef v159 = v153;
          if (error) {
            CFRelease(error);
          }
          CFDataRef cfb = v159;
          CFDictionaryRef v73 = (const __CFDictionary *)CFPropertyListCreateWithData(alloc, v159, 0, 0, &error);
          if (v73)
          {
            CFDictionaryRef Copy = CFDictionaryCreateCopy(alloc, v73);
            *(void *)(v6 + 40) = Copy;
            if (Copy)
            {
              int v171 = 0;
LABEL_124:
              *(_DWORD *)(v6 + 64) = v171;
              CFRelease(v21);
              CFRelease(cfb);
              goto LABEL_111;
            }
            AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"CFDictionaryCreateCopy failed", v166, v167, v168, v169, v170, v179);
            int v171 = 10056;
          }
          else
          {
            AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"CFPropertyListCreateFromXMLData failed (%@)", v160, v161, v162, v163, v164, (char)error);
            int v171 = 10055;
          }
          tss_set_last_error((__CFString *)v6, v171);
          goto LABEL_124;
        }
        AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"CFDataCreate failed", v154, v155, v156, v157, v158, v179);
        int v142 = 10054;
        uint64_t v151 = (__CFString *)v6;
        int v152 = 10054;
      }
      else
      {
        AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"no data in response", v137, v138, v139, v140, v141, v179);
        int v142 = 10053;
        uint64_t v151 = (__CFString *)v6;
        int v152 = 10053;
      }
LABEL_109:
      tss_set_last_error(v151, v152);
      goto LABEL_110;
    }
    int v142 = v136;
    AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"error from server=%d (%s)", v137, v138, v139, v140, v141, v136);
    uint64_t v143 = *(const void **)(v6 + 72);
    if (v143) {
      CFRelease(v143);
    }
    size_t v144 = strlen(__s);
    CFStringRef v145 = CFStringCreateWithBytes(alloc, (const UInt8 *)__s, v144, 0x8000100u, 0);
    *(void *)(v6 + 72) = v145;
    if (!v145) {
      AMAuthInstallLog(3, (uint64_t)"tss_submit_job", (uint64_t)"Server message failed to convert: %d", v146, v147, v148, v149, v150, v142);
    }
LABEL_110:
    *(_DWORD *)(v6 + 64) = v142;
    CFRelease(v21);
    CFDictionaryRef v73 = 0;
LABEL_111:
    CFURLRef v72 = @"Content-Length";
LABEL_36:
    if (error) {
      CFRelease(error);
    }
    if (v28) {
      CFRelease(v28);
    }
    if (Request) {
      CFRelease(Request);
    }
    if (v72) {
      CFRelease(v72);
    }
    if (v35) {
      CFRelease(v35);
    }
    CFAllocatorRef v9 = alloc;
    if (v73) {
      CFRelease(v73);
    }
    if (v50) {
      CFRelease(v50);
    }
    uint64_t v82 = *(void (**)(uint64_t))(v6 + 48);
    if (v82) {
      v82(v6);
    }
  }
  while (v6 && v8 < v7 && *(_DWORD *)(v6 + 64) == 10002);
  return 0;
}

void _AMAuthInstallUpdateHTTPHeaderWithEntry(const __CFString *a1, const __CFString *a2, __CFHTTPMessage *a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  CFStringGetCString(a1, buffer, 511, 0x8000100u);
  CFStringGetCString(a2, v11, 511, 0x8000100u);
  AMAuthInstallLog(7, (uint64_t)"_AMAuthInstallUpdateHTTPHeaderWithEntry", (uint64_t)"Appending {%s : %s} to http header", v6, v7, v8, v9, v10, (char)buffer);
  CFHTTPMessageSetHeaderFieldValue(a3, a1, a2);
}

uint64_t amai_unzStringFileNameCompare(const char *a1, const char *a2, int a3)
{
  if (a3 == 1) {
    return strcmp(a1, a2);
  }
  while (1)
  {
    int v5 = *(unsigned __int8 *)a1++;
    int v4 = v5;
    int v7 = *(unsigned __int8 *)a2++;
    int v6 = v7;
    if ((v4 - 97) < 0x1A) {
      LOBYTE(v4) = v4 - 32;
    }
    if ((v6 - 97) < 0x1A) {
      LOBYTE(v6) = v6 - 32;
    }
    if (!(_BYTE)v4) {
      break;
    }
    if (!(_BYTE)v6) {
      return 1;
    }
    if ((char)v4 < (char)v6) {
      return 0xFFFFFFFFLL;
    }
    if ((char)v4 > (char)v6) {
      return 1;
    }
  }
  if ((_BYTE)v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void *amai_unzOpen2(uint64_t a1, _OWORD *a2)
{
  memset(__src, 0, 336);
  if (a2)
  {
    long long v3 = a2[1];
    __src[0] = *a2;
    __src[1] = v3;
    long long v4 = a2[3];
    __src[2] = a2[2];
    __src[3] = v4;
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))&__src[0])(*((void *)&v4 + 1), a1, 5);
  }
  else
  {
    amai_fill_fopen_filefunc((FILE *(**)(int, char *, char))__src);
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))&__src[0])(*((void *)&__src[3] + 1), a1, 5);
  }
  int v6 = (void *)v5;
  *(void *)&__src[4] = v5;
  if (v5)
  {
    if (!(*(uint64_t (**)(void, uint64_t, void, uint64_t))&__src[2])(*((void *)&__src[3] + 1), v5, 0, 2))
    {
      unint64_t v7 = (*((uint64_t (**)(void, void *))&__src[1] + 1))(*((void *)&__src[3] + 1), v6);
      unint64_t v8 = v7;
      unint64_t v9 = v7 >= 0xFFFF ? 0xFFFFLL : v7;
      uint64_t v10 = (char *)malloc(0x404uLL);
      if (v10)
      {
        uint64_t v11 = v10;
        if (v9 >= 5)
        {
          long long v12 = v10 + 1;
          uint64_t v13 = 4;
          do
          {
            unint64_t v14 = v13 + 1024;
            unint64_t v15 = v13 + 1024 >= v9 ? v9 : v13 + 1024;
            unint64_t v16 = v15 >= 0x404 ? 1028 : v15;
            if ((*(uint64_t (**)(void, void *, unint64_t, void))&__src[2])(*((void *)&__src[3] + 1), v6, v8 - v15, 0)|| (*((uint64_t (**)(void, void *, unsigned char *, unint64_t))&__src[0] + 1))(*((void *)&__src[3] + 1), v6, v11, v16) != v16)
            {
              break;
            }
            if (v16 >= 4)
            {
              uint64_t v17 = (v16 - 4);
              while (v11[v17] != 80 || v12[v17] != 75 || v12[v17 + 1] != 5 || v12[v17 + 2] != 6)
              {
                if (v17-- <= 0) {
                  goto LABEL_28;
                }
              }
              if (v8 - v15 + v17)
              {
                free(v11);
                unint64_t v19 = v13 + 1024;
                if (v8 < v13 + 1024) {
                  unint64_t v19 = v8;
                }
                if (v19 >= 0xFFFF) {
                  unint64_t v19 = 0xFFFFLL;
                }
                unint64_t v20 = v8 - v19 + v17;
                int v35 = 1;
                goto LABEL_38;
              }
            }
LABEL_28:
            uint64_t v13 = v15;
          }
          while (v9 > v14);
        }
        free(v11);
      }
    }
    unint64_t v20 = 0;
    int v35 = 0;
LABEL_38:
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v31 = (*(uint64_t (**)(void, void, unint64_t, void))&__src[2])(*((void *)&__src[3] + 1), *(void *)&__src[4], v20, 0);
    int Long = unzlocal_getLong((uint64_t)__src, *(uint64_t *)&__src[4], &v39);
    int Short = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v38);
    int v34 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v37);
    int v21 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], (void *)&__src[4] + 1);
    int v22 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v36);
    uint64_t v24 = v36;
    uint64_t v23 = v37;
    uint64_t v25 = v38;
    uint64_t v26 = *((void *)&__src[4] + 1);
    int v27 = unzlocal_getLong((uint64_t)__src, *(uint64_t *)&__src[4], (uint64_t *)&__src[8]);
    int v28 = unzlocal_getLong((uint64_t)__src, *(uint64_t *)&__src[4], (uint64_t *)&__src[8] + 1);
    int v29 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &__src[5]);
    if (v20 < *(void *)&__src[8] + *((void *)&__src[8] + 1)
      || v29
      || v28
      || v27
      || v24 != v26
      || v23
      || v25
      || !v35
      || v22
      || v21
      || v34
      || Short
      || Long
      || v31)
    {
      (*((void (**)(void, void))&__src[2] + 1))(*((void *)&__src[3] + 1), *(void *)&__src[4]);
      return 0;
    }
    else
    {
      *((void *)&__src[5] + 1) = v20 - (*(void *)&__src[8] + *((void *)&__src[8] + 1));
      *((void *)&__src[7] + 1) = v20;
      *(void *)&__src[18] = 0;
      DWORD2(__src[18]) = 0;
      int v6 = malloc(0x150uLL);
      memcpy(v6, __src, 0x150uLL);
      amai_unzGoToFirstFile(v6);
    }
  }
  return v6;
}

uint64_t unzlocal_getLong(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v11 = 0;
  if (unzlocal_getByte(a1, a2, &v11)
    || (uint64_t v6 = v11, unzlocal_getByte(a1, a2, &v11))
    || (uint64_t v7 = v11, unzlocal_getByte(a1, a2, &v11)))
  {
    uint64_t v8 = 0;
    uint64_t result = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v10 = v6 + (v7 << 8) + ((uint64_t)v11 << 16);
    uint64_t result = unzlocal_getByte(a1, a2, &v11);
    uint64_t v8 = v10 + ((uint64_t)v11 << 24);
    if (result) {
      uint64_t v8 = 0;
    }
  }
  *a3 = v8;
  return result;
}

uint64_t unzlocal_getShort(uint64_t a1, uint64_t a2, void *a3)
{
  int v9 = 0;
  if (unzlocal_getByte(a1, a2, &v9))
  {
    uint64_t v6 = 0;
    uint64_t result = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v8 = v9;
    uint64_t result = unzlocal_getByte(a1, a2, &v9);
    uint64_t v6 = v8 + ((uint64_t)v9 << 8);
    if (result) {
      uint64_t v6 = 0;
    }
  }
  *a3 = v6;
  return result;
}

uint64_t amai_unzGoToFirstFile(void *a1)
{
  if (!a1) {
    return 4294967194;
  }
  uint64_t v2 = a1[17];
  a1[12] = 0;
  a1[13] = v2;
  uint64_t result = unzlocal_GetCurrentFileInfoInternal((uint64_t)a1, (uint64_t)(a1 + 18), a1 + 35, 0, 0, 0, 0, 0, 0);
  a1[14] = result == 0;
  return result;
}

void *amai_unzOpen(uint64_t a1)
{
  return amai_unzOpen2(a1, 0);
}

uint64_t amai_unzClose(uint64_t a1)
{
  if (!a1) {
    return 4294967194;
  }
  if (*(void *)(a1 + 288)) {
    amai_unzCloseCurrentFile(a1);
  }
  (*(void (**)(void, void))(a1 + 40))(*(void *)(a1 + 56), *(void *)(a1 + 64));
  free((void *)a1);
  return 0;
}

uint64_t amai_unzCloseCurrentFile(uint64_t a1)
{
  if (!a1) {
    return 4294967194;
  }
  uint64_t v2 = *(void *)(a1 + 288);
  if (!v2) {
    return 4294967194;
  }
  if (*(void *)(v2 + 184) || *(_DWORD *)(v2 + 280))
  {
    uint64_t v3 = 0;
  }
  else if (*(void *)(v2 + 160) == *(void *)(v2 + 168))
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 4294967191;
  }
  if (*(void *)v2) {
    free(*(void **)v2);
  }
  *(void *)uint64_t v2 = 0;
  if (*(void *)(v2 + 128)) {
    inflateEnd((z_streamp)(v2 + 8));
  }
  free((void *)v2);
  *(void *)(a1 + 288) = 0;
  return v3;
}

uint64_t amai_unzGetCurrentFileInfo(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  return unzlocal_GetCurrentFileInfoInternal(a1, a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t unzlocal_GetCurrentFileInfoInternal(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  if (!a1) {
    return 4294967194;
  }
  if ((*(uint64_t (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 88) + *(void *)(a1 + 104), 0)|| (uint64_t v54 = 0, unzlocal_getLong(a1, *(void *)(a1 + 64), &v54)))
  {
    int v10 = -1;
  }
  else if (v54 == 33639248)
  {
    int v10 = 0;
  }
  else
  {
    int v10 = -103;
  }
  unsigned int v50 = v10;
  uint64_t v64 = 0;
  long long v62 = 0u;
  int8x16_t v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v55 = 0;
  int Short = unzlocal_getShort(a1, *(void *)(a1 + 64), &v56);
  int v48 = unzlocal_getShort(a1, *(void *)(a1 + 64), (void *)&v56 + 1);
  int v47 = unzlocal_getShort(a1, *(void *)(a1 + 64), &v57);
  int v46 = unzlocal_getShort(a1, *(void *)(a1 + 64), (void *)&v57 + 1);
  int Long = unzlocal_getLong(a1, *(void *)(a1 + 64), (uint64_t *)&v58);
  LODWORD(v64) = ((v58 >> 21) & 0xF) - 1;
  HIDWORD(v64) = (v58 >> 25) + 1980;
  v11.i32[0] = v58;
  int8x16_t v12 = (int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v58), (uint32x4_t)xmmword_217B31980);
  v12.i32[0] = vshlq_u32(v11, (uint32x4_t)xmmword_217B31970).u32[0];
  int8x16_t v63 = vandq_s8(v12, (int8x16_t)xmmword_217B31990);
  int v13 = unzlocal_getLong(a1, *(void *)(a1 + 64), (uint64_t *)&v58 + 1);
  int v14 = unzlocal_getLong(a1, *(void *)(a1 + 64), (uint64_t *)&v59);
  int v15 = unzlocal_getLong(a1, *(void *)(a1 + 64), (uint64_t *)&v59 + 1);
  int v16 = unzlocal_getShort(a1, *(void *)(a1 + 64), &v60);
  int v17 = unzlocal_getShort(a1, *(void *)(a1 + 64), (void *)&v60 + 1);
  int v18 = unzlocal_getShort(a1, *(void *)(a1 + 64), &v61);
  int v19 = unzlocal_getShort(a1, *(void *)(a1 + 64), (void *)&v61 + 1);
  int v20 = unzlocal_getShort(a1, *(void *)(a1 + 64), &v62);
  int v21 = unzlocal_getLong(a1, *(void *)(a1 + 64), (uint64_t *)&v62 + 1);
  if (unzlocal_getLong(a1, *(void *)(a1 + 64), &v55) | v21 | v20 | v19 | v18 | v17 | v16 | v15 | v14 | v13 | Long | v46 | v47 | v48 | Short) {
    uint64_t v22 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v22 = v50;
  }
  unint64_t v23 = v60;
  if (a4)
  {
    unint64_t v25 = a7;
    uint64_t v24 = a6;
    if (v22)
    {
      uint64_t v28 = a2;
      int v27 = a3;
      uint64_t v29 = a8;
    }
    else
    {
      unint64_t v26 = a5;
      if ((unint64_t)v60 < a5)
      {
        *(unsigned char *)(a4 + v60) = 0;
        unint64_t v26 = v23;
      }
      uint64_t v22 = 0;
      if (a5)
      {
        uint64_t v28 = a2;
        int v27 = a3;
        uint64_t v29 = a8;
        if (v23)
        {
          if ((*(uint64_t (**)(void, void))(a1 + 8))(*(void *)(a1 + 56), *(void *)(a1 + 64)) == v26) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = 0xFFFFFFFFLL;
          }
        }
      }
      else
      {
        uint64_t v28 = a2;
        int v27 = a3;
        uint64_t v29 = a8;
      }
      v23 -= v26;
    }
  }
  else
  {
    uint64_t v28 = a2;
    int v27 = a3;
    uint64_t v29 = a8;
    unint64_t v25 = a7;
    uint64_t v24 = a6;
  }
  uint64_t v30 = *((void *)&v60 + 1);
  if (!v24 || v22)
  {
    unint64_t v33 = *((void *)&v60 + 1) + v23;
    if (!v29) {
      goto LABEL_60;
    }
    goto LABEL_46;
  }
  if (*((void *)&v60 + 1) >= v25) {
    unint64_t v31 = v25;
  }
  else {
    unint64_t v31 = *((void *)&v60 + 1);
  }
  if (!v23)
  {
    uint64_t v22 = 0;
    if (!v25) {
      goto LABEL_45;
    }
    goto LABEL_41;
  }
  uint64_t v32 = (*(uint64_t (**)(void, void, unint64_t, uint64_t))(a1 + 32))(*(void *)(a1 + 56), *(void *)(a1 + 64), v23, 1);
  if (v32) {
    uint64_t v22 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v22 = 0;
  }
  if (!v32) {
    unint64_t v23 = 0;
  }
  if (v25)
  {
LABEL_41:
    if (v30)
    {
      if ((*(uint64_t (**)(void, void, uint64_t, unint64_t))(a1 + 8))(*(void *)(a1 + 56), *(void *)(a1 + 64), v24, v31) == v31)uint64_t v22 = v22; {
      else
      }
        uint64_t v22 = 0xFFFFFFFFLL;
    }
  }
LABEL_45:
  unint64_t v33 = v30 - v31 + v23;
  if (!v29) {
    goto LABEL_60;
  }
LABEL_46:
  if (!v22)
  {
    unint64_t v34 = v61;
    unint64_t v35 = a9;
    if ((unint64_t)v61 < a9)
    {
      *(unsigned char *)(v29 + v61) = 0;
      unint64_t v35 = v34;
    }
    if (v33)
    {
      if ((*(uint64_t (**)(void, void, unint64_t, uint64_t))(a1 + 32))(*(void *)(a1 + 56), *(void *)(a1 + 64), v33, 1))
      {
        uint64_t v22 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if (!a9) {
        goto LABEL_60;
      }
LABEL_56:
      if (v34)
      {
        if ((*(uint64_t (**)(void, void, uint64_t, unint64_t))(a1 + 8))(*(void *)(a1 + 56), *(void *)(a1 + 64), v29, v35) == v35)uint64_t v22 = v22; {
        else
        }
          uint64_t v22 = 0xFFFFFFFFLL;
      }
      goto LABEL_60;
    }
    uint64_t v22 = 0;
    if (a9) {
      goto LABEL_56;
    }
  }
LABEL_60:
  if (v28 && !v22)
  {
    int8x16_t v36 = v63;
    *(_OWORD *)(v28 + 96) = v62;
    *(int8x16_t *)(v28 + 112) = v36;
    *(void *)(v28 + 128) = v64;
    long long v37 = v59;
    *(_OWORD *)(v28 + 32) = v58;
    *(_OWORD *)(v28 + 48) = v37;
    long long v38 = v61;
    *(_OWORD *)(v28 + 64) = v60;
    *(_OWORD *)(v28 + 80) = v38;
    long long v39 = v57;
    *(_OWORD *)uint64_t v28 = v56;
    *(_OWORD *)(v28 + 16) = v39;
  }
  if (v27 && !v22) {
    *int v27 = v55;
  }
  return v22;
}

uint64_t amai_unzGoToNextFile(void *a1)
{
  if (!a1) {
    return 4294967194;
  }
  if (!a1[14]) {
    return 4294967196;
  }
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[12] + 1;
  if (v2 != 0xFFFF && v3 == v2) {
    return 4294967196;
  }
  uint64_t v5 = a1[26] + a1[27] + a1[28] + a1[13] + 46;
  a1[12] = v3;
  a1[13] = v5;
  uint64_t result = unzlocal_GetCurrentFileInfoInternal((uint64_t)a1, (uint64_t)(a1 + 18), a1 + 35, 0, 0, 0, 0, 0, 0);
  a1[14] = result == 0;
  return result;
}

uint64_t amai_unzLocateFile(uint64_t a1, char *__s, int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1 || strlen(__s) > 0xFF) {
    return 4294967194;
  }
  if (!*(void *)(a1 + 112)) {
    return 4294967196;
  }
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  long long v17 = *(_OWORD *)(a1 + 240);
  long long v18 = *(_OWORD *)(a1 + 256);
  uint64_t v9 = *(void *)(a1 + 280);
  uint64_t v19 = *(void *)(a1 + 272);
  long long v13 = *(_OWORD *)(a1 + 176);
  long long v14 = *(_OWORD *)(a1 + 192);
  long long v15 = *(_OWORD *)(a1 + 208);
  long long v16 = *(_OWORD *)(a1 + 224);
  long long v11 = *(_OWORD *)(a1 + 144);
  long long v12 = *(_OWORD *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 136);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = v10;
  uint64_t result = unzlocal_GetCurrentFileInfoInternal(a1, a1 + 144, (void *)(a1 + 280), 0, 0, 0, 0, 0, 0);
  for (*(void *)(a1 + 112) = result == 0; !result; uint64_t result = amai_unzGoToNextFile((void *)a1))
  {
    uint64_t result = unzlocal_GetCurrentFileInfoInternal(a1, 0, 0, (uint64_t)v20, 0x100uLL, 0, 0, 0, 0);
    if (result) {
      break;
    }
    uint64_t result = amai_unzStringFileNameCompare(v20, __s, a3);
    if (!result) {
      return result;
    }
  }
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 256) = v18;
  *(void *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(void *)(a1 + 280) = v9;
  return result;
}

uint64_t amai_unzOpenCurrentFile3(uint64_t a1, _DWORD *a2, int *a3, int a4, unsigned char *a5)
{
  v51[2] = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 112)) {
    return 4294967194;
  }
  if (*(void *)(a1 + 288)) {
    amai_unzCloseCurrentFile(a1);
  }
  if ((*(uint64_t (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 88) + *(void *)(a1 + 280), 0))
  {
    return 4294967193;
  }
  uint64_t v50 = 0;
  v51[0] = 0;
  uint64_t v49 = 0;
  int Long = unzlocal_getLong(a1, *(void *)(a1 + 64), v51);
  uint64_t v11 = v51[0];
  int Short = unzlocal_getShort(a1, *(void *)(a1 + 64), &v50);
  int v13 = unzlocal_getShort(a1, *(void *)(a1 + 64), &v49);
  if (unzlocal_getShort(a1, *(void *)(a1 + 64), &v50))
  {
    int v14 = -1;
  }
  else
  {
    if (v11 == 67324752) {
      int v18 = 0;
    }
    else {
      int v18 = -103;
    }
    int v19 = v13 | Short | Long;
    if (v19) {
      int v14 = -1;
    }
    else {
      int v14 = v18;
    }
    if (!v19 && v11 == 67324752)
    {
      int v14 = -103;
      if (v50 == *(void *)(a1 + 168))
      {
        if ((v50 & 0xFFFFFFFFFFFFFFF7) != 0) {
          int v14 = -103;
        }
        else {
          int v14 = 0;
        }
      }
    }
  }
  int v15 = unzlocal_getLong(a1, *(void *)(a1 + 64), &v50);
  if (unzlocal_getLong(a1, *(void *)(a1 + 64), &v50))
  {
    int v16 = -1;
  }
  else
  {
    if (v15) {
      int v16 = -1;
    }
    else {
      int v16 = v14;
    }
    if (!v16)
    {
      if (v50 == *(void *)(a1 + 184))
      {
        int v16 = 0;
      }
      else if ((v49 & 8) != 0)
      {
        int v16 = 0;
      }
      else
      {
        int v16 = -103;
      }
    }
  }
  if (unzlocal_getLong(a1, *(void *)(a1 + 64), &v50))
  {
    int v16 = -1;
  }
  else if (!v16)
  {
    if (v50 == *(void *)(a1 + 192))
    {
      int v16 = 0;
    }
    else if ((v49 & 8) != 0)
    {
      int v16 = 0;
    }
    else
    {
      int v16 = -103;
    }
  }
  if (unzlocal_getLong(a1, *(void *)(a1 + 64), &v50))
  {
    int v16 = -1;
  }
  else if (!v16)
  {
    if (v50 == *(void *)(a1 + 200))
    {
      int v16 = 0;
    }
    else if ((v49 & 8) != 0)
    {
      int v16 = 0;
    }
    else
    {
      int v16 = -103;
    }
  }
  uint64_t v48 = 0;
  if (unzlocal_getShort(a1, *(void *)(a1 + 64), &v48))
  {
    int v16 = -1;
    uint64_t v20 = v48;
  }
  else
  {
    uint64_t v20 = v48;
    if (!v16)
    {
      if (v48 == *(void *)(a1 + 208)) {
        int v16 = 0;
      }
      else {
        int v16 = -103;
      }
    }
  }
  uint64_t v47 = 0;
  if (unzlocal_getShort(a1, *(void *)(a1 + 64), &v47) || v16) {
    return 4294967193;
  }
  uint64_t v22 = *(void *)(a1 + 280);
  int v23 = v47;
  uint64_t v24 = (char *)malloc(0x120uLL);
  if (!v24) {
    return 4294967192;
  }
  unint64_t v25 = v24;
  unint64_t v26 = malloc(0x4000uLL);
  *(void *)unint64_t v25 = v26;
  *((void *)v25 + 17) = v20 + v22 + 30;
  *((_DWORD *)v25 + 36) = v23;
  *((void *)v25 + 19) = 0;
  *((_DWORD *)v25 + 70) = a4;
  if (!v26)
  {
    free(v25);
    return 4294967192;
  }
  *((void *)v25 + 16) = 0;
  if (a2) {
    *a2 = *(void *)(a1 + 168);
  }
  if (a3)
  {
    *a3 = 6;
    uint64_t v27 = *(void *)(a1 + 160) & 6;
    switch(v27)
    {
      case 2:
        int v28 = 9;
        break;
      case 6:
        int v28 = 1;
        break;
      case 4:
        int v28 = 2;
        break;
      default:
        goto LABEL_71;
    }
    *a3 = v28;
  }
LABEL_71:
  uint64_t v29 = *(void *)(a1 + 184);
  *((void *)v25 + 20) = 0;
  *((void *)v25 + 21) = v29;
  uint64_t v30 = *(void *)(a1 + 168);
  *((void *)v25 + 32) = *(void *)(a1 + 64);
  *((void *)v25 + 33) = v30;
  long long v31 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v25 + 12) = *(_OWORD *)a1;
  *((_OWORD *)v25 + 13) = v31;
  long long v32 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v25 + 14) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v25 + 15) = v32;
  *((void *)v25 + 34) = *(void *)(a1 + 88);
  *((void *)v25 + 6) = 0;
  if (!a4 && v30 == 8)
  {
    *((void *)v25 + 1) = 0;
    *((_DWORD *)v25 + 4) = 0;
    *((void *)v25 + 10) = 0;
    *((void *)v25 + 11) = 0;
    *((void *)v25 + 9) = 0;
    uint64_t v33 = inflateInit2_((z_streamp)(v25 + 8), -15, "1.2.12", 112);
    if (v33)
    {
      uint64_t v17 = v33;
      free(v25);
      return v17;
    }
    *((void *)v25 + 16) = 1;
    uint64_t v22 = *(void *)(a1 + 280);
  }
  *((_OWORD *)v25 + 11) = *(_OWORD *)(a1 + 192);
  *((void *)v25 + 15) = v22 + (v23 + v20) + 30;
  *((_DWORD *)v25 + 4) = 0;
  *(void *)(a1 + 288) = v25;
  if (!a5) {
    return 0;
  }
  unint64_t v34 = 878082192;
  crc_table = get_crc_table();
  *(_OWORD *)(a1 + 304) = xmmword_217B319A0;
  *(void *)(a1 + 320) = 878082192;
  *(void *)(a1 + 328) = crc_table;
  int v36 = *a5;
  if (*a5)
  {
    long long v37 = a5 + 1;
    unint64_t v38 = 305419896;
    uint64_t v39 = 591751049;
    do
    {
      unint64_t v38 = crc_table[v36 ^ v38] ^ (v38 >> 8);
      uint64_t v39 = 134775813 * (v39 + v38) + 1;
      *(void *)(a1 + 304) = v38;
      *(void *)(a1 + 312) = v39;
      unint64_t v34 = crc_table[(v34 ^ BYTE3(v39))] ^ (v34 >> 8);
      *(void *)(a1 + 320) = v34;
      int v40 = *v37++;
      int v36 = v40;
    }
    while (v40);
  }
  if ((*(uint64_t (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(*(void *)(a1 + 288) + 272) + *(void *)(*(void *)(a1 + 288) + 120), 0)|| (unint64_t)(*(uint64_t (**)(void, void, uint64_t *, uint64_t))(a1 + 8))(*(void *)(a1 + 56), *(void *)(a1 + 64), v51, 12) < 0xC)
  {
    return 4294967192;
  }
  uint64_t v41 = 0;
  unint64_t v43 = *(void *)(a1 + 320);
  uint64_t v42 = *(void *)(a1 + 328);
  unint64_t v44 = *(void *)(a1 + 304);
  uint64_t v45 = *(void *)(a1 + 312);
  do
  {
    char v46 = *((unsigned char *)v51 + v41) ^ ((unsigned __int16)((v43 & 0xFFFD ^ 3) * (v43 | 2)) >> 8);
    *((unsigned char *)v51 + v41) = v46;
    unint64_t v44 = *(void *)(v42 + 8 * (v46 ^ v44)) ^ (v44 >> 8);
    uint64_t v45 = 134775813 * (v45 + v44) + 1;
    *(void *)(a1 + 304) = v44;
    *(void *)(a1 + 312) = v45;
    unint64_t v43 = *(void *)(v42 + 8 * (v43 ^ BYTE3(v45))) ^ (v43 >> 8);
    *(void *)(a1 + 320) = v43;
    ++v41;
  }
  while (v41 != 12);
  uint64_t v17 = 0;
  *(void *)(*(void *)(a1 + 288) + 120) += 12;
  *(_DWORD *)(a1 + 296) = 1;
  return v17;
}

uint64_t amai_unzOpenCurrentFile(uint64_t a1)
{
  return amai_unzOpenCurrentFile3(a1, 0, 0, 0, 0);
}

uint64_t amai_unzReadCurrentFile(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    return 4294967194;
  }
  uint64_t v4 = *(void *)(a1 + 288);
  if (!v4) {
    return 4294967194;
  }
  if (!*(void *)v4) {
    return 4294967196;
  }
  if (!a3) {
    return 0;
  }
  *(void *)(v4 + 32) = a2;
  *(_DWORD *)(v4 + 40) = a3;
  unint64_t v5 = a3;
  unint64_t v6 = *(void *)(v4 + 184);
  if (v6 < a3 && !*(_DWORD *)(v4 + 280))
  {
    *(_DWORD *)(v4 + 40) = v6;
    a3 = v6;
  }
  uint64_t v7 = *(void *)(v4 + 176);
  uint64_t v8 = *(unsigned int *)(v4 + 16);
  if (v7 + v8 < v5 && *(_DWORD *)(v4 + 280))
  {
    a3 = v8 + v7;
    *(_DWORD *)(v4 + 40) = v8 + v7;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v9 = 0;
  while (1)
  {
    while (1)
    {
      LODWORD(v10) = *(_DWORD *)(v4 + 16);
      if (!v10)
      {
        unint64_t v11 = *(void *)(v4 + 176);
        if (v11)
        {
          if (v11 >= 0x4000) {
            uint64_t v10 = 0x4000;
          }
          else {
            uint64_t v10 = *(void *)(v4 + 176);
          }
          if ((*(uint64_t (**)(void, void, void, void))(v4 + 224))(*(void *)(v4 + 248), *(void *)(v4 + 256), *(void *)(v4 + 272) + *(void *)(v4 + 120), 0)|| (*(uint64_t (**)(void, void, void, uint64_t))(v4 + 200))(*(void *)(v4 + 248), *(void *)(v4 + 256), *(void *)v4, v10) != v10)
          {
            return 0xFFFFFFFFLL;
          }
          if (*(_DWORD *)(a1 + 296))
          {
            uint64_t v12 = 0;
            do
            {
              uint64_t v13 = *(void *)(a1 + 328);
              unsigned int v14 = *(unsigned __int8 *)(*(void *)v4 + v12) ^ (((*(_DWORD *)(a1 + 320) & 0xFFFD ^ 3)
                                                                * (*(_DWORD *)(a1 + 320) | 2u)) >> 8);
              *(unsigned char *)(*(void *)v4 + v12) ^= (unsigned __int16)((*(_WORD *)(a1 + 320) & 0xFFFD ^ 3)
                                                                  * (*(_WORD *)(a1 + 320) | 2)) >> 8;
              uint64_t v15 = *(void *)(v13 + 8 * (v14 ^ *(void *)(a1 + 304))) ^ (*(void *)(a1 + 304) >> 8);
              uint64_t v16 = 134775813 * (*(void *)(a1 + 312) + v15) + 1;
              *(void *)(a1 + 304) = v15;
              *(void *)(a1 + 312) = v16;
              *(void *)(a1 + 320) = *(void *)(v13 + 8 * (*(void *)(a1 + 320) ^ BYTE3(v16))) ^ (*(void *)(a1 + 320) >> 8);
              *(unsigned char *)(*(void *)v4 + v12++) = v14;
            }
            while (v10 != v12);
          }
          *(void *)(v4 + 120) += v10;
          *(void *)(v4 + 176) -= v10;
          *(void *)(v4 + 8) = *(void *)v4;
          *(_DWORD *)(v4 + 16) = v10;
        }
        else
        {
          LODWORD(v10) = 0;
        }
      }
      if (*(void *)(v4 + 264) && !*(_DWORD *)(v4 + 280)) {
        break;
      }
      if (v10 || *(void *)(v4 + 176))
      {
        unsigned int v17 = *(_DWORD *)(v4 + 40);
        uint64_t v10 = v17 >= v10 ? v10 : v17;
        if (v10)
        {
          for (uint64_t i = 0; i != v10; ++i)
            *(unsigned char *)(*(void *)(v4 + 32) + i) = *(unsigned char *)(*(void *)(v4 + 8) + i);
          uint64_t v19 = v10;
        }
        else
        {
          uint64_t v19 = 0;
        }
        *(void *)(v4 + 160) = crc32(*(void *)(v4 + 160), *(const Bytef **)(v4 + 32), v10);
        *(void *)(v4 + 184) -= v19;
        *(_DWORD *)(v4 + 16) -= v10;
        int v20 = *(_DWORD *)(v4 + 40) - v10;
        *(_DWORD *)(v4 + 40) = v20;
        *(void *)(v4 + 32) += v19;
        *(void *)(v4 + 8) += v19;
        uint64_t v9 = (v10 + v9);
        *(void *)(v4 + 48) += v19;
        if (v20) {
          continue;
        }
      }
      return v9;
    }
    uint64_t v21 = *(void *)(v4 + 48);
    uint64_t v22 = *(const Bytef **)(v4 + 32);
    unsigned int v23 = inflate((z_streamp)(v4 + 8), 2);
    if ((v23 & 0x80000000) == 0 && *(void *)(v4 + 56))
    {
      uint64_t v26 = *(void *)(v4 + 48);
      uint64_t v27 = v26 - v21;
      *(void *)(v4 + 160) = crc32(*(void *)(v4 + 160), v22, (int)v26 - (int)v21);
      *(void *)(v4 + 184) -= v27;
      return 4294967293;
    }
    uint64_t v24 = *(void *)(v4 + 48) - v21;
    *(void *)(v4 + 160) = crc32(*(void *)(v4 + 160), v22, v24);
    *(void *)(v4 + 184) -= v24;
    uint64_t v9 = (v9 + v24);
    if (v23) {
      break;
    }
    if (!*(_DWORD *)(v4 + 40)) {
      return v9;
    }
  }
  if (v23 == 1) {
    return v9;
  }
  else {
    return v23;
  }
}

uint64_t unzlocal_getByte(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 v7 = 0;
  if ((*(unsigned int (**)(void, uint64_t, unsigned __int8 *, uint64_t))(a1 + 8))(*(void *)(a1 + 56), a2, &v7, 1) == 1)
  {
    uint64_t result = 0;
    *a3 = v7;
  }
  else if ((*(unsigned int (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 56), a2))
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 0;
  }
  return result;
}

void *amai_zipOpen2()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v6 = v0;
  uint64_t v66 = *MEMORY[0x263EF8340];
  memset(__src, 0, 512);
  if (v1)
  {
    long long v7 = v1[1];
    __src[0] = *v1;
    __src[1] = v7;
    long long v8 = v1[3];
    __src[2] = v1[2];
    __src[3] = v8;
  }
  else
  {
    amai_fill_fopen_filefunc((FILE *(**)(int, char *, char))__src);
  }
  if (v5) {
    uint64_t v9 = 7;
  }
  else {
    uint64_t v9 = 11;
  }
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))&__src[0])(*((void *)&__src[3] + 1), v6, v9);
  *(void *)&__src[4] = v10;
  if (!v10) {
    return 0;
  }
  *(void *)&__src[1044] = (*((uint64_t (**)(void, uint64_t))&__src[1] + 1))(*((void *)&__src[3] + 1), v10);
  LODWORD(__src[13]) = 0;
  unint64_t v11 = malloc(0x4160uLL);
  *(_OWORD *)((char *)&__src[4] + 8) = 0u;
  DWORD2(__src[5]) = 0;
  *(_OWORD *)((char *)&__src[1044] + 8) = 0u;
  if (!v11)
  {
    (*((void (**)(void, void))&__src[2] + 1))(*((void *)&__src[3] + 1), *(void *)&__src[4]);
    return v11;
  }
  *((void *)&__src[1045] + 1) = 0;
  if (v5 == 2)
  {
    uint64_t v48 = v3;
    uint64_t v63 = 0;
    unint64_t v64 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v57 = 0;
    uint64_t v12 = *(void *)&__src[4];
    if (!(*(uint64_t (**)(void, void, void, uint64_t))&__src[2])(*((void *)&__src[3] + 1), *(void *)&__src[4], 0, 2))
    {
      unint64_t v13 = (*((uint64_t (**)(void, uint64_t))&__src[1] + 1))(*((void *)&__src[3] + 1), v12);
      unint64_t v55 = v13;
      if (v13 >= 0xFFFF) {
        unint64_t v14 = 0xFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      uint64_t v15 = (char *)malloc(0x404uLL);
      uint64_t v16 = v15;
      if (!v15) {
        goto LABEL_50;
      }
      if (v14 >= 5)
      {
        unsigned int v17 = v15 + 1;
        uint64_t v18 = 4;
        do
        {
          unint64_t v19 = v18 + 1024;
          unint64_t v20 = v18 + 1024 >= v14 ? v14 : v18 + 1024;
          unint64_t v21 = v20 >= 0x404 ? 1028 : v20;
          if ((*(uint64_t (**)(void, uint64_t, unint64_t, void))&__src[2])(*((void *)&__src[3] + 1), v12, v55 - v20, 0)|| (*((uint64_t (**)(void, uint64_t, unsigned char *, unint64_t))&__src[0] + 1))(*((void *)&__src[3] + 1), v12, v16, v21) != v21)
          {
            break;
          }
          if (v21 >= 4)
          {
            uint64_t v22 = (v21 - 4);
            while (v16[v22] != 80 || v17[v22] != 75 || v17[v22 + 1] != 5 || v17[v22 + 2] != 6)
            {
              if (v22-- <= 0) {
                goto LABEL_33;
              }
            }
            if (v55 - v20 + v22)
            {
              free(v16);
              unint64_t v24 = v18 + 1024;
              if (v55 < v18 + 1024) {
                unint64_t v24 = v55;
              }
              if (v24 >= 0xFFFF) {
                unint64_t v24 = 0xFFFFLL;
              }
              uint64_t v16 = (unsigned char *)(v55 - v24 + v22);
              int v54 = 1;
              goto LABEL_51;
            }
          }
LABEL_33:
          uint64_t v18 = v20;
        }
        while (v14 > v19);
      }
      free(v16);
    }
    uint64_t v16 = 0;
LABEL_50:
    int v54 = 0;
LABEL_51:
    uint64_t v49 = (*(uint64_t (**)(void, void, unsigned char *, void))&__src[2])(*((void *)&__src[3] + 1), *(void *)&__src[4], v16, 0);
    int Long = unzlocal_getLong((uint64_t)__src, *(uint64_t *)&__src[4], &v62);
    int Short = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v61);
    int v52 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v60);
    int v53 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v59);
    int v26 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v58);
    uint64_t v27 = v59;
    uint64_t v56 = v58;
    uint64_t v29 = v60;
    uint64_t v28 = v61;
    int v30 = unzlocal_getLong((uint64_t)__src, *(uint64_t *)&__src[4], (uint64_t *)&v64);
    int v31 = unzlocal_getLong((uint64_t)__src, *(uint64_t *)&__src[4], &v63);
    int v32 = unzlocal_getShort((uint64_t)__src, *(uint64_t *)&__src[4], &v57);
    uint64_t v34 = v63;
    unint64_t v33 = v64;
    BOOL v35 = (unint64_t)v16 >= v64 + v63;
    int v36 = &v16[-v64 - v63];
    if (!v35 || v32 || v31 || v30 || v56 != v27 || v29 || v28 || !v54 || v26 || v53 || v52 || Short || Long || v49)
    {
      (*((void (**)(void, void))&__src[2] + 1))(*((void *)&__src[3] + 1), *(void *)&__src[4]);
LABEL_82:
      free(v11);
      return 0;
    }
    uint64_t v37 = v57;
    if (v57)
    {
      unint64_t v38 = malloc(v57 + 1);
      *((void *)&__src[1045] + 1) = v38;
      if (v38)
      {
        uint64_t v39 = (*((uint64_t (**)(void, void, void *, uint64_t))&__src[0] + 1))(*((void *)&__src[3] + 1), *(void *)&__src[4], v38, v37);
        *(unsigned char *)(*((void *)&__src[1045] + 1) + v39) = 0;
      }
    }
    *((void *)&__src[1044] + 1) = v36;
    int v40 = (char *)malloc(0xFF0uLL);
    uint64_t v41 = v36;
    uint64_t v42 = &v36[v34];
    uint64_t v43 = (*(uint64_t (**)(void, void, char *, void))&__src[2])(*((void *)&__src[3] + 1), *(void *)&__src[4], &v36[v34], 0);
    if (v43) {
      int v44 = -1;
    }
    else {
      int v44 = 0;
    }
    if (v33 && !v43)
    {
      while (1)
      {
        unint64_t v45 = v33 >= 0xFF0 ? 4080 : v33;
        if ((*((uint64_t (**)(void, void, char *, unint64_t))&__src[0] + 1))(*((void *)&__src[3] + 1), *(void *)&__src[4], v40, v45) != v45)break; {
        int v46 = add_data_in_datablock((void *)&__src[4] + 1, v40, v45);
        }
        int v44 = v46;
        v33 -= v45;
        if (!v33 || v46) {
          goto LABEL_86;
        }
      }
      int v44 = -1;
    }
LABEL_86:
    if (v40) {
      free(v40);
    }
    *(void *)&__src[1044] = v41;
    *(void *)&__src[1045] = v56;
    if ((*(uint64_t (**)(void, void, char *, void))&__src[2])(*((void *)&__src[3] + 1), *(void *)&__src[4], v42, 0))
    {
      int v25 = -1;
    }
    else
    {
      int v25 = v44;
    }
    uint64_t v3 = v48;
    if (!v48) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  int v25 = 0;
  if (v3) {
LABEL_43:
  }
    *uint64_t v3 = *((void *)&__src[1045] + 1);
LABEL_44:
  if (v25)
  {
    if (*((void *)&__src[1045] + 1)) {
      free(*((void **)&__src[1045] + 1));
    }
    goto LABEL_82;
  }
  memcpy(v11, __src, 0x4160uLL);
  return v11;
}

uint64_t add_data_in_datablock(void *a1, char *a2, unint64_t a3)
{
  if (!a1) {
    return 4294967192;
  }
  unint64_t v3 = a3;
  uint64_t v6 = (void *)a1[1];
  if (v6)
  {
    if (!a3) {
      return 0;
    }
  }
  else
  {
    long long v8 = (char *)malloc(0x1010uLL);
    if (!v8)
    {
      *a1 = 0;
      a1[1] = 0;
      return 4294967192;
    }
    uint64_t v6 = v8;
    *(void *)long long v8 = 0;
    *(_OWORD *)(v8 + 8) = xmmword_217B319B0;
    *a1 = v8;
    a1[1] = v8;
    if (!v3) {
      return 0;
    }
  }
  unint64_t v9 = v6[1];
  while (v9)
  {
    uint64_t v10 = v6[2];
LABEL_13:
    if (v9 >= v3) {
      unsigned int v12 = v3;
    }
    else {
      unsigned int v12 = v9;
    }
    if (v12)
    {
      unint64_t v13 = (char *)v6 + v10 + 32;
      uint64_t v14 = v12;
      uint64_t v15 = a2;
      do
      {
        char v16 = *v15++;
        *v13++ = v16;
        --v14;
      }
      while (v14);
      unint64_t v9 = v6[1];
      uint64_t v10 = v6[2];
    }
    v9 -= v12;
    v6[1] = v9;
    v6[2] = v10 + v12;
    a2 += v12;
    v3 -= v12;
    if (!v3) {
      return 0;
    }
  }
  unint64_t v11 = (char *)malloc(0x1010uLL);
  if (v11)
  {
    uint64_t v10 = 0;
    *(void *)unint64_t v11 = 0;
    *(_OWORD *)(v11 + 8) = xmmword_217B319B0;
    *uint64_t v6 = v11;
    unint64_t v9 = 4080;
    uint64_t v6 = v11;
    a1[1] = v11;
    goto LABEL_13;
  }
  *uint64_t v6 = 0;
  return 4294967192;
}

void *amai_zipOpen()
{
  return amai_zipOpen2();
}

uint64_t amai_zipOpenNewFileInZip3(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, unsigned int a5, char *a6, unsigned int a7, char *__s, int a9, int a10, int a11, int a12, int a13, int a14, unsigned char *a15, uint64_t a16)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t result = 4294967194;
  if (!a1) {
    return result;
  }
  if ((a9 & 0xFFFFFFF7) != 0) {
    return result;
  }
  if (*(_DWORD *)(a1 + 88) == 1)
  {
    uint64_t result = amai_zipCloseFileInZipRaw(a1, 0, 0);
    if (result) {
      return result;
    }
  }
  unsigned int v95 = a5;
  if (a2) {
    int v25 = a2;
  }
  else {
    int v25 = "-";
  }
  uint64_t v94 = a4;
  if (__s) {
    unsigned int v26 = strlen(__s);
  }
  else {
    unsigned int v26 = 0;
  }
  unsigned int v27 = strlen(v25);
  if (a3)
  {
    unint64_t v28 = *(void *)(a3 + 24);
    if (!v28)
    {
      uint64_t v29 = *(unsigned int *)(a3 + 20);
      uint64_t v30 = v29 - 80;
      if (v29 <= 0x50) {
        uint64_t v30 = *(unsigned int *)(a3 + 20);
      }
      if (v29 <= 0x7BC) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = v29 - 1980;
      }
      unint64_t v28 = ((32 * *(_DWORD *)(a3 + 4) + (*(_DWORD *)a3 >> 1))
           + ((unint64_t)*(unsigned int *)(a3 + 8) << 11)) | (((unint64_t)(*(_DWORD *)(a3 + 12) + 32 * *(_DWORD *)(a3 + 16) + 32) << 16)
                                                                   + (v31 << 25));
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
  *(void *)(a1 + 16640) = v28;
  uint64_t v32 = 2 * ((a10 & 0xFFFFFFFE) == 8);
  *(void *)(a1 + 240) = v32;
  if (a10 == 1)
  {
    uint64_t v32 = 6;
  }
  else
  {
    if (a10 != 2) {
      goto LABEL_25;
    }
    v32 |= 4uLL;
  }
  *(void *)(a1 + 240) = v32;
LABEL_25:
  if (a15) {
    *(void *)(a1 + 240) = v32 | 1;
  }
  *(void *)(a1 + 16648) = 0;
  *(_DWORD *)(a1 + 16656) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 248) = a9;
  *(_DWORD *)(a1 + 252) = a11;
  uint64_t v33 = (*(uint64_t (**)(void, void))(a1 + 24))(*(void *)(a1 + 56), *(void *)(a1 + 64));
  *(void *)(a1 + 216) = v33;
  size_t v34 = a7 + v26 + v27 + 46;
  *(void *)(a1 + 232) = v34;
  BOOL v35 = malloc(v34);
  *(void *)(a1 + 224) = v35;
  *BOOL v35 = 33639248;
  v35[1] = 1310720;
  unint64_t v36 = *(void *)(a1 + 240);
  *((_WORD *)v35 + 4) = v36;
  if (v36 >= 0x10000) {
    *((_WORD *)v35 + 4) = -1;
  }
  unsigned int v37 = *(_DWORD *)(a1 + 248);
  *((_WORD *)v35 + 5) = v37;
  if (v37 >= 0x10000) {
    *((_WORD *)v35 + 5) = -1;
  }
  uint64_t v38 = 0;
  uint64_t v39 = v35 + 3;
  unint64_t v40 = *(void *)(a1 + 16640);
  do
  {
    unint64_t v41 = v40;
    *((unsigned char *)v39 + v38) = v40;
    v40 >>= 8;
    ++v38;
  }
  while (v38 != 4);
  if (v41 >= 0x100) {
    *uint64_t v39 = -1;
  }
  *((void *)v35 + 2) = 0;
  v35[6] = 0;
  *((_WORD *)v35 + 14) = v27;
  if (v27 >= 0x10000uLL) {
    *((_WORD *)v35 + 14) = -1;
  }
  *((_WORD *)v35 + 15) = a7;
  if (a7 >= 0x10000) {
    *((_WORD *)v35 + 15) = -1;
  }
  *((_WORD *)v35 + 16) = v26;
  if (v26 >= 0x10000) {
    *((_WORD *)v35 + 16) = -1;
  }
  *((_WORD *)v35 + 17) = 0;
  uint64_t v42 = v26;
  if (a3)
  {
    unint64_t v43 = *(void *)(a3 + 32);
    *((_WORD *)v35 + 18) = v43;
    if (v43 >= 0x10000) {
      *((_WORD *)v35 + 18) = -1;
    }
    uint64_t v44 = 0;
    unint64_t v45 = (_DWORD *)((char *)v35 + 38);
    unint64_t v46 = *(void *)(a3 + 40);
    do
    {
      unint64_t v47 = v46;
      *((unsigned char *)v45 + v44) = v46;
      v46 >>= 8;
      ++v44;
    }
    while (v44 != 4);
    if (v47 >= 0x100) {
      _DWORD *v45 = -1;
    }
  }
  else
  {
    *((_WORD *)v35 + 18) = 0;
    *(_DWORD *)((char *)v35 + 38) = 0;
  }
  uint64_t v48 = 0;
  uint64_t v49 = (_DWORD *)((char *)v35 + 42);
  unint64_t v50 = v33 - *(void *)(a1 + 16712);
  do
  {
    unint64_t v51 = v50;
    *((unsigned char *)v49 + v48) = v50;
    v50 >>= 8;
    ++v48;
  }
  while (v48 != 4);
  if (v51 >= 0x100) {
    *uint64_t v49 = -1;
  }
  if (v27)
  {
    for (uint64_t i = 0; i != v27; ++i)
      *(unsigned char *)(*(void *)(a1 + 224) + i + 46) = v25[i];
  }
  if (a7)
  {
    uint64_t v53 = v27 + 46;
    uint64_t v54 = a7;
    do
    {
      char v55 = *a6++;
      *(unsigned char *)(*(void *)(a1 + 224) + v53++) = v55;
      --v54;
    }
    while (v54);
  }
  if (v26)
  {
    unint64_t v56 = a7 + (unint64_t)v27 + 46;
    do
    {
      char v57 = *__s++;
      *(unsigned char *)(*(void *)(a1 + 224) + v56++) = v57;
      --v42;
    }
    while (v42);
  }
  if (!*(void *)(a1 + 224)) {
    return 4294967192;
  }
  v96[0] = 67324752;
  if ((*(uint64_t (**)(void, void, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v96, 4) != 4)goto LABEL_91; {
  LOWORD(v96[0]) = 20;
  }
  if ((*(uint64_t (**)(void, void, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v96, 2) != 2)goto LABEL_91; {
  uint64_t v58 = *(void *)(a1 + 64);
  }
  unint64_t v59 = *(void *)(a1 + 240);
  LOWORD(v96[0]) = v59;
  if (v59 >= 0x10000) {
    LOWORD(v96[0]) = -1;
  }
  if ((*(uint64_t (**)(void, uint64_t, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v58, v96, 2) != 2) {
    goto LABEL_91;
  }
  uint64_t v60 = *(void *)(a1 + 64);
  unsigned int v61 = *(_DWORD *)(a1 + 248);
  LOWORD(v96[0]) = v61;
  if (v61 >= 0x10000) {
    LOWORD(v96[0]) = -1;
  }
  if ((*(uint64_t (**)(void, uint64_t, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v60, v96, 2) != 2) {
    goto LABEL_91;
  }
  uint64_t v62 = 0;
  uint64_t v63 = *(void *)(a1 + 64);
  unint64_t v64 = *(void *)(a1 + 16640);
  do
  {
    unint64_t v65 = v64;
    *((unsigned char *)v96 + v62) = v64;
    v64 >>= 8;
    ++v62;
  }
  while (v62 != 4);
  if (v65 >= 0x100) {
    v96[0] = -1;
  }
  if ((*(uint64_t (**)(void, uint64_t, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v63, v96, 4) != 4) {
    goto LABEL_91;
  }
  v96[0] = 0;
  if ((*(uint64_t (**)(void, void, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v96, 4) != 4)goto LABEL_91; {
  v96[0] = 0;
  }
  if ((*(uint64_t (**)(void, void, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v96, 4) != 4)goto LABEL_91; {
  v96[0] = 0;
  }
  if ((*(uint64_t (**)(void, void, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v96, 4) != 4)goto LABEL_91; {
  uint64_t v66 = *(void *)(a1 + 64);
  }
  LOWORD(v96[0]) = v27;
  if (v27 >= 0x10000uLL) {
    LOWORD(v96[0]) = -1;
  }
  if ((*(uint64_t (**)(void, uint64_t, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v66, v96, 2) != 2) {
    goto LABEL_91;
  }
  uint64_t v67 = *(void *)(a1 + 64);
  LOWORD(v96[0]) = v95;
  if (v95 >= 0x10000) {
    LOWORD(v96[0]) = -1;
  }
  uint64_t v68 = (*(uint64_t (**)(void, uint64_t, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v67, v96, 2);
  BOOL v69 = v68 != 2;
  if (v68 == 2 && v27) {
    BOOL v69 = (*(uint64_t (**)(void, void, const char *, void))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v25, v27) != v27;
  }
  unsigned int v70 = v95;
  if (v95 && !v69)
  {
    if ((*(uint64_t (**)(void, void, uint64_t, void))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v94, v95) == v70)
    {
      *(_DWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 128) = 0x4000;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = a1 + 256;
      *(void *)(a1 + 136) = 0;
      long long v71 = (_DWORD *)(a1 + 16656);
      long long v72 = a15;
      goto LABEL_97;
    }
LABEL_91:
    *(_DWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 128) = 0x4000;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = a1 + 256;
    uint64_t result = 0xFFFFFFFFLL;
    *(void *)(a1 + 136) = 0;
    long long v71 = (_DWORD *)(a1 + 16656);
    goto LABEL_92;
  }
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 128) = 0x4000;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 256;
  *(void *)(a1 + 136) = 0;
  long long v71 = (_DWORD *)(a1 + 16656);
  long long v72 = a15;
  if (v69)
  {
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_92;
  }
LABEL_97:
  if (*(_DWORD *)(a1 + 248) != 8 || *(_DWORD *)(a1 + 252)) {
    goto LABEL_99;
  }
  if (a12 < 0) {
    int v93 = a12;
  }
  else {
    int v93 = -a12;
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t result = deflateInit2_((z_streamp)(a1 + 96), a10, 8, v93, a13, a14, "1.2.12", 112);
  if (result)
  {
LABEL_92:
    v71[10] = 0;
    return result;
  }
  *(_DWORD *)(a1 + 208) = 1;
  long long v72 = a15;
LABEL_99:
  v71[10] = 0;
  if (!v72) {
    goto LABEL_107;
  }
  *long long v71 = 1;
  crc_table = get_crc_table();
  *(void *)(a1 + 16688) = crc_table;
  if (!crypthead_calls++)
  {
    int v75 = time(0);
    srand(v75 ^ 0xBB40E64E);
  }
  init_keys(a15, a1 + 16664, (uint64_t)crc_table);
  for (uint64_t j = 0; j != 10; v99[j++] = ((unsigned __int16)((v78 & 0xFFFD ^ 3) * (v78 | 2)) >> 8) ^ (v77 >> 7))
  {
    unsigned int v77 = rand();
    unint64_t v78 = *(void *)(a1 + 16680);
    z_crc_t v79 = crc_table[(*(void *)(a1 + 16664) ^ (v77 >> 7))] ^ (*(void *)(a1 + 16664) >> 8);
    *(void *)(a1 + 16664) = v79;
    uint64_t v80 = 134775813 * (*(void *)(a1 + 16672) + v79) + 1;
    *(void *)(a1 + 16672) = v80;
    *(void *)(a1 + 16680) = crc_table[(v78 ^ BYTE3(v80))] ^ (v78 >> 8);
  }
  init_keys(a15, a1 + 16664, (uint64_t)crc_table);
  uint64_t v81 = 0;
  z_crc_t v82 = *(void *)(a1 + 16680);
  z_crc_t v83 = *(void *)(a1 + 16664);
  uint64_t v84 = *(void *)(a1 + 16672);
  do
  {
    __int16 v85 = (v82 & 0xFFFD ^ 3) * (v82 | 2);
    char v86 = v99[v81];
    z_crc_t v83 = crc_table[(v86 ^ v83)] ^ (v83 >> 8);
    *(void *)(a1 + 16664) = v83;
    uint64_t v84 = 134775813 * (v84 + v83) + 1;
    *(void *)(a1 + 16672) = v84;
    z_crc_t v82 = crc_table[(v82 ^ BYTE3(v84))] ^ (v82 >> 8);
    *(void *)(a1 + 16680) = v82;
    *((unsigned char *)v96 + v81++) = v86 ^ HIBYTE(v85);
  }
  while (v81 != 10);
  int v87 = ((v82 & 0xFFFFFFFD ^ 3) * (v82 | 2)) >> 8;
  z_crc_t v88 = crc_table[(v83 ^ BYTE2(a16))] ^ (v83 >> 8);
  *(void *)(a1 + 16664) = v88;
  uint64_t v89 = 134775813 * (v84 + v88) + 1;
  *(void *)(a1 + 16672) = v89;
  z_crc_t v90 = crc_table[(v82 ^ BYTE3(v89))] ^ (v82 >> 8);
  *(void *)(a1 + 16680) = v90;
  char v97 = v87 ^ BYTE2(a16);
  z_crc_t v91 = crc_table[v88 ^ BYTE3(a16)] ^ (v88 >> 8);
  *(void *)(a1 + 16664) = v91;
  uint64_t v92 = 134775813 * (v89 + v91) + 1;
  *(void *)(a1 + 16672) = v92;
  *(void *)(a1 + 16680) = crc_table[(v90 ^ BYTE3(v92))] ^ (v90 >> 8);
  char v98 = ((unsigned __int16)((v90 & 0xFFFD ^ 3) * (v90 | 2)) >> 8) ^ BYTE3(a16);
  *(_DWORD *)(a1 + 16696) = 12;
  if ((*(uint64_t (**)(void, void, _DWORD *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v96, 12) != 12)return 0xFFFFFFFFLL; {
LABEL_107:
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 88) = 1;
  return result;
}

uint64_t amai_zipCloseFileInZip(uint64_t a1)
{
  return amai_zipCloseFileInZipRaw(a1, 0, 0);
}

uint64_t amai_zipOpenNewFileInZip(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, unsigned int a5, char *a6, unsigned int a7, char *a8, int a9, int a10)
{
  return amai_zipOpenNewFileInZip3(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, -15, 8, 0, 0, 0);
}

uint64_t amai_zipWriteInFileInZip(uint64_t a1, const Bytef *a2, uInt a3)
{
  if (!a1) {
    return 4294967194;
  }
  if (!*(_DWORD *)(a1 + 88)) {
    return 4294967194;
  }
  *(void *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 104) = a3;
  *(void *)(a1 + 16648) = crc32(*(void *)(a1 + 16648), a2, a3);
  while (*(_DWORD *)(a1 + 104))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 128);
    if (v4
      || (uint64_t result = zipFlushWriteBuffer(a1),
          unsigned int v4 = 0x4000,
          *(_DWORD *)(a1 + 128) = 0x4000,
          *(void *)(a1 + 120) = a1 + 256,
          result != -1))
    {
      if (*(_DWORD *)(a1 + 248) == 8 && !*(_DWORD *)(a1 + 252))
      {
        int v11 = *(_DWORD *)(a1 + 136);
        uint64_t result = deflate((z_streamp)(a1 + 96), 0);
        LODWORD(v7) = *(_DWORD *)(a1 + 136) - v11;
      }
      else
      {
        unsigned int v6 = *(_DWORD *)(a1 + 104);
        uint64_t v7 = v6 >= v4 ? v4 : v6;
        if (v7)
        {
          for (uint64_t i = 0; i != v7; ++i)
            *(unsigned char *)(*(void *)(a1 + 120) + i) = *(unsigned char *)(*(void *)(a1 + 96) + i);
          unsigned int v6 = *(_DWORD *)(a1 + 104);
          unsigned int v4 = *(_DWORD *)(a1 + 128);
          uint64_t v9 = v7;
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t result = 0;
        *(_DWORD *)(a1 + 104) = v6 - v7;
        *(_DWORD *)(a1 + 128) = v4 - v7;
        *(void *)(a1 + 96) += v9;
        uint64_t v10 = *(void *)(a1 + 120) + v9;
        *(void *)(a1 + 112) += v9;
        *(void *)(a1 + 120) = v10;
        *(void *)(a1 + 136) += v9;
      }
      *(_DWORD *)(a1 + 212) += v7;
      if (!result) {
        continue;
      }
    }
    return result;
  }
  return 0;
}

uint64_t zipFlushWriteBuffer(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 212);
  if (*(_DWORD *)(a1 + 16656) && v2)
  {
    unint64_t v3 = (unsigned char *)(a1 + 256);
    uint64_t v4 = *(unsigned int *)(a1 + 212);
    do
    {
      unint64_t v5 = *(void *)(a1 + 16680);
      uint64_t v6 = *(void *)(a1 + 16688);
      uint64_t v7 = *(void *)(v6 + 8 * (*v3 ^ *(void *)(a1 + 16664))) ^ (*(void *)(a1 + 16664) >> 8);
      *(void *)(a1 + 16664) = v7;
      uint64_t v8 = 134775813 * (*(void *)(a1 + 16672) + v7) + 1;
      *(void *)(a1 + 16672) = v8;
      *(void *)(a1 + 16680) = *(void *)(v6 + 8 * (v5 ^ BYTE3(v8))) ^ (v5 >> 8);
      *v3++ ^= (unsigned __int16)((v5 & 0xFFFD ^ 3) * (v5 | 2)) >> 8;
      --v4;
    }
    while (v4);
  }
  if ((*(uint64_t (**)(void, void, uint64_t, void))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), a1 + 256, v2) == *(_DWORD *)(a1 + 212))uint64_t result = 0; {
  else
  }
    uint64_t result = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 212) = 0;
  return result;
}

uint64_t amai_zipCloseFileInZipRaw(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a1 || !*(_DWORD *)(a1 + 88)) {
    return 4294967194;
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (*(_DWORD *)(a1 + 248) == 8)
  {
    if (*(_DWORD *)(a1 + 252))
    {
      uint64_t v6 = 0;
    }
    else
    {
      do
      {
        if (!*(_DWORD *)(a1 + 128))
        {
          int v33 = zipFlushWriteBuffer(a1);
          *(_DWORD *)(a1 + 128) = 0x4000;
          *(void *)(a1 + 120) = a1 + 256;
          if (v33 == -1)
          {
            uint64_t v6 = 0xFFFFFFFFLL;
            goto LABEL_10;
          }
        }
        int v34 = *(_DWORD *)(a1 + 136);
        unsigned int v35 = deflate((z_streamp)(a1 + 96), 4);
        *(_DWORD *)(a1 + 212) += *(_DWORD *)(a1 + 136) - v34;
      }
      while (!v35);
      if (v35 == 1) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v35;
      }
      if (v6) {
        goto LABEL_10;
      }
    }
  }
  if (*(_DWORD *)(a1 + 212))
  {
    if (zipFlushWriteBuffer(a1) == -1) {
      uint64_t v6 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v6 = 0;
    }
  }
LABEL_10:
  if (*(_DWORD *)(a1 + 248) == 8 && !(*(_DWORD *)(a1 + 252) | v6))
  {
    uint64_t v6 = deflateEnd((z_streamp)(a1 + 96));
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (!*(_DWORD *)(a1 + 252))
  {
    a3 = *(void *)(a1 + 16648);
    a2 = *(void *)(a1 + 112);
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v9 = *(int *)(a1 + 16696);
  uint64_t v10 = (_DWORD *)(*(void *)(a1 + 224) + 16);
  unint64_t v11 = a3;
  do
  {
    unint64_t v12 = v11;
    *((unsigned char *)v10 + v7) = v11;
    v11 >>= 8;
    ++v7;
  }
  while (v7 != 4);
  unint64_t v13 = v8 + v9;
  if (v12 >= 0x100) {
    *uint64_t v10 = -1;
  }
  uint64_t v14 = 0;
  uint64_t v15 = (_DWORD *)(*(void *)(a1 + 224) + 20);
  unint64_t v16 = v8 + v9;
  do
  {
    unint64_t v17 = v16;
    *((unsigned char *)v15 + v14) = v16;
    v16 >>= 8;
    ++v14;
  }
  while (v14 != 4);
  if (v17 >= 0x100) {
    *uint64_t v15 = -1;
  }
  if (*(_DWORD *)(a1 + 184) == 1) {
    *(_WORD *)(*(void *)(a1 + 224) + 36) = 1;
  }
  uint64_t v18 = 0;
  unint64_t v19 = (_DWORD *)(*(void *)(a1 + 224) + 24);
  unint64_t v20 = a2;
  do
  {
    unint64_t v21 = v20;
    *((unsigned char *)v19 + v18) = v20;
    v20 >>= 8;
    ++v18;
  }
  while (v18 != 4);
  if (v21 >= 0x100) {
    *unint64_t v19 = -1;
  }
  if (v6)
  {
    free(*(void **)(a1 + 224));
  }
  else
  {
    uint64_t v6 = add_data_in_datablock((void *)(a1 + 72), *(char **)(a1 + 224), *(void *)(a1 + 232));
    free(*(void **)(a1 + 224));
    if (!v6)
    {
      uint64_t v22 = (*(uint64_t (**)(void, void))(a1 + 24))(*(void *)(a1 + 56), *(void *)(a1 + 64));
      if ((*(uint64_t (**)(void, void, uint64_t, void))(a1 + 32))(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 216) + 14, 0))
      {
        goto LABEL_59;
      }
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(a1 + 64);
      do
      {
        unint64_t v25 = a3;
        *((unsigned char *)&v37 + v23) = a3;
        a3 >>= 8;
        ++v23;
      }
      while (v23 != 4);
      if (v25 >= 0x100) {
        int v37 = -1;
      }
      if ((*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v24, &v37, 4) != 4) {
        goto LABEL_59;
      }
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(a1 + 64);
      do
      {
        unint64_t v28 = v13;
        *((unsigned char *)&v38 + v26) = v13;
        v13 >>= 8;
        ++v26;
      }
      while (v26 != 4);
      if (v28 >= 0x100) {
        int v38 = -1;
      }
      if ((*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v27, &v38, 4) == 4)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *(void *)(a1 + 64);
        do
        {
          unint64_t v31 = a2;
          *((unsigned char *)&v39 + v29) = a2;
          a2 >>= 8;
          ++v29;
        }
        while (v29 != 4);
        if (v31 >= 0x100) {
          int v39 = -1;
        }
        if ((*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v30, &v39, 4) == 4)unsigned int v32 = 0; {
        else
        }
          unsigned int v32 = -1;
      }
      else
      {
LABEL_59:
        unsigned int v32 = -1;
      }
      if ((*(uint64_t (**)(void, void, uint64_t, void))(a1 + 32))(*(void *)(a1 + 56), *(void *)(a1 + 64), v22, 0))
      {
        uint64_t v6 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v6 = v32;
      }
    }
  }
  ++*(void *)(a1 + 16720);
  *(_DWORD *)(a1 + 88) = 0;
  return v6;
}

uint64_t amai_zipClose(uint64_t a1, const char *a2)
{
  if (!a1) {
    return 4294967194;
  }
  unsigned int v2 = a2;
  if (*(_DWORD *)(a1 + 88) != 1)
  {
    unsigned int v4 = 0;
    if (!a2) {
      goto LABEL_7;
    }
LABEL_8:
    unsigned int v6 = strlen(v2);
    goto LABEL_9;
  }
  unsigned int v4 = amai_zipCloseFileInZipRaw(a1, 0, 0);
  if (v2) {
    goto LABEL_8;
  }
LABEL_7:
  unsigned int v2 = *(const char **)(a1 + 16728);
  if (v2) {
    goto LABEL_8;
  }
  unsigned int v6 = 0;
LABEL_9:
  uint64_t v7 = (*(uint64_t (**)(void, void))(a1 + 24))(*(void *)(a1 + 56), *(void *)(a1 + 64));
  if (!v4)
  {
    uint64_t v9 = *(void **)(a1 + 72);
    if (v9)
    {
      unint64_t v8 = 0;
      unsigned int v4 = 0;
      do
      {
        uint64_t v10 = v9[2];
        if (v4)
        {
          unsigned int v4 = -1;
        }
        else if (v10)
        {
          uint64_t v11 = (*(uint64_t (**)(void, void, void *))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v9 + 4);
          uint64_t v10 = v9[2];
          if (v11 == v10) {
            unsigned int v4 = 0;
          }
          else {
            unsigned int v4 = -1;
          }
        }
        else
        {
          unsigned int v4 = 0;
        }
        v8 += v10;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
      goto LABEL_21;
    }
    unsigned int v4 = 0;
  }
  unint64_t v8 = 0;
LABEL_21:
  unint64_t v12 = *(void **)(a1 + 72);
  if (v12)
  {
    do
    {
      unint64_t v13 = (void *)*v12;
      free(v12);
      unint64_t v12 = v13;
    }
    while (v13);
  }
  if (!v4)
  {
    int v31 = 101010256;
    if ((*(uint64_t (**)(void, void, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), &v31, 4) != 4)goto LABEL_53; {
    LOWORD(v31) = 0;
    }
    if ((*(uint64_t (**)(void, void, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), &v31, 2) != 2)goto LABEL_53; {
    LOWORD(v31) = 0;
    }
    if ((*(uint64_t (**)(void, void, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), &v31, 2) != 2)goto LABEL_53; {
    uint64_t v14 = *(void *)(a1 + 64);
    }
    unint64_t v15 = *(void *)(a1 + 16720);
    LOWORD(v31) = v15;
    if (v15 >= 0x10000) {
      LOWORD(v31) = -1;
    }
    if ((*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v14, &v31, 2) != 2) {
      goto LABEL_53;
    }
    uint64_t v16 = *(void *)(a1 + 64);
    unint64_t v17 = *(void *)(a1 + 16720);
    LOWORD(v31) = v17;
    if (v17 >= 0x10000) {
      LOWORD(v31) = -1;
    }
    if ((*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v16, &v31, 2) != 2) {
      goto LABEL_53;
    }
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(a1 + 64);
    do
    {
      unint64_t v20 = v8;
      *((unsigned char *)&v31 + v18) = v8;
      v8 >>= 8;
      ++v18;
    }
    while (v18 != 4);
    if (v20 >= 0x100) {
      int v31 = -1;
    }
    if ((*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v19, &v31, 4) != 4) {
      goto LABEL_53;
    }
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(a1 + 64);
    unint64_t v23 = v7 - *(void *)(a1 + 16712);
    do
    {
      unint64_t v24 = v23;
      *((unsigned char *)&v31 + v21) = v23;
      v23 >>= 8;
      ++v21;
    }
    while (v21 != 4);
    if (v24 >= 0x100) {
      int v31 = -1;
    }
    if ((*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v22, &v31, 4) == 4)
    {
      uint64_t v25 = *(void *)(a1 + 64);
      LOWORD(v31) = v6;
      if (v6 >= 0x10000) {
        LOWORD(v31) = -1;
      }
      uint64_t v26 = (*(uint64_t (**)(void, uint64_t, int *, uint64_t))(a1 + 16))(*(void *)(a1 + 56), v25, &v31, 2);
      if (v26 == 2) {
        unsigned int v4 = 0;
      }
      else {
        unsigned int v4 = -1;
      }
      if (v26 == 2 && v6)
      {
        if ((*(uint64_t (**)(void, void, const char *, void))(a1 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 64), v2, v6) == v6)unsigned int v4 = 0; {
        else
        }
          unsigned int v4 = -1;
      }
    }
    else
    {
LABEL_53:
      unsigned int v4 = -1;
    }
  }
  int v27 = (*(uint64_t (**)(void, void))(a1 + 40))(*(void *)(a1 + 56), *(void *)(a1 + 64));
  if (v4) {
    unsigned int v28 = v4;
  }
  else {
    unsigned int v28 = -1;
  }
  if (v27) {
    uint64_t v5 = v28;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v29 = *(void **)(a1 + 16728);
  if (v29) {
    free(v29);
  }
  free((void *)a1);
  return v5;
}

unsigned char *init_keys(unsigned char *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 878082192;
  *(_OWORD *)a2 = xmmword_217B319A0;
  *(void *)(a2 + 16) = 878082192;
  int v4 = *result;
  if (*result)
  {
    uint64_t v5 = result + 1;
    unint64_t v6 = 305419896;
    uint64_t v7 = 591751049;
    do
    {
      unint64_t v6 = *(void *)(a3 + 8 * (v4 ^ v6)) ^ (v6 >> 8);
      uint64_t v7 = 134775813 * (v7 + v6) + 1;
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = v7;
      unint64_t v3 = *(void *)(a3 + 8 * (v3 ^ BYTE3(v7))) ^ (v3 >> 8);
      *(void *)(a2 + 16) = v3;
      int v8 = *v5++;
      int v4 = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t ACFUDataContainer::DirectDataRef::DirectDataRef(uint64_t this, void *a2, uint64_t a3, char a4)
{
  *(void *)this = a2;
  *(void *)(this + 8) = a3;
  *(unsigned char *)(this + 16) = a4;
  *(unsigned char *)(this + 17) = 1;
  return this;
}

uint64_t ACFUDataContainer::DirectDataRef::getDataPtr(ACFUDataContainer::DirectDataRef *this)
{
  return *(void *)this;
}

void ACFUDataContainer::DirectDataRef::~DirectDataRef(ACFUDataContainer::DirectDataRef *this)
{
  unint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    size_t v2 = *((void *)this + 1);
    if (v2)
    {
      if (*((unsigned char *)this + 17))
      {
        if (*((unsigned char *)this + 16))
        {
          if (v1 % sysconf(29))
          {
            unint64_t v3 = sysconf(29);
            unint64_t v4 = sysconf(29);
            Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)v4);
            v2 += v1 % v4;
            ACFULogging::handleMessage((uint64_t)LogInstance, 4u, "%s::%s: unmaping new length for page alignment (alignedLength: %zu. originalLength: %zu)\n", v6, v7, v8, v9, v10, (char)"ACFUDataContainer");
            unint64_t v1 = v1 / v3 * v3;
          }
          uint64_t v11 = (ACFULogging *)munmap((void *)v1, v2);
          if (v11 == -1)
          {
            unint64_t v12 = ACFULogging::getLogInstance(v11);
            unint64_t v13 = __error();
            strerror(*v13);
            ACFULogging::handleMessage((uint64_t)v12, 2u, "%s::%s: failed to unmap file: (%s)\n", v14, v15, v16, v17, v18, (char)"ACFUDataContainer");
          }
        }
        else
        {
          free(*(void **)this);
        }
      }
    }
  }
}

void __clang_call_terminate(void *a1)
{
}

void ACFUDataContainer::create(ACFUDataContainer *this@<X0>, ACFUDataContainer **a2@<X8>)
{
  uint64_t v5 = operator new(0x20uLL);
  *(void *)uint64_t v5 = 0;
  v5[2] = -1;
  *((void *)v5 + 2) = 0;
  *((_WORD *)v5 + 12) = 0;
  *a2 = (ACFUDataContainer *)v5;
  if ((ACFUDataContainer::init((ACFUDataContainer *)v5, this) & 1) == 0)
  {
    std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](a2, 0);
    Loguint64_t Instance = ACFULogging::getLogInstance(v6);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to init data container object\n", v8, v9, v10, v11, v12, (char)"ACFUDataContainer");
  }
}

{
  _DWORD *v5;
  ACFULogging *v6;
  void *LogInstance;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v5 = operator new(0x20uLL);
  *(void *)uint64_t v5 = 0;
  v5[2] = -1;
  *((void *)v5 + 2) = 0;
  *((_WORD *)v5 + 12) = 0;
  *a2 = (ACFUDataContainer *)v5;
  if ((ACFUDataContainer::init((ACFUDataContainer *)v5, this) & 1) == 0)
  {
    std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](a2, 0);
    Loguint64_t Instance = ACFULogging::getLogInstance(v6);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to init data container object\n", v8, v9, v10, v11, v12, (char)"ACFUDataContainer");
  }
}

void sub_217AB9F88(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ACFUDataContainer::init(ACFUDataContainer *this, const __CFData *a2)
{
  if (a2)
  {
    unint64_t v3 = this;
    CFTypeID TypeID = (ACFUDataContainer *)CFDataGetTypeID();
    this = (ACFUDataContainer *)CFGetTypeID(a2);
    if (TypeID == this)
    {
      this = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, a2);
      *(void *)unint64_t v3 = this;
      if (this) {
        return 1;
      }
      uint64_t v6 = "%s::%s: failed to allocate space for file object\n";
    }
    else
    {
      uint64_t v6 = "%s::%s: data is of an unsupported type\n";
    }
  }
  else
  {
    uint64_t v6 = "%s::%s: bad parameter!\n";
  }
  Loguint64_t Instance = ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v6, v8, v9, v10, v11, v12, (char)"ACFUDataContainer");
  return 0;
}

void sub_217ABA0F0(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ACFUDataContainer::init(ACFUDataContainer *this, __CFData *a2)
{
  if (a2)
  {
    unint64_t v3 = this;
    CFTypeID TypeID = (ACFUDataContainer *)CFDataGetTypeID();
    this = (ACFUDataContainer *)CFGetTypeID(a2);
    if (TypeID == this)
    {
      this = (ACFUDataContainer *)AMSupportSafeRetain();
      *(void *)unint64_t v3 = this;
      if (this) {
        return 1;
      }
      uint64_t v6 = "%s::%s: failed to allocate space for file object\n";
    }
    else
    {
      uint64_t v6 = "%s::%s: data is of an unsupported type\n";
    }
  }
  else
  {
    uint64_t v6 = "%s::%s: bad parameter!\n";
  }
  Loguint64_t Instance = ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v6, v8, v9, v10, v11, v12, (char)"ACFUDataContainer");
  return 0;
}

void ACFUDataContainer::create(__CFString *this@<X0>, const __CFString *a2@<X1>, ACFUDataContainer **a3@<X8>)
{
  char v3 = (char)a2;
  uint64_t v6 = operator new(0x20uLL);
  *(void *)uint64_t v6 = 0;
  v6[2] = -1;
  *((void *)v6 + 2) = 0;
  *((_WORD *)v6 + 12) = 0;
  *a3 = (ACFUDataContainer *)v6;
  if ((ACFUDataContainer::init((ACFUDataContainer *)v6, this, v3) & 1) == 0)
  {
    std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](a3, 0);
    Loguint64_t Instance = ACFULogging::getLogInstance(v7);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to init data container object\n", v9, v10, v11, v12, v13, (char)"ACFUDataContainer");
  }
}

void sub_217ABA258(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ACFUDataContainer::init(ACFUDataContainer *this, __CFString *a2, char a3)
{
  ACFUCommon::stringFromCFString(a2, &v43);
  uint64_t v46 = v44;
  *(_OWORD *)unint64_t v45 = v43;
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    if (HIBYTE(v44))
    {
      uint64_t v7 = (const char *)v45;
      goto LABEL_6;
    }
LABEL_40:
    Loguint64_t Instance = ACFULogging::getLogInstance(v6);
    unint64_t v41 = "%s::%s: failed to acquire file path string\n";
LABEL_44:
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v41, v36, v37, v38, v39, v40, (char)"ACFUDataContainer");
    goto LABEL_21;
  }
  if (!v45[1]) {
    goto LABEL_40;
  }
  uint64_t v7 = v45[0];
LABEL_6:
  if (access(v7, 0))
  {
    *((unsigned char *)this + 25) = 1;
    if (v46 >= 0) {
      uint64_t v8 = (const char *)v45;
    }
    else {
      uint64_t v8 = v45[0];
    }
    uint64_t v9 = (ACFULogging *)open(v8, 514, 438);
  }
  else
  {
    if (v46 >= 0) {
      uint64_t v10 = (const char *)v45;
    }
    else {
      uint64_t v10 = v45[0];
    }
    if (access(v10, 6))
    {
      if (v46 >= 0) {
        uint64_t v11 = (const char *)v45;
      }
      else {
        uint64_t v11 = v45[0];
      }
      uint64_t v12 = (ACFULogging *)access(v11, 4);
      if (v12)
      {
        uint64_t v13 = ACFULogging::getLogInstance(v12);
        uint64_t v14 = __error();
        strerror(*v14);
        unint64_t v20 = "%s::%s: no read or write permissions to file: (%s)\n";
LABEL_20:
        ACFULogging::handleMessage((uint64_t)v13, 2u, v20, v15, v16, v17, v18, v19, (char)"ACFUDataContainer");
LABEL_21:
        uint64_t v21 = 0;
        goto LABEL_37;
      }
      unint64_t v23 = ACFULogging::getLogInstance(v12);
      ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: no write permissions to file... attempting to open file as read-only\n", v24, v25, v26, v27, v28, (char)"ACFUDataContainer");
      if (v46 >= 0) {
        uint64_t v29 = (const char *)v45;
      }
      else {
        uint64_t v29 = v45[0];
      }
      uint64_t v9 = (ACFULogging *)open(v29, 0);
    }
    else
    {
      *((unsigned char *)this + 25) = 1;
      if (v46 >= 0) {
        uint64_t v22 = (const char *)v45;
      }
      else {
        uint64_t v22 = v45[0];
      }
      uint64_t v9 = (ACFULogging *)open(v22, 2);
    }
  }
  *((_DWORD *)this + 2) = v9;
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v13 = ACFULogging::getLogInstance(v9);
    uint64_t v42 = __error();
    strerror(*v42);
    unint64_t v20 = "%s::%s: failed to open file error: (%s)\n";
    goto LABEL_20;
  }
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  *((void *)this + 2) = Copy;
  if (!Copy)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    unint64_t v41 = "%s::%s: failed to create copy of file path\n";
    goto LABEL_44;
  }
  if ((a3 & 1) == 0)
  {
    MutableFileDatafromFilePath = ACFUCommon::createMutableFileDatafromFilePath((ACFUCommon *)a2, v31);
    *(void *)this = MutableFileDatafromFilePath;
    if (MutableFileDatafromFilePath)
    {
      char v32 = 0;
      goto LABEL_36;
    }
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    unint64_t v41 = "%s::%s: failed to acquire firmware data from file path\n";
    goto LABEL_44;
  }
  char v32 = 1;
LABEL_36:
  *((unsigned char *)this + 24) = v32;
  uint64_t v21 = 1;
LABEL_37:
  if (SHIBYTE(v46) < 0) {
    operator delete(v45[0]);
  }
  return v21;
}

void sub_217ABA4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFData *ACFUDataContainer::copyData(ACFUDataContainer *this)
{
  if (!*((unsigned char *)this + 24))
  {
    if (*(void *)this)
    {
      AMSupportSafeRetain();
      return *(__CFData **)this;
    }
    else
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: object does not hold any data\n", v23, v24, v25, v26, v27, (char)"ACFUDataContainer");
      return 0;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  CFStringRef v2 = (const __CFString *)*((void *)this + 2);
  if (!v2)
  {
    uint64_t v8 = ACFULogging::getLogInstance(0);
    uint64_t v14 = "%s::%s: file path has not been initialized\n";
LABEL_19:
    ACFULogging::handleMessage((uint64_t)v8, 2u, v14, v9, v10, v11, v12, v13, (char)"ACFUDataContainer");
    goto LABEL_21;
  }
  ACFUCommon::stringFromCFString(v2, &v28);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v31 = v29;
  *(_OWORD *)__p = v28;
  if (SHIBYTE(v29) < 0)
  {
    if (__p[1])
    {
      unint64_t v4 = (void **)__p[0];
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  if (!HIBYTE(v29))
  {
LABEL_18:
    uint64_t v8 = ACFULogging::getLogInstance(v3);
    uint64_t v14 = "%s::%s: failed to acquire file path c string\n";
    goto LABEL_19;
  }
  unint64_t v4 = __p;
LABEL_12:
  uint64_t v6 = (ACFULogging *)stat((const char *)v4, &v32);
  if (v6 != -1)
  {
    uint64_t v5 = ACFUDataContainer::copyData(this, 0, v32.st_size);
    goto LABEL_14;
  }
  uint64_t v15 = ACFULogging::getLogInstance(v6);
  uint64_t v16 = __error();
  strerror(*v16);
  ACFULogging::handleMessage((uint64_t)v15, 2u, "%s::%s: failed to obtain file stats: (%s)\n", v17, v18, v19, v20, v21, (char)"ACFUDataContainer");
LABEL_21:
  uint64_t v5 = 0;
LABEL_14:
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_217ABA680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFData *ACFUDataContainer::copyData(ACFUDataContainer *this, unsigned int a2, unint64_t a3)
{
  if (!a3)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: invalid length value\n", v43, v44, v45, v46, v47, (char)"ACFUDataContainer");
    return 0;
  }
  unint64_t v3 = a3;
  char Length = (ACFULogging *)ACFUDataContainer::getLength((const __CFString **)this);
  if (!Length)
  {
    uint64_t v48 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v48, 2u, "%s::%s: failed to get backing length\n", v49, v50, v51, v52, v53, (char)"ACFUDataContainer");
    return 0;
  }
  if ((unint64_t)Length <= a2)
  {
    uint64_t v54 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v54, 2u, "%s::%s: offset out of range\n", v55, v56, v57, v58, v59, (char)"ACFUDataContainer");
    return 0;
  }
  uint64_t v7 = a2;
  uint64_t v8 = (char *)Length - a2;
  if ((unint64_t)v8 < v3)
  {
    uint64_t v9 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v9, 4u, "%s::%s: reducing requested length %zu -> %zu\n", v10, v11, v12, v13, v14, (char)"ACFUDataContainer");
    unint64_t v3 = (unint64_t)v8;
  }
  if (!*((unsigned char *)this + 24))
  {
    if (*(void *)this)
    {
      CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
      if (Mutable)
      {
        BytePtr = CFDataGetBytePtr(*(CFDataRef *)this);
        CFDataAppendBytes(Mutable, &BytePtr[v7], v3);
        return Mutable;
      }
      uint64_t v38 = ACFULogging::getLogInstance(0);
      uint64_t v37 = "%s::%s: failed to create mutable data in unoptimized path\n";
      goto LABEL_26;
    }
    long long v73 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v73, 2u, "%s::%s: object does not hold any data\n", v74, v75, v76, v77, v78, (char)"ACFUDataContainer");
    return 0;
  }
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
  {
    uint64_t v60 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v60, 2u, "%s::%s: invalid file descriptor\n", v61, v62, v63, v64, v65, (char)"ACFUDataContainer");
    return 0;
  }
  double v15 = (double)(a2 / sysconf(29));
  uint64_t v16 = (ACFULogging *)sysconf(29);
  off_t v17 = (v15 * (double)(uint64_t)v16);
  uint64_t v18 = a2 - v17;
  uint64_t v19 = ACFULogging::getLogInstance(v16);
  ACFULogging::handleMessage((uint64_t)v19, 4u, "%s::%s: paging in new length for page alignment (Requested: %zu. Aligned: %zu)\n", v20, v21, v22, v23, v24, (char)"ACFUDataContainer");
  uint64_t v25 = (UInt8 *)mmap(0, v3 + v18, 1, 2, *((_DWORD *)this + 2), v17);
  if (v25 == (UInt8 *)-1)
  {
    uint64_t v66 = ACFULogging::getLogInstance((ACFULogging *)0xFFFFFFFFFFFFFFFFLL);
    uint64_t v67 = __error();
    strerror(*v67);
    ACFULogging::handleMessage((uint64_t)v66, 2u, "%s::%s: failed to map file: (%s)\n", v68, v69, v70, v71, v72, (char)"ACFUDataContainer");
    return 0;
  }
  uint64_t v26 = v25;
  uint64_t v27 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFMutableDictionaryRef Mutable = v27;
  if (!v27)
  {
    uint64_t v38 = ACFULogging::getLogInstance(0);
    uint64_t v37 = "%s::%s: failed to create mutable data in optimized path\n";
LABEL_26:
    unsigned int v39 = 2;
    goto LABEL_12;
  }
  CFDataAppendBytes(v27, &v26[v18], v3);
  uint64_t v29 = (ACFULogging *)munmap(v26, v3 + v18);
  if (v29 == -1)
  {
    uint64_t v30 = ACFULogging::getLogInstance(v29);
    uint64_t v31 = __error();
    strerror(*v31);
    uint64_t v37 = "%s::%s: failed to un-map file: (%s)\n";
    uint64_t v38 = v30;
    unsigned int v39 = 4;
LABEL_12:
    ACFULogging::handleMessage((uint64_t)v38, v39, v37, v32, v33, v34, v35, v36, (char)"ACFUDataContainer");
  }
  return Mutable;
}

CFIndex ACFUDataContainer::getLength(const __CFString **this)
{
  if (*((unsigned char *)this + 24))
  {
    ACFUCommon::stringFromCFString(this[2], __p);
    if (v14 >= 0) {
      unint64_t v1 = __p;
    }
    else {
      unint64_t v1 = (void **)__p[0];
    }
    CFStringRef v2 = (ACFULogging *)stat((const char *)v1, &v15);
    if (v2 == -1)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(v2);
      uint64_t v7 = __error();
      strerror(*v7);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to determine file size for path '%s' (%s)\n", v8, v9, v10, v11, v12, (char)"ACFUDataContainer");
      off_t st_size = 0;
    }
    else
    {
      off_t st_size = v15.st_size;
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    return st_size;
  }
  else
  {
    CFStringRef v4 = *this;
    return CFDataGetLength((CFDataRef)v4);
  }
}

void sub_217ABAAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ACFUDataContainer::copyDirectData(ACFUDataContainer *this@<X0>, size_t __size@<X2>, unsigned int a3@<W1>, ACFUDataContainer::DirectDataRef **a4@<X8>)
{
  *a4 = 0;
  if (!__size)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    uint64_t v32 = "%s::%s: invalid offset value\n";
    unsigned int v33 = 2;
    goto LABEL_11;
  }
  if (*((unsigned char *)this + 24))
  {
    if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
    {
      uint64_t v34 = ACFULogging::getLogInstance(this);
      ACFULogging::handleMessage((uint64_t)v34, 2u, "%s::%s: invalid file descriptor\n", v35, v36, v37, v38, v39, (char)"ACFUDataContainer");
      return;
    }
    uint64_t v8 = sysconf(29);
    uint64_t v9 = (ACFULogging *)sysconf(29);
    uint64_t v10 = ACFULogging::getLogInstance(v9);
    off_t v11 = ((double)(uint64_t)v9 * (double)(a3 / v8));
    uint64_t v12 = a3 - v11;
    ACFULogging::handleMessage((uint64_t)v10, 4u, "%s::%s: paging in new length for page alignment (Requested: %zu. Aligned: %zu)\n", v13, v14, v15, v16, v17, (char)"ACFUDataContainer");
    uint64_t v18 = (char *)mmap(0, v12 + __size, 1, 1, *((_DWORD *)this + 2), v11);
    if (v18 == (char *)-1)
    {
      uint64_t v40 = ACFULogging::getLogInstance((ACFULogging *)0xFFFFFFFFFFFFFFFFLL);
      unint64_t v41 = __error();
      strerror(*v41);
      ACFULogging::handleMessage((uint64_t)v40, 2u, "%s::%s: failed to map file: (%s)\n", v42, v43, v44, v45, v46, (char)"ACFUDataContainer");
      return;
    }
    uint64_t v19 = operator new(0x18uLL);
    *uint64_t v19 = &v18[v12];
    char v20 = 1;
    goto LABEL_9;
  }
  CFDataRef v21 = *(const __CFData **)this;
  if (!*(void *)this)
  {
    uint64_t v47 = ACFULogging::getLogInstance(this);
    uint64_t v53 = "%s::%s: object does not hold any data\n";
LABEL_18:
    ACFULogging::handleMessage((uint64_t)v47, 2u, v53, v48, v49, v50, v51, v52, (char)"ACFUDataContainer");
    return;
  }
  uint64_t v22 = malloc(__size);
  if (!v22)
  {
    uint64_t v47 = ACFULogging::getLogInstance(0);
    uint64_t v53 = "%s::%s: unable to allocate data\n";
    goto LABEL_18;
  }
  uint64_t v23 = v22;
  BytePtr = CFDataGetBytePtr(v21);
  memcpy(v23, &BytePtr[a3], __size);
  uint64_t v19 = operator new(0x18uLL);
  char v20 = 0;
  *uint64_t v19 = v23;
LABEL_9:
  v19[1] = __size;
  *((unsigned char *)v19 + 16) = v20;
  *((unsigned char *)v19 + 17) = 1;
  std::unique_ptr<ACFUDataContainer::DirectDataRef>::reset[abi:ne180100](a4, (ACFUDataContainer::DirectDataRef *)v19);
  if (*(void *)*a4) {
    return;
  }
  Loguint64_t Instance = ACFULogging::getLogInstance(v25);
  uint64_t v32 = "%s::%s: failed to create file data\n";
  unsigned int v33 = 4;
LABEL_11:
  ACFULogging::handleMessage((uint64_t)LogInstance, v33, v32, v27, v28, v29, v30, v31, (char)"ACFUDataContainer");
}

void sub_217ABAD0C(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer::DirectDataRef>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ACFUDataContainer::setData(const __CFString **this, __CFData *a2)
{
  if (*((unsigned char *)this + 24))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: cannot setData for a memory optimized data container.\n", v19, v20, v21, v22, v23, (char)"ACFUDataContainer");
    return 0;
  }
  CFStringRef v3 = *this;
  if (v3)
  {
    CFRelease(v3);
    *this = 0;
  }
  CFStringRef v4 = (ACFULogging *)AMSupportSafeRetain();
  *this = (const __CFString *)v4;
  if (!v4)
  {
    uint64_t v24 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v24, 2u, "%s::%s: failed obtain new file data\n", v25, v26, v27, v28, v29, (char)"ACFUDataContainer");
    return 0;
  }
  if (!*((unsigned char *)this + 25)) {
    return 1;
  }
  CFStringRef v5 = this[2];
  if (!v5)
  {
    uint64_t v30 = ACFULogging::getLogInstance(v4);
    ACFULogging::handleMessage((uint64_t)v30, 2u, "%s::%s: file path has not been initialized\n", v31, v32, v33, v34, v35, (char)"ACFUDataContainer");
    return 0;
  }
  CFURLRef v6 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, 0);
  if (!v6)
  {
    uint64_t v36 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v36, 2u, "%s::%s: failed to create path url\n", v37, v38, v39, v40, v41, (char)"ACFUDataContainer");
    return 0;
  }
  CFURLRef v7 = v6;
  uint64_t v8 = 1;
  int v9 = AMSupportWriteDataToFileURL();
  CFRelease(v7);
  if (v9)
  {
    off_t v11 = ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage((uint64_t)v11, 2u, "%s::%s: failed to overwrite file (%d)\n", v12, v13, v14, v15, v16, (char)"ACFUDataContainer");
    return 0;
  }
  return v8;
}

uint64_t ACFUDataContainer::getData(ACFUDataContainer *this)
{
  if (!*((unsigned char *)this + 24)) {
    return *(void *)this;
  }
  Loguint64_t Instance = ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: cannot aquire reference for a memory optimized data container. Please use copyData() instead\n", v2, v3, v4, v5, v6, (char)"ACFUDataContainer");
  return 0;
}

uint64_t ACFUDataContainer::isOptimized(ACFUDataContainer *this)
{
  return *((unsigned __int8 *)this + 24);
}

void ACFUDataContainer::~ACFUDataContainer(ACFUDataContainer *this)
{
  int v2 = *((_DWORD *)this + 2);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  if (*(void *)this)
  {
    CFRelease(*(CFTypeRef *)this);
    *(void *)this = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 2) = 0;
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2642B9808, MEMORY[0x263F8C060]);
}

void sub_217ABB080(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](ACFUDataContainer **a1, ACFUDataContainer *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    ACFUDataContainer::~ACFUDataContainer(v3);
    operator delete(v4);
  }
}

void std::unique_ptr<ACFUDataContainer::DirectDataRef>::reset[abi:ne180100](ACFUDataContainer::DirectDataRef **a1, ACFUDataContainer::DirectDataRef *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    ACFUDataContainer::DirectDataRef::~DirectDataRef(v3);
    operator delete(v4);
  }
}

__CFDictionary *ACFURestoreHost::getTags(ACFURestoreHost *this)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFArrayRef ArrayFromList = ACFURestoreHost::createArrayFromList((const void ***)this + 5);
    if (ArrayFromList)
    {
      CFArrayRef v4 = ArrayFromList;
      CFArrayRef v5 = ACFURestoreHost::createArrayFromList((const void ***)this + 14);
      if (v5)
      {
        CFArrayRef v6 = v5;
        CFStringRef Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 2), @"DeviceInfo");
        if (Value && (CFTypeID v8 = CFGetTypeID(Value), v8 == CFDictionaryGetTypeID()))
        {
          CFDictionaryAddValue(Mutable, @"BuildIdentityTags", v4);
          CFDictionaryAddValue(Mutable, @"ResponseTags", v6);
          Loguint64_t Instance = ACFULogging::getLogInstance(v9);
          std::string::basic_string[abi:ne180100]<0>(&v44, "ACFURestoreHost");
          off_t v11 = std::string::append(&v44, "::");
          long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v45.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          uint64_t v13 = std::string::append(&v45, "getTags");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          std::string::size_type v47 = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          ACFULogging::handleMessageCFType((uint64_t)LogInstance, (uint64_t *)__p, 0, (uint64_t)"Request Tags:", (uint64_t)Mutable);
          if (SHIBYTE(v47) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v48, "getTags: failed to get device info list");
          uint64_t v16 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v48, 0xFA1uLL, 0);
          if (v49 < 0) {
            operator delete(v48[0]);
          }
          uint64_t v17 = ACFULogging::getLogInstance(v16);
          ACFULogging::handleMessage((uint64_t)v17, 2u, "%s::%s: failed to get device info list\n", v18, v19, v20, v21, v22, (char)"ACFURestoreHost");
        }
        CFRelease(v6);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v50, "getTags: failed to create response tag list");
        uint64_t v37 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v50, 0xFA0uLL, 0);
        if (v51 < 0) {
          operator delete(v50[0]);
        }
        uint64_t v38 = ACFULogging::getLogInstance(v37);
        ACFULogging::handleMessage((uint64_t)v38, 2u, "%s::%s: failed to create response tag list\n", v39, v40, v41, v42, v43, (char)"ACFURestoreHost");
      }
      CFRelease(v4);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v52, "getTags: failed to create build identity tag list");
      uint64_t v30 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v52, 0xFA0uLL, 0);
      if (v53 < 0) {
        operator delete(v52[0]);
      }
      uint64_t v31 = ACFULogging::getLogInstance(v30);
      ACFULogging::handleMessage((uint64_t)v31, 2u, "%s::%s: failed to create build identity tag list\n", v32, v33, v34, v35, v36, (char)"ACFURestoreHost");
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v54, "getTags: failed to allocate output dictionary");
    uint64_t v23 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v54, 0xFA0uLL, 0);
    if (v55 < 0) {
      operator delete(v54[0]);
    }
    uint64_t v24 = ACFULogging::getLogInstance(v23);
    ACFULogging::handleMessage((uint64_t)v24, 2u, "%s::%s: failed to allocate output dictionary\n", v25, v26, v27, v28, v29, (char)"ACFURestoreHost");
  }
  return Mutable;
}

void sub_217ABB46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v37 - 97) < 0) {
    operator delete(*(void **)(v37 - 120));
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef ACFURestoreHost::createArrayFromList(const void ***a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    CFArrayRef v4 = Mutable;
    for (uint64_t i = *a1; i != a1[1]; ++i)
    {
      CFArrayRef v6 = *i;
      CFArrayAppendValue(v4, v6);
    }
    CFArrayRef Copy = CFArrayCreateCopy(v2, v4);
    CFRelease(v4);
    return Copy;
  }
  else
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to create tag list from vector\n", v10, v11, v12, v13, v14, (char)"ACFURestoreHost");
    return 0;
  }
}

const __CFData *ACFURestoreHost::copyFirmware(ACFURestoreHost *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Firmware/%@/Rooted/ftab.bin", *((void *)this + 28));
  if (!v3)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to allocate data for personalized path\n", v162, v163, v164, v165, v166, (char)"ACFURestoreHost");
    return 0;
  }
  CFArrayRef v4 = (__CFString *)v3;
  CFArrayRef v5 = (ACFULogging *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 2), @"DestBundlePath");
  uint64_t v6 = (uint64_t)v5;
  if (v5)
  {
    uint64_t v7 = ACFULogging::getLogInstance(v5);
    CFTypeID v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v249, "ACFURestoreHost");
    int v9 = std::string::append(v8, "::");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v250.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v250, "copyFirmware");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v251.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    ACFULogging::handleMessageCFType((uint64_t)v7, (uint64_t *)&v251, 0, (uint64_t)"personalizedURL: ", v6);
    if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v251.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v250.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v249.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v13 = (ACFULogging *)CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"BundleDataDict");
  int v14 = (int)v13;
  uint64_t v15 = ACFULogging::getLogInstance(v13);
  if (!v14)
  {
    ACFULogging::handleMessage((uint64_t)v15, 0, "%s::%s: running host invoked restore info -- using bundleURL\n", v16, v17, v18, v19, v20, (char)"ACFURestoreHost");
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFMutableDictionaryRef v33 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v33)
      {
        uint64_t v25 = v33;
        uint64_t v34 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 2), @"BundlePath");
        if (!v34 || (uint64_t v35 = v34, v36 = CFURLGetTypeID(), v36 != CFGetTypeID(v35)))
        {
          std::string::basic_string[abi:ne180100]<0>(v245, "copyFirmware: failed to get src bundle URL");
          char v173 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v245, 0xFA1uLL, 0);
          if (v246 < 0) {
            operator delete(v245[0]);
          }
          char v174 = ACFULogging::getLogInstance(v173);
          ACFULogging::handleMessage((uint64_t)v174, 2u, "%s::%s: failed to get src bundle URL\n", v175, v176, v177, v178, v179, (char)"ACFURestoreHost");
          goto LABEL_181;
        }
        CFDictionaryRef v37 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 2), @"Options");
        CFStringRef v221 = v4;
        if (v37 && (CFDictionaryRef v39 = v37, v40 = CFGetTypeID(v37), v40 == CFDictionaryGetTypeID()))
        {
          cf.__r_.__value_.__r.__words[0] = 0;
          uint64_t v41 = CFDictionaryGetValue(v39, @"ACFUFirmware");
          if (v41)
          {
            CFTypeID TypeID = CFStringGetTypeID();
            if (TypeID == CFGetTypeID(v41))
            {
              if (v6)
              {
                AMSupportCopyURLWithAppendedComponent();
                std::string::basic_string[abi:ne180100]<0>(v243, "copyFirmware: failed to create personalized rooted FW URL");
                CFStringRef v212 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v243, 0xFA0uLL, 0);
                if (v244 < 0) {
                  operator delete(v243[0]);
                }
                CFAllocatorRef v213 = ACFULogging::getLogInstance(v212);
                ACFULogging::handleMessage((uint64_t)v213, 2u, "%s::%s: failed to create personalized rooted FW URL (status: %d)\n", v214, v215, v216, v217, v218, (char)"ACFURestoreHost");
LABEL_194:
                CFDataRef v30 = 0;
                goto LABEL_18;
              }
              uint64_t URLFromString = (const void *)AMSupportCreateURLFromString();
              if (!URLFromString)
              {
                std::string::basic_string[abi:ne180100]<0>(v241, "copyFirmware: failed to create src rooted FW URL");
                long long v205 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v241, 0xFA0uLL, 0);
                if (v242 < 0) {
                  operator delete(v241[0]);
                }
                long long v206 = ACFULogging::getLogInstance(v205);
                ACFULogging::handleMessage((uint64_t)v206, 2u, "%s::%s: copyFirmware: failed to create src rooted FW URL\n", v207, v208, v209, v210, v211, (char)"ACFURestoreHost");
                goto LABEL_194;
              }
              std::string v44 = URLFromString;
              CFDictionaryAddValue(Mutable, *((const void **)this + 1), URLFromString);
              CFDictionaryAddValue(v25, *((const void **)this + 1), v44);
              CFRelease(v44);
            }
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        CFStringRef v219 = v41;
        uint64_t v45 = *((void *)this + 17);
        if (v45 != *((void *)this + 18))
        {
          char v46 = 0;
          CFAllocatorRef v220 = (char *)this + 24;
          while (1)
          {
            CFTypeRef v239 = 0;
            CFDictionaryRef value = 0;
            PathFromBuildID = ACFURestoreHost::getPathFromBuildID(*((ACFURestoreHost **)this + 2), *(const __CFDictionary **)v45, v38);
            ACFUCommon::stringFromCFString(*(const __CFString **)v45, &v251);
            if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v251.__r_.__value_.__l.__size_)
              {
                std::string::__init_copy_ctor_external(&v250, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
                goto LABEL_41;
              }
            }
            else if (*((unsigned char *)&v251.__r_.__value_.__s + 23))
            {
              std::string v250 = v251;
              goto LABEL_41;
            }
            uint64_t v48 = (ACFULogging *)std::string::basic_string[abi:ne180100]<0>(&v250, "UNDEF");
LABEL_41:
            if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v251.__r_.__value_.__l.__data_);
            }
            std::string v251 = v250;
            if (PathFromBuildID)
            {
              if (v6)
              {
                if (AMSupportCopyURLWithAppendedComponent() || !v239)
                {
                  std::string::basic_string[abi:ne180100]<0>(v234, "copyFirmware: failed to create personalized FW URL");
                  z_crc_t v83 = (ACFULogging *)ACFUError::addError((uint64_t)v220, (uint64_t)v234, 0xFA0uLL, 0);
                  if (v235 < 0) {
                    operator delete(v234[0]);
                  }
                  uint64_t v84 = ACFULogging::getLogInstance(v83);
                  ACFULogging::handleMessage((uint64_t)v84, 2u, "%s::%s: copyFirmware: failed to create personalized FW URL (status: %d)\n", v85, v86, v87, v88, v89, (char)"ACFURestoreHost");
                  goto LABEL_74;
                }
                BOOL doesPathExist = ACFUCommon::doesPathExist((ACFUCommon *)v239, v49);
                if (doesPathExist)
                {
                  char v51 = ACFULogging::getLogInstance((ACFULogging *)doesPathExist);
                  std::string::basic_string[abi:ne180100]<0>(&cf, "ACFURestoreHost");
                  uint64_t v52 = std::string::append(&cf, "::");
                  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
                  v249.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v53;
                  v52->__r_.__value_.__l.__size_ = 0;
                  v52->__r_.__value_.__r.__words[2] = 0;
                  v52->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v54 = std::string::append(&v249, "copyFirmware");
                  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
                  v250.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v55;
                  v54->__r_.__value_.__l.__size_ = 0;
                  v54->__r_.__value_.__r.__words[2] = 0;
                  v54->__r_.__value_.__r.__words[0] = 0;
                  ACFULogging::handleMessageCFType((uint64_t)v51, (uint64_t *)&v250, 0, (uint64_t)"Firmware Object: ", *(void *)v45);
                  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v250.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v249.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(cf.__r_.__value_.__l.__data_);
                  }
                  uint64_t v57 = ACFULogging::getLogInstance(v56);
                  std::string::basic_string[abi:ne180100]<0>(&cf, "ACFURestoreHost");
                  uint64_t v58 = std::string::append(&cf, "::");
                  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
                  v249.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v59;
                  v58->__r_.__value_.__l.__size_ = 0;
                  v58->__r_.__value_.__r.__words[2] = 0;
                  v58->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v60 = std::string::append(&v249, "copyFirmware");
                  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
                  v250.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v61;
                  v60->__r_.__value_.__l.__size_ = 0;
                  v60->__r_.__value_.__r.__words[2] = 0;
                  v60->__r_.__value_.__r.__words[0] = 0;
                  ACFULogging::handleMessageCFType((uint64_t)v57, (uint64_t *)&v250, 0, (uint64_t)"Personalized Bundle FW URL: ", (uint64_t)v239);
                  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v250.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v249.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(cf.__r_.__value_.__l.__data_);
                  }
                  char v46 = 1;
                }
                else if (v239)
                {
                  CFRelease(v239);
                  char v46 = 0;
                  CFTypeRef v239 = 0;
                }
                else
                {
                  char v46 = 0;
                }
              }
              if (AMSupportCopyURLWithAppendedComponent() || !value)
              {
                std::string::basic_string[abi:ne180100]<0>(v232, "copyFirmware: failed to create default FW URL");
                uint64_t v76 = (ACFULogging *)ACFUError::addError((uint64_t)v220, (uint64_t)v232, 0xFA0uLL, 0);
                if (v233 < 0) {
                  operator delete(v232[0]);
                }
                uint64_t v77 = ACFULogging::getLogInstance(v76);
                ACFULogging::handleMessage((uint64_t)v77, 2u, "%s::%s: copyFirmware: failed to create default FW URL, (status: %d)\n", v78, v79, v80, v81, v82, (char)"ACFURestoreHost");
LABEL_74:
                int v67 = 4;
                goto LABEL_84;
              }
              if (v46) {
                uint64_t v75 = v239;
              }
              else {
                uint64_t v75 = value;
              }
              CFDictionaryAddValue(Mutable, *(const void **)v45, v75);
              CFDictionaryAddValue(v25, *(const void **)v45, value);
              if (value)
              {
                CFRelease(value);
                int v67 = 0;
                CFDictionaryRef value = 0;
              }
              else
              {
                int v67 = 0;
              }
            }
            else
            {
              if (!*(unsigned char *)(v45 + 8))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "copyFirmware: failed to find FW");
                uint64_t v68 = (ACFULogging *)ACFUError::addError((uint64_t)v220, (uint64_t)__p, 0xFA1uLL, 0);
                if (v237 < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v69 = ACFULogging::getLogInstance(v68);
                ACFULogging::handleMessage((uint64_t)v69, 2u, "%s::%s: copyFirmware: failed to find FW (%s) in build ID\n", v70, v71, v72, v73, v74, (char)"ACFURestoreHost");
                goto LABEL_74;
              }
              uint64_t v62 = ACFULogging::getLogInstance(v48);
              std::string::basic_string[abi:ne180100]<0>(&cf, "ACFURestoreHost");
              uint64_t v63 = std::string::append(&cf, "::");
              long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
              v249.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v64;
              v63->__r_.__value_.__l.__size_ = 0;
              v63->__r_.__value_.__r.__words[2] = 0;
              v63->__r_.__value_.__r.__words[0] = 0;
              uint64_t v65 = std::string::append(&v249, "copyFirmware");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              v250.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              ACFULogging::handleMessageCFType((uint64_t)v62, (uint64_t *)&v250, 0, (uint64_t)"skipping optional file...", *(void *)v45);
              if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v250.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v249.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(cf.__r_.__value_.__l.__data_);
              }
              int v67 = 29;
            }
LABEL_84:
            if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v251.__r_.__value_.__l.__data_);
              if (!v67) {
                goto LABEL_89;
              }
            }
            else if (!v67)
            {
              goto LABEL_89;
            }
            if (v67 != 29)
            {
              CFDataRef v30 = 0;
              goto LABEL_162;
            }
LABEL_89:
            v45 += 16;
            if (v45 == *((void *)this + 18)) {
              goto LABEL_98;
            }
          }
        }
        char v46 = 0;
LABEL_98:
        z_crc_t v90 = (ACFULogging *)(*(uint64_t (**)(ACFURestoreHost *, __CFDictionary *, void))(*(void *)this + 40))(this, Mutable, 0);
        CFDataRef v30 = v90;
        if (!v90)
        {
          if (v46)
          {
            z_crc_t v91 = ACFULogging::getLogInstance(0);
            ACFULogging::handleMessage((uint64_t)v91, 0, "%s::%s: attempting copyFirmwareUpdater again with source bundle file map\n", v92, v93, v94, v95, v96, (char)"ACFURestoreHost");
            z_crc_t v90 = (ACFULogging *)(*(uint64_t (**)(ACFURestoreHost *, __CFDictionary *, void))(*(void *)this + 40))(this, v25, 0);
            CFDataRef v30 = v90;
          }
          if (!v30)
          {
            std::string::basic_string[abi:ne180100]<0>(v230, "copyFirmware: updater failed to find firmware data with bundleURL");
            uint64_t v151 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v230, 0xFA0uLL, 0);
            CFDataRef v30 = 0;
            int v152 = "%s::%s: updater failed to find firmware data with bundleURL\n";
            if (v231 < 0)
            {
              CFDataRef v153 = (void **)v230;
              goto LABEL_171;
            }
            goto LABEL_172;
          }
        }
        if (v6) {
          BOOL v97 = v219 == 0;
        }
        else {
          BOOL v97 = 1;
        }
        char v98 = v97;
        if ((v98 & 1) == 0)
        {
          uint64_t v99 = ACFULogging::getLogInstance(v90);
          ACFULogging::handleMessage((uint64_t)v99, 0, "%s::%s: copying preflighted rooted firmware into the dst bundle...\n", v100, v101, v102, v103, v104, (char)"ACFURestoreHost");
          z_crc_t v90 = (ACFULogging *)ACFURestoreHost::copyToPersonalizedBundlePath(v105, *((CFDictionaryRef *)this + 2), v221, v30);
          if (v90)
          {
            std::string::basic_string[abi:ne180100]<0>(v228, "copyFirmware: failed to perform destination bundle copy of rooted firmware");
            uint64_t v151 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v228, 0xFA3uLL, 0);
            int v152 = "%s::%s: failed to perform destination bundle copy of rooted firmware\n";
            if (v229 < 0)
            {
              CFDataRef v153 = (void **)v228;
LABEL_171:
              operator delete(*v153);
            }
LABEL_172:
            uint64_t v167 = ACFULogging::getLogInstance(v151);
            ACFULogging::handleMessage((uint64_t)v167, 2u, v152, v168, v169, v170, v171, v172, (char)"ACFURestoreHost");
LABEL_162:
            CFStringRef v32 = v221;
            goto LABEL_163;
          }
        }
        if ((v6 == 0) | v46 & 1)
        {
          if (v46)
          {
            uint64_t v106 = ACFULogging::getLogInstance(v90);
            ACFULogging::handleMessage((uint64_t)v106, 0, "%s::%s: removing any personalized bits of bundle firmware\n", v107, v108, v109, v110, v111, (char)"ACFURestoreHost");
            uint64_t v112 = *((void *)this + 17);
            if (v112 != *((void *)this + 18))
            {
              while (1)
              {
                uint64_t v113 = (ACFUCommon *)CFDictionaryGetValue(Mutable, *(const void **)v112);
                if (v113 || !*(unsigned char *)(v112 + 8))
                {
                  if ((ACFUCommon::removeFileWithURL(v113, v114) & 1) == 0)
                  {
                    std::string::basic_string[abi:ne180100]<0>(v222, "copyFirmware: failed to remove bundle fw personalized bits");
                    uint64_t v151 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v222, 0x3ECuLL, 0);
                    int v152 = "%s::%s: failed to remove bundle fw personalized bits\n";
                    if (v223 < 0)
                    {
                      CFDataRef v153 = (void **)v222;
                      goto LABEL_171;
                    }
                    goto LABEL_172;
                  }
                }
                else
                {
                  uint64_t v115 = ACFULogging::getLogInstance(0);
                  uint64_t v116 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v249, "ACFURestoreHost");
                  uint64_t v117 = std::string::append(v116, "::");
                  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                  v250.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v118;
                  v117->__r_.__value_.__l.__size_ = 0;
                  v117->__r_.__value_.__r.__words[2] = 0;
                  v117->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v119 = std::string::append(&v250, "copyFirmware");
                  long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                  v251.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v120;
                  v119->__r_.__value_.__l.__size_ = 0;
                  v119->__r_.__value_.__r.__words[2] = 0;
                  v119->__r_.__value_.__r.__words[0] = 0;
                  ACFULogging::handleMessageCFType((uint64_t)v115, (uint64_t *)&v251, 0, (uint64_t)"skipping removal of optional file...", *(void *)v112);
                  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v251.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v250.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v249.__r_.__value_.__l.__data_);
                  }
                }
                v112 += 16;
                if (v112 == *((void *)this + 18)) {
                  goto LABEL_162;
                }
              }
            }
          }
          goto LABEL_162;
        }
        uint64_t v121 = ACFULogging::getLogInstance(v90);
        ACFULogging::handleMessage((uint64_t)v121, 0, "%s::%s: copying preflighted bundle firmware into the dst bundle...\n", v122, v123, v124, v125, v126, (char)"ACFURestoreHost");
        uint64_t v128 = *((void *)this + 17);
        if (v128 == *((void *)this + 18)) {
          goto LABEL_162;
        }
        while (1)
        {
          CFStringRef v129 = (const __CFString *)ACFURestoreHost::getPathFromBuildID(*((ACFURestoreHost **)this + 2), *(const __CFDictionary **)v128, v127);
          ACFUCommon::stringFromCFString(*(const __CFString **)v128, &v251);
          if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v251.__r_.__value_.__l.__size_)
            {
              std::string::__init_copy_ctor_external(&v250, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
              goto LABEL_131;
            }
          }
          else if (*((unsigned char *)&v251.__r_.__value_.__s + 23))
          {
            std::string v250 = v251;
            goto LABEL_131;
          }
          uint64_t v130 = (ACFURestoreHost *)std::string::basic_string[abi:ne180100]<0>(&v250, "UNDEF");
LABEL_131:
          if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v251.__r_.__value_.__l.__data_);
          }
          std::string v251 = v250;
          if (v129)
          {
            if (!ACFURestoreHost::copyToPersonalizedBundlePath(v130, *((CFDictionaryRef *)this + 2), v129, v30))
            {
              int v131 = 0;
              goto LABEL_148;
            }
            std::string::basic_string[abi:ne180100]<0>(v224, "copyFirmware: failed to perform destination bundle copy of rooted firmware");
            size_t v144 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v224, 0xFA3uLL, 0);
            if (v225 < 0) {
              operator delete(v224[0]);
            }
            CFStringRef v145 = ACFULogging::getLogInstance(v144);
            ACFULogging::handleMessage((uint64_t)v145, 2u, "%s::%s: failed to perform destination bundle copy of rooted firmware\n", v146, v147, v148, v149, v150, (char)"ACFURestoreHost");
            goto LABEL_147;
          }
          if (!*(unsigned char *)(v128 + 8))
          {
            std::string::basic_string[abi:ne180100]<0>(v226, "copyFirmware: failed to find FW in personalized path");
            uint64_t v137 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v226, 0xFA1uLL, 0);
            if (v227 < 0) {
              operator delete(v226[0]);
            }
            uint64_t v138 = ACFULogging::getLogInstance(v137);
            ACFULogging::handleMessage((uint64_t)v138, 2u, "%s::%s: failed to find FW (%s) in build ID in personalized path\n", v139, v140, v141, v142, v143, (char)"ACFURestoreHost");
LABEL_147:
            int v131 = 4;
            goto LABEL_148;
          }
          uint64_t v132 = ACFULogging::getLogInstance(v130);
          std::string::basic_string[abi:ne180100]<0>(&cf, "ACFURestoreHost");
          uint64_t v133 = std::string::append(&cf, "::");
          long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
          v249.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v134;
          v133->__r_.__value_.__l.__size_ = 0;
          v133->__r_.__value_.__r.__words[2] = 0;
          v133->__r_.__value_.__r.__words[0] = 0;
          uint64_t v135 = std::string::append(&v249, "copyFirmware");
          long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          v250.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v136;
          v135->__r_.__value_.__l.__size_ = 0;
          v135->__r_.__value_.__r.__words[2] = 0;
          v135->__r_.__value_.__r.__words[0] = 0;
          ACFULogging::handleMessageCFType((uint64_t)v132, (uint64_t *)&v250, 0, (uint64_t)"skipping copying of optional file...", *(void *)v128);
          if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v250.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v249.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(cf.__r_.__value_.__l.__data_);
          }
          int v131 = 48;
LABEL_148:
          if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v251.__r_.__value_.__l.__data_);
            if (v131)
            {
LABEL_152:
              if (v131 != 48) {
                goto LABEL_162;
              }
            }
          }
          else if (v131)
          {
            goto LABEL_152;
          }
          v128 += 16;
          if (v128 == *((void *)this + 18)) {
            goto LABEL_162;
          }
        }
      }
      long long v199 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v199, 2u, "%s::%s: failed to allocate source bundle firmware path dictionary (type: %hhu)\n", v200, v201, v202, v203, v204, (char)"ACFURestoreHost");
    }
    else
    {
      CFAllocatorRef v193 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v193, 2u, "%s::%s: failed to allocate bundle firmware path dictionary (type: %hhu)\n", v194, v195, v196, v197, v198, (char)"ACFURestoreHost");
    }
    CFDataRef v30 = 0;
    goto LABEL_185;
  }
  ACFULogging::handleMessage((uint64_t)v15, 0, "%s::%s: running device invoked restore info -- using bundleData\n", v16, v17, v18, v19, v20, (char)"ACFURestoreHost");
  uint64_t v21 = (ACFULogging *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 2), @"BundleDataDict");
  if (v21
    && (v22 = v21, v23 = CFDictionaryGetTypeID(), uint64_t v21 = (ACFULogging *)CFGetTypeID(v22), (ACFULogging *)v23 == v21))
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v2, 0, v22);
    if (MutableCopy)
    {
      uint64_t v25 = MutableCopy;
      uint64_t v26 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 2), @"FirmwareData");
      if (v26)
      {
        uint64_t v27 = v26;
        CFTypeID v28 = CFDataGetTypeID();
        if (v28 == CFGetTypeID(v27)) {
          CFDictionarySetValue(v25, *((const void **)this + 1), v27);
        }
      }
      uint64_t v29 = (*(uint64_t (**)(ACFURestoreHost *, __CFDictionary *, uint64_t))(*(void *)this + 40))(this, v25, 1);
      if (v29)
      {
        CFDataRef v30 = (const __CFData *)v29;
        CFMutableArrayRef Mutable = 0;
LABEL_18:
        CFStringRef v32 = v4;
LABEL_163:
        CFRelease(v32);
        goto LABEL_164;
      }
      std::string::basic_string[abi:ne180100]<0>(v247, "copyFirmware: updater failed to find firmware data with bundleData");
      CFStringRef v186 = (ACFULogging *)ACFUError::addError((uint64_t)this + 24, (uint64_t)v247, 0xFA0uLL, 0);
      if (v248 < 0) {
        operator delete(v247[0]);
      }
      CFStringRef v187 = ACFULogging::getLogInstance(v186);
      ACFULogging::handleMessage((uint64_t)v187, 2u, "%s::%s: updater failed to find firmware data with bundleData\n", v188, v189, v190, v191, v192, (char)"ACFURestoreHost");
      CFMutableArrayRef Mutable = 0;
LABEL_181:
      CFDataRef v30 = 0;
      goto LABEL_18;
    }
    int v180 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v180, 2u, "%s::%s: failed to create mutable copy of source device firmware data dictionary (type: %hhu)\n", v181, v182, v183, v184, v185, (char)"ACFURestoreHost");
  }
  else
  {
    uint64_t v155 = ACFULogging::getLogInstance(v21);
    ACFULogging::handleMessage((uint64_t)v155, 2u, "%s::%s: failed due to incompatible bundle data dictionary\n", v156, v157, v158, v159, v160, (char)"ACFURestoreHost");
  }
  CFDataRef v30 = 0;
  CFMutableArrayRef Mutable = 0;
LABEL_185:
  uint64_t v25 = (__CFDictionary *)v4;
LABEL_164:
  CFRelease(v25);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v30;
}

void sub_217ABC8F0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 225) < 0) {
    operator delete(*(void **)(v1 - 248));
  }
  _Unwind_Resume(a1);
}

const void *ACFURestoreHost::getPathFromBuildID(ACFURestoreHost *this, const __CFDictionary *a2, const __CFString *a3)
{
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@.%@.%@.%@", @"BuildIdentity", a2, @"Info", @"Path");
  if (v3)
  {
    CFStringRef v4 = v3;
    CFDictionaryRef ValueForKeyPathInDict = (const void *)AMSupportGetValueForKeyPathInDict();
    if (ValueForKeyPathInDict)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      uint64_t v7 = (ACFULogging *)CFGetTypeID(ValueForKeyPathInDict);
      if ((ACFULogging *)TypeID != v7)
      {
        Loguint64_t Instance = ACFULogging::getLogInstance(v7);
        CFGetTypeID(ValueForKeyPathInDict);
        ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: path has wrong type %lu\n", v22, v23, v24, v25, v26, (char)"ACFURestoreHost");
      }
    }
    else
    {
      uint64_t v15 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v15, 2u, "%s::%s: failed to get dict entry\n", v16, v17, v18, v19, v20, (char)"ACFURestoreHost");
    }
    CFRelease(v4);
  }
  else
  {
    int v9 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v9, 2u, "%s::%s: failed to create build ID key path\n", v10, v11, v12, v13, v14, (char)"ACFURestoreHost");
    return 0;
  }
  return ValueForKeyPathInDict;
}

uint64_t ACFURestoreHost::copyToPersonalizedBundlePath(ACFURestoreHost *this, CFDictionaryRef theDict, const __CFString *a3, const __CFData *a4)
{
  CFStringRef Value = (ACFULogging *)CFDictionaryGetValue(theDict, @"DestBundlePath");
  if (Value && (CFArrayRef v5 = Value, v6 = CFURLGetTypeID(), Value = (ACFULogging *)CFGetTypeID(v5), (ACFULogging *)v6 == Value))
  {
    uint64_t v7 = (ACFULogging *)AMSupportCopyURLWithAppendedComponent();
    if (v7)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(v7);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to create destination path URL (status: %d)\n", v27, v28, v29, v30, v31, (char)"ACFURestoreHost");
      return 4000;
    }
    CFTypeID v8 = (ACFULogging *)MEMORY[0x21D453D50](0);
    if (v8)
    {
      CFStringRef v32 = ACFULogging::getLogInstance(v8);
      ACFULogging::handleMessage((uint64_t)v32, 2u, "%s::%s: failed to create directory @ dstPathURL (status: %d)\n", v33, v34, v35, v36, v37, (char)"ACFURestoreHost");
      return 1003;
    }
    int v9 = (ACFULogging *)AMSupportWriteDataToFileURL();
    if (v9)
    {
      CFStringRef v38 = ACFULogging::getLogInstance(v9);
      ACFULogging::handleMessage((uint64_t)v38, 2u, "%s::%s: failed to copy data to dstPathURL (status: %d)\n", v39, v40, v41, v42, v43, (char)"ACFURestoreHost");
      return 1004;
    }
    BOOL doesPathExist = ACFUCommon::doesPathExist(0, v10);
    if (!doesPathExist)
    {
      uint64_t v12 = ACFULogging::getLogInstance((ACFULogging *)doesPathExist);
      ACFULogging::handleMessage((uint64_t)v12, 2u, "%s::%s: destination path does not exist after creation attempt (status: %d)\n", v13, v14, v15, v16, v17, (char)"ACFURestoreHost");
      return 1004;
    }
  }
  else
  {
    uint64_t v18 = ACFULogging::getLogInstance(Value);
    ACFULogging::handleMessage((uint64_t)v18, 0, "%s::%s: destination bundle was not specified, so we are skipping the copy step...\n", v19, v20, v21, v22, v23, (char)"ACFURestoreHost");
  }
  return 0;
}

__CFDictionary *ACFURestoreHost::createRequest(uint64_t a1, CFDictionaryRef **a2, uint64_t a3)
{
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    std::string::basic_string[abi:ne180100]<0>(v245, "createRequest: Failed to allocate output dictionary");
    uint64_t v161 = (ACFUError *)(a1 + 24);
    uint64_t v162 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v245, 0xFA0uLL, 0);
    if (v246 < 0) {
      operator delete(v245[0]);
    }
    Loguint64_t Instance = ACFULogging::getLogInstance(v162);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Failed to allocate output dictionary\n", v164, v165, v166, v167, v168, (char)"ACFURestoreHost");
    ACFUError::hasError(v161);
    return 0;
  }
  uint64_t v7 = Mutable;
  CFTypeID v8 = *(const void ***)(a1 + 88);
  if (v8 != *(const void ***)(a1 + 96))
  {
    int v9 = (const void *)*MEMORY[0x263EFFB40];
    do
    {
      CFURLRef v10 = *v8++;
      CFDictionaryAddValue(v7, v10, v9);
    }
    while (v8 != *(const void ***)(a1 + 96));
  }
  ACFUCommon::parseDebugArgs(*(ACFUCommon **)(a1 + 16), (const __CFDictionary *)"validateDeviceId", &__s);
  std::string::size_type v12 = __s.__r_.__value_.__r.__words[0];
  if (!__s.__r_.__value_.__r.__words[0])
  {
    uint64_t v13 = ACFULogging::getLogInstance(v11);
    ACFULogging::handleMessage((uint64_t)v13, 0, "%s::%s: skipping device identity validation against build identity\n", v14, v15, v16, v17, v18, (char)"ACFURestoreHost");
  }
  uint64_t v19 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"BuildIdentity");
  if (!v19 || (uint64_t v20 = v19, TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(v20)))
  {
    std::string::basic_string[abi:ne180100]<0>(v243, "createRequest: Failed to get build identity dict from options");
    CFDataRef v153 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v243, 0xFA1uLL, 0);
    if (v244 < 0)
    {
      uint64_t v154 = (void *)v243[0];
LABEL_126:
      operator delete(v154);
    }
LABEL_127:
    uint64_t v155 = ACFULogging::getLogInstance(v153);
    ACFULogging::handleMessage((uint64_t)v155, 2u, "%s::%s: failed to get build identity dict from options\n", v156, v157, v158, v159, v160, (char)"ACFURestoreHost");
    goto LABEL_118;
  }
  uint64_t v22 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"DeviceInfo");
  if (!v22 || (uint64_t v23 = v22, v24 = CFDictionaryGetTypeID(), v24 != CFGetTypeID(v23)))
  {
    std::string::basic_string[abi:ne180100]<0>(v241, "createRequest: Failed to get build identity dict from options");
    CFDataRef v153 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v241, 0xFA1uLL, 0);
    if (v242 < 0)
    {
      uint64_t v154 = (void *)v241[0];
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  if (v12
    && (std::map<__CFString const*,unsigned long>::map[abi:ne180100](v240, a1 + 160),
        char v25 = ACFURestoreHost::validateDeviceInfoAgainstBuildIdentity((const __CFString ***)(a1 + 64), (const __CFString ***)(a1 + 40), (const __CFDictionary *)v23, (const __CFDictionary *)v20, (uint64_t)v240), std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)v240, (void *)v240[1]), (v25 & 1) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v238, "createRequest: Failed to validate device identity tags");
    uint64_t v183 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v238, 0xFA9uLL, 0);
    if (v239 < 0) {
      operator delete(v238[0]);
    }
    uint64_t v184 = ACFULogging::getLogInstance(v183);
    ACFULogging::handleMessage((uint64_t)v184, 2u, "%s::%s: failed to validate device identity tags\n", v185, v186, v187, v188, v189, (char)"ACFURestoreHost");
  }
  else
  {
    std::map<__CFString const*,unsigned long>::map[abi:ne180100](v237, a1 + 160);
    char v26 = ACFURestoreHost::populateDictFromIdentity((unint64_t **)(a1 + 40), (uint64_t)v237, (CFDictionaryRef)v20, v7);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)v237, (void *)v237[1]);
    if (v26)
    {
      std::map<__CFString const*,unsigned long>::map[abi:ne180100](v234, a1 + 160);
      char v27 = ACFURestoreHost::populateDictFromIdentity((unint64_t **)(a1 + 64), (uint64_t)v234, (CFDictionaryRef)v23, v7);
      std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)v234, (void *)v234[1]);
      if (v27)
      {
        if (*(void *)a3)
        {
          uint64_t v29 = (void *)CFDictionaryGetValue((CFDictionaryRef)v23, *(const void **)a3);
          if (!v29 || (v30 = v29, v31 = CFDataGetTypeID(), CFTypeID v28 = CFGetTypeID(v30), v31 != v28))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "createRequest: Production mode not present in device info. This is fatal!");
            CFStringRef v32 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)__p, 0xFA1uLL, 0);
            if (v231 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v33 = ACFULogging::getLogInstance(v32);
            ACFULogging::handleMessage((uint64_t)v33, 2u, "%s::%s: production mode not present in device info. This is fatal!\n", v34, v35, v36, v37, v38, (char)"ACFURestoreHost");
            goto LABEL_118;
          }
        }
        else
        {
          uint64_t v30 = 0;
        }
        uint64_t v39 = *(const void **)(a3 + 8);
        if (v39)
        {
          uint64_t v40 = (void *)CFDictionaryGetValue((CFDictionaryRef)v23, v39);
          if (!v40 || (v41 = v40, v42 = CFDataGetTypeID(), CFTypeID v28 = CFGetTypeID(v41), v42 != v28))
          {
            std::string::basic_string[abi:ne180100]<0>(v228, "createRequest: Security mode not present in device info. This is fatal!");
            uint64_t v43 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v228, 0xFA1uLL, 0);
            if (v229 < 0) {
              operator delete(v228[0]);
            }
            std::string v44 = ACFULogging::getLogInstance(v43);
            ACFULogging::handleMessage((uint64_t)v44, 2u, "%s::%s: security mode not present in device info. This is fatal!\n", v45, v46, v47, v48, v49, (char)"ACFURestoreHost");
            goto LABEL_118;
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        uint64_t v207 = (ACFURestoreHost *)v41;
        uint64_t v208 = (ACFURestoreHost *)v30;
        CFDictionaryRef theDict = (const __CFDictionary *)v23;
        uint64_t v50 = *(void *)(a1 + 136);
        if (v50 != *(void *)(a1 + 144))
        {
          uint64_t v209 = a1 + 200;
          uint64_t v205 = a1 + 24;
          CFDictionaryRef value = (void *)*MEMORY[0x263EFFB40];
          do
          {
            MeasureDataWithTag = ACFUFirmware::getMeasureDataWithTag(*a2, *(const __CFString **)v50);
            CFDictionaryRef v52 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v20, *(const void **)v50);
            ACFUCommon::stringFromCFString(*(const __CFString **)v50, &__s);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__s.__r_.__value_.__l.__size_)
              {
                std::string::__init_copy_ctor_external(&v226, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                goto LABEL_37;
              }
            }
            else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
            {
              std::string v226 = __s;
              goto LABEL_37;
            }
            long long v53 = (ACFULogging *)std::string::basic_string[abi:ne180100]<0>(&v226, "UNDEF");
LABEL_37:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            std::string __s = v226;
            if (!v52)
            {
              if (!*(unsigned char *)(v50 + 8) && MeasureDataWithTag)
              {
                std::string::basic_string[abi:ne180100]<0>(v224, "createRequest: could not find FW in build ID");
                uint64_t v57 = (ACFULogging *)ACFUError::addError(v205, (uint64_t)v224, 0x3EDuLL, 0);
                if (v225 < 0) {
                  operator delete(v224[0]);
                }
                uint64_t v58 = ACFULogging::getLogInstance(v57);
                ACFULogging::handleMessage((uint64_t)v58, 2u, "%s::%s: could not find FW (%s) in build ID\n", v59, v60, v61, v62, v63, (char)"ACFURestoreHost");
                goto LABEL_50;
              }
LABEL_51:
              uint64_t v65 = ACFULogging::getLogInstance(v53);
              ACFULogging::handleMessage((uint64_t)v65, 0, "%s::%s: Tag '%s' doesn't exist -- moving along\n", v66, v67, v68, v69, v70, (char)"ACFURestoreHost");
              int v64 = 24;
              goto LABEL_70;
            }
            if (!MeasureDataWithTag) {
              goto LABEL_51;
            }
            uint64_t v54 = CFDictionaryGetValue(v52, @"Trusted");
            long long v55 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (!v55)
            {
              std::string::basic_string[abi:ne180100]<0>(v222, "createRequest: failed to allocate internal data structure");
              uint64_t v74 = (ACFULogging *)ACFUError::addError(v205, (uint64_t)v222, 0xFA0uLL, 0);
              if (v223 < 0) {
                operator delete(v222[0]);
              }
              uint64_t v75 = ACFULogging::getLogInstance(v74);
              ACFULogging::handleMessage((uint64_t)v75, 2u, "%s::%s: failed to allocate internal data structure\n", v76, v77, v78, v79, v80, (char)"ACFURestoreHost");
              goto LABEL_50;
            }
            if (*(void *)a3)
            {
              if (*(unsigned char *)(a3 + 16)) {
                BOOL v56 = *(unsigned char *)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at(v209, (unint64_t *)v50) != 0;
              }
              else {
                BOOL v56 = 0;
              }
              ACFURestoreHost::createBoolFromData(v208, (uint64_t)&v226);
              if (v226.__r_.__value_.__s.__data_[8])
              {
                std::string::basic_string[abi:ne180100]<0>(v220, "createRequest: epro data to BOOLean conversion failure");
                uint64_t v81 = (ACFULogging *)ACFUError::addError(v205, (uint64_t)v220, 0x3EDuLL, 0);
                if (v221 < 0) {
                  operator delete(v220[0]);
                }
                uint64_t v82 = ACFULogging::getLogInstance(v81);
                ACFULogging::handleMessage((uint64_t)v82, 2u, "%s::%s: epro data to BOOLean conversion failure\n", v83, v84, v85, v86, v87, (char)"ACFURestoreHost");
                goto LABEL_50;
              }
              if (v56)
              {
                CFDictionaryAddValue(v55, @"DPRO", value);
                uint64_t v71 = (std::string *)MEMORY[0x263EFFB38];
              }
              else
              {
                uint64_t v71 = &v226;
              }
              CFDictionaryAddValue(v55, @"EPRO", v71->__r_.__value_.__l.__data_);
            }
            if (*(void *)(a3 + 8))
            {
              if (*(unsigned char *)(a3 + 17)) {
                BOOL v72 = *((unsigned char *)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at(v209, (unint64_t *)v50)+ 1) != 0;
              }
              else {
                BOOL v72 = 0;
              }
              ACFURestoreHost::createBoolFromData(v207, (uint64_t)&v226);
              if (v226.__r_.__value_.__s.__data_[8])
              {
                std::string::basic_string[abi:ne180100]<0>(v218, "createRequest: esec data to BOOLean conversion failure");
                uint64_t v88 = (ACFULogging *)ACFUError::addError(v205, (uint64_t)v218, 0x3EDuLL, 0);
                if (v219 < 0) {
                  operator delete(v218[0]);
                }
                uint64_t v89 = ACFULogging::getLogInstance(v88);
                ACFULogging::handleMessage((uint64_t)v89, 2u, "%s::%s: esec data to BOOLean conversion failure\n", v90, v91, v92, v93, v94, (char)"ACFURestoreHost");
LABEL_50:
                int v64 = 4;
                goto LABEL_70;
              }
              if (v72)
              {
                CFDictionaryAddValue(v55, @"DSEC", value);
                uint64_t v73 = (std::string *)MEMORY[0x263EFFB38];
              }
              else
              {
                uint64_t v73 = &v226;
              }
              CFDictionaryAddValue(v55, @"ESEC", v73->__r_.__value_.__l.__data_);
            }
            CFDictionaryAddValue(v55, @"Digest", MeasureDataWithTag);
            if (v54) {
              CFDictionaryAddValue(v55, @"Trusted", v54);
            }
            CFDictionaryAddValue(v7, *(const void **)v50, v55);
            CFRelease(v55);
            int v64 = 0;
LABEL_70:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__s.__r_.__value_.__l.__data_);
              if (v64)
              {
LABEL_74:
                if (v64 != 24) {
                  goto LABEL_118;
                }
              }
            }
            else if (v64)
            {
              goto LABEL_74;
            }
            v50 += 16;
          }
          while (v50 != *(void *)(a1 + 144));
        }
        if (!*(void *)(a1 + 184)) {
          goto LABEL_107;
        }
        CFDictionaryRef v95 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"Options");
        if (v95)
        {
          CFDictionaryRef v96 = v95;
          BOOL v97 = (ACFULogging *)CFDictionaryContainsKey(v95, @"TrustObjectDigest");
          if (v97)
          {
            char v98 = ACFULogging::getLogInstance(v97);
            ACFULogging::handleMessage((uint64_t)v98, 0, "%s::%s: Using FDR trust object hash in updater options override\n", v99, v100, v101, v102, v103, (char)"ACFURestoreHost");
            uint64_t v104 = CFDictionaryGetValue(v96, @"TrustObjectDigest");
            if (!v104
              || (int v105 = v104,
                  CFTypeID v106 = CFDataGetTypeID(),
                  uint64_t v107 = (ACFULogging *)CFGetTypeID(v105),
                  (ACFULogging *)v106 != v107))
            {
              std::string::basic_string[abi:ne180100]<0>(v216, "createRequest: Invalid FDR trust object hash in updater options override");
              uint64_t v108 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v216, 0x3EDuLL, 0);
              if (v217 < 0) {
                operator delete(v216[0]);
              }
              uint64_t v109 = ACFULogging::getLogInstance(v108);
              ACFULogging::handleMessage((uint64_t)v109, 2u, "%s::%s: Invalid FDR trust object hash in updater options override\n", v110, v111, v112, v113, v114, (char)"ACFURestoreHost");
              goto LABEL_118;
            }
            goto LABEL_98;
          }
        }
        uint64_t v115 = (ACFULogging *)CFDictionaryContainsKey(theDict, @"ACFU,FDRTrustObjectHash");
        int v116 = (int)v115;
        uint64_t v117 = ACFULogging::getLogInstance(v115);
        if (v116)
        {
          ACFULogging::handleMessage((uint64_t)v117, 0, "%s::%s: Using FDR trust object hash in client updater override\n", v118, v119, v120, v121, v122, (char)"ACFURestoreHost");
          uint64_t v123 = CFDictionaryGetValue(theDict, @"ACFU,FDRTrustObjectHash");
          if (v123)
          {
            int v105 = v123;
            CFTypeID v124 = CFDataGetTypeID();
            uint64_t v107 = (ACFULogging *)CFGetTypeID(v105);
            if ((ACFULogging *)v124 == v107)
            {
LABEL_98:
              uint64_t v125 = ACFULogging::getLogInstance(v107);
              ACFULogging::handleMessage((uint64_t)v125, 0, "%s::%s: Applying FDR trust object hash override\n", v126, v127, v128, v129, v130, (char)"ACFURestoreHost");
              CFDictionarySetValue(v7, *(const void **)(a1 + 184), v105);
LABEL_101:
              long long v134 = ACFULogging::getLogInstance(v131);
              std::string::basic_string[abi:ne180100]<0>(&v211, "ACFURestoreHost");
              uint64_t v135 = std::string::append(&v211, "::");
              long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
              v226.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v136;
              v135->__r_.__value_.__l.__size_ = 0;
              v135->__r_.__value_.__r.__words[2] = 0;
              v135->__r_.__value_.__r.__words[0] = 0;
              uint64_t v137 = std::string::append(&v226, "createRequest");
              long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
              __s.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v138;
              v137->__r_.__value_.__l.__size_ = 0;
              v137->__r_.__value_.__r.__words[2] = 0;
              v137->__r_.__value_.__r.__words[0] = 0;
              ACFULogging::handleMessageCFType((uint64_t)v134, (uint64_t *)&__s, 4, (uint64_t)"FDR Trust Object Digest: ", (uint64_t)v105);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v226.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v211.__r_.__value_.__l.__data_);
              }
LABEL_107:
              if (*(void *)(a1 + 192))
              {
                CFTypeID v28 = (CFTypeID)CFDictionaryGetValue(theDict, @"ACFU,FDRAllowUnsealed");
                if (v28)
                {
                  CFBooleanRef v139 = (const __CFBoolean *)v28;
                  CFTypeID v140 = CFGetTypeID((CFTypeRef)v28);
                  CFTypeID v28 = CFBooleanGetTypeID();
                  if (v140 == v28)
                  {
                    CFTypeID v28 = CFBooleanGetValue(v139);
                    if (v28)
                    {
                      uint64_t v141 = ACFULogging::getLogInstance((ACFULogging *)v28);
                      ACFULogging::handleMessage((uint64_t)v141, 0, "%s::%s: allowing unsealed FDR data\n", v142, v143, v144, v145, v146, (char)"ACFURestoreHost");
                      CFDictionaryAddValue(v7, *(const void **)(a1 + 192), (const void *)*MEMORY[0x263EFFB40]);
                    }
                  }
                }
              }
              uint64_t v147 = ACFULogging::getLogInstance((ACFULogging *)v28);
              std::string::basic_string[abi:ne180100]<0>(&v211, "ACFURestoreHost");
              uint64_t v148 = std::string::append(&v211, "::");
              long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
              v226.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v149;
              v148->__r_.__value_.__l.__size_ = 0;
              v148->__r_.__value_.__r.__words[2] = 0;
              v148->__r_.__value_.__r.__words[0] = 0;
              uint64_t v150 = std::string::append(&v226, "createRequest");
              long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
              __s.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v151;
              v150->__r_.__value_.__l.__size_ = 0;
              v150->__r_.__value_.__r.__words[2] = 0;
              v150->__r_.__value_.__r.__words[0] = 0;
              ACFULogging::handleMessageCFType((uint64_t)v147, (uint64_t *)&__s, 0, (uint64_t)"Request Dictionary:", (uint64_t)v7);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v226.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v211.__r_.__value_.__l.__data_);
              }
              goto LABEL_118;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(v214, "createRequest: Invalid FDR trust object hash in client updater override");
          uint64_t v190 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v214, 0x3EDuLL, 0);
          if (v215 < 0) {
            operator delete(v214[0]);
          }
          uint64_t v191 = ACFULogging::getLogInstance(v190);
          ACFULogging::handleMessage((uint64_t)v191, 2u, "%s::%s: Invalid FDR trust object hash in client updater override\n", v192, v193, v194, v195, v196, (char)"ACFURestoreHost");
        }
        else
        {
          ACFULogging::handleMessage((uint64_t)v117, 0, "%s::%s: Requesting FDR trust object hash\n", v118, v119, v120, v121, v122, (char)"ACFURestoreHost");
          CFMutableDataRef v132 = CFDataCreateMutable(allocator, 0);
          if (v132)
          {
            CFMutableDataRef v133 = v132;
            CFDictionarySetValue(v7, *(const void **)(a1 + 184), v132);
            CFRelease(v133);
            int v105 = 0;
            goto LABEL_101;
          }
          std::string::basic_string[abi:ne180100]<0>(v212, "createRequest: Failed to create empty trust object hash");
          uint64_t v197 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v212, 0xFA0uLL, 0);
          if (v213 < 0) {
            operator delete(v212[0]);
          }
          uint64_t v198 = ACFULogging::getLogInstance(v197);
          ACFULogging::handleMessage((uint64_t)v198, 2u, "%s::%s: Failed to create empty trust object hash\n", v199, v200, v201, v202, v203, (char)"ACFURestoreHost");
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v232, "createRequest: Failed to build parameters out of device identity");
        uint64_t v176 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v232, 0xFA4uLL, 0);
        if (v233 < 0) {
          operator delete(v232[0]);
        }
        uint64_t v177 = ACFULogging::getLogInstance(v176);
        ACFULogging::handleMessage((uint64_t)v177, 2u, "%s::%s: failed to build parameters out of device identity\n", v178, v179, v180, v181, v182, (char)"ACFURestoreHost");
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v235, "createRequest: Failed to build parameters out of build identity");
      uint64_t v169 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v235, 0xFA4uLL, 0);
      if (v236 < 0) {
        operator delete(v235[0]);
      }
      uint64_t v170 = ACFULogging::getLogInstance(v169);
      ACFULogging::handleMessage((uint64_t)v170, 2u, "%s::%s: failed to build parameters out of build identity\n", v171, v172, v173, v174, v175, (char)"ACFURestoreHost");
    }
  }
LABEL_118:
  if (ACFUError::hasError((ACFUError *)(a1 + 24)))
  {
    CFRelease(v7);
    return 0;
  }
  return v7;
}

void sub_217ABDC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ACFURestoreHost::validateDeviceInfoAgainstBuildIdentity(const __CFString ***a1, const __CFString ***a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  CFArrayRef v5 = *a1;
  char v98 = a1[1];
  if (*a1 == v98)
  {
    char v30 = 1;
    return v30 & 1;
  }
  uint64_t v6 = a5;
  CFDictionaryRef v7 = a4;
  CFDictionaryRef v8 = a3;
  CFTypeRef cf2 = 0;
  std::string cf = 0;
  BOOL v97 = (void *)(a5 + 8);
  while (1)
  {
    uint64_t v11 = *a2;
    CFURLRef v10 = a2[1];
    if (*a2 != v10)
    {
      while (*v11 != *v5)
      {
        if (++v11 == v10)
        {
          uint64_t v11 = a2[1];
          break;
        }
      }
    }
    if (v11 == v10) {
      goto LABEL_30;
    }
    ACFUCommon::stringFromCFString(*v5, &v103);
    CFStringRef Value = (__CFString *)CFDictionaryGetValue(v8, *v5);
    if (!Value)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(0);
      char v27 = "%s::%s: tag '%s' not found in device info, skipping validation\n";
      goto LABEL_24;
    }
    uint64_t v13 = (ACFULogging *)CFDictionaryGetValue(v7, *v5);
    uint64_t v14 = (__CFString *)v13;
    if (!v13)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(0);
      char v27 = "%s::%s: tag '%s' not found in build identity, skipping validation\n";
      goto LABEL_24;
    }
    uint64_t v15 = (void *)*v97;
    if (!*v97) {
      goto LABEL_21;
    }
    CFStringRef v16 = *v5;
    uint64_t v17 = v97;
    do
    {
      unint64_t v18 = v15[4];
      BOOL v19 = v18 >= (unint64_t)v16;
      if (v18 >= (unint64_t)v16) {
        uint64_t v20 = v15;
      }
      else {
        uint64_t v20 = v15 + 1;
      }
      if (v19) {
        uint64_t v17 = v15;
      }
      uint64_t v15 = (void *)*v20;
    }
    while (*v20);
    if (v17 == v97 || (unint64_t)v16 < v17[4])
    {
LABEL_21:
      Loguint64_t Instance = ACFULogging::getLogInstance(v13);
      char v27 = "%s::%s: tag '%s' not found in tss-request map, skipping validation\n";
LABEL_24:
      int v28 = 3;
      ACFULogging::handleMessage((uint64_t)LogInstance, 3u, v27, v22, v23, v24, v25, v26, (char)"ACFURestoreHost");
      char v29 = 0;
      goto LABEL_25;
    }
    CFTypeID v31 = (ACFUCommon *)CFGetTypeID(Value);
    uint64_t v94 = (ACFUCommon *)CFGetTypeID(v14);
    CFStringRef v32 = (ACFULogging *)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at(v6, (unint64_t *)v5);
    uint64_t v33 = *(ACFUCommon **)v32;
    uint64_t v34 = ACFULogging::getLogInstance(v32);
    ACFUCommon::cfTypeDescription(v31, 1, &v101);
    ACFUCommon::cfTypeDescription(v33, 1, &__p);
    ACFULogging::handleMessage((uint64_t)v34, 4u, "%s::%s: attempting to convert tag '%s' from device info type (%s) to tss-request map type (%s)\n", v35, v36, v37, v38, v39, (char)"ACFURestoreHost");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102) < 0)
    {
      operator delete((void *)v101);
      if (!cf) {
        goto LABEL_39;
      }
LABEL_38:
      CFRelease(cf);
      goto LABEL_39;
    }
    if (cf) {
      goto LABEL_38;
    }
LABEL_39:
    uint64_t v40 = (ACFULogging *)ACFURestoreHost::convertCFType(Value, v33);
    std::string cf = v40;
    if (v40)
    {
      uint64_t v41 = ACFULogging::getLogInstance(v40);
      ACFUCommon::cfTypeDescription(v94, 1, &v101);
      ACFUCommon::cfTypeDescription(v33, 1, &__p);
      ACFULogging::handleMessage((uint64_t)v41, 4u, "%s::%s: attempting to convert tag '%s' from build identity type (%s) to tss-request map type (%s)\n", v42, v43, v44, v45, v46, (char)"ACFURestoreHost");
      CFDictionaryRef v7 = a4;
      uint64_t v6 = a5;
      CFDictionaryRef v8 = a3;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)v101);
      }
      if (cf2) {
        CFRelease(cf2);
      }
      CFTypeRef cf2 = ACFURestoreHost::convertCFType(v14, v33);
      if (cf2)
      {
        uint64_t v47 = (ACFULogging *)CFEqual(cf, cf2);
        if (v47)
        {
          int v28 = 0;
          char v29 = 1;
          goto LABEL_25;
        }
        uint64_t v60 = ACFULogging::getLogInstance(v47);
        ACFULogging::handleMessage((uint64_t)v60, 2u, "%s::%s: tag '%s' has different values in device info and build identity\n", v61, v62, v63, v64, v65, (char)"ACFURestoreHost");
        uint64_t v67 = ACFULogging::getLogInstance(v66);
        std::string::basic_string[abi:ne180100]<0>(&v99, "ACFURestoreHost");
        uint64_t v68 = std::string::append(&v99, "::");
        long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        uint64_t v70 = std::string::append(&__p, "validateDeviceInfoAgainstBuildIdentity");
        long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        std::string::size_type v102 = v70->__r_.__value_.__r.__words[2];
        long long v101 = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        ACFULogging::handleMessageCFType((uint64_t)v67, (uint64_t *)&v101, 2, (uint64_t)"device info value: ", (uint64_t)Value);
        if (SHIBYTE(v102) < 0) {
          operator delete((void *)v101);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        uint64_t v73 = ACFULogging::getLogInstance(v72);
        std::string::basic_string[abi:ne180100]<0>(&v99, "ACFURestoreHost");
        uint64_t v74 = std::string::append(&v99, "::");
        long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        uint64_t v76 = std::string::append(&__p, "validateDeviceInfoAgainstBuildIdentity");
        long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        std::string::size_type v102 = v76->__r_.__value_.__r.__words[2];
        long long v101 = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        ACFULogging::handleMessageCFType((uint64_t)v73, (uint64_t *)&v101, 2, (uint64_t)"device info value converted: ", (uint64_t)cf);
        if (SHIBYTE(v102) < 0) {
          operator delete((void *)v101);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        uint64_t v79 = ACFULogging::getLogInstance(v78);
        std::string::basic_string[abi:ne180100]<0>(&v99, "ACFURestoreHost");
        uint64_t v80 = std::string::append(&v99, "::");
        long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        uint64_t v82 = std::string::append(&__p, "validateDeviceInfoAgainstBuildIdentity");
        long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        std::string::size_type v102 = v82->__r_.__value_.__r.__words[2];
        long long v101 = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        ACFULogging::handleMessageCFType((uint64_t)v79, (uint64_t *)&v101, 2, (uint64_t)"build identity value: ", (uint64_t)v14);
        if (SHIBYTE(v102) < 0) {
          operator delete((void *)v101);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        uint64_t v85 = ACFULogging::getLogInstance(v84);
        std::string::basic_string[abi:ne180100]<0>(&v99, "ACFURestoreHost");
        uint64_t v86 = std::string::append(&v99, "::");
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        uint64_t v88 = std::string::append(&__p, "validateDeviceInfoAgainstBuildIdentity");
        long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        std::string::size_type v102 = v88->__r_.__value_.__r.__words[2];
        long long v101 = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        ACFULogging::handleMessageCFType((uint64_t)v85, (uint64_t *)&v101, 2, (uint64_t)"build identity value converted: ", (uint64_t)cf2);
        if (SHIBYTE(v102) < 0) {
          operator delete((void *)v101);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v54 = ACFULogging::getLogInstance(0);
        ACFUCommon::cfTypeDescription(v94, 1, &v101);
        ACFUCommon::cfTypeDescription(v33, 1, &__p);
        ACFULogging::handleMessage((uint64_t)v54, 2u, "%s::%s: failed to convert tag '%s' from build identity type (%s) to tss-request map type (%s)\n", v55, v56, v57, v58, v59, (char)"ACFURestoreHost");
        CFDictionaryRef v7 = a4;
        uint64_t v6 = a5;
        CFDictionaryRef v8 = a3;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v102) < 0) {
          operator delete((void *)v101);
        }
        CFTypeRef cf2 = 0;
      }
    }
    else
    {
      uint64_t v48 = ACFULogging::getLogInstance(0);
      ACFUCommon::cfTypeDescription(v31, 1, &v101);
      ACFUCommon::cfTypeDescription(v33, 1, &__p);
      ACFULogging::handleMessage((uint64_t)v48, 2u, "%s::%s: failed to convert tag '%s' from device info type (%s) to tss-request map type (%s)\n", v49, v50, v51, v52, v53, (char)"ACFURestoreHost");
      CFDictionaryRef v7 = a4;
      uint64_t v6 = a5;
      CFDictionaryRef v8 = a3;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)v101);
      }
      std::string cf = 0;
    }
    char v29 = 0;
    int v28 = 8;
LABEL_25:
    if (v104 < 0) {
      break;
    }
    if ((v29 & 1) == 0) {
      goto LABEL_29;
    }
LABEL_30:
    if (++v5 == v98)
    {
      char v30 = 1;
LABEL_84:
      if (cf) {
        CFRelease(cf);
      }
      if (cf2) {
        CFRelease(cf2);
      }
      return v30 & 1;
    }
  }
  operator delete(v103);
  if (v29) {
    goto LABEL_30;
  }
LABEL_29:
  char v30 = 1;
  switch(v28)
  {
    case 0:
    case 3:
      goto LABEL_30;
    case 2:
      goto LABEL_84;
    case 8:
      char v30 = 0;
      goto LABEL_84;
    default:
      return v30 & 1;
  }
  return v30 & 1;
}

void sub_217ABE710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 121) < 0) {
    operator delete(*(void **)(v33 - 144));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v33 - 89) < 0) {
    operator delete(*(void **)(v33 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFURestoreHost::populateDictFromIdentity(unint64_t **a1, uint64_t a2, CFDictionaryRef theDict, __CFDictionary *a4)
{
  CFStringRef v4 = *a1;
  if (*a1 != a1[1])
  {
    CFDictionaryRef v8 = (void *)(a2 + 8);
    do
    {
      int v9 = (void *)*v8;
      CFURLRef v10 = (const void *)*v4;
      if (!*v8) {
        goto LABEL_14;
      }
      uint64_t v11 = v8;
      do
      {
        unint64_t v12 = v9[4];
        BOOL v13 = v12 >= (unint64_t)v10;
        if (v12 >= (unint64_t)v10) {
          uint64_t v14 = v9;
        }
        else {
          uint64_t v14 = v9 + 1;
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        int v9 = (void *)*v14;
      }
      while (*v14);
      if (v11 != v8 && (unint64_t)v10 >= v11[4])
      {
        CFStringRef Value = (__CFString *)CFDictionaryGetValue(theDict, v10);
        if (Value)
        {
          uint64_t v23 = Value;
          uint64_t v24 = (ACFUCommon **)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at(a2, v4);
          uint64_t result = (uint64_t)ACFURestoreHost::convertCFType(v23, *v24);
          if (!result) {
            return result;
          }
          uint64_t v26 = (const void *)result;
          CFDictionarySetValue(a4, (const void *)*v4, (const void *)result);
          CFRelease(v26);
          goto LABEL_20;
        }
        ACFUCommon::stringFromCFString((const __CFString *)*v4, __p);
        Loguint64_t Instance = ACFULogging::getLogInstance(v27);
        ACFULogging::handleMessage((uint64_t)LogInstance, 3u, "%s::%s: tag '%s' not found in identity dictionary, ignoring\n", v29, v30, v31, v32, v33, (char)"ACFURestoreHost");
      }
      else
      {
LABEL_14:
        ACFUCommon::stringFromCFString((const __CFString *)*v4, __p);
        CFStringRef v16 = ACFULogging::getLogInstance(v15);
        ACFULogging::handleMessage((uint64_t)v16, 3u, "%s::%s: tag '%s' not found in tss-request map, ignoring\n", v17, v18, v19, v20, v21, (char)"ACFURestoreHost");
      }
      if (v36 < 0) {
        operator delete(__p[0]);
      }
LABEL_20:
      ++v4;
    }
    while (v4 != a1[1]);
  }
  return 1;
}

void sub_217ABE9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at(uint64_t a1, unint64_t *a2)
{
  CFAllocatorRef v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      CFAllocatorRef v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    CFAllocatorRef v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void ACFURestoreHost::createBoolFromData(ACFURestoreHost *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EFFB38];
  CFNumberRef otherNumber = 0;
  uint64_t valuePtr = 0;
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
  if (v6)
  {
    CFNumberRef v8 = v6;
    Num64Num32FromCFDataRef Data = ACFURestoreHost::createNum64Num32FromData(this, (const __CFData *)&otherNumber, v7);
    BOOL v10 = Num64Num32FromData;
    if (Num64Num32FromData)
    {
      CFNumberRef v11 = otherNumber;
      if (CFNumberCompare(v8, otherNumber, 0)) {
        uint64_t v5 = *MEMORY[0x263EFFB40];
      }
    }
    else
    {
      Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)Num64Num32FromData);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: CFData to CFBoolean conversion failure\n", v20, v21, v22, v23, v24, (char)"ACFURestoreHost");
      CFNumberRef v11 = otherNumber;
    }
    char v12 = !v10;
    CFRelease(v8);
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    BOOL v13 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v13, 2u, "%s::%s: CFData to CFBoolean conversion failure\n", v14, v15, v16, v17, v18, (char)"ACFURestoreHost");
    char v12 = 1;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v12;
}

CFErrorRef ACFURestoreHost::getError(ACFURestoreHost *this)
{
  uint64_t v1 = (ACFURestoreHost *)((char *)this + 24);
  if (!ACFUError::hasError((ACFURestoreHost *)((char *)this + 24))) {
    return 0;
  }

  return ACFUError::getCFError(v1);
}

void ACFURestoreHost::~ACFURestoreHost(ACFURestoreHost *this)
{
  *(void *)this = &unk_26C8081B8;
  CFAllocatorRef v2 = (const void *)*((void *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 2) = 0;
  }
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)this + 160, *((void **)this + 21));
  unint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  CFNumberRef v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
  CFDictionaryRef v7 = (void *)*((void *)this + 5);
  if (v7)
  {
    *((void *)this + 6) = v7;
    operator delete(v7);
  }
  ACFUError::~ACFUError((ACFURestoreHost *)((char *)this + 24));
}

uint64_t ACFURestoreHost::init(const void **this, const __CFDictionary *a2, const __CFString *a3)
{
  Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)this);
  ACFULogging::handleMessage((uint64_t)LogInstance, 0, "%s::%s: ACFU Version: %s\n", v7, v8, v9, v10, v11, (char)"ACFURestoreHost");
  if (a2) {
    BOOL v13 = a3 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  uint64_t v14 = !v13;
  if (v13)
  {
    uint64_t v16 = ACFULogging::getLogInstance(v12);
    ACFULogging::handleMessage((uint64_t)v16, 2u, "%s::%s: bad parameter: options %p, domain %p\n", v17, v18, v19, v20, v21, (char)"ACFURestoreHost");
  }
  else
  {
    this[2] = a2;
    AMSupportSafeRetain();
    AppendedDomain = (ACFULogging *)ACFUError::createAppendedDomain(this + 3, a3);
  }
  if (this[5] == this[6]
    || this[17] == this[18]
    || this[8] == this[9]
    || this[11] == this[12]
    || this[14] == this[15]
    || !this[22]
    || !this[27]
    || !this[28])
  {
    uint64_t v22 = ACFULogging::getLogInstance(AppendedDomain);
    ACFULogging::handleMessage((uint64_t)v22, 2u, "%s::%s: initialization failure due to incomplete parameters\n", v23, v24, v25, v26, v27, (char)"ACFURestoreHost");
    return 0;
  }
  return v14;
}

const void *ACFURestoreHost::copyDataFromFileDictionary(ACFULogging *key, CFDictionaryRef theDict, int a3)
{
  if (!key)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: key value not provided\n", v8, v9, v10, v11, v12, (char)"ACFURestoreHost");
    return 0;
  }
  if (!theDict)
  {
    BOOL v13 = ACFULogging::getLogInstance(key);
    ACFULogging::handleMessage((uint64_t)v13, 2u, "%s::%s: firmware file dictionary not provided\n", v14, v15, v16, v17, v18, (char)"ACFURestoreHost");
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, key);
  uint64_t v5 = Value;
  if (a3)
  {
    if (Value) {
      AMSupportSafeRetain();
    }
  }
  else
  {
    AMSupportCreateDataFromFileURL();
    return 0;
  }
  return v5;
}

CFTypeRef ACFURestoreHost::convertCFType(__CFString *this, ACFUCommon *a2)
{
  unint64_t v4 = (ACFULogging *)CFGetTypeID(this);
  Loguint64_t Instance = ACFULogging::getLogInstance(v4);
  ACFUCommon::cfTypeDescription(a2, 1, &cf);
  ACFUCommon::cfTypeDescription(v4, 1, __p);
  ACFULogging::handleMessage((uint64_t)LogInstance, 4u, "%s::%s: desired type %s, received type %s\n", v6, v7, v8, v9, v10, (char)"ACFURestoreHost");
  if (v70 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(cf.data) < 0) {
    operator delete(cf.isa);
  }
  if (v4 == a2)
  {
    uint64_t v12 = ACFULogging::getLogInstance(v11);
    ACFULogging::handleMessage((uint64_t)v12, 4u, "%s::%s: no conversion necessary\n", v13, v14, v15, v16, v17, (char)"ACFURestoreHost");
    return CFRetain(this);
  }
  if ((ACFUCommon *)CFNumberGetTypeID() != a2 || (uint64_t v19 = (ACFULogging *)CFStringGetTypeID(), v4 != v19))
  {
    if ((ACFUCommon *)CFNumberGetTypeID() == a2 && (uint64_t v34 = (ACFULogging *)CFDataGetTypeID(), v4 == v34))
    {
      uint64_t v35 = ACFULogging::getLogInstance(v34);
      ACFULogging::handleMessage((uint64_t)v35, 4u, "%s::%s: converting from data to number\n", v36, v37, v38, v39, v40, (char)"ACFURestoreHost");
      cf.isa = 0;
      Num64Num32FromCFDataRef Data = ACFURestoreHost::createNum64Num32FromData((ACFURestoreHost *)this, (const __CFData *)&cf, v41);
      if (!Num64Num32FromData)
      {
        uint64_t v43 = ACFULogging::getLogInstance((ACFULogging *)Num64Num32FromData);
        ACFULogging::handleMessage((uint64_t)v43, 2u, "%s::%s: failed to convert from number to data\n", v44, v45, v46, v47, v48, (char)"ACFURestoreHost");
        goto LABEL_15;
      }
    }
    else
    {
      CFTypeID TypeID = (ACFULogging *)CFBooleanGetTypeID();
      if (TypeID != a2 || (CFTypeID TypeID = (ACFULogging *)CFDataGetTypeID(), v4 != TypeID))
      {
        uint64_t v57 = ACFULogging::getLogInstance(TypeID);
        ACFUCommon::cfTypeDescription(a2, 1, &cf);
        ACFUCommon::cfTypeDescription(v4, 1, __p);
        ACFULogging::handleMessage((uint64_t)v57, 2u, "%s::%s: unsupported conversion: desired type %s, received type %s\n", v58, v59, v60, v61, v62, (char)"ACFURestoreHost");
        if (v70 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(cf.data) < 0) {
          operator delete(cf.isa);
        }
        return 0;
      }
      uint64_t v50 = ACFULogging::getLogInstance(TypeID);
      ACFULogging::handleMessage((uint64_t)v50, 4u, "%s::%s: converting from data to BOOLean\n", v51, v52, v53, v54, v55, (char)"ACFURestoreHost");
      ACFURestoreHost::createBoolFromData((ACFURestoreHost *)this, (uint64_t)&cf);
      if (LOBYTE(cf.info))
      {
        uint64_t v63 = ACFULogging::getLogInstance(v56);
        ACFULogging::handleMessage((uint64_t)v63, 2u, "%s::%s: failed to convert from data to BOOLean\n", v64, v65, v66, v67, v68, (char)"ACFURestoreHost");
        return 0;
      }
    }
    return cf.isa;
  }
  uint64_t v20 = ACFULogging::getLogInstance(v19);
  ACFULogging::handleMessage((uint64_t)v20, 4u, "%s::%s: converting from string to number\n", v21, v22, v23, v24, v25, (char)"ACFURestoreHost");
  cf.isa = 0;
  uint64_t v27 = (ACFULogging *)ACFURestoreHost::createNum32FromString(this, &cf, v26);
  if (v27) {
    return cf.isa;
  }
  int v28 = ACFULogging::getLogInstance(v27);
  ACFULogging::handleMessage((uint64_t)v28, 2u, "%s::%s: failed to convert from string to number\n", v29, v30, v31, v32, v33, (char)"ACFURestoreHost");
LABEL_15:
  CFTypeRef result = cf.isa;
  if (!cf.isa) {
    return result;
  }
  CFRelease(cf.isa);
  return 0;
}

void sub_217ABF150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFURestoreHost::createNum32FromString(const __CFString *this, const __CFString *a2, const __CFNumber **a3)
{
  int valuePtr = 0;
  ACFUCommon::stringFromCFString(this, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int valuePtr = std::stoi(&__str, 0, 0);
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
    a2->isa = v6;
    if (v6)
    {
      uint64_t v7 = 1;
      goto LABEL_6;
    }
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    uint64_t v15 = "%s::%s: Failed to create CF number from int value\n";
  }
  else
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v4);
    uint64_t v15 = "%s::%s: failed to get string\n";
  }
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v15, v10, v11, v12, v13, v14, (char)"ACFURestoreHost");
  uint64_t v7 = 0;
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v7;
}

BOOL ACFURestoreHost::createNum64Num32FromData(ACFURestoreHost *this, const __CFData *a2, const __CFNumber **a3)
{
  size_t Length = CFDataGetLength(this);
  BytePtr = (ACFULogging *)CFDataGetBytePtr(this);
  if (Length - 1 >= 8)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(BytePtr);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: data length %ld is not within range\n", v12, v13, v14, v15, v16, (char)"ACFURestoreHost");
  }
  else
  {
    if (Length < 5)
    {
      int valuePtr = 0;
      memcpy(&valuePtr, BytePtr, Length);
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      p_int valuePtr = (uint64_t *)&valuePtr;
      CFNumberType v9 = kCFNumberSInt32Type;
    }
    else
    {
      uint64_t __dst = 0;
      memcpy(&__dst, BytePtr, Length);
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      p_int valuePtr = &__dst;
      CFNumberType v9 = kCFNumberSInt64Type;
    }
    *(void *)a2 = CFNumberCreate(v7, v9, p_valuePtr);
  }
  return Length - 1 < 8;
}

void ACFURestoreHost::ACFURestoreHost(ACFURestoreHost *this)
{
  *(void *)this = &unk_26C8081B8;
  *((void *)this + 1) = @"ACFU,RootedFW";
  *((void *)this + 2) = 0;
  ACFUError::ACFUError((ACFURestoreHost *)((char *)this + 24), @"RestoreHost");
  *((void *)this + 21) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = (char *)this + 208;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t *std::map<__CFString const*,unsigned long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<__CFString const*,unsigned long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<__CFString const*,unsigned long>,std::__tree_node<std::__value_type<__CFString const*,unsigned long>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_217ABF574(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<__CFString const*,unsigned long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<__CFString const*,unsigned long>,std::__tree_node<std::__value_type<__CFString const*,unsigned long>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    std::string::size_type v6 = result + 1;
    do
    {
      CFTypeRef result = std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,unsigned long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      std::string::size_type v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          std::string::size_type v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,unsigned long> const&>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  std::string::size_type v6 = (void **)std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__find_equal<__CFString const*>(a1, a2, &v11, &v10, a3);
  std::string::size_type v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::string::size_type v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__find_equal<__CFString const*>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  CFTypeRef result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      CFAllocatorRef v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            BOOL v9 = (uint64_t **)a2[2];
          }
          else
          {
            BOOL v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *BOOL v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            CFAllocatorRef v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *CFAllocatorRef v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        CFAllocatorRef v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *CFAllocatorRef v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2642B9810, MEMORY[0x263F8C068]);
}

void sub_217ABFAD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  CFTypeRef result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void ACFUErrorContainer::ACFUErrorContainer(std::string *this, long long *a2, std::string::size_type a3, std::string::size_type a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  this[1].__r_.__value_.__l.__size_ = a4;
  AMSupportSafeRetain();
}

void sub_217ABFB88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ACFUErrorContainer::~ACFUErrorContainer(ACFUErrorContainer *this)
{
  CFAllocatorRef v2 = (const void *)*((void *)this + 4);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 4) = 0;
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void ACFUError::ACFUError(ACFUError *this, const __CFString *a2)
{
  *((void *)this + 1) = 0;
  unint64_t v4 = (void ***)((char *)this + 8);
  uint64_t v5 = (void **)operator new(0x18uLL);
  *uint64_t v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  int v6 = 0;
  std::unique_ptr<std::vector<ACFUErrorContainer>>::reset[abi:ne180100](v4, v5);
  std::unique_ptr<std::vector<ACFUErrorContainer>>::reset[abi:ne180100](&v6, 0);
  *(void *)this = a2;
  AMSupportSafeRetain();
}

void sub_217ABFC64(_Unwind_Exception *a1)
{
  std::unique_ptr<std::vector<ACFUErrorContainer>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

CFErrorRef ACFUError::getCFError(ACFUError *this)
{
  if (**((void **)this + 1) == *(void *)(*((void *)this + 1) + 8))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 4u, "%s::%s: Looks like there is no error present; Nothing to be done here.\n",
      v18,
      v19,
      v20,
      v21,
      v22,
      (char)"ACFUError");
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v4 = *(void *)(*((void *)this + 1) + 8);
  uint64_t v5 = (const char *)(v4 - 40);
  if (*(char *)(v4 - 17) < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  CFStringRef v6 = CFStringCreateWithCString(v2, v5, 0x8000100u);
  CFStringRef v7 = v6;
  if (v6)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFFC48], v6);
    uint64_t v9 = *(void *)(*((void *)this + 1) + 8);
    if (*(void *)(v9 - 8))
    {
      uint64_t v10 = ACFULogging::getLogInstance(v8);
      ACFULogging::handleMessage((uint64_t)v10, 3u, "%s::%s: Populating underlying error\n", v11, v12, v13, v14, v15, (char)"ACFUError");
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFFC88], *(const void **)(*(void *)(*((void *)this + 1) + 8) - 8));
      uint64_t v9 = *(void *)(*((void *)this + 1) + 8);
    }
    CFErrorRef v16 = CFErrorCreate(v2, *(CFErrorDomain *)this, *(void *)(v9 - 16), Mutable);
    if (v16)
    {
      if (!Mutable) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    uint64_t v24 = "%s::%s: failed to create CFError object\n";
  }
  else
  {
    uint64_t v24 = "%s::%s: failed to create CFString for error object\n";
  }
  uint64_t v25 = ACFULogging::getLogInstance(0);
  ACFULogging::handleMessage((uint64_t)v25, 2u, v24, v26, v27, v28, v29, v30, (char)"ACFUError");
  CFErrorRef v16 = 0;
  if (Mutable) {
LABEL_9:
  }
    CFRelease(Mutable);
LABEL_10:
  if (v7) {
    CFRelease(v7);
  }
  return v16;
}

uint64_t ACFUError::addError(uint64_t a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4)
{
  std::string::size_type v7 = a4;
  std::string::size_type v8 = a3;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  unint64_t v5 = v4[1];
  if (v5 >= v4[2])
  {
    uint64_t result = std::vector<ACFUErrorContainer>::__emplace_back_slow_path<std::string const&,long &,__CFError *&>(v4, a2, &v8, &v7);
  }
  else
  {
    std::allocator<ACFUErrorContainer>::construct[abi:ne180100]<ACFUErrorContainer,std::string const&,long &,__CFError *&>(v4 + 16, (std::string *)v4[1], a2, &v8, &v7);
    uint64_t result = v5 + 40;
    v4[1] = v5 + 40;
  }
  v4[1] = result;
  return result;
}

void sub_217ABFEC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL ACFUError::hasError(ACFUError *this)
{
  return *(void *)(*((void *)this + 1) + 8) != **((void **)this + 1);
}

const void *ACFUError::createAppendedDomain(const void **this, const __CFString *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 3, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, *this);
  CFArrayAppendValue(Mutable, a2);
  CFArrayRef Copy = CFArrayCreateCopy(v4, Mutable);
  if (*this)
  {
    CFRelease(*this);
    *this = 0;
  }
  *this = CFStringCreateByCombiningStrings(v4, Copy, @"::");
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  return *this;
}

void ACFUError::~ACFUError(void ***this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    CFRelease(v2);
    *this = 0;
  }
  std::unique_ptr<std::vector<ACFUErrorContainer>>::reset[abi:ne180100](this + 1, 0);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void std::unique_ptr<std::vector<ACFUErrorContainer>>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    unint64_t v3 = v2;
    std::vector<ACFUErrorContainer>::__destroy_vector::operator()[abi:ne180100](&v3);
    operator delete(v2);
  }
}

void std::vector<ACFUErrorContainer>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFAllocatorRef v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        ACFUErrorContainer::~ACFUErrorContainer((ACFUErrorContainer *)(v4 - 40));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<ACFUErrorContainer>::__emplace_back_slow_path<std::string const&,long &,__CFError *&>(uint64_t *a1, uint64_t a2, std::string::size_type *a3, std::string::size_type *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ACFUErrorContainer>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  uint64_t v15 = (std::string *)&v11[40 * v5];
  uint64_t v17 = &v11[40 * v10];
  std::allocator<ACFUErrorContainer>::construct[abi:ne180100]<ACFUErrorContainer,std::string const&,long &,__CFError *&>(a1 + 16, v15, a2, a3, a4);
  CFErrorRef v16 = &v15[1].__r_.__value_.__s.__data_[16];
  std::vector<ACFUErrorContainer>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ACFUErrorContainer>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_217AC01EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ACFUErrorContainer>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<ACFUErrorContainer>::construct[abi:ne180100]<ACFUErrorContainer,std::string const&,long &,__CFError *&>(int a1, std::string *this, uint64_t a3, std::string::size_type *a4, std::string::size_type *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  ACFUErrorContainer::ACFUErrorContainer(this, (long long *)&__p, *a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217AC0284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ACFUErrorContainer>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ACFUErrorContainer>,std::reverse_iterator<ACFUErrorContainer*>,std::reverse_iterator<ACFUErrorContainer*>,std::reverse_iterator<ACFUErrorContainer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ACFUErrorContainer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ACFUErrorContainer>,std::reverse_iterator<ACFUErrorContainer*>,std::reverse_iterator<ACFUErrorContainer*>,std::reverse_iterator<ACFUErrorContainer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a7 - 40;
    do
    {
      uint64_t v12 = (std::string *)(v11 + v10);
      uint64_t v13 = (const std::string::value_type **)(a3 + v10 - 40);
      if (*(char *)(a3 + v10 - 17) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v13, *(void *)(a3 + v10 - 32));
      }
      else
      {
        long long v14 = *(_OWORD *)v13;
        v12->__r_.__value_.__r.__words[2] = *(void *)(a3 + v10 - 24);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
      }
      *(_OWORD *)(v11 + v10 + 24) = *(_OWORD *)(a3 + v10 - 16);
      v10 -= 40;
    }
    while (a3 + v10 != a5);
  }
  return a6;
}

void sub_217AC0424(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 40)
    ACFUErrorContainer::~ACFUErrorContainer((ACFUErrorContainer *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<ACFUErrorContainer>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    ACFUErrorContainer::~ACFUErrorContainer((ACFUErrorContainer *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ACFULogging::initLog(ACFULogging *this, CFDictionaryRef theDict, void (*a3)(void *, const char *), void *a4)
{
  if (theDict)
  {
    CFStringRef Value = CFDictionaryGetValue(theDict, @"Options");
    if (Value
      && (uint64_t v9 = Value, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v9))
      && (CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v9, @"RestoreInternal")) != 0)
    {
      CFBooleanRef v12 = v11;
      CFTypeID v13 = CFGetTypeID(v11);
      int v14 = 2;
      if (v13 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue(v12) == 1) {
          int v14 = 3;
        }
        else {
          int v14 = 2;
        }
      }
    }
    else
    {
      int v14 = 2;
    }
    *((void *)this + 9) = a3;
    *((void *)this + 10) = a4;
    ACFUCommon::parseDebugArgs(theDict, (const __CFDictionary *)"logLevel", &v34);
    uint64_t v16 = v35;
    if (v35 == 4006)
    {
      ACFULogging::getLogInstance(v15);
      ACFULogging::handleMessage((uint64_t)&ACFULogging::getLogInstance(void)::inst, 3u, "%s::%s: Key: %s not found while parsing debugArgs, but this is not error\n", v17, v18, v19, v20, v21, (char)"ACFULogging");
LABEL_16:
      int v22 = v14;
      goto LABEL_17;
    }
    if (v35)
    {
      ACFULogging::getLogInstance(v15);
      ACFULogging::handleMessage((uint64_t)&ACFULogging::getLogInstance(void)::inst, 0, "%s::%s: Failed to parse debugArgs\n", v29, v30, v31, v32, v33, (char)"ACFULogging");
      return v16;
    }
    int v22 = v34;
    if (v34 >= 5)
    {
      ACFULogging::getLogInstance(v15);
      ACFULogging::handleMessage((uint64_t)&ACFULogging::getLogInstance(void)::inst, 3u, "%s::%s: Unexpected value: %u for Key: %s\n", v23, v24, v25, v26, v27, (char)"ACFULogging");
      goto LABEL_16;
    }
  }
  else
  {
    *((void *)this + 9) = a3;
    *((void *)this + 10) = a4;
    int v22 = 2;
  }
LABEL_17:
  uint64_t v16 = 0;
  *((_DWORD *)this + 22) = v22;
  return v16;
}

void *ACFULogging::getLogInstance(ACFULogging *this)
{
  {
    ACFULogging::ACFULogging((ACFULogging *)&ACFULogging::getLogInstance(void)::inst);
    __cxa_atexit((void (*)(void *))ACFULogging::~ACFULogging, &ACFULogging::getLogInstance(void)::inst, &dword_217A74000);
  }
  return &ACFULogging::getLogInstance(void)::inst;
}

void ACFULogging::handleMessage(uint64_t a1, unsigned int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(void *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 88) < (signed int)a2) {
      return;
    }
  }
  else if (!os_log_type_enabled(*(os_log_t *)(a1 + 3168), *(os_log_type_t *)(a1 + a2)))
  {
    return;
  }
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (vsnprintf((char *)(a1 + 92), 0xC00uLL, a3, &a9) >= 0xC01) {
    strcpy((char *)(a1 + 3099), "\n------ Internal buffer is too small, truncating bytes! ------\n");
  }
  ACFULogging::log((ACFULogging *)a1, *(os_log_type_t *)(a1 + a2), a1 + 92);
  std::mutex::unlock((std::mutex *)(a1 + 8));
}

void sub_217AC07A0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ACFULogging::ACFULogging(ACFULogging *this)
{
  *(_DWORD *)this = 17830144;
  *((unsigned char *)this + 4) = 2;
  *((void *)this + 1) = 850045863;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 2;
  bzero((char *)this + 92, 0xC00uLL);
  *((void *)this + 396) = 0;
  os_log_t v2 = os_log_create("com.apple.AppleConvergedFirmwareUpdater", "service");
  uint64_t v3 = (void *)*((void *)this + 396);
  *((void *)this + 396) = v2;
}

void ACFULogging::~ACFULogging(ACFULogging *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void ACFULogging::log(ACFULogging *this, os_log_type_t a2, uint64_t type)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = (void (*)(uint64_t, uint64_t))*((void *)this + 9);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 10);
    v4(v5, type);
  }
  else
  {
    uint64_t v7 = *((void *)this + 396);
    if (os_log_type_enabled(v7, a2))
    {
      int v8 = 136315138;
      uint64_t v9 = type;
      _os_log_impl(&dword_217A74000, v7, a2, "%s", (uint8_t *)&v8, 0xCu);
    }
  }
}

void ACFULogging::handleMessageBinary(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v8 = a3;
  uint64_t v10 = a1;
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 88) < (int)a3) {
      return;
    }
  }
  else if (!os_log_type_enabled(*(os_log_t *)(a1 + 3168), *(os_log_type_t *)(a1 + a3)))
  {
    return;
  }
  CFBooleanRef v11 = (std::mutex *)(v10 + 8);
  std::mutex::lock((std::mutex *)(v10 + 8));
  if (a5)
  {
    uint64_t v38 = (std::mutex *)(v10 + 8);
    unint64_t v17 = 0;
    unint64_t v18 = a5 - 224;
    uint64_t v19 = 0xFFFFFFFFLL;
    if (a5 <= 0x3E80)
    {
      unint64_t v18 = 0;
      char v20 = 0;
    }
    else
    {
      uint64_t v19 = 112;
      char v20 = a6;
    }
    char v44 = v20;
    uint64_t v43 = v19;
    unint64_t v39 = v19 + v18;
    uint64_t v40 = v10;
    unint64_t v41 = a5;
    do
    {
      char v21 = v44 ^ 1;
      if (v17 != v43) {
        char v21 = 1;
      }
      if ((v21 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0) {
          LOBYTE(v22) = (_BYTE)a2;
        }
        else {
          uint64_t v22 = *a2;
        }
        ACFULogging::handleMessageInternal((char *)v10, v8, "%s -- middle of buffer snipped -- \n", v12, v13, v14, v15, v16, v22);
        unint64_t v17 = v39;
      }
      *(_OWORD *)&v47[16] = 0u;
      long long v48 = 0u;
      if (a5 - v17 >= 0x10) {
        uint64_t v23 = 16;
      }
      else {
        uint64_t v23 = a5 - v17;
      }
      long long v46 = 0uLL;
      *(_OWORD *)uint64_t v47 = 0uLL;
      long long v45 = 0uLL;
      if (v23)
      {
        uint64_t v24 = v8;
        uint64_t v25 = (54 - 3 * v23) - 3;
        uint64_t v26 = v23;
        uint64_t v27 = (char *)&v45 + 1;
        uint64_t v28 = (unsigned __int8 *)(a4 + v17);
        do
        {
          unsigned int v29 = *v28++;
          char v30 = a0123456789abcd[v29 & 0xF];
          *(v27 - 1) = a0123456789abcd[(unint64_t)v29 >> 4];
          *uint64_t v27 = v30;
          v27[1] = 32;
          v27 += 3;
          v25 += 3;
          --v26;
        }
        while (v26);
        memset(v27 - 1, 32, 3 * (17 - v23));
        for (uint64_t i = 0; i != v23; ++i)
        {
          int v32 = *(unsigned __int8 *)(a4 + v17 + i);
          if ((v32 - 32) >= 0x5F) {
            LOBYTE(v32) = 46;
          }
          *((unsigned char *)&v45 + v25 + i) = v32;
        }
        int v33 = v25 + i;
        uint64_t v34 = v24;
        uint64_t v10 = v40;
        a5 = v41;
      }
      else
      {
        *(_DWORD *)&v47[15] = 538976288;
        *(void *)&long long v35 = 0x2020202020202020;
        *((void *)&v35 + 1) = 0x2020202020202020;
        long long v46 = v35;
        *(_OWORD *)uint64_t v47 = v35;
        uint64_t v34 = v8;
        int v33 = 51;
        long long v45 = v35;
      }
      strcpy((char *)&v45 + v33, "\r\n");
      if (*((char *)a2 + 23) >= 0) {
        LOBYTE(v36) = (_BYTE)a2;
      }
      else {
        uint64_t v36 = *a2;
      }
      ACFULogging::handleMessageInternal((char *)v10, v34, "%s %04zx  %s", v12, v13, v14, v15, v16, v36);
      uint64_t v8 = v34;
      v17 += 16;
    }
    while (v17 < a5);
    CFBooleanRef v11 = v38;
    if (v44)
    {
      if (*((char *)a2 + 23) >= 0) {
        LOBYTE(v37) = (_BYTE)a2;
      }
      else {
        uint64_t v37 = *a2;
      }
      ACFULogging::handleMessageInternal((char *)v10, v34, "%s (snipped)\n", v12, v13, v14, v15, v16, v37);
    }
  }
  std::mutex::unlock(v11);
}

void sub_217AC0C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13)
{
}

void ACFULogging::handleMessageInternal(char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = (uint64_t)(a1 + 92);
  if (vsnprintf(a1 + 92, 0xC00uLL, a3, &a9) >= 0xC01) {
    strcpy(a1 + 3099, "\n------ Internal buffer is too small, truncating bytes! ------\n");
  }
  ACFULogging::log((ACFULogging *)a1, (os_log_type_t)a1[a2], v11);
}

void ACFULogging::handleMessageCFType(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v28 = 0;
  if (*(void *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 88) < a3) {
      return;
    }
  }
  else if (!os_log_type_enabled(*(os_log_t *)(a1 + 3168), *(os_log_type_t *)(a1 + a3)))
  {
    return;
  }
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (a5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (uint64_t *)*a2;
    }
    CFStringRef v16 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%s: %s\n %@\n", v15, a4, a5);
    CFStringRef v17 = v16;
    if (v16)
    {
      ACFUCommon::stringFromCFString(v16, &v25);
      uint64_t v28 = v26;
      *(_OWORD *)std::string __p = v25;
      if (SHIBYTE(v26) < 0)
      {
        if (__p[1]) {
          LOBYTE(v23) = __p[0];
        }
        else {
          uint64_t v23 = (void **)"UNDEF";
        }
      }
      else
      {
        uint64_t v23 = __p;
        if (!HIBYTE(v26)) {
          uint64_t v23 = (void **)"UNDEF";
        }
      }
      ACFULogging::handleMessageInternal((char *)a1, a3, "%s", v18, v19, v20, v21, v22, (char)v23);
      CFRelease(v17);
      goto LABEL_18;
    }
    uint64_t v24 = "%s::%s: failed to format CFString\n";
  }
  else
  {
    uint64_t v24 = "%s::%s: CFType to be printed is NULL\n";
  }
  ACFULogging::handleMessageInternal((char *)a1, 2, v24, v10, v11, v12, v13, v14, (char)"ACFULogging");
LABEL_18:
  std::mutex::unlock((std::mutex *)(a1 + 8));
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
}

void sub_217AC0E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex::unlock(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ACFUFTABFile::create(const __CFData *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, ACFUFile **a4@<X8>)
{
  uint64_t v8 = (ACFUFile *)operator new(0x60uLL);
  ACFUFile::ACFUFile(v8);
  *(void *)uint64_t v8 = &unk_26C808208;
  *((void *)v8 + 7) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 5) = (char *)v8 + 48;
  *((_DWORD *)v8 + 16) = 0;
  *((void *)v8 + 11) = 0;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 9) = (char *)v8 + 80;
  if ((a2 & 2) != 0)
  {
    ACFUFTABFile::~ACFUFTABFile(v8);
    operator delete(v34);
    uint64_t v36 = "%s::%s: function does not support memory optimization flow\n";
LABEL_16:
    Loguint64_t Instance = ACFULogging::getLogInstance(v35);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v36, v38, v39, v40, v41, v42, (char)"ACFUFTABFile");
    uint64_t v8 = 0;
LABEL_12:
    *a4 = v8;
    return;
  }
  uint64_t v9 = (ACFULogging *)ACFUFTABFile::init(v8, a1);
  if ((v9 & 1) == 0)
  {
    long long v35 = (ACFULogging *)(*(uint64_t (**)(ACFUFile *))(*(void *)v8 + 56))(v8);
    uint64_t v36 = "%s::%s: failed to open file\n";
    goto LABEL_16;
  }
  if (a3 == 0xFFFF)
  {
LABEL_9:
    if (a2 >= 3)
    {
      uint64_t v19 = ACFULogging::getLogInstance(v9);
      long long v25 = "%s::%s: invalid optimization mask\n";
      unsigned int v26 = 2;
    }
    else
    {
      *((_DWORD *)v8 + 16) = a2;
      uint64_t v19 = ACFULogging::getLogInstance(v9);
      long long v25 = "%s::%s: Object initialized!\n";
      unsigned int v26 = 4;
    }
    ACFULogging::handleMessage((uint64_t)v19, v26, v25, v20, v21, v22, v23, v24, (char)"ACFUFTABFile");
    goto LABEL_12;
  }
  ACFUFTABFile::embeddedFTABFilenamesForChipRevision((ACFUFTABFile *)a3, (uint64_t)v43);
  uint64_t v11 = v43[0];
  uint64_t v12 = v43[1];
  while (1)
  {
    if (v11 == v12)
    {
      uint64_t v13 = ACFULogging::getLogInstance(v10);
      ACFULogging::handleMessage((uint64_t)v13, 4u, "%s::%s: Didn't find a matching embedded ftab\n", v14, v15, v16, v17, v18, (char)"ACFUFTABFile");
      char v44 = (void **)v43;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
      goto LABEL_9;
    }
    uint64_t v10 = (ACFULogging *)(*(uint64_t (**)(ACFUFile *, uint64_t))(*(void *)v8 + 16))(v8, v11);
    if (v10) {
      break;
    }
    v11 += 24;
  }
  uint64_t v27 = ACFULogging::getLogInstance(v10);
  ACFULogging::handleMessage((uint64_t)v27, 0, "%s::%s: Using embedded ftab '%s'\n", v28, v29, v30, v31, v32, (char)"ACFUFTABFile");
  uint64_t v33 = (**(uint64_t (***)(void *, uint64_t))v8)(v8, v11);
  ACFUFTABFile::create(v33, a2, 0xFFFFLL);
  char v44 = (void **)v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
  (*(void (**)(ACFUFile *))(*(void *)v8 + 56))(v8);
}

void sub_217AC113C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 56))(v1);
  _Unwind_Resume(a1);
}

void ACFUFTABFile::embeddedFTABFilenamesForChipRevision(ACFUFTABFile *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unsigned int v3 = this >> 4;
  if (this >= 0x40)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    long long v48 = "%s::%s: Chip major revision seems unreasonable: %d\n";
LABEL_32:
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v48, v43, v44, v45, v46, v47, (char)"ACFUFTABFile");
    return;
  }
  if ((this & 0xFu) >= 6)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    long long v48 = "%s::%s: Chip minor revision seems unreasonable: %d\n";
    goto LABEL_32;
  }
  CFAllocatorRef v4 = (ACFULogging *)snprintf(__str, 5uLL, "_%c%cf", v3 + 97, this & 0xF | 0x30u);
  uint64_t v5 = ACFULogging::getLogInstance(v4);
  ACFULogging::handleMessage((uint64_t)v5, 4u, "%s::%s: %s\n", v6, v7, v8, v9, v10, (char)"ACFUFTABFile");
  std::string::basic_string[abi:ne180100]<0>(__p, __str);
  unint64_t v11 = *(void *)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 8);
  if (v12 >= v11)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a2) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a2) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v17) {
      uint64_t v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = v18 + v14;
    __v.__first_ = v18;
    __v.__begin_ = v19;
    __v.__end_cap_.__value_ = &v18[v17];
    long long v20 = *(_OWORD *)__p;
    v19->__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    __p[1] = 0;
    std::string::size_type v50 = 0;
    __p[0] = 0;
    __v.__end_ = v19 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v21 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v22 = SHIBYTE(v50);
    *(void *)(a2 + 8) = v21;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v13 = *(_OWORD *)__p;
    *(void *)(v12 + 16) = v50;
    *(_OWORD *)unint64_t v12 = v13;
    *(void *)(a2 + 8) = v12 + 24;
  }
  uint64_t v23 = (ACFULogging *)snprintf(__str, 5uLL, "_%cxf", v3 + 97);
  uint64_t v24 = ACFULogging::getLogInstance(v23);
  ACFULogging::handleMessage((uint64_t)v24, 4u, "%s::%s: %s\n", v25, v26, v27, v28, v29, (char)"ACFUFTABFile");
  std::string::basic_string[abi:ne180100]<0>(__p, __str);
  unint64_t v31 = *(void *)(a2 + 8);
  unint64_t v30 = *(void *)(a2 + 16);
  if (v31 >= v30)
  {
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *(void *)a2) >> 3);
    unint64_t v34 = v33 + 1;
    if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(void *)a2) >> 3);
    if (2 * v35 > v34) {
      unint64_t v34 = 2 * v35;
    }
    if (v35 >= 0x555555555555555) {
      unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v36 = v34;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v36) {
      uint64_t v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v36);
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = v37 + v33;
    __v.__first_ = v37;
    __v.__begin_ = v38;
    __v.__end_cap_.__value_ = &v37[v36];
    long long v39 = *(_OWORD *)__p;
    v38->__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
    __p[1] = 0;
    std::string::size_type v50 = 0;
    __p[0] = 0;
    __v.__end_ = v38 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v40 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v41 = SHIBYTE(v50);
    *(void *)(a2 + 8) = v40;
    if (v41 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v32 = *(_OWORD *)__p;
    *(void *)(v31 + 16) = v50;
    *(_OWORD *)unint64_t v31 = v32;
    *(void *)(a2 + 8) = v31 + 24;
  }
}

void sub_217AC14E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, std::__split_buffer<std::string> *a11, void *__pa, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a17 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t ACFUFTABFile::setManifest(ACFUDataContainer **this, const __CFData *a2)
{
  return ACFUFTABFile::setManifestOnData(this, a2, 0);
}

uint64_t ACFUFTABFile::setManifestOnData(ACFUDataContainer **this, CFDataRef theData, __CFData **a3)
{
  uint64_t v5 = (ACFUFTABFile *)this;
  if (!a3)
  {
    uint64_t v6 = this[1];
    if (!v6)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data must be valid or firmware data must be provided\n", v74, v75, v76, v77, v78, (char)"ACFUFTABFile");
      return 0;
    }
    this = (ACFUDataContainer **)ACFUDataContainer::isOptimized(v6);
    if (this)
    {
      uint64_t v79 = ACFULogging::getLogInstance((ACFULogging *)this);
      ACFULogging::handleMessage((uint64_t)v79, 2u, "%s::%s: function cannot directly manipulate file data with optimized flow\n", v80, v81, v82, v83, v84, (char)"ACFUFTABFile");
      return 0;
    }
  }
  if (!theData)
  {
    uint64_t v43 = ACFULogging::getLogInstance((ACFULogging *)this);
    ACFULogging::handleMessage((uint64_t)v43, 2u, "%s::%s: no manifest input provided\n", v44, v45, v46, v47, v48, (char)"ACFUFTABFile");
    return 0;
  }
  size_t Length = (ACFULogging *)CFDataGetLength(theData);
  if ((uint64_t)Length <= 0)
  {
    uint64_t v49 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v49, 2u, "%s::%s: manifest data has no bytes\n", v50, v51, v52, v53, v54, (char)"ACFUFTABFile");
    return 0;
  }
  if (a3)
  {
    if (!*a3)
    {
      uint64_t v55 = ACFULogging::getLogInstance(Length);
      ACFULogging::handleMessage((uint64_t)v55, 2u, "%s::%s: firmware data container is invalid\n", v56, v57, v58, v59, v60, (char)"ACFUFTABFile");
      return 0;
    }
    isValidFileCFDataRef Data = ACFUFTABFile::isValidFileData(v5, *a3, 0);
    if ((isValidFileData & 1) == 0)
    {
      uint64_t v61 = ACFULogging::getLogInstance((ACFULogging *)isValidFileData);
      ACFULogging::handleMessage((uint64_t)v61, 2u, "%s::%s: firmware data is invalid and does not meet ftab standards\n", v62, v63, v64, v65, v66, (char)"ACFUFTABFile");
      return 0;
    }
    if (*((_DWORD *)v5 + 16) != 1)
    {
      CFDataRef v9 = *a3;
      if (*a3) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
  }
  else if (*((_DWORD *)v5 + 16) != 1)
  {
    isValidFileCFDataRef Data = ACFUDataContainer::getData(*((ACFUDataContainer **)v5 + 1));
    CFDataRef v9 = (const __CFData *)isValidFileData;
    if (isValidFileData)
    {
LABEL_11:
      int v10 = *((_DWORD *)CFDataGetBytePtr(v9) + 10);
      CFIndex v11 = CFDataGetLength(theData);
      BytePtr = (UInt8 *)CFDataGetBytePtr(v9);
      if (*((_DWORD *)BytePtr + 5))
      {
        long long v13 = ACFULogging::getLogInstance((ACFULogging *)BytePtr);
        ACFULogging::handleMessage((uint64_t)v13, 0, "%s::%s: manifest existing in FTAB is being deleted\n", v14, v15, v16, v17, v18, (char)"ACFUFTABFile");
        ACFUFTABFile::removeManifestPadding(v19, v9);
        CFIndex v20 = *((unsigned int *)CFDataGetBytePtr(v9) + 4);
        v86.CFIndex length = *((unsigned int *)CFDataGetBytePtr(v9) + 5);
        v86.CFIndex location = v20;
        CFDataDeleteBytes(v9, v86);
        *((_DWORD *)CFDataGetBytePtr(v9) + 4) = 0;
        *((_DWORD *)CFDataGetBytePtr(v9) + 5) = 0;
      }
      CFIndex v21 = CFDataGetLength(v9);
      unsigned int v22 = v10 - 1;
      int v23 = *(_DWORD *)&CFDataGetBytePtr(v9)[16 * v22 + 52];
      uint64_t v24 = (ACFULogging *)CFDataGetBytePtr(v9);
      uint64_t v25 = ((*((_DWORD *)v24 + 4 * v22 + 14) + v23) + 3) & 0x1FFFFFFFCLL;
      BOOL v26 = __OFSUB__(v25, v21);
      CFIndex v27 = v25 - v21;
      if (v27 < 0 != v26)
      {
        uint64_t v67 = ACFULogging::getLogInstance(v24);
        ACFULogging::handleMessage((uint64_t)v67, 2u, "%s::%s: something went wrong, extra bytes in file\n", v68, v69, v70, v71, v72, (char)"ACFUFTABFile");
      }
      else
      {
        if (!((v27 < 0) ^ v26 | (v27 == 0)))
        {
          uint64_t v28 = ACFULogging::getLogInstance(v24);
          ACFULogging::handleMessage((uint64_t)v28, 0, "%s::%s: padding %ld byte(s) at the end of ftab\n", v29, v30, v31, v32, v33, (char)"ACFUFTABFile");
          CFDataIncreaseLength(v9, v27);
        }
        *((_DWORD *)CFDataGetBytePtr(v9) + 5) = v11;
        *((_DWORD *)CFDataGetBytePtr(v9) + 4) = v25;
        unint64_t v34 = CFDataGetBytePtr(theData);
        CFDataAppendBytes(v9, v34, v11);
        if (a3)
        {
          CFDataRef v35 = *a3;
          return ACFUFTABFile::isValidFileData(v5, v35, 0);
        }
        if ((*(unsigned int (**)(ACFUFTABFile *))(*(void *)v5 + 88))(v5))
        {
          return ACFUFTABFile::isCacheValid(v5);
        }
      }
      return 0;
    }
LABEL_25:
    uint64_t v37 = ACFULogging::getLogInstance((ACFULogging *)isValidFileData);
    ACFULogging::handleMessage((uint64_t)v37, 2u, "%s::%s: could not obtain file data\n", v38, v39, v40, v41, v42, (char)"ACFUFTABFile");
    return 0;
  }

  return ACFUFTABFile::setManifestToTopOnData(v5, theData, 0);
}

uint64_t ACFUFTABFile::isValidFileData(ACFUFTABFile *this, CFDataRef theData, char a3)
{
  CFDataRef v6 = theData;
  if (!theData)
  {
    uint64_t v8 = (ACFUDataContainer **)((char *)this + 8);
    isOptimized = (ACFUDataContainer *)*((void *)this + 1);
    if (!isOptimized)
    {
      CFDataRef v6 = 0;
      uint64_t v108 = "%s::%s: no file data?!\n";
      goto LABEL_69;
    }
    isOptimized = (ACFUDataContainer *)ACFUDataContainer::isOptimized(isOptimized);
    if (isOptimized)
    {
      if (a3)
      {
        CFDataRef v6 = 0;
        uint64_t v108 = "%s::%s: header only validation unsupported with optimized data\n";
        goto LABEL_69;
      }
      isOptimized = ACFUDataContainer::copyData(*v8, 0, 0x30uLL);
      CFDataRef v6 = isOptimized;
      if (isOptimized)
      {
        isOptimized = (ACFUDataContainer *)CFDataGetBytePtr(isOptimized);
        if (!isOptimized)
        {
LABEL_68:
          uint64_t v108 = "%s::%s: failed to get byte pointer\n";
          goto LABEL_69;
        }
        CFDataRef v9 = (const UInt8 *)isOptimized;
        isOptimized = ACFUDataContainer::copyData(*v8, 16 * *((_DWORD *)isOptimized + 10) + 32, 0x10uLL);
        if (isOptimized)
        {
          int v10 = isOptimized;
          BytePtr = CFDataGetBytePtr(isOptimized);
          if (BytePtr)
          {
            unint64_t v12 = &v9[*((unsigned int *)BytePtr + 1) + *((unsigned int *)BytePtr + 2)];
            CFRelease(v10);
            uint64_t v14 = v9;
            goto LABEL_12;
          }
          CFRelease(v10);
          goto LABEL_68;
        }
        uint64_t v108 = "%s::%s: failed to aquire ftab file header\n";
LABEL_69:
        Loguint64_t Instance = ACFULogging::getLogInstance(isOptimized);
        ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v108, v110, v111, v112, v113, v114, (char)"ACFUFTABFile");
        std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](v8, 0);
        goto LABEL_61;
      }
LABEL_64:
      uint64_t v108 = "%s::%s: failed to copy ftab header\n";
      goto LABEL_69;
    }
    isOptimized = ACFUDataContainer::copyData(*v8);
    CFDataRef v6 = isOptimized;
    if (!isOptimized) {
      goto LABEL_64;
    }
  }
  CFDataRef v9 = CFDataGetBytePtr(v6);
  uint64_t v14 = CFDataGetBytePtr(v6);
  size_t Length = (ACFULogging *)CFDataGetLength(v6);
  unint64_t v12 = &v14[(void)Length];
LABEL_12:
  if ((unint64_t)(v12 - v14) <= 0x30)
  {
    uint64_t v72 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v72, 2u, "%s::%s: file is smaller than the ftab header size\n", v73, v74, v75, v76, v77, (char)"ACFUFTABFile");
    goto LABEL_58;
  }
  uint64_t v15 = *((unsigned int *)v9 + 10);
  unint64_t v16 = (unint64_t)&v14[16 * v15 + 48];
  if (v16 > (unint64_t)v12)
  {
    uint64_t v78 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v78, 2u, "%s::%s: header is bigger than the file\n", v79, v80, v81, v82, v83, (char)"ACFUFTABFile");
    goto LABEL_58;
  }
  uint64_t v17 = *((unsigned int *)v9 + 5);
  uint64_t v18 = &v14[*((unsigned int *)v9 + 4)];
  if ((a3 & 1) == 0 && &v18[v17] > v12)
  {
    uint64_t v84 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v84, 2u, "%s::%s: manifest present beyond the bounds of the file data\n", v85, v86, v87, v88, v89, (char)"ACFUFTABFile");
    goto LABEL_58;
  }
  if (*((void *)v9 + 4) != 0x62617466736F6B72)
  {
    uint64_t v90 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v90, 2u, "%s::%s: invalid FTAB file\n", v91, v92, v93, v94, v95, (char)"ACFUFTABFile");
    goto LABEL_58;
  }
  if ((v15 - 1) >= 0x4F)
  {
    CFDictionaryRef v96 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v96, 2u, "%s::%s: too many files specified or there are no files. Limit is %d. Num Files: %d\n", v97, v98, v99, v100, v101, (char)"ACFUFTABFile");
    goto LABEL_58;
  }
  if (v17 && (unint64_t)v18 < v16)
  {
    std::string::size_type v102 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v102, 2u, "%s::%s: manifest present in space allocated for header\n", v103, v104, v105, v106, v107, (char)"ACFUFTABFile");
LABEL_58:
    uint64_t v30 = 0;
    if (theData) {
      return 0;
    }
    goto LABEL_59;
  }
  CFDataRef cf = v6;
  if (theData)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    while (1)
    {
      uint64_t v21 = *(unsigned int *)&CFDataGetBytePtr(theData)[v19 + 52];
      unsigned int v22 = (ACFULogging *)CFDataGetBytePtr(theData);
      if ((a3 & 1) == 0)
      {
        int v23 = &v14[v21 + *(unsigned int *)((char *)v22 + v19 + 56)];
        if (v23 > v12 || (unint64_t)v23 < v16)
        {
          uint64_t v60 = ACFULogging::getLogInstance(v22);
          ACFULogging::handleMessage((uint64_t)v60, 2u, "%s::%s: Payload is out of valid range\n", v61, v62, v63, v64, v65, (char)"ACFUFTABFile");
          goto LABEL_49;
        }
      }
      uint64_t v25 = (ACFULogging *)CFDataGetBytePtr(theData);
      if ((unint64_t)&v14[*(unsigned int *)((char *)v25 + v19 + 52)] < v16) {
        break;
      }
      ++v20;
      v19 += 16;
      if (v20 >= *((unsigned int *)v9 + 10)) {
        return 1;
      }
    }
    unint64_t v36 = ACFULogging::getLogInstance(v25);
    ACFULogging::handleMessage((uint64_t)v36, 2u, "%s::%s: File indicated is within header space\n", v37, v38, v39, v40, v41, (char)"ACFUFTABFile");
LABEL_49:
    uint64_t v30 = 0;
LABEL_50:
    CFDataRef v6 = cf;
    if (theData) {
      return 0;
    }
LABEL_59:
    std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100]((ACFUDataContainer **)this + 1, 0);
    if (v30) {
      CFRelease(v30);
    }
LABEL_61:
    uint64_t v26 = 0;
    if (!v6) {
      return v26;
    }
    goto LABEL_43;
  }
  unsigned int v27 = 0;
  unsigned int v28 = 48;
  do
  {
    uint64_t v29 = ACFUDataContainer::copyData(*((ACFUDataContainer **)this + 1), v28, 0x10uLL);
    uint64_t v30 = v29;
    if (!v29)
    {
      uint64_t v42 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v42, 2u, "%s::%s: failed to acquire ftab file header\n", v43, v44, v45, v46, v47, (char)"ACFUFTABFile");
      goto LABEL_50;
    }
    uint64_t v31 = (unsigned int *)CFDataGetBytePtr(v29);
    if (!v31)
    {
      uint64_t v48 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v48, 2u, "%s::%s: failed to acquire cf data byte pointer\n", v49, v50, v51, v52, v53, (char)"ACFUFTABFile");
      goto LABEL_50;
    }
    uint64_t v32 = &v14[v31[1]];
    if ((a3 & 1) == 0)
    {
      unint64_t v33 = (unint64_t)&v32[v31[2]];
      if (v33 > (unint64_t)v12 || v33 < v16)
      {
        uint64_t v66 = ACFULogging::getLogInstance((ACFULogging *)v31);
        ACFULogging::handleMessage((uint64_t)v66, 2u, "%s::%s: payload is out of valid range\n", v67, v68, v69, v70, v71, (char)"ACFUFTABFile");
        goto LABEL_50;
      }
    }
    if ((unint64_t)v32 < v16)
    {
      uint64_t v54 = ACFULogging::getLogInstance((ACFULogging *)v31);
      ACFULogging::handleMessage((uint64_t)v54, 2u, "%s::%s: file indicated is within header space\n", v55, v56, v57, v58, v59, (char)"ACFUFTABFile");
      goto LABEL_50;
    }
    CFRelease(v30);
    ++v27;
    v28 += 16;
  }
  while (v27 < *((_DWORD *)v9 + 10));
  uint64_t v26 = 1;
  CFDataRef v6 = cf;
  if (!cf) {
    return v26;
  }
LABEL_43:
  CFRelease(v6);
  return v26;
}

uint64_t ACFUFTABFile::setManifestToTopOnData(ACFUFTABFile *this, const __CFData *a2, __CFData **a3)
{
  if (!a3)
  {
    uint64_t v70 = (ACFUDataContainer *)*((void *)this + 1);
    if (!v70)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data must be valid or firmware data must be provided\n", v125, v126, v127, v128, v129, (char)"ACFUFTABFile");
      return 0;
    }
    isOptimized = (ACFULogging *)ACFUDataContainer::isOptimized(v70);
    if (isOptimized)
    {
      uint64_t v130 = ACFULogging::getLogInstance(isOptimized);
      ACFULogging::handleMessage((uint64_t)v130, 2u, "%s::%s: function cannot directly manipulate file data with optimized flow\n", v131, v132, v133, v134, v135, (char)"ACFUFTABFile");
      return 0;
    }
    uint64_t Data = ACFUDataContainer::getData(*((ACFUDataContainer **)this + 1));
    CFDataRef v7 = (const __CFData *)Data;
    if (Data) {
      goto LABEL_5;
    }
LABEL_25:
    uint64_t v72 = ACFULogging::getLogInstance((ACFULogging *)Data);
    ACFULogging::handleMessage((uint64_t)v72, 2u, "%s::%s: could not obtain file data\n", v73, v74, v75, v76, v77, (char)"ACFUFTABFile");
    return 0;
  }
  if (!*a3)
  {
    uint64_t v105 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v105, 2u, "%s::%s: firmware data container is invalid\n", v106, v107, v108, v109, v110, (char)"ACFUFTABFile");
    return 0;
  }
  uint64_t Data = ACFUFTABFile::isValidFileData(this, *a3, 0);
  if ((Data & 1) == 0)
  {
    uint64_t v111 = ACFULogging::getLogInstance((ACFULogging *)Data);
    ACFULogging::handleMessage((uint64_t)v111, 2u, "%s::%s: firmware data is invalid and does not meet ftab standards\n", v112, v113, v114, v115, v116, (char)"ACFUFTABFile");
    return 0;
  }
  CFDataRef v7 = *a3;
  if (!*a3) {
    goto LABEL_25;
  }
LABEL_5:
  uint64_t v8 = *((unsigned int *)CFDataGetBytePtr(v7) + 10);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v7);
  if (*((_DWORD *)BytePtr + 5))
  {
    int v10 = ACFULogging::getLogInstance((ACFULogging *)BytePtr);
    ACFULogging::handleMessage((uint64_t)v10, 0, "%s::%s: manifest existing in FTAB is being deleted\n", v11, v12, v13, v14, v15, (char)"ACFUFTABFile");
    int v17 = ACFUFTABFile::removeManifestPadding(v16, v7);
    CFIndex v18 = *((unsigned int *)CFDataGetBytePtr(v7) + 4);
    v149.CFIndex length = *((unsigned int *)CFDataGetBytePtr(v7) + 5);
    v149.CFIndex location = v18;
    CFDataDeleteBytes(v7, v149);
    if (v17 && v8)
    {
      uint64_t v19 = 0;
      do
      {
        int v20 = *((_DWORD *)CFDataGetBytePtr(v7) + 5);
        uint64_t v21 = CFDataGetBytePtr(v7);
        *(_DWORD *)&v21[v19 + 52] -= v20;
        v19 += 16;
      }
      while (16 * v8 != v19);
    }
    *((_DWORD *)CFDataGetBytePtr(v7) + 4) = 0;
    *((_DWORD *)CFDataGetBytePtr(v7) + 5) = 0;
  }
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (!Mutable)
  {
    uint64_t v99 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v99, 2u, "%s::%s: could not allocate data\n", v100, v101, v102, v103, v104, (char)"ACFUFTABFile");
    return 0;
  }
  uint64_t v146 = Mutable;
  uint64_t v142 = CFDataGetBytePtr(v7);
  uint64_t v138 = *((unsigned int *)CFDataGetBytePtr(v7) + 13);
  uint64_t v144 = *(unsigned int *)&CFDataGetBytePtr(v7)[16 * (v8 - 1) + 52];
  uint64_t v143 = *(unsigned int *)&CFDataGetBytePtr(v7)[16 * (v8 - 1) + 56];
  int v23 = *((_DWORD *)CFDataGetBytePtr(v7) + 13);
  unsigned int v24 = ((v23 + 3) & 0xFFFFFFFC) - v23;
  unsigned int v25 = v24 + *((_DWORD *)CFDataGetBytePtr(v7) + 13);
  *((_DWORD *)CFDataGetBytePtr(v7) + 4) = v25;
  CFDataRef theData = a2;
  int Length = CFDataGetLength(a2);
  unsigned int v27 = (UInt8 *)CFDataGetBytePtr(v7);
  *((_DWORD *)v27 + 5) = Length;
  unsigned int v28 = ACFULogging::getLogInstance((ACFULogging *)v27);
  CFDataGetBytePtr(v7);
  CFDataGetBytePtr(v7);
  ACFULogging::handleMessage((uint64_t)v28, 0, "%s::%s: manifestOffset: %u, manifestSize: %u\n", v29, v30, v31, v32, v33, (char)"ACFUFTABFile");
  int v34 = *((_DWORD *)CFDataGetBytePtr(v7) + 4);
  CFDataRef v35 = (UInt8 *)CFDataGetBytePtr(v7);
  int v36 = *((_DWORD *)v35 + 5) + v34;
  CFIndex v37 = v24;
  CFIndex v38 = ((v36 + 3) & 0xFFFFFFFC) - v36;
  uint64_t v39 = ACFULogging::getLogInstance((ACFULogging *)v35);
  int v140 = v23;
  unsigned int v141 = (v23 + 3) & 0xFFFFFFFC;
  ACFULogging::handleMessage((uint64_t)v39, 0, "%s::%s: startOfManifestUnaligned: %ld, startOfManifestAligned: %ld, paddingBeforeManifestStart: %u\n", v40, v41, v42, v43, v44, (char)"ACFUFTABFile");
  uint64_t v46 = ACFULogging::getLogInstance(v45);
  unsigned int v139 = (v36 + 3) & 0xFFFFFFFC;
  int v47 = v36;
  ACFULogging::handleMessage((uint64_t)v46, 0, "%s::%s: endOfManifestUnaligned: %ld, endOfManifestAligned: %ld, paddingAfterManifestEnd: %u\n", v48, v49, v50, v51, v52, (char)"ACFUFTABFile");
  CFIndex v137 = v37;
  if (v8)
  {
    uint64_t v53 = 0;
    CFIndex v136 = ((v36 + 3) & 0xFFFFFFFC) - v36;
    CFIndex v54 = 16 * v8;
    while (1)
    {
      int v55 = *((_DWORD *)CFDataGetBytePtr(v7) + 5);
      uint64_t v56 = CFDataGetBytePtr(v7);
      *(_DWORD *)&v56[v53 + 52] += v136 + v37 + v55;
      if (!a3)
      {
        uint64_t v57 = CFDataGetBytePtr(v7);
        char v148 = 4;
        LODWORD(v147) = *(_DWORD *)&v57[v53 + 48];
        BYTE4(v147) = 0;
        uint64_t v58 = CFDataGetBytePtr(v7);
        uint64_t updated = ACFUFTABFile::updateCache((uint64_t)this, (uint64_t)&v147, *(_DWORD *)&v58[v53 + 52], 0);
        int v60 = updated;
        if ((updated & 1) == 0)
        {
          uint64_t v61 = ACFULogging::getLogInstance((ACFULogging *)updated);
          ACFULogging::handleMessage((uint64_t)v61, 2u, "%s::%s: failed to update cache\n", v62, v63, v64, v65, v66, (char)"ACFUFTABFile");
        }
        if (v148 < 0) {
          operator delete(v147);
        }
        if (!v60) {
          break;
        }
      }
      v53 += 16;
      if (v54 == v53)
      {
        uint64_t v67 = (const __CFString ***)this;
        uint64_t v68 = v146;
        uint64_t v69 = v138;
        CFIndex v38 = v136;
        goto LABEL_27;
      }
    }
    uint64_t v98 = 0;
    uint64_t v68 = v146;
    goto LABEL_46;
  }
  CFIndex v54 = 0;
  uint64_t v67 = (const __CFString ***)this;
  uint64_t v68 = v146;
  uint64_t v69 = v138;
LABEL_27:
  uint64_t v78 = CFDataGetBytePtr(v7);
  CFDataAppendBytes(v68, v78, 48);
  uint64_t v79 = CFDataGetBytePtr(v7);
  CFDataAppendBytes(v68, v79 + 48, v54);
  if (v141 != v140)
  {
    uint64_t v81 = ACFULogging::getLogInstance(v80);
    ACFULogging::handleMessage((uint64_t)v81, 0, "%s::%s: paddingBeforeManifestStart %u bytes\n", v82, v83, v84, v85, v86, (char)"ACFUFTABFile");
    CFDataIncreaseLength(v68, v137);
  }
  uint64_t v87 = CFDataGetBytePtr(theData);
  uint64_t v88 = CFDataGetBytePtr(v7);
  CFDataAppendBytes(v68, v87, *((unsigned int *)v88 + 5));
  if (v139 != v47)
  {
    uint64_t v90 = ACFULogging::getLogInstance(v89);
    ACFULogging::handleMessage((uint64_t)v90, 0, "%s::%s: paddingAfterManifestEnd %u bytes\n", v91, v92, v93, v94, v95, (char)"ACFUFTABFile");
    CFDataIncreaseLength(v68, v38);
  }
  CFDataAppendBytes(v68, &v142[v69], v144 - v69 + v143);
  if (!a3)
  {
    if (ACFUDataContainer::setData(v67[1], v68)
      && ((unsigned int (*)(const __CFString ***))(*v67)[11])(v67))
    {
      uint64_t isCacheValid = ACFUFTABFile::isCacheValid((ACFUFTABFile *)v67);
      goto LABEL_36;
    }
LABEL_45:
    uint64_t v98 = 0;
    goto LABEL_46;
  }
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  CFDictionaryRef v96 = (__CFData *)AMSupportSafeRetain();
  *a3 = v96;
  if (!v96)
  {
    uint64_t v117 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v117, 2u, "%s::%s: failed obtain new file data\n", v118, v119, v120, v121, v122, (char)"ACFUFTABFile");
    goto LABEL_45;
  }
  uint64_t isCacheValid = ACFUFTABFile::isValidFileData((ACFUFTABFile *)v67, v96, 0);
LABEL_36:
  uint64_t v98 = isCacheValid;
LABEL_46:
  CFRelease(v68);
  return v98;
}

void sub_217AC24E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFUFTABFile::removeManifestPadding(UInt8 *this, CFDataRef theData)
{
  if (theData && (int v3 = *((_DWORD *)CFDataGetBytePtr(theData) + 5), this = (UInt8 *)CFDataGetBytePtr(theData), v3))
  {
    unsigned int v4 = *((_DWORD *)this + 4);
    if (v4 >= *((_DWORD *)CFDataGetBytePtr(theData) + 13))
    {
      unsigned int v17 = *((_DWORD *)CFDataGetBytePtr(theData) + 10) - 1;
      int v18 = *(_DWORD *)&CFDataGetBytePtr(theData)[16 * v17 + 52];
      BytePtr = (ACFULogging *)CFDataGetBytePtr(theData);
      CFIndex v20 = (*((_DWORD *)BytePtr + 4 * v17 + 14) + v18);
      Loguint64_t Instance = ACFULogging::getLogInstance(BytePtr);
      ACFULogging::handleMessage((uint64_t)LogInstance, 0, "%s::%s: manifest at the end - startOfManifest: %u, endOfFiles: %u, padding: %u\n", v22, v23, v24, v25, v26, (char)"ACFUFTABFile");
      v35.CFIndex location = v20;
      v35.CFIndex length = v4 - v20;
      CFDataDeleteBytes(theData, v35);
      unsigned int v27 = CFDataGetBytePtr(theData);
      uint64_t result = 0;
      *((_DWORD *)v27 + 4) = v20;
    }
    else
    {
      uint64_t v5 = (UInt8 *)CFDataGetBytePtr(theData);
      unsigned int v6 = *((_DWORD *)v5 + 13) - (v4 + v3);
      CFDataRef v7 = ACFULogging::getLogInstance((ACFULogging *)v5);
      ACFULogging::handleMessage((uint64_t)v7, 0, "%s::%s: manifest is at top - endOfManifest: %u, startOfFiles: %u, paddingAfterManifestEnd: %u\n", v8, v9, v10, v11, v12, (char)"ACFUFTABFile");
      v34.CFIndex location = (*((_DWORD *)CFDataGetBytePtr(theData) + 4) + v3);
      v34.CFIndex length = v6;
      CFDataDeleteBytes(theData, v34);
      if (*((_DWORD *)CFDataGetBytePtr(theData) + 10))
      {
        unint64_t v13 = 0;
        uint64_t v14 = 52;
        do
        {
          uint64_t v15 = CFDataGetBytePtr(theData);
          *(_DWORD *)&v15[v14] -= v6;
          ++v13;
          v14 += 16;
        }
        while (v13 < *((unsigned int *)CFDataGetBytePtr(theData) + 10));
      }
      return 1;
    }
  }
  else
  {
    unsigned int v28 = ACFULogging::getLogInstance((ACFULogging *)this);
    ACFULogging::handleMessage((uint64_t)v28, 2u, "%s::%s: no manifest preset in dataref\n", v29, v30, v31, v32, v33, (char)"ACFUFTABFile");
    return 0;
  }
  return result;
}

BOOL ACFUFTABFile::isCacheValid(ACFUFTABFile *this)
{
  os_log_t v2 = (ACFUDataContainer *)*((void *)this + 1);
  if (!v2)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: no file data?!\n", v36, v37, v38, v39, v40, (char)"ACFUFTABFile");
    return 0;
  }
  int v3 = ACFUDataContainer::copyData(v2, 0, 0x30uLL);
  if (!v3)
  {
    uint64_t v41 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v41, 2u, "%s::%s: failed to copy ftab header\n", v42, v43, v44, v45, v46, (char)"ACFUFTABFile");
    return 0;
  }
  unsigned int v4 = v3;
  BytePtr = CFDataGetBytePtr(v3);
  if (!BytePtr)
  {
    int v47 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v47, 2u, "%s::%s: failed to copy ftab header\n", v48, v49, v50, v51, v52, (char)"ACFUFTABFile");
    BOOL v8 = 0;
    goto LABEL_23;
  }
  uint64_t v6 = *((unsigned int *)BytePtr + 10);
  CFRelease(v4);
  if (*((void *)this + 7) != v6)
  {
    uint64_t v53 = ACFULogging::getLogInstance(v7);
    ACFULogging::handleMessage((uint64_t)v53, 2u, "%s::%s: number of files in cache is invalid\n", v54, v55, v56, v57, v58, (char)"ACFUFTABFile");
    return 0;
  }
  if (!v6) {
    return 1;
  }
  BOOL v8 = 0;
  int v9 = 0;
  unsigned int v10 = 48;
  do
  {
    uint64_t v11 = ACFUDataContainer::copyData(*((ACFUDataContainer **)this + 1), v10, 0x10uLL);
    if (!v11)
    {
      uint64_t v29 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v29, 2u, "%s::%s: failed to copy ftab file header\n", v30, v31, v32, v33, v34, (char)"ACFUFTABFile");
      return 0;
    }
    unsigned int v4 = v11;
    uint64_t v12 = CFDataGetBytePtr(v11);
    char v60 = 4;
    LODWORD(__p) = *(_DWORD *)v12;
    BYTE4(__p) = 0;
    unint64_t v13 = (ACFULogging *)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>((uint64_t)this + 40, (const void **)&__p);
    if ((ACFUFTABFile *)((char *)this + 48) == v13)
    {
      uint64_t v15 = ACFULogging::getLogInstance(v13);
      ACFULogging::handleMessage((uint64_t)v15, 2u, "%s::%s: cache does not have entry for file %s. Cache is invalid\n", v16, v17, v18, v19, v20, (char)"ACFUFTABFile");
    }
    else
    {
      if (*((_DWORD *)v13 + 15) == *((_DWORD *)v12 + 1))
      {
        if (*((_DWORD *)v13 + 14) == *((_DWORD *)v12 + 2))
        {
          CFRelease(v4);
          unsigned int v4 = 0;
          char v14 = 1;
          goto LABEL_12;
        }
        uint64_t v21 = ACFULogging::getLogInstance(v13);
        unsigned int v27 = "%s::%s: cache does not hold correct size for file %s. Cache size: %d. FTAB size: %d. Cache is invalid\n";
      }
      else
      {
        uint64_t v21 = ACFULogging::getLogInstance(v13);
        unsigned int v27 = "%s::%s: cache does not hold correct offset for file %s. Cache offset: %d. FTAB offset: %d. Cache is invalid\n";
      }
      ACFULogging::handleMessage((uint64_t)v21, 2u, v27, v22, v23, v24, v25, v26, (char)"ACFUFTABFile");
    }
    char v14 = 0;
LABEL_12:
    if (v60 < 0) {
      operator delete(__p);
    }
    if ((v14 & 1) == 0) {
      break;
    }
    BOOL v8 = ++v9 >= v6;
    v10 += 16;
  }
  while (v6 != v9);
  if (!v4) {
    return v8;
  }
LABEL_23:
  CFRelease(v4);
  return v8;
}

void sub_217AC29D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFUFTABFile::updateCache(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = (uint64_t **)(a1 + 40);
  int v9 = (ACFULogging *)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(a1 + 40, (const void **)a2);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (v10 == 4)
  {
    uint64_t v11 = v9;
    uint64_t v12 = (ACFULogging *)(a1 + 48);
    if (!(a4 | a3))
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(v9);
      if (v12 == v11)
      {
        ACFULogging::handleMessage((uint64_t)LogInstance, 4u, "%s::%s: attempting to delete file from cache that does not exist. File: %s\n", v22, v23, v24, v25, v26, (char)"ACFUFTABFile");
      }
      else
      {
        ACFULogging::handleMessage((uint64_t)LogInstance, 4u, "%s::%s: removing file from FTAB cache. File: %s\n", v22, v23, v24, v25, v26, (char)"ACFUFTABFile");
        std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__erase_unique<std::string>(v8, (const void **)a2);
      }
      return 1;
    }
    if (v12 != v9)
    {
      unint64_t v13 = ACFULogging::getLogInstance(v9);
      ACFULogging::handleMessage((uint64_t)v13, 4u, "%s::%s: ftab cache entry updated. File: %s, offset: %u, size: %u\n", v14, v15, v16, v17, v18, (char)"ACFUFTABFile");
      if (a3)
      {
        uint64_t v40 = (long long *)a2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)a2, (uint64_t)&std::piecewise_construct, &v40)+ 15) = a3;
      }
      if (!a4) {
        return 1;
      }
      uint64_t v40 = (long long *)a2;
      uint64_t v19 = v8;
      uint64_t v20 = (const void **)a2;
      goto LABEL_15;
    }
    unsigned int v27 = ACFULogging::getLogInstance(v9);
    if (a3 && a4)
    {
      ACFULogging::handleMessage((uint64_t)v27, 4u, "%s::%s: Adding new file to FTAB cache. File: %s, offset: %u, size: %u\n", v28, v29, v30, v31, v32, (char)"ACFUFTABFile");
      uint64_t v40 = (long long *)a2;
      *((_DWORD *)std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)a2, (uint64_t)&std::piecewise_construct, &v40)+ 15) = a3;
      uint64_t v40 = (long long *)a2;
      uint64_t v19 = v8;
      uint64_t v20 = (const void **)a2;
LABEL_15:
      *((_DWORD *)std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, v20, (uint64_t)&std::piecewise_construct, &v40)+ 14) = a4;
      return 1;
    }
    ACFULogging::handleMessage((uint64_t)v27, 2u, "%s::%s: attempting to add new file to cache, but not both size and offset are provided. File: %s\n", v28, v29, v30, v31, v32, (char)"ACFUFTABFile");
  }
  else
  {
    uint64_t v34 = ACFULogging::getLogInstance(v9);
    ACFULogging::handleMessage((uint64_t)v34, 2u, "%s::%s: specified tag name is invalid! Tag name: %s\n", v35, v36, v37, v38, v39, (char)"ACFUFTABFile");
  }
  return 0;
}

void ACFUFTABFile::copyManifest(ACFUFTABFile *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (ACFUDataContainer *)*((void *)this + 1);
  if (!v4)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data was invalid\n", v14, v15, v16, v17, v18, (char)"ACFUFTABFile");
LABEL_13:
    uint64_t v10 = 0;
    int v11 = 1;
    goto LABEL_9;
  }
  uint64_t v5 = ACFUDataContainer::copyData(v4, 0, 0x30uLL);
  if (!v5)
  {
    uint64_t v19 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v19, 2u, "%s::%s: failed to copy ftab header\n", v20, v21, v22, v23, v24, (char)"ACFUFTABFile");
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  BytePtr = (ACFULogging *)CFDataGetBytePtr(v5);
  if (!BytePtr)
  {
    int v11 = 1;
    uint64_t v12 = "%s::%s: failed to copy ftab header\n";
    goto LABEL_16;
  }
  unint64_t v8 = *((unsigned int *)BytePtr + 5);
  if (!v8 || (unsigned int v9 = *((_DWORD *)BytePtr + 4)) == 0)
  {
    int v11 = 1001;
    uint64_t v12 = "%s::%s: no manifest found in ftab\n";
LABEL_16:
    uint64_t v25 = ACFULogging::getLogInstance(BytePtr);
    ACFULogging::handleMessage((uint64_t)v25, 2u, v12, v26, v27, v28, v29, v30, (char)"ACFUFTABFile");
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  BytePtr = ACFUDataContainer::copyData(*((ACFUDataContainer **)this + 1), v9, v8);
  if (!BytePtr)
  {
    int v11 = 4000;
    uint64_t v12 = "%s::%s: failed to create manifest data output\n";
    goto LABEL_16;
  }
  uint64_t v10 = BytePtr;
  int v11 = 0;
LABEL_8:
  CFRelease(v6);
LABEL_9:
  *(void *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v11;
}

uint64_t ACFUFTABFile::setBootNonce(ACFUFTABFile *this, uint64_t a2)
{
  int v3 = (ACFUDataContainer *)*((void *)this + 1);
  if (v3)
  {
    isOptimized = (ACFULogging *)ACFUDataContainer::isOptimized(v3);
    if (isOptimized)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(isOptimized);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: function is not supported in memory optimized flow. Memory optimized files are read only\n", v22, v23, v24, v25, v26, (char)"ACFUFTABFile");
    }
    else
    {
      CFDataRef Data = (const __CFData *)ACFUDataContainer::getData(*((ACFUDataContainer **)this + 1));
      if (Data)
      {
        BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
        *((void *)BytePtr + 1) = a2;
        unint64_t v8 = ACFULogging::getLogInstance((ACFULogging *)BytePtr);
        ACFULogging::handleMessage((uint64_t)v8, 0, "%s::%s: Boot nonce set for FTAB. Boot nonce value: %llu\n", v9, v10, v11, v12, v13, (char)"ACFUFTABFile");
        return 1;
      }
      uint64_t v27 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v27, 2u, "%s::%s: could not obtain file data\n", v28, v29, v30, v31, v32, (char)"ACFUFTABFile");
    }
  }
  else
  {
    uint64_t v15 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v15, 2u, "%s::%s: file data was invalid\n", v16, v17, v18, v19, v20, (char)"ACFUFTABFile");
  }
  return 0;
}

uint64_t ACFUFTABFile::getBootNonce(ACFUFTABFile *this)
{
  uint64_t v1 = (ACFUDataContainer *)*((void *)this + 1);
  if (!v1)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data was invalid\n", v8, v9, v10, v11, v12, (char)"ACFUFTABFile");
    return 0;
  }
  os_log_t v2 = ACFUDataContainer::copyData(v1, 0, 0x30uLL);
  if (!v2)
  {
    uint64_t v13 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v13, 2u, "%s::%s: failed to copy ftab header\n", v14, v15, v16, v17, v18, (char)"ACFUFTABFile");
    return 0;
  }
  int v3 = v2;
  BytePtr = CFDataGetBytePtr(v2);
  if (BytePtr)
  {
    uint64_t v5 = *((void *)BytePtr + 1);
  }
  else
  {
    uint64_t v19 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v19, 2u, "%s::%s: failed to copy ftab header\n", v20, v21, v22, v23, v24, (char)"ACFUFTABFile");
    uint64_t v5 = 0;
  }
  CFRelease(v3);
  return v5;
}

uint64_t ACFUFTABFile::addNewFileToFTAB(ACFULogging *a1, uint64_t a2, const __CFData *a3)
{
  return ACFUFTABFile::addNewFileToFTABOnData(a1, a2, a3, 0);
}

uint64_t ACFUFTABFile::addNewFileToFTABOnData(ACFULogging *a1, uint64_t a2, CFDataRef theData, CFDataRef *a4)
{
  uint64_t v7 = (uint64_t)a1;
  if (!a4 && !*((void *)a1 + 1))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(a1);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data must be valid or firmware data must be provided\n", v150, v151, v152, v153, v154, (char)"ACFUFTABFile");
    goto LABEL_90;
  }
  if (!theData)
  {
    uint64_t v89 = ACFULogging::getLogInstance(a1);
    ACFULogging::handleMessage((uint64_t)v89, 2u, "%s::%s: file data provided is not valid\n", v90, v91, v92, v93, v94, (char)"ACFUFTABFile");
    goto LABEL_90;
  }
  int Length = (ACFULogging *)CFDataGetLength(theData);
  if ((uint64_t)Length <= 0)
  {
    uint64_t v95 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v95, 2u, "%s::%s: file data has no bytes\n", v96, v97, v98, v99, v100, (char)"ACFUFTABFile");
    goto LABEL_90;
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (v9 != 4)
  {
    uint64_t v101 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v101, 2u, "%s::%s: tag is either larger or smaller than limit %u (size: %lu)\n", v102, v103, v104, v105, v106, (char)"ACFUFTABFile");
    goto LABEL_90;
  }
  uint64_t v10 = (ACFULogging *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
  if (v10)
  {
    uint64_t v107 = ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage((uint64_t)v107, 2u, "%s::%s: cowardly retreating because tag '%s' exists. I refuse to overwrite existing files!\n", v108, v109, v110, v111, v112, (char)"ACFUFTABFile");
    goto LABEL_90;
  }
  if (a4)
  {
    if (*a4)
    {
      isValidFileCFDataRef Data = ACFUFTABFile::isValidFileData((ACFUFTABFile *)v7, *a4, 0);
      if (isValidFileData)
      {
        CFDataRef v12 = *a4;
        if (*a4) {
          goto LABEL_13;
        }
LABEL_62:
        uint64_t v82 = ACFULogging::getLogInstance((ACFULogging *)isValidFileData);
        ACFULogging::handleMessage((uint64_t)v82, 2u, "%s::%s: could not obtain file data\n", v83, v84, v85, v86, v87, (char)"ACFUFTABFile");
        CFDataRef v75 = 0;
        CFMutableDataRef Mutable = 0;
        goto LABEL_87;
      }
      uint64_t v125 = ACFULogging::getLogInstance((ACFULogging *)isValidFileData);
      ACFULogging::handleMessage((uint64_t)v125, 2u, "%s::%s: firmware data is invalid and does not meet ftab standards\n", v126, v127, v128, v129, v130, (char)"ACFUFTABFile");
    }
    else
    {
      uint64_t v119 = ACFULogging::getLogInstance(v10);
      ACFULogging::handleMessage((uint64_t)v119, 2u, "%s::%s: firmware data container is invalid\n", v120, v121, v122, v123, v124, (char)"ACFUFTABFile");
    }
LABEL_90:
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  if (ACFUDataContainer::isOptimized(*(ACFUDataContainer **)(v7 + 8)))
  {
    uint64_t v39 = (uint64_t **)(v7 + 72);
    uint64_t v40 = (ACFULogging *)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__count_unique<std::string>(v7 + 72, (const void **)a2);
    if (!v40)
    {
      uint64_t v7 = AMSupportSafeRetain();
      __p[0] = (void *)a2;
      std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)__p)[7] = v7;
      LOBYTE(v7) = 1;
      return v7 & 1;
    }
    uint64_t v167 = ACFULogging::getLogInstance(v40);
    ACFULogging::handleMessage((uint64_t)v167, 2u, "%s::%s: cowardly retreating because tag '%s' exists in runtime MMIO File Data. I refuse to overwrite existing files!\n", v168, v169, v170, v171, v172, (char)"ACFUFTABFile");
    goto LABEL_90;
  }
  isValidFileCFDataRef Data = ACFUDataContainer::getData(*(ACFUDataContainer **)(v7 + 8));
  CFDataRef v12 = (const __CFData *)isValidFileData;
  if (!isValidFileData) {
    goto LABEL_62;
  }
LABEL_13:
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (!Mutable)
  {
    uint64_t v113 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v113, 2u, "%s::%s: could not allocate data\n", v114, v115, v116, v117, v118, (char)"ACFUFTABFile");
LABEL_81:
    CFDataRef v75 = 0;
    goto LABEL_87;
  }
  BytePtr = CFDataGetBytePtr(v12);
  uint64_t v177 = &BytePtr[*((unsigned int *)CFDataGetBytePtr(v12) + 13)];
  uint64_t v16 = CFDataGetBytePtr(v12);
  uint64_t v17 = &BytePtr[*(unsigned int *)&v16[16 * (*((_DWORD *)CFDataGetBytePtr(v12) + 10) - 1) + 52]];
  uint64_t v18 = CFDataGetBytePtr(v12);
  uint64_t v176 = &v17[*(unsigned int *)&v18[16 * (*((_DWORD *)CFDataGetBytePtr(v12) + 10) - 1) + 56]];
  CFDataGetBytePtr(v12);
  char v19 = *(unsigned char *)(a2 + 23);
  if (v19 >= 0) {
    uint64_t v20 = (const char *)a2;
  }
  else {
    uint64_t v20 = *(const char **)a2;
  }
  if (v19 >= 0) {
    size_t v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v21 = *(void *)(a2 + 8);
  }
  strncpy(__dst, v20, v21);
  CFDataRef v173 = theData;
  int v182 = CFDataGetLength(theData);
  int v183 = 0;
  uint64_t v22 = (UInt8 *)CFDataGetBytePtr(v12);
  CFDataRef theDataa = Mutable;
  if (!*((_DWORD *)v22 + 5))
  {
    CFDataRef v174 = 0;
    int v30 = 0;
    LODWORD(v32) = 0;
    goto LABEL_29;
  }
  uint64_t v23 = ACFULogging::getLogInstance((ACFULogging *)v22);
  ACFULogging::handleMessage((uint64_t)v23, 0, "%s::%s: manifest existing in FTAB is being deleted\n", v24, v25, v26, v27, v28, (char)"ACFUFTABFile");
  int v30 = ACFUFTABFile::removeManifestPadding(v29, v12);
  uint64_t v31 = &BytePtr[*((unsigned int *)CFDataGetBytePtr(v12) + 4)];
  uint64_t v32 = *((unsigned int *)CFDataGetBytePtr(v12) + 5);
  uint64_t v33 = CFDataGetBytePtr(v12);
  CFDataRef v34 = CFDataCreate(v13, v31, *((unsigned int *)v33 + 5));
  if (!v34)
  {
    uint64_t v131 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v131, 2u, "%s::%s: failed to obtain copy of manifest\n", v132, v133, v134, v135, v136, (char)"ACFUFTABFile");
    goto LABEL_81;
  }
  CFDataRef v174 = v34;
  CFIndex v35 = *((unsigned int *)CFDataGetBytePtr(v12) + 4);
  v184.CFIndex length = *((unsigned int *)CFDataGetBytePtr(v12) + 5);
  v184.CFIndex location = v35;
  CFDataDeleteBytes(v12, v184);
  if (v30)
  {
    uint64_t v177 = &BytePtr[*((unsigned int *)CFDataGetBytePtr(v12) + 13) - v32];
    uint64_t v36 = CFDataGetBytePtr(v12);
    uint64_t v37 = *(unsigned int *)&v36[16 * (*((_DWORD *)CFDataGetBytePtr(v12) + 10) - 1) + 52];
    uint64_t v38 = CFDataGetBytePtr(v12);
    uint64_t v176 = &BytePtr[v37 - v32 + *(unsigned int *)&v38[16 * (*((_DWORD *)CFDataGetBytePtr(v12) + 10) - 1) + 56]];
  }
  *((_DWORD *)CFDataGetBytePtr(v12) + 5) = 0;
  *((_DWORD *)CFDataGetBytePtr(v12) + 4) = 0;
LABEL_29:
  if (!*((_DWORD *)CFDataGetBytePtr(v12) + 10))
  {
LABEL_48:
    uint64_t v66 = CFDataGetBytePtr(v12);
    int v67 = *(_DWORD *)&v66[16 * (*((_DWORD *)CFDataGetBytePtr(v12) + 10) - 1) + 52];
    uint64_t v68 = CFDataGetBytePtr(v12);
    int v181 = *(_DWORD *)&v68[16 * (*((_DWORD *)CFDataGetBytePtr(v12) + 10) - 1) + 56] + v67;
    uint64_t v69 = CFDataGetBytePtr(v12);
    ++*((_DWORD *)v69 + 10);
    uint64_t v70 = CFDataGetBytePtr(v12);
    CFMutableDataRef Mutable = theDataa;
    CFDataAppendBytes(theDataa, v70, 48);
    uint64_t v71 = CFDataGetBytePtr(v12) + 48;
    uint64_t v72 = CFDataGetBytePtr(v12);
    CFDataAppendBytes(theDataa, v71, 16 * (*((_DWORD *)v72 + 10) - 1));
    CFDataAppendBytes(theDataa, (const UInt8 *)__dst, 16);
    CFDataAppendBytes(theDataa, v177, v176 - v177);
    uint64_t v73 = CFDataGetBytePtr(v173);
    CFIndex v74 = CFDataGetLength(v173);
    CFDataAppendBytes(theDataa, v73, v74);
    if (a4)
    {
      CFDataRef v75 = v174;
      if (*a4)
      {
        CFRelease(*a4);
        *a4 = 0;
      }
      uint64_t v76 = AMSupportSafeRetain();
      *a4 = (CFDataRef)v76;
      if (!v76)
      {
        CFIndex v137 = ACFULogging::getLogInstance(0);
        ACFULogging::handleMessage((uint64_t)v137, 2u, "%s::%s: failed obtain new file data\n", v138, v139, v140, v141, v142, (char)"ACFUFTABFile");
        goto LABEL_87;
      }
      if (!v174)
      {
        CFDataRef v78 = (const __CFData *)v76;
        goto LABEL_66;
      }
      uint64_t v77 = ACFUFTABFile::setManifestOnData((ACFUDataContainer **)v7, v174, a4);
      if (v77)
      {
        CFDataRef v78 = *a4;
LABEL_66:
        char isCacheValid = ACFUFTABFile::isValidFileData((ACFUFTABFile *)v7, v78, 0);
        goto LABEL_67;
      }
      goto LABEL_83;
    }
    uint64_t v79 = ACFUDataContainer::setData(*(const __CFString ***)(v7 + 8), theDataa);
    CFDataRef v75 = v174;
    if (v79)
    {
      uint64_t updated = ACFUFTABFile::updateCache(v7, a2, v181, v182);
      if (updated)
      {
        if (v174)
        {
          uint64_t v77 = ACFUFTABFile::setManifestOnData((ACFUDataContainer **)v7, v174, 0);
          if ((v77 & 1) == 0)
          {
LABEL_83:
            uint64_t v143 = ACFULogging::getLogInstance((ACFULogging *)v77);
            ACFULogging::handleMessage((uint64_t)v143, 2u, "%s::%s: failed to update manifest\n", v144, v145, v146, v147, v148, (char)"ACFUFTABFile");
            goto LABEL_87;
          }
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 88))(v7))
        {
          char isCacheValid = ACFUFTABFile::isCacheValid((ACFUFTABFile *)v7);
LABEL_67:
          LOBYTE(v7) = isCacheValid;
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v161 = ACFULogging::getLogInstance((ACFULogging *)updated);
        ACFULogging::handleMessage((uint64_t)v161, 2u, "%s::%s: failed to update cache\n", v162, v163, v164, v165, v166, (char)"ACFUFTABFile");
      }
    }
    else
    {
      uint64_t v155 = ACFULogging::getLogInstance((ACFULogging *)v79);
      ACFULogging::handleMessage((uint64_t)v155, 2u, "%s::%s: failed to update file data\n", v156, v157, v158, v159, v160, (char)"ACFUFTABFile");
    }
LABEL_87:
    LOBYTE(v7) = 0;
    if (!Mutable)
    {
LABEL_69:
      if (v75) {
        CFRelease(v75);
      }
      return v7 & 1;
    }
LABEL_68:
    CFRelease(Mutable);
    goto LABEL_69;
  }
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  while (1)
  {
    uint64_t v43 = CFDataGetBytePtr(v12);
    *(_DWORD *)&v43[v41 + 52] += 16;
    if (!a4)
    {
      uint64_t v44 = CFDataGetBytePtr(v12);
      char v179 = 4;
      LODWORD(__p[0]) = *(_DWORD *)&v44[v41 + 48];
      BYTE4(__p[0]) = 0;
      uint64_t v45 = CFDataGetBytePtr(v12);
      uint64_t v46 = ACFUFTABFile::updateCache(v7, (uint64_t)__p, *(_DWORD *)&v45[v41 + 52], 0);
      int v47 = v46;
      if (v46)
      {
        int v48 = 0;
      }
      else
      {
        uint64_t v54 = ACFULogging::getLogInstance((ACFULogging *)v46);
        ACFULogging::handleMessage((uint64_t)v54, 2u, "%s::%s: failed to update cache\n", v55, v56, v57, v58, v59, (char)"ACFUFTABFile");
        int v48 = 4;
      }
      if (v179 < 0) {
        operator delete(__p[0]);
      }
      if (!v47) {
        break;
      }
    }
    if (v30)
    {
      uint64_t v49 = CFDataGetBytePtr(v12);
      *(_DWORD *)&v49[v41 + 52] -= v32;
      if (!a4)
      {
        uint64_t v50 = CFDataGetBytePtr(v12);
        char v179 = 4;
        LODWORD(__p[0]) = *(_DWORD *)&v50[v41 + 48];
        BYTE4(__p[0]) = 0;
        uint64_t v51 = CFDataGetBytePtr(v12);
        uint64_t v52 = ACFUFTABFile::updateCache(v7, (uint64_t)__p, *(_DWORD *)&v51[v41 + 52], 0);
        int v53 = v52;
        if (v52)
        {
          int v48 = 0;
        }
        else
        {
          char v60 = ACFULogging::getLogInstance((ACFULogging *)v52);
          ACFULogging::handleMessage((uint64_t)v60, 2u, "%s::%s: failed to update cache\n", v61, v62, v63, v64, v65, (char)"ACFUFTABFile");
          int v48 = 4;
        }
        if (v179 < 0) {
          operator delete(__p[0]);
        }
        if (!v53) {
          break;
        }
      }
    }
    ++v42;
    v41 += 16;
    if (v42 >= *((unsigned int *)CFDataGetBytePtr(v12) + 10)) {
      goto LABEL_48;
    }
  }
  if ((v48 | 4) == 4)
  {
    LOBYTE(v7) = 0;
    CFDataRef v75 = v174;
    CFMutableDataRef Mutable = theDataa;
    goto LABEL_68;
  }
  return v7 & 1;
}

void sub_217AC3924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFUFTABFile::updateFileInFTABOnData(ACFUDataContainer **a1, unsigned __int8 *a2, CFDataRef theData, CFDataRef *a4)
{
  CFDataRef v5 = theData;
  if (!a4 && !a1[1])
  {
    Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)a1);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data must be valid or firmware data must be provided\n", v170, v171, v172, v173, v174, (char)"ACFUFTABFile");
    goto LABEL_29;
  }
  if (!theData)
  {
    uint64_t v127 = ACFULogging::getLogInstance((ACFULogging *)a1);
    ACFULogging::handleMessage((uint64_t)v127, 2u, "%s::%s: file data provided is not valid\n", v128, v129, v130, v131, v132, (char)"ACFUFTABFile");
    goto LABEL_29;
  }
  int Length = (ACFULogging *)CFDataGetLength(theData);
  if ((uint64_t)Length <= 0)
  {
    uint64_t v133 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v133, 2u, "%s::%s: input data has no bytes\n", v134, v135, v136, v137, v138, (char)"ACFUFTABFile");
    goto LABEL_29;
  }
  uint64_t v9 = a2[23];
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)a2 + 1);
  }
  if (v9 != 4)
  {
    uint64_t v139 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v139, 2u, "%s::%s: tag is either larger or smaller than limit %u (size: %lu)\n", v140, v141, v142, v143, v144, (char)"ACFUFTABFile");
    goto LABEL_29;
  }
  if (a4)
  {
    if (!*a4)
    {
      uint64_t v145 = ACFULogging::getLogInstance(Length);
      ACFULogging::handleMessage((uint64_t)v145, 2u, "%s::%s: firmware data container is invalid\n", v146, v147, v148, v149, v150, (char)"ACFUFTABFile");
      goto LABEL_29;
    }
    isValidFileuint64_t Data = ACFUFTABFile::isValidFileData((ACFUFTABFile *)a1, *a4, 0);
    if ((isValidFileData & 1) == 0)
    {
      uint64_t v151 = ACFULogging::getLogInstance((ACFULogging *)isValidFileData);
      ACFULogging::handleMessage((uint64_t)v151, 2u, "%s::%s: firmware data is invalid and does not meet ftab standards\n", v152, v153, v154, v155, v156, (char)"ACFUFTABFile");
      goto LABEL_29;
    }
    CFDataRef v11 = *a4;
    BytePtr = (unsigned int *)CFDataGetBytePtr(*a4);
    if (!BytePtr)
    {
      uint64_t v157 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v157, 2u, "%s::%s: failed to copy ftab header\n", v158, v159, v160, v161, v162, (char)"ACFUFTABFile");
      goto LABEL_29;
    }
    uint64_t v13 = BytePtr[10];
    if (!v13)
    {
      uint64_t v163 = ACFULogging::getLogInstance((ACFULogging *)BytePtr);
      ACFULogging::handleMessage((uint64_t)v163, 2u, "%s::%s: cannot update a file if no files exist\n", v164, v165, v166, v167, v168, (char)"ACFUFTABFile");
      goto LABEL_29;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 16 * v13;
    while (1)
    {
      uint64_t v16 = CFDataGetBytePtr(v11);
      char v208 = 4;
      LODWORD(__s2[0]) = *(_DWORD *)&v16[v14 + 48];
      BYTE4(__s2[0]) = 0;
      int v17 = (char)a2[23];
      unint64_t v18 = v17 >= 0 ? a2[23] : *((void *)a2 + 1);
      char v19 = v17 >= 0 ? a2 : *(unsigned __int8 **)a2;
      size_t v20 = v18 >= 4 ? 4 : v18;
      size_t v21 = (ACFULogging *)memcmp(v19, __s2, v20);
      if (!v21 && v18 == 4) {
        break;
      }
      v14 += 16;
      if (v15 == v14) {
        goto LABEL_28;
      }
    }
    unsigned int v35 = *(_DWORD *)&CFDataGetBytePtr(v11)[v14 + 56];
    unsigned int v36 = *(_DWORD *)&CFDataGetBytePtr(v11)[v14 + 52];
    goto LABEL_39;
  }
  if (!ACFUDataContainer::isOptimized(a1[1]))
  {
    uint64_t Data = ACFUDataContainer::getData(a1[1]);
    if (!Data)
    {
      uint64_t v175 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v175, 2u, "%s::%s: could not obtain file data\n", v176, v177, v178, v179, v180, (char)"ACFUFTABFile");
      goto LABEL_29;
    }
    CFDataRef v11 = (const __CFData *)Data;
    size_t v21 = (ACFULogging *)(*((uint64_t (**)(ACFUDataContainer **, unsigned __int8 *))*a1 + 2))(a1, a2);
    if ((v21 & 1) == 0)
    {
LABEL_28:
      uint64_t v23 = ACFULogging::getLogInstance(v21);
      ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: cannot update tag '%s' because it does not exist\n", v24, v25, v26, v27, v28, (char)"ACFUFTABFile");
      goto LABEL_29;
    }
    uint64_t v38 = std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>((uint64_t)(a1 + 5), (const void **)a2);
    unsigned int v35 = *(_DWORD *)(v38 + 56);
    unsigned int v36 = *(_DWORD *)(v38 + 60);
LABEL_39:
    CFIndex v39 = v35;
    if (CFDataGetLength(v5) == v35)
    {
      uint64_t v40 = CFDataGetBytePtr(v5);
      v209.CFIndex location = v36;
      v209.CFIndex length = v35;
      CFDataReplaceBytes(v11, v209, v40, v35);
      if (a4)
      {
        char isCacheValid = ACFUFTABFile::isValidFileData((ACFUFTABFile *)a1, *a4, 0);
LABEL_51:
        char v29 = isCacheValid;
        goto LABEL_117;
      }
      if ((*((unsigned int (**)(ACFUDataContainer **))*a1 + 11))(a1))
      {
        char isCacheValid = ACFUFTABFile::isCacheValid((ACFUFTABFile *)a1);
        goto LABEL_51;
      }
      goto LABEL_29;
    }
    unint64_t v42 = CFDataGetBytePtr(v11);
    CFDataGetBytePtr(v11);
    uint64_t v43 = (UInt8 *)CFDataGetBytePtr(v11);
    CFDataRef theDataa = v5;
    if (*((_DWORD *)v43 + 5))
    {
      uint64_t v44 = ACFULogging::getLogInstance((ACFULogging *)v43);
      ACFULogging::handleMessage((uint64_t)v44, 0, "%s::%s: manifest existing in FTAB is being deleted\n", v45, v46, v47, v48, v49, (char)"ACFUFTABFile");
      int v51 = ACFUFTABFile::removeManifestPadding(v50, v11);
      uint64_t v52 = &v42[*((unsigned int *)CFDataGetBytePtr(v11) + 4)];
      CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v54 = CFDataGetBytePtr(v11);
      CFDataRef v205 = CFDataCreate(v53, v52, *((unsigned int *)v54 + 5));
      if (!v205)
      {
        int v181 = ACFULogging::getLogInstance(0);
        ACFULogging::handleMessage((uint64_t)v181, 2u, "%s::%s: failed to obtain copy of manifest\n", v182, v183, v184, v185, v186, (char)"ACFUFTABFile");
        goto LABEL_29;
      }
      CFIndex v55 = *((unsigned int *)CFDataGetBytePtr(v11) + 4);
      v210.CFIndex length = *((unsigned int *)CFDataGetBytePtr(v11) + 5);
      v210.CFIndex location = v55;
      CFDataDeleteBytes(v11, v210);
      if (v51 && *((_DWORD *)CFDataGetBytePtr(v11) + 10))
      {
        unint64_t v56 = 0;
        uint64_t v57 = 52;
        do
        {
          int v58 = *((_DWORD *)CFDataGetBytePtr(v11) + 5);
          uint64_t v59 = CFDataGetBytePtr(v11);
          *(_DWORD *)&v59[v57] -= v58;
          ++v56;
          v57 += 16;
        }
        while (v56 < *((unsigned int *)CFDataGetBytePtr(v11) + 10));
      }
      *((_DWORD *)CFDataGetBytePtr(v11) + 5) = 0;
      *((_DWORD *)CFDataGetBytePtr(v11) + 4) = 0;
      CFDataRef v5 = theDataa;
    }
    else
    {
      CFDataRef v205 = 0;
    }
    if (*((_DWORD *)CFDataGetBytePtr(v11) + 10))
    {
      unint64_t v60 = 0;
      do
      {
        uint64_t v61 = CFDataGetBytePtr(v11);
        char v208 = 4;
        LODWORD(__s2[0]) = *(_DWORD *)&v61[16 * v60 + 48];
        BYTE4(__s2[0]) = 0;
        uint64_t v62 = a2[23];
        if ((v62 & 0x80u) == 0) {
          uint64_t v63 = a2[23];
        }
        else {
          uint64_t v63 = *((void *)a2 + 1);
        }
        if (v63 == 4)
        {
          if ((v62 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)a2, __s2, *((void *)a2 + 1))) {
              break;
            }
          }
          else
          {
            if (!a2[23]) {
              break;
            }
            uint64_t v64 = __s2;
            uint64_t v65 = a2;
            while (*v65 == *(unsigned __int8 *)v64)
            {
              ++v65;
              uint64_t v64 = (long long **)((char *)v64 + 1);
              if (!--v62) {
                goto LABEL_69;
              }
            }
          }
        }
        ++v60;
      }
      while (v60 < *((unsigned int *)CFDataGetBytePtr(v11) + 10));
    }
    else
    {
      LODWORD(v60) = 0;
    }
LABEL_69:
    CFIndex v66 = CFDataGetLength(v5);
    int v67 = CFDataGetLength(v5);
    if (v66 >= v39)
    {
      CFIndex v83 = (v67 - v39);
      CFDataIncreaseLength(v11, v83);
      unsigned int v84 = *((_DWORD *)CFDataGetBytePtr(v11) + 10) - 1;
      if (v84 > v60)
      {
        uint64_t v85 = 16 * v84 + 56;
        while (1)
        {
          CFIndex v86 = (*(_DWORD *)&CFDataGetBytePtr(v11)[v85 - 4] + v83);
          CFIndex v87 = *(unsigned int *)&CFDataGetBytePtr(v11)[v85];
          uint64_t v88 = CFDataGetBytePtr(v11);
          uint64_t v89 = &v88[*(unsigned int *)&CFDataGetBytePtr(v11)[v85 - 4]];
          uint64_t v90 = CFDataGetBytePtr(v11);
          v211.CFIndex location = v86;
          v211.CFIndex length = v87;
          CFDataReplaceBytes(v11, v211, v89, *(unsigned int *)&v90[v85]);
          uint64_t v91 = CFDataGetBytePtr(v11);
          *(_DWORD *)&v91[v85 - 4] += v83;
          if (!a4)
          {
            uint64_t v92 = CFDataGetBytePtr(v11);
            char v208 = 4;
            LODWORD(__s2[0]) = *(_DWORD *)&v92[v85 - 8];
            BYTE4(__s2[0]) = 0;
            uint64_t v93 = CFDataGetBytePtr(v11);
            uint64_t updated = ACFUFTABFile::updateCache((uint64_t)a1, (uint64_t)__s2, *(_DWORD *)&v93[v85 - 4], 0);
            int v95 = updated;
            if (updated)
            {
              int v76 = 0;
            }
            else
            {
              uint64_t v96 = ACFULogging::getLogInstance((ACFULogging *)updated);
              ACFULogging::handleMessage((uint64_t)v96, 2u, "%s::%s: could not update ftab cache\n", v97, v98, v99, v100, v101, (char)"ACFUFTABFile");
              int v76 = 4;
            }
            if (v208 < 0) {
              operator delete(__s2[0]);
            }
            if (!v95) {
              break;
            }
          }
          --v84;
          v85 -= 16;
          if (v60 >= v84) {
            goto LABEL_101;
          }
        }
LABEL_111:
        if (v76) {
          goto LABEL_29;
        }
LABEL_112:
        if (!v205 || (uint64_t v119 = ACFUFTABFile::setManifestOnData(a1, v205, 0), (v119 & 1) != 0))
        {
          if ((*((unsigned int (**)(ACFUDataContainer **))*a1 + 11))(a1))
          {
            char v120 = ACFUFTABFile::isCacheValid((ACFUFTABFile *)a1);
            goto LABEL_116;
          }
LABEL_29:
          char v29 = 0;
          goto LABEL_117;
        }
LABEL_128:
        uint64_t v187 = ACFULogging::getLogInstance((ACFULogging *)v119);
        ACFULogging::handleMessage((uint64_t)v187, 2u, "%s::%s: failed to update manifest\n", v188, v189, v190, v191, v192, (char)"ACFUFTABFile");
        goto LABEL_29;
      }
LABEL_101:
      int v114 = CFDataGetLength(theDataa);
      uint64_t v103 = v60;
      *(_DWORD *)&CFDataGetBytePtr(v11)[16 * v60 + 56] = v114;
      if (a4)
      {
        CFIndex v115 = *(unsigned int *)&CFDataGetBytePtr(v11)[16 * v60 + 52];
        CFIndex v116 = CFDataGetLength(theDataa);
        uint64_t v117 = CFDataGetBytePtr(theDataa);
        CFIndex v118 = CFDataGetLength(theDataa);
        v214.CFIndex location = v115;
        v214.CFIndex length = v116;
        CFDataReplaceBytes(v11, v214, v117, v118);
        goto LABEL_103;
      }
      uint64_t v121 = CFDataGetBytePtr(v11);
      char v208 = 4;
      LODWORD(__s2[0]) = *(_DWORD *)&v121[16 * v60 + 48];
      BYTE4(__s2[0]) = 0;
      int v122 = *(_DWORD *)&CFDataGetBytePtr(v11)[16 * v60 + 52];
      int v123 = CFDataGetLength(theDataa);
      uint64_t v124 = ACFUFTABFile::updateCache((uint64_t)a1, (uint64_t)__s2, v122, v123);
      char v125 = v124;
      if (v124)
      {
        int v76 = 0;
      }
      else
      {
        uint64_t v199 = ACFULogging::getLogInstance((ACFULogging *)v124);
        ACFULogging::handleMessage((uint64_t)v199, 2u, "%s::%s: could not update ftab cache\n", v200, v201, v202, v203, v204, (char)"ACFUFTABFile");
        int v76 = 4;
      }
      if (v208 < 0) {
        operator delete(__s2[0]);
      }
      if ((v125 & 1) == 0) {
        goto LABEL_111;
      }
    }
    else
    {
      CFIndex v68 = (v39 - v67);
      unint64_t v69 = (v60 + 1);
      if (v69 < *((_DWORD *)CFDataGetBytePtr(v11) + 10))
      {
        uint64_t v70 = 16 * (v60 + 1);
        do
        {
          uint64_t v71 = CFDataGetBytePtr(v11);
          *(_DWORD *)&v71[v70 + 52] -= v68;
          if (!a4)
          {
            uint64_t v72 = CFDataGetBytePtr(v11);
            char v208 = 4;
            LODWORD(__s2[0]) = *(_DWORD *)&v72[v70 + 48];
            BYTE4(__s2[0]) = 0;
            uint64_t v73 = CFDataGetBytePtr(v11);
            uint64_t v74 = ACFUFTABFile::updateCache((uint64_t)a1, (uint64_t)__s2, *(_DWORD *)&v73[v70 + 52], 0);
            int v75 = v74;
            if (v74)
            {
              int v76 = 0;
            }
            else
            {
              uint64_t v77 = ACFULogging::getLogInstance((ACFULogging *)v74);
              ACFULogging::handleMessage((uint64_t)v77, 2u, "%s::%s: could not update ftab cache\n", v78, v79, v80, v81, v82, (char)"ACFUFTABFile");
              int v76 = 4;
            }
            if (v208 < 0) {
              operator delete(__s2[0]);
            }
            if (!v75) {
              goto LABEL_111;
            }
          }
          ++v69;
          v70 += 16;
        }
        while (v69 < *((unsigned int *)CFDataGetBytePtr(v11) + 10));
      }
      int v102 = CFDataGetLength(theDataa);
      uint64_t v103 = v60;
      *(_DWORD *)&CFDataGetBytePtr(v11)[16 * v60 + 56] = v102;
      if (!a4)
      {
        uint64_t v104 = CFDataGetBytePtr(v11);
        char v208 = 4;
        LODWORD(__s2[0]) = *(_DWORD *)&v104[16 * v60 + 48];
        BYTE4(__s2[0]) = 0;
        int v105 = *(_DWORD *)&CFDataGetBytePtr(v11)[16 * v60 + 52];
        int v106 = CFDataGetLength(theDataa);
        uint64_t v107 = ACFUFTABFile::updateCache((uint64_t)a1, (uint64_t)__s2, v105, v106);
        int v108 = v107;
        if (v107)
        {
          int v76 = 0;
        }
        else
        {
          uint64_t v193 = ACFULogging::getLogInstance((ACFULogging *)v107);
          ACFULogging::handleMessage((uint64_t)v193, 2u, "%s::%s: could not update ftab cache\n", v194, v195, v196, v197, v198, (char)"ACFUFTABFile");
          int v76 = 4;
        }
        if (v208 < 0) {
          operator delete(__s2[0]);
        }
        if (!v108) {
          goto LABEL_111;
        }
      }
      uint64_t v109 = *(unsigned int *)&CFDataGetBytePtr(v11)[16 * v60 + 52];
      v212.CFIndex location = CFDataGetLength(theDataa) + v109;
      v212.CFIndex length = v68;
      CFDataDeleteBytes(v11, v212);
    }
    CFIndex v110 = *(unsigned int *)&CFDataGetBytePtr(v11)[16 * v103 + 52];
    CFIndex v111 = CFDataGetLength(theDataa);
    uint64_t v112 = CFDataGetBytePtr(theDataa);
    CFIndex v113 = CFDataGetLength(theDataa);
    v213.CFIndex location = v110;
    v213.CFIndex length = v111;
    CFDataReplaceBytes(v11, v213, v112, v113);
    if (!a4) {
      goto LABEL_112;
    }
LABEL_103:
    if (!v205 || (uint64_t v119 = ACFUFTABFile::setManifestOnData(a1, v205, a4), (v119 & 1) != 0))
    {
      char v120 = ACFUFTABFile::isValidFileData((ACFUFTABFile *)a1, *a4, 0);
LABEL_116:
      char v29 = v120;
      goto LABEL_117;
    }
    goto LABEL_128;
  }
  int v30 = (uint64_t **)(a1 + 9);
  uint64_t v31 = std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>((uint64_t)(a1 + 9), (const void **)a2);
  if (a1 + 10 != (ACFUDataContainer **)v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = *(const void **)(v31 + 56);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(v32 + 56) = 0;
    }
  }
  uint64_t v34 = AMSupportSafeRetain();
  __s2[0] = (long long *)a2;
  std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (const void **)a2, (uint64_t)&std::piecewise_construct, __s2)[7] = v34;
  char v29 = 1;
LABEL_117:
  AMSupportSafeRelease();
  return v29 & 1;
}

void sub_217AC4504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFUFTABFile::setFTABValidity(ACFUFTABFile *this, int a2)
{
  int v3 = (ACFUDataContainer *)*((void *)this + 1);
  if (v3)
  {
    isOptimized = (ACFULogging *)ACFUDataContainer::isOptimized(v3);
    if (isOptimized)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(isOptimized);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: function is not supported in memory optimized flow. Memory optimized files are read only\n", v15, v16, v17, v18, v19, (char)"ACFUFTABFile");
    }
    else
    {
      CFDataRef Data = (const __CFData *)ACFUDataContainer::getData(*((ACFUDataContainer **)this + 1));
      if (Data)
      {
        *((_DWORD *)CFDataGetBytePtr(Data) + 1) = a2;
        return 1;
      }
      size_t v20 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v20, 2u, "%s::%s: could not obtain file data\n", v21, v22, v23, v24, v25, (char)"ACFUFTABFile");
    }
  }
  else
  {
    uint64_t v8 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v8, 2u, "%s::%s: file data was invalid\n", v9, v10, v11, v12, v13, (char)"ACFUFTABFile");
  }
  return 0;
}

uint64_t ACFUFTABFile::copyFWDataByName(uint64_t a1, uint64_t a2)
{
  isOptimized = (ACFULogging *)ACFUDataContainer::isOptimized(*(ACFUDataContainer **)(a1 + 8));
  if (!isOptimized
    || (isOptimized = (ACFULogging *)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(a1 + 72, (const void **)a2), (ACFULogging *)(a1 + 80) == isOptimized))
  {
    if (!*(void *)(a1 + 8))
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(isOptimized);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data was invalid\n", v15, v16, v17, v18, v19, (char)"ACFUFTABFile");
      return 0;
    }
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    if (v12 != 4)
    {
      size_t v20 = ACFULogging::getLogInstance(isOptimized);
      ACFULogging::handleMessage((uint64_t)v20, 2u, "%s::%s: specified tag name is invalid!\n", v21, v22, v23, v24, v25, (char)"ACFUFTABFile");
      return 0;
    }
    uint64_t v13 = (unsigned int *)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(a1 + 40, (const void **)a2);
    if ((unsigned int *)(a1 + 48) == v13)
    {
      uint64_t v26 = ACFULogging::getLogInstance((ACFULogging *)v13);
      ACFULogging::handleMessage((uint64_t)v26, 2u, "%s::%s: file '%s' does not exist\n", v27, v28, v29, v30, v31, (char)"ACFUFTABFile");
      return 0;
    }
    uint64_t result = (uint64_t)ACFUDataContainer::copyData(*(ACFUDataContainer **)(a1 + 8), v13[15], v13[14]);
    if (!result)
    {
      uint64_t v32 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v32, 2u, "%s::%s: failed to copy file data\n", v33, v34, v35, v36, v37, (char)"ACFUFTABFile");
      return 0;
    }
  }
  else
  {
    uint64_t result = AMSupportSafeRetain();
    if (!result)
    {
      uint64_t v6 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v6, 2u, "%s::%s: failed to retain file data\n", v7, v8, v9, v10, v11, (char)"ACFUFTABFile");
      return 0;
    }
  }
  return result;
}

void ACFUFTABFile::copyFWRefByName(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, ACFUDataContainer::DirectDataRef **a5@<X8>)
{
  *a5 = 0;
  uint64_t v7 = *(ACFULogging **)(a1 + 8);
  if (!v7)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    uint64_t v34 = "%s::%s: file data was invalid\n";
    goto LABEL_19;
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (v9 != 4)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v7);
    uint64_t v34 = "%s::%s: specified tag name is invalid!\n";
    goto LABEL_19;
  }
  if (!ACFUDataContainer::isOptimized(v7)
    || (uint64_t v12 = std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(a1 + 72, (const void **)a2), a1 + 80 == v12))
  {
    uint64_t v24 = (ACFULogging *)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(a1 + 40, (const void **)a2);
    if ((ACFULogging *)(a1 + 48) == v24)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(v24);
      uint64_t v34 = "%s::%s: file does not exist\n";
    }
    else
    {
      ACFUDataContainer::copyDirectData(*(ACFUDataContainer **)(a1 + 8), a4, *((_DWORD *)v24 + 15) + a3, &v35);
      uint64_t v25 = v35;
      uint64_t v35 = 0;
      std::unique_ptr<ACFUDataContainer::DirectDataRef>::reset[abi:ne180100](a5, v25);
      uint64_t v26 = v35;
      uint64_t v35 = 0;
      if (v26)
      {
        ACFUDataContainer::DirectDataRef::~DirectDataRef(v26);
        operator delete(v27);
      }
      if (*a5) {
        return;
      }
      Loguint64_t Instance = ACFULogging::getLogInstance(v26);
      uint64_t v34 = "%s::%s: failed to obtain data ref\n";
    }
LABEL_19:
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v34, v29, v30, v31, v32, v33, (char)"ACFUFTABFile");
    return;
  }
  uint64_t v13 = (UInt8 *)malloc(a4);
  if (!v13)
  {
    uint64_t v17 = ACFULogging::getLogInstance(0);
    uint64_t v23 = "%s::%s: failed to allocate data\n";
    goto LABEL_21;
  }
  uint64_t v14 = v13;
  v36.CFIndex location = a3;
  v36.CFIndex length = a4;
  CFDataGetBytes(*(CFDataRef *)(v12 + 56), v36, v13);
  uint64_t v15 = (ACFUDataContainer::DirectDataRef *)operator new(0x18uLL);
  ACFUDataContainer::DirectDataRef::DirectDataRef((uint64_t)v15, v14, a4, 0);
  std::unique_ptr<ACFUDataContainer::DirectDataRef>::reset[abi:ne180100](a5, v15);
  if (!*a5)
  {
    uint64_t v17 = ACFULogging::getLogInstance(v16);
    uint64_t v23 = "%s::%s: failed to obtain data ref\n";
LABEL_21:
    ACFULogging::handleMessage((uint64_t)v17, 2u, v23, v18, v19, v20, v21, v22, (char)"ACFUFTABFile");
  }
}

void sub_217AC4964(_Unwind_Exception *a1)
{
  std::unique_ptr<ACFUDataContainer::DirectDataRef>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

CFDataRef ACFUFTABFile::copyFirmwareContainer(ACFUFTABFile *this)
{
  CFDataRef v36 = 0;
  os_log_t v2 = (ACFUDataContainer *)*((void *)this + 1);
  if (!v2)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data was invalid\n", v25, v26, v27, v28, v29, (char)"ACFUFTABFile");
    return v36;
  }
  CFDataRef v36 = ACFUDataContainer::copyData(v2);
  if (!v36)
  {
    uint64_t v30 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v30, 2u, "%s::%s: failed to obtain file data\n", v31, v32, v33, v34, v35, (char)"ACFUFTABFile");
    return v36;
  }
  if (ACFUDataContainer::isOptimized(*((ACFUDataContainer **)this + 1)))
  {
    int v3 = (ACFUFTABFile *)*((void *)this + 9);
    if (v3 != (ACFUFTABFile *)((char *)this + 80))
    {
      do
      {
        int v4 = (*(uint64_t (**)(ACFUFTABFile *, uint64_t))(*(void *)this + 16))(this, (uint64_t)v3 + 32);
        CFDataRef v5 = (const __CFData *)*((void *)v3 + 7);
        if (v4)
        {
          uint64_t updated = ACFUFTABFile::updateFileInFTABOnData((ACFUDataContainer **)this, (unsigned __int8 *)v3 + 32, v5, &v36);
          if ((updated & 1) == 0)
          {
            uint64_t v12 = ACFULogging::getLogInstance((ACFULogging *)updated);
            ACFULogging::handleMessage((uint64_t)v12, 2u, "%s::%s: failed to update file\n", v13, v14, v15, v16, v17, (char)"ACFUFTABFile");
            return v36;
          }
        }
        else
        {
          uint64_t v7 = ACFUFTABFile::addNewFileToFTABOnData(this, (uint64_t)v3 + 32, v5, &v36);
          if ((v7 & 1) == 0)
          {
            uint64_t v18 = ACFULogging::getLogInstance((ACFULogging *)v7);
            ACFULogging::handleMessage((uint64_t)v18, 2u, "%s::%s: failed to add new file\n", v19, v20, v21, v22, v23, (char)"ACFUFTABFile");
            return v36;
          }
        }
        uint64_t v8 = (ACFUFTABFile *)*((void *)v3 + 1);
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = *(ACFUFTABFile **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (ACFUFTABFile *)*((void *)v3 + 2);
            BOOL v10 = *(void *)v9 == (void)v3;
            int v3 = v9;
          }
          while (!v10);
        }
        int v3 = v9;
      }
      while (v9 != (ACFUFTABFile *)((char *)this + 80));
    }
  }
  return v36;
}

void ACFUFTABFile::prettyLog(ACFUFTABFile *this)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  os_log_t v2 = (ACFUDataContainer *)*((void *)this + 1);
  if (!v2)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data was invalid\n", v91, v92, v93, v94, v95, (char)"ACFUFTABFile");
    return;
  }
  int isOptimized = ACFUDataContainer::isOptimized(v2);
  int v4 = (ACFUDataContainer *)*((void *)this + 1);
  if (isOptimized)
  {
    CFDataRef v5 = ACFUDataContainer::copyData(v4, 0, 0x30uLL);
    if (!v5)
    {
      uint64_t v6 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v6, 2u, "%s::%s: failed to copy ftab header\n", v7, v8, v9, v10, v11, (char)"ACFUFTABFile");
      return;
    }
  }
  else
  {
    CFDataRef v5 = ACFUDataContainer::copyData(v4);
    if (!v5)
    {
      int v102 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v102, 2u, "%s::%s: could not obtain file data\n", v103, v104, v105, v106, v107, (char)"ACFUFTABFile");
      return;
    }
  }
  uint64_t v12 = v5;
  BytePtr = CFDataGetBytePtr(v5);
  uint64_t v14 = BytePtr;
  if (BytePtr)
  {
    int v15 = *((_DWORD *)BytePtr + 10);
    ACFUFile::fileVersionLog(this);
    uint64_t v17 = ACFULogging::getLogInstance(v16);
    ACFULogging::handleMessage((uint64_t)v17, 4u, "%s::%s: =========== FTAB Header ===========\n", v18, v19, v20, v21, v22, (char)"ACFUFTABFile");
    uint64_t v24 = ACFULogging::getLogInstance(v23);
    ACFULogging::handleMessage((uint64_t)v24, 4u, "%s::%s: Generation: %u, Valid: %u, BootNonce: 0x%08llx\n", v25, v26, v27, v28, v29, (char)"ACFUFTABFile");
    uint64_t v31 = ACFULogging::getLogInstance(v30);
    ACFULogging::handleMessage((uint64_t)v31, 4u, "%s::%s: Manifest Offset: %u, Manifest Length: %u, Magic: %s\n", v32, v33, v34, v35, v36, (char)"ACFUFTABFile");
    uint64_t v38 = ACFULogging::getLogInstance(v37);
    ACFULogging::handleMessage((uint64_t)v38, 4u, "%s::%s: Num Files: %u\n", v39, v40, v41, v42, v43, (char)"ACFUFTABFile");
    uint64_t v45 = ACFULogging::getLogInstance(v44);
    ACFULogging::handleMessage((uint64_t)v45, 4u, "%s::%s: =========== FTAB Header ===========\n\n", v46, v47, v48, v49, v50, (char)"ACFUFTABFile");
    uint64_t v52 = ACFULogging::getLogInstance(v51);
    ACFULogging::handleMessage((uint64_t)v52, 4u, "%s::%s: =========== FTAB Payloads ===========\n", v53, v54, v55, v56, v57, (char)"ACFUFTABFile");
    CFRelease(v12);
    if (v15)
    {
      unsigned int v59 = 48;
      while (1)
      {
        unint64_t v60 = ACFUDataContainer::copyData(*((ACFUDataContainer **)this + 1), v59, 0x10uLL);
        uint64_t v61 = v60;
        if (!v60) {
          break;
        }
        uint64_t v62 = (unsigned int *)CFDataGetBytePtr(v60);
        uint64_t v64 = v62[1];
        CC_LONG v63 = v62[2];
        char v113 = 4;
        LODWORD(v112) = *v62;
        BYTE4(v112) = 0;
        CFIndex v66 = &v14[v64];
        uint64_t v65 = ACFULogging::getLogInstance((ACFULogging *)v62);
        ACFULogging::handleMessage((uint64_t)v65, 4u, "%s::%s: Tag: %s :: Offset: 0x%04x Raw address: 0x%lx, size: %u\n", v67, v68, v69, v70, v71, (char)"ACFUFTABFile");
        if ((ACFUDataContainer::isOptimized(*((ACFUDataContainer **)this + 1)) & 1) == 0)
        {
          uint64_t v72 = CC_SHA384(v66, v63, md);
          if (v72 == md)
          {
            uint64_t v73 = ACFULogging::getLogInstance((ACFULogging *)v72);
            std::string::basic_string[abi:ne180100]<0>(&v108, "ACFUFTABFile");
            uint64_t v74 = std::string::append(&v108, "::");
            long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v109.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            int v76 = std::string::append(&v109, "prettyLog");
            long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            std::string::size_type v111 = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            ACFULogging::handleMessageBinary((uint64_t)v73, (uint64_t *)__p, 4, (uint64_t)md, 0x30uLL, 1);
            if (SHIBYTE(v111) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v109.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v108.__r_.__value_.__l.__data_);
            }
          }
        }
        CFRelease(v61);
        if (v113 < 0) {
          operator delete(v112);
        }
        v59 += 16;
        if (!--v15) {
          goto LABEL_21;
        }
      }
      unsigned int v84 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v84, 2u, "%s::%s: failed to copy ftab file header\n", v85, v86, v87, v88, v89, (char)"ACFUFTABFile");
    }
    else
    {
LABEL_21:
      uint64_t v78 = ACFULogging::getLogInstance(v58);
      ACFULogging::handleMessage((uint64_t)v78, 4u, "%s::%s: =========== FTAB Payloads ===========\n\n", v79, v80, v81, v82, v83, (char)"ACFUFTABFile");
    }
  }
  else
  {
    uint64_t v96 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v96, 2u, "%s::%s: failed to copy ftab header\n", v97, v98, v99, v100, v101, (char)"ACFUFTABFile");
    CFRelease(v12);
  }
}

void sub_217AC4F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

BOOL ACFUFTABFile::hasFile(ACFULogging *a1, const void **a2)
{
  if (*((void *)a1 + 1)) {
    return std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__count_unique<std::string>((uint64_t)a1 + 40, a2) != 0;
  }
  Loguint64_t Instance = ACFULogging::getLogInstance(a1);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data was invalid\n", v4, v5, v6, v7, v8, (char)"ACFUFTABFile");
  return 0;
}

void ACFUFTABFile::~ACFUFTABFile(ACFUFTABFile *this)
{
  *(void *)this = &unk_26C808208;
  os_log_t v2 = (char *)this + 72;
  int v3 = (char *)*((void *)this + 9);
  uint64_t v4 = (char *)this + 80;
  if (v3 != (char *)this + 80)
  {
    do
    {
      uint64_t v5 = (const void *)*((void *)v3 + 7);
      if (v5)
      {
        CFRelease(v5);
        *((void *)v3 + 7) = 0;
      }
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          int v3 = v7;
        }
        while (!v8);
      }
      int v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::destroy((uint64_t)v2, *((char **)this + 10));
  std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::destroy((uint64_t)this + 40, *((char **)this + 6));

  ACFUFile::~ACFUFile(this);
}

{
  void *v1;
  uint64_t vars8;

  ACFUFTABFile::~ACFUFTABFile(this);

  operator delete(v1);
}

uint64_t ACFUFTABFile::init(ACFUFTABFile *this, const __CFData *a2)
{
  *((void *)this + 3) = @"ftab.bin";
  uint64_t inited = ACFUFile::init(this, a2);
  if (inited)
  {
    uint64_t inited = (*(uint64_t (**)(ACFUFTABFile *))(*(void *)this + 88))(this);
    if (inited)
    {
      uint64_t inited = ACFUFTABFile::initCache(this);
      if (inited)
      {
        uint64_t inited = ACFUFTABFile::isCacheValid(this);
        if (inited) {
          return 1;
        }
        uint64_t v5 = "%s::%s: cache is invalid\n";
      }
      else
      {
        uint64_t v5 = "%s::%s: failed to initialize file cache\n";
      }
    }
    else
    {
      uint64_t v5 = "%s::%s: firmware file is invalid\n";
    }
  }
  else
  {
    uint64_t v5 = "%s::%s: firmware file failed to initialize\n";
  }
  Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)inited);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v5, v7, v8, v9, v10, v11, (char)"ACFUFTABFile");
  return 0;
}

uint64_t ACFUFTABFile::initCache(ACFUFTABFile *this)
{
  os_log_t v2 = (ACFULogging *)*((void *)this + 1);
  if (!v2)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: no file data?!\n", v41, v42, v43, v44, v45, (char)"ACFUFTABFile");
    goto LABEL_26;
  }
  if (*((void *)this + 7))
  {
    int v3 = ACFULogging::getLogInstance(v2);
    ACFULogging::handleMessage((uint64_t)v3, 4u, "%s::%s: ftab cache had entries before ftab container was initialized. Clearing cache before moving on.\n", v4, v5, v6, v7, v8, (char)"ACFUFTABFile");
    std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::destroy((uint64_t)this + 40, *((char **)this + 6));
    *((void *)this + 5) = (char *)this + 48;
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    os_log_t v2 = (ACFULogging *)*((void *)this + 1);
  }
  uint64_t v9 = ACFUDataContainer::copyData(v2, 0, 0x30uLL);
  if (!v9)
  {
    uint64_t v46 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v46, 2u, "%s::%s: failed to copy ftab header\n", v47, v48, v49, v50, v51, (char)"ACFUFTABFile");
    goto LABEL_26;
  }
  uint64_t v10 = v9;
  BytePtr = CFDataGetBytePtr(v9);
  if (BytePtr)
  {
    int v12 = *((_DWORD *)BytePtr + 10);
    CFRelease(v10);
    if (v12)
    {
      char v13 = 0;
      int v14 = v12 - 1;
      unsigned int v15 = 48;
      do
      {
        uint64_t v16 = ACFUDataContainer::copyData(*((ACFUDataContainer **)this + 1), v15, 0x10uLL);
        if (!v16)
        {
          uint64_t v28 = ACFULogging::getLogInstance(0);
          ACFULogging::handleMessage((uint64_t)v28, 2u, "%s::%s: failed to copy ftab file header\n", v29, v30, v31, v32, v33, (char)"ACFUFTABFile");
          char v19 = v13;
          return v19 & 1;
        }
        uint64_t v10 = v16;
        uint64_t v17 = CFDataGetBytePtr(v16);
        if (!v17)
        {
          uint64_t v34 = ACFULogging::getLogInstance(0);
          ACFULogging::handleMessage((uint64_t)v34, 2u, "%s::%s: failed to copy file header\n", v35, v36, v37, v38, v39, (char)"ACFUFTABFile");
          char v19 = v13;
          goto LABEL_21;
        }
        char v60 = 4;
        LODWORD(__p) = *(_DWORD *)v17;
        BYTE4(__p) = 0;
        uint64_t updated = ACFUFTABFile::updateCache((uint64_t)this, (uint64_t)&__p, *((_DWORD *)v17 + 1), *((_DWORD *)v17 + 2));
        char v19 = updated;
        if (updated)
        {
          CFRelease(v10);
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v22 = ACFULogging::getLogInstance((ACFULogging *)updated);
          ACFULogging::handleMessage((uint64_t)v22, 2u, "%s::%s: failed to initialize cache\n", v23, v24, v25, v26, v27, (char)"ACFUFTABFile");
        }
        if (v60 < 0) {
          operator delete(__p);
        }
        if (v14-- != 0) {
          char v21 = v19;
        }
        else {
          char v21 = 0;
        }
        v15 += 16;
        char v13 = 1;
      }
      while ((v21 & 1) != 0);
      if (!v10) {
        return v19 & 1;
      }
      goto LABEL_21;
    }
LABEL_26:
    char v19 = 0;
    return v19 & 1;
  }
  uint64_t v53 = ACFULogging::getLogInstance(0);
  ACFULogging::handleMessage((uint64_t)v53, 2u, "%s::%s: failed to copy ftab header\n", v54, v55, v56, v57, v58, (char)"ACFUFTABFile");
  char v19 = 0;
LABEL_21:
  CFRelease(v10);
  return v19 & 1;
}

void sub_217AC5434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFUFTABFile::init(ACFUFTABFile *this, __CFData *a2)
{
  *((void *)this + 3) = @"ftab.bin";
  uint64_t inited = ACFUFile::init(this, a2);
  if (inited)
  {
    uint64_t inited = (*(uint64_t (**)(ACFUFTABFile *))(*(void *)this + 88))(this);
    if (inited)
    {
      uint64_t inited = ACFUFTABFile::initCache(this);
      if (inited)
      {
        uint64_t inited = ACFUFTABFile::isCacheValid(this);
        if (inited) {
          return 1;
        }
        uint64_t v5 = "%s::%s: cache is invalid\n";
      }
      else
      {
        uint64_t v5 = "%s::%s: failed to initialize file cache\n";
      }
    }
    else
    {
      uint64_t v5 = "%s::%s: firmware file is invalid\n";
    }
  }
  else
  {
    uint64_t v5 = "%s::%s: firmware file failed to initialize\n";
  }
  Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)inited);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v5, v7, v8, v9, v10, v11, (char)"ACFUFTABFile");
  return 0;
}

uint64_t ACFUFTABFile::init(ACFUFTABFile *this, const __CFString *a2, const __CFString *a3)
{
  *((void *)this + 3) = @"ftab.bin";
  uint64_t inited = ACFUFile::init(this, a2, a3);
  if (inited)
  {
    uint64_t inited = (*(uint64_t (**)(ACFUFTABFile *))(*(void *)this + 88))(this);
    if (inited)
    {
      uint64_t inited = ACFUFTABFile::initCache(this);
      if (inited)
      {
        uint64_t inited = ACFUFTABFile::isCacheValid(this);
        if (inited) {
          return 1;
        }
        uint64_t v6 = "%s::%s: cache is invalid\n";
      }
      else
      {
        uint64_t v6 = "%s::%s: failed to initialize file cache\n";
      }
    }
    else
    {
      uint64_t v6 = "%s::%s: firmware file is invalid\n";
    }
  }
  else
  {
    uint64_t v6 = "%s::%s: firmware file failed to initialize\n";
  }
  Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)inited);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v6, v8, v9, v10, v11, v12, (char)"ACFUFTABFile");
  return 0;
}

uint64_t ACFUFTABFile::isValidFile(ACFUFTABFile *this)
{
  return ACFUFTABFile::isValidFileData(this, 0, 0);
}

ACFULogging *ACFUFTABFile::getFileSizeByFileName(uint64_t a1, const void **a2)
{
  int v3 = *(ACFUDataContainer **)(a1 + 8);
  if (v3)
  {
    if (!ACFUDataContainer::isOptimized(v3)
      || (uint64_t v5 = std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(a1 + 72, a2), a1 + 80 == v5))
    {
      uint64_t v13 = std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(a1 + 40, a2);
      if (a1 + 48 != v13) {
        return (ACFULogging *)*(unsigned int *)(v13 + 56);
      }
    }
    else
    {
      uint64_t result = (ACFULogging *)CFDataGetLength(*(CFDataRef *)(v5 + 56));
      if (result) {
        return result;
      }
      Loguint64_t Instance = ACFULogging::getLogInstance(result);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed obtain file size\n", v8, v9, v10, v11, v12, (char)"ACFUFTABFile");
    }
  }
  else
  {
    int v14 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v14, 2u, "%s::%s: file data was invalid\n", v15, v16, v17, v18, v19, (char)"ACFUFTABFile");
  }
  return 0;
}

uint64_t ACFUFTABFile::getVersion(ACFUFTABFile *this)
{
  os_log_t v2 = (ACFULogging *)std::string::basic_string[abi:ne180100]<0>(__p, "bver");
  if (*((void *)this + 1))
  {
    if ((*(unsigned int (**)(ACFUFTABFile *, void **))(*(void *)this + 16))(this, __p))
    {
      uint64_t v3 = (**(uint64_t (***)(ACFUFTABFile *, void **))this)(this, __p);
      goto LABEL_6;
    }
  }
  else
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v2);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file data was invalid\n", v5, v6, v7, v8, v9, (char)"ACFUFTABFile");
  }
  uint64_t v3 = 0;
LABEL_6:
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_217AC57D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  os_log_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        size_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      size_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_217AC5BA4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,void const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,void const*>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      BOOL v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      int v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      BOOL v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *BOOL v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        int v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    BOOL v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    int v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    BOOL v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    int v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,void const*>,std::__map_value_compare<std::string,std::__value_type<std::string,void const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void const*>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::__map_value_compare<std::string,std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ACFUFTABFile::CachedFileMetadata>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_217AC6258(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,void const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  CFDictionaryRef value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void RTKitFirmware::create(uint64_t a1@<X0>, const __CFData *a2@<X1>, uint64_t a3@<X2>, ACFUFirmware **a4@<X8>)
{
  int v8 = (ACFUFirmware *)operator new(0x58uLL);
  ACFUFirmware::ACFUFirmware(v8);
  *(void *)int v8 = &unk_26C808298;
  *((_DWORD *)v8 + 21) = 0;
  *a4 = v8;
  std::map<__CFString const*,std::string>::map[abi:ne180100](v9, a1);
  LOBYTE(a3) = RTKitFirmware::init((uint64_t)v8, (uint64_t)v9, a2, a3);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v9, (char *)v9[1]);
  if ((a3 & 1) == 0)
  {
    *a4 = 0;
    (*(void (**)(ACFUFirmware *))(*(void *)v8 + 56))(v8);
  }
}

void sub_217AC65BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&a10, a11);
  *uint64_t v12 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 56))(v11);
  _Unwind_Resume(a1);
}

uint64_t RTKitFirmware::init(uint64_t a1, uint64_t a2, const __CFData *a3, uint64_t a4)
{
  std::map<__CFString const*,std::string>::map[abi:ne180100]((uint64_t *)v48, a2);
  BOOL v7 = ACFUFirmware::init(a1, v48);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v48, (char *)v48[1]);
  if (!v7)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v8);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to initialize base object\n", v29, v30, v31, v32, v33, (char)"RTKitFirmware");
    return 0;
  }
  ACFUFTABFile::create(a3, a4, 0xFFFF, &v46);
  uint64_t v9 = v46;
  uint64_t v46 = 0;
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 56))(v10);
    uint64_t v11 = v46;
    uint64_t v46 = 0;
    if (v11) {
      (*(void (**)(ACFUFile *))(*(void *)v11 + 56))(v11);
    }
    uint64_t v9 = *(ACFUFile **)(a1 + 32);
  }
  if (!v9)
  {
    uint64_t v34 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v34, 2u, "%s::%s: failed to create firmware\n", v35, v36, v37, v38, v39, (char)"RTKitFirmware");
    return 0;
  }
  ACFUFTABFile::copyManifest(v12, (uint64_t)&v46);
  if (!v47)
  {
    uint64_t v20 = v46;
    *(void *)(a1 + 48) = v46;
    if (v20) {
      goto LABEL_11;
    }
    uint64_t v40 = ACFULogging::getLogInstance(v13);
    ACFULogging::handleMessage((uint64_t)v40, 2u, "%s::%s: failed to create manifest\n", v41, v42, v43, v44, v45, (char)"RTKitFirmware");
    return 0;
  }
  if (v47 != 1001)
  {
    uint64_t v22 = ACFULogging::getLogInstance(v13);
    ACFULogging::handleMessage((uint64_t)v22, 2u, "%s::%s: failed to get manifest, error: %d\n", v23, v24, v25, v26, v27, (char)"RTKitFirmware");
    return 0;
  }
  long long v14 = ACFULogging::getLogInstance(v13);
  ACFULogging::handleMessage((uint64_t)v14, 0, "%s::%s: No manifest present\n", v15, v16, v17, v18, v19, (char)"RTKitFirmware");
  *(void *)(a1 + 48) = 0;
LABEL_11:
  if ((a4 & 2) != 0) {
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(_DWORD *)(a1 + 56) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
}

void sub_217AC6870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
}

CFDataRef RTKitFirmware::copyFirmwareNonce(RTKitFirmware *this)
{
  uint64_t v1 = (ACFUFTABFile *)*((void *)this + 4);
  if (v1
  {
    *(void *)UInt8 bytes = ACFUFTABFile::getBootNonce(v1);
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 8);
  }
  else
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v1);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Invalid firmware file\n", v4, v5, v6, v7, v8, (char)"RTKitFirmware");
    return 0;
  }
}

uint64_t RTKitFirmware::setFirmwareNonce(RTKitFirmware *this, const __CFData *a2)
{
  int Length = (ACFULogging *)*((void *)this + 4);
  if (!Length
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Invalid firmware file\n", v8, v9, v10, v11, v12, (char)"RTKitFirmware");
    return 0;
  }
  if (!a2 || (uint64_t v4 = Length, Length = (ACFULogging *)CFDataGetLength(a2), Length != (ACFULogging *)8))
  {
    char v13 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v13, 2u, "%s::%s: Bad parameter\n", v14, v15, v16, v17, v18, (char)"RTKitFirmware");
    return 0;
  }
  uint64_t v5 = *(void *)CFDataGetBytePtr(a2);

  return ACFUFTABFile::setBootNonce(v4, v5);
}

uint64_t RTKitFirmware::openFirmwareInRestoreOptions(RTKitFirmware *this, CFDictionaryRef theDict)
{
  CFStringRef Value = CFDictionaryGetValue(theDict, @"FirmwareData");
  if (Value)
  {
    uint64_t v5 = Value;
    AMSupportSafeRetain();
    CFTypeID v6 = CFGetTypeID(v5);
    CFTypeID TypeID = (ACFULogging *)CFDataGetTypeID();
    if ((ACFULogging *)v6 == TypeID)
    {
      ACFUFTABFile::create((const __CFData *)v5, *((unsigned int *)this + 21), 0xFFFF, &v30);
      uint64_t v8 = v30;
      uint64_t v30 = 0;
      uint64_t v9 = (ACFULogging *)*((void *)this + 4);
      *((void *)this + 4) = v8;
      if (v9)
      {
        (*(void (**)(ACFULogging *))(*(void *)v9 + 56))(v9);
        uint64_t v9 = v30;
        uint64_t v30 = 0;
        if (v9) {
          uint64_t v9 = (ACFULogging *)(*(uint64_t (**)(ACFULogging *))(*(void *)v9 + 56))(v9);
        }
        uint64_t v8 = (ACFUFile *)*((void *)this + 4);
      }
      if (v8)
      {
        uint64_t v10 = ACFUFirmware::openFirmwareInRestoreOptions((const void **)this, theDict);
      }
      else
      {
        Loguint64_t Instance = ACFULogging::getLogInstance(v9);
        ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Failed to open firmware in restore options\n", v25, v26, v27, v28, v29, (char)"RTKitFirmware");
        uint64_t v10 = 1000;
      }
    }
    else
    {
      uint64_t v18 = ACFULogging::getLogInstance(TypeID);
      ACFULogging::handleMessage((uint64_t)v18, 2u, "%s::%s: Unrecognized CF object!\n", v19, v20, v21, v22, v23, (char)"RTKitFirmware");
      uint64_t v10 = 4002;
    }
    CFRelease(v5);
  }
  else
  {
    uint64_t v12 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v12, 2u, "%s::%s: Failed to find firmware in restore options\n", v13, v14, v15, v16, v17, (char)"RTKitFirmware");
    return 4001;
  }
  return v10;
}

uint64_t RTKitFirmware::saveFirmware(RTKitFirmware *this)
{
  uint64_t v2 = (ACFUFTABFile *)*((void *)this + 4);
  if (v2
  {
    uint64_t v3 = ACFUFTABFile::setFTABValidity(v2, 1);
    if (v3)
    {
      if (*((void *)this + 6))
      {
        return ACFUFirmware::saveFirmware(this, v4);
      }
      else
      {
        Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)v3);
        ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: No manifest provided with firmware. Manifest is required!\n", v19, v20, v21, v22, v23, (char)"RTKitFirmware");
        return 1001;
      }
    }
    else
    {
      uint64_t v12 = ACFULogging::getLogInstance((ACFULogging *)v3);
      ACFULogging::handleMessage((uint64_t)v12, 2u, "%s::%s: Failed to set ftab validity\n", v13, v14, v15, v16, v17, (char)"RTKitFirmware");
      return 1004;
    }
  }
  else
  {
    CFTypeID v6 = ACFULogging::getLogInstance(v2);
    ACFULogging::handleMessage((uint64_t)v6, 2u, "%s::%s: Invalid firmware file\n", v7, v8, v9, v10, v11, (char)"RTKitFirmware");
    return 1000;
  }
}

uint64_t RTKitFirmware::setManifest(RTKitFirmware *this, const __CFData *a2)
{
  CFURLRef v4 = (ACFUDataContainer **)*((void *)this + 4);
  if (v4
  {
    uint64_t v5 = ACFUFTABFile::setManifest(v4, a2);
    if ((v5 & 1) == 0)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)v5);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Failed to set manifest\n", v15, v16, v17, v18, v19, (char)"RTKitFirmware");
      return 0;
    }
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v7 = ACFULogging::getLogInstance((ACFULogging *)v4);
    ACFULogging::handleMessage((uint64_t)v7, 2u, "%s::%s: Invalid firmware file\n", v8, v9, v10, v11, v12, (char)"RTKitFirmware");
    uint64_t v6 = 0;
  }
  ACFUFirmware::setManifest(this, a2);
  return v6;
}

uint64_t RTKitFirmware::getFileSizeByFileName(uint64_t a1)
{
  uint64_t v1 = *(ACFULogging **)(a1 + 32);
  if (v1
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 32);
    return v2();
  }
  else
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v1);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Invalid firmware file\n", v5, v6, v7, v8, v9, (char)"RTKitFirmware");
    return 0;
  }
}

void RTKitFirmware::~RTKitFirmware(RTKitFirmware *this)
{
  ACFUFirmware::~ACFUFirmware(this);

  operator delete(v1);
}

uint64_t *std::map<__CFString const*,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<__CFString const*,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<__CFString const*,std::string>,std::__tree_node<std::__value_type<__CFString const*,std::string>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_217AC6F6C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<__CFString const*,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<__CFString const*,std::string>,std::__tree_node<std::__value_type<__CFString const*,std::string>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    CFURLRef v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          CFURLRef v4 = v8;
        }
        while (!v9);
      }
      CFURLRef v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__find_equal<__CFString const*>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__construct_node<std::pair<__CFString const* const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__construct_node<std::pair<__CFString const* const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((void *)v6 + 4) = *(void *)a2;
  uint64_t v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_217AC7124(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<__CFString const*,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<__CFString const*,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void ACFUFirmware::ACFUFirmware(ACFUFirmware *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)this = &unk_26C808310;
  *((void *)this + 1) = (char *)this + 16;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 80) = 0;
}

void ACFUFirmware::logFirmwareVersion(ACFUFile **this)
{
}

uint64_t ACFUFirmware::copyFWDataByTag(ACFUFirmware *this, const __CFString *a2)
{
  CFStringRef v18 = a2;
  uint64_t v2 = (uint64_t (***)(void, void *))*((void *)this + 4);
  if (v2)
  {
    uint64_t v5 = (void *)*((void *)this + 2);
    uint64_t v3 = (char *)this + 16;
    CFURLRef v4 = v5;
    if (v5)
    {
      uint64_t v6 = v3;
      do
      {
        unint64_t v7 = v4[4];
        BOOL v8 = v7 >= (unint64_t)a2;
        if (v7 >= (unint64_t)a2) {
          uint64_t v9 = v4;
        }
        else {
          uint64_t v9 = v4 + 1;
        }
        if (v8) {
          uint64_t v6 = (char *)v4;
        }
        CFURLRef v4 = (void *)*v9;
      }
      while (*v9);
      if (v6 != v3 && *((void *)v6 + 4) <= (unint64_t)a2)
      {
        uint64_t v11 = std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at((uint64_t)(v3 - 8), (unint64_t *)&v18);
        return (**v2)(v2, v11);
      }
    }
  }
  else
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: file not open\n", v13, v14, v15, v16, v17, (char)"ACFUFirmware");
  }
  return 0;
}

const void *ACFUFirmware::getMeasureDataWithTag(CFDictionaryRef *this, const __CFString *a2)
{
  if (a2) {
    return CFDictionaryGetValue(this[5], a2);
  }
  else {
    return 0;
  }
}

uint64_t ACFUFirmware::saveFirmware(ACFUFirmware *this, const __CFURL *a2)
{
  if (*((void *)this + 4))
  {
    uint64_t v3 = (ACFUCommon *)*((void *)this + 8);
    if (v3)
    {
      if (!ACFUCommon::doesPathExist(v3, a2)
        && (CFURLRef v4 = (ACFULogging *)MEMORY[0x21D453D50](*((void *)this + 8)), v4))
      {
        Loguint64_t Instance = ACFULogging::getLogInstance(v4);
        ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to create directory to save firmware (status: %d)\n", v26, v27, v28, v29, v30, (char)"ACFUFirmware");
        return 1003;
      }
      else
      {
        uint64_t v5 = (ACFULogging *)ACFUFile::saveToPath(*((ACFUFile **)this + 4), *((const __CFURL **)this + 8));
        if (v5)
        {
          return 0;
        }
        else
        {
          uint64_t v19 = ACFULogging::getLogInstance(v5);
          ACFULogging::handleMessage((uint64_t)v19, 2u, "%s::%s: Failed to save packaged firmware file\n", v20, v21, v22, v23, v24, (char)"ACFUFirmware");
          return 1004;
        }
      }
    }
    else
    {
      uint64_t v13 = ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage((uint64_t)v13, 2u, "%s::%s: savePath for FW not specified. This needs to be specified.\n", v14, v15, v16, v17, v18, (char)"ACFUFirmware");
      return 1014;
    }
  }
  else
  {
    unint64_t v7 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v7, 2u, "%s::%s: fFirmwareFile has not been initialized.\n", v8, v9, v10, v11, v12, (char)"ACFUFirmware");
    return 1000;
  }
}

uint64_t ACFUFirmware::openFirmwareInRestoreOptions(const void **this, CFDictionaryRef theDict)
{
  uint64_t Value = (uint64_t)CFDictionaryGetValue(theDict, this[9]);
  if (!Value)
  {
    uint64_t v6 = 1001;
    uint64_t v8 = "%s::%s: Manifest is not available\n";
LABEL_9:
    Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)Value);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v8, v10, v11, v12, v13, v14, (char)"ACFUFirmware");
    return v6;
  }
  uint64_t v4 = Value;
  CFTypeID v5 = CFGetTypeID((CFTypeRef)Value);
  uint64_t Value = CFDataGetTypeID();
  if (v5 != Value)
  {
    uint64_t v6 = 4002;
    uint64_t v8 = "%s::%s: Manifest is not present in expected data type\n";
    goto LABEL_9;
  }
  (*((void (**)(const void **, uint64_t))*this + 9))(this, v4);
  uint64_t Value = (*((uint64_t (**)(const void **))*this + 8))(this);
  if ((Value & 1) == 0)
  {
    uint64_t v6 = 1013;
    uint64_t v8 = "%s::%s: Failed to measure firmware\n";
    goto LABEL_9;
  }
  return 0;
}

void ACFUFirmware::~ACFUFirmware(ACFUFirmware *this)
{
  *(void *)this = &unk_26C808310;
  uint64_t v2 = (const void *)*((void *)this + 6);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 6) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 8);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 8) = 0;
  }
  uint64_t v4 = (const void *)*((void *)this + 9);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 9) = 0;
  }
  CFTypeID v5 = (const void *)*((void *)this + 5);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 5) = 0;
  }
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

uint64_t ACFUFirmware::getFileSizeByFileName(ACFULogging *a1)
{
  Loguint64_t Instance = ACFULogging::getLogInstance(a1);
  ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: This function has not been implemented\n", v2, v3, v4, v5, v6, (char)"ACFUFirmware");
  return 0;
}

CFDataRef ACFUFirmware::hashData(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v38 = *MEMORY[0x263EF8340];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23)) {
      goto LABEL_3;
    }
LABEL_9:
    Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)a1);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: no firmware file provided\n", v7, v8, v9, v10, v11, (char)"ACFUFirmware");
    return 0;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_9;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v29 = ACFULogging::getLogInstance((ACFULogging *)a1);
    ACFULogging::handleMessage((uint64_t)v29, 2u, "%s::%s: empty file\n", v30, v31, v32, v33, v34, (char)"ACFUFirmware");
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  switch(v5)
  {
    case 2:
      CC_SHA512_Init(&v35);
      break;
    case 1:
      CC_SHA384_Init(&v35);
      break;
    case 0:
      CC_SHA256_Init(&c);
      break;
  }
  int v12 = 0;
  do
  {
    if (v3 >= 0x100000) {
      CC_LONG v13 = 0x100000;
    }
    else {
      CC_LONG v13 = v3;
    }
    uint64_t v14 = (ACFULogging *)(*(void *(**)(unsigned __int8 *__return_ptr))(**(void **)(a1 + 32) + 8))(md);
    uint64_t v15 = *(ACFUDataContainer::DirectDataRef **)md;
    if (!*(void *)md)
    {
      uint64_t v23 = ACFULogging::getLogInstance(v14);
      ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: failed to obtain file data\n", v24, v25, v26, v27, v28, (char)"ACFUFirmware");
      return 0;
    }
    int v16 = *(_DWORD *)(a1 + 56);
    if (v16)
    {
      if (v16 == 1)
      {
        DataPtr = (const void *)ACFUDataContainer::DirectDataRef::getDataPtr(*(ACFUDataContainer::DirectDataRef **)md);
        CC_SHA384_Update(&v35, DataPtr, v13);
      }
      else if (v16 == 2)
      {
        uint64_t v17 = (const void *)ACFUDataContainer::DirectDataRef::getDataPtr(*(ACFUDataContainer::DirectDataRef **)md);
        CC_SHA512_Update(&v35, v17, v13);
      }
    }
    else
    {
      uint64_t v18 = (const void *)ACFUDataContainer::DirectDataRef::getDataPtr(*(ACFUDataContainer::DirectDataRef **)md);
      CC_SHA256_Update(&c, v18, v13);
    }
    v12 += v13;
    v3 -= v13;
    ACFUDataContainer::DirectDataRef::~DirectDataRef(v15);
    operator delete(v20);
  }
  while (v3);
  int v21 = *(_DWORD *)(a1 + 56);
  if (v21 == 2)
  {
    CC_SHA512_Final(md, &v35);
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], md, 64);
  }
  else if (v21 == 1)
  {
    CC_SHA384_Final(md, &v35);
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], md, 48);
  }
  else
  {
    if (v21) {
      return 0;
    }
    CC_SHA256_Final(md, &c);
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], md, 32);
  }
}

void sub_217AC7924(_Unwind_Exception *exception_object)
{
}

CFDataRef ACFUFirmware::hashData(ACFUFirmware *this, CFDataRef theData)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v3 = *((_DWORD *)this + 14);
  switch(v3)
  {
    case 2:
      BytePtr = CFDataGetBytePtr(theData);
      CC_LONG Length = CFDataGetLength(theData);
      uint64_t v11 = CC_SHA512(BytePtr, Length, md);
      if (v11 == md)
      {
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFIndex v8 = 64;
        return CFDataCreate(v7, md, v8);
      }
      Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)v11);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: SHA512 failed\n", v23, v24, v25, v26, v27, (char)"ACFUFirmware");
      break;
    case 1:
      int v12 = CFDataGetBytePtr(theData);
      CC_LONG v13 = CFDataGetLength(theData);
      uint64_t v14 = CC_SHA384(v12, v13, md);
      if (v14 == md)
      {
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFIndex v8 = 48;
        return CFDataCreate(v7, md, v8);
      }
      uint64_t v28 = ACFULogging::getLogInstance((ACFULogging *)v14);
      ACFULogging::handleMessage((uint64_t)v28, 2u, "%s::%s: SHA384 failed\n", v29, v30, v31, v32, v33, (char)"ACFUFirmware");
      break;
    case 0:
      uint64_t v4 = CFDataGetBytePtr(theData);
      CC_LONG v5 = CFDataGetLength(theData);
      uint64_t v6 = CC_SHA256(v4, v5, md);
      if (v6 == md)
      {
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFIndex v8 = 32;
        return CFDataCreate(v7, md, v8);
      }
      int v16 = ACFULogging::getLogInstance((ACFULogging *)v6);
      ACFULogging::handleMessage((uint64_t)v16, 2u, "%s::%s: SHA256 failed\n", v17, v18, v19, v20, v21, (char)"ACFUFirmware");
      break;
  }
  return 0;
}

BOOL ACFUFirmware::init(uint64_t a1, uint64_t **a2)
{
  int v3 = (uint64_t **)(a1 + 8);
  if (v3 != a2) {
    std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<__CFString const*,std::string>,std::__tree_node<std::__value_type<__CFString const*,std::string>,void *> *,long>>(v3, *a2, a2 + 1);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(void *)(a1 + 40) = Mutable;
  if (!Mutable)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Failed to allocate measurements dict\n", v7, v8, v9, v10, v11, (char)"ACFUFirmware");
  }
  return Mutable != 0;
}

uint64_t ACFUFirmware::measureFW(ACFUFirmware *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  uint64_t v2 = (char *)this + 16;
  if (v1 == (void *)((char *)this + 16)) {
    return 1;
  }
  while (1)
  {
    if (!*((unsigned char *)this + 80))
    {
      CFDataRef v6 = (const __CFData *)ACFUFirmware::copyFWDataByTag(this, (const __CFString *)v1[4]);
      if (v6)
      {
        CFDataRef v7 = v6;
        CFDataRef v8 = ACFUFirmware::hashData(this, v6);
        CFRelease(v7);
        if (!v8) {
          break;
        }
        goto LABEL_16;
      }
      ACFUCommon::stringFromCFString((const __CFString *)v1[4], &__s);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__s.__r_.__value_.__l.__size_)
        {
          std::string::__init_copy_ctor_external(&v28, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          goto LABEL_29;
        }
      }
      else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
      {
        std::string v28 = __s;
        goto LABEL_29;
      }
      uint64_t v10 = (ACFULogging *)std::string::basic_string[abi:ne180100]<0>(&v28, "UNDEF");
LABEL_29:
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      goto LABEL_31;
    }
    unsigned int v4 = (*(uint64_t (**)(ACFUFirmware *, void *))(*(void *)this + 40))(this, v1 + 5);
    if (!v4)
    {
      ACFUCommon::stringFromCFString((const __CFString *)v1[4], &__s);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__s.__r_.__value_.__l.__size_)
        {
          std::string::__init_copy_ctor_external(&v28, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          goto LABEL_23;
        }
      }
      else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
      {
        std::string v28 = __s;
        goto LABEL_23;
      }
      uint64_t v10 = (ACFULogging *)std::string::basic_string[abi:ne180100]<0>(&v28, "UNDEF");
LABEL_23:
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
LABEL_31:
      std::string __s = v28;
      Loguint64_t Instance = ACFULogging::getLogInstance(v10);
      ACFULogging::handleMessage((uint64_t)LogInstance, 3u, "%s::%s: no fw for tag '%s'\n", v12, v13, v14, v15, v16, (char)"ACFUFirmware");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      goto LABEL_33;
    }
    unsigned int v5 = v4;
    if (*((char *)v1 + 63) < 0) {
      std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v1[5], v1[6]);
    }
    else {
      std::string v27 = *(std::string *)(v1 + 5);
    }
    uint64_t v9 = ACFUFirmware::hashData((uint64_t)this, (uint64_t)&v27, v5);
    CFDataRef v8 = v9;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (!v8) {
      break;
    }
LABEL_16:
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 5), (const void *)v1[4], v8);
    CFRelease(v8);
LABEL_33:
    uint64_t v17 = (char *)v1[1];
    if (v17)
    {
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = *(char **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v18 = (char *)v1[2];
        BOOL v19 = *(void *)v18 == (void)v1;
        uint64_t v1 = v18;
      }
      while (!v19);
    }
    uint64_t v1 = v18;
    if (v18 == v2) {
      return 1;
    }
  }
  uint64_t v21 = ACFULogging::getLogInstance(v9);
  ACFULogging::handleMessage((uint64_t)v21, 2u, "%s::%s: failed to measure fw\n", v22, v23, v24, v25, v26, (char)"ACFUFirmware");
  return 0;
}

void sub_217AC7EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ACFUFirmware::setManifest(ACFUFirmware *this, const __CFData *a2)
{
  unsigned int v4 = (const void *)*((void *)this + 6);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 6) = 0;
  }
  AMSupportSafeRetain();
  *((void *)this + 6) = a2;
  unsigned int v5 = ACFUFirmware::hashData(this, a2);
  Loguint64_t Instance = ACFULogging::getLogInstance(v5);
  if (v5)
  {
    ACFULogging::handleMessage((uint64_t)LogInstance, 0, "%s::%s: Manifest digest\n", v7, v8, v9, v10, v11, (char)"ACFUFirmware");
    uint64_t v13 = ACFULogging::getLogInstance(v12);
    std::string::basic_string[abi:ne180100]<0>(&v21, "ACFUFirmware");
    uint64_t v14 = std::string::append(&v21, "::");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v22, "setManifest");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v16->__r_.__value_.__r.__words[2];
    long long v23 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    BytePtr = CFDataGetBytePtr(v5);
    CFIndex Length = CFDataGetLength(v5);
    ACFULogging::handleMessageBinary((uint64_t)v13, (uint64_t *)&v23, 0, (uint64_t)BytePtr, Length, 1);
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    CFRelease(v5);
  }
  else
  {
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Digest of manifest failed\n", v7, v8, v9, v10, v11, (char)"ACFUFirmware");
  }
  return v5 != 0;
}

void sub_217AC806C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<__CFString const*,std::string>,std::__tree_node<std::__value_type<__CFString const*,std::string>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    CFDataRef v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    int v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    long long v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      long long v15 = std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v9 + 5));
          std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__node_insert_multi(v5, v16);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            long long v15 = std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_multi<std::pair<__CFString const* const,std::string> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_217AC8214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  int v3 = a1 + 1;
  unsigned int v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        int v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        unsigned int v4 = (uint64_t *)*v4;
        unsigned int v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unsigned int v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unsigned int v5 = v3 + 1;
  }
  else
  {
    unsigned int v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

void *std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    int v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        unsigned int v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          unsigned int v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; int v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_multi<std::pair<__CFString const* const,std::string> const&>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__construct_node<std::pair<__CFString const* const,std::string> const&>(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  unsigned int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (v7[4] >= (unint64_t)v4[4]) {
          break;
        }
        unsigned int v4 = (uint64_t *)*v4;
        unsigned int v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unsigned int v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unsigned int v5 = v3 + 1;
  }
  else
  {
    unsigned int v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

void ACFUFile::ACFUFile(ACFUFile *this)
{
  *(void *)this = &unk_26C808380;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
}

void ACFUFile::fileVersionLog(ACFUFile *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  CFDataRef v1 = (const __CFData *)(*(uint64_t (**)(ACFUFile *))(*(void *)this + 96))(this);
  if (v1)
  {
    CFDataRef v2 = v1;
    BytePtr = CFDataGetBytePtr(v1);
    CFIndex Length = (ACFULogging *)CFDataGetLength(v2);
    if ((unint64_t)Length > 0x7F)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance(Length);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: data exceeds local buffer size\n", v20, v21, v22, v23, v24, (char)"ACFUFile");
    }
    else
    {
      if (Length)
      {
        unsigned int v5 = v25;
        do
        {
          char v6 = *BytePtr++;
          *v5++ = v6;
          CFIndex Length = (ACFULogging *)((char *)Length - 1);
        }
        while (Length);
      }
      HIBYTE(v26) = 0;
      uint64_t v7 = ACFULogging::getLogInstance(Length);
      ACFULogging::handleMessage((uint64_t)v7, 0, "%s::%s: Firmware Version: %s\n", v8, v9, v10, v11, v12, (char)"ACFUFile");
    }
    CFRelease(v2);
  }
  else
  {
    uint64_t v13 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v13, 2u, "%s::%s: no data to log\n", v14, v15, v16, v17, v18, (char)"ACFUFile");
  }
}

uint64_t ACFUFile::saveToPath(ACFUFile *this, const __CFURL *a2)
{
  if (!a2)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: bad parameters\n", v25, v26, v27, v28, v29, (char)"ACFUFile");
    return 0;
  }
  if (!*((void *)this + 3))
  {
    uint64_t v30 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v30, 2u, "%s::%s: file name not specified\n", v31, v32, v33, v34, v35, (char)"ACFUFile");
    return 0;
  }
  uint64_t v3 = (ACFUDataContainer *)*((void *)this + 1);
  if (!v3)
  {
    uint64_t v36 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v36, 2u, "%s::%s: no file data?!\n", v37, v38, v39, v40, v41, (char)"ACFUFile");
    return 0;
  }
  int isOptimized = (ACFULogging *)ACFUDataContainer::isOptimized(v3);
  if (isOptimized)
  {
    uint64_t v42 = ACFULogging::getLogInstance(isOptimized);
    ACFULogging::handleMessage((uint64_t)v42, 2u, "%s::%s: cannot save data using optimized flow\n", v43, v44, v45, v46, v47, (char)"ACFUFile");
    return 0;
  }
  char v6 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, *((CFStringRef *)this + 3), 0);
  if (!v6)
  {
    uint64_t v48 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v48, 2u, "%s::%s: could not create URL to file\n", v49, v50, v51, v52, v53, (char)"ACFUFile");
    return 0;
  }
  uint64_t v8 = v6;
  if (!ACFUCommon::doesPathExist(v6, v7))
  {
    uint64_t v9 = (ACFULogging *)MEMORY[0x21D453D50](v8);
    if (v9)
    {
      uint64_t v72 = ACFULogging::getLogInstance(v9);
      ACFULogging::handleMessage((uint64_t)v72, 2u, "%s::%s: failed to create directory to save firmware (status: %d)\n", v73, v74, v75, v76, v77, (char)"ACFUFile");
      goto LABEL_26;
    }
  }
  if (!ACFUDataContainer::getData(*((ACFUDataContainer **)this + 1)))
  {
    uint64_t v54 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v54, 2u, "%s::%s: failed to obtain reference of data from data container\n", v55, v56, v57, v58, v59, (char)"ACFUFile");
LABEL_26:
    uint64_t v22 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = (ACFULogging *)AMSupportWriteDataToFileURL();
  if (v10)
  {
    char v60 = ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage((uint64_t)v60, 2u, "%s::%s: failed to save file (%d)\n", v61, v62, v63, v64, v65, (char)"ACFUFile");
    goto LABEL_26;
  }
  CFIndex Length = ACFUDataContainer::getLength(*((const __CFString ***)this + 1));
  FileSize = (ACFULogging *)ACFUCommon::getFileSize(v8, v12);
  uint64_t v14 = ACFULogging::getLogInstance(FileSize);
  CFStringRef v15 = CFURLGetString(v8);
  ACFUCommon::stringFromCFString(v15, &__p);
  ACFULogging::handleMessage((uint64_t)v14, 0, "%s::%s: Wrote %zu of %zu bytes to %s\n", v16, v17, v18, v19, v20, (char)"ACFUFile");
  if (v79 < 0) {
    operator delete(__p);
  }
  if ((ACFULogging *)Length != FileSize)
  {
    CFIndex v66 = ACFULogging::getLogInstance(v21);
    ACFULogging::handleMessage((uint64_t)v66, 2u, "%s::%s: Failed to write some or all of data\n", v67, v68, v69, v70, v71, (char)"ACFUFile");
    goto LABEL_26;
  }
  uint64_t v22 = 1;
LABEL_14:
  CFRelease(v8);
  return v22;
}

void sub_217AC87F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFData *ACFUFile::copyFirmwareContainer(ACFUDataContainer **this)
{
  return ACFUDataContainer::copyData(this[1]);
}

void ACFUFile::~ACFUFile(ACFUFile *this)
{
  *(void *)this = &unk_26C808380;
  CFDataRef v2 = (const void *)*((void *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 2) = 0;
  }
  std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100]((ACFUDataContainer **)this + 1, 0);
}

uint64_t ACFUFile::init(ACFUFile *this, const __CFData *a2)
{
  if (!*((void *)this + 3))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: no file name specified\n", v12, v13, v14, v15, v16, (char)"ACFUFile");
    return 0;
  }
  if (!a2)
  {
    uint64_t v17 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v17, 2u, "%s::%s: bad parameter!\n", v18, v19, v20, v21, v22, (char)"ACFUFile");
    return 0;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  unsigned int v5 = (ACFULogging *)CFGetTypeID(a2);
  if ((ACFULogging *)TypeID != v5)
  {
    uint64_t v23 = ACFULogging::getLogInstance(v5);
    ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: data is of an unsupported type\n", v24, v25, v26, v27, v28, (char)"ACFUFile");
    return 0;
  }
  ACFUDataContainer::create(a2, &v35);
  char v6 = (ACFUDataContainer **)((char *)this + 8);
  CFURLRef v7 = v35;
  uint64_t v35 = 0;
  std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](v6, v7);
  uint64_t v8 = v35;
  uint64_t v35 = 0;
  if (v8)
  {
    ACFUDataContainer::~ACFUDataContainer(v8);
    operator delete(v9);
  }
  if (!*v6)
  {
    uint64_t v29 = ACFULogging::getLogInstance(v8);
    ACFULogging::handleMessage((uint64_t)v29, 2u, "%s::%s: failed to create data container\n", v30, v31, v32, v33, v34, (char)"ACFUFile");
    return 0;
  }
  return 1;
}

uint64_t ACFUFile::init(ACFUFile *this, __CFData *a2)
{
  if (!*((void *)this + 3))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: no file name specified\n", v12, v13, v14, v15, v16, (char)"ACFUFile");
    return 0;
  }
  if (!a2)
  {
    uint64_t v17 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v17, 2u, "%s::%s: bad parameter!\n", v18, v19, v20, v21, v22, (char)"ACFUFile");
    return 0;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  unsigned int v5 = (ACFULogging *)CFGetTypeID(a2);
  if ((ACFULogging *)TypeID != v5)
  {
    uint64_t v23 = ACFULogging::getLogInstance(v5);
    ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: data is of an unsupported type\n", v24, v25, v26, v27, v28, (char)"ACFUFile");
    return 0;
  }
  ACFUDataContainer::create(a2, &v35);
  char v6 = (ACFUDataContainer **)((char *)this + 8);
  CFURLRef v7 = v35;
  uint64_t v35 = 0;
  std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](v6, v7);
  uint64_t v8 = v35;
  uint64_t v35 = 0;
  if (v8)
  {
    ACFUDataContainer::~ACFUDataContainer(v8);
    operator delete(v9);
  }
  if (!*v6)
  {
    uint64_t v29 = ACFULogging::getLogInstance(v8);
    ACFULogging::handleMessage((uint64_t)v29, 2u, "%s::%s: failed to create data container\n", v30, v31, v32, v33, v34, (char)"ACFUFile");
    return 0;
  }
  return 1;
}

BOOL ACFUFile::init(ACFUFile *this, const __CFString *a2, const __CFString *a3)
{
  if (!a2)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: bad parameter!\n", v16, v17, v18, v19, v20, (char)"ACFUFile");
    return 0;
  }
  uint64_t v4 = *((void *)this + 3);
  if (!v4)
  {
    uint64_t v21 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v21, 2u, "%s::%s: file name does not exist\n", v22, v23, v24, v25, v26, (char)"ACFUFile");
    return 0;
  }
  char v6 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@/%@", a2, v4);
  if (!v6)
  {
    uint64_t v27 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v27, 2u, "%s::%s: failed to create ftab file path\n", v28, v29, v30, v31, v32, (char)"ACFUFile");
    return 0;
  }
  CFURLRef v7 = v6;
  ACFUDataContainer::create(v6, a3, &v39);
  uint64_t v8 = (ACFUDataContainer **)((char *)this + 8);
  uint64_t v9 = v39;
  uint64_t v39 = 0;
  std::unique_ptr<ACFUDataContainer>::reset[abi:ne180100](v8, v9);
  uint64_t v10 = v39;
  uint64_t v39 = 0;
  if (v10)
  {
    ACFUDataContainer::~ACFUDataContainer(v10);
    operator delete(v11);
  }
  uint64_t v12 = *v8;
  BOOL v13 = *v8 != 0;
  if (!v12)
  {
    uint64_t v33 = ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage((uint64_t)v33, 2u, "%s::%s: failed to create data container\n", v34, v35, v36, v37, v38, (char)"ACFUFile");
  }
  CFRelease(v7);
  return v13;
}

off_t ACFUCommon::getFileSize(ACFUCommon *this, const __CFURL *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  bzero(buffer, 0x400uLL);
  uint64_t v3 = (ACFULogging *)CFURLGetFileSystemRepresentation(this, 1u, buffer, 1024);
  if (!v3)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v3);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to get file system reprensetation\n", v10, v11, v12, v13, v14, (char)"ACFUCommon");
    off_t st_size = 0;
    int v5 = -1;
    goto LABEL_5;
  }
  uint64_t v4 = (ACFULogging *)open((const char *)buffer, 0);
  int v5 = (int)v4;
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v15 = ACFULogging::getLogInstance(v4);
    uint64_t v16 = __error();
    strerror(*v16);
    ACFULogging::handleMessage((uint64_t)v15, 2u, "%s::%s: failed to open file (%s)\n", v17, v18, v19, v20, v21, (char)"ACFUCommon");
    off_t st_size = 0;
    goto LABEL_5;
  }
  char v6 = (ACFULogging *)fstat((int)v4, &v28);
  if (v6)
  {
    uint64_t v22 = ACFULogging::getLogInstance(v6);
    ACFULogging::handleMessage((uint64_t)v22, 2u, "%s::%s: failed to get file stats\n", v23, v24, v25, v26, v27, (char)"ACFUCommon");
    off_t st_size = 0;
    if (!v5) {
      return st_size;
    }
    goto LABEL_5;
  }
  off_t st_size = v28.st_size;
  if (v5) {
LABEL_5:
  }
    close(v5);
  return st_size;
}

__CFData *ACFUCommon::createMutableFileDatafromFilePath(ACFUCommon *this, const __CFString *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v68 = *MEMORY[0x263EF8340];
  bzero(__ptr, 0x1000uLL);
  if (!v2)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v3);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: no file path provided\n", v31, v32, v33, v34, v35, (char)"ACFUCommon");
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t URLFromString = (ACFUCommon *)AMSupportCreateURLFromString();
  if (!URLFromString)
  {
    uint64_t v36 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v36, 2u, "%s::%s: failed to create url from string\n", v37, v38, v39, v40, v41, (char)"ACFUCommon");
    return 0;
  }
  CFURLRef v7 = URLFromString;
  off_t FileSize = ACFUCommon::getFileSize(URLFromString, v6);
  if (FileSize)
  {
    unint64_t v9 = FileSize;
    bzero(v67, 0x400uLL);
    uint64_t v10 = (ACFULogging *)CFURLGetFileSystemRepresentation(v7, 1u, v67, 1024);
    if (v10)
    {
      uint64_t v11 = (ACFULogging *)fopen((const char *)v67, "r");
      if (v11)
      {
        uint64_t v12 = (FILE *)v11;
        CFMutableDictionaryRef Mutable = CFDataCreateMutable(v4, 0);
        if (Mutable)
        {
          while (1)
          {
            uint64_t v14 = v9 >= 0x1000 ? 4096 : v9;
            uint64_t v15 = (ACFULogging *)fread(__ptr, 1uLL, v14, v12);
            if ((ACFULogging *)v14 != v15) {
              break;
            }
            uint64_t v16 = (ACFULogging *)feof(v12);
            if (v16 || (uint64_t v16 = (ACFULogging *)ferror(v12), (v16 & 0x80000000) != 0))
            {
              uint64_t v18 = ACFULogging::getLogInstance(v16);
              ferror(v12);
              ACFULogging::handleMessage((uint64_t)v18, 2u, "%s::%s: file i/o error (code: %d)\n", v19, v20, v21, v22, v23, (char)"ACFUCommon");
              goto LABEL_19;
            }
            CFDataAppendBytes(Mutable, __ptr, v14);
            v9 -= v14;
            if (!v9) {
              goto LABEL_14;
            }
          }
          uint64_t v24 = ACFULogging::getLogInstance(v15);
          ACFULogging::handleMessage((uint64_t)v24, 2u, "%s::%s: read less bytes than required (read: %zu, required: %zu)\n", v25, v26, v27, v28, v29, (char)"ACFUCommon");
LABEL_19:
          CFRelease(Mutable);
          CFMutableDictionaryRef Mutable = 0;
        }
        else
        {
          char v60 = ACFULogging::getLogInstance(0);
          ACFULogging::handleMessage((uint64_t)v60, 2u, "%s::%s: failed to create mutable data\n", v61, v62, v63, v64, v65, (char)"ACFUCommon");
        }
LABEL_14:
        fclose(v12);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v48 = ACFULogging::getLogInstance(v10);
      ACFULogging::handleMessage((uint64_t)v48, 2u, "%s::%s: failed to get file system reprensetation\n", v49, v50, v51, v52, v53, (char)"ACFUCommon");
    }
    uint64_t v54 = ACFULogging::getLogInstance(v11);
    ACFULogging::handleMessage((uint64_t)v54, 2u, "%s::%s: bad input file parameters\n", v55, v56, v57, v58, v59, (char)"ACFUCommon");
  }
  else
  {
    uint64_t v42 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v42, 2u, "%s::%s: file is empty (file size: %zu)\n", v43, v44, v45, v46, v47, (char)"ACFUCommon");
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_15:
  CFRelease(v7);
  return Mutable;
}

void ACFUCommon::parseDebugArgs(ACFUCommon *this@<X0>, const __CFDictionary *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v81 = 0u;
  if (!this)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Empty options dict\n", v43, v44, v45, v46, v47, (char)"ACFUCommon");
LABEL_29:
    int v23 = 0;
    int v24 = 4006;
    goto LABEL_30;
  }
  if (!a2)
  {
    uint64_t v48 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v48, 2u, "%s::%s: Invalid arguments to parseDebugArgs\n", v49, v50, v51, v52, v53, (char)"ACFUCommon");
    int v23 = 0;
    int v24 = 4005;
    goto LABEL_30;
  }
  CFURLRef v6 = this;
  uint64_t Value = (ACFULogging *)CFDictionaryGetValue(this, @"Options");
  uint64_t v8 = ACFULogging::getLogInstance(Value);
  if (Value) {
    uint64_t v14 = "%s::%s: Found updater options in dictionary\n";
  }
  else {
    uint64_t v14 = "%s::%s: Assuming updater options dictionary is being passed\n";
  }
  if (Value) {
    CFURLRef v6 = Value;
  }
  ACFULogging::handleMessage((uint64_t)v8, 3u, v14, v9, v10, v11, v12, v13, (char)"ACFUCommon");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t v16 = (ACFULogging *)CFGetTypeID(v6);
  if ((ACFULogging *)TypeID != v16)
  {
    uint64_t v54 = ACFULogging::getLogInstance(v16);
    ACFULogging::handleMessage((uint64_t)v54, 2u, "%s::%s: Invalid Type of Updater Options dict\n", v55, v56, v57, v58, v59, (char)"ACFUCommon");
LABEL_32:
    int v23 = 0;
    int v24 = 4002;
    goto LABEL_30;
  }
  CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v6, @"ACFUDebugArgs");
  if (!v17)
  {
    char v60 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v60, 2u, "%s::%s: Empty DebugArgs\n", v61, v62, v63, v64, v65, (char)"ACFUCommon");
    goto LABEL_29;
  }
  CFStringRef v18 = v17;
  CFTypeID v19 = CFStringGetTypeID();
  uint64_t v20 = (ACFULogging *)CFGetTypeID(v18);
  if ((ACFULogging *)v19 != v20)
  {
    CFIndex v66 = ACFULogging::getLogInstance(v20);
    ACFULogging::handleMessage((uint64_t)v66, 2u, "%s::%s: Invalid Type of DebugArgs\n", v67, v68, v69, v70, v71, (char)"ACFUCommon");
    goto LABEL_32;
  }
  int CString = (ACFULogging *)CFStringGetCString(v18, buffer, 512, 0x8000100u);
  if (CString)
  {
    __stringp = buffer;
    uint64_t v22 = strsep(&__stringp, " ");
    if (v22)
    {
      int v23 = 0;
      int v24 = 4006;
      while (1)
      {
        size_t v25 = strlen((const char *)a2);
        uint64_t v26 = (ACFULogging *)strncmp(v22, (const char *)a2, v25);
        if (!v26)
        {
          BOOL v27 = v22[v25] == 61;
          uint64_t v28 = ACFULogging::getLogInstance(v26);
          if (!v27)
          {
            ACFULogging::handleMessage((uint64_t)v28, 2u, "%s::%s: Invalid token: %s\n", v29, v30, v31, v32, v33, (char)"ACFUCommon");
            goto LABEL_24;
          }
          ACFULogging::handleMessage((uint64_t)v28, 3u, "%s::%s: Token: %s\n", v29, v30, v31, v32, v33, (char)"ACFUCommon");
          uint64_t v34 = strchr(v22, 61);
          if (!v34)
          {
            uint64_t v36 = ACFULogging::getLogInstance(0);
            ACFULogging::handleMessage((uint64_t)v36, 2u, "%s::%s: Missing = for key: %s\n", v37, v38, v39, v40, v41, (char)"ACFUCommon");
            goto LABEL_24;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v34 + 1);
          int v35 = std::stoul(&__str, 0, 0);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          int v24 = 0;
          int v23 = v35;
        }
        uint64_t v22 = strsep(&__stringp, " ");
        if (!v22) {
          goto LABEL_30;
        }
      }
    }
    goto LABEL_29;
  }
  uint64_t v72 = ACFULogging::getLogInstance(CString);
  ACFULogging::handleMessage((uint64_t)v72, 2u, "%s::%s: Failed to get DebugArgs buffer\n", v73, v74, v75, v76, v77, (char)"ACFUCommon");
  int v23 = 0;
LABEL_24:
  int v24 = 4007;
LABEL_30:
  *a3 = v23;
  a3[1] = v24;
}

#error "217AC947C: call analysis failed (funcsize=34)"

void ACFUCommon::stringFromCFString(const __CFString *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (this)
  {
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    CStringPtr = CFStringGetCStringPtr(this, SystemEncoding);
    if (CStringPtr)
    {
      CFURLRef v7 = (char *)CStringPtr;
      uint64_t v8 = 0;
    }
    else
    {
      CFIndex v9 = CFStringGetLength(this) + 1;
      uint64_t v10 = (char *)malloc(v9);
      uint64_t v8 = v10;
      CFURLRef v7 = "";
      if (v10)
      {
        bzero(v10, v9);
        CFStringEncoding v11 = CFStringGetSystemEncoding();
        if (CFStringGetCString(this, v8, v9, v11)) {
          CFURLRef v7 = v8;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    CFURLRef v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, v7);
  *(_OWORD *)a2 = v12;
  a2[2] = v13;
  if (v8) {
    free(v8);
  }
}

void ACFUCommon::cfTypeDescription(ACFUCommon *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  CFStringRef v6 = CFCopyTypeIDDescription((CFTypeID)this);
  CFStringRef v7 = v6;
  if (!v6)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to copy type description for type ID %lu\n", v16, v17, v18, v19, v20, (char)"ACFUCommon");
    return;
  }
  if (!a2)
  {
    CFRetain(v6);
    CFStringRef v8 = v7;
    goto LABEL_6;
  }
  CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@ (%lu)", v6, this);
  if (v8)
  {
LABEL_6:
    ACFUCommon::stringFromCFString(v8, &v21);
    *(_OWORD *)a3 = v21;
    a3[2] = v22;
    CFRelease(v8);
    goto LABEL_7;
  }
  CFIndex v9 = ACFULogging::getLogInstance(0);
  ACFULogging::handleMessage((uint64_t)v9, 2u, "%s::%s: failed to create full description for type ID %lu\n", v10, v11, v12, v13, v14, (char)"ACFUCommon");
LABEL_7:
  CFRelease(v7);
}

void sub_217AC96B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL ACFUCommon::doesPathExist(ACFUCommon *this, const __CFURL *a2)
{
  char v21 = 0;
  uint64_t v3 = (ACFULogging *)AMSupportPlatformFileURLExists();
  if (v3)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(v3);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to determine if url exists (%u)\n", v5, v6, v7, v8, v9, (char)"ACFUCommon");
    uint64_t v11 = ACFULogging::getLogInstance(v10);
    std::string::basic_string[abi:ne180100]<0>(&v17, "ACFUCommon");
    uint64_t v12 = std::string::append(&v17, "::");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v18, "doesPathExist");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v14->__r_.__value_.__r.__words[2];
    long long v19 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    ACFULogging::handleMessageCFType((uint64_t)v11, (uint64_t *)&v19, 0, (uint64_t)"Path URL: ", (uint64_t)this);
    if (SHIBYTE(v20) < 0) {
      operator delete((void *)v19);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  return v21 == 1;
}

void sub_217AC97F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ACFUCommon::removeFileWithURL(ACFUCommon *this, const __CFURL *a2)
{
  if (this && (uint64_t v2 = this, v3 = (ACFUCommon *)CFURLGetTypeID(), this = (ACFUCommon *)CFGetTypeID(v2), v3 == this))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    std::string::basic_string[abi:ne180100]<0>(&v23, "ACFUCommon");
    uint64_t v5 = std::string::append(&v23, "::");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v24, "removeFileWithURL");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v26 = v7->__r_.__value_.__r.__words[2];
    long long v25 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    ACFULogging::handleMessageCFType((uint64_t)LogInstance, (uint64_t *)&v25, 0, (uint64_t)"Removing file at URL: ", (uint64_t)v2);
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = (ACFULogging *)AMSupportRemoveFile();
    if (!v9) {
      return 1;
    }
    uint64_t v10 = ACFULogging::getLogInstance(v9);
    ACFULogging::handleMessage((uint64_t)v10, 2u, "%s::%s: failed to remove file (%u)\n", v11, v12, v13, v14, v15, (char)"ACFUCommon");
  }
  else
  {
    uint64_t v16 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v16, 2u, "%s::%s: failed due to unexpected data type\n", v17, v18, v19, v20, v21, (char)"ACFUCommon");
  }
  return 0;
}

void sub_217AC99A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<__CFString const*>::__init_with_size[abi:ne180100]<__CFString const**,__CFString const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<__CFString const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_217AC9A54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<__CFString const*>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<__CFString const*>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<__CFString const*>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x21D454970](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x21D454980](v13);
  return a1;
}

void sub_217AC9C28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x21D454980](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x217AC9C08);
}

void sub_217AC9C7C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_217AC9DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

double DERImg4DecodeFindInSequence(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = 0;
  long long v8 = 0uLL;
  while (!DERDecodeSeqNext(a1, &v7))
  {
    if (v7 == a2)
    {
      double result = *(double *)&v8;
      *a3 = v8;
      return result;
    }
  }
  return result;
}

double DERImg4DecodeContentFindItemWithTag(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  v6[0] = 0;
  v6[1] = 0;
  if (!DERDecodeSeqContentInit(a1, v6)) {
    return DERImg4DecodeFindInSequence(v6, a2, a3);
  }
  return result;
}

uint64_t DERImg4DecodeTagCompare(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 < 4) {
    return 0xFFFFFFFFLL;
  }
  if (v2 != 4) {
    return 1;
  }
  unsigned int v5 = 0;
  if (DERParseInteger((char **)a1, &v5)) {
    return 4294967294;
  }
  if (v5 < a2) {
    return 0xFFFFFFFFLL;
  }
  return v5 > a2;
}

uint64_t DERImg4Decode(void *a1, unint64_t a2)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t result = DERDecodeItem((uint64_t)a1, &v6);
      if (!result)
      {
        if (v6 == 0x2000000000000010)
        {
          uint64_t v5 = a1[1];
          if (__CFADD__(*a1, v5) || __CFADD__(v7, v8))
          {
            __break(0x5513u);
          }
          else if (*a1 + v5 == v7 + v8)
          {
            uint64_t result = DERParseSequenceContentToObject(&v7, 4u, (uint64_t)&DERImg4ItemSpecs, a2, 0x40uLL, 0);
            if (!result) {
              return 2 * (DERImg4DecodeTagCompare(a2, 0x494D4734u) != 0);
            }
          }
          else
          {
            return 7;
          }
        }
        else
        {
          return 2;
        }
      }
    }
  }
  return result;
}

uint64_t DERImg4DecodePayloadCompression(unint64_t *a1, char **a2)
{
  unsigned int v5 = 2;
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = DERParseSequenceContentToObject(a1, 2u, (uint64_t)&DERImg4CompressionItemSpecs, (unint64_t)a2, 0x20uLL, 0);
      if (!result)
      {
        uint64_t result = DERParseInteger(a2, &v5);
        if (!result)
        {
          if (v5 <= 1) {
            return 0;
          }
          else {
            return 6;
          }
        }
      }
    }
  }
  return result;
}

uint64_t DERImg4DecodePayloadWithProperties(uint64_t a1, unint64_t a2)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = DERParseSequenceToObject(a1, 7u, (uint64_t)&DERImg4PayloadWithPropertiesItemSpecs, a2, 0xA0uLL, 0);
      if (!result)
      {
        if (DERImg4DecodeTagCompare(a2, 0x494D3450u))
        {
          return 2;
        }
        else if (!*(void *)(a2 + 80) {
               || (long long v7 = 0u,
        }
                   long long v8 = 0u,
                   uint64_t result = DERImg4DecodePayloadCompression((unint64_t *)(a2 + 80), (char **)&v7),
                   !result))
        {
          uint64_t v6 = *(void *)(a2 + 96);
          uint64_t v5 = a2 + 96;
          if (!v6) {
            return 0;
          }
          long long v7 = 0u;
          long long v8 = 0u;
          uint64_t result = DERImg4DecodePayloadProperties(v5, (unint64_t)&v7);
          if (!result) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t DERImg4DecodePayloadProperties(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = DERParseSequenceToObject(result, 2u, (uint64_t)&DERImg4PayloadPropertiesItemSpecs, a2, 0x20uLL, 0);
      if (result) {
        return result;
      }
      if (DERImg4DecodeTagCompare(a2, 0x50415950u)) {
        return 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t DERImg4DecodePayload(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t result = 6;
  if (a1 && a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t result = DERImg4DecodePayloadWithProperties(a1, (unint64_t)&v11);
    if (result)
    {
      uint64_t result = DERParseSequenceToObject(a1, 6u, (uint64_t)&DERImg4PayloadItemSpecs, a2, 0x90uLL, 0);
      if (!result)
      {
        if (DERImg4DecodeTagCompare(a2, 0x494D3450u))
        {
          return 2;
        }
        else
        {
          uint64_t v6 = *(void *)(a2 + 80);
          uint64_t v5 = (unint64_t *)(a2 + 80);
          if (!v6) {
            return 0;
          }
          memset(v10, 0, sizeof(v10));
          uint64_t result = DERImg4DecodePayloadCompression(v5, (char **)v10);
          if (!result) {
            return 0;
          }
        }
      }
    }
    else
    {
      long long v7 = v12;
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v7;
      long long v8 = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a2 + 48) = v8;
      long long v9 = v16;
      *(_OWORD *)(a2 + 64) = v15;
      *(_OWORD *)(a2 + 80) = v9;
    }
  }
  return result;
}

uint64_t DERImg4DecodeManifest(void *a1, unint64_t a2)
{
  return DERImg4DecodeManifestCommon(a1, 5uLL, (uint64_t)&DERImg4ManifestItemSpecs, a2, 0x494D344Du);
}

uint64_t DERImg4DecodeManifestCommon(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result = 6;
  if (a1 && a4)
  {
    if (!*a1 || !a1[1]) {
      return 0;
    }
    if (a2 >= 0x10000)
    {
      __break(0x5507u);
      return result;
    }
    uint64_t result = DERParseSequenceToObject((uint64_t)a1, (unsigned __int16)a2, a3, a4, 0xC0uLL, 0);
    if (!result)
    {
      if (DERImg4DecodeTagCompare(a4, a5)) {
        return 2;
      }
      unsigned int v9 = 0;
      uint64_t result = DERParseInteger((char **)(a4 + 16), &v9);
      if (result) {
        return result;
      }
      if (v9 > 2) {
        return 2;
      }
      return 0;
    }
  }
  return result;
}

uint64_t DERImg4DecodeRestoreInfo(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = DERParseSequenceToObject(result, 2u, (uint64_t)&DERImg4RestoreInfoItemSpecs, a2, 0x20uLL, 0);
      if (result) {
        return result;
      }
      if (DERImg4DecodeTagCompare(a2, 0x494D3452u)) {
        return 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t DERImg4DecodeProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a3)
    {
      unint64_t v14 = 0;
      long long v15 = 0uLL;
      long long v13 = 0uLL;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v8 = 0;
      uint64_t result = DERDecodeSeqInit((uint64_t)a1, &v9, &v10);
      if (!result)
      {
        if (v9 != 0x2000000000000010) {
          return 2;
        }
        uint64_t result = DERDecodeSeqNext(&v10, &v14);
        if (result) {
          return result;
        }
        if (v14 != 22) {
          return 2;
        }
        uint64_t result = DERParseInteger((char **)&v15, &v8);
        if (result) {
          return result;
        }
        if ((v8 | 0xE000000000000000) != a2) {
          return 2;
        }
        *(_OWORD *)a3 = v15;
        uint64_t result = DERDecodeSeqNext(&v10, &v12);
        if (result) {
          return result;
        }
        *(void *)(a3 + 40) = v12;
        *(_OWORD *)(a3 + 24) = v13;
        uint64_t result = DERDecodeSeqNext(&v10, &v12);
        if (result != 1) {
          return 2;
        }
        uint64_t v7 = a1[1];
        if (__CFADD__(*a1, v7))
        {
          __break(0x5513u);
        }
        else if (v11 == *a1 + v7)
        {
          return 0;
        }
        else
        {
          return 7;
        }
      }
    }
  }
  return result;
}

uint64_t Img4DecodeParseLengthFromBufferWithTag(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v14[1] = 0;
  unint64_t v15 = 0;
  uint64_t result = 0xFFFFFFFFLL;
  unint64_t v13 = 0;
  v14[0] = 0;
  if (a1)
  {
    if (a4)
    {
      v17[0] = a1;
      v17[1] = a2;
      uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v17, &v15, &v12);
      if (!result)
      {
        if (v12)
        {
          if (v15 != 0x2000000000000010) {
            return 2;
          }
          uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v16, &v13, &v11);
          if (result) {
            return result;
          }
          if (v11)
          {
            uint64_t result = DERImg4DecodeTagCompare((uint64_t)v14, a3);
            if (!result)
            {
              uint64_t v8 = v16[0] - a1;
              if (v12 >= ~(v16[0] - a1)) {
                return 7;
              }
              BOOL v9 = __CFADD__(v12, v8);
              uint64_t v10 = v12 + v8;
              if (v9)
              {
                __break(0x5500u);
              }
              else
              {
                uint64_t result = 0;
                *a4 = v10;
              }
              return result;
            }
            return 2;
          }
        }
        return 3;
      }
    }
  }
  return result;
}

void Img4DecodeGetPayloadVersionPropertyString(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3 && a4)
  {
    uint64_t v14 = 0;
    v15[0] = 0;
    v15[1] = 0;
    memset(v13, 0, sizeof(v13));
    long long v12 = 0uLL;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    if (DERDecodeItem(a1, (unint64_t *)&v14)
      || DERImg4DecodeProperty(v15, v14, (uint64_t)v13)
      || (DERImg4DecodeContentFindItemWithTag((unint64_t *)&v13[1] + 1, a2, &v12), v7)
      || DERImg4DecodeProperty(&v12, a2, (uint64_t)&v9))
    {
      uint64_t v8 = 0;
      *a3 = 0;
    }
    else
    {
      uint64_t v8 = v11;
      *a3 = *((void *)&v10 + 1);
    }
    *a4 = v8;
  }
}

double Img4DecodeInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3)
    {
      v9[0] = a1;
      v9[1] = a2;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v5 = 0u;
      long long v6 = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 208) = 0u;
      *(_OWORD *)(a3 + 224) = 0u;
      *(_OWORD *)(a3 + 240) = 0u;
      *(_OWORD *)(a3 + 256) = 0u;
      *(_OWORD *)(a3 + 272) = 0u;
      *(_OWORD *)(a3 + 288) = 0u;
      *(_OWORD *)(a3 + 304) = 0u;
      *(_OWORD *)(a3 + 320) = 0u;
      *(_OWORD *)(a3 + 336) = 0u;
      *(_OWORD *)(a3 + 352) = 0u;
      *(_OWORD *)(a3 + 368) = 0u;
      *(_OWORD *)(a3 + 384) = 0u;
      *(_OWORD *)(a3 + 400) = 0u;
      *(_OWORD *)(a3 + 416) = 0u;
      *(_OWORD *)(a3 + 432) = 0u;
      *(void *)(a3 + 448) = 0;
      if (!DERImg4Decode(v9, (unint64_t)&v5)
        && !DERImg4DecodePayload((uint64_t)&v6, a3 + 88)
        && !DERImg4DecodeManifest(&v7, a3 + 232)
        && !DERImg4DecodeRestoreInfo((uint64_t)&v8, a3 + 424))
      {
        *(_OWORD *)(a3 + 8) = v6;
        double result = *(double *)&v7;
        *(_OWORD *)(a3 + 24) = v7;
      }
    }
  }
  return result;
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3;
  }
  uint64_t v4 = *(unsigned char **)result;
  if (*(void *)result == -1) {
    goto LABEL_68;
  }
  long long v5 = &v4[v3];
  long long v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    long long v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      uint64_t v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0;
            }
LABEL_34:
            double result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3;
      }
      unint64_t v15 = 0;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (unsigned char *)-1)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          double result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          uint64_t v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28) {
            goto LABEL_69;
          }
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3;
  }
  unint64_t v8 = 0;
  double result = 3;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 == (unsigned __int8 *)-1) {
      goto LABEL_68;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    long long v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERParseBoolean(unsigned __int8 **a1, BOOL *a2)
{
  if (a1[1] != (unsigned __int8 *)1) {
    return 3;
  }
  int v2 = **a1;
  if (v2 != 255 && v2 != 0) {
    return 3;
  }
  uint64_t result = 0;
  *a2 = v2 != 0;
  return result;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  v4[1] = *MEMORY[0x263EF8340];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = DERParseInteger64(a1, v4);
  if (!result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7;
    }
    else
    {
      uint64_t result = 0;
      *a2 = v4[0];
    }
  }
  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (!v2) {
    return 3;
  }
  unint64_t v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0) {
    return 3;
  }
  if (**a1)
  {
    if (v2 > 8) {
      return 7;
    }
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0) {
      return 3;
    }
    if (v2 > 9) {
      return 7;
    }
  }
LABEL_10:
  unint64_t v5 = 0;
  do
  {
    unsigned int v6 = *v3++;
    unint64_t v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t DERDecodeSeqInit(uint64_t a1, void *a2, void *a3)
{
  unint64_t v8[3] = *MEMORY[0x263EF8340];
  memset(v8, 170, 24);
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v8, 0);
  if (!result)
  {
    unint64_t v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        unint64_t v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          uint64_t result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unint64_t *DERDecodeSeqContentInit(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    unint64_t v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  _OWORD v10[2] = *MEMORY[0x263EF8340];
  v10[0] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  void v12[3] = *MEMORY[0x263EF8340];
  memset(v12, 170, 24);
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!result)
  {
    if (v12[0] == 0x2000000000000010) {
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v32 = 0;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }
  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    uint64_t v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = DERDecodeSeqNext(&v32, v31);
      if (result) {
        break;
      }
      if (a2 <= v13) {
        return 2;
      }
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3) {
          goto LABEL_58;
        }
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24 * v13 + 8)) {
          break;
        }
        uint64_t result = 2;
        if (v18)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1)) {
            continue;
          }
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        uint64_t v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4) {
          goto LABEL_59;
        }
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)uint64_t v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)uint64_t v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        unint64_t v12 = v33;
        goto LABEL_47;
      }
    }
    if (result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        BOOL v25 = (__int16 *)(a3 + 24 * v13 + 16);
        unint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0;
        while (1)
        {
          __int16 v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

unint64_t *DERParseSequenceContent(unint64_t *result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return (unint64_t *)DERParseSequenceContentToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

uint64_t uarpSuperBinaryHeaderEndianSwap(unsigned int *a1, _DWORD *a2)
{
  *a2 = uarpHtonl(*a1);
  a2[1] = uarpHtonl(a1[1]);
  a2[2] = uarpHtonl(a1[2]);
  a2[3] = uarpHtonl(a1[3]);
  a2[4] = uarpHtonl(a1[4]);
  a2[5] = uarpHtonl(a1[5]);
  a2[6] = uarpHtonl(a1[6]);
  a2[7] = uarpHtonl(a1[7]);
  a2[8] = uarpHtonl(a1[8]);
  a2[9] = uarpHtonl(a1[9]);
  uint64_t result = uarpHtonl(a1[10]);
  a2[10] = result;
  return result;
}

uint64_t uarpPayloadHeaderEndianSwap(unsigned int *a1, _DWORD *a2)
{
  *a2 = uarpHtonl(*a1);
  a2[2] = uarpHtonl(a1[2]);
  a2[3] = uarpHtonl(a1[3]);
  a2[4] = uarpHtonl(a1[4]);
  a2[5] = uarpHtonl(a1[5]);
  a2[6] = uarpHtonl(a1[6]);
  a2[7] = uarpHtonl(a1[7]);
  a2[8] = uarpHtonl(a1[8]);
  uint64_t result = uarpHtonl(a1[9]);
  a2[9] = result;
  return result;
}

uint64_t uarpPayloadTagPack(unsigned int *a1)
{
  return *a1;
}

unint64_t uarpHtonll(unint64_t a1)
{
  return bswap64(a1);
}

uint64_t uarpHtonl(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t uarpHtons(unsigned int a1)
{
  return __rev16(a1);
}

uint64_t SoCUpdaterExecCommandDynamic(void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, const __CFDictionary *a5, CFErrorRef *a6)
{
  id v11 = a1;
  uint64_t v27 = 0;
  id v12 = [NSString stringWithFormat:@"%s: Dylib Path: %@\n", "CFDictionaryRef  _Nullable SoCUpdaterExecCommandDynamic(NSString *__strong _Nullable, SoCUpdaterLogSinkFunction _Nonnull, void * _Nonnull, CFStringRef _Nonnull, CFDictionaryRef _Nonnull, CFErrorRef * _Nullable)", v11];
  a2(a3, [v12 UTF8String]);

  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, @"DeviceInfo");
  unint64_t v14 = CFDictionaryGetValue(Value, @"UpdaterRef");
  if (!v14) {
    goto LABEL_14;
  }
  unint64_t v15 = v14;
  id v16 = v11;
  unsigned __int16 v17 = v16;
  if (!v16)
  {
    if (!a6) {
      goto LABEL_13;
    }
    CFIndex v25 = 5;
LABEL_12:
    *a6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], v25, 0);
    goto LABEL_13;
  }
  id v18 = v16;
  unint64_t v19 = dlopen((const char *)[v18 UTF8String], 1);
  if (!v19)
  {
    if (!a6) {
      goto LABEL_13;
    }
    CFIndex v25 = 9;
    goto LABEL_12;
  }
  long long v20 = (uint64_t (*)(const void *, uint64_t, const __CFDictionary *, uint64_t *, CFErrorRef *))dlsym(v19, "UARPSoCUpdaterExecCommand");
  if (!v20)
  {
    if (a6)
    {
      CFIndex v25 = 14;
      goto LABEL_12;
    }
LABEL_13:

LABEL_14:
    uint64_t v24 = 0;
    goto LABEL_15;
  }
  uint64_t v21 = v20;

  unsigned int v22 = v21(v15, a4, a5, &v27, a6);
  id v23 = [NSString stringWithFormat:@"result:%d output:%@ updater:%@", v22, v27, v15];
  a2(a3, [v23 UTF8String]);

  uint64_t v24 = v27;
LABEL_15:

  return v24;
}

CFTypeRef Ace3RestoreInfoGetTags(const __CFDictionary *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, CFErrorRef *a4)
{
  CFTypeRef result = (CFTypeRef)SoCUpdaterExecCommandDynamic(@"/usr/lib/updaters/libAce3Updater.dylib", a2, a3, @"queryTags", a1, a4);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void *Ace3RestoreInfoCopyFirmware(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = [(Ace3SoCRestoreInfoFirmwareCopierOS *)[Ace3RestoreInfoFirmwareCopierOS alloc] initWithOptions:a1 logFunction:a2 logContext:a3];
  id v15 = 0;
  BOOL v6 = [(Ace3SoCRestoreInfoFirmwareCopierOS *)v5 copyFirmwareToDestinationBundleWithError:&v15];
  id v7 = v15;
  unint64_t v8 = v7;
  if (v6)
  {
    id v14 = 0;
    unint64_t v9 = [(Ace3SoCRestoreInfoFirmwareCopierOS *)v5 readFirmwareFileDataWithError:&v14];
    id v10 = v14;
    id v11 = v10;
    if (v9)
    {
      id v12 = v9;
    }
    else if (a4)
    {
      *a4 = v10;
    }
  }
  else
  {
    unint64_t v9 = 0;
    if (a4) {
      *a4 = v7;
    }
  }

  return v9;
}

CFTypeRef Ace3RestoreInfoCreateRequest(const __CFDictionary *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, CFErrorRef *a4)
{
  CFTypeRef result = (CFTypeRef)SoCUpdaterExecCommandDynamic(@"/usr/lib/updaters/libAce3Updater.dylib", a2, a3, @"generateMeasurements", a1, a4);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t AppleTconUARPRestoreInfoGetTags(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (a4) {
    *a4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 102, 0);
  }
  return 0;
}

uint64_t AppleTconUARPRestoreInfoCopyFirmware(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (a4) {
    *a4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 102, 0);
  }
  return 0;
}

uint64_t AppleTconUARPRestoreInfoCreateRequest(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (a4) {
    *a4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 102, 0);
  }
  return 0;
}

id UARPPersonalizationTSSRequestWithSigningServer(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = String();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    UARPPersonalizationTSSRequestWithSigningServer_cold_3();
  }

  id v6 = String(v3, v4, 0);
  id v7 = String();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v6)
  {
    if (v8) {
      UARPPersonalizationTSSRequestWithSigningServer_cold_2();
    }

    id v9 = v6;
  }
  else
  {
    if (v8) {
      UARPPersonalizationTSSRequestWithSigningServer_cold_1();
    }

    id v10 = (void *)MGCopyAnswer();
    int v11 = [v10 BOOLValue];
    id v12 = 0;
    if (v11) {
      id v12 = UARPPersonalizationTSSRequestWithSigningServerSSO(v3, v4);
    }
    id v9 = v12;
  }

  return v9;
}

id String()
{
  if (TSSRequestLogToken_onceToken != -1) {
    dispatch_once(&TSSRequestLogToken_onceToken, &__block_literal_global_0);
  }
  uint64_t v0 = (void *)TSSRequestLogToken_logToken;

  return v0;
}

id String(void *a1, void *a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  CFDictionaryRef v5 = a1;
  id v6 = a2;
  id v7 = String();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    CFTypeRef v32 = v6;
    _os_log_impl(&dword_217A74000, v7, OS_LOG_TYPE_INFO, "UARP: TSS request to signing server %{public}@", buf, 0xCu);
  }

  AMAuthInstallLogSetHandler((void (*)(int, uint64_t))String);
  uint64_t v8 = AMAuthInstallCreate((const __CFAllocator *)*MEMORY[0x263EFFB08]);
  if (!v8)
  {
    int v11 = String();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      TSSRequestWithSigningServer_cold_1();
    }

    goto LABEL_11;
  }
  id v9 = (const void *)v8;
  if (AMAuthInstallSetSigningServerURL(v8, v6))
  {
    id v10 = String();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      TSSRequestWithSigningServer_cold_5();
    }
LABEL_7:

    CFRelease(v9);
LABEL_11:
    id v12 = 0;
    goto LABEL_12;
  }
  if (a3)
  {
    id v14 = String();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_217A74000, v14, OS_LOG_TYPE_INFO, "UARP: TSS request is using SSO", buf, 2u);
    }

    if (AMAuthInstallSsoInitialize())
    {
      id v10 = String();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        TSSRequestWithSigningServer_cold_4();
      }
      goto LABEL_7;
    }
    if (AMAuthInstallSsoEnable((uint64_t)v9, v15, v16, v17, v18, v19, v20, v21))
    {
      id v10 = String();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        TSSRequestWithSigningServer_cold_3();
      }
      goto LABEL_7;
    }
  }
  unsigned int v22 = String();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    if (a3) {
      id v23 = @" <AppleConnect>";
    }
    else {
      id v23 = @" ";
    }
    *(_DWORD *)buf = 138543618;
    CFTypeRef v32 = v6;
    __int16 v33 = 2114;
    uint64_t v34 = v23;
    _os_log_impl(&dword_217A74000, v22, OS_LOG_TYPE_INFO, "UARP: TSS Request %{public}@%{public}@ is ", buf, 0x16u);
  }

  uint64_t v24 = String();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    CFTypeRef v32 = v6;
    _os_log_impl(&dword_217A74000, v24, OS_LOG_TYPE_INFO, "UARP: %{public}@", buf, 0xCu);
  }

  CFTypeRef v30 = 0;
  int v25 = AMAuthInstallApCreatePersonalizedResponse((uint64_t)v9, v5, &v30);
  unint64_t v26 = String();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    if (a3) {
      uint64_t v27 = @" <AppleConnect>";
    }
    else {
      uint64_t v27 = @" ";
    }
    *(_DWORD *)buf = 138543618;
    CFTypeRef v32 = v6;
    __int16 v33 = 2114;
    uint64_t v34 = v27;
    _os_log_impl(&dword_217A74000, v26, OS_LOG_TYPE_INFO, "UARP: TSS Response %{public}@%{public}@ is ", buf, 0x16u);
  }

  unint64_t v28 = String();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    CFTypeRef v32 = v30;
    _os_log_impl(&dword_217A74000, v28, OS_LOG_TYPE_INFO, "UARP: %{public}@", buf, 0xCu);
  }

  if (v25)
  {
    uint64_t v29 = String();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      TSSRequestWithSigningServer_cold_2(v25, v29);
    }

    id v12 = 0;
  }
  else
  {
    id v12 = (void *)v30;
  }
  CFRelease(v9);
LABEL_12:

  return v12;
}

id UARPPersonalizationTSSRequestWithSigningServerSSO(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CFDictionaryRef v5 = String();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    UARPPersonalizationTSSRequestWithSigningServerSSO_cold_2();
  }

  id v6 = String(v3, v4, 1);
  if (!v6)
  {
    id v7 = String();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      UARPPersonalizationTSSRequestWithSigningServerSSO_cold_1();
    }
  }

  return v6;
}

void __TSSRequestLogToken_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.accessoryupdater.uarp", "personalization");
  uint64_t v1 = (void *)TSSRequestLogToken_logToken;
  TSSRequestLogToken_logToken = (uint64_t)v0;
}

void String(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  id v3 = String();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = 136446210;
    uint64_t v5 = a2;
    _os_log_impl(&dword_217A74000, v3, OS_LOG_TYPE_INFO, "UARP: Personalization Message >> %{public}s", (uint8_t *)&v4, 0xCu);
  }
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void UARPPersonalizationTSSRequestWithSigningServer_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_217A74000, v0, v1, "UARP: TSS Request failed customer path / auth listed", v2, v3, v4, v5, v6);
}

void UARPPersonalizationTSSRequestWithSigningServer_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_217A74000, v0, v1, "UARP: TSS Request passed customer path / auth listed", v2, v3, v4, v5, v6);
}

void UARPPersonalizationTSSRequestWithSigningServer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3(&dword_217A74000, v0, v1, "UARP: TSS Request to server %{public}@ with options %{public}@");
}

void TSSRequestWithSigningServer_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_217A74000, v0, v1, "UARP: Failed to create authinstall reference", v2, v3, v4, v5, v6);
}

void TSSRequestWithSigningServer_cold_2(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_217A74000, a2, OS_LOG_TYPE_ERROR, "UARP: Failed personalization response, CFErrorRef error = %u", (uint8_t *)v2, 8u);
}

void TSSRequestWithSigningServer_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_217A74000, v0, v1, "UARP: Failed to enable sso", v2, v3, v4, v5, v6);
}

void TSSRequestWithSigningServer_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_217A74000, v0, v1, "UARP: Failed to initialize sso", v2, v3, v4, v5, v6);
}

void TSSRequestWithSigningServer_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_217A74000, v0, v1, "UARP: Failed to set signing server", v2, v3, v4, v5, v6);
}

void UARPPersonalizationTSSRequestWithSigningServerSSO_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_217A74000, v0, v1, "UARP: TSS Request failed sso modes", v2, v3, v4, v5, v6);
}

void UARPPersonalizationTSSRequestWithSigningServerSSO_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3(&dword_217A74000, v0, v1, "UARP: TSS Request to server %{public}@ with SSO and options %{public}@");
}

void sub_217ACCEC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217ACDFF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217ACF50C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_32s40s(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);

  return v4;
}

void __destroy_helper_block_e8_32s40s(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
}

void sub_217AD730C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217AD9ADC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217ADA504(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_217ADEA60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217ADEFAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217ADF3D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217ADF85C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217ADFC88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id AppleTypeCRetimerRestoreInfoGetTags(void *a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v1 = (id)[a1 objectForKeyedSubscript:@"DeviceInfo"];
  id v2 = (id)[v1 objectForKeyedSubscript:@"InfoArray"];
  if (v2)
  {
    id v19 = v1;
    id v3 = (id)[MEMORY[0x263EFF980] array];
    id v21 = (id)[MEMORY[0x263EFF980] array];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v18 = v2;
    obuint64_t j = v2;
    uint64_t v4 = [obj countByEnumeratingWithState:&v22 objects:v32 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v23 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          id v9 = (id)[v8 objectForKeyedSubscript:@"TicketName"];
          id v10 = (id)[v8 objectForKeyedSubscript:@"TagNumber"];
          id v11 = (id)[NSString stringWithValidatedFormat:@"Timer,RTKitOS,%u", @"%u", 0, [v10 unsignedCharValue]];
          [v3 addObject:v11];
          [v21 addObject:v9];
        }
        uint64_t v5 = [obj countByEnumeratingWithState:&v22 objects:v32 count:16];
      }
      while (v5);
    }

    v30[0] = @"BuildIdentityTags";
    id v12 = (id)[MEMORY[0x263EFF8C0] arrayWithArray:v3];
    v31[0] = v12;
    v30[1] = @"ResponseTags";
    id v13 = v21;
    id v14 = (id)[MEMORY[0x263EFF8C0] arrayWithArray:v21];
    v31[1] = v14;
    id v15 = (id)[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:2];
    id v2 = v18;
    id v1 = v19;
  }
  else
  {
    id v3 = (id)[v1 objectForKeyedSubscript:@"TicketName"];
    id v13 = (id)[v1 objectForKeyedSubscript:@"TagNumber"];
    id v12 = (id)[NSString stringWithValidatedFormat:v14 validFormatSpecifiers:v15 error:v16];
    id v27 = v12;
    v28[0] = @"BuildIdentityTags";
    id v14 = (id)[MEMORY[0x263EFF8C0] arrayWithObjects:&v27 count:1];
    v29[0] = v14;
    v28[1] = @"ResponseTags";
    id v26 = v3;
    id v16 = (id)[MEMORY[0x263EFF8C0] arrayWithObjects:&v26 count:1];
    v29[1] = v16;
    id v15 = (id)[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
  }
  return v15;
}

id AppleTypeCRetimerRestoreInfoCopyFirmware(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = [[AppleTypeCRetimerFirmwareCopierOS alloc] initWithOptions:a1 logFunction:a2 logContext:a3];
  id v15 = 0;
  BOOL v6 = [(AppleTypeCRetimerFirmwareCopierOS *)v5 copyFirmwareToDestinationBundleWithError:&v15];
  id v7 = v15;
  uint64_t v8 = v7;
  if (v6)
  {
    id v14 = 0;
    id v9 = [(AppleTypeCRetimerFirmwareCopierOS *)v5 readFirmwareFileDataWithError:&v14];
    id v10 = v14;
    id v11 = v10;
    if (v9)
    {
      id v12 = v9;
    }
    else if (a4)
    {
      *a4 = v10;
    }
  }
  else
  {
    id v9 = 0;
    if (a4) {
      *a4 = v7;
    }
  }

  return v9;
}

id AppleTypeCRetimerRestoreInfoCreateRequest(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = (id)[v5 objectForKeyedSubscript:@"DeviceInfo"];
  id v7 = (id)[v6 objectForKeyedSubscript:@"InfoArray"];

  if (v7) {
    uint64_t v8 = AppleTypeCRetimerFirmwareAggregateRequestCreatorOS;
  }
  else {
    uint64_t v8 = AppleTypeCRetimerFirmwareRequestCreatorOS;
  }
  id v9 = (void *)[[v8 alloc] initWithOptions:v5 logFunction:a2 logContext:a3];

  if (v9) {
    id v10 = (id)[v9 requestDictionary];
  }
  else {
    id v10 = 0;
  }

  if (v10) {
    id v11 = v10;
  }

  return v10;
}

id FormatHex(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v6 = [MEMORY[0x263F089D8] stringWithCapacity:0];
  id v7 = v6;
  char v43 = 0;
  uint64_t v42 = 0;
  if (a3) {
    uint64_t v8 = @"00000000  ";
  }
  else {
    uint64_t v8 = @"0000  ";
  }
  [v6 appendFormat:v8];
  if (a2)
  {
    unint64_t v9 = 0;
    id v10 = "%s %s\n%04x  ";
    if (a3) {
      id v10 = "%s %s\n%08x  ";
    }
    __format = (char *)v10;
    do
    {
      if (v9)
      {
        unint64_t v11 = v9 & 0xF;
        if ((v9 & 0xF) == 0)
        {
          char v41 = 0;
          uint64_t v40 = *(void *)(v9 + a1 - 16);
          do
          {
            int v12 = *((char *)&v40 + v11);
            if (v12 < 32 || v12 == 127 || *((unsigned char *)&v40 + v11) == 32) {
              *((unsigned char *)&v40 + v11) = 46;
            }
            ++v11;
          }
          while (v11 != 8);
          uint64_t v13 = 0;
          char v39 = 0;
          uint64_t v38 = *(void *)(v9 + a1 - 8);
          do
          {
            int v14 = *((char *)&v38 + v13);
            if (v14 < 32 || v14 == 127 || *((unsigned char *)&v38 + v13) == 32) {
              *((unsigned char *)&v38 + v13) = 46;
            }
            ++v13;
          }
          while (v13 != 8);
          snprintf(__str, 0x20uLL, __format, &v40, &v38, v9);
          [v7 appendFormat:@"%s", __str];
        }
      }
      if (v9 + 8 >= a2)
      {
        [v7 appendFormat:@"%02x ", *(unsigned __int8 *)(a1 + v9++)];
      }
      else
      {
        uint64_t v15 = *(unsigned __int8 *)(a1 + v9);
        uint64_t v16 = *(unsigned __int8 *)(a1 + v9 + 1);
        if ((((_BYTE)v9 + 8) & 0xF) != 0) {
          snprintf(__str, 0x20uLL, "%02x %02x %02x %02x %02x %02x %02x %02x  ", v15, v16);
        }
        else {
          snprintf(__str, 0x20uLL, "%02x %02x %02x %02x %02x %02x %02x %02x    ", v15, v16);
        }
        [v7 appendFormat:@"%s", __str];
        v9 += 8;
      }
    }
    while (v9 < a2);
    uint64_t v17 = 16;
    if ((a2 & 0xF) != 0) {
      uint64_t v17 = a2 & 0xF;
    }
    if (a2 <= 0xF) {
      unint64_t v18 = a2;
    }
    else {
      unint64_t v18 = v17;
    }
    if (a2 >= 0x10 && (a2 & 0xF) == 0)
    {
      [v7 appendString:@"   "];
      uint64_t v19 = 0;
      uint64_t v42 = *(void *)(v9 + a1 - 16);
      do
      {
        int v20 = *((char *)&v42 + v19);
        if (v20 < 32 || v20 == 127 || *((unsigned char *)&v42 + v19) == 32) {
          *((unsigned char *)&v42 + v19) = 46;
        }
        ++v19;
      }
      while (v19 != 8);
      id v21 = [NSString stringWithUTF8String:&v42];
      [v7 appendString:v21];

      [v7 appendString:@" "];
      uint64_t v22 = 0;
      uint64_t v42 = *(void *)(v9 + a1 - 8);
      do
      {
        int v23 = *((char *)&v42 + v22);
        if (v23 < 32 || v23 == 127 || *((unsigned char *)&v42 + v22) == 32) {
          *((unsigned char *)&v42 + v22) = 46;
        }
        ++v22;
      }
      while (v22 != 8);
LABEL_77:
      uint64_t v34 = [NSString stringWithUTF8String:&v42];
      [v7 appendString:v34];

      goto LABEL_78;
    }
  }
  else
  {
    unint64_t v18 = 0;
    unint64_t v9 = 0;
  }
  uint64_t v24 = 3;
  if (v18 < 9) {
    uint64_t v24 = 4;
  }
  unint64_t v25 = 3 * (16 - v18) + v24;
  do
  {
    [v7 appendString:@" "];
    --v25;
  }
  while (v25);
  unint64_t v26 = v18 - 8;
  if (v18 >= 8)
  {
    uint64_t v29 = 0;
    uint64_t v42 = *(void *)(a1 + v9 - v18);
    do
    {
      int v30 = *((char *)&v42 + v29);
      if (v30 < 32 || v30 == 127 || *((unsigned char *)&v42 + v29) == 32) {
        *((unsigned char *)&v42 + v29) = 46;
      }
      ++v29;
    }
    while (v29 != 8);
  }
  else
  {
    __memcpy_chk();
    *((unsigned char *)&v42 + v18) = 0;
    if (v18)
    {
      uint64_t v27 = 0;
      do
      {
        int v28 = *((char *)&v42 + v27);
        if (v28 < 32 || v28 == 127 || *((unsigned char *)&v42 + v27) == 32) {
          *((unsigned char *)&v42 + v27) = 46;
        }
        ++v27;
      }
      while (v27 < v18);
    }
    unint64_t v26 = 0;
  }
  uint64_t v31 = [NSString stringWithUTF8String:&v42];
  [v7 appendString:v31];

  if (v26)
  {
    [v7 appendString:@" "];
    __memcpy_chk();
    uint64_t v32 = 0;
    *((unsigned char *)&v42 + v26) = 0;
    do
    {
      int v33 = *((char *)&v42 + v32);
      if (v33 < 32 || v33 == 127 || *((unsigned char *)&v42 + v32) == 32) {
        *((unsigned char *)&v42 + v32) = 46;
      }
      ++v32;
    }
    while (v26 > v32);
    goto LABEL_77;
  }
LABEL_78:

  return v7;
}

id MantaMCURestoreInfoCoreGetTags(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = 0;
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    id v6 = 0;
    id v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v44 = 0;
    id v10 = 0;
    unint64_t v11 = 0;
    int v12 = 0;
    goto LABEL_20;
  }
  id v6 = 0;
  id v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v44 = 0;
  id v10 = 0;
  unint64_t v11 = 0;
  int v12 = 0;
  if (!a2) {
    goto LABEL_20;
  }
  uint64_t v40 = a4;
  id v6 = a1;
  int v12 = [[MRULogHelper alloc] initWithOptions:v6 logFunction:a2 logContext:a3];
  int v14 = [v6 objectForKeyedSubscript:@"DeviceInfo"];
  id v7 = v14;
  if (v14)
  {
    uint64_t v15 = [v14 objectForKeyedSubscript:@"PersonalizationInfoArray"];
    uint64_t v8 = v15;
    if (v15 && [v15 count] == 1)
    {
      [(MRULogHelper *)v12 verboseLog:@"infoArray: %@\n", v8];
      char v43 = [MEMORY[0x263EFF980] array];
      uint64_t v44 = [MEMORY[0x263EFF980] array];
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v16 = v8;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v46 objects:v52 count:16];
      obuint64_t j = v16;
      if (v17)
      {
        uint64_t v18 = v17;
        id v38 = v6;
        char v39 = v12;
        uint64_t v37 = v7;
        id v4 = 0;
        id v10 = 0;
        unint64_t v11 = 0;
        uint64_t v42 = *(void *)v47;
        while (2)
        {
          uint64_t v19 = 0;
          int v20 = v4;
          id v21 = v10;
          uint64_t v22 = v11;
          do
          {
            if (*(void *)v47 != v42) {
              objc_enumerationMutation(obj);
            }
            uint64_t v23 = *(void *)(*((void *)&v46 + 1) + 8 * v19);
            uint64_t v24 = [MRUPersonalizationInfo alloc];
            id v45 = v20;
            unint64_t v11 = [(MRUPersonalizationInfo *)v24 initWithOptions:v23 error:&v45];
            id v4 = v45;

            if (!v11)
            {
              [(MRULogHelper *)v39 log:@"Failed to create personalizationInfo with options: %@\n", v23];
              id v10 = v21;
              uint64_t v8 = obj;
              goto LABEL_24;
            }
            unint64_t v25 = [(MRUPersonalizationInfo *)v11 tag];
            [v43 addObject:v25];

            unint64_t v26 = [(MRUPersonalizationInfo *)v11 ticketName];
            [v44 addObject:v26];

            uint64_t v27 = NSString;
            int v28 = [(MRUPersonalizationInfo *)v11 objectName];
            uint64_t v29 = [(MRUPersonalizationInfo *)v11 hardwareInfo];
            uint64_t v30 = [v29 chipID];
            uint64_t v31 = [(MRUPersonalizationInfo *)v11 hardwareInfo];
            id v10 = [v27 stringWithFormat:@"%@-%x-%llx", v28, v30, [v31 ecid]];

            ++v19;
            int v20 = v4;
            id v21 = v10;
            uint64_t v22 = v11;
          }
          while (v18 != v19);
          uint64_t v8 = obj;
          uint64_t v18 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
          if (v18) {
            continue;
          }
          break;
        }
LABEL_24:

        id v7 = v37;
        id v6 = v38;
        int v12 = v39;
        if (v4)
        {
          unint64_t v9 = v43;
          goto LABEL_19;
        }
      }
      else
      {

        unint64_t v11 = 0;
        id v10 = 0;
      }
      v50[0] = @"BuildIdentityTags";
      uint64_t v34 = [MEMORY[0x263EFF8C0] arrayWithArray:v43];
      v51[0] = v34;
      v50[1] = @"ResponseTags";
      uint64_t v35 = [MEMORY[0x263EFF8C0] arrayWithArray:v44];
      CFIndex v50[2] = @"LoopInstance";
      v51[1] = v35;
      v51[2] = v10;
      uint64_t v36 = [NSDictionary dictionaryWithObjects:v51 forKeys:v50 count:3];

      uint64_t v8 = obj;
      unint64_t v9 = v43;
      [(MRULogHelper *)v12 verboseLog:@"[%@]: getTags result:\n %@\n", @"MantaMRI", v36];
      id v32 = v36;

      id v4 = 0;
      goto LABEL_22;
    }
    id v4 = 0;
  }
  else
  {
    id v4 = 0;
    uint64_t v8 = 0;
  }
  unint64_t v9 = 0;
  uint64_t v44 = 0;
  id v10 = 0;
  unint64_t v11 = 0;
LABEL_19:
  a4 = v40;
LABEL_20:
  id v32 = 0;
  if (a4) {
    *a4 = 0;
  }
LABEL_22:

  return v32;
}

id MantaMCURestoreInfoCoreCopyFirmware(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = [MEMORY[0x263F08850] defaultManager];
  id v6 = 0;
  id v7 = 0;
  uint64_t v8 = 0;
  id v9 = 0;
  id v10 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  id v15 = 0;
  id v16 = 0;
  id v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  id v21 = 0;
  uint64_t v22 = 0;
  if (a1 && a2)
  {
    id v6 = a1;
    uint64_t v22 = [[MRULogHelper alloc] initWithOptions:v6 logFunction:a2 logContext:a3];
    uint64_t v23 = [v6 objectForKeyedSubscript:@"DeviceInfo"];
    id v7 = v23;
    if (v23)
    {
      uint64_t v24 = [v23 objectForKeyedSubscript:@"PersonalizationInfoArray"];
      if (v24)
      {
        unint64_t v25 = (void *)v24;
        unint64_t v26 = [v6 objectForKeyedSubscript:@"BundleDataDict"];
        uint64_t v27 = [v6 objectForKeyedSubscript:@"FirmwareData"];
        uint64_t v70 = [v6 objectForKeyedSubscript:@"BuildIdentity"];
        int v28 = [v6 objectForKeyedSubscript:@"BundlePath"];
        long long v83 = [v6 objectForKeyedSubscript:@"DestBundlePath"];
        if (v27)
        {
          id v9 = v27;
          [(MRULogHelper *)v22 verboseLog:@"[%@]: Using firmwareOverride\n", @"MantaMRI"];
          id v16 = v26;
          uint64_t v11 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          id v15 = 0;
          uint64_t v19 = 0;
          int v20 = 0;
          id v21 = 0;
          uint64_t v8 = v25;
          id v17 = v9;
          id v10 = v28;
          int v12 = v83;
          uint64_t v18 = v70;
          goto LABEL_10;
        }
        uint64_t v39 = [v25 firstObject];
        v89[0] = 0;
        id v21 = [[MRUPersonalizationInfo alloc] initWithOptions:v39 error:v89];
        id v40 = v89[0];
        if (!v21)
        {
          id v43 = v40;
          [(MRULogHelper *)v22 log:@"Failed to create personalizationInfo with options %@: %@", v39, v40];
          id v15 = v43;
          id v9 = 0;
          id v16 = v26;
          uint64_t v11 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          uint64_t v8 = v25;
          id v17 = 0;
          uint64_t v19 = 0;
          id v10 = v28;
          int v12 = v83;
          uint64_t v18 = v70;
          int v20 = (void *)v39;
          goto LABEL_10;
        }
        uint64_t v69 = v39;
        if (v26)
        {
          id v41 = v40;
          uint64_t v42 = [(MRUPersonalizationInfo *)v21 tag];
          id v9 = [v26 objectForKeyedSubscript:v42];

          [(MRULogHelper *)v22 verboseLog:@"[%@]: Using firmware from bundle data, %@", @"MantaMRI", v21];
          id v15 = v41;
          id v16 = v26;
          uint64_t v11 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          uint64_t v8 = v25;
          id v17 = 0;
          uint64_t v19 = 0;
LABEL_14:
          id v10 = v28;
          int v12 = v83;
LABEL_15:
          int v20 = (void *)v69;
          uint64_t v18 = v70;
          goto LABEL_10;
        }
        if (!v70)
        {
          id v59 = v40;
          [(MRULogHelper *)v22 log:@"No buildIdentity key"];
          id v15 = v59;
          id v9 = 0;
          uint64_t v11 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          id v16 = 0;
          uint64_t v8 = v25;
          id v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          id v10 = v28;
          int v12 = v83;
          int v20 = (void *)v69;
          goto LABEL_10;
        }
        long long v81 = v40;
        if (v28)
        {
          uint64_t v44 = [(MRUPersonalizationInfo *)v21 tag];
          id v45 = [v44 stringByAppendingString:@".Info.Path"];
          uint64_t v11 = [v70 valueForKeyPath:v45];

          if (v11)
          {
            uint64_t v67 = v11;
            long long v46 = [v28 URLByAppendingPathComponent:v11];
            uint64_t v11 = (uint64_t)v46;
            if (v46)
            {
              long long v47 = (void *)MEMORY[0x263EFF8F8];
              long long v48 = [v46 path];
              id v88 = v81;
              id v9 = [v47 dataWithContentsOfFile:v48 options:0 error:&v88];
              id v75 = v88;

              if (!v9)
              {
                [(MRULogHelper *)v22 log:@"%@", v67];
                [(MRULogHelper *)v22 log:@"Failed to load file %@:%@", v11, v75];
                uint64_t v19 = (void *)v67;
                uint64_t v13 = 0;
                int v14 = 0;
                id v16 = 0;
                uint64_t v8 = v25;
                id v17 = 0;
                id v15 = v75;
                goto LABEL_14;
              }
              uint64_t v19 = (void *)v67;
              if (!v83)
              {
                int v12 = 0;
                uint64_t v13 = 0;
                int v14 = 0;
                id v16 = 0;
                uint64_t v8 = v25;
                id v17 = 0;
                id v15 = v75;
                id v10 = v28;
                goto LABEL_15;
              }
              long long v49 = [v83 URLByAppendingPathComponent:v67];
              if (v49)
              {
                long long v82 = v49;
                uint64_t v50 = [v49 URLByDeletingLastPathComponent];
                if (v50)
                {
                  char v79 = (void *)v11;
                  uint64_t v65 = v50;
                  uint64_t v51 = [v50 path];
                  id v87 = v75;
                  char v66 = [v77 createDirectoryAtPath:v51 withIntermediateDirectories:1 attributes:0 error:&v87];
                  id v52 = v87;

                  if (v66 & 1) != 0 || ([v52 isFileExistsError])
                  {
                    uint64_t v76 = v25;
                    uint64_t v53 = [v82 path];
                    int v54 = [v77 fileExistsAtPath:v53];

                    uint64_t v64 = v21;
                    uint64_t v73 = v7;
                    if (v54)
                    {
                      uint64_t v55 = [v82 path];
                      id v86 = v52;
                      char v56 = [v77 removeItemAtPath:v55 error:&v86];
                      id v57 = v86;

                      if ((v56 & 1) == 0)
                      {
                        [(MRULogHelper *)v22 log:@"Failed to remove file at %@: %@", v82, v57];
                        uint64_t v13 = v82;
                        id v16 = 0;
                        id v17 = 0;
                        id v15 = v57;
                        uint64_t v8 = v25;
                        id v10 = v28;
                        int v12 = v83;
                        int v20 = (void *)v69;
                        uint64_t v18 = v70;
                        id v21 = v64;
                        uint64_t v11 = (uint64_t)v79;
                        goto LABEL_47;
                      }
                      uint64_t v58 = v57;
                    }
                    else
                    {
                      uint64_t v58 = v52;
                    }
                    char v60 = [v79 path];
                    uint64_t v61 = [v82 path];
                    id v85 = v58;
                    char v62 = [v77 copyItemAtPath:v60 toPath:v61 error:&v85];
                    id v63 = v85;

                    if (v62)
                    {
                      id v16 = 0;
                      id v17 = 0;
                      id v7 = v73;
                      uint64_t v8 = v76;
                      uint64_t v19 = (void *)v67;
                      id v10 = v28;
                      uint64_t v13 = v82;
                      int v12 = v83;
                      int v20 = (void *)v69;
                      uint64_t v18 = v70;
                      id v21 = v64;
                      uint64_t v11 = (uint64_t)v79;
                      id v15 = v63;
LABEL_48:
                      int v14 = v65;
                      goto LABEL_10;
                    }
                    uint64_t v11 = (uint64_t)v79;
                    [(MRULogHelper *)v22 log:@"Failed to copy %@ to %@: %@", v79, v82, v63];
                    uint64_t v13 = v82;
                    id v15 = v63;
                    id v16 = 0;
                    id v17 = 0;
                    id v7 = v73;
                    uint64_t v8 = v76;
                    id v10 = v28;
                    int v12 = v83;
                    int v20 = (void *)v69;
                    uint64_t v18 = v70;
                    id v21 = v64;
LABEL_47:
                    uint64_t v19 = (void *)v67;
                    goto LABEL_48;
                  }
                  [(MRULogHelper *)v22 log:@"Failed to create directory at '%@': %@", v65, v52];
                  int v14 = v65;
                  id v16 = 0;
                  uint64_t v8 = v25;
                  id v17 = 0;
                  id v10 = v28;
                  int v12 = v83;
                  int v20 = (void *)v69;
                  uint64_t v18 = v70;
                  id v15 = v52;
                  uint64_t v11 = (uint64_t)v79;
                }
                else
                {
                  [(MRULogHelper *)v22 log:@"Failed to compose destDirURL"];
                  int v14 = 0;
                  id v16 = 0;
                  uint64_t v8 = v25;
                  id v17 = 0;
                  id v15 = v75;
                  id v10 = v28;
                  int v12 = v83;
                  int v20 = (void *)v69;
                  uint64_t v18 = v70;
                }
                uint64_t v19 = (void *)v67;
                uint64_t v13 = v82;
                goto LABEL_10;
              }
              [(MRULogHelper *)v22 log:@"Failed to compose destFileURL"];
              uint64_t v13 = 0;
              int v14 = 0;
              id v16 = 0;
              uint64_t v8 = v25;
              id v17 = 0;
              id v15 = v75;
              id v10 = v28;
              int v12 = v83;
            }
            else
            {
              [(MRULogHelper *)v22 log:@"Failed to compose file url"];
              id v9 = 0;
              uint64_t v13 = 0;
              int v14 = 0;
              id v16 = 0;
              uint64_t v8 = v25;
              id v17 = 0;
              id v10 = v28;
              id v15 = v81;
              int v12 = v83;
            }
            int v20 = (void *)v69;
            uint64_t v18 = v70;
            uint64_t v19 = (void *)v67;
            goto LABEL_10;
          }
          [(MRULogHelper *)v22 log:@"Failed to get filePathSuffix"];
          id v9 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          id v16 = 0;
          uint64_t v8 = v25;
          id v17 = 0;
          uint64_t v19 = 0;
          id v10 = v28;
        }
        else
        {
          [(MRULogHelper *)v22 log:@"No bundleURL"];
          id v9 = 0;
          id v10 = 0;
          uint64_t v11 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          id v16 = 0;
          uint64_t v8 = v25;
          id v17 = 0;
          uint64_t v19 = 0;
        }
        id v15 = v81;
        int v12 = v83;
        goto LABEL_15;
      }
      uint64_t v29 = @"No infoArray in deviceInfo dict";
    }
    else
    {
      uint64_t v29 = @"No deviceInfo in options dict";
    }
    [(MRULogHelper *)v22 log:v29];
    uint64_t v8 = 0;
    id v9 = 0;
    id v10 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    int v14 = 0;
    id v15 = 0;
    id v16 = 0;
    id v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    id v21 = 0;
  }
LABEL_10:
  uint64_t v80 = v13;
  long long v84 = v12;
  uint64_t v78 = (void *)v11;
  uint64_t v68 = v10;
  uint64_t v71 = v6;
  uint64_t v72 = v7;
  uint64_t v74 = v8;
  uint64_t v30 = v18;
  uint64_t v31 = v20;
  id v32 = v15;
  int v33 = v19;
  uint64_t v34 = v14;
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  id v37 = v9;

  return v37;
}

id MantaMCURestoreInfoCoreCreateRequest(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = 0;
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    id v7 = 0;
    uint64_t v8 = 0;
    id v9 = 0;
    id v10 = 0;
    id v11 = 0;
    int v12 = 0;
    uint64_t v71 = 0;
    id v13 = 0;
    id v14 = 0;
    goto LABEL_18;
  }
  id v7 = 0;
  uint64_t v8 = 0;
  id v9 = 0;
  id v10 = 0;
  id v11 = 0;
  int v12 = 0;
  uint64_t v71 = 0;
  id v13 = 0;
  id v14 = 0;
  if (!a2) {
    goto LABEL_18;
  }
  id v5 = a1;
  id v16 = [[MRULogHelper alloc] initWithOptions:v5 logFunction:a2 logContext:a3];
  id v7 = [v5 objectForKeyedSubscript:@"DeviceInfo"];
  uint64_t v71 = v16;
  if (!v7)
  {
    uint64_t v8 = 0;
    id v9 = 0;
    id v10 = 0;
    id v11 = 0;
    int v12 = 0;
    id v13 = 0;
LABEL_17:
    id v14 = 0;
    goto LABEL_18;
  }
  id v13 = [v5 objectForKeyedSubscript:@"FirmwareData"];
  if (!v13)
  {
    uint64_t v8 = 0;
    id v9 = 0;
    id v10 = 0;
LABEL_16:
    id v11 = 0;
    int v12 = 0;
    goto LABEL_17;
  }
  id v17 = [v7 objectForKeyedSubscript:@"PersonalizationInfoArray"];
  id v10 = v17;
  if (!v17)
  {
    uint64_t v8 = 0;
    id v9 = 0;
    goto LABEL_16;
  }
  [v17 firstObject];
  uint64_t v70 = v72 = 0;
  id v9 = [[MRUPersonalizationInfo alloc] initWithOptions:v70 error:&v72];
  id v18 = v72;
  id v14 = v18;
  if (!v9)
  {
    id v11 = 0;
    int v12 = 0;
    uint64_t v8 = v70;
    goto LABEL_18;
  }
  uint64_t v69 = v18;
  uint64_t v19 = [v7 objectForKeyedSubscript:@"LocalSigningID"];
  if (v19) {
    int v12 = (void *)v19;
  }
  else {
    int v12 = (void *)MEMORY[0x263EFFA80];
  }
  if (([v12 BOOLValue] & 1) == 0)
  {
    id v11 = [MEMORY[0x263EFF9A0] dictionary];
    uint64_t v22 = [(MRUPersonalizationInfo *)v9 ticketName];
    uint64_t v23 = [@"@" stringByAppendingString:v22];
    [v11 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:v23];

    uint64_t v24 = NSNumber;
    char v62 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
    unint64_t v25 = [v24 numberWithUnsignedInt:[v62 boardID]];
    unint64_t v26 = [(MRUPersonalizationInfo *)v9 boardIDPropertyName];
    [v11 setObject:v25 forKeyedSubscript:v26];

    uint64_t v27 = NSNumber;
    id v63 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
    int v28 = [v27 numberWithUnsignedInt:[v63 chipID]];
    uint64_t v29 = [(MRUPersonalizationInfo *)v9 chipIDPropertyName];
    [v11 setObject:v28 forKeyedSubscript:v29];

    uint64_t v30 = NSNumber;
    uint64_t v64 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
    uint64_t v31 = [v30 numberWithUnsignedLongLong:[v64 ecid]];
    id v32 = [(MRUPersonalizationInfo *)v9 ecidPropertyName];
    [v11 setObject:v31 forKeyedSubscript:v32];

    int v33 = [(MRUPersonalizationInfo *)v9 nonce];
    uint64_t v34 = [(MRUPersonalizationInfo *)v9 noncePropertyName];
    [v11 setObject:v33 forKeyedSubscript:v34];

    uint64_t v65 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
    if ([v65 productionStatus]) {
      uint64_t v35 = MEMORY[0x263EFFA88];
    }
    else {
      uint64_t v35 = MEMORY[0x263EFFA80];
    }
    uint64_t v36 = [(MRUPersonalizationInfo *)v9 productionModePropertyName];
    [v11 setObject:v35 forKeyedSubscript:v36];

    id v37 = NSNumber;
    char v66 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
    id v38 = [v37 numberWithUnsignedInt:[v66 securityDomain]];
    uint64_t v39 = [(MRUPersonalizationInfo *)v9 securityDomainPropertyName];
    [v11 setObject:v38 forKeyedSubscript:v39];

    uint64_t v67 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
    if ([v67 securityMode]) {
      uint64_t v40 = MEMORY[0x263EFFA88];
    }
    else {
      uint64_t v40 = MEMORY[0x263EFFA80];
    }
    id v41 = [(MRUPersonalizationInfo *)v9 securityModePropertyName];
    [v11 setObject:v40 forKeyedSubscript:v41];

    uint64_t v42 = [(MRUPersonalizationInfo *)v9 objectName];
    uint64_t v68 = v42;
    if ([v42 isEqualToString:@"RestoreRTKitOS"])
    {
      id v43 = &kFTABSubfileRRKO;
    }
    else
    {
      if (![v42 isEqualToString:@"RTKitOS"]) {
        goto LABEL_37;
      }
      id v43 = &kFTABSubfileRKOS;
    }
    uint64_t v44 = *v43;
    if (v44)
    {
      id v45 = v44;
      [(MRULogHelper *)v71 verboseLog:@"[%@]: %@ is FTAB subfile with tag '%@', extracting\n", @"MantaMRI", v42, v44];
      long long v46 = [[FTABFile alloc] initWithData:v13];
      if (v46)
      {
        long long v47 = v46;
        uint64_t v61 = v45;
        long long v48 = [(FTABFile *)v46 subfileWithTag:v45];
        if (v48)
        {
          long long v49 = v48;
          uint64_t v50 = [MEMORY[0x263EFF8F8] dataWithBytes:objc_msgSend(v48, "dataPointer") length:objc_msgSend(v48, "dataLength")];

          [(MRULogHelper *)v71 verboseLog:@"[%@]: Extracted %@ from FTAB", @"MantaMRI", v68];
          id v13 = (id)v50;
LABEL_38:
          ccsha384_di();
          [v13 length];
          id v13 = v13;
          [v13 bytes];
          ccdigest();
          v73[0] = @"Digest";
          char v60 = [MEMORY[0x263EFF8F8] dataWithBytes:v75 length:48];
          v74[0] = v60;
          v73[1] = @"EPRO";
          id v59 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
          int v51 = [v59 productionStatus];
          uint64_t v52 = MEMORY[0x263EFFA80];
          uint64_t v53 = MEMORY[0x263EFFA88];
          if (v51) {
            uint64_t v54 = MEMORY[0x263EFFA88];
          }
          else {
            uint64_t v54 = MEMORY[0x263EFFA80];
          }
          v74[1] = v54;
          int v73[2] = @"ESEC";
          uint64_t v55 = [(MRUPersonalizationInfo *)v9 hardwareInfo];
          if ([v55 securityMode]) {
            uint64_t v56 = v53;
          }
          else {
            uint64_t v56 = v52;
          }
          v73[3] = @"Trusted";
          v74[2] = v56;
          v74[3] = v53;
          id v57 = [NSDictionary dictionaryWithObjects:v74 forKeys:v73 count:4];
          uint64_t v58 = [(MRUPersonalizationInfo *)v9 tag];
          [v11 setObject:v57 forKeyedSubscript:v58];

          id v11 = v11;
          id v20 = v11;
LABEL_20:
          id v16 = v71;
          goto LABEL_21;
        }
      }
      id v14 = v69;
      uint64_t v8 = v70;
LABEL_18:
      uint64_t v69 = v14;
      uint64_t v70 = v8;
      id v20 = 0;
      if (a4) {
        *a4 = 0;
      }
      goto LABEL_20;
    }
LABEL_37:
    uint64_t v61 = 0;
    goto LABEL_38;
  }
  id v11 = 0;
  id v20 = (id)MEMORY[0x263EFFA78];
LABEL_21:

  return v20;
}

uint64_t RoseRestoreHost::create@<X0>(RoseRestoreHost *this@<X0>, const __CFString *a2@<X1>, ACFURestoreHost **a3@<X8>)
{
  Loguint64_t Instance = ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage((uint64_t)LogInstance, 0, "%s::%s: RoseUpdater Version: %s\n", v8, v9, v10, v11, v12, (char)"RoseRestoreHost");
  id v13 = (ACFURestoreHost *)operator new(0xF8uLL);
  ACFURestoreHost::ACFURestoreHost(v13);
  *(void *)id v13 = &unk_26C808478;
  *((void *)v13 + 29) = 0;
  *((void *)v13 + 30) = 0;
  *a3 = v13;
  uint64_t result = RoseRestoreHost::init(v13, this, a2);
  if ((result & 1) == 0)
  {
    *a3 = 0;
    id v15 = *(uint64_t (**)(ACFURestoreHost *))(*(void *)v13 + 24);
    return v15(v13);
  }
  return result;
}

void sub_217AEACEC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

__CFDictionary *RoseRestoreHost::createRequest(ACFULogging *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 17))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(a1);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: security mode demotion disallowed for Rose\n", v9, v10, v11, v12, v13, (char)"RoseRestoreHost");
    return 0;
  }
  else
  {
    id v4 = *(std::__shared_weak_count **)(a2 + 8);
    id v20 = *(CFDictionaryRef **)a2;
    id v21 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v5 = ACFURestoreHost::createRequest((uint64_t)a1, &v20, a3);
    id v6 = (ACFULogging *)v21;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v5)
    {
      if (*(unsigned char *)(a3 + 16)) {
        CFDictionaryRemoveValue(v5, @"Rap,RestoreRTKitOS");
      }
    }
    else
    {
      id v14 = ACFULogging::getLogInstance(v6);
      ACFULogging::handleMessage((uint64_t)v14, 2u, "%s::%s: failed to create output request dictionary\n", v15, v16, v17, v18, v19, (char)"RoseRestoreHost");
    }
  }
  return v5;
}

void sub_217AEAE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void RoseRestoreHost::~RoseRestoreHost(RoseRestoreHost *this)
{
  *(void *)this = &unk_26C808478;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  ACFURestoreHost::~ACFURestoreHost(this);
}

{
  void *v1;
  uint64_t vars8;

  RoseRestoreHost::~RoseRestoreHost(this);

  operator delete(v1);
}

uint64_t RoseRestoreHost::init(RoseRestoreHost *this, CFTypeRef cf, const __CFString *a3)
{
  v110[1] = *MEMORY[0x263EF8340];
  if (!cf
    || (id v5 = this, v6 = (RoseRestoreHost *)CFGetTypeID(cf),
                   this = (RoseRestoreHost *)CFDictionaryGetTypeID(),
                   v6 != this))
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: Bad options\n", v75, v76, v77, v78, v79, (char)"RoseRestoreHost");
    return 0;
  }
  CFDictionaryRef Value = (ACFULogging *)CFDictionaryGetValue((CFDictionaryRef)cf, @"DeviceInfo");
  if (!Value
    || (CFDictionaryRef v8 = Value, v9 = CFGetTypeID(Value), Value = (ACFULogging *)CFDictionaryGetTypeID(), (ACFULogging *)v9 != Value))
  {
    uint64_t v80 = ACFULogging::getLogInstance(Value);
    ACFULogging::handleMessage((uint64_t)v80, 2u, "%s::%s: No device info\n", v81, v82, v83, v84, v85, (char)"RoseRestoreHost");
    return 0;
  }
  CFTypeID TypeID = (ACFULogging *)CFDictionaryGetValue(v8, @"Rap,ChipID");
  if (!TypeID
    || (CFDataRef v11 = TypeID, v12 = CFGetTypeID(TypeID), TypeID = (ACFULogging *)CFDataGetTypeID(), (ACFULogging *)v12 != TypeID))
  {
    id v86 = ACFULogging::getLogInstance(TypeID);
    ACFULogging::handleMessage((uint64_t)v86, 2u, "%s::%s: No chip ID\n", v87, v88, v89, v90, v91, (char)"RoseRestoreHost");
    return 0;
  }
  CFIndex Length = (ACFULogging *)CFDataGetLength(v11);
  if (Length != (ACFULogging *)2)
  {
    long long v92 = ACFULogging::getLogInstance(Length);
    ACFULogging::handleMessage((uint64_t)v92, 2u, "%s::%s: Bad chip ID size\n", v93, v94, v95, v96, v97, (char)"RoseRestoreHost");
    return 0;
  }
  BytePtr = CFDataGetBytePtr(v11);
  RoseCapabilities::create((RoseCapabilities *)*(unsigned __int16 *)BytePtr, (RoseCapabilities **)&__src);
  long long v15 = __src;
  __srCC_SHA256_CTX c = 0uLL;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v5 + 30);
  *(_OWORD *)((char *)v5 + 232) = v15;
  if (!v16)
  {
    if ((void)v15) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&__src + 1);
  if (*((void *)&__src + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__src + 1));
  }
  if (!*((void *)v5 + 29))
  {
LABEL_16:
    id v21 = ACFULogging::getLogInstance((ACFULogging *)v16);
    ACFULogging::handleMessage((uint64_t)v21, 2u, "%s::%s: failed to create capabilities\n", v22, v23, v24, v25, v26, (char)"RoseRestoreHost");
    return 0;
  }
LABEL_12:
  __srCC_SHA256_CTX c = xmmword_2642BB8B8;
  long long v105 = *(_OWORD *)&off_2642BB8C8;
  uint64_t v17 = (char **)((char *)v5 + 40);
  std::vector<__CFString const*>::__assign_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>((char *)v5 + 40, (char *)&__src, (uint64_t)&v106, 4uLL);
  if (RoseCapabilities::supportsRTKitIOConfig(*((RoseCapabilities **)v5 + 29)))
  {
    unint64_t v18 = *((void *)v5 + 7);
    uint64_t v19 = (void *)*((void *)v5 + 6);
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v27 = ((char *)v19 - *v17) >> 3;
      if ((unint64_t)(v27 + 1) >> 61) {
        std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v18 - (void)*v17;
      uint64_t v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
        uint64_t v29 = v27 + 1;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30) {
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<__CFString const*>>((uint64_t)v5 + 56, v30);
      }
      else {
        uint64_t v31 = 0;
      }
      id v32 = &v31[8 * v27];
      int v33 = &v31[8 * v30];
      *(void *)id v32 = @"Rap,RTKitIOConfig";
      id v20 = v32 + 8;
      uint64_t v35 = (char *)*((void *)v5 + 5);
      uint64_t v34 = (char *)*((void *)v5 + 6);
      if (v34 != v35)
      {
        do
        {
          uint64_t v36 = *((void *)v34 - 1);
          v34 -= 8;
          *((void *)v32 - 1) = v36;
          v32 -= 8;
        }
        while (v34 != v35);
        uint64_t v34 = *v17;
      }
      *((void *)v5 + 5) = v32;
      *((void *)v5 + 6) = v20;
      *((void *)v5 + 7) = v33;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *uint64_t v19 = @"Rap,RTKitIOConfig";
      id v20 = v19 + 1;
    }
    *((void *)v5 + 6) = v20;
  }
  if (RoseCapabilities::requiresSeparateFirmwareTargetForCertification(*((RoseCapabilities **)v5 + 29)))
  {
    unint64_t v37 = *((void *)v5 + 7);
    id v38 = (void *)*((void *)v5 + 6);
    if ((unint64_t)v38 >= v37)
    {
      uint64_t v40 = ((char *)v38 - *v17) >> 3;
      if ((unint64_t)(v40 + 1) >> 61) {
        std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v41 = v37 - (void)*v17;
      uint64_t v42 = v41 >> 2;
      if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
        uint64_t v42 = v40 + 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<__CFString const*>>((uint64_t)v5 + 56, v43);
      }
      else {
        uint64_t v44 = 0;
      }
      id v45 = &v44[8 * v40];
      long long v46 = &v44[8 * v43];
      *(void *)id v45 = @"Rap,RestoreRTKitOS";
      uint64_t v39 = v45 + 8;
      long long v48 = (char *)*((void *)v5 + 5);
      long long v47 = (char *)*((void *)v5 + 6);
      if (v47 != v48)
      {
        do
        {
          uint64_t v49 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v45 - 1) = v49;
          v45 -= 8;
        }
        while (v47 != v48);
        long long v47 = *v17;
      }
      *((void *)v5 + 5) = v45;
      *((void *)v5 + 6) = v39;
      *((void *)v5 + 7) = v46;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *id v38 = @"Rap,RestoreRTKitOS";
      uint64_t v39 = v38 + 1;
    }
    *((void *)v5 + 6) = v39;
  }
  __srCC_SHA256_CTX c = xmmword_2642BB8E8;
  long long v105 = *(_OWORD *)&off_2642BB8F8;
  long long v106 = xmmword_2642BB908;
  long long v107 = @"Rap,SecurityDomain";
  std::vector<__CFString const*>::__assign_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>((char *)v5 + 64, (char *)&__src, (uint64_t)&v108, 7uLL);
  *(void *)&__srCC_SHA256_CTX c = @"@Rap,Ticket";
  std::vector<__CFString const*>::__assign_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>((char *)v5 + 88, (char *)&__src, (uint64_t)&__src + 8, 1uLL);
  *(void *)&__srCC_SHA256_CTX c = @"Rap,Ticket";
  std::vector<__CFString const*>::__assign_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>((char *)v5 + 112, (char *)&__src, (uint64_t)&__src + 8, 1uLL);
  __srCC_SHA256_CTX c = xmmword_2642BB920;
  long long v105 = *(_OWORD *)&off_2642BB930;
  long long v106 = xmmword_2642BB940;
  uint64_t v50 = (void *)((char *)v5 + 136);
  std::vector<ACFURestoreHost::FileList>::__assign_with_size[abi:ne180100]<ACFURestoreHost::FileList const*,ACFURestoreHost::FileList const*>((char *)v5 + 136, (char *)&__src, (uint64_t)&v107, 3uLL);
  if (RoseCapabilities::supportsRTKitIOConfig(*((RoseCapabilities **)v5 + 29)))
  {
    unint64_t v51 = *((void *)v5 + 19);
    unint64_t v52 = *((void *)v5 + 18);
    if (v52 >= v51)
    {
      uint64_t v54 = (uint64_t)(v52 - *v50) >> 4;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60) {
        std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v56 = v51 - *v50;
      if (v56 >> 3 > v55) {
        unint64_t v55 = v56 >> 3;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57) {
        uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ACFURestoreHost::FileList>>((uint64_t)v5 + 152, v57);
      }
      else {
        uint64_t v58 = 0;
      }
      id v59 = &v58[16 * v54];
      char v60 = &v58[16 * v57];
      *(void *)id v59 = @"Rap,RTKitIOConfig";
      v59[8] = 1;
      uint64_t v53 = v59 + 16;
      char v62 = (unsigned char *)*((void *)v5 + 17);
      uint64_t v61 = (unsigned char *)*((void *)v5 + 18);
      if (v61 != v62)
      {
        do
        {
          uint64_t v63 = *((void *)v61 - 2);
          v61 -= 16;
          char v64 = v61[8];
          *((void *)v59 - 2) = v63;
          v59 -= 16;
          v59[8] = v64;
        }
        while (v61 != v62);
        uint64_t v61 = (unsigned char *)*v50;
      }
      *((void *)v5 + 17) = v59;
      *((void *)v5 + 18) = v53;
      *((void *)v5 + 19) = v60;
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(void *)unint64_t v52 = @"Rap,RTKitIOConfig";
      *(unsigned char *)(v52 + 8) = 1;
      uint64_t v53 = (char *)(v52 + 16);
    }
    *((void *)v5 + 18) = v53;
  }
  CFTypeID v65 = CFNumberGetTypeID();
  *(void *)&__srCC_SHA256_CTX c = @"Rap,ChipID";
  *((void *)&__src + 1) = v65;
  CFTypeID v66 = CFNumberGetTypeID();
  *(void *)&long long v105 = @"Rap,BoardID";
  *((void *)&v105 + 1) = v66;
  CFTypeID v67 = CFNumberGetTypeID();
  *(void *)&long long v106 = @"Rap,SecurityDomain";
  *((void *)&v106 + 1) = v67;
  CFTypeID v68 = CFBooleanGetTypeID();
  long long v107 = @"Rap,ProductionMode";
  CFTypeID v108 = v68;
  CFTypeID v69 = CFBooleanGetTypeID();
  v109[0] = (unint64_t)@"Rap,SecurityMode";
  v109[1] = v69;
  CFTypeID v70 = CFNumberGetTypeID();
  v109[2] = (unint64_t)@"Rap,ECID";
  v109[3] = v70;
  CFTypeID v71 = CFDataGetTypeID();
  v109[4] = (unint64_t)@"Rap,Nonce";
  v109[5] = v71;
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__assign_unique<std::pair<__CFString const* const,unsigned long> const*>((uint64_t **)v5 + 20, (unint64_t *)&__src, v110);
  if (RoseCapabilities::supportsRTKitIOConfig(*((RoseCapabilities **)v5 + 29))) {
    *((void *)v5 + 23) = @"Rap,FdrRootCaDigest";
  }
  if (RoseCapabilities::supportsRTKitIOConfig(*((RoseCapabilities **)v5 + 29))) {
    *((void *)v5 + 24) = @"Rap,FDRAllowUnsealed";
  }
  *(void *)&__srCC_SHA256_CTX c = @"Rap,RTKitOS";
  WORD4(__src) = 1;
  *(void *)&long long v105 = @"Rap,RestoreRTKitOS";
  WORD4(v105) = 1;
  *(void *)&long long v106 = @"Rap,SoftwareBinaryDsp1";
  WORD4(v106) = 0;
  long long v107 = @"Rap,RTKitIOConfig";
  LOWORD(v108) = 0;
  std::__tree<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>>>::__assign_unique<std::pair<__CFString const* const,ACFURestoreHost::DemoteConfig> const*>((uint64_t **)v5 + 25, (unint64_t *)&__src, v109);
  *((void *)v5 + 28) = @"Rose";
  uint64_t v72 = ACFURestoreHost::init((const void **)v5, (const __CFDictionary *)cf, a3);
  if ((v72 & 1) == 0)
  {
    long long v98 = ACFULogging::getLogInstance((ACFULogging *)v72);
    ACFULogging::handleMessage((uint64_t)v98, 2u, "%s::%s: failed to initialize base class\n", v99, v100, v101, v102, v103, (char)"RoseRestoreHost");
    return 0;
  }
  return 1;
}

const void *RoseRestoreHost::copyFirmwareUpdater(uint64_t a1, const __CFDictionary *a2, int a3)
{
  GetRoseTatsuTagToFileNameMap((uint64_t)&v202);
  id v5 = (const std::string::value_type **)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at((uint64_t)&v202, (unint64_t *)&kRoseRestoreRtkitos);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v203, *v5, (std::string::size_type)v5[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    v203.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
    *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v6;
  }
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v202, (char *)v202.__r_.__value_.__l.__size_);
  GetRoseTatsuTagToFileNameMap((uint64_t)&v201);
  id v7 = (const std::string::value_type **)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at((uint64_t)&v201, (unint64_t *)&kRoseRtkitos);
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v202, *v7, (std::string::size_type)v7[1]);
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    v202.__r_.__value_.__r.__words[2] = (std::string::size_type)v7[2];
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v8;
  }
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v201, (char *)v201.__r_.__value_.__l.__size_);
  GetRoseTatsuTagToFileNameMap((uint64_t)&v200);
  CFTypeID v9 = (const std::string::value_type **)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at((uint64_t)&v200, (unint64_t *)&kRoseSwDsp1);
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v201, *v9, (std::string::size_type)v9[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    v201.__r_.__value_.__r.__words[2] = (std::string::size_type)v9[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v10;
  }
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v200, (char *)v200.__r_.__value_.__l.__size_);
  GetRoseTatsuTagToFileNameMap((uint64_t)&v198);
  CFDataRef v11 = (const std::string::value_type **)std::map<__CFString const*,ACFURestoreHost::DemoteConfig>::at((uint64_t)&v198, (unint64_t *)&kRoseRtkitosICNF);
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v200, *v11, (std::string::size_type)v11[1]);
  }
  else
  {
    long long v12 = *(_OWORD *)v11;
    v200.__r_.__value_.__r.__words[2] = (std::string::size_type)v11[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v12;
  }
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v198, *((char **)&v198 + 1));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"DeviceInfo");
  CFDictionaryRef v14 = Value;
  if (!Value || (CFTypeID v15 = CFGetTypeID(Value), v15 != CFDictionaryGetTypeID()))
  {
    std::string::basic_string[abi:ne180100]<0>(v196, "copyFirmwareUpdater: failed to get device info list");
    uint64_t v101 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v196, 0xFA1uLL, 0);
    if (v197 < 0) {
      operator delete(v196[0]);
    }
    Loguint64_t Instance = ACFULogging::getLogInstance(v101);
    uint64_t v100 = "%s::%s: failed to get device info list\n";
    goto LABEL_110;
  }
  CFDataRef v16 = (const __CFData *)CFDictionaryGetValue(v14, @"Rap,RestoreBootNonce");
  if (v16 && (TypeID = CFDataGetTypeID(), unint64_t v18 = (ACFULogging *)CFGetTypeID(v16), (ACFULogging *)TypeID == v18))
  {
    uint64_t v19 = ACFULogging::getLogInstance(v18);
    ACFULogging::handleMessage((uint64_t)v19, 0, "%s::%s: Restore boot nonce present!\n", v20, v21, v22, v23, v24, (char)"RoseRestoreHost");
    if (CFDataGetLength(v16) != 8)
    {
      std::string::basic_string[abi:ne180100]<0>(v194, "copyFirmwareUpdater: nonce is of unexpected size");
      uint64_t v162 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v194, 0x3EDuLL, 0);
      if (v195 < 0) {
        operator delete(v194[0]);
      }
      Loguint64_t Instance = ACFULogging::getLogInstance(v162);
      uint64_t v100 = "%s::%s: nonce is of unexpected size\n";
      goto LABEL_110;
    }
    unint64_t v163 = *(void *)CFDataGetBytePtr(v16);
  }
  else
  {
    unint64_t v163 = 0;
  }
  uint64_t v25 = CFDictionaryGetValue(v14, @"Rap,ChipRev");
  uint64_t v26 = CFDictionaryGetValue(v14, @"Rap,BoardID");
  if (!v25
    || (uint64_t v27 = v26) == 0
    || (CFTypeID v28 = CFDataGetTypeID(), v28 != CFGetTypeID(v25))
    || (CFTypeID v29 = CFDataGetTypeID(), v29 != CFGetTypeID(v27)))
  {
    std::string::basic_string[abi:ne180100]<0>(v192, "copyFirmwareUpdater: unexpected device info parameters");
    uint64_t v93 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v192, 0x3EDuLL, 0);
    if (v193 < 0) {
      operator delete(v192[0]);
    }
    Loguint64_t Instance = ACFULogging::getLogInstance(v93);
    uint64_t v100 = "%s::%s: unexpected device info parameters\n";
    goto LABEL_110;
  }
  if (CFDataGetLength((CFDataRef)v25) != 2 || CFDataGetLength((CFDataRef)v27) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v190, "copyFirmwareUpdater: bad device info parameters");
    uint64_t v102 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v190, 0x3EDuLL, 0);
    if (v191 < 0) {
      operator delete(v190[0]);
    }
    Loguint64_t Instance = ACFULogging::getLogInstance(v102);
    uint64_t v100 = "%s::%s: bad device info parameters\n";
LABEL_110:
    long long v46 = 0;
    uint64_t v76 = 0;
    uint64_t v58 = 0;
    ACFULogging::handleMessage((uint64_t)LogInstance, 2u, v100, v95, v96, v97, v98, v99, (char)"RoseRestoreHost");
    uint64_t v84 = 0;
    goto LABEL_86;
  }
  int v30 = *(unsigned __int16 *)CFDataGetBytePtr((CFDataRef)v25);
  BytePtr = (ACFULogging *)CFDataGetBytePtr((CFDataRef)v27);
  id v32 = ACFULogging::getLogInstance(BytePtr);
  ACFULogging::handleMessage((uint64_t)v32, 0, "%s::%s: Rose Hardware Info (Board ID: 0x%04x, Chip Revision: 0x%04x)\n", v33, v34, v35, v36, v37, (char)"RoseRestoreHost");
  uint64_t v39 = ACFULogging::getLogInstance(v38);
  std::string::basic_string[abi:ne180100]<0>(&v188, "RoseRestoreHost");
  uint64_t v40 = std::string::append(&v188, "::");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v189.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  uint64_t v42 = std::string::append(&v189, "copyFirmwareUpdater");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  std::string::size_type v199 = v42->__r_.__value_.__r.__words[2];
  long long v198 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType((uint64_t)v39, (uint64_t *)&v198, 0, (uint64_t)"Firmware File Dictionary: ", (uint64_t)a2);
  if (SHIBYTE(v199) < 0) {
    operator delete((void *)v198);
  }
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v188.__r_.__value_.__l.__data_);
  }
  CFDataRef v44 = (const __CFData *)ACFURestoreHost::copyDataFromFileDictionary((ACFULogging *)@"Rap,RTKitOS", a2, a3);
  CFDataRef cf = v44;
  if (v44)
  {
    CFTypeID v45 = CFGetTypeID(v44);
    if (v45 == CFDataGetTypeID())
    {
      ACFUFTABFile::create(cf, 0, v30, (ACFUFile **)&v198);
      long long v46 = (ACFUFTABFile *)v198;
      if (!(void)v198)
      {
        std::string::basic_string[abi:ne180100]<0>(v184, "copyFirmware: failed to init bundle firmware");
        uint64_t v133 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v184, 0xFA0uLL, 0);
        if (v185 < 0) {
          operator delete(v184[0]);
        }
        uint64_t v134 = ACFULogging::getLogInstance(v133);
        long long v46 = 0;
        uint64_t v76 = 0;
        uint64_t v58 = 0;
        ACFULogging::handleMessage((uint64_t)v134, 2u, "%s::%s: failed to init bundle firmware\n", v135, v136, v137, v138, v139, (char)"RoseRestoreHost");
        uint64_t v83 = 0;
        CFDataRef v56 = 0;
        uint64_t v74 = 0;
        uint64_t v84 = 0;
        goto LABEL_80;
      }
      if (!(*(unsigned int (**)(void, std::string *))(*(void *)v198 + 16))(v198, &v201)
        || ((*(uint64_t (**)(ACFUFTABFile *, std::string *))(*(void *)v46 + 16))(v46, &v202) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v182, "copyFirmware: bundle firmware specified is invalid");
        long long v110 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v182, 0x3E8uLL, 0);
        if (v183 < 0) {
          operator delete(v182[0]);
        }
        long long v111 = ACFULogging::getLogInstance(v110);
        uint64_t v76 = 0;
        uint64_t v58 = 0;
        ACFULogging::handleMessage((uint64_t)v111, 2u, "%s::%s: bundle firmware specified is invalid\n", v112, v113, v114, v115, v116, (char)"RoseRestoreHost");
        uint64_t v83 = 0;
        CFDataRef v56 = 0;
        uint64_t v74 = 0;
        uint64_t v84 = 0;
        goto LABEL_80;
      }
      if (RoseCapabilities::supportsRTKitIOConfig(*(RoseCapabilities **)(a1 + 232)))
      {
        long long v47 = (ACFULogging *)(*(uint64_t (**)(ACFUFTABFile *, std::string *))(*(void *)v46 + 16))(v46, &v200);
        if ((v47 & 1) == 0)
        {
          long long v48 = ACFULogging::getLogInstance(v47);
          ACFULogging::handleMessage((uint64_t)v48, 3u, "%s::%s: copyfirmware: ICNF missing in bundle firmware\n", v49, v50, v51, v52, v53, (char)"RoseRestoreHost");
        }
      }
      uint64_t v54 = (ACFULogging *)CFDictionaryContainsKey(a2, *(const void **)(a1 + 8));
      if (v54)
      {
        CFDataRef v55 = (const __CFData *)ACFURestoreHost::copyDataFromFileDictionary(*(ACFULogging **)(a1 + 8), a2, a3);
        CFDataRef v56 = v55;
        if (!v55 || (CFTypeID v57 = CFGetTypeID(v55), v57 != CFDataGetTypeID()))
        {
          std::string::basic_string[abi:ne180100]<0>(v180, "copyFirmware: rooted override data unavailable");
          uint64_t v124 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v180, 0x3E8uLL, 0);
          if (v181 < 0) {
            operator delete(v180[0]);
          }
          char v60 = ACFULogging::getLogInstance(v124);
          CFTypeID v66 = "%s::%s: rooted override data unavailable\n";
          goto LABEL_124;
        }
        ACFUFTABFile::create(v56, 0, v30, (ACFUFile **)&v198);
        uint64_t v58 = (uint64_t (***)(void, std::string *))v198;
        if (!(void)v198)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "copyFirmware: failed to init ftab file object");
          id v59 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)__p, 0xFA0uLL, 0);
          if (v179 < 0) {
            operator delete(__p[0]);
          }
          char v60 = ACFULogging::getLogInstance(v59);
          CFTypeID v66 = "%s::%s: failed to init ftab file object\n";
LABEL_124:
          uint64_t v76 = 0;
          uint64_t v58 = 0;
          ACFULogging::handleMessage((uint64_t)v60, 2u, v66, v61, v62, v63, v64, v65, (char)"RoseRestoreHost");
          uint64_t v83 = 0;
          uint64_t v74 = 0;
          uint64_t v84 = 0;
LABEL_80:
          CFRelease(cf);
          if (v74) {
            CFRelease(v74);
          }
          if (v56) {
            CFRelease(v56);
          }
          if (v83) {
            CFRelease(v83);
          }
          goto LABEL_86;
        }
      }
      else
      {
        CFTypeID v67 = ACFULogging::getLogInstance(v54);
        uint64_t v58 = 0;
        ACFULogging::handleMessage((uint64_t)v67, 0, "%s::%s: no firmware override specified\n", v68, v69, v70, v71, v72, (char)"RoseRestoreHost");
        CFDataRef v56 = 0;
      }
      if (CFDictionaryContainsKey(a2, @"Rap,RestoreRTKitOS"))
      {
        uint64_t v73 = ACFURestoreHost::copyDataFromFileDictionary((ACFULogging *)@"Rap,RestoreRTKitOS", a2, a3);
        uint64_t v74 = v73;
        if (v73 && (CFTypeID v75 = CFGetTypeID(v73), v75 == CFDataGetTypeID()))
        {
          ACFUFTABFile::create((const __CFData *)v74, 0, v30, (ACFUFile **)&v198);
          uint64_t v76 = (uint64_t (***)(void, std::string *))v198;
          if ((void)v198)
          {
            if (((*(uint64_t (**)(void, std::string *))(*(void *)v198 + 16))(v198, &v203) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v172, "copyFirmware: bundle cert firmware doesn't have rrko");
              uint64_t v141 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v172, 0x3E8uLL, 0);
              if (v173 < 0) {
                operator delete(v172[0]);
              }
              uint64_t v142 = ACFULogging::getLogInstance(v141);
              ACFULogging::handleMessage((uint64_t)v142, 2u, "%s::%s: bundle cert firmware doesn't have 'rrko'\n", v143, v144, v145, v146, v147, (char)"RoseRestoreHost");
              goto LABEL_141;
            }
            if (v58) {
              goto LABEL_54;
            }
            goto LABEL_61;
          }
          std::string::basic_string[abi:ne180100]<0>(v174, "copyFirmware: failed to init certification firmware");
          uint64_t v140 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v174, 0xFA0uLL, 0);
          if (v175 < 0) {
            operator delete(v174[0]);
          }
          uint64_t v126 = ACFULogging::getLogInstance(v140);
          uint64_t v132 = "%s::%s: failed to init certification firmware\n";
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v176, "copyFirmware: rrko bundle data unavailable");
          char v125 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v176, 0x3E8uLL, 0);
          if (v177 < 0) {
            operator delete(v176[0]);
          }
          uint64_t v126 = ACFULogging::getLogInstance(v125);
          uint64_t v132 = "%s::%s: rrko bundle data unavailable\n";
        }
        uint64_t v76 = 0;
        ACFULogging::handleMessage((uint64_t)v126, 2u, v132, v127, v128, v129, v130, v131, (char)"RoseRestoreHost");
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        goto LABEL_80;
      }
      uint64_t v76 = 0;
      uint64_t v74 = 0;
      if (v58)
      {
LABEL_54:
        int v77 = (*v58)[2](v58, &v203);
        int v78 = (*v58)[2](v58, &v202);
        if (v77) {
          uint64_t v79 = v58;
        }
        else {
          uint64_t v79 = v76;
        }
        if (v78) {
          uint64_t v80 = (ACFUFTABFile *)v58;
        }
        else {
          uint64_t v80 = v46;
        }
        goto LABEL_62;
      }
LABEL_61:
      uint64_t v79 = v76;
      uint64_t v80 = v46;
LABEL_62:
      char v81 = (*(uint64_t (**)(ACFUFTABFile *, std::string *))(*(void *)v80 + 16))(v80, &v203);
      if (v79) {
        char v82 = v81;
      }
      else {
        char v82 = 1;
      }
      if (v82)
      {
        uint64_t v83 = 0;
LABEL_69:
        if (v163) {
          ACFUFTABFile::setBootNonce(v80, v163);
        }
        uint64_t v84 = (const void *)(*(uint64_t (**)(ACFUFTABFile *))(*(void *)v80 + 40))(v80);
        if (v84 && (CFTypeID v85 = CFDataGetTypeID(), v86 = (ACFULogging *)CFGetTypeID(v84), (ACFULogging *)v85 == v86))
        {
          uint64_t v87 = ACFULogging::getLogInstance(v86);
          std::string::basic_string[abi:ne180100]<0>(&v188, "RoseRestoreHost");
          uint64_t v88 = std::string::append(&v188, "::");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          uint64_t v90 = std::string::append(&v189, "copyFirmwareUpdater");
          long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
          std::string::size_type v199 = v90->__r_.__value_.__r.__words[2];
          long long v198 = v91;
          v90->__r_.__value_.__l.__size_ = 0;
          v90->__r_.__value_.__r.__words[2] = 0;
          v90->__r_.__value_.__r.__words[0] = 0;
          ACFULogging::handleMessageCFType((uint64_t)v87, (uint64_t *)&v198, 3, (uint64_t)"outData", (uint64_t)v84);
          if (SHIBYTE(v199) < 0) {
            operator delete((void *)v198);
          }
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v188.__r_.__value_.__l.__data_);
          }
          (*(void (**)(ACFUFTABFile *))(*(void *)v80 + 24))(v80);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v166, "copyFirmware: could not create output data");
          uint64_t v117 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v166, 0x3E8uLL, 0);
          if (v167 < 0) {
            operator delete(v166[0]);
          }
          CFIndex v118 = ACFULogging::getLogInstance(v117);
          ACFULogging::handleMessage((uint64_t)v118, 2u, "%s::%s: could not create output data\n", v119, v120, v121, v122, v123, (char)"RoseRestoreHost");
        }
        goto LABEL_80;
      }
      uint64_t v83 = (const void *)(**v79)(v79, &v203);
      if (v83)
      {
        if (ACFUFTABFile::addNewFileToFTAB(v80, (uint64_t)&v203, (const __CFData *)v83)) {
          goto LABEL_69;
        }
        std::string::basic_string[abi:ne180100]<0>(v168, "copyFirmware: could not add 'rrko' object to final ftab");
        uint64_t v155 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v168, 0x3E8uLL, 0);
        if (v169 < 0) {
          operator delete(v168[0]);
        }
        uint64_t v156 = ACFULogging::getLogInstance(v155);
        ACFULogging::handleMessage((uint64_t)v156, 2u, "%s::%s: could not add 'rrko' object to final ftab\n", v157, v158, v159, v160, v161, (char)"RoseRestoreHost");
LABEL_145:
        uint64_t v84 = 0;
        goto LABEL_80;
      }
      std::string::basic_string[abi:ne180100]<0>(v170, "copyFirmware: could not get 'rrko' object from ftab");
      uint64_t v148 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v170, 0x3E8uLL, 0);
      if (v171 < 0) {
        operator delete(v170[0]);
      }
      uint64_t v149 = ACFULogging::getLogInstance(v148);
      ACFULogging::handleMessage((uint64_t)v149, 2u, "%s::%s: could not get 'rrko' object from ftab\n", v150, v151, v152, v153, v154, (char)"RoseRestoreHost");
LABEL_141:
      uint64_t v83 = 0;
      goto LABEL_145;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v186, "copyFirmware: rkos bundle data unavailable");
  uint64_t v103 = (ACFULogging *)ACFUError::addError(a1 + 24, (uint64_t)v186, 0x3E8uLL, 0);
  if (v187 < 0) {
    operator delete(v186[0]);
  }
  long long v104 = ACFULogging::getLogInstance(v103);
  ACFULogging::handleMessage((uint64_t)v104, 2u, "%s::%s: rkos bundle data unavailable\n", v105, v106, v107, v108, v109, (char)"RoseRestoreHost");
  uint64_t v83 = 0;
  CFDataRef v56 = 0;
  uint64_t v74 = 0;
  uint64_t v84 = 0;
  uint64_t v58 = 0;
  uint64_t v76 = 0;
  long long v46 = 0;
  if (cf) {
    goto LABEL_80;
  }
LABEL_86:
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v202.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
  if (v58) {
    ((void (*)(uint64_t (***)(void, std::string *)))(*v58)[7])(v58);
  }
  if (v76) {
    ((void (*)(uint64_t (***)(void, std::string *)))(*v76)[7])(v76);
  }
  if (v46) {
    (*(void (**)(ACFUFTABFile *))(*(void *)v46 + 56))(v46);
  }
  return v84;
}

void sub_217AEC6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (a68 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v68 - 185) < 0) {
    operator delete(*(void **)(v68 - 208));
  }
  if (*(char *)(v68 - 153) < 0) {
    operator delete(*(void **)(v68 - 176));
  }
  if (*(char *)(v68 - 121) < 0) {
    operator delete(*(void **)(v68 - 144));
  }
  if (*(char *)(v68 - 89) < 0) {
    operator delete(*(void **)(v68 - 112));
  }
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

char *std::vector<__CFString const*>::__assign_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  id v7 = result;
  uint64_t v8 = *((void *)result + 2);
  CFTypeID v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *id v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<__CFString const*>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    CFTypeID v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  CFDictionaryRef v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  CFDataRef v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    CFTypeID v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

char *std::vector<ACFURestoreHost::FileList>::__assign_with_size[abi:ne180100]<ACFURestoreHost::FileList const*,ACFURestoreHost::FileList const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  id v7 = result;
  uint64_t v8 = *((void *)result + 2);
  CFTypeID v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *id v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<ACFURestoreHost::FileList>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    CFTypeID v9 = v13;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 7;
      uint64_t v19 = v9;
      uint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  CFDictionaryRef v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  CFDataRef v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9 - 7);
    CFTypeID v9 = (char *)*v12;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 7;
    uint64_t v19 = v9;
    uint64_t v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

char *std::vector<ACFURestoreHost::FileList>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ACFURestoreHost::FileList>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ACFURestoreHost::FileList>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t **std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__assign_unique<std::pair<__CFString const* const,unsigned long> const*>(uint64_t **result, unint64_t *a2, unint64_t *a3)
{
  id v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    id v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    int v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v10 = result;
    unint64_t v11 = v8;
    long long v12 = v8;
    if (v8)
    {
      unint64_t v11 = std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__node_assign_unique(v5, a2, v8);
        if (v9)
        {
          uint64_t v8 = v11;
          long long v12 = v11;
          if (!v11)
          {
            a2 += 2;
            break;
          }
          unint64_t v11 = std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          uint64_t v8 = v12;
        }
        a2 += 2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__emplace_unique_key_args<__CFString const*,std::pair<__CFString const* const,unsigned long> const&>(v5, a2, a2);
    a2 += 2;
  }
  return result;
}

void sub_217AECE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__node_assign_unique(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1 + 1;
  id v5 = a1[1];
  unint64_t v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        id v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v6 >= v8) {
          break;
        }
        id v5 = *v7;
        uint64_t v4 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        return (uint64_t *)v7;
      }
      id v5 = v7[1];
      if (!v5)
      {
        uint64_t v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    id v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = a2[1];
    a3[4] = v6;
    a3[5] = v9;
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v7, v4, a3);
  }
  return a3;
}

uint64_t std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    id v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        id v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__emplace_unique_key_args<__CFString const*,std::pair<__CFString const* const,unsigned long> const&>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = a1 + 1;
  id v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        id v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      id v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>>>::__assign_unique<std::pair<__CFString const* const,ACFURestoreHost::DemoteConfig> const*>(uint64_t **result, unint64_t *a2, unint64_t *a3)
{
  id v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    unint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    int v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    uint64_t v10 = result;
    unint64_t v11 = v8;
    long long v12 = v8;
    if (v8)
    {
      unint64_t v11 = std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>>>::__node_assign_unique(v5, a2, (uint64_t)v8);
        if (v9)
        {
          unint64_t v8 = v11;
          long long v12 = v11;
          if (!v11)
          {
            a2 += 2;
            break;
          }
          unint64_t v11 = std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          unint64_t v8 = v12;
        }
        a2 += 2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__emplace_unique_key_args<__CFString const*,std::pair<__CFString const* const,unsigned long> const&>(v5, a2, a2);
    a2 += 2;
  }
  return result;
}

void sub_217AED108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,ACFURestoreHost::DemoteConfig>>>::__node_assign_unique(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1 + 1;
  id v5 = a1[1];
  unint64_t v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v6 >= v8) {
          break;
        }
        id v5 = *v7;
        uint64_t v4 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        return v7;
      }
      id v5 = v7[1];
      if (!v5)
      {
        uint64_t v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    *(void *)(a3 + 32) = v6;
    *(_WORD *)(a3 + 40) = *((_WORD *)a2 + 4);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v7, v4, (uint64_t *)a3);
  }
  return (uint64_t **)a3;
}

uint64_t RoseUpdaterGetTags(ACFULogging *a1, void (*a2)(void *, const char *), void *a3, CFErrorRef *a4)
{
  Loguint64_t Instance = (ACFULogging *)ACFULogging::getLogInstance(a1);
  uint64_t inited = (ACFULogging *)ACFULogging::initLog(LogInstance, a1, a2, a3);
  if (inited)
  {
    int v14 = (int)inited;
    unint64_t v15 = ACFULogging::getLogInstance(inited);
    ACFULogging::handleMessage((uint64_t)v15, 2u, "%s::%s: failed to init logging\n", v16, v17, v18, v19, v20, (char)"RoseRestoreInfo");
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v22 = v14;
LABEL_9:
    uint64_t v12 = 0;
    *a4 = CFErrorCreate(v21, @"RoseRestoreInfo", v22, 0);
    return v12;
  }
  uint64_t v10 = (ACFULogging *)RoseRestoreHost::create(a1, @"RoseRestoreInfo", &v35);
  unint64_t v11 = v35;
  if (!v35)
  {
    uint64_t v23 = ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: failed to create host object\n", v24, v25, v26, v27, v28, (char)"RoseRestoreInfo");
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v22 = 4000;
    goto LABEL_9;
  }
  uint64_t v12 = (**(uint64_t (***)(ACFURestoreHost *))v35)(v35);
  if (!v12)
  {
    CFTypeID v29 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v29, 2u, "%s::%s: failed to get tags\n", v30, v31, v32, v33, v34, (char)"RoseRestoreInfo");
    *a4 = ACFURestoreHost::getError(v11);
  }
  (*(void (**)(ACFURestoreHost *))(*(void *)v11 + 24))(v11);
  return v12;
}

void sub_217AED354(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

CFDataRef RoseUpdaterCopyFirmware(ACFULogging *a1, void (*a2)(void *, const char *), void *a3, CFErrorRef *a4)
{
  Loguint64_t Instance = (ACFULogging *)ACFULogging::getLogInstance(a1);
  uint64_t inited = (ACFULogging *)ACFULogging::initLog(LogInstance, a1, a2, a3);
  if (inited)
  {
    int v14 = (int)inited;
    unint64_t v15 = ACFULogging::getLogInstance(inited);
    ACFULogging::handleMessage((uint64_t)v15, 2u, "%s::%s: failed to init logging\n", v16, v17, v18, v19, v20, (char)"RoseRestoreInfo");
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v22 = v14;
LABEL_9:
    CFDataRef v12 = 0;
    *a4 = CFErrorCreate(v21, @"RoseRestoreInfo", v22, 0);
    return v12;
  }
  uint64_t v10 = (ACFULogging *)RoseRestoreHost::create(a1, @"RoseRestoreInfo", &v35);
  unint64_t v11 = v35;
  if (!v35)
  {
    uint64_t v23 = ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: failed to create host object\n", v24, v25, v26, v27, v28, (char)"RoseRestoreInfo");
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v22 = 4000;
    goto LABEL_9;
  }
  CFDataRef v12 = ACFURestoreHost::copyFirmware(v35);
  if (!v12)
  {
    CFTypeID v29 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v29, 2u, "%s::%s: failed to copy firmware\n", v30, v31, v32, v33, v34, (char)"RoseRestoreInfo");
    *a4 = ACFURestoreHost::getError(v11);
  }
  (*(void (**)(ACFURestoreHost *))(*(void *)v11 + 24))(v11);
  return v12;
}

void sub_217AED508(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t RoseUpdaterCreateRequest(const __CFDictionary *a1, void (*a2)(void *, const char *), void *a3, CFErrorRef *a4)
{
  unint64_t v8 = ACFUError::ACFUError((ACFUError *)v75, @"RoseRestoreInfo");
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  __int16 v72 = 0;
  v71[0] = @"Rap,ProductionMode";
  v71[1] = @"Rap,SecurityMode";
  Loguint64_t Instance = (ACFULogging *)ACFULogging::getLogInstance(v8);
  uint64_t inited = (ACFULogging *)ACFULogging::initLog(LogInstance, a1, a2, a3);
  int v11 = (int)inited;
  if (inited)
  {
    long long v43 = ACFULogging::getLogInstance(inited);
    ACFULogging::handleMessage((uint64_t)v43, 2u, "%s::%s: failed to init logging\n", v44, v45, v46, v47, v48, (char)"RoseRestoreInfo");
    CFIndex v49 = v11;
  }
  else
  {
    ACFUCommon::parseDebugArgs(a1, (const __CFDictionary *)"demoteProd", &v70);
    uint64_t v13 = (uint64_t)v70;
    if (HIDWORD(v70) != 4006)
    {
      if (HIDWORD(v70))
      {
        CFDataRef v56 = ACFULogging::getLogInstance(v12);
        ACFULogging::handleMessage((uint64_t)v56, 2u, "%s::%s: failed to parse debug arguments\n", v57, v58, v59, v60, v61, (char)"RoseRestoreInfo");
        CFIndex v49 = v13 >> 32;
        goto LABEL_31;
      }
      LOBYTE(v72) = v70 == 1;
    }
    int v14 = (ACFULogging *)RoseRestoreHost::create(a1, @"RoseRestoreInfo", &v70);
    unint64_t v15 = v70;
    if (v70)
    {
      CFDictionaryRef Value = (ACFULogging *)CFDictionaryGetValue(a1, @"FirmwareData");
      CFDataRef v17 = Value;
      if (Value
        && (TypeID = CFDataGetTypeID(), CFDictionaryRef Value = (ACFULogging *)CFGetTypeID(v17), (ACFULogging *)TypeID == Value))
      {
        GetRoseTatsuTagToFileNameMap((uint64_t)v68);
        RTKitFirmware::create((uint64_t)v68, v17, 0, &v70);
        std::shared_ptr<RTKitFirmware>::operator=[abi:ne180100]<RTKitFirmware,std::default_delete<RTKitFirmware>,void>(&v73, (uint64_t *)&v70);
        uint64_t v19 = v70;
        uint64_t v70 = 0;
        if (v19) {
          (*(void (**)(ACFURestoreHost *))(*(void *)v19 + 56))(v19);
        }
        std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v68, v69);
        if (v73)
        {
          uint64_t v64 = v73;
          uint64_t v65 = v74;
          if (v74) {
            atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v21 = (*(uint64_t (**)(ACFURestoreHost *, uint64_t *, void *))(*(void *)v15 + 8))(v15, &v64, v71);
          CFIndex v22 = (ACFULogging *)v65;
          if (v65) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v65);
          }
          if (v21) {
            goto LABEL_23;
          }
          uint64_t v23 = ACFULogging::getLogInstance(v22);
          ACFULogging::handleMessage((uint64_t)v23, 2u, "%s::%s: failed to create request dict\n", v24, v25, v26, v27, v28, (char)"RoseRestoreInfo");
          std::string::basic_string[abi:ne180100]<0>(__p, "RoseUpdaterCreateRequest: failed to create request dict");
          ACFUError::addError((uint64_t)v75, (uint64_t)__p, 0xFA1uLL, 0);
          if (v63 < 0) {
            operator delete(__p[0]);
          }
          CFErrorRef Error = ACFURestoreHost::getError(v15);
        }
        else
        {
          uint64_t v30 = ACFULogging::getLogInstance(v20);
          ACFULogging::handleMessage((uint64_t)v30, 2u, "%s::%s: Failed to find firmware\n", v31, v32, v33, v34, v35, (char)"RoseRestoreInfo");
          std::string::basic_string[abi:ne180100]<0>(v66, "RoseUpdaterCreateRequest: failed to open firmware");
          ACFUError::addError((uint64_t)v75, (uint64_t)v66, 0x3E8uLL, 0);
          if (v67 < 0) {
            operator delete(v66[0]);
          }
          CFErrorRef Error = ACFUError::getCFError((ACFUError *)v75);
        }
        uint64_t v21 = 0;
        *a4 = Error;
      }
      else
      {
        uint64_t v37 = ACFULogging::getLogInstance(Value);
        ACFULogging::handleMessage((uint64_t)v37, 0, "%s::%s: Invalid or no firmware file present in restore options\n", v38, v39, v40, v41, v42, (char)"RoseRestoreInfo");
        uint64_t v21 = 0;
      }
LABEL_23:
      (*(void (**)(ACFURestoreHost *))(*(void *)v15 + 24))(v15);
      goto LABEL_24;
    }
    uint64_t v50 = ACFULogging::getLogInstance(v14);
    ACFULogging::handleMessage((uint64_t)v50, 2u, "%s::%s: failed to create host object\n", v51, v52, v53, v54, v55, (char)"RoseRestoreInfo");
    CFIndex v49 = 4000;
  }
LABEL_31:
  uint64_t v21 = 0;
  *a4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"RoseRestoreInfo", v49, 0);
LABEL_24:
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  ACFUError::~ACFUError((ACFUError *)v75);
  return v21;
}

void sub_217AED900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 56);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  ACFUError::~ACFUError((ACFUError *)(v28 - 48));
  _Unwind_Resume(a1);
}

void *std::shared_ptr<RTKitFirmware>::operator=[abi:ne180100]<RTKitFirmware,std::default_delete<RTKitFirmware>,void>(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    id v5 = operator new(0x20uLL);
    *id v5 = &unk_26C8084D0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
  }
  else
  {
    id v5 = 0;
  }
  *a2 = 0;
  unint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

__CFDictionary *RoseUpdaterGetSharedInfo(const __CFDictionary *a1, void (*a2)(void *, const char *), void *a3, CFErrorRef *a4)
{
  unint64_t v8 = ACFUError::ACFUError((ACFUError *)v161, @"RoseRestoreInfo");
  Loguint64_t Instance = (ACFULogging *)ACFULogging::getLogInstance(v8);
  uint64_t inited = (ACFULogging *)ACFULogging::initLog(LogInstance, a1, a2, a3);
  int v11 = (int)inited;
  if (inited)
  {
    uint64_t v79 = ACFULogging::getLogInstance(inited);
    ACFULogging::handleMessage((uint64_t)v79, 2u, "%s::%s: failed to init logging\n", v80, v81, v82, v83, v84, (char)"RoseRestoreInfo");
    CFErrorRef v85 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"RoseRestoreInfo", v11, 0);
    uint64_t v69 = 0;
    CFMutableDictionaryRef Mutable = 0;
    *a4 = v85;
    goto LABEL_38;
  }
  CFDataRef v12 = ACFULogging::getLogInstance(inited);
  ACFULogging::handleMessage((uint64_t)v12, 0, "%s::%s: performing Rose pairing operation -- sharing digest dictionary\n", v13, v14, v15, v16, v17, (char)"RoseRestoreInfo");
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    std::string::basic_string[abi:ne180100]<0>(v159, "RoseUpdaterGetSharedInfo: Failed to allocate shared info dict");
    id v86 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v159, 0xFA0uLL, 0);
    if (v160 < 0) {
      operator delete(v159[0]);
    }
    uint64_t v87 = ACFULogging::getLogInstance(v86);
    uint64_t v69 = 0;
    ACFULogging::handleMessage((uint64_t)v87, 2u, "%s::%s: Failed to allocate shared info dictionary\n", v88, v89, v90, v91, v92, (char)"RoseRestoreInfo");
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_38;
  }
  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
  LOWORD(v135.__r_.__value_.__l.__data_) = 0;
  CFDictionaryRef Value = (ACFULogging *)CFDictionaryGetValue(a1, @"DeviceInfo");
  CFDictionaryRef v21 = Value;
  if (!Value || (CFTypeID v22 = CFGetTypeID(Value), Value = (ACFULogging *)CFDictionaryGetTypeID(), (ACFULogging *)v22 != Value))
  {
    uint64_t v44 = ACFULogging::getLogInstance(Value);
    ACFULogging::handleMessage((uint64_t)v44, 0, "%s::%s: Could not obtain deviceInfo dictionary. Sharing all digest information.\n", v45, v46, v47, v48, v49, (char)"RoseRestoreInfo");
    goto LABEL_17;
  }
  CFTypeID TypeID = (ACFULogging *)CFDictionaryGetValue(v21, @"Rap,ChipID");
  CFDataRef v24 = TypeID;
  if (!TypeID || (CFTypeID v25 = CFGetTypeID(TypeID), TypeID = (ACFULogging *)CFDataGetTypeID(), (ACFULogging *)v25 != TypeID))
  {
    uint64_t v108 = ACFULogging::getLogInstance(TypeID);
    uint64_t v114 = "%s::%s: chipID is empty or isn't data type\n";
LABEL_81:
    ACFULogging::handleMessage((uint64_t)v108, 2u, v114, v109, v110, v111, v112, v113, (char)"RoseRestoreInfo");
    goto LABEL_15;
  }
  CFIndex Length = (ACFULogging *)CFDataGetLength(v24);
  if (Length != (ACFULogging *)2)
  {
    uint64_t v108 = ACFULogging::getLogInstance(Length);
    uint64_t v114 = "%s::%s: chipID is not 2 bytes in length. Assuming Rose-SE pairing is not supported.\n";
    goto LABEL_81;
  }
  BytePtr = CFDataGetBytePtr(v24);
  size_t v28 = CFDataGetLength(v24);
  memcpy(&__dst, BytePtr, v28);
  CFTypeID v29 = (ACFULogging *)CFDictionaryGetValue(v21, @"Rap,BoardID");
  CFDataRef v30 = v29;
  if (!v29 || (v31 = CFGetTypeID(v29), CFTypeID v29 = (ACFULogging *)CFDataGetTypeID(), (ACFULogging *)v31 != v29))
  {
    uint64_t v108 = ACFULogging::getLogInstance(v29);
    uint64_t v114 = "%s::%s: boardID is empty or isn't data type\n";
    goto LABEL_81;
  }
  uint64_t v32 = (ACFULogging *)CFDataGetLength(v30);
  if (v32 != (ACFULogging *)2)
  {
    uint64_t v108 = ACFULogging::getLogInstance(v32);
    uint64_t v114 = "%s::%s: boardID is not 2 bytes in length. Assuming Rose-SE pairing is not supported.\n";
    goto LABEL_81;
  }
  uint64_t v33 = CFDataGetBytePtr(v30);
  size_t v34 = CFDataGetLength(v30);
  memcpy(&v135, v33, v34);
  RoseCapabilities::create((RoseCapabilities *)LOWORD(__dst.__r_.__value_.__l.__data_), (RoseCapabilities **)__p);
  uint64_t v35 = (std::__shared_weak_count *)__p[1];
  if (!__p[0])
  {
    uint64_t v129 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v129, 2u, "%s::%s: failed to create capabilities\n", v130, v131, v132, v133, v134, (char)"RoseRestoreInfo");
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    goto LABEL_15;
  }
  uint64_t v36 = (ACFULogging *)RoseCapabilities::supportsRoseSEPairing((RoseCapabilities *)__p[0], LOWORD(v135.__r_.__value_.__l.__data_));
  char v37 = (char)v36;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if ((v37 & 1) == 0)
  {
LABEL_15:
    uint64_t v38 = ACFULogging::getLogInstance(v36);
    ACFULogging::handleMessage((uint64_t)v38, 0, "%s::%s: Returning empty sharing digest dictionary -- Rose-SE pairing not supported for this device.\n", v39, v40, v41, v42, v43, (char)"RoseRestoreInfo");
    goto LABEL_43;
  }
LABEL_17:
  uint64_t v50 = ACFULogging::getLogInstance(v36);
  ACFULogging::handleMessage((uint64_t)v50, 0, "%s::%s: Rose-SE pairing is supported for this device\n", v51, v52, v53, v54, v55, (char)"RoseRestoreInfo");
  ACFUCommon::parseDebugArgs(a1, (const __CFDictionary *)"buildIDRoseSEPair", __p);
  if ((unint64_t)__p[0] >> 32 || !LODWORD(__p[0]))
  {
    CFDataRef v70 = (const __CFData *)CFDictionaryGetValue(a1, @"FirmwareData");
    if (v70 && (CFTypeID v71 = CFDataGetTypeID(), v71 == CFGetTypeID(v70)))
    {
      GetRoseTatsuTagToFileNameMap((uint64_t)v143);
      RTKitFirmware::create((uint64_t)v143, v70, 0, (ACFUFirmware **)__p);
      uint64_t v69 = (CFDictionaryRef *)__p[0];
      __p[0] = 0;
      std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v143, v144);
      if (v69)
      {
        MeasureDataWithTag = ACFUFirmware::getMeasureDataWithTag(v69, @"Rap,RTKitOS");
        CFDictionaryRef ValueForKeyPathInDict = ACFUFirmware::getMeasureDataWithTag(v69, @"Rap,SoftwareBinaryDsp1");
        goto LABEL_30;
      }
      std::string::basic_string[abi:ne180100]<0>(v141, "RoseUpdaterGetSharedInfo: Failed to open firmware");
      uint64_t v124 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v141, 0x3E8uLL, 0);
      if (v142 < 0) {
        operator delete(v141[0]);
      }
      uint64_t v94 = ACFULogging::getLogInstance(v124);
      uint64_t v100 = "%s::%s: Failed to open firmware\n";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v145, "RoseUpdaterGetSharedInfo: Invalid or no firmware file present in restore options");
      uint64_t v93 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v145, 0x3E8uLL, 0);
      if (v146 < 0) {
        operator delete(v145[0]);
      }
      uint64_t v94 = ACFULogging::getLogInstance(v93);
      uint64_t v100 = "%s::%s: Invalid or no firmware file present in restore options\n";
    }
    uint64_t v69 = 0;
    ACFULogging::handleMessage((uint64_t)v94, 2u, v100, v95, v96, v97, v98, v99, (char)"RoseRestoreInfo");
  }
  else
  {
    uint64_t v57 = ACFULogging::getLogInstance(v56);
    ACFULogging::handleMessage((uint64_t)v57, 0, "%s::%s: forcing pairing with build ID: %u\n", v58, v59, v60, v61, v62, (char)"RoseRestoreInfo");
    CFStringRef v63 = CFStringCreateWithFormat(v18, 0, @"%@.%@.%@", @"BuildIdentity", @"Rap,RTKitOS", @"Digest", v135.__r_.__value_.__r.__words[0]);
    if (v63)
    {
      MeasureDataWithTag = (const void *)AMSupportGetValueForKeyPathInDict();
      CFRelease(v63);
      if (MeasureDataWithTag)
      {
        CFTypeID v65 = CFDataGetTypeID();
        if (v65 == CFGetTypeID(MeasureDataWithTag))
        {
          CFStringRef v66 = CFStringCreateWithFormat(v18, 0, @"%@.%@.%@", @"BuildIdentity", @"Rap,SoftwareBinaryDsp1", @"Digest");
          if (v66)
          {
            CFDictionaryRef ValueForKeyPathInDict = (const void *)AMSupportGetValueForKeyPathInDict();
            CFRelease(v66);
            if (ValueForKeyPathInDict)
            {
              CFTypeID v68 = CFDataGetTypeID();
              if (v68 == CFGetTypeID(ValueForKeyPathInDict))
              {
                uint64_t v69 = 0;
LABEL_30:
                if (MeasureDataWithTag && ValueForKeyPathInDict)
                {
                  CFDictionarySetValue(Mutable, @"SE,RapSwBinDsp", ValueForKeyPathInDict);
                  CFDictionarySetValue(Mutable, @"SE,RapRTKitOS", MeasureDataWithTag);
                  uint64_t v73 = ACFULogging::getLogInstance(v72);
                  std::string::basic_string[abi:ne180100]<0>(&v135, "RoseRestoreInfo");
                  uint64_t v74 = std::string::append(&v135, "::");
                  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
                  __dst.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v75;
                  v74->__r_.__value_.__l.__size_ = 0;
                  v74->__r_.__value_.__r.__words[2] = 0;
                  v74->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v76 = std::string::append(&__dst, "RoseUpdaterGetSharedInfo");
                  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
                  std::string::size_type v138 = v76->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __p = v77;
                  v76->__r_.__value_.__l.__size_ = 0;
                  v76->__r_.__value_.__r.__words[2] = 0;
                  v76->__r_.__value_.__r.__words[0] = 0;
                  ACFULogging::handleMessageCFType((uint64_t)v73, (uint64_t *)__p, 0, (uint64_t)"Rose-SE Shared Info: ", (uint64_t)Mutable);
                  if (SHIBYTE(v138) < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v135.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(v139, "RoseUpdaterGetSharedInfo: Missing required firmware measurements");
                  uint64_t v101 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v139, 0xFA1uLL, 0);
                  if (v140 < 0) {
                    operator delete(v139[0]);
                  }
                  uint64_t v102 = ACFULogging::getLogInstance(v101);
                  ACFULogging::handleMessage((uint64_t)v102, 2u, "%s::%s: Missing required firmware measurements\n", v103, v104, v105, v106, v107, (char)"RoseRestoreInfo");
                }
                goto LABEL_38;
              }
              std::string::basic_string[abi:ne180100]<0>(v147, "RoseUpdaterGetSharedInfo: sbd1 digest is of an unexpected type");
              uint64_t v128 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v147, 0x3EDuLL, 0);
              if (v148 < 0) {
                operator delete(v147[0]);
              }
              uint64_t v116 = ACFULogging::getLogInstance(v128);
              uint64_t v122 = "%s::%s: sbd1 digest is of an unexpected type\n";
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v149, "RoseUpdaterGetSharedInfo: failed to get dict entry for sbd1 digest");
              uint64_t v127 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v149, 0x3EDuLL, 0);
              if (v150 < 0) {
                operator delete(v149[0]);
              }
              uint64_t v116 = ACFULogging::getLogInstance(v127);
              uint64_t v122 = "%s::%s: failed to get dict entry for sbd1 digest\n";
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v151, "RoseUpdaterGetSharedInfo: failed to create build ID key path for sdb1");
            uint64_t v126 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v151, 0x3EDuLL, 0);
            if (v152 < 0) {
              operator delete(v151[0]);
            }
            uint64_t v116 = ACFULogging::getLogInstance(v126);
            uint64_t v122 = "%s::%s: failed to create build ID key path for sdb1\n";
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v153, "RoseUpdaterGetSharedInfo: rkos digest is of an unexpected type");
          char v125 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v153, 0x3EDuLL, 0);
          if (v154 < 0) {
            operator delete(v153[0]);
          }
          uint64_t v116 = ACFULogging::getLogInstance(v125);
          uint64_t v122 = "%s::%s: rkos digest is of an unexpected type\n";
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v155, "RoseUpdaterGetSharedInfo: failed to get dict entry rkos digest");
        uint64_t v123 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v155, 0xFA0uLL, 0);
        if (v156 < 0) {
          operator delete(v155[0]);
        }
        uint64_t v116 = ACFULogging::getLogInstance(v123);
        uint64_t v122 = "%s::%s: failed to get dict entry rkos digest\n";
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v157, "RoseUpdaterGetSharedInfo: failed to create build ID key path for rkos");
      uint64_t v115 = (ACFULogging *)ACFUError::addError((uint64_t)v161, (uint64_t)v157, 0x3EDuLL, 0);
      if (v158 < 0) {
        operator delete(v157[0]);
      }
      uint64_t v116 = ACFULogging::getLogInstance(v115);
      uint64_t v122 = "%s::%s: failed to create build ID key path for rkos\n";
    }
    ACFULogging::handleMessage((uint64_t)v116, 2u, v122, v117, v118, v119, v120, v121, (char)"RoseRestoreInfo");
    uint64_t v69 = 0;
  }
LABEL_38:
  if (ACFUError::hasError((ACFUError *)v161))
  {
    *a4 = ACFUError::getCFError((ACFUError *)v161);
    if (Mutable)
    {
      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = 0;
    }
  }
  if (v69) {
    (*((void (**)(CFDictionaryRef *))*v69 + 7))(v69);
  }
LABEL_43:
  ACFUError::~ACFUError((ACFUError *)v161);
  return Mutable;
}

void sub_217AEE40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  ACFUError::~ACFUError((ACFUError *)(v40 - 104));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<RTKitFirmware  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<RTKitFirmware  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<RTKitFirmware  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t RoseUpdaterCreateRequest_cold_1(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
}

void RoseCapabilities::create(RoseCapabilities *this@<X0>, RoseCapabilities **a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v4 = operator new(4uLL);
  std::shared_ptr<RoseCapabilities>::shared_ptr[abi:ne180100]<RoseCapabilities,void>(a2, (uint64_t)v4);
  if (*a2)
  {
    uint64_t v5 = RoseCapabilities::init(*a2, v2);
    if ((v5 & 1) == 0)
    {
      Loguint64_t Instance = ACFULogging::getLogInstance((ACFULogging *)v5);
      ACFULogging::handleMessage((uint64_t)LogInstance, 2u, "%s::%s: failed to initialize object\n", v13, v14, v15, v16, v17, (char)"RoseCapabilities");
      CFAllocatorRef v18 = (std::__shared_weak_count *)a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (v18)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
  }
  else
  {
    unint64_t v6 = ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage((uint64_t)v6, 2u, "%s::%s: failed to create capabilities object\n", v7, v8, v9, v10, v11, (char)"RoseCapabilities");
  }
}

void sub_217AEE798(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RoseCapabilities::init(RoseCapabilities *this, int a2)
{
  if (a2 == 8228)
  {
    Loguint64_t Instance = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)LogInstance, 0, "%s::%s: Identified chip as R2\n", v11, v12, v13, v14, v15, (char)"RoseCapabilities");
    uint64_t result = 1;
    *(_DWORD *)this = 1;
  }
  else if (a2 == 8198)
  {
    uint64_t v3 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v3, 0, "%s::%s: Identified chip as R1\n", v4, v5, v6, v7, v8, (char)"RoseCapabilities");
    *(_DWORD *)this = 0;
    return 1;
  }
  else
  {
    uint64_t v16 = ACFULogging::getLogInstance(this);
    ACFULogging::handleMessage((uint64_t)v16, 2u, "%s::%s: Unrecognized chipID 0x%x\n", v17, v18, v19, v20, v21, (char)"RoseCapabilities");
    return 0;
  }
  return result;
}

BOOL RoseCapabilities::supportsRTKitIOConfig(RoseCapabilities *this)
{
  return *(_DWORD *)this != 0;
}

BOOL RoseCapabilities::requiresSeparateFirmwareTargetForCertification(RoseCapabilities *this)
{
  return *(_DWORD *)this == 0;
}

uint64_t RoseCapabilities::supportsRoseSEPairing(RoseCapabilities *this, unsigned int a2)
{
  int v2 = *(_DWORD *)this;
  unint64_t v3 = (0x15001100100uLL >> a2) & 1;
  if (a2 > 0x28) {
    LOBYTE(v3) = 0;
  }
  LOBYTE(v4) = (a2 & 0xFC) == 8;
  if (v2) {
    int v4 = *(_DWORD *)this;
  }
  if (v2 == 1) {
    char v5 = v3;
  }
  else {
    char v5 = v4;
  }
  return v5 & 1;
}

void *std::shared_ptr<RoseCapabilities>::shared_ptr[abi:ne180100]<RoseCapabilities,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  void *v4 = &unk_26C808530;
  v4[1] = 0;
  unint64_t v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217AEE94C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<RoseCapabilities *,std::shared_ptr<RoseCapabilities>::__shared_ptr_default_delete<RoseCapabilities,RoseCapabilities>,std::allocator<RoseCapabilities>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<RoseCapabilities *,std::shared_ptr<RoseCapabilities>::__shared_ptr_default_delete<RoseCapabilities,RoseCapabilities>,std::allocator<RoseCapabilities>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<RoseCapabilities *,std::shared_ptr<RoseCapabilities>::__shared_ptr_default_delete<RoseCapabilities,RoseCapabilities>,std::allocator<RoseCapabilities>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void GetRoseTatsuTagToFileNameMap(uint64_t a1@<X8>)
{
  v7[3] = *MEMORY[0x263EF8340];
  unint64_t v3 = @"Rap,SoftwareBinaryDsp1";
  std::string::basic_string[abi:ne180100]<0>(v4, "sbd1");
  v4[3] = @"Rap,RTKitOS";
  std::string::basic_string[abi:ne180100]<0>(v5, "rkos");
  v5[3] = @"Rap,RestoreRTKitOS";
  std::string::basic_string[abi:ne180100]<0>(v6, "rrko");
  v6[3] = @"Rap,RTKitIOConfig";
  std::string::basic_string[abi:ne180100]<0>(v7, "icnf");
  std::map<__CFString const*,std::string>::map[abi:ne180100](a1, (unint64_t *)&v3, 4);
  for (uint64_t i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v7[i + 2]) < 0) {
      operator delete((void *)v7[i]);
    }
  }
}

void sub_217AEEB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 127) < 0) {
      operator delete(*(void **)(v10 + v12 + 104));
    }
    v12 -= 32;
    if (v12 == -128) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t std::map<__CFString const*,std::string>::map[abi:ne180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_217AEEBC8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

SERestoreInfo::SN300V2DeviceInfo *SERestoreInfo::SN300V2DeviceInfo::SN300V2DeviceInfo(SERestoreInfo::SN300V2DeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  unint64_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)unint64_t v3 = &unk_26C8085A8;
  if (*((_DWORD *)v3 + 14) != 54)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AEEC6C(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

void SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(SERestoreInfo::P73BaseDeviceInfo *this)
{
  *(void *)this = &unk_26C8086D8;
  int v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(void *)this = &unk_26C8086D8;
  int v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_26C8086D8;
  int v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }

  operator delete(this);
}

SERestoreInfo::SN300V2DeviceInfo *SERestoreInfo::SN300V2DeviceInfo::SN300V2DeviceInfo(SERestoreInfo::SN300V2DeviceInfo *this, SERestoreInfo **a2)
{
  unint64_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)unint64_t v3 = &unk_26C8085A8;
  if (*((_DWORD *)v3 + 14) != 54)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AEEDB4(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

void SERestoreInfo::SN300V2DeviceInfo::~SN300V2DeviceInfo(SERestoreInfo::SN300V2DeviceInfo *this)
{
  *(void *)this = &unk_26C8086D8;
  int v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }

  operator delete(this);
}

void *SERestoreInfo::P73BaseDeviceInfo::getOsKeyId@<X0>(SERestoreInfo::P73BaseDeviceInfo *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, *((const void **)this + 14), *((void *)this + 15), *((void *)this + 15) - *((void *)this + 14));
}

uint64_t SERestoreInfo::P73BaseDeviceInfo::getChipID(SERestoreInfo::P73BaseDeviceInfo *this)
{
  return *((unsigned int *)this + 14);
}

SERestoreInfo::SEWrongDeviceInfo *SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(SERestoreInfo::SEWrongDeviceInfo *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Wrong DeviceInfo");
  SERestoreInfo::SEException::SEException((uint64_t)this, (long long *)__p, 2, @"SEUpdaterErrorDomain");
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_26C808610;
  return this;
}

void SERestoreInfo::SEWrongDeviceInfo::~SEWrongDeviceInfo(std::exception *this)
{
  SERestoreInfo::SEException::~SEException(this);

  operator delete(v1);
}

uint64_t SERestoreInfo::SEException::what(SERestoreInfo::SEException *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_217AEEFDC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

SERestoreInfo::SN210VDeviceInfo *SERestoreInfo::SN210VDeviceInfo::SN210VDeviceInfo(SERestoreInfo::SN210VDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  unint64_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)unint64_t v3 = &unk_26C808638;
  if (*((_DWORD *)v3 + 14) != 210)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AEF0C8(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

SERestoreInfo::SN210VDeviceInfo *SERestoreInfo::SN210VDeviceInfo::SN210VDeviceInfo(SERestoreInfo::SN210VDeviceInfo *this, SERestoreInfo **a2)
{
  unint64_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)unint64_t v3 = &unk_26C808638;
  if (*((_DWORD *)v3 + 14) != 210)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AEF17C(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

SERestoreInfo::SE310SDeviceInfo *SERestoreInfo::SE310SDeviceInfo::SE310SDeviceInfo(SERestoreInfo::SE310SDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  unint64_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)unint64_t v3 = &unk_26C808688;
  if (*((_DWORD *)v3 + 14) != 55)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AEF230(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

SERestoreInfo::SE310SDeviceInfo *SERestoreInfo::SE310SDeviceInfo::SE310SDeviceInfo(SERestoreInfo::SE310SDeviceInfo *this, SERestoreInfo **a2)
{
  unint64_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)unint64_t v3 = &unk_26C808688;
  if (*((_DWORD *)v3 + 14) != 55)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AEF2E4(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

void *RootCA::getRootKeyId@<X0>(int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2 > 199)
  {
    if (a2 != 210 && a2 != 200)
    {
LABEL_14:
      if (a1 == 1)
      {
        *a3 = 0;
        a3[1] = 0;
        char v4 = &RootCA::getRootKeyId(RootCAId,SEChipType)::prodCA;
      }
      else
      {
        if (a1)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          std::to_string(&v29, a1);
          uint64_t v19 = std::string::insert(&v29, 0, "Unknown RootCAId: ");
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          uint64_t v21 = std::string::append(&v30, " for SEChipType ");
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v28, a2);
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v23 = &v28;
          }
          else {
            uint64_t v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
          }
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v28.__r_.__value_.__l.__size_;
          }
          CFTypeID v25 = std::string::append(&v31, (const std::string::value_type *)v23, size);
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          std::string::size_type v33 = v25->__r_.__value_.__r.__words[2];
          long long v32 = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          uint64_t v27 = (void *)SERestoreInfo::SEException::SEException(exception, &v32, 16, @"SEUpdaterErrorDomain");
        }
        *a3 = 0;
        a3[1] = 0;
        char v4 = &RootCA::getRootKeyId(RootCAId,SEChipType)::localCA;
      }
      goto LABEL_11;
    }
  }
  else if (a2 != 100 && a2 != 115)
  {
    goto LABEL_14;
  }
  if (a1 == 1)
  {
    *a3 = 0;
    a3[1] = 0;
    char v4 = &RootCA::getRootKeyId(RootCAId,SEChipType)::prodCA;
  }
  else
  {
    if (a1)
    {
      uint64_t v7 = __cxa_allocate_exception(0x48uLL);
      std::to_string(&v29, a1);
      size_t v8 = std::string::insert(&v29, 0, "Unknown RootCAId: ");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&v30, " for SEChipType ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v28;
      }
      else {
        uint64_t v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v28.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::string::append(&v31, (const std::string::value_type *)v12, v13);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      std::string::size_type v33 = v14->__r_.__value_.__r.__words[2];
      long long v32 = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      uint64_t v16 = (void *)SERestoreInfo::SEException::SEException(v7, &v32, 16, @"SEUpdaterErrorDomain");
    }
    *a3 = 0;
    a3[1] = 0;
    char v4 = &RootCA::getRootKeyId(RootCAId,SEChipType)::localCA;
  }
LABEL_11:
  a3[2] = 0;

  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3, v4, (uint64_t)v4 + 32, 0x20uLL);
}

void sub_217AEF5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void SERestoreInfo::P73BaseDeviceInfo::parseManifest(SERestoreInfo::P73BaseDeviceInfo *this@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v4 = *((void *)this + 2);
  v29[0] = *((void *)this + 1);
  v29[1] = v4;
  uint64_t v5 = DERDecodeItem((uint64_t)v29, &v30);
  std::string::basic_string[abi:ne180100]<0>(v27, "Fail to parse MQR: cannot decode top level tag");
  SERestoreInfo::CallAndThrow<DERReturn>(v5, (uint64_t)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v30 != P73BaseManifestQueryResponseDerSpec::ManifestResponseSequenceTag)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Fail to parse MQR: wrong top level tag");
    long long v11 = (void *)SERestoreInfo::SEException::SEException(exception, &v25, 2, @"SEUpdaterErrorDomain");
  }
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v6 = DERParseSequenceContent(&v31, 1u, (uint64_t)&P73BaseManifestQueryResponseDerSpec::ManifestResponseItemSpec, (unint64_t)v24, 0x10uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "Fail to parse MQR");
  SERestoreInfo::CallAndThrow<DERReturn>((uint64_t)v6, (uint64_t)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  *((_OWORD *)a2 + 13) = 0u;
  *((_OWORD *)a2 + 14) = 0u;
  *((_OWORD *)a2 + 11) = 0u;
  *((_OWORD *)a2 + 12) = 0u;
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v7 = DERParseSequenceContent(v24, 0xFu, (uint64_t)&P73BaseManifestQueryResponseDerSpec::ManifestResponseDataItemSpec, (unint64_t)a2, 0xF0uLL);
  std::string::basic_string[abi:ne180100]<0>(v20, "Fail to parse MQR.data");
  SERestoreInfo::CallAndThrow<DERReturn>((uint64_t)v7, (uint64_t)v20);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (a2[1] != (unsigned __int8 *)1
    || (unint64_t)a2[3] > 2
    || (unint64_t)a2[5] > 2
    || (unint64_t)a2[7] > 2
    || (unint64_t)a2[9] > 2
    || a2[15] != (unsigned __int8 *)1
    || (unint64_t)a2[25] > 2
    || a2[13] != (unsigned __int8 *)24
    || a2[17] != (unsigned __int8 *)20
    || a2[19] != (unsigned __int8 *)32
    || a2[21] != (unsigned __int8 *)32
    || a2[11] != (unsigned __int8 *)2
    || a2[23] != (unsigned __int8 *)1)
  {
    size_t v8 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "size of MQRD doesn't match");
    long long v9 = (void *)SERestoreInfo::SEException::SEException(v8, &v25, 2, @"SEUpdaterErrorDomain");
  }
  if (**a2 == 1)
  {
    if (a2[27] != (unsigned __int8 *)3 || a2[29] != (unsigned __int8 *)32) {
      goto LABEL_30;
    }
  }
  else
  {
    if (**a2)
    {
      uint64_t v14 = **a2;
      long long v15 = __cxa_allocate_exception(0x48uLL);
      std::to_string(&v19, v14);
      uint64_t v16 = std::string::insert(&v19, 0, "Unsupported manifest query version: ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v16->__r_.__value_.__r.__words[2];
      long long v25 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = (void *)SERestoreInfo::SEException::SEException(v15, &v25, 7, @"SEUpdaterErrorDomain");
    }
    if ((unint64_t)a2[27] | (unint64_t)a2[29])
    {
LABEL_30:
      uint64_t v12 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "size of factoryPostflightState or cometRootKeyId doesn't match");
      std::string::size_type v13 = (void *)SERestoreInfo::SEException::SEException(v12, &v25, 2, @"SEUpdaterErrorDomain");
    }
  }
}

void sub_217AEFAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SERestoreInfo::CallAndThrow<DERReturn>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v5 = (void *)SERestoreInfo::SEException::SEException(exception, a2, v2, @"libDERErrorDomain");
  }
  return result;
}

double SERestoreInfo::P73BaseDeviceInfo::init(SERestoreInfo::P73BaseDeviceInfo *this)
{
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 2) = 1;
  char v7 = 0;
  std::vector<unsigned char>::assign((char **)this + 4, 0x18uLL, &v7);
  char v6 = 0;
  std::vector<unsigned char>::assign((char **)this + 8, 0x14uLL, &v6);
  char v5 = 0;
  std::vector<unsigned char>::assign((char **)this + 11, 0x20uLL, &v5);
  char v4 = 0;
  std::vector<unsigned char>::assign((char **)this + 14, 0x20uLL, &v4);
  *((void *)this + 17) = 0;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 12) = 0;
  *((_DWORD *)this + 7) = 23195;
  *((_DWORD *)this + 36) = 0;
  char v3 = 0;
  std::vector<unsigned char>::assign((char **)this + 19, 0x20uLL, &v3);
  double result = 0.0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  return result;
}

SERestoreInfo::P73BaseDeviceInfo *SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(SERestoreInfo::P73BaseDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  *(void *)this = &unk_26C8086D8;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  SERestoreInfo::P73BaseDeviceInfo::init(this);
  memset(v5, 0, sizeof(v5));
  SERestoreInfo::P73BaseDeviceInfo::parseManifest(a2, (unsigned __int8 **)v5);
  SERestoreInfo::P73BaseDeviceInfo::updateDeviceInfo((uint64_t)this, (unsigned __int8 **)v5);
  return this;
}

void sub_217AEFD4C(_Unwind_Exception *exception_object)
{
  char v6 = *v4;
  if (*v4)
  {
    v1[20] = v6;
    operator delete(v6);
  }
  char v7 = (void *)v1[14];
  if (v7)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  size_t v8 = (void *)v1[11];
  if (v8)
  {
    v1[12] = v8;
    operator delete(v8);
  }
  long long v9 = *v3;
  if (*v3)
  {
    v1[9] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v2;
  if (*v2)
  {
    v1[5] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void *SERestoreInfo::P73BaseDeviceInfo::updateDeviceInfo(uint64_t a1, unsigned __int8 **a2)
{
  v78[3] = *MEMORY[0x263EF8340];
  char v4 = a2[1];
  if (v4)
  {
    int v5 = 0;
    char v6 = *a2;
    do
    {
      int v7 = *v6++;
      int v5 = v7 | (v5 << 8);
      --v4;
    }
    while (v4);
  }
  else
  {
    int v5 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  size_t v8 = a2[3];
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = a2[2];
    do
    {
      int v11 = *v10++;
      unsigned int v9 = v11 | (v9 << 8);
      --v8;
    }
    while (v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  *(_DWORD *)(a1 + 12) = v9;
  uint64_t v12 = a2[5];
  if (v12)
  {
    int v13 = 0;
    uint64_t v14 = a2[4];
    do
    {
      int v15 = *v14++;
      int v13 = v15 | (v13 << 8);
      --v12;
    }
    while (v12);
  }
  else
  {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v16 = a2[7];
  if (v16)
  {
    int v17 = 0;
    uint64_t v18 = a2[6];
    do
    {
      int v19 = *v18++;
      int v17 = v19 | (v17 << 8);
      --v16;
    }
    while (v16);
  }
  else
  {
    int v17 = 0;
  }
  *(_DWORD *)(a1 + 20) = v17;
  long long v20 = a2[9];
  if (v20)
  {
    int v21 = 0;
    long long v22 = a2[8];
    do
    {
      int v23 = *v22++;
      int v21 = v23 | (v21 << 8);
      --v20;
    }
    while (v20);
  }
  else
  {
    int v21 = 0;
  }
  *(_DWORD *)(a1 + 24) = v21;
  CFDataRef v24 = a2[15];
  if (!v24)
  {
    *(_DWORD *)(a1 + 56) = 0;
    goto LABEL_81;
  }
  int v25 = 0;
  std::string::size_type v26 = a2[14];
  do
  {
    int v27 = *v26++;
    int v25 = v27 | (v25 << 8);
    --v24;
  }
  while (v24);
  *(_DWORD *)(a1 + 56) = v25;
  if (v25 > 114)
  {
    if (v25 == 115)
    {
      unsigned int v28 = 2;
      goto LABEL_41;
    }
    if (v25 != 210 && v25 != 200)
    {
LABEL_81:
      exception = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v71, "Unsupported chip ID");
      CFDataRef v56 = (void *)SERestoreInfo::SEException::SEException(exception, &v71, 2, @"SEUpdaterErrorDomain");
    }
  }
  else
  {
    if ((v25 - 54) < 2)
    {
      unsigned int v28 = 5;
      goto LABEL_41;
    }
    if (v25 == 44)
    {
      unsigned int v28 = 4;
      goto LABEL_41;
    }
    if (v25 != 100) {
      goto LABEL_81;
    }
  }
  unsigned int v28 = 3;
LABEL_41:
  *(_DWORD *)(a1 + 180) = v28;
  unsigned int v66 = v28;
  {
    uint64_t v70 = 0x1400000F00;
    std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t)v64, (unsigned int *)&v70, 1);
    LODWORD(v71) = 3;
    std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t *)v72, (uint64_t)v64);
    uint64_t v69 = 0x1400000300;
    std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t)v62, (unsigned int *)&v69, 1);
    int v73 = 4;
    std::map<unsigned int,unsigned int>::map[abi:ne180100](v74, (uint64_t)v62);
    uint64_t v68 = 0x1400000100;
    std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t)v60, (unsigned int *)&v68, 1);
    int v75 = 5;
    std::map<unsigned int,unsigned int>::map[abi:ne180100](v76, (uint64_t)v60);
    uint64_t v67 = 0x1400000000;
    std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t)v58, (unsigned int *)&v67, 1);
    int v77 = 6;
    std::map<unsigned int,unsigned int>::map[abi:ne180100](v78, (uint64_t)v58);
    std::map<unsigned int,std::map<unsigned int,unsigned int>>::map[abi:ne180100]((uint64_t)&SERestoreInfo::getJCOPTrain(unsigned int,unsigned int)::JCOP_TRAIN, (unsigned int *)&v71, 4);
    for (uint64_t i = 0; i != -16; i -= 4)
      std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)&v78[i], (void *)v78[i + 1]);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)v58, v59);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)v60, v61);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)v62, v63);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)v64, v65);
  }
  uint64_t v29 = qword_267BAAB70;
  if (!qword_267BAAB70)
  {
LABEL_47:
    int v31 = -1;
    goto LABEL_58;
  }
  while (1)
  {
    unsigned int v30 = *(_DWORD *)(v29 + 32);
    if (v66 >= v30) {
      break;
    }
LABEL_46:
    uint64_t v29 = *(void *)v29;
    if (!v29) {
      goto LABEL_47;
    }
  }
  if (v30 < v66)
  {
    v29 += 8;
    goto LABEL_46;
  }
  long long v32 = std::map<unsigned int,std::map<unsigned int,unsigned int>>::at((uint64_t)&SERestoreInfo::getJCOPTrain(unsigned int,unsigned int)::JCOP_TRAIN, &v66);
  std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t *)&v71, (uint64_t)v32);
  uint64_t v33 = v71;
  int v31 = -1;
  if (v71 != v72)
  {
    do
    {
      if (*((_DWORD *)v33 + 7) <= v9) {
        int v31 = *((_DWORD *)v33 + 8);
      }
      size_t v34 = v33[1];
      if (v34)
      {
        do
        {
          uint64_t v35 = (void **)v34;
          size_t v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          uint64_t v35 = (void **)v33[2];
          BOOL v36 = *v35 == v33;
          uint64_t v33 = v35;
        }
        while (!v36);
      }
      uint64_t v33 = v35;
    }
    while (v35 != v72);
  }
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)&v71, v72[0]);
LABEL_58:
  *(_DWORD *)(a1 + 184) = v31;
  char v37 = a2[25];
  if (v37)
  {
    int v38 = 0;
    uint64_t v39 = a2[24];
    do
    {
      int v40 = *v39++;
      int v38 = v40 | (v38 << 8);
      --v37;
    }
    while (v37);
  }
  else
  {
    int v38 = 0;
  }
  *(_DWORD *)(a1 + 140) = v38;
  uint64_t v41 = a2[23];
  if (v41)
  {
    int v42 = 0;
    uint64_t v43 = a2[22];
    do
    {
      int v44 = *v43++;
      int v42 = v44 | (v42 << 8);
      --v41;
    }
    while (v41);
  }
  else
  {
    int v42 = 0;
  }
  *(_DWORD *)(a1 + 136) = v42;
  uint64_t v45 = a2[27];
  if (v45)
  {
    int v46 = 0;
    uint64_t v47 = a2[26];
    do
    {
      int v48 = *v47++;
      int v46 = v48 | (v46 << 8);
      --v45;
    }
    while (v45);
    *(_DWORD *)(a1 + 144) = v46;
  }
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 32), (char *)a2[12], (char *)&a2[13][(void)a2[12]], (unint64_t)a2[13]);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 64), (char *)a2[16], (char *)&a2[17][(void)a2[16]], (unint64_t)a2[17]);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 88), (char *)a2[18], (char *)&a2[19][(void)a2[18]], (unint64_t)a2[19]);
  double result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 112), (char *)a2[20], (char *)&a2[21][(void)a2[20]], (unint64_t)a2[21]);
  unint64_t v50 = (unint64_t)a2[29];
  if (v50) {
    double result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 152), (char *)a2[28], (char *)&a2[28][v50], v50);
  }
  uint64_t v51 = a2[11];
  if (v51)
  {
    int v52 = 0;
    uint64_t v53 = a2[10];
    do
    {
      int v54 = *v53++;
      int v52 = v54 | (v52 << 8);
      --v51;
    }
    while (v51);
  }
  else
  {
    int v52 = 0;
  }
  *(_DWORD *)(a1 + 28) = v52;
  return result;
}

void sub_217AF0324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,char a22,void *a23)
{
  for (uint64_t i = 0; i != -128; i -= 32)
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(v23 + i + 104, *(void **)(v23 + i + 112));
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

SERestoreInfo::P73BaseDeviceInfo *SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(SERestoreInfo::P73BaseDeviceInfo *this, SERestoreInfo **a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26C8086D8;
  *((void *)this + 4) = 0;
  char v4 = (char *)this + 32;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 4) = 0u;
  int v5 = (char *)this + 64;
  char v6 = (char *)this + 88;
  *((_OWORD *)this + 7) = 0u;
  int v7 = (char *)this + 112;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 16) = 0;
  v10[0] = @"SE,ChipID";
  v10[1] = CFNumberGetTypeID();
  _OWORD v10[2] = (char *)this + 56;
  int v11 = 4;
  uint64_t v12 = @"SE,ID";
  CFTypeID TypeID = CFDataGetTypeID();
  uint64_t v14 = v4;
  int v15 = 24;
  uint64_t v16 = @"SE,Nonce";
  CFTypeID v17 = CFDataGetTypeID();
  uint64_t v18 = v5;
  int v19 = 20;
  long long v20 = @"SE,RootKeyIdentifier";
  CFTypeID v21 = CFDataGetTypeID();
  long long v22 = v6;
  int v23 = 32;
  CFDataRef v24 = @"SE,OSUPubKeyID";
  CFTypeID v25 = CFDataGetTypeID();
  std::string::size_type v26 = v7;
  int v27 = 32;
  SERestoreInfo::P73BaseDeviceInfo::init(this);
  for (uint64_t i = 0; i != 20; i += 4)
    SERestoreInfo::getValueFromCFDict(*a2, (const __CFDictionary *)v10[i], (const __CFString *)v10[i + 1], (BOOL *)v10[i + 2], (void *)LODWORD(v10[i + 3]));
  return this;
}

void sub_217AF05F0(_Unwind_Exception *exception_object)
{
  size_t v8 = *v6;
  if (*v6)
  {
    v1[20] = v8;
    operator delete(v8);
  }
  unsigned int v9 = *v5;
  if (*v5)
  {
    v1[15] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[12] = v10;
    operator delete(v10);
  }
  int v11 = *v3;
  if (*v3)
  {
    v1[9] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[5] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void SERestoreInfo::P73BaseDeviceInfo::updateDict(SERestoreInfo::P73BaseDeviceInfo *this, __CFDictionary *a2, char a3)
{
  int valuePtr = *((_DWORD *)this + 14);
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  if (!v6) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFNumberRef v7 = v6;
  CFDictionarySetValue(a2, @"SE,ChipID", v6);
  CFRelease(v7);
  CFDataRef v8 = CFDataCreate(0, *((const UInt8 **)this + 4), *((void *)this + 5) - *((void *)this + 4));
  if (!v8) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFDataRef v9 = v8;
  CFDictionarySetValue(a2, @"SE,ID", v8);
  CFRelease(v9);
  CFDataRef v10 = CFDataCreate(0, *((const UInt8 **)this + 8), *((void *)this + 9) - *((void *)this + 8));
  if (!v10) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFDataRef v11 = v10;
  CFDictionarySetValue(a2, @"SE,Nonce", v10);
  CFRelease(v11);
  CFDataRef v12 = CFDataCreate(0, *((const UInt8 **)this + 11), *((void *)this + 12) - *((void *)this + 11));
  if (!v12) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFDataRef v13 = v12;
  CFDictionarySetValue(a2, @"SE,RootKeyIdentifier", v12);
  CFRelease(v13);
  if ((a3 & 1) == 0)
  {
    CFDataRef v14 = CFDataCreate(0, *((const UInt8 **)this + 14), *((void *)this + 15) - *((void *)this + 14));
    if (!v14) {
      SERestoreInfo::P73BaseDeviceInfo::updateDict();
    }
    CFDataRef v15 = v14;
    CFDictionarySetValue(a2, @"SE,OSUPubKeyID", v14);
    CFRelease(v15);
  }
}

void SERestoreInfo::P73BaseDeviceInfo::getStateName(int a1@<W0>, std::string *a2@<X8>)
{
  v27[3] = *MEMORY[0x263EF8340];
  int v11 = a1;
  int v12 = 23195;
  std::string::basic_string[abi:ne180100]<0>(v13, "EXPORT_REQUIRED");
  int v14 = 47411;
  std::string::basic_string[abi:ne180100]<0>(v15, "IMPORT_REQUIRED");
  int v16 = 47361;
  std::string::basic_string[abi:ne180100]<0>(v17, "UOS1");
  int v18 = 47362;
  std::string::basic_string[abi:ne180100]<0>(v19, "UOS2");
  int v20 = 42241;
  std::string::basic_string[abi:ne180100]<0>(v21, "UOS1_ERROR");
  int v22 = 42242;
  std::string::basic_string[abi:ne180100]<0>(v23, "UOS2_ERROR");
  int v24 = 47545;
  std::string::basic_string[abi:ne180100]<0>(v25, "EXPORT_FINISHED");
  int v26 = 47377;
  std::string::basic_string[abi:ne180100]<0>(v27, "UOS1_KTP");
  std::map<SERestoreInfo::AMS_UOS_ID,std::string>::map[abi:ne180100]((uint64_t)v9, &v12, 8);
  for (uint64_t i = 0; i != -32; i -= 4)
  {
    if (SHIBYTE(v27[i + 2]) < 0) {
      operator delete((void *)v27[i]);
    }
  }
  int v5 = v10;
  if (!v10)
  {
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(a2, "UNK_STATE");
    goto LABEL_12;
  }
  while (1)
  {
    int v6 = *((_DWORD *)v5 + 8);
    if (v6 <= a1) {
      break;
    }
LABEL_10:
    int v5 = *(char **)v5;
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (v6 < a1)
  {
    v5 += 8;
    goto LABEL_10;
  }
  CFNumberRef v7 = std::map<SERestoreInfo::AMS_UOS_ID,std::string>::at((uint64_t)v9, &v11);
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v7, v7[1]);
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    a2->__r_.__value_.__r.__words[2] = v7[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
  }
LABEL_12:
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v9, v10);
}

void sub_217AF09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_217AF0A54()
{
}

uint64_t *std::map<SERestoreInfo::AMS_UOS_ID,std::string>::at(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  int v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_217AF0C24(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x21D454A90](v1);
  _Unwind_Resume(a1);
}

BOOL SERestoreInfo::P73BaseDeviceInfo::isDev(SERestoreInfo::P73BaseDeviceInfo *this)
{
  int v2 = (*(uint64_t (**)(SERestoreInfo::P73BaseDeviceInfo *))(*(void *)this + 32))(this);
  BOOL v3 = 1;
  RootCA::getRootKeyId(1, v2, &v8);
  uint64_t v4 = (const void *)*((void *)this + 11);
  size_t v5 = *((void *)this + 12) - (void)v4;
  uint64_t v6 = v8;
  if (v5 == v9 - v8) {
    BOOL v3 = memcmp(v4, v8, v5) != 0;
  }
  if (v6)
  {
    CFDataRef v9 = v6;
    operator delete(v6);
  }
  return v3;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D454A90](a1 + 112);
  return a1;
}

char *std::vector<unsigned char>::assign(char **a1, unint64_t a2, char *a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = (unint64_t)a1[2];
  double result = *a1;
  if (v6 - (unint64_t)result >= a2)
  {
    unint64_t v12 = a1[1] - result;
    if (v12 >= a2) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = a1[1] - result;
    }
    for (; v13; --v13)
      *result++ = *a3;
    BOOL v14 = a2 >= v12;
    unint64_t v15 = a2 - v12;
    if (v15 != 0 && v14)
    {
      int v16 = a1[1];
      CFTypeID v17 = &v16[v15];
      do
      {
        *v16++ = *a3;
        --v15;
      }
      while (v15);
      a1[1] = v17;
    }
    else
    {
      a1[1] = &(*a1)[a2];
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      unint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = 2 * v6;
    if (2 * v6 <= v4) {
      uint64_t v8 = v4;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](a1, v9);
    CFDataRef v10 = a1[1];
    int v11 = &v10[v4];
    do
    {
      *v10++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v11;
  }
  return result;
}

uint64_t *std::map<unsigned int,std::map<unsigned int,unsigned int>>::at(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_217AF10E0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  CFNumberRef v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    CFNumberRef v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  size_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      size_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        size_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFTypeID v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          size_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        size_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      CFTypeID v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFTypeID v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          size_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        size_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      CFTypeID v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::map<unsigned int,std::map<unsigned int,unsigned int>>::map[abi:ne180100](uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::map<unsigned int,unsigned int>> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_217AF1390(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::map<unsigned int,unsigned int>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::__find_equal<unsigned int>(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::__construct_node<std::pair<unsigned int const,std::map<unsigned int,unsigned int>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  size_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFTypeID v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          size_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        size_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      CFTypeID v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFTypeID v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          size_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        size_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      CFTypeID v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::__construct_node<std::pair<unsigned int const,std::map<unsigned int,unsigned int>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  double result = std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217AF1644(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned int,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_217AF175C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    unsigned int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      double result = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      unsigned int v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unsigned int v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unsigned int v4 = v8;
        }
        while (!v9);
      }
      unsigned int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  unsigned int v7 = result;
  unint64_t v8 = result[2];
  BOOL v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    BOOL v9 = (char *)v7[1];
    goto LABEL_17;
  }
  unint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      double result = memmove(v9, __src, v16);
    }
    unsigned int v15 = &v9[v16];
    goto LABEL_20;
  }
  BOOL v14 = &__src[v13];
  if (v12 != v9)
  {
    double result = memmove((void *)*result, __src, v13);
    BOOL v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    double result = memmove(v9, v14, a3 - v14);
  }
  unsigned int v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t std::map<SERestoreInfo::AMS_UOS_ID,std::string>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::__map_value_compare<SERestoreInfo::AMS_UOS_ID,std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::less<SERestoreInfo::AMS_UOS_ID>,true>,std::allocator<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>>>::__emplace_hint_unique_key_args<SERestoreInfo::AMS_UOS_ID,std::pair<SERestoreInfo::AMS_UOS_ID const,std::string> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_217AF1978(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::__map_value_compare<SERestoreInfo::AMS_UOS_ID,std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::less<SERestoreInfo::AMS_UOS_ID>,true>,std::allocator<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>>>::__emplace_hint_unique_key_args<SERestoreInfo::AMS_UOS_ID,std::pair<SERestoreInfo::AMS_UOS_ID const,std::string> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::__map_value_compare<SERestoreInfo::AMS_UOS_ID,std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::less<SERestoreInfo::AMS_UOS_ID>,true>,std::allocator<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>>>::__find_equal<SERestoreInfo::AMS_UOS_ID>(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::__map_value_compare<SERestoreInfo::AMS_UOS_ID,std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::less<SERestoreInfo::AMS_UOS_ID>,true>,std::allocator<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>>>::__construct_node<std::pair<SERestoreInfo::AMS_UOS_ID const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::__map_value_compare<SERestoreInfo::AMS_UOS_ID,std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::less<SERestoreInfo::AMS_UOS_ID>,true>,std::allocator<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>>>::__find_equal<SERestoreInfo::AMS_UOS_ID>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      size_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        size_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFTypeID v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      CFTypeID v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFTypeID v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      CFTypeID v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::__map_value_compare<SERestoreInfo::AMS_UOS_ID,std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>,std::less<SERestoreInfo::AMS_UOS_ID>,true>,std::allocator<std::__value_type<SERestoreInfo::AMS_UOS_ID,std::string>>>::__construct_node<std::pair<SERestoreInfo::AMS_UOS_ID const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  int v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_217AF1C4C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<__CFString const*,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void SERestoreInfo::P73BaseDeviceInfo::updateDict()
{
  __assert_rtn("_CFDictionarySetInteger32", "SERestoreInfoHelpers.hpp", 42, "num != nullptr");
}

{
  __assert_rtn("_CFDictionarySetData", "SERestoreInfoHelpers.hpp", 59, "tmpData");
}

SERestoreInfo::IcefallDeviceInfo *SERestoreInfo::IcefallDeviceInfo::IcefallDeviceInfo(SERestoreInfo::IcefallDeviceInfo *this, SERestoreInfo **a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 1) = 0u;
  unsigned int v4 = (char *)this + 16;
  *(void *)this = &unk_26C808738;
  uint64_t v5 = (char *)this + 40;
  *((_OWORD *)this + 4) = 0u;
  int v6 = (char *)this + 64;
  int v7 = (char *)this + 88;
  *((_OWORD *)this + 7) = 0u;
  unint64_t v8 = (char *)this + 112;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 16) = 0;
  v13[0] = @"SE,ChipID";
  uint64_t v9 = (_DWORD *)((char *)this + 144);
  v13[1] = CFNumberGetTypeID();
  int v13[2] = v9;
  int v14 = 4;
  int v15 = @"SE,FactoryMode";
  CFTypeID TypeID = CFBooleanGetTypeID();
  CFTypeID v17 = (char *)this + 153;
  int v18 = 1;
  int v19 = @"SE,ID";
  CFTypeID v20 = CFDataGetTypeID();
  CFTypeID v21 = v4;
  int v22 = 24;
  int v23 = @"SE,Nonce";
  CFTypeID v24 = CFDataGetTypeID();
  CFTypeID v25 = v5;
  int v26 = 20;
  int v27 = @"SE,RootKeyIdentifier";
  CFTypeID v28 = CFDataGetTypeID();
  uint64_t v29 = v6;
  int v30 = 32;
  int v31 = @"SE,OsKeysIdentifier";
  CFTypeID v32 = CFDataGetTypeID();
  uint64_t v33 = v7;
  int v34 = 32;
  uint64_t v35 = @"SE,BLFWKeysIdentifier";
  CFTypeID v36 = CFDataGetTypeID();
  char v37 = v8;
  int v38 = 32;
  uint64_t v39 = @"SE,IsDev";
  uint64_t v10 = 0;
  CFTypeID v40 = CFBooleanGetTypeID();
  uint64_t v41 = (char *)this + 10;
  int v42 = 1;
  *((_DWORD *)this + 37) = 6;
  *((_WORD *)this + 76) = 7;
  do
  {
    SERestoreInfo::getValueFromCFDict(*a2, (const __CFDictionary *)v13[v10], (const __CFString *)v13[v10 + 1], (BOOL *)v13[v10 + 2], (void *)LODWORD(v13[v10 + 3]));
    v10 += 4;
  }
  while (v10 != 32);
  if (*v9 != 131601)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AF1F10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v9 = *v7;
  if (*v7)
  {
    v1[15] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    v1[12] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v5;
  if (*v5)
  {
    v1[9] = v11;
    operator delete(v11);
  }
  unint64_t v12 = *v4;
  if (*v4)
  {
    v1[6] = v12;
    operator delete(v12);
  }
  size_t v13 = *v3;
  if (*v3)
  {
    v1[3] = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

SERestoreInfo::IcefallDeviceInfo *SERestoreInfo::IcefallDeviceInfo::IcefallDeviceInfo(SERestoreInfo::IcefallDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *(void *)this = &unk_26C808738;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 37) = 6;
  *((_WORD *)this + 76) = 7;
  SERestoreInfo::IcefallDeviceInfo::updateFromMQ(this, a2);
  if (*((_DWORD *)this + 36) != 131601)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AF2044(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v5 = (void *)v1[14];
  if (v5)
  {
    v1[15] = v5;
    operator delete(v5);
  }
  int v6 = (void *)v1[11];
  if (v6)
  {
    v1[12] = v6;
    operator delete(v6);
  }
  int v7 = (void *)v1[8];
  if (v7)
  {
    v1[9] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)v1[5];
  if (v8)
  {
    v1[6] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v3;
  if (*v3)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t SERestoreInfo::IcefallDeviceInfo::updateFromMQ(SERestoreInfo::IcefallDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (!v2 || (*((void *)a2 + 2) & 0xFFFFFFFFFFFFFFFDLL) != 0x9D || *(_WORD *)v2 != 257)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  *((unsigned char *)this + 10) = *(unsigned char *)(v2 + 3) == 0;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 2, (char *)(v2 + 4), (char *)(v2 + 28), 0x18uLL);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 5, (char *)(v2 + 28), (char *)(v2 + 48), 0x14uLL);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 8, (char *)(v2 + 48), (char *)(v2 + 80), 0x20uLL);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 11, (char *)(v2 + 112), (char *)(v2 + 144), 0x20uLL);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 14, (char *)(v2 + 80), (char *)(v2 + 112), 0x20uLL);
  *((void *)this + 17) = *(void *)(v2 + 144);
  int v4 = *(unsigned __int8 *)(v2 + 2);
  *((_DWORD *)this + 36) = *(_DWORD *)(v2 + 153);
  *((_DWORD *)this + 37) = v4;
  return 1;
}

void sub_217AF21C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void SERestoreInfo::IcefallDeviceInfo::updateDict(SERestoreInfo::IcefallDeviceInfo *this, __CFDictionary *a2, char a3)
{
  int valuePtr = *((_DWORD *)this + 36);
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  if (!v6) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFNumberRef v7 = v6;
  CFDictionarySetValue(a2, @"SE,ChipID", v6);
  CFRelease(v7);
  CFDataRef v8 = CFDataCreate(0, *((const UInt8 **)this + 2), *((void *)this + 3) - *((void *)this + 2));
  if (!v8) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFDataRef v9 = v8;
  CFDictionarySetValue(a2, @"SE,ID", v8);
  CFRelease(v9);
  CFDataRef v10 = CFDataCreate(0, *((const UInt8 **)this + 5), *((void *)this + 6) - *((void *)this + 5));
  if (!v10) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFDataRef v11 = v10;
  CFDictionarySetValue(a2, @"SE,Nonce", v10);
  CFRelease(v11);
  unint64_t v12 = (const void **)MEMORY[0x263EFFB40];
  if (*((unsigned char *)this + 153)) {
    CFDictionarySetValue(a2, @"SE,FactoryMode", (const void *)*MEMORY[0x263EFFB40]);
  }
  CFDataRef v13 = CFDataCreate(0, *((const UInt8 **)this + 8), *((void *)this + 9) - *((void *)this + 8));
  if (!v13) {
    SERestoreInfo::P73BaseDeviceInfo::updateDict();
  }
  CFDataRef v14 = v13;
  CFDictionarySetValue(a2, @"SE,RootKeyIdentifier", v13);
  CFRelease(v14);
  if ((a3 & 1) == 0)
  {
    if (*((unsigned char *)this + 10)) {
      int v15 = v12;
    }
    else {
      int v15 = (const void **)MEMORY[0x263EFFB38];
    }
    CFDictionarySetValue(a2, @"SE,IsDev", *v15);
    CFDataRef v16 = CFDataCreate(0, *((const UInt8 **)this + 14), *((void *)this + 15) - *((void *)this + 14));
    if (!v16) {
      SERestoreInfo::P73BaseDeviceInfo::updateDict();
    }
    CFDataRef v17 = v16;
    CFDictionarySetValue(a2, @"SE,BLFWKeysIdentifier", v16);
    CFRelease(v17);
    CFDataRef v18 = CFDataCreate(0, *((const UInt8 **)this + 11), *((void *)this + 12) - *((void *)this + 11));
    if (!v18) {
      SERestoreInfo::P73BaseDeviceInfo::updateDict();
    }
    CFDataRef v19 = v18;
    CFDictionarySetValue(a2, @"SE,OsKeysIdentifier", v18);
    CFRelease(v19);
  }
}

void SERestoreInfo::IcefallDeviceInfo::~IcefallDeviceInfo(SERestoreInfo::IcefallDeviceInfo *this)
{
  SERestoreInfo::IcefallDeviceInfo::~IcefallDeviceInfo(this);

  operator delete(v1);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(void *)this = &unk_26C808738;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + 6) = v5;
    operator delete(v5);
  }
  CFNumberRef v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 3) = v6;
    operator delete(v6);
  }
}

void *SERestoreInfo::IcefallDeviceInfo::getOsKeyId@<X0>(SERestoreInfo::IcefallDeviceInfo *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, *((const void **)this + 11), *((void *)this + 12), *((void *)this + 12) - *((void *)this + 11));
}

uint64_t SERestoreInfo::IcefallDeviceInfo::getChipID(SERestoreInfo::IcefallDeviceInfo *this)
{
  return *((unsigned int *)this + 36);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_217AF253C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

SERestoreInfo::UpdateTable *SERestoreInfo::UpdateTable::UpdateTable(SERestoreInfo::UpdateTable *this, DERItem *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v59 = (uint64_t *)((char *)this + 8);
  *((void *)this + 3) = 0;
  uint64_t v3 = DERParseSequenceContent((unint64_t *)a2, 3u, (uint64_t)&P73BaseFirmwareDERSpec::UpdateTableItemSpec, (unint64_t)v67, 0x30uLL);
  if (v3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "Cannot parse UpdateTable.");
    int v52 = (void *)SERestoreInfo::SEException::SEException(exception, &v60, v3, @"libDERErrorDomain");
  }
  uint64_t v4 = DERParseInteger(&v68, this);
  if (v4)
  {
    uint64_t v53 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "Cannot parse UpdateTable.bsn.");
    int v54 = (void *)SERestoreInfo::SEException::SEException(v53, &v60, v4, @"libDERErrorDomain");
  }
  uint64_t v5 = DERDecodeSeqContentInit(&v69, v66);
  if (v5)
  {
    uint64_t v55 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "Cannot parse UpdateTable entries");
    CFDataRef v56 = (void *)SERestoreInfo::SEException::SEException(v55, &v60, v5, @"libDERErrorDomain");
  }
  while (1)
  {
    uint64_t v6 = DERDecodeSeqNext(v66, &v63);
    if (v6) {
      break;
    }
    CFNumberRef v7 = v64;
    if (v64) {
      BOOL v8 = v65 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      int v38 = __cxa_allocate_exception(0x10uLL);
      uint64_t v39 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v70, "Assertion: ");
      CFTypeID v40 = std::string::append(v39, "entry.data && entry.length");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      __int16 v72 = (char *)v40->__r_.__value_.__r.__words[2];
      long long v71 = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21D4548D0](v38, &v71);
      __cxa_throw(v38, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    int v9 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    do
    {
      if (v7 >= &v64[v65]) {
        break;
      }
      int v10 = *v7;
      if (*v7) {
        BOOL v11 = (v10 & 1) == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (!v11)
      {
        int v42 = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(&v71, "Wrong length for updateTableEnry");
        uint64_t v43 = (void *)SERestoreInfo::SEException::SEException(v42, &v71, 2, @"SEUpdaterErrorDomain");
      }
      unint64_t v12 = 0;
      ++v7;
      long long v71 = 0uLL;
      __int16 v72 = 0;
      do
      {
        unsigned int v13 = *(unsigned __int16 *)v7;
        v7 += 2;
        unsigned int v14 = bswap32(v13) >> 16;
        if (v12 >= v72)
        {
          CFDataRef v16 = (char *)v71;
          uint64_t v17 = (uint64_t)&v12[-v71];
          if ((uint64_t)&v12[-v71] <= -3) {
            std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v17 >> 1;
          if ((unint64_t)&v72[-v71] <= (v17 >> 1) + 1) {
            uint64_t v19 = v18 + 1;
          }
          else {
            uint64_t v19 = (uint64_t)&v72[-v71];
          }
          if ((unint64_t)&v72[-v71] >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v20 = v19;
          }
          if (v20)
          {
            CFTypeID v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v72, v20);
            unint64_t v12 = (char *)*((void *)&v71 + 1);
            CFDataRef v16 = (char *)v71;
          }
          else
          {
            CFTypeID v21 = 0;
          }
          int v22 = &v21[2 * v18];
          *(_WORD *)int v22 = v14;
          int v15 = v22 + 2;
          while (v12 != v16)
          {
            __int16 v23 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v22 - 1) = v23;
            v22 -= 2;
          }
          *(void *)&long long v71 = v22;
          *((void *)&v71 + 1) = v15;
          __int16 v72 = &v21[2 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(_WORD *)unint64_t v12 = v14;
          int v15 = v12 + 2;
        }
        *((void *)&v71 + 1) = v15;
        v10 -= 2;
        unint64_t v12 = v15;
      }
      while ((_BYTE)v10);
      CFTypeID v24 = (void *)*((void *)&v60 + 1);
      if ((void *)*((void *)&v60 + 1) >= __p[0])
      {
        uint64_t v25 = std::vector<std::vector<unsigned short>>::__emplace_back_slow_path<std::vector<unsigned short>&>((uint64_t *)&v60, (uint64_t)&v71);
      }
      else
      {
        **((void **)&v60 + 1) = 0;
        v24[1] = 0;
        unint64_t v24[2] = 0;
        std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v24, (const void *)v71, *((uint64_t *)&v71 + 1), (uint64_t)(*((void *)&v71 + 1) - v71) >> 1);
        uint64_t v25 = (uint64_t)(v24 + 3);
      }
      *((void *)&v60 + 1) = v25;
      if ((void)v71)
      {
        *((void *)&v71 + 1) = v71;
        operator delete((void *)v71);
      }
      ++v9;
    }
    while (v9 != 4);
    int v27 = v7 + 1;
    uint64_t v26 = *v7;
    if (*v7)
    {
      __int16 v28 = 0;
      int v29 = *v7;
      do
      {
        --v29;
        __int16 v30 = *v27++;
        __int16 v28 = v30 | (v28 << 8);
      }
      while ((_BYTE)v29);
      int v31 = (unsigned __int8 *)&v7[(v26 - 1)];
      v7 += v26;
      int v27 = v31 + 2;
    }
    else
    {
      __int16 v28 = 0;
    }
    long long v71 = 0uLL;
    __int16 v72 = 0;
    CFTypeID v32 = operator new(2uLL);
    *CFTypeID v32 = v28;
    *((void *)&v71 + 1) = v32 + 1;
    __int16 v72 = (char *)(v32 + 1);
    uint64_t v33 = (void *)*((void *)&v60 + 1);
    *(void *)&long long v71 = v32;
    if ((void *)*((void *)&v60 + 1) >= __p[0])
    {
      uint64_t v34 = std::vector<std::vector<unsigned short>>::__emplace_back_slow_path<std::vector<unsigned short>&>((uint64_t *)&v60, (uint64_t)&v71);
    }
    else
    {
      **((void **)&v60 + 1) = 0;
      v33[1] = 0;
      v33[2] = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v33, (const void *)v71, *((uint64_t *)&v71 + 1), (uint64_t)(*((void *)&v71 + 1) - v71) >> 1);
      uint64_t v34 = (uint64_t)(v33 + 3);
    }
    *((void *)&v60 + 1) = v34;
    if ((void)v71)
    {
      *((void *)&v71 + 1) = v71;
      operator delete((void *)v71);
    }
    if (*v27 != 32)
    {
      uint64_t v47 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v71, "wrong updateTableEnry with wrong hash size");
      int v48 = (void *)SERestoreInfo::SEException::SEException(v47, &v71, 15, @"SEUpdaterErrorDomain");
    }
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p[1], v7 + 2, v7 + 34, 0x20uLL);
    if (*((void *)&v60 + 1) - (void)v60 != 120)
    {
      uint64_t v49 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v71, "Missing element in updateTableEnry");
      unint64_t v50 = (void *)SERestoreInfo::SEException::SEException(v49, &v71, 15, @"SEUpdaterErrorDomain");
    }
    unint64_t v35 = *((void *)this + 2);
    if (v35 >= *((void *)this + 3))
    {
      uint64_t updated = std::vector<SERestoreInfo::UpdateTableEntry>::__emplace_back_slow_path<SERestoreInfo::UpdateTableEntry&>(v59, (uint64_t)&v60);
    }
    else
    {
      std::allocator<SERestoreInfo::UpdateTableEntry>::construct[abi:ne180100]<SERestoreInfo::UpdateTableEntry,SERestoreInfo::UpdateTableEntry&>((uint64_t)this + 24, *((void **)this + 2), (uint64_t)&v60);
      uint64_t updated = v35 + 48;
      *((void *)this + 2) = v35 + 48;
    }
    *((void *)this + 2) = updated;
    if (__p[1])
    {
      *(void **)&long long v62 = __p[1];
      operator delete(__p[1]);
    }
    *(void *)&long long v71 = &v60;
    std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  }
  if (v6 != 1)
  {
    uint64_t v44 = v6;
    uint64_t v45 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "Wrong UpdateTable entries");
    int v46 = (void *)SERestoreInfo::SEException::SEException(v45, &v60, v44, @"libDERErrorDomain");
  }
  if (*((void *)this + 1) == *((void *)this + 2))
  {
    uint64_t v57 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "Size of UpdateTable.entries is zero");
    uint64_t v58 = (void *)SERestoreInfo::SEException::SEException(v57, &v60, 15, @"SEUpdaterErrorDomain");
  }
  return this;
}

void sub_217AF2C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a25 = a10;
  std::vector<SERestoreInfo::UpdateTableEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

void SERestoreInfo::UpdateTableEntry::~UpdateTableEntry(SERestoreInfo::UpdateTableEntry *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t SERestoreInfo::ImageBinary::print(int *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  CFNumberRef v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"[", 1);
  BOOL v8 = (void *)std::ostream::operator<<();
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"{", 1);
  size_t v11 = strlen(off_2642BB960[*a1]);
  unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)off_2642BB960[*a1], v11);
  unsigned int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"}: ", 3);
  std::string::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(__p, *((char **)a1 + 2), (char *)(*((void *)a1 + 2) + *((void *)a1 + 3)), *((void *)a1 + 3));
  if ((v20 & 0x80u) == 0) {
    unsigned int v14 = __p;
  }
  else {
    unsigned int v14 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v15 = v20;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  CFDataRef v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  uint64_t v17 = std::locale::use_facet(&v24, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v21[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v21[1] = MEMORY[0x263F8C318] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D454A90](&v23);
}

void sub_217AF304C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t SERestoreInfo::UpdateTableEntry::print(unsigned __int16 ***a1, uint64_t a2)
{
  v40[3] = *MEMORY[0x263EF8340];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, v4, v5);
  if (a1[1] == *a1) {
    std::vector<std::vector<unsigned short>>::__throw_out_of_range[abi:ne180100]();
  }
  int v6 = ***a1;
  CFNumberRef v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"|", 1);
  SERestoreInfo::P73BaseDeviceInfo::getStateName(v6, &v36);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v8 = &v36;
  }
  else {
    BOOL v8 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"| ", 2);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  size_t v11 = operator new(0x10uLL);
  *size_t v11 = xmmword_217B321B0;
  int v27 = v11;
  std::string::basic_string[abi:ne180100]<0>(&v36, "AMS");
  std::string::basic_string[abi:ne180100]<0>(v37, "RSN");
  std::string::basic_string[abi:ne180100]<0>(v38, "CSN");
  std::string::basic_string[abi:ne180100]<0>(v39, "FSN");
  std::string::basic_string[abi:ne180100]<0>(v40, "ACTION");
  for (uint64_t i = 0; i != 4; ++i)
  {
    unsigned int v13 = &v36 + *((int *)v11 + i);
    int v14 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
    if (v14 >= 0) {
      uint64_t v15 = &v36 + *((int *)v11 + i);
    }
    else {
      uint64_t v15 = (std::string *)v13->__r_.__value_.__r.__words[0];
    }
    if (v14 >= 0) {
      uint64_t v16 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v16 = v13->__r_.__value_.__l.__size_;
    }
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" { ", 3);
    unint64_t v18 = *((int *)v11 + i);
    if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v18) {
      std::vector<std::vector<unsigned short>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v19 = (uint64_t)&(*a1)[3 * (int)v18];
    std::string __p = 0;
    __int16 v30 = 0;
    uint64_t v31 = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 1);
    unsigned __int8 v20 = (char *)__p;
    CFTypeID v21 = v30;
    if (__p != v30)
    {
      int v22 = 0;
      do
      {
        if (v22) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)",", 1);
        }
        *(_DWORD *)((char *)v33 + *(void *)(v32 - 24)) = *(_DWORD *)((unsigned char *)v33 + *(void *)(v32 - 24)) & 0xFFFFFFB5 | 8;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"0x", 2);
        uint64_t v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
        v20 += 2;
        --v22;
      }
      while (v20 != v21);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"} ", 2);
    size_t v11 = v27;
    if (__p)
    {
      __int16 v30 = (char *)__p;
      operator delete(__p);
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v33[-1] + *(void *)(v32 - 24)));
  std::locale v24 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  for (uint64_t j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v40[j + 2]) < 0) {
      operator delete((void *)v40[j]);
    }
  }
  operator delete(v27);
  uint64_t v32 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v33[-1] + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v33[0] = MEMORY[0x263F8C318] + 16;
  if (v34 < 0) {
    operator delete((void *)v33[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D454A90](&v35);
}

void sub_217AF354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t SERestoreInfo::UpdateTable::print(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  CFNumberRef v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v5, v6);
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"BSN: ", 5);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"0x", 2);
  int v9 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v12 = *(unsigned __int16 ****)(a1 + 8);
  for (uint64_t i = *(unsigned __int16 ****)(a1 + 16); v12 != i; v12 += 6)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    SERestoreInfo::UpdateTableEntry::print(v12, (uint64_t)&__p);
    if ((v19 & 0x80u) == 0) {
      locale = &v17;
    }
    else {
      locale = v17.__locale_;
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v14 = v19;
    }
    else {
      uint64_t v14 = v18;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v14);
    if ((char)v19 < 0) {
      operator delete(v17.__locale_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::stringbuf::str();
  v20[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v20[1] = MEMORY[0x263F8C318] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D454A90](&v22);
}

void sub_217AF38E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

uint64_t SERestoreInfo::P73BaseDeliveryObject::updateMeasurement(SERestoreInfo::P73BaseDeliveryObject *this, CFDictionaryRef theDict, __CFError **a3)
{
  if (!theDict || !a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&value, "Assertion: ");
    unsigned __int8 v19 = std::string::append(&value, "outError && outMeasurementDict");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v27 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, __p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  value.__r_.__value_.__r.__words[0] = 0;
  if (CFDictionaryGetValueIfPresent(theDict, @"SE,UpdatePayload", (const void **)&value.__r_.__value_.__l.__data_))
  {
    BOOL v6 = value.__r_.__value_.__r.__words[0] == 0;
  }
  else
  {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    CFTypeID v7 = CFGetTypeID(value.__r_.__value_.__l.__data_);
    if (v7 == CFDictionaryGetTypeID())
    {
      if (value.__r_.__value_.__r.__words[0]) {
        BOOL v8 = (__CFDictionary *)CFRetain(value.__r_.__value_.__l.__data_);
      }
      else {
        BOOL v8 = 0;
      }
LABEL_12:
      int v10 = (unint64_t *)ccsha256_di();
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v27 = 0;
      unint64_t v11 = *v10;
      char v28 = 0;
      if (v11) {
        std::vector<unsigned char>::__append(__p, v11, &v28);
      }
      ccdigest();
      CFDataRef v12 = CFDataCreate(0, (const UInt8 *)__p[0], (char *)__p[1] - (char *)__p[0]);
      if (v12)
      {
        BOOL isDev = SERestoreInfo::P73BaseDeliveryObject::isDev(this);
        uint64_t v14 = kSETagMeasurementDevHash;
        if (!isDev) {
          uint64_t v14 = kSETagMeasurementProdHash;
        }
        CFDictionarySetValue(v8, *v14, v12);
        int v15 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "Fail to allocate tmpData");
        *a3 = SERestoreInfo::CreateCFError((const UInt8 *)v21, 3, 0, @"SEUpdaterErrorDomain");
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        int v15 = 6;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v15 == 6)
      {
        char v16 = 0;
        if (!v8)
        {
LABEL_23:
          if (v12) {
            CFRelease(v12);
          }
          return v16 & 1;
        }
      }
      else
      {
        char v16 = 1;
        if (!v8) {
          goto LABEL_23;
        }
      }
      CFRelease(v8);
      goto LABEL_23;
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    BOOL v8 = Mutable;
    CFDictionarySetValue(theDict, @"SE,UpdatePayload", Mutable);
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "Fail to allocate imageProps");
  *a3 = SERestoreInfo::CreateCFError((const UInt8 *)v23, 3, 0, @"SEUpdaterErrorDomain");
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  char v16 = 0;
  return v16 & 1;
}

void sub_217AF3BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SERestoreInfo::P73BaseDeliveryObject::isDev(SERestoreInfo::P73BaseDeliveryObject *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 8);
  if (*((void *)this + 9) - (void)v1 != 32) {
    return 0;
  }
  if (*v1 == 0x7B77E47DEC309FF8
    && v1[1] == 0x8BF8D2A44AE3A97CLL
    && v1[2] == 0xAD34DB13A59CC364
    && v1[3] == 0xAC0A2E6B4C223984)
  {
    return 1;
  }
  BOOL v5 = *v1 == 0x74975A216330E276 && v1[1] == 0x1F7F7DD3B6FB8D34;
  BOOL v6 = v5 && v1[2] == 0x3FA240FAC488FFFLL;
  if (v6 && v1[3] == 0x21EC7881080683DALL) {
    return 1;
  }
  BOOL v8 = *v1 == 0xD314CD88B2A173ABLL && v1[1] == 0xD0014B39DB0B4552;
  BOOL v9 = v8 && v1[2] == 0xC3B3802C47832D1BLL;
  if (v9 && v1[3] == 0x102CA645D536B9F3) {
    return 1;
  }
  BOOL v11 = *v1 == 0x43028028D9EE140FLL && v1[1] == 0x764EF91F0B455B82;
  BOOL v12 = v11 && v1[2] == 0x74D2E6CF8CD1659BLL;
  if (v12 && v1[3] == 0xBD4FC5BCF7FB4792) {
    return 1;
  }
  BOOL v14 = *v1 == 0x19016EC184635976 && v1[1] == 0xD25BD62A9019D9A3;
  BOOL v15 = v14 && v1[2] == 0xFD6855BA8DAED7D1;
  if (v15 && v1[3] == 0x3E6F156DACCAB98) {
    return 1;
  }
  BOOL v17 = *v1 == 0x4B4B6EEF8151F8B0 && v1[1] == 0x80D0BF7EE34277A5;
  BOOL v18 = v17 && v1[2] == 0xA6421FFAFBC6C2D3;
  if (v18 && v1[3] == 0x11CF79E52F051694) {
    return 1;
  }
  BOOL v20 = *v1 == 0x3B369AD4F6E8946ALL && v1[1] == 0x3A6B9A9BB3089AACLL;
  BOOL v21 = v20 && v1[2] == 0x8FA19016C1B6DB7CLL;
  if (v21 && v1[3] == 0x40ACEFB5D4F4787) {
    return 1;
  }
  BOOL v23 = *v1 == 0xFC41962122793EF7 && v1[1] == 0xB912209BBCCC0208;
  BOOL v24 = v23 && v1[2] == 0xA845838AEC9D85B0;
  if (v24 && v1[3] == 0x1DAD2E5A3D9AD8A8) {
    return 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = v1[1];
  uint64_t v29 = v1[2];
  uint64_t v28 = v1[3];
  return v26 == 0xCBD1BDB61BAAD564
      && v27 == 0x957F8100699D3DAALL
      && v29 == 0xB07184D6337E1DBCLL
      && v28 == 0x710CE2BFF2A6DF1CLL;
}

uint64_t SERestoreInfo::P73BaseDeliveryObject::updateVersionDict(SERestoreInfo::P73BaseDeliveryObject *this, __CFDictionary *a2, __CFError **a3)
{
  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "Assertion: ");
    int v10 = std::string::append(&v12, "outError && outDict");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, *((const UInt8 **)this + 12), *((void *)this + 13), 0x8000100u, 0);
  BOOL isDev = SERestoreInfo::P73BaseDeliveryObject::isDev(this);
  CFTypeID v7 = kSETagVersionDev;
  if (!isDev) {
    CFTypeID v7 = kSETagVersionProd;
  }
  CFDictionarySetValue(a2, *v7, v5);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

void sub_217AF411C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL SERestoreInfo::P73BaseDeliveryObject::matchID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    return 0;
  }
  int v3 = *(uint64_t **)(a1 + 64);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v9 = v3[2];
  uint64_t v8 = v3[3];
  uint64_t v11 = v2[2];
  uint64_t v10 = v2[3];
  return v4 == v6 && v5 == v7 && v9 == v11 && v8 == v10;
}

uint64_t SERestoreInfo::P73BaseDeliveryObject::print(SERestoreInfo::P73BaseDeliveryObject *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Details: ", 9);
  std::string::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, *((char **)this + 12), (char *)(*((void *)this + 12) + *((void *)this + 13)), *((void *)this + 13));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"FactoryPostflight revision: ", 28);
  std::to_string(&__p, *((unsigned __int8 *)this + 152));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &__p;
  }
  else {
    uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"UpdateTable: ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  long long v13 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  std::string::basic_string[abi:ne180100]<0>(v29, "\t");
  SERestoreInfo::UpdateTable::print((uint64_t)this + 120, (uint64_t)v29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = &__p;
  }
  else {
    std::string::size_type v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  BOOL v17 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  BOOL v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Binaries: ", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  unsigned __int8 v19 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  BOOL v20 = (SERestoreInfo::P73BaseDeliveryObject *)*((void *)this + 1);
  if (v20 != (SERestoreInfo::P73BaseDeliveryObject *)((char *)this + 16))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "\t");
      SERestoreInfo::ImageBinary::print((int *)v20 + 10, (uint64_t)v27);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v21 = &__p;
      }
      else {
        BOOL v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v21, v22);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      BOOL v23 = (SERestoreInfo::P73BaseDeliveryObject *)*((void *)v20 + 1);
      if (v23)
      {
        do
        {
          BOOL v24 = v23;
          BOOL v23 = *(SERestoreInfo::P73BaseDeliveryObject **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          BOOL v24 = (SERestoreInfo::P73BaseDeliveryObject *)*((void *)v20 + 2);
          BOOL v25 = *(void *)v24 == (void)v20;
          BOOL v20 = v24;
        }
        while (!v25);
      }
      BOOL v20 = v24;
    }
    while (v24 != (SERestoreInfo::P73BaseDeliveryObject *)((char *)this + 16));
  }
  std::stringbuf::str();
  v32[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v32[1] = MEMORY[0x263F8C318] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D454A90](&v34);
}

void sub_217AF4754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t SERestoreInfo::P73BaseDeliveryObject::parseFPRev(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 8);
  if (!v1 || (unint64_t v2 = *(void *)(a1 + 16)) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Assertion: ");
    std::string::size_type v9 = std::string::append(&v11, "data.data && data.length");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &__str);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__str, v1, &v1[v2], v2);
  std::string::size_type v3 = std::string::rfind(&__str, 45, 0xFFFFFFFFFFFFFFFFLL);
  if (v3 == -1) {
    goto LABEL_16;
  }
  std::string::basic_string(&v11, &__str, v3 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v11;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 2) {
      goto LABEL_16;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) != 2) {
      goto LABEL_16;
    }
    p_str = &__str;
  }
  uint64_t v5 = 0;
  while ((p_str->__r_.__value_.__s.__data_[v5] & 0x80000000) == 0
       && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * p_str->__r_.__value_.__s.__data_[v5] + 60) & 0x400) != 0)
  {
    if (++v5 == 2)
    {
      unsigned __int8 v6 = std::stoul(&__str, 0, 10);
      goto LABEL_17;
    }
  }
LABEL_16:
  unsigned __int8 v6 = -18;
LABEL_17:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_217AF49C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SERestoreInfo::P73BaseFirmware::updateMeasurementDict(__CFError *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = 0;
  if (*(void *)a3)
  {
    (*(void (**)(void **__return_ptr))(**(void **)a3 + 16))(&__p);
    unsigned __int8 v6 = (unsigned int **)operator new(0x18uLL);
    *unsigned __int8 v6 = 0;
    v6[1] = 0;
    unint64_t v6[2] = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v6, __p, (uint64_t)v41, v41 - (unsigned char *)__p);
    v37[0] = 0;
    uint64_t v7 = (void **)v43;
    uint64_t v43 = v6;
    if (v7)
    {
      std::default_delete<std::vector<unsigned char>>::operator()[abi:ne180100]((int)&v43, v7);
      v37[0] = 0;
    }
    if (__p)
    {
      long long v41 = (char *)__p;
      operator delete(__p);
    }
    if ((*(unsigned int (**)(void))(**(void **)a3 + 32))() == 54)
    {
      uint64_t v8 = operator new(0x20uLL);
      *uint64_t v8 = xmmword_217B32208;
      v8[1] = unk_217B32218;
      std::string::size_type v9 = (char *)operator new(0x20uLL);
      long long v10 = v9;
      *(_OWORD *)std::string::size_type v9 = xmmword_217B32228;
      *((_OWORD *)v9 + 1) = unk_217B32238;
      std::string v11 = *v43;
      if ((char *)v43[1] - (char *)*v43 == 32)
      {
        uint64_t v12 = *(void *)v11;
        uint64_t v13 = *((void *)v11 + 1);
        uint64_t v15 = *((void *)v11 + 2);
        uint64_t v14 = *((void *)v11 + 3);
        BOOL v16 = v12 == *(void *)v8 && v13 == *((void *)v8 + 1);
        int v19 = v16 && v15 == *((void *)v8 + 2) && v14 == *((void *)v8 + 3);
      }
      else
      {
        int v19 = 0;
      }
      BOOL v20 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get((SERestoreInfo::SERestoreInfoLog *)v9);
      SERestoreInfo::SERestoreInfoLog::printLog(v20, 2, "updateMeasurementDict", "KeyID 0x%X, overwriting with dev %d", bswap32(**v43), v19);
      if (v19) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v43, v10, v10 + 32, 0x20uLL);
      }
      operator delete(v10);
      operator delete(v8);
    }
  }
  long long v41 = 0;
  uint64_t v42 = 0;
  std::string __p = &v41;
  v37[0] = 0;
  v37[1] = a1;
  uint64_t v21 = (*((void *)a1 + 3) - *((void *)a1 + 2)) >> 5;
  if (!v21) {
    goto LABEL_53;
  }
  do
  {
    SERestoreInfo::SEFirmwareIter::operator*((uint64_t)v37);
    unint64_t v22 = v39.n128_u64[0];
    __n128 v38 = v39;
    if (v39.n128_u64[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    }
    if (!v43
      || (BOOL v23 = *(const void **)(v22 + 64),
          size_t v24 = *(void *)(v22 + 72) - (void)v23,
          v24 == (char *)v43[1] - (char *)*v43)
      && !memcmp(v23, *v43, v24))
    {
      BOOL v25 = (char **)std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::find<std::vector<unsigned char>>((uint64_t)&__p, (unsigned __int8 **)(v22 + 64));
      if (&v41 == v25)
      {
        std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__emplace_unique_key_args<std::vector<unsigned char>,std::vector<unsigned char> const&,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>((uint64_t **)&__p, (unsigned __int8 **)(v38.n128_u64[0] + 64), v38.n128_u64[0] + 64, &v38);
      }
      else if (*(_DWORD *)(v38.n128_u64[0] + 160) > *((_DWORD *)v25[7] + 40))
      {
        unint64_t v44 = v38.n128_u64[0] + 64;
        uint64_t v26 = std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__emplace_unique_key_args<std::vector<unsigned char>,std::piecewise_construct_t const&,std::tuple<std::vector<unsigned char> const&>,std::tuple<>>((uint64_t **)&__p, (unsigned __int8 **)(v38.n128_u64[0] + 64), (uint64_t)&std::piecewise_construct, (uint64_t *)&v44);
        __n128 v27 = v38;
        __n128 v38 = 0uLL;
        char v28 = (std::__shared_weak_count *)v26[8];
        *(__n128 *)(v26 + 7) = v27;
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
    }
    if (v38.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.n128_u64[1]);
    }
    if (v39.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39.n128_u64[1]);
    }
    ++LODWORD(v37[0]);
  }
  while (LODWORD(v37[0]) != v21);
  if (!v42)
  {
LABEL_53:
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v37, "No matching delivery object found.");
    std::string v36 = (void *)SERestoreInfo::SEException::SEException(exception, v37, 24, @"SEUpdaterErrorDomain");
  }
  uint64_t v29 = (char *)__p;
  if (__p != &v41)
  {
    do
    {
      v37[0] = 0;
      (*(void (**)(void *, uint64_t, __CFError **))(**((void **)v29 + 7) + 16))(*((void **)v29 + 7), a2, v37);
      if (v37[0])
      {
        char v33 = (SERestoreInfo::SEException *)__cxa_allocate_exception(0x48uLL);
        uint64_t v34 = (void *)SERestoreInfo::SEException::SEException(v33, v37[0]);
      }
      char v30 = (char *)*((void *)v29 + 1);
      if (v30)
      {
        do
        {
          uint64_t v31 = (char **)v30;
          char v30 = *(char **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          uint64_t v31 = (char **)*((void *)v29 + 2);
          BOOL v16 = *v31 == v29;
          uint64_t v29 = (char *)v31;
        }
        while (!v16);
      }
      uint64_t v29 = (char *)v31;
    }
    while (v31 != &v41);
  }
  std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::destroy((uint64_t)&__p, v41);
  uint64_t v32 = (void **)v43;
  uint64_t v43 = 0;
  if (v32) {
    std::default_delete<std::vector<unsigned char>>::operator()[abi:ne180100]((int)&v43, v32);
  }
}

void sub_217AF4E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  operator delete(v23);
  uint64_t v26 = *(void ***)(v24 - 72);
  *(void *)(v24 - 72) = 0;
  if (v26) {
    std::default_delete<std::vector<unsigned char>>::operator()[abi:ne180100](v24 - 72, v26);
  }
  _Unwind_Resume(a1);
}

double SERestoreInfo::P73BaseFirmware::makeDeliveryObject@<D0>(DERItem *a1@<X1>, _OWORD *a2@<X8>)
{
  if (a1->data) {
    BOOL v4 = a1->length == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Assertion: ");
    unint64_t v50 = std::string::append(&v114, "input.data && input.length");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    uint64_t v102 = (char *)v50->__r_.__value_.__r.__words[2];
    long long v101 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v101);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v5 = DERParseSequenceContent((unint64_t *)a1, 5u, (uint64_t)&P73BaseFirmwareDERSpec::DeliveryObjectItemSpec, (unint64_t)&v101, 0x50uLL);
  if (v5)
  {
    uint64_t v74 = v5;
    int v75 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Failed to parse as per DeliveryObjectItemSpec");
    uint64_t v76 = (void *)SERestoreInfo::SEException::SEException(v75, &v114, v74, @"libDERErrorDomain");
  }
  LODWORD(v114.__r_.__value_.__l.__data_) = 0;
  if (DERParseInteger((char **)&v101, &v114) || LODWORD(v114.__r_.__value_.__l.__data_) || v103 != 32)
  {
    int v77 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Failed to validate delivery object");
    int v78 = (void *)SERestoreInfo::SEException::SEException(v77, &v114, 15, @"SEUpdaterErrorDomain");
  }
  _ZNSt3__115allocate_sharedB8ne180100IN13SERestoreInfo21P73BaseDeliveryObjectENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v92);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v92 + 64), v102, &v102[v103], v103);
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C808838;
  *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = v104;
  uint64_t v115 = 0;
  SERestoreInfo::BLOB::operator=((void *)(v92 + 88), &v114);
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v114);
  uint64_t v89 = &unk_26C808838;
  long long v90 = *(_OWORD *)(v92 + 96);
  uint64_t v91 = *(void *)(v92 + 112);
  char v6 = SERestoreInfo::P73BaseDeliveryObject::parseFPRev((uint64_t)&v89);
  *(unsigned char *)(v92 + 152) = v6;
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v89);
  uint64_t v7 = DERParseSequence((uint64_t)&v105, 3u, (uint64_t)&P73BaseFirmwareDERSpec::UpdatePayloadItemSpec, (unint64_t)v99, 0x30uLL);
  if (v7)
  {
    uint64_t v79 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Failed to parse updatePayload as per UpdatePayloadItemSpec");
    uint64_t v80 = (void *)SERestoreInfo::SEException::SEException(v79, &v114, v7, @"libDERErrorDomain");
  }
  uint64_t v8 = DERParseSequenceContent(v100, 2u, (uint64_t)&P73BaseFirmwareDERSpec::SignedSectionItemSpec, (unint64_t)&v97, 0x20uLL);
  if (v8)
  {
    uint64_t v81 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Failed to parse signedSection as per SignedSectionItemSpec");
    uint64_t v82 = (void *)SERestoreInfo::SEException::SEException(v81, &v114, v8, @"libDERErrorDomain");
  }
  SERestoreInfo::UpdateTable::UpdateTable((SERestoreInfo::UpdateTable *)&v114, &v97);
  uint64_t v9 = v92;
  *(_DWORD *)(v92 + 120) = v114.__r_.__value_.__l.__data_;
  std::vector<SERestoreInfo::UpdateTableEntry>::__vdeallocate((void **)(v9 + 128));
  *(_OWORD *)(v9 + 128) = *(_OWORD *)&v114.__r_.__value_.__r.__words[1];
  *(void *)(v9 + 144) = v115;
  uint64_t v115 = 0;
  *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = 0uLL;
  v120[0] = &v114.__r_.__value_.__s.__data_[8];
  std::vector<SERestoreInfo::UpdateTableEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
  if (!v106[0] || !v106[1])
  {
    int v52 = __cxa_allocate_exception(0x10uLL);
    uint64_t v53 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v120, "Assertion: ");
    int v54 = std::string::append(v53, "binaryItem.data && binaryItem.length");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](v52, &v114);
    __cxa_throw(v52, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v10 = v92;
  std::string v11 = DERDecodeSeqContentInit(v106, v126);
  if (v11)
  {
    uint64_t v83 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Cannot init sequence for DeliveryObject.binaries");
    uint64_t v84 = (void *)SERestoreInfo::SEException::SEException(v83, &v114, v11, @"libDERErrorDomain");
  }
  while (1)
  {
    uint64_t v12 = DERDecodeSeqNext(v126, &v124);
    uint64_t v13 = v12;
    if (v12) {
      break;
    }
    LODWORD(v114.__r_.__value_.__l.__data_) = 0;
    v114.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_26C808838;
    uint64_t v116 = 0;
    int v117 = 0;
    v119[0] = 0;
    int64x2_t v118 = 0uLL;
    unsigned int v113 = 0;
    uint64_t v14 = DERParseSequenceContent(&v125, 4u, (uint64_t)&P73BaseFirmwareDERSpec::ImageBinaryItemSpec, (unint64_t)v120, 0x40uLL);
    if (v14)
    {
      uint64_t v58 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v127, "Cannot parse ImageBinary.");
      uint64_t v59 = (void *)SERestoreInfo::SEException::SEException(v58, &v127, v14, @"libDERErrorDomain");
    }
    uint64_t v15 = DERParseInteger(v120, &v113);
    if (v15 || v113 >= 5)
    {
      CFDataRef v56 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v127, "ImageBinary.type is out of range.");
      uint64_t v57 = (void *)SERestoreInfo::SEException::SEException(v56, &v127, v15, @"libDERErrorDomain");
    }
    LODWORD(v114.__r_.__value_.__l.__data_) = v113;
    uint64_t v127 = (int64x2_t *)&unk_26C808838;
    int64x2_t v128 = v121;
    uint64_t v129 = 0;
    SERestoreInfo::BLOB::operator=(&v114.__r_.__value_.__l.__size_, &v127);
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v127);
    uint64_t v16 = DERParseInteger(&v122, &v117);
    if (v16)
    {
      long long v60 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v127, "Cannot parse ImageBinary.index.");
      uint64_t v61 = (void *)SERestoreInfo::SEException::SEException(v60, &v127, v16, @"libDERErrorDomain");
    }
    BOOL v17 = DERDecodeSeqContentInit(&v123, v112);
    if (v17)
    {
      long long v62 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v127, "Cannot init sequence for ImageBinary.apdus");
      unint64_t v63 = (void *)SERestoreInfo::SEException::SEException(v62, &v127, v17, @"libDERErrorDomain");
    }
    while (1)
    {
      uint64_t v18 = DERDecodeSeqNext(v112, &v110);
      uint64_t v19 = v18;
      if (v18) {
        break;
      }
      uint64_t v107 = &unk_26C808838;
      long long v108 = v111;
      uint64_t v109 = 0;
      uint64_t v20 = v118.i64[1];
      if (v118.i64[1] >= v119[0])
      {
        uint64_t v23 = v118.i64[1] - v118.i64[0];
        uint64_t v24 = (v118.i64[1] - v118.i64[0]) >> 5;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59) {
          std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v119[0] - v118.i64[0];
        if ((v119[0] - v118.i64[0]) >> 4 > v25) {
          unint64_t v25 = v26 >> 4;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        uint64_t v130 = v119;
        if (v27) {
          char v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::BLOB>>((uint64_t)v119, v27);
        }
        else {
          char v28 = 0;
        }
        uint64_t v29 = &v28[32 * v24];
        *(void *)uint64_t v29 = &unk_26C808838;
        long long v30 = v108;
        *((void *)v29 + 3) = v109;
        *(_OWORD *)(v29 + 8) = v30;
        uint64_t v32 = v118.i64[1];
        uint64_t v31 = v118.i64[0];
        if (v118.i64[1] == v118.i64[0])
        {
          int64x2_t v36 = vdupq_n_s64(v118.u64[1]);
          uint64_t v34 = &v28[32 * v24];
        }
        else
        {
          uint64_t v33 = (uint64_t)&v28[v23 - 32];
          uint64_t v34 = &v28[32 * v24];
          do
          {
            *((void *)v34 - 4) = &unk_26C808838;
            v34 -= 32;
            long long v35 = *(_OWORD *)(v32 - 24);
            *((void *)v34 + 3) = *(void *)(v32 - 8);
            *(_OWORD *)(v34 + 8) = v35;
            v33 -= 32;
            v32 -= 32;
          }
          while (v32 != v31);
          int64x2_t v36 = v118;
        }
        unint64_t v22 = v29 + 32;
        v118.i64[0] = (uint64_t)v34;
        v118.i64[1] = (uint64_t)(v29 + 32);
        int64x2_t v128 = v36;
        uint64_t v37 = v119[0];
        v119[0] = &v28[32 * v27];
        uint64_t v129 = v37;
        uint64_t v127 = (int64x2_t *)v36.i64[0];
        std::__split_buffer<SERestoreInfo::BLOB>::~__split_buffer((uint64_t)&v127);
      }
      else
      {
        *(void *)v118.i64[1] = &unk_26C808838;
        long long v21 = v108;
        *(void *)(v20 + 24) = v109;
        *(_OWORD *)(v20 + 8) = v21;
        unint64_t v22 = (char *)(v20 + 32);
      }
      v118.i64[1] = (uint64_t)v22;
      SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v107);
    }
    if (v18 != 1)
    {
      uint64_t v47 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v127, "Cannot parse ImageBinary.apdus");
      int v48 = (void *)SERestoreInfo::SEException::SEException(v47, &v127, v19, @"libDERErrorDomain");
    }
    std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::__emplace_unique_impl<unsigned int &,SERestoreInfo::ImageBinary&>(v10 + 8, &v117, (uint64_t)&v114);
    uint64_t v127 = &v118;
    std::vector<SERestoreInfo::BLOB>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v114.__r_.__value_.__r.__words[1]);
  }
  if (v12 != 1)
  {
    uint64_t v64 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v114, "Cannot parse DeliveryObject.binaries");
    uint64_t v65 = (void *)SERestoreInfo::SEException::SEException(v64, &v114, v13, @"libDERErrorDomain");
  }
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C808838;
  *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = v105;
  uint64_t v115 = 0;
  SERestoreInfo::BLOB::operator=((void *)(v92 + 32), &v114);
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v114);
  uint64_t v38 = v92;
  *(_DWORD *)(v92 + 156) = 0;
  *(_DWORD *)(v38 + 160) = 0;
  __n128 v39 = DERParseSequenceContent(&v98, 2u, (uint64_t)&P73BaseFirmwareDERSpec::UpdatePropertiesItemSpec, (unint64_t)v95, 0x20uLL);
  CFTypeID v40 = v39;
  if (v39)
  {
    if (v39 != 5)
    {
      CFErrorRef v85 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v114, "Failed to parse updateProperties as per UpdatePropertiesItemSpec.");
      id v86 = (void *)SERestoreInfo::SEException::SEException(v85, &v114, v40, @"libDERErrorDomain");
    }
  }
  else
  {
    uint64_t v107 = 0;
    uint64_t v42 = DERDecodeSeqInit((uint64_t)&v96, &v107, &v127);
    if (v42)
    {
      uint64_t v87 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v114, "Cannot parse properties entries");
      uint64_t v88 = (void *)SERestoreInfo::SEException::SEException(v87, &v114, v42, @"libDERErrorDomain");
    }
    while (!DERDecodeSeqNext((unint64_t *)&v127, (unint64_t *)&v114))
    {
      uint64_t v43 = DERDecodeItem((uint64_t)&v114.__r_.__value_.__l.__size_, (unint64_t *)&v114);
      if (v43)
      {
        unsigned int v66 = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(v120, "Cannot parse property");
        uint64_t v67 = (void *)SERestoreInfo::SEException::SEException(v66, v120, v43, @"libDERErrorDomain");
      }
      unint64_t v44 = DERParseSequenceContent(&v114.__r_.__value_.__l.__size_, 2u, (uint64_t)&P73BaseFirmwareDERSpec::PropertyItemSpec, (unint64_t)v93, 0x20uLL);
      if (v44)
      {
        uint64_t v68 = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(v120, "Failed to parse as per PropertyItemSpec");
        unint64_t v69 = (void *)SERestoreInfo::SEException::SEException(v68, v120, v44, @"libDERErrorDomain");
      }
      if (v93[1] == 4)
      {
        if (*(_DWORD *)v93[0] == 1768121715)
        {
          LODWORD(v124) = 0;
          uint64_t v46 = DERParseInteger(v94, &v124);
          if (v46)
          {
            uint64_t v70 = __cxa_allocate_exception(0x48uLL);
            std::string::basic_string[abi:ne180100]<0>(v120, "Failed to parse 'seci' value");
            long long v71 = (void *)SERestoreInfo::SEException::SEException(v70, v120, v46, @"libDERErrorDomain");
          }
          *(_DWORD *)(v92 + 156) = v124;
        }
        else if (*(_DWORD *)v93[0] == 1986553203)
        {
          LODWORD(v124) = 0;
          uint64_t v45 = DERParseInteger(v94, &v124);
          if (v45)
          {
            __int16 v72 = __cxa_allocate_exception(0x48uLL);
            std::string::basic_string[abi:ne180100]<0>(v120, "Failed to parse 'sehv' value");
            int v73 = (void *)SERestoreInfo::SEException::SEException(v72, v120, v45, @"libDERErrorDomain");
          }
          *(_DWORD *)(v92 + 160) = v124;
        }
      }
    }
  }
  double result = *(double *)&v92;
  *a2 = v92;
  return result;
}

void sub_217AF5CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(a1);
}

void *SERestoreInfo::BLOB::operator=(void *a1, void *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = a2[2];
    a1[1] = a2[1];
    a1[2] = v4;
    uint64_t v5 = (const void *)a1[3];
    if (v5)
    {
      CFRelease(v5);
      a1[3] = 0;
    }
    char v6 = (const void *)a2[3];
    if (v6) {
      a1[3] = CFRetain(v6);
    }
  }
  return a1;
}

void SERestoreInfo::P73BaseFirmware::~P73BaseFirmware(SERestoreInfo::P73BaseFirmware *this)
{
  SERestoreInfo::SEFirmwareBase::~SEFirmwareBase(this);

  operator delete(v1);
}

void SERestoreInfo::P73BaseDeliveryObject::~P73BaseDeliveryObject(SERestoreInfo::P73BaseDeliveryObject *this)
{
  *(void *)this = &unk_26C8087D0;
  std::string::size_type v3 = (void **)((char *)this + 128);
  std::vector<SERestoreInfo::UpdateTableEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::P73BaseDeliveryObject *)((char *)this + 88));
  unint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::P73BaseDeliveryObject *)((char *)this + 32));
  std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26C8087D0;
  std::string::size_type v3 = (void **)((char *)this + 128);
  std::vector<SERestoreInfo::UpdateTableEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::P73BaseDeliveryObject *)((char *)this + 88));
  unint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::P73BaseDeliveryObject *)((char *)this + 32));
  std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
  operator delete(this);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

uint64_t std::vector<std::vector<unsigned short>>::__emplace_back_slow_path<std::vector<unsigned short>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)std::string v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  v15 += 24;
  std::vector<std::vector<unsigned short>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned short>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_217AF6198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned short>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned short>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned short>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<unsigned short>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned short>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<unsigned short>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      long long v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    long long v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      char v12 = operator new(v11);
    }
    else {
      char v12 = 0;
    }
    long long v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    BOOL v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--long long v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void SERestoreInfo::BLOB::~BLOB(SERestoreInfo::BLOB *this)
{
  SERestoreInfo::BLOB::~BLOB(this);

  operator delete(v1);
}

{
  const void *v2;

  *(void *)this = &unk_26C808838;
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 3) = 0;
  }
}

void std::vector<SERestoreInfo::UpdateTableEntry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::allocator<SERestoreInfo::UpdateTableEntry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::allocator<SERestoreInfo::UpdateTableEntry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)a2;
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void SERestoreInfo::ImageBinary::~ImageBinary(SERestoreInfo::ImageBinary *this)
{
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<SERestoreInfo::BLOB>::__destroy_vector::operator()[abi:ne180100](&v2);
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::ImageBinary *)((char *)this + 8));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::BLOB>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<SERestoreInfo::BLOB>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::__emplace_unique_impl<unsigned int &,SERestoreInfo::ImageBinary&>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::__construct_node<unsigned int &,SERestoreInfo::ImageBinary&>(a1, a2, a3, (uint64_t)&__p);
  unint64_t v4 = (void **)__p;
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  if (v6)
  {
    unsigned int v7 = *((unsigned __int16 *)__p + 16);
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v6;
        unsigned int v9 = *((unsigned __int16 *)v6 + 16);
        if (v7 >= v9) {
          break;
        }
        uint64_t v6 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v6 = v8[1];
      if (!v6)
      {
        uint64_t v5 = v8 + 1;
        goto LABEL_10;
      }
    }
    std::string __p = 0;
    if (v4) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,void *>>>::operator()[abi:ne180100]((uint64_t)&v12, v4);
    }
  }
  else
  {
    long long v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v5, (uint64_t *)__p);
    return (uint64_t **)__p;
  }
  return v8;
}

uint64_t std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::__construct_node<unsigned int &,SERestoreInfo::ImageBinary&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  long long v8 = operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<unsigned short const,SERestoreInfo::ImageBinary>::pair[abi:ne180100]<unsigned int &,SERestoreInfo::ImageBinary&,0>((uint64_t)v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_217AF68F4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned short const,SERestoreInfo::ImageBinary>::pair[abi:ne180100]<unsigned int &,SERestoreInfo::ImageBinary&,0>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_WORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  *(void *)(a1 + 16) = &unk_26C808838;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 40) = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 24) = v4;
  int v5 = *(_DWORD *)(a3 + 40);
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = a1 + 56;
  *(_DWORD *)(v6 - 8) = v5;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  std::vector<SERestoreInfo::BLOB>::__init_with_size[abi:ne180100]<SERestoreInfo::BLOB*,SERestoreInfo::BLOB*>((char *)v6, *(void *)(a3 + 48), *(void *)(a3 + 56), (uint64_t)(*(void *)(a3 + 56) - *(void *)(a3 + 48)) >> 5);
  return a1;
}

void sub_217AF6994(_Unwind_Exception *a1)
{
  SERestoreInfo::BLOB::~BLOB(v1);
  _Unwind_Resume(a1);
}

char *std::vector<SERestoreInfo::BLOB>::__init_with_size[abi:ne180100]<SERestoreInfo::BLOB*,SERestoreInfo::BLOB*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<SERestoreInfo::BLOB>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    if (a2 != a3)
    {
      uint64_t v8 = *((void *)v6 + 1);
      do
      {
        *(void *)uint64_t v7 = &unk_26C808838;
        long long v9 = *(_OWORD *)(a2 + 8);
        *(void *)(v7 + 24) = *(void *)(a2 + 24);
        *(_OWORD *)(v7 + 8) = v9;
        a2 += 32;
        v7 += 32;
        v8 += 32;
      }
      while (a2 != a3);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_217AF6A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<SERestoreInfo::BLOB>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::BLOB>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<SERestoreInfo::BLOB>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 11;
    std::vector<SERestoreInfo::BLOB>::__destroy_vector::operator()[abi:ne180100](&v3);
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)(__p + 6));
  }
  if (__p) {
    operator delete(__p);
  }
}

void SERestoreInfo::SEFirmwareBase::~SEFirmwareBase(SERestoreInfo::SEFirmwareBase *this)
{
  *(void *)this = &unk_26C808B28;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<SERestoreInfo::BLOB>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SERestoreInfo::ImageBinary>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SERestoreInfo::ImageBinary>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 88);
    std::vector<SERestoreInfo::BLOB>::__destroy_vector::operator()[abi:ne180100](&v4);
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)(a2 + 48));
    operator delete(a2);
  }
}

void std::vector<SERestoreInfo::UpdateTableEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<SERestoreInfo::UpdateTableEntry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<SERestoreInfo::UpdateTableEntry>::__emplace_back_slow_path<SERestoreInfo::UpdateTableEntry&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t updated = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::UpdateTableEntry>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t updated = 0;
  }
  BOOL v10 = updated;
  size_t v11 = &updated[48 * v3];
  long long v13 = &updated[48 * v6];
  std::allocator<SERestoreInfo::UpdateTableEntry>::construct[abi:ne180100]<SERestoreInfo::UpdateTableEntry,SERestoreInfo::UpdateTableEntry&>((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 48;
  std::vector<SERestoreInfo::UpdateTableEntry>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<SERestoreInfo::UpdateTableEntry>::~__split_buffer(&v10);
  return v8;
}

void sub_217AF6E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SERestoreInfo::UpdateTableEntry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<SERestoreInfo::UpdateTableEntry>::construct[abi:ne180100]<SERestoreInfo::UpdateTableEntry,SERestoreInfo::UpdateTableEntry&>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<unsigned short>>::__init_with_size[abi:ne180100]<std::vector<unsigned short>*,std::vector<unsigned short>*>(a2, *(void *)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2 + 3, *(const void **)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 32) - *(void *)(a3 + 24));
}

void sub_217AF6E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned short>>::__init_with_size[abi:ne180100]<std::vector<unsigned short>*,std::vector<unsigned short>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<unsigned short>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*,std::vector<unsigned short>*,std::vector<unsigned short>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_217AF6F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<unsigned short>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*,std::vector<unsigned short>*,std::vector<unsigned short>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  size_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      unint64_t v4[2] = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_217AF7030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      int v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::vector<SERestoreInfo::UpdateTableEntry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SERestoreInfo::UpdateTableEntry>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::UpdateTableEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SERestoreInfo::UpdateTableEntry>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::UpdateTableEntry>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::UpdateTableEntry>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::UpdateTableEntry>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::UpdateTableEntry>,std::reverse_iterator<SERestoreInfo::UpdateTableEntry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<SERestoreInfo::UpdateTableEntry>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<SERestoreInfo::UpdateTableEntry>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<SERestoreInfo::UpdateTableEntry>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<SERestoreInfo::UpdateTableEntry>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::string::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    unint64_t v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void std::vector<std::vector<unsigned short>>::__throw_out_of_range[abi:ne180100]()
{
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_217AF7478(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void std::default_delete<std::vector<unsigned char>>::operator()[abi:ne180100](int a1, void **__p)
{
  if (__p)
  {
    uint64_t v3 = *__p;
    if (*__p)
    {
      __p[1] = v3;
      operator delete(v3);
    }
    operator delete(__p);
  }
}

void std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::vector<unsigned char> const,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<unsigned char> const,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void *std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::find<std::vector<unsigned char>>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t result = std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__lower_bound<std::vector<unsigned char>>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 != result)
  {
    uint64_t v6 = result[4];
    uint64_t v5 = result[5];
    if (v6 == v5) {
      return result;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = v6 + 1;
    while (v7 != a2[1])
    {
      unsigned int v9 = *v7;
      unsigned int v10 = *(unsigned __int8 *)(v8 - 1);
      if (v9 < v10) {
        break;
      }
      ++v7;
      if (v10 < v9 || v8++ == v5) {
        return result;
      }
    }
  }
  return v3;
}

void *std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__lower_bound<std::vector<unsigned char>>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    uint64_t v5 = a2[1];
    do
    {
      if (*a2 == v5)
      {
LABEL_12:
        uint64_t result = a3;
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)a3[4];
        uint64_t v7 = *a2 + 1;
        while (v6 != (unsigned __int8 *)a3[5])
        {
          unsigned int v8 = *v6;
          unsigned int v9 = *(unsigned __int8 *)(v7 - 1);
          if (v8 < v9) {
            break;
          }
          ++v6;
          if (v9 < v8 || v7++ == v5) {
            goto LABEL_12;
          }
        }
        ++a3;
      }
      a3 = (void *)*a3;
    }
    while (a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__emplace_unique_key_args<std::vector<unsigned char>,std::piecewise_construct_t const&,std::tuple<std::vector<unsigned char> const&>,std::tuple<>>(uint64_t **a1, unsigned __int8 **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__find_equal<std::vector<unsigned char>>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<unsigned char> const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__find_equal<std::vector<unsigned char>>(uint64_t a1, void *a2, unsigned __int8 **a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = a3[1];
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unsigned int v8 = (unsigned __int8 *)v4[4];
        unsigned int v9 = (unsigned __int8 *)v7[5];
        if (v8 != v9) {
          break;
        }
LABEL_12:
        if (*a3 != v6)
        {
          uint64_t v15 = (uint64_t)(*a3 + 1);
          while (v8 != v9)
          {
            unsigned int v16 = *v8;
            unsigned int v17 = *(unsigned __int8 *)(v15 - 1);
            if (v16 < v17) {
              break;
            }
            ++v8;
            if (v17 < v16 || v15++ == (void)v6) {
              goto LABEL_27;
            }
          }
          uint64_t result = v7 + 1;
          uint64_t v4 = (void *)v7[1];
          if (v4) {
            continue;
          }
        }
        goto LABEL_27;
      }
      unsigned int v10 = v8 + 1;
      uint64_t v11 = *a3;
      while (v11 != v6)
      {
        unsigned int v12 = *v11;
        unsigned int v13 = *(v10 - 1);
        if (v12 < v13) {
          break;
        }
        ++v11;
        if (v13 < v12 || v10++ == v9) {
          goto LABEL_12;
        }
      }
      uint64_t v4 = (void *)*v7;
      uint64_t result = v7;
    }
    while (*v7);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_27:
  *a2 = v7;
  return result;
}

void *std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<unsigned char> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = *a2;
  v6[5] = 0;
  v6[6] = 0;
  void v6[4] = 0;
  uint64_t result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v6 + 4, *(const void **)v7, *(void *)(v7 + 8), *(void *)(v7 + 8) - *(void *)v7);
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217AF7888(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<unsigned char> const,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__emplace_unique_key_args<std::vector<unsigned char>,std::vector<unsigned char> const&,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>(uint64_t **a1, unsigned __int8 **a2, uint64_t a3, __n128 *a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__find_equal<std::vector<unsigned char>>((uint64_t)a1, &v12, a2);
  unsigned int v8 = *v7;
  if (!*v7)
  {
    unsigned int v9 = v7;
    std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__construct_node<std::vector<unsigned char> const&,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, v12, v9, v11[0]);
    unsigned int v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

__n128 std::__tree<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::__map_value_compare<std::vector<unsigned char>,std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,std::less<std::vector<unsigned char>>,true>,std::allocator<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>>>::__construct_node<std::vector<unsigned char> const&,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unsigned int v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 4) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v8 + 4, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  __n128 result = *a3;
  *(__n128 *)(v8 + 56) = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_217AF7A14(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<unsigned char>,std::shared_ptr<SERestoreInfo::P73BaseDeliveryObject const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

double _ZNSt3__115allocate_sharedB8ne180100IN13SERestoreInfo21P73BaseDeliveryObjectENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xC0uLL);
  v2[1] = 0;
  _DWORD v2[2] = 0;
  *uint64_t v2 = &unk_26C808868;
  double result = 0.0;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  v2[5] = 0;
  v2[3] = &unk_26C8087D0;
  v2[4] = v2 + 5;
  v2[6] = 0;
  v2[7] = &unk_26C808838;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  v2[14] = &unk_26C808838;
  v2[19] = 0;
  v2[20] = 0;
  v2[21] = 0;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<SERestoreInfo::P73BaseDeliveryObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::P73BaseDeliveryObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808868;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::P73BaseDeliveryObject>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *SERestoreInfo::P73BaseRestoreInfo::getImageTag@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1;
  {
    uint64_t v2 = a1;
    if (v4)
    {
      SERestoreInfo::P73BaseRestoreInfo::getImageTag(void)const::_imageTag = @"SE,UpdatePayload";
      uint64_t v2 = a1;
    }
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  _DWORD v2[2] = 0;
}

void *SERestoreInfo::P73BaseRestoreInfo::getTagsInBI@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1;
  {
    uint64_t v2 = a1;
    if (v4)
    {
      SERestoreInfo::P73BaseRestoreInfo::getTagsInBI(void)const::_tagsInBI = @"SE,ChipID";
      unk_267BAABA0 = @"SE,UpdatePayload";
      uint64_t v2 = a1;
    }
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  _DWORD v2[2] = 0;
}

void SERestoreInfo::P73BaseRestoreInfo::~P73BaseRestoreInfo(SERestoreInfo::P73BaseRestoreInfo *this)
{
  SERestoreInfo::SERestoreInfoBase::~SERestoreInfoBase(this);

  operator delete(v1);
}

__CFString *SERestoreInfo::P73BaseRestoreInfo::getImagePropertyTag(SERestoreInfo::P73BaseRestoreInfo *this)
{
  uint64_t v2 = (SERestoreInfo::P73BaseDeviceInfo *)*((void *)this + 2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL isDev = SERestoreInfo::P73BaseDeviceInfo::isDev(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (isDev) {
    return @"DevelopmentUpdatePayloadHash";
  }
  else {
    return @"ProductionUpdatePayloadHash";
  }
}

void sub_217AF7D84(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<__CFString const*>::__init_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<__CFString const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_217AF7DFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *SERestoreInfo::IcefallRestoreInfo::getImageTag@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1;
  {
    uint64_t v2 = a1;
    if (v4)
    {
      SERestoreInfo::IcefallRestoreInfo::getImageTag(void)const::_imageTags = @"SE,Bootloader";
      *(void *)algn_267BAABB8 = @"SE,Firmware";
      qword_267BAABC0 = @"SE,MigrationOS";
      unk_267BAABC8 = @"SE,OS";
      uint64_t v2 = a1;
    }
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  _DWORD v2[2] = 0;
}

void *SERestoreInfo::IcefallRestoreInfo::getTagsInBI@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1;
  {
    uint64_t v2 = a1;
    if (v4)
    {
      SERestoreInfo::IcefallRestoreInfo::getTagsInBI(void)const::_tagsInBI = @"SE,ChipID";
      unk_267BAABE0 = @"SE,Bootloader";
      qword_267BAABE8 = @"SE,Firmware";
      unk_267BAABF0 = @"SE,MigrationOS";
      qword_267BAABF8 = @"SE,OS";
      uint64_t v2 = a1;
    }
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  _DWORD v2[2] = 0;
}

__CFString *SERestoreInfo::IcefallRestoreInfo::getImagePropertyTag(SERestoreInfo::IcefallRestoreInfo *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    if (*(unsigned char *)(v2 + 10)) {
      uint64_t v3 = kSETagMeasurementDevCMAC;
    }
    else {
      uint64_t v3 = kSETagMeasurementProdCMAC;
    }
    int v4 = *v3;
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    if (*(unsigned char *)(v2 + 10)) {
      uint64_t v5 = kSETagMeasurementDevCMAC;
    }
    else {
      uint64_t v5 = kSETagMeasurementProdCMAC;
    }
    return *v5;
  }
  return v4;
}

void **SERestoreInfo::P73DeviceInfo::P73DeviceInfo(void **this, const SERestoreInfo::BLOB *a2)
{
  uint64_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo((SERestoreInfo::P73BaseDeviceInfo *)this, a2);
  *(void *)uint64_t v3 = &unk_26C808958;
  if (*((_DWORD *)v3 + 14) != 115)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  if (SERestoreInfo::isDummyRootCaKeyId((uint64_t)(this + 11))) {
    SERestoreInfo::fixRootCaKeyId(this + 11, (uint64_t)(this + 14));
  }
  return this;
}

void sub_217AF80F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

BOOL SERestoreInfo::isDummyRootCaKeyId(uint64_t a1)
{
  uint64_t v7 = 0;
  size_t v8 = 0;
  uint64_t v9 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v7, &SERestoreInfo::isDummyRootCaKeyId(std::vector<unsigned char> const&)::dummyRootCaKeyIdArray, (uint64_t)&SERestoreInfo::isProdCometIm4KeyId(std::vector<unsigned char> const&)::prodCometIm4KeyIdArray, 0x20uLL);
  uint64_t v2 = *(const void **)a1;
  size_t v3 = *(void *)(a1 + 8) - *(void *)a1;
  int v4 = v7;
  if (v3 == v8 - v7)
  {
    BOOL v5 = memcmp(v2, v7, v3) == 0;
    if (!v4) {
      return v5;
    }
    goto LABEL_5;
  }
  BOOL v5 = 0;
  if (v7)
  {
LABEL_5:
    size_t v8 = v4;
    operator delete(v4);
  }
  return v5;
}

void SERestoreInfo::fixRootCaKeyId(void **a1, uint64_t a2)
{
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v10, &SERestoreInfo::isProdCometIm4KeyId(std::vector<unsigned char> const&)::prodCometIm4KeyIdArray, (uint64_t)"N13SERestoreInfo11SEExceptionE", 0x20uLL);
  int v4 = *(const void **)a2;
  size_t v5 = *(void *)(a2 + 8) - *(void *)a2;
  uint64_t v6 = v10;
  if (v5 != v11 - v10)
  {
    BOOL v7 = 0;
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v7 = memcmp(v4, v10, v5) == 0;
  if (v6)
  {
LABEL_5:
    uint64_t v11 = v6;
    operator delete(v6);
  }
LABEL_6:
  RootCA::getRootKeyId(v7, 115, &__p);
  if (&__p != a1) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, (char *)__p, v9, v9 - (unsigned char *)__p);
  }
  if (__p)
  {
    uint64_t v9 = (char *)__p;
    operator delete(__p);
  }
}

void sub_217AF827C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **SERestoreInfo::P73DeviceInfo::P73DeviceInfo(void **this, SERestoreInfo **a2)
{
  size_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo((SERestoreInfo::P73BaseDeviceInfo *)this, a2);
  *(void *)size_t v3 = &unk_26C808958;
  if (*((_DWORD *)v3 + 14) != 115)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  if (SERestoreInfo::isDummyRootCaKeyId((uint64_t)(this + 11))) {
    SERestoreInfo::fixRootCaKeyId(this + 11, (uint64_t)(this + 14));
  }
  return this;
}

void sub_217AF8344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t SERestoreInfo::SEException::SEException(uint64_t a1, long long *a2, int a3, CFTypeRef cf)
{
  v26[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C8089A8;
  *(void *)(a1 + 8) = 0;
  BOOL v7 = (void **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  size_t v8 = (std::string::value_type *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)size_t v8 = v9;
  }
  *(_DWORD *)(a1 + 64) = a3;
  if (cf)
  {
    CFTypeRef v10 = CFRetain(cf);
    a3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  *(void *)(a1 + 56) = v10;
  std::to_string(&v23, a3);
  uint64_t v11 = std::string::insert(&v23, 0, "(");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unsigned int v13 = std::string::append(&v24, ") ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = *(char *)(a1 + 55);
  if (v15 >= 0) {
    unsigned int v16 = v8;
  }
  else {
    unsigned int v16 = *(const std::string::value_type **)(a1 + 32);
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    std::string::size_type v17 = *(void *)(a1 + 40);
  }
  char v18 = std::string::append(&v25, v16, v17);
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
  v26[0] = v18->__r_.__value_.__l.__size_;
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v7);
  }
  uint64_t v21 = v26[0];
  *(void *)(a1 + 8) = v19;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 23) = *(void *)((char *)v26 + 7);
  *(unsigned char *)(a1 + 31) = v20;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_217AF8544(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

SERestoreInfo::SEException *SERestoreInfo::SEException::SEException(SERestoreInfo::SEException *this, CFErrorRef err)
{
  v25[2] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26C8089A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  CFStringRef v5 = CFErrorCopyDescription(err);
  CFStringRef v6 = v5;
  if (v5)
  {
    CFIndex Length = CFStringGetLength(v5);
    usedBufLen.__r_.__value_.__r.__words[0] = 0;
    v26.CFIndex location = 0;
    v26.CFIndex length = Length;
    CFIndex Bytes = CFStringGetBytes(v6, v26, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&usedBufLen);
    if (usedBufLen.__r_.__value_.__r.__words[0] && Bytes)
    {
      std::vector<unsigned char>::vector(&__p, usedBufLen.__r_.__value_.__r.__words[0]);
      v27.CFIndex location = 0;
      v27.CFIndex length = Length;
      if (CFStringGetBytes(v6, v27, 0x8000100u, 0, 0, (UInt8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0], 0))
      {
        std::string::__assign_trivial[abi:ne180100]<unsigned char *,unsigned char *>((std::string *)((char *)this + 32), __p.__r_.__value_.__l.__data_, (std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    CFRelease(v6);
  }
  *((_DWORD *)this + 16) = CFErrorGetCode(err);
  Domain = CFErrorGetDomain(err);
  if (Domain) {
    Domain = CFRetain(Domain);
  }
  *((void *)this + 7) = Domain;
  std::to_string(&v22, *((int *)this + 16));
  CFTypeRef v10 = std::string::insert(&v22, 0, "CF=(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  usedBufLen.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&usedBufLen.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  long long v12 = std::string::append(&usedBufLen, ") ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = *((char *)this + 55);
  if (v14 >= 0) {
    int v15 = (char *)this + 32;
  }
  else {
    int v15 = (const std::string::value_type *)*((void *)this + 4);
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *((unsigned __int8 *)this + 55);
  }
  else {
    std::string::size_type v16 = *((void *)this + 5);
  }
  std::string::size_type v17 = std::string::append(&__p, v15, v16);
  std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
  v25[0] = v17->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
  char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*v4);
  }
  uint64_t v20 = v25[0];
  *((void *)this + 1) = v18;
  *((void *)this + 2) = v20;
  *(void *)((char *)this + 23) = *(void *)((char *)v25 + 7);
  *((unsigned char *)this + 31) = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(usedBufLen.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(usedBufLen.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_217AF87C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void SERestoreInfo::SEException::~SEException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C8089A8;
  uint64_t v2 = this[7].__vftable;
  if (v2)
  {
    CFRelease(v2);
    this[7].__vftable = 0;
  }
  if (SHIBYTE(this[6].__vftable) < 0) {
    operator delete(this[4].__vftable);
  }
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

{
  void *v1;
  uint64_t vars8;

  SERestoreInfo::SEException::~SEException(this);

  operator delete(v1);
}

CFErrorRef SERestoreInfo::SEException::CreateCFError(SERestoreInfo::SEException *this)
{
  uint64_t v2 = (char *)this + 32;
  if (*((char *)this + 55) < 0) {
    uint64_t v2 = *(char **)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v2);
  CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)__p, *((_DWORD *)this + 16), 0, *((const __CFString **)this + 7));
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return CFError;
}

void std::string::__assign_trivial[abi:ne180100]<unsigned char *,unsigned char *>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size_t v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  size_t v8 = this;
  if ((v12 & 0x80) != 0) {
    size_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    size_t v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

SERestoreInfo::SN300VDeviceInfo *SERestoreInfo::SN300VDeviceInfo::SN300VDeviceInfo(SERestoreInfo::SN300VDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  size_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)size_t v3 = &unk_26C8089E8;
  if (*((_DWORD *)v3 + 14) != 44)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AF8A50(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

SERestoreInfo::SN300VDeviceInfo *SERestoreInfo::SN300VDeviceInfo::SN300VDeviceInfo(SERestoreInfo::SN300VDeviceInfo *this, SERestoreInfo **a2)
{
  size_t v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)size_t v3 = &unk_26C8089E8;
  if (*((_DWORD *)v3 + 14) != 44)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217AF8B04(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

void SERestoreInfo::IcefallDeliveryObject::addApdu(uint64_t a1, int a2, unint64_t *a3)
{
  int v28 = a2;
  uint64_t v4 = (uint64_t)DERDecodeSeqContentInit(a3, v27);
  if (v4)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "Cannot decode APDUs.");
    std::string::size_type v18 = (void *)SERestoreInfo::SEException::SEException(exception, v19, v4, @"libDERErrorDomain");
  }
  CFStringRef v5 = (uint64_t **)(a1 + 8);
  while (!v4)
  {
    uint64_t v4 = DERDecodeSeqNext(v27, &v25);
    if (!v4)
    {
      char v6 = DERParseSequenceContent(&v26, 2u, (uint64_t)&IcefallFirmwareDERSpec::ApduItemSpec, (unint64_t)&v21, 0x20uLL);
      if (v6)
      {
        unint64_t v12 = v6;
        std::string::value_type v13 = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(v19, "Cannot parse per ApduItemSpec");
        int v14 = (void *)SERestoreInfo::SEException::SEException(v13, v19, v12, @"libDERErrorDomain");
      }
      if (v22 != (_DWORD *)5)
      {
        std::string::size_type v10 = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(v19, "wrong apdu header size");
        unint64_t v11 = (void *)SERestoreInfo::SEException::SEException(v10, v19, 15, @"SEUpdaterErrorDomain");
      }
      if ((unint64_t)(v24 - 8242) <= 0xFFFFFFFFFFFFDFC8)
      {
        int v15 = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(v19, "wrong apdu size");
        std::string::size_type v16 = (void *)SERestoreInfo::SEException::SEException(v15, v19, 15, @"SEUpdaterErrorDomain");
      }
      v19[0] = &v28;
      BOOL v7 = std::__tree<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::__map_value_compare<SERestoreInfo::ApduType_t,std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::less<SERestoreInfo::ApduType_t>,true>,std::allocator<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>>>::__emplace_unique_key_args<SERestoreInfo::ApduType_t,std::piecewise_construct_t const&,std::tuple<SERestoreInfo::ApduType_t const&>,std::tuple<>>(v5, &v28, (uint64_t)&std::piecewise_construct, v19);
      v19[0] = &unk_26C808838;
      v19[1] = v21;
      v19[2] = v22;
      void v19[3] = 0;
      v20[0] = &unk_26C808838;
      v20[1] = v23;
      v20[2] = v24;
      v20[3] = 0;
      std::vector<SERestoreInfo::ApduBLOB>::emplace_back<SERestoreInfo::ApduBLOB>((uint64_t *)v7 + 5, (uint64_t)v19);
      SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)v20);
      SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)v19);
    }
  }
  if (v4 != 1)
  {
    size_t v8 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "Fail to parse Apdu]");
    long long v9 = (void *)SERestoreInfo::SEException::SEException(v8, v19, v4, @"libDERErrorDomain");
  }
}

void sub_217AF8E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<SERestoreInfo::ApduBLOB>::emplace_back<SERestoreInfo::ApduBLOB>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v11 = (uint64_t)(v7 - *a1) >> 6;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 58) {
      std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - *a1;
    if (v13 >> 5 > v12) {
      unint64_t v12 = v13 >> 5;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::ApduBLOB>>(result, v14);
    }
    else {
      int v15 = 0;
    }
    std::string::size_type v16 = &v15[64 * v11];
    v19[0] = v15;
    v19[1] = v16;
    void v19[3] = &v15[64 * v14];
    *(void *)std::string::size_type v16 = &unk_26C808838;
    uint64_t v17 = *(void *)(a2 + 24);
    *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + 8);
    *((void *)v16 + 3) = v17;
    *((void *)v16 + 4) = &unk_26C808838;
    long long v18 = *(_OWORD *)(a2 + 40);
    *((void *)v16 + 7) = *(void *)(a2 + 56);
    *(_OWORD *)(v16 + 40) = v18;
    v19[2] = v16 + 64;
    std::vector<SERestoreInfo::ApduBLOB>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<SERestoreInfo::ApduBLOB>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(void *)unint64_t v7 = &unk_26C808838;
    uint64_t v8 = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = v8;
    *(void *)(v7 + 32) = &unk_26C808838;
    long long v9 = *(_OWORD *)(a2 + 40);
    *(void *)(v7 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(v7 + 40) = v9;
    uint64_t v10 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v10;
  return result;
}

void sub_217AF9040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SERestoreInfo::ApduBLOB>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void SERestoreInfo::IcefallDeliveryObject::addMac(uint64_t a1, int a2, uint64_t *a3)
{
  int v11 = a2;
  for (uint64_t i = *(uint64_t **)(a1 + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v4 = *((_DWORD *)i + 8);
    if (v4 <= a2)
    {
      if (v4 >= a2)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(v10, "Fail to addMac");
        long long v9 = (void *)SERestoreInfo::SEException::SEException(exception, v10, 15, @"SEUpdaterErrorDomain");
      }
      ++i;
    }
  }
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  v10[0] = &unk_26C808838;
  v10[1] = v5;
  _OWORD v10[2] = v6;
  void v10[3] = 0;
  unint64_t v12 = &v11;
  unint64_t v7 = std::__tree<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,SERestoreInfo::BLOB>>>::__emplace_unique_key_args<ImageType_t,std::piecewise_construct_t const&,std::tuple<ImageType_t const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v11, (uint64_t)&std::piecewise_construct, &v12);
  SERestoreInfo::BLOB::operator=(v7 + 5, v10);
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)v10);
}

void sub_217AF9158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t SERestoreInfo::IcefallDeliveryObject::updateMeasurement(SERestoreInfo::IcefallDeliveryObject *this, CFDictionaryRef theDict, __CFError **a3)
{
  if (!theDict)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    long long v30 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v48, "Assertion: ");
    uint64_t v31 = std::string::append(v30, "outMeasurementDict");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    unint64_t v44 = (__CFString *)v31->__r_.__value_.__r.__words[2];
    long long v43 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v43);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (!a3)
  {
    uint64_t v33 = __cxa_allocate_exception(0x10uLL);
    uint64_t v34 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v48, "Assertion: ");
    long long v35 = std::string::append(v34, "outError");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    unint64_t v44 = (__CFString *)v35->__r_.__value_.__r.__words[2];
    long long v43 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](v33, &v43);
    __cxa_throw(v33, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long v43 = @"SE,Bootloader";
  *((void *)&v43 + 1) = @"SE,Bootloader";
  unint64_t v44 = @"SE,OS";
  uint64_t v45 = @"SE,MigrationOS";
  uint64_t v46 = @"SE,Firmware";
  uint64_t v5 = (char *)*((void *)this + 4);
  uint64_t v6 = (char *)this + 40;
  if (v5 == (char *)this + 40) {
    return 1;
  }
  while (1)
  {
    uint64_t v8 = *((unsigned int *)v5 + 8);
    if (v8 >= 5)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "cmac.first is out of range");
      *a3 = SERestoreInfo::CreateCFError(v41, 2, 0, @"SEUpdaterErrorDomain");
      if ((v42 & 0x80000000) == 0) {
        return 0;
      }
      std::string v22 = *(void **)v41;
      goto LABEL_37;
    }
    long long v9 = (const void *)*((void *)&v43 + v8);
    if (CFDictionaryContainsKey(theDict, v9)) {
      break;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "imageProps is nullptr");
      *a3 = SERestoreInfo::CreateCFError((const UInt8 *)__p, 3, 0, @"SEUpdaterErrorDomain");
      if ((v38 & 0x80000000) == 0) {
        return 0;
      }
      std::string v22 = __p[0];
      goto LABEL_37;
    }
LABEL_9:
    unint64_t v12 = (const UInt8 *)*((void *)v5 + 6);
    if (!v12)
    {
      uint64_t v23 = __cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v47, "Assertion: ");
      uint64_t v24 = std::string::append(&v47, "cmac");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v49 = v24->__r_.__value_.__r.__words[2];
      long long v48 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21D4548D0](v23, &v48);
      __cxa_throw(v23, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (*((void *)v5 + 7) != 16)
    {
      unint64_t v26 = __cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v47, "Assertion: ");
      CFRange v27 = std::string::append(&v47, "cmac_len == CMAC_SIZE");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v49 = v27->__r_.__value_.__r.__words[2];
      long long v48 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21D4548D0](v26, &v48);
      __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    int v13 = *((unsigned __int8 *)this + 80);
    CFDataRef v14 = CFDataCreate(0, v12, 16);
    if (v14)
    {
      CFDataRef v15 = v14;
      if (v13) {
        CFDictionarySetValue(Mutable, @"DevelopmentCMAC", v14);
      }
      else {
        CFDictionaryAddValue(Mutable, @"ProductionCMAC", v14);
      }
      CFRelease(v15);
      goto LABEL_16;
    }
    uint64_t v20 = (const UInt8 *)std::string::basic_string[abi:ne180100]<0>(&v48, "Cannot allocate for tmpData");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError(v20, 3, 0, @"SEUpdaterErrorDomain");
    *a3 = CFError;
    if (SHIBYTE(v49) < 0)
    {
      operator delete((void *)v48);
LABEL_16:
      CFCFErrorRef Error = *a3;
    }
    if (CFError)
    {
      CFRelease(Mutable);
      return 0;
    }
    CFDictionarySetValue(theDict, v9, Mutable);
    CFRelease(Mutable);
    uint64_t v17 = (char *)*((void *)v5 + 1);
    if (v17)
    {
      do
      {
        long long v18 = v17;
        uint64_t v17 = *(char **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        long long v18 = (char *)*((void *)v5 + 2);
        BOOL v19 = *(void *)v18 == (void)v5;
        uint64_t v5 = v18;
      }
      while (!v19);
    }
    uint64_t v5 = v18;
    if (v18 == v6) {
      return 1;
    }
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, v9);
  CFMutableDictionaryRef Mutable = (__CFDictionary *)CFRetain(Value);
  if (Mutable) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "imageProps is nullptr");
  *a3 = SERestoreInfo::CreateCFError(v39, 2, 0, @"SEUpdaterErrorDomain");
  if (v40 < 0)
  {
    std::string v22 = *(void **)v39;
LABEL_37:
    operator delete(v22);
  }
  return 0;
}

void sub_217AF9664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SERestoreInfo::IcefallDeliveryObject::updateVersionDict(SERestoreInfo::IcefallDeliveryObject *this, __CFDictionary *a2, __CFError **a3)
{
  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "Assertion: ");
    int v13 = std::string::append(&v20, "outError && outDict");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v13->__r_.__value_.__r.__words[2];
    long long v21 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v21);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  __int16 v19 = 0;
  *(_DWORD *)std::string __str = 0;
  uint64_t v5 = (char *)this + 56;
  LODWORD(v21) = 2;
  int v6 = *((unsigned __int8 *)std::map<ImageType_t,unsigned short>::at((uint64_t)this + 56, (int *)&v21) + 1);
  LODWORD(v21) = 2;
  unint64_t v7 = std::map<ImageType_t,unsigned short>::at((uint64_t)v5, (int *)&v21);
  unsigned int v8 = snprintf(__str, 6uLL, "%d.%d", *(unsigned __int8 *)v7, v6);
  if (v8 - 6 <= 0xFFFFFFFA)
  {
    CFDataRef v15 = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "Assertion: ");
    std::string::size_type v16 = std::string::append(&v20, "nchar>0 && nchar<sizeof(buffer)");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v16->__r_.__value_.__r.__words[2];
    long long v21 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](v15, &v21);
    __cxa_throw(v15, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)__str, v8, 0x8000100u, 0);
  uint64_t v10 = kSETagVersionDev;
  if (!*((unsigned char *)this + 80)) {
    uint64_t v10 = kSETagVersionProd;
  }
  CFDictionarySetValue(a2, *v10, v9);
  if (v9) {
    CFRelease(v9);
  }
  return 1;
}

void sub_217AF9964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t *std::map<ImageType_t,unsigned short>::at(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 4;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

BOOL SERestoreInfo::IcefallDeliveryObject::matchID(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 104);
  int v3 = *(const void **)a2;
  return v2 == *(void *)(a2 + 8) - (void)v3 && memcmp(*(const void **)(a1 + 96), v3, v2) == 0;
}

double SERestoreInfo::IcefallFirmware::makeDeliveryObject@<D0>(DERItem *a1@<X1>, _OWORD *a2@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN13SERestoreInfo21IcefallDeliveryObjectENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v40);
  uint64_t v5 = DERParseSequenceContent((unint64_t *)a1, 0x16u, (uint64_t)&IcefallFirmwareDERSpec::DeliveryObjectItemSpec, (unint64_t)v17, 0x160uLL);
  if (v5)
  {
    int v13 = v5;
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "Fail to parse IcefallFW per DeliveryObjectItemSpec.");
    CFDataRef v15 = (void *)SERestoreInfo::SEException::SEException(exception, v16, v13, @"libDERErrorDomain");
  }
  if (v17[1] != 2
    || (int v6 = v23) != 0 && v24 > 1
    || *(unsigned char *)v17[0]
    || *(unsigned __int8 *)(v17[0] + 1) < 7u
    || v19 != 32
    || (uint64_t v7 = v18) == 0
    || v21 != 32
    || (uint64_t v8 = v20) == 0
    || v26[1] != 16
    || !v26[0]
    || v29[1] != 16
    || !v29[0]
    || v36[1] != 16
    || !v36[0]
    || v27[1] != (__int16 *)2
    || !v27[0]
    || v30[1] != (__int16 *)2
    || !v30[0]
    || v37[1] != (__int16 *)2
    || !v37[0]
    || v34[1] && v34[0] && (v32[1] != 16 || !v32[0] || v33[1] != (__int16 *)2 || !v33[0]))
  {
    int v11 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "Fail to validate delivery object.");
    unint64_t v12 = (void *)SERestoreInfo::SEException::SEException(v11, v16, 15, @"SEUpdaterErrorDomain");
  }
  uint64_t v9 = v40;
  *(unsigned char *)(v40 + 80) = *v22 == 0;
  *(void *)(v9 + 96) = v8;
  *(void *)(v9 + 104) = 32;
  *(void *)(v9 + 128) = v7;
  *(void *)(v9 + 136) = 32;
  if (v6 && v24) {
    *(unsigned char *)(v9 + 81) = *v6;
  }
  SERestoreInfo::IcefallDeliveryObject::addMac(v9, 0, v26);
  SERestoreInfo::IcefallDeliveryObject::addImageVersion(v40, 0, v27);
  SERestoreInfo::IcefallDeliveryObject::addMac(v40, 4, v29);
  SERestoreInfo::IcefallDeliveryObject::addImageVersion(v40, 4, v30);
  SERestoreInfo::IcefallDeliveryObject::addMac(v40, 2, v36);
  SERestoreInfo::IcefallDeliveryObject::addImageVersion(v40, 2, v37);
  if (v32[0])
  {
    SERestoreInfo::IcefallDeliveryObject::addMac(v40, 3, v32);
    SERestoreInfo::IcefallDeliveryObject::addImageVersion(v40, 3, v33);
  }
  SERestoreInfo::IcefallDeliveryObject::addApdu(v40, 6, &v25);
  SERestoreInfo::IcefallDeliveryObject::addApdu(v40, 8, &v39);
  if (v35) {
    SERestoreInfo::IcefallDeliveryObject::addApdu(v40, 7, &v35);
  }
  SERestoreInfo::IcefallDeliveryObject::addApdu(v40, 0, &v28);
  SERestoreInfo::IcefallDeliveryObject::addApdu(v40, 4, &v31);
  SERestoreInfo::IcefallDeliveryObject::addApdu(v40, 2, &v38);
  if (v34[0]) {
    SERestoreInfo::IcefallDeliveryObject::addApdu(v40, 3, v34);
  }
  double result = *(double *)&v40;
  *a2 = v40;
  return result;
}

void sub_217AF9E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 - 40);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **SERestoreInfo::IcefallDeliveryObject::addImageVersion(uint64_t a1, int a2, __int16 **a3)
{
  int v11 = a2;
  if (a3[1] != (__int16 *)2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "Assertion: ");
    int v6 = std::string::append(&v8, "item.length == sizeof(uint16_t)");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v9);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  __int16 v3 = **a3;
  *(void *)&long long v9 = &v11;
  double result = std::__tree<std::__value_type<ImageType_t,unsigned short>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,unsigned short>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,unsigned short>>>::__emplace_unique_key_args<ImageType_t,std::piecewise_construct_t const&,std::tuple<ImageType_t const&>,std::tuple<>>((uint64_t **)(a1 + 56), &v11, (uint64_t)&std::piecewise_construct, (_DWORD **)&v9);
  *((_WORD *)result + 16) = v3;
  return result;
}

void sub_217AF9F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void SERestoreInfo::IcefallDeliveryObject::~IcefallDeliveryObject(SERestoreInfo::IcefallDeliveryObject *this)
{
  *(void *)this = &unk_26C808A80;
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::IcefallDeliveryObject *)((char *)this + 120));
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::IcefallDeliveryObject *)((char *)this + 88));
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,SERestoreInfo::BLOB>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::__map_value_compare<SERestoreInfo::ApduType_t,std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::less<SERestoreInfo::ApduType_t>,true>,std::allocator<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C808A80;
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::IcefallDeliveryObject *)((char *)this + 120));
  SERestoreInfo::BLOB::~BLOB((SERestoreInfo::IcefallDeliveryObject *)((char *)this + 88));
  std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,SERestoreInfo::BLOB>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::__map_value_compare<SERestoreInfo::ApduType_t,std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::less<SERestoreInfo::ApduType_t>,true>,std::allocator<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>>>::destroy((uint64_t)this + 8, *((char **)this + 2));

  operator delete(this);
}

void SERestoreInfo::IcefallDeliveryObject::print(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t **std::__tree<std::__value_type<ImageType_t,unsigned short>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,unsigned short>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,unsigned short>>>::__emplace_unique_key_args<ImageType_t,std::piecewise_construct_t const&,std::tuple<ImageType_t const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 16) = 0;
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,SERestoreInfo::BLOB>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,SERestoreInfo::BLOB>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,SERestoreInfo::BLOB>>>::destroy(a1, a2[1]);
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)(a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::__map_value_compare<SERestoreInfo::ApduType_t,std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::less<SERestoreInfo::ApduType_t>,true>,std::allocator<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::__map_value_compare<SERestoreInfo::ApduType_t,std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::less<SERestoreInfo::ApduType_t>,true>,std::allocator<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::__map_value_compare<SERestoreInfo::ApduType_t,std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::less<SERestoreInfo::ApduType_t>,true>,std::allocator<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>>>::destroy(a1, *((void *)a2 + 1));
    int v4 = (void **)(a2 + 40);
    std::vector<SERestoreInfo::ApduBLOB>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::vector<SERestoreInfo::ApduBLOB>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  size_t v2 = (SERestoreInfo::BLOB **)*a1;
  if (*v2)
  {
    std::vector<SERestoreInfo::ApduBLOB>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    __int16 v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<SERestoreInfo::ApduBLOB>::__base_destruct_at_end[abi:ne180100](uint64_t a1, SERestoreInfo::BLOB *a2)
{
  int v4 = *(SERestoreInfo::BLOB **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = (SERestoreInfo::BLOB *)((char *)v4 - 64);
      SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)((char *)v4 - 32));
      SERestoreInfo::BLOB::~BLOB(v5);
      int v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t **std::__tree<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::__map_value_compare<SERestoreInfo::ApduType_t,std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>,std::less<SERestoreInfo::ApduType_t>,true>,std::allocator<std::__value_type<SERestoreInfo::ApduType_t,std::vector<SERestoreInfo::ApduBLOB>>>>::__emplace_unique_key_args<SERestoreInfo::ApduType_t,std::piecewise_construct_t const&,std::tuple<SERestoreInfo::ApduType_t const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<SERestoreInfo::ApduBLOB>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SERestoreInfo::ApduBLOB>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::ApduBLOB>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SERestoreInfo::ApduBLOB>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  int v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      *(void *)(v8 - 64) = &unk_26C808838;
      long long v9 = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 40) = *(void *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      *(void *)(v8 - 32) = &unk_26C808838;
      long long v10 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v10;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
    *((void *)&v16 + 1) = a7 + v7;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::ApduBLOB>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::ApduBLOB>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::ApduBLOB>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SERestoreInfo::ApduBLOB>,std::reverse_iterator<SERestoreInfo::ApduBLOB*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)(v1 + 32));
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)v1);
    v1 += 64;
  }
}

uint64_t std::__split_buffer<SERestoreInfo::ApduBLOB>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<SERestoreInfo::ApduBLOB>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (SERestoreInfo::BLOB *)(i - 64);
    *(void *)(a1 + 16) = i - 64;
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)(i - 32));
    SERestoreInfo::BLOB::~BLOB(v5);
  }
}

uint64_t **std::__tree<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::__map_value_compare<ImageType_t,std::__value_type<ImageType_t,SERestoreInfo::BLOB>,std::less<ImageType_t>,true>,std::allocator<std::__value_type<ImageType_t,SERestoreInfo::BLOB>>>::__emplace_unique_key_args<ImageType_t,std::piecewise_construct_t const&,std::tuple<ImageType_t const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = (uint64_t)(a1 + 1);
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  long long v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unint64_t v12 = operator new(0x48uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((void *)v12 + 5) = &unk_26C808838;
    *((void *)v12 + 8) = 0;
    char v15 = 1;
    std::__tree<std::__value_type<__CFString const*,unsigned long>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,unsigned long>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,void *>>>>::reset[abi:ne180100](v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ImageType_t,SERestoreInfo::BLOB>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)(v2 + 40));
    }
    operator delete((void *)v2);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN13SERestoreInfo21IcefallDeliveryObjectENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xB0uLL);
  _ZNSt3__120__shared_ptr_emplaceIN13SERestoreInfo21IcefallDeliveryObjectENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
}

void sub_217AFA7D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double _ZNSt3__120__shared_ptr_emplaceIN13SERestoreInfo21IcefallDeliveryObjectENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26C808AD8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 24) = &unk_26C808A80;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 56) = a1 + 64;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 80) = a1 + 88;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = &unk_26C808838;
  *(void *)(a1 + 144) = &unk_26C808838;
  *(void *)(a1 + 168) = 0;
  return result;
}

void std::__shared_ptr_emplace<SERestoreInfo::IcefallDeliveryObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::IcefallDeliveryObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::IcefallDeliveryObject>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t SERestoreInfo::SEFirmwareIter::operator*(uint64_t a1)
{
  return SERestoreInfo::SEFirmwareBase::get(*(SERestoreInfo::SEFirmwareBase **)(a1 + 8), *(_DWORD *)a1);
}

uint64_t SERestoreInfo::SEFirmwareBase::get(SERestoreInfo::SEFirmwareBase *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0
    || (uint64_t v2 = *((void *)this + 2), a2 >= (unint64_t)((*((void *)this + 3) - v2) >> 5)))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v7, "Assertion: ");
    uint64_t v5 = std::string::append(&v7, "index>=0 && index<fObjs.size()");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v8);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  long long v8 = *(_OWORD *)(v2 + 32 * a2 + 8);
  return (*(uint64_t (**)(SERestoreInfo::SEFirmwareBase *, long long *))(*(void *)this + 24))(this, &v8);
}

void sub_217AFAA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t SERestoreInfo::SEFirmwareBase::getFormatVer(SERestoreInfo::SEFirmwareBase *this, const __CFData *a2)
{
  if (!this)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "Assertion: ");
    std::string v7 = std::string::append(&v19, "source");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v7->__r_.__value_.__r.__words[2];
    long long v16 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v16);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unsigned int v18 = -1;
  v15[0] = CFDataGetBytePtr(this);
  v15[1] = CFDataGetLength(this);
  uint64_t v3 = DERParseSequence((uint64_t)v15, 2u, (uint64_t)&SEFirmwareDERSpec::SEFirmwareItemSpec, (unint64_t)&v16, 0x20uLL);
  if (v3)
  {
    uint64_t v9 = v3;
    int v10 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, " Fail to parse fw per SEFirmwareItemSpec");
    int v11 = (void *)SERestoreInfo::SEException::SEException(v10, &v19, v9, @"libDERErrorDomain");
  }
  uint64_t v4 = DERParseInteger((char **)&v16, &v18);
  if (v4)
  {
    uint64_t v12 = v4;
    int v13 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "Cannot parse SEFirmware.version.");
    char v14 = (void *)SERestoreInfo::SEException::SEException(v13, &v19, v12, @"libDERErrorDomain");
  }
  return v18;
}

void sub_217AFAC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

SERestoreInfo::SEFirmwareBase *SERestoreInfo::SEFirmwareBase::SEFirmwareBase(SERestoreInfo::SEFirmwareBase *this, CFDataRef theData)
{
  *(void *)this = &unk_26C808B28;
  *((void *)this + 2) = 0;
  uint64_t v4 = (int64x2_t *)((char *)this + 16);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v46 = 0;
  v44[0] = CFDataGetBytePtr(theData);
  v44[1] = CFDataGetLength(theData);
  uint64_t v5 = DERParseSequence((uint64_t)v44, 2u, (uint64_t)&SEFirmwareDERSpec::SEFirmwareItemSpec, (unint64_t)v47, 0x20uLL);
  if (v5)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "Fail to parse SEFW.");
    long long v30 = (void *)SERestoreInfo::SEException::SEException(exception, v49, v5, @"libDERErrorDomain");
  }
  unsigned int __val = 0;
  uint64_t v6 = DERParseInteger(v47, &__val);
  if (v6)
  {
    unint64_t v31 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "Failed to parse SEFirmware.version.");
    long long v32 = (void *)SERestoreInfo::SEException::SEException(v31, v49, v6, @"libDERErrorDomain");
  }
  if (__val >= 2)
  {
    uint64_t v33 = __cxa_allocate_exception(0x48uLL);
    std::to_string(&v39, __val);
    uint64_t v34 = std::string::insert(&v39, 0, "Unsupported firmware version: ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    *(void *)&v49[16] = *((void *)&v34->__r_.__value_.__l + 2);
    *(_OWORD *)std::string::size_type v49 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    long long v36 = (void *)SERestoreInfo::SEException::SEException(v33, v49, 7, @"SEUpdaterErrorDomain");
  }
  uint64_t v7 = DERDecodeSeqInit((uint64_t)&v48, &v46, v45);
  if (v7)
  {
    uint64_t v37 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "Fail to DERDecodeSeqInit firmwareArray.");
    unint64_t v38 = (void *)SERestoreInfo::SEException::SEException(v37, v49, v7, @"libDERErrorDomain");
  }
  while (!v7)
  {
    uint64_t v7 = DERDecodeSeqNext(v45, &v41);
    if (!v7)
    {
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C808838;
      *(_OWORD *)&v39.__r_.__value_.__r.__words[1] = v42;
      uint64_t v40 = 0;
      unint64_t v8 = *((void *)this + 3);
      unint64_t v9 = *((void *)this + 4);
      if (v8 >= v9)
      {
        uint64_t v12 = (uint64_t)(v8 - v4->i64[0]) >> 5;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59) {
          std::vector<ACFUErrorContainer>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v9 - v4->i64[0];
        if (v14 >> 4 > v13) {
          unint64_t v13 = v14 >> 4;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        long long v51 = (char *)this + 32;
        if (v15) {
          long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SERestoreInfo::BLOB>>((uint64_t)this + 32, v15);
        }
        else {
          long long v16 = 0;
        }
        std::string::size_type v17 = &v16[32 * v12];
        *(void *)std::string::size_type v17 = &unk_26C808838;
        long long v18 = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
        *((void *)v17 + 3) = v40;
        *(_OWORD *)(v17 + 8) = v18;
        uint64_t v19 = *((void *)this + 2);
        unint64_t v20 = *((void *)this + 3);
        if (v20 == v19)
        {
          int64x2_t v24 = vdupq_n_s64(v20);
          int v22 = &v16[32 * v12];
        }
        else
        {
          uint64_t v21 = v17 - 32;
          int v22 = &v16[32 * v12];
          do
          {
            *((void *)v22 - 4) = &unk_26C808838;
            v22 -= 32;
            long long v23 = *(_OWORD *)(v20 - 24);
            *((void *)v22 + 3) = *(void *)(v20 - 8);
            *(_OWORD *)(v22 + 8) = v23;
            v21 -= 32;
            v20 -= 32;
          }
          while (v20 != v19);
          int64x2_t v24 = *v4;
        }
        int v11 = v17 + 32;
        *((void *)this + 2) = v22;
        *((void *)this + 3) = v17 + 32;
        *(int64x2_t *)&v49[8] = v24;
        uint64_t v25 = *((void *)this + 4);
        *((void *)this + 4) = &v16[32 * v15];
        uint64_t v50 = v25;
        *(void *)std::string::size_type v49 = v24.i64[0];
        std::__split_buffer<SERestoreInfo::BLOB>::~__split_buffer((uint64_t)v49);
      }
      else
      {
        *(void *)unint64_t v8 = &unk_26C808838;
        long long v10 = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
        *(void *)(v8 + 24) = v40;
        *(_OWORD *)(v8 + 8) = v10;
        int v11 = (char *)(v8 + 32);
      }
      *((void *)this + 3) = v11;
      SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v39);
    }
  }
  if (v7 != 1)
  {
    CFRange v27 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "Fail to DERDecodeSeqNext firmwareArray.");
    unint64_t v28 = (void *)SERestoreInfo::SEException::SEException(v27, v49, v7, @"libDERErrorDomain");
  }
  *((void *)this + 1) = CFRetain(theData);
  return this;
}

void sub_217AFB188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::vector<SERestoreInfo::BLOB>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void SERestoreInfo::SEFirmwareBase::updateMeasurementDict(SERestoreInfo::SEFirmwareBase *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*((void *)this + 3) - *((void *)this + 2)) >> 5;
  if (!v3) {
    goto LABEL_15;
  }
  char v7 = 0;
  unsigned int v8 = 0;
  do
  {
    SERestoreInfo::SEFirmwareBase::get(this, v8);
    if (!*(void *)a3) {
      goto LABEL_7;
    }
    uint64_t v9 = v16;
    (*(void (**)(void **__return_ptr))(**(void **)a3 + 16))(__p);
    int v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v10)
    {
LABEL_7:
      __p[0] = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v16 + 16))(v16, a2, __p);
      if (__p[0])
      {
        exception = (SERestoreInfo::SEException *)__cxa_allocate_exception(0x48uLL);
        uint64_t v12 = (void *)SERestoreInfo::SEException::SEException(exception, (__CFError *)__p[0]);
      }
      char v7 = 1;
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    ++v8;
  }
  while (v3 != v8);
  if ((v7 & 1) == 0)
  {
LABEL_15:
    unint64_t v13 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Cannot found any matched delivery object");
    uint64_t v14 = (void *)SERestoreInfo::SEException::SEException(v13, __p, 24, @"SEUpdaterErrorDomain");
  }
}

void sub_217AFB408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFMutableDictionaryRef SEUpdaterGetTagsLogSink(SERestoreInfo::SERestoreInfoLog *a1, void (*a2)(void *, const char *), void *a3, __CFError **a4)
{
  unsigned int v8 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(a1);
  SERestoreInfo::SERestoreInfoLog::registerLogSink(v8, a2, a3);

  return SEUpdaterGetTags(a1, a4);
}

CFMutableDictionaryRef SEUpdaterGetTags(SERestoreInfo::SERestoreInfoLog *a1, __CFError **a2)
{
  uint64_t v4 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(a1);
  std::string::basic_string[abi:ne180100]<0>(&v53, "HelsinkiRestore-56.2.7");
  if (v54 >= 0) {
    uint64_t v5 = (const char *)&v53;
  }
  else {
    uint64_t v5 = (const char *)v53;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v4, 2, "SEUpdaterGetTags", "Project version%s: %s", " beta", v5);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  CFDictionaryRef Value = (SERestoreInfo::SERestoreInfoLog *)CFDictionaryGetValue(a1, @"DeviceInfo");
  char v7 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(Value);
  getCFTypeDescription(Value, &v53);
  if (v54 >= 0) {
    unsigned int v8 = (const char *)&v53;
  }
  else {
    unsigned int v8 = (const char *)v53;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v7, 2, "SEUpdaterGetTags", "[in] %s %s", "kSEOptionDeviceInfo", v8);
  if (SHIBYTE(v54) < 0)
  {
    operator delete((void *)v53);
    if (!Value) {
      goto LABEL_27;
    }
  }
  else if (!Value)
  {
    goto LABEL_27;
  }
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr(Value);
    CFIndex Length = CFDataGetLength(Value);
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 2 * Length);
    if (Length >= 1)
    {
      uint64_t v13 = 0;
      unsigned int v14 = 1;
      do
      {
        CFStringAppendFormat(Mutable, 0, @"%02x", BytePtr[v13]);
        uint64_t v13 = v14;
      }
      while (Length > v14++);
    }
    CStringPtr = CFStringGetCStringPtr(Mutable, 0x8000100u);
    if (CStringPtr) {
      std::string::size_type v17 = (char *)CStringPtr;
    }
    else {
      std::string::size_type v17 = "null value";
    }
    long long v18 = (SERestoreInfo::SERestoreInfoLog *)std::string::basic_string[abi:ne180100]<0>(&v53, v17);
    if (Mutable) {
      CFRelease(Mutable);
    }
    uint64_t v19 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v18);
    unint64_t v20 = (const char *)&v53;
    if (v54 < 0) {
      unint64_t v20 = (const char *)v53;
    }
    SERestoreInfo::SERestoreInfoLog::printLog(v19, 2, "SEUpdaterGetTags", "[in] %s 0x%s", "SEManifest", v20);
    if (SHIBYTE(v54) < 0) {
      operator delete((void *)v53);
    }
  }
LABEL_27:
  CFErrorRef v52 = 0;
  CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v21)
  {
    uint64_t v37 = (const UInt8 *)std::string::basic_string[abi:ne180100]<0>(&v50, "Cannot allocate memory for outputDict");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError(v37, 3, 0, @"SEUpdaterErrorDomain");
    CFErrorRef v52 = CFError;
    if (v51 < 0)
    {
      unint64_t v38 = v50;
LABEL_71:
      operator delete(v38);
    }
LABEL_72:
    CFMutableArrayRef v24 = 0;
LABEL_75:
    CFMutableArrayRef v27 = 0;
LABEL_42:
    CFErrorRef v32 = v52;
    if (a2 && v52)
    {
      CFCFErrorRef Error = (__CFError *)CFRetain(v52);
      *a2 = CFError;
      CFErrorRef v32 = v52;
    }
    if (v21 && v32)
    {
      CFRelease(v21);
      CFMutableDictionaryRef v21 = 0;
      CFErrorRef v32 = v52;
    }
    uint64_t v33 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(CFError);
    if (v32)
    {
      getCFTypeDescription(v52, &v53);
      if (v54 >= 0) {
        uint64_t v34 = (const char *)&v53;
      }
      else {
        uint64_t v34 = (const char *)v53;
      }
      SERestoreInfo::SERestoreInfoLog::printLog(v33, 0, "SEUpdaterGetTags", "%s", v34);
    }
    else
    {
      getCFTypeDescription(v21, &v53);
      if (v54 >= 0) {
        long long v35 = (const char *)&v53;
      }
      else {
        long long v35 = (const char *)v53;
      }
      SERestoreInfo::SERestoreInfoLog::printLog(v33, 2, "SEUpdaterGetTags", "[out] %s", v35);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete((void *)v53);
    }
    if (v52)
    {
      CFRelease(v52);
      CFErrorRef v52 = 0;
    }
    if (v27) {
      CFRelease(v27);
    }
    if (v24) {
      CFRelease(v24);
    }
    return v21;
  }
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef v23 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!v23)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Cannot allocate memory for tagsInBI");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)__p, 3, 0, @"SEUpdaterErrorDomain");
    CFErrorRef v52 = CFError;
    if (v49 < 0)
    {
      unint64_t v38 = __p[0];
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  CFMutableArrayRef v24 = v23;
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v46, "options is nullptr");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v46, 2, 0, @"SEUpdaterErrorDomain");
    CFErrorRef v52 = CFError;
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    goto LABEL_75;
  }
  SERestoreInfo::makeSERestoreInfo(a1, &v45);
  if (v52)
  {
    CFMutableArrayRef v27 = 0;
    int v30 = 4;
  }
  else
  {
    if (!v45)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v44, "Assertion: ");
      uint64_t v40 = std::string::append(&v44, "restoreInfo");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      int64_t v54 = v40->__r_.__value_.__r.__words[2];
      long long v53 = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21D4548D0](exception, &v53);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v45 + 16))(&v53);
    uint64_t v25 = v53;
    if (*((void *)&v53 + 1) != (void)v53)
    {
      unint64_t v26 = 0;
      do
      {
        CFArrayAppendValue(v24, *(const void **)(v25 + 8 * v26++));
        uint64_t v25 = v53;
      }
      while (v26 < (uint64_t)(*((void *)&v53 + 1) - v53) >> 3);
    }
    CFDictionaryAddValue(v21, @"BuildIdentityTags", v24);
    CFMutableArrayRef v27 = CFArrayCreateMutable(v22, 0, MEMORY[0x263EFFF70]);
    if (v27)
    {
      ChipID = (SERestoreInfo::SERestoreInfoBase *)SERestoreInfo::SERestoreInfoBase::getChipID(v45);
      TSSResponseTicketTag = SERestoreInfo::SERestoreInfoBase::getTSSResponseTicketTag(ChipID);
      CFArrayAppendValue(v27, TSSResponseTicketTag);
      CFDictionaryAddValue(v21, @"ResponseTags", v27);
      int v30 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "Cannot allocate memory for tagsInTssResponse");
      CFErrorRef v52 = SERestoreInfo::CreateCFError((const UInt8 *)v42, 3, 0, @"SEUpdaterErrorDomain");
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      int v30 = 4;
    }
    if ((void)v53)
    {
      *((void *)&v53 + 1) = v53;
      operator delete((void *)v53);
    }
  }
  CFCFErrorRef Error = v45;
  uint64_t v45 = 0;
  if (CFError) {
    CFCFErrorRef Error = (__CFError *)(*(uint64_t (**)(__CFError *))(*(void *)CFError + 8))(CFError);
  }
  if ((v30 | 4) == 4) {
    goto LABEL_42;
  }
  return v21;
}

void sub_217AFBB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::string v44 = *(void **)(v41 - 96);
  if (v44)
  {
    *(void *)(v41 - 88) = v44;
    operator delete(v44);
  }
  uint64_t v45 = a29;
  a29 = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  if (a2 == 2)
  {
    uint64_t v46 = (SERestoreInfo::SEException *)__cxa_begin_catch(a1);
    *(void *)(v41 - 104) = SERestoreInfo::SEException::CreateCFError(v46);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    char v47 = __cxa_begin_catch(a1);
    uint64_t v48 = (char *)(*(uint64_t (**)(void *))(*(void *)v47 + 16))(v47);
    std::string::basic_string[abi:ne180100]<0>(&a11, v48);
    *(void *)(v41 - 104) = SERestoreInfo::CreateCFError((const UInt8 *)&a11, 31, 0, @"SEUpdaterErrorDomain");
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x217AFB844);
}

void sub_217AFBD08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x217AFBBA4);
}

void getCFTypeDescription(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFErrorGetTypeID()) {
      CFStringRef v5 = CFErrorCopyDescription((CFErrorRef)a1);
    }
    else {
      CFStringRef v5 = CFCopyDescription(a1);
    }
    CFStringRef v6 = v5;
    CStringPtr = CFStringGetCStringPtr(v5, 0x8000100u);
    if (CStringPtr) {
      unsigned int v8 = (char *)CStringPtr;
    }
    else {
      unsigned int v8 = "null description";
    }
    std::string::basic_string[abi:ne180100]<0>(a2, v8);
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "null value");
  }
}

void sub_217AFBDE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *SEUpdaterCreateRequestLogSink(SERestoreInfo::SERestoreInfoLog *a1, void (*a2)(void *, const char *), void *a3, void *a4)
{
  unsigned int v8 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(a1);
  SERestoreInfo::SERestoreInfoLog::registerLogSink(v8, a2, a3);

  return SEUpdaterCreateRequest(a1, a4);
}

void *SEUpdaterCreateRequest(SERestoreInfo::SERestoreInfoLog *a1, void *a2)
{
  CFTypeID v4 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(a1);
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(a1, @"DeviceInfo");
  getCFTypeDescription(Value, &v38);
  if (v39 >= 0) {
    CFStringRef v6 = (const char *)&v38;
  }
  else {
    CFStringRef v6 = (const char *)v38;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v4, 2, "SEUpdaterCreateRequest", "[in] %s %s", "kSEOptionDeviceInfo", v6);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  unsigned int v8 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v7);
  CFTypeID v9 = (void *)CFDictionaryGetValue(a1, @"FirmwareData");
  getCFTypeDescription(v9, &v38);
  if (v39 >= 0) {
    int v10 = (const char *)&v38;
  }
  else {
    int v10 = (const char *)v38;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v8, 2, "SEUpdaterCreateRequest", "[in] %s %s", "kSEOptionFirmwareData", v10);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  uint64_t v12 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v11);
  uint64_t v13 = (void *)CFDictionaryGetValue(a1, @"BuildIdentity");
  getCFTypeDescription(v13, &v38);
  if (v39 >= 0) {
    unsigned int v14 = (const char *)&v38;
  }
  else {
    unsigned int v14 = (const char *)v38;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v12, 2, "SEUpdaterCreateRequest", "[in] %s %s", "kSEOptionBuildIdentity", v14);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"SharedInfo");
  if (v15)
  {
    uint64_t v16 = (SERestoreInfo::SERestoreInfoLog *)CFDictionaryGetValue(v15, @"Rose");
    std::string::size_type v17 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v16);
    getCFTypeDescription(v16, &v38);
    long long v18 = v39 >= 0 ? (const char *)&v38 : (const char *)v38;
    SERestoreInfo::SERestoreInfoLog::printLog(v17, 2, "SEUpdaterCreateRequest", "[in] %s %s", "kSEOptionRoseInfo", v18);
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)v38);
    }
  }
  uint64_t v37 = 0;
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "options is nullptr");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError(v35, 2, 0, @"SEUpdaterErrorDomain");
    uint64_t v37 = CFError;
    if (v36 < 0)
    {
      CFMutableArrayRef v27 = *(void **)v35;
LABEL_54:
      operator delete(v27);
    }
LABEL_55:
    unint64_t v20 = 0;
    goto LABEL_32;
  }
  if (!CFDictionaryContainsKey(a1, @"FirmwareData") && !CFDictionaryContainsKey(a1, @"BuildIdentity"))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "fwData and buildIdentity are nullptr");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)__p, 2, 0, @"SEUpdaterErrorDomain");
    uint64_t v37 = CFError;
    if (v34 < 0)
    {
      CFMutableArrayRef v27 = __p[0];
      goto LABEL_54;
    }
    goto LABEL_55;
  }
  SERestoreInfo::makeSERestoreInfo(a1, &v32);
  if (v37) {
    goto LABEL_29;
  }
  if (!v32)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v31, "Assertion: ");
    uint64_t v29 = std::string::append(&v31, "restoreInfo");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    int64_t v39 = v29->__r_.__value_.__r.__words[2];
    long long v38 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v38);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  RequestDict = (const void *)SERestoreInfo::SERestoreInfoBase::getRequestDict(v32);
  if (!RequestDict) {
LABEL_29:
  }
    unint64_t v20 = 0;
  else {
    unint64_t v20 = (void *)CFRetain(RequestDict);
  }
  CFCFErrorRef Error = v32;
  CFErrorRef v32 = 0;
  if (CFError) {
    CFCFErrorRef Error = (void *)(*(uint64_t (**)(void *))(*(void *)CFError + 8))(CFError);
  }
LABEL_32:
  CFAllocatorRef v22 = v37;
  if (a2 && v37)
  {
    CFCFErrorRef Error = (void *)CFRetain(v37);
    *a2 = CFError;
    CFAllocatorRef v22 = v37;
  }
  CFMutableArrayRef v23 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get((SERestoreInfo::SERestoreInfoLog *)CFError);
  if (v22)
  {
    getCFTypeDescription(v37, &v38);
    if (v39 >= 0) {
      CFMutableArrayRef v24 = (const char *)&v38;
    }
    else {
      CFMutableArrayRef v24 = (const char *)v38;
    }
    SERestoreInfo::SERestoreInfoLog::printLog(v23, 0, "SEUpdaterCreateRequest", "%s", v24);
  }
  else
  {
    getCFTypeDescription(v20, &v38);
    if (v39 >= 0) {
      uint64_t v25 = (const char *)&v38;
    }
    else {
      uint64_t v25 = (const char *)v38;
    }
    SERestoreInfo::SERestoreInfoLog::printLog(v23, 2, "SEUpdaterCreateRequest", "[out] %s", v25);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v20;
}

void sub_217AFC45C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x217AFC31CLL);
}

void *SEUpdaterCopyFirmwareLogSink(SERestoreInfo::SERestoreInfoLog *a1, void (*a2)(void *, const char *), void *a3, CFTypeRef *a4)
{
  unsigned int v8 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(a1);
  SERestoreInfo::SERestoreInfoLog::registerLogSink(v8, a2, a3);

  return SEUpdaterCopyFirmware(a1, a4);
}

void *SEUpdaterCopyFirmware(SERestoreInfo::SERestoreInfoLog *a1, CFTypeRef *a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  CFTypeID v4 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(a1);
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(a1, @"DeviceInfo");
  getCFTypeDescription(Value, &v59);
  if (SHIBYTE(v60) >= 0) {
    CFStringRef v6 = (const char *)&v59;
  }
  else {
    CFStringRef v6 = (const char *)v59;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v4, 2, "SEUpdaterCopyFirmware", "[in] %s %s", "kSEOptionDeviceInfo", v6);
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
  unsigned int v8 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v7);
  CFTypeID v9 = (void *)CFDictionaryGetValue(a1, @"FirmwareData");
  getCFTypeDescription(v9, &v59);
  if (SHIBYTE(v60) >= 0) {
    int v10 = (const char *)&v59;
  }
  else {
    int v10 = (const char *)v59;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v8, 2, "SEUpdaterCopyFirmware", "[in] %s %s", "kSEOptionFirmwareData", v10);
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
  uint64_t v12 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v11);
  uint64_t v13 = (void *)CFDictionaryGetValue(a1, @"BuildIdentity");
  getCFTypeDescription(v13, &v59);
  if (SHIBYTE(v60) >= 0) {
    unsigned int v14 = (const char *)&v59;
  }
  else {
    unsigned int v14 = (const char *)v59;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v12, 2, "SEUpdaterCopyFirmware", "[in] %s %s", "kSEOptionBuildIdentity", v14);
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
  uint64_t v16 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v15);
  std::string::size_type v17 = (void *)CFDictionaryGetValue(a1, @"BundlePath");
  getCFTypeDescription(v17, &v59);
  if (SHIBYTE(v60) >= 0) {
    long long v18 = (const char *)&v59;
  }
  else {
    long long v18 = (const char *)v59;
  }
  SERestoreInfo::SERestoreInfoLog::printLog(v16, 2, "SEUpdaterCopyFirmware", "[in] %s %s", "kSEOptionSourceBundlePath", v18);
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
  uint64_t v57 = 0;
  CFTypeRef v58 = 0;
  CFCFErrorRef Error = 0;
  if (!a1)
  {
    uint64_t v33 = (const UInt8 *)std::string::basic_string[abi:ne180100]<0>(&v54, "options is nullptr");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError(v33, 2, 0, @"SEUpdaterErrorDomain");
    if (v55 < 0) {
      operator delete(v54);
    }
    goto LABEL_41;
  }
  uint64_t v19 = CFDictionaryGetValue(a1, @"FirmwareData");
  if (v19)
  {
    uint64_t v57 = (void *)CFRetain(v19);
    if (v57)
    {
LABEL_41:
      CFMutableArrayRef v27 = CFError;
      if (a2 && CFError)
      {
        *a2 = CFRetain(CFError);
        CFMutableArrayRef v27 = CFError;
      }
      if (v27 && v57)
      {
        CFRelease(v57);
        uint64_t v57 = 0;
        CFMutableArrayRef v27 = CFError;
      }
      BOOL v28 = v27 == 0;
      uint64_t v29 = (SERestoreInfo::SERestoreInfoLog *)SERestoreInfo::SERestoreInfoLog::get(v27);
      if (v28)
      {
        getCFTypeDescription(v57, &v59);
        if (SHIBYTE(v60) >= 0) {
          std::string v31 = (const char *)&v59;
        }
        else {
          std::string v31 = (const char *)v59;
        }
        SERestoreInfo::SERestoreInfoLog::printLog(v29, 2, "SEUpdaterCopyFirmware", "[out] %s", v31);
      }
      else
      {
        getCFTypeDescription(CFError, &v59);
        if (SHIBYTE(v60) >= 0) {
          long long v30 = (const char *)&v59;
        }
        else {
          long long v30 = (const char *)v59;
        }
        SERestoreInfo::SERestoreInfoLog::printLog(v29, 0, "SEUpdaterCopyFirmware", "%s", v30);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete((void *)v59);
      }
      if (v58)
      {
        CFRelease(v58);
        CFTypeRef v58 = 0;
      }
      if (CFError) {
        CFRelease(CFError);
      }
      return v57;
    }
  }
  else
  {
    uint64_t v57 = 0;
  }
  SERestoreInfo::makeSERestoreInfo(a1, &v53);
  if (CFError) {
    goto LABEL_68;
  }
  if (!v53)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    long long v35 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v52, "Assertion: ");
    char v36 = std::string::append(v35, "restoreInfo");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    long long v60 = (__CFString *)v36->__r_.__value_.__r.__words[2];
    long long v59 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v59);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v53 + 24))(&v59);
  uint64_t v20 = *(void *)v59;
  *((void *)&v59 + 1) = v59;
  operator delete((void *)v59);
  uint64_t v21 = 0;
  *(void *)&long long v59 = @"BuildIdentity";
  *((void *)&v59 + 1) = v20;
  long long v60 = @"Info";
  CFDictionaryRef v22 = a1;
  do
  {
    CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(v22, *(const void **)((char *)&v59 + v21));
    if (!v22)
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "Missing dict along the path");
      CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v50, 16, 0, @"SEUpdaterErrorDomain");
      if ((v51 & 0x80000000) == 0) {
        goto LABEL_68;
      }
      CFErrorRef v32 = (void **)v50;
      goto LABEL_67;
    }
    v21 += 8;
  }
  while (v21 != 24);
  if (!CFDictionaryGetValue(v22, @"Path"))
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "Missing string for path key");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v48, 16, 0, @"SEUpdaterErrorDomain");
    if ((v49 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    CFErrorRef v32 = (void **)v48;
LABEL_67:
    operator delete(*v32);
    goto LABEL_68;
  }
  if (!CFDictionaryGetValue(a1, @"BundlePath"))
  {
    std::string::basic_string[abi:ne180100]<0>(v46, "Missing kSEOptionSourceBundlePath");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v46, 16, 0, @"SEUpdaterErrorDomain");
    if ((v47 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    CFErrorRef v32 = (void **)v46;
    goto LABEL_67;
  }
  int v23 = AMSupportPlatformCopyURLWithAppendedComponent();
  if (v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "Fail to run AMSupportPlatformCopyURLWithAppendedComponent");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v44, v23, 0, @"libAmSupportErrorDomain");
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    CFErrorRef v32 = (void **)v44;
    goto LABEL_67;
  }
  if (!v58)
  {
    std::string::basic_string[abi:ne180100]<0>(v42, "Fail to do AMSupportPlatformCopyURLWithAppendedComponent");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v42, 3, 0, @"SEUpdaterErrorDomain");
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    CFErrorRef v32 = (void **)v42;
    goto LABEL_67;
  }
  int DataFromFileURL = AMSupportCreateDataFromFileURL();
  if (DataFromFileURL)
  {
    std::string::basic_string[abi:ne180100]<0>(v40, "Fail to run AMSupportCreateDataFromFileURL");
    CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v40, DataFromFileURL, 0, @"libAmSupportErrorDomain");
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    CFErrorRef v32 = (void **)v40;
    goto LABEL_67;
  }
  if (v57)
  {
    int v25 = 0;
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "fileData is nullptr");
  CFCFErrorRef Error = SERestoreInfo::CreateCFError((const UInt8 *)v38, 3, 0, @"SEUpdaterErrorDomain");
  if (v39 < 0)
  {
    CFErrorRef v32 = (void **)v38;
    goto LABEL_67;
  }
LABEL_68:
  int v25 = 4;
LABEL_38:
  double result = v53;
  long long v53 = 0;
  if (result) {
    double result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
  }
  if ((v25 | 4) == 4) {
    goto LABEL_41;
  }
  return result;
}

void sub_217AFCBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  uint64_t v61 = *(void *)(v58 - 152);
  *(void *)(v58 - 152) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  if (a2 == 2)
  {
    long long v62 = (SERestoreInfo::SEException *)__cxa_begin_catch(exception_object);
    *(void *)(v58 - 120) = SERestoreInfo::SEException::CreateCFError(v62);
    __cxa_end_catch();
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    unint64_t v63 = __cxa_begin_catch(exception_object);
    uint64_t v64 = (char *)(*(uint64_t (**)(void *))(*(void *)v63 + 16))(v63);
    std::string::basic_string[abi:ne180100]<0>(&a11, v64);
    *(void *)(v58 - 120) = SERestoreInfo::CreateCFError((const UInt8 *)&a11, 31, 0, @"SEUpdaterErrorDomain");
    if (a16 < 0) {
      operator delete(a11);
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x217AFC830);
}

void *SERestoreInfo::SERestoreInfoBase::SERestoreInfoBase(void *a1, CFTypeRef cf, void *a3)
{
  *a1 = &unk_26C808B68;
  a1[2] = *a3;
  uint64_t v4 = a3[1];
  a1[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[1] = CFRetain(cf);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  a1[4] = Mutable;
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Cannot allocate request dict");
    unsigned int v8 = (void *)SERestoreInfo::SEException::SEException(exception, v9, 3, @"SEUpdaterErrorDomain");
  }
  return a1;
}

void sub_217AFCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string::size_type v17 = *(std::__shared_weak_count **)(v15 + 24);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void SERestoreInfo::SERestoreInfoBase::~SERestoreInfoBase(SERestoreInfo::SERestoreInfoBase *this)
{
  *(void *)this = &unk_26C808B68;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 4);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 4) = 0;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t SERestoreInfo::SERestoreInfoBase::getChipID(SERestoreInfo::SERestoreInfoBase *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v7, "Assertion: ");
    CFStringRef v5 = std::string::append(&v7, "fDeviceInfo");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v8);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 32);

  return v2();
}

void sub_217AFD0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

__CFString *SERestoreInfo::SERestoreInfoBase::getTSSResponseTicketTag(SERestoreInfo::SERestoreInfoBase *this)
{
  uint64_t v1 = kSETagResponseTicket;
  if ((int)this <= 199)
  {
    if (this != 100 && this != 115) {
      goto LABEL_8;
    }
  }
  else if (this != 200 && this != 210 && this != 131601)
  {
LABEL_8:
    uint64_t v1 = kSETagResponseTicketEC384;
  }
  return *v1;
}

uint64_t SERestoreInfo::SERestoreInfoBase::getRequestDict(SERestoreInfo::SERestoreInfoBase *this)
{
  uint64_t v2 = (__CFDictionary *)*((void *)this + 4);
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
  uint64_t v4 = kSETagRequestTicket;
  if (v3 <= 199)
  {
    if (v3 != 100 && v3 != 115) {
LABEL_10:
    }
      uint64_t v4 = kSETagRequestTicketEC384;
  }
  else if (v3 != 200 && v3 != 210 && v3 != 131601)
  {
    goto LABEL_10;
  }
  CFDictionaryAddValue(v2, *v4, (const void *)*MEMORY[0x263EFFB40]);
  (*(void (**)(void, void, uint64_t))(**((void **)this + 2) + 24))(*((void *)this + 2), *((void *)this + 4), 1);
  int v6 = CFDictionaryContainsKey(*((CFDictionaryRef *)this + 1), @"FirmwareData");
  CFDictionaryRef v7 = (const __CFDictionary *)*((void *)this + 1);
  if (v6)
  {
    CFDictionaryRef Value = (SERestoreInfo *)CFDictionaryGetValue(v7, @"FirmwareData");
    SERestoreInfo::makeSEFirmware(Value, v9, &context);
    int v10 = context;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
    uint64_t v11 = *((void *)this + 4);
    uint64_t v34 = *((void *)this + 2);
    long long v35 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(SERestoreInfo::SEFirmwareBase *, uint64_t, uint64_t *))(*(void *)v10 + 16))(v10, v11, &v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    uint64_t v13 = context;
    uint64_t context = 0;
    if (v13) {
      (*(void (**)(SERestoreInfo::SEFirmwareBase *))(*(void *)v13 + 8))(v13);
    }
  }
  else
  {
    if (!CFDictionaryContainsKey(v7, @"BuildIdentity"))
    {
      exception = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&context, "missing build identity");
      std::string v31 = (void *)SERestoreInfo::SEException::SEException(exception, &context, 2, @"SEUpdaterErrorDomain");
    }
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 1), @"BuildIdentity");
    uint64_t context = (SERestoreInfo::SEFirmwareBase *)*((void *)this + 4);
    (*(void (**)(void **__return_ptr, SERestoreInfo::SERestoreInfoBase *))(*(void *)this + 24))(__p, this);
    __p[3] = (void *)(*(uint64_t (**)(SERestoreInfo::SERestoreInfoBase *))(*(void *)this + 32))(this);
    CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)SERestoreInfo::_WalkThroughDict, &context);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  uint64_t v15 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 1), @"SEAC");
  if (v15) {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 4), @"SEAC", v15);
  }
  uint64_t v16 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 1), @"SERS");
  if (v16) {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 4), @"SERS", v16);
  }
  std::string::size_type v17 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 1), @"SESA");
  if (v17) {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 4), @"SESA", v17);
  }
  CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 1), @"SharedInfo");
  if (v18)
  {
    CFDictionaryRef v19 = v18;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v19))
    {
      CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v19, @"Rose");
      if (v21)
      {
        CFDictionaryRef v22 = v21;
        int v23 = CFDictionaryGetValue(v21, @"SE,RapRTKitOS");
        if (v23)
        {
          CFMutableArrayRef v24 = v23;
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFDictionaryAddValue(Mutable, @"Digest", v24);
          CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 4), @"SE,RapRTKitOS", Mutable);
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
        unint64_t v26 = CFDictionaryGetValue(v22, @"SE,RapSwBinDsp");
        if (v26)
        {
          CFMutableArrayRef v27 = v26;
          BOOL v28 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFDictionaryAddValue(v28, @"Digest", v27);
          CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 4), @"SE,RapSwBinDsp", v28);
          if (v28) {
            CFRelease(v28);
          }
        }
      }
    }
  }
  return *((void *)this + 4);
}

void sub_217AFD620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SERestoreInfo::_WalkThroughDict(const __CFString *a1, const void *a2, uint64_t a3)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v18, "Assertion: ");
    uint64_t v16 = std::string::append(&v18, "p");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, __p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v20 = 0;
      std::vector<__CFString const*>::__init_with_size[abi:ne180100]<__CFString const**,__CFString const**>(__p, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
      long long v8 = (CFStringRef *)__p[0];
      if (__p[1] == __p[0])
      {
        CFMutableDictionaryRef Mutable = 0;
        CFTypeRef v13 = 0;
        if (!__p[0]) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      unint64_t v9 = 0;
      do
      {
        CFComparisonResult v10 = CFStringCompare(v8[v9++], a1, 0);
        long long v8 = (CFStringRef *)__p[0];
      }
      while (v9 < ((char *)__p[1] - (char *)__p[0]) >> 3 && v10 != kCFCompareEqualTo);
      if (v10)
      {
        CFMutableDictionaryRef Mutable = 0;
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (Mutable)
        {
          CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, *(const void **)(a3 + 32));
          if (Value)
          {
            CFTypeRef v13 = CFRetain(Value);
            if (v13)
            {
              CFDictionaryAddValue(Mutable, *(const void **)(a3 + 32), v13);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, a1, Mutable);
            }
LABEL_20:
            long long v8 = (CFStringRef *)__p[0];
            if (!__p[0])
            {
LABEL_22:
              if (v13) {
                CFRelease(v13);
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
              return;
            }
LABEL_21:
            __p[1] = v8;
            operator delete(v8);
            goto LABEL_22;
          }
        }
      }
      CFTypeRef v13 = 0;
      goto LABEL_20;
    }
  }
}

void sub_217AFD864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SERestoreInfo::SERestoreInfoBase::getRequestDict(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

SERestoreInfo::SEFirmwareBase *SERestoreInfo::makeSEFirmware@<X0>(SERestoreInfo *this@<X0>, const __CFData *a2@<X1>, SERestoreInfo::SEFirmwareBase **a3@<X8>)
{
  unsigned int FormatVer = SERestoreInfo::SEFirmwareBase::getFormatVer(this, a2);
  if (FormatVer == 1)
  {
    CFTypeID v7 = (SERestoreInfo::SEFirmwareBase *)operator new(0x28uLL);
    uint64_t result = SERestoreInfo::SEFirmwareBase::SEFirmwareBase(v7, this);
    unint64_t v9 = &unk_26C808788;
  }
  else
  {
    unsigned int v6 = FormatVer;
    if (FormatVer)
    {
      exception = __cxa_allocate_exception(0x48uLL);
      std::to_string(&v14, v6);
      uint64_t v11 = std::string::insert(&v14, 0, "Unsupported firmware version: ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
      long long v15 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      CFTypeRef v13 = (void *)SERestoreInfo::SEException::SEException(exception, &v15, 15, @"SEUpdaterErrorDomain");
    }
    CFTypeID v7 = (SERestoreInfo::SEFirmwareBase *)operator new(0x28uLL);
    uint64_t result = SERestoreInfo::SEFirmwareBase::SEFirmwareBase(v7, this);
    unint64_t v9 = &unk_26C808A38;
  }
  *(void *)CFTypeID v7 = v9;
  *a3 = v7;
  return result;
}

void sub_217AFDA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void SERestoreInfo::makeSERestoreInfo(SERestoreInfo *this@<X0>, void *a2@<X8>)
{
  std::string value = 0;
  if (!this)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v37, "Assertion: ");
    CFDictionaryRef v22 = std::string::append(&v37, "options");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v22->__r_.__value_.__r.__words[2];
    long long v35 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v35);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *a2 = 0;
  if (CFDictionaryGetValueIfPresent(this, @"DeviceInfo", (const void **)&value)) {
    BOOL v6 = value == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    CFMutableArrayRef v27 = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v35, "Cannot find key kSEOptionDeviceInfo in options");
    BOOL v28 = (void *)SERestoreInfo::SEException::SEException(v27, &v35, 2, @"SEUpdaterErrorDomain");
  }
  CFTypeID v7 = CFGetTypeID(value);
  if (v7 == CFDataGetTypeID())
  {
    SERestoreInfo::BLOB::BLOB((SERestoreInfo::BLOB *)&v35, value);
    SERestoreInfo::makeDeviceInfo<SERestoreInfo::BLOB>((const SERestoreInfo::BLOB *)&v35, &v37);
    std::string::size_type size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
    std::string::size_type v9 = v37.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    SERestoreInfo::BLOB::~BLOB((SERestoreInfo::BLOB *)&v35);
  }
  else
  {
    CFTypeID v10 = CFGetTypeID(value);
    if (v10 != CFDictionaryGetTypeID())
    {
      uint64_t v29 = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v35, "kSEOptionDeviceInfo is neither CFData or CFDictionary");
      long long v30 = (void *)SERestoreInfo::SEException::SEException(v29, &v35, 16, @"SEUpdaterErrorDomain");
    }
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    SERestoreInfo::makeDeviceInfo<__CFDictionary const*>((const __CFDictionary *const *)&v37, &v35);
    std::string::size_type size = (std::__shared_weak_count *)*((void *)&v35 + 1);
    std::string::size_type v9 = v35;
  }
  if (!v9)
  {
    CFMutableArrayRef v24 = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v37, "Assertion: ");
    int v25 = std::string::append(&v37, "deviceInfo");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v25->__r_.__value_.__r.__words[2];
    long long v35 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](v24, &v35);
    __cxa_throw(v24, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v11 = (*(uint64_t (**)(std::string::size_type))(*(void *)v9 + 32))(v9);
  if (v11 > 199)
  {
    if (v11 != 200)
    {
      if (v11 == 131601)
      {
        CFDictionaryRef v19 = operator new(0x28uLL);
        std::string::size_type v20 = v19;
        std::string::size_type v31 = v9;
        CFErrorRef v32 = size;
        if (size) {
          atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SERestoreInfo::IcefallRestoreInfo::IcefallRestoreInfo(v19, this, (uint64_t *)&v31);
        *a2 = v20;
        long long v15 = v32;
        if (v32) {
          goto LABEL_19;
        }
        goto LABEL_20;
      }
      if (v11 != 210) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    BOOL v12 = (v11 - 54) > 0x3D || ((1 << (v11 - 54)) & 0x2000400000000003) == 0;
    if (v12 && v11 != 44)
    {
LABEL_28:
      std::string::size_type v16 = __cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v37, "Assertion: ");
      long long v17 = std::string::append(&v37, "false");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v17->__r_.__value_.__r.__words[2];
      long long v35 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21D4548D0](v16, &v35);
      __cxa_throw(v16, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  CFTypeRef v13 = operator new(0x28uLL);
  std::string v14 = v13;
  std::string::size_type v33 = v9;
  uint64_t v34 = size;
  if (size) {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SERestoreInfo::P73BaseRestoreInfo::P73BaseRestoreInfo(v13, this, (uint64_t *)&v33);
  *a2 = v14;
  long long v15 = v34;
  if (v34) {
LABEL_19:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_20:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
}

void sub_217AFDED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      *int v25 = 0;
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

double SERestoreInfo::makeDeviceInfo<SERestoreInfo::BLOB>@<D0>(const SERestoreInfo::BLOB *a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<SERestoreInfo::IcefallDeviceInfo,std::allocator<SERestoreInfo::IcefallDeviceInfo>,SERestoreInfo::BLOB const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_217AFE080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    std::allocate_shared[abi:ne180100]<SERestoreInfo::P73DeviceInfo,std::allocator<SERestoreInfo::P73DeviceInfo>,SERestoreInfo::BLOB const&,void>(v22, &__p);
    JUMPOUT(0x217AFE064);
  }
  _Unwind_Resume(exception_object);
}

double SERestoreInfo::makeDeviceInfo<__CFDictionary const*>@<D0>(const __CFDictionary *const *a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<SERestoreInfo::IcefallDeviceInfo,std::allocator<SERestoreInfo::IcefallDeviceInfo>,__CFDictionary const* const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_217AFE2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    std::allocate_shared[abi:ne180100]<SERestoreInfo::P73DeviceInfo,std::allocator<SERestoreInfo::P73DeviceInfo>,__CFDictionary const* const&,void>(v22, &__p);
    JUMPOUT(0x217AFE284);
  }
  _Unwind_Resume(exception_object);
}

SERestoreInfo::BLOB *SERestoreInfo::BLOB::BLOB(SERestoreInfo::BLOB *this, CFTypeRef cf)
{
  *(void *)this = &unk_26C808838;
  CFDataRef v3 = (const __CFData *)CFRetain(cf);
  *((void *)this + 3) = v3;
  *((void *)this + 1) = CFDataGetBytePtr(v3);
  *((void *)this + 2) = CFDataGetLength(*((CFDataRef *)this + 3));
  return this;
}

void *SERestoreInfo::P73BaseRestoreInfo::P73BaseRestoreInfo(void *a1, const void *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  CFTypeID v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SERestoreInfo::SERestoreInfoBase::SERestoreInfoBase(a1, a2, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *a1 = &unk_26C8088B8;
  return a1;
}

void sub_217AFE54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *SERestoreInfo::IcefallRestoreInfo::IcefallRestoreInfo(void *a1, const void *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  CFTypeID v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SERestoreInfo::SERestoreInfoBase::SERestoreInfoBase(a1, a2, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *a1 = &unk_26C808908;
  return a1;
}

void sub_217AFE5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::IcefallDeviceInfo,std::allocator<SERestoreInfo::IcefallDeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xB8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::IcefallDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::IcefallDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFE63C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::IcefallDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::IcefallDeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808BB0;
  SERestoreInfo::IcefallDeviceInfo::IcefallDeviceInfo((SERestoreInfo::IcefallDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFE698(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::IcefallDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::IcefallDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::IcefallDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::P73DeviceInfo,std::allocator<SERestoreInfo::P73DeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::P73DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::P73DeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFE780(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::P73DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::P73DeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808C00;
  SERestoreInfo::P73DeviceInfo::P73DeviceInfo((SERestoreInfo::P73DeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFE7DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::P73DeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::P73DeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808C00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::P73DeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN100VDeviceInfo,std::allocator<SERestoreInfo::SN100VDeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN100VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN100VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFE8C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN100VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN100VDeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808C50;
  SERestoreInfo::SN100VDeviceInfo::SN100VDeviceInfo((SERestoreInfo::SN100VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFE920(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN100VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN100VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808C50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::SN100VDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN200VDeviceInfo,std::allocator<SERestoreInfo::SN200VDeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN200VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN200VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFEA08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN200VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN200VDeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808CA0;
  SERestoreInfo::SN200VDeviceInfo::SN200VDeviceInfo((SERestoreInfo::SN200VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFEA64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN200VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN200VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::SN200VDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN210VDeviceInfo,std::allocator<SERestoreInfo::SN210VDeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN210VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN210VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFEB4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN210VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN210VDeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808CF0;
  SERestoreInfo::SN210VDeviceInfo::SN210VDeviceInfo((SERestoreInfo::SN210VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFEBA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN210VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN210VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::SN210VDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN300VDeviceInfo,std::allocator<SERestoreInfo::SN300VDeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN300VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN300VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFEC90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN300VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN300VDeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808D40;
  SERestoreInfo::SN300VDeviceInfo::SN300VDeviceInfo((SERestoreInfo::SN300VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFECEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN300VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN300VDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808D40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::SN300VDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SE310SDeviceInfo,std::allocator<SERestoreInfo::SE310SDeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SE310SDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SE310SDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFEDD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SE310SDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SE310SDeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808D90;
  SERestoreInfo::SE310SDeviceInfo::SE310SDeviceInfo((SERestoreInfo::SE310SDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFEE30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::SE310SDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::SE310SDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::SE310SDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN300V2DeviceInfo,std::allocator<SERestoreInfo::SN300V2DeviceInfo>,SERestoreInfo::BLOB const&,void>@<X0>(const SERestoreInfo::BLOB *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN300V2DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN300V2DeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFEF18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN300V2DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<SERestoreInfo::BLOB const&,std::allocator<SERestoreInfo::SN300V2DeviceInfo>,0>(void *a1, const SERestoreInfo::BLOB *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808DE0;
  SERestoreInfo::SN300V2DeviceInfo::SN300V2DeviceInfo((SERestoreInfo::SN300V2DeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFEF74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN300V2DeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SERestoreInfo::SN300V2DeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C808DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SERestoreInfo::SN300V2DeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::IcefallDeviceInfo,std::allocator<SERestoreInfo::IcefallDeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xB8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::IcefallDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::IcefallDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF05C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::IcefallDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::IcefallDeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808BB0;
  SERestoreInfo::IcefallDeviceInfo::IcefallDeviceInfo((SERestoreInfo::IcefallDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF0B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::P73DeviceInfo,std::allocator<SERestoreInfo::P73DeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::P73DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::P73DeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF114(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::P73DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::P73DeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808C00;
  SERestoreInfo::P73DeviceInfo::P73DeviceInfo((SERestoreInfo::P73DeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF170(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN100VDeviceInfo,std::allocator<SERestoreInfo::SN100VDeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN100VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN100VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF1CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN100VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN100VDeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808C50;
  SERestoreInfo::SN100VDeviceInfo::SN100VDeviceInfo((SERestoreInfo::SN100VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF228(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN200VDeviceInfo,std::allocator<SERestoreInfo::SN200VDeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN200VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN200VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF284(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN200VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN200VDeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808CA0;
  SERestoreInfo::SN200VDeviceInfo::SN200VDeviceInfo((SERestoreInfo::SN200VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF2E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN210VDeviceInfo,std::allocator<SERestoreInfo::SN210VDeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN210VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN210VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF33C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN210VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN210VDeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808CF0;
  SERestoreInfo::SN210VDeviceInfo::SN210VDeviceInfo((SERestoreInfo::SN210VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF398(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN300VDeviceInfo,std::allocator<SERestoreInfo::SN300VDeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN300VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN300VDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF3F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN300VDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN300VDeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808D40;
  SERestoreInfo::SN300VDeviceInfo::SN300VDeviceInfo((SERestoreInfo::SN300VDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF450(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SE310SDeviceInfo,std::allocator<SERestoreInfo::SE310SDeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SE310SDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SE310SDeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF4AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SE310SDeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SE310SDeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808D90;
  SERestoreInfo::SE310SDeviceInfo::SE310SDeviceInfo((SERestoreInfo::SE310SDeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF508(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SERestoreInfo::SN300V2DeviceInfo,std::allocator<SERestoreInfo::SN300V2DeviceInfo>,__CFDictionary const* const&,void>@<X0>(const __CFDictionary *const *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<SERestoreInfo::SN300V2DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN300V2DeviceInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217AFF564(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SERestoreInfo::SN300V2DeviceInfo>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const* const&,std::allocator<SERestoreInfo::SN300V2DeviceInfo>,0>(void *a1, const __CFDictionary *const *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C808DE0;
  SERestoreInfo::SN300V2DeviceInfo::SN300V2DeviceInfo((SERestoreInfo::SN300V2DeviceInfo *)(a1 + 3), a2);
  return a1;
}

void sub_217AFF5C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

CFErrorRef SERestoreInfo::CreateCFError(const UInt8 *a1, int a2, const void *a3, const __CFString *a4)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Assertion: ");
    long long v18 = std::string::append(&v23, "userInfo");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18->__r_.__value_.__r.__words[2];
    long long v24 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v24);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFTypeID v10 = Mutable;
  if ((char)a1[23] < 0)
  {
    BOOL v12 = a1;
    a1 = *(const UInt8 **)a1;
    CFIndex v11 = *((void *)v12 + 1);
  }
  else
  {
    CFIndex v11 = a1[23];
  }
  CFStringRef v13 = CFStringCreateWithBytes(v8, a1, v11, 0x8000100u, 0);
  if (!v13)
  {
    std::string::size_type v20 = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Assertion: ");
    CFDictionaryRef v21 = std::string::append(&v23, "description");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
    long long v24 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](v20, &v24);
    __cxa_throw(v20, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFStringRef v14 = v13;
  CFDictionaryAddValue(v10, (const void *)*MEMORY[0x263EFFC70], v13);
  CFRelease(v14);
  if (a3) {
    CFDictionaryAddValue(v10, (const void *)*MEMORY[0x263EFFC88], a3);
  }
  CFErrorRef v15 = CFErrorCreate(v8, a4, a2, v10);
  CFRelease(v10);
  return v15;
}

void sub_217AFF7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SERestoreInfo::getValueFromCFDict(SERestoreInfo *this, const __CFDictionary *a2, const __CFString *a3, BOOL *a4, void *a5)
{
  if (!this || !a2 || !a4 || (unsigned int v6 = a5) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&value, "Assertion: ");
    CFErrorRef v15 = std::string::append(&value, "dict && key && out && outLen");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v15->__r_.__value_.__r.__words[2];
    long long v20 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v20);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  value.__r_.__value_.__r.__words[0] = 0;
  uint64_t result = CFDictionaryGetValueIfPresent(this, a2, (const void **)&value.__r_.__value_.__l.__data_);
  if (result)
  {
    uint64_t result = value.__r_.__value_.__r.__words[0];
    if (value.__r_.__value_.__r.__words[0])
    {
      uint64_t result = CFGetTypeID(value.__r_.__value_.__l.__data_);
      if ((const __CFString *)result == a3)
      {
        CFStringRef TypeID = (const __CFString *)CFNumberGetTypeID();
        if (v6 >= 4 && TypeID == a3)
        {
          uint64_t result = CFNumberGetValue((CFNumberRef)value.__r_.__value_.__l.__data_, kCFNumberSInt32Type, a4);
          if (!result)
          {
            CFTypeID v10 = __cxa_allocate_exception(0x48uLL);
            std::string::basic_string[abi:ne180100]<0>(&v20, "Cannot read CFNumber ");
            CFIndex v11 = (void *)SERestoreInfo::SEException::SEException(v10, &v20, 2, @"SEUpdaterErrorDomain");
          }
        }
        else if ((const __CFString *)CFBooleanGetTypeID() == a3)
        {
          uint64_t result = CFBooleanGetValue((CFBooleanRef)value.__r_.__value_.__l.__data_);
          *a4 = result != 0;
        }
        else
        {
          if ((const __CFString *)CFDataGetTypeID() != a3)
          {
            long long v17 = __cxa_allocate_exception(0x48uLL);
            std::string::basic_string[abi:ne180100]<0>(&v20, "missing key ");
            long long v18 = (void *)SERestoreInfo::SEException::SEException(v17, &v20, 2, @"SEUpdaterErrorDomain");
          }
          uint64_t v12 = v6;
          BytePtr = (char *)CFDataGetBytePtr((CFDataRef)value.__r_.__value_.__l.__data_);
          uint64_t result = CFDataGetLength((CFDataRef)value.__r_.__value_.__l.__data_);
          if (result <= v12) {
            return (uint64_t)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, BytePtr, &BytePtr[result], result);
          }
        }
      }
    }
  }
  return result;
}

void sub_217AFFA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SERestoreInfo::SERestoreInfoLog::get(SERestoreInfo::SERestoreInfoLog *this)
{
  if (SERestoreInfo::SERestoreInfoLog::get(void)::onceToken != -1) {
    dispatch_once(&SERestoreInfo::SERestoreInfoLog::get(void)::onceToken, &__block_literal_global_2);
  }
  return SERestoreInfo::SERestoreInfoLog::instance;
}

double ___ZN13SERestoreInfo16SERestoreInfoLog3getEv_block_invoke()
{
  uint64_t v0 = operator new(0x58uLL);
  *uint64_t v0 = SERestoreInfo::SERestoreInfoLog::printToOsLog;
  v0[1] = 0;
  *((_DWORD *)v0 + 4) = 2;
  v0[3] = 850045863;
  double result = 0.0;
  *((_OWORD *)v0 + 2) = 0u;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = 0u;
  v0[10] = 0;
  SERestoreInfo::SERestoreInfoLog::instance = (uint64_t)v0;
  return result;
}

void SERestoreInfo::SERestoreInfoLog::registerLogSink(SERestoreInfo::SERestoreInfoLog *this, void (*a2)(void *, const char *), void *a3)
{
  unsigned int v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *(void *)this = a2;
  *((void *)this + 1) = a3;

  std::mutex::unlock(v6);
}

void SERestoreInfo::SERestoreInfoLog::printToOsLog(SERestoreInfo::SERestoreInfoLog *this, char *a2, const char *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  unint64_t v3 = 0;
  uint64_t v4 = MEMORY[0x263EF8438];
  while ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v3 >= HIBYTE(__str.__r_.__value_.__r.__words[2])) {
      return;
    }
LABEL_6:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      std::string::basic_string(&v6, &__str, v3, 0x3E8uLL, (std::allocator<char> *)&v8);
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFStringRef v5 = &v6;
      }
      else {
        CFStringRef v5 = (std::string *)v6.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      CFTypeID v10 = v5;
      _os_log_impl(&dword_217A74000, v4, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
    }
    v3 += 1000;
  }
  if (v3 < __str.__r_.__value_.__l.__size_) {
    goto LABEL_6;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_217AFFD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

char *SERestoreInfo::SERestoreInfoLog::FormatMsg(SERestoreInfo::SERestoreInfoLog *this, const char *a2, ...)
{
  va_start(va, a2);
  CFStringRef v5 = 0;
  int v2 = vasprintf(&v5, a2, va);
  if (v5) {
    BOOL v3 = v2 <= 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  else {
    return v5;
  }
}

char *SERestoreInfo::SERestoreInfoLog::createVerboseLogString(SERestoreInfo::SERestoreInfoLog *this, unsigned int a2, const char *a3, const char *a4)
{
  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "Assertion: ");
    CFTypeID v10 = std::string::append(&v12, "level >= 0 && level < _LOG_LEVEL_MAX && \"level is not good\"");
    timeval v11 = *(timeval *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    timeval v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21D4548D0](exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  v13.tv_seCC_SHA256_CTX c = 0;
  *(void *)&v13.tv_useCC_SHA256_CTX c = 0;
  CFTypeID v7 = (SERestoreInfo::SERestoreInfoLog *)gettimeofday(&v13, 0);
  return SERestoreInfo::SERestoreInfoLog::FormatMsg(v7, "[%3.3ld.%1.1d] [%s] %s: %s", v13.tv_sec, v13.tv_usec / 1000, SERestoreInfo::logLevelNames[a2], a3, a4);
}

void sub_217AFFE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v26 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void SERestoreInfo::SERestoreInfoLog::printLogv(SERestoreInfo::SERestoreInfoLog *this, unsigned int a2, const char *a3, const char *a4, va_list a5)
{
  std::string v12 = 0;
  char v8 = (SERestoreInfo::SERestoreInfoLog *)vasprintf(&v12, a4, a5);
  std::string::size_type v9 = v12;
  if ((int)v8 >= 1 && v12 != 0)
  {
    VerboseLogString = SERestoreInfo::SERestoreInfoLog::createVerboseLogString(v8, a2, a3, v12);
    free(v9);
    if (VerboseLogString)
    {
      std::mutex::lock((std::mutex *)((char *)this + 24));
      (*(void (**)(void, char *))this)(*((void *)this + 1), VerboseLogString);
      std::mutex::unlock((std::mutex *)((char *)this + 24));
      free(VerboseLogString);
    }
  }
}

void SERestoreInfo::SERestoreInfoLog::printLog(SERestoreInfo::SERestoreInfoLog *this, signed int a2, const char *a3, const char *a4, ...)
{
  va_start(va, a4);
  if (*((_DWORD *)this + 4) >= a2) {
    SERestoreInfo::SERestoreInfoLog::printLogv(this, a2, a3, a4, va);
  }
}

SERestoreInfo::SN100VDeviceInfo *SERestoreInfo::SN100VDeviceInfo::SN100VDeviceInfo(SERestoreInfo::SN100VDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  BOOL v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)BOOL v3 = &unk_26C808E50;
  if (*((_DWORD *)v3 + 14) != 100)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217B0003C(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

SERestoreInfo::SN100VDeviceInfo *SERestoreInfo::SN100VDeviceInfo::SN100VDeviceInfo(SERestoreInfo::SN100VDeviceInfo *this, SERestoreInfo **a2)
{
  BOOL v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)BOOL v3 = &unk_26C808E50;
  if (*((_DWORD *)v3 + 14) != 100)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217B000F0(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

SERestoreInfo::SN200VDeviceInfo *SERestoreInfo::SN200VDeviceInfo::SN200VDeviceInfo(SERestoreInfo::SN200VDeviceInfo *this, const SERestoreInfo::BLOB *a2)
{
  BOOL v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)BOOL v3 = &unk_26C808EA0;
  if (*((_DWORD *)v3 + 14) != 200)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217B001A4(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

SERestoreInfo::SN200VDeviceInfo *SERestoreInfo::SN200VDeviceInfo::SN200VDeviceInfo(SERestoreInfo::SN200VDeviceInfo *this, SERestoreInfo **a2)
{
  BOOL v3 = SERestoreInfo::P73BaseDeviceInfo::P73BaseDeviceInfo(this, a2);
  *(void *)BOOL v3 = &unk_26C808EA0;
  if (*((_DWORD *)v3 + 14) != 200)
  {
    exception = (SERestoreInfo::SEWrongDeviceInfo *)__cxa_allocate_exception(0x48uLL);
    SERestoreInfo::SEWrongDeviceInfo::SEWrongDeviceInfo(exception);
  }
  return this;
}

void sub_217B00258(_Unwind_Exception *a1)
{
  SERestoreInfo::P73BaseDeviceInfo::~P73BaseDeviceInfo(v1);
  _Unwind_Resume(a1);
}

void YonkersAddEntitlementsToTATSURequestDict(const __CFDictionary *a1, __CFDictionary *a2)
{
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,ReadECKey");
  if (Value)
  {
    CFBooleanRef v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFBooleanGetTypeID())
    {
      int v7 = CFBooleanGetValue(v5);
      char v8 = (const void **)MEMORY[0x263EFFB40];
      if (!v7) {
        char v8 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,ReadECKey", *v8);
    }
  }
  CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,WriteECKey");
  if (v9)
  {
    CFBooleanRef v10 = v9;
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFBooleanGetTypeID())
    {
      int v12 = CFBooleanGetValue(v10);
      timeval v13 = (const void **)MEMORY[0x263EFFB40];
      if (!v12) {
        timeval v13 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,WriteECKey", *v13);
    }
  }
  CFBooleanRef v14 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,WriteECID");
  if (v14)
  {
    CFBooleanRef v15 = v14;
    CFTypeID v16 = CFGetTypeID(v14);
    if (v16 == CFBooleanGetTypeID())
    {
      int v17 = CFBooleanGetValue(v15);
      long long v18 = (const void **)MEMORY[0x263EFFB40];
      if (!v17) {
        long long v18 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,WriteECID", *v18);
    }
  }
  CFBooleanRef v19 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,WriteEpoch");
  if (v19)
  {
    CFBooleanRef v20 = v19;
    CFTypeID v21 = CFGetTypeID(v19);
    if (v21 == CFBooleanGetTypeID())
    {
      int v22 = CFBooleanGetValue(v20);
      std::string v23 = (const void **)MEMORY[0x263EFFB40];
      if (!v22) {
        std::string v23 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,WriteEpoch", *v23);
    }
  }
  CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,ReadGID");
  if (v24)
  {
    CFBooleanRef v25 = v24;
    CFTypeID v26 = CFGetTypeID(v24);
    if (v26 == CFBooleanGetTypeID())
    {
      int v27 = CFBooleanGetValue(v25);
      int v28 = (const void **)MEMORY[0x263EFFB40];
      if (!v27) {
        int v28 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,ReadGID", *v28);
    }
  }
  CFBooleanRef v29 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,ReadFWKey");
  if (v29)
  {
    CFBooleanRef v30 = v29;
    CFTypeID v31 = CFGetTypeID(v29);
    if (v31 == CFBooleanGetTypeID())
    {
      int v32 = CFBooleanGetValue(v30);
      std::string::size_type v33 = (const void **)MEMORY[0x263EFFB40];
      if (!v32) {
        std::string::size_type v33 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,ReadFWKey", *v33);
    }
  }
  CFBooleanRef v34 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,AllowOfflineBoot");
  if (v34)
  {
    CFBooleanRef v35 = v34;
    CFTypeID v36 = CFGetTypeID(v34);
    if (v36 == CFBooleanGetTypeID())
    {
      int v37 = CFBooleanGetValue(v35);
      long long v38 = (const void **)MEMORY[0x263EFFB40];
      if (!v37) {
        long long v38 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,AllowOfflineBoot", *v38);
    }
  }
  CFBooleanRef v39 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,TempDemote");
  if (v39)
  {
    CFBooleanRef v40 = v39;
    CFTypeID v41 = CFGetTypeID(v39);
    if (v41 == CFBooleanGetTypeID())
    {
      int v42 = CFBooleanGetValue(v40);
      char v43 = (const void **)MEMORY[0x263EFFB40];
      if (!v42) {
        char v43 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,TempDemote", *v43);
    }
  }
  CFBooleanRef v44 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,AccessSensor");
  if (v44)
  {
    CFBooleanRef v45 = v44;
    CFTypeID v46 = CFGetTypeID(v44);
    if (v46 == CFBooleanGetTypeID())
    {
      int v47 = CFBooleanGetValue(v45);
      uint64_t v48 = (const void **)MEMORY[0x263EFFB40];
      if (!v47) {
        uint64_t v48 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,AccessSensor", *v48);
    }
  }
  CFBooleanRef v49 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,AccessSecurity");
  if (v49)
  {
    CFBooleanRef v50 = v49;
    CFTypeID v51 = CFGetTypeID(v49);
    if (v51 == CFBooleanGetTypeID())
    {
      int v52 = CFBooleanGetValue(v50);
      long long v53 = (const void **)MEMORY[0x263EFFB40];
      if (!v52) {
        long long v53 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,AccessSecurity", *v53);
    }
  }
  CFBooleanRef v54 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,FADemote");
  if (v54)
  {
    CFBooleanRef v55 = v54;
    CFTypeID v56 = CFGetTypeID(v54);
    if (v56 == CFBooleanGetTypeID())
    {
      int v57 = CFBooleanGetValue(v55);
      uint64_t v58 = (const void **)MEMORY[0x263EFFB40];
      if (!v57) {
        uint64_t v58 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,FADemote", *v58);
    }
  }
  CFBooleanRef v59 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,DebugStatus");
  if (v59)
  {
    CFBooleanRef v60 = v59;
    CFTypeID v61 = CFGetTypeID(v59);
    if (v61 == CFBooleanGetTypeID())
    {
      int v62 = CFBooleanGetValue(v60);
      unint64_t v63 = (const void **)MEMORY[0x263EFFB40];
      if (!v62) {
        unint64_t v63 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"Yonkers,DebugStatus", *v63);
    }
  }
  CFBooleanRef v64 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,Provisioning");
  if (v64)
  {
    CFBooleanRef v65 = v64;
    CFTypeID v66 = CFGetTypeID(v64);
    if (v66 == CFBooleanGetTypeID())
    {
      int v67 = CFBooleanGetValue(v65);
      uint64_t v68 = (const void **)MEMORY[0x263EFFB40];
      if (!v67) {
        uint64_t v68 = (const void **)MEMORY[0x263EFFB38];
      }
      unint64_t v69 = *v68;
      CFDictionaryAddValue(a2, @"Yonkers,Provisioning", v69);
    }
  }
}

uint64_t CreateYonkersMeasurementDict(const __CFData *a1, CFTypeRef *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFBooleanRef v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  CFTypeID v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(_OWORD *)md = 0u;
  long long v18 = 0u;
  char v8 = CFDictionaryCreateMutable(0, 0, v5, v6);
  CFBooleanRef v9 = 0;
  if (v8) {
    BOOL v10 = Mutable == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = 2;
    if (a1 && a2)
    {
      unint64_t Length = CFDataGetLength(a1);
      CFBooleanRef v9 = (UInt8 *)calloc(Length, 1uLL);
      if (v9)
      {
        v20.CFIndex location = 0;
        v20.CFIndex length = Length;
        CFDataGetBytes(a1, v20, v9);
        if (!(Length >> 20))
        {
          CC_SHA256_Init(&c);
          CC_SHA256_Update(&c, v9, Length);
          CC_SHA256_Final(md, &c);
        }
        CFDataRef v13 = CFDataCreate(v4, md, 32);
        if (v13)
        {
          CFDataRef v14 = v13;
          CFDictionarySetValue(Mutable, @"Digest", v13);
          CFDictionarySetValue(v8, @"MeasurementDictPatch", Mutable);
          *a2 = SafeRetain(v8);
          CFRelease(v14);
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v11 = 8;
        }
      }
      else
      {
        uint64_t v11 = 3;
      }
    }
    goto LABEL_12;
  }
  uint64_t v11 = 3;
  if (Mutable) {
LABEL_12:
  }
    CFRelease(Mutable);
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    free(v9);
  }
  return v11;
}

uint64_t CreateYonkersRequestDictForTATSU(const __CFDictionary *a1, const __CFDictionary *a2, CFDictionaryRef theDict, uint64_t a4, CFTypeRef *a5)
{
  CFMutableDictionaryRef Mutable = 0;
  CFTypeRef v74 = 0;
  CFStringRef key = 0;
  int valuePtr = 0;
  uint64_t v6 = 2;
  if (!a1 || !a2 || !theDict || !a4)
  {
    BOOL v10 = 0;
    goto LABEL_66;
  }
  BOOL v10 = 0;
  if (!a5) {
    goto LABEL_66;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"MeasurementDictPatch");
  uint64_t v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  int v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDataRef v13 = CFDictionaryCreateMutable(0, 0, v11, v12);
  BOOL v10 = v13;
  uint64_t v6 = 3;
  if (!v13 || !Mutable || !Value) {
    goto LABEL_66;
  }
  uint64_t v14 = *MEMORY[0x263EFFB40];
  CFDictionaryAddValue(v13, @"@Yonkers,Ticket", (const void *)*MEMORY[0x263EFFB40]);
  CFBooleanRef v15 = CFDictionaryGetValue(a2, @"Yonkers,BoardID");
  if (!v15) {
    goto LABEL_77;
  }
  CFTypeID v16 = v15;
  CFTypeID v17 = CFGetTypeID(v15);
  if (v17 != CFNumberGetTypeID()) {
    goto LABEL_77;
  }
  CFDictionaryAddValue(v10, @"Yonkers,BoardID", v16);
  long long v18 = CFDictionaryGetValue(a2, @"Yonkers,PatchEpoch");
  if (!v18) {
    goto LABEL_77;
  }
  uint64_t v19 = v18;
  CFTypeID v20 = CFGetTypeID(v18);
  if (v20 != CFNumberGetTypeID()) {
    goto LABEL_77;
  }
  CFDictionaryAddValue(v10, @"Yonkers,PatchEpoch", v19);
  CFTypeID v21 = CFDictionaryGetValue(a1, @"Yonkers,ChipID");
  if (!v21) {
    goto LABEL_77;
  }
  int v22 = v21;
  CFTypeID v23 = CFGetTypeID(v21);
  if (v23 != CFNumberGetTypeID()) {
    goto LABEL_77;
  }
  CFDictionaryAddValue(v10, @"Yonkers,ChipID", v22);
  CFNumberGetValue((CFNumberRef)v22, kCFNumberSInt32Type, &valuePtr);
  CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,ProductionMode");
  if (!v24) {
    goto LABEL_77;
  }
  CFBooleanRef v25 = v24;
  CFTypeID v26 = CFGetTypeID(v24);
  if (v26 != CFBooleanGetTypeID()) {
    goto LABEL_77;
  }
  int v71 = CFBooleanGetValue(v25);
  int v27 = (const void *)(v71 ? v14 : *MEMORY[0x263EFFB38]);
  CFDictionaryAddValue(v10, @"Yonkers,ProductionMode", v27);
  CFBooleanRef v28 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"YonkersIsProvisioned");
  if (v28 && (CFBooleanRef v29 = v28, v30 = CFGetTypeID(v28), v30 == CFBooleanGetTypeID())) {
    int v31 = CFBooleanGetValue(v29);
  }
  else {
    int v31 = 1;
  }
  CFBooleanRef v32 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"YonkersIsYmgt");
  if (v32 && (CFBooleanRef v33 = v32, v34 = CFGetTypeID(v32), v34 == CFBooleanGetTypeID())) {
    int v67 = CFBooleanGetValue(v33);
  }
  else {
    int v67 = 0;
  }
  CFBooleanRef v35 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"Yonkers,WriteECID");
  if (v35 && (CFBooleanRef v36 = v35, v37 = CFGetTypeID(v35), v37 == CFBooleanGetTypeID())) {
    int v38 = CFBooleanGetValue(v36);
  }
  else {
    int v38 = 0;
  }
  CFBooleanRef v39 = CFDictionaryGetValue(a1, @"Yonkers,ECID");
  if (!v39) {
    goto LABEL_77;
  }
  CFBooleanRef v40 = v39;
  CFTypeID v41 = CFGetTypeID(v39);
  if (v41 != CFDataGetTypeID()) {
    goto LABEL_77;
  }
  CFDictionaryAddValue(v10, @"Yonkers,ECID", v40);
  int v42 = CFDictionaryGetValue(a1, @"Yonkers,Nonce");
  if (!v42) {
    goto LABEL_77;
  }
  char v43 = v42;
  CFTypeID v44 = CFGetTypeID(v42);
  if (v44 != CFDataGetTypeID()) {
    goto LABEL_77;
  }
  CFDictionaryAddValue(v10, @"Yonkers,Nonce", v43);
  int YonkersMeasurementTags = GetYonkersMeasurementTags(a1, (CFTypeRef *)&key, &v74);
  CFTypeID v46 = key;
  uint64_t v6 = 17;
  if (!YonkersMeasurementTags && key)
  {
    int v47 = CFDictionaryGetValue(theDict, @"MeasurementDictPatch");
    uint64_t v48 = (__CFDictionary *)SafeRetain(v47);
    if (!v48)
    {
LABEL_66:
      CFTypeID v46 = key;
      goto LABEL_67;
    }
    CFBooleanRef v49 = v48;
    CFTypeID v50 = CFGetTypeID(v48);
    if (v50 == CFDictionaryGetTypeID())
    {
      uint64_t v68 = a5;
      unint64_t v69 = Mutable;
      CFDictionaryAddValue(v49, @"EPRO", v27);
      CFTypeID v51 = CFDictionaryGetValue(a1, @"Yonkers,FabRevision");
      CFDictionaryAddValue(v49, @"FabRevision", v51);
      CFDictionaryAddValue(v10, key, v49);
      CFRelease(v49);
      if (!(v31 | v38))
      {
        CFDictionaryRemoveValue(v10, key);
        if (valuePtr == 1300)
        {
          uint64_t v59 = 4 * (v67 != 0);
          CFAllocatorRef v60 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          if (v67) {
            unint64_t v61 = 8;
          }
          else {
            unint64_t v61 = 4;
          }
          while (1)
          {
            int v62 = dword_217B32C50[v59];
            if (GetYonkersFabRevisionTags(v62, v71, (CFTypeRef *)&key, 0) || key == 0) {
              goto LABEL_74;
            }
            CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v60, 0, Value);
            if (!MutableCopy) {
              goto LABEL_74;
            }
            CFBooleanRef v49 = MutableCopy;
            CFTypeID v65 = CFGetTypeID(MutableCopy);
            if (v65 != CFDictionaryGetTypeID())
            {
LABEL_75:
              CFMutableDictionaryRef Mutable = v69;
              goto LABEL_76;
            }
            CFDictionarySetValue(v49, @"EPRO", v27);
            SavageCFDictionarySetInteger32(v49, @"FabRevision", v62);
            CFDictionarySetValue(v10, key, v49);
            CFRelease(v49);
            if (++v59 >= v61) {
              goto LABEL_64;
            }
          }
        }
        if (valuePtr == 1044)
        {
          uint64_t v52 = 4 * (v67 != 0);
          CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          if (v67) {
            unint64_t v54 = 6;
          }
          else {
            unint64_t v54 = 4;
          }
          while (1)
          {
            int v55 = dword_217B32C38[v52];
            if (GetYonkersFabRevisionTags(v55, v71, (CFTypeRef *)&key, 0) || key == 0) {
              break;
            }
            CFMutableDictionaryRef v57 = CFDictionaryCreateMutableCopy(v53, 0, Value);
            if (!v57) {
              break;
            }
            CFBooleanRef v49 = v57;
            CFTypeID v58 = CFGetTypeID(v57);
            if (v58 != CFDictionaryGetTypeID()) {
              goto LABEL_75;
            }
            CFDictionarySetValue(v49, @"EPRO", v27);
            SavageCFDictionarySetInteger32(v49, @"FabRevision", v55);
            CFDictionarySetValue(v10, key, v49);
            CFRelease(v49);
            if (++v52 >= v54) {
              goto LABEL_64;
            }
          }
LABEL_74:
          uint64_t v6 = 17;
          goto LABEL_65;
        }
      }
LABEL_64:
      YonkersAddEntitlementsToTATSURequestDict(a1, v10);
      uint64_t v6 = 0;
      CFTypeRef *v68 = SafeRetain(v10);
LABEL_65:
      CFMutableDictionaryRef Mutable = v69;
      goto LABEL_66;
    }
LABEL_76:
    CFRelease(v49);
LABEL_77:
    uint64_t v6 = 17;
    goto LABEL_66;
  }
LABEL_67:
  if (v46)
  {
    CFRelease(v46);
    CFStringRef key = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v6;
}

__CFDictionary *SavageUpdaterGetTagsWithLogging(const __CFDictionary *a1, uint64_t (*a2)(void, void), uint64_t a3, CFTypeRef *a4)
{
  logSinkFunCC_SHA256_CTX c = a2;
  logContext = a3;
  return SavageUpdaterGetTags(a1, a4);
}

__CFDictionary *SavageUpdaterGetTags(const __CFDictionary *a1, CFTypeRef *a2)
{
  CFTypeID v46 = 0;
  int v47 = 0;
  CFTypeID v44 = 0;
  std::string value = 0;
  *(_DWORD *)buffer = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterGetTags: Cannot allocate memory for outputDict", 3u, 0, @"SavageErrorDomain");
    CFTypeRef v17 = 0;
    uint64_t v6 = 0;
    goto LABEL_50;
  }
  if (a1)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v6 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (v6)
    {
      int v7 = CFArrayCreateMutable(v5, 0, MEMORY[0x263EFFF70]);
      if (v7)
      {
        char v8 = CFDictionaryGetValue(a1, @"DeviceInfo");
        if (v8)
        {
          CFBooleanRef v9 = v8;
          CFTypeID v10 = CFGetTypeID(v8);
          if (v10 == CFDictionaryGetTypeID())
          {
            CFStringRef v11 = CFCopyDescription(v9);
            if (v11)
            {
              CFStringRef v13 = v11;
              if (CFStringGetCString(v11, logString, 4096, 0)) {
                CFBooleanRef v15 = logString;
              }
              else {
                CFBooleanRef v15 = "No C string description available.";
              }
              SavageRestoreInfoLog("%s [input]: DeviceInfo %s \n", v14, "SavageUpdaterGetTags", v15);
              CFRelease(v13);
            }
            else
            {
              SavageRestoreInfoLog("%s [input]: DeviceInfo %s \n", v12, "SavageUpdaterGetTags", "No C string description available.");
            }
            a1 = (const __CFDictionary *)SafeRetain(v9);
            CFTypeID v16 = CFDictionaryGetValue(a1, @"YonkersDeviceInfo");
            CFTypeRef v17 = v16;
            if (v16)
            {
              CFTypeID v18 = CFGetTypeID(v16);
              if (v18 == CFDictionaryGetTypeID())
              {
                CFTypeRef v17 = SafeRetain(v17);
                unsigned int YonkersMeasurementTags = GetYonkersMeasurementTags((CFDictionaryRef)v17, (CFTypeRef *)&value, (CFTypeRef *)&v44);
                if (YonkersMeasurementTags || !value)
                {
                  CFStringRef v34 = @"YonkersErrorDomain";
                  CFBooleanRef v35 = "SavageUpdaterGetTags: Unable to get kYonkersTagMeasurementPatch";
                  uint64_t v36 = (uint64_t)v17;
LABEL_57:
                  CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)v35, YonkersMeasurementTags, v36, v34);
                  goto LABEL_58;
                }
                CFArrayAppendValue(v6, @"SEP");
                CFArrayAppendValue(v6, @"Yonkers,BoardID");
                CFArrayAppendValue(v6, @"Yonkers,ChipID");
                CFArrayAppendValue(v6, @"Yonkers,PatchEpoch");
                CFArrayAppendValue(v6, value);
                CFArrayAppendValue(v6, v44);
                CFArrayAppendValue(v7, @"Yonkers,Ticket");
                if (v17 && CFDictionaryGetCount(a1) == 1)
                {
LABEL_30:
                  CFDictionaryAddValue(Mutable, @"BuildIdentityTags", v6);
                  CFDictionaryAddValue(Mutable, @"ResponseTags", v7);
                  CFStringRef v24 = CFCopyDescription(Mutable);
                  if (v24)
                  {
                    CFStringRef v26 = v24;
                    if (CFStringGetCString(v24, logString, 4096, 0)) {
                      CFBooleanRef v28 = logString;
                    }
                    else {
                      CFBooleanRef v28 = "No C string description available.";
                    }
                    SavageRestoreInfoLog("%s [output]: %s \n", v27, "SavageUpdaterGetTags", v28);
                    CFRelease(v26);
                  }
                  else
                  {
                    SavageRestoreInfoLog("%s [output]: %s \n", v25, "SavageUpdaterGetTags", "No C string description available.");
                  }
                  goto LABEL_36;
                }
              }
              else
              {
                CFTypeRef v17 = 0;
              }
            }
            unsigned int YonkersMeasurementTags = GetRelevantMeasurementTags(a1, (__CFString **)&v47, (__CFString **)&v46);
            if (v47)
            {
              if (v46)
              {
                CFArrayAppendValue(v6, @"Savage,ChipID");
                CFArrayAppendValue(v6, @"Savage,PatchEpoch");
                CFArrayAppendValue(v6, v47);
                CFArrayAppendValue(v6, v46);
                CFDataRef v20 = (const __CFData *)CFDictionaryGetValue(a1, @"Savage,ChipID");
                if (v20)
                {
                  CFDataRef v21 = v20;
                  CFTypeID v22 = CFGetTypeID(v20);
                  CFTypeID v23 = @"Savage,Ticket";
                  if (v22 == CFDataGetTypeID())
                  {
                    v48.CFIndex location = 0;
                    v48.CFIndex length = 4;
                    CFDataGetBytes(v21, v48, buffer);
                    *(_DWORD *)buffer = bswap32(*(unsigned int *)buffer);
                    if (*(_DWORD *)buffer > 0x5064u) {
                      CFTypeID v23 = @"Brunor,Ticket";
                    }
                  }
                }
                else
                {
                  CFTypeID v23 = @"Savage,Ticket";
                }
                CFArrayAppendValue(v7, v23);
                goto LABEL_30;
              }
              CFStringRef v34 = @"SavageErrorDomain";
              CFBooleanRef v35 = "SavageUpdaterGetTags: Unable to get kSavageTagMeasurementPatchRepair";
            }
            else
            {
              CFStringRef v34 = @"SavageErrorDomain";
              CFBooleanRef v35 = "SavageUpdaterGetTags: Unable to get kSavageTagMeasurementPatch";
            }
            uint64_t v36 = (uint64_t)a1;
            goto LABEL_57;
          }
        }
        CFTypeID v30 = "SavageUpdaterGetTags: DeviceInfo is NULL?";
        unsigned int v31 = 17;
        uint64_t v32 = (uint64_t)a1;
      }
      else
      {
        CFTypeID v30 = "SavageUpdaterGetTags: Cannot allocate memory for tagsInTssResponse";
        unsigned int v31 = 3;
        uint64_t v32 = 0;
      }
      CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)v30, v31, v32, @"SavageErrorDomain");
      CFTypeRef v17 = 0;
      goto LABEL_53;
    }
    CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterGetTags: Cannot allocate memory for tagsInBI", 3u, 0, @"SavageErrorDomain");
    CFTypeRef v17 = 0;
LABEL_50:
    int v7 = 0;
LABEL_53:
    a1 = 0;
    goto LABEL_58;
  }
  CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterGetTags: options is NULL", 2u, 0, @"SavageErrorDomain");
  CFTypeRef v17 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
LABEL_58:
  if (a2 && CFErrorWithDomain)
  {
    *a2 = SafeRetain(CFErrorWithDomain);
    CFStringRef v37 = CFErrorCopyDescription(CFErrorWithDomain);
    if (v37)
    {
      CFStringRef v39 = v37;
      int CString = CFStringGetCString(v37, logString, 4096, 0);
      int v42 = "No C string description available.";
      if (CString) {
        int v42 = logString;
      }
      SavageRestoreInfoLog("%s [error]: %s \n", v41, "SavageUpdaterGetTags", v42);
      CFRelease(v39);
    }
    else
    {
      SavageRestoreInfoLog("%s [error]: %s \n", v38, "SavageUpdaterGetTags", "No C string description available.");
    }
    if (Mutable)
    {
      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = 0;
    }
    goto LABEL_69;
  }
  if (CFErrorWithDomain) {
LABEL_69:
  }
    CFRelease(CFErrorWithDomain);
  if (v7) {
LABEL_36:
  }
    CFRelease(v7);
  if (v6) {
    CFRelease(v6);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (a1) {
    CFRelease(a1);
  }
  if (value) {
    CFRelease(value);
  }
  return Mutable;
}

__CFDictionary *SavageUpdaterCopyFirmwareWithLogging(const __CFDictionary *a1, uint64_t (*a2)(void, void), uint64_t a3, CFTypeRef *a4)
{
  logSinkFunCC_SHA256_CTX c = a2;
  logContext = a3;
  return SavageUpdaterCopyFirmware(a1, a4);
}

__CFDictionary *SavageUpdaterCopyFirmware(const __CFDictionary *a1, CFTypeRef *a2)
{
  *(void *)UInt8 bytes = 0;
  CFTypeRef v60 = 0;
  CFTypeRef cf = 0;
  CFTypeID v58 = 0;
  uint64_t v59 = 0;
  uint64_t v56 = 0;
  CFErrorRef err = 0;
  if (!a1)
  {
    CFRange v48 = "SavageUpdaterCopyFirmware: options is NULL";
    uint64_t v49 = 0;
    goto LABEL_81;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"DeviceInfo");
  if (!Value || (v4 = Value, CFTypeID v5 = CFGetTypeID(Value), v5 != CFDictionaryGetTypeID()))
  {
    CFRange v48 = "SavageUpdaterCopyFirmware: Missing device info";
    uint64_t v49 = (uint64_t)a1;
LABEL_81:
    CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)v48, 2u, v49, @"SavageErrorDomain");
    CFTypeID v22 = 0;
    CFDataRef v14 = 0;
    CFDataRef v20 = 0;
    CFDictionaryRef v12 = 0;
    CFTypeID v23 = 0;
    CFDataRef v24 = 0;
    CFDataRef v25 = 0;
    CFDictionaryRef v16 = 0;
    goto LABEL_98;
  }
  CFStringRef v6 = CFCopyDescription(v4);
  if (v6)
  {
    CFStringRef v8 = v6;
    int CString = CFStringGetCString(v6, logString, 4096, 0);
    CFStringRef v11 = "No C string description available.";
    if (CString) {
      CFStringRef v11 = logString;
    }
    SavageRestoreInfoLog("%s [input]: DeviceInfo %s \n", v10, "SavageUpdaterCopyFirmware", v11);
    CFRelease(v8);
  }
  else
  {
    SavageRestoreInfoLog("%s [input]: DeviceInfo %s \n", v7, "SavageUpdaterCopyFirmware", "No C string description available.");
  }
  CFDictionaryRef v12 = (const __CFDictionary *)SafeRetain(v4);
  CFDataRef v13 = (const __CFData *)CFDictionaryGetValue(v12, @"YonkersDeviceInfo");
  CFDataRef v14 = v13;
  if (!v13)
  {
    CFDictionaryRef v16 = 0;
    CFDataRef v20 = 0;
LABEL_24:
    CFTypeID v22 = 0;
    goto LABEL_25;
  }
  CFTypeID v15 = CFGetTypeID(v13);
  if (v15 != CFDictionaryGetTypeID())
  {
    CFDictionaryRef v16 = 0;
    CFDataRef v20 = 0;
    CFDataRef v14 = 0;
    goto LABEL_24;
  }
  CFDictionaryRef v16 = (const __CFDictionary *)SafeRetain(v14);
  unsigned int YonkersMeasurementTags = GetYonkersMeasurementTags(v16, &cf, &v60);
  if (YonkersMeasurementTags)
  {
    CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCopyFirmware: Didn't get yonkers patch measurement tags", YonkersMeasurementTags, (uint64_t)v16, @"YonkersErrorDomain");
    CFTypeID v22 = 0;
    CFDataRef v14 = 0;
    goto LABEL_89;
  }
  FileCFDataRef Data = (const __CFData *)CreateFileData(a1, (const __CFString *)cf, (CFTypeRef *)&err);
  CFDataRef v14 = FileData;
  if (err)
  {
    CFTypeID v22 = 0;
    CFDataRef v20 = 0;
LABEL_92:
    CFTypeID v23 = 0;
    CFDataRef v24 = 0;
    goto LABEL_93;
  }
  if (!FileData || !CFDataGetLength(FileData))
  {
    CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCopyFirmware: Empty Yonkers firmware file?", 4u, (uint64_t)a1, @"YonkersErrorDomain");
    CFTypeID v22 = 0;
LABEL_89:
    CFDataRef v20 = 0;
    goto LABEL_96;
  }
  CFDataRef v19 = (const __CFData *)CreateFileData(a1, (const __CFString *)v60, (CFTypeRef *)&err);
  CFDataRef v20 = v19;
  if (err)
  {
    CFTypeID v22 = 0;
    goto LABEL_92;
  }
  if (!v19 || !CFDataGetLength(v19))
  {
    CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCopyFirmware: Empty Yonkers alt firmware file?", 4u, (uint64_t)a1, @"YonkersErrorDomain");
    CFTypeID v22 = 0;
LABEL_96:
    CFTypeID v23 = 0;
    CFDataRef v24 = 0;
    goto LABEL_97;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeID v22 = Mutable;
  if (!Mutable)
  {
    uint64_t v52 = "SavageUpdaterCopyFirmware: Cannot allocate memory for outputDict";
    unsigned int v51 = 3;
    uint64_t v53 = (uint64_t)a1;
LABEL_95:
    CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)v52, v51, v53, @"SavageErrorDomain");
    goto LABEL_96;
  }
  CFDictionaryAddValue(Mutable, @"YonkersFirmware", v14);
  CFDictionaryAddValue(v22, @"YonkersFirmwareAlt", v20);
  if (!v16 || CFDictionaryGetCount(v12) != 1)
  {
LABEL_25:
    unsigned int RelevantMeasurementTags = GetRelevantMeasurementTags(v12, &v59, &v58);
    if (!RelevantMeasurementTags)
    {
      CFDataRef v27 = (const __CFData *)CreateFileData(a1, v59, (CFTypeRef *)&err);
      CFDataRef v24 = v27;
      if (!err)
      {
        if (v27 && CFDataGetLength(v27))
        {
          CFDataRef v25 = (const __CFData *)CreateFileData(a1, v58, (CFTypeRef *)&err);
          if (err && CFErrorGetCode(err) == 19)
          {
            CFTypeID v23 = 0;
            goto LABEL_48;
          }
          CFTypeID v23 = CFDataCreateMutable(0, 0);
          if (v23)
          {
            *(_DWORD *)&UInt8 bytes[4] = CFDataGetLength(v24);
            CFDataAppendBytes(v23, bytes, 16);
            BytePtr = CFDataGetBytePtr(v24);
            CFIndex Length = CFDataGetLength(v24);
            CFDataAppendBytes(v23, BytePtr, Length);
            if (v25)
            {
              LODWORD(v56) = CFDataGetLength(v25);
              v62.CFIndex location = 0;
              v62.CFIndex length = 16;
              CFDataReplaceBytes(v23, v62, bytes, 16);
              CFTypeID v30 = CFDataGetBytePtr(v25);
              CFIndex v31 = CFDataGetLength(v25);
              CFDataAppendBytes(v23, v30, v31);
            }
            if (v22)
            {
              CFDictionaryAddValue(v22, @"SavageFirmware", v23);
              CFRelease(v23);
              CFTypeID v23 = 0;
            }
            goto LABEL_36;
          }
          CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCopyFirmware: Cannot allocate memory for savageFirmwareData", 3u, (uint64_t)a1, @"SavageErrorDomain");
LABEL_98:
          CFErrorRef err = CFErrorWithDomain;
          goto LABEL_48;
        }
        CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCopyFirmware: Empty Savage firmware file", 4u, (uint64_t)a1, @"SavageErrorDomain");
        CFTypeID v23 = 0;
LABEL_97:
        CFDataRef v25 = 0;
        goto LABEL_98;
      }
      CFTypeID v23 = 0;
LABEL_93:
      CFDataRef v25 = 0;
      goto LABEL_48;
    }
    unsigned int v51 = RelevantMeasurementTags;
    uint64_t v52 = "SavageUpdaterCopyFirmware: Unable to get savage patch measurement tags";
    uint64_t v53 = (uint64_t)v12;
    goto LABEL_95;
  }
  CFTypeID v23 = 0;
  CFDataRef v24 = 0;
  CFDataRef v25 = 0;
LABEL_36:
  CFStringRef v32 = CFCopyDescription(v22);
  if (v32)
  {
    CFStringRef v34 = v32;
    if (CFStringGetCString(v32, logString, 4096, 0)) {
      uint64_t v36 = logString;
    }
    else {
      uint64_t v36 = "No C string description available.";
    }
    SavageRestoreInfoLog("%s [output]: %s \n", v35, "SavageUpdaterCopyFirmware", v36);
    CFRelease(v34);
  }
  else
  {
    SavageRestoreInfoLog("%s [output]: %s \n", v33, "SavageUpdaterCopyFirmware", "No C string description available.");
  }
  CFStringRef v37 = CFCopyDescription(v23);
  if (v37)
  {
    CFStringRef v39 = v37;
    if (CFStringGetCString(v37, logString, 4096, 0)) {
      uint64_t v41 = logString;
    }
    else {
      uint64_t v41 = "No C string description available.";
    }
    SavageRestoreInfoLog("%s [output]: %s \n", v40, "SavageUpdaterCopyFirmware", v41);
    CFRelease(v39);
  }
  else
  {
    SavageRestoreInfoLog("%s [output]: %s \n", v38, "SavageUpdaterCopyFirmware", "No C string description available.");
  }
LABEL_48:
  if (a2 && err)
  {
    *a2 = SafeRetain(err);
    CFStringRef v42 = CFErrorCopyDescription(err);
    if (v42)
    {
      CFStringRef v44 = v42;
      if (CFStringGetCString(v42, logString, 4096, 0)) {
        CFTypeID v46 = logString;
      }
      else {
        CFTypeID v46 = "No C string description available.";
      }
      SavageRestoreInfoLog("%s [error]: %s \n", v45, "SavageUpdaterCopyFirmware", v46);
      CFRelease(v44);
    }
    else
    {
      SavageRestoreInfoLog("%s [error]: %s \n", v43, "SavageUpdaterCopyFirmware", "No C string description available.");
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v60)
  {
    CFRelease(v60);
    CFTypeRef v60 = 0;
  }
  if (err)
  {
    CFRelease(err);
    CFErrorRef err = 0;
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v22) {
    return v22;
  }
  else {
    return v23;
  }
}

CFAllocatorRef SavageUpdaterCreateRequestWithLogging(const __CFDictionary *a1, uint64_t (*a2)(void, void), uint64_t a3, CFTypeRef *a4)
{
  logSinkFunCC_SHA256_CTX c = a2;
  logContext = a3;
  return SavageUpdaterCreateRequest(a1, a4);
}

CFAllocatorRef SavageUpdaterCreateRequest(const __CFDictionary *a1, CFTypeRef *a2)
{
  CFTypeRef v187 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef allocator = 0;
  if (a1)
  {
    if (CFDictionaryContainsKey(a1, @"BuildIdentity"))
    {
      CFDictionaryRef Value = CFDictionaryGetValue(a1, @"BuildIdentity");
      CFTypeRef v5 = SafeRetain(Value);
      CFStringRef v6 = CFCopyDescription(v5);
      if (v6)
      {
        CFStringRef v8 = v6;
        if (CFStringGetCString(v6, logString, 4096, 0)) {
          uint64_t v10 = logString;
        }
        else {
          uint64_t v10 = "No C string description available.";
        }
        SavageRestoreInfoLog("%s [input]: BuildIdentity %s \n", v9, "SavageUpdaterCreateRequest", v10);
        CFRelease(v8);
        if (v5)
        {
LABEL_8:
          if (CFDictionaryContainsKey(a1, @"DeviceInfo"))
          {
            CFStringRef v11 = CFDictionaryGetValue(a1, @"DeviceInfo");
            CFTypeRef v12 = SafeRetain(v11);
            CFStringRef v13 = CFCopyDescription(v12);
            if (v13)
            {
              CFStringRef v15 = v13;
              if (CFStringGetCString(v13, logString, 4096, 0)) {
                CFTypeRef v17 = logString;
              }
              else {
                CFTypeRef v17 = "No C string description available.";
              }
              SavageRestoreInfoLog("%s [input]: DeviceInfo %s \n", v16, "SavageUpdaterCreateRequest", v17);
              CFRelease(v15);
              if (v12) {
                goto LABEL_14;
              }
            }
            else
            {
              SavageRestoreInfoLog("%s [input]: DeviceInfo %s \n", v14, "SavageUpdaterCreateRequest", "No C string description available.");
              if (v12)
              {
LABEL_14:
                if (!CFDictionaryContainsKey(a1, @"FirmwareData")) {
                  goto LABEL_49;
                }
                CFTypeID v18 = CFDictionaryGetValue(a1, @"FirmwareData");
                CFStringRef v19 = CFCopyDescription(v18);
                if (v19)
                {
                  CFStringRef v21 = v19;
                  if (CFStringGetCString(v19, logString, 4096, 0)) {
                    CFTypeID v23 = logString;
                  }
                  else {
                    CFTypeID v23 = "No C string description available.";
                  }
                  SavageRestoreInfoLog("%s [input]: FirmwareData %s \n", v22, "SavageUpdaterCreateRequest", v23);
                  CFRelease(v21);
                  if (v18) {
                    goto LABEL_20;
                  }
                }
                else
                {
                  SavageRestoreInfoLog("%s [input]: FirmwareData %s \n", v20, "SavageUpdaterCreateRequest", "No C string description available.");
                  if (v18)
                  {
LABEL_20:
                    CFTypeID v24 = CFGetTypeID(v18);
                    if (v24 == CFDictionaryGetTypeID())
                    {
                      CFDataRef v25 = CFDictionaryGetValue((CFDictionaryRef)v18, @"SavageFirmware");
                      CFDataRef v26 = (const __CFData *)SafeRetain(v25);
                      if (v26)
                      {
                        CFDataRef v27 = v26;
                        unsigned int v28 = CreateMeasurementDict(v26, &cf);
                        CFRelease(v27);
                        if (v28)
                        {
                          CFStringRef v32 = @"SavageErrorDomain";
                          uint64_t v33 = "SavageUpdaterCreateRequest: CreateMeasurementDict fails for Savage.";
                          goto LABEL_256;
                        }
                      }
                      CFBooleanRef v29 = CFDictionaryGetValue((CFDictionaryRef)v18, @"YonkersFirmware");
                      CFDataRef v30 = (const __CFData *)SafeRetain(v29);
                      if (v30)
                      {
                        CFDataRef v31 = v30;
                        unsigned int v28 = CreateYonkersMeasurementDict(v30, &v187);
                        CFRelease(v31);
                        if (v28)
                        {
                          CFStringRef v32 = @"YonkersErrorDomain";
                          uint64_t v33 = "SavageUpdaterCreateRequest: CreateMeasurementDict fails for Yonkers.";
LABEL_256:
                          unsigned int v63 = v28;
                          uint64_t v64 = (uint64_t)v18;
                          goto LABEL_66;
                        }
                      }
                    }
                    else
                    {
                      CFTypeID v38 = CFGetTypeID(v18);
                      if (v38 == CFDataGetTypeID())
                      {
                        CFDataRef v39 = (const __CFData *)SafeRetain(v18);
                        unsigned int v28 = CreateMeasurementDict(v39, &cf);
                        if (v39) {
                          CFRelease(v39);
                        }
                        if (v28)
                        {
                          CFStringRef v32 = @"SavageErrorDomain";
                          uint64_t v33 = "SavageUpdaterCreateRequest: CreateMeasurementDict fails for Savage (Old way).";
                          goto LABEL_256;
                        }
                      }
                    }
                    CFStringRef v40 = CFCopyDescription(cf);
                    if (v40)
                    {
                      CFStringRef v42 = v40;
                      if (CFStringGetCString(v40, logString, 4096, 0)) {
                        CFStringRef v44 = logString;
                      }
                      else {
                        CFStringRef v44 = "No C string description available.";
                      }
                      SavageRestoreInfoLog("%s [input]: SavageMeasurementDict - %s \n", v43, "SavageUpdaterCreateRequest", v44);
                      CFRelease(v42);
                    }
                    else
                    {
                      SavageRestoreInfoLog("%s [input]: SavageMeasurementDict - %s \n", v41, "SavageUpdaterCreateRequest", "No C string description available.");
                    }
                    CFStringRef v45 = CFCopyDescription(v187);
                    if (v45)
                    {
                      CFStringRef v47 = v45;
                      if (CFStringGetCString(v45, logString, 4096, 0)) {
                        uint64_t v49 = logString;
                      }
                      else {
                        uint64_t v49 = "No C string description available.";
                      }
                      SavageRestoreInfoLog("%s [input]: YonkersMeasurementDict - %s \n", v48, "SavageUpdaterCreateRequest", v49);
                      CFRelease(v47);
                    }
                    else
                    {
                      SavageRestoreInfoLog("%s [input]: YonkersMeasurementDict - %s \n", v46, "SavageUpdaterCreateRequest", "No C string description available.");
                    }
LABEL_49:
                    if (!CFDictionaryContainsKey(a1, @"ReceiptManifest")) {
                      goto LABEL_65;
                    }
                    CFTypeID v50 = CFDictionaryGetValue(a1, @"ReceiptManifest");
                    CFTypeID v18 = SafeRetain(v50);
                    CFDictionaryRef v51 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v18, @"SEP");
                    if (v51)
                    {
                      CFDictionaryRef v52 = v51;
                      CFTypeID v53 = CFGetTypeID(v51);
                      if (v53 == CFDictionaryGetTypeID())
                      {
                        unint64_t v54 = CFDictionaryGetValue(v52, @"Digest");
                        CFStringRef v55 = CFCopyDescription(v54);
                        if (v55)
                        {
                          CFStringRef v57 = v55;
                          if (CFStringGetCString(v55, logString, 4096, 0)) {
                            uint64_t v59 = logString;
                          }
                          else {
                            uint64_t v59 = "No C string description available.";
                          }
                          SavageRestoreInfoLog("%s [input]: SEP Digest from ReceiptManifest - %s \n", v58, "SavageUpdaterCreateRequest", v59);
                          CFRelease(v57);
                        }
                        else
                        {
                          SavageRestoreInfoLog("%s [input]: SEP Digest from ReceiptManifest - %s \n", v56, "SavageUpdaterCreateRequest", "No C string description available.");
                        }
                      }
                    }
                    if (!v18)
                    {
LABEL_65:
                      CFStringRef v32 = @"SavageErrorDomain";
                      uint64_t v33 = "SavageUpdaterCreateRequest: ReceiptManifest is missing in input options";
                      unsigned int v63 = 6;
                      uint64_t v64 = (uint64_t)a1;
LABEL_66:
                      CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)v33, v63, v64, v32);
                      CFTypeID v18 = 0;
                      goto LABEL_67;
                    }
                    if (CFDictionaryContainsKey((CFDictionaryRef)v12, @"YonkersDeviceInfo"))
                    {
                      CFTypeRef v60 = CFDictionaryGetValue((CFDictionaryRef)v12, @"YonkersDeviceInfo");
                      CFDictionaryRef v37 = (const __CFDictionary *)SafeRetain(v60);
                      unsigned int YonkersRequestDictForTATSU = CreateYonkersRequestDictForTATSU(v37, (const __CFDictionary *)v5, (CFDictionaryRef)v187, (uint64_t)v18, (CFTypeRef *)&allocator);
                      if (YonkersRequestDictForTATSU || !allocator)
                      {
                        CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCreateRequest: CreateYonkersRequestDictForTATSU fails.", YonkersRequestDictForTATSU, (uint64_t)a1, @"YonkersErrorDomain");
                        goto LABEL_68;
                      }
                      if (v37 && CFDictionaryGetCount((CFDictionaryRef)v12) == 1)
                      {
                        CFAllocatorRef v62 = allocator;
                        goto LABEL_224;
                      }
                      char v181 = a2;
                    }
                    else
                    {
                      char v181 = a2;
                      CFDictionaryRef v37 = 0;
                    }
                    CFDictionaryRef v71 = (const __CFDictionary *)cf;
                    *(_DWORD *)buffer = 0;
                    std::string v189 = 0;
                    CFStringRef key = 0;
                    CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
                    CFMutableDictionaryRef v73 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                    if (!v71)
                    {
                      CFTypeRef v74 = 0;
                      unsigned int v115 = 2;
                      goto LABEL_216;
                    }
                    if (allocator)
                    {
                      CFTypeRef v74 = (__CFDictionary *)SafeRetain(allocator);
                    }
                    else
                    {
                      CFTypeRef v74 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                      if (!v74)
                      {
                        unsigned int v115 = 3;
                        goto LABEL_216;
                      }
                    }
                    CFStringRef v75 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v5, @"Savage,ChipID");
                    if (!v75)
                    {
                      unsigned int v115 = 17;
                      goto LABEL_216;
                    }
                    CFStringRef v76 = v75;
                    CFDictionaryRef theDict = v73;
                    CFTypeID v77 = CFGetTypeID(v75);
                    if (v77 != CFStringGetTypeID())
                    {
LABEL_245:
                      unsigned int v115 = 17;
                      goto LABEL_215;
                    }
                    if (!SavageCFStringToUInt32(v76, buffer, 0)) {
                      goto LABEL_246;
                    }
                    SavageCFDictionarySetInteger32(v74, @"Savage,ChipID", *(int *)buffer);
                    CFStringRef v78 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v5, @"Savage,PatchEpoch");
                    if (!v78) {
                      goto LABEL_245;
                    }
                    CFStringRef v79 = v78;
                    CFTypeID v80 = CFGetTypeID(v78);
                    if (v80 != CFStringGetTypeID()) {
                      goto LABEL_245;
                    }
                    if (!SavageCFStringToUInt32(v79, buffer, 0))
                    {
LABEL_246:
                      unsigned int v115 = 11;
                      goto LABEL_215;
                    }
                    SavageCFDictionarySetInteger32(v74, @"Savage,PatchEpoch", *(int *)buffer);
                    CFDataRef v81 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,ChipID");
                    if (v81 && (CFDataRef v82 = v81, v83 = CFGetTypeID(v81), v83 == CFDataGetTypeID()))
                    {
                      v192.CFIndex location = 0;
                      v192.CFIndex length = 4;
                      CFDataGetBytes(v82, v192, buffer);
                      *(_DWORD *)buffer = bswap32(*(unsigned int *)buffer);
                      uint64_t v84 = (__CFData *)*MEMORY[0x263EFFB40];
                      if (*(_DWORD *)buffer >= 0x5065u)
                      {
                        CFDictionaryAddValue(v74, @"@Brunor,Ticket", (const void *)*MEMORY[0x263EFFB40]);
                        CFErrorRef v85 = @"Brunor,FdrRootCaDigest";
                        id v86 = v74;
                        CFMutableDataRef v87 = Mutable;
                        goto LABEL_98;
                      }
                    }
                    else
                    {
                      uint64_t v84 = (__CFData *)*MEMORY[0x263EFFB40];
                    }
                    CFErrorRef v85 = @"@Savage,Ticket";
                    id v86 = v74;
                    CFMutableDataRef v87 = v84;
LABEL_98:
                    CFDictionaryAddValue(v86, v85, v87);
                    CFBooleanRef v88 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,ProductionMode");
                    if (v88)
                    {
                      CFBooleanRef v89 = v88;
                      char v183 = Mutable;
                      CFTypeID v90 = CFGetTypeID(v88);
                      if (v90 != CFBooleanGetTypeID()) {
                        goto LABEL_244;
                      }
                      int v91 = CFBooleanGetValue(v89);
                      char v185 = (__CFData *)*MEMORY[0x263EFFB38];
                      long long v92 = v91 ? v84 : (__CFData *)*MEMORY[0x263EFFB38];
                      CFDictionaryAddValue(v74, @"Savage,ProductionMode", v92);
                      uint64_t v93 = CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,UID");
                      if (!v93
                        || (uint64_t v94 = v93, v95 = CFGetTypeID(v93), v95 != CFDataGetTypeID())
                        || (CFDictionaryAddValue(v74, @"Savage,UID", v94),
                            (uint64_t v96 = CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,Nonce")) == 0)
                        || (DERItem v97 = v96, v98 = CFGetTypeID(v96), v98 != CFDataGetTypeID()))
                      {
LABEL_244:
                        unsigned int v115 = 17;
LABEL_214:
                        CFMutableDataRef Mutable = v183;
LABEL_215:
                        CFMutableDictionaryRef v73 = theDict;
                        goto LABEL_216;
                      }
                      CFDictionaryRef v182 = v37;
                      CFDictionaryAddValue(v74, @"Savage,Nonce", v97);
                      unsigned int RelevantMeasurementTags = GetRelevantMeasurementTags((CFDictionaryRef)v12, (__CFString **)&key, &v189);
                      unsigned int v100 = RelevantMeasurementTags;
                      if (key && v189)
                      {
                        long long v101 = CFDictionaryGetValue(v71, @"MeasurementDictPatch");
                        if (v101)
                        {
                          uint64_t v102 = v101;
                          CFTypeID v103 = CFGetTypeID(v101);
                          if (v103 == CFDictionaryGetTypeID())
                          {
                            CFDictionaryAddValue(v74, key, v102);
                            CFDictionaryRef v104 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v18, @"SEP");
                            if (v104)
                            {
                              CFDictionaryRef v105 = v104;
                              CFTypeID v106 = CFGetTypeID(v104);
                              if (v106 == CFDictionaryGetTypeID())
                              {
                                uint64_t v107 = CFDictionaryGetValue(v105, @"Digest");
                                if (v107)
                                {
                                  long long v108 = v107;
                                  CFTypeID v109 = CFGetTypeID(v107);
                                  if (v109 == CFDataGetTypeID())
                                  {
                                    CFDictionarySetValue(theDict, @"Digest", v108);
                                    CFDictionaryAddValue(v74, @"SEP", theDict);
                                  }
                                }
                              }
                            }
                            CFBooleanRef v110 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Brunor,HarvestWrap");
                            if (v110)
                            {
                              CFBooleanRef v111 = v110;
                              CFTypeID v112 = CFGetTypeID(v110);
                              if (v112 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v111)) {
                                  unsigned int v113 = v84;
                                }
                                else {
                                  unsigned int v113 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Brunor,HarvestWrap", v113);
                              }
                            }
                            CFBooleanRef v114 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Brunor,HarvestUnwrap");
                            unsigned int v115 = v100;
                            if (v114)
                            {
                              CFBooleanRef v116 = v114;
                              CFTypeID v117 = CFGetTypeID(v114);
                              if (v117 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v116)) {
                                  int64x2_t v118 = v84;
                                }
                                else {
                                  int64x2_t v118 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Brunor,HarvestUnwrap", v118);
                              }
                            }
                            CFBooleanRef v119 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Brunor,Authenticate");
                            CFDictionaryRef v37 = v182;
                            if (v119)
                            {
                              CFBooleanRef v120 = v119;
                              CFTypeID v121 = CFGetTypeID(v119);
                              if (v121 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v120)) {
                                  uint64_t v122 = v84;
                                }
                                else {
                                  uint64_t v122 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Brunor,Authenticate", v122);
                              }
                            }
                            CFBooleanRef v123 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,ReadECKey");
                            if (v123)
                            {
                              CFBooleanRef v124 = v123;
                              CFTypeID v125 = CFGetTypeID(v123);
                              if (v125 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v124)) {
                                  uint64_t v126 = v84;
                                }
                                else {
                                  uint64_t v126 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,ReadECKey", v126);
                              }
                            }
                            CFBooleanRef v127 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,WriteECKey");
                            if (v127)
                            {
                              CFBooleanRef v128 = v127;
                              CFTypeID v129 = CFGetTypeID(v127);
                              if (v129 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v128)) {
                                  uint64_t v130 = v84;
                                }
                                else {
                                  uint64_t v130 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,WriteECKey", v130);
                              }
                            }
                            CFBooleanRef v131 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,WriteUID");
                            if (v131)
                            {
                              CFBooleanRef v132 = v131;
                              CFTypeID v133 = CFGetTypeID(v131);
                              if (v133 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v132)) {
                                  uint64_t v134 = v84;
                                }
                                else {
                                  uint64_t v134 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,WriteUID", v134);
                              }
                            }
                            CFBooleanRef v135 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,WriteEpoch");
                            if (v135)
                            {
                              CFBooleanRef v136 = v135;
                              CFTypeID v137 = CFGetTypeID(v135);
                              if (v137 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v136)) {
                                  std::string::size_type v138 = v84;
                                }
                                else {
                                  std::string::size_type v138 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,WriteEpoch", v138);
                              }
                            }
                            CFBooleanRef v139 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,ReadGID");
                            if (v139)
                            {
                              CFBooleanRef v140 = v139;
                              CFTypeID v141 = CFGetTypeID(v139);
                              if (v141 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v140)) {
                                  char v142 = v84;
                                }
                                else {
                                  char v142 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,ReadGID", v142);
                              }
                            }
                            CFBooleanRef v143 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,ReadFWKey");
                            if (v143)
                            {
                              CFBooleanRef v144 = v143;
                              CFTypeID v145 = CFGetTypeID(v143);
                              if (v145 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v144)) {
                                  char v146 = v84;
                                }
                                else {
                                  char v146 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,ReadFWKey", v146);
                              }
                            }
                            CFBooleanRef v147 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,AllowOfflineBoot");
                            if (v147)
                            {
                              CFBooleanRef v148 = v147;
                              CFTypeID v149 = CFGetTypeID(v147);
                              if (v149 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v148)) {
                                  char v150 = v84;
                                }
                                else {
                                  char v150 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,AllowOfflineBoot", v150);
                              }
                            }
                            CFBooleanRef v151 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,TempDemote");
                            if (v151)
                            {
                              CFBooleanRef v152 = v151;
                              CFTypeID v153 = CFGetTypeID(v151);
                              if (v153 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v152)) {
                                  char v154 = v84;
                                }
                                else {
                                  char v154 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,TempDemote", v154);
                              }
                            }
                            CFBooleanRef v155 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,AccessSensor");
                            if (v155)
                            {
                              CFBooleanRef v156 = v155;
                              CFTypeID v157 = CFGetTypeID(v155);
                              if (v157 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v156)) {
                                  char v158 = v84;
                                }
                                else {
                                  char v158 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,AccessSensor", v158);
                              }
                            }
                            CFBooleanRef v159 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,AccessSecurity");
                            if (v159)
                            {
                              CFBooleanRef v160 = v159;
                              CFTypeID v161 = CFGetTypeID(v159);
                              if (v161 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v160)) {
                                  uint64_t v162 = v84;
                                }
                                else {
                                  uint64_t v162 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,AccessSecurity", v162);
                              }
                            }
                            CFBooleanRef v163 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,FADemote");
                            if (v163)
                            {
                              CFBooleanRef v164 = v163;
                              CFTypeID v165 = CFGetTypeID(v163);
                              if (v165 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v164)) {
                                  uint64_t v166 = v84;
                                }
                                else {
                                  uint64_t v166 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,FADemote", v166);
                              }
                            }
                            CFBooleanRef v167 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,DebugStatus");
                            if (v167)
                            {
                              CFBooleanRef v168 = v167;
                              CFTypeID v169 = CFGetTypeID(v167);
                              if (v169 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v168)) {
                                  uint64_t v170 = v84;
                                }
                                else {
                                  uint64_t v170 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,DebugStatus", v170);
                              }
                            }
                            CFBooleanRef v171 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v12, @"Savage,Provisioning");
                            if (v171)
                            {
                              CFBooleanRef v172 = v171;
                              CFTypeID v173 = CFGetTypeID(v171);
                              if (v173 == CFBooleanGetTypeID())
                              {
                                if (CFBooleanGetValue(v172)) {
                                  uint64_t v174 = v84;
                                }
                                else {
                                  uint64_t v174 = v185;
                                }
                                CFDictionaryAddValue(v74, @"Savage,Provisioning", v174);
                              }
                            }
                            if (!allocator) {
                              CFAllocatorRef allocator = (CFAllocatorRef)SafeRetain(v74);
                            }
                            goto LABEL_214;
                          }
                        }
                        unsigned int v115 = 17;
                        CFMutableDataRef Mutable = v183;
                        CFMutableDictionaryRef v73 = theDict;
                      }
                      else
                      {
                        CFMutableDataRef Mutable = v183;
                        CFMutableDictionaryRef v73 = theDict;
                        unsigned int v115 = RelevantMeasurementTags;
                      }
                      CFDictionaryRef v37 = v182;
LABEL_216:
                      if (Mutable) {
                        CFRelease(Mutable);
                      }
                      if (v73) {
                        CFRelease(v73);
                      }
                      if (v74) {
                        CFRelease(v74);
                      }
                      if (v115 || (CFAllocatorRef v62 = allocator) == 0)
                      {
                        CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCreateRequest: CreateRequestDictForTATSU fails.", v115, (uint64_t)a1, @"SavageErrorDomain");
                        a2 = v181;
                        goto LABEL_68;
                      }
LABEL_224:
                      CFStringRef v175 = CFCopyDescription(v62);
                      if (v175)
                      {
                        CFStringRef v177 = v175;
                        if (CFStringGetCString(v175, logString, 4096, 0)) {
                          char v179 = logString;
                        }
                        else {
                          char v179 = "No C string description available.";
                        }
                        SavageRestoreInfoLog("%s [output]: %s \n", v178, "SavageUpdaterCreateRequest", v179);
                        CFRelease(v177);
                      }
                      else
                      {
                        SavageRestoreInfoLog("%s [output]: %s \n", v176, "SavageUpdaterCreateRequest", "No C string description available.");
                      }
                      goto LABEL_230;
                    }
                    goto LABEL_245;
                  }
                }
                CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCreateRequest: kSavageOptionFirmwareData is NULL in input options", 2u, (uint64_t)a1, @"SavageErrorDomain");
LABEL_67:
                CFDictionaryRef v37 = 0;
                goto LABEL_68;
              }
            }
          }
          CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)"SavageUpdaterCreateRequest: Cannot get DeviceInfo", 2u, (uint64_t)a1, @"SavageErrorDomain");
          CFTypeID v18 = 0;
          CFTypeRef v12 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        SavageRestoreInfoLog("%s [input]: BuildIdentity %s \n", v7, "SavageUpdaterCreateRequest", "No C string description available.");
        if (v5) {
          goto LABEL_8;
        }
      }
    }
    CFStringRef v34 = "SavageUpdaterCreateRequest: BuildIdentity is NULL in input options";
    uint64_t v35 = (uint64_t)a1;
  }
  else
  {
    CFStringRef v34 = "SavageUpdaterCreateRequest: options is NULL";
    uint64_t v35 = 0;
  }
  CFErrorRef CFErrorWithDomain = createCFErrorWithDomain((uint64_t)v34, 2u, v35, @"SavageErrorDomain");
  CFTypeID v18 = 0;
  CFTypeRef v12 = 0;
  CFDictionaryRef v37 = 0;
  CFTypeRef v5 = 0;
LABEL_68:
  if (a2 && CFErrorWithDomain)
  {
    *a2 = SafeRetain(CFErrorWithDomain);
    CFStringRef v65 = CFErrorCopyDescription(CFErrorWithDomain);
    if (v65)
    {
      CFStringRef v67 = v65;
      int CString = CFStringGetCString(v65, logString, 4096, 0);
      uint64_t v70 = "No C string description available.";
      if (CString) {
        uint64_t v70 = logString;
      }
      SavageRestoreInfoLog("%s [error]: %s \n", v69, "SavageUpdaterCreateRequest", v70);
      CFRelease(v67);
    }
    else
    {
      SavageRestoreInfoLog("%s [error]: %s \n", v66, "SavageUpdaterCreateRequest", "No C string description available.");
    }
  }
  else if (!CFErrorWithDomain)
  {
    if (!v18) {
      goto LABEL_231;
    }
LABEL_230:
    CFRelease(v18);
    goto LABEL_231;
  }
  CFRelease(CFErrorWithDomain);
  if (v18) {
    goto LABEL_230;
  }
LABEL_231:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v187)
  {
    CFRelease(v187);
    CFTypeRef v187 = 0;
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v37) {
    CFRelease(v37);
  }
  return allocator;
}